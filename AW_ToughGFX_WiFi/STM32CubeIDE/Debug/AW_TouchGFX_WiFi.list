
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b94  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000191c  08018e44  08018e44  00028e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801a760  0801a760  0002a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801a778  0801a778  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801a778  0801a778  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801a778  0801a778  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801a778  0801a778  0002a778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801a78c  0801a78c  0002a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  0801a794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000af80  24000110  0801a8a4  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b090  0801a8a4  0003b090  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0004dfe1  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0009d15e  00000000  00000000  000edbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00010df1  00000000  00000000  0018ad25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003110  00000000  00000000  0019bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016df19  00000000  00000000  0019ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003238  00000000  00000000  0030cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0002d0a6  00000000  00000000  0030fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003da61  00000000  00000000  0033ce26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0037a887  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000091ec  00000000  00000000  0037a958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018e2c 	.word	0x08018e2c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08018e2c 	.word	0x08018e2c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f004 fad7 	bl	800496c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f017 fd59 	bl	8017e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f001 fc5b 	bl	8001c7c <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0801a794 	.word	0x0801a794
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 80003d8:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 80003dc:	2400b090 	.word	0x2400b090

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80003e2:	4770      	bx	lr

080003e4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003e4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80003e6:	f000 ff4f 	bl	8001288 <touchgfx_init>
}
 80003ea:	bd08      	pop	{r3, pc}

080003ec <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80003ec:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80003ee:	f000 ffc5 	bl	800137c <touchgfx_taskEntry>
}
 80003f2:	bd08      	pop	{r3, pc}

080003f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <_ZN20STM32TouchControllerD1Ev+0xc>)
 80003f6:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 80003f8:	4a02      	ldr	r2, [pc, #8]	; (8000404 <_ZN20STM32TouchControllerD1Ev+0x10>)
 80003fa:	6002      	str	r2, [r0, #0]
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	08018ea4 	.word	0x08018ea4
 8000404:	08018e8c 	.word	0x08018e8c

08000408 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000408:	b500      	push	{lr}
 800040a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800040c:	2308      	movs	r3, #8
 800040e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000410:	2000      	movs	r0, #0
 8000412:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <_ZN20STM32TouchController4initEv+0x24>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <_ZN20STM32TouchController4initEv+0x28>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000420:	4669      	mov	r1, sp
 8000422:	f004 f9af 	bl	8004784 <BSP_TS_Init>
}
 8000426:	b005      	add	sp, #20
 8000428:	f85d fb04 	ldr.w	pc, [sp], #4
 800042c:	2400ae06 	.word	0x2400ae06
 8000430:	2400ae08 	.word	0x2400ae08

08000434 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	b085      	sub	sp, #20
 8000438:	460d      	mov	r5, r1
 800043a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800043c:	2000      	movs	r0, #0
 800043e:	9001      	str	r0, [sp, #4]
 8000440:	9002      	str	r0, [sp, #8]
 8000442:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000444:	a901      	add	r1, sp, #4
 8000446:	f004 fa0d 	bl	8004864 <BSP_TS_GetState>
 800044a:	b140      	cbz	r0, 800045e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000450:	f383 8811 	msr	BASEPRI, r3
 8000454:	f3bf 8f6f 	isb	sy
 8000458:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800045c:	e7fe      	b.n	800045c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	b913      	cbnz	r3, 8000468 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000462:	2000      	movs	r0, #0
}
 8000464:	b005      	add	sp, #20
 8000466:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800046c:	9b03      	ldr	r3, [sp, #12]
 800046e:	6023      	str	r3, [r4, #0]
        return true;
 8000470:	2001      	movs	r0, #1
 8000472:	e7f7      	b.n	8000464 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

08000474 <_ZN20STM32TouchControllerD0Ev>:
 8000474:	b510      	push	{r4, lr}
 8000476:	4604      	mov	r4, r0
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <_ZN20STM32TouchControllerD0Ev+0x18>)
 800047a:	6003      	str	r3, [r0, #0]
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 800047e:	6003      	str	r3, [r0, #0]
 8000480:	2104      	movs	r1, #4
 8000482:	f017 fb88 	bl	8017b96 <_ZdlPvj>
 8000486:	4620      	mov	r0, r4
 8000488:	bd10      	pop	{r4, pc}
 800048a:	bf00      	nop
 800048c:	08018ea4 	.word	0x08018ea4
 8000490:	08018e8c 	.word	0x08018e8c

08000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000494:	b508      	push	{r3, lr}
    switch (id)
 8000496:	2803      	cmp	r0, #3
 8000498:	d80e      	bhi.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 800049a:	e8df f000 	tbb	[pc, r0]
 800049e:	0e02      	.short	0x0e02
 80004a0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004a4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	0952      	lsrs	r2, r2, #5
 80004ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b2:	4815      	ldr	r0, [pc, #84]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004b4:	f004 ff36 	bl	8005324 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004b8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004bc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	0952      	lsrs	r2, r2, #5
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004cc:	f004 ff2a 	bl	8005324 <HAL_GPIO_WritePin>
        break;
 80004d0:	e7f2      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 80004e4:	f004 ff1e 	bl	8005324 <HAL_GPIO_WritePin>
        break;
 80004e8:	e7e6      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f004 ff12 	bl	8005324 <HAL_GPIO_WritePin>
}
 8000500:	e7da      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000502:	bf00      	nop
 8000504:	2400012c 	.word	0x2400012c
 8000508:	58021c00 	.word	0x58021c00
 800050c:	58022000 	.word	0x58022000

08000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000510:	b508      	push	{r3, lr}
    switch (id)
 8000512:	2803      	cmp	r0, #3
 8000514:	d80e      	bhi.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000516:	e8df f000 	tbb	[pc, r0]
 800051a:	0e02      	.short	0x0e02
 800051c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000520:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000524:	b103      	cbz	r3, 8000528 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000526:	2001      	movs	r0, #1
 8000528:	4602      	mov	r2, r0
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000530:	f004 fef8 	bl	8005324 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000534:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800053c:	b903      	cbnz	r3, 8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800053e:	2000      	movs	r0, #0
 8000540:	4602      	mov	r2, r0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000548:	f004 feec 	bl	8005324 <HAL_GPIO_WritePin>
        break;
 800054c:	e7f2      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b133      	cbz	r3, 8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800055e:	f004 fee1 	bl	8005324 <HAL_GPIO_WritePin>
        break;
 8000562:	e7e7      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000564:	2200      	movs	r2, #0
 8000566:	e7f7      	b.n	8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800056a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056e:	b133      	cbz	r3, 800057e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f004 fed4 	bl	8005324 <HAL_GPIO_WritePin>
}
 800057c:	e7da      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	2200      	movs	r2, #0
 8000580:	e7f7      	b.n	8000572 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 8000582:	bf00      	nop
 8000584:	2400012c 	.word	0x2400012c
 8000588:	58021c00 	.word	0x58021c00
 800058c:	58022000 	.word	0x58022000

08000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8000590:	b508      	push	{r3, lr}
    switch (id)
 8000592:	2803      	cmp	r0, #3
 8000594:	d808      	bhi.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 8000596:	e8df f000 	tbb	[pc, r0]
 800059a:	0802      	.short	0x0802
 800059c:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005a4:	f004 fec4 	bl	8005330 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005a8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005b0:	f004 febe 	bl	8005330 <HAL_GPIO_TogglePin>
        break;
 80005b4:	e7f8      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005bc:	f004 feb8 	bl	8005330 <HAL_GPIO_TogglePin>
        break;
 80005c0:	e7f2      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005c8:	f004 feb2 	bl	8005330 <HAL_GPIO_TogglePin>
}
 80005cc:	e7ec      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005ce:	bf00      	nop
 80005d0:	58021c00 	.word	0x58021c00
 80005d4:	58022000 	.word	0x58022000

080005d8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 80005d8:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80005dc:	2301      	movs	r3, #1
 80005de:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80005e2:	4770      	bx	lr

080005e4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80005e4:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 80005e6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80005ea:	b123      	cbz	r3, 80005f6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 80005ec:	6840      	ldr	r0, [r0, #4]
 80005ee:	6803      	ldr	r3, [r0, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 80005f4:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	e7fc      	b.n	80005f4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

080005fa <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80005fa:	2000      	movs	r0, #0
 80005fc:	4770      	bx	lr
	...

08000600 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000600:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000602:	3900      	subs	r1, #0
 8000604:	bf18      	it	ne
 8000606:	2101      	movne	r1, #1
 8000608:	4b01      	ldr	r3, [pc, #4]	; (8000610 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800060a:	7019      	strb	r1, [r3, #0]
    }
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2400ae0b 	.word	0x2400ae0b

08000614 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000614:	2000      	movs	r0, #0
 8000616:	4770      	bx	lr

08000618 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000618:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800061a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800061c:	b10b      	cbz	r3, 8000622 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800061e:	4608      	mov	r0, r1
 8000620:	4798      	blx	r3
        }
    }
 8000622:	bd08      	pop	{r3, pc}

08000624 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000624:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000628:	4770      	bx	lr

0800062a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800062a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800062c:	6840      	ldr	r0, [r0, #4]
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4798      	blx	r3
    }
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000638:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800063c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000640:	429a      	cmp	r2, r3
 8000642:	d00c      	beq.n	800065e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b9ab      	cbnz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800064c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000650:	8818      	ldrh	r0, [r3, #0]
 8000652:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000654:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b143      	cbz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000666:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800066a:	8818      	ldrh	r0, [r3, #0]
 800066c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800066e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
        }
    }
 8000676:	4770      	bx	lr
 8000678:	2400ae04 	.word	0x2400ae04
 800067c:	2400ae02 	.word	0x2400ae02
 8000680:	2400ae00 	.word	0x2400ae00

08000684 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <_ZN11TouchGFXHALD1Ev+0x10>)
 8000686:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <_ZN11TouchGFXHALD1Ev+0x14>)
 800068a:	6002      	str	r2, [r0, #0]
    {
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <_ZN11TouchGFXHALD1Ev+0x18>)
 800068e:	6002      	str	r2, [r0, #0]
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	08019034 	.word	0x08019034
 8000698:	08019634 	.word	0x08019634
 800069c:	0801a0b4 	.word	0x0801a0b4

080006a0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006a0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006a2:	f000 fffb 	bl	800169c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006a6:	bd08      	pop	{r3, pc}

080006a8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006a8:	b508      	push	{r3, lr}
 80006aa:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006b2:	4798      	blx	r3
    enableInterrupts();
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006b8:	4620      	mov	r0, r4
 80006ba:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006bc:	f000 f91e 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c4:	4620      	mov	r0, r4
 80006c6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <_ZN11TouchGFXHAL9taskEntryEv+0x50>)
 80006ce:	f004 fe29 	bl	8005324 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006d2:	4d0a      	ldr	r5, [pc, #40]	; (80006fc <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4628      	mov	r0, r5
 80006da:	f004 fe23 	bl	8005324 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4628      	mov	r0, r5
 80006e4:	f004 fe1e 	bl	8005324 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80006e8:	f000 f908 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f0:	4620      	mov	r0, r4
 80006f2:	4798      	blx	r3
    for (;;)
 80006f4:	e7f8      	b.n	80006e8 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
 80006f6:	bf00      	nop
 80006f8:	58022800 	.word	0x58022800
 80006fc:	58020000 	.word	0x58020000

08000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000700:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000702:	f000 ff57 	bl	80015b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8000706:	bd08      	pop	{r3, pc}

08000708 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000708:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800070a:	f000 ff59 	bl	80015c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800070e:	bd08      	pop	{r3, pc}

08000710 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000710:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000712:	f000 ffeb 	bl	80016ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000722:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000726:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800072a:	e000      	b.n	800072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800072c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800072e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000732:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000736:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800073a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800073e:	4907      	ldr	r1, [pc, #28]	; (800075c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000740:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000744:	4613      	mov	r3, r2
 8000746:	3a01      	subs	r2, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f2      	bne.n	8000732 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 800074c:	1e43      	subs	r3, r0, #1
 800074e:	2800      	cmp	r0, #0
 8000750:	d1ec      	bne.n	800072c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000752:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000756:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800075a:	bd10      	pop	{r4, pc}
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000760:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000762:	f000 fee5 	bl	8001530 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000766:	bd08      	pop	{r3, pc}

08000768 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000768:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800076a:	f000 feeb 	bl	8001544 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800076e:	bd08      	pop	{r3, pc}

08000770 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000770:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000772:	f000 fef1 	bl	8001558 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000776:	bd08      	pop	{r3, pc}

08000778 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000778:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800077a:	f000 ff01 	bl	8001580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800077e:	bd08      	pop	{r3, pc}

08000780 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000780:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000782:	b161      	cbz	r1, 800079e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000784:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000786:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000788:	3a00      	subs	r2, #0
 800078a:	bf18      	it	ne
 800078c:	2201      	movne	r2, #1
 800078e:	4907      	ldr	r1, [pc, #28]	; (80007ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 8000790:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 8000792:	6802      	ldr	r2, [r0, #0]
 8000794:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8000798:	4619      	mov	r1, r3
 800079a:	4790      	blx	r2
    }
 800079c:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007a2:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007a8:	f017 fa24 	bl	8017bf4 <__assert_func>
 80007ac:	2400ae0a 	.word	0x2400ae0a
 80007b0:	08018eb4 	.word	0x08018eb4
 80007b4:	08018eec 	.word	0x08018eec
 80007b8:	08018f3c 	.word	0x08018f3c

080007bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007bc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d808      	bhi.n	80007d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d804      	bhi.n	80007d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80007d0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80007d4:	801a      	strh	r2, [r3, #0]
    }
 80007d6:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80007dc:	219e      	movs	r1, #158	; 0x9e
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80007e0:	f017 fa08 	bl	8017bf4 <__assert_func>
 80007e4:	2400ae00 	.word	0x2400ae00
 80007e8:	2400ae02 	.word	0x2400ae02
 80007ec:	2400ae06 	.word	0x2400ae06
 80007f0:	2400ae08 	.word	0x2400ae08
 80007f4:	08018f84 	.word	0x08018f84
 80007f8:	08018fe8 	.word	0x08018fe8
 80007fc:	08018f3c 	.word	0x08018f3c

08000800 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000800:	b510      	push	{r4, lr}
 8000802:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000804:	f00b f9f4 	bl	800bbf0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800080e:	4620      	mov	r0, r4
 8000810:	4798      	blx	r3
    }
 8000812:	bd10      	pop	{r4, pc}

08000814 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000814:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000816:	f00a fc37 	bl	800b088 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800081a:	bd08      	pop	{r3, pc}

0800081c <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800081c:	b510      	push	{r4, lr}
 800081e:	4604      	mov	r4, r0
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000822:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <_ZN11TouchGFXHALD0Ev+0x20>)
 8000826:	6003      	str	r3, [r0, #0]
    {
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_ZN11TouchGFXHALD0Ev+0x24>)
 800082a:	6003      	str	r3, [r0, #0]
 800082c:	217c      	movs	r1, #124	; 0x7c
 800082e:	f017 f9b2 	bl	8017b96 <_ZdlPvj>
 8000832:	4620      	mov	r0, r4
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	08019034 	.word	0x08019034
 800083c:	08019634 	.word	0x08019634
 8000840:	0801a0b4 	.word	0x0801a0b4

08000844 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000844:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000846:	2200      	movs	r2, #0
 8000848:	2101      	movs	r1, #1
 800084a:	4608      	mov	r0, r1
 800084c:	f007 ff14 	bl	8008678 <osSemaphoreNew>
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000852:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000854:	b140      	cbz	r0, 8000868 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	2001      	movs	r0, #1
 800085c:	f007 ffcb 	bl	80087f6 <osMessageQueueNew>
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000862:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000864:	b130      	cbz	r0, 8000874 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 8000866:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800086c:	2128      	movs	r1, #40	; 0x28
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000870:	f017 f9c0 	bl	8017bf4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000878:	212c      	movs	r1, #44	; 0x2c
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800087c:	f017 f9ba 	bl	8017bf4 <__assert_func>
 8000880:	24000140 	.word	0x24000140
 8000884:	2400013c 	.word	0x2400013c
 8000888:	08019104 	.word	0x08019104
 800088c:	08019150 	.word	0x08019150
 8000890:	08019180 	.word	0x08019180
 8000894:	080191e0 	.word	0x080191e0

08000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8000898:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800089a:	f04f 31ff 	mov.w	r1, #4294967295
 800089e:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f007 ff45 	bl	8008730 <osSemaphoreAcquire>
}
 80008a6:	bd08      	pop	{r3, pc}
 80008a8:	24000140 	.word	0x24000140

080008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008ac:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008ae:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f007 ff71 	bl	8008798 <osSemaphoreRelease>
}
 80008b6:	bd08      	pop	{r3, pc}
 80008b8:	24000140 	.word	0x24000140

080008bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008bc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	f007 ff34 	bl	8008730 <osSemaphoreAcquire>
}
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	24000140 	.word	0x24000140

080008d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80008d0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f007 ff5f 	bl	8008798 <osSemaphoreRelease>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000140 	.word	0x24000140

080008e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80008e0:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80008e2:	2300      	movs	r3, #0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4903      	ldr	r1, [pc, #12]	; (80008f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	f007 ffcf 	bl	800888e <osMessageQueuePut>
}
 80008f0:	bd08      	pop	{r3, pc}
 80008f2:	bf00      	nop
 80008f4:	24000004 	.word	0x24000004
 80008f8:	2400013c 	.word	0x2400013c

080008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000900:	4c07      	ldr	r4, [pc, #28]	; (8000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000902:	2300      	movs	r3, #0
 8000904:	461a      	mov	r2, r3
 8000906:	a901      	add	r1, sp, #4
 8000908:	6820      	ldr	r0, [r4, #0]
 800090a:	f008 f800 	bl	800890e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	2200      	movs	r2, #0
 8000914:	a901      	add	r1, sp, #4
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	f007 fff9 	bl	800890e <osMessageQueueGet>
}
 800091c:	b002      	add	sp, #8
 800091e:	bd10      	pop	{r4, pc}
 8000920:	2400013c 	.word	0x2400013c

08000924 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000924:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8000926:	6803      	ldr	r3, [r0, #0]
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4798      	blx	r3
    }
 800092c:	bd08      	pop	{r3, pc}

0800092e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800092e:	2001      	movs	r0, #1
 8000930:	4770      	bx	lr

08000932 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000932:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000934:	6803      	ldr	r3, [r0, #0]
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	4798      	blx	r3
    }
 800093a:	bd08      	pop	{r3, pc}

0800093c <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800093c:	b508      	push	{r3, lr}
        return instance;
 800093e:	4b03      	ldr	r3, [pc, #12]	; (800094c <DMA2D_XferCpltCallback+0x10>)
 8000940:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000942:	6858      	ldr	r0, [r3, #4]
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800094a:	bd08      	pop	{r3, pc}
 800094c:	2400ae0c 	.word	0x2400ae0c

08000950 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000950:	4a08      	ldr	r2, [pc, #32]	; (8000974 <_ZN8STM32DMAD1Ev+0x24>)
 8000952:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <_ZN8STM32DMAD1Ev+0x28>)
 8000956:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800095a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800095e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000962:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_ZN8STM32DMAD1Ev+0x2c>)
 8000968:	60c2      	str	r2, [r0, #12]
    {
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_ZN8STM32DMAD1Ev+0x30>)
 800096c:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_ZN8STM32DMAD1Ev+0x34>)
 8000970:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8000972:	4770      	bx	lr
 8000974:	080193c0 	.word	0x080193c0
 8000978:	e000e100 	.word	0xe000e100
 800097c:	0801a1dc 	.word	0x0801a1dc
 8000980:	0801939c 	.word	0x0801939c
 8000984:	0801a18c 	.word	0x0801a18c

08000988 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8000988:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <_ZN8STM32DMA10initializeEv+0x40>)
 800098c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8000990:	f042 0210 	orr.w	r2, r2, #16
 8000994:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8000998:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800099c:	f002 0210 	and.w	r2, r2, #16
 80009a0:	9201      	str	r2, [sp, #4]
 80009a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009a6:	f042 0210 	orr.w	r2, r2, #16
 80009aa:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009ae:	f022 0210 	bic.w	r2, r2, #16
 80009b2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <_ZN8STM32DMA10initializeEv+0x44>)
 80009b6:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <_ZN8STM32DMA10initializeEv+0x48>)
 80009b8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009c2:	b002      	add	sp, #8
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	2400123c 	.word	0x2400123c
 80009d0:	0800093d 	.word	0x0800093d
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80009d8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80009dc:	4770      	bx	lr

080009de <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80009de:	b510      	push	{r4, lr}
 80009e0:	4604      	mov	r4, r0
}
 80009e2:	f7ff ffb5 	bl	8000950 <_ZN8STM32DMAD1Ev>
 80009e6:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80009ea:	4620      	mov	r0, r4
 80009ec:	f017 f8d3 	bl	8017b96 <_ZdlPvj>
 80009f0:	4620      	mov	r0, r4
 80009f2:	bd10      	pop	{r4, pc}

080009f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80009f4:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80009f6:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 80009f8:	2b0a      	cmp	r3, #10
 80009fa:	d809      	bhi.n	8000a10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 80009fc:	e8df f003 	tbb	[pc, r3]
 8000a00:	080e1006 	.word	0x080e1006
 8000a04:	10080808 	.word	0x10080808
 8000a08:	1010      	.short	0x1010
 8000a0a:	10          	.byte	0x10
 8000a0b:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a0c:	2002      	movs	r0, #2
        break;
 8000a0e:	e008      	b.n	8000a22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a14:	2187      	movs	r1, #135	; 0x87
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a18:	f017 f8ec 	bl	8017bf4 <__assert_func>
    switch (format)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e000      	b.n	8000a22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a20:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a24:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a26:	8aca      	ldrh	r2, [r1, #22]
 8000a28:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a2c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a32:	690a      	ldr	r2, [r1, #16]
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a36:	8b4a      	ldrh	r2, [r1, #26]
 8000a38:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a3c:	eba2 020c 	sub.w	r2, r2, ip
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a42:	680b      	ldr	r3, [r1, #0]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d008      	beq.n	8000a5a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a4a:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a50:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a56:	601a      	str	r2, [r3, #0]
    }
}
 8000a58:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a5a:	8b4a      	ldrh	r2, [r1, #26]
 8000a5c:	8a8b      	ldrh	r3, [r1, #20]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a62:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a64:	8b4a      	ldrh	r2, [r1, #26]
 8000a66:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a6a:	eba2 020c 	sub.w	r2, r2, ip
 8000a6e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000a70:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000a72:	7f08      	ldrb	r0, [r1, #28]
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000a76:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000a7a:	61da      	str	r2, [r3, #28]
 8000a7c:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000a7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a80:	690a      	ldr	r2, [r1, #16]
 8000a82:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a84:	690a      	ldr	r2, [r1, #16]
 8000a86:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	e7e4      	b.n	8000a58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000a8e:	bf00      	nop
 8000a90:	08019224 	.word	0x08019224
 8000a94:	08019240 	.word	0x08019240
 8000a98:	0801928c 	.word	0x0801928c
 8000a9c:	52001000 	.word	0x52001000
 8000aa0:	00030201 	.word	0x00030201
 8000aa4:	00010009 	.word	0x00010009
 8000aa8:	00020201 	.word	0x00020201

08000aac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000aac:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000aae:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ab0:	2b0b      	cmp	r3, #11
 8000ab2:	d815      	bhi.n	8000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ab4:	e8df f003 	tbb	[pc, r3]
 8000ab8:	141a1c06 	.word	0x141a1c06
 8000abc:	12141414 	.word	0x12141414
 8000ac0:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ac4:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ac6:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000ac8:	2b0b      	cmp	r3, #11
 8000aca:	d820      	bhi.n	8000b0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000acc:	e8df f003 	tbb	[pc, r3]
 8000ad0:	1f252712 	.word	0x1f252712
 8000ad4:	1d1f1f1f 	.word	0x1d1f1f1f
 8000ad8:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000adc:	2005      	movs	r0, #5
        break;
 8000ade:	e7f2      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000ae0:	4b75      	ldr	r3, [pc, #468]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000ae2:	4a76      	ldr	r2, [pc, #472]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000ae4:	2166      	movs	r1, #102	; 0x66
 8000ae6:	4876      	ldr	r0, [pc, #472]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000ae8:	f017 f884 	bl	8017bf4 <__assert_func>
    switch (format)
 8000aec:	2000      	movs	r0, #0
 8000aee:	e7ea      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000af0:	2001      	movs	r0, #1
 8000af2:	e7e8      	b.n	8000ac6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af4:	2402      	movs	r4, #2
    switch (format)
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d815      	bhi.n	8000b26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000afa:	e8df f003 	tbb	[pc, r3]
 8000afe:	1c12      	.short	0x1c12
 8000b00:	1414141a 	.word	0x1414141a
 8000b04:	1c1c1c14 	.word	0x1c1c1c14
 8000b08:	1c          	.byte	0x1c
 8000b09:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b0a:	2405      	movs	r4, #5
        break;
 8000b0c:	e7f3      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b0e:	4b6a      	ldr	r3, [pc, #424]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b10:	4a6a      	ldr	r2, [pc, #424]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b12:	2166      	movs	r1, #102	; 0x66
 8000b14:	486a      	ldr	r0, [pc, #424]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b16:	f017 f86d 	bl	8017bf4 <__assert_func>
    switch (format)
 8000b1a:	2400      	movs	r4, #0
 8000b1c:	e7eb      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b1e:	2401      	movs	r4, #1
 8000b20:	e7e9      	b.n	8000af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b22:	2502      	movs	r5, #2
        break;
 8000b24:	e008      	b.n	8000b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b26:	4b64      	ldr	r3, [pc, #400]	; (8000cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b28:	4a66      	ldr	r2, [pc, #408]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b2a:	2187      	movs	r1, #135	; 0x87
 8000b2c:	4864      	ldr	r0, [pc, #400]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b2e:	f017 f861 	bl	8017bf4 <__assert_func>
    switch (format)
 8000b32:	2500      	movs	r5, #0
 8000b34:	e000      	b.n	8000b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b36:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b38:	8b4a      	ldrh	r2, [r1, #26]
 8000b3a:	8a8b      	ldrh	r3, [r1, #20]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b42:	8b4a      	ldrh	r2, [r1, #26]
 8000b44:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b48:	eba2 020c 	sub.w	r2, r2, ip
 8000b4c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b4e:	8b0a      	ldrh	r2, [r1, #24]
 8000b50:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b54:	eba2 020c 	sub.w	r2, r2, ip
 8000b58:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b5a:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b5c:	8aca      	ldrh	r2, [r1, #22]
 8000b5e:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b62:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b68:	690a      	ldr	r2, [r1, #16]
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000b6c:	684a      	ldr	r2, [r1, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000b70:	680b      	ldr	r3, [r1, #0]
 8000b72:	2b80      	cmp	r3, #128	; 0x80
 8000b74:	d036      	beq.n	8000be4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000b76:	d813      	bhi.n	8000ba0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000b78:	2b20      	cmp	r3, #32
 8000b7a:	d07c      	beq.n	8000c76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b7c:	2b40      	cmp	r3, #64	; 0x40
 8000b7e:	d07a      	beq.n	8000c76 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	f040 8085 	bne.w	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000b86:	7f0b      	ldrb	r3, [r1, #28]
 8000b88:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b8c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b92:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000b94:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b96:	690a      	ldr	r2, [r1, #16]
 8000b98:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000b9a:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000b9c:	601a      	str	r2, [r3, #0]
        break;
 8000b9e:	e020      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba4:	d010      	beq.n	8000bc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000baa:	d171      	bne.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bac:	7f0b      	ldrb	r3, [r1, #28]
 8000bae:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000bb0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bb4:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bb6:	61da      	str	r2, [r3, #28]
 8000bb8:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bba:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bbc:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bbe:	690a      	ldr	r2, [r1, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bc2:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bc4:	601a      	str	r2, [r3, #0]
        break;
 8000bc6:	e00c      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bc8:	7f0b      	ldrb	r3, [r1, #28]
 8000bca:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000bcc:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bd8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bda:	690a      	ldr	r2, [r1, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bde:	4a3b      	ldr	r2, [pc, #236]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000be4:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be6:	7f0b      	ldrb	r3, [r1, #28]
 8000be8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bec:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bf2:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf4:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf6:	6908      	ldr	r0, [r1, #16]
 8000bf8:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000bfa:	1d10      	adds	r0, r2, #4
 8000bfc:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	b18b      	cbz	r3, 8000c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12c      	bne.n	8000c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c06:	7f0b      	ldrb	r3, [r1, #28]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d027      	beq.n	8000c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c0c:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c0e:	482e      	ldr	r0, [pc, #184]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c10:	69c4      	ldr	r4, [r0, #28]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c14:	4023      	ands	r3, r4
 8000c16:	8852      	ldrh	r2, [r2, #2]
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	61c3      	str	r3, [r0, #28]
                break;
 8000c24:	e009      	b.n	8000c3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c26:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c28:	69c8      	ldr	r0, [r1, #28]
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c2c:	4003      	ands	r3, r0
 8000c2e:	8852      	ldrh	r2, [r2, #2]
 8000c30:	3a01      	subs	r2, #1
 8000c32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c36:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c38:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c3c:	69d3      	ldr	r3, [r2, #28]
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f013 0f20 	tst.w	r3, #32
 8000c4c:	d1fa      	bne.n	8000c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c54:	b159      	cbz	r1, 8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c56:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e7c2      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e7d6      	b.n	8000c0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c64:	f240 1101 	movw	r1, #257	; 0x101
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c6a:	f016 ffc3 	bl	8017bf4 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e7b5      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c76:	7f0b      	ldrb	r3, [r1, #28]
 8000c78:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c7c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c82:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c84:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c86:	690a      	ldr	r2, [r1, #16]
 8000c88:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
        break;
 8000c8e:	e7a8      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c90:	7f0b      	ldrb	r3, [r1, #28]
 8000c92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c96:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c9c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000c9e:	7f4a      	ldrb	r2, [r1, #29]
 8000ca0:	7f8b      	ldrb	r3, [r1, #30]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d003      	beq.n	8000cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e799      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb0:	f240 2201 	movw	r2, #513	; 0x201
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	e794      	b.n	8000be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cb8:	08019224 	.word	0x08019224
 8000cbc:	080192ec 	.word	0x080192ec
 8000cc0:	0801928c 	.word	0x0801928c
 8000cc4:	08019240 	.word	0x08019240
 8000cc8:	52001000 	.word	0x52001000
 8000ccc:	00020201 	.word	0x00020201
 8000cd0:	00020009 	.word	0x00020009
 8000cd4:	0002000a 	.word	0x0002000a
 8000cd8:	ffff00ef 	.word	0xffff00ef
 8000cdc:	08019338 	.word	0x08019338
 8000ce0:	08019354 	.word	0x08019354
 8000ce4:	00010201 	.word	0x00010201

08000ce8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <_ZN8STM32DMAC1Ev+0x38>)
 8000cee:	f840 3b0c 	str.w	r3, [r0], #12
 8000cf2:	6068      	str	r0, [r5, #4]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	722b      	strb	r3, [r5, #8]
 8000cf8:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000cfa:	462c      	mov	r4, r5
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <_ZN8STM32DMAC1Ev+0x3c>)
 8000cfe:	f844 3b20 	str.w	r3, [r4], #32
 8000d02:	2260      	movs	r2, #96	; 0x60
 8000d04:	4621      	mov	r1, r4
 8000d06:	f00b f8b5 	bl	800be74 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d0a:	235f      	movs	r3, #95	; 0x5f
 8000d0c:	e003      	b.n	8000d16 <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60e2      	str	r2, [r4, #12]
 8000d12:	3424      	adds	r4, #36	; 0x24
 8000d14:	3b01      	subs	r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	daf9      	bge.n	8000d0e <_ZN8STM32DMAC1Ev+0x26>
}
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	0801a18c 	.word	0x0801a18c
 8000d24:	080193c0 	.word	0x080193c0

08000d28 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d2a:	6003      	str	r3, [r0, #0]
    }
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	08019424 	.word	0x08019424

08000d34 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d34:	4770      	bx	lr

08000d36 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d36:	4770      	bx	lr

08000d38 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d38:	4770      	bx	lr

08000d3a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d3c:	4770      	bx	lr

08000d3e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d3e:	4770      	bx	lr

08000d40 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d42:	6003      	str	r3, [r0, #0]
    }
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	08019434 	.word	0x08019434

08000d4c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d4c:	4770      	bx	lr

08000d4e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d4e:	4770      	bx	lr

08000d50 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d50:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d54:	6808      	ldr	r0, [r1, #0]
 8000d56:	6849      	ldr	r1, [r1, #4]
 8000d58:	c303      	stmia	r3!, {r0, r1}
    }
 8000d5a:	4770      	bx	lr

08000d5c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d60:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d64:	b158      	cbz	r0, 8000d7e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d66:	6803      	ldr	r3, [r0, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	4798      	blx	r3
 8000d6c:	b138      	cbz	r0, 8000d7e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000d6e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000d72:	6803      	ldr	r3, [r0, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000d82:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000d86:	6002      	str	r2, [r0, #0]
    {
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000d8a:	6002      	str	r2, [r0, #0]
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	08019474 	.word	0x08019474
 8000d94:	0801a32c 	.word	0x0801a32c
 8000d98:	08019434 	.word	0x08019434

08000d9c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000d9e:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000da2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000da8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dae:	6002      	str	r2, [r0, #0]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000db2:	6002      	str	r2, [r0, #0]
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000db6:	6002      	str	r2, [r0, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	080194d8 	.word	0x080194d8
 8000dc0:	080194c0 	.word	0x080194c0
 8000dc4:	0801945c 	.word	0x0801945c
 8000dc8:	08019474 	.word	0x08019474
 8000dcc:	0801a32c 	.word	0x0801a32c
 8000dd0:	08019434 	.word	0x08019434

08000dd4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000dd6:	6002      	str	r2, [r0, #0]
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <_ZN19FrontendApplicationD1Ev+0x28>)
 8000dda:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000dde:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000de4:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000dea:	6002      	str	r2, [r0, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	08019524 	.word	0x08019524
 8000dfc:	080194d8 	.word	0x080194d8
 8000e00:	080194c0 	.word	0x080194c0
 8000e04:	0801945c 	.word	0x0801945c
 8000e08:	08019474 	.word	0x08019474
 8000e0c:	0801a32c 	.word	0x0801a32c
 8000e10:	08019434 	.word	0x08019434

08000e14 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e14:	4a02      	ldr	r2, [pc, #8]	; (8000e20 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e16:	6002      	str	r2, [r0, #0]
    {
 8000e18:	4a02      	ldr	r2, [pc, #8]	; (8000e24 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e1a:	6002      	str	r2, [r0, #0]
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	08019570 	.word	0x08019570
 8000e24:	08019424 	.word	0x08019424

08000e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e28:	4a02      	ldr	r2, [pc, #8]	; (8000e34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e2a:	6002      	str	r2, [r0, #0]
    {
 8000e2c:	4a02      	ldr	r2, [pc, #8]	; (8000e38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e2e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	080194c0 	.word	0x080194c0
 8000e38:	0801945c 	.word	0x0801945c

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e40:	200c      	movs	r0, #12
 8000e42:	4770      	bx	lr

08000e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e48:	0089      	lsls	r1, r1, #2
 8000e4a:	3108      	adds	r1, #8
    }
 8000e4c:	4408      	add	r0, r1
 8000e4e:	4770      	bx	lr

08000e50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e54:	0089      	lsls	r1, r1, #2
 8000e56:	3108      	adds	r1, #8
    }
 8000e58:	4408      	add	r0, r1
 8000e5a:	4770      	bx	lr

08000e5c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	4770      	bx	lr

08000e60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e60:	2098      	movs	r0, #152	; 0x98
 8000e62:	4770      	bx	lr

08000e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e64:	2398      	movs	r3, #152	; 0x98
 8000e66:	fb03 f101 	mul.w	r1, r3, r1
 8000e6a:	3108      	adds	r1, #8
    }
 8000e6c:	4408      	add	r0, r1
 8000e6e:	4770      	bx	lr

08000e70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e70:	2398      	movs	r3, #152	; 0x98
 8000e72:	fb03 f101 	mul.w	r1, r3, r1
 8000e76:	3108      	adds	r1, #8
    }
 8000e78:	4408      	add	r0, r1
 8000e7a:	4770      	bx	lr

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e80:	2010      	movs	r0, #16
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e84:	0109      	lsls	r1, r1, #4
 8000e86:	3108      	adds	r1, #8
    }
 8000e88:	4408      	add	r0, r1
 8000e8a:	4770      	bx	lr

08000e8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e8c:	0109      	lsls	r1, r1, #4
 8000e8e:	3108      	adds	r1, #8
    }
 8000e90:	4408      	add	r0, r1
 8000e92:	4770      	bx	lr

08000e94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000e94:	b508      	push	{r3, lr}
 8000e96:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000e98:	6841      	ldr	r1, [r0, #4]
 8000e9a:	68c2      	ldr	r2, [r0, #12]
 8000e9c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ea0:	f012 0f01 	tst.w	r2, #1
 8000ea4:	d102      	bne.n	8000eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4798      	blx	r3
    }
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000eb0:	f851 200c 	ldr.w	r2, [r1, ip]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	58d3      	ldr	r3, [r2, r3]
 8000eb8:	e7f6      	b.n	8000ea8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000eba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000eba:	6843      	ldr	r3, [r0, #4]
 8000ebc:	b14b      	cbz	r3, 8000ed2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ebe:	6883      	ldr	r3, [r0, #8]
 8000ec0:	b10b      	cbz	r3, 8000ec6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr
 8000ec6:	68c3      	ldr	r3, [r0, #12]
 8000ec8:	f013 0f01 	tst.w	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4770      	bx	lr
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	4770      	bx	lr
 8000ed6:	2000      	movs	r0, #0
    }
 8000ed8:	4770      	bx	lr
	...

08000edc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
    {
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000ee2:	6003      	str	r3, [r0, #0]
    }
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	f016 fe56 	bl	8017b96 <_ZdlPvj>
 8000eea:	4620      	mov	r0, r4
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	bf00      	nop
 8000ef0:	08019434 	.word	0x08019434

08000ef4 <_ZN16FrontendHeapBaseD0Ev>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000efa:	6003      	str	r3, [r0, #0]
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000efe:	6003      	str	r3, [r0, #0]
 8000f00:	2114      	movs	r1, #20
 8000f02:	f016 fe48 	bl	8017b96 <_ZdlPvj>
 8000f06:	4620      	mov	r0, r4
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08019570 	.word	0x08019570
 8000f10:	08019424 	.word	0x08019424

08000f14 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f14:	b510      	push	{r4, lr}
 8000f16:	4604      	mov	r4, r0
    {
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f1a:	6003      	str	r3, [r0, #0]
    }
 8000f1c:	2114      	movs	r1, #20
 8000f1e:	f016 fe3a 	bl	8017b96 <_ZdlPvj>
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	08019424 	.word	0x08019424

08000f2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f32:	6003      	str	r3, [r0, #0]
    {
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f36:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f38:	2110      	movs	r1, #16
 8000f3a:	f016 fe2c 	bl	8017b96 <_ZdlPvj>
 8000f3e:	4620      	mov	r0, r4
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	bf00      	nop
 8000f44:	080194c0 	.word	0x080194c0
 8000f48:	0801945c 	.word	0x0801945c

08000f4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f52:	6003      	str	r3, [r0, #0]
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f56:	6003      	str	r3, [r0, #0]
    {
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f5a:	6003      	str	r3, [r0, #0]
 8000f5c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f60:	f016 fe19 	bl	8017b96 <_ZdlPvj>
 8000f64:	4620      	mov	r0, r4
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	08019474 	.word	0x08019474
 8000f6c:	0801a32c 	.word	0x0801a32c
 8000f70:	08019434 	.word	0x08019434

08000f74 <_ZN23FrontendApplicationBaseD0Ev>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000f7a:	6003      	str	r3, [r0, #0]
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000f7e:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000f84:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000f8a:	6003      	str	r3, [r0, #0]
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000f92:	6003      	str	r3, [r0, #0]
 8000f94:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000f98:	f016 fdfd 	bl	8017b96 <_ZdlPvj>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	080194d8 	.word	0x080194d8
 8000fa4:	080194c0 	.word	0x080194c0
 8000fa8:	0801945c 	.word	0x0801945c
 8000fac:	08019474 	.word	0x08019474
 8000fb0:	0801a32c 	.word	0x0801a32c
 8000fb4:	08019434 	.word	0x08019434

08000fb8 <_ZN19FrontendApplicationD0Ev>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <_ZN19FrontendApplicationD0Ev+0x30>)
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <_ZN19FrontendApplicationD0Ev+0x34>)
 8000fc2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000fc6:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8000fcc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <_ZN19FrontendApplicationD0Ev+0x40>)
 8000fd2:	6003      	str	r3, [r0, #0]
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN19FrontendApplicationD0Ev+0x44>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN19FrontendApplicationD0Ev+0x48>)
 8000fda:	6003      	str	r3, [r0, #0]
 8000fdc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fe0:	f016 fdd9 	bl	8017b96 <_ZdlPvj>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd10      	pop	{r4, pc}
 8000fe8:	08019524 	.word	0x08019524
 8000fec:	080194d8 	.word	0x080194d8
 8000ff0:	080194c0 	.word	0x080194c0
 8000ff4:	0801945c 	.word	0x0801945c
 8000ff8:	08019474 	.word	0x08019474
 8000ffc:	0801a32c 	.word	0x0801a32c
 8001000:	08019434 	.word	0x08019434

08001004 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001004:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001006:	4608      	mov	r0, r1
 8001008:	f001 fa3a 	bl	8002480 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800100c:	bd08      	pop	{r3, pc}

0800100e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800100e:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001010:	f001 fa36 	bl	8002480 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001014:	bd08      	pop	{r3, pc}

08001016 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001016:	b510      	push	{r4, lr}
 8001018:	4604      	mov	r4, r0
    {
        model.tick();
 800101a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800101e:	f001 febc 	bl	8002d9a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001022:	4620      	mov	r0, r4
 8001024:	f00b ff40 	bl	800cea8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001028:	bd10      	pop	{r4, pc}
	...

0800102c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800102c:	b510      	push	{r4, lr}
 800102e:	4604      	mov	r4, r0
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	f009 fd72 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001038:	4620      	mov	r0, r4
 800103a:	bd10      	pop	{r4, pc}
 800103c:	080195ec 	.word	0x080195ec

08001040 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001040:	b510      	push	{r4, lr}
 8001042:	4604      	mov	r4, r0
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001046:	6003      	str	r3, [r0, #0]
 8001048:	f009 fd68 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800104c:	2114      	movs	r1, #20
 800104e:	4620      	mov	r0, r4
 8001050:	f016 fda1 	bl	8017b96 <_ZdlPvj>
 8001054:	4620      	mov	r0, r4
 8001056:	bd10      	pop	{r4, pc}
 8001058:	080195ec 	.word	0x080195ec

0800105c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001062:	6003      	str	r3, [r0, #0]
 8001064:	f009 fd5a 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001068:	4620      	mov	r0, r4
 800106a:	bd10      	pop	{r4, pc}
 800106c:	080195b8 	.word	0x080195b8

08001070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001070:	b510      	push	{r4, lr}
 8001072:	4604      	mov	r4, r0
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001076:	6003      	str	r3, [r0, #0]
 8001078:	f009 fd50 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800107c:	21a0      	movs	r1, #160	; 0xa0
 800107e:	4620      	mov	r0, r4
 8001080:	f016 fd89 	bl	8017b96 <_ZdlPvj>
 8001084:	4620      	mov	r0, r4
 8001086:	bd10      	pop	{r4, pc}
 8001088:	080195b8 	.word	0x080195b8

0800108c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001092:	6003      	str	r3, [r0, #0]
 8001094:	f009 fd42 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001098:	4620      	mov	r0, r4
 800109a:	bd10      	pop	{r4, pc}
 800109c:	08019584 	.word	0x08019584

080010a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010a0:	b510      	push	{r4, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a6:	6003      	str	r3, [r0, #0]
 80010a8:	f009 fd38 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010ac:	2118      	movs	r1, #24
 80010ae:	4620      	mov	r0, r4
 80010b0:	f016 fd71 	bl	8017b96 <_ZdlPvj>
 80010b4:	4620      	mov	r0, r4
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	08019584 	.word	0x08019584

080010bc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010bc:	b510      	push	{r4, lr}
 80010be:	4604      	mov	r4, r0
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <_ZN12FrontendHeapD1Ev+0x60>)
 80010c2:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <_ZN12FrontendHeapD1Ev+0x64>)
 80010c6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <_ZN12FrontendHeapD1Ev+0x68>)
 80010cc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_ZN12FrontendHeapD1Ev+0x6c>)
 80010d2:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_ZN12FrontendHeapD1Ev+0x70>)
 80010d8:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <_ZN12FrontendHeapD1Ev+0x74>)
 80010de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <_ZN12FrontendHeapD1Ev+0x78>)
 80010e4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_ZN12FrontendHeapD1Ev+0x7c>)
 80010ea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZN12FrontendHeapD1Ev+0x80>)
 80010f0:	f840 3fcc 	str.w	r3, [r0, #204]!
 80010f4:	f009 fd12 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_ZN12FrontendHeapD1Ev+0x84>)
 80010fc:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001100:	f009 fd0c 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001104:	4620      	mov	r0, r4
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <_ZN12FrontendHeapD1Ev+0x88>)
 8001108:	f840 3f14 	str.w	r3, [r0, #20]!
 800110c:	f009 fd06 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <_ZN12FrontendHeapD1Ev+0x8c>)
 8001112:	6023      	str	r3, [r4, #0]
    {
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <_ZN12FrontendHeapD1Ev+0x90>)
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	4620      	mov	r0, r4
 800111a:	bd10      	pop	{r4, pc}
 800111c:	08019620 	.word	0x08019620
 8001120:	08019524 	.word	0x08019524
 8001124:	080194d8 	.word	0x080194d8
 8001128:	080194c0 	.word	0x080194c0
 800112c:	0801945c 	.word	0x0801945c
 8001130:	08019474 	.word	0x08019474
 8001134:	0801a32c 	.word	0x0801a32c
 8001138:	08019434 	.word	0x08019434
 800113c:	080195ec 	.word	0x080195ec
 8001140:	080195b8 	.word	0x080195b8
 8001144:	08019584 	.word	0x08019584
 8001148:	08019570 	.word	0x08019570
 800114c:	08019424 	.word	0x08019424

08001150 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001150:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001152:	4c17      	ldr	r4, [pc, #92]	; (80011b0 <__tcf_0+0x60>)
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <__tcf_0+0x64>)
 8001156:	6023      	str	r3, [r4, #0]
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <__tcf_0+0x68>)
 800115a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <__tcf_0+0x6c>)
 8001160:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <__tcf_0+0x70>)
 8001166:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <__tcf_0+0x74>)
 800116c:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <__tcf_0+0x78>)
 8001172:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <__tcf_0+0x7c>)
 8001178:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <__tcf_0+0x80>)
 800117e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001182:	4620      	mov	r0, r4
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <__tcf_0+0x84>)
 8001186:	f840 3fcc 	str.w	r3, [r0, #204]!
 800118a:	f009 fcc7 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800118e:	4620      	mov	r0, r4
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <__tcf_0+0x88>)
 8001192:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001196:	f009 fcc1 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800119a:	4620      	mov	r0, r4
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <__tcf_0+0x8c>)
 800119e:	f840 3f14 	str.w	r3, [r0, #20]!
 80011a2:	f009 fcbb 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <__tcf_0+0x90>)
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <__tcf_0+0x94>)
 80011ac:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011ae:	bd10      	pop	{r4, pc}
 80011b0:	24000148 	.word	0x24000148
 80011b4:	08019620 	.word	0x08019620
 80011b8:	08019524 	.word	0x08019524
 80011bc:	080194d8 	.word	0x080194d8
 80011c0:	080194c0 	.word	0x080194c0
 80011c4:	0801945c 	.word	0x0801945c
 80011c8:	08019474 	.word	0x08019474
 80011cc:	0801a32c 	.word	0x0801a32c
 80011d0:	08019434 	.word	0x08019434
 80011d4:	080195ec 	.word	0x080195ec
 80011d8:	080195b8 	.word	0x080195b8
 80011dc:	08019584 	.word	0x08019584
 80011e0:	08019570 	.word	0x08019570
 80011e4:	08019424 	.word	0x08019424

080011e8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80011e8:	b510      	push	{r4, lr}
 80011ea:	4604      	mov	r4, r0
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <_ZN12FrontendHeapD0Ev+0x6c>)
 80011ee:	6003      	str	r3, [r0, #0]
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <_ZN12FrontendHeapD0Ev+0x70>)
 80011f2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <_ZN12FrontendHeapD0Ev+0x74>)
 80011f8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <_ZN12FrontendHeapD0Ev+0x78>)
 80011fe:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001204:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <_ZN12FrontendHeapD0Ev+0x80>)
 800120a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <_ZN12FrontendHeapD0Ev+0x84>)
 8001210:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <_ZN12FrontendHeapD0Ev+0x88>)
 8001216:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <_ZN12FrontendHeapD0Ev+0x8c>)
 800121c:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001220:	f009 fc7c 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001224:	4620      	mov	r0, r4
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_ZN12FrontendHeapD0Ev+0x90>)
 8001228:	f840 3f2c 	str.w	r3, [r0, #44]!
 800122c:	f009 fc76 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001230:	4620      	mov	r0, r4
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <_ZN12FrontendHeapD0Ev+0x94>)
 8001234:	f840 3f14 	str.w	r3, [r0, #20]!
 8001238:	f009 fc70 	bl	800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_ZN12FrontendHeapD0Ev+0x98>)
 800123e:	6023      	str	r3, [r4, #0]
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8001248:	4620      	mov	r0, r4
 800124a:	f016 fca4 	bl	8017b96 <_ZdlPvj>
 800124e:	4620      	mov	r0, r4
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop
 8001254:	08019620 	.word	0x08019620
 8001258:	08019524 	.word	0x08019524
 800125c:	080194d8 	.word	0x080194d8
 8001260:	080194c0 	.word	0x080194c0
 8001264:	0801945c 	.word	0x0801945c
 8001268:	08019474 	.word	0x08019474
 800126c:	0801a32c 	.word	0x0801a32c
 8001270:	08019434 	.word	0x08019434
 8001274:	080195ec 	.word	0x080195ec
 8001278:	080195b8 	.word	0x080195b8
 800127c:	08019584 	.word	0x08019584
 8001280:	08019570 	.word	0x08019570
 8001284:	08019424 	.word	0x08019424

08001288 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800128c:	f001 f856 	bl	800233c <_ZN14BitmapDatabase11getInstanceEv>
 8001290:	4605      	mov	r5, r0
 8001292:	f001 f857 	bl	8002344 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001296:	4601      	mov	r1, r0
 8001298:	2400      	movs	r4, #0
 800129a:	9400      	str	r4, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	4622      	mov	r2, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f00e fb89 	bl	800f9b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <touchgfx_init+0xc0>)
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <touchgfx_init+0xc4>)
 80012aa:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012ac:	4620      	mov	r0, r4
 80012ae:	f001 fba9 	bl	8002a04 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <touchgfx_init+0xc8>)
 80012b4:	f00e fa38 	bl	800f728 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <touchgfx_init+0xcc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f3bf 8f5b 	dmb	ish
 80012c0:	f013 0f01 	tst.w	r3, #1
 80012c4:	d004      	beq.n	80012d0 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012c6:	4824      	ldr	r0, [pc, #144]	; (8001358 <touchgfx_init+0xd0>)
 80012c8:	f7ff f9ea 	bl	80006a0 <_ZN11TouchGFXHAL10initializeEv>
}
 80012cc:	b003      	add	sp, #12
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <touchgfx_init+0xcc>)
 80012d2:	f016 fc62 	bl	8017b9a <__cxa_guard_acquire>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d0f5      	beq.n	80012c6 <touchgfx_init+0x3e>
          frontendApplication(app)
 80012da:	4c20      	ldr	r4, [pc, #128]	; (800135c <touchgfx_init+0xd4>)
 80012dc:	4620      	mov	r0, r4
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <touchgfx_init+0xd8>)
 80012e0:	f840 3b14 	str.w	r3, [r0], #20
 80012e4:	6060      	str	r0, [r4, #4]
 80012e6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80012ea:	60a7      	str	r7, [r4, #8]
 80012ec:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 80012f0:	60e6      	str	r6, [r4, #12]
 80012f2:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 80012f6:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <touchgfx_init+0xdc>)
 80012fa:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <touchgfx_init+0xe0>)
 80012fe:	6023      	str	r3, [r4, #0]
 8001300:	f009 fc0e 	bl	800ab20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <touchgfx_init+0xe4>)
 8001306:	6163      	str	r3, [r4, #20]
 8001308:	4638      	mov	r0, r7
 800130a:	f009 fc09 	bl	800ab20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <touchgfx_init+0xe8>)
 8001310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001312:	4630      	mov	r0, r6
 8001314:	f009 fc04 	bl	800ab20 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <touchgfx_init+0xec>)
 800131a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800131e:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001322:	4630      	mov	r0, r6
 8001324:	f001 fd36 	bl	8002d94 <_ZN5ModelC1Ev>
 8001328:	4622      	mov	r2, r4
 800132a:	4631      	mov	r1, r6
 800132c:	4628      	mov	r0, r5
 800132e:	f001 fd27 	bl	8002d80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001332:	4628      	mov	r0, r5
 8001334:	f001 f8a4 	bl	8002480 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <touchgfx_init+0xf0>)
 800133a:	f016 fc79 	bl	8017c30 <atexit>
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <touchgfx_init+0xcc>)
 8001340:	f016 fc37 	bl	8017bb2 <__cxa_guard_release>
 8001344:	e7bf      	b.n	80012c6 <touchgfx_init+0x3e>
 8001346:	bf00      	nop
 8001348:	2400ae68 	.word	0x2400ae68
 800134c:	240011a4 	.word	0x240011a4
 8001350:	24000008 	.word	0x24000008
 8001354:	24000144 	.word	0x24000144
 8001358:	24001128 	.word	0x24001128
 800135c:	24000148 	.word	0x24000148
 8001360:	08019424 	.word	0x08019424
 8001364:	08019570 	.word	0x08019570
 8001368:	08019620 	.word	0x08019620
 800136c:	08019584 	.word	0x08019584
 8001370:	080195b8 	.word	0x080195b8
 8001374:	080195ec 	.word	0x080195ec
 8001378:	08001151 	.word	0x08001151

0800137c <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 800137c:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <touchgfx_taskEntry+0xc>)
 8001380:	f7ff f992 	bl	80006a8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	24001128 	.word	0x24001128

0800138c <_Z41__static_initialization_and_destruction_0ii>:
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	4604      	mov	r4, r0
 8001392:	460d      	mov	r5, r1
 8001394:	2801      	cmp	r0, #1
 8001396:	d006      	beq.n	80013a6 <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001398:	b91c      	cbnz	r4, 80013a2 <_Z41__static_initialization_and_destruction_0ii+0x16>
 800139a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139e:	429d      	cmp	r5, r3
 80013a0:	d076      	beq.n	8001490 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d1f4      	bne.n	8001398 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013ae:	4e45      	ldr	r6, [pc, #276]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013b2:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013b6:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013b8:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001510 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013bc:	4640      	mov	r0, r8
 80013be:	f7ff fc93 	bl	8000ce8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013c2:	4f43      	ldr	r7, [pc, #268]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013c4:	4638      	mov	r0, r7
 80013c6:	f010 fd11 	bl	8011dec <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f8c3 8004 	str.w	r8, [r3, #4]
 80013d4:	609f      	str	r7, [r3, #8]
 80013d6:	60de      	str	r6, [r3, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80013e0:	839a      	strh	r2, [r3, #28]
 80013e2:	83da      	strh	r2, [r3, #30]
 80013e4:	841a      	strh	r2, [r3, #32]
 80013e6:	845a      	strh	r2, [r3, #34]	; 0x22
 80013e8:	849a      	strh	r2, [r3, #36]	; 0x24
 80013ea:	84da      	strh	r2, [r3, #38]	; 0x26
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80013ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
 8001402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001406:	2101      	movs	r1, #1
 8001408:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 800140c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001410:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001416:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800141a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800141e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8001426:	659a      	str	r2, [r3, #88]	; 0x58
 8001428:	65da      	str	r2, [r3, #92]	; 0x5c
 800142a:	661a      	str	r2, [r3, #96]	; 0x60
 800142c:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001430:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001434:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001438:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 800143c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001440:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001444:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001448:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800144c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001450:	671a      	str	r2, [r3, #112]	; 0x70
 8001452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001456:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800145a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800145e:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001462:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8001466:	491d      	ldr	r1, [pc, #116]	; (80014dc <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8001468:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800146a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800146e:	481c      	ldr	r0, [pc, #112]	; (80014e0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001470:	8001      	strh	r1, [r0, #0]
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001474:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001476:	f44f 7188 	mov.w	r1, #272	; 0x110
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800147c:	8001      	strh	r1, [r0, #0]
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001480:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001482:	491b      	ldr	r1, [pc, #108]	; (80014f0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8001484:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8001488:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800148c:	601a      	str	r2, [r3, #0]
    }
 800148e:	e783      	b.n	8001398 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8001494:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8001498:	601a      	str	r2, [r3, #0]
    {
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800149c:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014a2:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014a6:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014ac:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014b0:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014b2:	4817      	ldr	r0, [pc, #92]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014b4:	f7ff fa4c 	bl	8000950 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014bc:	601a      	str	r2, [r3, #0]
    {
 80014be:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	e76e      	b.n	80013a2 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014c4:	24000384 	.word	0x24000384
 80014c8:	08018e8c 	.word	0x08018e8c
 80014cc:	08018ea4 	.word	0x08018ea4
 80014d0:	240011a8 	.word	0x240011a8
 80014d4:	24001128 	.word	0x24001128
 80014d8:	0801a0b4 	.word	0x0801a0b4
 80014dc:	2400ae0c 	.word	0x2400ae0c
 80014e0:	2400ae00 	.word	0x2400ae00
 80014e4:	2400ae06 	.word	0x2400ae06
 80014e8:	2400ae02 	.word	0x2400ae02
 80014ec:	2400ae08 	.word	0x2400ae08
 80014f0:	2400ae04 	.word	0x2400ae04
 80014f4:	08019634 	.word	0x08019634
 80014f8:	08019034 	.word	0x08019034
 80014fc:	24000008 	.word	0x24000008
 8001500:	080197b4 	.word	0x080197b4
 8001504:	08019410 	.word	0x08019410
 8001508:	0801a638 	.word	0x0801a638
 800150c:	0801a2d4 	.word	0x0801a2d4
 8001510:	24000388 	.word	0x24000388

08001514 <_GLOBAL__sub_I_touchgfx_init>:
 8001514:	b508      	push	{r3, lr}
 8001516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff36 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 8001520:	bd08      	pop	{r3, pc}

08001522 <_GLOBAL__sub_D_touchgfx_init>:
 8001522:	b508      	push	{r3, lr}
 8001524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff2f 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 800152e:	bd08      	pop	{r3, pc}

08001530 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001532:	2290      	movs	r2, #144	; 0x90
 8001534:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8001538:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001546:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001550:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800155a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800156e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001576:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001582:	68d3      	ldr	r3, [r2, #12]
 8001584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001588:	3b01      	subs	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800158e:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001590:	6911      	ldr	r1, [r2, #16]
 8001592:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001596:	3901      	subs	r1, #1
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 800159a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800159e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015a6:	4770      	bx	lr
 80015a8:	50001000 	.word	0x50001000
 80015ac:	24001204 	.word	0x24001204
 80015b0:	24001202 	.word	0x24001202

080015b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015b6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015ba:	4770      	bx	lr
 80015bc:	50001000 	.word	0x50001000

080015c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015c2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015c6:	2201      	movs	r2, #1
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ca:	4770      	bx	lr
 80015cc:	50001000 	.word	0x50001000

080015d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015d8:	d025      	beq.n	8001626 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80015da:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015e4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80015e8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015ec:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80015f0:	e000      	b.n	80015f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 80015f2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015f4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80015f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80015fc:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001600:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001604:	4908      	ldr	r1, [pc, #32]	; (8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001606:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800160a:	4613      	mov	r3, r2
 800160c:	3a01      	subs	r2, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f2      	bne.n	80015f8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001612:	1e43      	subs	r3, r0, #1
 8001614:	2800      	cmp	r0, #0
 8001616:	d1ec      	bne.n	80015f2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800161c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001634:	d025      	beq.n	8001682 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001636:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001640:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001644:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001648:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800164c:	e000      	b.n	8001650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 800164e:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001650:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001654:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001658:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800165c:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001662:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001666:	4613      	mov	r3, r2
 8001668:	3a01      	subs	r2, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f2      	bne.n	8001654 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 800166e:	1e43      	subs	r3, r0, #1
 8001670:	2800      	cmp	r0, #0
 8001672:	d1ec      	bne.n	800164e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001678:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800167c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 800168a:	6002      	str	r2, [r0, #0]
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 800168e:	6002      	str	r2, [r0, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08019634 	.word	0x08019634
 8001698:	0801a0b4 	.word	0x0801a0b4

0800169c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4604      	mov	r4, r0
    HAL::initialize();
 80016a0:	f009 fd47 	bl	800b132 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016a8:	f00b fd50 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 80016ac:	4601      	mov	r1, r0
 80016ae:	4620      	mov	r0, r4
 80016b0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016b8:	2300      	movs	r3, #0
 80016ba:	4a02      	ldr	r2, [pc, #8]	; (80016c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016bc:	4902      	ldr	r1, [pc, #8]	; (80016c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016be:	4620      	mov	r0, r4
 80016c0:	47a8      	blx	r5
}
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	2409fa00 	.word	0x2409fa00
 80016c8:	24040000 	.word	0x24040000

080016cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 80016cc:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 80016ce:	f009 fd17 	bl	800b100 <_ZN8touchgfx3HAL10beginFrameEv>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80016d4:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 80016d6:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80016da:	b113      	cbz	r3, 80016e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80016e2:	f009 fd19 	bl	800b118 <_ZN8touchgfx3HAL8endFrameEv>
}
 80016e6:	bd08      	pop	{r3, pc}
 80016e8:	24001200 	.word	0x24001200

080016ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80016ec:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 80016ee:	f009 fcd1 	bl	800b094 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016fa:	d021      	beq.n	8001740 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001704:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001708:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800170c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001710:	e000      	b.n	8001714 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001712:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001714:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001718:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800171c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001720:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001726:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800172a:	4613      	mov	r3, r2
 800172c:	3a01      	subs	r2, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001732:	1e43      	subs	r3, r0, #1
 8001734:	2800      	cmp	r0, #0
 8001736:	d1ec      	bne.n	8001712 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 8001738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800173c:	f3bf 8f6f 	isb	sy
}
 8001740:	bd10      	pop	{r4, pc}
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 8001748:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800174a:	f009 fe0c 	bl	800b366 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 800174e:	bd08      	pop	{r3, pc}

08001750 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001750:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001752:	f009 fc99 	bl	800b088 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001756:	bd08      	pop	{r3, pc}

08001758 <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001758:	b510      	push	{r4, lr}
 800175a:	4604      	mov	r4, r0
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 800175e:	6003      	str	r3, [r0, #0]
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001762:	6003      	str	r3, [r0, #0]
 8001764:	217c      	movs	r1, #124	; 0x7c
 8001766:	f016 fa16 	bl	8017b96 <_ZdlPvj>
 800176a:	4620      	mov	r0, r4
 800176c:	bd10      	pop	{r4, pc}
 800176e:	bf00      	nop
 8001770:	08019634 	.word	0x08019634
 8001774:	0801a0b4 	.word	0x0801a0b4

08001778 <HAL_LTDC_LineEventCallback>:
        return instance;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 800177a:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 800177c:	b32b      	cbz	r3, 80017ca <HAL_LTDC_LineEventCallback+0x52>
    {
 800177e:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_LTDC_LineEventCallback+0x58>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_LTDC_LineEventCallback+0x5c>)
 8001786:	8811      	ldrh	r1, [r2, #0]
 8001788:	428b      	cmp	r3, r1
 800178a:	d00a      	beq.n	80017a2 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800178c:	f004 fc28 	bl	8005fe0 <HAL_LTDC_ProgramLineEvent>
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 8001792:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8001794:	6803      	ldr	r3, [r0, #0]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 800179a:	2000      	movs	r0, #0
 800179c:	f7fe feb8 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017a0:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_LTDC_LineEventCallback+0x60>)
 80017a4:	8819      	ldrh	r1, [r3, #0]
 80017a6:	f004 fc1b 	bl	8005fe0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017aa:	4c08      	ldr	r4, [pc, #32]	; (80017cc <HAL_LTDC_LineEventCallback+0x54>)
 80017ac:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017ae:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017b2:	3301      	adds	r3, #1
 80017b4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017b8:	f7ff f892 	bl	80008e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f00a fa17 	bl	800bbf0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7fe fe66 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017c8:	e7ea      	b.n	80017a0 <HAL_LTDC_LineEventCallback+0x28>
 80017ca:	4770      	bx	lr
 80017cc:	2400ae0c 	.word	0x2400ae0c
 80017d0:	50001000 	.word	0x50001000
 80017d4:	24001204 	.word	0x24001204
 80017d8:	24001202 	.word	0x24001202

080017dc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80017dc:	b530      	push	{r4, r5, lr}
 80017de:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017e0:	2400      	movs	r4, #0
 80017e2:	9400      	str	r4, [sp, #0]
 80017e4:	9401      	str	r4, [sp, #4]
 80017e6:	9402      	str	r4, [sp, #8]
 80017e8:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017ea:	f003 f9b9 	bl	8004b60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017ee:	2501      	movs	r5, #1
 80017f0:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017f4:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80017f8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80017fc:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80017fe:	231b      	movs	r3, #27
 8001800:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001804:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001808:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800180c:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001810:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001814:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001818:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800181c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001820:	4668      	mov	r0, sp
 8001822:	f003 f9bb 	bl	8004b9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001826:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800182a:	2319      	movs	r3, #25
 800182c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001830:	2403      	movs	r4, #3
 8001832:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001836:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800183a:	4668      	mov	r0, sp
 800183c:	f003 f9ae 	bl	8004b9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001840:	2302      	movs	r3, #2
 8001842:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001846:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800184a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800184c:	2313      	movs	r3, #19
 800184e:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001852:	4668      	mov	r0, sp
 8001854:	f003 f9a2 	bl	8004b9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001858:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800185c:	2311      	movs	r3, #17
 800185e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001862:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001866:	4668      	mov	r0, sp
 8001868:	f003 f998 	bl	8004b9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800186c:	2004      	movs	r0, #4
 800186e:	f003 f985 	bl	8004b7c <HAL_MPU_Enable>

}
 8001872:	b005      	add	sp, #20
 8001874:	bd30      	pop	{r4, r5, pc}
	...

08001878 <MX_CRC_Init>:
{
 8001878:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_CRC_Init+0x1c>)
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_CRC_Init+0x20>)
 800187e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001884:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001886:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001888:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800188a:	2301      	movs	r3, #1
 800188c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800188e:	f003 f9b5 	bl	8004bfc <HAL_CRC_Init>
}
 8001892:	bd08      	pop	{r3, pc}
 8001894:	24001218 	.word	0x24001218
 8001898:	40023000 	.word	0x40023000

0800189c <MX_GPIO_Init>:
{
 800189c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	2400      	movs	r4, #0
 80018a4:	9407      	str	r4, [sp, #28]
 80018a6:	9408      	str	r4, [sp, #32]
 80018a8:	9409      	str	r4, [sp, #36]	; 0x24
 80018aa:	940a      	str	r4, [sp, #40]	; 0x28
 80018ac:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <MX_GPIO_Init+0x190>)
 80018b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018c0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80018c4:	9200      	str	r2, [sp, #0]
 80018c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018d8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80018f4:	9202      	str	r2, [sp, #8]
 80018f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001900:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001904:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001908:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800190c:	9203      	str	r2, [sp, #12]
 800190e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001910:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001918:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800191c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001920:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001924:	9204      	str	r2, [sp, #16]
 8001926:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800192c:	f042 0208 	orr.w	r2, r2, #8
 8001930:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001934:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001938:	f002 0208 	and.w	r2, r2, #8
 800193c:	9205      	str	r2, [sp, #20]
 800193e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800194c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	9306      	str	r3, [sp, #24]
 8001956:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001958:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001a38 <MX_GPIO_Init+0x19c>
 800195c:	4622      	mov	r2, r4
 800195e:	f640 0104 	movw	r1, #2052	; 0x804
 8001962:	4648      	mov	r0, r9
 8001964:	f003 fcde 	bl	8005324 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001968:	4f31      	ldr	r7, [pc, #196]	; (8001a30 <MX_GPIO_Init+0x194>)
 800196a:	4622      	mov	r2, r4
 800196c:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8001970:	4638      	mov	r0, r7
 8001972:	f003 fcd7 	bl	8005324 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001976:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001a3c <MX_GPIO_Init+0x1a0>
 800197a:	4622      	mov	r2, r4
 800197c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001980:	4640      	mov	r0, r8
 8001982:	f003 fccf 	bl	8005324 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8001986:	4e2b      	ldr	r6, [pc, #172]	; (8001a34 <MX_GPIO_Init+0x198>)
 8001988:	4622      	mov	r2, r4
 800198a:	2106      	movs	r1, #6
 800198c:	4630      	mov	r0, r6
 800198e:	f003 fcc9 	bl	8005324 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001992:	f640 0304 	movw	r3, #2052	; 0x804
 8001996:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2501      	movs	r5, #1
 800199a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a0:	a907      	add	r1, sp, #28
 80019a2:	4648      	mov	r0, r9
 80019a4:	f003 fb06 	bl	8004fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80019a8:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80019ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	f04f 0903 	mov.w	r9, #3
 80019b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ba:	a907      	add	r1, sp, #28
 80019bc:	4638      	mov	r0, r7
 80019be:	f003 faf9 	bl	8004fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80019c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80019d0:	a907      	add	r1, sp, #28
 80019d2:	4640      	mov	r0, r8
 80019d4:	f003 faee 	bl	8004fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019d8:	f04f 0804 	mov.w	r8, #4
 80019dc:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019e8:	a907      	add	r1, sp, #28
 80019ea:	4638      	mov	r0, r7
 80019ec:	f003 fae2 	bl	8004fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019f0:	2302      	movs	r3, #2
 80019f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019fa:	a907      	add	r1, sp, #28
 80019fc:	4630      	mov	r0, r6
 80019fe:	f003 fad9 	bl	8004fb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a02:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a08:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	a907      	add	r1, sp, #28
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f003 fad0 	bl	8004fb4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a14:	4622      	mov	r2, r4
 8001a16:	2105      	movs	r1, #5
 8001a18:	2008      	movs	r0, #8
 8001a1a:	f003 f84b 	bl	8004ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f003 f87e 	bl	8004b20 <HAL_NVIC_EnableIRQ>
}
 8001a24:	b00d      	add	sp, #52	; 0x34
 8001a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a2a:	bf00      	nop
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	58021c00 	.word	0x58021c00
 8001a34:	58020000 	.word	0x58020000
 8001a38:	58021800 	.word	0x58021800
 8001a3c:	58022000 	.word	0x58022000

08001a40 <MX_DMA2D_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001a42:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <MX_DMA2D_Init+0x30>)
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_DMA2D_Init+0x34>)
 8001a46:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a50:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a52:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a54:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a56:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a58:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001a5a:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a5c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001a5e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a60:	4620      	mov	r0, r4
 8001a62:	f003 f943 	bl	8004cec <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a66:	2101      	movs	r1, #1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f003 fa21 	bl	8004eb0 <HAL_DMA2D_ConfigLayer>
}
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	2400123c 	.word	0x2400123c
 8001a74:	52001000 	.word	0x52001000

08001a78 <MX_LTDC_Init>:
{
 8001a78:	b530      	push	{r4, r5, lr}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a7c:	2234      	movs	r2, #52	; 0x34
 8001a7e:	2100      	movs	r1, #0
 8001a80:	a801      	add	r0, sp, #4
 8001a82:	f016 fa3d 	bl	8017f00 <memset>
  hltdc.Instance = LTDC;
 8001a86:	4c23      	ldr	r4, [pc, #140]	; (8001b14 <MX_LTDC_Init+0x9c>)
 8001a88:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <MX_LTDC_Init+0xa0>)
 8001a8a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a90:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a92:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a94:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a96:	2328      	movs	r3, #40	; 0x28
 8001a98:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001a9e:	232a      	movs	r3, #42	; 0x2a
 8001aa0:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001aa2:	230b      	movs	r3, #11
 8001aa4:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001aa6:	f240 230a 	movw	r3, #522	; 0x20a
 8001aaa:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001aac:	f240 131b 	movw	r3, #283	; 0x11b
 8001ab0:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001ab2:	f240 232a 	movw	r3, #554	; 0x22a
 8001ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ab8:	f240 131d 	movw	r3, #285	; 0x11d
 8001abc:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001abe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ac2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ac6:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001aca:	4620      	mov	r0, r4
 8001acc:	f004 f96a 	bl	8005da4 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001ad0:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001ad2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ad6:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001ad8:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001ada:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001ade:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001ae8:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aee:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001af0:	2005      	movs	r0, #5
 8001af2:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001af4:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001af6:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001af8:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001afa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001afe:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b02:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b06:	462a      	mov	r2, r5
 8001b08:	a901      	add	r1, sp, #4
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f004 fa33 	bl	8005f76 <HAL_LTDC_ConfigLayer>
}
 8001b10:	b00f      	add	sp, #60	; 0x3c
 8001b12:	bd30      	pop	{r4, r5, pc}
 8001b14:	240012f0 	.word	0x240012f0
 8001b18:	50001000 	.word	0x50001000

08001b1c <MX_I2C4_Init>:
{
 8001b1c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001b1e:	4c0d      	ldr	r4, [pc, #52]	; (8001b54 <MX_I2C4_Init+0x38>)
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_I2C4_Init+0x3c>)
 8001b22:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_I2C4_Init+0x40>)
 8001b26:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001b28:	2500      	movs	r5, #0
 8001b2a:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001b32:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b34:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b38:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f003 fdd2 	bl	80056e4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	4620      	mov	r0, r4
 8001b46:	f003 fff6 	bl	8005b36 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f004 f820 	bl	8005b92 <HAL_I2CEx_ConfigDigitalFilter>
}
 8001b52:	bd38      	pop	{r3, r4, r5, pc}
 8001b54:	240012a4 	.word	0x240012a4
 8001b58:	58001c00 	.word	0x58001c00
 8001b5c:	30808bd0 	.word	0x30808bd0

08001b60 <MX_OCTOSPI1_Init>:
{
 8001b60:	b530      	push	{r4, r5, lr}
 8001b62:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_OCTOSPI1_Init+0x58>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_OCTOSPI1_Init+0x5c>)
 8001b68:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b6a:	2501      	movs	r5, #1
 8001b6c:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b6e:	2400      	movs	r4, #0
 8001b70:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b72:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001b74:	231a      	movs	r3, #26
 8001b76:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b7c:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b7e:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001b80:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001b82:	2303      	movs	r3, #3
 8001b84:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001b86:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b88:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001b8a:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001b90:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001b92:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001b94:	f004 fea2 	bl	80068dc <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001b98:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001b9c:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f002 fcd9 	bl	8004558 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001ba6:	a901      	add	r1, sp, #4
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f002 fd4f 	bl	800464c <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f002 fc7a 	bl	80044a8 <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bd30      	pop	{r4, r5, pc}
 8001bb8:	24001398 	.word	0x24001398
 8001bbc:	52005000 	.word	0x52005000

08001bc0 <esWiFi_Task>:
{
 8001bc0:	b508      	push	{r3, lr}
    osDelay(100);
 8001bc2:	2064      	movs	r0, #100	; 0x64
 8001bc4:	f006 fd4a 	bl	800865c <osDelay>
  for(;;)
 8001bc8:	e7fb      	b.n	8001bc2 <esWiFi_Task+0x2>
	...

08001bcc <SystemClock_Config>:
{
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd0:	224c      	movs	r2, #76	; 0x4c
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	a809      	add	r0, sp, #36	; 0x24
 8001bd6:	f016 f993 	bl	8017f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	a801      	add	r0, sp, #4
 8001be0:	f016 f98e 	bl	8017f00 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <SystemClock_Config+0xa8>)
 8001be6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001bee:	2004      	movs	r0, #4
 8001bf0:	f004 fef8 	bl	80069e4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <SystemClock_Config+0xac>)
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c00:	619a      	str	r2, [r3, #24]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <SystemClock_Config+0xac>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c14:	d0fa      	beq.n	8001c0c <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <SystemClock_Config+0xa8>)
 8001c18:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c2c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c32:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001c34:	220c      	movs	r2, #12
 8001c36:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001c38:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c3c:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c3e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c40:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c42:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c48:	2400      	movs	r4, #0
 8001c4a:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c4c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	a809      	add	r0, sp, #36	; 0x24
 8001c50:	f004 ff12 	bl	8006a78 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c54:	233f      	movs	r3, #63	; 0x3f
 8001c56:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c58:	2103      	movs	r1, #3
 8001c5a:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c5c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c62:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c64:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001c66:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c68:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c6a:	a801      	add	r0, sp, #4
 8001c6c:	f005 fb10 	bl	8007290 <HAL_RCC_ClockConfig>
}
 8001c70:	b01c      	add	sp, #112	; 0x70
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58024800 	.word	0x58024800

08001c7c <main>:
{
 8001c7c:	b508      	push	{r3, lr}
  MPU_Config();
 8001c7e:	f7ff fdad 	bl	80017dc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <main+0xfc>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c8a:	d113      	bne.n	8001cb4 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <main+0xfc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001caa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <main+0xfc>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cbc:	d127      	bne.n	8001d0e <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <main+0xfc>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001cca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cce:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001cd2:	e000      	b.n	8001cd6 <main+0x5a>
    } while(sets-- != 0U);
 8001cd4:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cd6:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001cda:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001cde:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001ce2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001ce6:	4924      	ldr	r1, [pc, #144]	; (8001d78 <main+0xfc>)
 8001ce8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001cec:	4613      	mov	r3, r2
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f2      	bne.n	8001cda <main+0x5e>
    } while(sets-- != 0U);
 8001cf4:	1e43      	subs	r3, r0, #1
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <main+0x58>
 8001cfa:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cfe:	694b      	ldr	r3, [r1, #20]
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	614b      	str	r3, [r1, #20]
 8001d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001d0e:	f002 fe6b 	bl	80049e8 <HAL_Init>
  SystemClock_Config();
 8001d12:	f7ff ff5b 	bl	8001bcc <SystemClock_Config>
  MX_CRC_Init();
 8001d16:	f7ff fdaf 	bl	8001878 <MX_CRC_Init>
  MX_GPIO_Init();
 8001d1a:	f7ff fdbf 	bl	800189c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001d1e:	f7ff fe8f 	bl	8001a40 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001d22:	f7ff fea9 	bl	8001a78 <MX_LTDC_Init>
  MX_I2C4_Init();
 8001d26:	f7ff fef9 	bl	8001b1c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001d2a:	f7ff ff19 	bl	8001b60 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8001d2e:	f7fe fb59 	bl	80003e4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001d32:	f7fe fb56 	bl	80003e2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001d36:	f006 fc05 	bl	8008544 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <main+0x100>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f006 fd59 	bl	80087f6 <osMessageQueueNew>
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <main+0x104>)
 8001d46:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <main+0x108>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f006 fd52 	bl	80087f6 <osMessageQueueNew>
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <main+0x10c>)
 8001d54:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <main+0x110>)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <main+0x114>)
 8001d5c:	f006 fc20 	bl	80085a0 <osThreadNew>
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <main+0x118>)
 8001d62:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <main+0x11c>)
 8001d66:	2100      	movs	r1, #0
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <main+0x120>)
 8001d6a:	f006 fc19 	bl	80085a0 <osThreadNew>
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <main+0x124>)
 8001d70:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001d72:	f006 fbf9 	bl	8008568 <osKernelStart>
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <main+0xfa>
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	08019734 	.word	0x08019734
 8001d80:	24001208 	.word	0x24001208
 8001d84:	08019770 	.word	0x08019770
 8001d88:	24001210 	.word	0x24001210
 8001d8c:	08019788 	.word	0x08019788
 8001d90:	08001bc1 	.word	0x08001bc1
 8001d94:	24001214 	.word	0x24001214
 8001d98:	0801974c 	.word	0x0801974c
 8001d9c:	080003ed 	.word	0x080003ed
 8001da0:	2400120c 	.word	0x2400120c

08001da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001da6:	6802      	ldr	r2, [r0, #0]
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d000      	beq.n	8001db0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dae:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001db0:	f002 fe48 	bl	8004a44 <HAL_IncTick>
}
 8001db4:	e7fb      	b.n	8001dae <HAL_TIM_PeriodElapsedCallback+0xa>
 8001db6:	bf00      	nop
 8001db8:	40001000 	.word	0x40001000

08001dbc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b500      	push	{lr}
 8001dc2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_MspInit+0x30>)
 8001dc6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001dca:	f042 0202 	orr.w	r2, r2, #2
 8001dce:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8001dd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	210f      	movs	r1, #15
 8001de2:	f06f 0001 	mvn.w	r0, #1
 8001de6:	f002 fe65 	bl	8004ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	b003      	add	sp, #12
 8001dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df0:	58024400 	.word	0x58024400

08001df4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001df4:	6802      	ldr	r2, [r0, #0]
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_CRC_MspInit+0x2c>)
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d000      	beq.n	8001dfe <HAL_CRC_MspInit+0xa>
 8001dfc:	4770      	bx	lr
{
 8001dfe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_CRC_MspInit+0x30>)
 8001e02:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8001e0e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e1a:	b002      	add	sp, #8
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023000 	.word	0x40023000
 8001e24:	58024400 	.word	0x58024400

08001e28 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001e28:	6802      	ldr	r2, [r0, #0]
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_DMA2D_MspInit+0x40>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d000      	beq.n	8001e32 <HAL_DMA2D_MspInit+0xa>
 8001e30:	4770      	bx	lr
{
 8001e32:	b500      	push	{lr}
 8001e34:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_DMA2D_MspInit+0x44>)
 8001e38:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001e3c:	f042 0210 	orr.w	r2, r2, #16
 8001e40:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001e44:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2105      	movs	r1, #5
 8001e54:	205a      	movs	r0, #90	; 0x5a
 8001e56:	f002 fe2d 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e5a:	205a      	movs	r0, #90	; 0x5a
 8001e5c:	f002 fe60 	bl	8004b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e60:	b003      	add	sp, #12
 8001e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e66:	bf00      	nop
 8001e68:	52001000 	.word	0x52001000
 8001e6c:	58024400 	.word	0x58024400

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b510      	push	{r4, lr}
 8001e72:	b0b6      	sub	sp, #216	; 0xd8
 8001e74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	2100      	movs	r1, #0
 8001e78:	9131      	str	r1, [sp, #196]	; 0xc4
 8001e7a:	9132      	str	r1, [sp, #200]	; 0xc8
 8001e7c:	9133      	str	r1, [sp, #204]	; 0xcc
 8001e7e:	9134      	str	r1, [sp, #208]	; 0xd0
 8001e80:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e82:	22b8      	movs	r2, #184	; 0xb8
 8001e84:	a803      	add	r0, sp, #12
 8001e86:	f016 f83b 	bl	8017f00 <memset>
  if(hi2c->Instance==I2C4)
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_I2C_MspInit+0x8c>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e92:	b036      	add	sp, #216	; 0xd8
 8001e94:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e96:	2310      	movs	r3, #16
 8001e98:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9a:	a803      	add	r0, sp, #12
 8001e9c:	f005 fcbe 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 8001ea0:	bb40      	cbnz	r0, 8001ef4 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea2:	4c17      	ldr	r4, [pc, #92]	; (8001f00 <HAL_I2C_MspInit+0x90>)
 8001ea4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8001eb0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001ebc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ec0:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	a931      	add	r1, sp, #196	; 0xc4
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_I2C_MspInit+0x94>)
 8001ed6:	f003 f86d 	bl	8004fb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001eda:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee2:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8001ee6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	9b02      	ldr	r3, [sp, #8]
}
 8001ef2:	e7ce      	b.n	8001e92 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001ef4:	f7ff ff62 	bl	8001dbc <Error_Handler>
 8001ef8:	e7d3      	b.n	8001ea2 <HAL_I2C_MspInit+0x32>
 8001efa:	bf00      	nop
 8001efc:	58001c00 	.word	0x58001c00
 8001f00:	58024400 	.word	0x58024400
 8001f04:	58020c00 	.word	0x58020c00

08001f08 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8001f08:	6802      	ldr	r2, [r0, #0]
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_I2C_MspDeInit+0x34>)
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d000      	beq.n	8001f12 <HAL_I2C_MspDeInit+0xa>
 8001f10:	4770      	bx	lr
{
 8001f12:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_I2C_MspDeInit+0x38>)
 8001f16:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8001f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001f22:	4c08      	ldr	r4, [pc, #32]	; (8001f44 <HAL_I2C_MspDeInit+0x3c>)
 8001f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f003 f953 	bl	80051d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f32:	4620      	mov	r0, r4
 8001f34:	f003 f94e 	bl	80051d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	bf00      	nop
 8001f3c:	58001c00 	.word	0x58001c00
 8001f40:	58024400 	.word	0x58024400
 8001f44:	58020c00 	.word	0x58020c00

08001f48 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	b0b8      	sub	sp, #224	; 0xe0
 8001f4c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	2100      	movs	r1, #0
 8001f50:	9133      	str	r1, [sp, #204]	; 0xcc
 8001f52:	9134      	str	r1, [sp, #208]	; 0xd0
 8001f54:	9135      	str	r1, [sp, #212]	; 0xd4
 8001f56:	9136      	str	r1, [sp, #216]	; 0xd8
 8001f58:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5a:	22b8      	movs	r2, #184	; 0xb8
 8001f5c:	a805      	add	r0, sp, #20
 8001f5e:	f015 ffcf 	bl	8017f00 <memset>
  if(hltdc->Instance==LTDC)
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_LTDC_MspInit+0x114>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f6a:	b038      	add	sp, #224	; 0xe0
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f72:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001f74:	2318      	movs	r3, #24
 8001f76:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8001f78:	23c9      	movs	r3, #201	; 0xc9
 8001f7a:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f80:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8001f82:	2315      	movs	r3, #21
 8001f84:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001f8c:	f241 5356 	movw	r3, #5462	; 0x1556
 8001f90:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f92:	a805      	add	r0, sp, #20
 8001f94:	f005 fc42 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d15c      	bne.n	8002056 <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_LTDC_MspInit+0x118>)
 8001f9e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001faa:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001fae:	f002 0208 	and.w	r2, r2, #8
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fb6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fc2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fc6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001fca:	9202      	str	r2, [sp, #8]
 8001fcc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fce:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fda:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fde:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fe2:	9203      	str	r2, [sp, #12]
 8001fe4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fe6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001ff2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	9304      	str	r3, [sp, #16]
 8001ffc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8001ffe:	23ff      	movs	r3, #255	; 0xff
 8002000:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2602      	movs	r6, #2
 8002004:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2400      	movs	r4, #0
 8002008:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800200c:	250e      	movs	r5, #14
 800200e:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002010:	a933      	add	r1, sp, #204	; 0xcc
 8002012:	4814      	ldr	r0, [pc, #80]	; (8002064 <HAL_LTDC_MspInit+0x11c>)
 8002014:	f002 ffce 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002024:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002026:	a933      	add	r1, sp, #204	; 0xcc
 8002028:	480f      	ldr	r0, [pc, #60]	; (8002068 <HAL_LTDC_MspInit+0x120>)
 800202a:	f002 ffc3 	bl	8004fb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800202e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002032:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800203a:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800203c:	a933      	add	r1, sp, #204	; 0xcc
 800203e:	480b      	ldr	r0, [pc, #44]	; (800206c <HAL_LTDC_MspInit+0x124>)
 8002040:	f002 ffb8 	bl	8004fb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002044:	4622      	mov	r2, r4
 8002046:	2105      	movs	r1, #5
 8002048:	2058      	movs	r0, #88	; 0x58
 800204a:	f002 fd33 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800204e:	2058      	movs	r0, #88	; 0x58
 8002050:	f002 fd66 	bl	8004b20 <HAL_NVIC_EnableIRQ>
}
 8002054:	e789      	b.n	8001f6a <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 8002056:	f7ff feb1 	bl	8001dbc <Error_Handler>
 800205a:	e79f      	b.n	8001f9c <HAL_LTDC_MspInit+0x54>
 800205c:	50001000 	.word	0x50001000
 8002060:	58024400 	.word	0x58024400
 8002064:	58022800 	.word	0x58022800
 8002068:	58022400 	.word	0x58022400
 800206c:	58022000 	.word	0x58022000

08002070 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002070:	b510      	push	{r4, lr}
 8002072:	b0b0      	sub	sp, #192	; 0xc0
 8002074:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002076:	22b8      	movs	r2, #184	; 0xb8
 8002078:	2100      	movs	r1, #0
 800207a:	a802      	add	r0, sp, #8
 800207c:	f015 ff40 	bl	8017f00 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002080:	6822      	ldr	r2, [r4, #0]
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_OSPI_MspInit+0x8c>)
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002088:	b030      	add	sp, #192	; 0xc0
 800208a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800208c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002090:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8002092:	2318      	movs	r3, #24
 8002094:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8002096:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800209a:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020a0:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020a2:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80020a4:	2320      	movs	r3, #32
 80020a6:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80020a8:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	a802      	add	r0, sp, #8
 80020ac:	f005 fbb6 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 80020b0:	bb08      	cbnz	r0, 80020f6 <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_OSPI_MspInit+0x90>)
 80020b4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020b8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80020bc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80020c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020c8:	9200      	str	r2, [sp, #0]
 80020ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80020d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80020dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2105      	movs	r1, #5
 80020e8:	205c      	movs	r0, #92	; 0x5c
 80020ea:	f002 fce3 	bl	8004ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80020ee:	205c      	movs	r0, #92	; 0x5c
 80020f0:	f002 fd16 	bl	8004b20 <HAL_NVIC_EnableIRQ>
}
 80020f4:	e7c8      	b.n	8002088 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80020f6:	f7ff fe61 	bl	8001dbc <Error_Handler>
 80020fa:	e7da      	b.n	80020b2 <HAL_OSPI_MspInit+0x42>
 80020fc:	52005000 	.word	0x52005000
 8002100:	58024400 	.word	0x58024400

08002104 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002104:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8002106:	6802      	ldr	r2, [r0, #0]
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_OSPI_MspDeInit+0x30>)
 800210a:	429a      	cmp	r2, r3
 800210c:	d000      	beq.n	8002110 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800210e:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_OSPI_MspDeInit+0x34>)
 8002112:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002116:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800211a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800211e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002122:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002126:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 800212a:	205c      	movs	r0, #92	; 0x5c
 800212c:	f002 fd06 	bl	8004b3c <HAL_NVIC_DisableIRQ>
}
 8002130:	e7ed      	b.n	800210e <HAL_OSPI_MspDeInit+0xa>
 8002132:	bf00      	nop
 8002134:	52005000 	.word	0x52005000
 8002138:	58024400 	.word	0x58024400

0800213c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213c:	280f      	cmp	r0, #15
 800213e:	d901      	bls.n	8002144 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002142:	4770      	bx	lr
{
 8002144:	b510      	push	{r4, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800214a:	2200      	movs	r2, #0
 800214c:	4601      	mov	r1, r0
 800214e:	2036      	movs	r0, #54	; 0x36
 8002150:	f002 fcb0 	bl	8004ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002154:	2036      	movs	r0, #54	; 0x36
 8002156:	f002 fce3 	bl	8004b20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_InitTick+0x88>)
 800215c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_InitTick+0x8c>)
 8002160:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800216c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002178:	a901      	add	r1, sp, #4
 800217a:	a802      	add	r0, sp, #8
 800217c:	f005 fa18 	bl	80075b0 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002180:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002182:	b9bb      	cbnz	r3, 80021b4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002184:	f005 f9f0 	bl	8007568 <HAL_RCC_GetPCLK1Freq>
 8002188:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800218a:	4810      	ldr	r0, [pc, #64]	; (80021cc <HAL_InitTick+0x90>)
 800218c:	fba0 2303 	umull	r2, r3, r0, r3
 8002190:	0c9b      	lsrs	r3, r3, #18
 8002192:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8002194:	480e      	ldr	r0, [pc, #56]	; (80021d0 <HAL_InitTick+0x94>)
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_InitTick+0x98>)
 8002198:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800219a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800219e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021a0:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021a8:	f006 f98c 	bl	80084c4 <HAL_TIM_Base_Init>
 80021ac:	b130      	cbz	r0, 80021bc <HAL_InitTick+0x80>
  return HAL_ERROR;
 80021ae:	2001      	movs	r0, #1
}
 80021b0:	b00a      	add	sp, #40	; 0x28
 80021b2:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b4:	f005 f9d8 	bl	8007568 <HAL_RCC_GetPCLK1Freq>
 80021b8:	0043      	lsls	r3, r0, #1
 80021ba:	e7e6      	b.n	800218a <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <HAL_InitTick+0x94>)
 80021be:	f005 ffe5 	bl	800818c <HAL_TIM_Base_Start_IT>
 80021c2:	e7f5      	b.n	80021b0 <HAL_InitTick+0x74>
 80021c4:	24000048 	.word	0x24000048
 80021c8:	58024400 	.word	0x58024400
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	240013f4 	.word	0x240013f4
 80021d4:	40001000 	.word	0x40001000

080021d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d8:	4770      	bx	lr

080021da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <HardFault_Handler>

080021dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <MemManage_Handler>

080021de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler>

080021e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler>

080021e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e2:	4770      	bx	lr

080021e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80021e6:	2004      	movs	r0, #4
 80021e8:	f003 f8ac 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021ec:	bd08      	pop	{r3, pc}
	...

080021f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM6_DAC_IRQHandler+0xc>)
 80021f4:	f006 f816 	bl	8008224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021f8:	bd08      	pop	{r3, pc}
 80021fa:	bf00      	nop
 80021fc:	240013f4 	.word	0x240013f4

08002200 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002202:	4802      	ldr	r0, [pc, #8]	; (800220c <LTDC_IRQHandler+0xc>)
 8002204:	f003 fe4a 	bl	8005e9c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002208:	bd08      	pop	{r3, pc}
 800220a:	bf00      	nop
 800220c:	240012f0 	.word	0x240012f0

08002210 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002212:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA2D_IRQHandler+0xc>)
 8002214:	f002 fdae 	bl	8004d74 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002218:	bd08      	pop	{r3, pc}
 800221a:	bf00      	nop
 800221c:	2400123c 	.word	0x2400123c

08002220 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <OCTOSPI1_IRQHandler+0xc>)
 8002224:	f004 fa44 	bl	80066b0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8002228:	bd08      	pop	{r3, pc}
 800222a:	bf00      	nop
 800222c:	24001398 	.word	0x24001398

08002230 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002230:	2001      	movs	r0, #1
 8002232:	4770      	bx	lr

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002236:	f015 fd0f 	bl	8017c58 <__errno>
 800223a:	2316      	movs	r3, #22
 800223c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800223e:	f04f 30ff 	mov.w	r0, #4294967295
 8002242:	bd08      	pop	{r3, pc}

08002244 <_exit>:

void _exit (int status)
{
 8002244:	b508      	push	{r3, lr}
	_kill(status, -1);
 8002246:	f04f 31ff 	mov.w	r1, #4294967295
 800224a:	f7ff fff3 	bl	8002234 <_kill>
	while (1) {}		/* Make sure we hang here */
 800224e:	e7fe      	b.n	800224e <_exit+0xa>

08002250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	460c      	mov	r4, r1
 8002254:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	2500      	movs	r5, #0
 8002258:	e006      	b.n	8002268 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800225a:	f3af 8000 	nop.w
 800225e:	4621      	mov	r1, r4
 8002260:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8002266:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	42b5      	cmp	r5, r6
 800226a:	dbf6      	blt.n	800225a <_read+0xa>
	}

return len;
}
 800226c:	4630      	mov	r0, r6
 800226e:	bd70      	pop	{r4, r5, r6, pc}

08002270 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	460c      	mov	r4, r1
 8002274:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2500      	movs	r5, #0
 8002278:	e004      	b.n	8002284 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800227a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800227e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	3501      	adds	r5, #1
 8002284:	42b5      	cmp	r5, r6
 8002286:	dbf8      	blt.n	800227a <_write+0xa>
	}
	return len;
}
 8002288:	4630      	mov	r0, r6
 800228a:	bd70      	pop	{r4, r5, r6, pc}

0800228c <_close>:

int _close(int file)
{
	return -1;
}
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	4770      	bx	lr

08002292 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002298:	2000      	movs	r0, #0
 800229a:	4770      	bx	lr

0800229c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800229c:	2001      	movs	r0, #1
 800229e:	4770      	bx	lr

080022a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80022a0:	2000      	movs	r0, #0
 80022a2:	4770      	bx	lr

080022a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022a4:	b508      	push	{r3, lr}
 80022a6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <_sbrk+0x34>)
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	b142      	cbz	r2, 80022c0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <_sbrk+0x34>)
 80022b0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80022b2:	4403      	add	r3, r0
 80022b4:	466a      	mov	r2, sp
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d806      	bhi.n	80022c8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <_sbrk+0x34>)
 80022bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80022be:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80022c0:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <_sbrk+0x34>)
 80022c2:	4906      	ldr	r1, [pc, #24]	; (80022dc <_sbrk+0x38>)
 80022c4:	6011      	str	r1, [r2, #0]
 80022c6:	e7f2      	b.n	80022ae <_sbrk+0xa>
		errno = ENOMEM;
 80022c8:	f015 fcc6 	bl	8017c58 <__errno>
 80022cc:	230c      	movs	r3, #12
 80022ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e7f3      	b.n	80022be <_sbrk+0x1a>
 80022d6:	bf00      	nop
 80022d8:	24001440 	.word	0x24001440
 80022dc:	2400b090 	.word	0x2400b090

080022e0 <_ZN23ApplicationFontProviderD1Ev>:
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80022e2:	6002      	str	r2, [r0, #0]
 80022e4:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80022e6:	6002      	str	r2, [r0, #0]
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	080197b4 	.word	0x080197b4
 80022f0:	08019410 	.word	0x08019410

080022f4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80022f4:	b508      	push	{r3, lr}
    switch (typography)
 80022f6:	2901      	cmp	r1, #1
 80022f8:	d008      	beq.n	800230c <_ZN23ApplicationFontProvider7getFontEt+0x18>
 80022fa:	2902      	cmp	r1, #2
 80022fc:	d00a      	beq.n	8002314 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80022fe:	b109      	cbz	r1, 8002304 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 8002300:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002302:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002304:	f000 fbd6 	bl	8002ab4 <_ZN17TypedTextDatabase8getFontsEv>
 8002308:	6800      	ldr	r0, [r0, #0]
 800230a:	e7fa      	b.n	8002302 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800230c:	f000 fbd2 	bl	8002ab4 <_ZN17TypedTextDatabase8getFontsEv>
 8002310:	6840      	ldr	r0, [r0, #4]
 8002312:	e7f6      	b.n	8002302 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002314:	f000 fbce 	bl	8002ab4 <_ZN17TypedTextDatabase8getFontsEv>
 8002318:	6880      	ldr	r0, [r0, #8]
 800231a:	e7f2      	b.n	8002302 <_ZN23ApplicationFontProvider7getFontEt+0xe>

0800231c <_ZN23ApplicationFontProviderD0Ev>:
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8002322:	6003      	str	r3, [r0, #0]
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 8002326:	6003      	str	r3, [r0, #0]
 8002328:	2104      	movs	r1, #4
 800232a:	f015 fc34 	bl	8017b96 <_ZdlPvj>
 800232e:	4620      	mov	r0, r4
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	080197b4 	.word	0x080197b4
 8002338:	08019410 	.word	0x08019410

0800233c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800233c:	4800      	ldr	r0, [pc, #0]	; (8002340 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800233e:	4770      	bx	lr
 8002340:	080197c0 	.word	0x080197c0

08002344 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002344:	2001      	movs	r0, #1
 8002346:	4770      	bx	lr

08002348 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8002348:	b169      	cbz	r1, 8002366 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800234a:	b510      	push	{r4, lr}
 800234c:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002352:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	689c      	ldr	r4, [r3, #8]
 800235a:	f10d 0303 	add.w	r3, sp, #3
 800235e:	aa01      	add	r2, sp, #4
 8002360:	47a0      	blx	r4
        return glyph;
    }
 8002362:	b002      	add	sp, #8
 8002364:	bd10      	pop	{r4, pc}
            return 0;
 8002366:	2000      	movs	r0, #0
    }
 8002368:	4770      	bx	lr

0800236a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800236a:	8940      	ldrh	r0, [r0, #10]
 800236c:	4770      	bx	lr

0800236e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800236e:	8980      	ldrh	r0, [r0, #12]
 8002370:	4770      	bx	lr

08002372 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002372:	8880      	ldrh	r0, [r0, #4]
 8002374:	4770      	bx	lr

08002376 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002376:	8883      	ldrh	r3, [r0, #4]
 8002378:	7980      	ldrb	r0, [r0, #6]
 800237a:	4418      	add	r0, r3
    }
 800237c:	b280      	uxth	r0, r0
 800237e:	4770      	bx	lr

08002380 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002380:	79c0      	ldrb	r0, [r0, #7]
    }
 8002382:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002386:	4770      	bx	lr

08002388 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002388:	79c0      	ldrb	r0, [r0, #7]
    }
 800238a:	09c0      	lsrs	r0, r0, #7
 800238c:	4770      	bx	lr
	...

08002390 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002390:	4b01      	ldr	r3, [pc, #4]	; (8002398 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8002392:	6003      	str	r3, [r0, #0]
    }
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	08019b08 	.word	0x08019b08

0800239c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 800239c:	4770      	bx	lr

0800239e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800239e:	4770      	bx	lr

080023a0 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80023a0:	4770      	bx	lr

080023a2 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80023a2:	6041      	str	r1, [r0, #4]
    }
 80023a4:	4770      	bx	lr

080023a6 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80023a6:	2301      	movs	r3, #1
 80023a8:	7203      	strb	r3, [r0, #8]
    }
 80023aa:	4770      	bx	lr

080023ac <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 80023ae:	6002      	str	r2, [r0, #0]
    {
 80023b0:	4a02      	ldr	r2, [pc, #8]	; (80023bc <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 80023b2:	6002      	str	r2, [r0, #0]
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	08019b2c 	.word	0x08019b2c
 80023bc:	08019b08 	.word	0x08019b08

080023c0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4604      	mov	r4, r0
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 80023c6:	6003      	str	r3, [r0, #0]
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 80023ca:	6003      	str	r3, [r0, #0]
 80023cc:	210c      	movs	r1, #12
 80023ce:	f015 fbe2 	bl	8017b96 <_ZdlPvj>
 80023d2:	4620      	mov	r0, r4
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	bf00      	nop
 80023d8:	08019b2c 	.word	0x08019b2c
 80023dc:	08019b08 	.word	0x08019b08

080023e0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80023e0:	b510      	push	{r4, lr}
 80023e2:	4604      	mov	r4, r0
    {
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 80023e6:	6003      	str	r3, [r0, #0]
    }
 80023e8:	210c      	movs	r1, #12
 80023ea:	f015 fbd4 	bl	8017b96 <_ZdlPvj>
 80023ee:	4620      	mov	r0, r4
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	bf00      	nop
 80023f4:	08019b08 	.word	0x08019b08

080023f8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80023f8:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80023fa:	f00a fea7 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 80023fe:	f00b fa4b 	bl	800d898 <_ZN8touchgfx11Application10invalidateEv>
    }
 8002402:	bd08      	pop	{r3, pc}

08002404 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
 800240a:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 800240c:	f00a fec0 	bl	800d190 <_ZN8touchgfx11ApplicationC1Ev>
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8002412:	6023      	str	r3, [r4, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 800241a:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 8002420:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8002424:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8002428:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 800242e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002432:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 8002436:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 800243a:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 800243e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 8002442:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 8002446:	4d0d      	ldr	r5, [pc, #52]	; (800247c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8002448:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800244a:	6803      	ldr	r3, [r0, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002456:	b10a      	cbz	r2, 800245c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 8002458:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800245a:	b900      	cbnz	r0, 800245e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 800245c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800245e:	f010 fd76 	bl	8012f4e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002462:	4620      	mov	r0, r4
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	bf00      	nop
 8002468:	08019474 	.word	0x08019474
 800246c:	2400ae58 	.word	0x2400ae58
 8002470:	080194d8 	.word	0x080194d8
 8002474:	0801945c 	.word	0x0801945c
 8002478:	080194c0 	.word	0x080194c0
 800247c:	2400ae0c 	.word	0x2400ae0c

08002480 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002480:	b410      	push	{r4}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8002488:	9206      	str	r2, [sp, #24]
 800248a:	2200      	movs	r2, #0
 800248c:	9207      	str	r2, [sp, #28]
 800248e:	46ec      	mov	ip, sp
 8002490:	aa08      	add	r2, sp, #32
 8002492:	e912 0003 	ldmdb	r2, {r0, r1}
 8002496:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 800249a:	4c0c      	ldr	r4, [pc, #48]	; (80024cc <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 800249c:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 80024a0:	9202      	str	r2, [sp, #8]
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	aa04      	add	r2, sp, #16
 80024a6:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80024aa:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 80024ae:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 80024b2:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 80024b6:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 80024b8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80024bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80024c0:	b009      	add	sp, #36	; 0x24
 80024c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	08002625 	.word	0x08002625
 80024cc:	0801945c 	.word	0x0801945c
 80024d0:	080194c0 	.word	0x080194c0

080024d4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80024d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d8:	4607      	mov	r7, r0
 80024da:	4688      	mov	r8, r1
 80024dc:	4615      	mov	r5, r2
 80024de:	4699      	mov	r9, r3
 80024e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024e4:	6890      	ldr	r0, [r2, #8]
 80024e6:	6803      	ldr	r3, [r0, #0]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4798      	blx	r3
 80024ec:	2897      	cmp	r0, #151	; 0x97
 80024ee:	d976      	bls.n	80025de <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024f0:	6868      	ldr	r0, [r5, #4]
 80024f2:	6803      	ldr	r3, [r0, #0]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4798      	blx	r3
 80024f8:	280f      	cmp	r0, #15
 80024fa:	d976      	bls.n	80025ea <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80024fc:	68e8      	ldr	r0, [r5, #12]
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4798      	blx	r3
 8002504:	280b      	cmp	r0, #11
 8002506:	d976      	bls.n	80025f6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 8002508:	f00a fe20 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 800250c:	f00a fe24 	bl	800d158 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002510:	f8d9 0000 	ldr.w	r0, [r9]
 8002514:	b110      	cbz	r0, 800251c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 8002516:	6803      	ldr	r3, [r0, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4798      	blx	r3
    if (*currentTrans)
 800251c:	f8d9 0000 	ldr.w	r0, [r9]
 8002520:	b110      	cbz	r0, 8002528 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 8002522:	6803      	ldr	r3, [r0, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4798      	blx	r3
    if (*currentScreen)
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	b110      	cbz	r0, 8002532 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 800252c:	6803      	ldr	r3, [r0, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4798      	blx	r3
    if (*currentPresenter)
 8002532:	f8d8 0000 	ldr.w	r0, [r8]
 8002536:	b110      	cbz	r0, 800253e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4798      	blx	r3
    if (*currentScreen)
 800253e:	6838      	ldr	r0, [r7, #0]
 8002540:	b110      	cbz	r0, 8002548 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4798      	blx	r3
    if (*currentPresenter)
 8002548:	f8d8 0000 	ldr.w	r0, [r8]
 800254c:	b110      	cbz	r0, 8002554 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 800254e:	6803      	ldr	r3, [r0, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002554:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	2100      	movs	r1, #0
 800255c:	4798      	blx	r3
 800255e:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002562:	6003      	str	r3, [r0, #0]
 8002564:	f04f 0b00 	mov.w	fp, #0
 8002568:	f8c0 b004 	str.w	fp, [r0, #4]
 800256c:	f880 b008 	strb.w	fp, [r0, #8]
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002572:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002574:	68a8      	ldr	r0, [r5, #8]
 8002576:	6803      	ldr	r3, [r0, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	4659      	mov	r1, fp
 800257c:	4798      	blx	r3
 800257e:	4606      	mov	r6, r0
 8002580:	f000 fd08 	bl	8002f94 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002584:	6868      	ldr	r0, [r5, #4]
 8002586:	6803      	ldr	r3, [r0, #0]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4659      	mov	r1, fp
 800258c:	4798      	blx	r3
 800258e:	4605      	mov	r5, r0
 8002590:	4631      	mov	r1, r6
 8002592:	f000 fc87 	bl	8002ea4 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8002596:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800259a:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 800259e:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	d02e      	beq.n	8002602 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80025a4:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80025a6:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80025aa:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80025ae:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4630      	mov	r0, r6
 80025b6:	4798      	blx	r3
    newPresenter->activate();
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4628      	mov	r0, r5
 80025be:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80025c0:	4621      	mov	r1, r4
 80025c2:	4630      	mov	r0, r6
 80025c4:	f00c f9a8 	bl	800e918 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4620      	mov	r0, r4
 80025ce:	4798      	blx	r3
    newTransition->invalidate();
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	4620      	mov	r0, r4
 80025d6:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80025d8:	4628      	mov	r0, r5
 80025da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025e2:	21a3      	movs	r1, #163	; 0xa3
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025e6:	f015 fb05 	bl	8017bf4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025ee:	21a4      	movs	r1, #164	; 0xa4
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025f2:	f015 faff 	bl	8017bf4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025fa:	21a5      	movs	r1, #165	; 0xa5
 80025fc:	4806      	ldr	r0, [pc, #24]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025fe:	f015 faf9 	bl	8017bf4 <__assert_func>
    model->bind(newPresenter);
 8002602:	462b      	mov	r3, r5
 8002604:	e7cf      	b.n	80025a6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 8002606:	bf00      	nop
 8002608:	08019b08 	.word	0x08019b08
 800260c:	08019b2c 	.word	0x08019b2c
 8002610:	080197d4 	.word	0x080197d4
 8002614:	08019864 	.word	0x08019864
 8002618:	08019970 	.word	0x08019970
 800261c:	080199b8 	.word	0x080199b8
 8002620:	08019a5c 	.word	0x08019a5c

08002624 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 8002624:	b500      	push	{lr}
 8002626:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002628:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8002630:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002634:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 800263a:	f7ff ff4b 	bl	80024d4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800263e:	b003      	add	sp, #12
 8002640:	f85d fb04 	ldr.w	pc, [sp], #4
 8002644:	2400ae4c 	.word	0x2400ae4c
 8002648:	2400ae48 	.word	0x2400ae48

0800264c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800264c:	6a00      	ldr	r0, [r0, #32]
 800264e:	4770      	bx	lr

08002650 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002650:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002652:	4770      	bx	lr

08002654 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8002656:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800265a:	6002      	str	r2, [r0, #0]
    {
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 800265e:	6002      	str	r2, [r0, #0]
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	08019b50 	.word	0x08019b50
 8002668:	0801a3e0 	.word	0x0801a3e0
 800266c:	08019d90 	.word	0x08019d90

08002670 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8002670:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002672:	888b      	ldrh	r3, [r1, #4]
 8002674:	0adb      	lsrs	r3, r3, #11
 8002676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800267a:	680b      	ldr	r3, [r1, #0]
}
 800267c:	4418      	add	r0, r3
 800267e:	4770      	bx	lr

08002680 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8002680:	4694      	mov	ip, r2
 8002682:	b1da      	cbz	r2, 80026bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8002684:	7b13      	ldrb	r3, [r2, #12]
 8002686:	b1db      	cbz	r3, 80026c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002688:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800268a:	f89c 000d 	ldrb.w	r0, [ip, #13]
 800268e:	0200      	lsls	r0, r0, #8
 8002690:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002694:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8002698:	ea40 000c 	orr.w	r0, r0, ip
 800269c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b17b      	cbz	r3, 80026c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80026a4:	8810      	ldrh	r0, [r2, #0]
 80026a6:	4288      	cmp	r0, r1
 80026a8:	d005      	beq.n	80026b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 80026aa:	4288      	cmp	r0, r1
 80026ac:	d80c      	bhi.n	80026c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3204      	adds	r2, #4
 80026b4:	e7f5      	b.n	80026a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 80026b6:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80026ba:	4770      	bx	lr
        return 0;
 80026bc:	2000      	movs	r0, #0
 80026be:	4770      	bx	lr
 80026c0:	2000      	movs	r0, #0
 80026c2:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 80026c4:	2000      	movs	r0, #0
 80026c6:	4770      	bx	lr
 80026c8:	2000      	movs	r0, #0
}
 80026ca:	4770      	bx	lr

080026cc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80026cc:	b510      	push	{r4, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80026d2:	6003      	str	r3, [r0, #0]
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80026d6:	6003      	str	r3, [r0, #0]
    {
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80026da:	6003      	str	r3, [r0, #0]
 80026dc:	2128      	movs	r1, #40	; 0x28
 80026de:	f015 fa5a 	bl	8017b96 <_ZdlPvj>
 80026e2:	4620      	mov	r0, r4
 80026e4:	bd10      	pop	{r4, pc}
 80026e6:	bf00      	nop
 80026e8:	08019b50 	.word	0x08019b50
 80026ec:	0801a3e0 	.word	0x0801a3e0
 80026f0:	08019d90 	.word	0x08019d90

080026f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80026f4:	b530      	push	{r4, r5, lr}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80026fa:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80026fe:	9506      	str	r5, [sp, #24]
 8002700:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8002704:	9505      	str	r5, [sp, #20]
 8002706:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800270a:	9504      	str	r5, [sp, #16]
 800270c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002710:	9503      	str	r5, [sp, #12]
 8002712:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8002716:	9502      	str	r5, [sp, #8]
 8002718:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800271c:	9501      	str	r5, [sp, #4]
 800271e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8002722:	9500      	str	r5, [sp, #0]
 8002724:	f00b fd58 	bl	800e1d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 800272a:	6023      	str	r3, [r4, #0]
 800272c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800272e:	61a3      	str	r3, [r4, #24]
 8002730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002732:	61e3      	str	r3, [r4, #28]
 8002734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002736:	6223      	str	r3, [r4, #32]
 8002738:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800273a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800273c:	4620      	mov	r0, r4
 800273e:	b009      	add	sp, #36	; 0x24
 8002740:	bd30      	pop	{r4, r5, pc}
 8002742:	bf00      	nop
 8002744:	08019b50 	.word	0x08019b50

08002748 <__tcf_0>:
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <__tcf_0+0x10>)
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__tcf_0+0x14>)
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__tcf_0+0x18>)
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__tcf_0+0x1c>)
 8002754:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002756:	4770      	bx	lr
 8002758:	24001448 	.word	0x24001448
 800275c:	08019b50 	.word	0x08019b50
 8002760:	0801a3e0 	.word	0x0801a3e0
 8002764:	08019d90 	.word	0x08019d90

08002768 <_Z23getFont_verdana_10_4bppv>:
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <_Z23getFont_verdana_10_4bppv+0x60>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f3bf 8f5b 	dmb	ish
 8002770:	f013 0f01 	tst.w	r3, #1
 8002774:	d001      	beq.n	800277a <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8002776:	4815      	ldr	r0, [pc, #84]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x64>)
 8002778:	4770      	bx	lr
{
 800277a:	b500      	push	{lr}
 800277c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800277e:	4812      	ldr	r0, [pc, #72]	; (80027c8 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002780:	f015 fa0b 	bl	8017b9a <__cxa_guard_acquire>
 8002784:	b918      	cbnz	r0, 800278e <_Z23getFont_verdana_10_4bppv+0x26>
}
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x64>)
 8002788:	b00d      	add	sp, #52	; 0x34
 800278a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800278e:	2300      	movs	r3, #0
 8002790:	930a      	str	r3, [sp, #40]	; 0x28
 8002792:	9309      	str	r3, [sp, #36]	; 0x24
 8002794:	9308      	str	r3, [sp, #32]
 8002796:	223f      	movs	r2, #63	; 0x3f
 8002798:	9207      	str	r2, [sp, #28]
 800279a:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800279c:	9206      	str	r2, [sp, #24]
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80027a0:	9205      	str	r2, [sp, #20]
 80027a2:	9304      	str	r3, [sp, #16]
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	9202      	str	r2, [sp, #8]
 80027aa:	2104      	movs	r1, #4
 80027ac:	9101      	str	r1, [sp, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	230a      	movs	r3, #10
 80027b2:	4909      	ldr	r1, [pc, #36]	; (80027d8 <_Z23getFont_verdana_10_4bppv+0x70>)
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x64>)
 80027b6:	f7ff ff9d 	bl	80026f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80027ba:	4808      	ldr	r0, [pc, #32]	; (80027dc <_Z23getFont_verdana_10_4bppv+0x74>)
 80027bc:	f015 fa38 	bl	8017c30 <atexit>
 80027c0:	4801      	ldr	r0, [pc, #4]	; (80027c8 <_Z23getFont_verdana_10_4bppv+0x60>)
 80027c2:	f015 f9f6 	bl	8017bb2 <__cxa_guard_release>
 80027c6:	e7de      	b.n	8002786 <_Z23getFont_verdana_10_4bppv+0x1e>
 80027c8:	24001444 	.word	0x24001444
 80027cc:	24001448 	.word	0x24001448
 80027d0:	0801a760 	.word	0x0801a760
 80027d4:	0801a76c 	.word	0x0801a76c
 80027d8:	90000178 	.word	0x90000178
 80027dc:	08002749 	.word	0x08002749

080027e0 <__tcf_0>:
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <__tcf_0+0x10>)
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__tcf_0+0x14>)
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__tcf_0+0x18>)
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__tcf_0+0x1c>)
 80027ec:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80027ee:	4770      	bx	lr
 80027f0:	24001474 	.word	0x24001474
 80027f4:	08019b50 	.word	0x08019b50
 80027f8:	0801a3e0 	.word	0x0801a3e0
 80027fc:	08019d90 	.word	0x08019d90

08002800 <_Z23getFont_verdana_20_4bppv>:
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f3bf 8f5b 	dmb	ish
 8002808:	f013 0f01 	tst.w	r3, #1
 800280c:	d001      	beq.n	8002812 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 800280e:	4815      	ldr	r0, [pc, #84]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002810:	4770      	bx	lr
{
 8002812:	b500      	push	{lr}
 8002814:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002816:	4812      	ldr	r0, [pc, #72]	; (8002860 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002818:	f015 f9bf 	bl	8017b9a <__cxa_guard_acquire>
 800281c:	b918      	cbnz	r0, 8002826 <_Z23getFont_verdana_20_4bppv+0x26>
}
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002820:	b00d      	add	sp, #52	; 0x34
 8002822:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002826:	2300      	movs	r3, #0
 8002828:	930a      	str	r3, [sp, #40]	; 0x28
 800282a:	9309      	str	r3, [sp, #36]	; 0x24
 800282c:	9308      	str	r3, [sp, #32]
 800282e:	223f      	movs	r2, #63	; 0x3f
 8002830:	9207      	str	r2, [sp, #28]
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002834:	9206      	str	r2, [sp, #24]
 8002836:	4a0d      	ldr	r2, [pc, #52]	; (800286c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002838:	9205      	str	r2, [sp, #20]
 800283a:	9304      	str	r3, [sp, #16]
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	9202      	str	r2, [sp, #8]
 8002842:	2104      	movs	r1, #4
 8002844:	9101      	str	r1, [sp, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2314      	movs	r3, #20
 800284a:	4909      	ldr	r1, [pc, #36]	; (8002870 <_Z23getFont_verdana_20_4bppv+0x70>)
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x64>)
 800284e:	f7ff ff51 	bl	80026f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <_Z23getFont_verdana_20_4bppv+0x74>)
 8002854:	f015 f9ec 	bl	8017c30 <atexit>
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <_Z23getFont_verdana_20_4bppv+0x60>)
 800285a:	f015 f9aa 	bl	8017bb2 <__cxa_guard_release>
 800285e:	e7de      	b.n	800281e <_Z23getFont_verdana_20_4bppv+0x1e>
 8002860:	24001470 	.word	0x24001470
 8002864:	24001474 	.word	0x24001474
 8002868:	0801a764 	.word	0x0801a764
 800286c:	0801a770 	.word	0x0801a770
 8002870:	90000188 	.word	0x90000188
 8002874:	080027e1 	.word	0x080027e1

08002878 <__tcf_0>:
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <__tcf_0+0x10>)
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__tcf_0+0x14>)
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__tcf_0+0x18>)
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__tcf_0+0x1c>)
 8002884:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002886:	4770      	bx	lr
 8002888:	240014a0 	.word	0x240014a0
 800288c:	08019b50 	.word	0x08019b50
 8002890:	0801a3e0 	.word	0x0801a3e0
 8002894:	08019d90 	.word	0x08019d90

08002898 <_Z23getFont_verdana_40_4bppv>:
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f3bf 8f5b 	dmb	ish
 80028a0:	f013 0f01 	tst.w	r3, #1
 80028a4:	d001      	beq.n	80028aa <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x64>)
 80028a8:	4770      	bx	lr
{
 80028aa:	b500      	push	{lr}
 80028ac:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80028ae:	4812      	ldr	r0, [pc, #72]	; (80028f8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80028b0:	f015 f973 	bl	8017b9a <__cxa_guard_acquire>
 80028b4:	b918      	cbnz	r0, 80028be <_Z23getFont_verdana_40_4bppv+0x26>
}
 80028b6:	4811      	ldr	r0, [pc, #68]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x64>)
 80028b8:	b00d      	add	sp, #52	; 0x34
 80028ba:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80028be:	2300      	movs	r3, #0
 80028c0:	930a      	str	r3, [sp, #40]	; 0x28
 80028c2:	9309      	str	r3, [sp, #36]	; 0x24
 80028c4:	9308      	str	r3, [sp, #32]
 80028c6:	223f      	movs	r2, #63	; 0x3f
 80028c8:	9207      	str	r2, [sp, #28]
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <_Z23getFont_verdana_40_4bppv+0x68>)
 80028cc:	9206      	str	r2, [sp, #24]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80028d0:	9205      	str	r2, [sp, #20]
 80028d2:	9304      	str	r3, [sp, #16]
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	9202      	str	r2, [sp, #8]
 80028da:	2104      	movs	r1, #4
 80028dc:	9101      	str	r1, [sp, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2328      	movs	r3, #40	; 0x28
 80028e2:	4909      	ldr	r1, [pc, #36]	; (8002908 <_Z23getFont_verdana_40_4bppv+0x70>)
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x64>)
 80028e6:	f7ff ff05 	bl	80026f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80028ea:	4808      	ldr	r0, [pc, #32]	; (800290c <_Z23getFont_verdana_40_4bppv+0x74>)
 80028ec:	f015 f9a0 	bl	8017c30 <atexit>
 80028f0:	4801      	ldr	r0, [pc, #4]	; (80028f8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80028f2:	f015 f95e 	bl	8017bb2 <__cxa_guard_release>
 80028f6:	e7de      	b.n	80028b6 <_Z23getFont_verdana_40_4bppv+0x1e>
 80028f8:	2400149c 	.word	0x2400149c
 80028fc:	240014a0 	.word	0x240014a0
 8002900:	0801a768 	.word	0x0801a768
 8002904:	0801a774 	.word	0x0801a774
 8002908:	90000198 	.word	0x90000198
 800290c:	08002879 	.word	0x08002879

08002910 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 8002910:	2000      	movs	r0, #0
 8002912:	4770      	bx	lr

08002914 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002914:	2000      	movs	r0, #0
 8002916:	4770      	bx	lr

08002918 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr

0800291c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800291c:	b40e      	push	{r1, r2, r3}
 800291e:	b500      	push	{lr}
 8002920:	b082      	sub	sp, #8
 8002922:	ab03      	add	r3, sp, #12
 8002924:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002928:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800292a:	2100      	movs	r1, #0
 800292c:	f00b fa84 	bl	800de38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002930:	b002      	add	sp, #8
 8002932:	f85d eb04 	ldr.w	lr, [sp], #4
 8002936:	b003      	add	sp, #12
 8002938:	4770      	bx	lr

0800293a <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800293a:	b40c      	push	{r2, r3}
 800293c:	b500      	push	{lr}
 800293e:	b083      	sub	sp, #12
 8002940:	ab04      	add	r3, sp, #16
 8002942:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002946:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002948:	f00b fa76 	bl	800de38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800294c:	b003      	add	sp, #12
 800294e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002952:	b002      	add	sp, #8
 8002954:	4770      	bx	lr
	...

08002958 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8002958:	b510      	push	{r4, lr}
 800295a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800295c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800295e:	b133      	cbz	r3, 800296e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002960:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002962:	b143      	cbz	r3, 8002976 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8002964:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002966:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800296a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800296c:	b94b      	cbnz	r3, 8002982 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800296e:	4620      	mov	r0, r4
 8002970:	f00c fba0 	bl	800f0b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8002974:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8002978:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800297a:	21c0      	movs	r1, #192	; 0xc0
 800297c:	481c      	ldr	r0, [pc, #112]	; (80029f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800297e:	f015 f939 	bl	8017bf4 <__assert_func>
        substituteGlyphs();
 8002982:	f00c fc95 	bl	800f2b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002986:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8002988:	2801      	cmp	r0, #1
 800298a:	d91d      	bls.n	80029c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 800298c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800298e:	1c4b      	adds	r3, r1, #1
 8002990:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002992:	2b09      	cmp	r3, #9
 8002994:	d81e      	bhi.n	80029d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 8002996:	461a      	mov	r2, r3
 8002998:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800299c:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80029a0:	f640 123f 	movw	r2, #2367	; 0x93f
 80029a4:	4594      	cmp	ip, r2
 80029a6:	d1e2      	bne.n	800296e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80029a8:	b1b8      	cbz	r0, 80029da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 80029aa:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80029ae:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	d900      	bls.n	80029b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 80029b4:	2300      	movs	r3, #0
 80029b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80029ba:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80029bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80029c0:	f640 133f 	movw	r3, #2367	; 0x93f
 80029c4:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 80029c6:	e7d2      	b.n	800296e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80029cc:	21c5      	movs	r1, #197	; 0xc5
 80029ce:	4808      	ldr	r0, [pc, #32]	; (80029f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029d0:	f015 f910 	bl	8017bf4 <__assert_func>
            return buffer[index < size ? index : index - size];
 80029d4:	f1a3 020a 	sub.w	r2, r3, #10
 80029d8:	e7de      	b.n	8002998 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80029dc:	4a03      	ldr	r2, [pc, #12]	; (80029ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80029de:	21c0      	movs	r1, #192	; 0xc0
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029e2:	f015 f907 	bl	8017bf4 <__assert_func>
 80029e6:	bf00      	nop
 80029e8:	08019ba0 	.word	0x08019ba0
 80029ec:	08019bac 	.word	0x08019bac
 80029f0:	08019c58 	.word	0x08019c58
 80029f4:	08019ca4 	.word	0x08019ca4
 80029f8:	08019cb4 	.word	0x08019cb4

080029fc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80029fc:	b508      	push	{r3, lr}
    fillInputBuffer();
 80029fe:	f00c fb22 	bl	800f046 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8002a02:	bd08      	pop	{r3, pc}

08002a04 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002a04:	bb40      	cbnz	r0, 8002a58 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 8002a06:	b538      	push	{r3, r4, r5, lr}
 8002a08:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002a0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a10:	b1c3      	cbz	r3, 8002a44 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4419      	add	r1, r3
 8002a16:	4812      	ldr	r0, [pc, #72]	; (8002a60 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002a18:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	4419      	add	r1, r3
 8002a1e:	4811      	ldr	r0, [pc, #68]	; (8002a64 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002a20:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002a22:	689c      	ldr	r4, [r3, #8]
 8002a24:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 8002a26:	b164      	cbz	r4, 8002a42 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002a2a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002a2c:	f000 f842 	bl	8002ab4 <_ZN17TypedTextDatabase8getFontsEv>
 8002a30:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002a32:	f000 f83d 	bl	8002ab0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002a38:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002a3c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002a40:	8018      	strh	r0, [r3, #0]
    }
}
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002a46:	490c      	ldr	r1, [pc, #48]	; (8002a78 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002a48:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8002a4e:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8002a52:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002a56:	e7e6      	b.n	8002a26 <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	240014c8 	.word	0x240014c8
 8002a60:	240014cc 	.word	0x240014cc
 8002a64:	240014d0 	.word	0x240014d0
 8002a68:	240014d4 	.word	0x240014d4
 8002a6c:	2400ae5c 	.word	0x2400ae5c
 8002a70:	2400ae64 	.word	0x2400ae64
 8002a74:	2400ae60 	.word	0x2400ae60
 8002a78:	900001ac 	.word	0x900001ac
 8002a7c:	900001a8 	.word	0x900001a8
 8002a80:	900001b4 	.word	0x900001b4

08002a84 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002a84:	2801      	cmp	r0, #1
 8002a86:	d000      	beq.n	8002a8a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8002a88:	4770      	bx	lr
 8002a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8e:	4299      	cmp	r1, r3
 8002a90:	d1fa      	bne.n	8002a88 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8002a92:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8002a94:	f7ff feb4 	bl	8002800 <_Z23getFont_verdana_20_4bppv>
};
 8002a98:	4c04      	ldr	r4, [pc, #16]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002a9a:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002a9c:	f7ff fefc 	bl	8002898 <_Z23getFont_verdana_40_4bppv>
};
 8002aa0:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002aa2:	f7ff fe61 	bl	8002768 <_Z23getFont_verdana_10_4bppv>
};
 8002aa6:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	bf00      	nop
 8002aac:	240014d8 	.word	0x240014d8

08002ab0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	4770      	bx	lr

08002ab4 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8002ab4:	4800      	ldr	r0, [pc, #0]	; (8002ab8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002ab6:	4770      	bx	lr
 8002ab8:	240014d8 	.word	0x240014d8

08002abc <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8002abc:	b508      	push	{r3, lr}
 8002abe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f7ff ffde 	bl	8002a84 <_Z41__static_initialization_and_destruction_0ii>
 8002ac8:	bd08      	pop	{r3, pc}

08002aca <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8002aca:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8002acc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002ad0:	b113      	cbz	r3, 8002ad8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8002ad2:	6803      	ldr	r3, [r0, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4798      	blx	r3
        }
    }
 8002ad8:	bd08      	pop	{r3, pc}

08002ada <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002ada:	2000      	movs	r0, #0
 8002adc:	4770      	bx	lr

08002ade <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002ade:	8081      	strh	r1, [r0, #4]
    }
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002ae2:	80c1      	strh	r1, [r0, #6]
    }
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002ae6:	8101      	strh	r1, [r0, #8]
    }
 8002ae8:	4770      	bx	lr

08002aea <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002aea:	8141      	strh	r1, [r0, #10]
    }
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002aee:	4770      	bx	lr

08002af0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af2:	4770      	bx	lr

08002af4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af4:	4770      	bx	lr

08002af6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002af8:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002afa:	6804      	ldr	r4, [r0, #0]
 8002afc:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8002afe:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002b02:	eba1 010c 	sub.w	r1, r1, ip
 8002b06:	88c3      	ldrh	r3, [r0, #6]
 8002b08:	1ad2      	subs	r2, r2, r3
 8002b0a:	b212      	sxth	r2, r2
 8002b0c:	b209      	sxth	r1, r1
 8002b0e:	47a0      	blx	r4
    }
 8002b10:	bd10      	pop	{r4, pc}

08002b12 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b16:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002b18:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8002b1a:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002b1c:	6813      	ldr	r3, [r2, #0]
 8002b1e:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002b20:	6010      	str	r0, [r2, #0]
    }
 8002b22:	4770      	bx	lr

08002b24 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002b24:	4770      	bx	lr

08002b26 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002b26:	4770      	bx	lr

08002b28 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002b28:	4770      	bx	lr

08002b2a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002b2a:	4770      	bx	lr

08002b2c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002b2c:	4770      	bx	lr

08002b2e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8002b2e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002b32:	b11a      	cbz	r2, 8002b3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8002b34:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002b38:	b102      	cbz	r2, 8002b3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002b3a:	6018      	str	r0, [r3, #0]
        }
    }
 8002b3c:	4770      	bx	lr
	...

08002b40 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8002b42:	6002      	str	r2, [r0, #0]
    {
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8002b46:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8002b4a:	6042      	str	r2, [r0, #4]
    {
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8002b4e:	6042      	str	r2, [r0, #4]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	08019e4c 	.word	0x08019e4c
 8002b58:	0801a474 	.word	0x0801a474
 8002b5c:	0801a018 	.word	0x0801a018
 8002b60:	0801a378 	.word	0x0801a378

08002b64 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8002b64:	b410      	push	{r4}
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8002b68:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8002b6c:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8002b6e:	490b      	ldr	r1, [pc, #44]	; (8002b9c <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8002b70:	66c1      	str	r1, [r0, #108]	; 0x6c
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8002b74:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8002b76:	4c0b      	ldr	r4, [pc, #44]	; (8002ba4 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8002b78:	6404      	str	r4, [r0, #64]	; 0x40
 8002b7a:	6401      	str	r1, [r0, #64]	; 0x40
 8002b7c:	6402      	str	r2, [r0, #64]	; 0x40
 8002b7e:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8002b80:	6001      	str	r1, [r0, #0]
 8002b82:	490a      	ldr	r1, [pc, #40]	; (8002bac <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8002b84:	6001      	str	r1, [r0, #0]
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8002b88:	6041      	str	r1, [r0, #4]
 8002b8a:	6042      	str	r2, [r0, #4]
 8002b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	08019e80 	.word	0x08019e80
 8002b98:	0801a268 	.word	0x0801a268
 8002b9c:	08019de4 	.word	0x08019de4
 8002ba0:	0801a378 	.word	0x0801a378
 8002ba4:	0801a200 	.word	0x0801a200
 8002ba8:	08019e4c 	.word	0x08019e4c
 8002bac:	0801a474 	.word	0x0801a474
 8002bb0:	0801a018 	.word	0x0801a018

08002bb4 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8002bbe:	6003      	str	r3, [r0, #0]
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8002bc2:	6003      	str	r3, [r0, #0]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8002bc6:	6043      	str	r3, [r0, #4]
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 8002bca:	6043      	str	r3, [r0, #4]
 8002bcc:	2140      	movs	r1, #64	; 0x40
 8002bce:	f014 ffe2 	bl	8017b96 <_ZdlPvj>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08019e4c 	.word	0x08019e4c
 8002bdc:	0801a474 	.word	0x0801a474
 8002be0:	0801a018 	.word	0x0801a018
 8002be4:	0801a378 	.word	0x0801a378

08002be8 <_ZN18mainScreenViewBaseD0Ev>:
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4604      	mov	r4, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <_ZN18mainScreenViewBaseD0Ev+0x34>)
 8002bee:	6003      	str	r3, [r0, #0]
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 8002bf2:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 8002bf6:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <_ZN18mainScreenViewBaseD0Ev+0x40>)
 8002bfa:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002bfc:	490b      	ldr	r1, [pc, #44]	; (8002c2c <_ZN18mainScreenViewBaseD0Ev+0x44>)
 8002bfe:	6401      	str	r1, [r0, #64]	; 0x40
 8002c00:	6402      	str	r2, [r0, #64]	; 0x40
 8002c02:	6403      	str	r3, [r0, #64]	; 0x40
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 8002c06:	6002      	str	r2, [r0, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 8002c0a:	6002      	str	r2, [r0, #0]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <_ZN18mainScreenViewBaseD0Ev+0x50>)
 8002c0e:	6042      	str	r2, [r0, #4]
 8002c10:	6043      	str	r3, [r0, #4]
 8002c12:	2198      	movs	r1, #152	; 0x98
 8002c14:	f014 ffbf 	bl	8017b96 <_ZdlPvj>
 8002c18:	4620      	mov	r0, r4
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	08019e80 	.word	0x08019e80
 8002c20:	0801a268 	.word	0x0801a268
 8002c24:	08019de4 	.word	0x08019de4
 8002c28:	0801a378 	.word	0x0801a378
 8002c2c:	0801a200 	.word	0x0801a200
 8002c30:	08019e4c 	.word	0x08019e4c
 8002c34:	0801a474 	.word	0x0801a474
 8002c38:	0801a018 	.word	0x0801a018

08002c3c <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8002c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c40:	b083      	sub	sp, #12
 8002c42:	4607      	mov	r7, r0
        : presenter(0)
 8002c44:	f00b fcbc 	bl	800e5c0 <_ZN8touchgfx6ScreenC1Ev>
 8002c48:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	2400      	movs	r4, #0
 8002c4e:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002c50:	463d      	mov	r5, r7
 8002c52:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8002c54:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002c58:	f04f 0926 	mov.w	r9, #38	; 0x26
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4628      	mov	r0, r5
 8002c62:	f015 f94d 	bl	8017f00 <memset>
          visible(true)
 8002c66:	f8df b114 	ldr.w	fp, [pc, #276]	; 8002d7c <_ZN18mainScreenViewBaseC1Ev+0x140>
 8002c6a:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8002c6e:	80ac      	strh	r4, [r5, #4]
 8002c70:	80ec      	strh	r4, [r5, #6]
 8002c72:	812c      	strh	r4, [r5, #8]
 8002c74:	816c      	strh	r4, [r5, #10]
 8002c76:	81ac      	strh	r4, [r5, #12]
 8002c78:	81ec      	strh	r4, [r5, #14]
 8002c7a:	822c      	strh	r4, [r5, #16]
 8002c7c:	826c      	strh	r4, [r5, #18]
 8002c7e:	616c      	str	r4, [r5, #20]
 8002c80:	61ac      	str	r4, [r5, #24]
 8002c82:	61ec      	str	r4, [r5, #28]
 8002c84:	842c      	strh	r4, [r5, #32]
 8002c86:	846c      	strh	r4, [r5, #34]	; 0x22
 8002c88:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8002c8c:	f04f 0a01 	mov.w	sl, #1
 8002c90:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002c96:	643b      	str	r3, [r7, #64]	; 0x40
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8002ca0:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8002ca4:	62ac      	str	r4, [r5, #40]	; 0x28
 8002ca6:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cae:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f015 f922 	bl	8017f00 <memset>
 8002cbc:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8002cc0:	80b4      	strh	r4, [r6, #4]
 8002cc2:	80f4      	strh	r4, [r6, #6]
 8002cc4:	8134      	strh	r4, [r6, #8]
 8002cc6:	8174      	strh	r4, [r6, #10]
 8002cc8:	81b4      	strh	r4, [r6, #12]
 8002cca:	81f4      	strh	r4, [r6, #14]
 8002ccc:	8234      	strh	r4, [r6, #16]
 8002cce:	8274      	strh	r4, [r6, #18]
 8002cd0:	6174      	str	r4, [r6, #20]
 8002cd2:	61b4      	str	r4, [r6, #24]
 8002cd4:	61f4      	str	r4, [r6, #28]
 8002cd6:	8434      	strh	r4, [r6, #32]
 8002cd8:	8474      	strh	r4, [r6, #34]	; 0x22
 8002cda:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8002cde:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 8002ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cea:	f8bd 3000 	ldrh.w	r3, [sp]
 8002cee:	84f3      	strh	r3, [r6, #38]	; 0x26
 8002cf0:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8002cf4:	4669      	mov	r1, sp
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f009 f90b 	bl	800bf12 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4621      	mov	r1, r4
 8002d02:	4628      	mov	r0, r5
 8002d04:	4798      	blx	r3
        setY(y);
 8002d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	4798      	blx	r3
        setWidth(width);
 8002d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002d18:	4628      	mov	r0, r5
 8002d1a:	4798      	blx	r3
        setHeight(height);
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d24:	4628      	mov	r0, r5
 8002d26:	4798      	blx	r3
        : color(col)
 8002d28:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002d2c:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8002d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4621      	mov	r1, r4
 8002d34:	4630      	mov	r0, r6
 8002d36:	4798      	blx	r3
        setY(y);
 8002d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4630      	mov	r0, r6
 8002d40:	4798      	blx	r3
 8002d42:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8002d46:	a901      	add	r1, sp, #4
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f009 f8e2 	bl	800bf12 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002d4e:	1d3c      	adds	r4, r7, #4
 8002d50:	4629      	mov	r1, r5
 8002d52:	4620      	mov	r0, r4
 8002d54:	f007 fef8 	bl	800ab48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f007 fef4 	bl	800ab48 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d60:	4638      	mov	r0, r7
 8002d62:	b003      	add	sp, #12
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d68:	08019e4c 	.word	0x08019e4c
 8002d6c:	08019e80 	.word	0x08019e80
 8002d70:	08019de4 	.word	0x08019de4
 8002d74:	0801a200 	.word	0x0801a200
 8002d78:	0801a268 	.word	0x0801a268
 8002d7c:	0801a378 	.word	0x0801a378

08002d80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002d80:	b510      	push	{r4, lr}
 8002d82:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002d84:	f7ff fb3e 	bl	8002404 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002d88:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8002d8a:	6023      	str	r3, [r4, #0]
{

}
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	08019524 	.word	0x08019524

08002d94 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002d94:	2200      	movs	r2, #0
 8002d96:	6002      	str	r2, [r0, #0]
{

}
 8002d98:	4770      	bx	lr

08002d9a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002d9a:	4770      	bx	lr

08002d9c <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8002d9c:	4770      	bx	lr

08002d9e <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8002da0:	4b01      	ldr	r3, [pc, #4]	; (8002da8 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8002da2:	6003      	str	r3, [r0, #0]
    }
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	08019eb4 	.word	0x08019eb4

08002dac <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8002dac:	4b01      	ldr	r3, [pc, #4]	; (8002db4 <_ZN13ModelListenerD1Ev+0x8>)
 8002dae:	6003      	str	r3, [r0, #0]
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	08019ecc 	.word	0x08019ecc

08002db8 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8002db8:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8002dba:	f102 0108 	add.w	r1, r2, #8
 8002dbe:	6001      	str	r1, [r0, #0]
 8002dc0:	3220      	adds	r2, #32
 8002dc2:	6042      	str	r2, [r0, #4]
 8002dc4:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8002dc6:	6042      	str	r2, [r0, #4]
    {
 8002dc8:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <_ZN19mainScreenPresenterD1Ev+0x20>)
 8002dca:	6002      	str	r2, [r0, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	08019ed4 	.word	0x08019ed4
 8002dd4:	08019ecc 	.word	0x08019ecc
 8002dd8:	08019eb4 	.word	0x08019eb4

08002ddc <_ZThn4_N19mainScreenPresenterD1Ev>:
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8002de0:	f102 0108 	add.w	r1, r2, #8
 8002de4:	f840 1c04 	str.w	r1, [r0, #-4]
 8002de8:	3220      	adds	r2, #32
 8002dea:	f840 2904 	str.w	r2, [r0], #-4
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 8002df0:	6042      	str	r2, [r0, #4]
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 8002df4:	f843 2c04 	str.w	r2, [r3, #-4]
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	08019ed4 	.word	0x08019ed4
 8002e00:	08019ecc 	.word	0x08019ecc
 8002e04:	08019eb4 	.word	0x08019eb4

08002e08 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8002e08:	4770      	bx	lr

08002e0a <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8002e0a:	4770      	bx	lr

08002e0c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4604      	mov	r4, r0
    {
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 8002e12:	6003      	str	r3, [r0, #0]
    }
 8002e14:	2104      	movs	r1, #4
 8002e16:	f014 febe 	bl	8017b96 <_ZdlPvj>
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	bf00      	nop
 8002e20:	08019eb4 	.word	0x08019eb4

08002e24 <_ZN13ModelListenerD0Ev>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	4604      	mov	r4, r0
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <_ZN13ModelListenerD0Ev+0x14>)
 8002e2a:	6003      	str	r3, [r0, #0]
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	f014 feb2 	bl	8017b96 <_ZdlPvj>
 8002e32:	4620      	mov	r0, r4
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	bf00      	nop
 8002e38:	08019ecc 	.word	0x08019ecc

08002e3c <_ZN19mainScreenPresenterD0Ev>:
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	6002      	str	r2, [r0, #0]
 8002e48:	3320      	adds	r3, #32
 8002e4a:	6043      	str	r3, [r0, #4]
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8002e4e:	6043      	str	r3, [r0, #4]
    {
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8002e52:	6003      	str	r3, [r0, #0]
 8002e54:	2110      	movs	r1, #16
 8002e56:	f014 fe9e 	bl	8017b96 <_ZdlPvj>
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	bf00      	nop
 8002e60:	08019ed4 	.word	0x08019ed4
 8002e64:	08019ecc 	.word	0x08019ecc
 8002e68:	08019eb4 	.word	0x08019eb4

08002e6c <_ZThn4_N19mainScreenPresenterD0Ev>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8002e72:	f103 0208 	add.w	r2, r3, #8
 8002e76:	f840 2c04 	str.w	r2, [r0, #-4]
 8002e7a:	3320      	adds	r3, #32
 8002e7c:	f844 3904 	str.w	r3, [r4], #-4
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8002e82:	6063      	str	r3, [r4, #4]
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8002e86:	f840 3c04 	str.w	r3, [r0, #-4]
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f014 fe82 	bl	8017b96 <_ZdlPvj>
 8002e92:	4620      	mov	r0, r4
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	bf00      	nop
 8002e98:	08019ed4 	.word	0x08019ed4
 8002e9c:	08019ecc 	.word	0x08019ecc
 8002ea0:	08019eb4 	.word	0x08019eb4

08002ea4 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8002ea4:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8002ea8:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8002eac:	6042      	str	r2, [r0, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	6082      	str	r2, [r0, #8]
    : view(v)
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8002eb4:	f102 0408 	add.w	r4, r2, #8
 8002eb8:	6004      	str	r4, [r0, #0]
 8002eba:	3220      	adds	r2, #32
 8002ebc:	6042      	str	r2, [r0, #4]
 8002ebe:	60c1      	str	r1, [r0, #12]
}
 8002ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	08019eb4 	.word	0x08019eb4
 8002ecc:	08019ecc 	.word	0x08019ecc
 8002ed0:	08019ed4 	.word	0x08019ed4

08002ed4 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8002ed4:	b410      	push	{r4}
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <_ZN14mainScreenViewD1Ev+0x34>)
 8002ed8:	6002      	str	r2, [r0, #0]
 8002eda:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <_ZN14mainScreenViewD1Ev+0x38>)
 8002edc:	6002      	str	r2, [r0, #0]
class Image : public Widget
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <_ZN14mainScreenViewD1Ev+0x3c>)
 8002ee0:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002ee2:	490c      	ldr	r1, [pc, #48]	; (8002f14 <_ZN14mainScreenViewD1Ev+0x40>)
 8002ee4:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <_ZN14mainScreenViewD1Ev+0x44>)
 8002ee8:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 8002eea:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <_ZN14mainScreenViewD1Ev+0x48>)
 8002eec:	6404      	str	r4, [r0, #64]	; 0x40
 8002eee:	6401      	str	r1, [r0, #64]	; 0x40
 8002ef0:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 8002ef2:	490b      	ldr	r1, [pc, #44]	; (8002f20 <_ZN14mainScreenViewD1Ev+0x4c>)
 8002ef4:	6001      	str	r1, [r0, #0]
    {
 8002ef6:	490b      	ldr	r1, [pc, #44]	; (8002f24 <_ZN14mainScreenViewD1Ev+0x50>)
 8002ef8:	6001      	str	r1, [r0, #0]
 8002efa:	490b      	ldr	r1, [pc, #44]	; (8002f28 <_ZN14mainScreenViewD1Ev+0x54>)
 8002efc:	6041      	str	r1, [r0, #4]
 8002efe:	6042      	str	r2, [r0, #4]
 8002f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08019f04 	.word	0x08019f04
 8002f0c:	08019e80 	.word	0x08019e80
 8002f10:	0801a268 	.word	0x0801a268
 8002f14:	08019de4 	.word	0x08019de4
 8002f18:	0801a378 	.word	0x0801a378
 8002f1c:	0801a200 	.word	0x0801a200
 8002f20:	08019e4c 	.word	0x08019e4c
 8002f24:	0801a474 	.word	0x0801a474
 8002f28:	0801a018 	.word	0x0801a018

08002f2c <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8002f2c:	4770      	bx	lr

08002f2e <_ZN14mainScreenView11setupScreenEv>:
{
 8002f2e:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 8002f30:	f7ff fe40 	bl	8002bb4 <_ZN18mainScreenViewBase11setupScreenEv>
}
 8002f34:	bd08      	pop	{r3, pc}
	...

08002f38 <_ZN14mainScreenViewD0Ev>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <_ZN14mainScreenViewD0Ev+0x38>)
 8002f3e:	6003      	str	r3, [r0, #0]
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <_ZN14mainScreenViewD0Ev+0x3c>)
 8002f42:	6003      	str	r3, [r0, #0]
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <_ZN14mainScreenViewD0Ev+0x40>)
 8002f46:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f48:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <_ZN14mainScreenViewD0Ev+0x44>)
 8002f4a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <_ZN14mainScreenViewD0Ev+0x48>)
 8002f4e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <_ZN14mainScreenViewD0Ev+0x4c>)
 8002f52:	6401      	str	r1, [r0, #64]	; 0x40
 8002f54:	6402      	str	r2, [r0, #64]	; 0x40
 8002f56:	6403      	str	r3, [r0, #64]	; 0x40
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <_ZN14mainScreenViewD0Ev+0x50>)
 8002f5a:	6002      	str	r2, [r0, #0]
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <_ZN14mainScreenViewD0Ev+0x54>)
 8002f5e:	6002      	str	r2, [r0, #0]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <_ZN14mainScreenViewD0Ev+0x58>)
 8002f62:	6042      	str	r2, [r0, #4]
 8002f64:	6043      	str	r3, [r0, #4]
 8002f66:	2198      	movs	r1, #152	; 0x98
 8002f68:	f014 fe15 	bl	8017b96 <_ZdlPvj>
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	bd10      	pop	{r4, pc}
 8002f70:	08019f04 	.word	0x08019f04
 8002f74:	08019e80 	.word	0x08019e80
 8002f78:	0801a268 	.word	0x0801a268
 8002f7c:	08019de4 	.word	0x08019de4
 8002f80:	0801a378 	.word	0x0801a378
 8002f84:	0801a200 	.word	0x0801a200
 8002f88:	08019e4c 	.word	0x08019e4c
 8002f8c:	0801a474 	.word	0x0801a474
 8002f90:	0801a018 	.word	0x0801a018

08002f94 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4604      	mov	r4, r0
 8002f98:	f7ff fe50 	bl	8002c3c <_ZN18mainScreenViewBaseC1Ev>
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <_ZN14mainScreenViewC1Ev+0x10>)
 8002f9e:	6023      	str	r3, [r4, #0]
}
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	bd10      	pop	{r4, pc}
 8002fa4:	08019f04 	.word	0x08019f04

08002fa8 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8002fac:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8002fb2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002fb6:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002fb8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002fbc:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	4770      	bx	lr

08002fc2 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8002fc2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8002fca:	2000      	movs	r0, #0
 8002fcc:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002fd4:	e7f9      	b.n	8002fca <FT5336_DeInit+0x8>

08002fd6 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	4770      	bx	lr

08002fda <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fda:	2000      	movs	r0, #0
 8002fdc:	4770      	bx	lr

08002fde <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fde:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fe0:	6904      	ldr	r4, [r0, #16]
 8002fe2:	8900      	ldrh	r0, [r0, #8]
 8002fe4:	47a0      	blx	r4
}
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fe8:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fea:	68c4      	ldr	r4, [r0, #12]
 8002fec:	8900      	ldrh	r0, [r0, #8]
 8002fee:	47a0      	blx	r4
}
 8002ff0:	bd10      	pop	{r4, pc}

08002ff2 <FT5336_GestureConfig>:
{
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002ff6:	f100 0518 	add.w	r5, r0, #24
 8002ffa:	7809      	ldrb	r1, [r1, #0]
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f91d 	bl	800323c <ft5336_radian_value>
 8003002:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003004:	7931      	ldrb	r1, [r6, #4]
 8003006:	4628      	mov	r0, r5
 8003008:	f000 f925 	bl	8003256 <ft5336_offset_left_right>
 800300c:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800300e:	7a31      	ldrb	r1, [r6, #8]
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f92d 	bl	8003270 <ft5336_offset_up_down>
 8003016:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8003018:	7b31      	ldrb	r1, [r6, #12]
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f935 	bl	800328a <ft5336_disatnce_left_right>
 8003020:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003022:	7c31      	ldrb	r1, [r6, #16]
 8003024:	4628      	mov	r0, r5
 8003026:	f000 f93d 	bl	80032a4 <ft5336_distance_up_down>
 800302a:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800302c:	7d31      	ldrb	r1, [r6, #20]
 800302e:	4628      	mov	r0, r5
 8003030:	f000 f945 	bl	80032be <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003034:	1820      	adds	r0, r4, r0
 8003036:	d100      	bne.n	800303a <FT5336_GestureConfig+0x48>
}
 8003038:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800303e:	e7fb      	b.n	8003038 <FT5336_GestureConfig+0x46>

08003040 <FT5336_ReadID>:
{
 8003040:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003042:	3018      	adds	r0, #24
 8003044:	f000 f955 	bl	80032f2 <ft5336_chip_id>
}
 8003048:	bd08      	pop	{r3, pc}

0800304a <FT5336_DetectTouch>:
{
 800304a:	b500      	push	{lr}
 800304c:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800304e:	f10d 0107 	add.w	r1, sp, #7
 8003052:	3018      	adds	r0, #24
 8003054:	f000 f8e5 	bl	8003222 <ft5336_td_status>
 8003058:	b938      	cbnz	r0, 800306a <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800305a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d800      	bhi.n	8003064 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8003062:	4618      	mov	r0, r3
}
 8003064:	b003      	add	sp, #12
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 800306a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800306e:	e7f9      	b.n	8003064 <FT5336_DetectTouch+0x1a>

08003070 <FT5336_GetState>:
{
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	4605      	mov	r5, r0
 8003076:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003078:	f7ff ffe7 	bl	800304a <FT5336_DetectTouch>
 800307c:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800307e:	2304      	movs	r3, #4
 8003080:	eb0d 0203 	add.w	r2, sp, r3
 8003084:	2103      	movs	r1, #3
 8003086:	f105 0018 	add.w	r0, r5, #24
 800308a:	f000 f8b9 	bl	8003200 <ft5336_read_reg>
 800308e:	b998      	cbnz	r0, 80030b8 <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003090:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800309a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800309e:	4313      	orrs	r3, r2
 80030a0:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80030a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60a3      	str	r3, [r4, #8]
}
 80030b4:	b003      	add	sp, #12
 80030b6:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80030bc:	e7fa      	b.n	80030b4 <FT5336_GetState+0x44>

080030be <FT5336_GetMultiTouchState>:
{
 80030be:	b530      	push	{r4, r5, lr}
 80030c0:	b089      	sub	sp, #36	; 0x24
 80030c2:	4604      	mov	r4, r0
 80030c4:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80030c6:	f7ff ffc0 	bl	800304a <FT5336_DetectTouch>
 80030ca:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80030cc:	231e      	movs	r3, #30
 80030ce:	466a      	mov	r2, sp
 80030d0:	2103      	movs	r1, #3
 80030d2:	f104 0018 	add.w	r0, r4, #24
 80030d6:	f000 f893 	bl	8003200 <ft5336_read_reg>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d146      	bne.n	800316c <FT5336_GetMultiTouchState+0xae>
 80030de:	4603      	mov	r3, r0
 80030e0:	e040      	b.n	8003164 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80030e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80030e6:	004a      	lsls	r2, r1, #1
 80030e8:	ac08      	add	r4, sp, #32
 80030ea:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80030ee:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80030f2:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80030f6:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80030fa:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80030fe:	446c      	add	r4, sp
 8003100:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8003104:	4321      	orrs	r1, r4
 8003106:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 800310a:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800310c:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8003110:	4469      	add	r1, sp
 8003112:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8003116:	0224      	lsls	r4, r4, #8
 8003118:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 800311c:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8003120:	4469      	add	r1, sp
 8003122:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8003126:	430c      	orrs	r4, r1
 8003128:	1d99      	adds	r1, r3, #6
 800312a:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800312e:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8003132:	f103 0410 	add.w	r4, r3, #16
 8003136:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800313a:	f102 0124 	add.w	r1, r2, #36	; 0x24
 800313e:	4469      	add	r1, sp
 8003140:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8003144:	f103 010a 	add.w	r1, r3, #10
 8003148:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800314c:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800314e:	3225      	adds	r2, #37	; 0x25
 8003150:	446a      	add	r2, sp
 8003152:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8003156:	0909      	lsrs	r1, r1, #4
 8003158:	f103 0214 	add.w	r2, r3, #20
 800315c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003160:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003162:	3301      	adds	r3, #1
 8003164:	2b04      	cmp	r3, #4
 8003166:	d9bc      	bls.n	80030e2 <FT5336_GetMultiTouchState+0x24>
}
 8003168:	b009      	add	sp, #36	; 0x24
 800316a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003170:	e7fa      	b.n	8003168 <FT5336_GetMultiTouchState+0xaa>

08003172 <FT5336_GetGesture>:
{
 8003172:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003174:	3018      	adds	r0, #24
 8003176:	f000 f84d 	bl	8003214 <ft5336_gest_id>
}
 800317a:	bd08      	pop	{r3, pc}

0800317c <FT5336_EnableIT>:
{
 800317c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800317e:	2101      	movs	r1, #1
 8003180:	3018      	adds	r0, #24
 8003182:	f000 f8a9 	bl	80032d8 <ft5336_g_mode>
}
 8003186:	bd08      	pop	{r3, pc}

08003188 <FT5336_DisableIT>:
{
 8003188:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800318a:	2100      	movs	r1, #0
 800318c:	3018      	adds	r0, #24
 800318e:	f000 f8a3 	bl	80032d8 <ft5336_g_mode>
}
 8003192:	bd08      	pop	{r3, pc}

08003194 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8003194:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003198:	b95b      	cbnz	r3, 80031b2 <FT5336_Init+0x1e>
{
 800319a:	b510      	push	{r4, lr}
 800319c:	4604      	mov	r4, r0
    pObj->IO.Init();
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff fff0 	bl	8003188 <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 80031a8:	2201      	movs	r2, #1
 80031aa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 80031ae:	b910      	cbnz	r0, 80031b6 <FT5336_Init+0x22>
}
 80031b0:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	4770      	bx	lr
    ret = FT5336_ERROR;
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80031ba:	e7f9      	b.n	80031b0 <FT5336_Init+0x1c>

080031bc <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 80031bc:	b1a8      	cbz	r0, 80031ea <FT5336_RegisterBusIO+0x2e>
{
 80031be:	b508      	push	{r3, lr}
 80031c0:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80031c2:	680a      	ldr	r2, [r1, #0]
 80031c4:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80031c6:	6848      	ldr	r0, [r1, #4]
 80031c8:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80031ca:	8908      	ldrh	r0, [r1, #8]
 80031cc:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80031ce:	68c8      	ldr	r0, [r1, #12]
 80031d0:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80031d2:	6908      	ldr	r0, [r1, #16]
 80031d4:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80031d6:	6949      	ldr	r1, [r1, #20]
 80031d8:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80031da:	4907      	ldr	r1, [pc, #28]	; (80031f8 <FT5336_RegisterBusIO+0x3c>)
 80031dc:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80031de:	4907      	ldr	r1, [pc, #28]	; (80031fc <FT5336_RegisterBusIO+0x40>)
 80031e0:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80031e2:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80031e4:	b122      	cbz	r2, 80031f0 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80031e6:	4790      	blx	r2
}
 80031e8:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80031ee:	4770      	bx	lr
      ret = FT5336_ERROR;
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80031f4:	e7f8      	b.n	80031e8 <FT5336_RegisterBusIO+0x2c>
 80031f6:	bf00      	nop
 80031f8:	08002fdf 	.word	0x08002fdf
 80031fc:	08002fe9 	.word	0x08002fe9

08003200 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003200:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003202:	6844      	ldr	r4, [r0, #4]
 8003204:	6880      	ldr	r0, [r0, #8]
 8003206:	47a0      	blx	r4
}
 8003208:	bd10      	pop	{r4, pc}

0800320a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800320a:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800320c:	6804      	ldr	r4, [r0, #0]
 800320e:	6880      	ldr	r0, [r0, #8]
 8003210:	47a0      	blx	r4
}
 8003212:	bd10      	pop	{r4, pc}

08003214 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003214:	b508      	push	{r3, lr}
 8003216:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003218:	2301      	movs	r3, #1
 800321a:	4619      	mov	r1, r3
 800321c:	f7ff fff0 	bl	8003200 <ft5336_read_reg>
}
 8003220:	bd08      	pop	{r3, pc}

08003222 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003222:	b510      	push	{r4, lr}
 8003224:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003226:	2301      	movs	r3, #1
 8003228:	460a      	mov	r2, r1
 800322a:	2102      	movs	r1, #2
 800322c:	f7ff ffe8 	bl	8003200 <ft5336_read_reg>
  
  if(ret == 0)
 8003230:	b918      	cbnz	r0, 800323a <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003232:	7823      	ldrb	r3, [r4, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800323a:	bd10      	pop	{r4, pc}

0800323c <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800323c:	b500      	push	{lr}
 800323e:	b083      	sub	sp, #12
 8003240:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003244:	2301      	movs	r3, #1
 8003246:	f10d 0207 	add.w	r2, sp, #7
 800324a:	2191      	movs	r1, #145	; 0x91
 800324c:	f7ff ffdd 	bl	800320a <ft5336_write_reg>
}
 8003250:	b003      	add	sp, #12
 8003252:	f85d fb04 	ldr.w	pc, [sp], #4

08003256 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003256:	b500      	push	{lr}
 8003258:	b083      	sub	sp, #12
 800325a:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800325e:	2301      	movs	r3, #1
 8003260:	f10d 0207 	add.w	r2, sp, #7
 8003264:	2192      	movs	r1, #146	; 0x92
 8003266:	f7ff ffd0 	bl	800320a <ft5336_write_reg>
}
 800326a:	b003      	add	sp, #12
 800326c:	f85d fb04 	ldr.w	pc, [sp], #4

08003270 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003270:	b500      	push	{lr}
 8003272:	b083      	sub	sp, #12
 8003274:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003278:	2301      	movs	r3, #1
 800327a:	f10d 0207 	add.w	r2, sp, #7
 800327e:	2193      	movs	r1, #147	; 0x93
 8003280:	f7ff ffc3 	bl	800320a <ft5336_write_reg>
}
 8003284:	b003      	add	sp, #12
 8003286:	f85d fb04 	ldr.w	pc, [sp], #4

0800328a <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800328a:	b500      	push	{lr}
 800328c:	b083      	sub	sp, #12
 800328e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003292:	2301      	movs	r3, #1
 8003294:	f10d 0207 	add.w	r2, sp, #7
 8003298:	2194      	movs	r1, #148	; 0x94
 800329a:	f7ff ffb6 	bl	800320a <ft5336_write_reg>
}
 800329e:	b003      	add	sp, #12
 80032a0:	f85d fb04 	ldr.w	pc, [sp], #4

080032a4 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80032a4:	b500      	push	{lr}
 80032a6:	b083      	sub	sp, #12
 80032a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80032ac:	2301      	movs	r3, #1
 80032ae:	f10d 0207 	add.w	r2, sp, #7
 80032b2:	2195      	movs	r1, #149	; 0x95
 80032b4:	f7ff ffa9 	bl	800320a <ft5336_write_reg>
}
 80032b8:	b003      	add	sp, #12
 80032ba:	f85d fb04 	ldr.w	pc, [sp], #4

080032be <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80032be:	b500      	push	{lr}
 80032c0:	b083      	sub	sp, #12
 80032c2:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80032c6:	2301      	movs	r3, #1
 80032c8:	f10d 0207 	add.w	r2, sp, #7
 80032cc:	2196      	movs	r1, #150	; 0x96
 80032ce:	f7ff ff9c 	bl	800320a <ft5336_write_reg>
}
 80032d2:	b003      	add	sp, #12
 80032d4:	f85d fb04 	ldr.w	pc, [sp], #4

080032d8 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80032d8:	b500      	push	{lr}
 80032da:	b083      	sub	sp, #12
 80032dc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80032e0:	2301      	movs	r3, #1
 80032e2:	f10d 0207 	add.w	r2, sp, #7
 80032e6:	21a4      	movs	r1, #164	; 0xa4
 80032e8:	f7ff ff8f 	bl	800320a <ft5336_write_reg>
}
 80032ec:	b003      	add	sp, #12
 80032ee:	f85d fb04 	ldr.w	pc, [sp], #4

080032f2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80032f2:	b508      	push	{r3, lr}
 80032f4:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80032f6:	2301      	movs	r3, #1
 80032f8:	21a8      	movs	r1, #168	; 0xa8
 80032fa:	f7ff ff81 	bl	8003200 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 80032fe:	bd08      	pop	{r3, pc}

08003300 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8003300:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003304:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8003306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330a:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800330c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003310:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8003312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003316:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800331c:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 800331e:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003320:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8003322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003326:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800332c:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 800332e:	2000      	movs	r0, #0
 8003330:	4770      	bx	lr

08003332 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003332:	b570      	push	{r4, r5, r6, lr}
 8003334:	b09a      	sub	sp, #104	; 0x68
 8003336:	4606      	mov	r6, r0
 8003338:	460c      	mov	r4, r1
 800333a:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 800333c:	2250      	movs	r2, #80	; 0x50
 800333e:	2100      	movs	r1, #0
 8003340:	a806      	add	r0, sp, #24
 8003342:	f014 fddd 	bl	8017f00 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003346:	2300      	movs	r3, #0
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	9303      	str	r3, [sp, #12]
 800334e:	9304      	str	r3, [sp, #16]
 8003350:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003352:	429c      	cmp	r4, r3
 8003354:	bf08      	it	eq
 8003356:	2d01      	cmpeq	r5, #1
 8003358:	d061      	beq.n	800341e <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800335a:	2c00      	cmp	r4, #0
 800335c:	d143      	bne.n	80033e6 <MX25LM51245G_AutoPollingMemReady+0xb4>
 800335e:	2301      	movs	r3, #1
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003362:	2d01      	cmp	r5, #1
 8003364:	d041      	beq.n	80033ea <MX25LM51245G_AutoPollingMemReady+0xb8>
 8003366:	2300      	movs	r3, #0
 8003368:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800336a:	2c00      	cmp	r4, #0
 800336c:	d13f      	bne.n	80033ee <MX25LM51245G_AutoPollingMemReady+0xbc>
 800336e:	2300      	movs	r3, #0
 8003370:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003372:	2c00      	cmp	r4, #0
 8003374:	d13d      	bne.n	80033f2 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8003376:	2305      	movs	r3, #5
 8003378:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800337a:	2c00      	cmp	r4, #0
 800337c:	d13c      	bne.n	80033f8 <MX25LM51245G_AutoPollingMemReady+0xc6>
 800337e:	2300      	movs	r3, #0
 8003380:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003382:	2d01      	cmp	r5, #1
 8003384:	d03b      	beq.n	80033fe <MX25LM51245G_AutoPollingMemReady+0xcc>
 8003386:	2300      	movs	r3, #0
 8003388:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800338a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800338e:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003390:	2c00      	cmp	r4, #0
 8003392:	d137      	bne.n	8003404 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8003394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003398:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800339a:	2d01      	cmp	r5, #1
 800339c:	d035      	beq.n	800340a <MX25LM51245G_AutoPollingMemReady+0xd8>
 800339e:	2300      	movs	r3, #0
 80033a0:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80033a2:	bbac      	cbnz	r4, 8003410 <MX25LM51245G_AutoPollingMemReady+0xde>
 80033a4:	2300      	movs	r3, #0
 80033a6:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80033a8:	2d01      	cmp	r5, #1
 80033aa:	d033      	beq.n	8003414 <MX25LM51245G_AutoPollingMemReady+0xe2>
 80033ac:	2301      	movs	r3, #1
 80033ae:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80033b0:	2d01      	cmp	r5, #1
 80033b2:	d031      	beq.n	8003418 <MX25LM51245G_AutoPollingMemReady+0xe6>
 80033b4:	2300      	movs	r3, #0
 80033b6:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80033bc:	2310      	movs	r3, #16
 80033be:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80033c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033c4:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	a906      	add	r1, sp, #24
 80033cc:	4630      	mov	r0, r6
 80033ce:	f002 ff9f 	bl	8006310 <HAL_OSPI_Command>
 80033d2:	bb38      	cbnz	r0, 8003424 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	a901      	add	r1, sp, #4
 80033da:	4630      	mov	r0, r6
 80033dc:	f003 f8a9 	bl	8006532 <HAL_OSPI_AutoPolling>
 80033e0:	bb18      	cbnz	r0, 800342a <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80033e2:	b01a      	add	sp, #104	; 0x68
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033e6:	2304      	movs	r3, #4
 80033e8:	e7ba      	b.n	8003360 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033ea:	2308      	movs	r3, #8
 80033ec:	e7bc      	b.n	8003368 <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033ee:	2310      	movs	r3, #16
 80033f0:	e7be      	b.n	8003370 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80033f2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80033f6:	e7bf      	b.n	8003378 <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80033f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fc:	e7c0      	b.n	8003380 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80033fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003402:	e7c1      	b.n	8003388 <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003404:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003408:	e7c6      	b.n	8003398 <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800340a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800340e:	e7c7      	b.n	80033a0 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003410:	2305      	movs	r3, #5
 8003412:	e7c8      	b.n	80033a6 <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003414:	2302      	movs	r3, #2
 8003416:	e7ca      	b.n	80033ae <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003418:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800341c:	e7cb      	b.n	80033b6 <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 800341e:	f04f 30ff 	mov.w	r0, #4294967295
 8003422:	e7de      	b.n	80033e2 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	e7db      	b.n	80033e2 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	e7d8      	b.n	80033e2 <MX25LM51245G_AutoPollingMemReady+0xb0>

08003430 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	b096      	sub	sp, #88	; 0x58
 8003434:	4606      	mov	r6, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800343a:	2250      	movs	r2, #80	; 0x50
 800343c:	2100      	movs	r1, #0
 800343e:	a802      	add	r0, sp, #8
 8003440:	f014 fd5e 	bl	8017f00 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003444:	2300      	movs	r3, #0
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800344a:	2c01      	cmp	r4, #1
 800344c:	bf08      	it	eq
 800344e:	429d      	cmpeq	r5, r3
 8003450:	d04e      	beq.n	80034f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003452:	2301      	movs	r3, #1
 8003454:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003456:	b104      	cbz	r4, 800345a <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8003458:	2304      	movs	r3, #4
 800345a:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800345c:	b92c      	cbnz	r4, 800346a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800345e:	2300      	movs	r3, #0
 8003460:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003462:	b924      	cbnz	r4, 800346e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8003464:	bb15      	cbnz	r5, 80034ac <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8003466:	230b      	movs	r3, #11
 8003468:	e003      	b.n	8003472 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800346a:	2310      	movs	r3, #16
 800346c:	e7f8      	b.n	8003460 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800346e:	f64e 4313 	movw	r3, #60435	; 0xec13
 8003472:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003474:	b9e4      	cbnz	r4, 80034b0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8003476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800347c:	b9dd      	cbnz	r5, 80034b6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 800347e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003482:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003484:	b9d4      	cbnz	r4, 80034bc <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8003486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348a:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800348c:	b9cc      	cbnz	r4, 80034c2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 800348e:	2308      	movs	r3, #8
 8003490:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	a902      	add	r1, sp, #8
 8003498:	4630      	mov	r0, r6
 800349a:	f002 ff39 	bl	8006310 <HAL_OSPI_Command>
 800349e:	bb50      	cbnz	r0, 80034f6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80034a0:	2302      	movs	r3, #2
 80034a2:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80034a4:	b97c      	cbnz	r4, 80034c6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 80034a6:	b185      	cbz	r5, 80034ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 80034a8:	2312      	movs	r3, #18
 80034aa:	e00e      	b.n	80034ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80034ac:	230c      	movs	r3, #12
 80034ae:	e7e0      	b.n	8003472 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80034b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b4:	e7e1      	b.n	800347a <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80034b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034ba:	e7e2      	b.n	8003482 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80034bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034c0:	e7e3      	b.n	800348a <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80034c2:	2306      	movs	r3, #6
 80034c4:	e7e4      	b.n	8003490 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80034c6:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80034ca:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	a902      	add	r1, sp, #8
 80034d6:	4630      	mov	r0, r6
 80034d8:	f002 ff1a 	bl	8006310 <HAL_OSPI_Command>
 80034dc:	b970      	cbnz	r0, 80034fc <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80034e2:	4669      	mov	r1, sp
 80034e4:	4630      	mov	r0, r6
 80034e6:	f003 f881 	bl	80065ec <HAL_OSPI_MemoryMapped>
 80034ea:	b950      	cbnz	r0, 8003502 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80034ec:	b016      	add	sp, #88	; 0x58
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	e7fa      	b.n	80034ec <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	e7f7      	b.n	80034ec <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	e7f4      	b.n	80034ec <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e7f1      	b.n	80034ec <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

08003508 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8003508:	b510      	push	{r4, lr}
 800350a:	b096      	sub	sp, #88	; 0x58
 800350c:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800350e:	2250      	movs	r2, #80	; 0x50
 8003510:	2100      	movs	r1, #0
 8003512:	a802      	add	r0, sp, #8
 8003514:	f014 fcf4 	bl	8017f00 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003518:	2300      	movs	r3, #0
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800351e:	2301      	movs	r3, #1
 8003520:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8003522:	2304      	movs	r3, #4
 8003524:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8003526:	2308      	movs	r3, #8
 8003528:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800352a:	2310      	movs	r3, #16
 800352c:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800352e:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003532:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8003534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003538:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800353a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003540:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003544:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8003546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800354a:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 800354c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003550:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003552:	2306      	movs	r3, #6
 8003554:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8003556:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800355a:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	a902      	add	r1, sp, #8
 8003562:	4620      	mov	r0, r4
 8003564:	f002 fed4 	bl	8006310 <HAL_OSPI_Command>
 8003568:	b9b8      	cbnz	r0, 800359a <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800356a:	2302      	movs	r3, #2
 800356c:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800356e:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003572:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003578:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	a902      	add	r1, sp, #8
 8003580:	4620      	mov	r0, r4
 8003582:	f002 fec5 	bl	8006310 <HAL_OSPI_Command>
 8003586:	b958      	cbnz	r0, 80035a0 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800358c:	4669      	mov	r1, sp
 800358e:	4620      	mov	r0, r4
 8003590:	f003 f82c 	bl	80065ec <HAL_OSPI_MemoryMapped>
 8003594:	b938      	cbnz	r0, 80035a6 <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003596:	b016      	add	sp, #88	; 0x58
 8003598:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	e7fa      	b.n	8003596 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	e7f7      	b.n	8003596 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80035a6:	f04f 30ff 	mov.w	r0, #4294967295
 80035aa:	e7f4      	b.n	8003596 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

080035ac <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	b09a      	sub	sp, #104	; 0x68
 80035b0:	4606      	mov	r6, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80035b6:	2250      	movs	r2, #80	; 0x50
 80035b8:	2100      	movs	r1, #0
 80035ba:	a806      	add	r0, sp, #24
 80035bc:	f014 fca0 	bl	8017f00 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80035c0:	2300      	movs	r3, #0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	9303      	str	r3, [sp, #12]
 80035c8:	9304      	str	r3, [sp, #16]
 80035ca:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80035cc:	429c      	cmp	r4, r3
 80035ce:	bf08      	it	eq
 80035d0:	2d01      	cmpeq	r5, #1
 80035d2:	d076      	beq.n	80036c2 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d155      	bne.n	8003684 <MX25LM51245G_WriteEnable+0xd8>
 80035d8:	2301      	movs	r3, #1
 80035da:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80035dc:	2d01      	cmp	r5, #1
 80035de:	d053      	beq.n	8003688 <MX25LM51245G_WriteEnable+0xdc>
 80035e0:	2300      	movs	r3, #0
 80035e2:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80035e4:	2c00      	cmp	r4, #0
 80035e6:	d151      	bne.n	800368c <MX25LM51245G_WriteEnable+0xe0>
 80035e8:	2300      	movs	r3, #0
 80035ea:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80035ec:	2c00      	cmp	r4, #0
 80035ee:	d14f      	bne.n	8003690 <MX25LM51245G_WriteEnable+0xe4>
 80035f0:	2306      	movs	r3, #6
 80035f2:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	a906      	add	r1, sp, #24
 80035fa:	4630      	mov	r0, r6
 80035fc:	f002 fe88 	bl	8006310 <HAL_OSPI_Command>
 8003600:	2800      	cmp	r0, #0
 8003602:	d161      	bne.n	80036c8 <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003604:	2c00      	cmp	r4, #0
 8003606:	d146      	bne.n	8003696 <MX25LM51245G_WriteEnable+0xea>
 8003608:	2305      	movs	r3, #5
 800360a:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800360c:	2c00      	cmp	r4, #0
 800360e:	d145      	bne.n	800369c <MX25LM51245G_WriteEnable+0xf0>
 8003610:	2300      	movs	r3, #0
 8003612:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003614:	2d01      	cmp	r5, #1
 8003616:	d044      	beq.n	80036a2 <MX25LM51245G_WriteEnable+0xf6>
 8003618:	2300      	movs	r3, #0
 800361a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800361c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003620:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003626:	2c00      	cmp	r4, #0
 8003628:	d13e      	bne.n	80036a8 <MX25LM51245G_WriteEnable+0xfc>
 800362a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003630:	2d01      	cmp	r5, #1
 8003632:	d03c      	beq.n	80036ae <MX25LM51245G_WriteEnable+0x102>
 8003634:	2300      	movs	r3, #0
 8003636:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003638:	2c00      	cmp	r4, #0
 800363a:	d13b      	bne.n	80036b4 <MX25LM51245G_WriteEnable+0x108>
 800363c:	2300      	movs	r3, #0
 800363e:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003640:	2d01      	cmp	r5, #1
 8003642:	d039      	beq.n	80036b8 <MX25LM51245G_WriteEnable+0x10c>
 8003644:	2301      	movs	r3, #1
 8003646:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003648:	2d01      	cmp	r5, #1
 800364a:	d037      	beq.n	80036bc <MX25LM51245G_WriteEnable+0x110>
 800364c:	2300      	movs	r3, #0
 800364e:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	a906      	add	r1, sp, #24
 8003656:	4630      	mov	r0, r6
 8003658:	f002 fe5a 	bl	8006310 <HAL_OSPI_Command>
 800365c:	bbb8      	cbnz	r0, 80036ce <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 800365e:	2302      	movs	r3, #2
 8003660:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8003662:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003664:	2300      	movs	r3, #0
 8003666:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003668:	2310      	movs	r3, #16
 800366a:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800366c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003670:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	a901      	add	r1, sp, #4
 8003678:	4630      	mov	r0, r6
 800367a:	f002 ff5a 	bl	8006532 <HAL_OSPI_AutoPolling>
 800367e:	bb48      	cbnz	r0, 80036d4 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003680:	b01a      	add	sp, #104	; 0x68
 8003682:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003684:	2304      	movs	r3, #4
 8003686:	e7a8      	b.n	80035da <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003688:	2308      	movs	r3, #8
 800368a:	e7aa      	b.n	80035e2 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800368c:	2310      	movs	r3, #16
 800368e:	e7ac      	b.n	80035ea <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8003690:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8003694:	e7ad      	b.n	80035f2 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003696:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800369a:	e7b6      	b.n	800360a <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	e7b7      	b.n	8003612 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80036a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a6:	e7b8      	b.n	800361a <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80036a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036ac:	e7bf      	b.n	800362e <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80036ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036b2:	e7c0      	b.n	8003636 <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80036b4:	2305      	movs	r3, #5
 80036b6:	e7c2      	b.n	800363e <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80036b8:	2302      	movs	r3, #2
 80036ba:	e7c4      	b.n	8003646 <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80036bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80036c0:	e7c5      	b.n	800364e <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295
 80036c6:	e7db      	b.n	8003680 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	e7d8      	b.n	8003680 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	e7d5      	b.n	8003680 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	e7d2      	b.n	8003680 <MX25LM51245G_WriteEnable+0xd4>

080036da <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80036da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036dc:	b095      	sub	sp, #84	; 0x54
 80036de:	4607      	mov	r7, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	4615      	mov	r5, r2
 80036e4:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80036e6:	2250      	movs	r2, #80	; 0x50
 80036e8:	2100      	movs	r1, #0
 80036ea:	4668      	mov	r0, sp
 80036ec:	f014 fc08 	bl	8017f00 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80036f0:	2c00      	cmp	r4, #0
 80036f2:	bf08      	it	eq
 80036f4:	2d01      	cmpeq	r5, #1
 80036f6:	d04e      	beq.n	8003796 <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036f8:	bb24      	cbnz	r4, 8003744 <MX25LM51245G_WriteCfg2Register+0x6a>
 80036fa:	2301      	movs	r3, #1
 80036fc:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036fe:	2d01      	cmp	r5, #1
 8003700:	d022      	beq.n	8003748 <MX25LM51245G_WriteCfg2Register+0x6e>
 8003702:	2300      	movs	r3, #0
 8003704:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003706:	bb0c      	cbnz	r4, 800374c <MX25LM51245G_WriteCfg2Register+0x72>
 8003708:	2300      	movs	r3, #0
 800370a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800370c:	bb04      	cbnz	r4, 8003750 <MX25LM51245G_WriteCfg2Register+0x76>
 800370e:	2372      	movs	r3, #114	; 0x72
 8003710:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003712:	bb04      	cbnz	r4, 8003756 <MX25LM51245G_WriteCfg2Register+0x7c>
 8003714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003718:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800371a:	2d01      	cmp	r5, #1
 800371c:	d01e      	beq.n	800375c <MX25LM51245G_WriteCfg2Register+0x82>
 800371e:	2300      	movs	r3, #0
 8003720:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003722:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003726:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 8003728:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800372a:	b9d4      	cbnz	r4, 8003762 <MX25LM51245G_WriteCfg2Register+0x88>
 800372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003730:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003732:	2d01      	cmp	r5, #1
 8003734:	d018      	beq.n	8003768 <MX25LM51245G_WriteCfg2Register+0x8e>
 8003736:	2300      	movs	r3, #0
 8003738:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800373a:	b1d4      	cbz	r4, 8003772 <MX25LM51245G_WriteCfg2Register+0x98>
 800373c:	2d01      	cmp	r5, #1
 800373e:	d016      	beq.n	800376e <MX25LM51245G_WriteCfg2Register+0x94>
 8003740:	2301      	movs	r3, #1
 8003742:	e017      	b.n	8003774 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003744:	2304      	movs	r3, #4
 8003746:	e7d9      	b.n	80036fc <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003748:	2308      	movs	r3, #8
 800374a:	e7db      	b.n	8003704 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800374c:	2310      	movs	r3, #16
 800374e:	e7dc      	b.n	800370a <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003750:	f247 238d 	movw	r3, #29325	; 0x728d
 8003754:	e7dc      	b.n	8003710 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375a:	e7dd      	b.n	8003718 <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800375c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003760:	e7de      	b.n	8003720 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003762:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003766:	e7e3      	b.n	8003730 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800376c:	e7e4      	b.n	8003738 <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800376e:	2302      	movs	r3, #2
 8003770:	e000      	b.n	8003774 <MX25LM51245G_WriteCfg2Register+0x9a>
 8003772:	2301      	movs	r3, #1
 8003774:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4669      	mov	r1, sp
 800377c:	4638      	mov	r0, r7
 800377e:	f002 fdc7 	bl	8006310 <HAL_OSPI_Command>
 8003782:	b958      	cbnz	r0, 800379c <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	a91a      	add	r1, sp, #104	; 0x68
 800378a:	4638      	mov	r0, r7
 800378c:	f002 fe21 	bl	80063d2 <HAL_OSPI_Transmit>
 8003790:	b938      	cbnz	r0, 80037a2 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003792:	b015      	add	sp, #84	; 0x54
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 8003796:	f04f 30ff 	mov.w	r0, #4294967295
 800379a:	e7fa      	b.n	8003792 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e7f7      	b.n	8003792 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e7f4      	b.n	8003792 <MX25LM51245G_WriteCfg2Register+0xb8>

080037a8 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80037a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037aa:	b095      	sub	sp, #84	; 0x54
 80037ac:	4607      	mov	r7, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	4615      	mov	r5, r2
 80037b2:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80037b4:	2250      	movs	r2, #80	; 0x50
 80037b6:	2100      	movs	r1, #0
 80037b8:	4668      	mov	r0, sp
 80037ba:	f014 fba1 	bl	8017f00 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80037be:	2c00      	cmp	r4, #0
 80037c0:	bf08      	it	eq
 80037c2:	2d01      	cmpeq	r5, #1
 80037c4:	d05b      	beq.n	800387e <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	d13d      	bne.n	8003846 <MX25LM51245G_ReadCfg2Register+0x9e>
 80037ca:	2301      	movs	r3, #1
 80037cc:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037ce:	2d01      	cmp	r5, #1
 80037d0:	d03b      	beq.n	800384a <MX25LM51245G_ReadCfg2Register+0xa2>
 80037d2:	2300      	movs	r3, #0
 80037d4:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80037d6:	2c00      	cmp	r4, #0
 80037d8:	d139      	bne.n	800384e <MX25LM51245G_ReadCfg2Register+0xa6>
 80037da:	2300      	movs	r3, #0
 80037dc:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d137      	bne.n	8003852 <MX25LM51245G_ReadCfg2Register+0xaa>
 80037e2:	2371      	movs	r3, #113	; 0x71
 80037e4:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80037e6:	2c00      	cmp	r4, #0
 80037e8:	d136      	bne.n	8003858 <MX25LM51245G_ReadCfg2Register+0xb0>
 80037ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ee:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80037f0:	2d01      	cmp	r5, #1
 80037f2:	d034      	beq.n	800385e <MX25LM51245G_ReadCfg2Register+0xb6>
 80037f4:	2300      	movs	r3, #0
 80037f6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80037f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037fc:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80037fe:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003800:	bb84      	cbnz	r4, 8003864 <MX25LM51245G_ReadCfg2Register+0xbc>
 8003802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003806:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003808:	2d01      	cmp	r5, #1
 800380a:	d02e      	beq.n	800386a <MX25LM51245G_ReadCfg2Register+0xc2>
 800380c:	2300      	movs	r3, #0
 800380e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003810:	bb74      	cbnz	r4, 8003870 <MX25LM51245G_ReadCfg2Register+0xc8>
 8003812:	2300      	movs	r3, #0
 8003814:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003816:	2d01      	cmp	r5, #1
 8003818:	d02c      	beq.n	8003874 <MX25LM51245G_ReadCfg2Register+0xcc>
 800381a:	2301      	movs	r3, #1
 800381c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800381e:	2d01      	cmp	r5, #1
 8003820:	d02a      	beq.n	8003878 <MX25LM51245G_ReadCfg2Register+0xd0>
 8003822:	2300      	movs	r3, #0
 8003824:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4669      	mov	r1, sp
 800382c:	4638      	mov	r0, r7
 800382e:	f002 fd6f 	bl	8006310 <HAL_OSPI_Command>
 8003832:	bb38      	cbnz	r0, 8003884 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	991a      	ldr	r1, [sp, #104]	; 0x68
 800383a:	4638      	mov	r0, r7
 800383c:	f002 fe16 	bl	800646c <HAL_OSPI_Receive>
 8003840:	bb18      	cbnz	r0, 800388a <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003842:	b015      	add	sp, #84	; 0x54
 8003844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003846:	2304      	movs	r3, #4
 8003848:	e7c0      	b.n	80037cc <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800384a:	2308      	movs	r3, #8
 800384c:	e7c2      	b.n	80037d4 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800384e:	2310      	movs	r3, #16
 8003850:	e7c4      	b.n	80037dc <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003852:	f247 138e 	movw	r3, #29070	; 0x718e
 8003856:	e7c5      	b.n	80037e4 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	e7c7      	b.n	80037ee <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800385e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003862:	e7c8      	b.n	80037f6 <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003864:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003868:	e7cd      	b.n	8003806 <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800386a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800386e:	e7ce      	b.n	800380e <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003870:	2305      	movs	r3, #5
 8003872:	e7cf      	b.n	8003814 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003874:	2302      	movs	r3, #2
 8003876:	e7d1      	b.n	800381c <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003878:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800387c:	e7d2      	b.n	8003824 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 800387e:	f04f 30ff 	mov.w	r0, #4294967295
 8003882:	e7de      	b.n	8003842 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	e7db      	b.n	8003842 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	e7d8      	b.n	8003842 <MX25LM51245G_ReadCfg2Register+0x9a>

08003890 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	b094      	sub	sp, #80	; 0x50
 8003894:	4606      	mov	r6, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800389a:	2250      	movs	r2, #80	; 0x50
 800389c:	2100      	movs	r1, #0
 800389e:	4668      	mov	r0, sp
 80038a0:	f014 fb2e 	bl	8017f00 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80038a4:	2c00      	cmp	r4, #0
 80038a6:	bf08      	it	eq
 80038a8:	2d01      	cmpeq	r5, #1
 80038aa:	d01e      	beq.n	80038ea <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038ac:	b9a4      	cbnz	r4, 80038d8 <MX25LM51245G_ResetEnable+0x48>
 80038ae:	2301      	movs	r3, #1
 80038b0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038b2:	2d01      	cmp	r5, #1
 80038b4:	d012      	beq.n	80038dc <MX25LM51245G_ResetEnable+0x4c>
 80038b6:	2300      	movs	r3, #0
 80038b8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038ba:	b98c      	cbnz	r4, 80038e0 <MX25LM51245G_ResetEnable+0x50>
 80038bc:	2300      	movs	r3, #0
 80038be:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80038c0:	b984      	cbnz	r4, 80038e4 <MX25LM51245G_ResetEnable+0x54>
 80038c2:	2366      	movs	r3, #102	; 0x66
 80038c4:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4669      	mov	r1, sp
 80038cc:	4630      	mov	r0, r6
 80038ce:	f002 fd1f 	bl	8006310 <HAL_OSPI_Command>
 80038d2:	b968      	cbnz	r0, 80038f0 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80038d4:	b014      	add	sp, #80	; 0x50
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038d8:	2304      	movs	r3, #4
 80038da:	e7e9      	b.n	80038b0 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038dc:	2308      	movs	r3, #8
 80038de:	e7eb      	b.n	80038b8 <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038e0:	2310      	movs	r3, #16
 80038e2:	e7ec      	b.n	80038be <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80038e4:	f246 6399 	movw	r3, #26265	; 0x6699
 80038e8:	e7ec      	b.n	80038c4 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	e7f1      	b.n	80038d4 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	e7ee      	b.n	80038d4 <MX25LM51245G_ResetEnable+0x44>

080038f6 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80038f6:	b570      	push	{r4, r5, r6, lr}
 80038f8:	b094      	sub	sp, #80	; 0x50
 80038fa:	4606      	mov	r6, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003900:	2250      	movs	r2, #80	; 0x50
 8003902:	2100      	movs	r1, #0
 8003904:	4668      	mov	r0, sp
 8003906:	f014 fafb 	bl	8017f00 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800390a:	2c00      	cmp	r4, #0
 800390c:	bf08      	it	eq
 800390e:	2d01      	cmpeq	r5, #1
 8003910:	d01e      	beq.n	8003950 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003912:	b9a4      	cbnz	r4, 800393e <MX25LM51245G_ResetMemory+0x48>
 8003914:	2301      	movs	r3, #1
 8003916:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003918:	2d01      	cmp	r5, #1
 800391a:	d012      	beq.n	8003942 <MX25LM51245G_ResetMemory+0x4c>
 800391c:	2300      	movs	r3, #0
 800391e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003920:	b98c      	cbnz	r4, 8003946 <MX25LM51245G_ResetMemory+0x50>
 8003922:	2300      	movs	r3, #0
 8003924:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003926:	b984      	cbnz	r4, 800394a <MX25LM51245G_ResetMemory+0x54>
 8003928:	2399      	movs	r3, #153	; 0x99
 800392a:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4669      	mov	r1, sp
 8003932:	4630      	mov	r0, r6
 8003934:	f002 fcec 	bl	8006310 <HAL_OSPI_Command>
 8003938:	b968      	cbnz	r0, 8003956 <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800393a:	b014      	add	sp, #80	; 0x50
 800393c:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800393e:	2304      	movs	r3, #4
 8003940:	e7e9      	b.n	8003916 <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003942:	2308      	movs	r3, #8
 8003944:	e7eb      	b.n	800391e <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003946:	2310      	movs	r3, #16
 8003948:	e7ec      	b.n	8003924 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800394a:	f649 1366 	movw	r3, #39270	; 0x9966
 800394e:	e7ec      	b.n	800392a <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	e7f1      	b.n	800393a <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	e7ee      	b.n	800393a <MX25LM51245G_ResetMemory+0x44>

0800395c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800395c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003960:	4b32      	ldr	r3, [pc, #200]	; (8003a2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8003962:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 8003966:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 800396c:	222c      	movs	r2, #44	; 0x2c
 800396e:	fb02 3101 	mla	r1, r2, r1, r3
 8003972:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003974:	68ca      	ldr	r2, [r1, #12]
 8003976:	eb03 0e02 	add.w	lr, r3, r2
 800397a:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800397e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003980:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003982:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	6a08      	ldr	r0, [r1, #32]
 800398a:	1a1e      	subs	r6, r3, r0
 800398c:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003990:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003992:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003996:	694b      	ldr	r3, [r1, #20]
 8003998:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 800399c:	f1be 0f00 	cmp.w	lr, #0
 80039a0:	dd08      	ble.n	80039b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 80039a2:	2e00      	cmp	r6, #0
 80039a4:	dd09      	ble.n	80039ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039a6:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 80039a8:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039ac:	2d0f      	cmp	r5, #15
 80039ae:	d83b      	bhi.n	8003a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039b0:	2400      	movs	r4, #0
 80039b2:	e02b      	b.n	8003a0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 80039b4:	f04f 0e00 	mov.w	lr, #0
 80039b8:	e7f3      	b.n	80039a2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 80039ba:	2600      	movs	r6, #0
 80039bc:	e7f3      	b.n	80039a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80039be:	3201      	adds	r2, #1
 80039c0:	2a0f      	cmp	r2, #15
 80039c2:	d822      	bhi.n	8003a0a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80039c4:	fb02 f300 	mul.w	r3, r2, r0
 80039c8:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80039cc:	459e      	cmp	lr, r3
 80039ce:	bf8c      	ite	hi
 80039d0:	2100      	movhi	r1, #0
 80039d2:	2101      	movls	r1, #1
 80039d4:	429e      	cmp	r6, r3
 80039d6:	bf38      	it	cc
 80039d8:	2100      	movcc	r1, #0
 80039da:	2900      	cmp	r1, #0
 80039dc:	d0ef      	beq.n	80039be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80039de:	45a9      	cmp	r9, r5
 80039e0:	d0ed      	beq.n	80039be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80039e2:	4914      	ldr	r1, [pc, #80]	; (8003a34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80039e4:	680b      	ldr	r3, [r1, #0]
 80039e6:	f8df a050 	ldr.w	sl, [pc, #80]	; 8003a38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80039ea:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80039ee:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80039f2:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80039f6:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80039fa:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80039fe:	3301      	adds	r3, #1
 8003a00:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a02:	2b7f      	cmp	r3, #127	; 0x7f
 8003a04:	d810      	bhi.n	8003a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 8003a06:	46a9      	mov	r9, r5
 8003a08:	e7d9      	b.n	80039be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a0a:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a0c:	2c0f      	cmp	r4, #15
 8003a0e:	d809      	bhi.n	8003a24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003a10:	1c67      	adds	r7, r4, #1
 8003a12:	1c68      	adds	r0, r5, #1
 8003a14:	fb04 0300 	mla	r3, r4, r0, r0
 8003a18:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 8003a1c:	4598      	cmp	r8, r3
 8003a1e:	d8f4      	bhi.n	8003a0a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a20:	2200      	movs	r2, #0
 8003a22:	e7cd      	b.n	80039c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7c1      	b.n	80039ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2c:	3b9aca00 	.word	0x3b9aca00
 8003a30:	08019f30 	.word	0x08019f30
 8003a34:	24001ee8 	.word	0x24001ee8
 8003a38:	240014e8 	.word	0x240014e8

08003a3c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	b089      	sub	sp, #36	; 0x24
 8003a42:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a44:	4f4b      	ldr	r7, [pc, #300]	; (8003b74 <I2C_Compute_SCLL_SCLH+0x138>)
 8003a46:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8003a4a:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003a4e:	494a      	ldr	r1, [pc, #296]	; (8003b78 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003a50:	232c      	movs	r3, #44	; 0x2c
 8003a52:	fb04 f303 	mul.w	r3, r4, r3
 8003a56:	18ca      	adds	r2, r1, r3
 8003a58:	58cb      	ldr	r3, [r1, r3]
 8003a5a:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8003a5e:	fbb1 f1f3 	udiv	r1, r1, r3
 8003a62:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003a64:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003a66:	fb08 f303 	mul.w	r3, r8, r3
 8003a6a:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003a6c:	6853      	ldr	r3, [r2, #4]
 8003a6e:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003a72:	6893      	ldr	r3, [r2, #8]
 8003a74:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8003a78:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a82:	9307      	str	r3, [sp, #28]
 8003a84:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a86:	e060      	b.n	8003b4a <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8003a88:	1af2      	subs	r2, r6, r3
 8003a8a:	e02a      	b.n	8003ae2 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8003a8c:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a8e:	29ff      	cmp	r1, #255	; 0xff
 8003a90:	d837      	bhi.n	8003b02 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003a92:	1c4d      	adds	r5, r1, #1
 8003a94:	fb01 0200 	mla	r2, r1, r0, r0
 8003a98:	4442      	add	r2, r8
 8003a9a:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003a9c:	eb0c 0302 	add.w	r3, ip, r2
 8003aa0:	4e35      	ldr	r6, [pc, #212]	; (8003b78 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003aa2:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003aa6:	fb0b 6b04 	mla	fp, fp, r4, r6
 8003aaa:	f8db 6020 	ldr.w	r6, [fp, #32]
 8003aae:	4433      	add	r3, r6
 8003ab0:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8003ab4:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003ab6:	429f      	cmp	r7, r3
 8003ab8:	bf8c      	ite	hi
 8003aba:	2600      	movhi	r6, #0
 8003abc:	2601      	movls	r6, #1
 8003abe:	4599      	cmp	r9, r3
 8003ac0:	bf38      	it	cc
 8003ac2:	2600      	movcc	r6, #0
 8003ac4:	2e00      	cmp	r6, #0
 8003ac6:	d0e1      	beq.n	8003a8c <I2C_Compute_SCLL_SCLH+0x50>
 8003ac8:	4e2b      	ldr	r6, [pc, #172]	; (8003b78 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003aca:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003ace:	fb0b 6604 	mla	r6, fp, r4, r6
 8003ad2:	69f6      	ldr	r6, [r6, #28]
 8003ad4:	4296      	cmp	r6, r2
 8003ad6:	d8d9      	bhi.n	8003a8c <I2C_Compute_SCLL_SCLH+0x50>
 8003ad8:	4592      	cmp	sl, r2
 8003ada:	d2d7      	bcs.n	8003a8c <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8003adc:	9e05      	ldr	r6, [sp, #20]
 8003ade:	1b9a      	subs	r2, r3, r6
 8003ae0:	d4d2      	bmi.n	8003a88 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8003ae2:	9b02      	ldr	r3, [sp, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d2d1      	bcs.n	8003a8c <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8003ae8:	9b04      	ldr	r3, [sp, #16]
 8003aea:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x140>)
 8003af0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003af4:	9e01      	ldr	r6, [sp, #4]
 8003af6:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003af8:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8003afa:	9202      	str	r2, [sp, #8]
              ret = count;
 8003afc:	9b04      	ldr	r3, [sp, #16]
 8003afe:	9307      	str	r3, [sp, #28]
 8003b00:	e7c4      	b.n	8003a8c <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b06:	9b01      	ldr	r3, [sp, #4]
 8003b08:	2bff      	cmp	r3, #255	; 0xff
 8003b0a:	d81b      	bhi.n	8003b44 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b0c:	9906      	ldr	r1, [sp, #24]
 8003b0e:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	9203      	str	r2, [sp, #12]
 8003b18:	fb03 0c00 	mla	ip, r3, r0, r0
 8003b1c:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8003b20:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8003b24:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003b28:	222c      	movs	r2, #44	; 0x2c
 8003b2a:	fb02 3304 	mla	r3, r2, r4, r3
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	4563      	cmp	r3, ip
 8003b32:	d2e6      	bcs.n	8003b02 <I2C_Compute_SCLL_SCLH+0xc6>
 8003b34:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8003b38:	1a5b      	subs	r3, r3, r1
 8003b3a:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8003b3e:	d2e0      	bcs.n	8003b02 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b40:	2100      	movs	r1, #0
 8003b42:	e7a4      	b.n	8003a8e <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b44:	9b04      	ldr	r3, [sp, #16]
 8003b46:	3301      	adds	r3, #1
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <I2C_Compute_SCLL_SCLH+0x144>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	9a04      	ldr	r2, [sp, #16]
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d90a      	bls.n	8003b6a <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x140>)
 8003b5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b60:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	e7cd      	b.n	8003b06 <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8003b6a:	9807      	ldr	r0, [sp, #28]
 8003b6c:	b009      	add	sp, #36	; 0x24
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	3b9aca00 	.word	0x3b9aca00
 8003b78:	08019f30 	.word	0x08019f30
 8003b7c:	240014e8 	.word	0x240014e8
 8003b80:	24001ee8 	.word	0x24001ee8

08003b84 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003b84:	2800      	cmp	r0, #0
 8003b86:	bf18      	it	ne
 8003b88:	2900      	cmpne	r1, #0
 8003b8a:	d134      	bne.n	8003bf6 <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8003b8c:	2000      	movs	r0, #0
}
 8003b8e:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003b90:	3401      	adds	r4, #1
 8003b92:	2c02      	cmp	r4, #2
 8003b94:	d834      	bhi.n	8003c00 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <I2C_GetTiming+0x84>)
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 3304 	mla	r3, r1, r4, r3
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d8f5      	bhi.n	8003b90 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <I2C_GetTiming+0x84>)
 8003ba6:	fb01 3304 	mla	r3, r1, r4, r3
 8003baa:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d3ef      	bcc.n	8003b90 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7ff fed2 	bl	800395c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f7ff ff3e 	bl	8003a3c <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8003bc0:	287f      	cmp	r0, #127	; 0x7f
 8003bc2:	d81f      	bhi.n	8003c04 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <I2C_GetTiming+0x88>)
 8003bc6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003bca:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003bce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	051b      	lsls	r3, r3, #20
 8003bd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bda:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003bde:	68a1      	ldr	r1, [r4, #8]
 8003be0:	0409      	lsls	r1, r1, #16
 8003be2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003be6:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003be8:	68e1      	ldr	r1, [r4, #12]
 8003bea:	0209      	lsls	r1, r1, #8
 8003bec:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003bee:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bf2:	4318      	orrs	r0, r3
 8003bf4:	e005      	b.n	8003c02 <I2C_GetTiming+0x7e>
{
 8003bf6:	b538      	push	{r3, r4, r5, lr}
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003bfc:	2400      	movs	r4, #0
 8003bfe:	e7c8      	b.n	8003b92 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8003c00:	2000      	movs	r0, #0
}
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8003c04:	2000      	movs	r0, #0
  return ret;
 8003c06:	e7fc      	b.n	8003c02 <I2C_GetTiming+0x7e>
 8003c08:	08019f30 	.word	0x08019f30
 8003c0c:	240014e8 	.word	0x240014e8

08003c10 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c14:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003c16:	4c2a      	ldr	r4, [pc, #168]	; (8003cc0 <I2C4_MspInit+0xb0>)
 8003c18:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c1c:	f043 0308 	orr.w	r3, r3, #8
 8003c20:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003c24:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003c30:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003c3c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4c:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c4e:	f04f 0912 	mov.w	r9, #18
 8003c52:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c56:	f04f 0800 	mov.w	r8, #0
 8003c5a:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c5e:	2702      	movs	r7, #2
 8003c60:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003c62:	2604      	movs	r6, #4
 8003c64:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003c66:	4d17      	ldr	r5, [pc, #92]	; (8003cc4 <I2C4_MspInit+0xb4>)
 8003c68:	a903      	add	r1, sp, #12
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f001 f9a2 	bl	8004fb4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c74:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c76:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c7a:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c7e:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003c80:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003c82:	a903      	add	r1, sp, #12
 8003c84:	4628      	mov	r0, r5
 8003c86:	f001 f995 	bl	8004fb4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003c8a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c92:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8003c96:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	9302      	str	r3, [sp, #8]
 8003ca0:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003ca2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003cae:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8003cba:	b009      	add	sp, #36	; 0x24
 8003cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	58020c00 	.word	0x58020c00

08003cc8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd0:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003cd2:	4c09      	ldr	r4, [pc, #36]	; (8003cf8 <I2C4_MspDeInit+0x30>)
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f001 fa7d 	bl	80051d4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cde:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f001 fa77 	bl	80051d4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <I2C4_MspDeInit+0x34>)
 8003ce8:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8003cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	58020c00 	.word	0x58020c00
 8003cfc:	58024400 	.word	0x58024400

08003d00 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003d00:	b510      	push	{r4, lr}
 8003d02:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003d04:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d08:	9402      	str	r4, [sp, #8]
 8003d0a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003d0e:	9401      	str	r4, [sp, #4]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	460a      	mov	r2, r1
 8003d16:	4601      	mov	r1, r0
 8003d18:	4804      	ldr	r0, [pc, #16]	; (8003d2c <I2C4_WriteReg+0x2c>)
 8003d1a:	f001 fd5a 	bl	80057d2 <HAL_I2C_Mem_Write>
 8003d1e:	b910      	cbnz	r0, 8003d26 <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003d20:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003d22:	b004      	add	sp, #16
 8003d24:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003d26:	f06f 0007 	mvn.w	r0, #7
 8003d2a:	e7fa      	b.n	8003d22 <I2C4_WriteReg+0x22>
 8003d2c:	24001eec 	.word	0x24001eec

08003d30 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003d30:	b510      	push	{r4, lr}
 8003d32:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003d34:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d38:	9402      	str	r4, [sp, #8]
 8003d3a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003d3e:	9401      	str	r4, [sp, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	460a      	mov	r2, r1
 8003d46:	4601      	mov	r1, r0
 8003d48:	4804      	ldr	r0, [pc, #16]	; (8003d5c <I2C4_ReadReg+0x2c>)
 8003d4a:	f001 fe17 	bl	800597c <HAL_I2C_Mem_Read>
 8003d4e:	b910      	cbnz	r0, 8003d56 <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003d50:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003d52:	b004      	add	sp, #16
 8003d54:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003d56:	f06f 0007 	mvn.w	r0, #7
 8003d5a:	e7fa      	b.n	8003d52 <I2C4_ReadReg+0x22>
 8003d5c:	24001eec 	.word	0x24001eec

08003d60 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8003d60:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <BSP_I2C4_DeInit+0x28>)
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8003d68:	b10b      	cbz	r3, 8003d6e <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8003d6a:	2000      	movs	r0, #0
}
 8003d6c:	4770      	bx	lr
{
 8003d6e:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8003d70:	4c06      	ldr	r4, [pc, #24]	; (8003d8c <BSP_I2C4_DeInit+0x2c>)
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff ffa8 	bl	8003cc8 <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f001 fd11 	bl	80057a0 <HAL_I2C_DeInit>
 8003d7e:	b900      	cbnz	r0, 8003d82 <BSP_I2C4_DeInit+0x22>
}
 8003d80:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8003d82:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003d86:	e7fb      	b.n	8003d80 <BSP_I2C4_DeInit+0x20>
 8003d88:	240014e4 	.word	0x240014e4
 8003d8c:	24001eec 	.word	0x24001eec

08003d90 <MX_I2C4_Init>:
{
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8003d94:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003d9e:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003da0:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003da2:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003da4:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003da6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003da8:	f001 fc9c 	bl	80056e4 <HAL_I2C_Init>
 8003dac:	b108      	cbz	r0, 8003db2 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8003dae:	2001      	movs	r0, #1
}
 8003db0:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003db2:	2100      	movs	r1, #0
 8003db4:	4620      	mov	r0, r4
 8003db6:	f001 febe 	bl	8005b36 <HAL_I2CEx_ConfigAnalogFilter>
 8003dba:	b108      	cbz	r0, 8003dc0 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7f7      	b.n	8003db0 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f001 fee5 	bl	8005b92 <HAL_I2CEx_ConfigDigitalFilter>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0f1      	beq.n	8003db0 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8003dcc:	2001      	movs	r0, #1
 8003dce:	e7ef      	b.n	8003db0 <MX_I2C4_Init+0x20>

08003dd0 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <BSP_I2C4_Init+0x48>)
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <BSP_I2C4_Init+0x4c>)
 8003dd4:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <BSP_I2C4_Init+0x50>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b10b      	cbz	r3, 8003de0 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8003ddc:	2000      	movs	r0, #0
}
 8003dde:	4770      	bx	lr
{
 8003de0:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <BSP_I2C4_Init+0x50>)
 8003de6:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003de8:	480b      	ldr	r0, [pc, #44]	; (8003e18 <BSP_I2C4_Init+0x48>)
 8003dea:	f001 fe9f 	bl	8005b2c <HAL_I2C_GetState>
 8003dee:	b108      	cbz	r0, 8003df4 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8003df0:	2000      	movs	r0, #0
}
 8003df2:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8003df4:	4c08      	ldr	r4, [pc, #32]	; (8003e18 <BSP_I2C4_Init+0x48>)
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff ff0a 	bl	8003c10 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003dfc:	f003 fbc6 	bl	800758c <HAL_RCC_GetPCLK2Freq>
 8003e00:	4908      	ldr	r1, [pc, #32]	; (8003e24 <BSP_I2C4_Init+0x54>)
 8003e02:	f7ff febf 	bl	8003b84 <I2C_GetTiming>
 8003e06:	4601      	mov	r1, r0
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7ff ffc1 	bl	8003d90 <MX_I2C4_Init>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0ef      	beq.n	8003df2 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8003e12:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003e16:	e7ec      	b.n	8003df2 <BSP_I2C4_Init+0x22>
 8003e18:	24001eec 	.word	0x24001eec
 8003e1c:	58001c00 	.word	0x58001c00
 8003e20:	240014e4 	.word	0x240014e4
 8003e24:	000186a0 	.word	0x000186a0

08003e28 <BSP_I2C4_WriteReg>:
{
 8003e28:	b500      	push	{lr}
 8003e2a:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	2201      	movs	r2, #1
 8003e32:	f7ff ff65 	bl	8003d00 <I2C4_WriteReg>
 8003e36:	b910      	cbnz	r0, 8003e3e <BSP_I2C4_WriteReg+0x16>
}
 8003e38:	b003      	add	sp, #12
 8003e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <BSP_I2C4_WriteReg+0x2c>)
 8003e40:	f001 fe77 	bl	8005b32 <HAL_I2C_GetError>
 8003e44:	2804      	cmp	r0, #4
 8003e46:	d002      	beq.n	8003e4e <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e48:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e4c:	e7f4      	b.n	8003e38 <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e4e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e52:	e7f1      	b.n	8003e38 <BSP_I2C4_WriteReg+0x10>
 8003e54:	24001eec 	.word	0x24001eec

08003e58 <BSP_I2C4_ReadReg>:
{
 8003e58:	b500      	push	{lr}
 8003e5a:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	2201      	movs	r2, #1
 8003e62:	f7ff ff65 	bl	8003d30 <I2C4_ReadReg>
 8003e66:	b910      	cbnz	r0, 8003e6e <BSP_I2C4_ReadReg+0x16>
}
 8003e68:	b003      	add	sp, #12
 8003e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <BSP_I2C4_ReadReg+0x2c>)
 8003e70:	f001 fe5f 	bl	8005b32 <HAL_I2C_GetError>
 8003e74:	2804      	cmp	r0, #4
 8003e76:	d002      	beq.n	8003e7e <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e78:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e7c:	e7f4      	b.n	8003e68 <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e7e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e82:	e7f1      	b.n	8003e68 <BSP_I2C4_ReadReg+0x10>
 8003e84:	24001eec 	.word	0x24001eec

08003e88 <BSP_GetTick>:
{
 8003e88:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8003e8a:	f000 fde7 	bl	8004a5c <HAL_GetTick>
}
 8003e8e:	bd08      	pop	{r3, pc}

08003e90 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8003e96:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <OSPI_NOR_MspInit+0x200>)
 8003e98:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8003ea4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003ea8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003eac:	9201      	str	r2, [sp, #4]
 8003eae:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8003eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb6:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8003eb8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ebe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8003ec0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ec4:	f042 0202 	orr.w	r2, r2, #2
 8003ec8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ecc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ed0:	f002 0202 	and.w	r2, r2, #2
 8003ed4:	9202      	str	r2, [sp, #8]
 8003ed6:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8003ed8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003edc:	f042 0204 	orr.w	r2, r2, #4
 8003ee0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ee4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ee8:	f002 0204 	and.w	r2, r2, #4
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8003ef0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003efc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f00:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003f04:	9204      	str	r2, [sp, #16]
 8003f06:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8003f08:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f0c:	f042 0208 	orr.w	r2, r2, #8
 8003f10:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f14:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f18:	f002 0208 	and.w	r2, r2, #8
 8003f1c:	9205      	str	r2, [sp, #20]
 8003f1e:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8003f20:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f24:	f042 0220 	orr.w	r2, r2, #32
 8003f28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f2c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f30:	f002 0220 	and.w	r2, r2, #32
 8003f34:	9206      	str	r2, [sp, #24]
 8003f36:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8003f38:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f3c:	f042 0220 	orr.w	r2, r2, #32
 8003f40:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f44:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f48:	f002 0220 	and.w	r2, r2, #32
 8003f4c:	9207      	str	r2, [sp, #28]
 8003f4e:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8003f50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f54:	f042 0220 	orr.w	r2, r2, #32
 8003f58:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f5c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f60:	f002 0220 	and.w	r2, r2, #32
 8003f64:	9208      	str	r2, [sp, #32]
 8003f66:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8003f68:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f6c:	f042 0204 	orr.w	r2, r2, #4
 8003f70:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f74:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f78:	f002 0204 	and.w	r2, r2, #4
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8003f80:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f88:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f8c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f90:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003f94:	920a      	str	r2, [sp, #40]	; 0x28
 8003f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8003f98:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003fa4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003fa8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8003fb0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8003fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8003fc8:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8003fcc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fd0:	f04f 0a02 	mov.w	sl, #2
 8003fd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8003fe0:	240a      	movs	r4, #10
 8003fe2:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8003fe4:	a90d      	add	r1, sp, #52	; 0x34
 8003fe6:	482b      	ldr	r0, [pc, #172]	; (8004094 <OSPI_NOR_MspInit+0x204>)
 8003fe8:	f000 ffe4 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8003fec:	2320      	movs	r3, #32
 8003fee:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8003ff0:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003ff2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80040a8 <OSPI_NOR_MspInit+0x218>
 8003ff6:	a90d      	add	r1, sp, #52	; 0x34
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	f000 ffdb 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8003ffe:	2304      	movs	r3, #4
 8004000:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8004006:	2509      	movs	r5, #9
 8004008:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800400a:	a90d      	add	r1, sp, #52	; 0x34
 800400c:	4822      	ldr	r0, [pc, #136]	; (8004098 <OSPI_NOR_MspInit+0x208>)
 800400e:	f000 ffd1 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8004012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004016:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8004018:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800401a:	a90d      	add	r1, sp, #52	; 0x34
 800401c:	481f      	ldr	r0, [pc, #124]	; (800409c <OSPI_NOR_MspInit+0x20c>)
 800401e:	f000 ffc9 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8004022:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004026:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800402a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800402c:	4e1c      	ldr	r6, [pc, #112]	; (80040a0 <OSPI_NOR_MspInit+0x210>)
 800402e:	a90d      	add	r1, sp, #52	; 0x34
 8004030:	4630      	mov	r0, r6
 8004032:	f000 ffbf 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8004036:	2780      	movs	r7, #128	; 0x80
 8004038:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800403a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800403c:	a90d      	add	r1, sp, #52	; 0x34
 800403e:	4630      	mov	r0, r6
 8004040:	f000 ffb8 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8004044:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8004048:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800404a:	a90d      	add	r1, sp, #52	; 0x34
 800404c:	4630      	mov	r0, r6
 800404e:	f000 ffb1 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8004052:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8004056:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8004058:	a90d      	add	r1, sp, #52	; 0x34
 800405a:	4648      	mov	r0, r9
 800405c:	f000 ffaa 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8004060:	2308      	movs	r3, #8
 8004062:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8004064:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8004066:	a90d      	add	r1, sp, #52	; 0x34
 8004068:	480e      	ldr	r0, [pc, #56]	; (80040a4 <OSPI_NOR_MspInit+0x214>)
 800406a:	f000 ffa3 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800406e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8004072:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8004074:	a90d      	add	r1, sp, #52	; 0x34
 8004076:	4807      	ldr	r0, [pc, #28]	; (8004094 <OSPI_NOR_MspInit+0x204>)
 8004078:	f000 ff9c 	bl	8004fb4 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800407c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800407e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8004080:	a90d      	add	r1, sp, #52	; 0x34
 8004082:	4806      	ldr	r0, [pc, #24]	; (800409c <OSPI_NOR_MspInit+0x20c>)
 8004084:	f000 ff96 	bl	8004fb4 <HAL_GPIO_Init>
}
 8004088:	b013      	add	sp, #76	; 0x4c
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400
 8004094:	58021800 	.word	0x58021800
 8004098:	58020400 	.word	0x58020400
 800409c:	58020c00 	.word	0x58020c00
 80040a0:	58021400 	.word	0x58021400
 80040a4:	58021c00 	.word	0x58021c00
 80040a8:	58020800 	.word	0x58020800

080040ac <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040b0:	4c24      	ldr	r4, [pc, #144]	; (8004144 <OSPI_NOR_ResetMemory+0x98>)
 80040b2:	235c      	movs	r3, #92	; 0x5c
 80040b4:	fb03 4400 	mla	r4, r3, r0, r4
 80040b8:	2200      	movs	r2, #0
 80040ba:	4611      	mov	r1, r2
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff fbe7 	bl	8003890 <MX25LM51245G_ResetEnable>
 80040c2:	bb60      	cbnz	r0, 800411e <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040c4:	2200      	movs	r2, #0
 80040c6:	4611      	mov	r1, r2
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7ff fc14 	bl	80038f6 <MX25LM51245G_ResetMemory>
 80040ce:	bb48      	cbnz	r0, 8004124 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040d0:	2200      	movs	r2, #0
 80040d2:	2101      	movs	r1, #1
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7ff fbdb 	bl	8003890 <MX25LM51245G_ResetEnable>
 80040da:	bb30      	cbnz	r0, 800412a <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040dc:	2200      	movs	r2, #0
 80040de:	2101      	movs	r1, #1
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff fc08 	bl	80038f6 <MX25LM51245G_ResetMemory>
 80040e6:	bb18      	cbnz	r0, 8004130 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040e8:	2201      	movs	r2, #1
 80040ea:	4611      	mov	r1, r2
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff fbcf 	bl	8003890 <MX25LM51245G_ResetEnable>
 80040f2:	bb00      	cbnz	r0, 8004136 <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040f4:	2201      	movs	r2, #1
 80040f6:	4611      	mov	r1, r2
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fbfc 	bl	80038f6 <MX25LM51245G_ResetMemory>
 80040fe:	4604      	mov	r4, r0
 8004100:	b9e0      	cbnz	r0, 800413c <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004102:	4811      	ldr	r0, [pc, #68]	; (8004148 <OSPI_NOR_ResetMemory+0x9c>)
 8004104:	2301      	movs	r3, #1
 8004106:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800410a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800410e:	2300      	movs	r3, #0
 8004110:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004112:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004114:	2064      	movs	r0, #100	; 0x64
 8004116:	f000 fca7 	bl	8004a68 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 800411a:	4620      	mov	r0, r4
 800411c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800411e:	f06f 0404 	mvn.w	r4, #4
 8004122:	e7fa      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004124:	f06f 0404 	mvn.w	r4, #4
 8004128:	e7f7      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800412a:	f06f 0404 	mvn.w	r4, #4
 800412e:	e7f4      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004130:	f06f 0404 	mvn.w	r4, #4
 8004134:	e7f1      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004136:	f06f 0404 	mvn.w	r4, #4
 800413a:	e7ee      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800413c:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8004140:	e7eb      	b.n	800411a <OSPI_NOR_ResetMemory+0x6e>
 8004142:	bf00      	nop
 8004144:	24001f40 	.word	0x24001f40
 8004148:	24001f38 	.word	0x24001f38

0800414c <OSPI_NOR_MspDeInit>:
{
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800414e:	2104      	movs	r1, #4
 8004150:	4820      	ldr	r0, [pc, #128]	; (80041d4 <OSPI_NOR_MspDeInit+0x88>)
 8004152:	f001 f83f 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8004156:	4f20      	ldr	r7, [pc, #128]	; (80041d8 <OSPI_NOR_MspDeInit+0x8c>)
 8004158:	2120      	movs	r1, #32
 800415a:	4638      	mov	r0, r7
 800415c:	f001 f83a 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8004160:	4e1e      	ldr	r6, [pc, #120]	; (80041dc <OSPI_NOR_MspDeInit+0x90>)
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	4630      	mov	r0, r6
 8004166:	f001 f835 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800416a:	4d1d      	ldr	r5, [pc, #116]	; (80041e0 <OSPI_NOR_MspDeInit+0x94>)
 800416c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004170:	4628      	mov	r0, r5
 8004172:	f001 f82f 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8004176:	4c1b      	ldr	r4, [pc, #108]	; (80041e4 <OSPI_NOR_MspDeInit+0x98>)
 8004178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800417c:	4620      	mov	r0, r4
 800417e:	f001 f829 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	4620      	mov	r0, r4
 8004186:	f001 f825 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800418a:	2140      	movs	r1, #64	; 0x40
 800418c:	4620      	mov	r0, r4
 800418e:	f001 f821 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8004192:	2102      	movs	r1, #2
 8004194:	4638      	mov	r0, r7
 8004196:	f001 f81d 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800419a:	2108      	movs	r1, #8
 800419c:	4812      	ldr	r0, [pc, #72]	; (80041e8 <OSPI_NOR_MspDeInit+0x9c>)
 800419e:	f001 f819 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 80041a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041a6:	4630      	mov	r0, r6
 80041a8:	f001 f814 	bl	80051d4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	4628      	mov	r0, r5
 80041b0:	f001 f810 	bl	80051d4 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <OSPI_NOR_MspDeInit+0xa0>)
 80041b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041bc:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80041be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c4:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 80041c6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80041ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ce:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	58020400 	.word	0x58020400
 80041d8:	58020800 	.word	0x58020800
 80041dc:	58021800 	.word	0x58021800
 80041e0:	58020c00 	.word	0x58020c00
 80041e4:	58021400 	.word	0x58021400
 80041e8:	58021c00 	.word	0x58021c00
 80041ec:	58024400 	.word	0x58024400

080041f0 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80041f6:	4d2b      	ldr	r5, [pc, #172]	; (80042a4 <OSPI_NOR_ExitOPIMode+0xb4>)
 80041f8:	235c      	movs	r3, #92	; 0x5c
 80041fa:	fb03 5500 	mla	r5, r3, r0, r5
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <OSPI_NOR_ExitOPIMode+0xb8>)
 8004200:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004204:	789a      	ldrb	r2, [r3, #2]
 8004206:	7859      	ldrb	r1, [r3, #1]
 8004208:	4628      	mov	r0, r5
 800420a:	f7ff f9cf 	bl	80035ac <MX25LM51245G_WriteEnable>
 800420e:	2800      	cmp	r0, #0
 8004210:	d138      	bne.n	8004284 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 8004218:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800421c:	4922      	ldr	r1, [pc, #136]	; (80042a8 <OSPI_NOR_ExitOPIMode+0xb8>)
 800421e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	788a      	ldrb	r2, [r1, #2]
 8004226:	7849      	ldrb	r1, [r1, #1]
 8004228:	4628      	mov	r0, r5
 800422a:	f7ff fa56 	bl	80036da <MX25LM51245G_WriteCfg2Register>
 800422e:	4606      	mov	r6, r0
 8004230:	bb58      	cbnz	r0, 800428a <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004232:	2028      	movs	r0, #40	; 0x28
 8004234:	f000 fc18 	bl	8004a68 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <OSPI_NOR_ExitOPIMode+0xb8>)
 800423a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800423e:	789b      	ldrb	r3, [r3, #2]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d014      	beq.n	800426e <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004244:	2200      	movs	r2, #0
 8004246:	4611      	mov	r1, r2
 8004248:	4628      	mov	r0, r5
 800424a:	f7ff f872 	bl	8003332 <MX25LM51245G_AutoPollingMemReady>
 800424e:	b9f8      	cbnz	r0, 8004290 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004250:	ab03      	add	r3, sp, #12
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	461a      	mov	r2, r3
 8004258:	4619      	mov	r1, r3
 800425a:	4628      	mov	r0, r5
 800425c:	f7ff faa4 	bl	80037a8 <MX25LM51245G_ReadCfg2Register>
 8004260:	b9c8      	cbnz	r0, 8004296 <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8004262:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004266:	b9cb      	cbnz	r3, 800429c <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8004268:	4630      	mov	r0, r6
 800426a:	b004      	add	sp, #16
 800426c:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800426e:	2300      	movs	r3, #0
 8004270:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004272:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004274:	4628      	mov	r0, r5
 8004276:	f002 fb31 	bl	80068dc <HAL_OSPI_Init>
 800427a:	2800      	cmp	r0, #0
 800427c:	d0e2      	beq.n	8004244 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800427e:	f06f 0603 	mvn.w	r6, #3
 8004282:	e7df      	b.n	8004244 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004284:	f06f 0604 	mvn.w	r6, #4
 8004288:	e7ee      	b.n	8004268 <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800428a:	f06f 0604 	mvn.w	r6, #4
 800428e:	e7eb      	b.n	8004268 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004290:	f06f 0604 	mvn.w	r6, #4
 8004294:	e7e8      	b.n	8004268 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004296:	f06f 0604 	mvn.w	r6, #4
 800429a:	e7e5      	b.n	8004268 <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800429c:	f06f 0604 	mvn.w	r6, #4
  return ret;
 80042a0:	e7e2      	b.n	8004268 <OSPI_NOR_ExitOPIMode+0x78>
 80042a2:	bf00      	nop
 80042a4:	24001f40 	.word	0x24001f40
 80042a8:	24001f38 	.word	0x24001f38

080042ac <OSPI_NOR_EnterSOPIMode>:
{
 80042ac:	b530      	push	{r4, r5, lr}
 80042ae:	b085      	sub	sp, #20
 80042b0:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80042b2:	4c2e      	ldr	r4, [pc, #184]	; (800436c <OSPI_NOR_EnterSOPIMode+0xc0>)
 80042b4:	235c      	movs	r3, #92	; 0x5c
 80042b6:	fb03 4400 	mla	r4, r3, r0, r4
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80042c0:	789a      	ldrb	r2, [r3, #2]
 80042c2:	7859      	ldrb	r1, [r3, #1]
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff f971 	bl	80035ac <MX25LM51245G_WriteEnable>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d139      	bne.n	8004342 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80042ce:	4928      	ldr	r1, [pc, #160]	; (8004370 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042d0:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80042d4:	2307      	movs	r3, #7
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042dc:	788a      	ldrb	r2, [r1, #2]
 80042de:	7849      	ldrb	r1, [r1, #1]
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff f9fa 	bl	80036da <MX25LM51245G_WriteCfg2Register>
 80042e6:	bb78      	cbnz	r0, 8004348 <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80042ee:	789a      	ldrb	r2, [r3, #2]
 80042f0:	7859      	ldrb	r1, [r3, #1]
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff f95a 	bl	80035ac <MX25LM51245G_WriteEnable>
 80042f8:	bb48      	cbnz	r0, 800434e <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80042fa:	481d      	ldr	r0, [pc, #116]	; (8004370 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042fc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8004300:	2301      	movs	r3, #1
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	78aa      	ldrb	r2, [r5, #2]
 8004308:	7869      	ldrb	r1, [r5, #1]
 800430a:	4620      	mov	r0, r4
 800430c:	f7ff f9e5 	bl	80036da <MX25LM51245G_WriteCfg2Register>
 8004310:	bb00      	cbnz	r0, 8004354 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004312:	2028      	movs	r0, #40	; 0x28
 8004314:	f000 fba8 	bl	8004a68 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004318:	2200      	movs	r2, #0
 800431a:	2101      	movs	r1, #1
 800431c:	4620      	mov	r0, r4
 800431e:	f7ff f808 	bl	8003332 <MX25LM51245G_AutoPollingMemReady>
 8004322:	b9d0      	cbnz	r0, 800435a <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004324:	ab03      	add	r3, sp, #12
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	461a      	mov	r2, r3
 800432c:	2101      	movs	r1, #1
 800432e:	4620      	mov	r0, r4
 8004330:	f7ff fa3a 	bl	80037a8 <MX25LM51245G_ReadCfg2Register>
 8004334:	b9a0      	cbnz	r0, 8004360 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8004336:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d113      	bne.n	8004366 <OSPI_NOR_EnterSOPIMode+0xba>
}
 800433e:	b005      	add	sp, #20
 8004340:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004342:	f06f 0004 	mvn.w	r0, #4
 8004346:	e7fa      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004348:	f06f 0004 	mvn.w	r0, #4
 800434c:	e7f7      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800434e:	f06f 0004 	mvn.w	r0, #4
 8004352:	e7f4      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004354:	f06f 0004 	mvn.w	r0, #4
 8004358:	e7f1      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800435a:	f06f 0004 	mvn.w	r0, #4
 800435e:	e7ee      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004360:	f06f 0004 	mvn.w	r0, #4
 8004364:	e7eb      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004366:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800436a:	e7e8      	b.n	800433e <OSPI_NOR_EnterSOPIMode+0x92>
 800436c:	24001f40 	.word	0x24001f40
 8004370:	24001f38 	.word	0x24001f38

08004374 <OSPI_NOR_EnterDOPIMode>:
{
 8004374:	b530      	push	{r4, r5, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800437a:	4c35      	ldr	r4, [pc, #212]	; (8004450 <OSPI_NOR_EnterDOPIMode+0xdc>)
 800437c:	235c      	movs	r3, #92	; 0x5c
 800437e:	fb03 4400 	mla	r4, r3, r0, r4
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004384:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004388:	789a      	ldrb	r2, [r3, #2]
 800438a:	7859      	ldrb	r1, [r3, #1]
 800438c:	4620      	mov	r0, r4
 800438e:	f7ff f90d 	bl	80035ac <MX25LM51245G_WriteEnable>
 8004392:	2800      	cmp	r0, #0
 8004394:	d144      	bne.n	8004420 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8004396:	492f      	ldr	r1, [pc, #188]	; (8004454 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004398:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800439c:	2307      	movs	r3, #7
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a4:	788a      	ldrb	r2, [r1, #2]
 80043a6:	7849      	ldrb	r1, [r1, #1]
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff f996 	bl	80036da <MX25LM51245G_WriteCfg2Register>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d139      	bne.n	8004426 <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80043b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80043b8:	789a      	ldrb	r2, [r3, #2]
 80043ba:	7859      	ldrb	r1, [r3, #1]
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff f8f5 	bl	80035ac <MX25LM51245G_WriteEnable>
 80043c2:	bb98      	cbnz	r0, 800442c <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80043c4:	4923      	ldr	r1, [pc, #140]	; (8004454 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80043c6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80043ca:	2302      	movs	r3, #2
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	788a      	ldrb	r2, [r1, #2]
 80043d2:	7849      	ldrb	r1, [r1, #1]
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff f980 	bl	80036da <MX25LM51245G_WriteCfg2Register>
 80043da:	bb50      	cbnz	r0, 8004432 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80043dc:	2028      	movs	r0, #40	; 0x28
 80043de:	f000 fb43 	bl	8004a68 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80043e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e6:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80043e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80043ee:	4620      	mov	r0, r4
 80043f0:	f002 fa74 	bl	80068dc <HAL_OSPI_Init>
 80043f4:	bb00      	cbnz	r0, 8004438 <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80043f6:	2201      	movs	r2, #1
 80043f8:	4611      	mov	r1, r2
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7fe ff99 	bl	8003332 <MX25LM51245G_AutoPollingMemReady>
 8004400:	b9e8      	cbnz	r0, 800443e <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004402:	ab03      	add	r3, sp, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2300      	movs	r3, #0
 8004408:	2201      	movs	r2, #1
 800440a:	4611      	mov	r1, r2
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff f9cb 	bl	80037a8 <MX25LM51245G_ReadCfg2Register>
 8004412:	b9b8      	cbnz	r0, 8004444 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004414:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d116      	bne.n	800444a <OSPI_NOR_EnterDOPIMode+0xd6>
}
 800441c:	b005      	add	sp, #20
 800441e:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004420:	f06f 0004 	mvn.w	r0, #4
 8004424:	e7fa      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004426:	f06f 0004 	mvn.w	r0, #4
 800442a:	e7f7      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800442c:	f06f 0004 	mvn.w	r0, #4
 8004430:	e7f4      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004432:	f06f 0004 	mvn.w	r0, #4
 8004436:	e7f1      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004438:	f06f 0003 	mvn.w	r0, #3
 800443c:	e7ee      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800443e:	f06f 0004 	mvn.w	r0, #4
 8004442:	e7eb      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004444:	f06f 0004 	mvn.w	r0, #4
 8004448:	e7e8      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800444a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800444e:	e7e5      	b.n	800441c <OSPI_NOR_EnterDOPIMode+0xa8>
 8004450:	24001f40 	.word	0x24001f40
 8004454:	24001f38 	.word	0x24001f38

08004458 <MX_OSPI_NOR_Init>:
{
 8004458:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <MX_OSPI_NOR_Init+0x4c>)
 800445c:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 800445e:	2304      	movs	r3, #4
 8004460:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004462:	2300      	movs	r3, #0
 8004464:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8004466:	680a      	ldr	r2, [r1, #0]
 8004468:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800446a:	2202      	movs	r2, #2
 800446c:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800446e:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8004470:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004472:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004474:	684a      	ldr	r2, [r1, #4]
 8004476:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004478:	688a      	ldr	r2, [r1, #8]
 800447a:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800447c:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800447e:	2308      	movs	r3, #8
 8004480:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8004482:	68cb      	ldr	r3, [r1, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d005      	beq.n	8004494 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004488:	2300      	movs	r3, #0
 800448a:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800448c:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 800448e:	f002 fa25 	bl	80068dc <HAL_OSPI_Init>
}
 8004492:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004498:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800449a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800449e:	62c3      	str	r3, [r0, #44]	; 0x2c
 80044a0:	e7f5      	b.n	800448e <MX_OSPI_NOR_Init+0x36>
 80044a2:	bf00      	nop
 80044a4:	52005000 	.word	0x52005000

080044a8 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80044a8:	bb38      	cbnz	r0, 80044fa <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 80044aa:	b510      	push	{r4, lr}
 80044ac:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	b983      	cbnz	r3, 80044da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044ba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044be:	2201      	movs	r2, #1
 80044c0:	7859      	ldrb	r1, [r3, #1]
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80044c4:	205c      	movs	r0, #92	; 0x5c
 80044c6:	fb00 3004 	mla	r0, r0, r4, r3
 80044ca:	f7fe ffb1 	bl	8003430 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80044ce:	b9b8      	cbnz	r0, 8004500 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044d2:	2202      	movs	r2, #2
 80044d4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80044d8:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044e0:	7859      	ldrb	r1, [r3, #1]
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80044e4:	205c      	movs	r0, #92	; 0x5c
 80044e6:	fb00 3004 	mla	r0, r0, r4, r3
 80044ea:	f7ff f80d 	bl	8003508 <MX25LM51245G_EnableMemoryMappedModeDTR>
 80044ee:	b950      	cbnz	r0, 8004506 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044f2:	2202      	movs	r2, #2
 80044f4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80044f8:	e7ee      	b.n	80044d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80044fa:	f06f 0001 	mvn.w	r0, #1
}
 80044fe:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004500:	f06f 0004 	mvn.w	r0, #4
 8004504:	e7e8      	b.n	80044d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004506:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800450a:	e7e5      	b.n	80044d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 800450c:	24001f38 	.word	0x24001f38
 8004510:	24001f40 	.word	0x24001f40

08004514 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004514:	b990      	cbnz	r0, 800453c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 8004516:	b510      	push	{r4, lr}
 8004518:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 800451c:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d10e      	bne.n	8004542 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 8004526:	205c      	movs	r0, #92	; 0x5c
 8004528:	fb00 3004 	mla	r0, r0, r4, r3
 800452c:	f002 f98e 	bl	800684c <HAL_OSPI_Abort>
 8004530:	b950      	cbnz	r0, 8004548 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8004534:	2201      	movs	r2, #1
 8004536:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800453a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800453c:	f06f 0001 	mvn.w	r0, #1
}
 8004540:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004542:	f06f 001a 	mvn.w	r0, #26
 8004546:	e7f8      	b.n	800453a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8004548:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800454c:	e7f5      	b.n	800453a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 800454e:	bf00      	nop
 8004550:	24001f38 	.word	0x24001f38
 8004554:	24001f40 	.word	0x24001f40

08004558 <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004558:	bb08      	cbnz	r0, 800459e <BSP_OSPI_NOR_DeInit+0x46>
{
 800455a:	b510      	push	{r4, lr}
 800455c:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <BSP_OSPI_NOR_DeInit+0x54>)
 8004560:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d013      	beq.n	8004590 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <BSP_OSPI_NOR_DeInit+0x54>)
 800456a:	2200      	movs	r2, #0
 800456c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8004570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004574:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8004576:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <BSP_OSPI_NOR_DeInit+0x58>)
 800457a:	225c      	movs	r2, #92	; 0x5c
 800457c:	fb02 3404 	mla	r4, r2, r4, r3
 8004580:	4620      	mov	r0, r4
 8004582:	f7ff fde3 	bl	800414c <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8004586:	4620      	mov	r0, r4
 8004588:	f001 feae 	bl	80062e8 <HAL_OSPI_DeInit>
 800458c:	b950      	cbnz	r0, 80045a4 <BSP_OSPI_NOR_DeInit+0x4c>
}
 800458e:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004590:	f7ff ffc0 	bl	8004514 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004594:	2800      	cmp	r0, #0
 8004596:	d0e7      	beq.n	8004568 <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004598:	f06f 0004 	mvn.w	r0, #4
 800459c:	e7f7      	b.n	800458e <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 800459e:	f06f 0001 	mvn.w	r0, #1
}
 80045a2:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 80045a4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80045a8:	e7f1      	b.n	800458e <BSP_OSPI_NOR_DeInit+0x36>
 80045aa:	bf00      	nop
 80045ac:	24001f38 	.word	0x24001f38
 80045b0:	24001f40 	.word	0x24001f40

080045b4 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d141      	bne.n	800463c <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	460d      	mov	r5, r1
 80045bc:	4616      	mov	r6, r2
 80045be:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045c2:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d03b      	beq.n	8004642 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045cc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d00b      	beq.n	80045ee <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80045d6:	2901      	cmp	r1, #1
 80045d8:	d025      	beq.n	8004626 <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 80045da:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045de:	2201      	movs	r2, #1
 80045e0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80045e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80045e8:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80045ea:	70a6      	strb	r6, [r4, #2]
}
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80045ee:	2901      	cmp	r1, #1
 80045f0:	d105      	bne.n	80045fe <BSP_OSPI_NOR_ConfigFlash+0x4a>
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045f4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045f8:	789b      	ldrb	r3, [r3, #2]
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01c      	beq.n	8004638 <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff fdf6 	bl	80041f0 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004604:	2800      	cmp	r0, #0
 8004606:	bf08      	it	eq
 8004608:	2d01      	cmpeq	r5, #1
 800460a:	d10f      	bne.n	800462c <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800460e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004612:	789b      	ldrb	r3, [r3, #2]
 8004614:	b91b      	cbnz	r3, 800461e <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004616:	4620      	mov	r0, r4
 8004618:	f7ff feac 	bl	8004374 <OSPI_NOR_EnterDOPIMode>
 800461c:	e006      	b.n	800462c <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800461e:	4620      	mov	r0, r4
 8004620:	f7ff fe44 	bl	80042ac <OSPI_NOR_EnterSOPIMode>
 8004624:	e002      	b.n	800462c <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8004626:	b922      	cbnz	r2, 8004632 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004628:	f7ff fe40 	bl	80042ac <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 800462c:	2800      	cmp	r0, #0
 800462e:	d1dd      	bne.n	80045ec <BSP_OSPI_NOR_ConfigFlash+0x38>
 8004630:	e7d4      	b.n	80045dc <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004632:	f7ff fe9f 	bl	8004374 <OSPI_NOR_EnterDOPIMode>
 8004636:	e7f9      	b.n	800462c <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 8004638:	2000      	movs	r0, #0
 800463a:	e7cf      	b.n	80045dc <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 800463c:	f06f 0001 	mvn.w	r0, #1
}
 8004640:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004642:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8004646:	e7d1      	b.n	80045ec <BSP_OSPI_NOR_ConfigFlash+0x38>
 8004648:	24001f38 	.word	0x24001f38

0800464c <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800464c:	2800      	cmp	r0, #0
 800464e:	d13f      	bne.n	80046d0 <BSP_OSPI_NOR_Init+0x84>
{
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	460d      	mov	r5, r1
 8004656:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004658:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <BSP_OSPI_NOR_Init+0x9c>)
 800465a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800465e:	b113      	cbz	r3, 8004666 <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8004660:	2000      	movs	r0, #0
}
 8004662:	b00e      	add	sp, #56	; 0x38
 8004664:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8004666:	4e21      	ldr	r6, [pc, #132]	; (80046ec <BSP_OSPI_NOR_Init+0xa0>)
 8004668:	235c      	movs	r3, #92	; 0x5c
 800466a:	fb03 6600 	mla	r6, r3, r0, r6
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff fc0e 	bl	8003e90 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004674:	a805      	add	r0, sp, #20
 8004676:	f7fe fe43 	bl	8003300 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800467a:	2303      	movs	r3, #3
 800467c:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800467e:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004684:	b313      	cbz	r3, 80046cc <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8004690:	786b      	ldrb	r3, [r5, #1]
 8004692:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004694:	a901      	add	r1, sp, #4
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff fede 	bl	8004458 <MX_OSPI_NOR_Init>
 800469c:	b9d8      	cbnz	r0, 80046d6 <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff fd04 	bl	80040ac <OSPI_NOR_ResetMemory>
 80046a4:	b9d0      	cbnz	r0, 80046dc <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <BSP_OSPI_NOR_Init+0x9c>)
 80046a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046ac:	789a      	ldrb	r2, [r3, #2]
 80046ae:	7859      	ldrb	r1, [r3, #1]
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7fe fe3e 	bl	8003332 <MX25LM51245G_AutoPollingMemReady>
 80046b6:	b9a0      	cbnz	r0, 80046e2 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80046b8:	786a      	ldrb	r2, [r5, #1]
 80046ba:	7829      	ldrb	r1, [r5, #0]
 80046bc:	4620      	mov	r0, r4
 80046be:	f7ff ff79 	bl	80045b4 <BSP_OSPI_NOR_ConfigFlash>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d0cd      	beq.n	8004662 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80046c6:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80046ca:	e7ca      	b.n	8004662 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e7dc      	b.n	800468a <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80046d0:	f06f 0001 	mvn.w	r0, #1
}
 80046d4:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 80046d6:	f06f 0003 	mvn.w	r0, #3
 80046da:	e7c2      	b.n	8004662 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046dc:	f06f 0004 	mvn.w	r0, #4
 80046e0:	e7bf      	b.n	8004662 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046e2:	f06f 0004 	mvn.w	r0, #4
 80046e6:	e7bc      	b.n	8004662 <BSP_OSPI_NOR_Init+0x16>
 80046e8:	24001f38 	.word	0x24001f38
 80046ec:	24001f40 	.word	0x24001f40

080046f0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80046f0:	b510      	push	{r4, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80046fa:	2370      	movs	r3, #112	; 0x70
 80046fc:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <FT5336_Probe+0x70>)
 8004702:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <FT5336_Probe+0x74>)
 8004706:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <FT5336_Probe+0x78>)
 800470a:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <FT5336_Probe+0x7c>)
 800470e:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <FT5336_Probe+0x80>)
 8004712:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004714:	a902      	add	r1, sp, #8
 8004716:	4817      	ldr	r0, [pc, #92]	; (8004774 <FT5336_Probe+0x84>)
 8004718:	f7fe fd50 	bl	80031bc <FT5336_RegisterBusIO>
 800471c:	b998      	cbnz	r0, 8004746 <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800471e:	a901      	add	r1, sp, #4
 8004720:	4814      	ldr	r0, [pc, #80]	; (8004774 <FT5336_Probe+0x84>)
 8004722:	f7fe fc8d 	bl	8003040 <FT5336_ReadID>
 8004726:	b988      	cbnz	r0, 800474c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8004728:	9b01      	ldr	r3, [sp, #4]
 800472a:	2b51      	cmp	r3, #81	; 0x51
 800472c:	d111      	bne.n	8004752 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800472e:	4811      	ldr	r0, [pc, #68]	; (8004774 <FT5336_Probe+0x84>)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <FT5336_Probe+0x88>)
 8004732:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <FT5336_Probe+0x8c>)
 8004738:	4a11      	ldr	r2, [pc, #68]	; (8004780 <FT5336_Probe+0x90>)
 800473a:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4798      	blx	r3
 8004740:	b950      	cbnz	r0, 8004758 <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8004742:	b008      	add	sp, #32
 8004744:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 8004746:	f06f 0007 	mvn.w	r0, #7
 800474a:	e7fa      	b.n	8004742 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800474c:	f06f 0004 	mvn.w	r0, #4
 8004750:	e7f7      	b.n	8004742 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004752:	f06f 0006 	mvn.w	r0, #6
 8004756:	e7f4      	b.n	8004742 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004758:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800475c:	e7f1      	b.n	8004742 <FT5336_Probe+0x52>
 800475e:	bf00      	nop
 8004760:	08003dd1 	.word	0x08003dd1
 8004764:	08003d61 	.word	0x08003d61
 8004768:	08003e59 	.word	0x08003e59
 800476c:	08003e29 	.word	0x08003e29
 8004770:	08003e89 	.word	0x08003e89
 8004774:	24001f9c 	.word	0x24001f9c
 8004778:	24001fc4 	.word	0x24001fc4
 800477c:	2400000c 	.word	0x2400000c
 8004780:	24001fe8 	.word	0x24001fe8

08004784 <BSP_TS_Init>:
{
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004786:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004788:	2800      	cmp	r0, #0
 800478a:	d150      	bne.n	800482e <BSP_TS_Init+0xaa>
 800478c:	460c      	mov	r4, r1
 800478e:	4605      	mov	r5, r0
 8004790:	680b      	ldr	r3, [r1, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04e      	beq.n	8004834 <BSP_TS_Init+0xb0>
 8004796:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800479a:	d84e      	bhi.n	800483a <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800479c:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d04e      	beq.n	8004840 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80047a2:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80047a6:	d84e      	bhi.n	8004846 <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80047a8:	68c9      	ldr	r1, [r1, #12]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bf28      	it	cs
 80047ae:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d84b      	bhi.n	800484c <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80047b4:	f7ff ff9c 	bl	80046f0 <FT5336_Probe>
 80047b8:	4606      	mov	r6, r0
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d149      	bne.n	8004852 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	4925      	ldr	r1, [pc, #148]	; (8004858 <BSP_TS_Init+0xd4>)
 80047c2:	016a      	lsls	r2, r5, #5
 80047c4:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 80047c8:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80047ce:	68a2      	ldr	r2, [r4, #8]
 80047d0:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80047d2:	68e2      	ldr	r2, [r4, #12]
 80047d4:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80047d6:	4b21      	ldr	r3, [pc, #132]	; (800485c <BSP_TS_Init+0xd8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	a901      	add	r1, sp, #4
 80047de:	4a20      	ldr	r2, [pc, #128]	; (8004860 <BSP_TS_Init+0xdc>)
 80047e0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80047e4:	4798      	blx	r3
 80047e6:	2800      	cmp	r0, #0
 80047e8:	db1e      	blt.n	8004828 <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80047ea:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <BSP_TS_Init+0xd4>)
 80047ec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80047f0:	9a02      	ldr	r2, [sp, #8]
 80047f2:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80047f4:	9a03      	ldr	r2, [sp, #12]
 80047f6:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80047f8:	462b      	mov	r3, r5
 80047fa:	b113      	cbz	r3, 8004802 <BSP_TS_Init+0x7e>
}
 80047fc:	4630      	mov	r0, r6
 80047fe:	b005      	add	sp, #20
 8004800:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	68e1      	ldr	r1, [r4, #12]
 8004806:	440a      	add	r2, r1
 8004808:	3201      	adds	r2, #1
 800480a:	4913      	ldr	r1, [pc, #76]	; (8004858 <BSP_TS_Init+0xd4>)
 800480c:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8004810:	3006      	adds	r0, #6
 8004812:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	68e7      	ldr	r7, [r4, #12]
 800481a:	443a      	add	r2, r7
 800481c:	3201      	adds	r2, #1
 800481e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004822:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004824:	3301      	adds	r3, #1
 8004826:	e7e8      	b.n	80047fa <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004828:	f06f 0604 	mvn.w	r6, #4
 800482c:	e7e6      	b.n	80047fc <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 800482e:	f06f 0601 	mvn.w	r6, #1
 8004832:	e7e3      	b.n	80047fc <BSP_TS_Init+0x78>
 8004834:	f06f 0601 	mvn.w	r6, #1
 8004838:	e7e0      	b.n	80047fc <BSP_TS_Init+0x78>
 800483a:	f06f 0601 	mvn.w	r6, #1
 800483e:	e7dd      	b.n	80047fc <BSP_TS_Init+0x78>
 8004840:	f06f 0601 	mvn.w	r6, #1
 8004844:	e7da      	b.n	80047fc <BSP_TS_Init+0x78>
 8004846:	f06f 0601 	mvn.w	r6, #1
 800484a:	e7d7      	b.n	80047fc <BSP_TS_Init+0x78>
 800484c:	f06f 0601 	mvn.w	r6, #1
 8004850:	e7d4      	b.n	80047fc <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8004852:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 8004856:	e7d1      	b.n	80047fc <BSP_TS_Init+0x78>
 8004858:	24001fc8 	.word	0x24001fc8
 800485c:	24001fe8 	.word	0x24001fe8
 8004860:	24001fc4 	.word	0x24001fc4

08004864 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8004864:	2800      	cmp	r0, #0
 8004866:	d178      	bne.n	800495a <BSP_TS_GetState+0xf6>
{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	460c      	mov	r4, r1
 800486e:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004870:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <BSP_TS_GetState+0xfc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	a901      	add	r1, sp, #4
 8004878:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <BSP_TS_GetState+0x100>)
 800487a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800487e:	4798      	blx	r3
 8004880:	2800      	cmp	r0, #0
 8004882:	db66      	blt.n	8004952 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8004884:	9e01      	ldr	r6, [sp, #4]
 8004886:	2e00      	cmp	r6, #0
 8004888:	d059      	beq.n	800493e <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800488a:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 800488c:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <BSP_TS_GetState+0x104>)
 8004890:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	f011 0f08 	tst.w	r1, #8
 800489a:	d141      	bne.n	8004920 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 800489c:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 800489e:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80048a0:	f011 0f02 	tst.w	r1, #2
 80048a4:	d005      	beq.n	80048b2 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <BSP_TS_GetState+0x104>)
 80048a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80048b2:	f011 0f04 	tst.w	r1, #4
 80048b6:	d005      	beq.n	80048c4 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <BSP_TS_GetState+0x104>)
 80048ba:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 80048be:	6952      	ldr	r2, [r2, #20]
 80048c0:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80048c4:	4a28      	ldr	r2, [pc, #160]	; (8004968 <BSP_TS_GetState+0x104>)
 80048c6:	0168      	lsls	r0, r5, #5
 80048c8:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 80048cc:	5810      	ldr	r0, [r2, r0]
 80048ce:	fb00 f303 	mul.w	r3, r0, r3
 80048d2:	690a      	ldr	r2, [r1, #16]
 80048d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d8:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80048da:	684a      	ldr	r2, [r1, #4]
 80048dc:	fb0c f202 	mul.w	r2, ip, r2
 80048e0:	6948      	ldr	r0, [r1, #20]
 80048e2:	fbb2 f2f0 	udiv	r2, r2, r0
 80048e6:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80048e8:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80048ea:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80048ec:	4283      	cmp	r3, r0
 80048ee:	d91a      	bls.n	8004926 <BSP_TS_GetState+0xc2>
 80048f0:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80048f2:	491d      	ldr	r1, [pc, #116]	; (8004968 <BSP_TS_GetState+0x104>)
 80048f4:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80048f8:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80048fa:	428a      	cmp	r2, r1
 80048fc:	d915      	bls.n	800492a <BSP_TS_GetState+0xc6>
 80048fe:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004900:	4919      	ldr	r1, [pc, #100]	; (8004968 <BSP_TS_GetState+0x104>)
 8004902:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8004906:	68c9      	ldr	r1, [r1, #12]
 8004908:	42b1      	cmp	r1, r6
 800490a:	d301      	bcc.n	8004910 <BSP_TS_GetState+0xac>
 800490c:	4291      	cmp	r1, r2
 800490e:	d20e      	bcs.n	800492e <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <BSP_TS_GetState+0x104>)
 8004912:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 8004916:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 800491c:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800491e:	e01a      	b.n	8004956 <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 8004920:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 8004922:	4603      	mov	r3, r0
 8004924:	e7bc      	b.n	80048a0 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004926:	1ac6      	subs	r6, r0, r3
 8004928:	e7e3      	b.n	80048f2 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800492a:	1a8a      	subs	r2, r1, r2
 800492c:	e7e8      	b.n	8004900 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800492e:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004930:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <BSP_TS_GetState+0x104>)
 8004932:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8004936:	69eb      	ldr	r3, [r5, #28]
 8004938:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800493a:	2000      	movs	r0, #0
 800493c:	e00b      	b.n	8004956 <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 800493e:	2000      	movs	r0, #0
 8004940:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <BSP_TS_GetState+0x104>)
 8004944:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8004948:	69ab      	ldr	r3, [r5, #24]
 800494a:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800494c:	69eb      	ldr	r3, [r5, #28]
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	e001      	b.n	8004956 <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004952:	f06f 0004 	mvn.w	r0, #4
}
 8004956:	b004      	add	sp, #16
 8004958:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800495a:	f06f 0001 	mvn.w	r0, #1
}
 800495e:	4770      	bx	lr
 8004960:	24001fe8 	.word	0x24001fe8
 8004964:	24001fc4 	.word	0x24001fc4
 8004968:	24001fc8 	.word	0x24001fc8

0800496c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <SystemInit+0x64>)
 800496e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004972:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004976:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <SystemInit+0x68>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	4913      	ldr	r1, [pc, #76]	; (80049d8 <SystemInit+0x6c>)
 800498c:	4001      	ands	r1, r0
 800498e:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004990:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004992:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004994:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004996:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800499c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049a0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80049ac:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049ae:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <SystemInit+0x70>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <SystemInit+0x74>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049bc:	d203      	bcs.n	80049c6 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <SystemInit+0x78>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049c6:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <SystemInit+0x64>)
 80049c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	58024400 	.word	0x58024400
 80049d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80049dc:	5c001000 	.word	0x5c001000
 80049e0:	ffff0000 	.word	0xffff0000
 80049e4:	51008000 	.word	0x51008000

080049e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ea:	2003      	movs	r0, #3
 80049ec:	f000 f850 	bl	8004a90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80049f0:	f002 fb54 	bl	800709c <HAL_RCC_GetSysClockFreq>
 80049f4:	490f      	ldr	r1, [pc, #60]	; (8004a34 <HAL_Init+0x4c>)
 80049f6:	698b      	ldr	r3, [r1, #24]
 80049f8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80049fc:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <HAL_Init+0x50>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004a06:	698b      	ldr	r3, [r1, #24]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	5cd3      	ldrb	r3, [r2, r3]
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	fa20 f303 	lsr.w	r3, r0, r3
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <HAL_Init+0x54>)
 8004a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <HAL_Init+0x58>)
 8004a1c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fd fb8c 	bl	800213c <HAL_InitTick>
 8004a24:	b110      	cbz	r0, 8004a2c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8004a26:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8004a28:	4620      	mov	r0, r4
 8004a2a:	bd10      	pop	{r4, pc}
 8004a2c:	4604      	mov	r4, r0
  HAL_MspInit();
 8004a2e:	f7fd f9c7 	bl	8001dc0 <HAL_MspInit>
  return HAL_OK;
 8004a32:	e7f9      	b.n	8004a28 <HAL_Init+0x40>
 8004a34:	58024400 	.word	0x58024400
 8004a38:	08019fb4 	.word	0x08019fb4
 8004a3c:	24000040 	.word	0x24000040
 8004a40:	2400003c 	.word	0x2400003c

08004a44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <HAL_IncTick+0x10>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4a03      	ldr	r2, [pc, #12]	; (8004a58 <HAL_IncTick+0x14>)
 8004a4a:	6811      	ldr	r1, [r2, #0]
 8004a4c:	440b      	add	r3, r1
 8004a4e:	6013      	str	r3, [r2, #0]
}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	24000044 	.word	0x24000044
 8004a58:	24001fec 	.word	0x24001fec

08004a5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a5c:	4b01      	ldr	r3, [pc, #4]	; (8004a64 <HAL_GetTick+0x8>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	24001fec 	.word	0x24001fec

08004a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a6c:	f7ff fff6 	bl	8004a5c <HAL_GetTick>
 8004a70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a72:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004a76:	d002      	beq.n	8004a7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <HAL_Delay+0x24>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a7e:	f7ff ffed 	bl	8004a5c <HAL_GetTick>
 8004a82:	1b40      	subs	r0, r0, r5
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d3fa      	bcc.n	8004a7e <HAL_Delay+0x16>
  {
  }
}
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24000044 	.word	0x24000044

08004a90 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a90:	4906      	ldr	r1, [pc, #24]	; (8004aac <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004a92:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a9c:	0200      	lsls	r0, r0, #8
 8004a9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004aa4:	4a02      	ldr	r2, [pc, #8]	; (8004ab0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004aa6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004aa8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004aaa:	4770      	bx	lr
 8004aac:	e000ed00 	.word	0xe000ed00
 8004ab0:	05fa0000 	.word	0x05fa0000

08004ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_NVIC_SetPriority+0x60>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004abe:	f1c3 0c07 	rsb	ip, r3, #7
 8004ac2:	f1bc 0f04 	cmp.w	ip, #4
 8004ac6:	bf28      	it	cs
 8004ac8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004acc:	f103 0e04 	add.w	lr, r3, #4
 8004ad0:	f1be 0f06 	cmp.w	lr, #6
 8004ad4:	d914      	bls.n	8004b00 <HAL_NVIC_SetPriority+0x4c>
 8004ad6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad8:	f04f 3eff 	mov.w	lr, #4294967295
 8004adc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004ae0:	ea21 010c 	bic.w	r1, r1, ip
 8004ae4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae6:	fa0e f303 	lsl.w	r3, lr, r3
 8004aea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004af0:	2800      	cmp	r0, #0
 8004af2:	db07      	blt.n	8004b04 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af4:	0109      	lsls	r1, r1, #4
 8004af6:	b2c9      	uxtb	r1, r1
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <HAL_NVIC_SetPriority+0x64>)
 8004afa:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004afc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b00:	2300      	movs	r3, #0
 8004b02:	e7e9      	b.n	8004ad8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	f000 000f 	and.w	r0, r0, #15
 8004b08:	0109      	lsls	r1, r1, #4
 8004b0a:	b2c9      	uxtb	r1, r1
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_NVIC_SetPriority+0x68>)
 8004b0e:	5419      	strb	r1, [r3, r0]
 8004b10:	e7f4      	b.n	8004afc <HAL_NVIC_SetPriority+0x48>
 8004b12:	bf00      	nop
 8004b14:	e000ed00 	.word	0xe000ed00
 8004b18:	e000e400 	.word	0xe000e400
 8004b1c:	e000ed14 	.word	0xe000ed14

08004b20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b20:	2800      	cmp	r0, #0
 8004b22:	db07      	blt.n	8004b34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b24:	f000 021f 	and.w	r2, r0, #31
 8004b28:	0940      	lsrs	r0, r0, #5
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4093      	lsls	r3, r2
 8004b2e:	4a02      	ldr	r2, [pc, #8]	; (8004b38 <HAL_NVIC_EnableIRQ+0x18>)
 8004b30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	db0c      	blt.n	8004b5a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b40:	f000 021f 	and.w	r2, r0, #31
 8004b44:	0940      	lsrs	r0, r0, #5
 8004b46:	2301      	movs	r3, #1
 8004b48:	4093      	lsls	r3, r2
 8004b4a:	3020      	adds	r0, #32
 8004b4c:	4a03      	ldr	r2, [pc, #12]	; (8004b5c <HAL_NVIC_DisableIRQ+0x20>)
 8004b4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b56:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b5a:	4770      	bx	lr
 8004b5c:	e000e100 	.word	0xe000e100

08004b60 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004b60:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_MPU_Disable+0x18>)
 8004b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b7c:	f040 0001 	orr.w	r0, r0, #1
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_MPU_Enable+0x1c>)
 8004b82:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b92:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b9c:	7842      	ldrb	r2, [r0, #1]
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_MPU_ConfigRegion+0x5c>)
 8004ba0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004ba4:	7803      	ldrb	r3, [r0, #0]
 8004ba6:	b1fb      	cbz	r3, 8004be8 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004ba8:	6843      	ldr	r3, [r0, #4]
 8004baa:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <HAL_MPU_ConfigRegion+0x5c>)
 8004bac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bb2:	7ac3      	ldrb	r3, [r0, #11]
 8004bb4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bba:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bbc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bc0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bc2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bc6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bc8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bcc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bd2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bd8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bda:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004bde:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004be0:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004be2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004be6:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <HAL_MPU_ConfigRegion+0x5c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004bf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d038      	beq.n	8004c72 <HAL_CRC_Init+0x76>
{
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c04:	7f43      	ldrb	r3, [r0, #29]
 8004c06:	b31b      	cbz	r3, 8004c50 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c0c:	7923      	ldrb	r3, [r4, #4]
 8004c0e:	bb1b      	cbnz	r3, 8004c58 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_CRC_Init+0x7c>)
 8004c14:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c16:	6822      	ldr	r2, [r4, #0]
 8004c18:	6893      	ldr	r3, [r2, #8]
 8004c1a:	f023 0318 	bic.w	r3, r3, #24
 8004c1e:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c20:	7963      	ldrb	r3, [r4, #5]
 8004c22:	bb13      	cbnz	r3, 8004c6a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	6893      	ldr	r3, [r2, #8]
 8004c30:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	430b      	orrs	r3, r1
 8004c38:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c3a:	6822      	ldr	r2, [r4, #0]
 8004c3c:	6893      	ldr	r3, [r2, #8]
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c42:	69a1      	ldr	r1, [r4, #24]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8004c4c:	2000      	movs	r0, #0
}
 8004c4e:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004c50:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004c52:	f7fd f8cf 	bl	8001df4 <HAL_CRC_MspInit>
 8004c56:	e7d7      	b.n	8004c08 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c58:	68e2      	ldr	r2, [r4, #12]
 8004c5a:	68a1      	ldr	r1, [r4, #8]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f000 f80d 	bl	8004c7c <HAL_CRCEx_Polynomial_Set>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0dc      	beq.n	8004c20 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8004c66:	2001      	movs	r0, #1
 8004c68:	e7f1      	b.n	8004c4e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	6922      	ldr	r2, [r4, #16]
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	e7dc      	b.n	8004c2c <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8004c72:	2001      	movs	r0, #1
}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	04c11db7 	.word	0x04c11db7

08004c7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c7c:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c7e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c80:	461c      	mov	r4, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b134      	cbz	r4, 8004c94 <HAL_CRCEx_Polynomial_Set+0x18>
 8004c86:	f003 0c1f 	and.w	ip, r3, #31
 8004c8a:	fa21 fc0c 	lsr.w	ip, r1, ip
 8004c8e:	f01c 0f01 	tst.w	ip, #1
 8004c92:	d0f5      	beq.n	8004c80 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c94:	2a18      	cmp	r2, #24
 8004c96:	d822      	bhi.n	8004cde <HAL_CRCEx_Polynomial_Set+0x62>
 8004c98:	e8df f002 	tbb	[pc, r2]
 8004c9c:	2121210f 	.word	0x2121210f
 8004ca0:	21212121 	.word	0x21212121
 8004ca4:	2121211d 	.word	0x2121211d
 8004ca8:	21212121 	.word	0x21212121
 8004cac:	21212119 	.word	0x21212119
 8004cb0:	21212121 	.word	0x21212121
 8004cb4:	0d          	.byte	0x0d
 8004cb5:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d815      	bhi.n	8004ce6 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cbe:	6801      	ldr	r1, [r0, #0]
 8004cc0:	688b      	ldr	r3, [r1, #8]
 8004cc2:	f023 0318 	bic.w	r3, r3, #24
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	608a      	str	r2, [r1, #8]
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e008      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cce:	2b07      	cmp	r3, #7
 8004cd0:	d9f3      	bls.n	8004cba <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	e004      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d9ef      	bls.n	8004cba <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004cda:	2001      	movs	r0, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8004cde:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8004ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce4:	4770      	bx	lr
        status =   HAL_ERROR;
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	e7fa      	b.n	8004ce0 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08004cec <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d037      	beq.n	8004d60 <HAL_DMA2D_Init+0x74>
{
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004cf4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02c      	beq.n	8004d56 <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	680a      	ldr	r2, [r1, #0]
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_DMA2D_Init+0x78>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	69e0      	ldr	r0, [r4, #28]
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_DMA2D_Init+0x7c>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	68a2      	ldr	r2, [r4, #8]
 8004d1e:	69a0      	ldr	r0, [r4, #24]
 8004d20:	4302      	orrs	r2, r0
 8004d22:	4313      	orrs	r3, r2
 8004d24:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_DMA2D_Init+0x80>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	68e1      	ldr	r1, [r4, #12]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004d34:	6821      	ldr	r1, [r4, #0]
 8004d36:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004d38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d3c:	6920      	ldr	r0, [r4, #16]
 8004d3e:	6962      	ldr	r2, [r4, #20]
 8004d40:	0552      	lsls	r2, r2, #21
 8004d42:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004d46:	4313      	orrs	r3, r2
 8004d48:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8004d54:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004d56:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8004d5a:	f7fd f865 	bl	8001e28 <HAL_DMA2D_MspInit>
 8004d5e:	e7cd      	b.n	8004cfc <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8004d60:	2001      	movs	r0, #1
}
 8004d62:	4770      	bx	lr
 8004d64:	fff8ffbf 	.word	0xfff8ffbf
 8004d68:	fffffef8 	.word	0xfffffef8
 8004d6c:	ffff0000 	.word	0xffff0000

08004d70 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004d70:	4770      	bx	lr

08004d72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d72:	4770      	bx	lr

08004d74 <HAL_DMA2D_IRQHandler>:
{
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d78:	6803      	ldr	r3, [r0, #0]
 8004d7a:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004d7c:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d7e:	f015 0f01 	tst.w	r5, #1
 8004d82:	d016      	beq.n	8004db2 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004d84:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d90:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d92:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d9a:	6803      	ldr	r3, [r0, #0]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004da0:	2304      	movs	r3, #4
 8004da2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004da6:	2300      	movs	r3, #0
 8004da8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dae:	b103      	cbz	r3, 8004db2 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8004db0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004db2:	f015 0f20 	tst.w	r5, #32
 8004db6:	d018      	beq.n	8004dea <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004db8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8004dbc:	d015      	beq.n	8004dea <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de4:	b10b      	cbz	r3, 8004dea <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8004de6:	4620      	mov	r0, r4
 8004de8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004dea:	f015 0f08 	tst.w	r5, #8
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004df0:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8004df4:	d015      	beq.n	8004e22 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dfe:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	2208      	movs	r2, #8
 8004e04:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e0e:	2304      	movs	r3, #4
 8004e10:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e14:	2300      	movs	r3, #0
 8004e16:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1c:	b10b      	cbz	r3, 8004e22 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004e22:	f015 0f04 	tst.w	r5, #4
 8004e26:	d002      	beq.n	8004e2e <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004e28:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004e2c:	d120      	bne.n	8004e70 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e2e:	f015 0f02 	tst.w	r5, #2
 8004e32:	d016      	beq.n	8004e62 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e34:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004e38:	d013      	beq.n	8004e62 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e42:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	2202      	movs	r2, #2
 8004e48:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e4c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e54:	2300      	movs	r3, #0
 8004e56:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8004e5a:	6a23      	ldr	r3, [r4, #32]
 8004e5c:	b10b      	cbz	r3, 8004e62 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e62:	f015 0f10 	tst.w	r5, #16
 8004e66:	d002      	beq.n	8004e6e <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e68:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_DMA2D_IRQHandler+0x114>
}
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e78:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff ff75 	bl	8004d70 <HAL_DMA2D_LineEventCallback>
 8004e86:	e7d2      	b.n	8004e2e <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e90:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9a:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff ff62 	bl	8004d72 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004eae:	e7de      	b.n	8004e6e <HAL_DMA2D_IRQHandler+0xfa>

08004eb0 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004eb0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d074      	beq.n	8004fa2 <HAL_DMA2D_ConfigLayer+0xf2>
{
 8004eb8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004ec6:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004eca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ece:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004ed0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ed2:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004ed6:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8004ed8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004ede:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee2:	f1a4 0209 	sub.w	r2, r4, #9
 8004ee6:	2a01      	cmp	r2, #1
 8004ee8:	d921      	bls.n	8004f2e <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004eea:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004eee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ef2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004ef8:	bb61      	cbnz	r1, 8004f54 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004efa:	6804      	ldr	r4, [r0, #0]
 8004efc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004efe:	4a2a      	ldr	r2, [pc, #168]	; (8004fa8 <HAL_DMA2D_ConfigLayer+0xf8>)
 8004f00:	402a      	ands	r2, r5
 8004f02:	4313      	orrs	r3, r2
 8004f04:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f06:	6802      	ldr	r2, [r0, #0]
 8004f08:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f10:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004f12:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	3b09      	subs	r3, #9
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d911      	bls.n	8004f40 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f22:	2300      	movs	r3, #0
 8004f24:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8004f28:	4618      	mov	r0, r3
}
 8004f2a:	bc30      	pop	{r4, r5}
 8004f2c:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f2e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f38:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	e7db      	b.n	8004ef8 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f4a:	6802      	ldr	r2, [r0, #0]
 8004f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f50:	6293      	str	r3, [r2, #40]	; 0x28
 8004f52:	e7e3      	b.n	8004f1c <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004f54:	2c0b      	cmp	r4, #11
 8004f56:	d01b      	beq.n	8004f90 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004f58:	4d14      	ldr	r5, [pc, #80]	; (8004fac <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f5a:	6804      	ldr	r4, [r0, #0]
 8004f5c:	69e2      	ldr	r2, [r4, #28]
 8004f5e:	ea22 0205 	bic.w	r2, r2, r5
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f66:	6802      	ldr	r2, [r0, #0]
 8004f68:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f70:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004f72:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	3b09      	subs	r3, #9
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d8cf      	bhi.n	8004f1c <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f7c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f86:	6802      	ldr	r2, [r0, #0]
 8004f88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	6213      	str	r3, [r2, #32]
 8004f8e:	e7c5      	b.n	8004f1c <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004f90:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f9a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004f9e:	4d04      	ldr	r5, [pc, #16]	; (8004fb0 <HAL_DMA2D_ConfigLayer+0x100>)
 8004fa0:	e7db      	b.n	8004f5a <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8004fa2:	2002      	movs	r0, #2
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	00ccfff0 	.word	0x00ccfff0
 8004fac:	ff33000f 	.word	0xff33000f
 8004fb0:	ff3f000f 	.word	0xff3f000f

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004fb8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fba:	e06b      	b.n	8005094 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fbc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fbe:	005e      	lsls	r6, r3, #1
 8004fc0:	2403      	movs	r4, #3
 8004fc2:	40b4      	lsls	r4, r6
 8004fc4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fc8:	68cc      	ldr	r4, [r1, #12]
 8004fca:	40b4      	lsls	r4, r6
 8004fcc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004fce:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fd2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd6:	684c      	ldr	r4, [r1, #4]
 8004fd8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004fdc:	409c      	lsls	r4, r3
 8004fde:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004fe2:	6044      	str	r4, [r0, #4]
 8004fe4:	e068      	b.n	80050b8 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fe6:	08dd      	lsrs	r5, r3, #3
 8004fe8:	3508      	adds	r5, #8
 8004fea:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fee:	f003 0407 	and.w	r4, r3, #7
 8004ff2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004ff6:	240f      	movs	r4, #15
 8004ff8:	fa04 f40c 	lsl.w	r4, r4, ip
 8004ffc:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005000:	690c      	ldr	r4, [r1, #16]
 8005002:	fa04 f40c 	lsl.w	r4, r4, ip
 8005006:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800500a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800500e:	e06b      	b.n	80050e8 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005010:	2409      	movs	r4, #9
 8005012:	e000      	b.n	8005016 <HAL_GPIO_Init+0x62>
 8005014:	2400      	movs	r4, #0
 8005016:	fa04 f40e 	lsl.w	r4, r4, lr
 800501a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800501c:	f10c 0c02 	add.w	ip, ip, #2
 8005020:	4d69      	ldr	r5, [pc, #420]	; (80051c8 <HAL_GPIO_Init+0x214>)
 8005022:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005026:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800502a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800502c:	43d4      	mvns	r4, r2
 800502e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005032:	684f      	ldr	r7, [r1, #4]
 8005034:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005038:	d001      	beq.n	800503e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800503a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800503e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005042:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005044:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8005046:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800504a:	684f      	ldr	r7, [r1, #4]
 800504c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005050:	d001      	beq.n	8005056 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8005052:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005056:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800505a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800505c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005060:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005064:	684f      	ldr	r7, [r1, #4]
 8005066:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800506a:	d001      	beq.n	8005070 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800506c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005070:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005074:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005078:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800507c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800507e:	684e      	ldr	r6, [r1, #4]
 8005080:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8005084:	d001      	beq.n	800508a <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8005086:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800508a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508e:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8005092:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005094:	680a      	ldr	r2, [r1, #0]
 8005096:	fa32 f403 	lsrs.w	r4, r2, r3
 800509a:	f000 8092 	beq.w	80051c2 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800509e:	f04f 0c01 	mov.w	ip, #1
 80050a2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80050a6:	ea1c 0202 	ands.w	r2, ip, r2
 80050aa:	d0f2      	beq.n	8005092 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ac:	684c      	ldr	r4, [r1, #4]
 80050ae:	f004 0403 	and.w	r4, r4, #3
 80050b2:	3c01      	subs	r4, #1
 80050b4:	2c01      	cmp	r4, #1
 80050b6:	d981      	bls.n	8004fbc <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050b8:	684c      	ldr	r4, [r1, #4]
 80050ba:	f004 0403 	and.w	r4, r4, #3
 80050be:	2c03      	cmp	r4, #3
 80050c0:	d00c      	beq.n	80050dc <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80050c2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050c4:	005d      	lsls	r5, r3, #1
 80050c6:	f04f 0c03 	mov.w	ip, #3
 80050ca:	fa0c fc05 	lsl.w	ip, ip, r5
 80050ce:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d2:	688c      	ldr	r4, [r1, #8]
 80050d4:	40ac      	lsls	r4, r5
 80050d6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80050da:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050dc:	684c      	ldr	r4, [r1, #4]
 80050de:	f004 0403 	and.w	r4, r4, #3
 80050e2:	2c02      	cmp	r4, #2
 80050e4:	f43f af7f 	beq.w	8004fe6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80050e8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ea:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80050ee:	f04f 0c03 	mov.w	ip, #3
 80050f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80050f6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fa:	684c      	ldr	r4, [r1, #4]
 80050fc:	f004 0403 	and.w	r4, r4, #3
 8005100:	fa04 f40e 	lsl.w	r4, r4, lr
 8005104:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005108:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800510a:	684c      	ldr	r4, [r1, #4]
 800510c:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005110:	d0bf      	beq.n	8005092 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005112:	4c2e      	ldr	r4, [pc, #184]	; (80051cc <HAL_GPIO_Init+0x218>)
 8005114:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8005118:	f045 0502 	orr.w	r5, r5, #2
 800511c:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 8005120:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 8005124:	f004 0402 	and.w	r4, r4, #2
 8005128:	9401      	str	r4, [sp, #4]
 800512a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800512c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005130:	f10c 0502 	add.w	r5, ip, #2
 8005134:	4c24      	ldr	r4, [pc, #144]	; (80051c8 <HAL_GPIO_Init+0x214>)
 8005136:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800513a:	f003 0403 	and.w	r4, r3, #3
 800513e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005142:	240f      	movs	r4, #15
 8005144:	fa04 f40e 	lsl.w	r4, r4, lr
 8005148:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800514c:	4c20      	ldr	r4, [pc, #128]	; (80051d0 <HAL_GPIO_Init+0x21c>)
 800514e:	42a0      	cmp	r0, r4
 8005150:	f43f af60 	beq.w	8005014 <HAL_GPIO_Init+0x60>
 8005154:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005158:	42a0      	cmp	r0, r4
 800515a:	d022      	beq.n	80051a2 <HAL_GPIO_Init+0x1ee>
 800515c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005160:	42a0      	cmp	r0, r4
 8005162:	d020      	beq.n	80051a6 <HAL_GPIO_Init+0x1f2>
 8005164:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005168:	42a0      	cmp	r0, r4
 800516a:	d01e      	beq.n	80051aa <HAL_GPIO_Init+0x1f6>
 800516c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005170:	42a0      	cmp	r0, r4
 8005172:	d01c      	beq.n	80051ae <HAL_GPIO_Init+0x1fa>
 8005174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005178:	42a0      	cmp	r0, r4
 800517a:	d01a      	beq.n	80051b2 <HAL_GPIO_Init+0x1fe>
 800517c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005180:	42a0      	cmp	r0, r4
 8005182:	d018      	beq.n	80051b6 <HAL_GPIO_Init+0x202>
 8005184:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005188:	42a0      	cmp	r0, r4
 800518a:	d016      	beq.n	80051ba <HAL_GPIO_Init+0x206>
 800518c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005190:	42a0      	cmp	r0, r4
 8005192:	d014      	beq.n	80051be <HAL_GPIO_Init+0x20a>
 8005194:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005198:	42a0      	cmp	r0, r4
 800519a:	f43f af39 	beq.w	8005010 <HAL_GPIO_Init+0x5c>
 800519e:	240a      	movs	r4, #10
 80051a0:	e739      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051a2:	2401      	movs	r4, #1
 80051a4:	e737      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051a6:	2402      	movs	r4, #2
 80051a8:	e735      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051aa:	2403      	movs	r4, #3
 80051ac:	e733      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051ae:	2404      	movs	r4, #4
 80051b0:	e731      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051b2:	2405      	movs	r4, #5
 80051b4:	e72f      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051b6:	2406      	movs	r4, #6
 80051b8:	e72d      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051ba:	2407      	movs	r4, #7
 80051bc:	e72b      	b.n	8005016 <HAL_GPIO_Init+0x62>
 80051be:	2408      	movs	r4, #8
 80051c0:	e729      	b.n	8005016 <HAL_GPIO_Init+0x62>
  }
}
 80051c2:	b003      	add	sp, #12
 80051c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	58000400 	.word	0x58000400
 80051cc:	58024400 	.word	0x58024400
 80051d0:	58020000 	.word	0x58020000

080051d4 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 80051d4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80051d6:	fa31 f203 	lsrs.w	r2, r1, r3
 80051da:	f000 809d 	beq.w	8005318 <HAL_GPIO_DeInit+0x144>
{
 80051de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e0:	e02e      	b.n	8005240 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051e2:	2509      	movs	r5, #9
 80051e4:	e000      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80051e6:	2500      	movs	r5, #0
 80051e8:	fa05 fc0c 	lsl.w	ip, r5, ip
 80051ec:	45a4      	cmp	ip, r4
 80051ee:	d072      	beq.n	80052d6 <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051f0:	6804      	ldr	r4, [r0, #0]
 80051f2:	005d      	lsls	r5, r3, #1
 80051f4:	f04f 0c03 	mov.w	ip, #3
 80051f8:	fa0c fc05 	lsl.w	ip, ip, r5
 80051fc:	ea44 040c 	orr.w	r4, r4, ip
 8005200:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005202:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005206:	f10e 0e08 	add.w	lr, lr, #8
 800520a:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800520e:	f003 0507 	and.w	r5, r3, #7
 8005212:	00ae      	lsls	r6, r5, #2
 8005214:	250f      	movs	r5, #15
 8005216:	40b5      	lsls	r5, r6
 8005218:	ea24 0405 	bic.w	r4, r4, r5
 800521c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005220:	68c4      	ldr	r4, [r0, #12]
 8005222:	ea24 040c 	bic.w	r4, r4, ip
 8005226:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005228:	6844      	ldr	r4, [r0, #4]
 800522a:	ea24 0202 	bic.w	r2, r4, r2
 800522e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005230:	6882      	ldr	r2, [r0, #8]
 8005232:	ea22 020c 	bic.w	r2, r2, ip
 8005236:	6082      	str	r2, [r0, #8]
    }

    position++;
 8005238:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800523a:	fa31 f203 	lsrs.w	r2, r1, r3
 800523e:	d06a      	beq.n	8005316 <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8005244:	ea12 0e01 	ands.w	lr, r2, r1
 8005248:	d0f6      	beq.n	8005238 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800524a:	089e      	lsrs	r6, r3, #2
 800524c:	1cb5      	adds	r5, r6, #2
 800524e:	4c33      	ldr	r4, [pc, #204]	; (800531c <HAL_GPIO_DeInit+0x148>)
 8005250:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005254:	f003 0c03 	and.w	ip, r3, #3
 8005258:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800525c:	250f      	movs	r5, #15
 800525e:	fa05 f70c 	lsl.w	r7, r5, ip
 8005262:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005264:	4d2e      	ldr	r5, [pc, #184]	; (8005320 <HAL_GPIO_DeInit+0x14c>)
 8005266:	42a8      	cmp	r0, r5
 8005268:	d0bd      	beq.n	80051e6 <HAL_GPIO_DeInit+0x12>
 800526a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800526e:	42a8      	cmp	r0, r5
 8005270:	d021      	beq.n	80052b6 <HAL_GPIO_DeInit+0xe2>
 8005272:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005276:	42a8      	cmp	r0, r5
 8005278:	d01f      	beq.n	80052ba <HAL_GPIO_DeInit+0xe6>
 800527a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800527e:	42a8      	cmp	r0, r5
 8005280:	d01d      	beq.n	80052be <HAL_GPIO_DeInit+0xea>
 8005282:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005286:	42a8      	cmp	r0, r5
 8005288:	d01b      	beq.n	80052c2 <HAL_GPIO_DeInit+0xee>
 800528a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800528e:	42a8      	cmp	r0, r5
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_DeInit+0xf2>
 8005292:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005296:	42a8      	cmp	r0, r5
 8005298:	d017      	beq.n	80052ca <HAL_GPIO_DeInit+0xf6>
 800529a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800529e:	42a8      	cmp	r0, r5
 80052a0:	d015      	beq.n	80052ce <HAL_GPIO_DeInit+0xfa>
 80052a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052a6:	42a8      	cmp	r0, r5
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_DeInit+0xfe>
 80052aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052ae:	42a8      	cmp	r0, r5
 80052b0:	d097      	beq.n	80051e2 <HAL_GPIO_DeInit+0xe>
 80052b2:	250a      	movs	r5, #10
 80052b4:	e798      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052b6:	2501      	movs	r5, #1
 80052b8:	e796      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052ba:	2502      	movs	r5, #2
 80052bc:	e794      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052be:	2503      	movs	r5, #3
 80052c0:	e792      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052c2:	2504      	movs	r5, #4
 80052c4:	e790      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052c6:	2505      	movs	r5, #5
 80052c8:	e78e      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052ca:	2506      	movs	r5, #6
 80052cc:	e78c      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052ce:	2507      	movs	r5, #7
 80052d0:	e78a      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
 80052d2:	2508      	movs	r5, #8
 80052d4:	e788      	b.n	80051e8 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80052d6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80052da:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80052de:	ea25 050e 	bic.w	r5, r5, lr
 80052e2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80052e6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80052ea:	ea25 050e 	bic.w	r5, r5, lr
 80052ee:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80052f2:	6865      	ldr	r5, [r4, #4]
 80052f4:	ea25 050e 	bic.w	r5, r5, lr
 80052f8:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80052fa:	6825      	ldr	r5, [r4, #0]
 80052fc:	ea25 050e 	bic.w	r5, r5, lr
 8005300:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005302:	f8df c018 	ldr.w	ip, [pc, #24]	; 800531c <HAL_GPIO_DeInit+0x148>
 8005306:	1cb4      	adds	r4, r6, #2
 8005308:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800530c:	ea25 0507 	bic.w	r5, r5, r7
 8005310:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8005314:	e76c      	b.n	80051f0 <HAL_GPIO_DeInit+0x1c>
  }
}
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	58000400 	.word	0x58000400
 8005320:	58020000 	.word	0x58020000

08005324 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005324:	b10a      	cbz	r2, 800532a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	6181      	str	r1, [r0, #24]
 8005328:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800532a:	0409      	lsls	r1, r1, #16
 800532c:	6181      	str	r1, [r0, #24]
  }
}
 800532e:	4770      	bx	lr

08005330 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005330:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005332:	ea01 0203 	and.w	r2, r1, r3
 8005336:	ea21 0103 	bic.w	r1, r1, r3
 800533a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800533e:	6181      	str	r1, [r0, #24]
}
 8005340:	4770      	bx	lr

08005342 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005344:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	4203      	tst	r3, r0
 8005350:	d100      	bne.n	8005354 <HAL_GPIO_EXTI_IRQHandler+0x10>
}
 8005352:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800535c:	f7ff fff1 	bl	8005342 <HAL_GPIO_EXTI_Callback>
}
 8005360:	e7f7      	b.n	8005352 <HAL_GPIO_EXTI_IRQHandler+0xe>

08005362 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005362:	6803      	ldr	r3, [r0, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	f012 0f02 	tst.w	r2, #2
 800536a:	d001      	beq.n	8005370 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800536c:	2200      	movs	r2, #0
 800536e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005370:	6803      	ldr	r3, [r0, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	f012 0f01 	tst.w	r2, #1
 8005378:	d103      	bne.n	8005382 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	619a      	str	r2, [r3, #24]
  }
}
 8005382:	4770      	bx	lr

08005384 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005384:	b410      	push	{r4}
 8005386:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005388:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800538c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005390:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005392:	4321      	orrs	r1, r4
 8005394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005398:	6802      	ldr	r2, [r0, #0]
 800539a:	6853      	ldr	r3, [r2, #4]
 800539c:	0d64      	lsrs	r4, r4, #21
 800539e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80053a2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80053a6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80053aa:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80053ae:	f044 0403 	orr.w	r4, r4, #3
 80053b2:	ea23 0404 	bic.w	r4, r3, r4
 80053b6:	4321      	orrs	r1, r4
 80053b8:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <I2C_IsErrorOccurred>:
{
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80053c6:	6803      	ldr	r3, [r0, #0]
 80053c8:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053ca:	f017 0710 	ands.w	r7, r7, #16
 80053ce:	d04e      	beq.n	800546e <I2C_IsErrorOccurred+0xae>
 80053d0:	460e      	mov	r6, r1
 80053d2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	6998      	ldr	r0, [r3, #24]
 80053de:	f010 0f20 	tst.w	r0, #32
 80053e2:	d13d      	bne.n	8005460 <I2C_IsErrorOccurred+0xa0>
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d13b      	bne.n	8005460 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80053e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80053ec:	d0f5      	beq.n	80053da <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7ff fb35 	bl	8004a5c <HAL_GetTick>
 80053f2:	eba0 0008 	sub.w	r0, r0, r8
 80053f6:	42b0      	cmp	r0, r6
 80053f8:	d801      	bhi.n	80053fe <I2C_IsErrorOccurred+0x3e>
 80053fa:	2e00      	cmp	r6, #0
 80053fc:	d1ed      	bne.n	80053da <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053fe:	6821      	ldr	r1, [r4, #0]
 8005400:	684a      	ldr	r2, [r1, #4]
 8005402:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005406:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800540a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800540c:	6988      	ldr	r0, [r1, #24]
 800540e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005412:	d004      	beq.n	800541e <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005414:	3b20      	subs	r3, #32
 8005416:	bf18      	it	ne
 8005418:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800541a:	b902      	cbnz	r2, 800541e <I2C_IsErrorOccurred+0x5e>
 800541c:	b9c3      	cbnz	r3, 8005450 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f013 0f20 	tst.w	r3, #32
 8005426:	d1d8      	bne.n	80053da <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005428:	f7ff fb18 	bl	8004a5c <HAL_GetTick>
 800542c:	eba0 0008 	sub.w	r0, r0, r8
 8005430:	2819      	cmp	r0, #25
 8005432:	d9f4      	bls.n	800541e <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005436:	f043 0320 	orr.w	r3, r3, #32
 800543a:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800543c:	2320      	movs	r3, #32
 800543e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	2300      	movs	r3, #0
 8005444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8005448:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800544c:	2501      	movs	r5, #1
 800544e:	e7e6      	b.n	800541e <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005450:	684b      	ldr	r3, [r1, #4]
 8005452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005456:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005458:	f7ff fb00 	bl	8004a5c <HAL_GetTick>
 800545c:	4680      	mov	r8, r0
 800545e:	e7de      	b.n	800541e <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005460:	2d00      	cmp	r5, #0
 8005462:	d140      	bne.n	80054e6 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005464:	2220      	movs	r2, #32
 8005466:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005468:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800546a:	2501      	movs	r5, #1
 800546c:	e000      	b.n	8005470 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005474:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005478:	d005      	beq.n	8005486 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800547a:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800547e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005482:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005484:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005486:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800548a:	d006      	beq.n	800549a <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800548c:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005496:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005498:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800549a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800549e:	d024      	beq.n	80054ea <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80054a0:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80054ac:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff ff57 	bl	8005362 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	6853      	ldr	r3, [r2, #4]
 80054b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80054ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054cc:	431f      	orrs	r7, r3
 80054ce:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054d0:	2320      	movs	r3, #32
 80054d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80054dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054e0:	4628      	mov	r0, r5
 80054e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80054e6:	2704      	movs	r7, #4
 80054e8:	e7c2      	b.n	8005470 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	d0f8      	beq.n	80054e0 <I2C_IsErrorOccurred+0x120>
 80054ee:	e7de      	b.n	80054ae <I2C_IsErrorOccurred+0xee>

080054f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4604      	mov	r4, r0
 80054f4:	460d      	mov	r5, r1
 80054f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f013 0f02 	tst.w	r3, #2
 8005500:	d11d      	bne.n	800553e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	4632      	mov	r2, r6
 8005504:	4629      	mov	r1, r5
 8005506:	4620      	mov	r0, r4
 8005508:	f7ff ff5a 	bl	80053c0 <I2C_IsErrorOccurred>
 800550c:	b9c8      	cbnz	r0, 8005542 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800550e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005512:	d0f1      	beq.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7ff faa2 	bl	8004a5c <HAL_GetTick>
 8005518:	1b80      	subs	r0, r0, r6
 800551a:	42a8      	cmp	r0, r5
 800551c:	d801      	bhi.n	8005522 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800551e:	2d00      	cmp	r5, #0
 8005520:	d1ea      	bne.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005522:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005524:	f043 0320 	orr.w	r3, r3, #32
 8005528:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800552a:	2320      	movs	r3, #32
 800552c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	2300      	movs	r3, #0
 8005532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005536:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800553a:	2001      	movs	r0, #1
 800553c:	e000      	b.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800553e:	2000      	movs	r0, #0
}
 8005540:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005542:	2001      	movs	r0, #1
 8005544:	e7fc      	b.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005546 <I2C_WaitOnFlagUntilTimeout>:
{
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	4606      	mov	r6, r0
 800554c:	4688      	mov	r8, r1
 800554e:	4617      	mov	r7, r2
 8005550:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005552:	6834      	ldr	r4, [r6, #0]
 8005554:	69a4      	ldr	r4, [r4, #24]
 8005556:	ea38 0304 	bics.w	r3, r8, r4
 800555a:	bf0c      	ite	eq
 800555c:	f04f 0c01 	moveq.w	ip, #1
 8005560:	f04f 0c00 	movne.w	ip, #0
 8005564:	45bc      	cmp	ip, r7
 8005566:	d118      	bne.n	800559a <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8005568:	f1b5 3fff 	cmp.w	r5, #4294967295
 800556c:	d0f1      	beq.n	8005552 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7ff fa75 	bl	8004a5c <HAL_GetTick>
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	1ac0      	subs	r0, r0, r3
 8005576:	42a8      	cmp	r0, r5
 8005578:	d801      	bhi.n	800557e <I2C_WaitOnFlagUntilTimeout+0x38>
 800557a:	2d00      	cmp	r5, #0
 800557c:	d1e9      	bne.n	8005552 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005586:	2320      	movs	r3, #32
 8005588:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800558c:	2300      	movs	r3, #0
 800558e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005592:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005596:	2001      	movs	r0, #1
 8005598:	e000      	b.n	800559c <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800559a:	2000      	movs	r0, #0
}
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055a0 <I2C_RequestMemoryWrite>:
{
 80055a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	4604      	mov	r4, r0
 80055a8:	4690      	mov	r8, r2
 80055aa:	461d      	mov	r5, r3
 80055ac:	9e08      	ldr	r6, [sp, #32]
 80055ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055b0:	4b19      	ldr	r3, [pc, #100]	; (8005618 <I2C_RequestMemoryWrite+0x78>)
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055b8:	b2ea      	uxtb	r2, r5
 80055ba:	f7ff fee3 	bl	8005384 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055be:	463a      	mov	r2, r7
 80055c0:	4631      	mov	r1, r6
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7ff ff94 	bl	80054f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80055c8:	b9f8      	cbnz	r0, 800560a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ca:	2d01      	cmp	r5, #1
 80055cc:	d10e      	bne.n	80055ec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	fa5f f288 	uxtb.w	r2, r8
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	9700      	str	r7, [sp, #0]
 80055d8:	4633      	mov	r3, r6
 80055da:	2200      	movs	r2, #0
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff ffb1 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 80055e4:	b9a8      	cbnz	r0, 8005612 <I2C_RequestMemoryWrite+0x72>
}
 80055e6:	b002      	add	sp, #8
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f4:	463a      	mov	r2, r7
 80055f6:	4631      	mov	r1, r6
 80055f8:	4620      	mov	r0, r4
 80055fa:	f7ff ff79 	bl	80054f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80055fe:	b930      	cbnz	r0, 800560e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	fa5f f288 	uxtb.w	r2, r8
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
 8005608:	e7e5      	b.n	80055d6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800560a:	2001      	movs	r0, #1
 800560c:	e7eb      	b.n	80055e6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800560e:	2001      	movs	r0, #1
 8005610:	e7e9      	b.n	80055e6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005612:	2001      	movs	r0, #1
 8005614:	e7e7      	b.n	80055e6 <I2C_RequestMemoryWrite+0x46>
 8005616:	bf00      	nop
 8005618:	80002000 	.word	0x80002000

0800561c <I2C_RequestMemoryRead>:
{
 800561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	4604      	mov	r4, r0
 8005624:	4690      	mov	r8, r2
 8005626:	461d      	mov	r5, r3
 8005628:	9e08      	ldr	r6, [sp, #32]
 800562a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <I2C_RequestMemoryRead+0x74>)
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	b2ea      	uxtb	r2, r5
 8005634:	f7ff fea6 	bl	8005384 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005638:	463a      	mov	r2, r7
 800563a:	4631      	mov	r1, r6
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff ff57 	bl	80054f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005642:	b9f8      	cbnz	r0, 8005684 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005644:	2d01      	cmp	r5, #1
 8005646:	d10e      	bne.n	8005666 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	fa5f f288 	uxtb.w	r2, r8
 800564e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005650:	9700      	str	r7, [sp, #0]
 8005652:	4633      	mov	r3, r6
 8005654:	2200      	movs	r2, #0
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff ff74 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 800565e:	b9a8      	cbnz	r0, 800568c <I2C_RequestMemoryRead+0x70>
}
 8005660:	b002      	add	sp, #8
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	463a      	mov	r2, r7
 8005670:	4631      	mov	r1, r6
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff ff3c 	bl	80054f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005678:	b930      	cbnz	r0, 8005688 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	fa5f f288 	uxtb.w	r2, r8
 8005680:	629a      	str	r2, [r3, #40]	; 0x28
 8005682:	e7e5      	b.n	8005650 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005684:	2001      	movs	r0, #1
 8005686:	e7eb      	b.n	8005660 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8005688:	2001      	movs	r0, #1
 800568a:	e7e9      	b.n	8005660 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800568c:	2001      	movs	r0, #1
 800568e:	e7e7      	b.n	8005660 <I2C_RequestMemoryRead+0x44>
 8005690:	80002000 	.word	0x80002000

08005694 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	4605      	mov	r5, r0
 8005698:	460c      	mov	r4, r1
 800569a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f013 0f20 	tst.w	r3, #32
 80056a4:	d11a      	bne.n	80056dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a6:	4632      	mov	r2, r6
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fe88 	bl	80053c0 <I2C_IsErrorOccurred>
 80056b0:	b9b0      	cbnz	r0, 80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7ff f9d3 	bl	8004a5c <HAL_GetTick>
 80056b6:	1b80      	subs	r0, r0, r6
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d801      	bhi.n	80056c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80056bc:	2c00      	cmp	r4, #0
 80056be:	d1ed      	bne.n	800569c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80056c2:	f043 0320 	orr.w	r3, r3, #32
 80056c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	2320      	movs	r3, #32
 80056ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80056d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80056d8:	2001      	movs	r0, #1
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80056dc:	2000      	movs	r0, #0
 80056de:	e7fc      	b.n	80056da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80056e0:	2001      	movs	r0, #1
 80056e2:	e7fa      	b.n	80056da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080056e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d057      	beq.n	8005798 <HAL_I2C_Init+0xb4>
{
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d041      	beq.n	8005778 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f4:	2324      	movs	r3, #36	; 0x24
 80056f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	6813      	ldr	r3, [r2, #0]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800570c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	6893      	ldr	r3, [r2, #8]
 8005712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005716:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005718:	68e3      	ldr	r3, [r4, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d031      	beq.n	8005782 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005726:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005728:	68e3      	ldr	r3, [r4, #12]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d02f      	beq.n	800578e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	6851      	ldr	r1, [r2, #4]
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <HAL_I2C_Init+0xb8>)
 8005734:	430b      	orrs	r3, r1
 8005736:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	68d3      	ldr	r3, [r2, #12]
 800573c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005740:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	6962      	ldr	r2, [r4, #20]
 8005746:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005748:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005750:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005752:	69e3      	ldr	r3, [r4, #28]
 8005754:	6a21      	ldr	r1, [r4, #32]
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	430b      	orrs	r3, r1
 800575a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005766:	2000      	movs	r0, #0
 8005768:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576a:	2320      	movs	r3, #32
 800576c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005770:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005776:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005778:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800577c:	f7fc fb78 	bl	8001e70 <HAL_I2C_MspInit>
 8005780:	e7b8      	b.n	80056f4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	6093      	str	r3, [r2, #8]
 800578c:	e7cc      	b.n	8005728 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e7ca      	b.n	800572e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005798:	2001      	movs	r0, #1
}
 800579a:	4770      	bx	lr
 800579c:	02008000 	.word	0x02008000

080057a0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80057a0:	b1a8      	cbz	r0, 80057ce <HAL_I2C_DeInit+0x2e>
{
 80057a2:	b510      	push	{r4, lr}
 80057a4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80057a6:	2324      	movs	r3, #36	; 0x24
 80057a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80057ac:	6802      	ldr	r2, [r0, #0]
 80057ae:	6813      	ldr	r3, [r2, #0]
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80057b6:	f7fc fba7 	bl	8001f08 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ba:	2000      	movs	r0, #0
 80057bc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057be:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80057c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80057cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057ce:	2001      	movs	r0, #1
}
 80057d0:	4770      	bx	lr

080057d2 <HAL_I2C_Mem_Write>:
{
 80057d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d6:	b083      	sub	sp, #12
 80057d8:	460d      	mov	r5, r1
 80057da:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80057de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80057e4:	b2c9      	uxtb	r1, r1
 80057e6:	2920      	cmp	r1, #32
 80057e8:	f040 80bc 	bne.w	8005964 <HAL_I2C_Mem_Write+0x192>
 80057ec:	4604      	mov	r4, r0
 80057ee:	4690      	mov	r8, r2
 80057f0:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80057f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057f4:	f1ba 0f00 	cmp.w	sl, #0
 80057f8:	bf18      	it	ne
 80057fa:	2b00      	cmpne	r3, #0
 80057fc:	d016      	beq.n	800582c <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80057fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005802:	2b01      	cmp	r3, #1
 8005804:	f000 80b2 	beq.w	800596c <HAL_I2C_Mem_Write+0x19a>
 8005808:	f04f 0b01 	mov.w	fp, #1
 800580c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005810:	f7ff f924 	bl	8004a5c <HAL_GetTick>
 8005814:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005816:	9000      	str	r0, [sp, #0]
 8005818:	2319      	movs	r3, #25
 800581a:	465a      	mov	r2, fp
 800581c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff fe90 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 8005826:	b130      	cbz	r0, 8005836 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8005828:	2001      	movs	r0, #1
 800582a:	e09c      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800582c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005830:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005832:	2001      	movs	r0, #1
 8005834:	e097      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005836:	2321      	movs	r3, #33	; 0x21
 8005838:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005842:	2300      	movs	r3, #0
 8005844:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005848:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800584a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800584e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005850:	9601      	str	r6, [sp, #4]
 8005852:	9700      	str	r7, [sp, #0]
 8005854:	464b      	mov	r3, r9
 8005856:	4642      	mov	r2, r8
 8005858:	4629      	mov	r1, r5
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff fea0 	bl	80055a0 <I2C_RequestMemoryWrite>
 8005860:	b970      	cbnz	r0, 8005880 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005862:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d90f      	bls.n	800588a <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800586e:	2300      	movs	r3, #0
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005876:	4629      	mov	r1, r5
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff fd83 	bl	8005384 <I2C_TransferConfig>
 800587e:	e021      	b.n	80058c4 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005886:	4658      	mov	r0, fp
 8005888:	e06d      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800588a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800588c:	b292      	uxth	r2, r2
 800588e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005890:	2300      	movs	r3, #0
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	4629      	mov	r1, r5
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff fd71 	bl	8005384 <I2C_TransferConfig>
 80058a2:	e00f      	b.n	80058c4 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80058a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058a6:	b292      	uxth	r2, r2
 80058a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	4629      	mov	r1, r5
 80058b6:	4620      	mov	r0, r4
 80058b8:	f7ff fd64 	bl	8005384 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80058bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d033      	beq.n	800592c <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c4:	4632      	mov	r2, r6
 80058c6:	4639      	mov	r1, r7
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff fe11 	bl	80054f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d14e      	bne.n	8005970 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058dc:	3301      	adds	r3, #1
 80058de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058f4:	b292      	uxth	r2, r2
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d0e0      	beq.n	80058bc <HAL_I2C_Mem_Write+0xea>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1de      	bne.n	80058bc <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058fe:	9600      	str	r6, [sp, #0]
 8005900:	463b      	mov	r3, r7
 8005902:	2200      	movs	r2, #0
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff fe1d 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 800590c:	bb90      	cbnz	r0, 8005974 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2bff      	cmp	r3, #255	; 0xff
 8005914:	d9c6      	bls.n	80058a4 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005922:	4629      	mov	r1, r5
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff fd2d 	bl	8005384 <I2C_TransferConfig>
 800592a:	e7c7      	b.n	80058bc <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	4632      	mov	r2, r6
 800592e:	4639      	mov	r1, r7
 8005930:	4620      	mov	r0, r4
 8005932:	f7ff feaf 	bl	8005694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005936:	b9f8      	cbnz	r0, 8005978 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	2220      	movs	r2, #32
 800593c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800593e:	6821      	ldr	r1, [r4, #0]
 8005940:	684b      	ldr	r3, [r1, #4]
 8005942:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005946:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800594a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005958:	2300      	movs	r3, #0
 800595a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800595e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005962:	e000      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8005964:	2002      	movs	r0, #2
}
 8005966:	b003      	add	sp, #12
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800596c:	2002      	movs	r0, #2
 800596e:	e7fa      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005970:	2001      	movs	r0, #1
 8005972:	e7f8      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8005974:	2001      	movs	r0, #1
 8005976:	e7f6      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8005978:	2001      	movs	r0, #1
 800597a:	e7f4      	b.n	8005966 <HAL_I2C_Mem_Write+0x194>

0800597c <HAL_I2C_Mem_Read>:
{
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	b083      	sub	sp, #12
 8005982:	460d      	mov	r5, r1
 8005984:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005988:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800598a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800598e:	b2c9      	uxtb	r1, r1
 8005990:	2920      	cmp	r1, #32
 8005992:	f040 80bd 	bne.w	8005b10 <HAL_I2C_Mem_Read+0x194>
 8005996:	4604      	mov	r4, r0
 8005998:	4690      	mov	r8, r2
 800599a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800599c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800599e:	f1ba 0f00 	cmp.w	sl, #0
 80059a2:	bf18      	it	ne
 80059a4:	2b00      	cmpne	r3, #0
 80059a6:	d016      	beq.n	80059d6 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80059a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f000 80b3 	beq.w	8005b18 <HAL_I2C_Mem_Read+0x19c>
 80059b2:	f04f 0b01 	mov.w	fp, #1
 80059b6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80059ba:	f7ff f84f 	bl	8004a5c <HAL_GetTick>
 80059be:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059c0:	9000      	str	r0, [sp, #0]
 80059c2:	2319      	movs	r3, #25
 80059c4:	465a      	mov	r2, fp
 80059c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ca:	4620      	mov	r0, r4
 80059cc:	f7ff fdbb 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 80059d0:	b130      	cbz	r0, 80059e0 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
 80059d4:	e09d      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059da:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80059dc:	2001      	movs	r0, #1
 80059de:	e098      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e0:	2322      	movs	r3, #34	; 0x22
 80059e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e6:	2340      	movs	r3, #64	; 0x40
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80059f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059f8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fa:	9601      	str	r6, [sp, #4]
 80059fc:	9700      	str	r7, [sp, #0]
 80059fe:	464b      	mov	r3, r9
 8005a00:	4642      	mov	r2, r8
 8005a02:	4629      	mov	r1, r5
 8005a04:	4620      	mov	r0, r4
 8005a06:	f7ff fe09 	bl	800561c <I2C_RequestMemoryRead>
 8005a0a:	b970      	cbnz	r0, 8005a2a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2bff      	cmp	r3, #255	; 0xff
 8005a12:	d90f      	bls.n	8005a34 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a18:	4b43      	ldr	r3, [pc, #268]	; (8005b28 <HAL_I2C_Mem_Read+0x1ac>)
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a20:	4629      	mov	r1, r5
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff fcae 	bl	8005384 <I2C_TransferConfig>
 8005a28:	e021      	b.n	8005a6e <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a30:	4658      	mov	r0, fp
 8005a32:	e06e      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005a34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a36:	b292      	uxth	r2, r2
 8005a38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_I2C_Mem_Read+0x1ac>)
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	4629      	mov	r1, r5
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff fc9c 	bl	8005384 <I2C_TransferConfig>
 8005a4c:	e00f      	b.n	8005a6e <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005a4e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a50:	b292      	uxth	r2, r2
 8005a52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7ff fc8f 	bl	8005384 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d034      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a6e:	9600      	str	r6, [sp, #0]
 8005a70:	463b      	mov	r3, r7
 8005a72:	2200      	movs	r2, #0
 8005a74:	2104      	movs	r1, #4
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff fd65 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d14d      	bne.n	8005b1c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a86:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005a8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a90:	3a01      	subs	r2, #1
 8005a92:	b292      	uxth	r2, r2
 8005a94:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005a96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0de      	beq.n	8005a66 <HAL_I2C_Mem_Read+0xea>
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d1dc      	bne.n	8005a66 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aac:	9600      	str	r6, [sp, #0]
 8005aae:	463b      	mov	r3, r7
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7ff fd47 	bl	8005546 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	bb90      	cbnz	r0, 8005b20 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2bff      	cmp	r3, #255	; 0xff
 8005ac0:	d9c5      	bls.n	8005a4e <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac2:	22ff      	movs	r2, #255	; 0xff
 8005ac4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7ff fc57 	bl	8005384 <I2C_TransferConfig>
 8005ad6:	e7c6      	b.n	8005a66 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad8:	4632      	mov	r2, r6
 8005ada:	4639      	mov	r1, r7
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7ff fdd9 	bl	8005694 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae2:	b9f8      	cbnz	r0, 8005b24 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	684b      	ldr	r3, [r1, #4]
 8005aee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005af2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005af6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005b0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005b0e:	e000      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8005b10:	2002      	movs	r0, #2
}
 8005b12:	b003      	add	sp, #12
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005b18:	2002      	movs	r0, #2
 8005b1a:	e7fa      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	e7f8      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8005b20:	2001      	movs	r0, #1
 8005b22:	e7f6      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005b24:	2001      	movs	r0, #1
 8005b26:	e7f4      	b.n	8005b12 <HAL_I2C_Mem_Read+0x196>
 8005b28:	80002400 	.word	0x80002400

08005b2c <HAL_I2C_GetState>:
  return hi2c->State;
 8005b2c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005b30:	4770      	bx	lr

08005b32 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005b32:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005b34:	4770      	bx	lr

08005b36 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d124      	bne.n	8005b8a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d022      	beq.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4e:	2324      	movs	r3, #36	; 0x24
 8005b50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b54:	6802      	ldr	r2, [r0, #0]
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	f023 0301 	bic.w	r3, r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b5e:	6802      	ldr	r2, [r0, #0]
 8005b60:	6813      	ldr	r3, [r2, #0]
 8005b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b66:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	4319      	orrs	r1, r3
 8005b6e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	2300      	movs	r3, #0
 8005b82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b86:	4618      	mov	r0, r3
 8005b88:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b8e:	2002      	movs	r0, #2
  }
}
 8005b90:	4770      	bx	lr

08005b92 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d122      	bne.n	8005be2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d020      	beq.n	8005be6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005baa:	2324      	movs	r3, #36	; 0x24
 8005bac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bba:	6802      	ldr	r2, [r0, #0]
 8005bbc:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bc2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bc6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005bde:	4618      	mov	r0, r3
 8005be0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2002      	movs	r0, #2
 8005be4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005be6:	2002      	movs	r0, #2
  }
}
 8005be8:	4770      	bx	lr
	...

08005bec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bee:	684d      	ldr	r5, [r1, #4]
 8005bf0:	6804      	ldr	r4, [r0, #0]
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8005bf8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bfa:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8005bfe:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c02:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005c06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c0a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c0e:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c10:	6804      	ldr	r4, [r0, #0]
 8005c12:	68e6      	ldr	r6, [r4, #12]
 8005c14:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c18:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c1a:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c1c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c20:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c28:	68cd      	ldr	r5, [r1, #12]
 8005c2a:	6804      	ldr	r4, [r0, #0]
 8005c2c:	68e3      	ldr	r3, [r4, #12]
 8005c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c32:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c34:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8005c38:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8005c3c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c40:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c44:	688b      	ldr	r3, [r1, #8]
 8005c46:	6804      	ldr	r4, [r0, #0]
 8005c48:	68e6      	ldr	r6, [r4, #12]
 8005c4a:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8005c4e:	4473      	add	r3, lr
 8005c50:	3301      	adds	r3, #1
 8005c52:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005c5a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c5e:	6803      	ldr	r3, [r0, #0]
 8005c60:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c64:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8005c68:	f024 0407 	bic.w	r4, r4, #7
 8005c6c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c70:	6803      	ldr	r3, [r0, #0]
 8005c72:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c76:	690c      	ldr	r4, [r1, #16]
 8005c78:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c7c:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c80:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c84:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c86:	6804      	ldr	r4, [r0, #0]
 8005c88:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c8c:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8005c90:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005c94:	2400      	movs	r4, #0
 8005c96:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c9a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8005c9e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005ca2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005ca6:	6806      	ldr	r6, [r0, #0]
 8005ca8:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8005cac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005cb0:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8005cb4:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005cb8:	6803      	ldr	r3, [r0, #0]
 8005cba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cbe:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8005cc2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005cc6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cd0:	694d      	ldr	r5, [r1, #20]
 8005cd2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cdc:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8005ce0:	4d2e      	ldr	r5, [pc, #184]	; (8005d9c <LTDC_SetConfig+0x1b0>)
 8005ce2:	4035      	ands	r5, r6
 8005ce4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ce8:	6a0d      	ldr	r5, [r1, #32]
 8005cea:	6803      	ldr	r3, [r0, #0]
 8005cec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cf0:	69ce      	ldr	r6, [r1, #28]
 8005cf2:	4335      	orrs	r5, r6
 8005cf4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005cf8:	6803      	ldr	r3, [r0, #0]
 8005cfa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cfe:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8005d02:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d06:	6803      	ldr	r3, [r0, #0]
 8005d08:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8005d0c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005d0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	b16b      	cbz	r3, 8005d32 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d039      	beq.n	8005d8e <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	bf18      	it	ne
 8005d1e:	2b04      	cmpne	r3, #4
 8005d20:	d037      	beq.n	8005d92 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d037      	beq.n	8005d96 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d26:	2b07      	cmp	r3, #7
 8005d28:	d001      	beq.n	8005d2e <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005d2a:	2501      	movs	r5, #1
 8005d2c:	e002      	b.n	8005d34 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d2e:	2502      	movs	r5, #2
 8005d30:	e000      	b.n	8005d34 <LTDC_SetConfig+0x148>
    tmp = 4U;
 8005d32:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d34:	6802      	ldr	r2, [r0, #0]
 8005d36:	4462      	add	r2, ip
 8005d38:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005d3c:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8005d40:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d44:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005d46:	fb05 f402 	mul.w	r4, r5, r2
 8005d4a:	684b      	ldr	r3, [r1, #4]
 8005d4c:	680a      	ldr	r2, [r1, #0]
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	fb05 f303 	mul.w	r3, r5, r3
 8005d54:	3307      	adds	r3, #7
 8005d56:	6802      	ldr	r2, [r0, #0]
 8005d58:	4462      	add	r2, ip
 8005d5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d62:	6803      	ldr	r3, [r0, #0]
 8005d64:	4463      	add	r3, ip
 8005d66:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8005d6a:	4a0d      	ldr	r2, [pc, #52]	; (8005da0 <LTDC_SetConfig+0x1b4>)
 8005d6c:	4022      	ands	r2, r4
 8005d6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d72:	6803      	ldr	r3, [r0, #0]
 8005d74:	4463      	add	r3, ip
 8005d76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005d78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d7c:	6803      	ldr	r3, [r0, #0]
 8005d7e:	449c      	add	ip, r3
 8005d80:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8005d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8005d8e:	2503      	movs	r5, #3
 8005d90:	e7d0      	b.n	8005d34 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d92:	2502      	movs	r5, #2
 8005d94:	e7ce      	b.n	8005d34 <LTDC_SetConfig+0x148>
 8005d96:	2502      	movs	r5, #2
 8005d98:	e7cc      	b.n	8005d34 <LTDC_SetConfig+0x148>
 8005d9a:	bf00      	nop
 8005d9c:	fffff8f8 	.word	0xfffff8f8
 8005da0:	fffff800 	.word	0xfffff800

08005da4 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d072      	beq.n	8005e8e <HAL_LTDC_Init+0xea>
{
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d067      	beq.n	8005e84 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005db4:	2302      	movs	r3, #2
 8005db6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	6993      	ldr	r3, [r2, #24]
 8005dbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dc2:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	698a      	ldr	r2, [r1, #24]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	68a0      	ldr	r0, [r4, #8]
 8005dcc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dce:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd2:	6920      	ldr	r0, [r4, #16]
 8005dd4:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	688a      	ldr	r2, [r1, #8]
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_LTDC_Init+0xf0>)
 8005de0:	401a      	ands	r2, r3
 8005de2:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	6882      	ldr	r2, [r0, #8]
 8005de8:	69a1      	ldr	r1, [r4, #24]
 8005dea:	6965      	ldr	r5, [r4, #20]
 8005dec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005df0:	430a      	orrs	r2, r1
 8005df2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	68ca      	ldr	r2, [r1, #12]
 8005df8:	401a      	ands	r2, r3
 8005dfa:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	68c2      	ldr	r2, [r0, #12]
 8005e00:	6a21      	ldr	r1, [r4, #32]
 8005e02:	69e5      	ldr	r5, [r4, #28]
 8005e04:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e0c:	6821      	ldr	r1, [r4, #0]
 8005e0e:	690a      	ldr	r2, [r1, #16]
 8005e10:	401a      	ands	r2, r3
 8005e12:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	6902      	ldr	r2, [r0, #16]
 8005e18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e1c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005e20:	430a      	orrs	r2, r1
 8005e22:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e24:	6821      	ldr	r1, [r4, #0]
 8005e26:	694a      	ldr	r2, [r1, #20]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	694b      	ldr	r3, [r1, #20]
 8005e32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e34:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e3c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e40:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005e44:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e46:	6821      	ldr	r1, [r4, #0]
 8005e48:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e4a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e4e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e50:	6821      	ldr	r1, [r4, #0]
 8005e52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e54:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e58:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005e5c:	4303      	orrs	r3, r0
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005e66:	f043 0306 	orr.w	r3, r3, #6
 8005e6a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	6993      	ldr	r3, [r2, #24]
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e76:	2000      	movs	r0, #0
 8005e78:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8005e84:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005e88:	f7fc f85e 	bl	8001f48 <HAL_LTDC_MspInit>
 8005e8c:	e792      	b.n	8005db4 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8005e8e:	2001      	movs	r0, #1
}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	f000f800 	.word	0xf000f800

08005e98 <HAL_LTDC_ErrorCallback>:
}
 8005e98:	4770      	bx	lr

08005e9a <HAL_LTDC_ReloadEventCallback>:
}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_LTDC_IRQHandler>:
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ea0:	6803      	ldr	r3, [r0, #0]
 8005ea2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ea4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ea6:	f015 0f04 	tst.w	r5, #4
 8005eaa:	d002      	beq.n	8005eb2 <HAL_LTDC_IRQHandler+0x16>
 8005eac:	f016 0f04 	tst.w	r6, #4
 8005eb0:	d112      	bne.n	8005ed8 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005eb2:	f015 0f02 	tst.w	r5, #2
 8005eb6:	d002      	beq.n	8005ebe <HAL_LTDC_IRQHandler+0x22>
 8005eb8:	f016 0f02 	tst.w	r6, #2
 8005ebc:	d121      	bne.n	8005f02 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ebe:	f015 0f01 	tst.w	r5, #1
 8005ec2:	d002      	beq.n	8005eca <HAL_LTDC_IRQHandler+0x2e>
 8005ec4:	f016 0f01 	tst.w	r6, #1
 8005ec8:	d132      	bne.n	8005f30 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005eca:	f015 0f08 	tst.w	r5, #8
 8005ece:	d002      	beq.n	8005ed6 <HAL_LTDC_IRQHandler+0x3a>
 8005ed0:	f016 0f08 	tst.w	r6, #8
 8005ed4:	d13d      	bne.n	8005f52 <HAL_LTDC_IRQHandler+0xb6>
}
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ee0:	6803      	ldr	r3, [r0, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ee6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ef2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005efc:	f7ff ffcc 	bl	8005e98 <HAL_LTDC_ErrorCallback>
 8005f00:	e7d7      	b.n	8005eb2 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f02:	6822      	ldr	r2, [r4, #0]
 8005f04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f06:	f023 0302 	bic.w	r3, r3, #2
 8005f0a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7ff ffb5 	bl	8005e98 <HAL_LTDC_ErrorCallback>
 8005f2e:	e7c6      	b.n	8005ebe <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f40:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f44:	2300      	movs	r3, #0
 8005f46:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f7fb fc14 	bl	8001778 <HAL_LTDC_LineEventCallback>
 8005f50:	e7bb      	b.n	8005eca <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f56:	f023 0308 	bic.w	r3, r3, #8
 8005f5a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff ff93 	bl	8005e9a <HAL_LTDC_ReloadEventCallback>
}
 8005f74:	e7af      	b.n	8005ed6 <HAL_LTDC_IRQHandler+0x3a>

08005f76 <HAL_LTDC_ConfigLayer>:
{
 8005f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005f78:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d02c      	beq.n	8005fda <HAL_LTDC_ConfigLayer+0x64>
 8005f80:	4604      	mov	r4, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	4616      	mov	r6, r2
 8005f86:	2701      	movs	r7, #1
 8005f88:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f92:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005f96:	fb0c 0c02 	mla	ip, ip, r2, r0
 8005f9a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005f9e:	468e      	mov	lr, r1
 8005fa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fb8:	f8de 3000 	ldr.w	r3, [lr]
 8005fbc:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f7ff fe11 	bl	8005bec <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fce:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8005fda:	2002      	movs	r0, #2
 8005fdc:	e7fc      	b.n	8005fd8 <HAL_LTDC_ConfigLayer+0x62>
	...

08005fe0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005fe0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d01a      	beq.n	800601e <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8005fe8:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8005fea:	2201      	movs	r2, #1
 8005fec:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ff6:	6804      	ldr	r4, [r0, #0]
 8005ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <HAL_LTDC_ProgramLineEvent+0x44>)
 8006002:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006004:	6801      	ldr	r1, [r0, #0]
 8006006:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006008:	4313      	orrs	r3, r2
 800600a:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800600c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006010:	2300      	movs	r3, #0
 8006012:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8006016:	4618      	mov	r0, r3
}
 8006018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800601c:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800601e:	2002      	movs	r0, #2
}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	50001000 	.word	0x50001000

08006028 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800602c:	f7fe fd16 	bl	8004a5c <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006030:	2c00      	cmp	r4, #0
 8006032:	d035      	beq.n	80060a0 <HAL_MDMA_Abort+0x78>
 8006034:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8006036:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d006      	beq.n	800604e <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006044:	2300      	movs	r3, #0
 8006046:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800604a:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800604c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	68d3      	ldr	r3, [r2, #12]
 8006052:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006056:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 8006058:	6822      	ldr	r2, [r4, #0]
 800605a:	68d3      	ldr	r3, [r2, #12]
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	f012 0f01 	tst.w	r2, #1
 800606a:	d010      	beq.n	800608e <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800606c:	f7fe fcf6 	bl	8004a5c <HAL_GetTick>
 8006070:	1b43      	subs	r3, r0, r5
 8006072:	2b05      	cmp	r3, #5
 8006074:	d9f5      	bls.n	8006062 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006076:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800607c:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800607e:	2300      	movs	r3, #0
 8006080:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006084:	2303      	movs	r3, #3
 8006086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800608a:	2001      	movs	r0, #1
 800608c:	e7de      	b.n	800604c <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800608e:	221f      	movs	r2, #31
 8006090:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 8006092:	2000      	movs	r0, #0
 8006094:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8006098:	2301      	movs	r3, #1
 800609a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800609e:	e7d5      	b.n	800604c <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7d3      	b.n	800604c <HAL_MDMA_Abort+0x24>

080060a4 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80060a4:	b190      	cbz	r0, 80060cc <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80060a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d003      	beq.n	80060b8 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 80060b4:	2001      	movs	r0, #1
 80060b6:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80060b8:	2304      	movs	r3, #4
 80060ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80060be:	6802      	ldr	r2, [r0, #0]
 80060c0:	68d3      	ldr	r3, [r2, #12]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80060c8:	2000      	movs	r0, #0
 80060ca:	4770      	bx	lr
    return HAL_ERROR;
 80060cc:	2001      	movs	r0, #1
}
 80060ce:	4770      	bx	lr

080060d0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	6813      	ldr	r3, [r2, #0]
 80060d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80060da:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80060dc:	6883      	ldr	r3, [r0, #8]
 80060de:	b933      	cbnz	r3, 80060ee <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80060e0:	6802      	ldr	r2, [r0, #0]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e8:	684c      	ldr	r4, [r1, #4]
 80060ea:	4323      	orrs	r3, r4
 80060ec:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80060ee:	680b      	ldr	r3, [r1, #0]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d04d      	beq.n	8006190 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d055      	beq.n	80061a4 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80060f8:	6803      	ldr	r3, [r0, #0]
 80060fa:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80060fe:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006102:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8006106:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800610a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800610c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800610e:	432c      	orrs	r4, r5
 8006110:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006112:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006114:	b15c      	cbz	r4, 800612e <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006116:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006118:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006120:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006122:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006124:	432c      	orrs	r4, r5
 8006126:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8006128:	432c      	orrs	r4, r5
 800612a:	4323      	orrs	r3, r4
 800612c:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800612e:	f8de 3000 	ldr.w	r3, [lr]
 8006132:	f023 031f 	bic.w	r3, r3, #31
 8006136:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8006138:	4323      	orrs	r3, r4
 800613a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800613e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006140:	b12b      	cbz	r3, 800614e <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006142:	680b      	ldr	r3, [r1, #0]
 8006144:	b91b      	cbnz	r3, 800614e <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006146:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006148:	6804      	ldr	r4, [r0, #0]
 800614a:	3b01      	subs	r3, #1
 800614c:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800614e:	68cb      	ldr	r3, [r1, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d073      	beq.n	800623c <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006154:	69cc      	ldr	r4, [r1, #28]
 8006156:	2c00      	cmp	r4, #0
 8006158:	d048      	beq.n	80061ec <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800615a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800615c:	b365      	cbz	r5, 80061b8 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800615e:	6817      	ldr	r7, [r2, #0]
 8006160:	4e48      	ldr	r6, [pc, #288]	; (8006284 <OSPI_ConfigCmd+0x1b4>)
 8006162:	403e      	ands	r6, r7
 8006164:	694f      	ldr	r7, [r1, #20]
 8006166:	433b      	orrs	r3, r7
 8006168:	690f      	ldr	r7, [r1, #16]
 800616a:	433b      	orrs	r3, r7
 800616c:	431c      	orrs	r4, r3
 800616e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006170:	431c      	orrs	r4, r3
 8006172:	6a0b      	ldr	r3, [r1, #32]
 8006174:	431c      	orrs	r4, r3
 8006176:	432c      	orrs	r4, r5
 8006178:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800617a:	432c      	orrs	r4, r5
 800617c:	4334      	orrs	r4, r6
 800617e:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006180:	688b      	ldr	r3, [r1, #8]
 8006182:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8006186:	6803      	ldr	r3, [r0, #0]
 8006188:	698a      	ldr	r2, [r1, #24]
 800618a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006196:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800619a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800619e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80061a2:	e7b2      	b.n	800610a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 80061a4:	6803      	ldr	r3, [r0, #0]
 80061a6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80061aa:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80061ae:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80061b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80061b6:	e7a8      	b.n	800610a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061b8:	6816      	ldr	r6, [r2, #0]
 80061ba:	4d33      	ldr	r5, [pc, #204]	; (8006288 <OSPI_ConfigCmd+0x1b8>)
 80061bc:	4035      	ands	r5, r6
 80061be:	694e      	ldr	r6, [r1, #20]
 80061c0:	4333      	orrs	r3, r6
 80061c2:	690e      	ldr	r6, [r1, #16]
 80061c4:	4333      	orrs	r3, r6
 80061c6:	431c      	orrs	r4, r3
 80061c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80061ca:	431c      	orrs	r4, r3
 80061cc:	6a0b      	ldr	r3, [r1, #32]
 80061ce:	431c      	orrs	r4, r3
 80061d0:	432c      	orrs	r4, r5
 80061d2:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d1d1      	bne.n	8006180 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80061dc:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d1ce      	bne.n	8006180 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	e7c9      	b.n	8006180 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061ec:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80061ee:	b184      	cbz	r4, 8006212 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80061f0:	6815      	ldr	r5, [r2, #0]
 80061f2:	4826      	ldr	r0, [pc, #152]	; (800628c <OSPI_ConfigCmd+0x1bc>)
 80061f4:	4028      	ands	r0, r5
 80061f6:	694d      	ldr	r5, [r1, #20]
 80061f8:	432b      	orrs	r3, r5
 80061fa:	690d      	ldr	r5, [r1, #16]
 80061fc:	432b      	orrs	r3, r5
 80061fe:	431c      	orrs	r4, r3
 8006200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006202:	431c      	orrs	r4, r3
 8006204:	4304      	orrs	r4, r0
 8006206:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 8006208:	688b      	ldr	r3, [r1, #8]
 800620a:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2000      	movs	r0, #0
 8006210:	e7bd      	b.n	800618e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006212:	6814      	ldr	r4, [r2, #0]
 8006214:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006218:	694d      	ldr	r5, [r1, #20]
 800621a:	432b      	orrs	r3, r5
 800621c:	690d      	ldr	r5, [r1, #16]
 800621e:	432b      	orrs	r3, r5
 8006220:	4323      	orrs	r3, r4
 8006222:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006224:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622a:	d1ed      	bne.n	8006208 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800622c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800622e:	2b08      	cmp	r3, #8
 8006230:	d1ea      	bne.n	8006208 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006232:	6813      	ldr	r3, [r2, #0]
 8006234:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e7e5      	b.n	8006208 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800623c:	69cb      	ldr	r3, [r1, #28]
 800623e:	b1e3      	cbz	r3, 800627a <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006240:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8006242:	b184      	cbz	r4, 8006266 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006244:	6816      	ldr	r6, [r2, #0]
 8006246:	4d12      	ldr	r5, [pc, #72]	; (8006290 <OSPI_ConfigCmd+0x1c0>)
 8006248:	4035      	ands	r5, r6
 800624a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800624c:	4333      	orrs	r3, r6
 800624e:	6a0e      	ldr	r6, [r1, #32]
 8006250:	4333      	orrs	r3, r6
 8006252:	4323      	orrs	r3, r4
 8006254:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8006256:	4323      	orrs	r3, r4
 8006258:	432b      	orrs	r3, r5
 800625a:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800625c:	6803      	ldr	r3, [r0, #0]
 800625e:	698a      	ldr	r2, [r1, #24]
 8006260:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2000      	movs	r0, #0
 8006264:	e793      	b.n	800618e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8006266:	6814      	ldr	r4, [r2, #0]
 8006268:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800626c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800626e:	432b      	orrs	r3, r5
 8006270:	6a0d      	ldr	r5, [r1, #32]
 8006272:	432b      	orrs	r3, r5
 8006274:	4323      	orrs	r3, r4
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	e7f0      	b.n	800625c <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800627a:	2308      	movs	r3, #8
 800627c:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800627e:	2001      	movs	r0, #1
 8006280:	e785      	b.n	800618e <OSPI_ConfigCmd+0xbe>
 8006282:	bf00      	nop
 8006284:	f0ffc0c0 	.word	0xf0ffc0c0
 8006288:	ffffc0c0 	.word	0xffffc0c0
 800628c:	f0ffffc0 	.word	0xf0ffffc0
 8006290:	f0ffc0ff 	.word	0xf0ffc0ff

08006294 <OSPI_WaitFlagStateUntilTimeout>:
{
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	4605      	mov	r5, r0
 800629a:	460f      	mov	r7, r1
 800629c:	4616      	mov	r6, r2
 800629e:	4699      	mov	r9, r3
 80062a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80062a4:	682c      	ldr	r4, [r5, #0]
 80062a6:	6a24      	ldr	r4, [r4, #32]
 80062a8:	423c      	tst	r4, r7
 80062aa:	bf14      	ite	ne
 80062ac:	f04f 0c01 	movne.w	ip, #1
 80062b0:	f04f 0c00 	moveq.w	ip, #0
 80062b4:	45b4      	cmp	ip, r6
 80062b6:	d014      	beq.n	80062e2 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062bc:	d0f2      	beq.n	80062a4 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fe fbcd 	bl	8004a5c <HAL_GetTick>
 80062c2:	eba0 0009 	sub.w	r0, r0, r9
 80062c6:	4540      	cmp	r0, r8
 80062c8:	d802      	bhi.n	80062d0 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 80062ca:	f1b8 0f00 	cmp.w	r8, #0
 80062ce:	d1e9      	bne.n	80062a4 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80062d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d4:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80062d6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 80062de:	2001      	movs	r0, #1
 80062e0:	e000      	b.n	80062e4 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 80062e2:	2000      	movs	r0, #0
}
 80062e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062e8 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 80062e8:	b180      	cbz	r0, 800630c <HAL_OSPI_DeInit+0x24>
{
 80062ea:	b510      	push	{r4, lr}
 80062ec:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 80062ee:	6802      	ldr	r2, [r0, #0]
 80062f0:	6813      	ldr	r3, [r2, #0]
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80062f8:	6802      	ldr	r2, [r0, #0]
 80062fa:	6893      	ldr	r3, [r2, #8]
 80062fc:	f023 0302 	bic.w	r3, r3, #2
 8006300:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 8006302:	f7fb feff 	bl	8002104 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8006306:	2000      	movs	r0, #0
 8006308:	6520      	str	r0, [r4, #80]	; 0x50
}
 800630a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800630c:	2001      	movs	r0, #1
}
 800630e:	4770      	bx	lr

08006310 <HAL_OSPI_Command>:
{
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	4604      	mov	r4, r0
 8006318:	4688      	mov	r8, r1
 800631a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800631c:	f7fe fb9e 	bl	8004a5c <HAL_GetTick>
 8006320:	4606      	mov	r6, r0
  state = hospi->State;
 8006322:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006324:	2d02      	cmp	r5, #2
 8006326:	d009      	beq.n	800633c <HAL_OSPI_Command+0x2c>
 8006328:	2d14      	cmp	r5, #20
 800632a:	d024      	beq.n	8006376 <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800632c:	2d24      	cmp	r5, #36	; 0x24
 800632e:	d028      	beq.n	8006382 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006330:	2310      	movs	r3, #16
 8006332:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006334:	2001      	movs	r0, #1
}
 8006336:	b002      	add	sp, #8
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800633c:	68e3      	ldr	r3, [r4, #12]
 800633e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006342:	d0f1      	beq.n	8006328 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006344:	9700      	str	r7, [sp, #0]
 8006346:	4633      	mov	r3, r6
 8006348:	2200      	movs	r2, #0
 800634a:	2120      	movs	r1, #32
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff ffa1 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006352:	2800      	cmp	r0, #0
 8006354:	d1ef      	bne.n	8006336 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006356:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8006358:	4641      	mov	r1, r8
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff feb8 	bl	80060d0 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006360:	2800      	cmp	r0, #0
 8006362:	d1e8      	bne.n	8006336 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006364:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8006368:	b193      	cbz	r3, 8006390 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800636a:	f8d8 3000 	ldr.w	r3, [r8]
 800636e:	b9d3      	cbnz	r3, 80063a6 <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006370:	2304      	movs	r3, #4
 8006372:	6523      	str	r3, [r4, #80]	; 0x50
 8006374:	e7df      	b.n	8006336 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006376:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800637a:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800637c:	2b01      	cmp	r3, #1
 800637e:	d8d5      	bhi.n	800632c <HAL_OSPI_Command+0x1c>
 8006380:	e7e0      	b.n	8006344 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8006382:	f8d8 3000 	ldr.w	r3, [r8]
 8006386:	2b03      	cmp	r3, #3
 8006388:	bf18      	it	ne
 800638a:	2b01      	cmpne	r3, #1
 800638c:	d1d0      	bne.n	8006330 <HAL_OSPI_Command+0x20>
 800638e:	e7d9      	b.n	8006344 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006390:	9700      	str	r7, [sp, #0]
 8006392:	4633      	mov	r3, r6
 8006394:	2201      	movs	r2, #1
 8006396:	2102      	movs	r1, #2
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff ff7b 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	2202      	movs	r2, #2
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24
 80063a4:	e7c7      	b.n	8006336 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d007      	beq.n	80063ba <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d1c3      	bne.n	8006336 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80063ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063b0:	2b14      	cmp	r3, #20
 80063b2:	d00b      	beq.n	80063cc <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80063b4:	2324      	movs	r3, #36	; 0x24
 80063b6:	6523      	str	r3, [r4, #80]	; 0x50
 80063b8:	e7bd      	b.n	8006336 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80063ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063bc:	2b24      	cmp	r3, #36	; 0x24
 80063be:	d002      	beq.n	80063c6 <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80063c0:	2314      	movs	r3, #20
 80063c2:	6523      	str	r3, [r4, #80]	; 0x50
 80063c4:	e7b7      	b.n	8006336 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063c6:	2304      	movs	r3, #4
 80063c8:	6523      	str	r3, [r4, #80]	; 0x50
 80063ca:	e7b4      	b.n	8006336 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063cc:	2304      	movs	r3, #4
 80063ce:	6523      	str	r3, [r4, #80]	; 0x50
 80063d0:	e7b1      	b.n	8006336 <HAL_OSPI_Command+0x26>

080063d2 <HAL_OSPI_Transmit>:
{
 80063d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	4604      	mov	r4, r0
 80063da:	4688      	mov	r8, r1
 80063dc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80063de:	f7fe fb3d 	bl	8004a5c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80063e2:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_OSPI_Transmit+0x2e>
 80063ea:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80063ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00a      	beq.n	8006408 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80063f2:	2310      	movs	r3, #16
 80063f4:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	b002      	add	sp, #8
 80063fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006400:	2308      	movs	r3, #8
 8006402:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e7f7      	b.n	80063f8 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640a:	3301      	adds	r3, #1
 800640c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800640e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006410:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8006412:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800641c:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800641e:	9600      	str	r6, [sp, #0]
 8006420:	462b      	mov	r3, r5
 8006422:	2201      	movs	r2, #1
 8006424:	2104      	movs	r1, #4
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff ff34 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800642c:	4603      	mov	r3, r0
 800642e:	b960      	cbnz	r0, 800644a <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006430:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 8006438:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800643a:	3101      	adds	r1, #1
 800643c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800643e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006440:	3901      	subs	r1, #1
 8006442:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8006444:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006446:	2a00      	cmp	r2, #0
 8006448:	d1e9      	bne.n	800641e <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1d4      	bne.n	80063f8 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800644e:	9600      	str	r6, [sp, #0]
 8006450:	462b      	mov	r3, r5
 8006452:	2201      	movs	r2, #1
 8006454:	2102      	movs	r1, #2
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff ff1c 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800645c:	4603      	mov	r3, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d1ca      	bne.n	80063f8 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006462:	6821      	ldr	r1, [r4, #0]
 8006464:	2202      	movs	r2, #2
 8006466:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006468:	6522      	str	r2, [r4, #80]	; 0x50
 800646a:	e7c5      	b.n	80063f8 <HAL_OSPI_Transmit+0x26>

0800646c <HAL_OSPI_Receive>:
{
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	4604      	mov	r4, r0
 8006474:	4688      	mov	r8, r1
 8006476:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8006478:	f7fe faf0 	bl	8004a5c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800647c:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800647e:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006480:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 8006484:	f1b8 0f00 	cmp.w	r8, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_OSPI_Receive+0x34>
 800648a:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800648c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800648e:	2b04      	cmp	r3, #4
 8006490:	d00a      	beq.n	80064a8 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006492:	2310      	movs	r3, #16
 8006494:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
}
 8006498:	4618      	mov	r0, r3
 800649a:	b002      	add	sp, #8
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80064a0:	2308      	movs	r3, #8
 80064a2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e7f7      	b.n	8006498 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80064a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80064aa:	3301      	adds	r3, #1
 80064ac:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80064ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80064b0:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80064b2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80064bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c0:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064c8:	d007      	beq.n	80064da <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80064d0:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 80064d4:	d02a      	beq.n	800652c <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80064d6:	649a      	str	r2, [r3, #72]	; 0x48
 80064d8:	e001      	b.n	80064de <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80064de:	9700      	str	r7, [sp, #0]
 80064e0:	4633      	mov	r3, r6
 80064e2:	2201      	movs	r2, #1
 80064e4:	2106      	movs	r1, #6
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fed4 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80064ec:	4603      	mov	r3, r0
 80064ee:	b960      	cbnz	r0, 800650a <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80064f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064f2:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 80064f6:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 80064f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064fa:	3101      	adds	r1, #1
 80064fc:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 80064fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006500:	3901      	subs	r1, #1
 8006502:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8006504:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006506:	2a00      	cmp	r2, #0
 8006508:	d1e9      	bne.n	80064de <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1c4      	bne.n	8006498 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800650e:	9700      	str	r7, [sp, #0]
 8006510:	4633      	mov	r3, r6
 8006512:	2201      	movs	r2, #1
 8006514:	2102      	movs	r1, #2
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff febc 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800651c:	4603      	mov	r3, r0
 800651e:	2800      	cmp	r0, #0
 8006520:	d1ba      	bne.n	8006498 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006522:	6821      	ldr	r1, [r4, #0]
 8006524:	2202      	movs	r2, #2
 8006526:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006528:	6522      	str	r2, [r4, #80]	; 0x50
 800652a:	e7b5      	b.n	8006498 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800652c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8006530:	e7d5      	b.n	80064de <HAL_OSPI_Receive+0x72>

08006532 <HAL_OSPI_AutoPolling>:
{
 8006532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006536:	b083      	sub	sp, #12
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800653e:	f7fe fa8d 	bl	8004a5c <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006546:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800654a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800654c:	2904      	cmp	r1, #4
 800654e:	d005      	beq.n	800655c <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006550:	2310      	movs	r3, #16
 8006552:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006554:	2001      	movs	r0, #1
}
 8006556:	b003      	add	sp, #12
 8006558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655c:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800655e:	68eb      	ldr	r3, [r5, #12]
 8006560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006564:	d1f4      	bne.n	8006550 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006566:	f8cd 9000 	str.w	r9, [sp]
 800656a:	4603      	mov	r3, r0
 800656c:	2200      	movs	r2, #0
 800656e:	2120      	movs	r1, #32
 8006570:	4620      	mov	r0, r4
 8006572:	f7ff fe8f 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006576:	2800      	cmp	r0, #0
 8006578:	d1ed      	bne.n	8006556 <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	682a      	ldr	r2, [r5, #0]
 800657e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	686a      	ldr	r2, [r5, #4]
 8006586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	692a      	ldr	r2, [r5, #16]
 800658e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006592:	6821      	ldr	r1, [r4, #0]
 8006594:	680b      	ldr	r3, [r1, #0]
 8006596:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800659a:	68aa      	ldr	r2, [r5, #8]
 800659c:	68e8      	ldr	r0, [r5, #12]
 800659e:	4302      	orrs	r2, r0
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a6:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065a8:	68e3      	ldr	r3, [r4, #12]
 80065aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ae:	d007      	beq.n	80065c0 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80065b6:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 80065ba:	d013      	beq.n	80065e4 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80065bc:	649f      	str	r7, [r3, #72]	; 0x48
 80065be:	e001      	b.n	80065c4 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80065c4:	f8cd 9000 	str.w	r9, [sp]
 80065c8:	4643      	mov	r3, r8
 80065ca:	2201      	movs	r2, #1
 80065cc:	2108      	movs	r1, #8
 80065ce:	4620      	mov	r0, r4
 80065d0:	f7ff fe60 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d1be      	bne.n	8006556 <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	2208      	movs	r2, #8
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 80065de:	2302      	movs	r3, #2
 80065e0:	6523      	str	r3, [r4, #80]	; 0x50
 80065e2:	e7b8      	b.n	8006556 <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80065e4:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 80065e8:	e7ec      	b.n	80065c4 <HAL_OSPI_AutoPolling+0x92>
	...

080065ec <HAL_OSPI_MemoryMapped>:
{
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	b083      	sub	sp, #12
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80065f4:	f7fe fa32 	bl	8004a5c <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80065f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d004      	beq.n	8006608 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80065fe:	2310      	movs	r3, #16
 8006600:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006602:	2001      	movs	r0, #1
}
 8006604:	b003      	add	sp, #12
 8006606:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4603      	mov	r3, r0
 800660e:	2200      	movs	r2, #0
 8006610:	2120      	movs	r1, #32
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fe3e 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006618:	2800      	cmp	r0, #0
 800661a:	d1f3      	bne.n	8006604 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800661c:	2388      	movs	r3, #136	; 0x88
 800661e:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d009      	beq.n	800663a <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	6811      	ldr	r1, [r2, #0]
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_OSPI_MemoryMapped+0x68>)
 800662c:	400b      	ands	r3, r1
 800662e:	6829      	ldr	r1, [r5, #0]
 8006630:	430b      	orrs	r3, r1
 8006632:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	e7e4      	b.n	8006604 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	686a      	ldr	r2, [r5, #4]
 800663e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	2210      	movs	r2, #16
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	e7e8      	b.n	8006626 <HAL_OSPI_MemoryMapped+0x3a>
 8006654:	cffffff7 	.word	0xcffffff7

08006658 <HAL_OSPI_ErrorCallback>:
}
 8006658:	4770      	bx	lr

0800665a <HAL_OSPI_AbortCpltCallback>:
}
 800665a:	4770      	bx	lr

0800665c <OSPI_DMAAbortCplt>:
{
 800665c:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800665e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006664:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d116      	bne.n	800669a <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800666c:	6803      	ldr	r3, [r0, #0]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	f012 0f20 	tst.w	r2, #32
 8006674:	d00c      	beq.n	8006690 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006676:	2202      	movs	r2, #2
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800667a:	6802      	ldr	r2, [r0, #0]
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006684:	6802      	ldr	r2, [r0, #0]
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	e008      	b.n	80066a2 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8006690:	2302      	movs	r3, #2
 8006692:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006694:	f7ff ffe1 	bl	800665a <HAL_OSPI_AbortCpltCallback>
 8006698:	e003      	b.n	80066a2 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800669a:	2302      	movs	r3, #2
 800669c:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800669e:	f7ff ffdb 	bl	8006658 <HAL_OSPI_ErrorCallback>
}
 80066a2:	bd08      	pop	{r3, pc}

080066a4 <HAL_OSPI_FifoThresholdCallback>:
}
 80066a4:	4770      	bx	lr

080066a6 <HAL_OSPI_CmdCpltCallback>:
}
 80066a6:	4770      	bx	lr

080066a8 <HAL_OSPI_RxCpltCallback>:
}
 80066a8:	4770      	bx	lr

080066aa <HAL_OSPI_TxCpltCallback>:
}
 80066aa:	4770      	bx	lr

080066ac <HAL_OSPI_StatusMatchCallback>:
}
 80066ac:	4770      	bx	lr

080066ae <HAL_OSPI_TimeOutCallback>:
}
 80066ae:	4770      	bx	lr

080066b0 <HAL_OSPI_IRQHandler>:
{
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80066b4:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 80066b6:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 80066b8:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 80066ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80066bc:	f013 0f04 	tst.w	r3, #4
 80066c0:	d027      	beq.n	8006712 <HAL_OSPI_IRQHandler+0x62>
 80066c2:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 80066c6:	d024      	beq.n	8006712 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80066c8:	2818      	cmp	r0, #24
 80066ca:	d00c      	beq.n	80066e6 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066cc:	2828      	cmp	r0, #40	; 0x28
 80066ce:	d015      	beq.n	80066fc <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 80066d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066d2:	b923      	cbnz	r3, 80066de <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff ffe0 	bl	80066a4 <HAL_OSPI_FifoThresholdCallback>
}
 80066e4:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80066e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 80066ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066f0:	3301      	adds	r3, #1
 80066f2:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 80066f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066f6:	3b01      	subs	r3, #1
 80066f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80066fa:	e7e9      	b.n	80066d0 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80066fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066fe:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006702:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006706:	3301      	adds	r3, #1
 8006708:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800670a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800670c:	3b01      	subs	r3, #1
 800670e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006710:	e7de      	b.n	80066d0 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006712:	f013 0f02 	tst.w	r3, #2
 8006716:	d044      	beq.n	80067a2 <HAL_OSPI_IRQHandler+0xf2>
 8006718:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800671c:	d041      	beq.n	80067a2 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800671e:	2828      	cmp	r0, #40	; 0x28
 8006720:	d014      	beq.n	800674c <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006722:	2102      	movs	r1, #2
 8006724:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	6813      	ldr	r3, [r2, #0]
 800672a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800672e:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006730:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006732:	2818      	cmp	r0, #24
 8006734:	d029      	beq.n	800678a <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8006736:	2808      	cmp	r0, #8
 8006738:	d02b      	beq.n	8006792 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800673a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800673e:	d1d1      	bne.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8006740:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006742:	bb53      	cbnz	r3, 800679a <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8006744:	4620      	mov	r0, r4
 8006746:	f7ff ff88 	bl	800665a <HAL_OSPI_AbortCpltCallback>
 800674a:	e7cb      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800674c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800674e:	b169      	cbz	r1, 800676c <HAL_OSPI_IRQHandler+0xbc>
 8006750:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8006754:	d00a      	beq.n	800676c <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006758:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800675c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800675e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006760:	3301      	adds	r3, #1
 8006762:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006764:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006766:	3b01      	subs	r3, #1
 8006768:	64a3      	str	r3, [r4, #72]	; 0x48
 800676a:	e7bb      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800676c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1b8      	bne.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006772:	2102      	movs	r1, #2
 8006774:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006776:	6822      	ldr	r2, [r4, #0]
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800677e:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8006780:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ff90 	bl	80066a8 <HAL_OSPI_RxCpltCallback>
 8006788:	e7ac      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff8d 	bl	80066aa <HAL_OSPI_TxCpltCallback>
 8006790:	e7a8      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff ff87 	bl	80066a6 <HAL_OSPI_CmdCpltCallback>
 8006798:	e7a4      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff ff5c 	bl	8006658 <HAL_OSPI_ErrorCallback>
 80067a0:	e7a0      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80067a2:	f013 0f08 	tst.w	r3, #8
 80067a6:	d013      	beq.n	80067d0 <HAL_OSPI_IRQHandler+0x120>
 80067a8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80067ac:	d010      	beq.n	80067d0 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80067ae:	2308      	movs	r3, #8
 80067b0:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80067ba:	d005      	beq.n	80067c8 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80067c2:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80067c4:	2302      	movs	r3, #2
 80067c6:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff ff6f 	bl	80066ac <HAL_OSPI_StatusMatchCallback>
 80067ce:	e789      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80067d0:	f013 0f01 	tst.w	r3, #1
 80067d4:	d029      	beq.n	800682a <HAL_OSPI_IRQHandler+0x17a>
 80067d6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80067da:	d026      	beq.n	800682a <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80067dc:	2301      	movs	r3, #1
 80067de:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067e8:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80067ea:	2302      	movs	r3, #2
 80067ec:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f012 0f04 	tst.w	r2, #4
 80067f6:	d012      	beq.n	800681e <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f022 0204 	bic.w	r2, r2, #4
 80067fe:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8006800:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <HAL_OSPI_IRQHandler+0x198>)
 8006804:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8006806:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006808:	f7ff fc4c 	bl	80060a4 <HAL_MDMA_Abort_IT>
 800680c:	2800      	cmp	r0, #0
 800680e:	f43f af69 	beq.w	80066e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8006812:	2302      	movs	r3, #2
 8006814:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff ff1e 	bl	8006658 <HAL_OSPI_ErrorCallback>
 800681c:	e762      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800681e:	2302      	movs	r3, #2
 8006820:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8006822:	4620      	mov	r0, r4
 8006824:	f7ff ff18 	bl	8006658 <HAL_OSPI_ErrorCallback>
 8006828:	e75c      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800682a:	f013 0f10 	tst.w	r3, #16
 800682e:	f43f af59 	beq.w	80066e4 <HAL_OSPI_IRQHandler+0x34>
 8006832:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006836:	f43f af55 	beq.w	80066e4 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800683a:	2310      	movs	r3, #16
 800683c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800683e:	4620      	mov	r0, r4
 8006840:	f7ff ff35 	bl	80066ae <HAL_OSPI_TimeOutCallback>
}
 8006844:	e74e      	b.n	80066e4 <HAL_OSPI_IRQHandler+0x34>
 8006846:	bf00      	nop
 8006848:	0800665d 	.word	0x0800665d

0800684c <HAL_OSPI_Abort>:
{
 800684c:	b530      	push	{r4, r5, lr}
 800684e:	b083      	sub	sp, #12
 8006850:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006852:	f7fe f903 	bl	8004a5c <HAL_GetTick>
  state = hospi->State;
 8006856:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006858:	f012 0f0c 	tst.w	r2, #12
 800685c:	d036      	beq.n	80068cc <HAL_OSPI_Abort+0x80>
 800685e:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	f012 0f04 	tst.w	r2, #4
 8006868:	d108      	bne.n	800687c <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800686a:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	6a1a      	ldr	r2, [r3, #32]
 8006870:	f012 0f20 	tst.w	r2, #32
 8006874:	d10e      	bne.n	8006894 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 8006876:	2302      	movs	r3, #2
 8006878:	6523      	str	r3, [r4, #80]	; 0x50
 800687a:	e02a      	b.n	80068d2 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	f022 0204 	bic.w	r2, r2, #4
 8006882:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006884:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006886:	f7ff fbcf 	bl	8006028 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800688a:	2800      	cmp	r0, #0
 800688c:	d0ee      	beq.n	800686c <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800688e:	2304      	movs	r3, #4
 8006890:	6563      	str	r3, [r4, #84]	; 0x54
 8006892:	e7eb      	b.n	800686c <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	f042 0202 	orr.w	r2, r2, #2
 800689a:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800689c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	462b      	mov	r3, r5
 80068a2:	2201      	movs	r2, #1
 80068a4:	2102      	movs	r1, #2
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fcf4 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80068ac:	b988      	cbnz	r0, 80068d2 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	2202      	movs	r2, #2
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	462b      	mov	r3, r5
 80068ba:	2200      	movs	r2, #0
 80068bc:	2120      	movs	r1, #32
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff fce8 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80068c4:	b928      	cbnz	r0, 80068d2 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 80068c6:	2302      	movs	r3, #2
 80068c8:	6523      	str	r3, [r4, #80]	; 0x50
 80068ca:	e002      	b.n	80068d2 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80068cc:	2310      	movs	r3, #16
 80068ce:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80068d0:	2001      	movs	r0, #1
}
 80068d2:	b003      	add	sp, #12
 80068d4:	bd30      	pop	{r4, r5, pc}

080068d6 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 80068d6:	6581      	str	r1, [r0, #88]	; 0x58
}
 80068d8:	2000      	movs	r0, #0
 80068da:	4770      	bx	lr

080068dc <HAL_OSPI_Init>:
{
 80068dc:	b530      	push	{r4, r5, lr}
 80068de:	b083      	sub	sp, #12
 80068e0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80068e2:	f7fe f8bb 	bl	8004a5c <HAL_GetTick>
  if (hospi == NULL)
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	d077      	beq.n	80069da <HAL_OSPI_Init+0xfe>
 80068ea:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80068f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068f2:	b113      	cbz	r3, 80068fa <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80068f4:	2000      	movs	r0, #0
}
 80068f6:	b003      	add	sp, #12
 80068f8:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7fb fbb8 	bl	8002070 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006900:	f241 3188 	movw	r1, #5000	; 0x1388
 8006904:	4620      	mov	r0, r4
 8006906:	f7ff ffe6 	bl	80068d6 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	6882      	ldr	r2, [r0, #8]
 800690e:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <HAL_OSPI_Init+0x104>)
 8006910:	4013      	ands	r3, r2
 8006912:	68e2      	ldr	r2, [r4, #12]
 8006914:	6921      	ldr	r1, [r4, #16]
 8006916:	3901      	subs	r1, #1
 8006918:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800691c:	6961      	ldr	r1, [r4, #20]
 800691e:	3901      	subs	r1, #1
 8006920:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006926:	430a      	orrs	r2, r1
 8006928:	69e1      	ldr	r1, [r4, #28]
 800692a:	430a      	orrs	r2, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	68d3      	ldr	r3, [r2, #12]
 8006934:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006938:	6a21      	ldr	r1, [r4, #32]
 800693a:	430b      	orrs	r3, r1
 800693c:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800693e:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006948:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800694e:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006950:	6821      	ldr	r1, [r4, #0]
 8006952:	680b      	ldr	r3, [r1, #0]
 8006954:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006958:	6862      	ldr	r2, [r4, #4]
 800695a:	3a01      	subs	r2, #1
 800695c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006960:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462b      	mov	r3, r5
 8006968:	2200      	movs	r2, #0
 800696a:	2120      	movs	r1, #32
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff fc91 	bl	8006294 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006972:	2800      	cmp	r0, #0
 8006974:	d1bf      	bne.n	80068f6 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006976:	6821      	ldr	r1, [r4, #0]
 8006978:	68cb      	ldr	r3, [r1, #12]
 800697a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800697e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006980:	3a01      	subs	r2, #1
 8006982:	4313      	orrs	r3, r2
 8006984:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	6813      	ldr	r3, [r2, #0]
 800698a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698e:	68a1      	ldr	r1, [r4, #8]
 8006990:	430b      	orrs	r3, r1
 8006992:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800699a:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800699e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80069a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80069a2:	432a      	orrs	r2, r5
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80069b4:	69a3      	ldr	r3, [r4, #24]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d006      	beq.n	80069c8 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069c0:	d008      	beq.n	80069d4 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 80069c2:	2302      	movs	r3, #2
 80069c4:	6523      	str	r3, [r4, #80]	; 0x50
 80069c6:	e796      	b.n	80068f6 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80069c8:	6822      	ldr	r2, [r4, #0]
 80069ca:	6893      	ldr	r3, [r2, #8]
 80069cc:	f043 0302 	orr.w	r3, r3, #2
 80069d0:	6093      	str	r3, [r2, #8]
 80069d2:	e7f2      	b.n	80069ba <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80069d4:	2301      	movs	r3, #1
 80069d6:	6523      	str	r3, [r4, #80]	; 0x50
 80069d8:	e78d      	b.n	80068f6 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 80069da:	2001      	movs	r0, #1
 80069dc:	e78b      	b.n	80068f6 <HAL_OSPI_Init+0x1a>
 80069de:	bf00      	nop
 80069e0:	f8e0f8f4 	.word	0xf8e0f8f4

080069e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80069e8:	4b22      	ldr	r3, [pc, #136]	; (8006a74 <HAL_PWREx_ConfigSupply+0x90>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	2b06      	cmp	r3, #6
 80069f2:	d007      	beq.n	8006a04 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069f4:	4b1f      	ldr	r3, [pc, #124]	; (8006a74 <HAL_PWREx_ConfigSupply+0x90>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fc:	4283      	cmp	r3, r0
 80069fe:	d036      	beq.n	8006a6e <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a04:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <HAL_PWREx_ConfigSupply+0x90>)
 8006a06:	68d3      	ldr	r3, [r2, #12]
 8006a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a0c:	4303      	orrs	r3, r0
 8006a0e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8006a10:	f7fe f824 	bl	8004a5c <HAL_GetTick>
 8006a14:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a16:	4b17      	ldr	r3, [pc, #92]	; (8006a74 <HAL_PWREx_ConfigSupply+0x90>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006a1e:	d107      	bne.n	8006a30 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a20:	f7fe f81c 	bl	8004a5c <HAL_GetTick>
 8006a24:	1b43      	subs	r3, r0, r5
 8006a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2a:	d9f4      	bls.n	8006a16 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	e7e8      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006a30:	2c2e      	cmp	r4, #46	; 0x2e
 8006a32:	bf18      	it	ne
 8006a34:	2c1e      	cmpne	r4, #30
 8006a36:	d008      	beq.n	8006a4a <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8006a38:	2c2d      	cmp	r4, #45	; 0x2d
 8006a3a:	bf14      	ite	ne
 8006a3c:	2300      	movne	r3, #0
 8006a3e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006a40:	2c1d      	cmp	r4, #29
 8006a42:	d002      	beq.n	8006a4a <HAL_PWREx_ConfigSupply+0x66>
 8006a44:	b90b      	cbnz	r3, 8006a4a <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8006a46:	2000      	movs	r0, #0
 8006a48:	e7db      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8006a4a:	f7fe f807 	bl	8004a5c <HAL_GetTick>
 8006a4e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <HAL_PWREx_ConfigSupply+0x90>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a58:	d107      	bne.n	8006a6a <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a5a:	f7fd ffff 	bl	8004a5c <HAL_GetTick>
 8006a5e:	1b00      	subs	r0, r0, r4
 8006a60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006a64:	d9f4      	bls.n	8006a50 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7cb      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7c9      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e7c7      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x1e>
 8006a72:	bf00      	nop
 8006a74:	58024800 	.word	0x58024800

08006a78 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f000 82f0 	beq.w	800705e <HAL_RCC_OscConfig+0x5e6>
{
 8006a7e:	b538      	push	{r3, r4, r5, lr}
 8006a80:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a82:	6803      	ldr	r3, [r0, #0]
 8006a84:	f013 0f01 	tst.w	r3, #1
 8006a88:	d029      	beq.n	8006ade <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8a:	4aa1      	ldr	r2, [pc, #644]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006a8c:	6913      	ldr	r3, [r2, #16]
 8006a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a92:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d019      	beq.n	8006acc <HAL_RCC_OscConfig+0x54>
 8006a98:	2b18      	cmp	r3, #24
 8006a9a:	d013      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa2:	d043      	beq.n	8006b2c <HAL_RCC_OscConfig+0xb4>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d158      	bne.n	8006b5a <HAL_RCC_OscConfig+0xe2>
 8006aa8:	4b99      	ldr	r3, [pc, #612]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e038      	b.n	8006b36 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ac4:	f002 0203 	and.w	r2, r2, #3
 8006ac8:	2a02      	cmp	r2, #2
 8006aca:	d1e7      	bne.n	8006a9c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006acc:	4b90      	ldr	r3, [pc, #576]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006ad4:	d003      	beq.n	8006ade <HAL_RCC_OscConfig+0x66>
 8006ad6:	6863      	ldr	r3, [r4, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 82c2 	beq.w	8007062 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f013 0f02 	tst.w	r3, #2
 8006ae4:	f000 80a2 	beq.w	8006c2c <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ae8:	4a89      	ldr	r2, [pc, #548]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006aea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006aec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006aee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006af2:	d074      	beq.n	8006bde <HAL_RCC_OscConfig+0x166>
 8006af4:	2b18      	cmp	r3, #24
 8006af6:	d06f      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006af8:	68e3      	ldr	r3, [r4, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80c3 	beq.w	8006c86 <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b00:	4983      	ldr	r1, [pc, #524]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b02:	680a      	ldr	r2, [r1, #0]
 8006b04:	f022 0219 	bic.w	r2, r2, #25
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fd ffa6 	bl	8004a5c <HAL_GetTick>
 8006b10:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b12:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f013 0f04 	tst.w	r3, #4
 8006b1a:	f040 80ab 	bne.w	8006c74 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b1e:	f7fd ff9d 	bl	8004a5c <HAL_GetTick>
 8006b22:	1b40      	subs	r0, r0, r5
 8006b24:	2802      	cmp	r0, #2
 8006b26:	d9f4      	bls.n	8006b12 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8006b28:	2003      	movs	r0, #3
 8006b2a:	e2a1      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	4a78      	ldr	r2, [pc, #480]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d03e      	beq.n	8006bba <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8006b3c:	f7fd ff8e 	bl	8004a5c <HAL_GetTick>
 8006b40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b42:	4b73      	ldr	r3, [pc, #460]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b4a:	d1c8      	bne.n	8006ade <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b4c:	f7fd ff86 	bl	8004a5c <HAL_GetTick>
 8006b50:	1b40      	subs	r0, r0, r5
 8006b52:	2864      	cmp	r0, #100	; 0x64
 8006b54:	d9f5      	bls.n	8006b42 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8006b56:	2003      	movs	r0, #3
 8006b58:	e28a      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b5e:	d010      	beq.n	8006b82 <HAL_RCC_OscConfig+0x10a>
 8006b60:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006b64:	d01b      	beq.n	8006b9e <HAL_RCC_OscConfig+0x126>
 8006b66:	4b6a      	ldr	r3, [pc, #424]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	e7d9      	b.n	8006b36 <HAL_RCC_OscConfig+0xbe>
 8006b82:	4b63      	ldr	r3, [pc, #396]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e7cb      	b.n	8006b36 <HAL_RCC_OscConfig+0xbe>
 8006b9e:	4b5c      	ldr	r3, [pc, #368]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e7bd      	b.n	8006b36 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8006bba:	f7fd ff4f 	bl	8004a5c <HAL_GetTick>
 8006bbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bc0:	4b53      	ldr	r3, [pc, #332]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006bc8:	d089      	beq.n	8006ade <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bca:	f7fd ff47 	bl	8004a5c <HAL_GetTick>
 8006bce:	1b40      	subs	r0, r0, r5
 8006bd0:	2864      	cmp	r0, #100	; 0x64
 8006bd2:	d9f5      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8006bd4:	2003      	movs	r0, #3
 8006bd6:	e24b      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bd8:	f012 0f03 	tst.w	r2, #3
 8006bdc:	d18c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bde:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f013 0f04 	tst.w	r3, #4
 8006be6:	d003      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x178>
 8006be8:	68e3      	ldr	r3, [r4, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 823b 	beq.w	8007066 <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bf0:	4a47      	ldr	r2, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	f023 0319 	bic.w	r3, r3, #25
 8006bf8:	68e1      	ldr	r1, [r4, #12]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006bfe:	f7fd ff2d 	bl	8004a5c <HAL_GetTick>
 8006c02:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c04:	4b42      	ldr	r3, [pc, #264]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f013 0f04 	tst.w	r3, #4
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fd ff25 	bl	8004a5c <HAL_GetTick>
 8006c12:	1b40      	subs	r0, r0, r5
 8006c14:	2802      	cmp	r0, #2
 8006c16:	d9f5      	bls.n	8006c04 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8006c18:	2003      	movs	r0, #3
 8006c1a:	e229      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1c:	4a3c      	ldr	r2, [pc, #240]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c1e:	6853      	ldr	r3, [r2, #4]
 8006c20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c2a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	f013 0f10 	tst.w	r3, #16
 8006c32:	d051      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c34:	4a36      	ldr	r2, [pc, #216]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c36:	6913      	ldr	r3, [r2, #16]
 8006c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d039      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x23e>
 8006c42:	2b18      	cmp	r3, #24
 8006c44:	d033      	beq.n	8006cae <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c46:	69e3      	ldr	r3, [r4, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d06c      	beq.n	8006d26 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c4c:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c56:	f7fd ff01 	bl	8004a5c <HAL_GetTick>
 8006c5a:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c5c:	4b2c      	ldr	r3, [pc, #176]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c64:	d156      	bne.n	8006d14 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c66:	f7fd fef9 	bl	8004a5c <HAL_GetTick>
 8006c6a:	1b40      	subs	r0, r0, r5
 8006c6c:	2802      	cmp	r0, #2
 8006c6e:	d9f5      	bls.n	8006c5c <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 8006c70:	2003      	movs	r0, #3
 8006c72:	e1fd      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c76:	6853      	ldr	r3, [r2, #4]
 8006c78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c7c:	6921      	ldr	r1, [r4, #16]
 8006c7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c82:	6053      	str	r3, [r2, #4]
 8006c84:	e7d2      	b.n	8006c2c <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8006c86:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c88:	6813      	ldr	r3, [r2, #0]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c90:	f7fd fee4 	bl	8004a5c <HAL_GetTick>
 8006c94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c96:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f013 0f04 	tst.w	r3, #4
 8006c9e:	d0c5      	beq.n	8006c2c <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca0:	f7fd fedc 	bl	8004a5c <HAL_GetTick>
 8006ca4:	1b40      	subs	r0, r0, r5
 8006ca6:	2802      	cmp	r0, #2
 8006ca8:	d9f5      	bls.n	8006c96 <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8006caa:	2003      	movs	r0, #3
 8006cac:	e1e0      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cae:	f002 0203 	and.w	r2, r2, #3
 8006cb2:	2a01      	cmp	r2, #1
 8006cb4:	d1c7      	bne.n	8006c46 <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x250>
 8006cc0:	69e3      	ldr	r3, [r4, #28]
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	f040 81d1 	bne.w	800706a <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cc8:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006cca:	68d3      	ldr	r3, [r2, #12]
 8006ccc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cd6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f013 0f08 	tst.w	r3, #8
 8006cde:	d04a      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ce0:	6963      	ldr	r3, [r4, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d033      	beq.n	8006d4e <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce6:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006ce8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fd feb4 	bl	8004a5c <HAL_GetTick>
 8006cf4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_RCC_OscConfig+0x298>)
 8006cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfa:	f013 0f02 	tst.w	r3, #2
 8006cfe:	d13a      	bne.n	8006d76 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d00:	f7fd feac 	bl	8004a5c <HAL_GetTick>
 8006d04:	1b40      	subs	r0, r0, r5
 8006d06:	2802      	cmp	r0, #2
 8006d08:	d9f5      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8006d0a:	2003      	movs	r0, #3
 8006d0c:	e1b0      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d14:	4a8c      	ldr	r2, [pc, #560]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d16:	68d3      	ldr	r3, [r2, #12]
 8006d18:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d1c:	6a21      	ldr	r1, [r4, #32]
 8006d1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d22:	60d3      	str	r3, [r2, #12]
 8006d24:	e7d8      	b.n	8006cd8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8006d26:	4a88      	ldr	r2, [pc, #544]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d30:	f7fd fe94 	bl	8004a5c <HAL_GetTick>
 8006d34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d36:	4b84      	ldr	r3, [pc, #528]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d3e:	d0cb      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d40:	f7fd fe8c 	bl	8004a5c <HAL_GetTick>
 8006d44:	1b40      	subs	r0, r0, r5
 8006d46:	2802      	cmp	r0, #2
 8006d48:	d9f5      	bls.n	8006d36 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8006d4a:	2003      	movs	r0, #3
 8006d4c:	e190      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d4e:	4a7e      	ldr	r2, [pc, #504]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d50:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d58:	f7fd fe80 	bl	8004a5c <HAL_GetTick>
 8006d5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d5e:	4b7a      	ldr	r3, [pc, #488]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d62:	f013 0f02 	tst.w	r3, #2
 8006d66:	d006      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d68:	f7fd fe78 	bl	8004a5c <HAL_GetTick>
 8006d6c:	1b40      	subs	r0, r0, r5
 8006d6e:	2802      	cmp	r0, #2
 8006d70:	d9f5      	bls.n	8006d5e <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 8006d72:	2003      	movs	r0, #3
 8006d74:	e17c      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f013 0f20 	tst.w	r3, #32
 8006d7c:	d029      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d7e:	69a3      	ldr	r3, [r4, #24]
 8006d80:	b19b      	cbz	r3, 8006daa <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d82:	4a71      	ldr	r2, [pc, #452]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d84:	6813      	ldr	r3, [r2, #0]
 8006d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d8c:	f7fd fe66 	bl	8004a5c <HAL_GetTick>
 8006d90:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d92:	4b6d      	ldr	r3, [pc, #436]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006d9a:	d11a      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d9c:	f7fd fe5e 	bl	8004a5c <HAL_GetTick>
 8006da0:	1b40      	subs	r0, r0, r5
 8006da2:	2802      	cmp	r0, #2
 8006da4:	d9f5      	bls.n	8006d92 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 8006da6:	2003      	movs	r0, #3
 8006da8:	e162      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006daa:	4a67      	ldr	r2, [pc, #412]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006dac:	6813      	ldr	r3, [r2, #0]
 8006dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db4:	f7fd fe52 	bl	8004a5c <HAL_GetTick>
 8006db8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dba:	4b63      	ldr	r3, [pc, #396]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006dc2:	d006      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dc4:	f7fd fe4a 	bl	8004a5c <HAL_GetTick>
 8006dc8:	1b40      	subs	r0, r0, r5
 8006dca:	2802      	cmp	r0, #2
 8006dcc:	d9f5      	bls.n	8006dba <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 8006dce:	2003      	movs	r0, #3
 8006dd0:	e14e      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f013 0f04 	tst.w	r3, #4
 8006dd8:	d122      	bne.n	8006e20 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8146 	beq.w	800706e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006de2:	4a59      	ldr	r2, [pc, #356]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006de4:	6912      	ldr	r2, [r2, #16]
 8006de6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006dea:	2a18      	cmp	r2, #24
 8006dec:	f000 810e 	beq.w	800700c <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f000 8094 	beq.w	8006f1e <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df6:	4a54      	ldr	r2, [pc, #336]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006df8:	6813      	ldr	r3, [r2, #0]
 8006dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fd fe2c 	bl	8004a5c <HAL_GetTick>
 8006e04:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e06:	4b50      	ldr	r3, [pc, #320]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e0e:	f000 80fb 	beq.w	8007008 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fd fe23 	bl	8004a5c <HAL_GetTick>
 8006e16:	1b00      	subs	r0, r0, r4
 8006e18:	2802      	cmp	r0, #2
 8006e1a:	d9f4      	bls.n	8006e06 <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 8006e1c:	2003      	movs	r0, #3
 8006e1e:	e127      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 8006e20:	4a4a      	ldr	r2, [pc, #296]	; (8006f4c <HAL_RCC_OscConfig+0x4d4>)
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e28:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e2a:	f7fd fe17 	bl	8004a5c <HAL_GetTick>
 8006e2e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e30:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <HAL_RCC_OscConfig+0x4d4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e38:	d106      	bne.n	8006e48 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e3a:	f7fd fe0f 	bl	8004a5c <HAL_GetTick>
 8006e3e:	1b40      	subs	r0, r0, r5
 8006e40:	2864      	cmp	r0, #100	; 0x64
 8006e42:	d9f5      	bls.n	8006e30 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 8006e44:	2003      	movs	r0, #3
 8006e46:	e113      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d00e      	beq.n	8006e6c <HAL_RCC_OscConfig+0x3f4>
 8006e4e:	bb33      	cbnz	r3, 8006e9e <HAL_RCC_OscConfig+0x426>
 8006e50:	4b3d      	ldr	r3, [pc, #244]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e54:	f022 0201 	bic.w	r2, r2, #1
 8006e58:	671a      	str	r2, [r3, #112]	; 0x70
 8006e5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e60:	671a      	str	r2, [r3, #112]	; 0x70
 8006e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e64:	f022 0204 	bic.w	r2, r2, #4
 8006e68:	671a      	str	r2, [r3, #112]	; 0x70
 8006e6a:	e004      	b.n	8006e76 <HAL_RCC_OscConfig+0x3fe>
 8006e6c:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006e6e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03e      	beq.n	8006efa <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 8006e7c:	f7fd fdee 	bl	8004a5c <HAL_GetTick>
 8006e80:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	f013 0f02 	tst.w	r3, #2
 8006e8a:	d1a6      	bne.n	8006dda <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e8c:	f7fd fde6 	bl	8004a5c <HAL_GetTick>
 8006e90:	1b40      	subs	r0, r0, r5
 8006e92:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e96:	4298      	cmp	r0, r3
 8006e98:	d9f3      	bls.n	8006e82 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	e0e8      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d00f      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x44a>
 8006ea2:	2b85      	cmp	r3, #133	; 0x85
 8006ea4:	d01b      	beq.n	8006ede <HAL_RCC_OscConfig+0x466>
 8006ea6:	4b28      	ldr	r3, [pc, #160]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	671a      	str	r2, [r3, #112]	; 0x70
 8006eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eb2:	f022 0204 	bic.w	r2, r2, #4
 8006eb6:	671a      	str	r2, [r3, #112]	; 0x70
 8006eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ebe:	671a      	str	r2, [r3, #112]	; 0x70
 8006ec0:	e7d9      	b.n	8006e76 <HAL_RCC_OscConfig+0x3fe>
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ec6:	f042 0204 	orr.w	r2, r2, #4
 8006eca:	671a      	str	r2, [r3, #112]	; 0x70
 8006ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed2:	671a      	str	r2, [r3, #112]	; 0x70
 8006ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	671a      	str	r2, [r3, #112]	; 0x70
 8006edc:	e7cb      	b.n	8006e76 <HAL_RCC_OscConfig+0x3fe>
 8006ede:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ee2:	f042 0204 	orr.w	r2, r2, #4
 8006ee6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006eee:	671a      	str	r2, [r3, #112]	; 0x70
 8006ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ef8:	e7bd      	b.n	8006e76 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8006efa:	f7fd fdaf 	bl	8004a5c <HAL_GetTick>
 8006efe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f00:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f04:	f013 0f02 	tst.w	r3, #2
 8006f08:	f43f af67 	beq.w	8006dda <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f0c:	f7fd fda6 	bl	8004a5c <HAL_GetTick>
 8006f10:	1b40      	subs	r0, r0, r5
 8006f12:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f16:	4298      	cmp	r0, r3
 8006f18:	d9f2      	bls.n	8006f00 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8006f1a:	2003      	movs	r0, #3
 8006f1c:	e0a8      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f28:	f7fd fd98 	bl	8004a5c <HAL_GetTick>
 8006f2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_RCC_OscConfig+0x4d0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006f36:	d00b      	beq.n	8006f50 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f38:	f7fd fd90 	bl	8004a5c <HAL_GetTick>
 8006f3c:	1b40      	subs	r0, r0, r5
 8006f3e:	2802      	cmp	r0, #2
 8006f40:	d9f5      	bls.n	8006f2e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8006f42:	2003      	movs	r0, #3
 8006f44:	e094      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f50:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <HAL_RCC_OscConfig+0x618>)
 8006f52:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006f54:	4a4f      	ldr	r2, [pc, #316]	; (8007094 <HAL_RCC_OscConfig+0x61c>)
 8006f56:	400a      	ands	r2, r1
 8006f58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f5c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006f60:	430a      	orrs	r2, r1
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
 8006f64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f66:	3a01      	subs	r2, #1
 8006f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6e:	3901      	subs	r1, #1
 8006f70:	0249      	lsls	r1, r1, #9
 8006f72:	b289      	uxth	r1, r1
 8006f74:	430a      	orrs	r2, r1
 8006f76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f78:	3901      	subs	r1, #1
 8006f7a:	0409      	lsls	r1, r1, #16
 8006f7c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006f80:	430a      	orrs	r2, r1
 8006f82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f84:	3901      	subs	r1, #1
 8006f86:	0609      	lsls	r1, r1, #24
 8006f88:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f9a:	4a3f      	ldr	r2, [pc, #252]	; (8007098 <HAL_RCC_OscConfig+0x620>)
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fa0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	f022 020c 	bic.w	r2, r2, #12
 8006fac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	f022 0202 	bic.w	r2, r2, #2
 8006fb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fc4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006fcc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006fd4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006fe4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fe6:	f7fd fd39 	bl	8004a5c <HAL_GetTick>
 8006fea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <HAL_RCC_OscConfig+0x618>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006ff4:	d106      	bne.n	8007004 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff6:	f7fd fd31 	bl	8004a5c <HAL_GetTick>
 8006ffa:	1b00      	subs	r0, r0, r4
 8006ffc:	2802      	cmp	r0, #2
 8006ffe:	d9f5      	bls.n	8006fec <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8007000:	2003      	movs	r0, #3
 8007002:	e035      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007004:	2000      	movs	r0, #0
 8007006:	e033      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8007008:	2000      	movs	r0, #0
 800700a:	e031      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800700c:	4920      	ldr	r1, [pc, #128]	; (8007090 <HAL_RCC_OscConfig+0x618>)
 800700e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007010:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007012:	2b01      	cmp	r3, #1
 8007014:	d02d      	beq.n	8007072 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007016:	f002 0303 	and.w	r3, r2, #3
 800701a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800701c:	428b      	cmp	r3, r1
 800701e:	d12a      	bne.n	8007076 <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007020:	f3c2 1205 	ubfx	r2, r2, #4, #6
 8007024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007026:	429a      	cmp	r2, r3
 8007028:	d127      	bne.n	800707a <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800702a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800702e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007030:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d123      	bne.n	800707e <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007036:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800703a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800703c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d11f      	bne.n	8007082 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007042:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8007046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007048:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704a:	429a      	cmp	r2, r3
 800704c:	d11b      	bne.n	8007086 <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800704e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007054:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007056:	4298      	cmp	r0, r3
 8007058:	d117      	bne.n	800708a <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800705a:	2000      	movs	r0, #0
 800705c:	e008      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800705e:	2001      	movs	r0, #1
}
 8007060:	4770      	bx	lr
        return HAL_ERROR;
 8007062:	2001      	movs	r0, #1
 8007064:	e004      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 8007066:	2001      	movs	r0, #1
 8007068:	e002      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800706a:	2001      	movs	r0, #1
 800706c:	e000      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800706e:	2000      	movs	r0, #0
}
 8007070:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8007072:	2001      	movs	r0, #1
 8007074:	e7fc      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8007076:	2001      	movs	r0, #1
 8007078:	e7fa      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 800707a:	2001      	movs	r0, #1
 800707c:	e7f8      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 800707e:	2001      	movs	r0, #1
 8007080:	e7f6      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8007082:	2001      	movs	r0, #1
 8007084:	e7f4      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 8007086:	2001      	movs	r0, #1
 8007088:	e7f2      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 800708a:	2001      	movs	r0, #1
 800708c:	e7f0      	b.n	8007070 <HAL_RCC_OscConfig+0x5f8>
 800708e:	bf00      	nop
 8007090:	58024400 	.word	0x58024400
 8007094:	fffffc0c 	.word	0xfffffc0c
 8007098:	ffff0007 	.word	0xffff0007

0800709c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800709c:	4b74      	ldr	r3, [pc, #464]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	f000 80de 	beq.w	8007266 <HAL_RCC_GetSysClockFreq+0x1ca>
 80070aa:	2b18      	cmp	r3, #24
 80070ac:	d010      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0x34>
 80070ae:	b10b      	cbz	r3, 80070b4 <HAL_RCC_GetSysClockFreq+0x18>
 80070b0:	4870      	ldr	r0, [pc, #448]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80070b2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b4:	4b6e      	ldr	r3, [pc, #440]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f013 0f20 	tst.w	r3, #32
 80070bc:	f000 80d5 	beq.w	800726a <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070c0:	4b6b      	ldr	r3, [pc, #428]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80070c8:	4b6b      	ldr	r3, [pc, #428]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80070ca:	fa23 f000 	lsr.w	r0, r3, r0
 80070ce:	4770      	bx	lr
{
 80070d0:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d2:	4a67      	ldr	r2, [pc, #412]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070d6:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070da:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80070dc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80070e2:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80070e8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80070ec:	fb0c f303 	mul.w	r3, ip, r3
 80070f0:	ee07 3a90 	vmov	s15, r3
 80070f4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80070f8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80070fc:	f000 8093 	beq.w	8007226 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8007100:	2901      	cmp	r1, #1
 8007102:	d065      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x134>
 8007104:	2902      	cmp	r1, #2
 8007106:	f000 8091 	beq.w	800722c <HAL_RCC_GetSysClockFreq+0x190>
 800710a:	b1e1      	cbz	r1, 8007146 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800710c:	ee07 0a10 	vmov	s14, r0
 8007110:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007114:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800727c <HAL_RCC_GetSysClockFreq+0x1e0>
 8007118:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800711c:	4b54      	ldr	r3, [pc, #336]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	ee06 3a90 	vmov	s13, r3
 8007128:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800712c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007130:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007140:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007144:	e060      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	f013 0f20 	tst.w	r3, #32
 800714c:	d023      	beq.n	8007196 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800714e:	4611      	mov	r1, r2
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007156:	4b48      	ldr	r3, [pc, #288]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007158:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800715a:	ee07 3a10 	vmov	s14, r3
 800715e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007162:	ee07 0a10 	vmov	s14, r0
 8007166:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800716a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800716e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	ee06 3a90 	vmov	s13, r3
 8007178:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800717c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007180:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007194:	e038      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007196:	ee07 0a10 	vmov	s14, r0
 800719a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800719e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e8>
 80071a2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071a6:	4b32      	ldr	r3, [pc, #200]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee06 3a90 	vmov	s13, r3
 80071b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071b6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071ce:	e01b      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d0:	ee07 0a10 	vmov	s14, r0
 80071d4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071d8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800727c <HAL_RCC_GetSysClockFreq+0x1e0>
 80071dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071e0:	4b23      	ldr	r3, [pc, #140]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	ee06 3a90 	vmov	s13, r3
 80071ec:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071f0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007204:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007208:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007210:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800721e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007222:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800722a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800722c:	ee07 0a10 	vmov	s14, r0
 8007230:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007234:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007288 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007238:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	ee06 3a90 	vmov	s13, r3
 8007248:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800724c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007250:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007260:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007264:	e7d0      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 8007266:	4809      	ldr	r0, [pc, #36]	; (800728c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007268:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800726a:	4803      	ldr	r0, [pc, #12]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	58024400 	.word	0x58024400
 8007274:	003d0900 	.word	0x003d0900
 8007278:	03d09000 	.word	0x03d09000
 800727c:	4a742400 	.word	0x4a742400
 8007280:	39000000 	.word	0x39000000
 8007284:	4c742400 	.word	0x4c742400
 8007288:	4bb71b00 	.word	0x4bb71b00
 800728c:	016e3600 	.word	0x016e3600

08007290 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007290:	2800      	cmp	r0, #0
 8007292:	f000 8132 	beq.w	80074fa <HAL_RCC_ClockConfig+0x26a>
{
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	460d      	mov	r5, r1
 800729a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800729c:	4b9b      	ldr	r3, [pc, #620]	; (800750c <HAL_RCC_ClockConfig+0x27c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	428b      	cmp	r3, r1
 80072a6:	d20b      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a8:	4a98      	ldr	r2, [pc, #608]	; (800750c <HAL_RCC_ClockConfig+0x27c>)
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	f023 030f 	bic.w	r3, r3, #15
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b4:	6813      	ldr	r3, [r2, #0]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	428b      	cmp	r3, r1
 80072bc:	f040 811f 	bne.w	80074fe <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	f013 0f04 	tst.w	r3, #4
 80072c6:	d00c      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	4b91      	ldr	r3, [pc, #580]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d905      	bls.n	80072e2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072d6:	498e      	ldr	r1, [pc, #568]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80072d8:	698b      	ldr	r3, [r1, #24]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	431a      	orrs	r2, r3
 80072e0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	f013 0f08 	tst.w	r3, #8
 80072e8:	d00c      	beq.n	8007304 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80072ea:	6962      	ldr	r2, [r4, #20]
 80072ec:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d905      	bls.n	8007304 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072f8:	4985      	ldr	r1, [pc, #532]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80072fa:	69cb      	ldr	r3, [r1, #28]
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	431a      	orrs	r2, r3
 8007302:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	f013 0f10 	tst.w	r3, #16
 800730a:	d00c      	beq.n	8007326 <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800730c:	69a2      	ldr	r2, [r4, #24]
 800730e:	4b80      	ldr	r3, [pc, #512]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007316:	429a      	cmp	r2, r3
 8007318:	d905      	bls.n	8007326 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800731a:	497d      	ldr	r1, [pc, #500]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 800731c:	69cb      	ldr	r3, [r1, #28]
 800731e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007322:	431a      	orrs	r2, r3
 8007324:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	f013 0f20 	tst.w	r3, #32
 800732c:	d00c      	beq.n	8007348 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800732e:	69e2      	ldr	r2, [r4, #28]
 8007330:	4b77      	ldr	r3, [pc, #476]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007338:	429a      	cmp	r2, r3
 800733a:	d905      	bls.n	8007348 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800733c:	4974      	ldr	r1, [pc, #464]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 800733e:	6a0b      	ldr	r3, [r1, #32]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	431a      	orrs	r2, r3
 8007346:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f013 0f02 	tst.w	r3, #2
 800734e:	d00c      	beq.n	800736a <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007350:	68e2      	ldr	r2, [r4, #12]
 8007352:	4b6f      	ldr	r3, [pc, #444]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	429a      	cmp	r2, r3
 800735c:	d905      	bls.n	800736a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735e:	496c      	ldr	r1, [pc, #432]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007360:	698b      	ldr	r3, [r1, #24]
 8007362:	f023 030f 	bic.w	r3, r3, #15
 8007366:	431a      	orrs	r2, r3
 8007368:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f013 0f01 	tst.w	r3, #1
 8007370:	d041      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007372:	4a67      	ldr	r2, [pc, #412]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007374:	6993      	ldr	r3, [r2, #24]
 8007376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800737a:	68a1      	ldr	r1, [r4, #8]
 800737c:	430b      	orrs	r3, r1
 800737e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007380:	6863      	ldr	r3, [r4, #4]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d00a      	beq.n	800739c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007386:	2b03      	cmp	r3, #3
 8007388:	d027      	beq.n	80073da <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800738a:	2b01      	cmp	r3, #1
 800738c:	d02c      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800738e:	4a60      	ldr	r2, [pc, #384]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	f012 0f04 	tst.w	r2, #4
 8007396:	d106      	bne.n	80073a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007398:	2001      	movs	r0, #1
 800739a:	e0ad      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80073a2:	f000 80ae 	beq.w	8007502 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073a6:	495a      	ldr	r1, [pc, #360]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80073a8:	690a      	ldr	r2, [r1, #16]
 80073aa:	f022 0207 	bic.w	r2, r2, #7
 80073ae:	4313      	orrs	r3, r2
 80073b0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80073b2:	f7fd fb53 	bl	8004a5c <HAL_GetTick>
 80073b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b8:	4b55      	ldr	r3, [pc, #340]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c0:	6862      	ldr	r2, [r4, #4]
 80073c2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80073c6:	d016      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c8:	f7fd fb48 	bl	8004a5c <HAL_GetTick>
 80073cc:	1b80      	subs	r0, r0, r6
 80073ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d2:	4298      	cmp	r0, r3
 80073d4:	d9f0      	bls.n	80073b8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80073d6:	2003      	movs	r0, #3
 80073d8:	e08e      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073da:	4a4d      	ldr	r2, [pc, #308]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80073e2:	d1e0      	bne.n	80073a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073e4:	2001      	movs	r0, #1
 80073e6:	e087      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073e8:	4a49      	ldr	r2, [pc, #292]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	f412 7f80 	tst.w	r2, #256	; 0x100
 80073f0:	d1d9      	bne.n	80073a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073f2:	2001      	movs	r0, #1
 80073f4:	e080      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f013 0f02 	tst.w	r3, #2
 80073fc:	d00c      	beq.n	8007418 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80073fe:	68e2      	ldr	r2, [r4, #12]
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	429a      	cmp	r2, r3
 800740a:	d205      	bcs.n	8007418 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800740c:	4940      	ldr	r1, [pc, #256]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 800740e:	698b      	ldr	r3, [r1, #24]
 8007410:	f023 030f 	bic.w	r3, r3, #15
 8007414:	431a      	orrs	r2, r3
 8007416:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007418:	4b3c      	ldr	r3, [pc, #240]	; (800750c <HAL_RCC_ClockConfig+0x27c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	42ab      	cmp	r3, r5
 8007422:	d90a      	bls.n	800743a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007424:	4a39      	ldr	r2, [pc, #228]	; (800750c <HAL_RCC_ClockConfig+0x27c>)
 8007426:	6813      	ldr	r3, [r2, #0]
 8007428:	f023 030f 	bic.w	r3, r3, #15
 800742c:	432b      	orrs	r3, r5
 800742e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007430:	6813      	ldr	r3, [r2, #0]
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	42ab      	cmp	r3, r5
 8007438:	d165      	bne.n	8007506 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f013 0f04 	tst.w	r3, #4
 8007440:	d00c      	beq.n	800745c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007442:	6922      	ldr	r2, [r4, #16]
 8007444:	4b32      	ldr	r3, [pc, #200]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800744c:	429a      	cmp	r2, r3
 800744e:	d205      	bcs.n	800745c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007450:	492f      	ldr	r1, [pc, #188]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007452:	698b      	ldr	r3, [r1, #24]
 8007454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007458:	431a      	orrs	r2, r3
 800745a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	f013 0f08 	tst.w	r3, #8
 8007462:	d00c      	beq.n	800747e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007464:	6962      	ldr	r2, [r4, #20]
 8007466:	4b2a      	ldr	r3, [pc, #168]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800746e:	429a      	cmp	r2, r3
 8007470:	d205      	bcs.n	800747e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007472:	4927      	ldr	r1, [pc, #156]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007474:	69cb      	ldr	r3, [r1, #28]
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	431a      	orrs	r2, r3
 800747c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	f013 0f10 	tst.w	r3, #16
 8007484:	d00c      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007486:	69a2      	ldr	r2, [r4, #24]
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007490:	429a      	cmp	r2, r3
 8007492:	d205      	bcs.n	80074a0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007494:	491e      	ldr	r1, [pc, #120]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 8007496:	69cb      	ldr	r3, [r1, #28]
 8007498:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800749c:	431a      	orrs	r2, r3
 800749e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	f013 0f20 	tst.w	r3, #32
 80074a6:	d00c      	beq.n	80074c2 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80074a8:	69e2      	ldr	r2, [r4, #28]
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d205      	bcs.n	80074c2 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074b6:	4916      	ldr	r1, [pc, #88]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80074b8:	6a0b      	ldr	r3, [r1, #32]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	431a      	orrs	r2, r3
 80074c0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80074c2:	f7ff fdeb 	bl	800709c <HAL_RCC_GetSysClockFreq>
 80074c6:	4912      	ldr	r1, [pc, #72]	; (8007510 <HAL_RCC_ClockConfig+0x280>)
 80074c8:	698b      	ldr	r3, [r1, #24]
 80074ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80074ce:	4a11      	ldr	r2, [pc, #68]	; (8007514 <HAL_RCC_ClockConfig+0x284>)
 80074d0:	5cd3      	ldrb	r3, [r2, r3]
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80074d8:	698b      	ldr	r3, [r1, #24]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	fa20 f303 	lsr.w	r3, r0, r3
 80074e8:	4a0b      	ldr	r2, [pc, #44]	; (8007518 <HAL_RCC_ClockConfig+0x288>)
 80074ea:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RCC_ClockConfig+0x28c>)
 80074ee:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_ClockConfig+0x290>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	f7fa fe22 	bl	800213c <HAL_InitTick>
}
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074fa:	2001      	movs	r0, #1
}
 80074fc:	4770      	bx	lr
      return HAL_ERROR;
 80074fe:	2001      	movs	r0, #1
 8007500:	e7fa      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8007502:	2001      	movs	r0, #1
 8007504:	e7f8      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8007506:	2001      	movs	r0, #1
 8007508:	e7f6      	b.n	80074f8 <HAL_RCC_ClockConfig+0x268>
 800750a:	bf00      	nop
 800750c:	52002000 	.word	0x52002000
 8007510:	58024400 	.word	0x58024400
 8007514:	08019fb4 	.word	0x08019fb4
 8007518:	24000040 	.word	0x24000040
 800751c:	2400003c 	.word	0x2400003c
 8007520:	24000048 	.word	0x24000048

08007524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007524:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007526:	f7ff fdb9 	bl	800709c <HAL_RCC_GetSysClockFreq>
 800752a:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <HAL_RCC_GetHCLKFreq+0x34>)
 800752c:	6993      	ldr	r3, [r2, #24]
 800752e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007532:	490a      	ldr	r1, [pc, #40]	; (800755c <HAL_RCC_GetHCLKFreq+0x38>)
 8007534:	5ccb      	ldrb	r3, [r1, r3]
 8007536:	f003 031f 	and.w	r3, r3, #31
 800753a:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800753e:	6992      	ldr	r2, [r2, #24]
 8007540:	f002 020f 	and.w	r2, r2, #15
 8007544:	5c88      	ldrb	r0, [r1, r2]
 8007546:	f000 001f 	and.w	r0, r0, #31
 800754a:	fa23 f000 	lsr.w	r0, r3, r0
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007550:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <HAL_RCC_GetHCLKFreq+0x40>)
 8007554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007556:	bd08      	pop	{r3, pc}
 8007558:	58024400 	.word	0x58024400
 800755c:	08019fb4 	.word	0x08019fb4
 8007560:	24000040 	.word	0x24000040
 8007564:	2400003c 	.word	0x2400003c

08007568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007568:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800756a:	f7ff ffdb 	bl	8007524 <HAL_RCC_GetHCLKFreq>
 800756e:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007578:	5cd3      	ldrb	r3, [r2, r3]
 800757a:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800757e:	40d8      	lsrs	r0, r3
 8007580:	bd08      	pop	{r3, pc}
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400
 8007588:	08019fb4 	.word	0x08019fb4

0800758c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800758c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800758e:	f7ff ffc9 	bl	8007524 <HAL_RCC_GetHCLKFreq>
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800759a:	4a04      	ldr	r2, [pc, #16]	; (80075ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800759c:	5cd3      	ldrb	r3, [r2, r3]
 800759e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 80075a2:	40d8      	lsrs	r0, r3
 80075a4:	bd08      	pop	{r3, pc}
 80075a6:	bf00      	nop
 80075a8:	58024400 	.word	0x58024400
 80075ac:	08019fb4 	.word	0x08019fb4

080075b0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80075b0:	233f      	movs	r3, #63	; 0x3f
 80075b2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <HAL_RCC_GetClockConfig+0x4c>)
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	f002 0207 	and.w	r2, r2, #7
 80075bc:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80075c4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	f002 020f 	and.w	r2, r2, #15
 80075cc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075d4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80075d6:	69da      	ldr	r2, [r3, #28]
 80075d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075dc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075e4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ec:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <HAL_RCC_GetClockConfig+0x50>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	600b      	str	r3, [r1, #0]
}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	52002000 	.word	0x52002000

08007604 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007604:	4b40      	ldr	r3, [pc, #256]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d079      	beq.n	8007704 <RCCEx_PLL2_Config+0x100>
{
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4605      	mov	r5, r0
 8007614:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007616:	4a3c      	ldr	r2, [pc, #240]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 8007618:	6813      	ldr	r3, [r2, #0]
 800761a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800761e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007620:	f7fd fa1c 	bl	8004a5c <HAL_GetTick>
 8007624:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007626:	4b38      	ldr	r3, [pc, #224]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800762e:	d006      	beq.n	800763e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007630:	f7fd fa14 	bl	8004a5c <HAL_GetTick>
 8007634:	1b03      	subs	r3, r0, r4
 8007636:	2b02      	cmp	r3, #2
 8007638:	d9f5      	bls.n	8007626 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800763a:	2003      	movs	r0, #3

  }


  return status;
}
 800763c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800763e:	4b32      	ldr	r3, [pc, #200]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 8007640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007642:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800764c:	629a      	str	r2, [r3, #40]	; 0x28
 800764e:	686a      	ldr	r2, [r5, #4]
 8007650:	3a01      	subs	r2, #1
 8007652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007656:	68a9      	ldr	r1, [r5, #8]
 8007658:	3901      	subs	r1, #1
 800765a:	0249      	lsls	r1, r1, #9
 800765c:	b289      	uxth	r1, r1
 800765e:	430a      	orrs	r2, r1
 8007660:	68e9      	ldr	r1, [r5, #12]
 8007662:	3901      	subs	r1, #1
 8007664:	0409      	lsls	r1, r1, #16
 8007666:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800766a:	430a      	orrs	r2, r1
 800766c:	6929      	ldr	r1, [r5, #16]
 800766e:	3901      	subs	r1, #1
 8007670:	0609      	lsls	r1, r1, #24
 8007672:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007676:	430a      	orrs	r2, r1
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007680:	6969      	ldr	r1, [r5, #20]
 8007682:	430a      	orrs	r2, r1
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	f022 0220 	bic.w	r2, r2, #32
 800768c:	69a9      	ldr	r1, [r5, #24]
 800768e:	430a      	orrs	r2, r1
 8007690:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007694:	f022 0210 	bic.w	r2, r2, #16
 8007698:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800769a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <RCCEx_PLL2_Config+0x108>)
 800769e:	400a      	ands	r2, r1
 80076a0:	69e9      	ldr	r1, [r5, #28]
 80076a2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80076a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	f042 0210 	orr.w	r2, r2, #16
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80076b0:	b9c6      	cbnz	r6, 80076e4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b2:	461a      	mov	r2, r3
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80076bc:	4a12      	ldr	r2, [pc, #72]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 80076be:	6813      	ldr	r3, [r2, #0]
 80076c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80076c6:	f7fd f9c9 	bl	8004a5c <HAL_GetTick>
 80076ca:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076cc:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80076d4:	d114      	bne.n	8007700 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076d6:	f7fd f9c1 	bl	8004a5c <HAL_GetTick>
 80076da:	1b00      	subs	r0, r0, r4
 80076dc:	2802      	cmp	r0, #2
 80076de:	d9f5      	bls.n	80076cc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80076e0:	2003      	movs	r0, #3
 80076e2:	e7ab      	b.n	800763c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e4:	2e01      	cmp	r6, #1
 80076e6:	d005      	beq.n	80076f4 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076e8:	4a07      	ldr	r2, [pc, #28]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 80076ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f2:	e7e3      	b.n	80076bc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <RCCEx_PLL2_Config+0x104>)
 80076f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076fe:	e7dd      	b.n	80076bc <RCCEx_PLL2_Config+0xb8>
  return status;
 8007700:	2000      	movs	r0, #0
 8007702:	e79b      	b.n	800763c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007704:	2001      	movs	r0, #1
}
 8007706:	4770      	bx	lr
 8007708:	58024400 	.word	0x58024400
 800770c:	ffff0007 	.word	0xffff0007

08007710 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007710:	4b40      	ldr	r3, [pc, #256]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b03      	cmp	r3, #3
 800771a:	d079      	beq.n	8007810 <RCCEx_PLL3_Config+0x100>
{
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4605      	mov	r5, r0
 8007720:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007722:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 8007724:	6813      	ldr	r3, [r2, #0]
 8007726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772c:	f7fd f996 	bl	8004a5c <HAL_GetTick>
 8007730:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800773a:	d006      	beq.n	800774a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800773c:	f7fd f98e 	bl	8004a5c <HAL_GetTick>
 8007740:	1b03      	subs	r3, r0, r4
 8007742:	2b02      	cmp	r3, #2
 8007744:	d9f5      	bls.n	8007732 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007746:	2003      	movs	r0, #3

  }


  return status;
}
 8007748:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800774a:	4b32      	ldr	r3, [pc, #200]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 800774c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800774e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007752:	6829      	ldr	r1, [r5, #0]
 8007754:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007758:	629a      	str	r2, [r3, #40]	; 0x28
 800775a:	686a      	ldr	r2, [r5, #4]
 800775c:	3a01      	subs	r2, #1
 800775e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007762:	68a9      	ldr	r1, [r5, #8]
 8007764:	3901      	subs	r1, #1
 8007766:	0249      	lsls	r1, r1, #9
 8007768:	b289      	uxth	r1, r1
 800776a:	430a      	orrs	r2, r1
 800776c:	68e9      	ldr	r1, [r5, #12]
 800776e:	3901      	subs	r1, #1
 8007770:	0409      	lsls	r1, r1, #16
 8007772:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007776:	430a      	orrs	r2, r1
 8007778:	6929      	ldr	r1, [r5, #16]
 800777a:	3901      	subs	r1, #1
 800777c:	0609      	lsls	r1, r1, #24
 800777e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007782:	430a      	orrs	r2, r1
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800778c:	6969      	ldr	r1, [r5, #20]
 800778e:	430a      	orrs	r2, r1
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007798:	69a9      	ldr	r1, [r5, #24]
 800779a:	430a      	orrs	r2, r1
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077a4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <RCCEx_PLL3_Config+0x108>)
 80077aa:	400a      	ands	r2, r1
 80077ac:	69e9      	ldr	r1, [r5, #28]
 80077ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ba:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80077bc:	b9c6      	cbnz	r6, 80077f0 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077be:	461a      	mov	r2, r3
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80077c8:	4a12      	ldr	r2, [pc, #72]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077d2:	f7fd f943 	bl	8004a5c <HAL_GetTick>
 80077d6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d8:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80077e0:	d114      	bne.n	800780c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077e2:	f7fd f93b 	bl	8004a5c <HAL_GetTick>
 80077e6:	1b00      	subs	r0, r0, r4
 80077e8:	2802      	cmp	r0, #2
 80077ea:	d9f5      	bls.n	80077d8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80077ec:	2003      	movs	r0, #3
 80077ee:	e7ab      	b.n	8007748 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80077f0:	2e01      	cmp	r6, #1
 80077f2:	d005      	beq.n	8007800 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077f4:	4a07      	ldr	r2, [pc, #28]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 80077f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077fe:	e7e3      	b.n	80077c8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007800:	4a04      	ldr	r2, [pc, #16]	; (8007814 <RCCEx_PLL3_Config+0x104>)
 8007802:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007808:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780a:	e7dd      	b.n	80077c8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800780c:	2000      	movs	r0, #0
 800780e:	e79b      	b.n	8007748 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007810:	2001      	movs	r0, #1
}
 8007812:	4770      	bx	lr
 8007814:	58024400 	.word	0x58024400
 8007818:	ffff0007 	.word	0xffff0007

0800781c <HAL_RCCEx_PeriphCLKConfig>:
{
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007820:	6803      	ldr	r3, [r0, #0]
 8007822:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007826:	d030      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007828:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800782a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782e:	d026      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007830:	d80e      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007832:	b1eb      	cbz	r3, 8007870 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007838:	d107      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800783a:	2102      	movs	r1, #2
 800783c:	3004      	adds	r0, #4
 800783e:	f7ff fee1 	bl	8007604 <RCCEx_PLL2_Config>
 8007842:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007844:	b145      	cbz	r5, 8007858 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007846:	462e      	mov	r6, r5
 8007848:	e021      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800784a:	2601      	movs	r6, #1
 800784c:	4635      	mov	r5, r6
 800784e:	e01e      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007854:	d109      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007856:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007858:	4a99      	ldr	r2, [pc, #612]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800785a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800785c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007860:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007862:	430b      	orrs	r3, r1
 8007864:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007866:	2600      	movs	r6, #0
 8007868:	e011      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800786a:	2601      	movs	r6, #1
 800786c:	4635      	mov	r5, r6
 800786e:	e00e      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007870:	4a93      	ldr	r2, [pc, #588]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007872:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007878:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800787a:	2500      	movs	r5, #0
 800787c:	e7ec      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800787e:	2102      	movs	r1, #2
 8007880:	3024      	adds	r0, #36	; 0x24
 8007882:	f7ff ff45 	bl	8007710 <RCCEx_PLL3_Config>
 8007886:	4605      	mov	r5, r0
      break;
 8007888:	e7dc      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800788a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800788c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007894:	d026      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007898:	2b04      	cmp	r3, #4
 800789a:	d81f      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800789c:	e8df f003 	tbb	[pc, r3]
 80078a0:	08171103 	.word	0x08171103
 80078a4:	08          	.byte	0x08
 80078a5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a6:	4a86      	ldr	r2, [pc, #536]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80078a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80078aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80078b0:	b9bd      	cbnz	r5, 80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078b2:	4a83      	ldr	r2, [pc, #524]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80078b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80078bc:	430b      	orrs	r3, r1
 80078be:	6513      	str	r3, [r2, #80]	; 0x50
 80078c0:	e010      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c2:	2100      	movs	r1, #0
 80078c4:	1d20      	adds	r0, r4, #4
 80078c6:	f7ff fe9d 	bl	8007604 <RCCEx_PLL2_Config>
 80078ca:	4605      	mov	r5, r0
      break;
 80078cc:	e7f0      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078ce:	2100      	movs	r1, #0
 80078d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078d4:	f7ff ff1c 	bl	8007710 <RCCEx_PLL3_Config>
 80078d8:	4605      	mov	r5, r0
      break;
 80078da:	e7e9      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80078dc:	2601      	movs	r6, #1
 80078de:	4635      	mov	r5, r6
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80078e2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80078ea:	d01d      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 80078ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ee:	2b80      	cmp	r3, #128	; 0x80
 80078f0:	d039      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80078f2:	d80b      	bhi.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80078f4:	b38b      	cbz	r3, 800795a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d105      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078fa:	2100      	movs	r1, #0
 80078fc:	1d20      	adds	r0, r4, #4
 80078fe:	f7ff fe81 	bl	8007604 <RCCEx_PLL2_Config>
 8007902:	4605      	mov	r5, r0
      break;
 8007904:	e008      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007906:	2601      	movs	r6, #1
 8007908:	4635      	mov	r5, r6
 800790a:	e00d      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800790c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007910:	d002      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007912:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007916:	d11b      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8007918:	bb65      	cbnz	r5, 8007974 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800791a:	4a69      	ldr	r2, [pc, #420]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800791c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800791e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007922:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007924:	430b      	orrs	r3, r1
 8007926:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800792e:	d035      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007930:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007936:	d057      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007938:	d821      	bhi.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d04e      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007942:	d119      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007944:	2100      	movs	r1, #0
 8007946:	1d20      	adds	r0, r4, #4
 8007948:	f7ff fe5c 	bl	8007604 <RCCEx_PLL2_Config>
 800794c:	4605      	mov	r5, r0
      break;
 800794e:	e01c      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007950:	2bc0      	cmp	r3, #192	; 0xc0
 8007952:	d0e1      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007954:	2601      	movs	r6, #1
 8007956:	4635      	mov	r5, r6
 8007958:	e7e6      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795a:	4a59      	ldr	r2, [pc, #356]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800795c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800795e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007964:	e7d8      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007966:	2100      	movs	r1, #0
 8007968:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800796c:	f7ff fed0 	bl	8007710 <RCCEx_PLL3_Config>
 8007970:	4605      	mov	r5, r0
      break;
 8007972:	e7d1      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007974:	462e      	mov	r6, r5
 8007976:	e7d7      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007978:	2601      	movs	r6, #1
 800797a:	4635      	mov	r5, r6
 800797c:	e00e      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d002      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007984:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007988:	d122      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800798a:	2d00      	cmp	r5, #0
 800798c:	d133      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800798e:	4a4c      	ldr	r2, [pc, #304]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007990:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007992:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8007996:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007998:	430b      	orrs	r3, r1
 800799a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079a2:	d031      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 80079a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d041      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80079aa:	d829      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80079ac:	b133      	cbz	r3, 80079bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d123      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b2:	4a43      	ldr	r2, [pc, #268]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80079bc:	2d00      	cmp	r5, #0
 80079be:	d13c      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80079c0:	4a3f      	ldr	r2, [pc, #252]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80079c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80079c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079ca:	430b      	orrs	r3, r1
 80079cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079ce:	e01b      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 80079d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079d4:	d0d9      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079d6:	2601      	movs	r6, #1
 80079d8:	4635      	mov	r5, r6
 80079da:	e7df      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079dc:	4a38      	ldr	r2, [pc, #224]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80079e6:	e7d0      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079e8:	2100      	movs	r1, #0
 80079ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079ee:	f7ff fe8f 	bl	8007710 <RCCEx_PLL3_Config>
 80079f2:	4605      	mov	r5, r0
      break;
 80079f4:	e7c9      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079f6:	462e      	mov	r6, r5
 80079f8:	e7d0      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 80079fa:	2601      	movs	r6, #1
 80079fc:	4635      	mov	r5, r6
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d0db      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007a04:	2601      	movs	r6, #1
 8007a06:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007a0e:	d039      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a16:	d02d      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007a18:	d814      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007a1a:	b32b      	cbz	r3, 8007a68 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a20:	d10d      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a22:	2100      	movs	r1, #0
 8007a24:	1d20      	adds	r0, r4, #4
 8007a26:	f7ff fded 	bl	8007604 <RCCEx_PLL2_Config>
 8007a2a:	4605      	mov	r5, r0
      break;
 8007a2c:	e010      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a2e:	2102      	movs	r1, #2
 8007a30:	1d20      	adds	r0, r4, #4
 8007a32:	f7ff fde7 	bl	8007604 <RCCEx_PLL2_Config>
 8007a36:	4605      	mov	r5, r0
      break;
 8007a38:	e7c0      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007a3a:	462e      	mov	r6, r5
 8007a3c:	e7e4      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a3e:	2601      	movs	r6, #1
 8007a40:	4635      	mov	r5, r6
 8007a42:	e01f      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a48:	d002      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a4e:	d108      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8007a50:	b9bd      	cbnz	r5, 8007a82 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a52:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6513      	str	r3, [r2, #80]	; 0x50
 8007a60:	e010      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a62:	2601      	movs	r6, #1
 8007a64:	4635      	mov	r5, r6
 8007a66:	e00d      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a70:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a72:	e7ed      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a74:	2100      	movs	r1, #0
 8007a76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a7a:	f7ff fe49 	bl	8007710 <RCCEx_PLL3_Config>
 8007a7e:	4605      	mov	r5, r0
      break;
 8007a80:	e7e6      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a82:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007a8a:	d026      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a92:	d037      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007a94:	d816      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a96:	b13b      	cbz	r3, 8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9c:	d10d      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	1d20      	adds	r0, r4, #4
 8007aa2:	f7ff fdaf 	bl	8007604 <RCCEx_PLL2_Config>
 8007aa6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007aa8:	bb9d      	cbnz	r5, 8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aaa:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007aac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007aae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007ab2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6513      	str	r3, [r2, #80]	; 0x50
 8007ab8:	e00f      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007aba:	2601      	movs	r6, #1
 8007abc:	4635      	mov	r5, r6
 8007abe:	e00c      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ac8:	d0ee      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ace:	d0eb      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ad4:	d0e8      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ad6:	2601      	movs	r6, #1
 8007ad8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007ae0:	d025      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ae2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	d04c      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007aec:	d816      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d03c      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af6:	d10e      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007af8:	2101      	movs	r1, #1
 8007afa:	1d20      	adds	r0, r4, #4
 8007afc:	f7ff fd82 	bl	8007604 <RCCEx_PLL2_Config>
 8007b00:	4605      	mov	r5, r0
      break;
 8007b02:	e033      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b04:	2101      	movs	r1, #1
 8007b06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b0a:	f7ff fe01 	bl	8007710 <RCCEx_PLL3_Config>
 8007b0e:	4605      	mov	r5, r0
      break;
 8007b10:	e7ca      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007b12:	462e      	mov	r6, r5
 8007b14:	e7e1      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b16:	2601      	movs	r6, #1
 8007b18:	4635      	mov	r5, r6
 8007b1a:	e008      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b20:	d024      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b22:	d91d      	bls.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b24:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007b28:	d020      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b2a:	2601      	movs	r6, #1
 8007b2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007b34:	d009      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 8007b36:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b3c:	d02c      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8007b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b42:	d037      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007b44:	b36b      	cbz	r3, 8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007b46:	2601      	movs	r6, #1
 8007b48:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007b50:	d045      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 8007b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d86d      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b58:	e8df f003 	tbb	[pc, r3]
 8007b5c:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b64:	d002      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d109      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 8007b6c:	b995      	cbnz	r5, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b6e:	4a8c      	ldr	r2, [pc, #560]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b72:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007b76:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b7e:	e7d6      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b80:	2601      	movs	r6, #1
 8007b82:	4635      	mov	r5, r6
 8007b84:	e7d3      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b86:	2101      	movs	r1, #1
 8007b88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b8c:	f7ff fdc0 	bl	8007710 <RCCEx_PLL3_Config>
 8007b90:	4605      	mov	r5, r0
      break;
 8007b92:	e7eb      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b94:	462e      	mov	r6, r5
 8007b96:	e7ca      	b.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b98:	4a81      	ldr	r2, [pc, #516]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ba2:	b96d      	cbnz	r5, 8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba4:	4a7e      	ldr	r2, [pc, #504]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007ba6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ba8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007bac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6513      	str	r3, [r2, #80]	; 0x50
 8007bb2:	e7ca      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	1d20      	adds	r0, r4, #4
 8007bb8:	f7ff fd24 	bl	8007604 <RCCEx_PLL2_Config>
 8007bbc:	4605      	mov	r5, r0
      break;
 8007bbe:	e7f0      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007bc0:	462e      	mov	r6, r5
 8007bc2:	e7c2      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc4:	4a76      	ldr	r2, [pc, #472]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007bc6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007bce:	bba5      	cbnz	r5, 8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bd0:	4a73      	ldr	r2, [pc, #460]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007bd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007bd4:	f023 0303 	bic.w	r3, r3, #3
 8007bd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007be4:	d12b      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	f013 0f01 	tst.w	r3, #1
 8007bec:	f000 80a3 	beq.w	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bf0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007bf4:	2b28      	cmp	r3, #40	; 0x28
 8007bf6:	f200 809c 	bhi.w	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007bfa:	e8df f003 	tbb	[pc, r3]
 8007bfe:	9a89      	.short	0x9a89
 8007c00:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c04:	9a849a9a 	.word	0x9a849a9a
 8007c08:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c0c:	9a939a9a 	.word	0x9a939a9a
 8007c10:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c14:	9a899a9a 	.word	0x9a899a9a
 8007c18:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c1c:	9a899a9a 	.word	0x9a899a9a
 8007c20:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c24:	9a9a      	.short	0x9a9a
 8007c26:	89          	.byte	0x89
 8007c27:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c28:	2102      	movs	r1, #2
 8007c2a:	1d20      	adds	r0, r4, #4
 8007c2c:	f7ff fcea 	bl	8007604 <RCCEx_PLL2_Config>
 8007c30:	4605      	mov	r5, r0
      break;
 8007c32:	e7cc      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8007c34:	2601      	movs	r6, #1
 8007c36:	4635      	mov	r5, r6
 8007c38:	e7d1      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007c3a:	462e      	mov	r6, r5
 8007c3c:	e7cf      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3e:	4a59      	ldr	r2, [pc, #356]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c40:	6813      	ldr	r3, [r2, #0]
 8007c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c46:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c48:	f7fc ff08 	bl	8004a5c <HAL_GetTick>
 8007c4c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c4e:	4b55      	ldr	r3, [pc, #340]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c56:	d105      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c58:	f7fc ff00 	bl	8004a5c <HAL_GetTick>
 8007c5c:	1bc0      	subs	r0, r0, r7
 8007c5e:	2864      	cmp	r0, #100	; 0x64
 8007c60:	d9f5      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 8007c62:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	d14a      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c68:	4b4d      	ldr	r3, [pc, #308]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007c70:	4053      	eors	r3, r2
 8007c72:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007c76:	d00c      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c78:	4b49      	ldr	r3, [pc, #292]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c82:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007c86:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c8a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c8e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007c90:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c92:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 8007c9c:	bb8d      	cbnz	r5, 8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c9e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007ca2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007ca6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007caa:	d01e      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007cac:	4a3c      	ldr	r2, [pc, #240]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cae:	6913      	ldr	r3, [r2, #16]
 8007cb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cb4:	6113      	str	r3, [r2, #16]
 8007cb6:	493a      	ldr	r1, [pc, #232]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cb8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007cba:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007cbe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	670b      	str	r3, [r1, #112]	; 0x70
 8007cc6:	e78e      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8007cc8:	f7fc fec8 	bl	8004a5c <HAL_GetTick>
 8007ccc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cce:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	f013 0f02 	tst.w	r3, #2
 8007cd6:	d1e1      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd8:	f7fc fec0 	bl	8004a5c <HAL_GetTick>
 8007cdc:	1bc0      	subs	r0, r0, r7
 8007cde:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ce2:	4298      	cmp	r0, r3
 8007ce4:	d9f3      	bls.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 8007ce6:	2503      	movs	r5, #3
 8007ce8:	e7d8      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cea:	482d      	ldr	r0, [pc, #180]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cec:	6902      	ldr	r2, [r0, #16]
 8007cee:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007cf2:	492d      	ldr	r1, [pc, #180]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007cf4:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	6103      	str	r3, [r0, #16]
 8007cfc:	e7db      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8007cfe:	462e      	mov	r6, r5
 8007d00:	e771      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 8007d02:	462e      	mov	r6, r5
 8007d04:	e76f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d06:	2101      	movs	r1, #1
 8007d08:	1d20      	adds	r0, r4, #4
 8007d0a:	f7ff fc7b 	bl	8007604 <RCCEx_PLL2_Config>
 8007d0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d10:	b9ed      	cbnz	r5, 8007d4e <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d12:	4a23      	ldr	r2, [pc, #140]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007d14:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d16:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007d1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6553      	str	r3, [r2, #84]	; 0x54
 8007d22:	e008      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d24:	2101      	movs	r1, #1
 8007d26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d2a:	f7ff fcf1 	bl	8007710 <RCCEx_PLL3_Config>
 8007d2e:	4605      	mov	r5, r0
      break;
 8007d30:	e7ee      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d32:	2601      	movs	r6, #1
 8007d34:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	f013 0f02 	tst.w	r3, #2
 8007d3c:	d016      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d3e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d827      	bhi.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8007d44:	e8df f003 	tbb	[pc, r3]
 8007d48:	0a1f050a 	.word	0x0a1f050a
 8007d4c:	0a0a      	.short	0x0a0a
 8007d4e:	462e      	mov	r6, r5
 8007d50:	e7f1      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d52:	2101      	movs	r1, #1
 8007d54:	1d20      	adds	r0, r4, #4
 8007d56:	f7ff fc55 	bl	8007604 <RCCEx_PLL2_Config>
 8007d5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d5c:	b9ed      	cbnz	r5, 8007d9a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007d60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	f013 0f04 	tst.w	r3, #4
 8007d72:	d029      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	d84a      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8007d7c:	e8df f003 	tbb	[pc, r3]
 8007d80:	1b42161b 	.word	0x1b42161b
 8007d84:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d86:	2101      	movs	r1, #1
 8007d88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d8c:	f7ff fcc0 	bl	8007710 <RCCEx_PLL3_Config>
 8007d90:	4605      	mov	r5, r0
      break;
 8007d92:	e7e3      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d94:	2601      	movs	r6, #1
 8007d96:	4635      	mov	r5, r6
 8007d98:	e7e8      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d9a:	462e      	mov	r6, r5
 8007d9c:	e7e6      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	58024800 	.word	0x58024800
 8007da8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dac:	2101      	movs	r1, #1
 8007dae:	1d20      	adds	r0, r4, #4
 8007db0:	f7ff fc28 	bl	8007604 <RCCEx_PLL2_Config>
 8007db4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007db6:	bb7d      	cbnz	r5, 8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007db8:	4aa9      	ldr	r2, [pc, #676]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007dba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007dbc:	f023 0307 	bic.w	r3, r3, #7
 8007dc0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	f013 0f20 	tst.w	r3, #32
 8007dce:	d033      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd8:	d04c      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007dda:	d822      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x606>
 8007ddc:	b13b      	cbz	r3, 8007dee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de2:	d11b      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de4:	2100      	movs	r1, #0
 8007de6:	1d20      	adds	r0, r4, #4
 8007de8:	f7ff fc0c 	bl	8007604 <RCCEx_PLL2_Config>
 8007dec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	d147      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df2:	4a9b      	ldr	r2, [pc, #620]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007df4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007df6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007dfa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	6553      	str	r3, [r2, #84]	; 0x54
 8007e02:	e019      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e04:	2101      	movs	r1, #1
 8007e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e0a:	f7ff fc81 	bl	8007710 <RCCEx_PLL3_Config>
 8007e0e:	4605      	mov	r5, r0
      break;
 8007e10:	e7d1      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e12:	2601      	movs	r6, #1
 8007e14:	4635      	mov	r5, r6
 8007e16:	e7d7      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007e18:	462e      	mov	r6, r5
 8007e1a:	e7d5      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e1c:	2601      	movs	r6, #1
 8007e1e:	4635      	mov	r5, r6
 8007e20:	e00a      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d0e2      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e2c:	d0df      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e32:	d0dc      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e34:	2601      	movs	r6, #1
 8007e36:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e3e:	d030      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e48:	d04b      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8007e4a:	d81f      	bhi.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x670>
 8007e4c:	b13b      	cbz	r3, 8007e5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e52:	d118      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e54:	2100      	movs	r1, #0
 8007e56:	1d20      	adds	r0, r4, #4
 8007e58:	f7ff fbd4 	bl	8007604 <RCCEx_PLL2_Config>
 8007e5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	d146      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e62:	4a7f      	ldr	r2, [pc, #508]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007e64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e66:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007e6a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6593      	str	r3, [r2, #88]	; 0x58
 8007e72:	e016      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e74:	2102      	movs	r1, #2
 8007e76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e7a:	f7ff fc49 	bl	8007710 <RCCEx_PLL3_Config>
 8007e7e:	4605      	mov	r5, r0
      break;
 8007e80:	e7b5      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e82:	462e      	mov	r6, r5
 8007e84:	e7d8      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e86:	2601      	movs	r6, #1
 8007e88:	4635      	mov	r5, r6
 8007e8a:	e00a      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d0e5      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e96:	d0e2      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e9c:	d0df      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e9e:	2601      	movs	r6, #1
 8007ea0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ea8:	d032      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007eaa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eb2:	f000 80a2 	beq.w	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8007eb6:	d820      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8007eb8:	b13b      	cbz	r3, 8007eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ebe:	d119      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	1d20      	adds	r0, r4, #4
 8007ec4:	f7ff fb9e 	bl	8007604 <RCCEx_PLL2_Config>
 8007ec8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	f040 809c 	bne.w	8008008 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ed0:	4a63      	ldr	r2, [pc, #396]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ed2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ed4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007ed8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6593      	str	r3, [r2, #88]	; 0x58
 8007ee0:	e016      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ee8:	f7ff fc12 	bl	8007710 <RCCEx_PLL3_Config>
 8007eec:	4605      	mov	r5, r0
      break;
 8007eee:	e7b6      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ef0:	462e      	mov	r6, r5
 8007ef2:	e7d6      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ef4:	2601      	movs	r6, #1
 8007ef6:	4635      	mov	r5, r6
 8007ef8:	e00a      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efe:	d0e4      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f04:	d0e1      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f0a:	d0de      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f0c:	2601      	movs	r6, #1
 8007f0e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	f013 0f08 	tst.w	r3, #8
 8007f16:	d00c      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f18:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f20:	d074      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f22:	4a4f      	ldr	r2, [pc, #316]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007f24:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f2a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	f013 0f10 	tst.w	r3, #16
 8007f38:	d00c      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f3a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f42:	d06c      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f44:	4a46      	ldr	r2, [pc, #280]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007f46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f5a:	d00b      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 8007f5c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f64:	d073      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6a:	d066      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d05f      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8007f70:	2601      	movs	r6, #1
 8007f72:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007f7a:	d00c      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 8007f7c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f84:	d07d      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8007f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f8a:	d070      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f90:	d068      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007f92:	2601      	movs	r6, #1
 8007f94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007f9c:	d008      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007f9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d077      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa8:	f000 8082 	beq.w	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8007fac:	2601      	movs	r6, #1
 8007fae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007fb6:	f040 8083 	bne.w	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007fc0:	f000 808b 	beq.w	80080da <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 8007fc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fcc:	f000 80c9 	beq.w	8008162 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007fd0:	f240 8080 	bls.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8007fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fde:	f040 80be 	bne.w	800815e <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 8007fe2:	2d00      	cmp	r5, #0
 8007fe4:	f040 80c3 	bne.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fe8:	4a1d      	ldr	r2, [pc, #116]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007fea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6553      	str	r3, [r2, #84]	; 0x54
 8007ff8:	e06f      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008000:	f7ff fb86 	bl	8007710 <RCCEx_PLL3_Config>
 8008004:	4605      	mov	r5, r0
      break;
 8008006:	e760      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8008008:	462e      	mov	r6, r5
 800800a:	e781      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800800c:	2102      	movs	r1, #2
 800800e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008012:	f7ff fb7d 	bl	8007710 <RCCEx_PLL3_Config>
 8008016:	2800      	cmp	r0, #0
 8008018:	d083      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800801a:	2601      	movs	r6, #1
 800801c:	e781      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800801e:	2102      	movs	r1, #2
 8008020:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008024:	f7ff fb74 	bl	8007710 <RCCEx_PLL3_Config>
 8008028:	2800      	cmp	r0, #0
 800802a:	d08b      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800802c:	2601      	movs	r6, #1
 800802e:	e789      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008030:	2100      	movs	r1, #0
 8008032:	1d20      	adds	r0, r4, #4
 8008034:	f7ff fae6 	bl	8007604 <RCCEx_PLL2_Config>
 8008038:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800803a:	b97d      	cbnz	r5, 800805c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800803c:	4a08      	ldr	r2, [pc, #32]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800803e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008040:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008044:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008048:	430b      	orrs	r3, r1
 800804a:	6593      	str	r3, [r2, #88]	; 0x58
 800804c:	e792      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800804e:	2102      	movs	r1, #2
 8008050:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008054:	f7ff fb5c 	bl	8007710 <RCCEx_PLL3_Config>
 8008058:	4605      	mov	r5, r0
      break;
 800805a:	e7ee      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800805c:	462e      	mov	r6, r5
 800805e:	e789      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8008060:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008064:	4a47      	ldr	r2, [pc, #284]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008066:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800806e:	b97d      	cbnz	r5, 8008090 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008070:	4a44      	ldr	r2, [pc, #272]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008072:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008078:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800807c:	430b      	orrs	r3, r1
 800807e:	6553      	str	r3, [r2, #84]	; 0x54
 8008080:	e789      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008082:	2101      	movs	r1, #1
 8008084:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008088:	f7ff fb42 	bl	8007710 <RCCEx_PLL3_Config>
 800808c:	4605      	mov	r5, r0
      break;
 800808e:	e7ee      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008090:	462e      	mov	r6, r5
 8008092:	e780      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008094:	4a3b      	ldr	r2, [pc, #236]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008096:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800809c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800809e:	b96d      	cbnz	r5, 80080bc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080a0:	4a38      	ldr	r2, [pc, #224]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80080aa:	430b      	orrs	r3, r1
 80080ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080ae:	e77f      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080b0:	2102      	movs	r1, #2
 80080b2:	1d20      	adds	r0, r4, #4
 80080b4:	f7ff faa6 	bl	8007604 <RCCEx_PLL2_Config>
 80080b8:	4605      	mov	r5, r0
      break;
 80080ba:	e7f0      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x882>
 80080bc:	462e      	mov	r6, r5
 80080be:	e777      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080c0:	2102      	movs	r1, #2
 80080c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080c6:	f7ff fb23 	bl	8007710 <RCCEx_PLL3_Config>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f43f af75 	beq.w	8007fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 80080d0:	2601      	movs	r6, #1
 80080d2:	e772      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d084      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80080d8:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80080e0:	d006      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080e2:	4a28      	ldr	r2, [pc, #160]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80080f6:	d006      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080f8:	4a22      	ldr	r2, [pc, #136]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008100:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008102:	430b      	orrs	r3, r1
 8008104:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800810c:	d006      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800810e:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008110:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008112:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008116:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008118:	430b      	orrs	r3, r1
 800811a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008122:	d009      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008124:	4b17      	ldr	r3, [pc, #92]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800812c:	611a      	str	r2, [r3, #16]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8008134:	430a      	orrs	r2, r1
 8008136:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	db19      	blt.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008144:	d007      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008146:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008148:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800814a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800814e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008152:	430b      	orrs	r3, r1
 8008154:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 8008156:	b106      	cbz	r6, 800815a <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 8008158:	2601      	movs	r6, #1
}
 800815a:	4630      	mov	r0, r6
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800815e:	2601      	movs	r6, #1
 8008160:	e7bb      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008162:	4a08      	ldr	r2, [pc, #32]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008164:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800816c:	e739      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800816e:	462e      	mov	r6, r5
 8008170:	e7b3      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008172:	4a04      	ldr	r2, [pc, #16]	; (8008184 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008174:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008176:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800817a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800817c:	430b      	orrs	r3, r1
 800817e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008180:	e7dd      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x922>
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400

08008188 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008188:	4770      	bx	lr
	...

0800818c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800818c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b01      	cmp	r3, #1
 8008194:	d13a      	bne.n	800820c <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008196:	2302      	movs	r3, #2
 8008198:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	68d3      	ldr	r3, [r2, #12]
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	6803      	ldr	r3, [r0, #0]
 80081a8:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <HAL_TIM_Base_Start_IT+0x88>)
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ae:	bf18      	it	ne
 80081b0:	4293      	cmpne	r3, r2
 80081b2:	d01d      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081b4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d019      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d015      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d011      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081cc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d00d      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081d4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
 80081dc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d005      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081ec:	2000      	movs	r0, #0
 80081ee:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081f0:	6899      	ldr	r1, [r3, #8]
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <HAL_TIM_Base_Start_IT+0x8c>)
 80081f4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f6:	2a06      	cmp	r2, #6
 80081f8:	bf18      	it	ne
 80081fa:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 80081fe:	d007      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008208:	2000      	movs	r0, #0
 800820a:	4770      	bx	lr
    return HAL_ERROR;
 800820c:	2001      	movs	r0, #1
 800820e:	4770      	bx	lr
  return HAL_OK;
 8008210:	2000      	movs	r0, #0
}
 8008212:	4770      	bx	lr
 8008214:	40010000 	.word	0x40010000
 8008218:	00010007 	.word	0x00010007

0800821c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800821c:	4770      	bx	lr

0800821e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008220:	4770      	bx	lr

08008222 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008222:	4770      	bx	lr

08008224 <HAL_TIM_IRQHandler>:
{
 8008224:	b510      	push	{r4, lr}
 8008226:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	f012 0f02 	tst.w	r2, #2
 8008230:	d011      	beq.n	8008256 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	f012 0f02 	tst.w	r2, #2
 8008238:	d00d      	beq.n	8008256 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800823a:	f06f 0202 	mvn.w	r2, #2
 800823e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008240:	2301      	movs	r3, #1
 8008242:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008244:	6803      	ldr	r3, [r0, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f013 0f03 	tst.w	r3, #3
 800824c:	d079      	beq.n	8008342 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800824e:	f7ff ffe6 	bl	800821e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	2300      	movs	r3, #0
 8008254:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	f012 0f04 	tst.w	r2, #4
 800825e:	d012      	beq.n	8008286 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	f012 0f04 	tst.w	r2, #4
 8008266:	d00e      	beq.n	8008286 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008268:	f06f 0204 	mvn.w	r2, #4
 800826c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800826e:	2302      	movs	r3, #2
 8008270:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f413 7f40 	tst.w	r3, #768	; 0x300
 800827a:	d068      	beq.n	800834e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800827c:	4620      	mov	r0, r4
 800827e:	f7ff ffce 	bl	800821e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008282:	2300      	movs	r3, #0
 8008284:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	691a      	ldr	r2, [r3, #16]
 800828a:	f012 0f08 	tst.w	r2, #8
 800828e:	d012      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	f012 0f08 	tst.w	r2, #8
 8008296:	d00e      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008298:	f06f 0208 	mvn.w	r2, #8
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800829e:	2304      	movs	r3, #4
 80082a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f013 0f03 	tst.w	r3, #3
 80082aa:	d057      	beq.n	800835c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff ffb6 	bl	800821e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b2:	2300      	movs	r3, #0
 80082b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	f012 0f10 	tst.w	r2, #16
 80082be:	d012      	beq.n	80082e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	f012 0f10 	tst.w	r2, #16
 80082c6:	d00e      	beq.n	80082e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082c8:	f06f 0210 	mvn.w	r2, #16
 80082cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ce:	2308      	movs	r3, #8
 80082d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80082da:	d046      	beq.n	800836a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff ff9e 	bl	800821e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e2:	2300      	movs	r3, #0
 80082e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	f012 0f01 	tst.w	r2, #1
 80082ee:	d003      	beq.n	80082f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	f012 0f01 	tst.w	r2, #1
 80082f6:	d13f      	bne.n	8008378 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008308:	d13d      	bne.n	8008386 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008312:	d003      	beq.n	800831c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	f012 0f80 	tst.w	r2, #128	; 0x80
 800831a:	d13b      	bne.n	8008394 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008324:	d003      	beq.n	800832e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	f012 0f40 	tst.w	r2, #64	; 0x40
 800832c:	d139      	bne.n	80083a2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	f012 0f20 	tst.w	r2, #32
 8008336:	d003      	beq.n	8008340 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	f012 0f20 	tst.w	r2, #32
 800833e:	d137      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x18c>
}
 8008340:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	f7ff ff6b 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff ff6a 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
 800834c:	e781      	b.n	8008252 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834e:	4620      	mov	r0, r4
 8008350:	f7ff ff64 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008354:	4620      	mov	r0, r4
 8008356:	f7ff ff63 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
 800835a:	e792      	b.n	8008282 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835c:	4620      	mov	r0, r4
 800835e:	f7ff ff5d 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008362:	4620      	mov	r0, r4
 8008364:	f7ff ff5c 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
 8008368:	e7a3      	b.n	80082b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff ff56 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008370:	4620      	mov	r0, r4
 8008372:	f7ff ff55 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
 8008376:	e7b4      	b.n	80082e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008378:	f06f 0201 	mvn.w	r2, #1
 800837c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800837e:	4620      	mov	r0, r4
 8008380:	f7f9 fd10 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
 8008384:	e7b8      	b.n	80082f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800838a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f8ca 	bl	8008526 <HAL_TIMEx_BreakCallback>
 8008392:	e7ba      	b.n	800830a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008394:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008398:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f8c4 	bl	8008528 <HAL_TIMEx_Break2Callback>
 80083a0:	e7bc      	b.n	800831c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff ff3a 	bl	8008222 <HAL_TIM_TriggerCallback>
 80083ae:	e7be      	b.n	800832e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083b0:	f06f 0220 	mvn.w	r2, #32
 80083b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f8b4 	bl	8008524 <HAL_TIMEx_CommutCallback>
}
 80083bc:	e7c0      	b.n	8008340 <HAL_TIM_IRQHandler+0x11c>
	...

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083c2:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c4:	4a39      	ldr	r2, [pc, #228]	; (80084ac <TIM_Base_SetConfig+0xec>)
 80083c6:	4290      	cmp	r0, r2
 80083c8:	bf14      	ite	ne
 80083ca:	f04f 0e00 	movne.w	lr, #0
 80083ce:	f04f 0e01 	moveq.w	lr, #1
 80083d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083d6:	bf14      	ite	ne
 80083d8:	4672      	movne	r2, lr
 80083da:	f04e 0201 	orreq.w	r2, lr, #1
 80083de:	b9aa      	cbnz	r2, 800840c <TIM_Base_SetConfig+0x4c>
 80083e0:	4c33      	ldr	r4, [pc, #204]	; (80084b0 <TIM_Base_SetConfig+0xf0>)
 80083e2:	42a0      	cmp	r0, r4
 80083e4:	bf14      	ite	ne
 80083e6:	2400      	movne	r4, #0
 80083e8:	2401      	moveq	r4, #1
 80083ea:	4d32      	ldr	r5, [pc, #200]	; (80084b4 <TIM_Base_SetConfig+0xf4>)
 80083ec:	42a8      	cmp	r0, r5
 80083ee:	d00d      	beq.n	800840c <TIM_Base_SetConfig+0x4c>
 80083f0:	b964      	cbnz	r4, 800840c <TIM_Base_SetConfig+0x4c>
 80083f2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80083f6:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80083fa:	42a0      	cmp	r0, r4
 80083fc:	bf14      	ite	ne
 80083fe:	2400      	movne	r4, #0
 8008400:	2401      	moveq	r4, #1
 8008402:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008406:	42a8      	cmp	r0, r5
 8008408:	d000      	beq.n	800840c <TIM_Base_SetConfig+0x4c>
 800840a:	b11c      	cbz	r4, 8008414 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800840c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008410:	684c      	ldr	r4, [r1, #4]
 8008412:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008414:	bb12      	cbnz	r2, 800845c <TIM_Base_SetConfig+0x9c>
 8008416:	4a26      	ldr	r2, [pc, #152]	; (80084b0 <TIM_Base_SetConfig+0xf0>)
 8008418:	4290      	cmp	r0, r2
 800841a:	bf14      	ite	ne
 800841c:	2200      	movne	r2, #0
 800841e:	2201      	moveq	r2, #1
 8008420:	4c24      	ldr	r4, [pc, #144]	; (80084b4 <TIM_Base_SetConfig+0xf4>)
 8008422:	42a0      	cmp	r0, r4
 8008424:	d01a      	beq.n	800845c <TIM_Base_SetConfig+0x9c>
 8008426:	b9ca      	cbnz	r2, 800845c <TIM_Base_SetConfig+0x9c>
 8008428:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800842c:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8008430:	4290      	cmp	r0, r2
 8008432:	bf14      	ite	ne
 8008434:	2200      	movne	r2, #0
 8008436:	2201      	moveq	r2, #1
 8008438:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800843c:	42a0      	cmp	r0, r4
 800843e:	d00d      	beq.n	800845c <TIM_Base_SetConfig+0x9c>
 8008440:	b962      	cbnz	r2, 800845c <TIM_Base_SetConfig+0x9c>
 8008442:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <TIM_Base_SetConfig+0xf8>)
 8008444:	4290      	cmp	r0, r2
 8008446:	bf14      	ite	ne
 8008448:	2200      	movne	r2, #0
 800844a:	2201      	moveq	r2, #1
 800844c:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8008450:	42a0      	cmp	r0, r4
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0x9c>
 8008454:	b912      	cbnz	r2, 800845c <TIM_Base_SetConfig+0x9c>
 8008456:	4a19      	ldr	r2, [pc, #100]	; (80084bc <TIM_Base_SetConfig+0xfc>)
 8008458:	4290      	cmp	r0, r2
 800845a:	d104      	bne.n	8008466 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008460:	68cb      	ldr	r3, [r1, #12]
 8008462:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800846a:	694a      	ldr	r2, [r1, #20]
 800846c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800846e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008470:	688a      	ldr	r2, [r1, #8]
 8008472:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008474:	680a      	ldr	r2, [r1, #0]
 8008476:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008478:	4a11      	ldr	r2, [pc, #68]	; (80084c0 <TIM_Base_SetConfig+0x100>)
 800847a:	4290      	cmp	r0, r2
 800847c:	bf14      	ite	ne
 800847e:	4673      	movne	r3, lr
 8008480:	f04e 0301 	orreq.w	r3, lr, #1
 8008484:	b963      	cbnz	r3, 80084a0 <TIM_Base_SetConfig+0xe0>
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <TIM_Base_SetConfig+0xf8>)
 8008488:	4298      	cmp	r0, r3
 800848a:	bf14      	ite	ne
 800848c:	2300      	movne	r3, #0
 800848e:	2301      	moveq	r3, #1
 8008490:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008494:	4290      	cmp	r0, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0xe0>
 8008498:	b913      	cbnz	r3, 80084a0 <TIM_Base_SetConfig+0xe0>
 800849a:	4b08      	ldr	r3, [pc, #32]	; (80084bc <TIM_Base_SetConfig+0xfc>)
 800849c:	4298      	cmp	r0, r3
 800849e:	d101      	bne.n	80084a4 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	2301      	movs	r3, #1
 80084a6:	6143      	str	r3, [r0, #20]
}
 80084a8:	bd30      	pop	{r4, r5, pc}
 80084aa:	bf00      	nop
 80084ac:	40010000 	.word	0x40010000
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40014400 	.word	0x40014400
 80084bc:	40014800 	.word	0x40014800
 80084c0:	40010400 	.word	0x40010400

080084c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80084c4:	b360      	cbz	r0, 8008520 <HAL_TIM_Base_Init+0x5c>
{
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80084ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084ce:	b313      	cbz	r3, 8008516 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	2302      	movs	r3, #2
 80084d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d6:	4621      	mov	r1, r4
 80084d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80084dc:	f7ff ff70 	bl	80083c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80084ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80084ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80084f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80084f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008506:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800850a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800850e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008512:	2000      	movs	r0, #0
}
 8008514:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008516:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800851a:	f7ff fe35 	bl	8008188 <HAL_TIM_Base_MspInit>
 800851e:	e7d7      	b.n	80084d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008520:	2001      	movs	r0, #1
}
 8008522:	4770      	bx	lr

08008524 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008524:	4770      	bx	lr

08008526 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008528:	4770      	bx	lr

0800852a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800852a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800852c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008530:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008532:	f001 ff9f 	bl	800a474 <xTaskGetSchedulerState>
 8008536:	2801      	cmp	r0, #1
 8008538:	d100      	bne.n	800853c <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800853a:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800853c:	f000 fc7a 	bl	8008e34 <xPortSysTickHandler>
}
 8008540:	e7fb      	b.n	800853a <SysTick_Handler+0x10>
	...

08008544 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008544:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008548:	b92b      	cbnz	r3, 8008556 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800854a:	4b06      	ldr	r3, [pc, #24]	; (8008564 <osKernelInitialize+0x20>)
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	b928      	cbnz	r0, 800855c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008550:	2201      	movs	r2, #1
 8008552:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008554:	4770      	bx	lr
    stat = osErrorISR;
 8008556:	f06f 0005 	mvn.w	r0, #5
 800855a:	4770      	bx	lr
    } else {
      stat = osError;
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	240022ac 	.word	0x240022ac

08008568 <osKernelStart>:
 8008568:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800856c:	b973      	cbnz	r3, 800858c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <osKernelStart+0x30>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d10d      	bne.n	8008592 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8008576:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008578:	2400      	movs	r4, #0
 800857a:	4b08      	ldr	r3, [pc, #32]	; (800859c <osKernelStart+0x34>)
 800857c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <osKernelStart+0x30>)
 8008580:	2202      	movs	r2, #2
 8008582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008584:	f001 fcc6 	bl	8009f14 <vTaskStartScheduler>
      stat = osOK;
 8008588:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800858a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800858c:	f06f 0005 	mvn.w	r0, #5
 8008590:	4770      	bx	lr
      stat = osError;
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008596:	4770      	bx	lr
 8008598:	240022ac 	.word	0x240022ac
 800859c:	e000ed00 	.word	0xe000ed00

080085a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085a4:	2400      	movs	r4, #0
 80085a6:	9405      	str	r4, [sp, #20]
 80085a8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80085ac:	bb74      	cbnz	r4, 800860c <osThreadNew+0x6c>
 80085ae:	b368      	cbz	r0, 800860c <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80085b0:	b322      	cbz	r2, 80085fc <osThreadNew+0x5c>
      if (attr->name != NULL) {
 80085b2:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80085b4:	6993      	ldr	r3, [r2, #24]
 80085b6:	b903      	cbnz	r3, 80085ba <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80085b8:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085ba:	1e5c      	subs	r4, r3, #1
 80085bc:	2c37      	cmp	r4, #55	; 0x37
 80085be:	d849      	bhi.n	8008654 <osThreadNew+0xb4>
 80085c0:	6854      	ldr	r4, [r2, #4]
 80085c2:	f014 0f01 	tst.w	r4, #1
 80085c6:	d147      	bne.n	8008658 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80085c8:	6956      	ldr	r6, [r2, #20]
 80085ca:	b16e      	cbz	r6, 80085e8 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085cc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d0:	6894      	ldr	r4, [r2, #8]
 80085d2:	b12c      	cbz	r4, 80085e0 <osThreadNew+0x40>
 80085d4:	68d7      	ldr	r7, [r2, #12]
 80085d6:	2fbb      	cmp	r7, #187	; 0xbb
 80085d8:	d902      	bls.n	80085e0 <osThreadNew+0x40>
 80085da:	6917      	ldr	r7, [r2, #16]
 80085dc:	b107      	cbz	r7, 80085e0 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085de:	b9c6      	cbnz	r6, 8008612 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085e0:	b12c      	cbz	r4, 80085ee <osThreadNew+0x4e>
    mem  = -1;
 80085e2:	f04f 34ff 	mov.w	r4, #4294967295
 80085e6:	e00e      	b.n	8008606 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80085e8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80085ec:	e7f0      	b.n	80085d0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085ee:	68d4      	ldr	r4, [r2, #12]
 80085f0:	b98c      	cbnz	r4, 8008616 <osThreadNew+0x76>
 80085f2:	6914      	ldr	r4, [r2, #16]
 80085f4:	b194      	cbz	r4, 800861c <osThreadNew+0x7c>
    mem  = -1;
 80085f6:	f04f 34ff 	mov.w	r4, #4294967295
 80085fa:	e004      	b.n	8008606 <osThreadNew+0x66>
    name = NULL;
 80085fc:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80085fe:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008600:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008602:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8008606:	2c01      	cmp	r4, #1
 8008608:	d00a      	beq.n	8008620 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800860a:	b1ac      	cbz	r4, 8008638 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800860c:	9805      	ldr	r0, [sp, #20]
}
 800860e:	b007      	add	sp, #28
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008612:	2401      	movs	r4, #1
 8008614:	e7f7      	b.n	8008606 <osThreadNew+0x66>
    mem  = -1;
 8008616:	f04f 34ff 	mov.w	r4, #4294967295
 800861a:	e7f4      	b.n	8008606 <osThreadNew+0x66>
          mem = 0;
 800861c:	2400      	movs	r4, #0
 800861e:	e7f2      	b.n	8008606 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008620:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008622:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008624:	9202      	str	r2, [sp, #8]
 8008626:	9401      	str	r4, [sp, #4]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	460b      	mov	r3, r1
 800862c:	4662      	mov	r2, ip
 800862e:	4629      	mov	r1, r5
 8008630:	f001 fc00 	bl	8009e34 <xTaskCreateStatic>
 8008634:	9005      	str	r0, [sp, #20]
 8008636:	e7e9      	b.n	800860c <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008638:	aa05      	add	r2, sp, #20
 800863a:	9201      	str	r2, [sp, #4]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	460b      	mov	r3, r1
 8008640:	fa1f f28c 	uxth.w	r2, ip
 8008644:	4629      	mov	r1, r5
 8008646:	f001 fc30 	bl	8009eaa <xTaskCreate>
 800864a:	2801      	cmp	r0, #1
 800864c:	d0de      	beq.n	800860c <osThreadNew+0x6c>
            hTask = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	e7db      	b.n	800860c <osThreadNew+0x6c>
        return (NULL);
 8008654:	2000      	movs	r0, #0
 8008656:	e7da      	b.n	800860e <osThreadNew+0x6e>
 8008658:	2000      	movs	r0, #0
 800865a:	e7d8      	b.n	800860e <osThreadNew+0x6e>

0800865c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800865c:	b508      	push	{r3, lr}
 800865e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008662:	b933      	cbnz	r3, 8008672 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008664:	b908      	cbnz	r0, 800866a <osDelay+0xe>
    stat = osOK;
 8008666:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008668:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800866a:	f001 fdbf 	bl	800a1ec <vTaskDelay>
    stat = osOK;
 800866e:	2000      	movs	r0, #0
 8008670:	e7fa      	b.n	8008668 <osDelay+0xc>
    stat = osErrorISR;
 8008672:	f06f 0005 	mvn.w	r0, #5
 8008676:	e7f7      	b.n	8008668 <osDelay+0xc>

08008678 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008680:	2b00      	cmp	r3, #0
 8008682:	d14d      	bne.n	8008720 <osSemaphoreNew+0xa8>
 8008684:	460e      	mov	r6, r1
 8008686:	4614      	mov	r4, r2
 8008688:	4288      	cmp	r0, r1
 800868a:	bf34      	ite	cc
 800868c:	2300      	movcc	r3, #0
 800868e:	2301      	movcs	r3, #1
 8008690:	2800      	cmp	r0, #0
 8008692:	d049      	beq.n	8008728 <osSemaphoreNew+0xb0>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d047      	beq.n	8008728 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 8008698:	b14a      	cbz	r2, 80086ae <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800869a:	6895      	ldr	r5, [r2, #8]
 800869c:	b115      	cbz	r5, 80086a4 <osSemaphoreNew+0x2c>
 800869e:	68d3      	ldr	r3, [r2, #12]
 80086a0:	2b4f      	cmp	r3, #79	; 0x4f
 80086a2:	d814      	bhi.n	80086ce <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d141      	bne.n	800872c <osSemaphoreNew+0xb4>
 80086a8:	68e3      	ldr	r3, [r4, #12]
 80086aa:	b10b      	cbz	r3, 80086b0 <osSemaphoreNew+0x38>
 80086ac:	e039      	b.n	8008722 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80086ae:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80086b0:	2801      	cmp	r0, #1
 80086b2:	d00e      	beq.n	80086d2 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80086b4:	bb73      	cbnz	r3, 8008714 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80086b6:	4631      	mov	r1, r6
 80086b8:	f000 fe35 	bl	8009326 <xQueueCreateCountingSemaphore>
 80086bc:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80086be:	b385      	cbz	r5, 8008722 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 80086c0:	b104      	cbz	r4, 80086c4 <osSemaphoreNew+0x4c>
          name = attr->name;
 80086c2:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f001 f9a6 	bl	8009a18 <vQueueAddToRegistry>
 80086cc:	e029      	b.n	8008722 <osSemaphoreNew+0xaa>
        mem = 1;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e7ee      	b.n	80086b0 <osSemaphoreNew+0x38>
        if (mem == 1) {
 80086d2:	b9b3      	cbnz	r3, 8008702 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 80086d4:	2203      	movs	r2, #3
 80086d6:	2100      	movs	r1, #0
 80086d8:	2001      	movs	r0, #1
 80086da:	f000 fddd 	bl	8009298 <xQueueGenericCreate>
 80086de:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	bf18      	it	ne
 80086e4:	2e00      	cmpne	r6, #0
 80086e6:	d0ea      	beq.n	80086be <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086e8:	2300      	movs	r3, #0
 80086ea:	461a      	mov	r2, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 fe37 	bl	8009362 <xQueueGenericSend>
 80086f4:	2801      	cmp	r0, #1
 80086f6:	d0e2      	beq.n	80086be <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 80086f8:	4628      	mov	r0, r5
 80086fa:	f001 f9b7 	bl	8009a6c <vQueueDelete>
            hSemaphore = NULL;
 80086fe:	2500      	movs	r5, #0
 8008700:	e00f      	b.n	8008722 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	2203      	movs	r2, #3
 8008706:	9200      	str	r2, [sp, #0]
 8008708:	2200      	movs	r2, #0
 800870a:	4611      	mov	r1, r2
 800870c:	f000 fd71 	bl	80091f2 <xQueueGenericCreateStatic>
 8008710:	4605      	mov	r5, r0
 8008712:	e7e5      	b.n	80086e0 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008714:	68a2      	ldr	r2, [r4, #8]
 8008716:	4631      	mov	r1, r6
 8008718:	f000 fde2 	bl	80092e0 <xQueueCreateCountingSemaphoreStatic>
 800871c:	4605      	mov	r5, r0
 800871e:	e7ce      	b.n	80086be <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 8008720:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008722:	4628      	mov	r0, r5
 8008724:	b002      	add	sp, #8
 8008726:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8008728:	2500      	movs	r5, #0
 800872a:	e7fa      	b.n	8008722 <osSemaphoreNew+0xaa>
 800872c:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800872e:	e7f8      	b.n	8008722 <osSemaphoreNew+0xaa>

08008730 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008730:	b320      	cbz	r0, 800877c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008732:	b510      	push	{r4, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	460c      	mov	r4, r1
 8008738:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800873c:	b1b3      	cbz	r3, 800876c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800873e:	bb01      	cbnz	r1, 8008782 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008740:	2100      	movs	r1, #0
 8008742:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008744:	aa01      	add	r2, sp, #4
 8008746:	f001 f912 	bl	800996e <xQueueReceiveFromISR>
 800874a:	2801      	cmp	r0, #1
 800874c:	d11c      	bne.n	8008788 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800874e:	9801      	ldr	r0, [sp, #4]
 8008750:	b150      	cbz	r0, 8008768 <osSemaphoreAcquire+0x38>
 8008752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008766:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008768:	b002      	add	sp, #8
 800876a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800876c:	f001 f82c 	bl	80097c8 <xQueueSemaphoreTake>
 8008770:	2801      	cmp	r0, #1
 8008772:	d00c      	beq.n	800878e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8008774:	b16c      	cbz	r4, 8008792 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 8008776:	f06f 0001 	mvn.w	r0, #1
 800877a:	e7f5      	b.n	8008768 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800877c:	f06f 0003 	mvn.w	r0, #3
}
 8008780:	4770      	bx	lr
      stat = osErrorParameter;
 8008782:	f06f 0003 	mvn.w	r0, #3
 8008786:	e7ef      	b.n	8008768 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8008788:	f06f 0002 	mvn.w	r0, #2
 800878c:	e7ec      	b.n	8008768 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800878e:	2000      	movs	r0, #0
 8008790:	e7ea      	b.n	8008768 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8008792:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008796:	e7e7      	b.n	8008768 <osSemaphoreAcquire+0x38>

08008798 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008798:	b320      	cbz	r0, 80087e4 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800879a:	b500      	push	{lr}
 800879c:	b083      	sub	sp, #12
 800879e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80087a2:	b1a3      	cbz	r3, 80087ce <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80087a8:	a901      	add	r1, sp, #4
 80087aa:	f000 ff05 	bl	80095b8 <xQueueGiveFromISR>
 80087ae:	2801      	cmp	r0, #1
 80087b0:	d11b      	bne.n	80087ea <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80087b2:	9801      	ldr	r0, [sp, #4]
 80087b4:	b198      	cbz	r0, 80087de <osSemaphoreRelease+0x46>
 80087b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80087ca:	2000      	movs	r0, #0
 80087cc:	e007      	b.n	80087de <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80087ce:	2300      	movs	r3, #0
 80087d0:	461a      	mov	r2, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	f000 fdc5 	bl	8009362 <xQueueGenericSend>
 80087d8:	2801      	cmp	r0, #1
 80087da:	d109      	bne.n	80087f0 <osSemaphoreRelease+0x58>
  stat = osOK;
 80087dc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80087de:	b003      	add	sp, #12
 80087e0:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 80087e4:	f06f 0003 	mvn.w	r0, #3
}
 80087e8:	4770      	bx	lr
      stat = osErrorResource;
 80087ea:	f06f 0002 	mvn.w	r0, #2
 80087ee:	e7f6      	b.n	80087de <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80087f0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80087f4:	e7f3      	b.n	80087de <osSemaphoreRelease+0x46>

080087f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d13d      	bne.n	800887e <osMessageQueueNew+0x88>
 8008802:	4614      	mov	r4, r2
 8008804:	1e0b      	subs	r3, r1, #0
 8008806:	bf18      	it	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2800      	cmp	r0, #0
 800880c:	d03b      	beq.n	8008886 <osMessageQueueNew+0x90>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d039      	beq.n	8008886 <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 8008812:	b36a      	cbz	r2, 8008870 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008814:	6893      	ldr	r3, [r2, #8]
 8008816:	b14b      	cbz	r3, 800882c <osMessageQueueNew+0x36>
 8008818:	68d2      	ldr	r2, [r2, #12]
 800881a:	2a4f      	cmp	r2, #79	; 0x4f
 800881c:	d906      	bls.n	800882c <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800881e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008820:	b122      	cbz	r2, 800882c <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008822:	fb01 f500 	mul.w	r5, r1, r0
 8008826:	6966      	ldr	r6, [r4, #20]
 8008828:	42ae      	cmp	r6, r5
 800882a:	d21b      	bcs.n	8008864 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800882c:	b173      	cbz	r3, 800884c <osMessageQueueNew+0x56>
    mem = -1;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008832:	bb53      	cbnz	r3, 800888a <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008834:	2200      	movs	r2, #0
 8008836:	f000 fd2f 	bl	8009298 <xQueueGenericCreate>
 800883a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800883c:	b305      	cbz	r5, 8008880 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800883e:	b104      	cbz	r4, 8008842 <osMessageQueueNew+0x4c>
        name = attr->name;
 8008840:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f001 f8e7 	bl	8009a18 <vQueueAddToRegistry>
 800884a:	e019      	b.n	8008880 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800884c:	68e3      	ldr	r3, [r4, #12]
 800884e:	b98b      	cbnz	r3, 8008874 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008850:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008852:	b113      	cbz	r3, 800885a <osMessageQueueNew+0x64>
    mem = -1;
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
 8008858:	e7eb      	b.n	8008832 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800885a:	6963      	ldr	r3, [r4, #20]
 800885c:	b16b      	cbz	r3, 800887a <osMessageQueueNew+0x84>
    mem = -1;
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
 8008862:	e7e6      	b.n	8008832 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008864:	2500      	movs	r5, #0
 8008866:	9500      	str	r5, [sp, #0]
 8008868:	f000 fcc3 	bl	80091f2 <xQueueGenericCreateStatic>
 800886c:	4605      	mov	r5, r0
 800886e:	e7e5      	b.n	800883c <osMessageQueueNew+0x46>
      mem = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	e7de      	b.n	8008832 <osMessageQueueNew+0x3c>
    mem = -1;
 8008874:	f04f 33ff 	mov.w	r3, #4294967295
 8008878:	e7db      	b.n	8008832 <osMessageQueueNew+0x3c>
          mem = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	e7d9      	b.n	8008832 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800887e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008880:	4628      	mov	r0, r5
 8008882:	b002      	add	sp, #8
 8008884:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8008886:	2500      	movs	r5, #0
 8008888:	e7fa      	b.n	8008880 <osMessageQueueNew+0x8a>
 800888a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800888c:	e7f8      	b.n	8008880 <osMessageQueueNew+0x8a>

0800888e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800888e:	b510      	push	{r4, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	461c      	mov	r4, r3
 8008894:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008898:	b1d3      	cbz	r3, 80088d0 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800889a:	2900      	cmp	r1, #0
 800889c:	bf18      	it	ne
 800889e:	2800      	cmpne	r0, #0
 80088a0:	d024      	beq.n	80088ec <osMessageQueuePut+0x5e>
 80088a2:	bb34      	cbnz	r4, 80088f2 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088a8:	aa01      	add	r2, sp, #4
 80088aa:	f000 fe1e 	bl	80094ea <xQueueGenericSendFromISR>
 80088ae:	2801      	cmp	r0, #1
 80088b0:	d122      	bne.n	80088f8 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80088b2:	9801      	ldr	r0, [sp, #4]
 80088b4:	b150      	cbz	r0, 80088cc <osMessageQueuePut+0x3e>
 80088b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80088ca:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80088cc:	b002      	add	sp, #8
 80088ce:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088d0:	2900      	cmp	r1, #0
 80088d2:	bf18      	it	ne
 80088d4:	2800      	cmpne	r0, #0
 80088d6:	d012      	beq.n	80088fe <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088d8:	2300      	movs	r3, #0
 80088da:	4622      	mov	r2, r4
 80088dc:	f000 fd41 	bl	8009362 <xQueueGenericSend>
 80088e0:	2801      	cmp	r0, #1
 80088e2:	d00f      	beq.n	8008904 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 80088e4:	b184      	cbz	r4, 8008908 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 80088e6:	f06f 0001 	mvn.w	r0, #1
 80088ea:	e7ef      	b.n	80088cc <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088ec:	f06f 0003 	mvn.w	r0, #3
 80088f0:	e7ec      	b.n	80088cc <osMessageQueuePut+0x3e>
 80088f2:	f06f 0003 	mvn.w	r0, #3
 80088f6:	e7e9      	b.n	80088cc <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 80088f8:	f06f 0002 	mvn.w	r0, #2
 80088fc:	e7e6      	b.n	80088cc <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088fe:	f06f 0003 	mvn.w	r0, #3
 8008902:	e7e3      	b.n	80088cc <osMessageQueuePut+0x3e>
  stat = osOK;
 8008904:	2000      	movs	r0, #0
 8008906:	e7e1      	b.n	80088cc <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 8008908:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800890c:	e7de      	b.n	80088cc <osMessageQueuePut+0x3e>

0800890e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800890e:	b510      	push	{r4, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	461c      	mov	r4, r3
 8008914:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008918:	b1d3      	cbz	r3, 8008950 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800891a:	2900      	cmp	r1, #0
 800891c:	bf18      	it	ne
 800891e:	2800      	cmpne	r0, #0
 8008920:	d023      	beq.n	800896a <osMessageQueueGet+0x5c>
 8008922:	bb2c      	cbnz	r4, 8008970 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008924:	2300      	movs	r3, #0
 8008926:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008928:	aa01      	add	r2, sp, #4
 800892a:	f001 f820 	bl	800996e <xQueueReceiveFromISR>
 800892e:	2801      	cmp	r0, #1
 8008930:	d121      	bne.n	8008976 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008932:	9801      	ldr	r0, [sp, #4]
 8008934:	b150      	cbz	r0, 800894c <osMessageQueueGet+0x3e>
 8008936:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800894a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800894c:	b002      	add	sp, #8
 800894e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008950:	2900      	cmp	r1, #0
 8008952:	bf18      	it	ne
 8008954:	2800      	cmpne	r0, #0
 8008956:	d011      	beq.n	800897c <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008958:	4622      	mov	r2, r4
 800895a:	f000 fe86 	bl	800966a <xQueueReceive>
 800895e:	2801      	cmp	r0, #1
 8008960:	d00f      	beq.n	8008982 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 8008962:	b184      	cbz	r4, 8008986 <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 8008964:	f06f 0001 	mvn.w	r0, #1
 8008968:	e7f0      	b.n	800894c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800896a:	f06f 0003 	mvn.w	r0, #3
 800896e:	e7ed      	b.n	800894c <osMessageQueueGet+0x3e>
 8008970:	f06f 0003 	mvn.w	r0, #3
 8008974:	e7ea      	b.n	800894c <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 8008976:	f06f 0002 	mvn.w	r0, #2
 800897a:	e7e7      	b.n	800894c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800897c:	f06f 0003 	mvn.w	r0, #3
 8008980:	e7e4      	b.n	800894c <osMessageQueueGet+0x3e>
  stat = osOK;
 8008982:	2000      	movs	r0, #0
 8008984:	e7e2      	b.n	800894c <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 8008986:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800898a:	e7df      	b.n	800894c <osMessageQueueGet+0x3e>

0800898c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800898c:	4b03      	ldr	r3, [pc, #12]	; (800899c <vApplicationGetIdleTaskMemory+0x10>)
 800898e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008990:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <vApplicationGetIdleTaskMemory+0x14>)
 8008992:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008994:	2380      	movs	r3, #128	; 0x80
 8008996:	6013      	str	r3, [r2, #0]
}
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	240021f0 	.word	0x240021f0
 80089a0:	24001ff0 	.word	0x24001ff0

080089a4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089a4:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <vApplicationGetTimerTaskMemory+0x10>)
 80089a6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089a8:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <vApplicationGetTimerTaskMemory+0x14>)
 80089aa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b0:	6013      	str	r3, [r2, #0]
}
 80089b2:	4770      	bx	lr
 80089b4:	240026b0 	.word	0x240026b0
 80089b8:	240022b0 	.word	0x240022b0

080089bc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089bc:	4a12      	ldr	r2, [pc, #72]	; (8008a08 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089be:	f012 0f07 	tst.w	r2, #7
 80089c2:	d01e      	beq.n	8008a02 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089c4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089c6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ca:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 80089ce:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089d2:	480e      	ldr	r0, [pc, #56]	; (8008a0c <prvHeapInit+0x50>)
 80089d4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089d6:	2100      	movs	r1, #0
 80089d8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089da:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80089dc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089de:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80089e2:	480b      	ldr	r0, [pc, #44]	; (8008a10 <prvHeapInit+0x54>)
 80089e4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80089e6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089e8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ea:	1a99      	subs	r1, r3, r2
 80089ec:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089ee:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <prvHeapInit+0x58>)
 80089f2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <prvHeapInit+0x5c>)
 80089f6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <prvHeapInit+0x60>)
 80089fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089fe:	601a      	str	r2, [r3, #0]
}
 8008a00:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a06:	e7e4      	b.n	80089d2 <prvHeapInit+0x16>
 8008a08:	24002770 	.word	0x24002770
 8008a0c:	2400a784 	.word	0x2400a784
 8008a10:	2400276c 	.word	0x2400276c
 8008a14:	2400a778 	.word	0x2400a778
 8008a18:	2400a774 	.word	0x2400a774
 8008a1c:	2400a770 	.word	0x2400a770

08008a20 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <prvInsertBlockIntoFreeList+0x5c>)
 8008a22:	461a      	mov	r2, r3
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4283      	cmp	r3, r0
 8008a28:	d3fb      	bcc.n	8008a22 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a2a:	6851      	ldr	r1, [r2, #4]
 8008a2c:	eb02 0c01 	add.w	ip, r2, r1
 8008a30:	4584      	cmp	ip, r0
 8008a32:	d009      	beq.n	8008a48 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a34:	6841      	ldr	r1, [r0, #4]
 8008a36:	eb00 0c01 	add.w	ip, r0, r1
 8008a3a:	4563      	cmp	r3, ip
 8008a3c:	d009      	beq.n	8008a52 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a3e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a40:	4290      	cmp	r0, r2
 8008a42:	d019      	beq.n	8008a78 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a44:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8008a46:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a48:	6840      	ldr	r0, [r0, #4]
 8008a4a:	4401      	add	r1, r0
 8008a4c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008a4e:	4610      	mov	r0, r2
 8008a50:	e7f0      	b.n	8008a34 <prvInsertBlockIntoFreeList+0x14>
{
 8008a52:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a54:	4c0a      	ldr	r4, [pc, #40]	; (8008a80 <prvInsertBlockIntoFreeList+0x60>)
 8008a56:	6824      	ldr	r4, [r4, #0]
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d00b      	beq.n	8008a74 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	4419      	add	r1, r3
 8008a60:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008a68:	4290      	cmp	r0, r2
 8008a6a:	d000      	beq.n	8008a6e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a6c:	6010      	str	r0, [r2, #0]
	}
}
 8008a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a72:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a74:	6004      	str	r4, [r0, #0]
 8008a76:	e7f7      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x48>
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	2400a784 	.word	0x2400a784
 8008a80:	2400276c 	.word	0x2400276c

08008a84 <pvPortMalloc>:
{
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8008a88:	f001 fa9a 	bl	8009fc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008a8c:	4b36      	ldr	r3, [pc, #216]	; (8008b68 <pvPortMalloc+0xe4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	b1a3      	cbz	r3, 8008abc <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a92:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <pvPortMalloc+0xe8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	421d      	tst	r5, r3
 8008a98:	d14e      	bne.n	8008b38 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8008a9a:	b135      	cbz	r5, 8008aaa <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8008a9c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a9e:	f015 0f07 	tst.w	r5, #7
 8008aa2:	d002      	beq.n	8008aaa <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aa4:	f025 0507 	bic.w	r5, r5, #7
 8008aa8:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	d046      	beq.n	8008b3c <pvPortMalloc+0xb8>
 8008aae:	4b30      	ldr	r3, [pc, #192]	; (8008b70 <pvPortMalloc+0xec>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	42ab      	cmp	r3, r5
 8008ab4:	d351      	bcc.n	8008b5a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8008ab6:	4a2f      	ldr	r2, [pc, #188]	; (8008b74 <pvPortMalloc+0xf0>)
 8008ab8:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aba:	e004      	b.n	8008ac6 <pvPortMalloc+0x42>
			prvHeapInit();
 8008abc:	f7ff ff7e 	bl	80089bc <prvHeapInit>
 8008ac0:	e7e7      	b.n	8008a92 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008ac2:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ac4:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	d202      	bcs.n	8008ad2 <pvPortMalloc+0x4e>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f7      	bne.n	8008ac2 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008ad2:	4b25      	ldr	r3, [pc, #148]	; (8008b68 <pvPortMalloc+0xe4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	d041      	beq.n	8008b5e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ada:	6816      	ldr	r6, [r2, #0]
 8008adc:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ae2:	6863      	ldr	r3, [r4, #4]
 8008ae4:	1b5b      	subs	r3, r3, r5
 8008ae6:	2b10      	cmp	r3, #16
 8008ae8:	d910      	bls.n	8008b0c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aea:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aec:	f010 0f07 	tst.w	r0, #7
 8008af0:	d008      	beq.n	8008b04 <pvPortMalloc+0x80>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	e7fe      	b.n	8008b02 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b04:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b06:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b08:	f7ff ff8a 	bl	8008a20 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b0c:	6862      	ldr	r2, [r4, #4]
 8008b0e:	4918      	ldr	r1, [pc, #96]	; (8008b70 <pvPortMalloc+0xec>)
 8008b10:	680b      	ldr	r3, [r1, #0]
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b16:	4918      	ldr	r1, [pc, #96]	; (8008b78 <pvPortMalloc+0xf4>)
 8008b18:	6809      	ldr	r1, [r1, #0]
 8008b1a:	428b      	cmp	r3, r1
 8008b1c:	d201      	bcs.n	8008b22 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b1e:	4916      	ldr	r1, [pc, #88]	; (8008b78 <pvPortMalloc+0xf4>)
 8008b20:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <pvPortMalloc+0xe8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8008b2e:	4a13      	ldr	r2, [pc, #76]	; (8008b7c <pvPortMalloc+0xf8>)
 8008b30:	6813      	ldr	r3, [r2, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	e002      	b.n	8008b3e <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8008b38:	2600      	movs	r6, #0
 8008b3a:	e000      	b.n	8008b3e <pvPortMalloc+0xba>
 8008b3c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8008b3e:	f001 fad9 	bl	800a0f4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b42:	f016 0f07 	tst.w	r6, #7
 8008b46:	d00c      	beq.n	8008b62 <pvPortMalloc+0xde>
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	e7fe      	b.n	8008b58 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	e7ef      	b.n	8008b3e <pvPortMalloc+0xba>
 8008b5e:	2600      	movs	r6, #0
 8008b60:	e7ed      	b.n	8008b3e <pvPortMalloc+0xba>
}
 8008b62:	4630      	mov	r0, r6
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	bf00      	nop
 8008b68:	2400276c 	.word	0x2400276c
 8008b6c:	2400a770 	.word	0x2400a770
 8008b70:	2400a774 	.word	0x2400a774
 8008b74:	2400a784 	.word	0x2400a784
 8008b78:	2400a778 	.word	0x2400a778
 8008b7c:	2400a77c 	.word	0x2400a77c

08008b80 <vPortFree>:
	if( pv != NULL )
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d034      	beq.n	8008bee <vPortFree+0x6e>
{
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008b88:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b8c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <vPortFree+0x70>)
 8008b92:	6812      	ldr	r2, [r2, #0]
 8008b94:	4213      	tst	r3, r2
 8008b96:	d108      	bne.n	8008baa <vPortFree+0x2a>
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	e7fe      	b.n	8008ba8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008baa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008bae:	b141      	cbz	r1, 8008bc2 <vPortFree+0x42>
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	e7fe      	b.n	8008bc0 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bc2:	ea23 0302 	bic.w	r3, r3, r2
 8008bc6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008bca:	f001 f9f9 	bl	8009fc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bce:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008bd2:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <vPortFree+0x74>)
 8008bd4:	6813      	ldr	r3, [r2, #0]
 8008bd6:	440b      	add	r3, r1
 8008bd8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7ff ff20 	bl	8008a20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008be0:	4a05      	ldr	r2, [pc, #20]	; (8008bf8 <vPortFree+0x78>)
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	3301      	adds	r3, #1
 8008be6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008be8:	f001 fa84 	bl	800a0f4 <xTaskResumeAll>
}
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	4770      	bx	lr
 8008bf0:	2400a770 	.word	0x2400a770
 8008bf4:	2400a774 	.word	0x2400a774
 8008bf8:	2400a780 	.word	0x2400a780

08008bfc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bfc:	f100 0308 	add.w	r3, r0, #8
 8008c00:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c08:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c10:	4770      	bx	lr

08008c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c16:	4770      	bx	lr

08008c18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c18:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c1a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c20:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c22:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008c26:	6803      	ldr	r3, [r0, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	6003      	str	r3, [r0, #0]
}
 8008c2c:	4770      	bx	lr

08008c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c2e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c30:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008c36:	d011      	beq.n	8008c5c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c38:	f100 0308 	add.w	r3, r0, #8
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	42aa      	cmp	r2, r5
 8008c44:	d9fa      	bls.n	8008c3c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c4a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c4c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c4e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c50:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	6003      	str	r3, [r0, #0]
}
 8008c58:	bc30      	pop	{r4, r5}
 8008c5a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c5c:	6904      	ldr	r4, [r0, #16]
 8008c5e:	e7f2      	b.n	8008c46 <vListInsert+0x18>

08008c60 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c60:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c62:	6841      	ldr	r1, [r0, #4]
 8008c64:	6882      	ldr	r2, [r0, #8]
 8008c66:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c68:	6841      	ldr	r1, [r0, #4]
 8008c6a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	4282      	cmp	r2, r0
 8008c70:	d006      	beq.n	8008c80 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c72:	2200      	movs	r2, #0
 8008c74:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c7c:	6818      	ldr	r0, [r3, #0]
}
 8008c7e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c80:	6882      	ldr	r2, [r0, #8]
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	e7f5      	b.n	8008c72 <uxListRemove+0x12>
	...

08008c88 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c88:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <prvTaskExitError+0x3c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d008      	beq.n	8008caa <prvTaskExitError+0x22>
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	e7fe      	b.n	8008ca8 <prvTaskExitError+0x20>
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0fc      	beq.n	8008cba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cc0:	b002      	add	sp, #8
 8008cc2:	4770      	bx	lr
 8008cc4:	2400004c 	.word	0x2400004c

08008cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cc8:	4808      	ldr	r0, [pc, #32]	; (8008cec <prvPortStartFirstTask+0x24>)
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	6800      	ldr	r0, [r0, #0]
 8008cce:	f380 8808 	msr	MSP, r0
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8814 	msr	CONTROL, r0
 8008cda:	b662      	cpsie	i
 8008cdc:	b661      	cpsie	f
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	df00      	svc	0
 8008ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cea:	0000      	.short	0x0000
 8008cec:	e000ed08 	.word	0xe000ed08

08008cf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d00 <vPortEnableVFP+0x10>
 8008cf4:	6801      	ldr	r1, [r0, #0]
 8008cf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cfa:	6001      	str	r1, [r0, #0]
 8008cfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cfe:	0000      	.short	0x0000
 8008d00:	e000ed88 	.word	0xe000ed88

08008d04 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d08:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d0c:	f021 0101 	bic.w	r1, r1, #1
 8008d10:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <pxPortInitialiseStack+0x28>)
 8008d16:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d1a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d1e:	f06f 0302 	mvn.w	r3, #2
 8008d22:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008d26:	3844      	subs	r0, #68	; 0x44
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	08008c89 	.word	0x08008c89

08008d30 <SVC_Handler>:
	__asm volatile (
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <pxCurrentTCBConst2>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f380 8809 	msr	PSP, r0
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8811 	msr	BASEPRI, r0
 8008d4a:	4770      	bx	lr
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst2>:
 8008d50:	2400a7d4 	.word	0x2400a7d4

08008d54 <vPortEnterCritical>:
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008d64:	4a0b      	ldr	r2, [pc, #44]	; (8008d94 <vPortEnterCritical+0x40>)
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d000      	beq.n	8008d72 <vPortEnterCritical+0x1e>
}
 8008d70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008d7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d7e:	d0f7      	beq.n	8008d70 <vPortEnterCritical+0x1c>
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	e7fe      	b.n	8008d90 <vPortEnterCritical+0x3c>
 8008d92:	bf00      	nop
 8008d94:	2400004c 	.word	0x2400004c

08008d98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008d98:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <vPortExitCritical+0x28>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	b943      	cbnz	r3, 8008db0 <vPortExitCritical+0x18>
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	e7fe      	b.n	8008dae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008db0:	3b01      	subs	r3, #1
 8008db2:	4a03      	ldr	r2, [pc, #12]	; (8008dc0 <vPortExitCritical+0x28>)
 8008db4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008db6:	b90b      	cbnz	r3, 8008dbc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008db8:	f383 8811 	msr	BASEPRI, r3
}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2400004c 	.word	0x2400004c
	...

08008dd0 <PendSV_Handler>:
	__asm volatile
 8008dd0:	f3ef 8009 	mrs	r0, PSP
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <pxCurrentTCBConst>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	f01e 0f10 	tst.w	lr, #16
 8008de0:	bf08      	it	eq
 8008de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	6010      	str	r0, [r2, #0]
 8008dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008df4:	f380 8811 	msr	BASEPRI, r0
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f001 fa1a 	bl	800a238 <vTaskSwitchContext>
 8008e04:	f04f 0000 	mov.w	r0, #0
 8008e08:	f380 8811 	msr	BASEPRI, r0
 8008e0c:	bc09      	pop	{r0, r3}
 8008e0e:	6819      	ldr	r1, [r3, #0]
 8008e10:	6808      	ldr	r0, [r1, #0]
 8008e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e16:	f01e 0f10 	tst.w	lr, #16
 8008e1a:	bf08      	it	eq
 8008e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e20:	f380 8809 	msr	PSP, r0
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w

08008e30 <pxCurrentTCBConst>:
 8008e30:	2400a7d4 	.word	0x2400a7d4

08008e34 <xPortSysTickHandler>:
{
 8008e34:	b508      	push	{r3, lr}
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008e46:	f001 f8c9 	bl	8009fdc <xTaskIncrementTick>
 8008e4a:	b128      	cbz	r0, 8008e58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f383 8811 	msr	BASEPRI, r3
}
 8008e5e:	bd08      	pop	{r3, pc}

08008e60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008e64:	2300      	movs	r3, #0
 8008e66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <vPortSetupTimerInterrupt+0x20>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4905      	ldr	r1, [pc, #20]	; (8008e84 <vPortSetupTimerInterrupt+0x24>)
 8008e70:	fba1 1303 	umull	r1, r3, r1, r3
 8008e74:	099b      	lsrs	r3, r3, #6
 8008e76:	3b01      	subs	r3, #1
 8008e78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7a:	2307      	movs	r3, #7
 8008e7c:	6113      	str	r3, [r2, #16]
}
 8008e7e:	4770      	bx	lr
 8008e80:	2400003c 	.word	0x2400003c
 8008e84:	10624dd3 	.word	0x10624dd3

08008e88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e8c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008e90:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <xPortStartScheduler+0x100>)
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d01c      	beq.n	8008ed0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008e9e:	4b3b      	ldr	r3, [pc, #236]	; (8008f8c <xPortStartScheduler+0x104>)
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d01e      	beq.n	8008ee2 <xPortStartScheduler+0x5a>
{
 8008ea4:	b530      	push	{r4, r5, lr}
 8008ea6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ea8:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <xPortStartScheduler+0x108>)
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008eb0:	22ff      	movs	r2, #255	; 0xff
 8008eb2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ebc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ec0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ec4:	4a33      	ldr	r2, [pc, #204]	; (8008f94 <xPortStartScheduler+0x10c>)
 8008ec6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ec8:	4b33      	ldr	r3, [pc, #204]	; (8008f98 <xPortStartScheduler+0x110>)
 8008eca:	2207      	movs	r2, #7
 8008ecc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ece:	e01b      	b.n	8008f08 <xPortStartScheduler+0x80>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ee0:	e7fe      	b.n	8008ee0 <xPortStartScheduler+0x58>
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ef2:	e7fe      	b.n	8008ef2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8008ef4:	4a28      	ldr	r2, [pc, #160]	; (8008f98 <xPortStartScheduler+0x110>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008efc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f10:	d1f0      	bne.n	8008ef4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f12:	4b21      	ldr	r3, [pc, #132]	; (8008f98 <xPortStartScheduler+0x110>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d008      	beq.n	8008f2c <xPortStartScheduler+0xa4>
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	e7fe      	b.n	8008f2a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	; (8008f98 <xPortStartScheduler+0x110>)
 8008f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f36:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <xPortStartScheduler+0x108>)
 8008f3e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f40:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008f44:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f4c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f50:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f54:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f58:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008f5c:	f7ff ff80 	bl	8008e60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008f60:	2500      	movs	r5, #0
 8008f62:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <xPortStartScheduler+0x114>)
 8008f64:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008f66:	f7ff fec3 	bl	8008cf0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f6a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008f6e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f72:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008f76:	f7ff fea7 	bl	8008cc8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008f7a:	f001 f95d 	bl	800a238 <vTaskSwitchContext>
	prvTaskExitError();
 8008f7e:	f7ff fe83 	bl	8008c88 <prvTaskExitError>
}
 8008f82:	4628      	mov	r0, r5
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	410fc271 	.word	0x410fc271
 8008f8c:	410fc270 	.word	0x410fc270
 8008f90:	e000e400 	.word	0xe000e400
 8008f94:	2400a78c 	.word	0x2400a78c
 8008f98:	2400a790 	.word	0x2400a790
 8008f9c:	2400004c 	.word	0x2400004c

08008fa0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fa0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fa4:	2b0f      	cmp	r3, #15
 8008fa6:	d90f      	bls.n	8008fc8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fa8:	4a11      	ldr	r2, [pc, #68]	; (8008ff0 <vPortValidateInterruptPriority+0x50>)
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fae:	4a11      	ldr	r2, [pc, #68]	; (8008ff4 <vPortValidateInterruptPriority+0x54>)
 8008fb0:	7812      	ldrb	r2, [r2, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d908      	bls.n	8008fc8 <vPortValidateInterruptPriority+0x28>
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	e7fe      	b.n	8008fc6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fcc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fd4:	4a08      	ldr	r2, [pc, #32]	; (8008ff8 <vPortValidateInterruptPriority+0x58>)
 8008fd6:	6812      	ldr	r2, [r2, #0]
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d908      	bls.n	8008fee <vPortValidateInterruptPriority+0x4e>
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	e7fe      	b.n	8008fec <vPortValidateInterruptPriority+0x4c>
	}
 8008fee:	4770      	bx	lr
 8008ff0:	e000e3f0 	.word	0xe000e3f0
 8008ff4:	2400a78c 	.word	0x2400a78c
 8008ff8:	2400a790 	.word	0x2400a790

08008ffc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ffc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ffe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009000:	b118      	cbz	r0, 800900a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800900a:	4770      	bx	lr

0800900c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800900c:	b510      	push	{r4, lr}
 800900e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009010:	f7ff fea0 	bl	8008d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009014:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009016:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009018:	429a      	cmp	r2, r3
 800901a:	d004      	beq.n	8009026 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800901c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800901e:	f7ff febb 	bl	8008d98 <vPortExitCritical>

	return xReturn;
}
 8009022:	4620      	mov	r0, r4
 8009024:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009026:	2401      	movs	r4, #1
 8009028:	e7f9      	b.n	800901e <prvIsQueueFull+0x12>

0800902a <prvIsQueueEmpty>:
{
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800902e:	f7ff fe91 	bl	8008d54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009034:	b923      	cbnz	r3, 8009040 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009036:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009038:	f7ff feae 	bl	8008d98 <vPortExitCritical>
}
 800903c:	4620      	mov	r0, r4
 800903e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8009040:	2400      	movs	r4, #0
 8009042:	e7f9      	b.n	8009038 <prvIsQueueEmpty+0xe>

08009044 <prvCopyDataToQueue>:
{
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800904c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800904e:	b95a      	cbnz	r2, 8009068 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009050:	6803      	ldr	r3, [r0, #0]
 8009052:	b11b      	cbz	r3, 800905c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009054:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009056:	3601      	adds	r6, #1
 8009058:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800905a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800905c:	6880      	ldr	r0, [r0, #8]
 800905e:	f001 fa65 	bl	800a52c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	60a3      	str	r3, [r4, #8]
 8009066:	e7f6      	b.n	8009056 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009068:	b96d      	cbnz	r5, 8009086 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800906a:	6840      	ldr	r0, [r0, #4]
 800906c:	f00e ff3a 	bl	8017ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009070:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009072:	6863      	ldr	r3, [r4, #4]
 8009074:	4413      	add	r3, r2
 8009076:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009078:	68a2      	ldr	r2, [r4, #8]
 800907a:	4293      	cmp	r3, r2
 800907c:	d319      	bcc.n	80090b2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009082:	4628      	mov	r0, r5
 8009084:	e7e7      	b.n	8009056 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009086:	68c0      	ldr	r0, [r0, #12]
 8009088:	f00e ff2c 	bl	8017ee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800908c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800908e:	4251      	negs	r1, r2
 8009090:	68e3      	ldr	r3, [r4, #12]
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	4293      	cmp	r3, r2
 800909a:	d202      	bcs.n	80090a2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	440b      	add	r3, r1
 80090a0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80090a2:	2d02      	cmp	r5, #2
 80090a4:	d001      	beq.n	80090aa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80090a6:	2000      	movs	r0, #0
 80090a8:	e7d5      	b.n	8009056 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090aa:	b126      	cbz	r6, 80090b6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80090ac:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80090ae:	2000      	movs	r0, #0
 80090b0:	e7d1      	b.n	8009056 <prvCopyDataToQueue+0x12>
 80090b2:	4628      	mov	r0, r5
 80090b4:	e7cf      	b.n	8009056 <prvCopyDataToQueue+0x12>
 80090b6:	2000      	movs	r0, #0
 80090b8:	e7cd      	b.n	8009056 <prvCopyDataToQueue+0x12>

080090ba <prvCopyDataFromQueue>:
{
 80090ba:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090be:	b16a      	cbz	r2, 80090dc <prvCopyDataFromQueue+0x22>
{
 80090c0:	b510      	push	{r4, lr}
 80090c2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090c4:	68d9      	ldr	r1, [r3, #12]
 80090c6:	4411      	add	r1, r2
 80090c8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090ca:	689c      	ldr	r4, [r3, #8]
 80090cc:	42a1      	cmp	r1, r4
 80090ce:	d301      	bcc.n	80090d4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090d0:	6819      	ldr	r1, [r3, #0]
 80090d2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d4:	68d9      	ldr	r1, [r3, #12]
 80090d6:	f00e ff05 	bl	8017ee4 <memcpy>
}
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	4770      	bx	lr

080090de <prvUnlockQueue>:
{
 80090de:	b538      	push	{r3, r4, r5, lr}
 80090e0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80090e2:	f7ff fe37 	bl	8008d54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80090e6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80090ea:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090ec:	e001      	b.n	80090f2 <prvUnlockQueue+0x14>
			--cTxLock;
 80090ee:	3c01      	subs	r4, #1
 80090f0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	dd0a      	ble.n	800910c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090f8:	b143      	cbz	r3, 800910c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80090fe:	f001 f91f 	bl	800a340 <xTaskRemoveFromEventList>
 8009102:	2800      	cmp	r0, #0
 8009104:	d0f3      	beq.n	80090ee <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009106:	f001 f9af 	bl	800a468 <vTaskMissedYield>
 800910a:	e7f0      	b.n	80090ee <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800910c:	23ff      	movs	r3, #255	; 0xff
 800910e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009112:	f7ff fe41 	bl	8008d98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009116:	f7ff fe1d 	bl	8008d54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800911a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800911e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009120:	e001      	b.n	8009126 <prvUnlockQueue+0x48>
				--cRxLock;
 8009122:	3c01      	subs	r4, #1
 8009124:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009126:	2c00      	cmp	r4, #0
 8009128:	dd0a      	ble.n	8009140 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912a:	692b      	ldr	r3, [r5, #16]
 800912c:	b143      	cbz	r3, 8009140 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800912e:	f105 0010 	add.w	r0, r5, #16
 8009132:	f001 f905 	bl	800a340 <xTaskRemoveFromEventList>
 8009136:	2800      	cmp	r0, #0
 8009138:	d0f3      	beq.n	8009122 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800913a:	f001 f995 	bl	800a468 <vTaskMissedYield>
 800913e:	e7f0      	b.n	8009122 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009140:	23ff      	movs	r3, #255	; 0xff
 8009142:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009146:	f7ff fe27 	bl	8008d98 <vPortExitCritical>
}
 800914a:	bd38      	pop	{r3, r4, r5, pc}

0800914c <xQueueGenericReset>:
{
 800914c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800914e:	b1e0      	cbz	r0, 800918a <xQueueGenericReset+0x3e>
 8009150:	460d      	mov	r5, r1
 8009152:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009154:	f7ff fdfe 	bl	8008d54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800915c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800915e:	fb01 3002 	mla	r0, r1, r2, r3
 8009162:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009164:	2000      	movs	r0, #0
 8009166:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009168:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800916a:	3a01      	subs	r2, #1
 800916c:	fb02 3301 	mla	r3, r2, r1, r3
 8009170:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009172:	23ff      	movs	r3, #255	; 0xff
 8009174:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800917c:	b9fd      	cbnz	r5, 80091be <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	b963      	cbnz	r3, 800919c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009182:	f7ff fe09 	bl	8008d98 <vPortExitCritical>
}
 8009186:	2001      	movs	r0, #1
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800919a:	e7fe      	b.n	800919a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800919c:	f104 0010 	add.w	r0, r4, #16
 80091a0:	f001 f8ce 	bl	800a340 <xTaskRemoveFromEventList>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d0ec      	beq.n	8009182 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80091a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	e7e1      	b.n	8009182 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091be:	f104 0010 	add.w	r0, r4, #16
 80091c2:	f7ff fd1b 	bl	8008bfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091ca:	f7ff fd17 	bl	8008bfc <vListInitialise>
 80091ce:	e7d8      	b.n	8009182 <xQueueGenericReset+0x36>

080091d0 <prvInitialiseNewQueue>:
{
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	461d      	mov	r5, r3
 80091d4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091d6:	460b      	mov	r3, r1
 80091d8:	b949      	cbnz	r1, 80091ee <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091da:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80091dc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091de:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091e0:	2101      	movs	r1, #1
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7ff ffb2 	bl	800914c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80091e8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091ee:	6022      	str	r2, [r4, #0]
 80091f0:	e7f4      	b.n	80091dc <prvInitialiseNewQueue+0xc>

080091f2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091f2:	b940      	cbnz	r0, 8009206 <xQueueGenericCreateStatic+0x14>
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	e7fe      	b.n	8009204 <xQueueGenericCreateStatic+0x12>
	{
 8009206:	b510      	push	{r4, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800920c:	b183      	cbz	r3, 8009230 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800920e:	1e0b      	subs	r3, r1, #0
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	2a00      	cmp	r2, #0
 8009216:	bf08      	it	eq
 8009218:	f043 0301 	orreq.w	r3, r3, #1
 800921c:	b98b      	cbnz	r3, 8009242 <xQueueGenericCreateStatic+0x50>
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	e7fe      	b.n	800922e <xQueueGenericCreateStatic+0x3c>
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009240:	e7fe      	b.n	8009240 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009242:	fab1 f381 	clz	r3, r1
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	2a00      	cmp	r2, #0
 800924a:	bf18      	it	ne
 800924c:	f043 0301 	orrne.w	r3, r3, #1
 8009250:	b943      	cbnz	r3, 8009264 <xQueueGenericCreateStatic+0x72>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	e7fe      	b.n	8009262 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009264:	2350      	movs	r3, #80	; 0x50
 8009266:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	2b50      	cmp	r3, #80	; 0x50
 800926c:	d008      	beq.n	8009280 <xQueueGenericCreateStatic+0x8e>
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	e7fe      	b.n	800927e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009280:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009288:	9400      	str	r4, [sp, #0]
 800928a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800928e:	f7ff ff9f 	bl	80091d0 <prvInitialiseNewQueue>
	}
 8009292:	4620      	mov	r0, r4
 8009294:	b004      	add	sp, #16
 8009296:	bd10      	pop	{r4, pc}

08009298 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009298:	b940      	cbnz	r0, 80092ac <xQueueGenericCreate+0x14>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	e7fe      	b.n	80092aa <xQueueGenericCreate+0x12>
	{
 80092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ae:	b083      	sub	sp, #12
 80092b0:	460d      	mov	r5, r1
 80092b2:	4614      	mov	r4, r2
 80092b4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092ba:	3050      	adds	r0, #80	; 0x50
 80092bc:	f7ff fbe2 	bl	8008a84 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80092c0:	4607      	mov	r7, r0
 80092c2:	b150      	cbz	r0, 80092da <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092ca:	9000      	str	r0, [sp, #0]
 80092cc:	4623      	mov	r3, r4
 80092ce:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80092d2:	4629      	mov	r1, r5
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff ff7b 	bl	80091d0 <prvInitialiseNewQueue>
	}
 80092da:	4638      	mov	r0, r7
 80092dc:	b003      	add	sp, #12
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092e0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80092e0:	b940      	cbnz	r0, 80092f4 <xQueueCreateCountingSemaphoreStatic+0x14>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	e7fe      	b.n	80092f2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 80092f4:	b510      	push	{r4, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80092fa:	4288      	cmp	r0, r1
 80092fc:	d208      	bcs.n	8009310 <xQueueCreateCountingSemaphoreStatic+0x30>
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	e7fe      	b.n	800930e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009310:	2302      	movs	r3, #2
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4613      	mov	r3, r2
 8009316:	2200      	movs	r2, #0
 8009318:	4611      	mov	r1, r2
 800931a:	f7ff ff6a 	bl	80091f2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800931e:	b100      	cbz	r0, 8009322 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009320:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009322:	b002      	add	sp, #8
 8009324:	bd10      	pop	{r4, pc}

08009326 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009326:	b940      	cbnz	r0, 800933a <xQueueCreateCountingSemaphore+0x14>
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	e7fe      	b.n	8009338 <xQueueCreateCountingSemaphore+0x12>
	{
 800933a:	b510      	push	{r4, lr}
 800933c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800933e:	4288      	cmp	r0, r1
 8009340:	d208      	bcs.n	8009354 <xQueueCreateCountingSemaphore+0x2e>
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	e7fe      	b.n	8009352 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009354:	2202      	movs	r2, #2
 8009356:	2100      	movs	r1, #0
 8009358:	f7ff ff9e 	bl	8009298 <xQueueGenericCreate>
		if( xHandle != NULL )
 800935c:	b100      	cbz	r0, 8009360 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800935e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009360:	bd10      	pop	{r4, pc}

08009362 <xQueueGenericSend>:
{
 8009362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009364:	b085      	sub	sp, #20
 8009366:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009368:	b188      	cbz	r0, 800938e <xQueueGenericSend+0x2c>
 800936a:	460f      	mov	r7, r1
 800936c:	461d      	mov	r5, r3
 800936e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009370:	b1b1      	cbz	r1, 80093a0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009372:	2d02      	cmp	r5, #2
 8009374:	d120      	bne.n	80093b8 <xQueueGenericSend+0x56>
 8009376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009378:	2b01      	cmp	r3, #1
 800937a:	d01d      	beq.n	80093b8 <xQueueGenericSend+0x56>
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	e7fe      	b.n	800938c <xQueueGenericSend+0x2a>
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800939e:	e7fe      	b.n	800939e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0e5      	beq.n	8009372 <xQueueGenericSend+0x10>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	e7fe      	b.n	80093b6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093b8:	f001 f85c 	bl	800a474 <xTaskGetSchedulerState>
 80093bc:	4606      	mov	r6, r0
 80093be:	b958      	cbnz	r0, 80093d8 <xQueueGenericSend+0x76>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d048      	beq.n	8009458 <xQueueGenericSend+0xf6>
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	e7fe      	b.n	80093d6 <xQueueGenericSend+0x74>
 80093d8:	2600      	movs	r6, #0
 80093da:	e03d      	b.n	8009458 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093dc:	462a      	mov	r2, r5
 80093de:	4639      	mov	r1, r7
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff fe2f 	bl	8009044 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e8:	b97b      	cbnz	r3, 800940a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80093ea:	b148      	cbz	r0, 8009400 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80093ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80093f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009400:	f7ff fcca 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 8009404:	2001      	movs	r0, #1
}
 8009406:	b005      	add	sp, #20
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800940a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800940e:	f000 ff97 	bl	800a340 <xTaskRemoveFromEventList>
 8009412:	2800      	cmp	r0, #0
 8009414:	d0f4      	beq.n	8009400 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009416:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800941a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	e7e9      	b.n	8009400 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800942c:	f7ff fcb4 	bl	8008d98 <vPortExitCritical>
					return errQUEUE_FULL;
 8009430:	2000      	movs	r0, #0
 8009432:	e7e8      	b.n	8009406 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009434:	a802      	add	r0, sp, #8
 8009436:	f000 ffc9 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800943a:	2601      	movs	r6, #1
 800943c:	e019      	b.n	8009472 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800943e:	2300      	movs	r3, #0
 8009440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009444:	e021      	b.n	800948a <xQueueGenericSend+0x128>
 8009446:	2300      	movs	r3, #0
 8009448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800944c:	e023      	b.n	8009496 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff fe45 	bl	80090de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009454:	f000 fe4e 	bl	800a0f4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009458:	f7ff fc7c 	bl	8008d54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800945c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800945e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009460:	429a      	cmp	r2, r3
 8009462:	d3bb      	bcc.n	80093dc <xQueueGenericSend+0x7a>
 8009464:	2d02      	cmp	r5, #2
 8009466:	d0b9      	beq.n	80093dc <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0de      	beq.n	800942c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800946e:	2e00      	cmp	r6, #0
 8009470:	d0e0      	beq.n	8009434 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009472:	f7ff fc91 	bl	8008d98 <vPortExitCritical>
		vTaskSuspendAll();
 8009476:	f000 fda3 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800947a:	f7ff fc6b 	bl	8008d54 <vPortEnterCritical>
 800947e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009482:	b252      	sxtb	r2, r2
 8009484:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009488:	d0d9      	beq.n	800943e <xQueueGenericSend+0xdc>
 800948a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800948e:	b252      	sxtb	r2, r2
 8009490:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009494:	d0d7      	beq.n	8009446 <xQueueGenericSend+0xe4>
 8009496:	f7ff fc7f 	bl	8008d98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800949a:	a901      	add	r1, sp, #4
 800949c:	a802      	add	r0, sp, #8
 800949e:	f000 ffa1 	bl	800a3e4 <xTaskCheckForTimeOut>
 80094a2:	b9d8      	cbnz	r0, 80094dc <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094a4:	4620      	mov	r0, r4
 80094a6:	f7ff fdb1 	bl	800900c <prvIsQueueFull>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0cf      	beq.n	800944e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094ae:	9901      	ldr	r1, [sp, #4]
 80094b0:	f104 0010 	add.w	r0, r4, #16
 80094b4:	f000 ff10 	bl	800a2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094b8:	4620      	mov	r0, r4
 80094ba:	f7ff fe10 	bl	80090de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094be:	f000 fe19 	bl	800a0f4 <xTaskResumeAll>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1c8      	bne.n	8009458 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80094c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	e7bd      	b.n	8009458 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80094dc:	4620      	mov	r0, r4
 80094de:	f7ff fdfe 	bl	80090de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094e2:	f000 fe07 	bl	800a0f4 <xTaskResumeAll>
			return errQUEUE_FULL;
 80094e6:	2000      	movs	r0, #0
 80094e8:	e78d      	b.n	8009406 <xQueueGenericSend+0xa4>

080094ea <xQueueGenericSendFromISR>:
{
 80094ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80094ee:	b190      	cbz	r0, 8009516 <xQueueGenericSendFromISR+0x2c>
 80094f0:	460f      	mov	r7, r1
 80094f2:	4616      	mov	r6, r2
 80094f4:	461c      	mov	r4, r3
 80094f6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094f8:	b1b1      	cbz	r1, 8009528 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094fa:	2c02      	cmp	r4, #2
 80094fc:	d120      	bne.n	8009540 <xQueueGenericSendFromISR+0x56>
 80094fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d01d      	beq.n	8009540 <xQueueGenericSendFromISR+0x56>
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	e7fe      	b.n	8009514 <xQueueGenericSendFromISR+0x2a>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009526:	e7fe      	b.n	8009526 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009528:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0e5      	beq.n	80094fa <xQueueGenericSendFromISR+0x10>
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	e7fe      	b.n	800953e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009540:	f7ff fd2e 	bl	8008fa0 <vPortValidateInterruptPriority>
	__asm volatile
 8009544:	f3ef 8911 	mrs	r9, BASEPRI
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009558:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800955a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800955c:	429a      	cmp	r2, r3
 800955e:	d306      	bcc.n	800956e <xQueueGenericSendFromISR+0x84>
 8009560:	2c02      	cmp	r4, #2
 8009562:	d004      	beq.n	800956e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009564:	2000      	movs	r0, #0
	__asm volatile
 8009566:	f389 8811 	msr	BASEPRI, r9
}
 800956a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800956e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8009572:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009576:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009578:	4622      	mov	r2, r4
 800957a:	4639      	mov	r1, r7
 800957c:	4628      	mov	r0, r5
 800957e:	f7ff fd61 	bl	8009044 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009582:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009586:	d006      	beq.n	8009596 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009588:	f108 0301 	add.w	r3, r8, #1
 800958c:	b25b      	sxtb	r3, r3
 800958e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009592:	2001      	movs	r0, #1
 8009594:	e7e7      	b.n	8009566 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009598:	b90b      	cbnz	r3, 800959e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800959a:	2001      	movs	r0, #1
 800959c:	e7e3      	b.n	8009566 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800959e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095a2:	f000 fecd 	bl	800a340 <xTaskRemoveFromEventList>
 80095a6:	b118      	cbz	r0, 80095b0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80095a8:	b126      	cbz	r6, 80095b4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095aa:	2001      	movs	r0, #1
 80095ac:	6030      	str	r0, [r6, #0]
 80095ae:	e7da      	b.n	8009566 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80095b0:	2001      	movs	r0, #1
 80095b2:	e7d8      	b.n	8009566 <xQueueGenericSendFromISR+0x7c>
 80095b4:	2001      	movs	r0, #1
 80095b6:	e7d6      	b.n	8009566 <xQueueGenericSendFromISR+0x7c>

080095b8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80095b8:	b168      	cbz	r0, 80095d6 <xQueueGiveFromISR+0x1e>
{
 80095ba:	b570      	push	{r4, r5, r6, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80095c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80095c2:	b18b      	cbz	r3, 80095e8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	e7fe      	b.n	80095d4 <xQueueGiveFromISR+0x1c>
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80095e6:	e7fe      	b.n	80095e6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095e8:	6803      	ldr	r3, [r0, #0]
 80095ea:	b1eb      	cbz	r3, 8009628 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095ec:	f7ff fcd8 	bl	8008fa0 <vPortValidateInterruptPriority>
	__asm volatile
 80095f0:	f3ef 8611 	mrs	r6, BASEPRI
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009604:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009606:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009608:	4293      	cmp	r3, r2
 800960a:	d926      	bls.n	800965a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800960c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8009610:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009612:	3201      	adds	r2, #1
 8009614:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d011      	beq.n	8009640 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800961c:	3301      	adds	r3, #1
 800961e:	b25b      	sxtb	r3, r3
 8009620:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009624:	2001      	movs	r0, #1
 8009626:	e019      	b.n	800965c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009628:	6883      	ldr	r3, [r0, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0de      	beq.n	80095ec <xQueueGiveFromISR+0x34>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	e7fe      	b.n	800963e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009640:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009642:	b90b      	cbnz	r3, 8009648 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8009644:	2001      	movs	r0, #1
 8009646:	e009      	b.n	800965c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009648:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800964c:	f000 fe78 	bl	800a340 <xTaskRemoveFromEventList>
 8009650:	b138      	cbz	r0, 8009662 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8009652:	b144      	cbz	r4, 8009666 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009654:	2001      	movs	r0, #1
 8009656:	6020      	str	r0, [r4, #0]
 8009658:	e000      	b.n	800965c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800965a:	2000      	movs	r0, #0
	__asm volatile
 800965c:	f386 8811 	msr	BASEPRI, r6
}
 8009660:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8009662:	2001      	movs	r0, #1
 8009664:	e7fa      	b.n	800965c <xQueueGiveFromISR+0xa4>
 8009666:	2001      	movs	r0, #1
 8009668:	e7f8      	b.n	800965c <xQueueGiveFromISR+0xa4>

0800966a <xQueueReceive>:
{
 800966a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800966c:	b085      	sub	sp, #20
 800966e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009670:	b190      	cbz	r0, 8009698 <xQueueReceive+0x2e>
 8009672:	460f      	mov	r7, r1
 8009674:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009676:	b1c1      	cbz	r1, 80096aa <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009678:	f000 fefc 	bl	800a474 <xTaskGetSchedulerState>
 800967c:	4606      	mov	r6, r0
 800967e:	bb00      	cbnz	r0, 80096c2 <xQueueReceive+0x58>
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d05e      	beq.n	8009744 <xQueueReceive+0xda>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	e7fe      	b.n	8009696 <xQueueReceive+0x2c>
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80096a8:	e7fe      	b.n	80096a8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0e3      	beq.n	8009678 <xQueueReceive+0xe>
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	e7fe      	b.n	80096c0 <xQueueReceive+0x56>
 80096c2:	2600      	movs	r6, #0
 80096c4:	e03e      	b.n	8009744 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096c6:	4639      	mov	r1, r7
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff fcf6 	bl	80090ba <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096ce:	3d01      	subs	r5, #1
 80096d0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	b923      	cbnz	r3, 80096e0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80096d6:	f7ff fb5f 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 80096da:	2001      	movs	r0, #1
}
 80096dc:	b005      	add	sp, #20
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096e0:	f104 0010 	add.w	r0, r4, #16
 80096e4:	f000 fe2c 	bl	800a340 <xTaskRemoveFromEventList>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d0f4      	beq.n	80096d6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80096ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	e7e9      	b.n	80096d6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009702:	f7ff fb49 	bl	8008d98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009706:	2000      	movs	r0, #0
 8009708:	e7e8      	b.n	80096dc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800970a:	a802      	add	r0, sp, #8
 800970c:	f000 fe5e 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009710:	2601      	movs	r6, #1
 8009712:	e021      	b.n	8009758 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009714:	2300      	movs	r3, #0
 8009716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800971a:	e029      	b.n	8009770 <xQueueReceive+0x106>
 800971c:	2300      	movs	r3, #0
 800971e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009722:	e02b      	b.n	800977c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009724:	4620      	mov	r0, r4
 8009726:	f7ff fcda 	bl	80090de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800972a:	f000 fce3 	bl	800a0f4 <xTaskResumeAll>
 800972e:	e009      	b.n	8009744 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009730:	4620      	mov	r0, r4
 8009732:	f7ff fcd4 	bl	80090de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009736:	f000 fcdd 	bl	800a0f4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800973a:	4620      	mov	r0, r4
 800973c:	f7ff fc75 	bl	800902a <prvIsQueueEmpty>
 8009740:	2800      	cmp	r0, #0
 8009742:	d13f      	bne.n	80097c4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009744:	f7ff fb06 	bl	8008d54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009748:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800974a:	2d00      	cmp	r5, #0
 800974c:	d1bb      	bne.n	80096c6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0d6      	beq.n	8009702 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009754:	2e00      	cmp	r6, #0
 8009756:	d0d8      	beq.n	800970a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009758:	f7ff fb1e 	bl	8008d98 <vPortExitCritical>
		vTaskSuspendAll();
 800975c:	f000 fc30 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009760:	f7ff faf8 	bl	8008d54 <vPortEnterCritical>
 8009764:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009768:	b25b      	sxtb	r3, r3
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d0d1      	beq.n	8009714 <xQueueReceive+0xaa>
 8009770:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009774:	b25b      	sxtb	r3, r3
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d0cf      	beq.n	800971c <xQueueReceive+0xb2>
 800977c:	f7ff fb0c 	bl	8008d98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009780:	a901      	add	r1, sp, #4
 8009782:	a802      	add	r0, sp, #8
 8009784:	f000 fe2e 	bl	800a3e4 <xTaskCheckForTimeOut>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1d1      	bne.n	8009730 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800978c:	4620      	mov	r0, r4
 800978e:	f7ff fc4c 	bl	800902a <prvIsQueueEmpty>
 8009792:	2800      	cmp	r0, #0
 8009794:	d0c6      	beq.n	8009724 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009796:	9901      	ldr	r1, [sp, #4]
 8009798:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800979c:	f000 fd9c 	bl	800a2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097a0:	4620      	mov	r0, r4
 80097a2:	f7ff fc9c 	bl	80090de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097a6:	f000 fca5 	bl	800a0f4 <xTaskResumeAll>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1ca      	bne.n	8009744 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80097ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	e7bf      	b.n	8009744 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80097c4:	2000      	movs	r0, #0
 80097c6:	e789      	b.n	80096dc <xQueueReceive+0x72>

080097c8 <xQueueSemaphoreTake>:
{
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80097ce:	b158      	cbz	r0, 80097e8 <xQueueSemaphoreTake+0x20>
 80097d0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80097d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80097d4:	b18b      	cbz	r3, 80097fa <xQueueSemaphoreTake+0x32>
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	e7fe      	b.n	80097e6 <xQueueSemaphoreTake+0x1e>
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80097f8:	e7fe      	b.n	80097f8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097fa:	f000 fe3b 	bl	800a474 <xTaskGetSchedulerState>
 80097fe:	4605      	mov	r5, r0
 8009800:	b950      	cbnz	r0, 8009818 <xQueueSemaphoreTake+0x50>
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	b15b      	cbz	r3, 800981e <xQueueSemaphoreTake+0x56>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	e7fe      	b.n	8009816 <xQueueSemaphoreTake+0x4e>
 8009818:	2600      	movs	r6, #0
 800981a:	4635      	mov	r5, r6
 800981c:	e055      	b.n	80098ca <xQueueSemaphoreTake+0x102>
 800981e:	4606      	mov	r6, r0
 8009820:	e053      	b.n	80098ca <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009822:	3b01      	subs	r3, #1
 8009824:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	b13b      	cbz	r3, 800983a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	b94b      	cbnz	r3, 8009842 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800982e:	f7ff fab3 	bl	8008d98 <vPortExitCritical>
				return pdPASS;
 8009832:	2601      	movs	r6, #1
}
 8009834:	4630      	mov	r0, r6
 8009836:	b004      	add	sp, #16
 8009838:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800983a:	f000 ff0f 	bl	800a65c <pvTaskIncrementMutexHeldCount>
 800983e:	60a0      	str	r0, [r4, #8]
 8009840:	e7f3      	b.n	800982a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009842:	f104 0010 	add.w	r0, r4, #16
 8009846:	f000 fd7b 	bl	800a340 <xTaskRemoveFromEventList>
 800984a:	2800      	cmp	r0, #0
 800984c:	d0ef      	beq.n	800982e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800984e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009856:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	e7e4      	b.n	800982e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009864:	b146      	cbz	r6, 8009878 <xQueueSemaphoreTake+0xb0>
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	e7fe      	b.n	8009876 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8009878:	f7ff fa8e 	bl	8008d98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800987c:	e7da      	b.n	8009834 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800987e:	a802      	add	r0, sp, #8
 8009880:	f000 fda4 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009884:	2501      	movs	r5, #1
 8009886:	e02a      	b.n	80098de <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8009888:	2300      	movs	r3, #0
 800988a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800988e:	e032      	b.n	80098f6 <xQueueSemaphoreTake+0x12e>
 8009890:	2300      	movs	r3, #0
 8009892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009896:	e034      	b.n	8009902 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8009898:	f7ff fa5c 	bl	8008d54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800989c:	68a0      	ldr	r0, [r4, #8]
 800989e:	f000 fdf9 	bl	800a494 <xTaskPriorityInherit>
 80098a2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80098a4:	f7ff fa78 	bl	8008d98 <vPortExitCritical>
 80098a8:	e03b      	b.n	8009922 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff fc17 	bl	80090de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b0:	f000 fc20 	bl	800a0f4 <xTaskResumeAll>
 80098b4:	e009      	b.n	80098ca <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff fc11 	bl	80090de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098bc:	f000 fc1a 	bl	800a0f4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7ff fbb2 	bl	800902a <prvIsQueueEmpty>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d142      	bne.n	8009950 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80098ca:	f7ff fa43 	bl	8008d54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1a6      	bne.n	8009822 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c4      	beq.n	8009864 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80098da:	2d00      	cmp	r5, #0
 80098dc:	d0cf      	beq.n	800987e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80098de:	f7ff fa5b 	bl	8008d98 <vPortExitCritical>
		vTaskSuspendAll();
 80098e2:	f000 fb6d 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098e6:	f7ff fa35 	bl	8008d54 <vPortEnterCritical>
 80098ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80098ee:	b25b      	sxtb	r3, r3
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d0c8      	beq.n	8009888 <xQueueSemaphoreTake+0xc0>
 80098f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d0c6      	beq.n	8009890 <xQueueSemaphoreTake+0xc8>
 8009902:	f7ff fa49 	bl	8008d98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009906:	a901      	add	r1, sp, #4
 8009908:	a802      	add	r0, sp, #8
 800990a:	f000 fd6b 	bl	800a3e4 <xTaskCheckForTimeOut>
 800990e:	2800      	cmp	r0, #0
 8009910:	d1d1      	bne.n	80098b6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff fb89 	bl	800902a <prvIsQueueEmpty>
 8009918:	2800      	cmp	r0, #0
 800991a:	d0c6      	beq.n	80098aa <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0ba      	beq.n	8009898 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009922:	9901      	ldr	r1, [sp, #4]
 8009924:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009928:	f000 fcd6 	bl	800a2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fbd6 	bl	80090de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009932:	f000 fbdf 	bl	800a0f4 <xTaskResumeAll>
 8009936:	2800      	cmp	r0, #0
 8009938:	d1c7      	bne.n	80098ca <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800993a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009942:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	e7bc      	b.n	80098ca <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8009950:	b90e      	cbnz	r6, 8009956 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8009952:	2600      	movs	r6, #0
 8009954:	e76e      	b.n	8009834 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8009956:	f7ff f9fd 	bl	8008d54 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800995a:	4620      	mov	r0, r4
 800995c:	f7ff fb4e 	bl	8008ffc <prvGetDisinheritPriorityAfterTimeout>
 8009960:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009962:	68a0      	ldr	r0, [r4, #8]
 8009964:	f000 fe2a 	bl	800a5bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009968:	f7ff fa16 	bl	8008d98 <vPortExitCritical>
 800996c:	e7f1      	b.n	8009952 <xQueueSemaphoreTake+0x18a>

0800996e <xQueueReceiveFromISR>:
{
 800996e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009972:	b1b0      	cbz	r0, 80099a2 <xQueueReceiveFromISR+0x34>
 8009974:	460d      	mov	r5, r1
 8009976:	4616      	mov	r6, r2
 8009978:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800997a:	b1d9      	cbz	r1, 80099b4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800997c:	f7ff fb10 	bl	8008fa0 <vPortValidateInterruptPriority>
	__asm volatile
 8009980:	f3ef 8811 	mrs	r8, BASEPRI
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009994:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009996:	b9cf      	cbnz	r7, 80099cc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8009998:	2000      	movs	r0, #0
	__asm volatile
 800999a:	f388 8811 	msr	BASEPRI, r8
}
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80099b2:	e7fe      	b.n	80099b2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0e0      	beq.n	800997c <xQueueReceiveFromISR+0xe>
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	e7fe      	b.n	80099ca <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80099cc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80099d0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099d4:	4629      	mov	r1, r5
 80099d6:	4620      	mov	r0, r4
 80099d8:	f7ff fb6f 	bl	80090ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099dc:	3f01      	subs	r7, #1
 80099de:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80099e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80099e4:	d006      	beq.n	80099f4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099e6:	f109 0301 	add.w	r3, r9, #1
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80099f0:	2001      	movs	r0, #1
 80099f2:	e7d2      	b.n	800999a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	b90b      	cbnz	r3, 80099fc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80099f8:	2001      	movs	r0, #1
 80099fa:	e7ce      	b.n	800999a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099fc:	f104 0010 	add.w	r0, r4, #16
 8009a00:	f000 fc9e 	bl	800a340 <xTaskRemoveFromEventList>
 8009a04:	b118      	cbz	r0, 8009a0e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8009a06:	b126      	cbz	r6, 8009a12 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a08:	2001      	movs	r0, #1
 8009a0a:	6030      	str	r0, [r6, #0]
 8009a0c:	e7c5      	b.n	800999a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7c3      	b.n	800999a <xQueueReceiveFromISR+0x2c>
 8009a12:	2001      	movs	r0, #1
 8009a14:	e7c1      	b.n	800999a <xQueueReceiveFromISR+0x2c>
	...

08009a18 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b07      	cmp	r3, #7
 8009a1c:	d80c      	bhi.n	8009a38 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a1e:	4a07      	ldr	r2, [pc, #28]	; (8009a3c <vQueueAddToRegistry+0x24>)
 8009a20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a24:	b10a      	cbz	r2, 8009a2a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a26:	3301      	adds	r3, #1
 8009a28:	e7f7      	b.n	8009a1a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a2a:	4a04      	ldr	r2, [pc, #16]	; (8009a3c <vQueueAddToRegistry+0x24>)
 8009a2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a34:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a36:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	2400a794 	.word	0x2400a794

08009a40 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b07      	cmp	r3, #7
 8009a44:	d80f      	bhi.n	8009a66 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a46:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <vQueueUnregisterQueue+0x28>)
 8009a48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a4c:	6852      	ldr	r2, [r2, #4]
 8009a4e:	4282      	cmp	r2, r0
 8009a50:	d001      	beq.n	8009a56 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a52:	3301      	adds	r3, #1
 8009a54:	e7f5      	b.n	8009a42 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a56:	4a04      	ldr	r2, [pc, #16]	; (8009a68 <vQueueUnregisterQueue+0x28>)
 8009a58:	2100      	movs	r1, #0
 8009a5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a62:	6059      	str	r1, [r3, #4]
				break;
 8009a64:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a66:	4770      	bx	lr
 8009a68:	2400a794 	.word	0x2400a794

08009a6c <vQueueDelete>:
	configASSERT( pxQueue );
 8009a6c:	b138      	cbz	r0, 8009a7e <vQueueDelete+0x12>
{
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8009a72:	f7ff ffe5 	bl	8009a40 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a76:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a7a:	b14b      	cbz	r3, 8009a90 <vQueueDelete+0x24>
}
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009a8e:	e7fe      	b.n	8009a8e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8009a90:	4620      	mov	r0, r4
 8009a92:	f7ff f875 	bl	8008b80 <vPortFree>
}
 8009a96:	e7f1      	b.n	8009a7c <vQueueDelete+0x10>

08009a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	460d      	mov	r5, r1
 8009a9e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009aa0:	f7ff f958 	bl	8008d54 <vPortEnterCritical>
 8009aa4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009aa8:	b25b      	sxtb	r3, r3
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d00d      	beq.n	8009acc <vQueueWaitForMessageRestricted+0x34>
 8009ab0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ab4:	b25b      	sxtb	r3, r3
 8009ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aba:	d00b      	beq.n	8009ad4 <vQueueWaitForMessageRestricted+0x3c>
 8009abc:	f7ff f96c 	bl	8008d98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ac2:	b15b      	cbz	r3, 8009adc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f7ff fb0a 	bl	80090de <prvUnlockQueue>
	}
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009acc:	2300      	movs	r3, #0
 8009ace:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ad2:	e7ed      	b.n	8009ab0 <vQueueWaitForMessageRestricted+0x18>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ada:	e7ef      	b.n	8009abc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009adc:	4632      	mov	r2, r6
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ae4:	f000 fc10 	bl	800a308 <vTaskPlaceOnEventListRestricted>
 8009ae8:	e7ec      	b.n	8009ac4 <vQueueWaitForMessageRestricted+0x2c>
	...

08009aec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aec:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <prvResetNextTaskUnblockTime+0x24>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	b923      	cbnz	r3, 8009afe <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009af4:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <prvResetNextTaskUnblockTime+0x28>)
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afe:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <prvResetNextTaskUnblockTime+0x24>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <prvResetNextTaskUnblockTime+0x28>)
 8009b0a:	601a      	str	r2, [r3, #0]
	}
}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2400a7d8 	.word	0x2400a7d8
 8009b14:	2400ac80 	.word	0x2400ac80

08009b18 <prvInitialiseNewTask>:
{
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460d      	mov	r5, r1
 8009b20:	4617      	mov	r7, r2
 8009b22:	4699      	mov	r9, r3
 8009b24:	9e08      	ldr	r6, [sp, #32]
 8009b26:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	21a5      	movs	r1, #165	; 0xa5
 8009b30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b32:	f00e f9e5 	bl	8017f00 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b38:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009b3c:	443a      	add	r2, r7
 8009b3e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b42:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009b46:	2d00      	cmp	r5, #0
 8009b48:	d043      	beq.n	8009bd2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b4a:	f04f 0c00 	mov.w	ip, #0
 8009b4e:	f1bc 0f0f 	cmp.w	ip, #15
 8009b52:	d80b      	bhi.n	8009b6c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b54:	f815 200c 	ldrb.w	r2, [r5, ip]
 8009b58:	eb04 030c 	add.w	r3, r4, ip
 8009b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009b60:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009b64:	b113      	cbz	r3, 8009b6c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b66:	f10c 0c01 	add.w	ip, ip, #1
 8009b6a:	e7f0      	b.n	8009b4e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b72:	2e37      	cmp	r6, #55	; 0x37
 8009b74:	d900      	bls.n	8009b78 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b76:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009b78:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009b7a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b7c:	2500      	movs	r5, #0
 8009b7e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b80:	1d20      	adds	r0, r4, #4
 8009b82:	f7ff f846 	bl	8008c12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b86:	f104 0018 	add.w	r0, r4, #24
 8009b8a:	f7ff f842 	bl	8008c12 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b8e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b90:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009b94:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b96:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009b98:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b9c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ba0:	2260      	movs	r2, #96	; 0x60
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8009ba8:	f00e f9aa 	bl	8017f00 <memset>
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvInitialiseNewTask+0xc4>)
 8009bae:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <prvInitialiseNewTask+0xc8>)
 8009bb2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <prvInitialiseNewTask+0xcc>)
 8009bb6:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bb8:	464a      	mov	r2, r9
 8009bba:	4641      	mov	r1, r8
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff f8a1 	bl	8008d04 <pxPortInitialiseStack>
 8009bc2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009bc4:	f1ba 0f00 	cmp.w	sl, #0
 8009bc8:	d001      	beq.n	8009bce <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bca:	f8ca 4000 	str.w	r4, [sl]
}
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009bd8:	e7cb      	b.n	8009b72 <prvInitialiseNewTask+0x5a>
 8009bda:	bf00      	nop
 8009bdc:	0801a6e4 	.word	0x0801a6e4
 8009be0:	0801a704 	.word	0x0801a704
 8009be4:	0801a6c4 	.word	0x0801a6c4

08009be8 <prvInitialiseTaskLists>:
{
 8009be8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bea:	2400      	movs	r4, #0
 8009bec:	e007      	b.n	8009bfe <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009bf2:	0093      	lsls	r3, r2, #2
 8009bf4:	480e      	ldr	r0, [pc, #56]	; (8009c30 <prvInitialiseTaskLists+0x48>)
 8009bf6:	4418      	add	r0, r3
 8009bf8:	f7ff f800 	bl	8008bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bfc:	3401      	adds	r4, #1
 8009bfe:	2c37      	cmp	r4, #55	; 0x37
 8009c00:	d9f5      	bls.n	8009bee <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009c02:	4d0c      	ldr	r5, [pc, #48]	; (8009c34 <prvInitialiseTaskLists+0x4c>)
 8009c04:	4628      	mov	r0, r5
 8009c06:	f7fe fff9 	bl	8008bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c0a:	4c0b      	ldr	r4, [pc, #44]	; (8009c38 <prvInitialiseTaskLists+0x50>)
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7fe fff5 	bl	8008bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c12:	480a      	ldr	r0, [pc, #40]	; (8009c3c <prvInitialiseTaskLists+0x54>)
 8009c14:	f7fe fff2 	bl	8008bfc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009c18:	4809      	ldr	r0, [pc, #36]	; (8009c40 <prvInitialiseTaskLists+0x58>)
 8009c1a:	f7fe ffef 	bl	8008bfc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009c1e:	4809      	ldr	r0, [pc, #36]	; (8009c44 <prvInitialiseTaskLists+0x5c>)
 8009c20:	f7fe ffec 	bl	8008bfc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <prvInitialiseTaskLists+0x60>)
 8009c26:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c28:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <prvInitialiseTaskLists+0x64>)
 8009c2a:	601c      	str	r4, [r3, #0]
}
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	2400a7e0 	.word	0x2400a7e0
 8009c34:	2400ac54 	.word	0x2400ac54
 8009c38:	2400ac68 	.word	0x2400ac68
 8009c3c:	2400ac8c 	.word	0x2400ac8c
 8009c40:	2400acb8 	.word	0x2400acb8
 8009c44:	2400aca4 	.word	0x2400aca4
 8009c48:	2400a7d8 	.word	0x2400a7d8
 8009c4c:	2400a7dc 	.word	0x2400a7dc

08009c50 <prvAddNewTaskToReadyList>:
{
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009c54:	f7ff f87e 	bl	8008d54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009c58:	4a22      	ldr	r2, [pc, #136]	; (8009ce4 <prvAddNewTaskToReadyList+0x94>)
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c60:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <prvAddNewTaskToReadyList+0x98>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	b15b      	cbz	r3, 8009c7e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009c66:	4b21      	ldr	r3, [pc, #132]	; (8009cec <prvAddNewTaskToReadyList+0x9c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	b96b      	cbnz	r3, 8009c88 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <prvAddNewTaskToReadyList+0x98>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d807      	bhi.n	8009c88 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009c78:	4b1b      	ldr	r3, [pc, #108]	; (8009ce8 <prvAddNewTaskToReadyList+0x98>)
 8009c7a:	601c      	str	r4, [r3, #0]
 8009c7c:	e004      	b.n	8009c88 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <prvAddNewTaskToReadyList+0x98>)
 8009c80:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c82:	6813      	ldr	r3, [r2, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d029      	beq.n	8009cdc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009c88:	4a19      	ldr	r2, [pc, #100]	; (8009cf0 <prvAddNewTaskToReadyList+0xa0>)
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c90:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009c92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c94:	4b17      	ldr	r3, [pc, #92]	; (8009cf4 <prvAddNewTaskToReadyList+0xa4>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	d901      	bls.n	8009ca0 <prvAddNewTaskToReadyList+0x50>
 8009c9c:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <prvAddNewTaskToReadyList+0xa4>)
 8009c9e:	6018      	str	r0, [r3, #0]
 8009ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009ca4:	1d21      	adds	r1, r4, #4
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <prvAddNewTaskToReadyList+0xa8>)
 8009ca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cac:	f7fe ffb4 	bl	8008c18 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009cb0:	f7ff f872 	bl	8008d98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <prvAddNewTaskToReadyList+0x9c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	b17b      	cbz	r3, 8009cda <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cba:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <prvAddNewTaskToReadyList+0x98>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d209      	bcs.n	8009cda <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009cc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	f3bf 8f6f 	isb	sy
}
 8009cda:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009cdc:	f7ff ff84 	bl	8009be8 <prvInitialiseTaskLists>
 8009ce0:	e7d2      	b.n	8009c88 <prvAddNewTaskToReadyList+0x38>
 8009ce2:	bf00      	nop
 8009ce4:	2400ac40 	.word	0x2400ac40
 8009ce8:	2400a7d4 	.word	0x2400a7d4
 8009cec:	2400aca0 	.word	0x2400aca0
 8009cf0:	2400ac4c 	.word	0x2400ac4c
 8009cf4:	2400ac50 	.word	0x2400ac50
 8009cf8:	2400a7e0 	.word	0x2400a7e0

08009cfc <prvDeleteTCB>:
	{
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d00:	3054      	adds	r0, #84	; 0x54
 8009d02:	f00e fce1 	bl	80186c8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d06:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009d0a:	b163      	cbz	r3, 8009d26 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d011      	beq.n	8009d34 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d00e      	beq.n	8009d32 <prvDeleteTCB+0x36>
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	e7fe      	b.n	8009d24 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8009d26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d28:	f7fe ff2a 	bl	8008b80 <vPortFree>
				vPortFree( pxTCB );
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7fe ff27 	bl	8008b80 <vPortFree>
	}
 8009d32:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7fe ff23 	bl	8008b80 <vPortFree>
 8009d3a:	e7fa      	b.n	8009d32 <prvDeleteTCB+0x36>

08009d3c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d3c:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <prvCheckTasksWaitingTermination+0x40>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	b1d3      	cbz	r3, 8009d78 <prvCheckTasksWaitingTermination+0x3c>
{
 8009d42:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009d44:	f7ff f806 	bl	8008d54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d48:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <prvCheckTasksWaitingTermination+0x44>)
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d4e:	1d20      	adds	r0, r4, #4
 8009d50:	f7fe ff86 	bl	8008c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d54:	4a0b      	ldr	r2, [pc, #44]	; (8009d84 <prvCheckTasksWaitingTermination+0x48>)
 8009d56:	6813      	ldr	r3, [r2, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d5c:	4a07      	ldr	r2, [pc, #28]	; (8009d7c <prvCheckTasksWaitingTermination+0x40>)
 8009d5e:	6813      	ldr	r3, [r2, #0]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009d64:	f7ff f818 	bl	8008d98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f7ff ffc7 	bl	8009cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d6e:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <prvCheckTasksWaitingTermination+0x40>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e6      	bne.n	8009d44 <prvCheckTasksWaitingTermination+0x8>
}
 8009d76:	bd10      	pop	{r4, pc}
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	2400ac44 	.word	0x2400ac44
 8009d80:	2400acb8 	.word	0x2400acb8
 8009d84:	2400ac40 	.word	0x2400ac40

08009d88 <prvIdleTask>:
{
 8009d88:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009d8a:	f7ff ffd7 	bl	8009d3c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d8e:	4b07      	ldr	r3, [pc, #28]	; (8009dac <prvIdleTask+0x24>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d9f9      	bls.n	8009d8a <prvIdleTask+0x2>
				taskYIELD();
 8009d96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	e7ee      	b.n	8009d8a <prvIdleTask+0x2>
 8009dac:	2400a7e0 	.word	0x2400a7e0

08009db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	4604      	mov	r4, r0
 8009db4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009db6:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009db8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dba:	4b19      	ldr	r3, [pc, #100]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	3004      	adds	r0, #4
 8009dc0:	f7fe ff4e 	bl	8008c60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009dc8:	bf14      	ite	ne
 8009dca:	2300      	movne	r3, #0
 8009dcc:	2301      	moveq	r3, #1
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	bf08      	it	eq
 8009dd2:	2300      	moveq	r3, #0
 8009dd4:	b96b      	cbnz	r3, 8009df2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dd6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dd8:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009dde:	42a6      	cmp	r6, r4
 8009de0:	d90e      	bls.n	8009e00 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de2:	4b10      	ldr	r3, [pc, #64]	; (8009e24 <prvAddCurrentTaskToDelayedList+0x74>)
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x70>)
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	3104      	adds	r1, #4
 8009dec:	f7fe ff1f 	bl	8008c2e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009df0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df2:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x70>)
 8009df4:	6819      	ldr	r1, [r3, #0]
 8009df6:	3104      	adds	r1, #4
 8009df8:	480b      	ldr	r0, [pc, #44]	; (8009e28 <prvAddCurrentTaskToDelayedList+0x78>)
 8009dfa:	f7fe ff0d 	bl	8008c18 <vListInsertEnd>
 8009dfe:	e7f7      	b.n	8009df0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <prvAddCurrentTaskToDelayedList+0x70>)
 8009e06:	6819      	ldr	r1, [r3, #0]
 8009e08:	3104      	adds	r1, #4
 8009e0a:	f7fe ff10 	bl	8008c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e0e:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x80>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	d9ec      	bls.n	8009df0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 8009e16:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x80>)
 8009e18:	601c      	str	r4, [r3, #0]
}
 8009e1a:	e7e9      	b.n	8009df0 <prvAddCurrentTaskToDelayedList+0x40>
 8009e1c:	2400accc 	.word	0x2400accc
 8009e20:	2400a7d4 	.word	0x2400a7d4
 8009e24:	2400a7dc 	.word	0x2400a7dc
 8009e28:	2400aca4 	.word	0x2400aca4
 8009e2c:	2400a7d8 	.word	0x2400a7d8
 8009e30:	2400ac80 	.word	0x2400ac80

08009e34 <xTaskCreateStatic>:
	{
 8009e34:	b530      	push	{r4, r5, lr}
 8009e36:	b087      	sub	sp, #28
 8009e38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009e3a:	b17c      	cbz	r4, 8009e5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e3e:	b1b5      	cbz	r5, 8009e6e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e40:	25bc      	movs	r5, #188	; 0xbc
 8009e42:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e44:	9d04      	ldr	r5, [sp, #16]
 8009e46:	2dbc      	cmp	r5, #188	; 0xbc
 8009e48:	d01a      	beq.n	8009e80 <xTaskCreateStatic+0x4c>
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	e7fe      	b.n	8009e5a <xTaskCreateStatic+0x26>
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009e6c:	e7fe      	b.n	8009e6c <xTaskCreateStatic+0x38>
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009e7e:	e7fe      	b.n	8009e7e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e80:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e84:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e86:	2402      	movs	r4, #2
 8009e88:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e8c:	2400      	movs	r4, #0
 8009e8e:	9403      	str	r4, [sp, #12]
 8009e90:	9502      	str	r5, [sp, #8]
 8009e92:	ac05      	add	r4, sp, #20
 8009e94:	9401      	str	r4, [sp, #4]
 8009e96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e98:	9400      	str	r4, [sp, #0]
 8009e9a:	f7ff fe3d 	bl	8009b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ea0:	f7ff fed6 	bl	8009c50 <prvAddNewTaskToReadyList>
	}
 8009ea4:	9805      	ldr	r0, [sp, #20]
 8009ea6:	b007      	add	sp, #28
 8009ea8:	bd30      	pop	{r4, r5, pc}

08009eaa <xTaskCreate>:
	{
 8009eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	4688      	mov	r8, r1
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009eb8:	0090      	lsls	r0, r2, #2
 8009eba:	f7fe fde3 	bl	8008a84 <pvPortMalloc>
			if( pxStack != NULL )
 8009ebe:	b300      	cbz	r0, 8009f02 <xTaskCreate+0x58>
 8009ec0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ec2:	20bc      	movs	r0, #188	; 0xbc
 8009ec4:	f7fe fdde 	bl	8008a84 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009ec8:	4605      	mov	r5, r0
 8009eca:	b1b0      	cbz	r0, 8009efa <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009ecc:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009ed0:	b1e5      	cbz	r5, 8009f0c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	9502      	str	r5, [sp, #8]
 8009edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	4633      	mov	r3, r6
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4641      	mov	r1, r8
 8009eea:	4638      	mov	r0, r7
 8009eec:	f7ff fe14 	bl	8009b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff fead 	bl	8009c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e005      	b.n	8009f06 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009efa:	4648      	mov	r0, r9
 8009efc:	f7fe fe40 	bl	8008b80 <vPortFree>
 8009f00:	e7e6      	b.n	8009ed0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009f06:	b005      	add	sp, #20
 8009f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009f10:	e7f9      	b.n	8009f06 <xTaskCreate+0x5c>
	...

08009f14 <vTaskStartScheduler>:
{
 8009f14:	b510      	push	{r4, lr}
 8009f16:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f18:	2400      	movs	r4, #0
 8009f1a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f1c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f1e:	aa07      	add	r2, sp, #28
 8009f20:	a906      	add	r1, sp, #24
 8009f22:	a805      	add	r0, sp, #20
 8009f24:	f7fe fd32 	bl	800898c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	9302      	str	r3, [sp, #8]
 8009f2c:	9b06      	ldr	r3, [sp, #24]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	9400      	str	r4, [sp, #0]
 8009f32:	4623      	mov	r3, r4
 8009f34:	9a07      	ldr	r2, [sp, #28]
 8009f36:	491a      	ldr	r1, [pc, #104]	; (8009fa0 <vTaskStartScheduler+0x8c>)
 8009f38:	481a      	ldr	r0, [pc, #104]	; (8009fa4 <vTaskStartScheduler+0x90>)
 8009f3a:	f7ff ff7b 	bl	8009e34 <xTaskCreateStatic>
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <vTaskStartScheduler+0x94>)
 8009f40:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8009f42:	b140      	cbz	r0, 8009f56 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8009f44:	f000 fc08 	bl	800a758 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009f48:	2801      	cmp	r0, #1
 8009f4a:	d006      	beq.n	8009f5a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f50:	d01d      	beq.n	8009f8e <vTaskStartScheduler+0x7a>
}
 8009f52:	b008      	add	sp, #32
 8009f54:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009f56:	2000      	movs	r0, #0
 8009f58:	e7f6      	b.n	8009f48 <vTaskStartScheduler+0x34>
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <vTaskStartScheduler+0x98>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3354      	adds	r3, #84	; 0x54
 8009f70:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <vTaskStartScheduler+0x9c>)
 8009f72:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f74:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <vTaskStartScheduler+0xa0>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <vTaskStartScheduler+0xa4>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f82:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <vTaskStartScheduler+0xa8>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009f88:	f7fe ff7e 	bl	8008e88 <xPortStartScheduler>
 8009f8c:	e7e1      	b.n	8009f52 <vTaskStartScheduler+0x3e>
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f9e:	e7fe      	b.n	8009f9e <vTaskStartScheduler+0x8a>
 8009fa0:	08019fc4 	.word	0x08019fc4
 8009fa4:	08009d89 	.word	0x08009d89
 8009fa8:	2400ac7c 	.word	0x2400ac7c
 8009fac:	2400a7d4 	.word	0x2400a7d4
 8009fb0:	240000a8 	.word	0x240000a8
 8009fb4:	2400ac80 	.word	0x2400ac80
 8009fb8:	2400aca0 	.word	0x2400aca0
 8009fbc:	2400accc 	.word	0x2400accc

08009fc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009fc0:	4a02      	ldr	r2, [pc, #8]	; (8009fcc <vTaskSuspendAll+0xc>)
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	6013      	str	r3, [r2, #0]
}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	2400ac48 	.word	0x2400ac48

08009fd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009fd0:	4b01      	ldr	r3, [pc, #4]	; (8009fd8 <xTaskGetTickCount+0x8>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
}
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	2400accc 	.word	0x2400accc

08009fdc <xTaskIncrementTick>:
{
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fde:	4b3a      	ldr	r3, [pc, #232]	; (800a0c8 <xTaskIncrementTick+0xec>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d169      	bne.n	800a0ba <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fe6:	4b39      	ldr	r3, [pc, #228]	; (800a0cc <xTaskIncrementTick+0xf0>)
 8009fe8:	681d      	ldr	r5, [r3, #0]
 8009fea:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009fec:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fee:	b9c5      	cbnz	r5, 800a022 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009ff0:	4b37      	ldr	r3, [pc, #220]	; (800a0d0 <xTaskIncrementTick+0xf4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	b143      	cbz	r3, 800a00a <xTaskIncrementTick+0x2e>
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	e7fe      	b.n	800a008 <xTaskIncrementTick+0x2c>
 800a00a:	4a31      	ldr	r2, [pc, #196]	; (800a0d0 <xTaskIncrementTick+0xf4>)
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <xTaskIncrementTick+0xf8>)
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	6010      	str	r0, [r2, #0]
 800a014:	6019      	str	r1, [r3, #0]
 800a016:	4a30      	ldr	r2, [pc, #192]	; (800a0d8 <xTaskIncrementTick+0xfc>)
 800a018:	6813      	ldr	r3, [r2, #0]
 800a01a:	3301      	adds	r3, #1
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	f7ff fd65 	bl	8009aec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a022:	4b2e      	ldr	r3, [pc, #184]	; (800a0dc <xTaskIncrementTick+0x100>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	42ab      	cmp	r3, r5
 800a028:	d93d      	bls.n	800a0a6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800a02a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a02c:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <xTaskIncrementTick+0x104>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a036:	009a      	lsls	r2, r3, #2
 800a038:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <xTaskIncrementTick+0x108>)
 800a03a:	589b      	ldr	r3, [r3, r2]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d900      	bls.n	800a042 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800a040:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800a042:	4b29      	ldr	r3, [pc, #164]	; (800a0e8 <xTaskIncrementTick+0x10c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d03c      	beq.n	800a0c4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800a04a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800a04c:	e03a      	b.n	800a0c4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800a04e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a050:	4b1f      	ldr	r3, [pc, #124]	; (800a0d0 <xTaskIncrementTick+0xf4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	b343      	cbz	r3, 800a0aa <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a058:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <xTaskIncrementTick+0xf4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a060:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a062:	429d      	cmp	r5, r3
 800a064:	d326      	bcc.n	800a0b4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a066:	1d26      	adds	r6, r4, #4
 800a068:	4630      	mov	r0, r6
 800a06a:	f7fe fdf9 	bl	8008c60 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a06e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a070:	b11b      	cbz	r3, 800a07a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a072:	f104 0018 	add.w	r0, r4, #24
 800a076:	f7fe fdf3 	bl	8008c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a07a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a07c:	4a1b      	ldr	r2, [pc, #108]	; (800a0ec <xTaskIncrementTick+0x110>)
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	4293      	cmp	r3, r2
 800a082:	d901      	bls.n	800a088 <xTaskIncrementTick+0xac>
 800a084:	4a19      	ldr	r2, [pc, #100]	; (800a0ec <xTaskIncrementTick+0x110>)
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a08c:	009a      	lsls	r2, r3, #2
 800a08e:	4631      	mov	r1, r6
 800a090:	4814      	ldr	r0, [pc, #80]	; (800a0e4 <xTaskIncrementTick+0x108>)
 800a092:	4410      	add	r0, r2
 800a094:	f7fe fdc0 	bl	8008c18 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a098:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a09a:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <xTaskIncrementTick+0x104>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d2d4      	bcs.n	800a04e <xTaskIncrementTick+0x72>
 800a0a4:	e7d4      	b.n	800a050 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800a0a6:	2700      	movs	r7, #0
 800a0a8:	e7d2      	b.n	800a050 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <xTaskIncrementTick+0x100>)
 800a0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b0:	601a      	str	r2, [r3, #0]
					break;
 800a0b2:	e7bb      	b.n	800a02c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a0b4:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <xTaskIncrementTick+0x100>)
 800a0b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0b8:	e7b8      	b.n	800a02c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800a0ba:	4a0d      	ldr	r2, [pc, #52]	; (800a0f0 <xTaskIncrementTick+0x114>)
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a0c2:	2700      	movs	r7, #0
}
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c8:	2400ac48 	.word	0x2400ac48
 800a0cc:	2400accc 	.word	0x2400accc
 800a0d0:	2400a7d8 	.word	0x2400a7d8
 800a0d4:	2400a7dc 	.word	0x2400a7dc
 800a0d8:	2400ac84 	.word	0x2400ac84
 800a0dc:	2400ac80 	.word	0x2400ac80
 800a0e0:	2400a7d4 	.word	0x2400a7d4
 800a0e4:	2400a7e0 	.word	0x2400a7e0
 800a0e8:	2400acd0 	.word	0x2400acd0
 800a0ec:	2400ac50 	.word	0x2400ac50
 800a0f0:	2400ac88 	.word	0x2400ac88

0800a0f4 <xTaskResumeAll>:
{
 800a0f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a0f6:	4b35      	ldr	r3, [pc, #212]	; (800a1cc <xTaskResumeAll+0xd8>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	b943      	cbnz	r3, 800a10e <xTaskResumeAll+0x1a>
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	e7fe      	b.n	800a10c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a10e:	f7fe fe21 	bl	8008d54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a112:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <xTaskResumeAll+0xd8>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	3a01      	subs	r2, #1
 800a118:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d14f      	bne.n	800a1c0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a120:	4b2b      	ldr	r3, [pc, #172]	; (800a1d0 <xTaskResumeAll+0xdc>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	b90b      	cbnz	r3, 800a12a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a126:	2400      	movs	r4, #0
 800a128:	e04b      	b.n	800a1c2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a12a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a12c:	4b29      	ldr	r3, [pc, #164]	; (800a1d4 <xTaskResumeAll+0xe0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	b31b      	cbz	r3, 800a17a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a132:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <xTaskResumeAll+0xe0>)
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a138:	f104 0018 	add.w	r0, r4, #24
 800a13c:	f7fe fd90 	bl	8008c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a140:	1d25      	adds	r5, r4, #4
 800a142:	4628      	mov	r0, r5
 800a144:	f7fe fd8c 	bl	8008c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a148:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a14a:	4b23      	ldr	r3, [pc, #140]	; (800a1d8 <xTaskResumeAll+0xe4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4298      	cmp	r0, r3
 800a150:	d901      	bls.n	800a156 <xTaskResumeAll+0x62>
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <xTaskResumeAll+0xe4>)
 800a154:	6018      	str	r0, [r3, #0]
 800a156:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a15a:	4629      	mov	r1, r5
 800a15c:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <xTaskResumeAll+0xe8>)
 800a15e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a162:	f7fe fd59 	bl	8008c18 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a166:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a168:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <xTaskResumeAll+0xec>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	429a      	cmp	r2, r3
 800a170:	d3dc      	bcc.n	800a12c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <xTaskResumeAll+0xf0>)
 800a174:	2201      	movs	r2, #1
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	e7d8      	b.n	800a12c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a17a:	b10c      	cbz	r4, 800a180 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a17c:	f7ff fcb6 	bl	8009aec <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a180:	4b19      	ldr	r3, [pc, #100]	; (800a1e8 <xTaskResumeAll+0xf4>)
 800a182:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a184:	b984      	cbnz	r4, 800a1a8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a186:	4b17      	ldr	r3, [pc, #92]	; (800a1e4 <xTaskResumeAll+0xf0>)
 800a188:	681c      	ldr	r4, [r3, #0]
 800a18a:	b1d4      	cbz	r4, 800a1c2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a18c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a1a0:	2401      	movs	r4, #1
 800a1a2:	e00e      	b.n	800a1c2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1a4:	3c01      	subs	r4, #1
 800a1a6:	d007      	beq.n	800a1b8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a1a8:	f7ff ff18 	bl	8009fdc <xTaskIncrementTick>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d0f9      	beq.n	800a1a4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <xTaskResumeAll+0xf0>)
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e7f5      	b.n	800a1a4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800a1b8:	4b0b      	ldr	r3, [pc, #44]	; (800a1e8 <xTaskResumeAll+0xf4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e7e2      	b.n	800a186 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a1c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a1c2:	f7fe fde9 	bl	8008d98 <vPortExitCritical>
}
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2400ac48 	.word	0x2400ac48
 800a1d0:	2400ac40 	.word	0x2400ac40
 800a1d4:	2400ac8c 	.word	0x2400ac8c
 800a1d8:	2400ac50 	.word	0x2400ac50
 800a1dc:	2400a7e0 	.word	0x2400a7e0
 800a1e0:	2400a7d4 	.word	0x2400a7d4
 800a1e4:	2400acd0 	.word	0x2400acd0
 800a1e8:	2400ac88 	.word	0x2400ac88

0800a1ec <vTaskDelay>:
	{
 800a1ec:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1ee:	b1a8      	cbz	r0, 800a21c <vTaskDelay+0x30>
 800a1f0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <vTaskDelay+0x48>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	b143      	cbz	r3, 800a20a <vTaskDelay+0x1e>
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	e7fe      	b.n	800a208 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a20a:	f7ff fed9 	bl	8009fc0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a20e:	2100      	movs	r1, #0
 800a210:	4620      	mov	r0, r4
 800a212:	f7ff fdcd 	bl	8009db0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a216:	f7ff ff6d 	bl	800a0f4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a21a:	b948      	cbnz	r0, 800a230 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a21c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
	}
 800a230:	bd10      	pop	{r4, pc}
 800a232:	bf00      	nop
 800a234:	2400ac48 	.word	0x2400ac48

0800a238 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a238:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <vTaskSwitchContext+0x88>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	b11b      	cbz	r3, 800a246 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a23e:	4b21      	ldr	r3, [pc, #132]	; (800a2c4 <vTaskSwitchContext+0x8c>)
 800a240:	2201      	movs	r2, #1
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a246:	4b1f      	ldr	r3, [pc, #124]	; (800a2c4 <vTaskSwitchContext+0x8c>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24c:	4b1e      	ldr	r3, [pc, #120]	; (800a2c8 <vTaskSwitchContext+0x90>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a254:	008a      	lsls	r2, r1, #2
 800a256:	491d      	ldr	r1, [pc, #116]	; (800a2cc <vTaskSwitchContext+0x94>)
 800a258:	588a      	ldr	r2, [r1, r2]
 800a25a:	b95a      	cbnz	r2, 800a274 <vTaskSwitchContext+0x3c>
 800a25c:	b10b      	cbz	r3, 800a262 <vTaskSwitchContext+0x2a>
 800a25e:	3b01      	subs	r3, #1
 800a260:	e7f6      	b.n	800a250 <vTaskSwitchContext+0x18>
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	e7fe      	b.n	800a272 <vTaskSwitchContext+0x3a>
 800a274:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a278:	0082      	lsls	r2, r0, #2
 800a27a:	440a      	add	r2, r1
 800a27c:	6850      	ldr	r0, [r2, #4]
 800a27e:	6840      	ldr	r0, [r0, #4]
 800a280:	6050      	str	r0, [r2, #4]
 800a282:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a286:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a28a:	3208      	adds	r2, #8
 800a28c:	4411      	add	r1, r2
 800a28e:	4288      	cmp	r0, r1
 800a290:	d00f      	beq.n	800a2b2 <vTaskSwitchContext+0x7a>
 800a292:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a296:	0091      	lsls	r1, r2, #2
 800a298:	4a0c      	ldr	r2, [pc, #48]	; (800a2cc <vTaskSwitchContext+0x94>)
 800a29a:	440a      	add	r2, r1
 800a29c:	6852      	ldr	r2, [r2, #4]
 800a29e:	68d1      	ldr	r1, [r2, #12]
 800a2a0:	4a0b      	ldr	r2, [pc, #44]	; (800a2d0 <vTaskSwitchContext+0x98>)
 800a2a2:	6011      	str	r1, [r2, #0]
 800a2a4:	4908      	ldr	r1, [pc, #32]	; (800a2c8 <vTaskSwitchContext+0x90>)
 800a2a6:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2a8:	6813      	ldr	r3, [r2, #0]
 800a2aa:	3354      	adds	r3, #84	; 0x54
 800a2ac:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <vTaskSwitchContext+0x9c>)
 800a2ae:	6013      	str	r3, [r2, #0]
}
 800a2b0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b2:	6840      	ldr	r0, [r0, #4]
 800a2b4:	4662      	mov	r2, ip
 800a2b6:	0091      	lsls	r1, r2, #2
 800a2b8:	4a04      	ldr	r2, [pc, #16]	; (800a2cc <vTaskSwitchContext+0x94>)
 800a2ba:	440a      	add	r2, r1
 800a2bc:	6050      	str	r0, [r2, #4]
 800a2be:	e7e8      	b.n	800a292 <vTaskSwitchContext+0x5a>
 800a2c0:	2400ac48 	.word	0x2400ac48
 800a2c4:	2400acd0 	.word	0x2400acd0
 800a2c8:	2400ac50 	.word	0x2400ac50
 800a2cc:	2400a7e0 	.word	0x2400a7e0
 800a2d0:	2400a7d4 	.word	0x2400a7d4
 800a2d4:	240000a8 	.word	0x240000a8

0800a2d8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a2d8:	b158      	cbz	r0, 800a2f2 <vTaskPlaceOnEventList+0x1a>
{
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2de:	4a09      	ldr	r2, [pc, #36]	; (800a304 <vTaskPlaceOnEventList+0x2c>)
 800a2e0:	6811      	ldr	r1, [r2, #0]
 800a2e2:	3118      	adds	r1, #24
 800a2e4:	f7fe fca3 	bl	8008c2e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f7ff fd60 	bl	8009db0 <prvAddCurrentTaskToDelayedList>
}
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a302:	e7fe      	b.n	800a302 <vTaskPlaceOnEventList+0x2a>
 800a304:	2400a7d4 	.word	0x2400a7d4

0800a308 <vTaskPlaceOnEventListRestricted>:
	{
 800a308:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a30a:	b170      	cbz	r0, 800a32a <vTaskPlaceOnEventListRestricted+0x22>
 800a30c:	460d      	mov	r5, r1
 800a30e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a310:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <vTaskPlaceOnEventListRestricted+0x34>)
 800a312:	6811      	ldr	r1, [r2, #0]
 800a314:	3118      	adds	r1, #24
 800a316:	f7fe fc7f 	bl	8008c18 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a31a:	b10c      	cbz	r4, 800a320 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a31c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a320:	4621      	mov	r1, r4
 800a322:	4628      	mov	r0, r5
 800a324:	f7ff fd44 	bl	8009db0 <prvAddCurrentTaskToDelayedList>
	}
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a33a:	e7fe      	b.n	800a33a <vTaskPlaceOnEventListRestricted+0x32>
 800a33c:	2400a7d4 	.word	0x2400a7d4

0800a340 <xTaskRemoveFromEventList>:
{
 800a340:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a342:	68c3      	ldr	r3, [r0, #12]
 800a344:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a346:	b324      	cbz	r4, 800a392 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a348:	f104 0518 	add.w	r5, r4, #24
 800a34c:	4628      	mov	r0, r5
 800a34e:	f7fe fc87 	bl	8008c60 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a352:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <xTaskRemoveFromEventList+0x74>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	bb2b      	cbnz	r3, 800a3a4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a358:	1d25      	adds	r5, r4, #4
 800a35a:	4628      	mov	r0, r5
 800a35c:	f7fe fc80 	bl	8008c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a360:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <xTaskRemoveFromEventList+0x78>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4298      	cmp	r0, r3
 800a368:	d901      	bls.n	800a36e <xTaskRemoveFromEventList+0x2e>
 800a36a:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <xTaskRemoveFromEventList+0x78>)
 800a36c:	6018      	str	r0, [r3, #0]
 800a36e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a372:	4629      	mov	r1, r5
 800a374:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <xTaskRemoveFromEventList+0x7c>)
 800a376:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a37a:	f7fe fc4d 	bl	8008c18 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a37e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <xTaskRemoveFromEventList+0x80>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	429a      	cmp	r2, r3
 800a388:	d911      	bls.n	800a3ae <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a38a:	2001      	movs	r0, #1
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <xTaskRemoveFromEventList+0x84>)
 800a38e:	6018      	str	r0, [r3, #0]
}
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a3a2:	e7fe      	b.n	800a3a2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <xTaskRemoveFromEventList+0x88>)
 800a3a8:	f7fe fc36 	bl	8008c18 <vListInsertEnd>
 800a3ac:	e7e7      	b.n	800a37e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a3ae:	2000      	movs	r0, #0
	return xReturn;
 800a3b0:	e7ee      	b.n	800a390 <xTaskRemoveFromEventList+0x50>
 800a3b2:	bf00      	nop
 800a3b4:	2400ac48 	.word	0x2400ac48
 800a3b8:	2400ac50 	.word	0x2400ac50
 800a3bc:	2400a7e0 	.word	0x2400a7e0
 800a3c0:	2400a7d4 	.word	0x2400a7d4
 800a3c4:	2400acd0 	.word	0x2400acd0
 800a3c8:	2400ac8c 	.word	0x2400ac8c

0800a3cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3cc:	4b03      	ldr	r3, [pc, #12]	; (800a3dc <vTaskInternalSetTimeOutState+0x10>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <vTaskInternalSetTimeOutState+0x14>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6043      	str	r3, [r0, #4]
}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	2400ac84 	.word	0x2400ac84
 800a3e0:	2400accc 	.word	0x2400accc

0800a3e4 <xTaskCheckForTimeOut>:
{
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a3e6:	b1c8      	cbz	r0, 800a41c <xTaskCheckForTimeOut+0x38>
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a3ec:	b1f9      	cbz	r1, 800a42e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800a3ee:	f7fe fcb1 	bl	8008d54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a3f2:	4b1b      	ldr	r3, [pc, #108]	; (800a460 <xTaskCheckForTimeOut+0x7c>)
 800a3f4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3f6:	686b      	ldr	r3, [r5, #4]
 800a3f8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a400:	d026      	beq.n	800a450 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a402:	4e18      	ldr	r6, [pc, #96]	; (800a464 <xTaskCheckForTimeOut+0x80>)
 800a404:	6836      	ldr	r6, [r6, #0]
 800a406:	682f      	ldr	r7, [r5, #0]
 800a408:	42b7      	cmp	r7, r6
 800a40a:	d001      	beq.n	800a410 <xTaskCheckForTimeOut+0x2c>
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d924      	bls.n	800a45a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a410:	4282      	cmp	r2, r0
 800a412:	d815      	bhi.n	800a440 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800a414:	2300      	movs	r3, #0
 800a416:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a418:	2401      	movs	r4, #1
 800a41a:	e01a      	b.n	800a452 <xTaskCheckForTimeOut+0x6e>
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a42c:	e7fe      	b.n	800a42c <xTaskCheckForTimeOut+0x48>
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a43e:	e7fe      	b.n	800a43e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800a440:	1a5b      	subs	r3, r3, r1
 800a442:	4413      	add	r3, r2
 800a444:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a446:	4628      	mov	r0, r5
 800a448:	f7ff ffc0 	bl	800a3cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a44c:	2400      	movs	r4, #0
 800a44e:	e000      	b.n	800a452 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a450:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a452:	f7fe fca1 	bl	8008d98 <vPortExitCritical>
}
 800a456:	4620      	mov	r0, r4
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800a45a:	2401      	movs	r4, #1
 800a45c:	e7f9      	b.n	800a452 <xTaskCheckForTimeOut+0x6e>
 800a45e:	bf00      	nop
 800a460:	2400accc 	.word	0x2400accc
 800a464:	2400ac84 	.word	0x2400ac84

0800a468 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a468:	4b01      	ldr	r3, [pc, #4]	; (800a470 <vTaskMissedYield+0x8>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
}
 800a46e:	4770      	bx	lr
 800a470:	2400acd0 	.word	0x2400acd0

0800a474 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <xTaskGetSchedulerState+0x18>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b133      	cbz	r3, 800a488 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a47a:	4b05      	ldr	r3, [pc, #20]	; (800a490 <xTaskGetSchedulerState+0x1c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	b10b      	cbz	r3, 800a484 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a480:	2000      	movs	r0, #0
	}
 800a482:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a484:	2002      	movs	r0, #2
 800a486:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a488:	2001      	movs	r0, #1
 800a48a:	4770      	bx	lr
 800a48c:	2400aca0 	.word	0x2400aca0
 800a490:	2400ac48 	.word	0x2400ac48

0800a494 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a494:	2800      	cmp	r0, #0
 800a496:	d03e      	beq.n	800a516 <xTaskPriorityInherit+0x82>
	{
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a49c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a49e:	4a20      	ldr	r2, [pc, #128]	; (800a520 <xTaskPriorityInherit+0x8c>)
 800a4a0:	6812      	ldr	r2, [r2, #0]
 800a4a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d22e      	bcs.n	800a506 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4a8:	6982      	ldr	r2, [r0, #24]
 800a4aa:	2a00      	cmp	r2, #0
 800a4ac:	db05      	blt.n	800a4ba <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ae:	4a1c      	ldr	r2, [pc, #112]	; (800a520 <xTaskPriorityInherit+0x8c>)
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a4b8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4ba:	6961      	ldr	r1, [r4, #20]
 800a4bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4c0:	4a18      	ldr	r2, [pc, #96]	; (800a524 <xTaskPriorityInherit+0x90>)
 800a4c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d005      	beq.n	800a4d6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4ca:	4b15      	ldr	r3, [pc, #84]	; (800a520 <xTaskPriorityInherit+0x8c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a4d2:	2001      	movs	r0, #1
	}
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4d6:	1d25      	adds	r5, r4, #4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7fe fbc1 	bl	8008c60 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <xTaskPriorityInherit+0x8c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a4e4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4e6:	4b10      	ldr	r3, [pc, #64]	; (800a528 <xTaskPriorityInherit+0x94>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	d901      	bls.n	800a4f2 <xTaskPriorityInherit+0x5e>
 800a4ee:	4b0e      	ldr	r3, [pc, #56]	; (800a528 <xTaskPriorityInherit+0x94>)
 800a4f0:	6018      	str	r0, [r3, #0]
 800a4f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <xTaskPriorityInherit+0x90>)
 800a4fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4fe:	f7fe fb8b 	bl	8008c18 <vListInsertEnd>
				xReturn = pdTRUE;
 800a502:	2001      	movs	r0, #1
 800a504:	e7e6      	b.n	800a4d4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a506:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <xTaskPriorityInherit+0x8c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	429a      	cmp	r2, r3
 800a510:	d303      	bcc.n	800a51a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800a512:	2000      	movs	r0, #0
 800a514:	e7de      	b.n	800a4d4 <xTaskPriorityInherit+0x40>
 800a516:	2000      	movs	r0, #0
	}
 800a518:	4770      	bx	lr
					xReturn = pdTRUE;
 800a51a:	2001      	movs	r0, #1
		return xReturn;
 800a51c:	e7da      	b.n	800a4d4 <xTaskPriorityInherit+0x40>
 800a51e:	bf00      	nop
 800a520:	2400a7d4 	.word	0x2400a7d4
 800a524:	2400a7e0 	.word	0x2400a7e0
 800a528:	2400ac50 	.word	0x2400ac50

0800a52c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d03b      	beq.n	800a5a8 <xTaskPriorityDisinherit+0x7c>
	{
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a534:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <xTaskPriorityDisinherit+0x84>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4283      	cmp	r3, r0
 800a53a:	d008      	beq.n	800a54e <xTaskPriorityDisinherit+0x22>
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	e7fe      	b.n	800a54c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a54e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a550:	b943      	cbnz	r3, 800a564 <xTaskPriorityDisinherit+0x38>
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	e7fe      	b.n	800a562 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a564:	3b01      	subs	r3, #1
 800a566:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a568:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a56a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a56c:	4291      	cmp	r1, r2
 800a56e:	d01d      	beq.n	800a5ac <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a570:	b10b      	cbz	r3, 800a576 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a572:	2000      	movs	r0, #0
	}
 800a574:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a576:	1d05      	adds	r5, r0, #4
 800a578:	4628      	mov	r0, r5
 800a57a:	f7fe fb71 	bl	8008c60 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a57e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a580:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a582:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800a586:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <xTaskPriorityDisinherit+0x88>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4298      	cmp	r0, r3
 800a58e:	d901      	bls.n	800a594 <xTaskPriorityDisinherit+0x68>
 800a590:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <xTaskPriorityDisinherit+0x88>)
 800a592:	6018      	str	r0, [r3, #0]
 800a594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a598:	4629      	mov	r1, r5
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <xTaskPriorityDisinherit+0x8c>)
 800a59c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5a0:	f7fe fb3a 	bl	8008c18 <vListInsertEnd>
					xReturn = pdTRUE;
 800a5a4:	2001      	movs	r0, #1
 800a5a6:	e7e5      	b.n	800a574 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a5a8:	2000      	movs	r0, #0
	}
 800a5aa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e7e1      	b.n	800a574 <xTaskPriorityDisinherit+0x48>
 800a5b0:	2400a7d4 	.word	0x2400a7d4
 800a5b4:	2400ac50 	.word	0x2400ac50
 800a5b8:	2400a7e0 	.word	0x2400a7e0

0800a5bc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d046      	beq.n	800a64e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a5c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5c6:	b943      	cbnz	r3, 800a5da <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	e7fe      	b.n	800a5d8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a5dc:	428a      	cmp	r2, r1
 800a5de:	d200      	bcs.n	800a5e2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5e0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a5e4:	4291      	cmp	r1, r2
 800a5e6:	d001      	beq.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d000      	beq.n	800a5ee <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	42a3      	cmp	r3, r4
 800a5f4:	d022      	beq.n	800a63c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800a5f6:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5f8:	69a3      	ldr	r3, [r4, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db02      	blt.n	800a604 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5fe:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a602:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a604:	6962      	ldr	r2, [r4, #20]
 800a606:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a60c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a610:	428a      	cmp	r2, r1
 800a612:	d1eb      	bne.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a614:	1d25      	adds	r5, r4, #4
 800a616:	4628      	mov	r0, r5
 800a618:	f7fe fb22 	bl	8008c60 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a61c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4298      	cmp	r0, r3
 800a624:	d901      	bls.n	800a62a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a628:	6018      	str	r0, [r3, #0]
 800a62a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a62e:	4629      	mov	r1, r5
 800a630:	4b08      	ldr	r3, [pc, #32]	; (800a654 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a632:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a636:	f7fe faef 	bl	8008c18 <vListInsertEnd>
	}
 800a63a:	e7d7      	b.n	800a5ec <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800a64c:	e7fe      	b.n	800a64c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800a64e:	4770      	bx	lr
 800a650:	2400a7d4 	.word	0x2400a7d4
 800a654:	2400a7e0 	.word	0x2400a7e0
 800a658:	2400ac50 	.word	0x2400ac50

0800a65c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <pvTaskIncrementMutexHeldCount+0x18>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	b123      	cbz	r3, 800a66c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a662:	4b04      	ldr	r3, [pc, #16]	; (800a674 <pvTaskIncrementMutexHeldCount+0x18>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a668:	3301      	adds	r3, #1
 800a66a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800a66c:	4b01      	ldr	r3, [pc, #4]	; (800a674 <pvTaskIncrementMutexHeldCount+0x18>)
 800a66e:	6818      	ldr	r0, [r3, #0]
	}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	2400a7d4 	.word	0x2400a7d4

0800a678 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <prvGetNextExpireTime+0x1c>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6813      	ldr	r3, [r2, #0]
 800a67e:	b92b      	cbnz	r3, 800a68c <prvGetNextExpireTime+0x14>
 800a680:	2301      	movs	r3, #1
 800a682:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a684:	b923      	cbnz	r3, 800a690 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a686:	68d3      	ldr	r3, [r2, #12]
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a68c:	2300      	movs	r3, #0
 800a68e:	e7f8      	b.n	800a682 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a690:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a692:	4770      	bx	lr
 800a694:	2400acd4 	.word	0x2400acd4

0800a698 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a698:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a69a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a69c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a69e:	4291      	cmp	r1, r2
 800a6a0:	d80c      	bhi.n	800a6bc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6a2:	1ad2      	subs	r2, r2, r3
 800a6a4:	6983      	ldr	r3, [r0, #24]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d301      	bcc.n	800a6ae <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6aa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a6ac:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6ae:	1d01      	adds	r1, r0, #4
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <prvInsertTimerInActiveList+0x48>)
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	f7fe fabb 	bl	8008c2e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e7f7      	b.n	800a6ac <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	bf2c      	ite	cs
 800a6c0:	2200      	movcs	r2, #0
 800a6c2:	2201      	movcc	r2, #1
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	bf38      	it	cc
 800a6c8:	2200      	movcc	r2, #0
 800a6ca:	b10a      	cbz	r2, 800a6d0 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800a6cc:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a6ce:	e7ed      	b.n	800a6ac <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6d0:	1d01      	adds	r1, r0, #4
 800a6d2:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <prvInsertTimerInActiveList+0x4c>)
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	f7fe faaa 	bl	8008c2e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e7e6      	b.n	800a6ac <prvInsertTimerInActiveList+0x14>
 800a6de:	bf00      	nop
 800a6e0:	2400acd8 	.word	0x2400acd8
 800a6e4:	2400acd4 	.word	0x2400acd4

0800a6e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6e8:	b530      	push	{r4, r5, lr}
 800a6ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6ec:	f7fe fb32 	bl	8008d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6f0:	4b11      	ldr	r3, [pc, #68]	; (800a738 <prvCheckForValidListAndQueue+0x50>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b11b      	cbz	r3, 800a6fe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6f6:	f7fe fb4f 	bl	8008d98 <vPortExitCritical>
}
 800a6fa:	b003      	add	sp, #12
 800a6fc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a6fe:	4d0f      	ldr	r5, [pc, #60]	; (800a73c <prvCheckForValidListAndQueue+0x54>)
 800a700:	4628      	mov	r0, r5
 800a702:	f7fe fa7b 	bl	8008bfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a706:	4c0e      	ldr	r4, [pc, #56]	; (800a740 <prvCheckForValidListAndQueue+0x58>)
 800a708:	4620      	mov	r0, r4
 800a70a:	f7fe fa77 	bl	8008bfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <prvCheckForValidListAndQueue+0x5c>)
 800a710:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <prvCheckForValidListAndQueue+0x60>)
 800a714:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a716:	2300      	movs	r3, #0
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <prvCheckForValidListAndQueue+0x64>)
 800a71c:	4a0c      	ldr	r2, [pc, #48]	; (800a750 <prvCheckForValidListAndQueue+0x68>)
 800a71e:	2110      	movs	r1, #16
 800a720:	200a      	movs	r0, #10
 800a722:	f7fe fd66 	bl	80091f2 <xQueueGenericCreateStatic>
 800a726:	4b04      	ldr	r3, [pc, #16]	; (800a738 <prvCheckForValidListAndQueue+0x50>)
 800a728:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d0e3      	beq.n	800a6f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a72e:	4909      	ldr	r1, [pc, #36]	; (800a754 <prvCheckForValidListAndQueue+0x6c>)
 800a730:	f7ff f972 	bl	8009a18 <vQueueAddToRegistry>
 800a734:	e7df      	b.n	800a6f6 <prvCheckForValidListAndQueue+0xe>
 800a736:	bf00      	nop
 800a738:	2400adf8 	.word	0x2400adf8
 800a73c:	2400ad7c 	.word	0x2400ad7c
 800a740:	2400ad90 	.word	0x2400ad90
 800a744:	2400acd4 	.word	0x2400acd4
 800a748:	2400acd8 	.word	0x2400acd8
 800a74c:	2400ada8 	.word	0x2400ada8
 800a750:	2400acdc 	.word	0x2400acdc
 800a754:	08019fcc 	.word	0x08019fcc

0800a758 <xTimerCreateTimerTask>:
{
 800a758:	b510      	push	{r4, lr}
 800a75a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a75c:	f7ff ffc4 	bl	800a6e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a760:	4b12      	ldr	r3, [pc, #72]	; (800a7ac <xTimerCreateTimerTask+0x54>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	b1cb      	cbz	r3, 800a79a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a766:	2400      	movs	r4, #0
 800a768:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a76a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a76c:	aa07      	add	r2, sp, #28
 800a76e:	a906      	add	r1, sp, #24
 800a770:	a805      	add	r0, sp, #20
 800a772:	f7fe f917 	bl	80089a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a776:	9b05      	ldr	r3, [sp, #20]
 800a778:	9302      	str	r3, [sp, #8]
 800a77a:	9b06      	ldr	r3, [sp, #24]
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	2302      	movs	r3, #2
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4623      	mov	r3, r4
 800a784:	9a07      	ldr	r2, [sp, #28]
 800a786:	490a      	ldr	r1, [pc, #40]	; (800a7b0 <xTimerCreateTimerTask+0x58>)
 800a788:	480a      	ldr	r0, [pc, #40]	; (800a7b4 <xTimerCreateTimerTask+0x5c>)
 800a78a:	f7ff fb53 	bl	8009e34 <xTaskCreateStatic>
 800a78e:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <xTimerCreateTimerTask+0x60>)
 800a790:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a792:	b110      	cbz	r0, 800a79a <xTimerCreateTimerTask+0x42>
}
 800a794:	2001      	movs	r0, #1
 800a796:	b008      	add	sp, #32
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a7aa:	e7fe      	b.n	800a7aa <xTimerCreateTimerTask+0x52>
 800a7ac:	2400adf8 	.word	0x2400adf8
 800a7b0:	08019fd4 	.word	0x08019fd4
 800a7b4:	0800aac1 	.word	0x0800aac1
 800a7b8:	2400adfc 	.word	0x2400adfc

0800a7bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a7bc:	b1b8      	cbz	r0, 800a7ee <xTimerGenericCommand+0x32>
 800a7be:	469c      	mov	ip, r3
 800a7c0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a7c2:	4818      	ldr	r0, [pc, #96]	; (800a824 <xTimerGenericCommand+0x68>)
 800a7c4:	6800      	ldr	r0, [r0, #0]
 800a7c6:	b358      	cbz	r0, 800a820 <xTimerGenericCommand+0x64>
{
 800a7c8:	b500      	push	{lr}
 800a7ca:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a7cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7ce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7d0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7d2:	2905      	cmp	r1, #5
 800a7d4:	dc1c      	bgt.n	800a810 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7d6:	f7ff fe4d 	bl	800a474 <xTaskGetSchedulerState>
 800a7da:	2802      	cmp	r0, #2
 800a7dc:	d010      	beq.n	800a800 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7de:	2300      	movs	r3, #0
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4669      	mov	r1, sp
 800a7e4:	480f      	ldr	r0, [pc, #60]	; (800a824 <xTimerGenericCommand+0x68>)
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	f7fe fdbb 	bl	8009362 <xQueueGenericSend>
 800a7ec:	e015      	b.n	800a81a <xTimerGenericCommand+0x5e>
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a7fe:	e7fe      	b.n	800a7fe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a800:	2300      	movs	r3, #0
 800a802:	9a06      	ldr	r2, [sp, #24]
 800a804:	4669      	mov	r1, sp
 800a806:	4807      	ldr	r0, [pc, #28]	; (800a824 <xTimerGenericCommand+0x68>)
 800a808:	6800      	ldr	r0, [r0, #0]
 800a80a:	f7fe fdaa 	bl	8009362 <xQueueGenericSend>
 800a80e:	e004      	b.n	800a81a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a810:	2300      	movs	r3, #0
 800a812:	4662      	mov	r2, ip
 800a814:	4669      	mov	r1, sp
 800a816:	f7fe fe68 	bl	80094ea <xQueueGenericSendFromISR>
}
 800a81a:	b005      	add	sp, #20
 800a81c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a820:	2000      	movs	r0, #0
}
 800a822:	4770      	bx	lr
 800a824:	2400adf8 	.word	0x2400adf8

0800a828 <prvSwitchTimerLists>:
{
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a82c:	4b1b      	ldr	r3, [pc, #108]	; (800a89c <prvSwitchTimerLists+0x74>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	b362      	cbz	r2, 800a88e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a838:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a83a:	1d25      	adds	r5, r4, #4
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7fe fa0f 	bl	8008c60 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a842:	6a23      	ldr	r3, [r4, #32]
 800a844:	4620      	mov	r0, r4
 800a846:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a848:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a84c:	f013 0f04 	tst.w	r3, #4
 800a850:	d0ec      	beq.n	800a82c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a852:	69a3      	ldr	r3, [r4, #24]
 800a854:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a856:	429e      	cmp	r6, r3
 800a858:	d207      	bcs.n	800a86a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a85a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a85c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85e:	4629      	mov	r1, r5
 800a860:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <prvSwitchTimerLists+0x74>)
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	f7fe f9e3 	bl	8008c2e <vListInsert>
 800a868:	e7e0      	b.n	800a82c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a86a:	2100      	movs	r1, #0
 800a86c:	9100      	str	r1, [sp, #0]
 800a86e:	460b      	mov	r3, r1
 800a870:	4632      	mov	r2, r6
 800a872:	4620      	mov	r0, r4
 800a874:	f7ff ffa2 	bl	800a7bc <xTimerGenericCommand>
				configASSERT( xResult );
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1d7      	bne.n	800a82c <prvSwitchTimerLists+0x4>
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	e7fe      	b.n	800a88c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a88e:	4a04      	ldr	r2, [pc, #16]	; (800a8a0 <prvSwitchTimerLists+0x78>)
 800a890:	6810      	ldr	r0, [r2, #0]
 800a892:	4902      	ldr	r1, [pc, #8]	; (800a89c <prvSwitchTimerLists+0x74>)
 800a894:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a896:	6013      	str	r3, [r2, #0]
}
 800a898:	b002      	add	sp, #8
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	2400acd4 	.word	0x2400acd4
 800a8a0:	2400acd8 	.word	0x2400acd8

0800a8a4 <prvSampleTimeNow>:
{
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a8a8:	f7ff fb92 	bl	8009fd0 <xTaskGetTickCount>
 800a8ac:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a8ae:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <prvSampleTimeNow+0x28>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4283      	cmp	r3, r0
 800a8b4:	d805      	bhi.n	800a8c2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a8ba:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <prvSampleTimeNow+0x28>)
 800a8bc:	601c      	str	r4, [r3, #0]
}
 800a8be:	4620      	mov	r0, r4
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a8c2:	f7ff ffb1 	bl	800a828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	e7f6      	b.n	800a8ba <prvSampleTimeNow+0x16>
 800a8cc:	2400ada4 	.word	0x2400ada4

0800a8d0 <prvProcessExpiredTimer>:
{
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d8:	4917      	ldr	r1, [pc, #92]	; (800a938 <prvProcessExpiredTimer+0x68>)
 800a8da:	6809      	ldr	r1, [r1, #0]
 800a8dc:	68c9      	ldr	r1, [r1, #12]
 800a8de:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8e0:	1d20      	adds	r0, r4, #4
 800a8e2:	f7fe f9bd 	bl	8008c60 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8e6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800a8ea:	f01c 0f04 	tst.w	ip, #4
 800a8ee:	d108      	bne.n	800a902 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8f0:	f02c 0c01 	bic.w	ip, ip, #1
 800a8f4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8f8:	6a23      	ldr	r3, [r4, #32]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4798      	blx	r3
}
 800a8fe:	b002      	add	sp, #8
 800a900:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a902:	69a1      	ldr	r1, [r4, #24]
 800a904:	4633      	mov	r3, r6
 800a906:	462a      	mov	r2, r5
 800a908:	4431      	add	r1, r6
 800a90a:	4620      	mov	r0, r4
 800a90c:	f7ff fec4 	bl	800a698 <prvInsertTimerInActiveList>
 800a910:	2800      	cmp	r0, #0
 800a912:	d0f1      	beq.n	800a8f8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a914:	2100      	movs	r1, #0
 800a916:	9100      	str	r1, [sp, #0]
 800a918:	460b      	mov	r3, r1
 800a91a:	4632      	mov	r2, r6
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7ff ff4d 	bl	800a7bc <xTimerGenericCommand>
			configASSERT( xResult );
 800a922:	2800      	cmp	r0, #0
 800a924:	d1e8      	bne.n	800a8f8 <prvProcessExpiredTimer+0x28>
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	e7fe      	b.n	800a936 <prvProcessExpiredTimer+0x66>
 800a938:	2400acd4 	.word	0x2400acd4

0800a93c <prvProcessTimerOrBlockTask>:
{
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	4606      	mov	r6, r0
 800a942:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a944:	f7ff fb3c 	bl	8009fc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a948:	a801      	add	r0, sp, #4
 800a94a:	f7ff ffab 	bl	800a8a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	bb3b      	cbnz	r3, 800a9a2 <prvProcessTimerOrBlockTask+0x66>
 800a952:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a954:	42b0      	cmp	r0, r6
 800a956:	bf28      	it	cs
 800a958:	2c00      	cmpcs	r4, #0
 800a95a:	d019      	beq.n	800a990 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800a95c:	b124      	cbz	r4, 800a968 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a95e:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <prvProcessTimerOrBlockTask+0x70>)
 800a960:	6812      	ldr	r2, [r2, #0]
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	b9da      	cbnz	r2, 800a99e <prvProcessTimerOrBlockTask+0x62>
 800a966:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a968:	4622      	mov	r2, r4
 800a96a:	1b71      	subs	r1, r6, r5
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <prvProcessTimerOrBlockTask+0x74>)
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	f7ff f892 	bl	8009a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a974:	f7ff fbbe 	bl	800a0f4 <xTaskResumeAll>
 800a978:	b9a8      	cbnz	r0, 800a9a6 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800a97a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	e00a      	b.n	800a9a6 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800a990:	f7ff fbb0 	bl	800a0f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a994:	4629      	mov	r1, r5
 800a996:	4630      	mov	r0, r6
 800a998:	f7ff ff9a 	bl	800a8d0 <prvProcessExpiredTimer>
 800a99c:	e003      	b.n	800a9a6 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a99e:	461c      	mov	r4, r3
 800a9a0:	e7e2      	b.n	800a968 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800a9a2:	f7ff fba7 	bl	800a0f4 <xTaskResumeAll>
}
 800a9a6:	b002      	add	sp, #8
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	bf00      	nop
 800a9ac:	2400acd8 	.word	0x2400acd8
 800a9b0:	2400adf8 	.word	0x2400adf8

0800a9b4 <prvProcessReceivedCommands>:
{
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9b8:	e002      	b.n	800a9c0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	da0f      	bge.n	800a9e0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	a904      	add	r1, sp, #16
 800a9c4:	4b3d      	ldr	r3, [pc, #244]	; (800aabc <prvProcessReceivedCommands+0x108>)
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	f7fe fe4f 	bl	800966a <xQueueReceive>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d073      	beq.n	800aab8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	daf1      	bge.n	800a9ba <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9d6:	9907      	ldr	r1, [sp, #28]
 800a9d8:	9806      	ldr	r0, [sp, #24]
 800a9da:	9b05      	ldr	r3, [sp, #20]
 800a9dc:	4798      	blx	r3
 800a9de:	e7ec      	b.n	800a9ba <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9e0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9e2:	6963      	ldr	r3, [r4, #20]
 800a9e4:	b113      	cbz	r3, 800a9ec <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e6:	1d20      	adds	r0, r4, #4
 800a9e8:	f7fe f93a 	bl	8008c60 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9ec:	a803      	add	r0, sp, #12
 800a9ee:	f7ff ff59 	bl	800a8a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d8e3      	bhi.n	800a9c0 <prvProcessReceivedCommands+0xc>
 800a9f8:	e8df f003 	tbb	[pc, r3]
 800a9fc:	30050505 	.word	0x30050505
 800aa00:	05055037 	.word	0x05055037
 800aa04:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	69a1      	ldr	r1, [r4, #24]
 800aa16:	4602      	mov	r2, r0
 800aa18:	4419      	add	r1, r3
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff fe3c 	bl	800a698 <prvInsertTimerInActiveList>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d0cd      	beq.n	800a9c0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa24:	6a23      	ldr	r3, [r4, #32]
 800aa26:	4620      	mov	r0, r4
 800aa28:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa2e:	f013 0f04 	tst.w	r3, #4
 800aa32:	d0c5      	beq.n	800a9c0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa34:	69a2      	ldr	r2, [r4, #24]
 800aa36:	2100      	movs	r1, #0
 800aa38:	9100      	str	r1, [sp, #0]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	4402      	add	r2, r0
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff febb 	bl	800a7bc <xTimerGenericCommand>
							configASSERT( xResult );
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d1ba      	bne.n	800a9c0 <prvProcessReceivedCommands+0xc>
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	e7fe      	b.n	800aa5a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa60:	f023 0301 	bic.w	r3, r3, #1
 800aa64:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800aa68:	e7aa      	b.n	800a9c0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa6e:	f043 0301 	orr.w	r3, r3, #1
 800aa72:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa76:	9905      	ldr	r1, [sp, #20]
 800aa78:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa7a:	b131      	cbz	r1, 800aa8a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4401      	add	r1, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7ff fe08 	bl	800a698 <prvInsertTimerInActiveList>
					break;
 800aa88:	e79a      	b.n	800a9c0 <prvProcessReceivedCommands+0xc>
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa9a:	e7fe      	b.n	800aa9a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aaa0:	f013 0f02 	tst.w	r3, #2
 800aaa4:	d004      	beq.n	800aab0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800aaae:	e787      	b.n	800a9c0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7fe f865 	bl	8008b80 <vPortFree>
 800aab6:	e783      	b.n	800a9c0 <prvProcessReceivedCommands+0xc>
}
 800aab8:	b008      	add	sp, #32
 800aaba:	bd10      	pop	{r4, pc}
 800aabc:	2400adf8 	.word	0x2400adf8

0800aac0 <prvTimerTask>:
{
 800aac0:	b500      	push	{lr}
 800aac2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aac4:	a801      	add	r0, sp, #4
 800aac6:	f7ff fdd7 	bl	800a678 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aaca:	9901      	ldr	r1, [sp, #4]
 800aacc:	f7ff ff36 	bl	800a93c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800aad0:	f7ff ff70 	bl	800a9b4 <prvProcessReceivedCommands>
	for( ;; )
 800aad4:	e7f6      	b.n	800aac4 <prvTimerTask+0x4>

0800aad6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800aad6:	8880      	ldrh	r0, [r0, #4]
 800aad8:	4770      	bx	lr

0800aada <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800aada:	b570      	push	{r4, r5, r6, lr}
 800aadc:	6803      	ldr	r3, [r0, #0]
 800aade:	460c      	mov	r4, r1
 800aae0:	2100      	movs	r1, #0
 800aae2:	4605      	mov	r5, r0
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	4798      	blx	r3
 800aae8:	4606      	mov	r6, r0
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	4628      	mov	r0, r5
 800aaee:	1ba4      	subs	r4, r4, r6
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	b2a4      	uxth	r4, r4
 800aaf4:	4798      	blx	r3
 800aaf6:	fbb4 f0f0 	udiv	r0, r4, r0
 800aafa:	bd70      	pop	{r4, r5, r6, pc}

0800aafc <_ZN8touchgfx17AbstractPartition5clearEv>:
 800aafc:	2300      	movs	r3, #0
 800aafe:	8083      	strh	r3, [r0, #4]
 800ab00:	4770      	bx	lr

0800ab02 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800ab02:	b510      	push	{r4, lr}
 800ab04:	6803      	ldr	r3, [r0, #0]
 800ab06:	4604      	mov	r4, r0
 800ab08:	8881      	ldrh	r1, [r0, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	4798      	blx	r3
 800ab0e:	88a3      	ldrh	r3, [r4, #4]
 800ab10:	3301      	adds	r3, #1
 800ab12:	80a3      	strh	r3, [r4, #4]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ab16:	6803      	ldr	r3, [r0, #0]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	4718      	bx	r3

0800ab1c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ab1c:	4770      	bx	lr
	...

0800ab20 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ab20:	4a02      	ldr	r2, [pc, #8]	; (800ab2c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ab22:	6002      	str	r2, [r0, #0]
 800ab24:	2200      	movs	r2, #0
 800ab26:	8082      	strh	r2, [r0, #4]
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	08019fe4 	.word	0x08019fe4

0800ab30 <_ZN8touchgfx9Container13getFirstChildEv>:
 800ab30:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ab32:	4770      	bx	lr

0800ab34 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ab34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab36:	2000      	movs	r0, #0
 800ab38:	b12b      	cbz	r3, 800ab46 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab3a:	b920      	cbnz	r0, 800ab46 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab3c:	1a5a      	subs	r2, r3, r1
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	4250      	negs	r0, r2
 800ab42:	4150      	adcs	r0, r2
 800ab44:	e7f8      	b.n	800ab38 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ab46:	4770      	bx	lr

0800ab48 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6148      	str	r0, [r1, #20]
 800ab4c:	618b      	str	r3, [r1, #24]
 800ab4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab50:	b913      	cbnz	r3, 800ab58 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ab52:	6281      	str	r1, [r0, #40]	; 0x28
 800ab54:	4770      	bx	lr
 800ab56:	4613      	mov	r3, r2
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d1fb      	bne.n	800ab56 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ab5e:	6199      	str	r1, [r3, #24]
 800ab60:	4770      	bx	lr

0800ab62 <_ZN8touchgfx9Container9removeAllEv>:
 800ab62:	2200      	movs	r2, #0
 800ab64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab66:	b123      	cbz	r3, 800ab72 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ab68:	6999      	ldr	r1, [r3, #24]
 800ab6a:	6281      	str	r1, [r0, #40]	; 0x28
 800ab6c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ab70:	e7f8      	b.n	800ab64 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ab72:	4770      	bx	lr

0800ab74 <_ZN8touchgfx9Container6unlinkEv>:
 800ab74:	2300      	movs	r3, #0
 800ab76:	6283      	str	r3, [r0, #40]	; 0x28
 800ab78:	4770      	bx	lr

0800ab7a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	8002      	strh	r2, [r0, #0]
 800ab7e:	8042      	strh	r2, [r0, #2]
 800ab80:	8082      	strh	r2, [r0, #4]
 800ab82:	80c2      	strh	r2, [r0, #6]
 800ab84:	4770      	bx	lr

0800ab86 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ab86:	b570      	push	{r4, r5, r6, lr}
 800ab88:	460d      	mov	r5, r1
 800ab8a:	4616      	mov	r6, r2
 800ab8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab8e:	b13c      	cbz	r4, 800aba0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	4620      	mov	r0, r4
 800ab94:	4632      	mov	r2, r6
 800ab96:	4629      	mov	r1, r5
 800ab98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab9a:	4798      	blx	r3
 800ab9c:	69a4      	ldr	r4, [r4, #24]
 800ab9e:	e7f6      	b.n	800ab8e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800aba0:	bd70      	pop	{r4, r5, r6, pc}

0800aba2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800aba2:	b538      	push	{r3, r4, r5, lr}
 800aba4:	460d      	mov	r5, r1
 800aba6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800aba8:	b134      	cbz	r4, 800abb8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	4798      	blx	r3
 800abb4:	69a4      	ldr	r4, [r4, #24]
 800abb6:	e7f7      	b.n	800aba8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800abb8:	bd38      	pop	{r3, r4, r5, pc}

0800abba <_ZNK8touchgfx9Container17invalidateContentEv>:
 800abba:	b510      	push	{r4, lr}
 800abbc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800abbe:	b12c      	cbz	r4, 800abcc <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	4620      	mov	r0, r4
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	4798      	blx	r3
 800abc8:	69a4      	ldr	r4, [r4, #24]
 800abca:	e7f8      	b.n	800abbe <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800abcc:	bd10      	pop	{r4, pc}

0800abce <_ZN8touchgfx9ContainerD1Ev>:
 800abce:	4770      	bx	lr

0800abd0 <_ZN8touchgfx9ContainerD0Ev>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4604      	mov	r4, r0
 800abd4:	212c      	movs	r1, #44	; 0x2c
 800abd6:	f00c ffde 	bl	8017b96 <_ZdlPvj>
 800abda:	4620      	mov	r0, r4
 800abdc:	bd10      	pop	{r4, pc}

0800abde <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800abde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abe0:	b19b      	cbz	r3, 800ac0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800abe2:	428b      	cmp	r3, r1
 800abe4:	d109      	bne.n	800abfa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800abe6:	699a      	ldr	r2, [r3, #24]
 800abe8:	2100      	movs	r1, #0
 800abea:	6159      	str	r1, [r3, #20]
 800abec:	6282      	str	r2, [r0, #40]	; 0x28
 800abee:	b902      	cbnz	r2, 800abf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800abf0:	4770      	bx	lr
 800abf2:	6199      	str	r1, [r3, #24]
 800abf4:	4770      	bx	lr
 800abf6:	4613      	mov	r3, r2
 800abf8:	b13a      	cbz	r2, 800ac0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800abfa:	699a      	ldr	r2, [r3, #24]
 800abfc:	428a      	cmp	r2, r1
 800abfe:	d1fa      	bne.n	800abf6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ac00:	698a      	ldr	r2, [r1, #24]
 800ac02:	619a      	str	r2, [r3, #24]
 800ac04:	2300      	movs	r3, #0
 800ac06:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ac0a:	4770      	bx	lr

0800ac0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ac0c:	b410      	push	{r4}
 800ac0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ac10:	4604      	mov	r4, r0
 800ac12:	b92b      	cbnz	r3, 800ac20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ac14:	6803      	ldr	r3, [r0, #0]
 800ac16:	4611      	mov	r1, r2
 800ac18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac1e:	4718      	bx	r3
 800ac20:	b941      	cbnz	r1, 800ac34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ac22:	6193      	str	r3, [r2, #24]
 800ac24:	6282      	str	r2, [r0, #40]	; 0x28
 800ac26:	6154      	str	r4, [r2, #20]
 800ac28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0f9      	beq.n	800ac28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ac34:	4299      	cmp	r1, r3
 800ac36:	6998      	ldr	r0, [r3, #24]
 800ac38:	d1f9      	bne.n	800ac2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ac3a:	6190      	str	r0, [r2, #24]
 800ac3c:	618a      	str	r2, [r1, #24]
 800ac3e:	e7f2      	b.n	800ac26 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ac40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	461f      	mov	r7, r3
 800ac46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	4616      	mov	r6, r2
 800ac4e:	b103      	cbz	r3, 800ac52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ac50:	6038      	str	r0, [r7, #0]
 800ac52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ac54:	b314      	cbz	r4, 800ac9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ac56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ac5a:	b1eb      	cbz	r3, 800ac98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac5c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ac60:	428d      	cmp	r5, r1
 800ac62:	db19      	blt.n	800ac98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac64:	b289      	uxth	r1, r1
 800ac66:	8923      	ldrh	r3, [r4, #8]
 800ac68:	440b      	add	r3, r1
 800ac6a:	b21b      	sxth	r3, r3
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	da13      	bge.n	800ac98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac70:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ac74:	4296      	cmp	r6, r2
 800ac76:	db0f      	blt.n	800ac98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	8963      	ldrh	r3, [r4, #10]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	b21b      	sxth	r3, r3
 800ac80:	429e      	cmp	r6, r3
 800ac82:	da09      	bge.n	800ac98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	1ab2      	subs	r2, r6, r2
 800ac88:	1a69      	subs	r1, r5, r1
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800ac90:	b212      	sxth	r2, r2
 800ac92:	463b      	mov	r3, r7
 800ac94:	b209      	sxth	r1, r1
 800ac96:	47c0      	blx	r8
 800ac98:	69a4      	ldr	r4, [r4, #24]
 800ac9a:	e7db      	b.n	800ac54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ac9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aca0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	4c6d      	ldr	r4, [pc, #436]	; (800ae5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800aca6:	b0a1      	sub	sp, #132	; 0x84
 800aca8:	4606      	mov	r6, r0
 800acaa:	6824      	ldr	r4, [r4, #0]
 800acac:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800acae:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800acb2:	2400      	movs	r4, #0
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	802c      	strh	r4, [r5, #0]
 800acb8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800acba:	802c      	strh	r4, [r5, #0]
 800acbc:	601c      	str	r4, [r3, #0]
 800acbe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800acc2:	f7ff ffbd 	bl	800ac40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800acc6:	f1b9 0f03 	cmp.w	r9, #3
 800acca:	f340 80c1 	ble.w	800ae50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800acce:	4631      	mov	r1, r6
 800acd0:	a80c      	add	r0, sp, #48	; 0x30
 800acd2:	f003 fa6f 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800acd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800acda:	9306      	str	r3, [sp, #24]
 800acdc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	f8d3 a000 	ldr.w	sl, [r3]
 800ace8:	f1ba 0f00 	cmp.w	sl, #0
 800acec:	f000 80b3 	beq.w	800ae56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800acf0:	4651      	mov	r1, sl
 800acf2:	a810      	add	r0, sp, #64	; 0x40
 800acf4:	f003 fa5e 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800acf8:	2002      	movs	r0, #2
 800acfa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	fb91 f1f0 	sdiv	r1, r1, r0
 800ad06:	189d      	adds	r5, r3, r2
 800ad08:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800ad0c:	9a07      	ldr	r2, [sp, #28]
 800ad0e:	4419      	add	r1, r3
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	4413      	add	r3, r2
 800ad14:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800ad18:	1a6d      	subs	r5, r5, r1
 800ad1a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ad1e:	fb92 f2f0 	sdiv	r2, r2, r0
 800ad22:	440a      	add	r2, r1
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	435b      	muls	r3, r3
 800ad28:	fb05 3505 	mla	r5, r5, r5, r3
 800ad2c:	4f4c      	ldr	r7, [pc, #304]	; (800ae60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ad2e:	ac10      	add	r4, sp, #64	; 0x40
 800ad30:	f1b9 0f0c 	cmp.w	r9, #12
 800ad34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad40:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ad44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad48:	f04f 0303 	mov.w	r3, #3
 800ad4c:	bfd8      	it	le
 800ad4e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800ad52:	f04f 0400 	mov.w	r4, #0
 800ad56:	f8cd 9000 	str.w	r9, [sp]
 800ad5a:	bfcc      	ite	gt
 800ad5c:	4698      	movgt	r8, r3
 800ad5e:	fb92 f8f3 	sdivle	r8, r2, r3
 800ad62:	1c63      	adds	r3, r4, #1
 800ad64:	aa10      	add	r2, sp, #64	; 0x40
 800ad66:	f004 0401 	and.w	r4, r4, #1
 800ad6a:	f04f 0b00 	mov.w	fp, #0
 800ad6e:	9308      	str	r3, [sp, #32]
 800ad70:	9b00      	ldr	r3, [sp, #0]
 800ad72:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800ad76:	fb93 f3f8 	sdiv	r3, r3, r8
 800ad7a:	3404      	adds	r4, #4
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	9a04      	ldr	r2, [sp, #16]
 800ad82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad86:	fb13 f302 	smulbb	r3, r3, r2
 800ad8a:	9a01      	ldr	r2, [sp, #4]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	1899      	adds	r1, r3, r2
 800ad90:	9305      	str	r3, [sp, #20]
 800ad92:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ad96:	b209      	sxth	r1, r1
 800ad98:	4299      	cmp	r1, r3
 800ad9a:	db4d      	blt.n	800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ad9c:	8932      	ldrh	r2, [r6, #8]
 800ad9e:	4413      	add	r3, r2
 800ada0:	b21b      	sxth	r3, r3
 800ada2:	4299      	cmp	r1, r3
 800ada4:	da48      	bge.n	800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	6827      	ldr	r7, [r4, #0]
 800adaa:	fb17 f703 	smulbb	r7, r7, r3
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	b2bf      	uxth	r7, r7
 800adb2:	18fa      	adds	r2, r7, r3
 800adb4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800adb8:	b212      	sxth	r2, r2
 800adba:	429a      	cmp	r2, r3
 800adbc:	db3c      	blt.n	800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adbe:	8970      	ldrh	r0, [r6, #10]
 800adc0:	4403      	add	r3, r0
 800adc2:	b21b      	sxth	r3, r3
 800adc4:	429a      	cmp	r2, r3
 800adc6:	da37      	bge.n	800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adc8:	2300      	movs	r3, #0
 800adca:	4630      	mov	r0, r6
 800adcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800adce:	ab0b      	add	r3, sp, #44	; 0x2c
 800add0:	f7ff ff36 	bl	800ac40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800add4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800add6:	b37a      	cbz	r2, 800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800add8:	4552      	cmp	r2, sl
 800adda:	d02d      	beq.n	800ae38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800addc:	4611      	mov	r1, r2
 800adde:	a80e      	add	r0, sp, #56	; 0x38
 800ade0:	9209      	str	r2, [sp, #36]	; 0x24
 800ade2:	f003 f9e7 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ade6:	f04f 0e02 	mov.w	lr, #2
 800adea:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800adee:	9a06      	ldr	r2, [sp, #24]
 800adf0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800adf4:	9b01      	ldr	r3, [sp, #4]
 800adf6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800adfa:	4413      	add	r3, r2
 800adfc:	9a07      	ldr	r2, [sp, #28]
 800adfe:	fb91 f1fe 	sdiv	r1, r1, lr
 800ae02:	fb9c fcfe 	sdiv	ip, ip, lr
 800ae06:	4401      	add	r1, r0
 800ae08:	1a58      	subs	r0, r3, r1
 800ae0a:	9b02      	ldr	r3, [sp, #8]
 800ae0c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800ae10:	4413      	add	r3, r2
 800ae12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae14:	448c      	add	ip, r1
 800ae16:	eba3 030c 	sub.w	r3, r3, ip
 800ae1a:	435b      	muls	r3, r3
 800ae1c:	fb00 3300 	mla	r3, r0, r0, r3
 800ae20:	42ab      	cmp	r3, r5
 800ae22:	d208      	bcs.n	800ae36 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ae24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae26:	461d      	mov	r5, r3
 800ae28:	9803      	ldr	r0, [sp, #12]
 800ae2a:	6001      	str	r1, [r0, #0]
 800ae2c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ae2e:	9805      	ldr	r0, [sp, #20]
 800ae30:	8008      	strh	r0, [r1, #0]
 800ae32:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ae34:	800f      	strh	r7, [r1, #0]
 800ae36:	4692      	mov	sl, r2
 800ae38:	f10b 0b01 	add.w	fp, fp, #1
 800ae3c:	3408      	adds	r4, #8
 800ae3e:	f1bb 0f04 	cmp.w	fp, #4
 800ae42:	d19d      	bne.n	800ad80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ae44:	9b00      	ldr	r3, [sp, #0]
 800ae46:	9c08      	ldr	r4, [sp, #32]
 800ae48:	444b      	add	r3, r9
 800ae4a:	4544      	cmp	r4, r8
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	d188      	bne.n	800ad62 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ae50:	b021      	add	sp, #132	; 0x84
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	f04f 35ff 	mov.w	r5, #4294967295
 800ae5a:	e767      	b.n	800ad2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ae5c:	2400ae0c 	.word	0x2400ae0c
 800ae60:	08018e44 	.word	0x08018e44

0800ae64 <_ZN8touchgfx4RectaNERKS0_>:
 800ae64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae68:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ae6c:	888c      	ldrh	r4, [r1, #4]
 800ae6e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ae72:	443c      	add	r4, r7
 800ae74:	b2a4      	uxth	r4, r4
 800ae76:	fa0f f884 	sxth.w	r8, r4
 800ae7a:	45c1      	cmp	r9, r8
 800ae7c:	da2f      	bge.n	800aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae7e:	8882      	ldrh	r2, [r0, #4]
 800ae80:	444a      	add	r2, r9
 800ae82:	b292      	uxth	r2, r2
 800ae84:	fa0f fe82 	sxth.w	lr, r2
 800ae88:	4577      	cmp	r7, lr
 800ae8a:	da28      	bge.n	800aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae8c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ae90:	88cb      	ldrh	r3, [r1, #6]
 800ae92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ae96:	442b      	add	r3, r5
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	429e      	cmp	r6, r3
 800ae9c:	da1f      	bge.n	800aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae9e:	88c3      	ldrh	r3, [r0, #6]
 800aea0:	4433      	add	r3, r6
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	fa0f fc83 	sxth.w	ip, r3
 800aea8:	4565      	cmp	r5, ip
 800aeaa:	da18      	bge.n	800aede <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aeac:	454f      	cmp	r7, r9
 800aeae:	bfb8      	it	lt
 800aeb0:	464f      	movlt	r7, r9
 800aeb2:	42b5      	cmp	r5, r6
 800aeb4:	bfb8      	it	lt
 800aeb6:	4635      	movlt	r5, r6
 800aeb8:	45f0      	cmp	r8, lr
 800aeba:	bfd8      	it	le
 800aebc:	4622      	movle	r2, r4
 800aebe:	1bd2      	subs	r2, r2, r7
 800aec0:	8082      	strh	r2, [r0, #4]
 800aec2:	884a      	ldrh	r2, [r1, #2]
 800aec4:	88c9      	ldrh	r1, [r1, #6]
 800aec6:	8007      	strh	r7, [r0, #0]
 800aec8:	440a      	add	r2, r1
 800aeca:	8045      	strh	r5, [r0, #2]
 800aecc:	b292      	uxth	r2, r2
 800aece:	b211      	sxth	r1, r2
 800aed0:	458c      	cmp	ip, r1
 800aed2:	bfa8      	it	ge
 800aed4:	4613      	movge	r3, r2
 800aed6:	1b5b      	subs	r3, r3, r5
 800aed8:	80c3      	strh	r3, [r0, #6]
 800aeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aede:	2300      	movs	r3, #0
 800aee0:	8003      	strh	r3, [r0, #0]
 800aee2:	8043      	strh	r3, [r0, #2]
 800aee4:	8083      	strh	r3, [r0, #4]
 800aee6:	80c3      	strh	r3, [r0, #6]
 800aee8:	e7f7      	b.n	800aeda <_ZN8touchgfx4RectaNERKS0_+0x76>

0800aeea <_ZNK8touchgfx4Rect7isEmptyEv>:
 800aeea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dd06      	ble.n	800af00 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800aef2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800aef6:	2800      	cmp	r0, #0
 800aef8:	bfcc      	ite	gt
 800aefa:	2000      	movgt	r0, #0
 800aefc:	2001      	movle	r0, #1
 800aefe:	4770      	bx	lr
 800af00:	2001      	movs	r0, #1
 800af02:	4770      	bx	lr

0800af04 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	2300      	movs	r3, #0
 800af0a:	4604      	mov	r4, r0
 800af0c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800af0e:	8003      	strh	r3, [r0, #0]
 800af10:	8043      	strh	r3, [r0, #2]
 800af12:	8083      	strh	r3, [r0, #4]
 800af14:	80c3      	strh	r3, [r0, #6]
 800af16:	2d00      	cmp	r5, #0
 800af18:	d040      	beq.n	800af9c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800af1a:	1d28      	adds	r0, r5, #4
 800af1c:	f7ff ffe5 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800af20:	b988      	cbnz	r0, 800af46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800af22:	4620      	mov	r0, r4
 800af24:	f7ff ffe1 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800af28:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800af2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800af30:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800af34:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800af38:	b138      	cbz	r0, 800af4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800af3a:	8022      	strh	r2, [r4, #0]
 800af3c:	8063      	strh	r3, [r4, #2]
 800af3e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800af42:	f8a4 c006 	strh.w	ip, [r4, #6]
 800af46:	69ad      	ldr	r5, [r5, #24]
 800af48:	e7e5      	b.n	800af16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800af4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800af4e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800af52:	4290      	cmp	r0, r2
 800af54:	4607      	mov	r7, r0
 800af56:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800af5a:	460e      	mov	r6, r1
 800af5c:	bfa8      	it	ge
 800af5e:	4617      	movge	r7, r2
 800af60:	4299      	cmp	r1, r3
 800af62:	4472      	add	r2, lr
 800af64:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800af68:	bfa8      	it	ge
 800af6a:	461e      	movge	r6, r3
 800af6c:	4440      	add	r0, r8
 800af6e:	4471      	add	r1, lr
 800af70:	4463      	add	r3, ip
 800af72:	b200      	sxth	r0, r0
 800af74:	8027      	strh	r7, [r4, #0]
 800af76:	b212      	sxth	r2, r2
 800af78:	8066      	strh	r6, [r4, #2]
 800af7a:	b209      	sxth	r1, r1
 800af7c:	b21b      	sxth	r3, r3
 800af7e:	4290      	cmp	r0, r2
 800af80:	bfac      	ite	ge
 800af82:	ebc7 0200 	rsbge	r2, r7, r0
 800af86:	ebc7 0202 	rsblt	r2, r7, r2
 800af8a:	4299      	cmp	r1, r3
 800af8c:	bfac      	ite	ge
 800af8e:	ebc6 0301 	rsbge	r3, r6, r1
 800af92:	ebc6 0303 	rsblt	r3, r6, r3
 800af96:	80a2      	strh	r2, [r4, #4]
 800af98:	80e3      	strh	r3, [r4, #6]
 800af9a:	e7d4      	b.n	800af46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800af9c:	4620      	mov	r0, r4
 800af9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800afa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800afa6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800afaa:	b383      	cbz	r3, 800b00e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800afac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800afae:	b374      	cbz	r4, 800b00e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800afb0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800afb4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800afb8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800afbc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800afc0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800afc4:	b303      	cbz	r3, 800b008 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800afc6:	4668      	mov	r0, sp
 800afc8:	1d21      	adds	r1, r4, #4
 800afca:	f8ad 5000 	strh.w	r5, [sp]
 800afce:	f8ad 6002 	strh.w	r6, [sp, #2]
 800afd2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800afd6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800afda:	f7ff ff43 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800afde:	4668      	mov	r0, sp
 800afe0:	f7ff ff83 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800afe4:	b980      	cbnz	r0, 800b008 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800afe6:	f8bd 3000 	ldrh.w	r3, [sp]
 800afea:	4669      	mov	r1, sp
 800afec:	88a2      	ldrh	r2, [r4, #4]
 800afee:	4620      	mov	r0, r4
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	88e2      	ldrh	r2, [r4, #6]
 800aff4:	f8ad 3000 	strh.w	r3, [sp]
 800aff8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	4798      	blx	r3
 800b008:	69a4      	ldr	r4, [r4, #24]
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	d1d8      	bne.n	800afc0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800b00e:	b002      	add	sp, #8
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b014 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800b014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b016:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b01a:	460d      	mov	r5, r1
 800b01c:	4616      	mov	r6, r2
 800b01e:	b323      	cbz	r3, 800b06a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b020:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b022:	b314      	cbz	r4, 800b06a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b024:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b028:	b1eb      	cbz	r3, 800b066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b02a:	6828      	ldr	r0, [r5, #0]
 800b02c:	466b      	mov	r3, sp
 800b02e:	6869      	ldr	r1, [r5, #4]
 800b030:	c303      	stmia	r3!, {r0, r1}
 800b032:	4668      	mov	r0, sp
 800b034:	1d21      	adds	r1, r4, #4
 800b036:	f7ff ff15 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800b03a:	4668      	mov	r0, sp
 800b03c:	f7ff ff55 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800b040:	b988      	cbnz	r0, 800b066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b042:	f8bd 3000 	ldrh.w	r3, [sp]
 800b046:	4669      	mov	r1, sp
 800b048:	88a2      	ldrh	r2, [r4, #4]
 800b04a:	4620      	mov	r0, r4
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	88e2      	ldrh	r2, [r4, #6]
 800b050:	f8ad 3000 	strh.w	r3, [sp]
 800b054:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	4632      	mov	r2, r6
 800b05c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b064:	4798      	blx	r3
 800b066:	69a4      	ldr	r4, [r4, #24]
 800b068:	e7db      	b.n	800b022 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b06a:	b002      	add	sp, #8
 800b06c:	bd70      	pop	{r4, r5, r6, pc}

0800b06e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800b06e:	4770      	bx	lr

0800b070 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800b070:	4770      	bx	lr

0800b072 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b072:	6803      	ldr	r3, [r0, #0]
 800b074:	b513      	push	{r0, r1, r4, lr}
 800b076:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800b07a:	2300      	movs	r3, #0
 800b07c:	e9cd 3300 	strd	r3, r3, [sp]
 800b080:	466b      	mov	r3, sp
 800b082:	47a0      	blx	r4
 800b084:	b002      	add	sp, #8
 800b086:	bd10      	pop	{r4, pc}

0800b088 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b088:	2301      	movs	r3, #1
 800b08a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b08e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b092:	4770      	bx	lr

0800b094 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b094:	2301      	movs	r3, #1
 800b096:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b09a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b09e:	4770      	bx	lr

0800b0a0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b0a0:	6843      	ldr	r3, [r0, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	725a      	strb	r2, [r3, #9]
 800b0a6:	6840      	ldr	r0, [r0, #4]
 800b0a8:	6803      	ldr	r3, [r0, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	4718      	bx	r3

0800b0ae <_ZN8touchgfx3HAL8flushDMAEv>:
 800b0ae:	6840      	ldr	r0, [r0, #4]
 800b0b0:	6803      	ldr	r3, [r0, #0]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	4718      	bx	r3

0800b0b6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b0b6:	b530      	push	{r4, r5, lr}
 800b0b8:	b08b      	sub	sp, #44	; 0x2c
 800b0ba:	6804      	ldr	r4, [r0, #0]
 800b0bc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b0c0:	9509      	str	r5, [sp, #36]	; 0x24
 800b0c2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b0c6:	9508      	str	r5, [sp, #32]
 800b0c8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b0cc:	9507      	str	r5, [sp, #28]
 800b0ce:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b0d2:	9506      	str	r5, [sp, #24]
 800b0d4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b0d8:	9505      	str	r5, [sp, #20]
 800b0da:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b0de:	9504      	str	r5, [sp, #16]
 800b0e0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b0e4:	9503      	str	r5, [sp, #12]
 800b0e6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b0ea:	9502      	str	r5, [sp, #8]
 800b0ec:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b0f0:	e9cd 3500 	strd	r3, r5, [sp]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	47a0      	blx	r4
 800b0fc:	b00b      	add	sp, #44	; 0x2c
 800b0fe:	bd30      	pop	{r4, r5, pc}

0800b100 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b123      	cbz	r3, 800b110 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b106:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b10a:	f080 0001 	eor.w	r0, r0, #1
 800b10e:	4770      	bx	lr
 800b110:	2001      	movs	r0, #1
 800b112:	4770      	bx	lr
 800b114:	2400ae0a 	.word	0x2400ae0a

0800b118 <_ZN8touchgfx3HAL8endFrameEv>:
 800b118:	b510      	push	{r4, lr}
 800b11a:	4604      	mov	r4, r0
 800b11c:	6840      	ldr	r0, [r0, #4]
 800b11e:	6803      	ldr	r3, [r0, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	4798      	blx	r3
 800b124:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b128:	b113      	cbz	r3, 800b130 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b12a:	2301      	movs	r3, #1
 800b12c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b130:	bd10      	pop	{r4, pc}

0800b132 <_ZN8touchgfx3HAL10initializeEv>:
 800b132:	b510      	push	{r4, lr}
 800b134:	4604      	mov	r4, r0
 800b136:	f7f5 fb85 	bl	8000844 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b13a:	6860      	ldr	r0, [r4, #4]
 800b13c:	6803      	ldr	r3, [r0, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	4798      	blx	r3
 800b142:	68e0      	ldr	r0, [r4, #12]
 800b144:	6803      	ldr	r3, [r0, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	4798      	blx	r3
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	4620      	mov	r0, r4
 800b14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b154:	4718      	bx	r3

0800b156 <_ZN8touchgfx3HAL9taskEntryEv>:
 800b156:	b508      	push	{r3, lr}
 800b158:	6803      	ldr	r3, [r0, #0]
 800b15a:	4604      	mov	r4, r0
 800b15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b160:	4798      	blx	r3
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b166:	4620      	mov	r0, r4
 800b168:	4798      	blx	r3
 800b16a:	f7f5 fbc7 	bl	80008fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b172:	e7f8      	b.n	800b166 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800b174 <_ZN8touchgfx3HAL4tickEv>:
 800b174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b176:	6803      	ldr	r3, [r0, #0]
 800b178:	4604      	mov	r4, r0
 800b17a:	4d5b      	ldr	r5, [pc, #364]	; (800b2e8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800b17c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b180:	4798      	blx	r3
 800b182:	2800      	cmp	r0, #0
 800b184:	f000 8095 	beq.w	800b2b2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800b188:	2001      	movs	r0, #1
 800b18a:	2600      	movs	r6, #0
 800b18c:	f7f5 f982 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b190:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800b194:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800b198:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b19c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b1a0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800b1a4:	b133      	cbz	r3, 800b1b4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b1ae:	4798      	blx	r3
 800b1b0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800b1b4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800b1b8:	2601      	movs	r6, #1
 800b1ba:	6862      	ldr	r2, [r4, #4]
 800b1bc:	f083 0301 	eor.w	r3, r3, #1
 800b1c0:	702e      	strb	r6, [r5, #0]
 800b1c2:	7253      	strb	r3, [r2, #9]
 800b1c4:	f001 ffc2 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 800b1c8:	6803      	ldr	r3, [r0, #0]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1cc:	4798      	blx	r3
 800b1ce:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1d2:	b90b      	cbnz	r3, 800b1d8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b1d4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800b1d8:	f001 ffb8 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 800b1dc:	6803      	ldr	r3, [r0, #0]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	4798      	blx	r3
 800b1e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1e4:	6803      	ldr	r3, [r0, #0]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	4798      	blx	r3
 800b1ea:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1ee:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b1fa:	b10a      	cbz	r2, 800b200 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1eb      	bne.n	800b1d8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b200:	4a3a      	ldr	r2, [pc, #232]	; (800b2ec <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b202:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800b206:	7813      	ldrb	r3, [r2, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	b25b      	sxtb	r3, r3
 800b20c:	4299      	cmp	r1, r3
 800b20e:	7013      	strb	r3, [r2, #0]
 800b210:	dc10      	bgt.n	800b234 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b212:	2300      	movs	r3, #0
 800b214:	68e0      	ldr	r0, [r4, #12]
 800b216:	a902      	add	r1, sp, #8
 800b218:	7013      	strb	r3, [r2, #0]
 800b21a:	aa03      	add	r2, sp, #12
 800b21c:	6803      	ldr	r3, [r0, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4798      	blx	r3
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	2800      	cmp	r0, #0
 800b226:	d050      	beq.n	800b2ca <_ZN8touchgfx3HAL4tickEv+0x156>
 800b228:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b22c:	4620      	mov	r0, r4
 800b22e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b232:	4798      	blx	r3
 800b234:	2300      	movs	r3, #0
 800b236:	6960      	ldr	r0, [r4, #20]
 800b238:	f88d 3007 	strb.w	r3, [sp, #7]
 800b23c:	b158      	cbz	r0, 800b256 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	f10d 0107 	add.w	r1, sp, #7
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	4798      	blx	r3
 800b248:	b128      	cbz	r0, 800b256 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b24a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b250:	6803      	ldr	r3, [r0, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	4798      	blx	r3
 800b256:	f104 001c 	add.w	r0, r4, #28
 800b25a:	f00c fbe7 	bl	8017a2c <_ZN8touchgfx8Gestures4tickEv>
 800b25e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800b262:	b30b      	cbz	r3, 800b2a8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b264:	6920      	ldr	r0, [r4, #16]
 800b266:	6803      	ldr	r3, [r0, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	4798      	blx	r3
 800b26c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b26e:	4606      	mov	r6, r0
 800b270:	b903      	cbnz	r3, 800b274 <_ZN8touchgfx3HAL4tickEv+0x100>
 800b272:	6720      	str	r0, [r4, #112]	; 0x70
 800b274:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b276:	4a1e      	ldr	r2, [pc, #120]	; (800b2f0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800b278:	1af3      	subs	r3, r6, r3
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d914      	bls.n	800b2a8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b27e:	6920      	ldr	r0, [r4, #16]
 800b280:	6803      	ldr	r3, [r0, #0]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	4798      	blx	r3
 800b286:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b288:	2264      	movs	r2, #100	; 0x64
 800b28a:	1af3      	subs	r3, r6, r3
 800b28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b290:	fbb0 f0f3 	udiv	r0, r0, r3
 800b294:	2800      	cmp	r0, #0
 800b296:	dc1d      	bgt.n	800b2d4 <_ZN8touchgfx3HAL4tickEv+0x160>
 800b298:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800b29c:	6920      	ldr	r0, [r4, #16]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	6803      	ldr	r3, [r0, #0]
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	4798      	blx	r3
 800b2a6:	6726      	str	r6, [r4, #112]	; 0x70
 800b2a8:	f001 ff50 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 800b2ac:	6803      	ldr	r3, [r0, #0]
 800b2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b0:	4798      	blx	r3
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2ba:	4798      	blx	r3
 800b2bc:	2001      	movs	r0, #1
 800b2be:	f7f5 f927 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	702b      	strb	r3, [r5, #0]
 800b2c6:	b004      	add	sp, #16
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4798      	blx	r3
 800b2d2:	e7af      	b.n	800b234 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b2d4:	2863      	cmp	r0, #99	; 0x63
 800b2d6:	bfcb      	itete	gt
 800b2d8:	2300      	movgt	r3, #0
 800b2da:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800b2de:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800b2e2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800b2e6:	e7d9      	b.n	800b29c <_ZN8touchgfx3HAL4tickEv+0x128>
 800b2e8:	2400ae10 	.word	0x2400ae10
 800b2ec:	2400ae11 	.word	0x2400ae11
 800b2f0:	05f5e100 	.word	0x05f5e100

0800b2f4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800b2f4:	f7f5 bada 	b.w	80008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b2f8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800b2f8:	6581      	str	r1, [r0, #88]	; 0x58
 800b2fa:	301c      	adds	r0, #28
 800b2fc:	f00c bb94 	b.w	8017a28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800b300 <_ZN8touchgfx3HAL5touchEll>:
 800b300:	b530      	push	{r4, r5, lr}
 800b302:	b087      	sub	sp, #28
 800b304:	4604      	mov	r4, r0
 800b306:	a804      	add	r0, sp, #16
 800b308:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b30c:	f001 fc9a 	bl	800cc44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800b310:	9b04      	ldr	r3, [sp, #16]
 800b312:	a906      	add	r1, sp, #24
 800b314:	a803      	add	r0, sp, #12
 800b316:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800b320:	f001 fce2 	bl	800cce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800b324:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800b328:	f104 001c 	add.w	r0, r4, #28
 800b32c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b330:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b334:	b189      	cbz	r1, 800b35a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800b336:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	4613      	mov	r3, r2
 800b33e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b342:	462a      	mov	r2, r5
 800b344:	f00c fb80 	bl	8017a48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800b348:	b128      	cbz	r0, 800b356 <_ZN8touchgfx3HAL5touchEll+0x56>
 800b34a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800b34e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800b350:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b354:	6623      	str	r3, [r4, #96]	; 0x60
 800b356:	b007      	add	sp, #28
 800b358:	bd30      	pop	{r4, r5, pc}
 800b35a:	f00c fbb5 	bl	8017ac8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b35e:	2301      	movs	r3, #1
 800b360:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b364:	e7f1      	b.n	800b34a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800b366 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800b366:	b510      	push	{r4, lr}
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d046      	beq.n	800b3fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b36c:	ea81 0002 	eor.w	r0, r1, r2
 800b370:	07c4      	lsls	r4, r0, #31
 800b372:	d508      	bpl.n	800b386 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800b374:	440b      	add	r3, r1
 800b376:	3a01      	subs	r2, #1
 800b378:	428b      	cmp	r3, r1
 800b37a:	d93e      	bls.n	800b3fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b37c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b380:	f801 0b01 	strb.w	r0, [r1], #1
 800b384:	e7f8      	b.n	800b378 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800b386:	07d0      	lsls	r0, r2, #31
 800b388:	bf42      	ittt	mi
 800b38a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800b38e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b392:	f801 0b01 	strbmi.w	r0, [r1], #1
 800b396:	2b01      	cmp	r3, #1
 800b398:	d911      	bls.n	800b3be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b39a:	ea81 0402 	eor.w	r4, r1, r2
 800b39e:	4610      	mov	r0, r2
 800b3a0:	07a4      	lsls	r4, r4, #30
 800b3a2:	d022      	beq.n	800b3ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800b3a4:	f023 0401 	bic.w	r4, r3, #1
 800b3a8:	440c      	add	r4, r1
 800b3aa:	428c      	cmp	r4, r1
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	d904      	bls.n	800b3ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800b3b0:	8812      	ldrh	r2, [r2, #0]
 800b3b2:	3002      	adds	r0, #2
 800b3b4:	f821 2b02 	strh.w	r2, [r1], #2
 800b3b8:	e7f7      	b.n	800b3aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	f023 0003 	bic.w	r0, r3, #3
 800b3c2:	4408      	add	r0, r1
 800b3c4:	4288      	cmp	r0, r1
 800b3c6:	4614      	mov	r4, r2
 800b3c8:	d904      	bls.n	800b3d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800b3ca:	6824      	ldr	r4, [r4, #0]
 800b3cc:	3204      	adds	r2, #4
 800b3ce:	f841 4b04 	str.w	r4, [r1], #4
 800b3d2:	e7f7      	b.n	800b3c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	3a01      	subs	r2, #1
 800b3da:	440b      	add	r3, r1
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	d90c      	bls.n	800b3fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b3e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b3e4:	f801 0b01 	strb.w	r0, [r1], #1
 800b3e8:	e7f8      	b.n	800b3dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800b3ea:	0790      	lsls	r0, r2, #30
 800b3ec:	d0e7      	beq.n	800b3be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3ee:	f832 0b02 	ldrh.w	r0, [r2], #2
 800b3f2:	3b02      	subs	r3, #2
 800b3f4:	f821 0b02 	strh.w	r0, [r1], #2
 800b3f8:	e7e1      	b.n	800b3be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	bd10      	pop	{r4, pc}

0800b3fe <_ZN8touchgfx3HAL7noTouchEv>:
 800b3fe:	b510      	push	{r4, lr}
 800b400:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800b404:	4604      	mov	r4, r0
 800b406:	b153      	cbz	r3, 800b41e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800b408:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800b40c:	2101      	movs	r1, #1
 800b40e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800b412:	301c      	adds	r0, #28
 800b414:	f00c fb58 	bl	8017ac8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b418:	2300      	movs	r3, #0
 800b41a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b41e:	bd10      	pop	{r4, pc}

0800b420 <_ZN8touchgfx8Drawable5setXYEss>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	6803      	ldr	r3, [r0, #0]
 800b424:	4604      	mov	r4, r0
 800b426:	4615      	mov	r5, r2
 800b428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42a:	4798      	blx	r3
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	4629      	mov	r1, r5
 800b430:	4620      	mov	r0, r4
 800b432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b438:	4718      	bx	r3
	...

0800b43c <_ZN8touchgfx3HAL3lcdEv>:
 800b43c:	4b04      	ldr	r3, [pc, #16]	; (800b450 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b444:	b10a      	cbz	r2, 800b44a <_ZN8touchgfx3HAL3lcdEv+0xe>
 800b446:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b448:	b900      	cbnz	r0, 800b44c <_ZN8touchgfx3HAL3lcdEv+0x10>
 800b44a:	6898      	ldr	r0, [r3, #8]
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	2400ae0c 	.word	0x2400ae0c

0800b454 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800b454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b458:	b085      	sub	sp, #20
 800b45a:	4604      	mov	r4, r0
 800b45c:	2000      	movs	r0, #0
 800b45e:	4699      	mov	r9, r3
 800b460:	ad04      	add	r5, sp, #16
 800b462:	460f      	mov	r7, r1
 800b464:	4690      	mov	r8, r2
 800b466:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b46a:	69a0      	ldr	r0, [r4, #24]
 800b46c:	6806      	ldr	r6, [r0, #0]
 800b46e:	9501      	str	r5, [sp, #4]
 800b470:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b474:	9500      	str	r5, [sp, #0]
 800b476:	6835      	ldr	r5, [r6, #0]
 800b478:	47a8      	blx	r5
 800b47a:	4d10      	ldr	r5, [pc, #64]	; (800b4bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800b47c:	4606      	mov	r6, r0
 800b47e:	f8a5 9000 	strh.w	r9, [r5]
 800b482:	f7ff ffdb 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b486:	6803      	ldr	r3, [r0, #0]
 800b488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48a:	4798      	blx	r3
 800b48c:	b128      	cbz	r0, 800b49a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800b48e:	2801      	cmp	r0, #1
 800b490:	d00b      	beq.n	800b4aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800b492:	4630      	mov	r0, r6
 800b494:	b005      	add	sp, #20
 800b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b49a:	882b      	ldrh	r3, [r5, #0]
 800b49c:	fb08 7203 	mla	r2, r8, r3, r7
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b4a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b4a8:	e7f3      	b.n	800b492 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b4aa:	882a      	ldrh	r2, [r5, #0]
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	fb08 7202 	mla	r2, r8, r2, r7
 800b4b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b4b6:	1a9a      	subs	r2, r3, r2
 800b4b8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b4ba:	e7ea      	b.n	800b492 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b4bc:	2400ae06 	.word	0x2400ae06

0800b4c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800b4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c2:	b08b      	sub	sp, #44	; 0x2c
 800b4c4:	4617      	mov	r7, r2
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460e      	mov	r6, r1
 800b4ca:	461d      	mov	r5, r3
 800b4cc:	f7ff ffb6 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b4d0:	6803      	ldr	r3, [r0, #0]
 800b4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d4:	4798      	blx	r3
 800b4d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b4da:	9007      	str	r0, [sp, #28]
 800b4dc:	4631      	mov	r1, r6
 800b4de:	6822      	ldr	r2, [r4, #0]
 800b4e0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b4e4:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	9306      	str	r3, [sp, #24]
 800b4ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b4f0:	9305      	str	r3, [sp, #20]
 800b4f2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b4f6:	9304      	str	r3, [sp, #16]
 800b4f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b4fc:	9303      	str	r3, [sp, #12]
 800b4fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b508:	e9cd 5300 	strd	r5, r3, [sp]
 800b50c:	463b      	mov	r3, r7
 800b50e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800b510:	2200      	movs	r2, #0
 800b512:	47a8      	blx	r5
 800b514:	b00b      	add	sp, #44	; 0x2c
 800b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b518:	2400ae06 	.word	0x2400ae06

0800b51c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800b51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b520:	4698      	mov	r8, r3
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	b08b      	sub	sp, #44	; 0x2c
 800b526:	4617      	mov	r7, r2
 800b528:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b52a:	460e      	mov	r6, r1
 800b52c:	4b13      	ldr	r3, [pc, #76]	; (800b57c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800b52e:	4604      	mov	r4, r0
 800b530:	f8b3 9000 	ldrh.w	r9, [r3]
 800b534:	f7ff ff82 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b538:	6803      	ldr	r3, [r0, #0]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	4798      	blx	r3
 800b53e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b542:	2200      	movs	r2, #0
 800b544:	4631      	mov	r1, r6
 800b546:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b54a:	2302      	movs	r3, #2
 800b54c:	4620      	mov	r0, r4
 800b54e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800b552:	2301      	movs	r3, #1
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b560:	9303      	str	r3, [sp, #12]
 800b562:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b566:	9302      	str	r3, [sp, #8]
 800b568:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b56c:	e9cd 8300 	strd	r8, r3, [sp]
 800b570:	463b      	mov	r3, r7
 800b572:	47a8      	blx	r5
 800b574:	b00b      	add	sp, #44	; 0x2c
 800b576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b57a:	bf00      	nop
 800b57c:	2400ae06 	.word	0x2400ae06

0800b580 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800b580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b584:	4698      	mov	r8, r3
 800b586:	6803      	ldr	r3, [r0, #0]
 800b588:	b087      	sub	sp, #28
 800b58a:	460e      	mov	r6, r1
 800b58c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b58e:	4617      	mov	r7, r2
 800b590:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800b592:	4604      	mov	r4, r0
 800b594:	f8b3 9000 	ldrh.w	r9, [r3]
 800b598:	f7ff ff50 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b59c:	6803      	ldr	r3, [r0, #0]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	4798      	blx	r3
 800b5a2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5ae:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800b5b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	9302      	str	r3, [sp, #8]
 800b5ba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	4643      	mov	r3, r8
 800b5c8:	47a8      	blx	r5
 800b5ca:	b007      	add	sp, #28
 800b5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5d0:	2400ae06 	.word	0x2400ae06

0800b5d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	b08f      	sub	sp, #60	; 0x3c
 800b5dc:	4610      	mov	r0, r2
 800b5de:	460d      	mov	r5, r1
 800b5e0:	4691      	mov	r9, r2
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	f004 f8b8 	bl	800f758 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	f000 809d 	beq.w	800b728 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f8df b198 	ldr.w	fp, [pc, #408]	; 800b78c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800b5f6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fc:	4798      	blx	r3
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	4620      	mov	r0, r4
 800b602:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800b790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	4798      	blx	r3
 800b60a:	f8bb 3000 	ldrh.w	r3, [fp]
 800b60e:	4f5c      	ldr	r7, [pc, #368]	; (800b780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	f8ba 3000 	ldrh.w	r3, [sl]
 800b616:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800b61a:	4640      	mov	r0, r8
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	883b      	ldrh	r3, [r7, #0]
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	4b58      	ldr	r3, [pc, #352]	; (800b784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b624:	881a      	ldrh	r2, [r3, #0]
 800b626:	9305      	str	r3, [sp, #20]
 800b628:	9204      	str	r2, [sp, #16]
 800b62a:	f004 f9d9 	bl	800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b62e:	8038      	strh	r0, [r7, #0]
 800b630:	4640      	mov	r0, r8
 800b632:	f004 fa09 	bl	800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b636:	9b05      	ldr	r3, [sp, #20]
 800b638:	b280      	uxth	r0, r0
 800b63a:	8018      	strh	r0, [r3, #0]
 800b63c:	4b52      	ldr	r3, [pc, #328]	; (800b788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d174      	bne.n	800b72e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800b644:	883b      	ldrh	r3, [r7, #0]
 800b646:	f8aa 0000 	strh.w	r0, [sl]
 800b64a:	f8ab 3000 	strh.w	r3, [fp]
 800b64e:	4648      	mov	r0, r9
 800b650:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800b654:	f004 f880 	bl	800f758 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b658:	2200      	movs	r2, #0
 800b65a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800b65e:	4611      	mov	r1, r2
 800b660:	4628      	mov	r0, r5
 800b662:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800b666:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800b66a:	f7ff fed9 	bl	800b420 <_ZN8touchgfx8Drawable5setXYEss>
 800b66e:	2301      	movs	r3, #1
 800b670:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800b674:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b678:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dd5c      	ble.n	800b73a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b680:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b684:	2b00      	cmp	r3, #0
 800b686:	dd58      	ble.n	800b73a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b688:	462a      	mov	r2, r5
 800b68a:	ab0a      	add	r3, sp, #40	; 0x28
 800b68c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b690:	6851      	ldr	r1, [r2, #4]
 800b692:	c303      	stmia	r3!, {r0, r1}
 800b694:	4631      	mov	r1, r6
 800b696:	a80a      	add	r0, sp, #40	; 0x28
 800b698:	f7ff fbe4 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800b69c:	4b38      	ldr	r3, [pc, #224]	; (800b780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b69e:	2100      	movs	r1, #0
 800b6a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6a4:	4b37      	ldr	r3, [pc, #220]	; (800b784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b6a6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b6aa:	aa0a      	add	r2, sp, #40	; 0x28
 800b6ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6b0:	910c      	str	r1, [sp, #48]	; 0x30
 800b6b2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b6b6:	ab08      	add	r3, sp, #32
 800b6b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	a90c      	add	r1, sp, #48	; 0x30
 800b6c4:	f7ff fbce 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800b6c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d13c      	bne.n	800b748 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	696b      	ldr	r3, [r5, #20]
 800b6d8:	a908      	add	r1, sp, #32
 800b6da:	682a      	ldr	r2, [r5, #0]
 800b6dc:	4628      	mov	r0, r5
 800b6de:	9305      	str	r3, [sp, #20]
 800b6e0:	616e      	str	r6, [r5, #20]
 800b6e2:	6892      	ldr	r2, [r2, #8]
 800b6e4:	4790      	blx	r2
 800b6e6:	9b05      	ldr	r3, [sp, #20]
 800b6e8:	4652      	mov	r2, sl
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	616b      	str	r3, [r5, #20]
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b6f4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b6f8:	f7ff fe92 	bl	800b420 <_ZN8touchgfx8Drawable5setXYEss>
 800b6fc:	9a01      	ldr	r2, [sp, #4]
 800b6fe:	4b23      	ldr	r3, [pc, #140]	; (800b78c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800b700:	4620      	mov	r0, r4
 800b702:	801a      	strh	r2, [r3, #0]
 800b704:	9a02      	ldr	r2, [sp, #8]
 800b706:	4b22      	ldr	r3, [pc, #136]	; (800b790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	9a03      	ldr	r2, [sp, #12]
 800b70c:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b70e:	801a      	strh	r2, [r3, #0]
 800b710:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	801a      	strh	r2, [r3, #0]
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71e:	4798      	blx	r3
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	4620      	mov	r0, r4
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	4798      	blx	r3
 800b728:	b00f      	add	sp, #60	; 0x3c
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72e:	883b      	ldrh	r3, [r7, #0]
 800b730:	f8ab 0000 	strh.w	r0, [fp]
 800b734:	f8aa 3000 	strh.w	r3, [sl]
 800b738:	e789      	b.n	800b64e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800b73a:	462a      	mov	r2, r5
 800b73c:	ab0a      	add	r3, sp, #40	; 0x28
 800b73e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b742:	6851      	ldr	r1, [r2, #4]
 800b744:	c303      	stmia	r3!, {r0, r1}
 800b746:	e7a9      	b.n	800b69c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800b748:	a807      	add	r0, sp, #28
 800b74a:	f004 fa81 	bl	800fc50 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b74e:	4606      	mov	r6, r0
 800b750:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b752:	6803      	ldr	r3, [r0, #0]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	4798      	blx	r3
 800b758:	4286      	cmp	r6, r0
 800b75a:	d1b8      	bne.n	800b6ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800b75c:	f7ff fe6e 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b760:	6803      	ldr	r3, [r0, #0]
 800b762:	4606      	mov	r6, r0
 800b764:	a807      	add	r0, sp, #28
 800b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	f004 fa71 	bl	800fc50 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	4601      	mov	r1, r0
 800b772:	4630      	mov	r0, r6
 800b774:	4798      	blx	r3
 800b776:	f080 0001 	eor.w	r0, r0, #1
 800b77a:	b2c0      	uxtb	r0, r0
 800b77c:	e7a8      	b.n	800b6d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800b77e:	bf00      	nop
 800b780:	2400ae00 	.word	0x2400ae00
 800b784:	2400ae02 	.word	0x2400ae02
 800b788:	2400ae04 	.word	0x2400ae04
 800b78c:	2400ae06 	.word	0x2400ae06
 800b790:	2400ae08 	.word	0x2400ae08

0800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800b794:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800b796:	b510      	push	{r4, lr}
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	4604      	mov	r4, r0
 800b79c:	b13b      	cbz	r3, 800b7ae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b79e:	6803      	ldr	r3, [r0, #0]
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a2:	4798      	blx	r3
 800b7a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7a6:	4283      	cmp	r3, r0
 800b7a8:	d101      	bne.n	800b7ae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b7aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b7ac:	bd10      	pop	{r4, pc}
 800b7ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b7b0:	e7fc      	b.n	800b7ac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800b7b2:	bf00      	nop
 800b7b4:	2400ae0a 	.word	0x2400ae0a

0800b7b8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800b7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	461d      	mov	r5, r3
 800b7be:	b08a      	sub	sp, #40	; 0x28
 800b7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c4:	4690      	mov	r8, r2
 800b7c6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	fb06 8505 	mla	r5, r6, r5, r8
 800b7d2:	9404      	str	r4, [sp, #16]
 800b7d4:	f88d 4020 	strb.w	r4, [sp, #32]
 800b7d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b7dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b7e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b7e4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b7e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b7ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b7f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b7f4:	f7ff ffce 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b7f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b802:	a901      	add	r1, sp, #4
 800b804:	9505      	str	r5, [sp, #20]
 800b806:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b80a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800b80e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b812:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b816:	6803      	ldr	r3, [r0, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	4798      	blx	r3
 800b81c:	b00a      	add	sp, #40	; 0x28
 800b81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b822 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800b822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b826:	b08b      	sub	sp, #44	; 0x2c
 800b828:	2400      	movs	r4, #0
 800b82a:	4691      	mov	r9, r2
 800b82c:	461d      	mov	r5, r3
 800b82e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800b832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b836:	4688      	mov	r8, r1
 800b838:	4607      	mov	r7, r0
 800b83a:	9404      	str	r4, [sp, #16]
 800b83c:	fb06 9505 	mla	r5, r6, r5, r9
 800b840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b844:	f7ff ffa6 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b848:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b84c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b856:	a901      	add	r1, sp, #4
 800b858:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b85c:	9505      	str	r5, [sp, #20]
 800b85e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b862:	f8ad 401c 	strh.w	r4, [sp, #28]
 800b866:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b86a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b86e:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b872:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b876:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b87a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b87e:	6803      	ldr	r3, [r0, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	4798      	blx	r3
 800b884:	b00b      	add	sp, #44	; 0x2c
 800b886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b88c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	b08a      	sub	sp, #40	; 0x28
 800b892:	4698      	mov	r8, r3
 800b894:	2300      	movs	r3, #0
 800b896:	4606      	mov	r6, r0
 800b898:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800b89c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800b8a0:	2d0b      	cmp	r5, #11
 800b8a2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800b8a6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800b8aa:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	d137      	bne.n	800b922 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800b8b2:	2380      	movs	r3, #128	; 0x80
 800b8b4:	f88d 0020 	strb.w	r0, [sp, #32]
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	9203      	str	r2, [sp, #12]
 800b8bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b8c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b8c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b8c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b8cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b8d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b8d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b8d8:	f7ff ff5c 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b8dc:	2c0b      	cmp	r4, #11
 800b8de:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b8e2:	f8ad 701e 	strh.w	r7, [sp, #30]
 800b8e6:	bf94      	ite	ls
 800b8e8:	4b19      	ldrls	r3, [pc, #100]	; (800b950 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800b8ea:	2100      	movhi	r1, #0
 800b8ec:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b8f0:	bf98      	it	ls
 800b8f2:	5d19      	ldrbls	r1, [r3, r4]
 800b8f4:	fb02 8307 	mla	r3, r2, r7, r8
 800b8f8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b8fc:	10c9      	asrs	r1, r1, #3
 800b8fe:	fb01 0003 	mla	r0, r1, r3, r0
 800b902:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800b906:	a901      	add	r1, sp, #4
 800b908:	9005      	str	r0, [sp, #20]
 800b90a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800b90e:	2300      	movs	r3, #0
 800b910:	6870      	ldr	r0, [r6, #4]
 800b912:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b916:	6803      	ldr	r3, [r0, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4798      	blx	r3
 800b91c:	b00a      	add	sp, #40	; 0x28
 800b91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b922:	2d02      	cmp	r5, #2
 800b924:	d109      	bne.n	800b93a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800b926:	28ff      	cmp	r0, #255	; 0xff
 800b928:	d105      	bne.n	800b936 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800b92a:	f1bc 0f00 	cmp.w	ip, #0
 800b92e:	bf14      	ite	ne
 800b930:	2340      	movne	r3, #64	; 0x40
 800b932:	2320      	moveq	r3, #32
 800b934:	e7be      	b.n	800b8b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b936:	2340      	movs	r3, #64	; 0x40
 800b938:	e7bc      	b.n	800b8b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b93a:	28ff      	cmp	r0, #255	; 0xff
 800b93c:	d105      	bne.n	800b94a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800b93e:	f1bc 0f00 	cmp.w	ip, #0
 800b942:	bf14      	ite	ne
 800b944:	2304      	movne	r3, #4
 800b946:	2301      	moveq	r3, #1
 800b948:	e7b4      	b.n	800b8b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b94a:	2304      	movs	r3, #4
 800b94c:	e7b2      	b.n	800b8b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b94e:	bf00      	nop
 800b950:	0801a0a0 	.word	0x0801a0a0

0800b954 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	b08b      	sub	sp, #44	; 0x2c
 800b95a:	461d      	mov	r5, r3
 800b95c:	2400      	movs	r4, #0
 800b95e:	4688      	mov	r8, r1
 800b960:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800b964:	4693      	mov	fp, r2
 800b966:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800b96a:	4607      	mov	r7, r0
 800b96c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800b970:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800b974:	9404      	str	r4, [sp, #16]
 800b976:	bf14      	ite	ne
 800b978:	2308      	movne	r3, #8
 800b97a:	2302      	moveq	r3, #2
 800b97c:	fb05 b50a 	mla	r5, r5, sl, fp
 800b980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b984:	f7ff ff06 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b988:	2e0b      	cmp	r6, #11
 800b98a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800b98e:	a901      	add	r1, sp, #4
 800b990:	bf98      	it	ls
 800b992:	4b13      	ldrls	r3, [pc, #76]	; (800b9e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800b994:	f8ad a01e 	strh.w	sl, [sp, #30]
 800b998:	bf98      	it	ls
 800b99a:	5d9c      	ldrbls	r4, [r3, r6]
 800b99c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b9a0:	10e4      	asrs	r4, r4, #3
 800b9a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b9aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800b9ae:	fb04 0405 	mla	r4, r4, r5, r0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9405      	str	r4, [sp, #20]
 800b9bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b9c0:	f88d 9020 	strb.w	r9, [sp, #32]
 800b9c4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800b9c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b9cc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800b9d0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800b9d4:	6803      	ldr	r3, [r0, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	b00b      	add	sp, #44	; 0x2c
 800b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e0:	0801a0a0 	.word	0x0801a0a0

0800b9e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800b9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e8:	461e      	mov	r6, r3
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	4690      	mov	r8, r2
 800b9f0:	881d      	ldrh	r5, [r3, #0]
 800b9f2:	f7ff fd23 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800b9f6:	6803      	ldr	r3, [r0, #0]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	4798      	blx	r3
 800b9fc:	280b      	cmp	r0, #11
 800b9fe:	bf96      	itet	ls
 800ba00:	4b05      	ldrls	r3, [pc, #20]	; (800ba18 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ba02:	2400      	movhi	r4, #0
 800ba04:	5c1c      	ldrbls	r4, [r3, r0]
 800ba06:	fb08 7005 	mla	r0, r8, r5, r7
 800ba0a:	10e4      	asrs	r4, r4, #3
 800ba0c:	fb04 6000 	mla	r0, r4, r0, r6
 800ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba14:	2400ae06 	.word	0x2400ae06
 800ba18:	0801a0a0 	.word	0x0801a0a0

0800ba1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1e:	b08b      	sub	sp, #44	; 0x2c
 800ba20:	461f      	mov	r7, r3
 800ba22:	4604      	mov	r4, r0
 800ba24:	4616      	mov	r6, r2
 800ba26:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ba2a:	2500      	movs	r5, #0
 800ba2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ba30:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ba34:	9504      	str	r5, [sp, #16]
 800ba36:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ba3a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ba3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ba42:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ba46:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba4a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ba4e:	f88d 3020 	strb.w	r3, [sp, #32]
 800ba52:	f7ff fe9f 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ba56:	463a      	mov	r2, r7
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f7ff ffc1 	bl	800b9e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ba62:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ba64:	9005      	str	r0, [sp, #20]
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba6c:	f7ff fce6 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800ba70:	6803      	ldr	r3, [r0, #0]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	4798      	blx	r3
 800ba76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba78:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800ba7c:	a901      	add	r1, sp, #4
 800ba7e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	6860      	ldr	r0, [r4, #4]
 800ba86:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800ba8a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800ba8e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800ba92:	6803      	ldr	r3, [r0, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4798      	blx	r3
 800ba98:	b00b      	add	sp, #44	; 0x2c
 800ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9c:	2400ae06 	.word	0x2400ae06

0800baa0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	b08d      	sub	sp, #52	; 0x34
 800baa4:	2501      	movs	r5, #1
 800baa6:	4604      	mov	r4, r0
 800baa8:	466b      	mov	r3, sp
 800baaa:	9503      	str	r5, [sp, #12]
 800baac:	e883 0006 	stmia.w	r3, {r1, r2}
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8bd 6000 	ldrh.w	r6, [sp]
 800bab6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800baba:	9306      	str	r3, [sp, #24]
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac0:	4798      	blx	r3
 800bac2:	463a      	mov	r2, r7
 800bac4:	4631      	mov	r1, r6
 800bac6:	4603      	mov	r3, r0
 800bac8:	4620      	mov	r0, r4
 800baca:	f7ff ff8b 	bl	800b9e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bace:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bad0:	9004      	str	r0, [sp, #16]
 800bad2:	9307      	str	r3, [sp, #28]
 800bad4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bad8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800badc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bae0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800baec:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800baf0:	f7ff fca4 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	4798      	blx	r3
 800bafa:	23ff      	movs	r3, #255	; 0xff
 800bafc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bb00:	a903      	add	r1, sp, #12
 800bb02:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bb06:	6860      	ldr	r0, [r4, #4]
 800bb08:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bb0c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bb10:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bb14:	6803      	ldr	r3, [r0, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	4798      	blx	r3
 800bb1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bb1c:	b00d      	add	sp, #52	; 0x34
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb20:	2400ae06 	.word	0x2400ae06

0800bb24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	b08c      	sub	sp, #48	; 0x30
 800bb2a:	461e      	mov	r6, r3
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	466d      	mov	r5, sp
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	6803      	ldr	r3, [r0, #0]
 800bb36:	e885 0006 	stmia.w	r5, {r1, r2}
 800bb3a:	2501      	movs	r5, #1
 800bb3c:	f8bd 7000 	ldrh.w	r7, [sp]
 800bb40:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800bb44:	9503      	str	r5, [sp, #12]
 800bb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb48:	4798      	blx	r3
 800bb4a:	4642      	mov	r2, r8
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4620      	mov	r0, r4
 800bb52:	f7ff ff47 	bl	800b9e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bb56:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bb5a:	9004      	str	r0, [sp, #16]
 800bb5c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bb60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bb64:	9607      	str	r6, [sp, #28]
 800bb66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bb6a:	4b10      	ldr	r3, [pc, #64]	; (800bbac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800bb6c:	881b      	ldrh	r3, [r3, #0]
 800bb6e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bb72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb74:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bb78:	f7ff fc60 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800bb7c:	6803      	ldr	r3, [r0, #0]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	4798      	blx	r3
 800bb82:	23ff      	movs	r3, #255	; 0xff
 800bb84:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bb88:	a903      	add	r1, sp, #12
 800bb8a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bb8e:	6860      	ldr	r0, [r4, #4]
 800bb90:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bb94:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bb98:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bb9c:	6803      	ldr	r3, [r0, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4798      	blx	r3
 800bba2:	4630      	mov	r0, r6
 800bba4:	b00c      	add	sp, #48	; 0x30
 800bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbaa:	bf00      	nop
 800bbac:	2400ae06 	.word	0x2400ae06

0800bbb0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800bbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	ac02      	add	r4, sp, #8
 800bbb8:	e884 0006 	stmia.w	r4, {r1, r2}
 800bbbc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800bbc0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800bbc4:	f7ff fde6 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4603      	mov	r3, r0
 800bbcc:	463a      	mov	r2, r7
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff ff08 	bl	800b9e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bbd4:	4a05      	ldr	r2, [pc, #20]	; (800bbec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	8812      	ldrh	r2, [r2, #0]
 800bbda:	9200      	str	r2, [sp, #0]
 800bbdc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	e894 0006 	ldmia.w	r4, {r1, r2}
 800bbe6:	47b0      	blx	r6
 800bbe8:	b005      	add	sp, #20
 800bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbec:	2400ae06 	.word	0x2400ae06

0800bbf0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	b19b      	cbz	r3, 800bc22 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800bbfa:	2002      	movs	r0, #2
 800bbfc:	f7f4 fcc8 	bl	8000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800bc00:	2300      	movs	r3, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800bc08:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800bc12:	f7ff fdbf 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc16:	4601      	mov	r1, r0
 800bc18:	4620      	mov	r0, r4
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc20:	4718      	bx	r3
 800bc22:	bd70      	pop	{r4, r5, r6, pc}

0800bc24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	428b      	cmp	r3, r1
 800bc30:	d006      	beq.n	800bc40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800bc32:	6803      	ldr	r3, [r0, #0]
 800bc34:	b929      	cbnz	r1, 800bc42 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800bc36:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bc3a:	4798      	blx	r3
 800bc3c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800bc40:	bd38      	pop	{r3, r4, r5, pc}
 800bc42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bc46:	e7f8      	b.n	800bc3a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800bc48 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800bc48:	4b0d      	ldr	r3, [pc, #52]	; (800bc80 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b95b      	cbnz	r3, 800bc6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc52:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d007      	beq.n	800bc6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc5a:	6840      	ldr	r0, [r0, #4]
 800bc5c:	f000 f916 	bl	800be8c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800bc60:	b118      	cbz	r0, 800bc6a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc62:	6862      	ldr	r2, [r4, #4]
 800bc64:	7a53      	ldrb	r3, [r2, #9]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0fc      	beq.n	800bc64 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800bc6a:	f7f4 fe15 	bl	8000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bc6e:	4620      	mov	r0, r4
 800bc70:	2100      	movs	r1, #0
 800bc72:	f7ff ffd7 	bl	800bc24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7ff fd8c 	bl	800b794 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc7c:	bd10      	pop	{r4, pc}
 800bc7e:	bf00      	nop
 800bc80:	2400ae0a 	.word	0x2400ae0a

0800bc84 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800bc84:	4770      	bx	lr

0800bc86 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800bc86:	2000      	movs	r0, #0
 800bc88:	4770      	bx	lr

0800bc8a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800bc8a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800bc8e:	1a13      	subs	r3, r2, r0
 800bc90:	4258      	negs	r0, r3
 800bc92:	4158      	adcs	r0, r3
 800bc94:	4770      	bx	lr

0800bc96 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800bc96:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bfdc      	itt	le
 800bca0:	6882      	ldrle	r2, [r0, #8]
 800bca2:	189b      	addle	r3, r3, r2
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	bfcc      	ite	gt
 800bca8:	2000      	movgt	r0, #0
 800bcaa:	2001      	movle	r0, #1
 800bcac:	4770      	bx	lr

0800bcae <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800bcae:	6902      	ldr	r2, [r0, #16]
 800bcb0:	6843      	ldr	r3, [r0, #4]
 800bcb2:	2024      	movs	r0, #36	; 0x24
 800bcb4:	fb00 3002 	mla	r0, r0, r2, r3
 800bcb8:	4770      	bx	lr

0800bcba <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800bcba:	6803      	ldr	r3, [r0, #0]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	4718      	bx	r3

0800bcc0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	b570      	push	{r4, r5, r6, lr}
 800bcc4:	7203      	strb	r3, [r0, #8]
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	6840      	ldr	r0, [r0, #4]
 800bcca:	6803      	ldr	r3, [r0, #0]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	4798      	blx	r3
 800bcd0:	6803      	ldr	r3, [r0, #0]
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	2b40      	cmp	r3, #64	; 0x40
 800bcd6:	d00c      	beq.n	800bcf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bcd8:	d810      	bhi.n	800bcfc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	d01d      	beq.n	800bd1a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800bcde:	d804      	bhi.n	800bcea <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d006      	beq.n	800bcf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	d02c      	beq.n	800bd42 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d01d      	beq.n	800bd2a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800bcee:	2b20      	cmp	r3, #32
 800bcf0:	d1fa      	bne.n	800bce8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf8:	4798      	blx	r3
 800bcfa:	e013      	b.n	800bd24 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800bcfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd00:	d0f7      	beq.n	800bcf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd02:	d804      	bhi.n	800bd0e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800bd04:	2b80      	cmp	r3, #128	; 0x80
 800bd06:	d0f4      	beq.n	800bcf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0c:	e7f0      	b.n	800bcf0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d0ee      	beq.n	800bcf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd18:	e7e5      	b.n	800bce6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	7f01      	ldrb	r1, [r0, #28]
 800bd1e:	4620      	mov	r0, r4
 800bd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd22:	4798      	blx	r3
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd28:	e006      	b.n	800bd38 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	7f01      	ldrb	r1, [r0, #28]
 800bd2e:	4620      	mov	r0, r4
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	4798      	blx	r3
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd40:	4718      	bx	r3
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	4620      	mov	r0, r4
 800bd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd48:	4798      	blx	r3
 800bd4a:	e7f3      	b.n	800bd34 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800bd4c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800bd4c:	4770      	bx	lr

0800bd4e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800bd4e:	4770      	bx	lr

0800bd50 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800bd50:	4770      	bx	lr

0800bd52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800bd52:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800bd56:	b510      	push	{r4, lr}
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	bfdc      	itt	le
 800bd5e:	6884      	ldrle	r4, [r0, #8]
 800bd60:	1912      	addle	r2, r2, r4
 800bd62:	2a01      	cmp	r2, #1
 800bd64:	dd16      	ble.n	800bd94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800bd66:	6842      	ldr	r2, [r0, #4]
 800bd68:	2424      	movs	r4, #36	; 0x24
 800bd6a:	fb04 2303 	mla	r3, r4, r3, r2
 800bd6e:	f101 0220 	add.w	r2, r1, #32
 800bd72:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd76:	4291      	cmp	r1, r2
 800bd78:	f843 4b04 	str.w	r4, [r3], #4
 800bd7c:	d1f9      	bne.n	800bd72 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800bd7e:	780a      	ldrb	r2, [r1, #0]
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	68c3      	ldr	r3, [r0, #12]
 800bd84:	6882      	ldr	r2, [r0, #8]
 800bd86:	f3bf 8f5b 	dmb	ish
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	bfd8      	it	le
 800bd90:	1a9b      	suble	r3, r3, r2
 800bd92:	60c3      	str	r3, [r0, #12]
 800bd94:	bd10      	pop	{r4, pc}

0800bd96 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800bd96:	6903      	ldr	r3, [r0, #16]
 800bd98:	6882      	ldr	r2, [r0, #8]
 800bd9a:	f3bf 8f5b 	dmb	ish
 800bd9e:	3301      	adds	r3, #1
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bfd8      	it	le
 800bda4:	1a9b      	suble	r3, r3, r2
 800bda6:	6103      	str	r3, [r0, #16]
 800bda8:	4770      	bx	lr
	...

0800bdac <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	4604      	mov	r4, r0
 800bdb0:	460e      	mov	r6, r1
 800bdb2:	6860      	ldr	r0, [r4, #4]
 800bdb4:	6803      	ldr	r3, [r0, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d1f9      	bne.n	800bdb2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800bdbe:	4d0d      	ldr	r5, [pc, #52]	; (800bdf4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800bdc0:	6828      	ldr	r0, [r5, #0]
 800bdc2:	6803      	ldr	r3, [r0, #0]
 800bdc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc6:	4798      	blx	r3
 800bdc8:	f7f4 fd78 	bl	80008bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800bdcc:	6828      	ldr	r0, [r5, #0]
 800bdce:	2101      	movs	r1, #1
 800bdd0:	f7ff ff28 	bl	800bc24 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bdd4:	6860      	ldr	r0, [r4, #4]
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	6803      	ldr	r3, [r0, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	4798      	blx	r3
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	4620      	mov	r0, r4
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	4798      	blx	r3
 800bde6:	6828      	ldr	r0, [r5, #0]
 800bde8:	6803      	ldr	r3, [r0, #0]
 800bdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdf0:	4718      	bx	r3
 800bdf2:	bf00      	nop
 800bdf4:	2400ae0c 	.word	0x2400ae0c

0800bdf8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800bdf8:	b508      	push	{r3, lr}
 800bdfa:	f7f4 fd4d 	bl	8000898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bdfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be02:	f7f4 bd53 	b.w	80008ac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800be06 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800be06:	b510      	push	{r4, lr}
 800be08:	4604      	mov	r4, r0
 800be0a:	2114      	movs	r1, #20
 800be0c:	f00b fec3 	bl	8017b96 <_ZdlPvj>
 800be10:	4620      	mov	r0, r4
 800be12:	bd10      	pop	{r4, pc}

0800be14 <_ZN8touchgfx13DMA_Interface5startEv>:
 800be14:	b510      	push	{r4, lr}
 800be16:	4604      	mov	r4, r0
 800be18:	6840      	ldr	r0, [r0, #4]
 800be1a:	6803      	ldr	r3, [r0, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4798      	blx	r3
 800be20:	b948      	cbnz	r0, 800be36 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be22:	7a63      	ldrb	r3, [r4, #9]
 800be24:	b13b      	cbz	r3, 800be36 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be26:	7a23      	ldrb	r3, [r4, #8]
 800be28:	b92b      	cbnz	r3, 800be36 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	4620      	mov	r0, r4
 800be2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be34:	4718      	bx	r3
 800be36:	bd10      	pop	{r4, pc}

0800be38 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	4604      	mov	r4, r0
 800be3c:	6840      	ldr	r0, [r0, #4]
 800be3e:	6803      	ldr	r3, [r0, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4798      	blx	r3
 800be44:	4605      	mov	r5, r0
 800be46:	b930      	cbnz	r0, 800be56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be48:	7a23      	ldrb	r3, [r4, #8]
 800be4a:	b123      	cbz	r3, 800be56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be4c:	6860      	ldr	r0, [r4, #4]
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	4798      	blx	r3
 800be54:	7225      	strb	r5, [r4, #8]
 800be56:	6860      	ldr	r0, [r4, #4]
 800be58:	6803      	ldr	r3, [r0, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4798      	blx	r3
 800be5e:	b928      	cbnz	r0, 800be6c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	4620      	mov	r0, r4
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be6a:	4718      	bx	r3
 800be6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be70:	f7f4 bd2e 	b.w	80008d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800be74 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800be74:	b510      	push	{r4, lr}
 800be76:	6082      	str	r2, [r0, #8]
 800be78:	2200      	movs	r2, #0
 800be7a:	4c03      	ldr	r4, [pc, #12]	; (800be88 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800be7c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800be80:	e9c0 4100 	strd	r4, r1, [r0]
 800be84:	bd10      	pop	{r4, pc}
 800be86:	bf00      	nop
 800be88:	0801a1dc 	.word	0x0801a1dc

0800be8c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800be8c:	6840      	ldr	r0, [r0, #4]
 800be8e:	6803      	ldr	r3, [r0, #0]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4718      	bx	r3

0800be94 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800be94:	2300      	movs	r3, #0
 800be96:	8083      	strh	r3, [r0, #4]
 800be98:	80c3      	strh	r3, [r0, #6]
 800be9a:	8003      	strh	r3, [r0, #0]
 800be9c:	8043      	strh	r3, [r0, #2]
 800be9e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800bea2:	2bff      	cmp	r3, #255	; 0xff
 800bea4:	bf01      	itttt	eq
 800bea6:	890b      	ldrheq	r3, [r1, #8]
 800bea8:	8083      	strheq	r3, [r0, #4]
 800beaa:	894b      	ldrheq	r3, [r1, #10]
 800beac:	80c3      	strheq	r3, [r0, #6]
 800beae:	4770      	bx	lr

0800beb0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800beb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beb2:	4604      	mov	r4, r0
 800beb4:	466b      	mov	r3, sp
 800beb6:	6808      	ldr	r0, [r1, #0]
 800beb8:	6849      	ldr	r1, [r1, #4]
 800beba:	c303      	stmia	r3!, {r0, r1}
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	4669      	mov	r1, sp
 800bec0:	4620      	mov	r0, r4
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	4798      	blx	r3
 800bec6:	4b08      	ldr	r3, [pc, #32]	; (800bee8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bece:	b10a      	cbz	r2, 800bed4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800bed0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bed2:	b900      	cbnz	r0, 800bed6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800bed4:	6898      	ldr	r0, [r3, #8]
 800bed6:	6803      	ldr	r3, [r0, #0]
 800bed8:	4669      	mov	r1, sp
 800beda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bedc:	6a1d      	ldr	r5, [r3, #32]
 800bede:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800bee2:	47a8      	blx	r5
 800bee4:	b003      	add	sp, #12
 800bee6:	bd30      	pop	{r4, r5, pc}
 800bee8:	2400ae0c 	.word	0x2400ae0c

0800beec <_ZN8touchgfx3BoxD1Ev>:
 800beec:	4770      	bx	lr

0800beee <_ZN8touchgfx3BoxD0Ev>:
 800beee:	b510      	push	{r4, lr}
 800bef0:	4604      	mov	r4, r0
 800bef2:	212c      	movs	r1, #44	; 0x2c
 800bef4:	f00b fe4f 	bl	8017b96 <_ZdlPvj>
 800bef8:	4620      	mov	r0, r4
 800befa:	bd10      	pop	{r4, pc}

0800befc <_ZNK8touchgfx3Box17invalidateContentEv>:
 800befc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800bf00:	b12a      	cbz	r2, 800bf0e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bf02:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bf06:	b112      	cbz	r2, 800bf0e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bf08:	6803      	ldr	r3, [r0, #0]
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	4718      	bx	r3
 800bf0e:	4770      	bx	lr

0800bf10 <_ZN8touchgfx5ImageD1Ev>:
 800bf10:	4770      	bx	lr

0800bf12 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	880b      	ldrh	r3, [r1, #0]
 800bf16:	460d      	mov	r5, r1
 800bf18:	4604      	mov	r4, r0
 800bf1a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	f003 fd5f 	bl	800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bf22:	4606      	mov	r6, r0
 800bf24:	4628      	mov	r0, r5
 800bf26:	f003 fd8f 	bl	800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4620      	mov	r0, r4
 800bf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf34:	4798      	blx	r3
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	4629      	mov	r1, r5
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf42:	4718      	bx	r3

0800bf44 <_ZN8touchgfx5ImageD0Ev>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	4604      	mov	r4, r0
 800bf48:	212c      	movs	r1, #44	; 0x2c
 800bf4a:	f00b fe24 	bl	8017b96 <_ZdlPvj>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	bd10      	pop	{r4, pc}

0800bf52 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800bf52:	b510      	push	{r4, lr}
 800bf54:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800bf58:	4604      	mov	r4, r0
 800bf5a:	2bff      	cmp	r3, #255	; 0xff
 800bf5c:	d006      	beq.n	800bf6c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	8003      	strh	r3, [r0, #0]
 800bf62:	8043      	strh	r3, [r0, #2]
 800bf64:	8083      	strh	r3, [r0, #4]
 800bf66:	80c3      	strh	r3, [r0, #6]
 800bf68:	4620      	mov	r0, r4
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	3126      	adds	r1, #38	; 0x26
 800bf6e:	f003 fd9f 	bl	800fab0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800bf72:	e7f9      	b.n	800bf68 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800bf74 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800bf74:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800bf78:	b12a      	cbz	r2, 800bf86 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf7a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bf7e:	b112      	cbz	r2, 800bf86 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf80:	6803      	ldr	r3, [r0, #0]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	4718      	bx	r3
 800bf86:	4770      	bx	lr

0800bf88 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	b088      	sub	sp, #32
 800bf90:	2500      	movs	r5, #0
 800bf92:	460f      	mov	r7, r1
 800bf94:	f854 3b26 	ldr.w	r3, [r4], #38
 800bf98:	a904      	add	r1, sp, #16
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bfa2:	4798      	blx	r3
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f003 fd1b 	bl	800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bfaa:	4680      	mov	r8, r0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f003 fd4b 	bl	800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bfb2:	9506      	str	r5, [sp, #24]
 800bfb4:	ad06      	add	r5, sp, #24
 800bfb6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f8ad 801c 	strh.w	r8, [sp, #28]
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7fe ff4f 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800bfc6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	dd19      	ble.n	800c002 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfce:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd15      	ble.n	800c002 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bfde:	b10a      	cbz	r2, 800bfe4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800bfe0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bfe2:	b900      	cbnz	r0, 800bfe6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800bfe4:	6898      	ldr	r0, [r3, #8]
 800bfe6:	2701      	movs	r7, #1
 800bfe8:	6801      	ldr	r1, [r0, #0]
 800bfea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800bfee:	9702      	str	r7, [sp, #8]
 800bff0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800bff4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800bff8:	e9cd 5600 	strd	r5, r6, [sp]
 800bffc:	688d      	ldr	r5, [r1, #8]
 800bffe:	4621      	mov	r1, r4
 800c000:	47a8      	blx	r5
 800c002:	b008      	add	sp, #32
 800c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c008:	2400ae0c 	.word	0x2400ae0c

0800c00c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	6803      	ldr	r3, [r0, #0]
 800c010:	460c      	mov	r4, r1
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	4798      	blx	r3
 800c016:	1b03      	subs	r3, r0, r4
 800c018:	4258      	negs	r0, r3
 800c01a:	4158      	adcs	r0, r3
 800c01c:	bd10      	pop	{r4, pc}
	...

0800c020 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c020:	4b01      	ldr	r3, [pc, #4]	; (800c028 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c022:	6019      	str	r1, [r3, #0]
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	2400ae14 	.word	0x2400ae14

0800c02c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	4696      	mov	lr, r2
 800c032:	b097      	sub	sp, #92	; 0x5c
 800c034:	4605      	mov	r5, r0
 800c036:	4614      	mov	r4, r2
 800c038:	460e      	mov	r6, r1
 800c03a:	461f      	mov	r7, r3
 800c03c:	f10d 0c1c 	add.w	ip, sp, #28
 800c040:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c044:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c048:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c04c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c050:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c054:	f8de 3000 	ldr.w	r3, [lr]
 800c058:	f104 0e14 	add.w	lr, r4, #20
 800c05c:	f8cc 3000 	str.w	r3, [ip]
 800c060:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c064:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c06c:	f8de 3000 	ldr.w	r3, [lr]
 800c070:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c074:	f8cc 3000 	str.w	r3, [ip]
 800c078:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c07c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c080:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c084:	f8de 3000 	ldr.w	r3, [lr]
 800c088:	4631      	mov	r1, r6
 800c08a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c08c:	4628      	mov	r0, r5
 800c08e:	f8cc 3000 	str.w	r3, [ip]
 800c092:	682b      	ldr	r3, [r5, #0]
 800c094:	9201      	str	r2, [sp, #4]
 800c096:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c098:	f8cd 8008 	str.w	r8, [sp, #8]
 800c09c:	9200      	str	r2, [sp, #0]
 800c09e:	aa07      	add	r2, sp, #28
 800c0a0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c0a4:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	47d8      	blx	fp
 800c0ac:	46a6      	mov	lr, r4
 800c0ae:	f10d 0c1c 	add.w	ip, sp, #28
 800c0b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0ba:	f8de 3000 	ldr.w	r3, [lr]
 800c0be:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c0c2:	343c      	adds	r4, #60	; 0x3c
 800c0c4:	f8cc 3000 	str.w	r3, [ip]
 800c0c8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c0cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0d4:	f8de 3000 	ldr.w	r3, [lr]
 800c0d8:	f8cc 3000 	str.w	r3, [ip]
 800c0dc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f8cc 3000 	str.w	r3, [ip]
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c0f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0f8:	f8cd 8008 	str.w	r8, [sp, #8]
 800c0fc:	9201      	str	r2, [sp, #4]
 800c0fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c100:	9200      	str	r2, [sp, #0]
 800c102:	aa07      	add	r2, sp, #28
 800c104:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c106:	463b      	mov	r3, r7
 800c108:	47a0      	blx	r4
 800c10a:	b017      	add	sp, #92	; 0x5c
 800c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c110 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800c110:	2000      	movs	r0, #0
 800c112:	4770      	bx	lr

0800c114 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	b08d      	sub	sp, #52	; 0x34
 800c11a:	4688      	mov	r8, r1
 800c11c:	f8d3 c000 	ldr.w	ip, [r3]
 800c120:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c122:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c126:	680f      	ldr	r7, [r1, #0]
 800c128:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c12c:	eba7 070c 	sub.w	r7, r7, ip
 800c130:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c134:	edd3 6a07 	vldr	s13, [r3, #28]
 800c138:	42bc      	cmp	r4, r7
 800c13a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c13c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c140:	bfa8      	it	ge
 800c142:	463c      	movge	r4, r7
 800c144:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c148:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c14c:	ee07 4a90 	vmov	s15, r4
 800c150:	eb09 0e0c 	add.w	lr, r9, ip
 800c154:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c158:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c15c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c160:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c164:	4571      	cmp	r1, lr
 800c166:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c16a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c16e:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c172:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c176:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c17a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c17e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c182:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c186:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c18a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c18e:	f340 808c 	ble.w	800c2aa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c192:	eba1 060e 	sub.w	r6, r1, lr
 800c196:	fb96 f5f4 	sdiv	r5, r6, r4
 800c19a:	ee07 5a10 	vmov	s14, r5
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	fb04 6615 	mls	r6, r4, r5, r6
 800c1a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1a8:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c1ac:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c1b0:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c1b4:	dd12      	ble.n	800c1dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c1b6:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c1ba:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c1be:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c1c2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ca:	bf14      	ite	ne
 800c1cc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c1d0:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c1d4:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c1d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c1dc:	fb05 f204 	mul.w	r2, r5, r4
 800c1e0:	1abf      	subs	r7, r7, r2
 800c1e2:	4494      	add	ip, r2
 800c1e4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c1e8:	4411      	add	r1, r2
 800c1ea:	eb09 020c 	add.w	r2, r9, ip
 800c1ee:	b209      	sxth	r1, r1
 800c1f0:	443a      	add	r2, r7
 800c1f2:	428a      	cmp	r2, r1
 800c1f4:	bfc4      	itt	gt
 800c1f6:	eba1 0209 	subgt.w	r2, r1, r9
 800c1fa:	eba2 070c 	subgt.w	r7, r2, ip
 800c1fe:	2f00      	cmp	r7, #0
 800c200:	dd50      	ble.n	800c2a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c202:	fb97 f1f4 	sdiv	r1, r7, r4
 800c206:	fb04 7211 	mls	r2, r4, r1, r7
 800c20a:	b90a      	cbnz	r2, 800c210 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c20c:	3901      	subs	r1, #1
 800c20e:	4622      	mov	r2, r4
 800c210:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c214:	6840      	ldr	r0, [r0, #4]
 800c216:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c21a:	44b6      	add	lr, r6
 800c21c:	f8d0 a000 	ldr.w	sl, [r0]
 800c220:	2900      	cmp	r1, #0
 800c222:	bfcc      	ite	gt
 800c224:	46a1      	movgt	r9, r4
 800c226:	4691      	movle	r9, r2
 800c228:	900b      	str	r0, [sp, #44]	; 0x2c
 800c22a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c22c:	fb04 e505 	mla	r5, r4, r5, lr
 800c230:	eef0 6a42 	vmov.f32	s13, s4
 800c234:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c238:	9008      	str	r0, [sp, #32]
 800c23a:	eeb0 7a61 	vmov.f32	s14, s3
 800c23e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c246:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c24a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c24e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c250:	445b      	add	r3, fp
 800c252:	9307      	str	r3, [sp, #28]
 800c254:	ee16 3a90 	vmov	r3, s13
 800c258:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c25c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c260:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c264:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c268:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c26c:	ee17 7a90 	vmov	r7, s15
 800c270:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c274:	fb97 f7f4 	sdiv	r7, r7, r4
 800c278:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c27c:	ee17 ca90 	vmov	ip, s15
 800c280:	fb9c fcf4 	sdiv	ip, ip, r4
 800c284:	fb0c 3306 	mla	r3, ip, r6, r3
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	ee17 3a10 	vmov	r3, s14
 800c28e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c292:	fb07 3706 	mla	r7, r7, r6, r3
 800c296:	eba9 0306 	sub.w	r3, r9, r6
 800c29a:	e9cd 4700 	strd	r4, r7, [sp]
 800c29e:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c2a2:	47a0      	blx	r4
 800c2a4:	b00d      	add	sp, #52	; 0x34
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	2500      	movs	r5, #0
 800c2ac:	462e      	mov	r6, r5
 800c2ae:	e799      	b.n	800c1e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	b0db      	sub	sp, #364	; 0x16c
 800c2b6:	461d      	mov	r5, r3
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c2be:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c2c8:	9009      	str	r0, [sp, #36]	; 0x24
 800c2ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2cc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c2d0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c2d4:	9310      	str	r3, [sp, #64]	; 0x40
 800c2d6:	6803      	ldr	r3, [r0, #0]
 800c2d8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800c2da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2de:	47b8      	blx	r7
 800c2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e2:	6058      	str	r0, [r3, #4]
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f000 83a1 	beq.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c2ea:	682b      	ldr	r3, [r5, #0]
 800c2ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c2f0:	ed94 7a02 	vldr	s14, [r4, #8]
 800c2f4:	9314      	str	r3, [sp, #80]	; 0x50
 800c2f6:	686b      	ldr	r3, [r5, #4]
 800c2f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2fc:	9315      	str	r3, [sp, #84]	; 0x54
 800c2fe:	4bc1      	ldr	r3, [pc, #772]	; (800c604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c300:	7819      	ldrb	r1, [r3, #0]
 800c302:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c306:	2900      	cmp	r1, #0
 800c308:	bf16      	itet	ne
 800c30a:	4619      	movne	r1, r3
 800c30c:	4611      	moveq	r1, r2
 800c30e:	4613      	movne	r3, r2
 800c310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c314:	9116      	str	r1, [sp, #88]	; 0x58
 800c316:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c31a:	f240 8387 	bls.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c31e:	ed94 7a07 	vldr	s14, [r4, #28]
 800c322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32a:	f240 837f 	bls.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c32e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33a:	f240 8377 	bls.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c33e:	6822      	ldr	r2, [r4, #0]
 800c340:	4bb1      	ldr	r3, [pc, #708]	; (800c608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c342:	429a      	cmp	r2, r3
 800c344:	f2c0 8372 	blt.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c348:	49b0      	ldr	r1, [pc, #704]	; (800c60c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c34a:	6963      	ldr	r3, [r4, #20]
 800c34c:	428a      	cmp	r2, r1
 800c34e:	f300 836d 	bgt.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c352:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c356:	48ae      	ldr	r0, [pc, #696]	; (800c610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c358:	33ff      	adds	r3, #255	; 0xff
 800c35a:	4283      	cmp	r3, r0
 800c35c:	f200 8366 	bhi.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c362:	4dac      	ldr	r5, [pc, #688]	; (800c614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c364:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c368:	33ff      	adds	r3, #255	; 0xff
 800c36a:	42ab      	cmp	r3, r5
 800c36c:	f200 835e 	bhi.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c370:	6862      	ldr	r2, [r4, #4]
 800c372:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c376:	33ff      	adds	r3, #255	; 0xff
 800c378:	4283      	cmp	r3, r0
 800c37a:	f200 8357 	bhi.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c37e:	69a1      	ldr	r1, [r4, #24]
 800c380:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c384:	33ff      	adds	r3, #255	; 0xff
 800c386:	4283      	cmp	r3, r0
 800c388:	f200 8350 	bhi.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c38c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c38e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c392:	30ff      	adds	r0, #255	; 0xff
 800c394:	42a8      	cmp	r0, r5
 800c396:	f200 8349 	bhi.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c39a:	428a      	cmp	r2, r1
 800c39c:	f280 8110 	bge.w	800c5c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	f300 8119 	bgt.w	800c5d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c3a6:	4299      	cmp	r1, r3
 800c3a8:	f280 811d 	bge.w	800c5e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800c3ac:	2502      	movs	r5, #2
 800c3ae:	2701      	movs	r7, #1
 800c3b0:	46a9      	mov	r9, r5
 800c3b2:	46b8      	mov	r8, r7
 800c3b4:	f04f 0a00 	mov.w	sl, #0
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	a849      	add	r0, sp, #292	; 0x124
 800c3bc:	f002 ff98 	bl	800f2f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	4653      	mov	r3, sl
 800c3c4:	a949      	add	r1, sp, #292	; 0x124
 800c3c6:	f8cd 9000 	str.w	r9, [sp]
 800c3ca:	a819      	add	r0, sp, #100	; 0x64
 800c3cc:	f003 f8c0 	bl	800f550 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4653      	mov	r3, sl
 800c3d4:	a949      	add	r1, sp, #292	; 0x124
 800c3d6:	f8cd 8000 	str.w	r8, [sp]
 800c3da:	a829      	add	r0, sp, #164	; 0xa4
 800c3dc:	f003 f8b8 	bl	800f550 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3e0:	4643      	mov	r3, r8
 800c3e2:	4622      	mov	r2, r4
 800c3e4:	a949      	add	r1, sp, #292	; 0x124
 800c3e6:	f8cd 9000 	str.w	r9, [sp]
 800c3ea:	a839      	add	r0, sp, #228	; 0xe4
 800c3ec:	f003 f8b0 	bl	800f550 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3f0:	42af      	cmp	r7, r5
 800c3f2:	af12      	add	r7, sp, #72	; 0x48
 800c3f4:	bfb7      	itett	lt
 800c3f6:	2300      	movlt	r3, #0
 800c3f8:	2301      	movge	r3, #1
 800c3fa:	ad29      	addlt	r5, sp, #164	; 0xa4
 800c3fc:	ac19      	addlt	r4, sp, #100	; 0x64
 800c3fe:	bfb1      	iteee	lt
 800c400:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c402:	ad19      	addge	r5, sp, #100	; 0x64
 800c404:	930e      	strge	r3, [sp, #56]	; 0x38
 800c406:	ac29      	addge	r4, sp, #164	; 0xa4
 800c408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c40a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c40e:	e887 0003 	stmia.w	r7, {r0, r1}
 800c412:	b928      	cbnz	r0, 800c420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800c414:	4b80      	ldr	r3, [pc, #512]	; (800c618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	6803      	ldr	r3, [r0, #0]
 800c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41c:	4798      	blx	r3
 800c41e:	6038      	str	r0, [r7, #0]
 800c420:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c422:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c42a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c42c:	930c      	str	r3, [sp, #48]	; 0x30
 800c42e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c430:	6963      	ldr	r3, [r4, #20]
 800c432:	440b      	add	r3, r1
 800c434:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c438:	4408      	add	r0, r1
 800c43a:	b200      	sxth	r0, r0
 800c43c:	4283      	cmp	r3, r0
 800c43e:	900d      	str	r0, [sp, #52]	; 0x34
 800c440:	f280 80dd 	bge.w	800c5fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800c444:	428b      	cmp	r3, r1
 800c446:	da08      	bge.n	800c45a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c448:	2a00      	cmp	r2, #0
 800c44a:	dd06      	ble.n	800c45a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c44c:	1acb      	subs	r3, r1, r3
 800c44e:	429a      	cmp	r2, r3
 800c450:	f2c0 80e4 	blt.w	800c61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800c454:	2b00      	cmp	r3, #0
 800c456:	f300 80e2 	bgt.w	800c61e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800c45a:	6967      	ldr	r7, [r4, #20]
 800c45c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c462:	443b      	add	r3, r7
 800c464:	461f      	mov	r7, r3
 800c466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c468:	1bdf      	subs	r7, r3, r7
 800c46a:	4297      	cmp	r7, r2
 800c46c:	bfa8      	it	ge
 800c46e:	4617      	movge	r7, r2
 800c470:	2f00      	cmp	r7, #0
 800c472:	f340 8166 	ble.w	800c742 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800c476:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c478:	6829      	ldr	r1, [r5, #0]
 800c47a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c47e:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c482:	4411      	add	r1, r2
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	4299      	cmp	r1, r3
 800c488:	dd1a      	ble.n	800c4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c48a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c48e:	4402      	add	r2, r0
 800c490:	440b      	add	r3, r1
 800c492:	b21b      	sxth	r3, r3
 800c494:	429a      	cmp	r2, r3
 800c496:	dc13      	bgt.n	800c4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c498:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c49a:	a912      	add	r1, sp, #72	; 0x48
 800c49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9206      	str	r2, [sp, #24]
 800c4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4a6:	9500      	str	r5, [sp, #0]
 800c4a8:	9205      	str	r2, [sp, #20]
 800c4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ac:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c4b0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c4b2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c4b6:	aa49      	add	r2, sp, #292	; 0x124
 800c4b8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c4bc:	4623      	mov	r3, r4
 800c4be:	47c8      	blx	r9
 800c4c0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c4c4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c4c8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c4cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4d0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c4d4:	68a1      	ldr	r1, [r4, #8]
 800c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4da:	ed94 6a08 	vldr	s12, [r4, #32]
 800c4de:	edd4 6a07 	vldr	s13, [r4, #28]
 800c4e2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c4e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c4ea:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c4ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c4f2:	edc4 6a07 	vstr	s13, [r4, #28]
 800c4f6:	441a      	add	r2, r3
 800c4f8:	6963      	ldr	r3, [r4, #20]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	6022      	str	r2, [r4, #0]
 800c4fe:	6163      	str	r3, [r4, #20]
 800c500:	69a3      	ldr	r3, [r4, #24]
 800c502:	3b01      	subs	r3, #1
 800c504:	61a3      	str	r3, [r4, #24]
 800c506:	6923      	ldr	r3, [r4, #16]
 800c508:	440b      	add	r3, r1
 800c50a:	68e1      	ldr	r1, [r4, #12]
 800c50c:	428b      	cmp	r3, r1
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	db15      	blt.n	800c53e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800c512:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c516:	3201      	adds	r2, #1
 800c518:	1a5b      	subs	r3, r3, r1
 800c51a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c51e:	6022      	str	r2, [r4, #0]
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	edc4 6a07 	vstr	s13, [r4, #28]
 800c526:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c52a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c52e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c532:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c53a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c53e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c542:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c546:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c54a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c54e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c552:	68a9      	ldr	r1, [r5, #8]
 800c554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c558:	ed95 6a08 	vldr	s12, [r5, #32]
 800c55c:	edd5 6a07 	vldr	s13, [r5, #28]
 800c560:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c564:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c568:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c56c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c570:	edc5 6a07 	vstr	s13, [r5, #28]
 800c574:	441a      	add	r2, r3
 800c576:	696b      	ldr	r3, [r5, #20]
 800c578:	3301      	adds	r3, #1
 800c57a:	602a      	str	r2, [r5, #0]
 800c57c:	616b      	str	r3, [r5, #20]
 800c57e:	69ab      	ldr	r3, [r5, #24]
 800c580:	3b01      	subs	r3, #1
 800c582:	61ab      	str	r3, [r5, #24]
 800c584:	692b      	ldr	r3, [r5, #16]
 800c586:	440b      	add	r3, r1
 800c588:	68e9      	ldr	r1, [r5, #12]
 800c58a:	428b      	cmp	r3, r1
 800c58c:	612b      	str	r3, [r5, #16]
 800c58e:	db15      	blt.n	800c5bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800c590:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c594:	3201      	adds	r2, #1
 800c596:	1a5b      	subs	r3, r3, r1
 800c598:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	612b      	str	r3, [r5, #16]
 800c5a0:	edc5 6a07 	vstr	s13, [r5, #28]
 800c5a4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c5a8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c5ac:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c5b0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c5b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5b8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c5bc:	3f01      	subs	r7, #1
 800c5be:	e757      	b.n	800c470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800c5c0:	4299      	cmp	r1, r3
 800c5c2:	dc13      	bgt.n	800c5ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	da14      	bge.n	800c5f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800c5c8:	2502      	movs	r5, #2
 800c5ca:	2703      	movs	r7, #3
 800c5cc:	f04f 0800 	mov.w	r8, #0
 800c5d0:	46a9      	mov	r9, r5
 800c5d2:	f04f 0a01 	mov.w	sl, #1
 800c5d6:	e6ef      	b.n	800c3b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5d8:	2501      	movs	r5, #1
 800c5da:	2700      	movs	r7, #0
 800c5dc:	46a9      	mov	r9, r5
 800c5de:	46b8      	mov	r8, r7
 800c5e0:	f04f 0a02 	mov.w	sl, #2
 800c5e4:	e6e8      	b.n	800c3b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5e6:	2501      	movs	r5, #1
 800c5e8:	2702      	movs	r7, #2
 800c5ea:	e6e1      	b.n	800c3b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800c5ec:	2500      	movs	r5, #0
 800c5ee:	2701      	movs	r7, #1
 800c5f0:	e7f4      	b.n	800c5dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800c5f2:	2702      	movs	r7, #2
 800c5f4:	2503      	movs	r5, #3
 800c5f6:	f04f 0900 	mov.w	r9, #0
 800c5fa:	46b8      	mov	r8, r7
 800c5fc:	e7e9      	b.n	800c5d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800c5fe:	4613      	mov	r3, r2
 800c600:	e728      	b.n	800c454 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800c602:	bf00      	nop
 800c604:	2400ae04 	.word	0x2400ae04
 800c608:	fffd8f01 	.word	0xfffd8f01
 800c60c:	00027100 	.word	0x00027100
 800c610:	0004e1ff 	.word	0x0004e1ff
 800c614:	0004e1fe 	.word	0x0004e1fe
 800c618:	2400ae0c 	.word	0x2400ae0c
 800c61c:	4613      	mov	r3, r2
 800c61e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c620:	469e      	mov	lr, r3
 800c622:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800c624:	469c      	mov	ip, r3
 800c626:	9111      	str	r1, [sp, #68]	; 0x44
 800c628:	f04f 0900 	mov.w	r9, #0
 800c62c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800c630:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800c634:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800c638:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800c63c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800c640:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c644:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800c648:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800c64c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800c650:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800c654:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800c658:	f1bc 0f00 	cmp.w	ip, #0
 800c65c:	d147      	bne.n	800c6ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800c65e:	eb03 0c07 	add.w	ip, r3, r7
 800c662:	1ad7      	subs	r7, r2, r3
 800c664:	f1b9 0f00 	cmp.w	r9, #0
 800c668:	d009      	beq.n	800c67e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800c66a:	9029      	str	r0, [sp, #164]	; 0xa4
 800c66c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800c670:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c674:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800c678:	912d      	str	r1, [sp, #180]	; 0xb4
 800c67a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800c67e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c680:	f04f 0800 	mov.w	r8, #0
 800c684:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c688:	9111      	str	r1, [sp, #68]	; 0x44
 800c68a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c68e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c692:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c696:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c69a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c69e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c6a2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c6a6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c6aa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c6ae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c6b2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c6b6:	f1be 0f00 	cmp.w	lr, #0
 800c6ba:	d031      	beq.n	800c720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800c6bc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c6be:	4450      	add	r0, sl
 800c6c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c6c4:	4431      	add	r1, r6
 800c6c6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c6ca:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c6ce:	4549      	cmp	r1, r9
 800c6d0:	db08      	blt.n	800c6e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800c6d2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c6dc:	eba1 0109 	sub.w	r1, r1, r9
 800c6e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c6e8:	f04f 0801 	mov.w	r8, #1
 800c6ec:	e7e3      	b.n	800c6b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800c6ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c6f0:	4450      	add	r0, sl
 800c6f2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c6f6:	4431      	add	r1, r6
 800c6f8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c6fc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c700:	4541      	cmp	r1, r8
 800c702:	db08      	blt.n	800c716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800c704:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c708:	3001      	adds	r0, #1
 800c70a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c70e:	eba1 0108 	sub.w	r1, r1, r8
 800c712:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c716:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c71a:	f04f 0901 	mov.w	r9, #1
 800c71e:	e79b      	b.n	800c658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800c720:	449c      	add	ip, r3
 800c722:	1aff      	subs	r7, r7, r3
 800c724:	f1b8 0f00 	cmp.w	r8, #0
 800c728:	d009      	beq.n	800c73e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800c72a:	9019      	str	r0, [sp, #100]	; 0x64
 800c72c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800c730:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800c734:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800c738:	911d      	str	r1, [sp, #116]	; 0x74
 800c73a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800c73e:	1ad2      	subs	r2, r2, r3
 800c740:	e68b      	b.n	800c45a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c744:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80d1 	beq.w	800c8ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800c74c:	ad19      	add	r5, sp, #100	; 0x64
 800c74e:	ac39      	add	r4, sp, #228	; 0xe4
 800c750:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c752:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c75a:	930c      	str	r3, [sp, #48]	; 0x30
 800c75c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c75e:	6963      	ldr	r3, [r4, #20]
 800c760:	440b      	add	r3, r1
 800c762:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c766:	4408      	add	r0, r1
 800c768:	b200      	sxth	r0, r0
 800c76a:	4283      	cmp	r3, r0
 800c76c:	900d      	str	r0, [sp, #52]	; 0x34
 800c76e:	f280 80c1 	bge.w	800c8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800c772:	428b      	cmp	r3, r1
 800c774:	da08      	bge.n	800c788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c776:	2a00      	cmp	r2, #0
 800c778:	dd06      	ble.n	800c788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c77a:	1acb      	subs	r3, r1, r3
 800c77c:	429a      	cmp	r2, r3
 800c77e:	f2c0 80bb 	blt.w	800c8f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800c782:	2b00      	cmp	r3, #0
 800c784:	f300 80b9 	bgt.w	800c8fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800c788:	6967      	ldr	r7, [r4, #20]
 800c78a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c790:	443b      	add	r3, r7
 800c792:	461f      	mov	r7, r3
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	1bdf      	subs	r7, r3, r7
 800c798:	4297      	cmp	r7, r2
 800c79a:	bfa8      	it	ge
 800c79c:	4617      	movge	r7, r2
 800c79e:	2f00      	cmp	r7, #0
 800c7a0:	f340 813c 	ble.w	800ca1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800c7a4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c7a6:	6829      	ldr	r1, [r5, #0]
 800c7a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c7ac:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c7b0:	4411      	add	r1, r2
 800c7b2:	6820      	ldr	r0, [r4, #0]
 800c7b4:	4299      	cmp	r1, r3
 800c7b6:	dd1a      	ble.n	800c7ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c7b8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c7bc:	4402      	add	r2, r0
 800c7be:	440b      	add	r3, r1
 800c7c0:	b21b      	sxth	r3, r3
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	dc13      	bgt.n	800c7ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c7c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7c8:	a912      	add	r1, sp, #72	; 0x48
 800c7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	9206      	str	r2, [sp, #24]
 800c7d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7d4:	9500      	str	r5, [sp, #0]
 800c7d6:	9205      	str	r2, [sp, #20]
 800c7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7da:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c7de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c7e0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c7e4:	aa49      	add	r2, sp, #292	; 0x124
 800c7e6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c7ea:	4623      	mov	r3, r4
 800c7ec:	47c8      	blx	r9
 800c7ee:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c7f2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c7f6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c7fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7fe:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c802:	68a1      	ldr	r1, [r4, #8]
 800c804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c808:	ed94 6a08 	vldr	s12, [r4, #32]
 800c80c:	edd4 6a07 	vldr	s13, [r4, #28]
 800c810:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c814:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c818:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c81c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c820:	edc4 6a07 	vstr	s13, [r4, #28]
 800c824:	441a      	add	r2, r3
 800c826:	6963      	ldr	r3, [r4, #20]
 800c828:	3301      	adds	r3, #1
 800c82a:	6022      	str	r2, [r4, #0]
 800c82c:	6163      	str	r3, [r4, #20]
 800c82e:	69a3      	ldr	r3, [r4, #24]
 800c830:	3b01      	subs	r3, #1
 800c832:	61a3      	str	r3, [r4, #24]
 800c834:	6923      	ldr	r3, [r4, #16]
 800c836:	440b      	add	r3, r1
 800c838:	68e1      	ldr	r1, [r4, #12]
 800c83a:	428b      	cmp	r3, r1
 800c83c:	6123      	str	r3, [r4, #16]
 800c83e:	db15      	blt.n	800c86c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800c840:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c844:	3201      	adds	r2, #1
 800c846:	1a5b      	subs	r3, r3, r1
 800c848:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c84c:	6022      	str	r2, [r4, #0]
 800c84e:	6123      	str	r3, [r4, #16]
 800c850:	edc4 6a07 	vstr	s13, [r4, #28]
 800c854:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c858:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c85c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c860:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c864:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c868:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c86c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c870:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c874:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c87c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c880:	68a9      	ldr	r1, [r5, #8]
 800c882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c886:	ed95 6a08 	vldr	s12, [r5, #32]
 800c88a:	edd5 6a07 	vldr	s13, [r5, #28]
 800c88e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c892:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c896:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c89a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c89e:	edc5 6a07 	vstr	s13, [r5, #28]
 800c8a2:	441a      	add	r2, r3
 800c8a4:	696b      	ldr	r3, [r5, #20]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	602a      	str	r2, [r5, #0]
 800c8aa:	616b      	str	r3, [r5, #20]
 800c8ac:	69ab      	ldr	r3, [r5, #24]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	61ab      	str	r3, [r5, #24]
 800c8b2:	692b      	ldr	r3, [r5, #16]
 800c8b4:	440b      	add	r3, r1
 800c8b6:	68e9      	ldr	r1, [r5, #12]
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	612b      	str	r3, [r5, #16]
 800c8bc:	db15      	blt.n	800c8ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800c8be:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c8c2:	3201      	adds	r2, #1
 800c8c4:	1a5b      	subs	r3, r3, r1
 800c8c6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c8ca:	602a      	str	r2, [r5, #0]
 800c8cc:	612b      	str	r3, [r5, #16]
 800c8ce:	edc5 6a07 	vstr	s13, [r5, #28]
 800c8d2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c8d6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c8da:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c8de:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c8e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8e6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c8ea:	3f01      	subs	r7, #1
 800c8ec:	e757      	b.n	800c79e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800c8ee:	ad39      	add	r5, sp, #228	; 0xe4
 800c8f0:	ac19      	add	r4, sp, #100	; 0x64
 800c8f2:	e72d      	b.n	800c750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	e744      	b.n	800c782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800c8fc:	469e      	mov	lr, r3
 800c8fe:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800c902:	461f      	mov	r7, r3
 800c904:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800c908:	f04f 0900 	mov.w	r9, #0
 800c90c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800c910:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800c914:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800c918:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800c91c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800c920:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800c922:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800c926:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800c92a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800c92e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800c932:	960e      	str	r6, [sp, #56]	; 0x38
 800c934:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800c938:	2f00      	cmp	r7, #0
 800c93a:	d146      	bne.n	800c9ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800c93c:	449c      	add	ip, r3
 800c93e:	1ad7      	subs	r7, r2, r3
 800c940:	f1b9 0f00 	cmp.w	r9, #0
 800c944:	d009      	beq.n	800c95a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800c946:	9039      	str	r0, [sp, #228]	; 0xe4
 800c948:	913d      	str	r1, [sp, #244]	; 0xf4
 800c94a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c94e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800c952:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800c956:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800c95a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c95c:	f04f 0800 	mov.w	r8, #0
 800c960:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c964:	910e      	str	r1, [sp, #56]	; 0x38
 800c966:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c96a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c96e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c972:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c976:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c97a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c97e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c982:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c986:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c98a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c98e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c992:	f1be 0f00 	cmp.w	lr, #0
 800c996:	d030      	beq.n	800c9fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800c998:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c99a:	4450      	add	r0, sl
 800c99c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c9a0:	4431      	add	r1, r6
 800c9a2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c9a6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c9aa:	4549      	cmp	r1, r9
 800c9ac:	db08      	blt.n	800c9c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800c9ae:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c9b8:	eba1 0109 	sub.w	r1, r1, r9
 800c9bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c9c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c9c4:	f04f 0801 	mov.w	r8, #1
 800c9c8:	e7e3      	b.n	800c992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800c9ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c9cc:	4450      	add	r0, sl
 800c9ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c9d2:	4431      	add	r1, r6
 800c9d4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c9d8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c9dc:	4541      	cmp	r1, r8
 800c9de:	db08      	blt.n	800c9f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800c9e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c9ea:	eba1 0108 	sub.w	r1, r1, r8
 800c9ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9f2:	3f01      	subs	r7, #1
 800c9f4:	f04f 0901 	mov.w	r9, #1
 800c9f8:	e79e      	b.n	800c938 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800c9fa:	449c      	add	ip, r3
 800c9fc:	1aff      	subs	r7, r7, r3
 800c9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ca02:	d009      	beq.n	800ca18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800ca04:	9019      	str	r0, [sp, #100]	; 0x64
 800ca06:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800ca0a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800ca0e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800ca12:	911d      	str	r1, [sp, #116]	; 0x74
 800ca14:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800ca18:	1ad2      	subs	r2, r2, r3
 800ca1a:	e6b5      	b.n	800c788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ca1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	b923      	cbnz	r3, 800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ca22:	4b04      	ldr	r3, [pc, #16]	; (800ca34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ca24:	6818      	ldr	r0, [r3, #0]
 800ca26:	6803      	ldr	r3, [r0, #0]
 800ca28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2a:	4798      	blx	r3
 800ca2c:	b05b      	add	sp, #364	; 0x16c
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca32:	bf00      	nop
 800ca34:	2400ae0c 	.word	0x2400ae0c

0800ca38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ca38:	2b03      	cmp	r3, #3
 800ca3a:	d818      	bhi.n	800ca6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800ca3c:	e8df f003 	tbb	[pc, r3]
 800ca40:	130d0602 	.word	0x130d0602
 800ca44:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ca48:	1850      	adds	r0, r2, r1
 800ca4a:	4770      	bx	lr
 800ca4c:	8803      	ldrh	r3, [r0, #0]
 800ca4e:	8880      	ldrh	r0, [r0, #4]
 800ca50:	4418      	add	r0, r3
 800ca52:	b200      	sxth	r0, r0
 800ca54:	1a80      	subs	r0, r0, r2
 800ca56:	3801      	subs	r0, #1
 800ca58:	4770      	bx	lr
 800ca5a:	8803      	ldrh	r3, [r0, #0]
 800ca5c:	8880      	ldrh	r0, [r0, #4]
 800ca5e:	4418      	add	r0, r3
 800ca60:	b200      	sxth	r0, r0
 800ca62:	1a40      	subs	r0, r0, r1
 800ca64:	e7f7      	b.n	800ca56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ca66:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ca6a:	4410      	add	r0, r2
 800ca6c:	4770      	bx	lr
 800ca6e:	2000      	movs	r0, #0
 800ca70:	4770      	bx	lr

0800ca72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d817      	bhi.n	800caa6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ca76:	e8df f003 	tbb	[pc, r3]
 800ca7a:	0602      	.short	0x0602
 800ca7c:	1009      	.short	0x1009
 800ca7e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ca82:	1850      	adds	r0, r2, r1
 800ca84:	4770      	bx	lr
 800ca86:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ca8a:	e7fa      	b.n	800ca82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ca8c:	8843      	ldrh	r3, [r0, #2]
 800ca8e:	88c0      	ldrh	r0, [r0, #6]
 800ca90:	4418      	add	r0, r3
 800ca92:	b200      	sxth	r0, r0
 800ca94:	1a80      	subs	r0, r0, r2
 800ca96:	3801      	subs	r0, #1
 800ca98:	4770      	bx	lr
 800ca9a:	8843      	ldrh	r3, [r0, #2]
 800ca9c:	88c0      	ldrh	r0, [r0, #6]
 800ca9e:	4418      	add	r0, r3
 800caa0:	b200      	sxth	r0, r0
 800caa2:	1a40      	subs	r0, r0, r1
 800caa4:	e7f7      	b.n	800ca96 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800caa6:	2000      	movs	r0, #0
 800caa8:	4770      	bx	lr
	...

0800caac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800caac:	4b01      	ldr	r3, [pc, #4]	; (800cab4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	4770      	bx	lr
 800cab4:	2400ae14 	.word	0x2400ae14

0800cab8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800cab8:	4603      	mov	r3, r0
 800caba:	b1c8      	cbz	r0, 800caf0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800cabc:	0c02      	lsrs	r2, r0, #16
 800cabe:	0412      	lsls	r2, r2, #16
 800cac0:	b9a2      	cbnz	r2, 800caec <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800cac2:	0403      	lsls	r3, r0, #16
 800cac4:	2010      	movs	r0, #16
 800cac6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800caca:	bf04      	itt	eq
 800cacc:	021b      	lsleq	r3, r3, #8
 800cace:	3008      	addeq	r0, #8
 800cad0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cad4:	bf04      	itt	eq
 800cad6:	011b      	lsleq	r3, r3, #4
 800cad8:	3004      	addeq	r0, #4
 800cada:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cade:	bf04      	itt	eq
 800cae0:	009b      	lsleq	r3, r3, #2
 800cae2:	3002      	addeq	r0, #2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	db04      	blt.n	800caf2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800cae8:	3001      	adds	r0, #1
 800caea:	4770      	bx	lr
 800caec:	2000      	movs	r0, #0
 800caee:	e7ea      	b.n	800cac6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800caf0:	2020      	movs	r0, #32
 800caf2:	4770      	bx	lr

0800caf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	b087      	sub	sp, #28
 800cafa:	4681      	mov	r9, r0
 800cafc:	4698      	mov	r8, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	460d      	mov	r5, r1
 800cb02:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800cb06:	b981      	cbnz	r1, 800cb2a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800cb08:	b14b      	cbz	r3, 800cb1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	464a      	mov	r2, r9
 800cb0e:	4641      	mov	r1, r8
 800cb10:	e9cd 4700 	strd	r4, r7, [sp]
 800cb14:	f7ff ffee 	bl	800caf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb18:	b007      	add	sp, #28
 800cb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb22:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800cb26:	603b      	str	r3, [r7, #0]
 800cb28:	e7f6      	b.n	800cb18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb2a:	fa32 fa01 	lsrs.w	sl, r2, r1
 800cb2e:	d107      	bne.n	800cb40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800cb30:	fb09 f602 	mul.w	r6, r9, r2
 800cb34:	fbb6 f0f4 	udiv	r0, r6, r4
 800cb38:	fb04 6610 	mls	r6, r4, r0, r6
 800cb3c:	603e      	str	r6, [r7, #0]
 800cb3e:	e7eb      	b.n	800cb18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb40:	2601      	movs	r6, #1
 800cb42:	fa09 fb01 	lsl.w	fp, r9, r1
 800cb46:	408e      	lsls	r6, r1
 800cb48:	fbbb f3f4 	udiv	r3, fp, r4
 800cb4c:	3e01      	subs	r6, #1
 800cb4e:	9302      	str	r3, [sp, #8]
 800cb50:	fb0a f303 	mul.w	r3, sl, r3
 800cb54:	4016      	ands	r6, r2
 800cb56:	9303      	str	r3, [sp, #12]
 800cb58:	4630      	mov	r0, r6
 800cb5a:	f7ff ffad 	bl	800cab8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb5e:	464a      	mov	r2, r9
 800cb60:	460b      	mov	r3, r1
 800cb62:	4601      	mov	r1, r0
 800cb64:	4630      	mov	r0, r6
 800cb66:	e9cd 4700 	strd	r4, r7, [sp]
 800cb6a:	f7ff ffc3 	bl	800caf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	4606      	mov	r6, r0
 800cb72:	eb05 0108 	add.w	r1, r5, r8
 800cb76:	fb04 bb13 	mls	fp, r4, r3, fp
 800cb7a:	4658      	mov	r0, fp
 800cb7c:	f7ff ff9c 	bl	800cab8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb80:	ab05      	add	r3, sp, #20
 800cb82:	465a      	mov	r2, fp
 800cb84:	e9cd 4300 	strd	r4, r3, [sp]
 800cb88:	4603      	mov	r3, r0
 800cb8a:	4650      	mov	r0, sl
 800cb8c:	f7ff ffb2 	bl	800caf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	9a05      	ldr	r2, [sp, #20]
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	4411      	add	r1, r2
 800cb98:	fbb1 f2f4 	udiv	r2, r1, r4
 800cb9c:	18d3      	adds	r3, r2, r3
 800cb9e:	fb04 1412 	mls	r4, r4, r2, r1
 800cba2:	441e      	add	r6, r3
 800cba4:	603c      	str	r4, [r7, #0]
 800cba6:	4430      	add	r0, r6
 800cba8:	e7b6      	b.n	800cb18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800cbaa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800cbaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	f1b0 0900 	subs.w	r9, r0, #0
 800cbb4:	461d      	mov	r5, r3
 800cbb6:	4617      	mov	r7, r2
 800cbb8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cbba:	bfbb      	ittet	lt
 800cbbc:	f1c9 0900 	rsblt	r9, r9, #0
 800cbc0:	f04f 36ff 	movlt.w	r6, #4294967295
 800cbc4:	2601      	movge	r6, #1
 800cbc6:	6823      	ldrlt	r3, [r4, #0]
 800cbc8:	bfbc      	itt	lt
 800cbca:	425b      	neglt	r3, r3
 800cbcc:	6023      	strlt	r3, [r4, #0]
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	da04      	bge.n	800cbdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	4257      	negs	r7, r2
 800cbd6:	4276      	negs	r6, r6
 800cbd8:	425b      	negs	r3, r3
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	2d00      	cmp	r5, #0
 800cbde:	4638      	mov	r0, r7
 800cbe0:	bfba      	itte	lt
 800cbe2:	426d      	neglt	r5, r5
 800cbe4:	f04f 38ff 	movlt.w	r8, #4294967295
 800cbe8:	f04f 0801 	movge.w	r8, #1
 800cbec:	f7ff ff64 	bl	800cab8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cbf0:	ab03      	add	r3, sp, #12
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	e9cd 5300 	strd	r5, r3, [sp]
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	4648      	mov	r0, r9
 800cbfc:	f7ff ff7a 	bl	800caf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	9a03      	ldr	r2, [sp, #12]
 800cc04:	4546      	cmp	r6, r8
 800cc06:	441a      	add	r2, r3
 800cc08:	fb92 f3f5 	sdiv	r3, r2, r5
 800cc0c:	4418      	add	r0, r3
 800cc0e:	fb05 2313 	mls	r3, r5, r3, r2
 800cc12:	bf18      	it	ne
 800cc14:	4240      	negne	r0, r0
 800cc16:	1c72      	adds	r2, r6, #1
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	d105      	bne.n	800cc28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f1c3 0200 	rsb	r2, r3, #0
 800cc22:	db0b      	blt.n	800cc3c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800cc24:	6022      	str	r2, [r4, #0]
 800cc26:	e006      	b.n	800cc36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc28:	2e01      	cmp	r6, #1
 800cc2a:	d104      	bne.n	800cc36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	da02      	bge.n	800cc36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc30:	442b      	add	r3, r5
 800cc32:	3801      	subs	r0, #1
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	b005      	add	sp, #20
 800cc38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc3c:	3801      	subs	r0, #1
 800cc3e:	1b52      	subs	r2, r2, r5
 800cc40:	e7f0      	b.n	800cc24 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800cc44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800cc44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc48:	4c1c      	ldr	r4, [pc, #112]	; (800ccbc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	6807      	ldr	r7, [r0, #0]
 800cc4e:	69a3      	ldr	r3, [r4, #24]
 800cc50:	b92b      	cbnz	r3, 800cc5e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800cc52:	6840      	ldr	r0, [r0, #4]
 800cc54:	e9c5 7000 	strd	r7, r0, [r5]
 800cc58:	b004      	add	sp, #16
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	f04f 0802 	mov.w	r8, #2
 800cc62:	68a2      	ldr	r2, [r4, #8]
 800cc64:	ae04      	add	r6, sp, #16
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	fb93 f1f8 	sdiv	r1, r3, r8
 800cc6c:	440a      	add	r2, r1
 800cc6e:	69e1      	ldr	r1, [r4, #28]
 800cc70:	f846 2d04 	str.w	r2, [r6, #-4]!
 800cc74:	463a      	mov	r2, r7
 800cc76:	9600      	str	r6, [sp, #0]
 800cc78:	f7ff ff97 	bl	800cbaa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc7c:	69a3      	ldr	r3, [r4, #24]
 800cc7e:	4607      	mov	r7, r0
 800cc80:	686a      	ldr	r2, [r5, #4]
 800cc82:	6a21      	ldr	r1, [r4, #32]
 800cc84:	9600      	str	r6, [sp, #0]
 800cc86:	6860      	ldr	r0, [r4, #4]
 800cc88:	f7ff ff8f 	bl	800cbaa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc8c:	69a3      	ldr	r3, [r4, #24]
 800cc8e:	6962      	ldr	r2, [r4, #20]
 800cc90:	4407      	add	r7, r0
 800cc92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cc94:	9600      	str	r6, [sp, #0]
 800cc96:	68e0      	ldr	r0, [r4, #12]
 800cc98:	fb93 f8f8 	sdiv	r8, r3, r8
 800cc9c:	4442      	add	r2, r8
 800cc9e:	9203      	str	r2, [sp, #12]
 800cca0:	682a      	ldr	r2, [r5, #0]
 800cca2:	f7ff ff82 	bl	800cbaa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cca6:	4680      	mov	r8, r0
 800cca8:	9600      	str	r6, [sp, #0]
 800ccaa:	69a3      	ldr	r3, [r4, #24]
 800ccac:	686a      	ldr	r2, [r5, #4]
 800ccae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ccb0:	6920      	ldr	r0, [r4, #16]
 800ccb2:	f7ff ff7a 	bl	800cbaa <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ccb6:	4440      	add	r0, r8
 800ccb8:	e7cc      	b.n	800cc54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ccba:	bf00      	nop
 800ccbc:	2400ae18 	.word	0x2400ae18

0800ccc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d109      	bne.n	800ccdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800ccc8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cccc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccd0:	8003      	strh	r3, [r0, #0]
 800ccd2:	4b04      	ldr	r3, [pc, #16]	; (800cce4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	1a9b      	subs	r3, r3, r2
 800ccda:	800b      	strh	r3, [r1, #0]
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	2400ae04 	.word	0x2400ae04
 800cce4:	2400ae00 	.word	0x2400ae00

0800cce8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800cce8:	4b07      	ldr	r3, [pc, #28]	; (800cd08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ccea:	b510      	push	{r4, lr}
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d108      	bne.n	800cd04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ccf2:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ccf4:	880c      	ldrh	r4, [r1, #0]
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	1b1b      	subs	r3, r3, r4
 800cd00:	8003      	strh	r3, [r0, #0]
 800cd02:	800a      	strh	r2, [r1, #0]
 800cd04:	bd10      	pop	{r4, pc}
 800cd06:	bf00      	nop
 800cd08:	2400ae04 	.word	0x2400ae04
 800cd0c:	2400ae00 	.word	0x2400ae00

0800cd10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800cd10:	4b0a      	ldr	r3, [pc, #40]	; (800cd3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800cd12:	b510      	push	{r4, lr}
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d10e      	bne.n	800cd38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800cd1a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cd1e:	8843      	ldrh	r3, [r0, #2]
 800cd20:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd24:	18ca      	adds	r2, r1, r3
 800cd26:	4b06      	ldr	r3, [pc, #24]	; (800cd40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800cd28:	8044      	strh	r4, [r0, #2]
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	1a9b      	subs	r3, r3, r2
 800cd2e:	8003      	strh	r3, [r0, #0]
 800cd30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd34:	8081      	strh	r1, [r0, #4]
 800cd36:	80c3      	strh	r3, [r0, #6]
 800cd38:	bd10      	pop	{r4, pc}
 800cd3a:	bf00      	nop
 800cd3c:	2400ae04 	.word	0x2400ae04
 800cd40:	2400ae00 	.word	0x2400ae00

0800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800cd44:	4b08      	ldr	r3, [pc, #32]	; (800cd68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d10c      	bne.n	800cd66 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800cd4c:	8803      	ldrh	r3, [r0, #0]
 800cd4e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800cd52:	8842      	ldrh	r2, [r0, #2]
 800cd54:	8002      	strh	r2, [r0, #0]
 800cd56:	185a      	adds	r2, r3, r1
 800cd58:	4b04      	ldr	r3, [pc, #16]	; (800cd6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	1a9b      	subs	r3, r3, r2
 800cd5e:	8043      	strh	r3, [r0, #2]
 800cd60:	88c3      	ldrh	r3, [r0, #6]
 800cd62:	80c1      	strh	r1, [r0, #6]
 800cd64:	8083      	strh	r3, [r0, #4]
 800cd66:	4770      	bx	lr
 800cd68:	2400ae04 	.word	0x2400ae04
 800cd6c:	2400ae00 	.word	0x2400ae00

0800cd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800cd70:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800cd72:	b510      	push	{r4, lr}
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d108      	bne.n	800cd8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800cd7a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cd7e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd82:	8003      	strh	r3, [r0, #0]
 800cd84:	8893      	ldrh	r3, [r2, #4]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	1b1b      	subs	r3, r3, r4
 800cd8a:	800b      	strh	r3, [r1, #0]
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	bf00      	nop
 800cd90:	2400ae04 	.word	0x2400ae04

0800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800cd94:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800cd96:	460a      	mov	r2, r1
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d10d      	bne.n	800cdbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800cda0:	8881      	ldrh	r1, [r0, #4]
 800cda2:	8803      	ldrh	r3, [r0, #0]
 800cda4:	440b      	add	r3, r1
 800cda6:	4601      	mov	r1, r0
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	f821 3b02 	strh.w	r3, [r1], #2
 800cdae:	f7ff ffdf 	bl	800cd70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800cdb2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cdb6:	88c2      	ldrh	r2, [r0, #6]
 800cdb8:	80c3      	strh	r3, [r0, #6]
 800cdba:	8082      	strh	r2, [r0, #4]
 800cdbc:	bd10      	pop	{r4, pc}
 800cdbe:	bf00      	nop
 800cdc0:	2400ae04 	.word	0x2400ae04

0800cdc4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	4c0a      	ldr	r4, [pc, #40]	; (800cdf4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cdca:	4605      	mov	r5, r0
 800cdcc:	460e      	mov	r6, r1
 800cdce:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800cdd2:	6820      	ldr	r0, [r4, #0]
 800cdd4:	b110      	cbz	r0, 800cddc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 800cdd6:	6803      	ldr	r3, [r0, #0]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	4798      	blx	r3
 800cddc:	6026      	str	r6, [r4, #0]
 800cdde:	4630      	mov	r0, r6
 800cde0:	6833      	ldr	r3, [r6, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	4798      	blx	r3
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	4628      	mov	r0, r5
 800cdea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdf0:	4718      	bx	r3
 800cdf2:	bf00      	nop
 800cdf4:	2400ae48 	.word	0x2400ae48

0800cdf8 <_ZN8touchgfx11Application13requestRedrawEv>:
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ce02:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800ce06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce0a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800ce0e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800ce12:	4770      	bx	lr
 800ce14:	2400ae00 	.word	0x2400ae00
 800ce18:	2400ae02 	.word	0x2400ae02

0800ce1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800ce1c:	4b03      	ldr	r3, [pc, #12]	; (800ce2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	b110      	cbz	r0, 800ce28 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800ce22:	6803      	ldr	r3, [r0, #0]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	4718      	bx	r3
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	2400ae48 	.word	0x2400ae48

0800ce30 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ce30:	4770      	bx	lr
	...

0800ce34 <_ZN8touchgfx11Application4drawEv>:
 800ce34:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <_ZN8touchgfx11Application4drawEv+0x28>)
 800ce36:	b507      	push	{r0, r1, r2, lr}
 800ce38:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4b08      	ldr	r3, [pc, #32]	; (800ce60 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ce40:	9100      	str	r1, [sp, #0]
 800ce42:	4669      	mov	r1, sp
 800ce44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce48:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ce4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce50:	6803      	ldr	r3, [r0, #0]
 800ce52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce54:	4798      	blx	r3
 800ce56:	b003      	add	sp, #12
 800ce58:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce5c:	2400ae00 	.word	0x2400ae00
 800ce60:	2400ae02 	.word	0x2400ae02

0800ce64 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ce64:	4b03      	ldr	r3, [pc, #12]	; (800ce74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	b110      	cbz	r0, 800ce70 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ce6a:	6803      	ldr	r3, [r0, #0]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	4718      	bx	r3
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	2400ae48 	.word	0x2400ae48

0800ce78 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ce78:	4b03      	ldr	r3, [pc, #12]	; (800ce88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ce7a:	6818      	ldr	r0, [r3, #0]
 800ce7c:	b110      	cbz	r0, 800ce84 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ce7e:	6803      	ldr	r3, [r0, #0]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	4718      	bx	r3
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	2400ae48 	.word	0x2400ae48

0800ce8c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800ce92:	4770      	bx	lr

0800ce94 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ce96:	6818      	ldr	r0, [r3, #0]
 800ce98:	b110      	cbz	r0, 800cea0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ce9a:	6803      	ldr	r3, [r0, #0]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	4718      	bx	r3
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2400ae48 	.word	0x2400ae48

0800cea8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	4d32      	ldr	r5, [pc, #200]	; (800cf74 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 800ceac:	4604      	mov	r4, r0
 800ceae:	6828      	ldr	r0, [r5, #0]
 800ceb0:	b140      	cbz	r0, 800cec4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ceb2:	7a03      	ldrb	r3, [r0, #8]
 800ceb4:	b933      	cbnz	r3, 800cec4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ceb6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800ceba:	6803      	ldr	r3, [r0, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cec2:	4718      	bx	r3
 800cec4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800cec8:	b97b      	cbnz	r3, 800ceea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ceca:	b170      	cbz	r0, 800ceea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cecc:	7a03      	ldrb	r3, [r0, #8]
 800cece:	b163      	cbz	r3, 800ceea <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ced0:	4b29      	ldr	r3, [pc, #164]	; (800cf78 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	b110      	cbz	r0, 800cedc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800ced6:	6803      	ldr	r3, [r0, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	4798      	blx	r3
 800cedc:	6828      	ldr	r0, [r5, #0]
 800cede:	6803      	ldr	r3, [r0, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	4798      	blx	r3
 800cee4:	2301      	movs	r3, #1
 800cee6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800ceea:	2500      	movs	r5, #0
 800ceec:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800cef0:	42a8      	cmp	r0, r5
 800cef2:	dd0c      	ble.n	800cf0e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800cef4:	1963      	adds	r3, r4, r5
 800cef6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800cefa:	b132      	cbz	r2, 800cf0a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800cefc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800cf00:	4413      	add	r3, r2
 800cf02:	6858      	ldr	r0, [r3, #4]
 800cf04:	6803      	ldr	r3, [r0, #0]
 800cf06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf08:	4798      	blx	r3
 800cf0a:	3501      	adds	r5, #1
 800cf0c:	e7ee      	b.n	800ceec <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	461a      	mov	r2, r3
 800cf12:	4298      	cmp	r0, r3
 800cf14:	d015      	beq.n	800cf42 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800cf16:	18e1      	adds	r1, r4, r3
 800cf18:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800cf1c:	b16d      	cbz	r5, 800cf3a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d00a      	beq.n	800cf38 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 800cf22:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800cf26:	4431      	add	r1, r6
 800cf28:	684e      	ldr	r6, [r1, #4]
 800cf2a:	b291      	uxth	r1, r2
 800cf2c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800cf30:	604e      	str	r6, [r1, #4]
 800cf32:	18a1      	adds	r1, r4, r2
 800cf34:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800cf38:	3201      	adds	r2, #1
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	e7e9      	b.n	800cf12 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800cf3e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800cf42:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 800cf46:	4295      	cmp	r5, r2
 800cf48:	dd0d      	ble.n	800cf66 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 800cf4a:	1e6b      	subs	r3, r5, #1
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800cf52:	4618      	mov	r0, r3
 800cf54:	3104      	adds	r1, #4
 800cf56:	4285      	cmp	r5, r0
 800cf58:	ddf1      	ble.n	800cf3e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 800cf5a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f841 6c04 	str.w	r6, [r1, #-4]
 800cf64:	e7f7      	b.n	800cf56 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 800cf66:	4b04      	ldr	r3, [pc, #16]	; (800cf78 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	b110      	cbz	r0, 800cf72 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800cf6c:	6803      	ldr	r3, [r0, #0]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf70:	e7a5      	b.n	800cebe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cf72:	bd70      	pop	{r4, r5, r6, pc}
 800cf74:	2400ae4c 	.word	0x2400ae4c
 800cf78:	2400ae48 	.word	0x2400ae48

0800cf7c <_ZN8touchgfx11ApplicationD1Ev>:
 800cf7c:	4770      	bx	lr

0800cf7e <_ZN8touchgfx11ApplicationD0Ev>:
 800cf7e:	b510      	push	{r4, lr}
 800cf80:	4604      	mov	r4, r0
 800cf82:	f44f 719c 	mov.w	r1, #312	; 0x138
 800cf86:	f00a fe06 	bl	8017b96 <_ZdlPvj>
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	bd10      	pop	{r4, pc}

0800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cf94:	888a      	ldrh	r2, [r1, #4]
 800cf96:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cf9a:	4422      	add	r2, r4
 800cf9c:	b212      	sxth	r2, r2
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	da15      	bge.n	800cfce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfa2:	8882      	ldrh	r2, [r0, #4]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	b21b      	sxth	r3, r3
 800cfa8:	429c      	cmp	r4, r3
 800cfaa:	da10      	bge.n	800cfce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfac:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cfb0:	88c9      	ldrh	r1, [r1, #6]
 800cfb2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cfb6:	4419      	add	r1, r3
 800cfb8:	b209      	sxth	r1, r1
 800cfba:	428a      	cmp	r2, r1
 800cfbc:	da07      	bge.n	800cfce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfbe:	88c0      	ldrh	r0, [r0, #6]
 800cfc0:	4410      	add	r0, r2
 800cfc2:	b200      	sxth	r0, r0
 800cfc4:	4283      	cmp	r3, r0
 800cfc6:	bfac      	ite	ge
 800cfc8:	2000      	movge	r0, #0
 800cfca:	2001      	movlt	r0, #1
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e7fc      	b.n	800cfcc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cfd2 <_ZN8touchgfx4Rect10restrictToEss>:
 800cfd2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	da04      	bge.n	800cfe6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cfdc:	8884      	ldrh	r4, [r0, #4]
 800cfde:	4423      	add	r3, r4
 800cfe0:	8083      	strh	r3, [r0, #4]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	8003      	strh	r3, [r0, #0]
 800cfe6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cfea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cfee:	1b09      	subs	r1, r1, r4
 800cff0:	428b      	cmp	r3, r1
 800cff2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cff6:	bfc8      	it	gt
 800cff8:	8081      	strhgt	r1, [r0, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da04      	bge.n	800d008 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800cffe:	88c1      	ldrh	r1, [r0, #6]
 800d000:	440b      	add	r3, r1
 800d002:	80c3      	strh	r3, [r0, #6]
 800d004:	2300      	movs	r3, #0
 800d006:	8043      	strh	r3, [r0, #2]
 800d008:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800d00c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d010:	1a52      	subs	r2, r2, r1
 800d012:	4293      	cmp	r3, r2
 800d014:	bfc8      	it	gt
 800d016:	80c2      	strhgt	r2, [r0, #6]
 800d018:	bd10      	pop	{r4, pc}
	...

0800d01c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800d01c:	4b10      	ldr	r3, [pc, #64]	; (800d060 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800d01e:	b510      	push	{r4, lr}
 800d020:	460c      	mov	r4, r1
 800d022:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800d028:	4620      	mov	r0, r4
 800d02a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d02e:	f7ff ffd0 	bl	800cfd2 <_ZN8touchgfx4Rect10restrictToEss>
 800d032:	4b0d      	ldr	r3, [pc, #52]	; (800d068 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	b190      	cbz	r0, 800d05e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800d038:	6803      	ldr	r3, [r0, #0]
 800d03a:	4621      	mov	r1, r4
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	4798      	blx	r3
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800d042:	6818      	ldr	r0, [r3, #0]
 800d044:	b118      	cbz	r0, 800d04e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800d046:	6803      	ldr	r3, [r0, #0]
 800d048:	4621      	mov	r1, r4
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	4798      	blx	r3
 800d04e:	4b08      	ldr	r3, [pc, #32]	; (800d070 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800d050:	4621      	mov	r1, r4
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	6803      	ldr	r3, [r0, #0]
 800d056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d05a:	69db      	ldr	r3, [r3, #28]
 800d05c:	4718      	bx	r3
 800d05e:	bd10      	pop	{r4, pc}
 800d060:	2400ae02 	.word	0x2400ae02
 800d064:	2400ae00 	.word	0x2400ae00
 800d068:	2400ae48 	.word	0x2400ae48
 800d06c:	2400ae44 	.word	0x2400ae44
 800d070:	2400ae0c 	.word	0x2400ae0c

0800d074 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	4606      	mov	r6, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	460f      	mov	r7, r1
 800d07c:	f7fd ff35 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d080:	b9e8      	cbnz	r0, 800d0be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d082:	f9b7 5000 	ldrsh.w	r5, [r7]
 800d086:	f9b6 4000 	ldrsh.w	r4, [r6]
 800d08a:	42a5      	cmp	r5, r4
 800d08c:	db17      	blt.n	800d0be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d08e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d092:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d096:	429a      	cmp	r2, r3
 800d098:	db11      	blt.n	800d0be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d09a:	88b9      	ldrh	r1, [r7, #4]
 800d09c:	440d      	add	r5, r1
 800d09e:	88b1      	ldrh	r1, [r6, #4]
 800d0a0:	440c      	add	r4, r1
 800d0a2:	b22d      	sxth	r5, r5
 800d0a4:	b224      	sxth	r4, r4
 800d0a6:	42a5      	cmp	r5, r4
 800d0a8:	dc09      	bgt.n	800d0be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d0aa:	88f8      	ldrh	r0, [r7, #6]
 800d0ac:	4410      	add	r0, r2
 800d0ae:	88f2      	ldrh	r2, [r6, #6]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	b200      	sxth	r0, r0
 800d0b4:	b21b      	sxth	r3, r3
 800d0b6:	4298      	cmp	r0, r3
 800d0b8:	bfcc      	ite	gt
 800d0ba:	2000      	movgt	r0, #0
 800d0bc:	2001      	movle	r0, #1
 800d0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	f7fd ff0f 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0cc:	b978      	cbnz	r0, 800d0ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7fd ff0b 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0d4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800d0d8:	b150      	cbz	r0, 800d0f0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800d0da:	8026      	strh	r6, [r4, #0]
 800d0dc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d0e0:	8063      	strh	r3, [r4, #2]
 800d0e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800d0e6:	80a3      	strh	r3, [r4, #4]
 800d0e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d0ec:	80e3      	strh	r3, [r4, #6]
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d0f4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800d0f8:	42b1      	cmp	r1, r6
 800d0fa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d0fe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800d102:	460f      	mov	r7, r1
 800d104:	88ed      	ldrh	r5, [r5, #6]
 800d106:	bfa8      	it	ge
 800d108:	4637      	movge	r7, r6
 800d10a:	4293      	cmp	r3, r2
 800d10c:	4618      	mov	r0, r3
 800d10e:	4466      	add	r6, ip
 800d110:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d114:	bfa8      	it	ge
 800d116:	4610      	movge	r0, r2
 800d118:	442a      	add	r2, r5
 800d11a:	88e5      	ldrh	r5, [r4, #6]
 800d11c:	4461      	add	r1, ip
 800d11e:	b236      	sxth	r6, r6
 800d120:	8027      	strh	r7, [r4, #0]
 800d122:	442b      	add	r3, r5
 800d124:	b209      	sxth	r1, r1
 800d126:	b212      	sxth	r2, r2
 800d128:	8060      	strh	r0, [r4, #2]
 800d12a:	b21b      	sxth	r3, r3
 800d12c:	428e      	cmp	r6, r1
 800d12e:	bfac      	ite	ge
 800d130:	ebc7 0106 	rsbge	r1, r7, r6
 800d134:	ebc7 0101 	rsblt	r1, r7, r1
 800d138:	429a      	cmp	r2, r3
 800d13a:	bfac      	ite	ge
 800d13c:	ebc0 0202 	rsbge	r2, r0, r2
 800d140:	ebc0 0203 	rsblt	r2, r0, r3
 800d144:	80a1      	strh	r1, [r4, #4]
 800d146:	80e2      	strh	r2, [r4, #6]
 800d148:	e7d1      	b.n	800d0ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800d14c <_ZN8touchgfx11Application11getInstanceEv>:
 800d14c:	4b01      	ldr	r3, [pc, #4]	; (800d154 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800d14e:	6818      	ldr	r0, [r3, #0]
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	2400ae58 	.word	0x2400ae58

0800d158 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800d158:	2300      	movs	r3, #0
 800d15a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800d15e:	30a8      	adds	r0, #168	; 0xa8
 800d160:	f820 3c24 	strh.w	r3, [r0, #-36]
 800d164:	f802 3b01 	strb.w	r3, [r2], #1
 800d168:	4282      	cmp	r2, r0
 800d16a:	d1fb      	bne.n	800d164 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800d16c:	4770      	bx	lr

0800d16e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d16e:	4603      	mov	r3, r0
 800d170:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800d174:	2200      	movs	r2, #0
 800d176:	801a      	strh	r2, [r3, #0]
 800d178:	3308      	adds	r3, #8
 800d17a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800d17e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800d182:	f823 2c02 	strh.w	r2, [r3, #-2]
 800d186:	428b      	cmp	r3, r1
 800d188:	d1f5      	bne.n	800d176 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d18a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800d18e:	4770      	bx	lr

0800d190 <_ZN8touchgfx11ApplicationC1Ev>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4b19      	ldr	r3, [pc, #100]	; (800d1f8 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800d194:	2500      	movs	r5, #0
 800d196:	4604      	mov	r4, r0
 800d198:	30a8      	adds	r0, #168	; 0xa8
 800d19a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800d19e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800d1a2:	f7ff ffe4 	bl	800d16e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d1a6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800d1aa:	f7ff ffe0 	bl	800d16e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d1ae:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800d1b2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800d1b6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800d1ba:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800d1be:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800d1c2:	490e      	ldr	r1, [pc, #56]	; (800d1fc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800d1c4:	480e      	ldr	r0, [pc, #56]	; (800d200 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800d1c6:	f00a fbdd 	bl	8017984 <CRC_Lock>
 800d1ca:	4e0e      	ldr	r6, [pc, #56]	; (800d204 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d1ce:	b158      	cbz	r0, 800d1e8 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800d1d0:	801d      	strh	r5, [r3, #0]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4a0d      	ldr	r2, [pc, #52]	; (800d20c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	4a0d      	ldr	r2, [pc, #52]	; (800d210 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d1dc:	6033      	str	r3, [r6, #0]
 800d1de:	6013      	str	r3, [r2, #0]
 800d1e0:	f7ff ffba 	bl	800d158 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1ec:	2002      	movs	r0, #2
 800d1ee:	801a      	strh	r2, [r3, #0]
 800d1f0:	6030      	str	r0, [r6, #0]
 800d1f2:	f001 fa1d 	bl	800e630 <_ZN8touchgfx6Screen4drawEv>
 800d1f6:	e7ec      	b.n	800d1d2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800d1f8:	0801a32c 	.word	0x0801a32c
 800d1fc:	b5e8b5cd 	.word	0xb5e8b5cd
 800d200:	f407a5c2 	.word	0xf407a5c2
 800d204:	2400ae48 	.word	0x2400ae48
 800d208:	24000050 	.word	0x24000050
 800d20c:	2400ae58 	.word	0x2400ae58
 800d210:	2400ae4c 	.word	0x2400ae4c

0800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d214:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800d218:	3b01      	subs	r3, #1
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	428b      	cmp	r3, r1
 800d21e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800d222:	b510      	push	{r4, lr}
 800d224:	d908      	bls.n	800d238 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d226:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d22a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	6062      	str	r2, [r4, #4]
 800d238:	bd10      	pop	{r4, pc}
	...

0800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	b08f      	sub	sp, #60	; 0x3c
 800d242:	4b94      	ldr	r3, [pc, #592]	; (800d494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800d244:	4683      	mov	fp, r0
 800d246:	ac0a      	add	r4, sp, #40	; 0x28
 800d248:	e884 0006 	stmia.w	r4, {r1, r2}
 800d24c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d250:	4620      	mov	r0, r4
 800d252:	4b91      	ldr	r3, [pc, #580]	; (800d498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800d254:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d258:	f7ff febb 	bl	800cfd2 <_ZN8touchgfx4Rect10restrictToEss>
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7fd fe44 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d262:	2800      	cmp	r0, #0
 800d264:	d16a      	bne.n	800d33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d266:	9403      	str	r4, [sp, #12]
 800d268:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800d26c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d270:	2400      	movs	r4, #0
 800d272:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	36a0      	adds	r6, #160	; 0xa0
 800d27a:	42a5      	cmp	r5, r4
 800d27c:	d00d      	beq.n	800d29a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800d27e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800d282:	9803      	ldr	r0, [sp, #12]
 800d284:	f7ff fef6 	bl	800d074 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d288:	b128      	cbz	r0, 800d296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800d28a:	1e69      	subs	r1, r5, #1
 800d28c:	9801      	ldr	r0, [sp, #4]
 800d28e:	1b09      	subs	r1, r1, r4
 800d290:	b289      	uxth	r1, r1
 800d292:	f7ff ffbf 	bl	800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d296:	3401      	adds	r4, #1
 800d298:	e7ef      	b.n	800d27a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800d29a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800d29e:	1e7b      	subs	r3, r7, #1
 800d2a0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800d2a4:	9704      	str	r7, [sp, #16]
 800d2a6:	9302      	str	r3, [sp, #8]
 800d2a8:	2400      	movs	r4, #0
 800d2aa:	4655      	mov	r5, sl
 800d2ac:	9705      	str	r7, [sp, #20]
 800d2ae:	4626      	mov	r6, r4
 800d2b0:	9b05      	ldr	r3, [sp, #20]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d078      	beq.n	800d3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800d2b6:	9903      	ldr	r1, [sp, #12]
 800d2b8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d2bc:	f7ff fe67 	bl	800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d2c0:	b360      	cbz	r0, 800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d2c2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800d2c6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800d2ca:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 800d2ce:	45e6      	cmp	lr, ip
 800d2d0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800d2d4:	db35      	blt.n	800d342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d2da:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d2de:	4472      	add	r2, lr
 800d2e0:	4463      	add	r3, ip
 800d2e2:	b212      	sxth	r2, r2
 800d2e4:	b21b      	sxth	r3, r3
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	dc2b      	bgt.n	800d342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2ea:	fa1f f288 	uxth.w	r2, r8
 800d2ee:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d2f2:	45c1      	cmp	r9, r8
 800d2f4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d2f8:	4413      	add	r3, r2
 800d2fa:	fa1f fc89 	uxth.w	ip, r9
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	fa0f fe83 	sxth.w	lr, r3
 800d304:	db0f      	blt.n	800d326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d306:	eba3 030c 	sub.w	r3, r3, ip
 800d30a:	1ac9      	subs	r1, r1, r3
 800d30c:	b209      	sxth	r1, r1
 800d30e:	2900      	cmp	r1, #0
 800d310:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d314:	dd12      	ble.n	800d33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d316:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800d31a:	4604      	mov	r4, r0
 800d31c:	9b05      	ldr	r3, [sp, #20]
 800d31e:	3d08      	subs	r5, #8
 800d320:	3b01      	subs	r3, #1
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	e7c4      	b.n	800d2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800d326:	4461      	add	r1, ip
 800d328:	b209      	sxth	r1, r1
 800d32a:	4571      	cmp	r1, lr
 800d32c:	dc3a      	bgt.n	800d3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d32e:	eba2 020c 	sub.w	r2, r2, ip
 800d332:	b212      	sxth	r2, r2
 800d334:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d338:	2a00      	cmp	r2, #0
 800d33a:	dcee      	bgt.n	800d31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d33c:	b00f      	add	sp, #60	; 0x3c
 800d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d342:	45c1      	cmp	r9, r8
 800d344:	db2e      	blt.n	800d3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d346:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d34a:	4499      	add	r9, r3
 800d34c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d350:	4498      	add	r8, r3
 800d352:	fa0f f989 	sxth.w	r9, r9
 800d356:	fa0f f888 	sxth.w	r8, r8
 800d35a:	45c1      	cmp	r9, r8
 800d35c:	dc22      	bgt.n	800d3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d35e:	fa1f f28c 	uxth.w	r2, ip
 800d362:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d366:	45e6      	cmp	lr, ip
 800d368:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800d36c:	4413      	add	r3, r2
 800d36e:	fa1f f88e 	uxth.w	r8, lr
 800d372:	b29b      	uxth	r3, r3
 800d374:	fa0f f983 	sxth.w	r9, r3
 800d378:	db0a      	blt.n	800d390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800d37a:	eba3 0308 	sub.w	r3, r3, r8
 800d37e:	1ac9      	subs	r1, r1, r3
 800d380:	b209      	sxth	r1, r1
 800d382:	2900      	cmp	r1, #0
 800d384:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800d388:	ddd8      	ble.n	800d33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d38a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800d38e:	e7c4      	b.n	800d31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d390:	4441      	add	r1, r8
 800d392:	b209      	sxth	r1, r1
 800d394:	4549      	cmp	r1, r9
 800d396:	dc05      	bgt.n	800d3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d398:	eba2 0208 	sub.w	r2, r2, r8
 800d39c:	b212      	sxth	r2, r2
 800d39e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d3a2:	e7c9      	b.n	800d338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	e7b9      	b.n	800d31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d3a8:	2c00      	cmp	r4, #0
 800d3aa:	f47f af7d 	bne.w	800d2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	f000 81e1 	beq.w	800d776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d3b4:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800d3b8:	4655      	mov	r5, sl
 800d3ba:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800d3be:	b2b9      	uxth	r1, r7
 800d3c0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d3c4:	b2b3      	uxth	r3, r6
 800d3c6:	9105      	str	r1, [sp, #20]
 800d3c8:	9805      	ldr	r0, [sp, #20]
 800d3ca:	441a      	add	r2, r3
 800d3cc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d3d0:	b292      	uxth	r2, r2
 800d3d2:	4401      	add	r1, r0
 800d3d4:	fa0f f882 	sxth.w	r8, r2
 800d3d8:	b289      	uxth	r1, r1
 800d3da:	9106      	str	r1, [sp, #24]
 800d3dc:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 800d3e0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d3e4:	9b04      	ldr	r3, [sp, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d058      	beq.n	800d49c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800d3ea:	9903      	ldr	r1, [sp, #12]
 800d3ec:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d3f0:	f7ff fdcd 	bl	800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d3f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d3f8:	b1d8      	cbz	r0, 800d432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d3fa:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800d3fe:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800d402:	4576      	cmp	r6, lr
 800d404:	dc26      	bgt.n	800d454 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d406:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800d40a:	44f4      	add	ip, lr
 800d40c:	fa0f fc8c 	sxth.w	ip, ip
 800d410:	45e0      	cmp	r8, ip
 800d412:	db1f      	blt.n	800d454 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d414:	428f      	cmp	r7, r1
 800d416:	fa1f fc81 	uxth.w	ip, r1
 800d41a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800d41e:	dc0f      	bgt.n	800d440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800d420:	9806      	ldr	r0, [sp, #24]
 800d422:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800d426:	eba0 0c0c 	sub.w	ip, r0, ip
 800d42a:	eba1 010c 	sub.w	r1, r1, ip
 800d42e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800d432:	4620      	mov	r0, r4
 800d434:	9904      	ldr	r1, [sp, #16]
 800d436:	3d08      	subs	r5, #8
 800d438:	4604      	mov	r4, r0
 800d43a:	3901      	subs	r1, #1
 800d43c:	9104      	str	r1, [sp, #16]
 800d43e:	e7cf      	b.n	800d3e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800d440:	4461      	add	r1, ip
 800d442:	b209      	sxth	r1, r1
 800d444:	4549      	cmp	r1, r9
 800d446:	dcf5      	bgt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d448:	9905      	ldr	r1, [sp, #20]
 800d44a:	eba1 0c0c 	sub.w	ip, r1, ip
 800d44e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800d452:	e7ee      	b.n	800d432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d454:	428f      	cmp	r7, r1
 800d456:	dced      	bgt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d458:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800d45c:	4461      	add	r1, ip
 800d45e:	b209      	sxth	r1, r1
 800d460:	4589      	cmp	r9, r1
 800d462:	dbe7      	blt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d464:	4576      	cmp	r6, lr
 800d466:	fa1f fc8e 	uxth.w	ip, lr
 800d46a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800d46e:	dc08      	bgt.n	800d482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800d470:	eba2 0c0c 	sub.w	ip, r2, ip
 800d474:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800d478:	eba1 010c 	sub.w	r1, r1, ip
 800d47c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800d480:	e7d7      	b.n	800d432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d482:	4461      	add	r1, ip
 800d484:	b209      	sxth	r1, r1
 800d486:	4588      	cmp	r8, r1
 800d488:	dbd4      	blt.n	800d434 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d48a:	eba3 0c0c 	sub.w	ip, r3, ip
 800d48e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800d492:	e7ce      	b.n	800d432 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d494:	2400ae02 	.word	0x2400ae02
 800d498:	2400ae00 	.word	0x2400ae00
 800d49c:	2c00      	cmp	r4, #0
 800d49e:	f000 816a 	beq.w	800d776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d4a2:	9b02      	ldr	r3, [sp, #8]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	f000 8166 	beq.w	800d776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d4aa:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800d4ae:	9803      	ldr	r0, [sp, #12]
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	f7ff fddf 	bl	800d074 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d4b6:	b120      	cbz	r0, 800d4c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800d4b8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d4bc:	9801      	ldr	r0, [sp, #4]
 800d4be:	f7ff fea9 	bl	800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d4c2:	9903      	ldr	r1, [sp, #12]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7ff fd62 	bl	800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f000 809b 	beq.w	800d606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d4d0:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 800d4d4:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 800d4d8:	b281      	uxth	r1, r0
 800d4da:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 800d4de:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e0:	eb01 0c03 	add.w	ip, r1, r3
 800d4e4:	b2ab      	uxth	r3, r5
 800d4e6:	4285      	cmp	r5, r0
 800d4e8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800d4ec:	fa1f f98c 	uxth.w	r9, ip
 800d4f0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800d4f4:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 800d4f8:	eb03 040c 	add.w	r4, r3, ip
 800d4fc:	b2a4      	uxth	r4, r4
 800d4fe:	9405      	str	r4, [sp, #20]
 800d500:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800d504:	9404      	str	r4, [sp, #16]
 800d506:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 800d50a:	f340 809a 	ble.w	800d642 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 800d50e:	1a5b      	subs	r3, r3, r1
 800d510:	4596      	cmp	lr, r2
 800d512:	fa0f f589 	sxth.w	r5, r9
 800d516:	b29b      	uxth	r3, r3
 800d518:	b21e      	sxth	r6, r3
 800d51a:	dd2e      	ble.n	800d57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 800d51c:	9f02      	ldr	r7, [sp, #8]
 800d51e:	fa1f fe8e 	uxth.w	lr, lr
 800d522:	b292      	uxth	r2, r2
 800d524:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800d528:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d52c:	9f04      	ldr	r7, [sp, #16]
 800d52e:	ebae 0102 	sub.w	r1, lr, r2
 800d532:	4486      	add	lr, r0
 800d534:	1b7f      	subs	r7, r7, r5
 800d536:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 800d53a:	b289      	uxth	r1, r1
 800d53c:	442a      	add	r2, r5
 800d53e:	fa0f fe8e 	sxth.w	lr, lr
 800d542:	b20c      	sxth	r4, r1
 800d544:	b212      	sxth	r2, r2
 800d546:	4367      	muls	r7, r4
 800d548:	ebae 0202 	sub.w	r2, lr, r2
 800d54c:	4372      	muls	r2, r6
 800d54e:	4297      	cmp	r7, r2
 800d550:	db09      	blt.n	800d566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 800d552:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 800d556:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800d55a:	449c      	add	ip, r3
 800d55c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d560:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d564:	e680      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d566:	4401      	add	r1, r0
 800d568:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800d56c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 800d570:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d574:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d578:	e676      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d57a:	9f04      	ldr	r7, [sp, #16]
 800d57c:	42bd      	cmp	r5, r7
 800d57e:	da27      	bge.n	800d5d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800d580:	9902      	ldr	r1, [sp, #8]
 800d582:	1b7f      	subs	r7, r7, r5
 800d584:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800d588:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800d58c:	eb04 010e 	add.w	r1, r4, lr
 800d590:	fa1f f881 	uxth.w	r8, r1
 800d594:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 800d598:	4411      	add	r1, r2
 800d59a:	fa0f f988 	sxth.w	r9, r8
 800d59e:	eba2 020e 	sub.w	r2, r2, lr
 800d5a2:	eba1 0108 	sub.w	r1, r1, r8
 800d5a6:	4372      	muls	r2, r6
 800d5a8:	b289      	uxth	r1, r1
 800d5aa:	fa0f f881 	sxth.w	r8, r1
 800d5ae:	fb08 f707 	mul.w	r7, r8, r7
 800d5b2:	42ba      	cmp	r2, r7
 800d5b4:	dc06      	bgt.n	800d5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d5b6:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 800d5ba:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 800d5be:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 800d5c2:	e7ca      	b.n	800d55a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d5c4:	4421      	add	r1, r4
 800d5c6:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 800d5ca:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d5ce:	e64b      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5d0:	9d05      	ldr	r5, [sp, #20]
 800d5d2:	2c06      	cmp	r4, #6
 800d5d4:	eba9 0505 	sub.w	r5, r9, r5
 800d5d8:	b2ad      	uxth	r5, r5
 800d5da:	fa0f fe85 	sxth.w	lr, r5
 800d5de:	d818      	bhi.n	800d612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800d5e0:	9b04      	ldr	r3, [sp, #16]
 800d5e2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 800d5e6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800d5ea:	1c63      	adds	r3, r4, #1
 800d5ec:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 800d5f0:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d5f4:	9b01      	ldr	r3, [sp, #4]
 800d5f6:	9d01      	ldr	r5, [sp, #4]
 800d5f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5fc:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 800d600:	805a      	strh	r2, [r3, #2]
 800d602:	809e      	strh	r6, [r3, #4]
 800d604:	80d9      	strh	r1, [r3, #6]
 800d606:	9b02      	ldr	r3, [sp, #8]
 800d608:	f1aa 0a08 	sub.w	sl, sl, #8
 800d60c:	3b01      	subs	r3, #1
 800d60e:	9302      	str	r3, [sp, #8]
 800d610:	e747      	b.n	800d4a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800d612:	9a02      	ldr	r2, [sp, #8]
 800d614:	45b6      	cmp	lr, r6
 800d616:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d61a:	db0d      	blt.n	800d638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 800d61c:	449c      	add	ip, r3
 800d61e:	445a      	add	r2, fp
 800d620:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800d624:	fa1f fc8c 	uxth.w	ip, ip
 800d628:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 800d62c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d630:	448c      	add	ip, r1
 800d632:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 800d636:	e617      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d638:	445a      	add	r2, fp
 800d63a:	44ac      	add	ip, r5
 800d63c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 800d640:	e78e      	b.n	800d560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d642:	fa1f f18e 	uxth.w	r1, lr
 800d646:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800d64a:	b293      	uxth	r3, r2
 800d64c:	4596      	cmp	lr, r2
 800d64e:	eb01 0806 	add.w	r8, r1, r6
 800d652:	9306      	str	r3, [sp, #24]
 800d654:	fa1f f888 	uxth.w	r8, r8
 800d658:	9f06      	ldr	r7, [sp, #24]
 800d65a:	fa0f f388 	sxth.w	r3, r8
 800d65e:	9307      	str	r3, [sp, #28]
 800d660:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 800d664:	443b      	add	r3, r7
 800d666:	b29b      	uxth	r3, r3
 800d668:	9308      	str	r3, [sp, #32]
 800d66a:	da25      	bge.n	800d6b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800d66c:	9905      	ldr	r1, [sp, #20]
 800d66e:	eba3 0308 	sub.w	r3, r3, r8
 800d672:	eba2 020e 	sub.w	r2, r2, lr
 800d676:	1b40      	subs	r0, r0, r5
 800d678:	eba9 0401 	sub.w	r4, r9, r1
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	b2a4      	uxth	r4, r4
 800d680:	b219      	sxth	r1, r3
 800d682:	fa0f f984 	sxth.w	r9, r4
 800d686:	4348      	muls	r0, r1
 800d688:	fb09 f202 	mul.w	r2, r9, r2
 800d68c:	4282      	cmp	r2, r0
 800d68e:	9a02      	ldr	r2, [sp, #8]
 800d690:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d694:	445a      	add	r2, fp
 800d696:	dc06      	bgt.n	800d6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800d698:	9b07      	ldr	r3, [sp, #28]
 800d69a:	44a4      	add	ip, r4
 800d69c:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 800d6a0:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 800d6a4:	e75c      	b.n	800d560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d6a6:	9904      	ldr	r1, [sp, #16]
 800d6a8:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 800d6ac:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 800d6b0:	4433      	add	r3, r6
 800d6b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800d6b6:	e5d7      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d6b8:	9f06      	ldr	r7, [sp, #24]
 800d6ba:	9b04      	ldr	r3, [sp, #16]
 800d6bc:	1bc9      	subs	r1, r1, r7
 800d6be:	fa0f f789 	sxth.w	r7, r9
 800d6c2:	b289      	uxth	r1, r1
 800d6c4:	429f      	cmp	r7, r3
 800d6c6:	fa0f fe81 	sxth.w	lr, r1
 800d6ca:	dd22      	ble.n	800d712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 800d6cc:	9a05      	ldr	r2, [sp, #20]
 800d6ce:	1b40      	subs	r0, r0, r5
 800d6d0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d6d4:	eba9 0202 	sub.w	r2, r9, r2
 800d6d8:	9d07      	ldr	r5, [sp, #28]
 800d6da:	fb0e f000 	mul.w	r0, lr, r0
 800d6de:	b292      	uxth	r2, r2
 800d6e0:	eba5 0a03 	sub.w	sl, r5, r3
 800d6e4:	9b02      	ldr	r3, [sp, #8]
 800d6e6:	b214      	sxth	r4, r2
 800d6e8:	00db      	lsls	r3, r3, #3
 800d6ea:	fb04 fa0a 	mul.w	sl, r4, sl
 800d6ee:	445b      	add	r3, fp
 800d6f0:	4550      	cmp	r0, sl
 800d6f2:	db03      	blt.n	800d6fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800d6f4:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 800d6f8:	4494      	add	ip, r2
 800d6fa:	e731      	b.n	800d560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d6fc:	9a04      	ldr	r2, [sp, #16]
 800d6fe:	4431      	add	r1, r6
 800d700:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 800d704:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800d708:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800d70c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d710:	e75b      	b.n	800d5ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 800d712:	9b08      	ldr	r3, [sp, #32]
 800d714:	2c06      	cmp	r4, #6
 800d716:	eba3 0308 	sub.w	r3, r3, r8
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	b21d      	sxth	r5, r3
 800d71e:	d813      	bhi.n	800d748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 800d720:	9b07      	ldr	r3, [sp, #28]
 800d722:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 800d726:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800d72a:	1c63      	adds	r3, r4, #1
 800d72c:	9901      	ldr	r1, [sp, #4]
 800d72e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d732:	9b01      	ldr	r3, [sp, #4]
 800d734:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 800d738:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d73c:	805a      	strh	r2, [r3, #2]
 800d73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d740:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d744:	809a      	strh	r2, [r3, #4]
 800d746:	e75e      	b.n	800d606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d748:	9802      	ldr	r0, [sp, #8]
 800d74a:	4575      	cmp	r5, lr
 800d74c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800d750:	db0d      	blt.n	800d76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 800d752:	4431      	add	r1, r6
 800d754:	9b06      	ldr	r3, [sp, #24]
 800d756:	4458      	add	r0, fp
 800d758:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800d75c:	b289      	uxth	r1, r1
 800d75e:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 800d762:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d766:	4419      	add	r1, r3
 800d768:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800d76c:	e57c      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d76e:	4458      	add	r0, fp
 800d770:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 800d774:	e79c      	b.n	800d6b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800d776:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 800d77a:	2e07      	cmp	r6, #7
 800d77c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d780:	d812      	bhi.n	800d7a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 800d782:	1c75      	adds	r5, r6, #1
 800d784:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800d788:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800d78c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 800d790:	9d01      	ldr	r5, [sp, #4]
 800d792:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800d796:	442c      	add	r4, r5
 800d798:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800d79c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d7a0:	8061      	strh	r1, [r4, #2]
 800d7a2:	80a2      	strh	r2, [r4, #4]
 800d7a4:	80e3      	strh	r3, [r4, #6]
 800d7a6:	e5c9      	b.n	800d33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d7a8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d7ac:	3e01      	subs	r6, #1
 800d7ae:	445c      	add	r4, fp
 800d7b0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800d7b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d7b8:	2500      	movs	r5, #0
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800d7c0:	1e72      	subs	r2, r6, #1
 800d7c2:	9302      	str	r3, [sp, #8]
 800d7c4:	4691      	mov	r9, r2
 800d7c6:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800d7d0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d7da:	9207      	str	r2, [sp, #28]
 800d7dc:	bf16      	itet	ne
 800d7de:	9905      	ldrne	r1, [sp, #20]
 800d7e0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d7e4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d7e8:	9306      	str	r3, [sp, #24]
 800d7ea:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d7ee:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d7f2:	fb18 f801 	smulbb	r8, r8, r1
 800d7f6:	6859      	ldr	r1, [r3, #4]
 800d7f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d7fc:	4671      	mov	r1, lr
 800d7fe:	a80c      	add	r0, sp, #48	; 0x30
 800d800:	f7ff fc5e 	bl	800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d804:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800d808:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d80c:	f04f 0c08 	mov.w	ip, #8
 800d810:	9b04      	ldr	r3, [sp, #16]
 800d812:	9a02      	ldr	r2, [sp, #8]
 800d814:	fb10 f001 	smulbb	r0, r0, r1
 800d818:	fb02 8803 	mla	r8, r2, r3, r8
 800d81c:	eba0 0108 	sub.w	r1, r0, r8
 800d820:	fb90 f0fc 	sdiv	r0, r0, ip
 800d824:	4288      	cmp	r0, r1
 800d826:	dc20      	bgt.n	800d86a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d828:	4551      	cmp	r1, sl
 800d82a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d82e:	da03      	bge.n	800d838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d830:	b1d9      	cbz	r1, 800d86a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d832:	468a      	mov	sl, r1
 800d834:	464f      	mov	r7, r9
 800d836:	4635      	mov	r5, r6
 800d838:	f109 39ff 	add.w	r9, r9, #4294967295
 800d83c:	f119 0f02 	cmn.w	r9, #2
 800d840:	d1c6      	bne.n	800d7d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d842:	4616      	mov	r6, r2
 800d844:	3201      	adds	r2, #1
 800d846:	f1a4 0408 	sub.w	r4, r4, #8
 800d84a:	d1b7      	bne.n	800d7bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	b2ac      	uxth	r4, r5
 800d850:	00ed      	lsls	r5, r5, #3
 800d852:	1958      	adds	r0, r3, r5
 800d854:	1c7b      	adds	r3, r7, #1
 800d856:	d10b      	bne.n	800d870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800d858:	4601      	mov	r1, r0
 800d85a:	9803      	ldr	r0, [sp, #12]
 800d85c:	f7ff fc30 	bl	800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d860:	4621      	mov	r1, r4
 800d862:	9801      	ldr	r0, [sp, #4]
 800d864:	f7ff fcd6 	bl	800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d868:	e4fe      	b.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d86a:	464f      	mov	r7, r9
 800d86c:	4635      	mov	r5, r6
 800d86e:	e7ed      	b.n	800d84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d870:	9b01      	ldr	r3, [sp, #4]
 800d872:	00ff      	lsls	r7, r7, #3
 800d874:	445d      	add	r5, fp
 800d876:	19d9      	adds	r1, r3, r7
 800d878:	445f      	add	r7, fp
 800d87a:	f7ff fc21 	bl	800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	cb03      	ldmia	r3!, {r0, r1}
 800d882:	9b03      	ldr	r3, [sp, #12]
 800d884:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d888:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800d88c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 800d890:	6869      	ldr	r1, [r5, #4]
 800d892:	c303      	stmia	r3!, {r0, r1}
 800d894:	e7e4      	b.n	800d860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d896:	bf00      	nop

0800d898 <_ZN8touchgfx11Application10invalidateEv>:
 800d898:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800d89a:	b082      	sub	sp, #8
 800d89c:	2100      	movs	r1, #0
 800d89e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d8a2:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800d8a4:	9100      	str	r1, [sp, #0]
 800d8a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d8ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d8b2:	ab02      	add	r3, sp, #8
 800d8b4:	e913 0006 	ldmdb	r3, {r1, r2}
 800d8b8:	b002      	add	sp, #8
 800d8ba:	f7ff bcbf 	b.w	800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8be:	bf00      	nop
 800d8c0:	2400ae00 	.word	0x2400ae00
 800d8c4:	2400ae02 	.word	0x2400ae02

0800d8c8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800d8d0:	b09b      	sub	sp, #108	; 0x6c
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7fd fb08 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8da:	4605      	mov	r5, r0
 800d8dc:	b940      	cbnz	r0, 800d8f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800d8de:	4620      	mov	r0, r4
 800d8e0:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d8e4:	f7ff fcaa 	bl	800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8e8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800d8ec:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800d8f0:	4bc8      	ldr	r3, [pc, #800]	; (800dc14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d03e      	beq.n	800d976 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d8f8:	4dc7      	ldr	r5, [pc, #796]	; (800dc18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f7fd faf5 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800d900:	4606      	mov	r6, r0
 800d902:	2800      	cmp	r0, #0
 800d904:	d137      	bne.n	800d976 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d906:	4628      	mov	r0, r5
 800d908:	f7ff fa02 	bl	800cd10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d90c:	6829      	ldr	r1, [r5, #0]
 800d90e:	686a      	ldr	r2, [r5, #4]
 800d910:	4620      	mov	r0, r4
 800d912:	f7ff fc93 	bl	800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d916:	802e      	strh	r6, [r5, #0]
 800d918:	806e      	strh	r6, [r5, #2]
 800d91a:	80ae      	strh	r6, [r5, #4]
 800d91c:	80ee      	strh	r6, [r5, #6]
 800d91e:	ae09      	add	r6, sp, #36	; 0x24
 800d920:	4630      	mov	r0, r6
 800d922:	f7ff fc24 	bl	800d16e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d926:	4abd      	ldr	r2, [pc, #756]	; (800dc1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d928:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d92c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800d930:	8815      	ldrh	r5, [r2, #0]
 800d932:	9202      	str	r2, [sp, #8]
 800d934:	462b      	mov	r3, r5
 800d936:	429f      	cmp	r7, r3
 800d938:	d924      	bls.n	800d984 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800d93a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800d93e:	2907      	cmp	r1, #7
 800d940:	d816      	bhi.n	800d970 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800d942:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d946:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800d94a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800d94e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d952:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d956:	1c4a      	adds	r2, r1, #1
 800d958:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800d95c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800d960:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800d964:	f8a2 9002 	strh.w	r9, [r2, #2]
 800d968:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d96c:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d970:	3301      	adds	r3, #1
 800d972:	b29b      	uxth	r3, r3
 800d974:	e7df      	b.n	800d936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800d976:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1cf      	bne.n	800d91e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800d97e:	b01b      	add	sp, #108	; 0x6c
 800d980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	462f      	mov	r7, r5
 800d986:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800d98a:	42bb      	cmp	r3, r7
 800d98c:	d90b      	bls.n	800d9a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800d98e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800d992:	3701      	adds	r7, #1
 800d994:	4620      	mov	r0, r4
 800d996:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800d99a:	b2bf      	uxth	r7, r7
 800d99c:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800d9a0:	f7ff fc4c 	bl	800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d9a4:	e7ef      	b.n	800d986 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800d9a6:	4a9e      	ldr	r2, [pc, #632]	; (800dc20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d9a8:	6813      	ldr	r3, [r2, #0]
 800d9aa:	4690      	mov	r8, r2
 800d9ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	f040 80e4 	bne.w	800db7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d9b6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	33aa      	adds	r3, #170	; 0xaa
 800d9c4:	428f      	cmp	r7, r1
 800d9c6:	f103 0308 	add.w	r3, r3, #8
 800d9ca:	dd0a      	ble.n	800d9e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800d9cc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800d9d0:	3101      	adds	r1, #1
 800d9d2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800d9d6:	4402      	add	r2, r0
 800d9d8:	b212      	sxth	r2, r2
 800d9da:	4295      	cmp	r5, r2
 800d9dc:	bfb8      	it	lt
 800d9de:	4615      	movlt	r5, r2
 800d9e0:	e7f0      	b.n	800d9c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800d9e2:	4b90      	ldr	r3, [pc, #576]	; (800dc24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d9e4:	f8df b238 	ldr.w	fp, [pc, #568]	; 800dc20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	46d8      	mov	r8, fp
 800d9ec:	2b0f      	cmp	r3, #15
 800d9ee:	bf8c      	ite	hi
 800d9f0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800d9f4:	f04f 0a01 	movls.w	sl, #1
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d9fe:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800da02:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da06:	4438      	add	r0, r7
 800da08:	b207      	sxth	r7, r0
 800da0a:	f8db 0000 	ldr.w	r0, [fp]
 800da0e:	42bd      	cmp	r5, r7
 800da10:	6803      	ldr	r3, [r0, #0]
 800da12:	f340 8084 	ble.w	800db1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800da16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da1a:	4798      	blx	r3
 800da1c:	eb07 030a 	add.w	r3, r7, sl
 800da20:	4298      	cmp	r0, r3
 800da22:	da07      	bge.n	800da34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da24:	4285      	cmp	r5, r0
 800da26:	dd05      	ble.n	800da34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da28:	4287      	cmp	r7, r0
 800da2a:	dd6d      	ble.n	800db08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da2c:	2f00      	cmp	r7, #0
 800da2e:	dd6b      	ble.n	800db08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da30:	4628      	mov	r0, r5
 800da32:	e004      	b.n	800da3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800da34:	4287      	cmp	r7, r0
 800da36:	dcfb      	bgt.n	800da30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800da38:	42a8      	cmp	r0, r5
 800da3a:	bfa8      	it	ge
 800da3c:	4628      	movge	r0, r5
 800da3e:	4b7a      	ldr	r3, [pc, #488]	; (800dc28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800da40:	1bc0      	subs	r0, r0, r7
 800da42:	2200      	movs	r2, #0
 800da44:	f8ad 7016 	strh.w	r7, [sp, #22]
 800da48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800da50:	f8ad 3018 	strh.w	r3, [sp, #24]
 800da54:	9b02      	ldr	r3, [sp, #8]
 800da56:	f8ad 001a 	strh.w	r0, [sp, #26]
 800da5a:	881f      	ldrh	r7, [r3, #0]
 800da5c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800da60:	42bb      	cmp	r3, r7
 800da62:	d9cc      	bls.n	800d9fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800da64:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800da68:	ab07      	add	r3, sp, #28
 800da6a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800da6e:	6851      	ldr	r1, [r2, #4]
 800da70:	c303      	stmia	r3!, {r0, r1}
 800da72:	a905      	add	r1, sp, #20
 800da74:	a807      	add	r0, sp, #28
 800da76:	f7ff fa8a 	bl	800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d04c      	beq.n	800db18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800da7e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800da82:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800da86:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800da8a:	4686      	mov	lr, r0
 800da8c:	4290      	cmp	r0, r2
 800da8e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800da92:	4448      	add	r0, r9
 800da94:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800da98:	bfb8      	it	lt
 800da9a:	4696      	movlt	lr, r2
 800da9c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800daa0:	444a      	add	r2, r9
 800daa2:	b280      	uxth	r0, r0
 800daa4:	4299      	cmp	r1, r3
 800daa6:	468c      	mov	ip, r1
 800daa8:	b292      	uxth	r2, r2
 800daaa:	9303      	str	r3, [sp, #12]
 800daac:	bfb8      	it	lt
 800daae:	469c      	movlt	ip, r3
 800dab0:	b203      	sxth	r3, r0
 800dab2:	fa0f f982 	sxth.w	r9, r2
 800dab6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800daba:	f8ad c01e 	strh.w	ip, [sp, #30]
 800dabe:	454b      	cmp	r3, r9
 800dac0:	bfb8      	it	lt
 800dac2:	4602      	movlt	r2, r0
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	eba2 020e 	sub.w	r2, r2, lr
 800daca:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dace:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800dad2:	4411      	add	r1, r2
 800dad4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dad8:	4413      	add	r3, r2
 800dada:	b289      	uxth	r1, r1
 800dadc:	b29b      	uxth	r3, r3
 800dade:	b208      	sxth	r0, r1
 800dae0:	b21a      	sxth	r2, r3
 800dae2:	4290      	cmp	r0, r2
 800dae4:	bfb8      	it	lt
 800dae6:	460b      	movlt	r3, r1
 800dae8:	eba3 030c 	sub.w	r3, r3, ip
 800daec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800daf0:	a807      	add	r0, sp, #28
 800daf2:	f7fd f9fa 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800daf6:	b920      	cbnz	r0, 800db02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	a907      	add	r1, sp, #28
 800dafc:	4620      	mov	r0, r4
 800dafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db00:	4798      	blx	r3
 800db02:	3701      	adds	r7, #1
 800db04:	b2bf      	uxth	r7, r7
 800db06:	e7a9      	b.n	800da5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800db08:	f8d8 0000 	ldr.w	r0, [r8]
 800db0c:	2101      	movs	r1, #1
 800db0e:	6803      	ldr	r3, [r0, #0]
 800db10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800db14:	4798      	blx	r3
 800db16:	e772      	b.n	800d9fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800db18:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800db1c:	e7e8      	b.n	800daf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800db1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db20:	4798      	blx	r3
 800db22:	4b42      	ldr	r3, [pc, #264]	; (800dc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f43f af29 	beq.w	800d97e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db2c:	2300      	movs	r3, #0
 800db2e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800db32:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800db36:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 800db3a:	9b02      	ldr	r3, [sp, #8]
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	429d      	cmp	r5, r3
 800db40:	f67f af1d 	bls.w	800d97e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db44:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 800db48:	2907      	cmp	r1, #7
 800db4a:	d815      	bhi.n	800db78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800db4c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800db50:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800db54:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800db58:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800db5c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800db60:	1c4a      	adds	r2, r1, #1
 800db62:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 800db66:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800db6a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800db6e:	f8a2 e002 	strh.w	lr, [r2, #2]
 800db72:	f8a2 c004 	strh.w	ip, [r2, #4]
 800db76:	80d7      	strh	r7, [r2, #6]
 800db78:	3301      	adds	r3, #1
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	e7df      	b.n	800db3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800db7e:	2b02      	cmp	r3, #2
 800db80:	f040 8135 	bne.w	800ddee <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800db84:	4b2a      	ldr	r3, [pc, #168]	; (800dc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800db86:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	f000 809c 	beq.w	800dcca <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800db92:	9b02      	ldr	r3, [sp, #8]
 800db94:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 800db98:	f8b3 b000 	ldrh.w	fp, [r3]
 800db9c:	f10b 0b01 	add.w	fp, fp, #1
 800dba0:	fa1f fb8b 	uxth.w	fp, fp
 800dba4:	2a00      	cmp	r2, #0
 800dba6:	d0bc      	beq.n	800db22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800dba8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800dbac:	4659      	mov	r1, fp
 800dbae:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800dbb2:	f04f 0800 	mov.w	r8, #0
 800dbb6:	441d      	add	r5, r3
 800dbb8:	b22d      	sxth	r5, r5
 800dbba:	b28b      	uxth	r3, r1
 800dbbc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	f240 80c0 	bls.w	800dd46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800dbc6:	4427      	add	r7, r4
 800dbc8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800dbcc:	4608      	mov	r0, r1
 800dbce:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800dbd2:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 800dbd6:	4563      	cmp	r3, ip
 800dbd8:	f340 80a2 	ble.w	800dd20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800dbdc:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 800dbe0:	4465      	add	r5, ip
 800dbe2:	b22d      	sxth	r5, r5
 800dbe4:	429d      	cmp	r5, r3
 800dbe6:	bfa8      	it	ge
 800dbe8:	461d      	movge	r5, r3
 800dbea:	3101      	adds	r1, #1
 800dbec:	4680      	mov	r8, r0
 800dbee:	e7e4      	b.n	800dbba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800dbf0:	d10b      	bne.n	800dc0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800dbf2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800dbf6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800dbfa:	458c      	cmp	ip, r1
 800dbfc:	bfb4      	ite	lt
 800dbfe:	469c      	movlt	ip, r3
 800dc00:	46bc      	movge	ip, r7
 800dc02:	4572      	cmp	r2, lr
 800dc04:	bfb8      	it	lt
 800dc06:	4672      	movlt	r2, lr
 800dc08:	e087      	b.n	800dd1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dc0a:	428a      	cmp	r2, r1
 800dc0c:	46bc      	mov	ip, r7
 800dc0e:	bfb8      	it	lt
 800dc10:	460a      	movlt	r2, r1
 800dc12:	e082      	b.n	800dd1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dc14:	2400ae44 	.word	0x2400ae44
 800dc18:	2400ae50 	.word	0x2400ae50
 800dc1c:	24000050 	.word	0x24000050
 800dc20:	2400ae0c 	.word	0x2400ae0c
 800dc24:	2400ae02 	.word	0x2400ae02
 800dc28:	2400ae00 	.word	0x2400ae00
 800dc2c:	2400ae0a 	.word	0x2400ae0a
 800dc30:	2400ae04 	.word	0x2400ae04
 800dc34:	1961      	adds	r1, r4, r5
 800dc36:	ab07      	add	r3, sp, #28
 800dc38:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800dc3c:	6849      	ldr	r1, [r1, #4]
 800dc3e:	c303      	stmia	r3!, {r0, r1}
 800dc40:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800dc44:	a807      	add	r0, sp, #28
 800dc46:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc4a:	2b13      	cmp	r3, #19
 800dc4c:	440b      	add	r3, r1
 800dc4e:	bfd8      	it	le
 800dc50:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dc5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dc5e:	f7ff f871 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc62:	a807      	add	r0, sp, #28
 800dc64:	f7fd f941 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc68:	bb78      	cbnz	r0, 800dcca <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dc6a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800dc6e:	4425      	add	r5, r4
 800dc70:	f8d8 0000 	ldr.w	r0, [r8]
 800dc74:	f1bc 0f14 	cmp.w	ip, #20
 800dc78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dc7c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc80:	bfa8      	it	ge
 800dc82:	f04f 0c14 	movge.w	ip, #20
 800dc86:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dc8a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc8e:	fa1f fc8c 	uxth.w	ip, ip
 800dc92:	f8cd c000 	str.w	ip, [sp]
 800dc96:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800dc9a:	47d0      	blx	sl
 800dc9c:	4682      	mov	sl, r0
 800dc9e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dca2:	a807      	add	r0, sp, #28
 800dca4:	f7ff f834 	bl	800cd10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	4620      	mov	r0, r4
 800dcac:	a907      	add	r1, sp, #28
 800dcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb0:	4798      	blx	r3
 800dcb2:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800dcb6:	eba0 000a 	sub.w	r0, r0, sl
 800dcba:	b200      	sxth	r0, r0
 800dcbc:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800dcc0:	b918      	cbnz	r0, 800dcca <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dcc2:	b2b9      	uxth	r1, r7
 800dcc4:	4648      	mov	r0, r9
 800dcc6:	f7ff faa5 	bl	800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dcca:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800dcce:	f1bb 0f00 	cmp.w	fp, #0
 800dcd2:	f43f af26 	beq.w	800db22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800dcd6:	9b02      	ldr	r3, [sp, #8]
 800dcd8:	2700      	movs	r7, #0
 800dcda:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	b299      	uxth	r1, r3
 800dce6:	00fd      	lsls	r5, r7, #3
 800dce8:	458b      	cmp	fp, r1
 800dcea:	d9a3      	bls.n	800dc34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800dcec:	4425      	add	r5, r4
 800dcee:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800dcf2:	469c      	mov	ip, r3
 800dcf4:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800dcf8:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800dcfc:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800dd00:	4408      	add	r0, r1
 800dd02:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800dd06:	4471      	add	r1, lr
 800dd08:	b200      	sxth	r0, r0
 800dd0a:	b209      	sxth	r1, r1
 800dd0c:	4288      	cmp	r0, r1
 800dd0e:	f6bf af6f 	bge.w	800dbf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800dd12:	4586      	cmp	lr, r0
 800dd14:	4672      	mov	r2, lr
 800dd16:	bfb8      	it	lt
 800dd18:	4602      	movlt	r2, r0
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	4667      	mov	r7, ip
 800dd1e:	e7e1      	b.n	800dce4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800dd20:	d10c      	bne.n	800dd3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800dd22:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 800dd26:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 800dd2a:	4287      	cmp	r7, r0
 800dd2c:	bfb4      	ite	lt
 800dd2e:	4608      	movlt	r0, r1
 800dd30:	4640      	movge	r0, r8
 800dd32:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 800dd36:	443b      	add	r3, r7
 800dd38:	b21b      	sxth	r3, r3
 800dd3a:	e753      	b.n	800dbe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd3c:	4565      	cmp	r5, ip
 800dd3e:	4640      	mov	r0, r8
 800dd40:	bfa8      	it	ge
 800dd42:	4665      	movge	r5, ip
 800dd44:	e751      	b.n	800dbea <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800dd46:	eb09 0007 	add.w	r0, r9, r7
 800dd4a:	4427      	add	r7, r4
 800dd4c:	9203      	str	r2, [sp, #12]
 800dd4e:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 800dd52:	f1ba 0f13 	cmp.w	sl, #19
 800dd56:	bfde      	ittt	le
 800dd58:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 800dd5c:	4455      	addle	r5, sl
 800dd5e:	b22d      	sxthle	r5, r5
 800dd60:	f7fd f8c3 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd64:	9a03      	ldr	r2, [sp, #12]
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f47f af1c 	bne.w	800dba4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800dd6c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 800dd70:	fa1f fa8a 	uxth.w	sl, sl
 800dd74:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dd78:	1aad      	subs	r5, r5, r2
 800dd7a:	4829      	ldr	r0, [pc, #164]	; (800de20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800dd7c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 800dd80:	2d14      	cmp	r5, #20
 800dd82:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	bfa8      	it	ge
 800dd8a:	2514      	movge	r5, #20
 800dd8c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dd90:	f8ad 201e 	strh.w	r2, [sp, #30]
 800dd94:	b289      	uxth	r1, r1
 800dd96:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dd9a:	b2ad      	uxth	r5, r5
 800dd9c:	f8d0 c000 	ldr.w	ip, [r0]
 800dda0:	b292      	uxth	r2, r2
 800dda2:	4555      	cmp	r5, sl
 800dda4:	bf94      	ite	ls
 800dda6:	9500      	strls	r5, [sp, #0]
 800dda8:	f8cd a000 	strhi.w	sl, [sp]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800ddb2:	47a8      	blx	r5
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ddba:	a907      	add	r1, sp, #28
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4798      	blx	r3
 800ddc2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ddc6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ddca:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 800ddce:	1a5b      	subs	r3, r3, r1
 800ddd0:	440a      	add	r2, r1
 800ddd2:	b21b      	sxth	r3, r3
 800ddd4:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 800ddd8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f47f aed8 	bne.w	800db92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800dde2:	fa1f f188 	uxth.w	r1, r8
 800dde6:	4648      	mov	r0, r9
 800dde8:	f7ff fa14 	bl	800d214 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ddec:	e6d1      	b.n	800db92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddee:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ddf2:	42ab      	cmp	r3, r5
 800ddf4:	f67f ae95 	bls.w	800db22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800ddf8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800ddfc:	ab07      	add	r3, sp, #28
 800ddfe:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800de02:	6851      	ldr	r1, [r2, #4]
 800de04:	c303      	stmia	r3!, {r0, r1}
 800de06:	a807      	add	r0, sp, #28
 800de08:	f7fd f86f 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800de0c:	b920      	cbnz	r0, 800de18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	a907      	add	r1, sp, #28
 800de12:	4620      	mov	r0, r4
 800de14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de16:	4798      	blx	r3
 800de18:	3501      	adds	r5, #1
 800de1a:	b2ad      	uxth	r5, r5
 800de1c:	e7e7      	b.n	800ddee <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800de1e:	bf00      	nop
 800de20:	2400ae0c 	.word	0x2400ae0c

0800de24 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800de24:	4b03      	ldr	r3, [pc, #12]	; (800de34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800de26:	2200      	movs	r2, #0
 800de28:	801a      	strh	r2, [r3, #0]
 800de2a:	805a      	strh	r2, [r3, #2]
 800de2c:	809a      	strh	r2, [r3, #4]
 800de2e:	80da      	strh	r2, [r3, #6]
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	2400ae50 	.word	0x2400ae50

0800de38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	b09d      	sub	sp, #116	; 0x74
 800de3e:	4606      	mov	r6, r0
 800de40:	4614      	mov	r4, r2
 800de42:	468a      	mov	sl, r1
 800de44:	a803      	add	r0, sp, #12
 800de46:	461d      	mov	r5, r3
 800de48:	f000 fd6c 	bl	800e924 <_ZN8touchgfx12TextProviderC1Ev>
 800de4c:	6833      	ldr	r3, [r6, #0]
 800de4e:	4630      	mov	r0, r6
 800de50:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800de54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de56:	4798      	blx	r3
 800de58:	6833      	ldr	r3, [r6, #0]
 800de5a:	4607      	mov	r7, r0
 800de5c:	4630      	mov	r0, r6
 800de5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de60:	4798      	blx	r3
 800de62:	462a      	mov	r2, r5
 800de64:	2500      	movs	r5, #0
 800de66:	4621      	mov	r1, r4
 800de68:	9000      	str	r0, [sp, #0]
 800de6a:	463b      	mov	r3, r7
 800de6c:	462c      	mov	r4, r5
 800de6e:	46a9      	mov	r9, r5
 800de70:	46a8      	mov	r8, r5
 800de72:	a803      	add	r0, sp, #12
 800de74:	f000 fda9 	bl	800e9ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de78:	2300      	movs	r3, #0
 800de7a:	9302      	str	r3, [sp, #8]
 800de7c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800de80:	429c      	cmp	r4, r3
 800de82:	d002      	beq.n	800de8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800de84:	455c      	cmp	r4, fp
 800de86:	bf18      	it	ne
 800de88:	4625      	movne	r5, r4
 800de8a:	ab02      	add	r3, sp, #8
 800de8c:	4632      	mov	r2, r6
 800de8e:	4651      	mov	r1, sl
 800de90:	a803      	add	r0, sp, #12
 800de92:	f001 f88f 	bl	800efb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800de96:	4604      	mov	r4, r0
 800de98:	b108      	cbz	r0, 800de9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800de9a:	280a      	cmp	r0, #10
 800de9c:	d10a      	bne.n	800deb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800de9e:	45c1      	cmp	r9, r8
 800dea0:	bf38      	it	cc
 800dea2:	46c1      	movcc	r9, r8
 800dea4:	f04f 0800 	mov.w	r8, #0
 800dea8:	2c00      	cmp	r4, #0
 800deaa:	d1e5      	bne.n	800de78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800deac:	4648      	mov	r0, r9
 800deae:	b01d      	add	sp, #116	; 0x74
 800deb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb4:	9a02      	ldr	r2, [sp, #8]
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	d0de      	beq.n	800de78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800deba:	7b57      	ldrb	r7, [r2, #13]
 800debc:	4629      	mov	r1, r5
 800debe:	6833      	ldr	r3, [r6, #0]
 800dec0:	007f      	lsls	r7, r7, #1
 800dec2:	8894      	ldrh	r4, [r2, #4]
 800dec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800deca:	7a97      	ldrb	r7, [r2, #10]
 800decc:	4307      	orrs	r7, r0
 800dece:	4630      	mov	r0, r6
 800ded0:	4798      	blx	r3
 800ded2:	4438      	add	r0, r7
 800ded4:	4480      	add	r8, r0
 800ded6:	fa1f f888 	uxth.w	r8, r8
 800deda:	e7e5      	b.n	800dea8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800dedc <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dedc:	b508      	push	{r3, lr}
 800dede:	6803      	ldr	r3, [r0, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	4798      	blx	r3
 800dee4:	b128      	cbz	r0, 800def2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dee6:	7b43      	ldrb	r3, [r0, #13]
 800dee8:	7a80      	ldrb	r0, [r0, #10]
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def0:	4318      	orrs	r0, r3
 800def2:	bd08      	pop	{r3, pc}

0800def4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800def4:	b40e      	push	{r1, r2, r3}
 800def6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800def8:	b09e      	sub	sp, #120	; 0x78
 800defa:	4605      	mov	r5, r0
 800defc:	ab23      	add	r3, sp, #140	; 0x8c
 800defe:	a805      	add	r0, sp, #20
 800df00:	f853 4b04 	ldr.w	r4, [r3], #4
 800df04:	9303      	str	r3, [sp, #12]
 800df06:	f000 fd0d 	bl	800e924 <_ZN8touchgfx12TextProviderC1Ev>
 800df0a:	682b      	ldr	r3, [r5, #0]
 800df0c:	4628      	mov	r0, r5
 800df0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df10:	4798      	blx	r3
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	4606      	mov	r6, r0
 800df16:	4628      	mov	r0, r5
 800df18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df1a:	4798      	blx	r3
 800df1c:	4633      	mov	r3, r6
 800df1e:	4621      	mov	r1, r4
 800df20:	ae1e      	add	r6, sp, #120	; 0x78
 800df22:	2400      	movs	r4, #0
 800df24:	9000      	str	r0, [sp, #0]
 800df26:	9a03      	ldr	r2, [sp, #12]
 800df28:	a805      	add	r0, sp, #20
 800df2a:	f000 fd4e 	bl	800e9ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df2e:	f846 4d68 	str.w	r4, [r6, #-104]!
 800df32:	462a      	mov	r2, r5
 800df34:	4633      	mov	r3, r6
 800df36:	4621      	mov	r1, r4
 800df38:	a805      	add	r0, sp, #20
 800df3a:	f001 f83b 	bl	800efb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df3e:	b300      	cbz	r0, 800df82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800df40:	280a      	cmp	r0, #10
 800df42:	d01a      	beq.n	800df7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df44:	9f04      	ldr	r7, [sp, #16]
 800df46:	b1c7      	cbz	r7, 800df7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df48:	7b78      	ldrb	r0, [r7, #13]
 800df4a:	7a3b      	ldrb	r3, [r7, #8]
 800df4c:	00c1      	lsls	r1, r0, #3
 800df4e:	88aa      	ldrh	r2, [r5, #4]
 800df50:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800df54:	4319      	orrs	r1, r3
 800df56:	0643      	lsls	r3, r0, #25
 800df58:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800df5c:	bf48      	it	mi
 800df5e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800df62:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800df66:	bf48      	it	mi
 800df68:	b219      	sxthmi	r1, r3
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	4303      	orrs	r3, r0
 800df6e:	4413      	add	r3, r2
 800df70:	1a5b      	subs	r3, r3, r1
 800df72:	b29b      	uxth	r3, r3
 800df74:	42a3      	cmp	r3, r4
 800df76:	bfc8      	it	gt
 800df78:	b21c      	sxthgt	r4, r3
 800df7a:	4633      	mov	r3, r6
 800df7c:	462a      	mov	r2, r5
 800df7e:	2100      	movs	r1, #0
 800df80:	e7da      	b.n	800df38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800df82:	b2a0      	uxth	r0, r4
 800df84:	b01e      	add	sp, #120	; 0x78
 800df86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df8a:	b003      	add	sp, #12
 800df8c:	4770      	bx	lr

0800df8e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800df8e:	b40e      	push	{r1, r2, r3}
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	b09d      	sub	sp, #116	; 0x74
 800df94:	4604      	mov	r4, r0
 800df96:	ab21      	add	r3, sp, #132	; 0x84
 800df98:	a803      	add	r0, sp, #12
 800df9a:	f853 5b04 	ldr.w	r5, [r3], #4
 800df9e:	9302      	str	r3, [sp, #8]
 800dfa0:	f000 fcc0 	bl	800e924 <_ZN8touchgfx12TextProviderC1Ev>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfaa:	4798      	blx	r3
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	4606      	mov	r6, r0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfb4:	2401      	movs	r4, #1
 800dfb6:	4798      	blx	r3
 800dfb8:	4633      	mov	r3, r6
 800dfba:	9000      	str	r0, [sp, #0]
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	9a02      	ldr	r2, [sp, #8]
 800dfc0:	a803      	add	r0, sp, #12
 800dfc2:	f000 fd02 	bl	800e9ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dfc6:	a803      	add	r0, sp, #12
 800dfc8:	f001 f874 	bl	800f0b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfcc:	b2a3      	uxth	r3, r4
 800dfce:	b138      	cbz	r0, 800dfe0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800dfd0:	280a      	cmp	r0, #10
 800dfd2:	a803      	add	r0, sp, #12
 800dfd4:	bf04      	itt	eq
 800dfd6:	3301      	addeq	r3, #1
 800dfd8:	b21c      	sxtheq	r4, r3
 800dfda:	f001 f86b 	bl	800f0b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfde:	e7f5      	b.n	800dfcc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	b01d      	add	sp, #116	; 0x74
 800dfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe8:	b003      	add	sp, #12
 800dfea:	4770      	bx	lr

0800dfec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dfec:	b40e      	push	{r1, r2, r3}
 800dfee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dff0:	b09e      	sub	sp, #120	; 0x78
 800dff2:	4604      	mov	r4, r0
 800dff4:	ab23      	add	r3, sp, #140	; 0x8c
 800dff6:	a805      	add	r0, sp, #20
 800dff8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	f000 fc91 	bl	800e924 <_ZN8touchgfx12TextProviderC1Ev>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	4620      	mov	r0, r4
 800e006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e008:	4798      	blx	r3
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	4606      	mov	r6, r0
 800e00e:	4620      	mov	r0, r4
 800e010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e012:	4798      	blx	r3
 800e014:	4633      	mov	r3, r6
 800e016:	4629      	mov	r1, r5
 800e018:	9000      	str	r0, [sp, #0]
 800e01a:	9a03      	ldr	r2, [sp, #12]
 800e01c:	a805      	add	r0, sp, #20
 800e01e:	f000 fcd4 	bl	800e9ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e022:	ad1e      	add	r5, sp, #120	; 0x78
 800e024:	2100      	movs	r1, #0
 800e026:	26ff      	movs	r6, #255	; 0xff
 800e028:	4622      	mov	r2, r4
 800e02a:	a805      	add	r0, sp, #20
 800e02c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e030:	462b      	mov	r3, r5
 800e032:	f000 ffbf 	bl	800efb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e036:	b1d8      	cbz	r0, 800e070 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800e038:	280a      	cmp	r0, #10
 800e03a:	d012      	beq.n	800e062 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e03c:	9804      	ldr	r0, [sp, #16]
 800e03e:	b180      	cbz	r0, 800e062 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e040:	7b47      	ldrb	r7, [r0, #13]
 800e042:	7922      	ldrb	r2, [r4, #4]
 800e044:	00fb      	lsls	r3, r7, #3
 800e046:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800e04a:	7a03      	ldrb	r3, [r0, #8]
 800e04c:	430b      	orrs	r3, r1
 800e04e:	0679      	lsls	r1, r7, #25
 800e050:	bf44      	itt	mi
 800e052:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e056:	b21b      	sxthmi	r3, r3
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	429e      	cmp	r6, r3
 800e05e:	bf28      	it	cs
 800e060:	461e      	movcs	r6, r3
 800e062:	462b      	mov	r3, r5
 800e064:	4622      	mov	r2, r4
 800e066:	2100      	movs	r1, #0
 800e068:	a805      	add	r0, sp, #20
 800e06a:	f000 ffa3 	bl	800efb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e06e:	e7e2      	b.n	800e036 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800e070:	4630      	mov	r0, r6
 800e072:	b01e      	add	sp, #120	; 0x78
 800e074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e078:	b003      	add	sp, #12
 800e07a:	4770      	bx	lr

0800e07c <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e07c:	b513      	push	{r0, r1, r4, lr}
 800e07e:	6803      	ldr	r3, [r0, #0]
 800e080:	2400      	movs	r4, #0
 800e082:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e086:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e08a:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e08e:	4669      	mov	r1, sp
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	9400      	str	r4, [sp, #0]
 800e094:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e098:	4798      	blx	r3
 800e09a:	b002      	add	sp, #8
 800e09c:	bd10      	pop	{r4, pc}

0800e09e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e09e:	b538      	push	{r3, r4, r5, lr}
 800e0a0:	680b      	ldr	r3, [r1, #0]
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	4798      	blx	r3
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	4798      	blx	r3
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}

0800e0b8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e0b8:	b410      	push	{r4}
 800e0ba:	880a      	ldrh	r2, [r1, #0]
 800e0bc:	8884      	ldrh	r4, [r0, #4]
 800e0be:	4422      	add	r2, r4
 800e0c0:	800a      	strh	r2, [r1, #0]
 800e0c2:	884a      	ldrh	r2, [r1, #2]
 800e0c4:	88c4      	ldrh	r4, [r0, #6]
 800e0c6:	4422      	add	r2, r4
 800e0c8:	804a      	strh	r2, [r1, #2]
 800e0ca:	6940      	ldr	r0, [r0, #20]
 800e0cc:	b120      	cbz	r0, 800e0d8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e0ce:	6803      	ldr	r3, [r0, #0]
 800e0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d6:	4718      	bx	r3
 800e0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e0de:	b570      	push	{r4, r5, r6, lr}
 800e0e0:	8882      	ldrh	r2, [r0, #4]
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	880b      	ldrh	r3, [r1, #0]
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	4413      	add	r3, r2
 800e0ea:	800b      	strh	r3, [r1, #0]
 800e0ec:	884b      	ldrh	r3, [r1, #2]
 800e0ee:	88c2      	ldrh	r2, [r0, #6]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	804b      	strh	r3, [r1, #2]
 800e0f4:	1d01      	adds	r1, r0, #4
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f7fc feb4 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e0fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	dd0b      	ble.n	800e11c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e104:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	dd07      	ble.n	800e11c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e10c:	6968      	ldr	r0, [r5, #20]
 800e10e:	b128      	cbz	r0, 800e11c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e110:	6803      	ldr	r3, [r0, #0]
 800e112:	4621      	mov	r1, r4
 800e114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e11a:	4718      	bx	r3
 800e11c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e120 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	8882      	ldrh	r2, [r0, #4]
 800e124:	460c      	mov	r4, r1
 800e126:	880b      	ldrh	r3, [r1, #0]
 800e128:	4605      	mov	r5, r0
 800e12a:	4413      	add	r3, r2
 800e12c:	800b      	strh	r3, [r1, #0]
 800e12e:	884b      	ldrh	r3, [r1, #2]
 800e130:	88c2      	ldrh	r2, [r0, #6]
 800e132:	4413      	add	r3, r2
 800e134:	804b      	strh	r3, [r1, #2]
 800e136:	1d01      	adds	r1, r0, #4
 800e138:	4620      	mov	r0, r4
 800e13a:	f7fc fe93 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e13e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd18      	ble.n	800e178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e146:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	dd14      	ble.n	800e178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e14e:	6968      	ldr	r0, [r5, #20]
 800e150:	b128      	cbz	r0, 800e15e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e152:	6803      	ldr	r3, [r0, #0]
 800e154:	4621      	mov	r1, r4
 800e156:	691b      	ldr	r3, [r3, #16]
 800e158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e15c:	4718      	bx	r3
 800e15e:	4b07      	ldr	r3, [pc, #28]	; (800e17c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3304      	adds	r3, #4
 800e164:	429d      	cmp	r5, r3
 800e166:	d107      	bne.n	800e178 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e168:	f7fe fff0 	bl	800d14c <_ZN8touchgfx11Application11getInstanceEv>
 800e16c:	6821      	ldr	r1, [r4, #0]
 800e16e:	6862      	ldr	r2, [r4, #4]
 800e170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e174:	f7ff b862 	b.w	800d23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	bf00      	nop
 800e17c:	2400ae48 	.word	0x2400ae48

0800e180 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	4604      	mov	r4, r0
 800e184:	4616      	mov	r6, r2
 800e186:	460d      	mov	r5, r1
 800e188:	b901      	cbnz	r1, 800e18c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e18a:	b192      	cbz	r2, 800e1b2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	4620      	mov	r0, r4
 800e190:	699b      	ldr	r3, [r3, #24]
 800e192:	4798      	blx	r3
 800e194:	88e2      	ldrh	r2, [r4, #6]
 800e196:	88a1      	ldrh	r1, [r4, #4]
 800e198:	4620      	mov	r0, r4
 800e19a:	4432      	add	r2, r6
 800e19c:	4429      	add	r1, r5
 800e19e:	b212      	sxth	r2, r2
 800e1a0:	b209      	sxth	r1, r1
 800e1a2:	f7fd f93d 	bl	800b420 <_ZN8touchgfx8Drawable5setXYEss>
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1b0:	4718      	bx	r3
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}

0800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	4608      	mov	r0, r1
 800e1bc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e1c0:	8023      	strh	r3, [r4, #0]
 800e1c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e1c6:	8063      	strh	r3, [r4, #2]
 800e1c8:	6803      	ldr	r3, [r0, #0]
 800e1ca:	80a1      	strh	r1, [r4, #4]
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	80e2      	strh	r2, [r4, #6]
 800e1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d2:	4798      	blx	r3
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	bd10      	pop	{r4, pc}

0800e1d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800e1d8:	b530      	push	{r4, r5, lr}
 800e1da:	8083      	strh	r3, [r0, #4]
 800e1dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e1e0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800e1e4:	7183      	strb	r3, [r0, #6]
 800e1e6:	79c3      	ldrb	r3, [r0, #7]
 800e1e8:	6101      	str	r1, [r0, #16]
 800e1ea:	f365 0306 	bfi	r3, r5, #0, #7
 800e1ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e1f2:	8282      	strh	r2, [r0, #20]
 800e1f4:	f365 13c7 	bfi	r3, r5, #7, #1
 800e1f8:	71c3      	strb	r3, [r0, #7]
 800e1fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e1fe:	7203      	strb	r3, [r0, #8]
 800e200:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e204:	7243      	strb	r3, [r0, #9]
 800e206:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e20a:	8143      	strh	r3, [r0, #10]
 800e20c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e210:	8183      	strh	r3, [r0, #12]
 800e212:	4b01      	ldr	r3, [pc, #4]	; (800e218 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800e214:	6003      	str	r3, [r0, #0]
 800e216:	bd30      	pop	{r4, r5, pc}
 800e218:	0801a3e0 	.word	0x0801a3e0

0800e21c <_ZNK8touchgfx9ConstFont4findEt>:
 800e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21e:	6904      	ldr	r4, [r0, #16]
 800e220:	b3bc      	cbz	r4, 800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e222:	88a3      	ldrh	r3, [r4, #4]
 800e224:	8a82      	ldrh	r2, [r0, #20]
 800e226:	1acb      	subs	r3, r1, r3
 800e228:	f102 32ff 	add.w	r2, r2, #4294967295
 800e22c:	d431      	bmi.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e22e:	4293      	cmp	r3, r2
 800e230:	dd0c      	ble.n	800e24c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e232:	230e      	movs	r3, #14
 800e234:	fb03 4302 	mla	r3, r3, r2, r4
 800e238:	889b      	ldrh	r3, [r3, #4]
 800e23a:	1a5b      	subs	r3, r3, r1
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	429a      	cmp	r2, r3
 800e240:	db27      	blt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e242:	2b00      	cmp	r3, #0
 800e244:	bfbc      	itt	lt
 800e246:	2302      	movlt	r3, #2
 800e248:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e24c:	2500      	movs	r5, #0
 800e24e:	260e      	movs	r6, #14
 800e250:	4295      	cmp	r5, r2
 800e252:	dc1e      	bgt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e254:	fb06 4003 	mla	r0, r6, r3, r4
 800e258:	8887      	ldrh	r7, [r0, #4]
 800e25a:	42b9      	cmp	r1, r7
 800e25c:	d01a      	beq.n	800e294 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e25e:	d20d      	bcs.n	800e27c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e260:	1e5a      	subs	r2, r3, #1
 800e262:	4295      	cmp	r5, r2
 800e264:	dc15      	bgt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e266:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e26a:	1a5b      	subs	r3, r3, r1
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	429a      	cmp	r2, r3
 800e270:	db0f      	blt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e272:	429d      	cmp	r5, r3
 800e274:	ddec      	ble.n	800e250 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e276:	1953      	adds	r3, r2, r5
 800e278:	105b      	asrs	r3, r3, #1
 800e27a:	e7e9      	b.n	800e250 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e27c:	1c5d      	adds	r5, r3, #1
 800e27e:	42aa      	cmp	r2, r5
 800e280:	db07      	blt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e282:	8a43      	ldrh	r3, [r0, #18]
 800e284:	1acb      	subs	r3, r1, r3
 800e286:	442b      	add	r3, r5
 800e288:	429d      	cmp	r5, r3
 800e28a:	dc02      	bgt.n	800e292 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e28c:	429a      	cmp	r2, r3
 800e28e:	dadf      	bge.n	800e250 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e290:	e7f1      	b.n	800e276 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e292:	2000      	movs	r0, #0
 800e294:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e296 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e298:	4604      	mov	r4, r0
 800e29a:	4617      	mov	r7, r2
 800e29c:	461e      	mov	r6, r3
 800e29e:	b911      	cbnz	r1, 800e2a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a6:	290a      	cmp	r1, #10
 800e2a8:	d0fa      	beq.n	800e2a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2aa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800e2ae:	4291      	cmp	r1, r2
 800e2b0:	d0f6      	beq.n	800e2a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2b2:	f242 020b 	movw	r2, #8203	; 0x200b
 800e2b6:	4291      	cmp	r1, r2
 800e2b8:	d0f2      	beq.n	800e2a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2ba:	f7ff ffaf 	bl	800e21c <_ZNK8touchgfx9ConstFont4findEt>
 800e2be:	4605      	mov	r5, r0
 800e2c0:	b950      	cbnz	r0, 800e2d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	4798      	blx	r3
 800e2ca:	4601      	mov	r1, r0
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f7ff ffa5 	bl	800e21c <_ZNK8touchgfx9ConstFont4findEt>
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d0e3      	beq.n	800e2a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2d8:	6823      	ldr	r3, [r4, #0]
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4620      	mov	r0, r4
 800e2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2e0:	4798      	blx	r3
 800e2e2:	6038      	str	r0, [r7, #0]
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ea:	4798      	blx	r3
 800e2ec:	7030      	strb	r0, [r6, #0]
 800e2ee:	e7d8      	b.n	800e2a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e2f0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	4770      	bx	lr

0800e2f4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	4770      	bx	lr

0800e2f8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e2f8:	2002      	movs	r0, #2
 800e2fa:	4770      	bx	lr

0800e2fc <_ZN8touchgfx6ScreenD1Ev>:
 800e2fc:	4770      	bx	lr

0800e2fe <_ZN8touchgfx12GestureEventD1Ev>:
 800e2fe:	4770      	bx	lr

0800e300 <_ZN8touchgfx9DragEventD1Ev>:
 800e300:	4770      	bx	lr

0800e302 <_ZN8touchgfx10ClickEventD1Ev>:
 800e302:	4770      	bx	lr

0800e304 <_ZN8touchgfx10ClickEventD0Ev>:
 800e304:	b510      	push	{r4, lr}
 800e306:	4604      	mov	r4, r0
 800e308:	210c      	movs	r1, #12
 800e30a:	f009 fc44 	bl	8017b96 <_ZdlPvj>
 800e30e:	4620      	mov	r0, r4
 800e310:	bd10      	pop	{r4, pc}

0800e312 <_ZN8touchgfx9DragEventD0Ev>:
 800e312:	b510      	push	{r4, lr}
 800e314:	4604      	mov	r4, r0
 800e316:	2110      	movs	r1, #16
 800e318:	f009 fc3d 	bl	8017b96 <_ZdlPvj>
 800e31c:	4620      	mov	r0, r4
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <_ZN8touchgfx12GestureEventD0Ev>:
 800e320:	b510      	push	{r4, lr}
 800e322:	4604      	mov	r4, r0
 800e324:	210c      	movs	r1, #12
 800e326:	f009 fc36 	bl	8017b96 <_ZdlPvj>
 800e32a:	4620      	mov	r0, r4
 800e32c:	bd10      	pop	{r4, pc}

0800e32e <_ZN8touchgfx6ScreenD0Ev>:
 800e32e:	b510      	push	{r4, lr}
 800e330:	4604      	mov	r4, r0
 800e332:	213c      	movs	r1, #60	; 0x3c
 800e334:	f009 fc2f 	bl	8017b96 <_ZdlPvj>
 800e338:	4620      	mov	r0, r4
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e33c:	b530      	push	{r4, r5, lr}
 800e33e:	460d      	mov	r5, r1
 800e340:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e342:	b087      	sub	sp, #28
 800e344:	4604      	mov	r4, r0
 800e346:	b301      	cbz	r1, 800e38a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e348:	a801      	add	r0, sp, #4
 800e34a:	f7ff ff33 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e34e:	892a      	ldrh	r2, [r5, #8]
 800e350:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e354:	7928      	ldrb	r0, [r5, #4]
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e35a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e35e:	441a      	add	r2, r3
 800e360:	896b      	ldrh	r3, [r5, #10]
 800e362:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e366:	f88d 0010 	strb.w	r0, [sp, #16]
 800e36a:	1b5b      	subs	r3, r3, r5
 800e36c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800e36e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e370:	442b      	add	r3, r5
 800e372:	4d07      	ldr	r5, [pc, #28]	; (800e390 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e374:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e378:	a903      	add	r1, sp, #12
 800e37a:	9503      	str	r5, [sp, #12]
 800e37c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e380:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e384:	6803      	ldr	r3, [r0, #0]
 800e386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e388:	4798      	blx	r3
 800e38a:	b007      	add	sp, #28
 800e38c:	bd30      	pop	{r4, r5, pc}
 800e38e:	bf00      	nop
 800e390:	0801a460 	.word	0x0801a460

0800e394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e398:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e39a:	b08a      	sub	sp, #40	; 0x28
 800e39c:	4604      	mov	r4, r0
 800e39e:	460d      	mov	r5, r1
 800e3a0:	b113      	cbz	r3, 800e3a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e3a2:	790b      	ldrb	r3, [r1, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d044      	beq.n	800e432 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3a8:	f104 0804 	add.w	r8, r4, #4
 800e3ac:	a803      	add	r0, sp, #12
 800e3ae:	4641      	mov	r1, r8
 800e3b0:	f7ff ff00 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3b4:	792b      	ldrb	r3, [r5, #4]
 800e3b6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e3ba:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e3be:	b983      	cbnz	r3, 800e3e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e3c0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800e3c4:	892a      	ldrh	r2, [r5, #8]
 800e3c6:	88e9      	ldrh	r1, [r5, #6]
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	1b92      	subs	r2, r2, r6
 800e3cc:	9301      	str	r3, [sp, #4]
 800e3ce:	1bc9      	subs	r1, r1, r7
 800e3d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e3d4:	b212      	sxth	r2, r2
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	b209      	sxth	r1, r1
 800e3da:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800e3de:	f7fc fc5f 	bl	800aca0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e3e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3e4:	b329      	cbz	r1, 800e432 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3e6:	a805      	add	r0, sp, #20
 800e3e8:	f7ff fee4 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e3f0:	792b      	ldrb	r3, [r5, #4]
 800e3f2:	a907      	add	r1, sp, #28
 800e3f4:	1abf      	subs	r7, r7, r2
 800e3f6:	88ea      	ldrh	r2, [r5, #6]
 800e3f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e3fa:	4417      	add	r7, r2
 800e3fc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800e3fe:	f88d 3020 	strb.w	r3, [sp, #32]
 800e402:	4417      	add	r7, r2
 800e404:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e408:	1ab6      	subs	r6, r6, r2
 800e40a:	892a      	ldrh	r2, [r5, #8]
 800e40c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e410:	4416      	add	r6, r2
 800e412:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e414:	4416      	add	r6, r2
 800e416:	4a08      	ldr	r2, [pc, #32]	; (800e438 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e418:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800e41c:	2600      	movs	r6, #0
 800e41e:	9207      	str	r2, [sp, #28]
 800e420:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800e424:	6803      	ldr	r3, [r0, #0]
 800e426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e428:	4798      	blx	r3
 800e42a:	792b      	ldrb	r3, [r5, #4]
 800e42c:	b10b      	cbz	r3, 800e432 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e42e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800e432:	b00a      	add	sp, #40	; 0x28
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e438:	0801a438 	.word	0x0801a438

0800e43c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	460c      	mov	r4, r1
 800e442:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e444:	b088      	sub	sp, #32
 800e446:	4605      	mov	r5, r0
 800e448:	2900      	cmp	r1, #0
 800e44a:	d06d      	beq.n	800e528 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e44c:	4668      	mov	r0, sp
 800e44e:	f7ff feb1 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e452:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800e454:	88e3      	ldrh	r3, [r4, #6]
 800e456:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e45a:	440b      	add	r3, r1
 800e45c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e460:	b21b      	sxth	r3, r3
 800e462:	4543      	cmp	r3, r8
 800e464:	db31      	blt.n	800e4ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e466:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e46a:	44c4      	add	ip, r8
 800e46c:	fa0f fc8c 	sxth.w	ip, ip
 800e470:	4563      	cmp	r3, ip
 800e472:	da2a      	bge.n	800e4ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e474:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800e476:	8926      	ldrh	r6, [r4, #8]
 800e478:	4416      	add	r6, r2
 800e47a:	b236      	sxth	r6, r6
 800e47c:	42be      	cmp	r6, r7
 800e47e:	db24      	blt.n	800e4ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e480:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e484:	4438      	add	r0, r7
 800e486:	b200      	sxth	r0, r0
 800e488:	4286      	cmp	r6, r0
 800e48a:	da1e      	bge.n	800e4ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e48c:	8963      	ldrh	r3, [r4, #10]
 800e48e:	4419      	add	r1, r3
 800e490:	b209      	sxth	r1, r1
 800e492:	4541      	cmp	r1, r8
 800e494:	db08      	blt.n	800e4a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e496:	4561      	cmp	r1, ip
 800e498:	da06      	bge.n	800e4a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	441a      	add	r2, r3
 800e49e:	b212      	sxth	r2, r2
 800e4a0:	42ba      	cmp	r2, r7
 800e4a2:	db01      	blt.n	800e4a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4a4:	4282      	cmp	r2, r0
 800e4a6:	db10      	blt.n	800e4ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4a8:	4b21      	ldr	r3, [pc, #132]	; (800e530 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e4aa:	a904      	add	r1, sp, #16
 800e4ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4c4:	6803      	ldr	r3, [r0, #0]
 800e4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c8:	4798      	blx	r3
 800e4ca:	1d29      	adds	r1, r5, #4
 800e4cc:	a802      	add	r0, sp, #8
 800e4ce:	f7ff fe71 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e4d6:	88e0      	ldrh	r0, [r4, #6]
 800e4d8:	eba3 0808 	sub.w	r8, r3, r8
 800e4dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e4e0:	7921      	ldrb	r1, [r4, #4]
 800e4e2:	fa1f f888 	uxth.w	r8, r8
 800e4e6:	1bdf      	subs	r7, r3, r7
 800e4e8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800e4ec:	b2bb      	uxth	r3, r7
 800e4ee:	4440      	add	r0, r8
 800e4f0:	8922      	ldrh	r2, [r4, #8]
 800e4f2:	8967      	ldrh	r7, [r4, #10]
 800e4f4:	4460      	add	r0, ip
 800e4f6:	89a4      	ldrh	r4, [r4, #12]
 800e4f8:	441a      	add	r2, r3
 800e4fa:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800e4fc:	44b8      	add	r8, r7
 800e4fe:	4423      	add	r3, r4
 800e500:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e504:	4432      	add	r2, r6
 800e506:	44e0      	add	r8, ip
 800e508:	4433      	add	r3, r6
 800e50a:	4c0a      	ldr	r4, [pc, #40]	; (800e534 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e50c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e50e:	f88d 1014 	strb.w	r1, [sp, #20]
 800e512:	a904      	add	r1, sp, #16
 800e514:	9404      	str	r4, [sp, #16]
 800e516:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e51a:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e51e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e522:	6803      	ldr	r3, [r0, #0]
 800e524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e526:	4798      	blx	r3
 800e528:	b008      	add	sp, #32
 800e52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52e:	bf00      	nop
 800e530:	0801a438 	.word	0x0801a438
 800e534:	0801a44c 	.word	0x0801a44c

0800e538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e53a:	4604      	mov	r4, r0
 800e53c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e540:	3201      	adds	r2, #1
 800e542:	d112      	bne.n	800e56a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e544:	2500      	movs	r5, #0
 800e546:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e54a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e54e:	6803      	ldr	r3, [r0, #0]
 800e550:	9500      	str	r5, [sp, #0]
 800e552:	466d      	mov	r5, sp
 800e554:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e558:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e55c:	4629      	mov	r1, r5
 800e55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e560:	4798      	blx	r3
 800e562:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e566:	e884 0003 	stmia.w	r4, {r0, r1}
 800e56a:	4620      	mov	r0, r4
 800e56c:	b003      	add	sp, #12
 800e56e:	bd30      	pop	{r4, r5, pc}

0800e570 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e570:	b513      	push	{r0, r1, r4, lr}
 800e572:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e576:	4604      	mov	r4, r0
 800e578:	3301      	adds	r3, #1
 800e57a:	d109      	bne.n	800e590 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e57c:	4601      	mov	r1, r0
 800e57e:	4668      	mov	r0, sp
 800e580:	f7ff fe18 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e584:	f8bd 3000 	ldrh.w	r3, [sp]
 800e588:	8423      	strh	r3, [r4, #32]
 800e58a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e58e:	8463      	strh	r3, [r4, #34]	; 0x22
 800e590:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e594:	b002      	add	sp, #8
 800e596:	bd10      	pop	{r4, pc}

0800e598 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e598:	b513      	push	{r0, r1, r4, lr}
 800e59a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800e59e:	4604      	mov	r4, r0
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	d109      	bne.n	800e5b8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e5a4:	4601      	mov	r1, r0
 800e5a6:	4668      	mov	r0, sp
 800e5a8:	f7ff fe04 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5b0:	8423      	strh	r3, [r4, #32]
 800e5b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5b6:	8463      	strh	r3, [r4, #34]	; 0x22
 800e5b8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800e5bc:	b002      	add	sp, #8
 800e5be:	bd10      	pop	{r4, pc}

0800e5c0 <_ZN8touchgfx6ScreenC1Ev>:
 800e5c0:	b570      	push	{r4, r5, r6, lr}
 800e5c2:	4b17      	ldr	r3, [pc, #92]	; (800e620 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	4a17      	ldr	r2, [pc, #92]	; (800e624 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	f845 3b04 	str.w	r3, [r5], #4
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	6042      	str	r2, [r0, #4]
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	8103      	strh	r3, [r0, #8]
 800e5d6:	8143      	strh	r3, [r0, #10]
 800e5d8:	8183      	strh	r3, [r0, #12]
 800e5da:	81c3      	strh	r3, [r0, #14]
 800e5dc:	8203      	strh	r3, [r0, #16]
 800e5de:	8243      	strh	r3, [r0, #18]
 800e5e0:	8283      	strh	r3, [r0, #20]
 800e5e2:	82c3      	strh	r3, [r0, #22]
 800e5e4:	6203      	str	r3, [r0, #32]
 800e5e6:	8483      	strh	r3, [r0, #36]	; 0x24
 800e5e8:	84c3      	strh	r3, [r0, #38]	; 0x26
 800e5ea:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800e5ee:	6343      	str	r3, [r0, #52]	; 0x34
 800e5f0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800e5f4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800e5f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e5fc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800e600:	4b09      	ldr	r3, [pc, #36]	; (800e628 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e602:	4628      	mov	r0, r5
 800e604:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e608:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e60a:	4a08      	ldr	r2, [pc, #32]	; (800e62c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e60c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e610:	4798      	blx	r3
 800e612:	6863      	ldr	r3, [r4, #4]
 800e614:	4628      	mov	r0, r5
 800e616:	4631      	mov	r1, r6
 800e618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e61a:	4798      	blx	r3
 800e61c:	4620      	mov	r0, r4
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	0801a474 	.word	0x0801a474
 800e624:	0801a018 	.word	0x0801a018
 800e628:	2400ae02 	.word	0x2400ae02
 800e62c:	2400ae00 	.word	0x2400ae00

0800e630 <_ZN8touchgfx6Screen4drawEv>:
 800e630:	4b09      	ldr	r3, [pc, #36]	; (800e658 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e632:	b507      	push	{r0, r1, r2, lr}
 800e634:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e638:	2100      	movs	r1, #0
 800e63a:	4b08      	ldr	r3, [pc, #32]	; (800e65c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e63c:	9100      	str	r1, [sp, #0]
 800e63e:	4669      	mov	r1, sp
 800e640:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e644:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e648:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e64c:	6803      	ldr	r3, [r0, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	4798      	blx	r3
 800e652:	b003      	add	sp, #12
 800e654:	f85d fb04 	ldr.w	pc, [sp], #4
 800e658:	2400ae00 	.word	0x2400ae00
 800e65c:	2400ae02 	.word	0x2400ae02

0800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e668:	b089      	sub	sp, #36	; 0x24
 800e66a:	4680      	mov	r8, r0
 800e66c:	460c      	mov	r4, r1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	4615      	mov	r5, r2
 800e672:	dd0e      	ble.n	800e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e674:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	dd0a      	ble.n	800e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7ff ff5b 	bl	800e538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e682:	4621      	mov	r1, r4
 800e684:	f7fe fc83 	bl	800cf8e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e688:	69eb      	ldr	r3, [r5, #28]
 800e68a:	b928      	cbnz	r0, 800e698 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e68c:	461d      	mov	r5, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1f4      	bne.n	800e67c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e692:	b009      	add	sp, #36	; 0x24
 800e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	ae04      	add	r6, sp, #16
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 80b5 	beq.w	800e80a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	a802      	add	r0, sp, #8
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	4798      	blx	r3
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f7ff ff60 	bl	800e570 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e6b0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e6b4:	4407      	add	r7, r0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f7ff ff6e 	bl	800e598 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e6bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e6c0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e6c4:	b23f      	sxth	r7, r7
 800e6c6:	4418      	add	r0, r3
 800e6c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e6d2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6dc:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e6e0:	f7fc fbc0 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f7ff ff27 	bl	800e538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e6ea:	ab06      	add	r3, sp, #24
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fc fbb3 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e6fe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e702:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e706:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e70a:	4299      	cmp	r1, r3
 800e70c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e710:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e714:	d10b      	bne.n	800e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e716:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e71a:	4552      	cmp	r2, sl
 800e71c:	d107      	bne.n	800e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e71e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e722:	455a      	cmp	r2, fp
 800e724:	d103      	bne.n	800e72e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e726:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e72a:	454a      	cmp	r2, r9
 800e72c:	d06d      	beq.n	800e80a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e72e:	f1bb 0f00 	cmp.w	fp, #0
 800e732:	dd65      	ble.n	800e800 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e734:	f1b9 0f00 	cmp.w	r9, #0
 800e738:	dd62      	ble.n	800e800 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e73a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e73e:	fa1f f08a 	uxth.w	r0, sl
 800e742:	4552      	cmp	r2, sl
 800e744:	9000      	str	r0, [sp, #0]
 800e746:	da12      	bge.n	800e76e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	9b00      	ldr	r3, [sp, #0]
 800e74c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e750:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e754:	1a9a      	subs	r2, r3, r2
 800e756:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e75a:	4631      	mov	r1, r6
 800e75c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e760:	4640      	mov	r0, r8
 800e762:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e766:	69ea      	ldr	r2, [r5, #28]
 800e768:	f7ff ff7a 	bl	800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e76c:	9b01      	ldr	r3, [sp, #4]
 800e76e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e772:	b29f      	uxth	r7, r3
 800e774:	429a      	cmp	r2, r3
 800e776:	da0d      	bge.n	800e794 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e778:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e77c:	1aba      	subs	r2, r7, r2
 800e77e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e782:	4631      	mov	r1, r6
 800e784:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e788:	4640      	mov	r0, r8
 800e78a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e78e:	69ea      	ldr	r2, [r5, #28]
 800e790:	f7ff ff66 	bl	800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e794:	8822      	ldrh	r2, [r4, #0]
 800e796:	445f      	add	r7, fp
 800e798:	88a3      	ldrh	r3, [r4, #4]
 800e79a:	b2bf      	uxth	r7, r7
 800e79c:	4413      	add	r3, r2
 800e79e:	b23a      	sxth	r2, r7
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b219      	sxth	r1, r3
 800e7a4:	4291      	cmp	r1, r2
 800e7a6:	dd0d      	ble.n	800e7c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e7a8:	1bdb      	subs	r3, r3, r7
 800e7aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7ae:	f8ad a012 	strh.w	sl, [sp, #18]
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e7be:	69ea      	ldr	r2, [r5, #28]
 800e7c0:	f7ff ff4e 	bl	800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7c4:	88e2      	ldrh	r2, [r4, #6]
 800e7c6:	8863      	ldrh	r3, [r4, #2]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	9a00      	ldr	r2, [sp, #0]
 800e7cc:	444a      	add	r2, r9
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	fa1f f982 	uxth.w	r9, r2
 800e7d4:	b219      	sxth	r1, r3
 800e7d6:	fa0f f289 	sxth.w	r2, r9
 800e7da:	428a      	cmp	r2, r1
 800e7dc:	da15      	bge.n	800e80a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e7de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e7e2:	eba3 0309 	sub.w	r3, r3, r9
 800e7e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e7ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e7ee:	4631      	mov	r1, r6
 800e7f0:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e7f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e7f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7fc:	69ea      	ldr	r2, [r5, #28]
 800e7fe:	e001      	b.n	800e804 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e800:	69ea      	ldr	r2, [r5, #28]
 800e802:	4621      	mov	r1, r4
 800e804:	4640      	mov	r0, r8
 800e806:	f7ff ff2b 	bl	800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e80a:	4628      	mov	r0, r5
 800e80c:	f7ff fe94 	bl	800e538 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e810:	6861      	ldr	r1, [r4, #4]
 800e812:	4602      	mov	r2, r0
 800e814:	4633      	mov	r3, r6
 800e816:	6820      	ldr	r0, [r4, #0]
 800e818:	c303      	stmia	r3!, {r0, r1}
 800e81a:	4611      	mov	r1, r2
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7fc fb21 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e822:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	f77f af33 	ble.w	800e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e82c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f77f af2e 	ble.w	800e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e836:	4628      	mov	r0, r5
 800e838:	f7ff fe9a 	bl	800e570 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e83c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e840:	1a18      	subs	r0, r3, r0
 800e842:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e846:	4628      	mov	r0, r5
 800e848:	f7ff fea6 	bl	800e598 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e84c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e850:	4631      	mov	r1, r6
 800e852:	1a18      	subs	r0, r3, r0
 800e854:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e858:	4628      	mov	r0, r5
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	4798      	blx	r3
 800e860:	e717      	b.n	800e692 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e862 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e862:	b570      	push	{r4, r5, r6, lr}
 800e864:	1d06      	adds	r6, r0, #4
 800e866:	b086      	sub	sp, #24
 800e868:	460c      	mov	r4, r1
 800e86a:	2300      	movs	r3, #0
 800e86c:	4631      	mov	r1, r6
 800e86e:	4605      	mov	r5, r0
 800e870:	a802      	add	r0, sp, #8
 800e872:	9301      	str	r3, [sp, #4]
 800e874:	f7ff fc9e 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e878:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e87c:	8822      	ldrh	r2, [r4, #0]
 800e87e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	8863      	ldrh	r3, [r4, #2]
 800e886:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e88a:	1a5b      	subs	r3, r3, r1
 800e88c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e890:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e894:	aa01      	add	r2, sp, #4
 800e896:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e89a:	4630      	mov	r0, r6
 800e89c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e8a0:	a904      	add	r1, sp, #16
 800e8a2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e8a6:	f7fc fbb5 	bl	800b014 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e8aa:	9a01      	ldr	r2, [sp, #4]
 800e8ac:	b11a      	cbz	r2, 800e8b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	f7ff fed5 	bl	800e660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e8b6:	b006      	add	sp, #24
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}

0800e8ba <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	b530      	push	{r4, r5, lr}
 800e8be:	4604      	mov	r4, r0
 800e8c0:	b085      	sub	sp, #20
 800e8c2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e8c6:	460d      	mov	r5, r1
 800e8c8:	466b      	mov	r3, sp
 800e8ca:	6851      	ldr	r1, [r2, #4]
 800e8cc:	c303      	stmia	r3!, {r0, r1}
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4668      	mov	r0, sp
 800e8d2:	f7fc fac7 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 800e8d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e8da:	b12b      	cbz	r3, 800e8e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e8dc:	4669      	mov	r1, sp
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff ffbf 	bl	800e862 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e8e4:	b005      	add	sp, #20
 800e8e6:	bd30      	pop	{r4, r5, pc}
 800e8e8:	3404      	adds	r4, #4
 800e8ea:	a802      	add	r0, sp, #8
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	f7ff fc61 	bl	800e1b4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e8f2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e8fa:	4669      	mov	r1, sp
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	1a9b      	subs	r3, r3, r2
 800e900:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e904:	f8ad 3000 	strh.w	r3, [sp]
 800e908:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e90c:	1a9b      	subs	r3, r3, r2
 800e90e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e912:	f7fc fb46 	bl	800afa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e916:	e7e5      	b.n	800e8e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e918 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e918:	460b      	mov	r3, r1
 800e91a:	680a      	ldr	r2, [r1, #0]
 800e91c:	1d01      	adds	r1, r0, #4
 800e91e:	6992      	ldr	r2, [r2, #24]
 800e920:	4618      	mov	r0, r3
 800e922:	4710      	bx	r2

0800e924 <_ZN8touchgfx12TextProviderC1Ev>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	2500      	movs	r5, #0
 800e928:	2302      	movs	r3, #2
 800e92a:	4604      	mov	r4, r0
 800e92c:	220e      	movs	r2, #14
 800e92e:	7403      	strb	r3, [r0, #16]
 800e930:	4629      	mov	r1, r5
 800e932:	6145      	str	r5, [r0, #20]
 800e934:	7605      	strb	r5, [r0, #24]
 800e936:	83c5      	strh	r5, [r0, #30]
 800e938:	8405      	strh	r5, [r0, #32]
 800e93a:	86c5      	strh	r5, [r0, #54]	; 0x36
 800e93c:	8705      	strh	r5, [r0, #56]	; 0x38
 800e93e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800e940:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800e944:	e9c0 5500 	strd	r5, r5, [r0]
 800e948:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800e94c:	304c      	adds	r0, #76	; 0x4c
 800e94e:	f009 fad7 	bl	8017f00 <memset>
 800e952:	2301      	movs	r3, #1
 800e954:	4620      	mov	r0, r4
 800e956:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800e95a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800e95e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800e962:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800e966:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e96a:	f7f4 f847 	bl	80029fc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e96e:	4620      	mov	r0, r4
 800e970:	bd38      	pop	{r3, r4, r5, pc}

0800e972 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e972:	b530      	push	{r4, r5, lr}
 800e974:	2500      	movs	r5, #0
 800e976:	2401      	movs	r4, #1
 800e978:	6843      	ldr	r3, [r0, #4]
 800e97a:	b913      	cbnz	r3, 800e982 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e97c:	6803      	ldr	r3, [r0, #0]
 800e97e:	b313      	cbz	r3, 800e9c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e980:	6043      	str	r3, [r0, #4]
 800e982:	7e03      	ldrb	r3, [r0, #24]
 800e984:	b143      	cbz	r3, 800e998 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e986:	6943      	ldr	r3, [r0, #20]
 800e988:	b12b      	cbz	r3, 800e996 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e98a:	881a      	ldrh	r2, [r3, #0]
 800e98c:	b11a      	cbz	r2, 800e996 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e98e:	1c9a      	adds	r2, r3, #2
 800e990:	6142      	str	r2, [r0, #20]
 800e992:	8818      	ldrh	r0, [r3, #0]
 800e994:	bd30      	pop	{r4, r5, pc}
 800e996:	7605      	strb	r5, [r0, #24]
 800e998:	6843      	ldr	r3, [r0, #4]
 800e99a:	8819      	ldrh	r1, [r3, #0]
 800e99c:	b199      	cbz	r1, 800e9c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e99e:	1c9a      	adds	r2, r3, #2
 800e9a0:	2902      	cmp	r1, #2
 800e9a2:	6042      	str	r2, [r0, #4]
 800e9a4:	d1f5      	bne.n	800e992 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e9a6:	7c03      	ldrb	r3, [r0, #16]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d8e5      	bhi.n	800e978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9ac:	1c5a      	adds	r2, r3, #1
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	7402      	strb	r2, [r0, #16]
 800e9b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e9b6:	6143      	str	r3, [r0, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d0dd      	beq.n	800e978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9bc:	881b      	ldrh	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d0da      	beq.n	800e978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9c2:	7604      	strb	r4, [r0, #24]
 800e9c4:	e7d8      	b.n	800e978 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	e7e4      	b.n	800e994 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e9ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e9ca:	6001      	str	r1, [r0, #0]
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	b430      	push	{r4, r5}
 800e9d0:	6041      	str	r1, [r0, #4]
 800e9d2:	6815      	ldr	r5, [r2, #0]
 800e9d4:	6085      	str	r5, [r0, #8]
 800e9d6:	6852      	ldr	r2, [r2, #4]
 800e9d8:	6443      	str	r3, [r0, #68]	; 0x44
 800e9da:	9b02      	ldr	r3, [sp, #8]
 800e9dc:	60c2      	str	r2, [r0, #12]
 800e9de:	7401      	strb	r1, [r0, #16]
 800e9e0:	6141      	str	r1, [r0, #20]
 800e9e2:	7601      	strb	r1, [r0, #24]
 800e9e4:	8701      	strh	r1, [r0, #56]	; 0x38
 800e9e6:	8401      	strh	r1, [r0, #32]
 800e9e8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800e9ec:	6483      	str	r3, [r0, #72]	; 0x48
 800e9ee:	bc30      	pop	{r4, r5}
 800e9f0:	f7f4 b804 	b.w	80029fc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e9f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	4608      	mov	r0, r1
 800e9fa:	b1f1      	cbz	r1, 800ea3a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e9fc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800ea00:	460b      	mov	r3, r1
 800ea02:	f101 0708 	add.w	r7, r1, #8
 800ea06:	4622      	mov	r2, r4
 800ea08:	6818      	ldr	r0, [r3, #0]
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ea10:	4626      	mov	r6, r4
 800ea12:	42bb      	cmp	r3, r7
 800ea14:	c603      	stmia	r6!, {r0, r1}
 800ea16:	4634      	mov	r4, r6
 800ea18:	d1f6      	bne.n	800ea08 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	6030      	str	r0, [r6, #0]
 800ea1e:	4610      	mov	r0, r2
 800ea20:	889b      	ldrh	r3, [r3, #4]
 800ea22:	80b3      	strh	r3, [r6, #4]
 800ea24:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800ea28:	015b      	lsls	r3, r3, #5
 800ea2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ea2e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800ea32:	430b      	orrs	r3, r1
 800ea34:	425b      	negs	r3, r3
 800ea36:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800ea3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	460c      	mov	r4, r1
 800ea40:	6811      	ldr	r1, [r2, #0]
 800ea42:	4610      	mov	r0, r2
 800ea44:	68cd      	ldr	r5, [r1, #12]
 800ea46:	4619      	mov	r1, r3
 800ea48:	47a8      	blx	r5
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	bf08      	it	eq
 800ea4e:	4620      	moveq	r0, r4
 800ea50:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	4604      	mov	r4, r0
 800ea58:	4615      	mov	r5, r2
 800ea5a:	4608      	mov	r0, r1
 800ea5c:	b93a      	cbnz	r2, 800ea6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800ea5e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ea62:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800ea66:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800ea72:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800ea76:	8893      	ldrh	r3, [r2, #4]
 800ea78:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800ea7c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ea80:	79ee      	ldrb	r6, [r5, #7]
 800ea82:	4316      	orrs	r6, r2
 800ea84:	19da      	adds	r2, r3, r7
 800ea86:	b291      	uxth	r1, r2
 800ea88:	b2b7      	uxth	r7, r6
 800ea8a:	291d      	cmp	r1, #29
 800ea8c:	d87b      	bhi.n	800eb86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800ea8e:	2201      	movs	r2, #1
 800ea90:	10f6      	asrs	r6, r6, #3
 800ea92:	408a      	lsls	r2, r1
 800ea94:	4974      	ldr	r1, [pc, #464]	; (800ec68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800ea96:	420a      	tst	r2, r1
 800ea98:	d12e      	bne.n	800eaf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800ea9a:	f412 7f60 	tst.w	r2, #896	; 0x380
 800ea9e:	d072      	beq.n	800eb86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800eaa0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800eaa4:	462b      	mov	r3, r5
 800eaa6:	f105 0e08 	add.w	lr, r5, #8
 800eaaa:	4615      	mov	r5, r2
 800eaac:	6818      	ldr	r0, [r3, #0]
 800eaae:	3308      	adds	r3, #8
 800eab0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800eab4:	4694      	mov	ip, r2
 800eab6:	4573      	cmp	r3, lr
 800eab8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800eabc:	4662      	mov	r2, ip
 800eabe:	d1f5      	bne.n	800eaac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800eac0:	6818      	ldr	r0, [r3, #0]
 800eac2:	f8cc 0000 	str.w	r0, [ip]
 800eac6:	889b      	ldrh	r3, [r3, #4]
 800eac8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800eacc:	b2b3      	uxth	r3, r6
 800eace:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ead2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800ead6:	1aca      	subs	r2, r1, r3
 800ead8:	1bcf      	subs	r7, r1, r7
 800eada:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800eade:	b292      	uxth	r2, r2
 800eae0:	1afb      	subs	r3, r7, r3
 800eae2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800eae6:	10d2      	asrs	r2, r2, #3
 800eae8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800eaec:	4302      	orrs	r2, r0
 800eaee:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800eaf2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800eaf6:	e7b8      	b.n	800ea6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800eaf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800eafa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800eafe:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800eb00:	f640 6333 	movw	r3, #3635	; 0xe33
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d110      	bne.n	800eb2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800eb08:	6803      	ldr	r3, [r0, #0]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	4798      	blx	r3
 800eb0e:	7b41      	ldrb	r1, [r0, #13]
 800eb10:	00cb      	lsls	r3, r1, #3
 800eb12:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800eb16:	7a03      	ldrb	r3, [r0, #8]
 800eb18:	0648      	lsls	r0, r1, #25
 800eb1a:	ea43 0302 	orr.w	r3, r3, r2
 800eb1e:	bf44      	itt	mi
 800eb20:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800eb24:	b21b      	sxthmi	r3, r3
 800eb26:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb2a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800eb2e:	462a      	mov	r2, r5
 800eb30:	f105 0c08 	add.w	ip, r5, #8
 800eb34:	443b      	add	r3, r7
 800eb36:	4433      	add	r3, r6
 800eb38:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	4635      	mov	r5, r6
 800eb40:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb44:	6810      	ldr	r0, [r2, #0]
 800eb46:	3208      	adds	r2, #8
 800eb48:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800eb4c:	4637      	mov	r7, r6
 800eb4e:	4562      	cmp	r2, ip
 800eb50:	c703      	stmia	r7!, {r0, r1}
 800eb52:	463e      	mov	r6, r7
 800eb54:	d1f6      	bne.n	800eb44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800eb56:	6810      	ldr	r0, [r2, #0]
 800eb58:	6038      	str	r0, [r7, #0]
 800eb5a:	8892      	ldrh	r2, [r2, #4]
 800eb5c:	80ba      	strh	r2, [r7, #4]
 800eb5e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eb62:	10db      	asrs	r3, r3, #3
 800eb64:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eb68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eb70:	4313      	orrs	r3, r2
 800eb72:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800eb76:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800eb7a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800eb7e:	1a9b      	subs	r3, r3, r2
 800eb80:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800eb84:	e771      	b.n	800ea6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800eb86:	f023 0204 	bic.w	r2, r3, #4
 800eb8a:	f640 611b 	movw	r1, #3611	; 0xe1b
 800eb8e:	428a      	cmp	r2, r1
 800eb90:	d003      	beq.n	800eb9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800eb92:	f640 621d 	movw	r2, #3613	; 0xe1d
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d120      	bne.n	800ebdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4620      	mov	r0, r4
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	f7ff ff4a 	bl	800ea3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800eba8:	7b41      	ldrb	r1, [r0, #13]
 800ebaa:	00cb      	lsls	r3, r1, #3
 800ebac:	0649      	lsls	r1, r1, #25
 800ebae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ebb2:	7a03      	ldrb	r3, [r0, #8]
 800ebb4:	ea43 0302 	orr.w	r3, r3, r2
 800ebb8:	bf44      	itt	mi
 800ebba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ebbe:	b21b      	sxthmi	r3, r3
 800ebc0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ebc4:	7b6b      	ldrb	r3, [r5, #13]
 800ebc6:	7aaa      	ldrb	r2, [r5, #10]
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	115a      	asrs	r2, r3, #5
 800ebd2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800ebd6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ebda:	e035      	b.n	800ec48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800ebdc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800ebe0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800ebe4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800ebe8:	7a2a      	ldrb	r2, [r5, #8]
 800ebea:	ea42 0201 	orr.w	r2, r2, r1
 800ebee:	f640 6109 	movw	r1, #3593	; 0xe09
 800ebf2:	bf1c      	itt	ne
 800ebf4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800ebf8:	b212      	sxthne	r2, r2
 800ebfa:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ebfe:	f023 0210 	bic.w	r2, r3, #16
 800ec02:	428a      	cmp	r2, r1
 800ec04:	d003      	beq.n	800ec0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800ec06:	f640 6213 	movw	r2, #3603	; 0xe13
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d129      	bne.n	800ec62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800ec0e:	7b6e      	ldrb	r6, [r5, #13]
 800ec10:	4629      	mov	r1, r5
 800ec12:	0076      	lsls	r6, r6, #1
 800ec14:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ec18:	7aae      	ldrb	r6, [r5, #10]
 800ec1a:	4316      	orrs	r6, r2
 800ec1c:	f640 6213 	movw	r2, #3603	; 0xe13
 800ec20:	4293      	cmp	r3, r2
 800ec22:	4602      	mov	r2, r0
 800ec24:	4620      	mov	r0, r4
 800ec26:	bf16      	itet	ne
 800ec28:	f103 33ff 	addne.w	r3, r3, #4294967295
 800ec2c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800ec30:	b29b      	uxthne	r3, r3
 800ec32:	f7ff ff03 	bl	800ea3c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ec36:	7b43      	ldrb	r3, [r0, #13]
 800ec38:	7a82      	ldrb	r2, [r0, #10]
 800ec3a:	005b      	lsls	r3, r3, #1
 800ec3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec40:	4313      	orrs	r3, r2
 800ec42:	1af6      	subs	r6, r6, r3
 800ec44:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800ec48:	7b69      	ldrb	r1, [r5, #13]
 800ec4a:	00cb      	lsls	r3, r1, #3
 800ec4c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ec50:	7a2b      	ldrb	r3, [r5, #8]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	064a      	lsls	r2, r1, #25
 800ec56:	bf44      	itt	mi
 800ec58:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ec5c:	b21b      	sxthmi	r3, r3
 800ec5e:	1bdb      	subs	r3, r3, r7
 800ec60:	e747      	b.n	800eaf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ec62:	2300      	movs	r3, #0
 800ec64:	e7b7      	b.n	800ebd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 800ec66:	bf00      	nop
 800ec68:	3fc00079 	.word	0x3fc00079

0800ec6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ec6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec70:	4604      	mov	r4, r0
 800ec72:	b942      	cbnz	r2, 800ec86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ec74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec78:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800ec7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800ec80:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ec84:	e047      	b.n	800ed16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ec86:	7b51      	ldrb	r1, [r2, #13]
 800ec88:	8893      	ldrh	r3, [r2, #4]
 800ec8a:	010d      	lsls	r5, r1, #4
 800ec8c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800ec90:	79d5      	ldrb	r5, [r2, #7]
 800ec92:	4305      	orrs	r5, r0
 800ec94:	2d04      	cmp	r5, #4
 800ec96:	bfcc      	ite	gt
 800ec98:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ec9c:	f04f 0e01 	movle.w	lr, #1
 800eca0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800eca4:	f200 80ab 	bhi.w	800edfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800eca8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800ecac:	4283      	cmp	r3, r0
 800ecae:	d216      	bcs.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecb0:	f240 605b 	movw	r0, #1627	; 0x65b
 800ecb4:	4283      	cmp	r3, r0
 800ecb6:	d859      	bhi.n	800ed6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800ecb8:	f240 6057 	movw	r0, #1623	; 0x657
 800ecbc:	4283      	cmp	r3, r0
 800ecbe:	d20e      	bcs.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecc0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800ecc4:	d24a      	bcs.n	800ed5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800ecc6:	f240 604e 	movw	r0, #1614	; 0x64e
 800ecca:	4283      	cmp	r3, r0
 800eccc:	d207      	bcs.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecce:	f240 601a 	movw	r0, #1562	; 0x61a
 800ecd2:	4283      	cmp	r3, r0
 800ecd4:	d02a      	beq.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ecd6:	d821      	bhi.n	800ed1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800ecd8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800ecdc:	d35b      	bcc.n	800ed96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ecde:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800ece2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ece6:	f040 80d0 	bne.w	800ee8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ecea:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800ecee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ecf2:	f040 80ca 	bne.w	800ee8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ecf6:	00cb      	lsls	r3, r1, #3
 800ecf8:	0649      	lsls	r1, r1, #25
 800ecfa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ecfe:	7a13      	ldrb	r3, [r2, #8]
 800ed00:	ea43 0300 	orr.w	r3, r3, r0
 800ed04:	bf44      	itt	mi
 800ed06:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed0a:	b21b      	sxthmi	r3, r3
 800ed0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ed10:	1b5d      	subs	r5, r3, r5
 800ed12:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800ed16:	4610      	mov	r0, r2
 800ed18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed1c:	f240 604b 	movw	r0, #1611	; 0x64b
 800ed20:	4283      	cmp	r3, r0
 800ed22:	d338      	bcc.n	800ed96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ed24:	f240 604c 	movw	r0, #1612	; 0x64c
 800ed28:	4283      	cmp	r3, r0
 800ed2a:	d9d8      	bls.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed2c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800ed30:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800ed34:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ed38:	f040 80f3 	bne.w	800ef22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ed40:	f040 80ef 	bne.w	800ef22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed44:	00cb      	lsls	r3, r1, #3
 800ed46:	064e      	lsls	r6, r1, #25
 800ed48:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed4c:	7a13      	ldrb	r3, [r2, #8]
 800ed4e:	ea43 0300 	orr.w	r3, r3, r0
 800ed52:	bf44      	itt	mi
 800ed54:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed58:	b21b      	sxthmi	r3, r3
 800ed5a:	e7d9      	b.n	800ed10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ed5c:	f240 6054 	movw	r0, #1620	; 0x654
 800ed60:	4283      	cmp	r3, r0
 800ed62:	d8e3      	bhi.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed64:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800ed68:	d9e0      	bls.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed6a:	e7b8      	b.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed6c:	f240 6074 	movw	r0, #1652	; 0x674
 800ed70:	4283      	cmp	r3, r0
 800ed72:	d0b4      	beq.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed74:	d82d      	bhi.n	800edd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ed76:	f240 605e 	movw	r0, #1630	; 0x65e
 800ed7a:	4283      	cmp	r3, r0
 800ed7c:	d804      	bhi.n	800ed88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ed7e:	f240 605d 	movw	r0, #1629	; 0x65d
 800ed82:	4283      	cmp	r3, r0
 800ed84:	d3d2      	bcc.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed86:	e7aa      	b.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed88:	f240 605f 	movw	r0, #1631	; 0x65f
 800ed8c:	4283      	cmp	r3, r0
 800ed8e:	d0cd      	beq.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed90:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800ed94:	d0a3      	beq.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed96:	00cb      	lsls	r3, r1, #3
 800ed98:	0649      	lsls	r1, r1, #25
 800ed9a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed9e:	7a13      	ldrb	r3, [r2, #8]
 800eda0:	ea43 0300 	orr.w	r3, r3, r0
 800eda4:	bf44      	itt	mi
 800eda6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800edaa:	b21b      	sxthmi	r3, r3
 800edac:	1b5d      	subs	r5, r3, r5
 800edae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800edb2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800edb6:	7b53      	ldrb	r3, [r2, #13]
 800edb8:	015b      	lsls	r3, r3, #5
 800edba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800edbe:	7993      	ldrb	r3, [r2, #6]
 800edc0:	430b      	orrs	r3, r1
 800edc2:	2105      	movs	r1, #5
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	fb93 f3f1 	sdiv	r3, r3, r1
 800edca:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800edce:	440b      	add	r3, r1
 800edd0:	e756      	b.n	800ec80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800edd2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800edd6:	4283      	cmp	r3, r0
 800edd8:	d809      	bhi.n	800edee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800edda:	f240 60df 	movw	r0, #1759	; 0x6df
 800edde:	4283      	cmp	r3, r0
 800ede0:	f4bf af7d 	bcs.w	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ede4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800ede8:	2b05      	cmp	r3, #5
 800edea:	d8d4      	bhi.n	800ed96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800edec:	e777      	b.n	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edee:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800edf2:	4283      	cmp	r3, r0
 800edf4:	d09a      	beq.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800edf6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800edfa:	4283      	cmp	r3, r0
 800edfc:	e7ca      	b.n	800ed94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800edfe:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800ee02:	d22b      	bcs.n	800ee5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ee04:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800ee08:	4283      	cmp	r3, r0
 800ee0a:	d28f      	bcs.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee0c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ee10:	4283      	cmp	r3, r0
 800ee12:	d816      	bhi.n	800ee42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800ee14:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800ee18:	4283      	cmp	r3, r0
 800ee1a:	f4bf af60 	bcs.w	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee1e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800ee22:	4283      	cmp	r3, r0
 800ee24:	d80a      	bhi.n	800ee3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ee26:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800ee2a:	4283      	cmp	r3, r0
 800ee2c:	f4bf af57 	bcs.w	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee30:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800ee34:	4283      	cmp	r3, r0
 800ee36:	f43f af79 	beq.w	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee3a:	e7ac      	b.n	800ed96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ee3c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800ee40:	e7f8      	b.n	800ee34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ee42:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800ee46:	4283      	cmp	r3, r0
 800ee48:	d802      	bhi.n	800ee50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ee4a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ee4e:	e798      	b.n	800ed82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ee50:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800ee54:	4283      	cmp	r3, r0
 800ee56:	f47f af42 	bne.w	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee5a:	e767      	b.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee5c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800ee60:	4283      	cmp	r3, r0
 800ee62:	f43f af63 	beq.w	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee66:	d802      	bhi.n	800ee6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ee68:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800ee6c:	e7f2      	b.n	800ee54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ee6e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800ee72:	4283      	cmp	r3, r0
 800ee74:	d805      	bhi.n	800ee82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ee76:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800ee7a:	4283      	cmp	r3, r0
 800ee7c:	f4ff af2f 	bcc.w	800ecde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee80:	e754      	b.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee82:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800ee86:	4283      	cmp	r3, r0
 800ee88:	e7af      	b.n	800edea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ee8a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ee8e:	4617      	mov	r7, r2
 800ee90:	f102 0808 	add.w	r8, r2, #8
 800ee94:	4666      	mov	r6, ip
 800ee96:	6838      	ldr	r0, [r7, #0]
 800ee98:	3708      	adds	r7, #8
 800ee9a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ee9e:	46e6      	mov	lr, ip
 800eea0:	4547      	cmp	r7, r8
 800eea2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800eea6:	46f4      	mov	ip, lr
 800eea8:	d1f5      	bne.n	800ee96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800eeaa:	6838      	ldr	r0, [r7, #0]
 800eeac:	f8ce 0000 	str.w	r0, [lr]
 800eeb0:	88b9      	ldrh	r1, [r7, #4]
 800eeb2:	f8ae 1004 	strh.w	r1, [lr, #4]
 800eeb6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800eeba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800eebe:	d009      	beq.n	800eed4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800eec0:	7b51      	ldrb	r1, [r2, #13]
 800eec2:	7992      	ldrb	r2, [r2, #6]
 800eec4:	0149      	lsls	r1, r1, #5
 800eec6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800eeca:	4311      	orrs	r1, r2
 800eecc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800eed0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800eed4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800eed8:	b2ad      	uxth	r5, r5
 800eeda:	d00d      	beq.n	800eef8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800eedc:	442b      	add	r3, r5
 800eede:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eee8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eeec:	10db      	asrs	r3, r3, #3
 800eeee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eef2:	4313      	orrs	r3, r2
 800eef4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800eef8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800eefc:	00cb      	lsls	r3, r1, #3
 800eefe:	064f      	lsls	r7, r1, #25
 800ef00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ef04:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800ef08:	ea43 0302 	orr.w	r3, r3, r2
 800ef0c:	bf44      	itt	mi
 800ef0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ef12:	b21b      	sxthmi	r3, r3
 800ef14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ef18:	1b5b      	subs	r3, r3, r5
 800ef1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ef1e:	4632      	mov	r2, r6
 800ef20:	e6f9      	b.n	800ed16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ef22:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ef26:	4617      	mov	r7, r2
 800ef28:	f102 0908 	add.w	r9, r2, #8
 800ef2c:	4666      	mov	r6, ip
 800ef2e:	6838      	ldr	r0, [r7, #0]
 800ef30:	3708      	adds	r7, #8
 800ef32:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ef36:	46e0      	mov	r8, ip
 800ef38:	454f      	cmp	r7, r9
 800ef3a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ef3e:	46c4      	mov	ip, r8
 800ef40:	d1f5      	bne.n	800ef2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ef42:	6838      	ldr	r0, [r7, #0]
 800ef44:	f8c8 0000 	str.w	r0, [r8]
 800ef48:	88b9      	ldrh	r1, [r7, #4]
 800ef4a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ef4e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800ef52:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ef56:	d009      	beq.n	800ef6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800ef58:	7b51      	ldrb	r1, [r2, #13]
 800ef5a:	7992      	ldrb	r2, [r2, #6]
 800ef5c:	0149      	lsls	r1, r1, #5
 800ef5e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ef62:	4311      	orrs	r1, r2
 800ef64:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ef68:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800ef6c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ef70:	d00e      	beq.n	800ef90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ef72:	eba3 030e 	sub.w	r3, r3, lr
 800ef76:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800ef84:	10db      	asrs	r3, r3, #3
 800ef86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800ef90:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ef94:	00cb      	lsls	r3, r1, #3
 800ef96:	0648      	lsls	r0, r1, #25
 800ef98:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ef9c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800efa0:	ea43 0302 	orr.w	r3, r3, r2
 800efa4:	bf44      	itt	mi
 800efa6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800efaa:	b21b      	sxthmi	r3, r3
 800efac:	1b5d      	subs	r5, r3, r5
 800efae:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800efb2:	e7b4      	b.n	800ef1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800efb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	461e      	mov	r6, r3
 800efba:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800efbc:	4604      	mov	r4, r0
 800efbe:	4617      	mov	r7, r2
 800efc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800efc4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800efc8:	f7f3 fcc6 	bl	8002958 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800efcc:	4605      	mov	r5, r0
 800efce:	b918      	cbnz	r0, 800efd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	4628      	mov	r0, r5
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	4601      	mov	r1, r0
 800efdc:	4638      	mov	r0, r7
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	4798      	blx	r3
 800efe2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800efe6:	4602      	mov	r2, r0
 800efe8:	6030      	str	r0, [r6, #0]
 800efea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efee:	d213      	bcs.n	800f018 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800eff0:	4643      	mov	r3, r8
 800eff2:	4639      	mov	r1, r7
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7ff fe39 	bl	800ec6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800effa:	6030      	str	r0, [r6, #0]
 800effc:	6833      	ldr	r3, [r6, #0]
 800effe:	b143      	cbz	r3, 800f012 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f000:	7b5a      	ldrb	r2, [r3, #13]
 800f002:	7a9b      	ldrb	r3, [r3, #10]
 800f004:	0052      	lsls	r2, r2, #1
 800f006:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f00a:	4313      	orrs	r3, r2
 800f00c:	bf0c      	ite	eq
 800f00e:	2301      	moveq	r3, #1
 800f010:	2300      	movne	r3, #0
 800f012:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800f016:	e7dc      	b.n	800efd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f018:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	2b7f      	cmp	r3, #127	; 0x7f
 800f020:	d804      	bhi.n	800f02c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f022:	4639      	mov	r1, r7
 800f024:	4620      	mov	r0, r4
 800f026:	f7ff fd15 	bl	800ea54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f02a:	e7e6      	b.n	800effa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f02c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0e3      	beq.n	800effc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f034:	f640 1302 	movw	r3, #2306	; 0x902
 800f038:	429d      	cmp	r5, r3
 800f03a:	d1df      	bne.n	800effc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f03c:	4601      	mov	r1, r0
 800f03e:	4620      	mov	r0, r4
 800f040:	f7ff fcd8 	bl	800e9f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f044:	e7d9      	b.n	800effa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f046 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f046:	b510      	push	{r4, lr}
 800f048:	4604      	mov	r4, r0
 800f04a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800f04e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f050:	b1e1      	cbz	r1, 800f08c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f052:	2b0a      	cmp	r3, #10
 800f054:	d02d      	beq.n	800f0b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f056:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f058:	3901      	subs	r1, #1
 800f05a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f05e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800f060:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800f064:	1c51      	adds	r1, r2, #1
 800f066:	b289      	uxth	r1, r1
 800f068:	2901      	cmp	r1, #1
 800f06a:	bf8a      	itet	hi
 800f06c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f070:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800f072:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	8722      	strh	r2, [r4, #56]	; 0x38
 800f078:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f07a:	4413      	add	r3, r2
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	2b09      	cmp	r3, #9
 800f080:	bf88      	it	hi
 800f082:	3b0a      	subhi	r3, #10
 800f084:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f088:	8458      	strh	r0, [r3, #34]	; 0x22
 800f08a:	e7de      	b.n	800f04a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f08c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f08e:	2b0a      	cmp	r3, #10
 800f090:	d00f      	beq.n	800f0b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f092:	4620      	mov	r0, r4
 800f094:	f7ff fc6d 	bl	800e972 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f098:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f09a:	1c5a      	adds	r2, r3, #1
 800f09c:	8722      	strh	r2, [r4, #56]	; 0x38
 800f09e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f0a0:	4413      	add	r3, r2
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	2b09      	cmp	r3, #9
 800f0a6:	bf88      	it	hi
 800f0a8:	3b0a      	subhi	r3, #10
 800f0aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f0ae:	8458      	strh	r0, [r3, #34]	; 0x22
 800f0b0:	e7ec      	b.n	800f08c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f0b2:	bd10      	pop	{r4, pc}

0800f0b4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f0be:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800f0c0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800f0c2:	3a01      	subs	r2, #1
 800f0c4:	8702      	strh	r2, [r0, #56]	; 0x38
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	b292      	uxth	r2, r2
 800f0ca:	2a09      	cmp	r2, #9
 800f0cc:	bf8a      	itet	hi
 800f0ce:	3b09      	subhi	r3, #9
 800f0d0:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800f0d2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800f0d4:	f7ff ffb7 	bl	800f046 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f0d8:	8c23      	ldrh	r3, [r4, #32]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	bf9c      	itt	ls
 800f0de:	3301      	addls	r3, #1
 800f0e0:	8423      	strhls	r3, [r4, #32]
 800f0e2:	8be3      	ldrh	r3, [r4, #30]
 800f0e4:	b90b      	cbnz	r3, 800f0ea <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f0e6:	2302      	movs	r3, #2
 800f0e8:	83e3      	strh	r3, [r4, #30]
 800f0ea:	8be3      	ldrh	r3, [r4, #30]
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	83e3      	strh	r3, [r4, #30]
 800f0f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f0f8:	8365      	strh	r5, [r4, #26]
 800f0fa:	bd38      	pop	{r3, r4, r5, pc}

0800f0fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f0fc:	428a      	cmp	r2, r1
 800f0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f102:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800f104:	d932      	bls.n	800f16c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800f106:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800f108:	1a54      	subs	r4, r2, r1
 800f10a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800f10e:	19ee      	adds	r6, r5, r7
 800f110:	fa1f fe84 	uxth.w	lr, r4
 800f114:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800f118:	3e01      	subs	r6, #1
 800f11a:	b2b4      	uxth	r4, r6
 800f11c:	eba4 090e 	sub.w	r9, r4, lr
 800f120:	fa1f f989 	uxth.w	r9, r9
 800f124:	2c09      	cmp	r4, #9
 800f126:	4626      	mov	r6, r4
 800f128:	bf88      	it	hi
 800f12a:	f1a4 060a 	subhi.w	r6, r4, #10
 800f12e:	f1bc 0f00 	cmp.w	ip, #0
 800f132:	f104 34ff 	add.w	r4, r4, #4294967295
 800f136:	bf08      	it	eq
 800f138:	f04f 0c02 	moveq.w	ip, #2
 800f13c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f140:	b2a4      	uxth	r4, r4
 800f142:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f146:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800f14a:	454c      	cmp	r4, r9
 800f14c:	fa1f fc8c 	uxth.w	ip, ip
 800f150:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f154:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800f158:	d1e4      	bne.n	800f124 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f15a:	eba5 050e 	sub.w	r5, r5, lr
 800f15e:	eb0e 0408 	add.w	r4, lr, r8
 800f162:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800f166:	8705      	strh	r5, [r0, #56]	; 0x38
 800f168:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800f16c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800f16e:	250a      	movs	r5, #10
 800f170:	1a64      	subs	r4, r4, r1
 800f172:	4439      	add	r1, r7
 800f174:	b289      	uxth	r1, r1
 800f176:	8704      	strh	r4, [r0, #56]	; 0x38
 800f178:	2909      	cmp	r1, #9
 800f17a:	bf88      	it	hi
 800f17c:	390a      	subhi	r1, #10
 800f17e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f180:	b18a      	cbz	r2, 800f1a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800f182:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800f184:	3a01      	subs	r2, #1
 800f186:	3101      	adds	r1, #1
 800f188:	b292      	uxth	r2, r2
 800f18a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f18e:	8701      	strh	r1, [r0, #56]	; 0x38
 800f190:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f192:	b901      	cbnz	r1, 800f196 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800f194:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f196:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f198:	3901      	subs	r1, #1
 800f19a:	b289      	uxth	r1, r1
 800f19c:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f19e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f1a2:	844c      	strh	r4, [r1, #34]	; 0x22
 800f1a4:	e7ec      	b.n	800f180 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800f1a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1aa:	f7ff bf4c 	b.w	800f046 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f1ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f1ae:	b570      	push	{r4, r5, r6, lr}
 800f1b0:	2500      	movs	r5, #0
 800f1b2:	4295      	cmp	r5, r2
 800f1b4:	d011      	beq.n	800f1da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f1b6:	8bc4      	ldrh	r4, [r0, #30]
 800f1b8:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f1bc:	4414      	add	r4, r2
 800f1be:	3c01      	subs	r4, #1
 800f1c0:	1b64      	subs	r4, r4, r5
 800f1c2:	b2a4      	uxth	r4, r4
 800f1c4:	2c01      	cmp	r4, #1
 800f1c6:	bf88      	it	hi
 800f1c8:	3c02      	subhi	r4, #2
 800f1ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f1ce:	8b64      	ldrh	r4, [r4, #26]
 800f1d0:	42b4      	cmp	r4, r6
 800f1d2:	d117      	bne.n	800f204 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f1d4:	3501      	adds	r5, #1
 800f1d6:	b2ad      	uxth	r5, r5
 800f1d8:	e7eb      	b.n	800f1b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f1da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f1de:	2400      	movs	r4, #0
 800f1e0:	4413      	add	r3, r2
 800f1e2:	b2a2      	uxth	r2, r4
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	da0f      	bge.n	800f208 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f1e8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800f1ea:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f1ee:	3401      	adds	r4, #1
 800f1f0:	4432      	add	r2, r6
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	2a09      	cmp	r2, #9
 800f1f6:	bf88      	it	hi
 800f1f8:	3a0a      	subhi	r2, #10
 800f1fa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f1fe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f200:	42aa      	cmp	r2, r5
 800f202:	d0ee      	beq.n	800f1e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f204:	2000      	movs	r0, #0
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	2001      	movs	r0, #1
 800f20a:	e7fc      	b.n	800f206 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f20c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	4605      	mov	r5, r0
 800f212:	4616      	mov	r6, r2
 800f214:	1c8c      	adds	r4, r1, #2
 800f216:	8809      	ldrh	r1, [r1, #0]
 800f218:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f21c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f220:	42b3      	cmp	r3, r6
 800f222:	d124      	bne.n	800f26e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f224:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f228:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f22c:	f001 070f 	and.w	r7, r1, #15
 800f230:	4652      	mov	r2, sl
 800f232:	f8cd 8000 	str.w	r8, [sp]
 800f236:	464b      	mov	r3, r9
 800f238:	4621      	mov	r1, r4
 800f23a:	4628      	mov	r0, r5
 800f23c:	f7ff ffb7 	bl	800f1ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f240:	4683      	mov	fp, r0
 800f242:	b168      	cbz	r0, 800f260 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f244:	eb0a 0109 	add.w	r1, sl, r9
 800f248:	463a      	mov	r2, r7
 800f24a:	4628      	mov	r0, r5
 800f24c:	4441      	add	r1, r8
 800f24e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f252:	4649      	mov	r1, r9
 800f254:	f7ff ff52 	bl	800f0fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f258:	4658      	mov	r0, fp
 800f25a:	b003      	add	sp, #12
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f260:	eb07 010a 	add.w	r1, r7, sl
 800f264:	4449      	add	r1, r9
 800f266:	4441      	add	r1, r8
 800f268:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f26c:	e7d2      	b.n	800f214 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f26e:	f04f 0b00 	mov.w	fp, #0
 800f272:	e7f1      	b.n	800f258 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f274 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	8810      	ldrh	r0, [r2, #0]
 800f278:	4298      	cmp	r0, r3
 800f27a:	d817      	bhi.n	800f2ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f27c:	1e48      	subs	r0, r1, #1
 800f27e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f282:	4298      	cmp	r0, r3
 800f284:	d312      	bcc.n	800f2ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f286:	2400      	movs	r4, #0
 800f288:	428c      	cmp	r4, r1
 800f28a:	d20f      	bcs.n	800f2ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f28c:	1860      	adds	r0, r4, r1
 800f28e:	1040      	asrs	r0, r0, #1
 800f290:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f294:	0085      	lsls	r5, r0, #2
 800f296:	42b3      	cmp	r3, r6
 800f298:	d902      	bls.n	800f2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f29a:	3001      	adds	r0, #1
 800f29c:	b284      	uxth	r4, r0
 800f29e:	e7f3      	b.n	800f288 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f2a0:	d201      	bcs.n	800f2a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f2a2:	b281      	uxth	r1, r0
 800f2a4:	e7f0      	b.n	800f288 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f2a6:	442a      	add	r2, r5
 800f2a8:	8850      	ldrh	r0, [r2, #2]
 800f2aa:	bd70      	pop	{r4, r5, r6, pc}
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e7fc      	b.n	800f2aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f2b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	260b      	movs	r6, #11
 800f2ba:	886f      	ldrh	r7, [r5, #2]
 800f2bc:	087f      	lsrs	r7, r7, #1
 800f2be:	3e01      	subs	r6, #1
 800f2c0:	d013      	beq.n	800f2ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	4639      	mov	r1, r7
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f2ce:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800f2d2:	4643      	mov	r3, r8
 800f2d4:	f7ff ffce 	bl	800f274 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f2d8:	b138      	cbz	r0, 800f2ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2da:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f2de:	4642      	mov	r2, r8
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f7ff ff93 	bl	800f20c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d1e9      	bne.n	800f2be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f2f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f2f0:	b570      	push	{r4, r5, r6, lr}
 800f2f2:	694a      	ldr	r2, [r1, #20]
 800f2f4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f2f6:	684b      	ldr	r3, [r1, #4]
 800f2f8:	1b54      	subs	r4, r2, r5
 800f2fa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800f2fc:	f000 8106 	beq.w	800f50c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f300:	1b9b      	subs	r3, r3, r6
 800f302:	d003      	beq.n	800f30c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f304:	4363      	muls	r3, r4
 800f306:	2210      	movs	r2, #16
 800f308:	fb93 f3f2 	sdiv	r3, r3, r2
 800f30c:	680c      	ldr	r4, [r1, #0]
 800f30e:	698a      	ldr	r2, [r1, #24]
 800f310:	1b65      	subs	r5, r4, r5
 800f312:	f000 80fd 	beq.w	800f510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f316:	1b92      	subs	r2, r2, r6
 800f318:	d003      	beq.n	800f322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f31a:	436a      	muls	r2, r5
 800f31c:	2410      	movs	r4, #16
 800f31e:	fb92 f2f4 	sdiv	r2, r2, r4
 800f322:	1a9b      	subs	r3, r3, r2
 800f324:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800f54c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f32c:	460a      	mov	r2, r1
 800f32e:	ee07 3a90 	vmov	s15, r3
 800f332:	f100 040c 	add.w	r4, r0, #12
 800f336:	4603      	mov	r3, r0
 800f338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f33c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f340:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f344:	eeb1 6a43 	vneg.f32	s12, s6
 800f348:	edd2 7a02 	vldr	s15, [r2, #8]
 800f34c:	3214      	adds	r2, #20
 800f34e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f352:	ece3 6a01 	vstmia	r3!, {s13}
 800f356:	429c      	cmp	r4, r3
 800f358:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f35c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f360:	edc3 7a02 	vstr	s15, [r3, #8]
 800f364:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f36c:	edc3 7a05 	vstr	s15, [r3, #20]
 800f370:	d1ea      	bne.n	800f348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f372:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f374:	698b      	ldr	r3, [r1, #24]
 800f376:	edd0 4a02 	vldr	s9, [r0, #8]
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	edd0 3a00 	vldr	s7, [r0]
 800f380:	edd0 6a01 	vldr	s13, [r0, #4]
 800f384:	ee07 3a90 	vmov	s15, r3
 800f388:	684b      	ldr	r3, [r1, #4]
 800f38a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f38e:	ed90 5a05 	vldr	s10, [r0, #20]
 800f392:	1a9b      	subs	r3, r3, r2
 800f394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f398:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f39c:	ed90 2a03 	vldr	s4, [r0, #12]
 800f3a0:	ee07 3a10 	vmov	s14, r3
 800f3a4:	edd0 5a04 	vldr	s11, [r0, #16]
 800f3a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f3ac:	ed90 1a07 	vldr	s2, [r0, #28]
 800f3b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3b4:	edd0 2a06 	vldr	s5, [r0, #24]
 800f3b8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f3bc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f3c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3c4:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f3c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f3cc:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f3d0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800f3d4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f3d6:	694a      	ldr	r2, [r1, #20]
 800f3d8:	1b13      	subs	r3, r2, r4
 800f3da:	ee07 3a10 	vmov	s14, r3
 800f3de:	680b      	ldr	r3, [r1, #0]
 800f3e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3e4:	1b1b      	subs	r3, r3, r4
 800f3e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3ea:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f3ee:	ee07 3a10 	vmov	s14, r3
 800f3f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3fa:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f3fe:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f402:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800f406:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f408:	698b      	ldr	r3, [r1, #24]
 800f40a:	1a9b      	subs	r3, r3, r2
 800f40c:	ee06 3a90 	vmov	s13, r3
 800f410:	684b      	ldr	r3, [r1, #4]
 800f412:	1a9b      	subs	r3, r3, r2
 800f414:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f418:	ee07 3a10 	vmov	s14, r3
 800f41c:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f424:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f428:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f42c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f430:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f434:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800f438:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f43a:	694a      	ldr	r2, [r1, #20]
 800f43c:	1b13      	subs	r3, r2, r4
 800f43e:	ee07 3a10 	vmov	s14, r3
 800f442:	680b      	ldr	r3, [r1, #0]
 800f444:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f448:	1b1b      	subs	r3, r3, r4
 800f44a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f44e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f452:	ee07 3a10 	vmov	s14, r3
 800f456:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f45a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f45e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f462:	edd0 5a08 	vldr	s11, [r0, #32]
 800f466:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f46a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f46e:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f472:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800f476:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f478:	698b      	ldr	r3, [r1, #24]
 800f47a:	1a9b      	subs	r3, r3, r2
 800f47c:	ee07 3a10 	vmov	s14, r3
 800f480:	684b      	ldr	r3, [r1, #4]
 800f482:	1a9b      	subs	r3, r3, r2
 800f484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f488:	ee01 3a90 	vmov	s3, r3
 800f48c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f490:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f494:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f498:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f49c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f4a0:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f4a4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f4a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f4aa:	694a      	ldr	r2, [r1, #20]
 800f4ac:	1b13      	subs	r3, r2, r4
 800f4ae:	ee03 3a10 	vmov	s6, r3
 800f4b2:	680b      	ldr	r3, [r1, #0]
 800f4b4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f4b8:	1b1b      	subs	r3, r3, r4
 800f4ba:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f4be:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f4c2:	ee03 3a10 	vmov	s6, r3
 800f4c6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f4ca:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f4ce:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f4d2:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f4d6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f4da:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800f4de:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f4e2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ea:	dd13      	ble.n	800f514 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f4ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4f0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f4f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f4f6:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f4fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f502:	dd15      	ble.n	800f530 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f508:	6403      	str	r3, [r0, #64]	; 0x40
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	4623      	mov	r3, r4
 800f50e:	e6fd      	b.n	800f30c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f510:	462a      	mov	r2, r5
 800f512:	e706      	b.n	800f322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f514:	d502      	bpl.n	800f51c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f516:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f51a:	e7e9      	b.n	800f4f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f51c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f520:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f524:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52c:	dade      	bge.n	800f4ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f52e:	e7f2      	b.n	800f516 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f530:	d502      	bpl.n	800f538 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f532:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f536:	e7e7      	b.n	800f508 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f538:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f53c:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f540:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	dadc      	bge.n	800f504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f54a:	e7f2      	b.n	800f532 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f54c:	3d800000 	.word	0x3d800000

0800f550 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f554:	2714      	movs	r7, #20
 800f556:	435f      	muls	r7, r3
 800f558:	eb02 0c07 	add.w	ip, r2, r7
 800f55c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f560:	f115 0e0f 	adds.w	lr, r5, #15
 800f564:	f100 80a2 	bmi.w	800f6ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f568:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f56c:	9c08      	ldr	r4, [sp, #32]
 800f56e:	2614      	movs	r6, #20
 800f570:	f8c0 e014 	str.w	lr, [r0, #20]
 800f574:	4366      	muls	r6, r4
 800f576:	eb02 0806 	add.w	r8, r2, r6
 800f57a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f57e:	f115 040f 	adds.w	r4, r5, #15
 800f582:	f100 809f 	bmi.w	800f6c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f586:	1124      	asrs	r4, r4, #4
 800f588:	eba4 040e 	sub.w	r4, r4, lr
 800f58c:	6184      	str	r4, [r0, #24]
 800f58e:	2c00      	cmp	r4, #0
 800f590:	f000 808a 	beq.w	800f6a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f594:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f598:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f59c:	5995      	ldr	r5, [r2, r6]
 800f59e:	eba4 0809 	sub.w	r8, r4, r9
 800f5a2:	59d4      	ldr	r4, [r2, r7]
 800f5a4:	eba5 0a04 	sub.w	sl, r5, r4
 800f5a8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f5ac:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f5b0:	fb0e fe05 	mul.w	lr, lr, r5
 800f5b4:	fb0a ee19 	mls	lr, sl, r9, lr
 800f5b8:	fb08 e404 	mla	r4, r8, r4, lr
 800f5bc:	3c01      	subs	r4, #1
 800f5be:	19a4      	adds	r4, r4, r6
 800f5c0:	f100 808c 	bmi.w	800f6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f5c4:	fb94 fef6 	sdiv	lr, r4, r6
 800f5c8:	fb06 441e 	mls	r4, r6, lr, r4
 800f5cc:	f8c0 e000 	str.w	lr, [r0]
 800f5d0:	6104      	str	r4, [r0, #16]
 800f5d2:	2d00      	cmp	r5, #0
 800f5d4:	f2c0 8095 	blt.w	800f702 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f5d8:	fb95 f4f6 	sdiv	r4, r5, r6
 800f5dc:	fb06 5514 	mls	r5, r6, r4, r5
 800f5e0:	6044      	str	r4, [r0, #4]
 800f5e2:	6085      	str	r5, [r0, #8]
 800f5e4:	60c6      	str	r6, [r0, #12]
 800f5e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f5ea:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f5ee:	6945      	ldr	r5, [r0, #20]
 800f5f0:	59d2      	ldr	r2, [r2, r7]
 800f5f2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f5f6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800f724 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f5fa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f5fe:	ee07 4a10 	vmov	s14, r4
 800f602:	6804      	ldr	r4, [r0, #0]
 800f604:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f60c:	ee07 2a90 	vmov	s15, r2
 800f610:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f61c:	edd3 6a00 	vldr	s13, [r3]
 800f620:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f624:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800f628:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f62c:	edc0 6a07 	vstr	s13, [r0, #28]
 800f630:	edd0 6a01 	vldr	s13, [r0, #4]
 800f634:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800f638:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f63c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f640:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f644:	ed80 6a08 	vstr	s12, [r0, #32]
 800f648:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800f64a:	6242      	str	r2, [r0, #36]	; 0x24
 800f64c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800f650:	ed93 6a03 	vldr	s12, [r3, #12]
 800f654:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f658:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f65c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f660:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800f664:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f668:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800f66c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f670:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800f674:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f676:	6302      	str	r2, [r0, #48]	; 0x30
 800f678:	ed93 6a06 	vldr	s12, [r3, #24]
 800f67c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800f680:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f684:	eeb0 7a46 	vmov.f32	s14, s12
 800f688:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800f68c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f690:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f694:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f698:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800f69c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f6a0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800f6a4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f6a6:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ac:	2410      	movs	r4, #16
 800f6ae:	f1c5 0501 	rsb	r5, r5, #1
 800f6b2:	fb9e fef4 	sdiv	lr, lr, r4
 800f6b6:	f015 050f 	ands.w	r5, r5, #15
 800f6ba:	bf18      	it	ne
 800f6bc:	2501      	movne	r5, #1
 800f6be:	ebae 0e05 	sub.w	lr, lr, r5
 800f6c2:	e753      	b.n	800f56c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f6c4:	f04f 0910 	mov.w	r9, #16
 800f6c8:	f1c5 0501 	rsb	r5, r5, #1
 800f6cc:	fb94 f4f9 	sdiv	r4, r4, r9
 800f6d0:	f015 050f 	ands.w	r5, r5, #15
 800f6d4:	bf18      	it	ne
 800f6d6:	2501      	movne	r5, #1
 800f6d8:	1b64      	subs	r4, r4, r5
 800f6da:	e755      	b.n	800f588 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f6dc:	4264      	negs	r4, r4
 800f6de:	fb94 fef6 	sdiv	lr, r4, r6
 800f6e2:	f1ce 0800 	rsb	r8, lr, #0
 800f6e6:	fb06 441e 	mls	r4, r6, lr, r4
 800f6ea:	f8c0 8000 	str.w	r8, [r0]
 800f6ee:	6104      	str	r4, [r0, #16]
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	f43f af6e 	beq.w	800f5d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f6f6:	ea6f 0e0e 	mvn.w	lr, lr
 800f6fa:	1b34      	subs	r4, r6, r4
 800f6fc:	f8c0 e000 	str.w	lr, [r0]
 800f700:	e766      	b.n	800f5d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f702:	426d      	negs	r5, r5
 800f704:	fb95 f4f6 	sdiv	r4, r5, r6
 800f708:	f1c4 0e00 	rsb	lr, r4, #0
 800f70c:	fb06 5514 	mls	r5, r6, r4, r5
 800f710:	f8c0 e004 	str.w	lr, [r0, #4]
 800f714:	6085      	str	r5, [r0, #8]
 800f716:	2d00      	cmp	r5, #0
 800f718:	f43f af64 	beq.w	800f5e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f71c:	43e4      	mvns	r4, r4
 800f71e:	1b75      	subs	r5, r6, r5
 800f720:	6044      	str	r4, [r0, #4]
 800f722:	e75e      	b.n	800f5e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f724:	3d800000 	.word	0x3d800000

0800f728 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800f728:	4b01      	ldr	r3, [pc, #4]	; (800f730 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800f72a:	6018      	str	r0, [r3, #0]
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	2400ae6c 	.word	0x2400ae6c

0800f734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800f734:	4b06      	ldr	r3, [pc, #24]	; (800f750 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800f736:	881a      	ldrh	r2, [r3, #0]
 800f738:	4282      	cmp	r2, r0
 800f73a:	d807      	bhi.n	800f74c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800f73c:	4b05      	ldr	r3, [pc, #20]	; (800f754 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800f73e:	881b      	ldrh	r3, [r3, #0]
 800f740:	4413      	add	r3, r2
 800f742:	4298      	cmp	r0, r3
 800f744:	bfac      	ite	ge
 800f746:	2000      	movge	r0, #0
 800f748:	2001      	movlt	r0, #1
 800f74a:	4770      	bx	lr
 800f74c:	2000      	movs	r0, #0
 800f74e:	4770      	bx	lr
 800f750:	2400ae8c 	.word	0x2400ae8c
 800f754:	2400ae90 	.word	0x2400ae90

0800f758 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800f758:	b508      	push	{r3, lr}
 800f75a:	4601      	mov	r1, r0
 800f75c:	f7ff ffea 	bl	800f734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f760:	b118      	cbz	r0, 800f76a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800f762:	4b02      	ldr	r3, [pc, #8]	; (800f76c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800f76a:	bd08      	pop	{r3, pc}
 800f76c:	2400ae70 	.word	0x2400ae70

0800f770 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4604      	mov	r4, r0
 800f774:	f7ff ffde 	bl	800f734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f778:	b188      	cbz	r0, 800f79e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 800f77a:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 800f77c:	881a      	ldrh	r2, [r3, #0]
 800f77e:	4b09      	ldr	r3, [pc, #36]	; (800f7a4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 800f780:	1aa4      	subs	r4, r4, r2
 800f782:	220e      	movs	r2, #14
 800f784:	681d      	ldr	r5, [r3, #0]
 800f786:	4362      	muls	r2, r4
 800f788:	18ac      	adds	r4, r5, r2
 800f78a:	7b23      	ldrb	r3, [r4, #12]
 800f78c:	f013 0320 	ands.w	r3, r3, #32
 800f790:	bf17      	itett	ne
 800f792:	680b      	ldrne	r3, [r1, #0]
 800f794:	4618      	moveq	r0, r3
 800f796:	50ab      	strne	r3, [r5, r2]
 800f798:	684b      	ldrne	r3, [r1, #4]
 800f79a:	bf18      	it	ne
 800f79c:	6063      	strne	r3, [r4, #4]
 800f79e:	bd38      	pop	{r3, r4, r5, pc}
 800f7a0:	2400ae8c 	.word	0x2400ae8c
 800f7a4:	2400ae74 	.word	0x2400ae74

0800f7a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 800f7a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	f7ff ffc0 	bl	800f734 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f7b4:	b918      	cbnz	r0, 800f7be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	b002      	add	sp, #8
 800f7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7be:	4608      	mov	r0, r1
 800f7c0:	f7fb fb93 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1f6      	bne.n	800f7b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7c8:	4b3f      	ldr	r3, [pc, #252]	; (800f8c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 800f7ca:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f8cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 800f7ce:	881d      	ldrh	r5, [r3, #0]
 800f7d0:	f8d9 a000 	ldr.w	sl, [r9]
 800f7d4:	46c8      	mov	r8, r9
 800f7d6:	1b73      	subs	r3, r6, r5
 800f7d8:	250e      	movs	r5, #14
 800f7da:	435d      	muls	r5, r3
 800f7dc:	eb0a 0705 	add.w	r7, sl, r5
 800f7e0:	7b3b      	ldrb	r3, [r7, #12]
 800f7e2:	f013 0f20 	tst.w	r3, #32
 800f7e6:	d0e6      	beq.n	800f7b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	f7fd fc42 	bl	800d074 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d1e1      	bne.n	800f7b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f7fd fc3c 	bl	800d074 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f7fc:	b108      	cbz	r0, 800f802 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 800f7fe:	4621      	mov	r1, r4
 800f800:	e020      	b.n	800f844 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 800f802:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f806:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d11e      	bne.n	800f84c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f80e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f812:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f816:	429a      	cmp	r2, r3
 800f818:	d118      	bne.n	800f84c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f81a:	6820      	ldr	r0, [r4, #0]
 800f81c:	466b      	mov	r3, sp
 800f81e:	6861      	ldr	r1, [r4, #4]
 800f820:	c303      	stmia	r3!, {r0, r1}
 800f822:	4639      	mov	r1, r7
 800f824:	4668      	mov	r0, sp
 800f826:	f7fd fc4b 	bl	800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f82a:	f8d9 3000 	ldr.w	r3, [r9]
 800f82e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f832:	442b      	add	r3, r5
 800f834:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f838:	4413      	add	r3, r2
 800f83a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800f83e:	4293      	cmp	r3, r2
 800f840:	dc04      	bgt.n	800f84c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f842:	4669      	mov	r1, sp
 800f844:	4630      	mov	r0, r6
 800f846:	f7ff ff93 	bl	800f770 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 800f84a:	e7b5      	b.n	800f7b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f84c:	f8d8 3000 	ldr.w	r3, [r8]
 800f850:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f854:	442b      	add	r3, r5
 800f856:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f85a:	4291      	cmp	r1, r2
 800f85c:	d119      	bne.n	800f892 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f85e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f862:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f866:	4291      	cmp	r1, r2
 800f868:	d113      	bne.n	800f892 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f86a:	6820      	ldr	r0, [r4, #0]
 800f86c:	466a      	mov	r2, sp
 800f86e:	6861      	ldr	r1, [r4, #4]
 800f870:	c203      	stmia	r2!, {r0, r1}
 800f872:	4619      	mov	r1, r3
 800f874:	4668      	mov	r0, sp
 800f876:	f7fd fc23 	bl	800d0c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f87a:	f8d8 3000 	ldr.w	r3, [r8]
 800f87e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f882:	442b      	add	r3, r5
 800f884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f888:	4413      	add	r3, r2
 800f88a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800f88e:	4293      	cmp	r3, r2
 800f890:	ddd7      	ble.n	800f842 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 800f892:	4620      	mov	r0, r4
 800f894:	f7fb fb29 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800f898:	b990      	cbnz	r0, 800f8c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 800f89a:	88a7      	ldrh	r7, [r4, #4]
 800f89c:	88e3      	ldrh	r3, [r4, #6]
 800f89e:	fb17 f703 	smulbb	r7, r7, r3
 800f8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8a6:	441d      	add	r5, r3
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7fb fb1e 	bl	800aeea <_ZNK8touchgfx4Rect7isEmptyEv>
 800f8ae:	b948      	cbnz	r0, 800f8c4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 800f8b0:	88ab      	ldrh	r3, [r5, #4]
 800f8b2:	88ea      	ldrh	r2, [r5, #6]
 800f8b4:	fb13 f302 	smulbb	r3, r3, r2
 800f8b8:	42bb      	cmp	r3, r7
 800f8ba:	f6bf af7c 	bge.w	800f7b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f8be:	e79e      	b.n	800f7fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 800f8c0:	2700      	movs	r7, #0
 800f8c2:	e7ee      	b.n	800f8a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	e7f7      	b.n	800f8b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 800f8c8:	2400ae8c 	.word	0x2400ae8c
 800f8cc:	2400ae74 	.word	0x2400ae74

0800f8d0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8d2:	4c24      	ldr	r4, [pc, #144]	; (800f964 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800f8d4:	6823      	ldr	r3, [r4, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d042      	beq.n	800f960 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f8da:	4a23      	ldr	r2, [pc, #140]	; (800f968 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800f8dc:	4d23      	ldr	r5, [pc, #140]	; (800f96c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800f8de:	8811      	ldrh	r1, [r2, #0]
 800f8e0:	f8b5 c000 	ldrh.w	ip, [r5]
 800f8e4:	4822      	ldr	r0, [pc, #136]	; (800f970 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800f8e6:	4461      	add	r1, ip
 800f8e8:	1c4a      	adds	r2, r1, #1
 800f8ea:	008f      	lsls	r7, r1, #2
 800f8ec:	f022 0201 	bic.w	r2, r2, #1
 800f8f0:	19de      	adds	r6, r3, r7
 800f8f2:	0412      	lsls	r2, r2, #16
 800f8f4:	6006      	str	r6, [r0, #0]
 800f8f6:	4e1f      	ldr	r6, [pc, #124]	; (800f974 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800f8f8:	0c12      	lsrs	r2, r2, #16
 800f8fa:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800f8fe:	19da      	adds	r2, r3, r7
 800f900:	6032      	str	r2, [r6, #0]
 800f902:	220e      	movs	r2, #14
 800f904:	fb02 f20c 	mul.w	r2, r2, ip
 800f908:	3203      	adds	r2, #3
 800f90a:	f022 0203 	bic.w	r2, r2, #3
 800f90e:	443a      	add	r2, r7
 800f910:	4f19      	ldr	r7, [pc, #100]	; (800f978 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800f912:	4413      	add	r3, r2
 800f914:	603b      	str	r3, [r7, #0]
 800f916:	2300      	movs	r3, #0
 800f918:	4f18      	ldr	r7, [pc, #96]	; (800f97c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800f91a:	469c      	mov	ip, r3
 800f91c:	803b      	strh	r3, [r7, #0]
 800f91e:	4f18      	ldr	r7, [pc, #96]	; (800f980 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800f920:	683f      	ldr	r7, [r7, #0]
 800f922:	1aba      	subs	r2, r7, r2
 800f924:	4f17      	ldr	r7, [pc, #92]	; (800f984 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800f926:	603a      	str	r2, [r7, #0]
 800f928:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800f92c:	4a16      	ldr	r2, [pc, #88]	; (800f988 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800f92e:	8013      	strh	r3, [r2, #0]
 800f930:	428b      	cmp	r3, r1
 800f932:	d10d      	bne.n	800f950 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800f934:	882d      	ldrh	r5, [r5, #0]
 800f936:	2300      	movs	r3, #0
 800f938:	6830      	ldr	r0, [r6, #0]
 800f93a:	240e      	movs	r4, #14
 800f93c:	429d      	cmp	r5, r3
 800f93e:	d90f      	bls.n	800f960 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f940:	fb04 0203 	mla	r2, r4, r3, r0
 800f944:	3301      	adds	r3, #1
 800f946:	7b11      	ldrb	r1, [r2, #12]
 800f948:	f36f 1145 	bfc	r1, #5, #1
 800f94c:	7311      	strb	r1, [r2, #12]
 800f94e:	e7f5      	b.n	800f93c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800f950:	6822      	ldr	r2, [r4, #0]
 800f952:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800f956:	6802      	ldr	r2, [r0, #0]
 800f958:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800f95c:	3301      	adds	r3, #1
 800f95e:	e7e7      	b.n	800f930 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800f960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f962:	bf00      	nop
 800f964:	2400ae70 	.word	0x2400ae70
 800f968:	2400ae8c 	.word	0x2400ae8c
 800f96c:	2400ae90 	.word	0x2400ae90
 800f970:	2400ae84 	.word	0x2400ae84
 800f974:	2400ae74 	.word	0x2400ae74
 800f978:	2400ae7c 	.word	0x2400ae7c
 800f97c:	2400ae8e 	.word	0x2400ae8e
 800f980:	2400ae78 	.word	0x2400ae78
 800f984:	2400ae88 	.word	0x2400ae88
 800f988:	2400ae80 	.word	0x2400ae80

0800f98c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800f98c:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	b943      	cbnz	r3, 800f9a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f992:	b139      	cbz	r1, 800f9a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f994:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800f996:	801a      	strh	r2, [r3, #0]
 800f998:	4b05      	ldr	r3, [pc, #20]	; (800f9b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800f99a:	6019      	str	r1, [r3, #0]
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800f99e:	6018      	str	r0, [r3, #0]
 800f9a0:	f7ff bf96 	b.w	800f8d0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	2400ae7c 	.word	0x2400ae7c
 800f9ac:	2400ae90 	.word	0x2400ae90
 800f9b0:	2400ae78 	.word	0x2400ae78
 800f9b4:	2400ae70 	.word	0x2400ae70

0800f9b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800f9b8:	b470      	push	{r4, r5, r6}
 800f9ba:	4c07      	ldr	r4, [pc, #28]	; (800f9d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800f9bc:	4605      	mov	r5, r0
 800f9be:	4610      	mov	r0, r2
 800f9c0:	9a03      	ldr	r2, [sp, #12]
 800f9c2:	6826      	ldr	r6, [r4, #0]
 800f9c4:	b936      	cbnz	r6, 800f9d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800f9c6:	6025      	str	r5, [r4, #0]
 800f9c8:	4c04      	ldr	r4, [pc, #16]	; (800f9dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800f9ca:	8021      	strh	r1, [r4, #0]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	bc70      	pop	{r4, r5, r6}
 800f9d0:	f7ff bfdc 	b.w	800f98c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800f9d4:	bc70      	pop	{r4, r5, r6}
 800f9d6:	4770      	bx	lr
 800f9d8:	2400ae94 	.word	0x2400ae94
 800f9dc:	2400ae8c 	.word	0x2400ae8c

0800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800f9e0:	4a12      	ldr	r2, [pc, #72]	; (800fa2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800f9e2:	8803      	ldrh	r3, [r0, #0]
 800f9e4:	8812      	ldrh	r2, [r2, #0]
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d207      	bcs.n	800f9fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800f9ea:	4a11      	ldr	r2, [pc, #68]	; (800fa30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800f9ec:	2114      	movs	r1, #20
 800f9ee:	6812      	ldr	r2, [r2, #0]
 800f9f0:	fb01 2303 	mla	r3, r1, r3, r2
 800f9f4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800f9f8:	4770      	bx	lr
 800f9fa:	490e      	ldr	r1, [pc, #56]	; (800fa34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800f9fc:	8809      	ldrh	r1, [r1, #0]
 800f9fe:	4411      	add	r1, r2
 800fa00:	428b      	cmp	r3, r1
 800fa02:	da04      	bge.n	800fa0e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800fa04:	1a9b      	subs	r3, r3, r2
 800fa06:	4a0c      	ldr	r2, [pc, #48]	; (800fa38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800fa08:	210e      	movs	r1, #14
 800fa0a:	6812      	ldr	r2, [r2, #0]
 800fa0c:	e7f0      	b.n	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800fa0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d108      	bne.n	800fa28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800fa16:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	b91b      	cbnz	r3, 800fa24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800fa1c:	4b08      	ldr	r3, [pc, #32]	; (800fa40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800fa1e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa22:	4770      	bx	lr
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800fa26:	e7fa      	b.n	800fa1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800fa28:	2000      	movs	r0, #0
 800fa2a:	4770      	bx	lr
 800fa2c:	2400ae8c 	.word	0x2400ae8c
 800fa30:	2400ae94 	.word	0x2400ae94
 800fa34:	2400ae90 	.word	0x2400ae90
 800fa38:	2400ae74 	.word	0x2400ae74
 800fa3c:	2400ae04 	.word	0x2400ae04
 800fa40:	2400ae06 	.word	0x2400ae06
 800fa44:	2400ae08 	.word	0x2400ae08

0800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800fa48:	4a12      	ldr	r2, [pc, #72]	; (800fa94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800fa4a:	8803      	ldrh	r3, [r0, #0]
 800fa4c:	8812      	ldrh	r2, [r2, #0]
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d207      	bcs.n	800fa62 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800fa52:	4a11      	ldr	r2, [pc, #68]	; (800fa98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800fa54:	2114      	movs	r1, #20
 800fa56:	6812      	ldr	r2, [r2, #0]
 800fa58:	fb01 2303 	mla	r3, r1, r3, r2
 800fa5c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800fa60:	4770      	bx	lr
 800fa62:	490e      	ldr	r1, [pc, #56]	; (800fa9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800fa64:	8809      	ldrh	r1, [r1, #0]
 800fa66:	4411      	add	r1, r2
 800fa68:	428b      	cmp	r3, r1
 800fa6a:	da04      	bge.n	800fa76 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800fa6c:	1a9b      	subs	r3, r3, r2
 800fa6e:	4a0c      	ldr	r2, [pc, #48]	; (800faa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800fa70:	210e      	movs	r1, #14
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	e7f0      	b.n	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800fa76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d108      	bne.n	800fa90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800fa7e:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	b91b      	cbnz	r3, 800fa8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800fa84:	4b08      	ldr	r3, [pc, #32]	; (800faa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800fa86:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa8a:	4770      	bx	lr
 800fa8c:	4b07      	ldr	r3, [pc, #28]	; (800faac <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800fa8e:	e7fa      	b.n	800fa86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800fa90:	2000      	movs	r0, #0
 800fa92:	4770      	bx	lr
 800fa94:	2400ae8c 	.word	0x2400ae8c
 800fa98:	2400ae94 	.word	0x2400ae94
 800fa9c:	2400ae90 	.word	0x2400ae90
 800faa0:	2400ae74 	.word	0x2400ae74
 800faa4:	2400ae04 	.word	0x2400ae04
 800faa8:	2400ae08 	.word	0x2400ae08
 800faac:	2400ae06 	.word	0x2400ae06

0800fab0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800fab0:	4a1f      	ldr	r2, [pc, #124]	; (800fb30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 800fab2:	b510      	push	{r4, lr}
 800fab4:	880b      	ldrh	r3, [r1, #0]
 800fab6:	8812      	ldrh	r2, [r2, #0]
 800fab8:	4293      	cmp	r3, r2
 800faba:	d213      	bcs.n	800fae4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800fabc:	4a1d      	ldr	r2, [pc, #116]	; (800fb34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 800fabe:	2114      	movs	r1, #20
 800fac0:	6812      	ldr	r2, [r2, #0]
 800fac2:	fb01 2303 	mla	r3, r1, r3, r2
 800fac6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800faca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800face:	8a1a      	ldrh	r2, [r3, #16]
 800fad0:	8a5b      	ldrh	r3, [r3, #18]
 800fad2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fad6:	8004      	strh	r4, [r0, #0]
 800fad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fadc:	8041      	strh	r1, [r0, #2]
 800fade:	8082      	strh	r2, [r0, #4]
 800fae0:	80c3      	strh	r3, [r0, #6]
 800fae2:	e00e      	b.n	800fb02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800fae4:	4914      	ldr	r1, [pc, #80]	; (800fb38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 800fae6:	8809      	ldrh	r1, [r1, #0]
 800fae8:	4411      	add	r1, r2
 800faea:	428b      	cmp	r3, r1
 800faec:	da0a      	bge.n	800fb04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 800faee:	1a9b      	subs	r3, r3, r2
 800faf0:	4a12      	ldr	r2, [pc, #72]	; (800fb3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800faf2:	210e      	movs	r1, #14
 800faf4:	6812      	ldr	r2, [r2, #0]
 800faf6:	fb01 2303 	mla	r3, r1, r3, r2
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	6002      	str	r2, [r0, #0]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	6042      	str	r2, [r0, #4]
 800fb02:	bd10      	pop	{r4, pc}
 800fb04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d10b      	bne.n	800fb24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 800fb0c:	4b0c      	ldr	r3, [pc, #48]	; (800fb40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800fb0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fb12:	4b0c      	ldr	r3, [pc, #48]	; (800fb44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800fb14:	8081      	strh	r1, [r0, #4]
 800fb16:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	80c2      	strh	r2, [r0, #6]
 800fb1e:	8003      	strh	r3, [r0, #0]
 800fb20:	8043      	strh	r3, [r0, #2]
 800fb22:	e7ee      	b.n	800fb02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800fb24:	2300      	movs	r3, #0
 800fb26:	8003      	strh	r3, [r0, #0]
 800fb28:	8043      	strh	r3, [r0, #2]
 800fb2a:	8083      	strh	r3, [r0, #4]
 800fb2c:	e7d8      	b.n	800fae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fb2e:	bf00      	nop
 800fb30:	2400ae8c 	.word	0x2400ae8c
 800fb34:	2400ae94 	.word	0x2400ae94
 800fb38:	2400ae90 	.word	0x2400ae90
 800fb3c:	2400ae74 	.word	0x2400ae74
 800fb40:	2400ae00 	.word	0x2400ae00
 800fb44:	2400ae02 	.word	0x2400ae02

0800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800fb48:	4a12      	ldr	r2, [pc, #72]	; (800fb94 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800fb4a:	8803      	ldrh	r3, [r0, #0]
 800fb4c:	8811      	ldrh	r1, [r2, #0]
 800fb4e:	428b      	cmp	r3, r1
 800fb50:	d20b      	bcs.n	800fb6a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800fb52:	4a11      	ldr	r2, [pc, #68]	; (800fb98 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb54:	6812      	ldr	r2, [r2, #0]
 800fb56:	b112      	cbz	r2, 800fb5e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800fb58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb5c:	b9c0      	cbnz	r0, 800fb90 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800fb5e:	4a0f      	ldr	r2, [pc, #60]	; (800fb9c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800fb60:	6811      	ldr	r1, [r2, #0]
 800fb62:	2214      	movs	r2, #20
 800fb64:	4353      	muls	r3, r2
 800fb66:	58c8      	ldr	r0, [r1, r3]
 800fb68:	4770      	bx	lr
 800fb6a:	4a0d      	ldr	r2, [pc, #52]	; (800fba0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800fb6c:	8812      	ldrh	r2, [r2, #0]
 800fb6e:	440a      	add	r2, r1
 800fb70:	4293      	cmp	r3, r2
 800fb72:	da04      	bge.n	800fb7e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800fb74:	4a08      	ldr	r2, [pc, #32]	; (800fb98 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb76:	6812      	ldr	r2, [r2, #0]
 800fb78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb7c:	4770      	bx	lr
 800fb7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d103      	bne.n	800fb8e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800fb86:	4b07      	ldr	r3, [pc, #28]	; (800fba4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fb8c:	4770      	bx	lr
 800fb8e:	2000      	movs	r0, #0
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	2400ae8c 	.word	0x2400ae8c
 800fb98:	2400ae70 	.word	0x2400ae70
 800fb9c:	2400ae94 	.word	0x2400ae94
 800fba0:	2400ae90 	.word	0x2400ae90
 800fba4:	2400ae0c 	.word	0x2400ae0c

0800fba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800fba8:	4b24      	ldr	r3, [pc, #144]	; (800fc3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800fbaa:	8802      	ldrh	r2, [r0, #0]
 800fbac:	8818      	ldrh	r0, [r3, #0]
 800fbae:	4282      	cmp	r2, r0
 800fbb0:	d221      	bcs.n	800fbf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800fbb2:	4b23      	ldr	r3, [pc, #140]	; (800fc40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800fbb4:	6819      	ldr	r1, [r3, #0]
 800fbb6:	2314      	movs	r3, #20
 800fbb8:	fb03 1302 	mla	r3, r3, r2, r1
 800fbbc:	6858      	ldr	r0, [r3, #4]
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d03a      	beq.n	800fc38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbc2:	4920      	ldr	r1, [pc, #128]	; (800fc44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fbc4:	6809      	ldr	r1, [r1, #0]
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	d036      	beq.n	800fc38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fbce:	2900      	cmp	r1, #0
 800fbd0:	d032      	beq.n	800fc38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbd2:	891a      	ldrh	r2, [r3, #8]
 800fbd4:	8958      	ldrh	r0, [r3, #10]
 800fbd6:	4350      	muls	r0, r2
 800fbd8:	7c5a      	ldrb	r2, [r3, #17]
 800fbda:	7cdb      	ldrb	r3, [r3, #19]
 800fbdc:	0952      	lsrs	r2, r2, #5
 800fbde:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fbe2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fbe6:	2b0b      	cmp	r3, #11
 800fbe8:	bf18      	it	ne
 800fbea:	0040      	lslne	r0, r0, #1
 800fbec:	3003      	adds	r0, #3
 800fbee:	f020 0003 	bic.w	r0, r0, #3
 800fbf2:	4408      	add	r0, r1
 800fbf4:	4770      	bx	lr
 800fbf6:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	4403      	add	r3, r0
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	da1a      	bge.n	800fc36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800fc02:	1a10      	subs	r0, r2, r0
 800fc04:	210e      	movs	r1, #14
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	fb01 3000 	mla	r0, r1, r0, r3
 800fc0c:	7b03      	ldrb	r3, [r0, #12]
 800fc0e:	f003 031f 	and.w	r3, r3, #31
 800fc12:	2b0b      	cmp	r3, #11
 800fc14:	d10b      	bne.n	800fc2e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800fc16:	8903      	ldrh	r3, [r0, #8]
 800fc18:	8940      	ldrh	r0, [r0, #10]
 800fc1a:	4358      	muls	r0, r3
 800fc1c:	4b09      	ldr	r3, [pc, #36]	; (800fc44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fc1e:	3003      	adds	r0, #3
 800fc20:	6819      	ldr	r1, [r3, #0]
 800fc22:	f020 0303 	bic.w	r3, r0, #3
 800fc26:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800fc2a:	4418      	add	r0, r3
 800fc2c:	4770      	bx	lr
 800fc2e:	2b0d      	cmp	r3, #13
 800fc30:	d101      	bne.n	800fc36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fc32:	300d      	adds	r0, #13
 800fc34:	4770      	bx	lr
 800fc36:	2000      	movs	r0, #0
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	2400ae8c 	.word	0x2400ae8c
 800fc40:	2400ae94 	.word	0x2400ae94
 800fc44:	2400ae70 	.word	0x2400ae70
 800fc48:	2400ae90 	.word	0x2400ae90
 800fc4c:	2400ae74 	.word	0x2400ae74

0800fc50 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800fc50:	4a17      	ldr	r2, [pc, #92]	; (800fcb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800fc52:	b510      	push	{r4, lr}
 800fc54:	8803      	ldrh	r3, [r0, #0]
 800fc56:	8812      	ldrh	r2, [r2, #0]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d20c      	bcs.n	800fc76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800fc5c:	4a15      	ldr	r2, [pc, #84]	; (800fcb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800fc5e:	2114      	movs	r1, #20
 800fc60:	6812      	ldr	r2, [r2, #0]
 800fc62:	fb01 2303 	mla	r3, r1, r3, r2
 800fc66:	7c58      	ldrb	r0, [r3, #17]
 800fc68:	0942      	lsrs	r2, r0, #5
 800fc6a:	7cd8      	ldrb	r0, [r3, #19]
 800fc6c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800fc70:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800fc74:	bd10      	pop	{r4, pc}
 800fc76:	4910      	ldr	r1, [pc, #64]	; (800fcb8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800fc78:	8809      	ldrh	r1, [r1, #0]
 800fc7a:	4411      	add	r1, r2
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	da09      	bge.n	800fc94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800fc80:	1a9b      	subs	r3, r3, r2
 800fc82:	4a0e      	ldr	r2, [pc, #56]	; (800fcbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800fc84:	210e      	movs	r1, #14
 800fc86:	6812      	ldr	r2, [r2, #0]
 800fc88:	fb01 2303 	mla	r3, r1, r3, r2
 800fc8c:	7b18      	ldrb	r0, [r3, #12]
 800fc8e:	f000 001f 	and.w	r0, r0, #31
 800fc92:	e7ef      	b.n	800fc74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fc94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d106      	bne.n	800fcaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800fc9c:	f7fb fbce 	bl	800b43c <_ZN8touchgfx3HAL3lcdEv>
 800fca0:	6803      	ldr	r3, [r0, #0]
 800fca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	4718      	bx	r3
 800fcaa:	2000      	movs	r0, #0
 800fcac:	e7e2      	b.n	800fc74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fcae:	bf00      	nop
 800fcb0:	2400ae8c 	.word	0x2400ae8c
 800fcb4:	2400ae94 	.word	0x2400ae94
 800fcb8:	2400ae90 	.word	0x2400ae90
 800fcbc:	2400ae74 	.word	0x2400ae74

0800fcc0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 800fcc0:	2018      	movs	r0, #24
 800fcc2:	4770      	bx	lr

0800fcc4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 800fcc4:	2001      	movs	r0, #1
 800fcc6:	4770      	bx	lr

0800fcc8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 800fcc8:	4b02      	ldr	r3, [pc, #8]	; (800fcd4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 800fcca:	8818      	ldrh	r0, [r3, #0]
 800fccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fcd0:	b280      	uxth	r0, r0
 800fcd2:	4770      	bx	lr
 800fcd4:	2400ae06 	.word	0x2400ae06

0800fcd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800fcd8:	2bff      	cmp	r3, #255	; 0xff
 800fcda:	d040      	beq.n	800fd5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800fcdc:	2a2c      	cmp	r2, #44	; 0x2c
 800fcde:	d02a      	beq.n	800fd36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 800fce0:	d80f      	bhi.n	800fd02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 800fce2:	2a08      	cmp	r2, #8
 800fce4:	d037      	beq.n	800fd56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fce6:	d805      	bhi.n	800fcf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 800fce8:	2a04      	cmp	r2, #4
 800fcea:	d032      	beq.n	800fd52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 800fcec:	2a05      	cmp	r2, #5
 800fcee:	d02e      	beq.n	800fd4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4770      	bx	lr
 800fcf4:	2a0a      	cmp	r2, #10
 800fcf6:	d02e      	beq.n	800fd56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fcf8:	d301      	bcc.n	800fcfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 800fcfa:	2a0b      	cmp	r2, #11
 800fcfc:	d1f8      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fcfe:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800fd00:	4770      	bx	lr
 800fd02:	2a30      	cmp	r2, #48	; 0x30
 800fd04:	d029      	beq.n	800fd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fd06:	d808      	bhi.n	800fd1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 800fd08:	2a2e      	cmp	r2, #46	; 0x2e
 800fd0a:	684b      	ldr	r3, [r1, #4]
 800fd0c:	d01a      	beq.n	800fd44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 800fd0e:	d90b      	bls.n	800fd28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1ec      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd16:	6a00      	ldr	r0, [r0, #32]
 800fd18:	4770      	bx	lr
 800fd1a:	2a32      	cmp	r2, #50	; 0x32
 800fd1c:	d01d      	beq.n	800fd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fd1e:	d301      	bcc.n	800fd24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 800fd20:	2a33      	cmp	r2, #51	; 0x33
 800fd22:	d1e5      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd24:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800fd26:	4770      	bx	lr
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0f3      	beq.n	800fd16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d1de      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd32:	6900      	ldr	r0, [r0, #16]
 800fd34:	4770      	bx	lr
 800fd36:	684b      	ldr	r3, [r1, #4]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	b133      	cbz	r3, 800fd4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d1d7      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd40:	6880      	ldr	r0, [r0, #8]
 800fd42:	4770      	bx	lr
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d1d2      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd4a:	6980      	ldr	r0, [r0, #24]
 800fd4c:	4770      	bx	lr
 800fd4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fd50:	4770      	bx	lr
 800fd52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fd54:	4770      	bx	lr
 800fd56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fd58:	4770      	bx	lr
 800fd5a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fd5c:	4770      	bx	lr
 800fd5e:	2a2c      	cmp	r2, #44	; 0x2c
 800fd60:	d02a      	beq.n	800fdb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 800fd62:	d80f      	bhi.n	800fd84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 800fd64:	2a08      	cmp	r2, #8
 800fd66:	d035      	beq.n	800fdd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd68:	d805      	bhi.n	800fd76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800fd6a:	2a04      	cmp	r2, #4
 800fd6c:	d030      	beq.n	800fdd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 800fd6e:	2a05      	cmp	r2, #5
 800fd70:	d1be      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fd74:	4770      	bx	lr
 800fd76:	2a0a      	cmp	r2, #10
 800fd78:	d02c      	beq.n	800fdd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd7a:	d301      	bcc.n	800fd80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 800fd7c:	2a0b      	cmp	r2, #11
 800fd7e:	d1b7      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd80:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800fd82:	4770      	bx	lr
 800fd84:	2a30      	cmp	r2, #48	; 0x30
 800fd86:	d027      	beq.n	800fdd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fd88:	d808      	bhi.n	800fd9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 800fd8a:	2a2e      	cmp	r2, #46	; 0x2e
 800fd8c:	684b      	ldr	r3, [r1, #4]
 800fd8e:	d01a      	beq.n	800fdc6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 800fd90:	d90b      	bls.n	800fdaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1ab      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd98:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fd9a:	4770      	bx	lr
 800fd9c:	2a32      	cmp	r2, #50	; 0x32
 800fd9e:	d01b      	beq.n	800fdd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fda0:	d301      	bcc.n	800fda6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 800fda2:	2a33      	cmp	r2, #51	; 0x33
 800fda4:	d1a4      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fda6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800fda8:	4770      	bx	lr
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d0f3      	beq.n	800fd98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d19d      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdb4:	6940      	ldr	r0, [r0, #20]
 800fdb6:	4770      	bx	lr
 800fdb8:	684b      	ldr	r3, [r1, #4]
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	b133      	cbz	r3, 800fdcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d196      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdc2:	68c0      	ldr	r0, [r0, #12]
 800fdc4:	4770      	bx	lr
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d191      	bne.n	800fcf0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdcc:	69c0      	ldr	r0, [r0, #28]
 800fdce:	4770      	bx	lr
 800fdd0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fdd2:	4770      	bx	lr
 800fdd4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800fdd6:	4770      	bx	lr
 800fdd8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800fdda:	4770      	bx	lr

0800fddc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde0:	b085      	sub	sp, #20
 800fde2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fde4:	9203      	str	r2, [sp, #12]
 800fde6:	6870      	ldr	r0, [r6, #4]
 800fde8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800fdec:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800fdf0:	9101      	str	r1, [sp, #4]
 800fdf2:	fa1f f885 	uxth.w	r8, r5
 800fdf6:	43ed      	mvns	r5, r5
 800fdf8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800fdfc:	b2ed      	uxtb	r5, r5
 800fdfe:	fb00 2404 	mla	r4, r0, r4, r2
 800fe02:	6832      	ldr	r2, [r6, #0]
 800fe04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fe08:	4414      	add	r4, r2
 800fe0a:	f8dc 2000 	ldr.w	r2, [ip]
 800fe0e:	9202      	str	r2, [sp, #8]
 800fe10:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800fe14:	f102 0e04 	add.w	lr, r2, #4
 800fe18:	9a01      	ldr	r2, [sp, #4]
 800fe1a:	2a00      	cmp	r2, #0
 800fe1c:	dc03      	bgt.n	800fe26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 800fe1e:	9a03      	ldr	r2, [sp, #12]
 800fe20:	2a00      	cmp	r2, #0
 800fe22:	f340 8116 	ble.w	8010052 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800fe26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe28:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 800fe2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fe30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe32:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 800fe36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	dd0e      	ble.n	800fe5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 800fe3e:	1406      	asrs	r6, r0, #16
 800fe40:	d405      	bmi.n	800fe4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe42:	4556      	cmp	r6, sl
 800fe44:	da03      	bge.n	800fe4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe46:	1416      	asrs	r6, r2, #16
 800fe48:	d401      	bmi.n	800fe4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe4a:	454e      	cmp	r6, r9
 800fe4c:	db07      	blt.n	800fe5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 800fe4e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fe50:	3b01      	subs	r3, #1
 800fe52:	3403      	adds	r4, #3
 800fe54:	4430      	add	r0, r6
 800fe56:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fe58:	4432      	add	r2, r6
 800fe5a:	e7ee      	b.n	800fe3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 800fe5c:	d063      	beq.n	800ff26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800fe5e:	1e5e      	subs	r6, r3, #1
 800fe60:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fe62:	fb07 0706 	mla	r7, r7, r6, r0
 800fe66:	143f      	asrs	r7, r7, #16
 800fe68:	d454      	bmi.n	800ff14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe6a:	4557      	cmp	r7, sl
 800fe6c:	da52      	bge.n	800ff14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe6e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800fe70:	fb07 2606 	mla	r6, r7, r6, r2
 800fe74:	1436      	asrs	r6, r6, #16
 800fe76:	d44d      	bmi.n	800ff14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe78:	454e      	cmp	r6, r9
 800fe7a:	da4b      	bge.n	800ff14 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe7c:	1ce6      	adds	r6, r4, #3
 800fe7e:	4699      	mov	r9, r3
 800fe80:	f1b9 0f00 	cmp.w	r9, #0
 800fe84:	f106 0603 	add.w	r6, r6, #3
 800fe88:	dd48      	ble.n	800ff1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 800fe8a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 800fe8e:	1417      	asrs	r7, r2, #16
 800fe90:	9902      	ldr	r1, [sp, #8]
 800fe92:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800fe96:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe9a:	fb0b 1707 	mla	r7, fp, r7, r1
 800fe9e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 800fea2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fea4:	f817 700a 	ldrb.w	r7, [r7, sl]
 800fea8:	fb1b fb05 	smulbb	fp, fp, r5
 800feac:	4408      	add	r0, r1
 800feae:	9912      	ldr	r1, [sp, #72]	; 0x48
 800feb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800feb4:	440a      	add	r2, r1
 800feb6:	eb0e 0a07 	add.w	sl, lr, r7
 800feba:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800febe:	fb07 b708 	mla	r7, r7, r8, fp
 800fec2:	b2bf      	uxth	r7, r7
 800fec4:	f107 0b01 	add.w	fp, r7, #1
 800fec8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800fecc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 800fed0:	fb1b fb05 	smulbb	fp, fp, r5
 800fed4:	123f      	asrs	r7, r7, #8
 800fed6:	f806 7c06 	strb.w	r7, [r6, #-6]
 800feda:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800fede:	fb07 b708 	mla	r7, r7, r8, fp
 800fee2:	b2bf      	uxth	r7, r7
 800fee4:	f107 0b01 	add.w	fp, r7, #1
 800fee8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800feec:	123f      	asrs	r7, r7, #8
 800feee:	f806 7c05 	strb.w	r7, [r6, #-5]
 800fef2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 800fef6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 800fefa:	fb1a fa05 	smulbb	sl, sl, r5
 800fefe:	fb07 a708 	mla	r7, r7, r8, sl
 800ff02:	b2bf      	uxth	r7, r7
 800ff04:	f107 0a01 	add.w	sl, r7, #1
 800ff08:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 800ff0c:	123f      	asrs	r7, r7, #8
 800ff0e:	f806 7c04 	strb.w	r7, [r6, #-4]
 800ff12:	e7b5      	b.n	800fe80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 800ff14:	2700      	movs	r7, #0
 800ff16:	1bde      	subs	r6, r3, r7
 800ff18:	2e00      	cmp	r6, #0
 800ff1a:	dc42      	bgt.n	800ffa2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 800ff1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff24:	441c      	add	r4, r3
 800ff26:	9b01      	ldr	r3, [sp, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f340 8092 	ble.w	8010052 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800ff2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff34:	ee30 0a04 	vadd.f32	s0, s0, s8
 800ff38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800ff3c:	eef0 6a62 	vmov.f32	s13, s5
 800ff40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff44:	ee31 1a05 	vadd.f32	s2, s2, s10
 800ff48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff4c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 800ff50:	eef0 6a43 	vmov.f32	s13, s6
 800ff54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff58:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800ff5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800ff60:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ff64:	ee77 2a62 	vsub.f32	s5, s14, s5
 800ff68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800ff6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800ff70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800ff74:	ee12 2a90 	vmov	r2, s5
 800ff78:	eef0 2a47 	vmov.f32	s5, s14
 800ff7c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff80:	ee13 2a10 	vmov	r2, s6
 800ff84:	9311      	str	r3, [sp, #68]	; 0x44
 800ff86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff88:	eeb0 3a67 	vmov.f32	s6, s15
 800ff8c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff90:	9312      	str	r3, [sp, #72]	; 0x48
 800ff92:	9b01      	ldr	r3, [sp, #4]
 800ff94:	9a03      	ldr	r2, [sp, #12]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff9c:	bf08      	it	eq
 800ff9e:	4613      	moveq	r3, r2
 800ffa0:	e73a      	b.n	800fe18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800ffa2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 800ffa6:	d44e      	bmi.n	8010046 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffa8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ffac:	4556      	cmp	r6, sl
 800ffae:	dd4a      	ble.n	8010046 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffb0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 800ffb4:	d447      	bmi.n	8010046 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffb6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ffba:	4559      	cmp	r1, fp
 800ffbc:	dd43      	ble.n	8010046 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffbe:	fa0f f986 	sxth.w	r9, r6
 800ffc2:	9902      	ldr	r1, [sp, #8]
 800ffc4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800ffc8:	fb0b 1909 	mla	r9, fp, r9, r1
 800ffcc:	f814 b006 	ldrb.w	fp, [r4, r6]
 800ffd0:	f819 900a 	ldrb.w	r9, [r9, sl]
 800ffd4:	fb1b fb05 	smulbb	fp, fp, r5
 800ffd8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800ffdc:	eb0e 0a09 	add.w	sl, lr, r9
 800ffe0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 800ffe4:	fb09 b908 	mla	r9, r9, r8, fp
 800ffe8:	fa1f f989 	uxth.w	r9, r9
 800ffec:	f109 0b01 	add.w	fp, r9, #1
 800fff0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 800fff4:	ea4f 2929 	mov.w	r9, r9, asr #8
 800fff8:	f804 9006 	strb.w	r9, [r4, r6]
 800fffc:	4426      	add	r6, r4
 800fffe:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010002:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010006:	fb1b fb05 	smulbb	fp, fp, r5
 801000a:	fb09 b908 	mla	r9, r9, r8, fp
 801000e:	fa1f f989 	uxth.w	r9, r9
 8010012:	f109 0b01 	add.w	fp, r9, #1
 8010016:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801001a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801001e:	f886 9001 	strb.w	r9, [r6, #1]
 8010022:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010026:	f896 a002 	ldrb.w	sl, [r6, #2]
 801002a:	fb1a fa05 	smulbb	sl, sl, r5
 801002e:	fb09 a908 	mla	r9, r9, r8, sl
 8010032:	fa1f f989 	uxth.w	r9, r9
 8010036:	f109 0a01 	add.w	sl, r9, #1
 801003a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801003e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010042:	f886 9002 	strb.w	r9, [r6, #2]
 8010046:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010048:	3701      	adds	r7, #1
 801004a:	4408      	add	r0, r1
 801004c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801004e:	440a      	add	r2, r1
 8010050:	e761      	b.n	800ff16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010052:	b005      	add	sp, #20
 8010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010058 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801005e:	4693      	mov	fp, r2
 8010060:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010066:	6868      	ldr	r0, [r5, #4]
 8010068:	6877      	ldr	r7, [r6, #4]
 801006a:	9100      	str	r1, [sp, #0]
 801006c:	3704      	adds	r7, #4
 801006e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010072:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8010076:	fb00 2404 	mla	r4, r0, r4, r2
 801007a:	682a      	ldr	r2, [r5, #0]
 801007c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010080:	4414      	add	r4, r2
 8010082:	6832      	ldr	r2, [r6, #0]
 8010084:	9201      	str	r2, [sp, #4]
 8010086:	9a00      	ldr	r2, [sp, #0]
 8010088:	2a00      	cmp	r2, #0
 801008a:	dc03      	bgt.n	8010094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801008c:	f1bb 0f00 	cmp.w	fp, #0
 8010090:	f340 80bc 	ble.w	801020c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010096:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801009a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801009e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100a0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80100a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	dd0c      	ble.n	80100c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80100ac:	1405      	asrs	r5, r0, #16
 80100ae:	d405      	bmi.n	80100bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100b0:	4555      	cmp	r5, sl
 80100b2:	da03      	bge.n	80100bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100b4:	1415      	asrs	r5, r2, #16
 80100b6:	d401      	bmi.n	80100bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100b8:	454d      	cmp	r5, r9
 80100ba:	db05      	blt.n	80100c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80100bc:	4440      	add	r0, r8
 80100be:	4472      	add	r2, lr
 80100c0:	3b01      	subs	r3, #1
 80100c2:	3403      	adds	r4, #3
 80100c4:	e7f0      	b.n	80100a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80100c6:	d03f      	beq.n	8010148 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80100c8:	1e5d      	subs	r5, r3, #1
 80100ca:	fb08 0c05 	mla	ip, r8, r5, r0
 80100ce:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80100d2:	d42e      	bmi.n	8010132 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100d4:	45d4      	cmp	ip, sl
 80100d6:	da2c      	bge.n	8010132 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100d8:	fb0e 2505 	mla	r5, lr, r5, r2
 80100dc:	142d      	asrs	r5, r5, #16
 80100de:	d428      	bmi.n	8010132 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100e0:	454d      	cmp	r5, r9
 80100e2:	da26      	bge.n	8010132 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100e4:	1ce5      	adds	r5, r4, #3
 80100e6:	469c      	mov	ip, r3
 80100e8:	f1bc 0f00 	cmp.w	ip, #0
 80100ec:	f105 0503 	add.w	r5, r5, #3
 80100f0:	dd25      	ble.n	801013e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80100f2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80100f6:	ea4f 4922 	mov.w	r9, r2, asr #16
 80100fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80100fe:	4472      	add	r2, lr
 8010100:	468a      	mov	sl, r1
 8010102:	9901      	ldr	r1, [sp, #4]
 8010104:	fb0a 1909 	mla	r9, sl, r9, r1
 8010108:	1401      	asrs	r1, r0, #16
 801010a:	4440      	add	r0, r8
 801010c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8010110:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010114:	eb07 0a09 	add.w	sl, r7, r9
 8010118:	f817 9009 	ldrb.w	r9, [r7, r9]
 801011c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8010120:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010124:	f805 9c05 	strb.w	r9, [r5, #-5]
 8010128:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801012c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8010130:	e7da      	b.n	80100e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8010132:	2500      	movs	r5, #0
 8010134:	eba3 0c05 	sub.w	ip, r3, r5
 8010138:	f1bc 0f00 	cmp.w	ip, #0
 801013c:	dc3b      	bgt.n	80101b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801013e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010146:	441c      	add	r4, r3
 8010148:	9b00      	ldr	r3, [sp, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	dd5e      	ble.n	801020c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801014e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010154:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010158:	eeb0 6a62 	vmov.f32	s12, s5
 801015c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010160:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010164:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010168:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801016c:	eeb0 6a43 	vmov.f32	s12, s6
 8010170:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010174:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010178:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801017c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010180:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010184:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010188:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801018c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010190:	ee12 2a90 	vmov	r2, s5
 8010194:	eef0 2a47 	vmov.f32	s5, s14
 8010198:	fb92 f8f3 	sdiv	r8, r2, r3
 801019c:	ee13 2a10 	vmov	r2, s6
 80101a0:	eeb0 3a67 	vmov.f32	s6, s15
 80101a4:	fb92 fef3 	sdiv	lr, r2, r3
 80101a8:	9b00      	ldr	r3, [sp, #0]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101b0:	bf08      	it	eq
 80101b2:	465b      	moveq	r3, fp
 80101b4:	e767      	b.n	8010086 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80101b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80101ba:	d423      	bmi.n	8010204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101bc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80101c0:	45cc      	cmp	ip, r9
 80101c2:	dd1f      	ble.n	8010204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80101c8:	d41c      	bmi.n	8010204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101ca:	68f1      	ldr	r1, [r6, #12]
 80101cc:	4551      	cmp	r1, sl
 80101ce:	dd19      	ble.n	8010204 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101d0:	fa0f fc8c 	sxth.w	ip, ip
 80101d4:	9901      	ldr	r1, [sp, #4]
 80101d6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80101da:	f81c c009 	ldrb.w	ip, [ip, r9]
 80101de:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80101e2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80101e6:	eb07 090c 	add.w	r9, r7, ip
 80101ea:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80101ee:	f804 a00c 	strb.w	sl, [r4, ip]
 80101f2:	44a4      	add	ip, r4
 80101f4:	f899 a001 	ldrb.w	sl, [r9, #1]
 80101f8:	f88c a001 	strb.w	sl, [ip, #1]
 80101fc:	f899 9002 	ldrb.w	r9, [r9, #2]
 8010200:	f88c 9002 	strb.w	r9, [ip, #2]
 8010204:	4440      	add	r0, r8
 8010206:	4472      	add	r2, lr
 8010208:	3501      	adds	r5, #1
 801020a:	e793      	b.n	8010134 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801020c:	b003      	add	sp, #12
 801020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010212 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010216:	b085      	sub	sp, #20
 8010218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801021c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801021e:	9202      	str	r2, [sp, #8]
 8010220:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010224:	6860      	ldr	r0, [r4, #4]
 8010226:	9203      	str	r2, [sp, #12]
 8010228:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801022c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010230:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010234:	fb00 2505 	mla	r5, r0, r5, r2
 8010238:	6822      	ldr	r2, [r4, #0]
 801023a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801023e:	4415      	add	r5, r2
 8010240:	f8dc 2000 	ldr.w	r2, [ip]
 8010244:	9200      	str	r2, [sp, #0]
 8010246:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801024a:	3204      	adds	r2, #4
 801024c:	9201      	str	r2, [sp, #4]
 801024e:	2900      	cmp	r1, #0
 8010250:	dc03      	bgt.n	801025a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010252:	9a02      	ldr	r2, [sp, #8]
 8010254:	2a00      	cmp	r2, #0
 8010256:	f340 8127 	ble.w	80104a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801025a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801025c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010260:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010264:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010266:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801026a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801026e:	2b00      	cmp	r3, #0
 8010270:	dd0d      	ble.n	801028e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010272:	1422      	asrs	r2, r4, #16
 8010274:	d405      	bmi.n	8010282 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010276:	4542      	cmp	r2, r8
 8010278:	da03      	bge.n	8010282 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801027a:	1402      	asrs	r2, r0, #16
 801027c:	d401      	bmi.n	8010282 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801027e:	42ba      	cmp	r2, r7
 8010280:	db06      	blt.n	8010290 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010284:	4474      	add	r4, lr
 8010286:	3b01      	subs	r3, #1
 8010288:	3503      	adds	r5, #3
 801028a:	4410      	add	r0, r2
 801028c:	e7ef      	b.n	801026e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801028e:	d075      	beq.n	801037c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8010290:	1e5a      	subs	r2, r3, #1
 8010292:	fb0e 4602 	mla	r6, lr, r2, r4
 8010296:	1436      	asrs	r6, r6, #16
 8010298:	d465      	bmi.n	8010366 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801029a:	4546      	cmp	r6, r8
 801029c:	da63      	bge.n	8010366 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801029e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80102a0:	fb06 0202 	mla	r2, r6, r2, r0
 80102a4:	1412      	asrs	r2, r2, #16
 80102a6:	d45e      	bmi.n	8010366 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102a8:	42ba      	cmp	r2, r7
 80102aa:	da5c      	bge.n	8010366 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102ac:	1cef      	adds	r7, r5, #3
 80102ae:	4699      	mov	r9, r3
 80102b0:	f1b9 0f00 	cmp.w	r9, #0
 80102b4:	dd5d      	ble.n	8010372 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80102b6:	1402      	asrs	r2, r0, #16
 80102b8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80102bc:	1426      	asrs	r6, r4, #16
 80102be:	4692      	mov	sl, r2
 80102c0:	9a00      	ldr	r2, [sp, #0]
 80102c2:	fb08 220a 	mla	r2, r8, sl, r2
 80102c6:	5d92      	ldrb	r2, [r2, r6]
 80102c8:	9e01      	ldr	r6, [sp, #4]
 80102ca:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80102ce:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80102d2:	d041      	beq.n	8010358 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80102d4:	9a03      	ldr	r2, [sp, #12]
 80102d6:	fa5f fb86 	uxtb.w	fp, r6
 80102da:	fb02 f808 	mul.w	r8, r2, r8
 80102de:	f108 0201 	add.w	r2, r8, #1
 80102e2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80102e6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80102ea:	1212      	asrs	r2, r2, #8
 80102ec:	fa1f fa82 	uxth.w	sl, r2
 80102f0:	43d2      	mvns	r2, r2
 80102f2:	fb1b fb0a 	smulbb	fp, fp, sl
 80102f6:	b2d2      	uxtb	r2, r2
 80102f8:	fb08 b802 	mla	r8, r8, r2, fp
 80102fc:	fa1f f888 	uxth.w	r8, r8
 8010300:	f108 0b01 	add.w	fp, r8, #1
 8010304:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010308:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801030c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010310:	fb1b fb0a 	smulbb	fp, fp, sl
 8010314:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010318:	fb16 fa0a 	smulbb	sl, r6, sl
 801031c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010320:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010324:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010328:	fb06 aa02 	mla	sl, r6, r2, sl
 801032c:	fb08 b802 	mla	r8, r8, r2, fp
 8010330:	fa1f fa8a 	uxth.w	sl, sl
 8010334:	fa1f f888 	uxth.w	r8, r8
 8010338:	f10a 0601 	add.w	r6, sl, #1
 801033c:	f108 0b01 	add.w	fp, r8, #1
 8010340:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010344:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010348:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801034c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010350:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010354:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801035a:	4474      	add	r4, lr
 801035c:	3703      	adds	r7, #3
 801035e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010362:	4410      	add	r0, r2
 8010364:	e7a4      	b.n	80102b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8010366:	f04f 0800 	mov.w	r8, #0
 801036a:	eba3 0208 	sub.w	r2, r3, r8
 801036e:	2a00      	cmp	r2, #0
 8010370:	dc3b      	bgt.n	80103ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8010372:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010376:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801037a:	441d      	add	r5, r3
 801037c:	2900      	cmp	r1, #0
 801037e:	f340 8093 	ble.w	80104a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010382:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010388:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801038c:	3901      	subs	r1, #1
 801038e:	eeb0 6a62 	vmov.f32	s12, s5
 8010392:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010396:	ee31 1a05 	vadd.f32	s2, s2, s10
 801039a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801039e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80103a2:	eeb0 6a43 	vmov.f32	s12, s6
 80103a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80103aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80103ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80103b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80103b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80103ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80103be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80103c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80103c6:	ee12 2a90 	vmov	r2, s5
 80103ca:	eef0 2a47 	vmov.f32	s5, s14
 80103ce:	fb92 fef3 	sdiv	lr, r2, r3
 80103d2:	ee13 2a10 	vmov	r2, s6
 80103d6:	eeb0 3a67 	vmov.f32	s6, s15
 80103da:	fb92 f3f3 	sdiv	r3, r2, r3
 80103de:	9a02      	ldr	r2, [sp, #8]
 80103e0:	9312      	str	r3, [sp, #72]	; 0x48
 80103e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103e4:	bf08      	it	eq
 80103e6:	4613      	moveq	r3, r2
 80103e8:	e731      	b.n	801024e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80103ea:	1427      	asrs	r7, r4, #16
 80103ec:	d456      	bmi.n	801049c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103ee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80103f2:	42be      	cmp	r6, r7
 80103f4:	dd52      	ble.n	801049c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103f6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80103fa:	d44f      	bmi.n	801049c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010400:	454a      	cmp	r2, r9
 8010402:	dd4b      	ble.n	801049c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010404:	9a00      	ldr	r2, [sp, #0]
 8010406:	b236      	sxth	r6, r6
 8010408:	fb09 2606 	mla	r6, r9, r6, r2
 801040c:	5df2      	ldrb	r2, [r6, r7]
 801040e:	9e01      	ldr	r6, [sp, #4]
 8010410:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8010414:	0e3a      	lsrs	r2, r7, #24
 8010416:	d041      	beq.n	801049c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010418:	9e03      	ldr	r6, [sp, #12]
 801041a:	fa5f fb87 	uxtb.w	fp, r7
 801041e:	4372      	muls	r2, r6
 8010420:	1c56      	adds	r6, r2, #1
 8010422:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010426:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801042a:	1212      	asrs	r2, r2, #8
 801042c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010430:	fa1f fa82 	uxth.w	sl, r2
 8010434:	43d2      	mvns	r2, r2
 8010436:	fb1b fb0a 	smulbb	fp, fp, sl
 801043a:	b2d2      	uxtb	r2, r2
 801043c:	fb09 b902 	mla	r9, r9, r2, fp
 8010440:	fa1f f989 	uxth.w	r9, r9
 8010444:	f109 0b01 	add.w	fp, r9, #1
 8010448:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801044c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010450:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010454:	fb1b fb0a 	smulbb	fp, fp, sl
 8010458:	ea4f 2929 	mov.w	r9, r9, asr #8
 801045c:	fb17 fa0a 	smulbb	sl, r7, sl
 8010460:	f805 9006 	strb.w	r9, [r5, r6]
 8010464:	442e      	add	r6, r5
 8010466:	78b7      	ldrb	r7, [r6, #2]
 8010468:	f896 9001 	ldrb.w	r9, [r6, #1]
 801046c:	fb07 aa02 	mla	sl, r7, r2, sl
 8010470:	fb09 b902 	mla	r9, r9, r2, fp
 8010474:	fa1f fa8a 	uxth.w	sl, sl
 8010478:	fa1f f989 	uxth.w	r9, r9
 801047c:	f10a 0701 	add.w	r7, sl, #1
 8010480:	f109 0b01 	add.w	fp, r9, #1
 8010484:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010488:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801048c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010490:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010494:	f886 a002 	strb.w	sl, [r6, #2]
 8010498:	f886 9001 	strb.w	r9, [r6, #1]
 801049c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801049e:	4474      	add	r4, lr
 80104a0:	f108 0801 	add.w	r8, r8, #1
 80104a4:	4410      	add	r0, r2
 80104a6:	e760      	b.n	801036a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80104a8:	b005      	add	sp, #20
 80104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80104ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b2:	b085      	sub	sp, #20
 80104b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80104ba:	9203      	str	r2, [sp, #12]
 80104bc:	6868      	ldr	r0, [r5, #4]
 80104be:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80104c2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80104c6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80104ca:	fb00 2404 	mla	r4, r0, r4, r2
 80104ce:	682a      	ldr	r2, [r5, #0]
 80104d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80104d4:	4414      	add	r4, r2
 80104d6:	f8dc 2000 	ldr.w	r2, [ip]
 80104da:	9201      	str	r2, [sp, #4]
 80104dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80104e0:	3204      	adds	r2, #4
 80104e2:	9202      	str	r2, [sp, #8]
 80104e4:	2900      	cmp	r1, #0
 80104e6:	dc03      	bgt.n	80104f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80104e8:	9a03      	ldr	r2, [sp, #12]
 80104ea:	2a00      	cmp	r2, #0
 80104ec:	f340 8137 	ble.w	801075e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80104f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80104f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80104fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104fc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010500:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010504:	2b00      	cmp	r3, #0
 8010506:	dd0d      	ble.n	8010524 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010508:	1405      	asrs	r5, r0, #16
 801050a:	d405      	bmi.n	8010518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801050c:	4545      	cmp	r5, r8
 801050e:	da03      	bge.n	8010518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010510:	1415      	asrs	r5, r2, #16
 8010512:	d401      	bmi.n	8010518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010514:	42bd      	cmp	r5, r7
 8010516:	db06      	blt.n	8010526 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010518:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801051a:	4470      	add	r0, lr
 801051c:	3b01      	subs	r3, #1
 801051e:	3403      	adds	r4, #3
 8010520:	442a      	add	r2, r5
 8010522:	e7ef      	b.n	8010504 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8010524:	d070      	beq.n	8010608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8010526:	1e5d      	subs	r5, r3, #1
 8010528:	fb0e 0605 	mla	r6, lr, r5, r0
 801052c:	1436      	asrs	r6, r6, #16
 801052e:	d462      	bmi.n	80105f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010530:	4546      	cmp	r6, r8
 8010532:	da60      	bge.n	80105f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010534:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010536:	fb06 2505 	mla	r5, r6, r5, r2
 801053a:	142d      	asrs	r5, r5, #16
 801053c:	d45b      	bmi.n	80105f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801053e:	42bd      	cmp	r5, r7
 8010540:	da59      	bge.n	80105f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010542:	1ce5      	adds	r5, r4, #3
 8010544:	469a      	mov	sl, r3
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	dd58      	ble.n	80105fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801054c:	1416      	asrs	r6, r2, #16
 801054e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010552:	1407      	asrs	r7, r0, #16
 8010554:	46b1      	mov	r9, r6
 8010556:	9e01      	ldr	r6, [sp, #4]
 8010558:	fb08 6609 	mla	r6, r8, r9, r6
 801055c:	5df6      	ldrb	r6, [r6, r7]
 801055e:	9f02      	ldr	r7, [sp, #8]
 8010560:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8010564:	0e37      	lsrs	r7, r6, #24
 8010566:	2fff      	cmp	r7, #255	; 0xff
 8010568:	f000 80f0 	beq.w	801074c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801056c:	fa5f f887 	uxtb.w	r8, r7
 8010570:	b3d7      	cbz	r7, 80105e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010572:	fa1f f788 	uxth.w	r7, r8
 8010576:	ea6f 0808 	mvn.w	r8, r8
 801057a:	fa5f fb86 	uxtb.w	fp, r6
 801057e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8010582:	fa5f f888 	uxtb.w	r8, r8
 8010586:	fb1b fb07 	smulbb	fp, fp, r7
 801058a:	fb09 b908 	mla	r9, r9, r8, fp
 801058e:	fa1f f989 	uxth.w	r9, r9
 8010592:	f109 0b01 	add.w	fp, r9, #1
 8010596:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801059a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801059e:	fb1b fb08 	smulbb	fp, fp, r8
 80105a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80105a6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80105aa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80105ae:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80105b2:	fb09 b907 	mla	r9, r9, r7, fp
 80105b6:	fa1f f989 	uxth.w	r9, r9
 80105ba:	f109 0b01 	add.w	fp, r9, #1
 80105be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80105c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80105c6:	f805 9c02 	strb.w	r9, [r5, #-2]
 80105ca:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80105ce:	fb19 f808 	smulbb	r8, r9, r8
 80105d2:	fb06 8607 	mla	r6, r6, r7, r8
 80105d6:	b2b6      	uxth	r6, r6
 80105d8:	f106 0801 	add.w	r8, r6, #1
 80105dc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80105e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80105e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80105e8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80105ea:	4470      	add	r0, lr
 80105ec:	3503      	adds	r5, #3
 80105ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80105f2:	4432      	add	r2, r6
 80105f4:	e7a7      	b.n	8010546 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80105f6:	2600      	movs	r6, #0
 80105f8:	1b9d      	subs	r5, r3, r6
 80105fa:	2d00      	cmp	r5, #0
 80105fc:	dc3b      	bgt.n	8010676 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80105fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010602:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010606:	441c      	add	r4, r3
 8010608:	2900      	cmp	r1, #0
 801060a:	f340 80a8 	ble.w	801075e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801060e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010618:	3901      	subs	r1, #1
 801061a:	eeb0 6a62 	vmov.f32	s12, s5
 801061e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010622:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010626:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801062a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801062e:	eeb0 6a43 	vmov.f32	s12, s6
 8010632:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010636:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801063a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801063e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010642:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010646:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801064a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801064e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010652:	ee12 2a90 	vmov	r2, s5
 8010656:	eef0 2a47 	vmov.f32	s5, s14
 801065a:	fb92 fef3 	sdiv	lr, r2, r3
 801065e:	ee13 2a10 	vmov	r2, s6
 8010662:	eeb0 3a67 	vmov.f32	s6, s15
 8010666:	fb92 f3f3 	sdiv	r3, r2, r3
 801066a:	9a03      	ldr	r2, [sp, #12]
 801066c:	9312      	str	r3, [sp, #72]	; 0x48
 801066e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010670:	bf08      	it	eq
 8010672:	4613      	moveq	r3, r2
 8010674:	e736      	b.n	80104e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8010676:	ea5f 4820 	movs.w	r8, r0, asr #16
 801067a:	d457      	bmi.n	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801067c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8010680:	4547      	cmp	r7, r8
 8010682:	dd53      	ble.n	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010684:	ea5f 4922 	movs.w	r9, r2, asr #16
 8010688:	d450      	bmi.n	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801068a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801068e:	454d      	cmp	r5, r9
 8010690:	dd4c      	ble.n	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010692:	9d01      	ldr	r5, [sp, #4]
 8010694:	b23f      	sxth	r7, r7
 8010696:	fb09 5707 	mla	r7, r9, r7, r5
 801069a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801069e:	9f02      	ldr	r7, [sp, #8]
 80106a0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80106a4:	0e2f      	lsrs	r7, r5, #24
 80106a6:	2fff      	cmp	r7, #255	; 0xff
 80106a8:	d045      	beq.n	8010736 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80106aa:	fa5f f987 	uxtb.w	r9, r7
 80106ae:	b3ef      	cbz	r7, 801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80106b0:	fa1f f889 	uxth.w	r8, r9
 80106b4:	ea6f 0909 	mvn.w	r9, r9
 80106b8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80106bc:	fa5f fb85 	uxtb.w	fp, r5
 80106c0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80106c4:	fa5f f989 	uxtb.w	r9, r9
 80106c8:	fb1b fb08 	smulbb	fp, fp, r8
 80106cc:	fb0a ba09 	mla	sl, sl, r9, fp
 80106d0:	fa1f fa8a 	uxth.w	sl, sl
 80106d4:	f10a 0b01 	add.w	fp, sl, #1
 80106d8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80106dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80106e0:	f804 a007 	strb.w	sl, [r4, r7]
 80106e4:	4427      	add	r7, r4
 80106e6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80106ea:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80106ee:	f897 b001 	ldrb.w	fp, [r7, #1]
 80106f2:	fb1b fb09 	smulbb	fp, fp, r9
 80106f6:	fb0a ba08 	mla	sl, sl, r8, fp
 80106fa:	fa1f fa8a 	uxth.w	sl, sl
 80106fe:	f10a 0b01 	add.w	fp, sl, #1
 8010702:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8010706:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801070a:	f887 a001 	strb.w	sl, [r7, #1]
 801070e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8010712:	fb1a f909 	smulbb	r9, sl, r9
 8010716:	fb05 9508 	mla	r5, r5, r8, r9
 801071a:	b2ad      	uxth	r5, r5
 801071c:	f105 0901 	add.w	r9, r5, #1
 8010720:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8010724:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010728:	f887 9002 	strb.w	r9, [r7, #2]
 801072c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801072e:	4470      	add	r0, lr
 8010730:	3601      	adds	r6, #1
 8010732:	442a      	add	r2, r5
 8010734:	e760      	b.n	80105f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010736:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801073a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801073e:	55e5      	strb	r5, [r4, r7]
 8010740:	4427      	add	r7, r4
 8010742:	0c2d      	lsrs	r5, r5, #16
 8010744:	f887 8001 	strb.w	r8, [r7, #1]
 8010748:	70bd      	strb	r5, [r7, #2]
 801074a:	e7ef      	b.n	801072c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801074c:	0a37      	lsrs	r7, r6, #8
 801074e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8010752:	0c36      	lsrs	r6, r6, #16
 8010754:	f805 7c02 	strb.w	r7, [r5, #-2]
 8010758:	f805 6c01 	strb.w	r6, [r5, #-1]
 801075c:	e744      	b.n	80105e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801075e:	b005      	add	sp, #20
 8010760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010764 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010768:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801076a:	9201      	str	r2, [sp, #4]
 801076c:	6870      	ldr	r0, [r6, #4]
 801076e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010772:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010776:	fa1f fe85 	uxth.w	lr, r5
 801077a:	43ed      	mvns	r5, r5
 801077c:	f8dc 8000 	ldr.w	r8, [ip]
 8010780:	b2ed      	uxtb	r5, r5
 8010782:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010786:	fb00 2404 	mla	r4, r0, r4, r2
 801078a:	6832      	ldr	r2, [r6, #0]
 801078c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010790:	4414      	add	r4, r2
 8010792:	2900      	cmp	r1, #0
 8010794:	dc03      	bgt.n	801079e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8010796:	9a01      	ldr	r2, [sp, #4]
 8010798:	2a00      	cmp	r2, #0
 801079a:	f340 810d 	ble.w	80109b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801079e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107a0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80107a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80107a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107aa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80107ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dd0e      	ble.n	80107d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80107b6:	1406      	asrs	r6, r0, #16
 80107b8:	d405      	bmi.n	80107c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107ba:	4556      	cmp	r6, sl
 80107bc:	da03      	bge.n	80107c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107be:	1416      	asrs	r6, r2, #16
 80107c0:	d401      	bmi.n	80107c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107c2:	454e      	cmp	r6, r9
 80107c4:	db07      	blt.n	80107d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80107c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80107c8:	3b01      	subs	r3, #1
 80107ca:	3403      	adds	r4, #3
 80107cc:	4430      	add	r0, r6
 80107ce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80107d0:	4432      	add	r2, r6
 80107d2:	e7ee      	b.n	80107b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80107d4:	d060      	beq.n	8010898 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80107d6:	1e5e      	subs	r6, r3, #1
 80107d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80107da:	fb07 0706 	mla	r7, r7, r6, r0
 80107de:	143f      	asrs	r7, r7, #16
 80107e0:	d451      	bmi.n	8010886 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107e2:	4557      	cmp	r7, sl
 80107e4:	da4f      	bge.n	8010886 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80107e8:	fb07 2606 	mla	r6, r7, r6, r2
 80107ec:	1436      	asrs	r6, r6, #16
 80107ee:	d44a      	bmi.n	8010886 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107f0:	454e      	cmp	r6, r9
 80107f2:	da48      	bge.n	8010886 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107f4:	1ce6      	adds	r6, r4, #3
 80107f6:	4699      	mov	r9, r3
 80107f8:	f1b9 0f00 	cmp.w	r9, #0
 80107fc:	f106 0603 	add.w	r6, r6, #3
 8010800:	dd45      	ble.n	801088e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8010802:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8010806:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801080a:	1417      	asrs	r7, r2, #16
 801080c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010810:	fb0b a707 	mla	r7, fp, r7, sl
 8010814:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010818:	fb1b fb05 	smulbb	fp, fp, r5
 801081c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010820:	eb08 0a07 	add.w	sl, r8, r7
 8010824:	f818 7007 	ldrb.w	r7, [r8, r7]
 8010828:	fb07 b70e 	mla	r7, r7, lr, fp
 801082c:	b2bf      	uxth	r7, r7
 801082e:	f107 0b01 	add.w	fp, r7, #1
 8010832:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010836:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801083a:	fb1b fb05 	smulbb	fp, fp, r5
 801083e:	123f      	asrs	r7, r7, #8
 8010840:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010844:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010848:	fb07 b70e 	mla	r7, r7, lr, fp
 801084c:	b2bf      	uxth	r7, r7
 801084e:	f107 0b01 	add.w	fp, r7, #1
 8010852:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010856:	123f      	asrs	r7, r7, #8
 8010858:	f806 7c05 	strb.w	r7, [r6, #-5]
 801085c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010860:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010864:	fb1a fa05 	smulbb	sl, sl, r5
 8010868:	fb07 a70e 	mla	r7, r7, lr, sl
 801086c:	b2bf      	uxth	r7, r7
 801086e:	f107 0a01 	add.w	sl, r7, #1
 8010872:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010876:	123f      	asrs	r7, r7, #8
 8010878:	f806 7c04 	strb.w	r7, [r6, #-4]
 801087c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801087e:	4438      	add	r0, r7
 8010880:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010882:	443a      	add	r2, r7
 8010884:	e7b8      	b.n	80107f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8010886:	2700      	movs	r7, #0
 8010888:	1bde      	subs	r6, r3, r7
 801088a:	2e00      	cmp	r6, #0
 801088c:	dc3f      	bgt.n	801090e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801088e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010896:	441c      	add	r4, r3
 8010898:	2900      	cmp	r1, #0
 801089a:	f340 808d 	ble.w	80109b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801089e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80108a8:	3901      	subs	r1, #1
 80108aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80108ae:	eef0 6a62 	vmov.f32	s13, s5
 80108b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80108b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80108ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108be:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80108c2:	eef0 6a43 	vmov.f32	s13, s6
 80108c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108ca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80108ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80108d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80108d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80108da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80108de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80108e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80108e6:	ee12 2a90 	vmov	r2, s5
 80108ea:	eef0 2a47 	vmov.f32	s5, s14
 80108ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80108f2:	ee13 2a10 	vmov	r2, s6
 80108f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80108f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108fa:	eeb0 3a67 	vmov.f32	s6, s15
 80108fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8010902:	9a01      	ldr	r2, [sp, #4]
 8010904:	9310      	str	r3, [sp, #64]	; 0x40
 8010906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010908:	bf08      	it	eq
 801090a:	4613      	moveq	r3, r2
 801090c:	e741      	b.n	8010792 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801090e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010912:	d44b      	bmi.n	80109ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8010914:	f8dc b008 	ldr.w	fp, [ip, #8]
 8010918:	45cb      	cmp	fp, r9
 801091a:	dd47      	ble.n	80109ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801091c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010920:	d444      	bmi.n	80109ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8010922:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8010926:	4556      	cmp	r6, sl
 8010928:	dd40      	ble.n	80109ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801092a:	fa0f f68b 	sxth.w	r6, fp
 801092e:	fb0a 9906 	mla	r9, sl, r6, r9
 8010932:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010936:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801093a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801093e:	fb1b fb05 	smulbb	fp, fp, r5
 8010942:	eb08 0a09 	add.w	sl, r8, r9
 8010946:	f818 9009 	ldrb.w	r9, [r8, r9]
 801094a:	fb09 b90e 	mla	r9, r9, lr, fp
 801094e:	fa1f f989 	uxth.w	r9, r9
 8010952:	f109 0b01 	add.w	fp, r9, #1
 8010956:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801095a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801095e:	f804 9006 	strb.w	r9, [r4, r6]
 8010962:	4426      	add	r6, r4
 8010964:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010968:	f896 b001 	ldrb.w	fp, [r6, #1]
 801096c:	fb1b fb05 	smulbb	fp, fp, r5
 8010970:	fb09 b90e 	mla	r9, r9, lr, fp
 8010974:	fa1f f989 	uxth.w	r9, r9
 8010978:	f109 0b01 	add.w	fp, r9, #1
 801097c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010980:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010984:	f886 9001 	strb.w	r9, [r6, #1]
 8010988:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801098c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010990:	fb1a fa05 	smulbb	sl, sl, r5
 8010994:	fb09 a90e 	mla	r9, r9, lr, sl
 8010998:	fa1f f989 	uxth.w	r9, r9
 801099c:	f109 0a01 	add.w	sl, r9, #1
 80109a0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80109a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80109a8:	f886 9002 	strb.w	r9, [r6, #2]
 80109ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80109ae:	3701      	adds	r7, #1
 80109b0:	4430      	add	r0, r6
 80109b2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80109b4:	4432      	add	r2, r6
 80109b6:	e767      	b.n	8010888 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80109b8:	b003      	add	sp, #12
 80109ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109be <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80109be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80109c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109c8:	9201      	str	r2, [sp, #4]
 80109ca:	6868      	ldr	r0, [r5, #4]
 80109cc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80109ce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80109d2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80109d6:	fb00 2404 	mla	r4, r0, r4, r2
 80109da:	682a      	ldr	r2, [r5, #0]
 80109dc:	f8d7 8000 	ldr.w	r8, [r7]
 80109e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80109e4:	4414      	add	r4, r2
 80109e6:	2900      	cmp	r1, #0
 80109e8:	dc03      	bgt.n	80109f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80109ea:	9a01      	ldr	r2, [sp, #4]
 80109ec:	2a00      	cmp	r2, #0
 80109ee:	f340 80af 	ble.w	8010b50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80109f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109f4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80109f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80109fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109fe:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8010a02:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	dd0c      	ble.n	8010a24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010a0a:	1405      	asrs	r5, r0, #16
 8010a0c:	d405      	bmi.n	8010a1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a0e:	4555      	cmp	r5, sl
 8010a10:	da03      	bge.n	8010a1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a12:	1415      	asrs	r5, r2, #16
 8010a14:	d401      	bmi.n	8010a1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a16:	454d      	cmp	r5, r9
 8010a18:	db05      	blt.n	8010a26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010a1a:	4470      	add	r0, lr
 8010a1c:	4462      	add	r2, ip
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	3403      	adds	r4, #3
 8010a22:	e7f0      	b.n	8010a06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010a24:	d038      	beq.n	8010a98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010a26:	1e5d      	subs	r5, r3, #1
 8010a28:	fb0e 0605 	mla	r6, lr, r5, r0
 8010a2c:	1436      	asrs	r6, r6, #16
 8010a2e:	d42a      	bmi.n	8010a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a30:	4556      	cmp	r6, sl
 8010a32:	da28      	bge.n	8010a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a34:	fb0c 2505 	mla	r5, ip, r5, r2
 8010a38:	142d      	asrs	r5, r5, #16
 8010a3a:	d424      	bmi.n	8010a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a3c:	454d      	cmp	r5, r9
 8010a3e:	da22      	bge.n	8010a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a40:	1ce6      	adds	r6, r4, #3
 8010a42:	4699      	mov	r9, r3
 8010a44:	f1b9 0f00 	cmp.w	r9, #0
 8010a48:	f106 0603 	add.w	r6, r6, #3
 8010a4c:	dd1f      	ble.n	8010a8e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8010a4e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8010a52:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010a56:	1415      	asrs	r5, r2, #16
 8010a58:	4470      	add	r0, lr
 8010a5a:	4462      	add	r2, ip
 8010a5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a60:	fb0b a505 	mla	r5, fp, r5, sl
 8010a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a68:	eb08 0a05 	add.w	sl, r8, r5
 8010a6c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8010a70:	f806 5c06 	strb.w	r5, [r6, #-6]
 8010a74:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010a78:	f806 5c05 	strb.w	r5, [r6, #-5]
 8010a7c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8010a80:	f806 5c04 	strb.w	r5, [r6, #-4]
 8010a84:	e7de      	b.n	8010a44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8010a86:	2600      	movs	r6, #0
 8010a88:	1b9d      	subs	r5, r3, r6
 8010a8a:	2d00      	cmp	r5, #0
 8010a8c:	dc38      	bgt.n	8010b00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a96:	441c      	add	r4, r3
 8010a98:	2900      	cmp	r1, #0
 8010a9a:	dd59      	ble.n	8010b50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8010a9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010aa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010aa6:	3901      	subs	r1, #1
 8010aa8:	eeb0 6a62 	vmov.f32	s12, s5
 8010aac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010ab0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010ab4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ab8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010abc:	eeb0 6a43 	vmov.f32	s12, s6
 8010ac0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ac4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010ac8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010acc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010ad0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010ad4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010ad8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010adc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010ae0:	ee12 2a90 	vmov	r2, s5
 8010ae4:	eef0 2a47 	vmov.f32	s5, s14
 8010ae8:	fb92 fef3 	sdiv	lr, r2, r3
 8010aec:	ee13 2a10 	vmov	r2, s6
 8010af0:	eeb0 3a67 	vmov.f32	s6, s15
 8010af4:	fb92 fcf3 	sdiv	ip, r2, r3
 8010af8:	9a01      	ldr	r2, [sp, #4]
 8010afa:	bf08      	it	eq
 8010afc:	4613      	moveq	r3, r2
 8010afe:	e772      	b.n	80109e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010b00:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010b04:	d420      	bmi.n	8010b48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b06:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8010b0a:	45cb      	cmp	fp, r9
 8010b0c:	dd1c      	ble.n	8010b48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b0e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010b12:	d419      	bmi.n	8010b48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b14:	68fd      	ldr	r5, [r7, #12]
 8010b16:	4555      	cmp	r5, sl
 8010b18:	dd16      	ble.n	8010b48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b1a:	fa0f f58b 	sxth.w	r5, fp
 8010b1e:	fb0a 9505 	mla	r5, sl, r5, r9
 8010b22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b26:	f818 9005 	ldrb.w	r9, [r8, r5]
 8010b2a:	eb08 0b05 	add.w	fp, r8, r5
 8010b2e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010b32:	f804 9005 	strb.w	r9, [r4, r5]
 8010b36:	4425      	add	r5, r4
 8010b38:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8010b3c:	f885 9001 	strb.w	r9, [r5, #1]
 8010b40:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8010b44:	f885 9002 	strb.w	r9, [r5, #2]
 8010b48:	4470      	add	r0, lr
 8010b4a:	4462      	add	r2, ip
 8010b4c:	3601      	adds	r6, #1
 8010b4e:	e79b      	b.n	8010a88 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8010b50:	b003      	add	sp, #12
 8010b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010b62:	9202      	str	r2, [sp, #8]
 8010b64:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010b68:	6860      	ldr	r0, [r4, #4]
 8010b6a:	9203      	str	r2, [sp, #12]
 8010b6c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010b70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010b74:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010b78:	fb00 2505 	mla	r5, r0, r5, r2
 8010b7c:	6822      	ldr	r2, [r4, #0]
 8010b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b82:	4415      	add	r5, r2
 8010b84:	f8dc 2000 	ldr.w	r2, [ip]
 8010b88:	9201      	str	r2, [sp, #4]
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	dc03      	bgt.n	8010b96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8010b8e:	9a02      	ldr	r2, [sp, #8]
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	f340 8122 	ble.w	8010dda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010b96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b98:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010b9c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010ba0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ba2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010ba6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	dd0d      	ble.n	8010bca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8010bae:	1422      	asrs	r2, r4, #16
 8010bb0:	d405      	bmi.n	8010bbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bb2:	4542      	cmp	r2, r8
 8010bb4:	da03      	bge.n	8010bbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bb6:	1402      	asrs	r2, r0, #16
 8010bb8:	d401      	bmi.n	8010bbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bba:	42ba      	cmp	r2, r7
 8010bbc:	db06      	blt.n	8010bcc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010bbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010bc0:	4474      	add	r4, lr
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	3503      	adds	r5, #3
 8010bc6:	4410      	add	r0, r2
 8010bc8:	e7ef      	b.n	8010baa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8010bca:	d072      	beq.n	8010cb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8010bcc:	1e5a      	subs	r2, r3, #1
 8010bce:	fb0e 4602 	mla	r6, lr, r2, r4
 8010bd2:	1436      	asrs	r6, r6, #16
 8010bd4:	d462      	bmi.n	8010c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bd6:	4546      	cmp	r6, r8
 8010bd8:	da60      	bge.n	8010c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bda:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010bdc:	fb06 0202 	mla	r2, r6, r2, r0
 8010be0:	1412      	asrs	r2, r2, #16
 8010be2:	d45b      	bmi.n	8010c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010be4:	42ba      	cmp	r2, r7
 8010be6:	da59      	bge.n	8010c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010be8:	1cef      	adds	r7, r5, #3
 8010bea:	4699      	mov	r9, r3
 8010bec:	f1b9 0f00 	cmp.w	r9, #0
 8010bf0:	dd5a      	ble.n	8010ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010bf2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010bf6:	1426      	asrs	r6, r4, #16
 8010bf8:	1402      	asrs	r2, r0, #16
 8010bfa:	fb08 6202 	mla	r2, r8, r2, r6
 8010bfe:	9e01      	ldr	r6, [sp, #4]
 8010c00:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8010c04:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8010c08:	d041      	beq.n	8010c8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010c0a:	9a03      	ldr	r2, [sp, #12]
 8010c0c:	fa5f fb86 	uxtb.w	fp, r6
 8010c10:	fb02 f808 	mul.w	r8, r2, r8
 8010c14:	f108 0201 	add.w	r2, r8, #1
 8010c18:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8010c1c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8010c20:	1212      	asrs	r2, r2, #8
 8010c22:	fa1f fa82 	uxth.w	sl, r2
 8010c26:	43d2      	mvns	r2, r2
 8010c28:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c2c:	b2d2      	uxtb	r2, r2
 8010c2e:	fb08 b802 	mla	r8, r8, r2, fp
 8010c32:	fa1f f888 	uxth.w	r8, r8
 8010c36:	f108 0b01 	add.w	fp, r8, #1
 8010c3a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c3e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8010c42:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010c46:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c4e:	fb16 fa0a 	smulbb	sl, r6, sl
 8010c52:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010c56:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010c5a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010c5e:	fb06 aa02 	mla	sl, r6, r2, sl
 8010c62:	fb08 b802 	mla	r8, r8, r2, fp
 8010c66:	fa1f fa8a 	uxth.w	sl, sl
 8010c6a:	fa1f f888 	uxth.w	r8, r8
 8010c6e:	f10a 0601 	add.w	r6, sl, #1
 8010c72:	f108 0b01 	add.w	fp, r8, #1
 8010c76:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010c7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010c82:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c86:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010c8a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010c8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010c90:	4474      	add	r4, lr
 8010c92:	3703      	adds	r7, #3
 8010c94:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c98:	4410      	add	r0, r2
 8010c9a:	e7a7      	b.n	8010bec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010c9c:	f04f 0800 	mov.w	r8, #0
 8010ca0:	eba3 0208 	sub.w	r2, r3, r8
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	dc3b      	bgt.n	8010d20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8010ca8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cb0:	441d      	add	r5, r3
 8010cb2:	2900      	cmp	r1, #0
 8010cb4:	f340 8091 	ble.w	8010dda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010cb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010cc2:	3901      	subs	r1, #1
 8010cc4:	eeb0 6a62 	vmov.f32	s12, s5
 8010cc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010ccc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010cd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010cd4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010cd8:	eeb0 6a43 	vmov.f32	s12, s6
 8010cdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ce0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010ce4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010ce8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010cec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010cf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010cf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010cf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010cfc:	ee12 2a90 	vmov	r2, s5
 8010d00:	eef0 2a47 	vmov.f32	s5, s14
 8010d04:	fb92 fef3 	sdiv	lr, r2, r3
 8010d08:	ee13 2a10 	vmov	r2, s6
 8010d0c:	eeb0 3a67 	vmov.f32	s6, s15
 8010d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d14:	9a02      	ldr	r2, [sp, #8]
 8010d16:	9312      	str	r3, [sp, #72]	; 0x48
 8010d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d1a:	bf08      	it	eq
 8010d1c:	4613      	moveq	r3, r2
 8010d1e:	e734      	b.n	8010b8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010d20:	1427      	asrs	r7, r4, #16
 8010d22:	d454      	bmi.n	8010dce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d24:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010d28:	42be      	cmp	r6, r7
 8010d2a:	dd50      	ble.n	8010dce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d2c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010d30:	d44d      	bmi.n	8010dce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d32:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010d36:	454a      	cmp	r2, r9
 8010d38:	dd49      	ble.n	8010dce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d3a:	b236      	sxth	r6, r6
 8010d3c:	9a01      	ldr	r2, [sp, #4]
 8010d3e:	fb09 7606 	mla	r6, r9, r6, r7
 8010d42:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010d46:	0e3a      	lsrs	r2, r7, #24
 8010d48:	d041      	beq.n	8010dce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d4a:	9e03      	ldr	r6, [sp, #12]
 8010d4c:	fa5f fb87 	uxtb.w	fp, r7
 8010d50:	4372      	muls	r2, r6
 8010d52:	1c56      	adds	r6, r2, #1
 8010d54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010d58:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8010d5c:	1212      	asrs	r2, r2, #8
 8010d5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010d62:	fa1f fa82 	uxth.w	sl, r2
 8010d66:	43d2      	mvns	r2, r2
 8010d68:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d6c:	b2d2      	uxtb	r2, r2
 8010d6e:	fb09 b902 	mla	r9, r9, r2, fp
 8010d72:	fa1f f989 	uxth.w	r9, r9
 8010d76:	f109 0b01 	add.w	fp, r9, #1
 8010d7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010d7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010d82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010d86:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010d8e:	fb17 fa0a 	smulbb	sl, r7, sl
 8010d92:	f805 9006 	strb.w	r9, [r5, r6]
 8010d96:	442e      	add	r6, r5
 8010d98:	78b7      	ldrb	r7, [r6, #2]
 8010d9a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8010d9e:	fb07 aa02 	mla	sl, r7, r2, sl
 8010da2:	fb09 b902 	mla	r9, r9, r2, fp
 8010da6:	fa1f fa8a 	uxth.w	sl, sl
 8010daa:	fa1f f989 	uxth.w	r9, r9
 8010dae:	f10a 0701 	add.w	r7, sl, #1
 8010db2:	f109 0b01 	add.w	fp, r9, #1
 8010db6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010dba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010dbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010dc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010dc6:	f886 a002 	strb.w	sl, [r6, #2]
 8010dca:	f886 9001 	strb.w	r9, [r6, #1]
 8010dce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010dd0:	4474      	add	r4, lr
 8010dd2:	f108 0801 	add.w	r8, r8, #1
 8010dd6:	4410      	add	r0, r2
 8010dd8:	e762      	b.n	8010ca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010dda:	b005      	add	sp, #20
 8010ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010de0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dea:	9201      	str	r2, [sp, #4]
 8010dec:	6860      	ldr	r0, [r4, #4]
 8010dee:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010df2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8010df6:	fb00 2505 	mla	r5, r0, r5, r2
 8010dfa:	6822      	ldr	r2, [r4, #0]
 8010dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e00:	4415      	add	r5, r2
 8010e02:	f8dc 2000 	ldr.w	r2, [ip]
 8010e06:	9200      	str	r2, [sp, #0]
 8010e08:	2900      	cmp	r1, #0
 8010e0a:	dc03      	bgt.n	8010e14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010e0c:	9a01      	ldr	r2, [sp, #4]
 8010e0e:	2a00      	cmp	r2, #0
 8010e10:	f340 812b 	ble.w	801106a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e16:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010e1a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e20:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010e24:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	dd0e      	ble.n	8010e4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010e2c:	1422      	asrs	r2, r4, #16
 8010e2e:	d405      	bmi.n	8010e3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e30:	4572      	cmp	r2, lr
 8010e32:	da03      	bge.n	8010e3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e34:	1402      	asrs	r2, r0, #16
 8010e36:	d401      	bmi.n	8010e3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e38:	42ba      	cmp	r2, r7
 8010e3a:	db07      	blt.n	8010e4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010e3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	3503      	adds	r5, #3
 8010e42:	4414      	add	r4, r2
 8010e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e46:	4410      	add	r0, r2
 8010e48:	e7ee      	b.n	8010e28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010e4a:	d06f      	beq.n	8010f2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8010e4c:	1e5a      	subs	r2, r3, #1
 8010e4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010e50:	fb06 4602 	mla	r6, r6, r2, r4
 8010e54:	1436      	asrs	r6, r6, #16
 8010e56:	d45e      	bmi.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e58:	4576      	cmp	r6, lr
 8010e5a:	da5c      	bge.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010e5e:	fb06 0202 	mla	r2, r6, r2, r0
 8010e62:	1412      	asrs	r2, r2, #16
 8010e64:	d457      	bmi.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e66:	42ba      	cmp	r2, r7
 8010e68:	da55      	bge.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e6a:	1cee      	adds	r6, r5, #3
 8010e6c:	469a      	mov	sl, r3
 8010e6e:	f1ba 0f00 	cmp.w	sl, #0
 8010e72:	dd56      	ble.n	8010f22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010e74:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010e78:	1427      	asrs	r7, r4, #16
 8010e7a:	1402      	asrs	r2, r0, #16
 8010e7c:	fb0e 7202 	mla	r2, lr, r2, r7
 8010e80:	9f00      	ldr	r7, [sp, #0]
 8010e82:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8010e86:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8010e8a:	d03c      	beq.n	8010f06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8010e8c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8010e90:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010e94:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8010e98:	fa5f f28e 	uxtb.w	r2, lr
 8010e9c:	b2ff      	uxtb	r7, r7
 8010e9e:	f000 80dd 	beq.w	801105c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8010ea2:	fa1f f882 	uxth.w	r8, r2
 8010ea6:	43d2      	mvns	r2, r2
 8010ea8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8010eac:	fb17 f708 	smulbb	r7, r7, r8
 8010eb0:	b2d2      	uxtb	r2, r2
 8010eb2:	fb19 f908 	smulbb	r9, r9, r8
 8010eb6:	fb0e 7702 	mla	r7, lr, r2, r7
 8010eba:	fb1b f808 	smulbb	r8, fp, r8
 8010ebe:	b2bf      	uxth	r7, r7
 8010ec0:	f107 0e01 	add.w	lr, r7, #1
 8010ec4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8010ec8:	123f      	asrs	r7, r7, #8
 8010eca:	f806 7c03 	strb.w	r7, [r6, #-3]
 8010ece:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8010ed2:	fb07 9902 	mla	r9, r7, r2, r9
 8010ed6:	fa1f f989 	uxth.w	r9, r9
 8010eda:	f109 0701 	add.w	r7, r9, #1
 8010ede:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8010ee2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8010ee6:	fb07 8802 	mla	r8, r7, r2, r8
 8010eea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010eee:	fa1f f888 	uxth.w	r8, r8
 8010ef2:	f806 9c02 	strb.w	r9, [r6, #-2]
 8010ef6:	f108 0201 	add.w	r2, r8, #1
 8010efa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8010efe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010f02:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f08:	3603      	adds	r6, #3
 8010f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f0e:	4414      	add	r4, r2
 8010f10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f12:	4410      	add	r0, r2
 8010f14:	e7ab      	b.n	8010e6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8010f16:	f04f 0e00 	mov.w	lr, #0
 8010f1a:	eba3 020e 	sub.w	r2, r3, lr
 8010f1e:	2a00      	cmp	r2, #0
 8010f20:	dc3d      	bgt.n	8010f9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8010f22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f2a:	441d      	add	r5, r3
 8010f2c:	2900      	cmp	r1, #0
 8010f2e:	f340 809c 	ble.w	801106a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010f32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010f3c:	3901      	subs	r1, #1
 8010f3e:	eeb0 6a62 	vmov.f32	s12, s5
 8010f42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010f46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010f4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f4e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010f52:	eeb0 6a43 	vmov.f32	s12, s6
 8010f56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f5a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010f5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010f76:	ee12 2a90 	vmov	r2, s5
 8010f7a:	eef0 2a47 	vmov.f32	s5, s14
 8010f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f82:	ee13 2a10 	vmov	r2, s6
 8010f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f8a:	eeb0 3a67 	vmov.f32	s6, s15
 8010f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f92:	9a01      	ldr	r2, [sp, #4]
 8010f94:	9310      	str	r3, [sp, #64]	; 0x40
 8010f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f98:	bf08      	it	eq
 8010f9a:	4613      	moveq	r3, r2
 8010f9c:	e734      	b.n	8010e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010f9e:	1427      	asrs	r7, r4, #16
 8010fa0:	d44d      	bmi.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fa2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010fa6:	42be      	cmp	r6, r7
 8010fa8:	dd49      	ble.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010faa:	ea5f 4820 	movs.w	r8, r0, asr #16
 8010fae:	d446      	bmi.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010fb4:	4542      	cmp	r2, r8
 8010fb6:	dd42      	ble.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fb8:	b236      	sxth	r6, r6
 8010fba:	9a00      	ldr	r2, [sp, #0]
 8010fbc:	fb08 7606 	mla	r6, r8, r6, r7
 8010fc0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010fc4:	0e3a      	lsrs	r2, r7, #24
 8010fc6:	d03a      	beq.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fc8:	2aff      	cmp	r2, #255	; 0xff
 8010fca:	b2d6      	uxtb	r6, r2
 8010fcc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010fd0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8010fd4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8010fd8:	b2ff      	uxtb	r7, r7
 8010fda:	d037      	beq.n	801104c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8010fdc:	fa1f f986 	uxth.w	r9, r6
 8010fe0:	4472      	add	r2, lr
 8010fe2:	43f6      	mvns	r6, r6
 8010fe4:	f815 8002 	ldrb.w	r8, [r5, r2]
 8010fe8:	fb17 f709 	smulbb	r7, r7, r9
 8010fec:	fb1a fa09 	smulbb	sl, sl, r9
 8010ff0:	b2f6      	uxtb	r6, r6
 8010ff2:	fb1b f909 	smulbb	r9, fp, r9
 8010ff6:	fb08 7706 	mla	r7, r8, r6, r7
 8010ffa:	b2bf      	uxth	r7, r7
 8010ffc:	f107 0801 	add.w	r8, r7, #1
 8011000:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011004:	123f      	asrs	r7, r7, #8
 8011006:	54af      	strb	r7, [r5, r2]
 8011008:	442a      	add	r2, r5
 801100a:	7857      	ldrb	r7, [r2, #1]
 801100c:	fb07 aa06 	mla	sl, r7, r6, sl
 8011010:	fa1f fa8a 	uxth.w	sl, sl
 8011014:	f10a 0701 	add.w	r7, sl, #1
 8011018:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801101c:	7897      	ldrb	r7, [r2, #2]
 801101e:	fb07 9906 	mla	r9, r7, r6, r9
 8011022:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011026:	fa1f f989 	uxth.w	r9, r9
 801102a:	f882 a001 	strb.w	sl, [r2, #1]
 801102e:	f109 0601 	add.w	r6, r9, #1
 8011032:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011036:	ea4f 2929 	mov.w	r9, r9, asr #8
 801103a:	f882 9002 	strb.w	r9, [r2, #2]
 801103e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011040:	f10e 0e01 	add.w	lr, lr, #1
 8011044:	4414      	add	r4, r2
 8011046:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011048:	4410      	add	r0, r2
 801104a:	e766      	b.n	8010f1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801104c:	4472      	add	r2, lr
 801104e:	54af      	strb	r7, [r5, r2]
 8011050:	442a      	add	r2, r5
 8011052:	f882 a001 	strb.w	sl, [r2, #1]
 8011056:	f882 b002 	strb.w	fp, [r2, #2]
 801105a:	e7f0      	b.n	801103e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801105c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011060:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011064:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011068:	e74d      	b.n	8010f06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801106a:	b003      	add	sp, #12
 801106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011070 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011074:	b087      	sub	sp, #28
 8011076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801107a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801107c:	9204      	str	r2, [sp, #16]
 801107e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011082:	6860      	ldr	r0, [r4, #4]
 8011084:	9205      	str	r2, [sp, #20]
 8011086:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801108a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801108e:	9101      	str	r1, [sp, #4]
 8011090:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011094:	fb00 2505 	mla	r5, r0, r5, r2
 8011098:	6822      	ldr	r2, [r4, #0]
 801109a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801109e:	4415      	add	r5, r2
 80110a0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80110a4:	3201      	adds	r2, #1
 80110a6:	f022 0201 	bic.w	r2, r2, #1
 80110aa:	9202      	str	r2, [sp, #8]
 80110ac:	f8dc 2000 	ldr.w	r2, [ip]
 80110b0:	9203      	str	r2, [sp, #12]
 80110b2:	9a01      	ldr	r2, [sp, #4]
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	dc03      	bgt.n	80110c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80110b8:	9a04      	ldr	r2, [sp, #16]
 80110ba:	2a00      	cmp	r2, #0
 80110bc:	f340 8135 	ble.w	801132a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80110c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110c2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80110c6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80110ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110cc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80110d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dd0d      	ble.n	80110f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80110d8:	1422      	asrs	r2, r4, #16
 80110da:	d405      	bmi.n	80110e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110dc:	4542      	cmp	r2, r8
 80110de:	da03      	bge.n	80110e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110e0:	1402      	asrs	r2, r0, #16
 80110e2:	d401      	bmi.n	80110e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110e4:	42ba      	cmp	r2, r7
 80110e6:	db06      	blt.n	80110f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80110e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110ea:	4474      	add	r4, lr
 80110ec:	3b01      	subs	r3, #1
 80110ee:	3503      	adds	r5, #3
 80110f0:	4410      	add	r0, r2
 80110f2:	e7ef      	b.n	80110d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80110f4:	d077      	beq.n	80111e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80110f6:	1e5a      	subs	r2, r3, #1
 80110f8:	fb0e 4602 	mla	r6, lr, r2, r4
 80110fc:	1436      	asrs	r6, r6, #16
 80110fe:	d469      	bmi.n	80111d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011100:	4546      	cmp	r6, r8
 8011102:	da67      	bge.n	80111d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011104:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011106:	fb06 0202 	mla	r2, r6, r2, r0
 801110a:	1412      	asrs	r2, r2, #16
 801110c:	d462      	bmi.n	80111d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801110e:	42ba      	cmp	r2, r7
 8011110:	da60      	bge.n	80111d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011112:	1cee      	adds	r6, r5, #3
 8011114:	4699      	mov	r9, r3
 8011116:	f1b9 0f00 	cmp.w	r9, #0
 801111a:	dd5f      	ble.n	80111dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801111c:	1422      	asrs	r2, r4, #16
 801111e:	9902      	ldr	r1, [sp, #8]
 8011120:	1407      	asrs	r7, r0, #16
 8011122:	fb01 2707 	mla	r7, r1, r7, r2
 8011126:	9903      	ldr	r1, [sp, #12]
 8011128:	087a      	lsrs	r2, r7, #1
 801112a:	5c8a      	ldrb	r2, [r1, r2]
 801112c:	07f9      	lsls	r1, r7, #31
 801112e:	bf54      	ite	pl
 8011130:	f002 020f 	andpl.w	r2, r2, #15
 8011134:	1112      	asrmi	r2, r2, #4
 8011136:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801113a:	b2d2      	uxtb	r2, r2
 801113c:	2a00      	cmp	r2, #0
 801113e:	d042      	beq.n	80111c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011140:	497b      	ldr	r1, [pc, #492]	; (8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011142:	680f      	ldr	r7, [r1, #0]
 8011144:	9905      	ldr	r1, [sp, #20]
 8011146:	fa5f fb87 	uxtb.w	fp, r7
 801114a:	434a      	muls	r2, r1
 801114c:	f102 0801 	add.w	r8, r2, #1
 8011150:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8011154:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8011158:	1212      	asrs	r2, r2, #8
 801115a:	fa1f fa82 	uxth.w	sl, r2
 801115e:	43d2      	mvns	r2, r2
 8011160:	fb1b fb0a 	smulbb	fp, fp, sl
 8011164:	b2d2      	uxtb	r2, r2
 8011166:	fb08 b802 	mla	r8, r8, r2, fp
 801116a:	fa1f f888 	uxth.w	r8, r8
 801116e:	f108 0b01 	add.w	fp, r8, #1
 8011172:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011176:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801117a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801117e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011182:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011186:	fb17 fa0a 	smulbb	sl, r7, sl
 801118a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801118e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8011192:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8011196:	fb07 aa02 	mla	sl, r7, r2, sl
 801119a:	fb08 b802 	mla	r8, r8, r2, fp
 801119e:	fa1f fa8a 	uxth.w	sl, sl
 80111a2:	fa1f f888 	uxth.w	r8, r8
 80111a6:	f10a 0701 	add.w	r7, sl, #1
 80111aa:	f108 0b01 	add.w	fp, r8, #1
 80111ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80111b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80111b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80111ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 80111be:	f806 ac01 	strb.w	sl, [r6, #-1]
 80111c2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80111c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80111c8:	4474      	add	r4, lr
 80111ca:	3603      	adds	r6, #3
 80111cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80111d0:	4410      	add	r0, r2
 80111d2:	e7a0      	b.n	8011116 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80111d4:	2700      	movs	r7, #0
 80111d6:	1bda      	subs	r2, r3, r7
 80111d8:	2a00      	cmp	r2, #0
 80111da:	dc3e      	bgt.n	801125a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80111dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80111e4:	441d      	add	r5, r3
 80111e6:	9b01      	ldr	r3, [sp, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	f340 809e 	ble.w	801132a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80111ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80111f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80111f8:	eeb0 6a62 	vmov.f32	s12, s5
 80111fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011200:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011204:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011208:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801120c:	eeb0 6a43 	vmov.f32	s12, s6
 8011210:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011214:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011218:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801121c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011220:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011224:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011228:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801122c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011230:	ee12 2a90 	vmov	r2, s5
 8011234:	eef0 2a47 	vmov.f32	s5, s14
 8011238:	fb92 fef3 	sdiv	lr, r2, r3
 801123c:	ee13 2a10 	vmov	r2, s6
 8011240:	eeb0 3a67 	vmov.f32	s6, s15
 8011244:	fb92 f3f3 	sdiv	r3, r2, r3
 8011248:	9314      	str	r3, [sp, #80]	; 0x50
 801124a:	9b01      	ldr	r3, [sp, #4]
 801124c:	9a04      	ldr	r2, [sp, #16]
 801124e:	3b01      	subs	r3, #1
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011254:	bf08      	it	eq
 8011256:	4613      	moveq	r3, r2
 8011258:	e72b      	b.n	80110b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801125a:	1426      	asrs	r6, r4, #16
 801125c:	d460      	bmi.n	8011320 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801125e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011262:	42b2      	cmp	r2, r6
 8011264:	dd5c      	ble.n	8011320 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011266:	ea5f 4820 	movs.w	r8, r0, asr #16
 801126a:	d459      	bmi.n	8011320 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801126c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011270:	4542      	cmp	r2, r8
 8011272:	dd55      	ble.n	8011320 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011274:	9a02      	ldr	r2, [sp, #8]
 8011276:	9903      	ldr	r1, [sp, #12]
 8011278:	fb08 6602 	mla	r6, r8, r2, r6
 801127c:	0872      	lsrs	r2, r6, #1
 801127e:	07f6      	lsls	r6, r6, #31
 8011280:	5c8a      	ldrb	r2, [r1, r2]
 8011282:	bf54      	ite	pl
 8011284:	f002 020f 	andpl.w	r2, r2, #15
 8011288:	1112      	asrmi	r2, r2, #4
 801128a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801128e:	b2d2      	uxtb	r2, r2
 8011290:	2a00      	cmp	r2, #0
 8011292:	d045      	beq.n	8011320 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011294:	4926      	ldr	r1, [pc, #152]	; (8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011296:	f8d1 8000 	ldr.w	r8, [r1]
 801129a:	9905      	ldr	r1, [sp, #20]
 801129c:	fa5f fb88 	uxtb.w	fp, r8
 80112a0:	434a      	muls	r2, r1
 80112a2:	1c56      	adds	r6, r2, #1
 80112a4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80112a8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80112ac:	1212      	asrs	r2, r2, #8
 80112ae:	f815 9006 	ldrb.w	r9, [r5, r6]
 80112b2:	fa1f fa82 	uxth.w	sl, r2
 80112b6:	43d2      	mvns	r2, r2
 80112b8:	fb1b fb0a 	smulbb	fp, fp, sl
 80112bc:	b2d2      	uxtb	r2, r2
 80112be:	fb09 b902 	mla	r9, r9, r2, fp
 80112c2:	fa1f f989 	uxth.w	r9, r9
 80112c6:	f109 0b01 	add.w	fp, r9, #1
 80112ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80112ce:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80112d2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80112d6:	fb1b fb0a 	smulbb	fp, fp, sl
 80112da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80112de:	fb18 fa0a 	smulbb	sl, r8, sl
 80112e2:	f805 9006 	strb.w	r9, [r5, r6]
 80112e6:	442e      	add	r6, r5
 80112e8:	f896 8002 	ldrb.w	r8, [r6, #2]
 80112ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 80112f0:	fb08 aa02 	mla	sl, r8, r2, sl
 80112f4:	fb09 b902 	mla	r9, r9, r2, fp
 80112f8:	fa1f fa8a 	uxth.w	sl, sl
 80112fc:	fa1f f989 	uxth.w	r9, r9
 8011300:	f10a 0801 	add.w	r8, sl, #1
 8011304:	f109 0b01 	add.w	fp, r9, #1
 8011308:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801130c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011310:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011314:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011318:	f886 a002 	strb.w	sl, [r6, #2]
 801131c:	f886 9001 	strb.w	r9, [r6, #1]
 8011320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011322:	4474      	add	r4, lr
 8011324:	3701      	adds	r7, #1
 8011326:	4410      	add	r0, r2
 8011328:	e755      	b.n	80111d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801132a:	b007      	add	sp, #28
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	2400ae14 	.word	0x2400ae14

08011334 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	b085      	sub	sp, #20
 801133a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801133e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011340:	9203      	str	r2, [sp, #12]
 8011342:	6860      	ldr	r0, [r4, #4]
 8011344:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011348:	9100      	str	r1, [sp, #0]
 801134a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801134e:	fb00 2606 	mla	r6, r0, r6, r2
 8011352:	6822      	ldr	r2, [r4, #0]
 8011354:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011358:	4416      	add	r6, r2
 801135a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801135e:	3201      	adds	r2, #1
 8011360:	f022 0201 	bic.w	r2, r2, #1
 8011364:	9201      	str	r2, [sp, #4]
 8011366:	f8dc 2000 	ldr.w	r2, [ip]
 801136a:	9202      	str	r2, [sp, #8]
 801136c:	9a00      	ldr	r2, [sp, #0]
 801136e:	2a00      	cmp	r2, #0
 8011370:	dc03      	bgt.n	801137a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8011372:	9a03      	ldr	r2, [sp, #12]
 8011374:	2a00      	cmp	r2, #0
 8011376:	f340 8140 	ble.w	80115fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801137a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801137c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011380:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8011384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011386:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801138a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801138e:	2b00      	cmp	r3, #0
 8011390:	dd0e      	ble.n	80113b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011392:	142a      	asrs	r2, r5, #16
 8011394:	d405      	bmi.n	80113a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011396:	4572      	cmp	r2, lr
 8011398:	da03      	bge.n	80113a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801139a:	1422      	asrs	r2, r4, #16
 801139c:	d401      	bmi.n	80113a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801139e:	42ba      	cmp	r2, r7
 80113a0:	db07      	blt.n	80113b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80113a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113a4:	3b01      	subs	r3, #1
 80113a6:	3603      	adds	r6, #3
 80113a8:	4415      	add	r5, r2
 80113aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80113ac:	4414      	add	r4, r2
 80113ae:	e7ee      	b.n	801138e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80113b0:	d072      	beq.n	8011498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80113b2:	1e5a      	subs	r2, r3, #1
 80113b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113b6:	fb00 5002 	mla	r0, r0, r2, r5
 80113ba:	1400      	asrs	r0, r0, #16
 80113bc:	d463      	bmi.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113be:	4570      	cmp	r0, lr
 80113c0:	da61      	bge.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80113c4:	fb00 4202 	mla	r2, r0, r2, r4
 80113c8:	1412      	asrs	r2, r2, #16
 80113ca:	d45c      	bmi.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113cc:	42ba      	cmp	r2, r7
 80113ce:	da5a      	bge.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113d0:	1cf0      	adds	r0, r6, #3
 80113d2:	469a      	mov	sl, r3
 80113d4:	f1ba 0f00 	cmp.w	sl, #0
 80113d8:	dd59      	ble.n	801148e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80113da:	142a      	asrs	r2, r5, #16
 80113dc:	9901      	ldr	r1, [sp, #4]
 80113de:	1427      	asrs	r7, r4, #16
 80113e0:	fb01 2707 	mla	r7, r1, r7, r2
 80113e4:	9902      	ldr	r1, [sp, #8]
 80113e6:	087a      	lsrs	r2, r7, #1
 80113e8:	5c8a      	ldrb	r2, [r1, r2]
 80113ea:	07f9      	lsls	r1, r7, #31
 80113ec:	bf54      	ite	pl
 80113ee:	f002 020f 	andpl.w	r2, r2, #15
 80113f2:	1112      	asrmi	r2, r2, #4
 80113f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80113f8:	b2d2      	uxtb	r2, r2
 80113fa:	2a00      	cmp	r2, #0
 80113fc:	d03b      	beq.n	8011476 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80113fe:	4980      	ldr	r1, [pc, #512]	; (8011600 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8011400:	2aff      	cmp	r2, #255	; 0xff
 8011402:	680f      	ldr	r7, [r1, #0]
 8011404:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011408:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801140c:	b2ff      	uxtb	r7, r7
 801140e:	f000 80ed 	beq.w	80115ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8011412:	fa1f f882 	uxth.w	r8, r2
 8011416:	43d2      	mvns	r2, r2
 8011418:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801141c:	fb17 f708 	smulbb	r7, r7, r8
 8011420:	b2d2      	uxtb	r2, r2
 8011422:	fb19 f908 	smulbb	r9, r9, r8
 8011426:	fb0e 7702 	mla	r7, lr, r2, r7
 801142a:	fb1b f808 	smulbb	r8, fp, r8
 801142e:	b2bf      	uxth	r7, r7
 8011430:	f107 0e01 	add.w	lr, r7, #1
 8011434:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011438:	123f      	asrs	r7, r7, #8
 801143a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801143e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8011442:	fb07 9902 	mla	r9, r7, r2, r9
 8011446:	fa1f f989 	uxth.w	r9, r9
 801144a:	f109 0701 	add.w	r7, r9, #1
 801144e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011452:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8011456:	fb07 8802 	mla	r8, r7, r2, r8
 801145a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801145e:	fa1f f888 	uxth.w	r8, r8
 8011462:	f800 9c02 	strb.w	r9, [r0, #-2]
 8011466:	f108 0201 	add.w	r2, r8, #1
 801146a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801146e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011472:	f800 8c01 	strb.w	r8, [r0, #-1]
 8011476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011478:	3003      	adds	r0, #3
 801147a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801147e:	4415      	add	r5, r2
 8011480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011482:	4414      	add	r4, r2
 8011484:	e7a6      	b.n	80113d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8011486:	2700      	movs	r7, #0
 8011488:	1bda      	subs	r2, r3, r7
 801148a:	2a00      	cmp	r2, #0
 801148c:	dc40      	bgt.n	8011510 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801148e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011496:	441e      	add	r6, r3
 8011498:	9b00      	ldr	r3, [sp, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	f340 80ad 	ble.w	80115fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80114a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80114a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80114aa:	eeb0 6a62 	vmov.f32	s12, s5
 80114ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80114b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80114b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80114be:	eeb0 6a43 	vmov.f32	s12, s6
 80114c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80114ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80114ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80114d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80114d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80114da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80114de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80114e2:	ee12 2a90 	vmov	r2, s5
 80114e6:	eef0 2a47 	vmov.f32	s5, s14
 80114ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80114ee:	ee13 2a10 	vmov	r2, s6
 80114f2:	9311      	str	r3, [sp, #68]	; 0x44
 80114f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114f6:	eeb0 3a67 	vmov.f32	s6, s15
 80114fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80114fe:	9312      	str	r3, [sp, #72]	; 0x48
 8011500:	9b00      	ldr	r3, [sp, #0]
 8011502:	9a03      	ldr	r2, [sp, #12]
 8011504:	3b01      	subs	r3, #1
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801150a:	bf08      	it	eq
 801150c:	4613      	moveq	r3, r2
 801150e:	e72d      	b.n	801136c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8011510:	1428      	asrs	r0, r5, #16
 8011512:	d45c      	bmi.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8011514:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011518:	4282      	cmp	r2, r0
 801151a:	dd58      	ble.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801151c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8011520:	d455      	bmi.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8011522:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011526:	4572      	cmp	r2, lr
 8011528:	dd51      	ble.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801152a:	9a01      	ldr	r2, [sp, #4]
 801152c:	9902      	ldr	r1, [sp, #8]
 801152e:	fb0e 0002 	mla	r0, lr, r2, r0
 8011532:	0842      	lsrs	r2, r0, #1
 8011534:	07c0      	lsls	r0, r0, #31
 8011536:	5c8a      	ldrb	r2, [r1, r2]
 8011538:	bf54      	ite	pl
 801153a:	f002 020f 	andpl.w	r2, r2, #15
 801153e:	1112      	asrmi	r2, r2, #4
 8011540:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011544:	b2d2      	uxtb	r2, r2
 8011546:	2a00      	cmp	r2, #0
 8011548:	d041      	beq.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801154a:	492d      	ldr	r1, [pc, #180]	; (8011600 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801154c:	2aff      	cmp	r2, #255	; 0xff
 801154e:	6808      	ldr	r0, [r1, #0]
 8011550:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8011554:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8011558:	fa5f fe80 	uxtb.w	lr, r0
 801155c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8011560:	d03b      	beq.n	80115da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8011562:	fa1f f982 	uxth.w	r9, r2
 8011566:	4438      	add	r0, r7
 8011568:	43d2      	mvns	r2, r2
 801156a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801156e:	fb1e fe09 	smulbb	lr, lr, r9
 8011572:	fb1a fa09 	smulbb	sl, sl, r9
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	fb1b f909 	smulbb	r9, fp, r9
 801157c:	fb08 ee02 	mla	lr, r8, r2, lr
 8011580:	fa1f fe8e 	uxth.w	lr, lr
 8011584:	f10e 0801 	add.w	r8, lr, #1
 8011588:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801158c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8011590:	f806 e000 	strb.w	lr, [r6, r0]
 8011594:	4430      	add	r0, r6
 8011596:	f890 e001 	ldrb.w	lr, [r0, #1]
 801159a:	fb0e aa02 	mla	sl, lr, r2, sl
 801159e:	fa1f fa8a 	uxth.w	sl, sl
 80115a2:	f10a 0e01 	add.w	lr, sl, #1
 80115a6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80115aa:	f890 e002 	ldrb.w	lr, [r0, #2]
 80115ae:	fb0e 9902 	mla	r9, lr, r2, r9
 80115b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80115b6:	fa1f f989 	uxth.w	r9, r9
 80115ba:	f880 a001 	strb.w	sl, [r0, #1]
 80115be:	f109 0201 	add.w	r2, r9, #1
 80115c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80115c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115ca:	f880 9002 	strb.w	r9, [r0, #2]
 80115ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80115d0:	3701      	adds	r7, #1
 80115d2:	4415      	add	r5, r2
 80115d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80115d6:	4414      	add	r4, r2
 80115d8:	e756      	b.n	8011488 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80115da:	4438      	add	r0, r7
 80115dc:	f806 e000 	strb.w	lr, [r6, r0]
 80115e0:	4430      	add	r0, r6
 80115e2:	f880 a001 	strb.w	sl, [r0, #1]
 80115e6:	f880 b002 	strb.w	fp, [r0, #2]
 80115ea:	e7f0      	b.n	80115ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80115ec:	f800 7c03 	strb.w	r7, [r0, #-3]
 80115f0:	f800 9c02 	strb.w	r9, [r0, #-2]
 80115f4:	f800 bc01 	strb.w	fp, [r0, #-1]
 80115f8:	e73d      	b.n	8011476 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80115fa:	b005      	add	sp, #20
 80115fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011600:	2400ae14 	.word	0x2400ae14

08011604 <_ZN8touchgfx8LCD24bppD1Ev>:
 8011604:	4770      	bx	lr

08011606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8011606:	4770      	bx	lr

08011608 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8011608:	4770      	bx	lr

0801160a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801160a:	4770      	bx	lr

0801160c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801160c:	4770      	bx	lr

0801160e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801160e:	4770      	bx	lr

08011610 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011610:	4770      	bx	lr

08011612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011612:	4770      	bx	lr

08011614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011614:	4770      	bx	lr

08011616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011616:	4770      	bx	lr

08011618 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011618:	4770      	bx	lr

0801161a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801161a:	4770      	bx	lr

0801161c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801161c:	4770      	bx	lr

0801161e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801161e:	4770      	bx	lr

08011620 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011620:	4770      	bx	lr

08011622 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011622:	4770      	bx	lr

08011624 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011624:	4770      	bx	lr

08011626 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011626:	4770      	bx	lr

08011628 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011628:	4770      	bx	lr

0801162a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801162a:	4770      	bx	lr

0801162c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801162c:	4770      	bx	lr
	...

08011630 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011632:	4606      	mov	r6, r0
 8011634:	b087      	sub	sp, #28
 8011636:	4615      	mov	r5, r2
 8011638:	461f      	mov	r7, r3
 801163a:	b353      	cbz	r3, 8011692 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801163c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011640:	2b00      	cmp	r3, #0
 8011642:	dd26      	ble.n	8011692 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8011644:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011648:	2b00      	cmp	r3, #0
 801164a:	dd22      	ble.n	8011692 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801164c:	6808      	ldr	r0, [r1, #0]
 801164e:	aa04      	add	r2, sp, #16
 8011650:	6849      	ldr	r1, [r1, #4]
 8011652:	4c1b      	ldr	r4, [pc, #108]	; (80116c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8011654:	c203      	stmia	r2!, {r0, r1}
 8011656:	a804      	add	r0, sp, #16
 8011658:	f7fb fb74 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801165c:	6820      	ldr	r0, [r4, #0]
 801165e:	6803      	ldr	r3, [r0, #0]
 8011660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011662:	4798      	blx	r3
 8011664:	2fff      	cmp	r7, #255	; 0xff
 8011666:	d016      	beq.n	8011696 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8011668:	f010 0f08 	tst.w	r0, #8
 801166c:	6820      	ldr	r0, [r4, #0]
 801166e:	d015      	beq.n	801169c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8011670:	2400      	movs	r4, #0
 8011672:	6801      	ldr	r1, [r0, #0]
 8011674:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011678:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801167c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8011680:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8011684:	9401      	str	r4, [sp, #4]
 8011686:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801168a:	9400      	str	r4, [sp, #0]
 801168c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801168e:	4629      	mov	r1, r5
 8011690:	47a0      	blx	r4
 8011692:	b007      	add	sp, #28
 8011694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011696:	f010 0f02 	tst.w	r0, #2
 801169a:	e7e7      	b.n	801166c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801169c:	6803      	ldr	r3, [r0, #0]
 801169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116a0:	4798      	blx	r3
 80116a2:	4b08      	ldr	r3, [pc, #32]	; (80116c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80116a4:	4601      	mov	r1, r0
 80116a6:	4630      	mov	r0, r6
 80116a8:	881a      	ldrh	r2, [r3, #0]
 80116aa:	6833      	ldr	r3, [r6, #0]
 80116ac:	e9cd 5700 	strd	r5, r7, [sp]
 80116b0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80116b2:	ab04      	add	r3, sp, #16
 80116b4:	47a8      	blx	r5
 80116b6:	6820      	ldr	r0, [r4, #0]
 80116b8:	6803      	ldr	r3, [r0, #0]
 80116ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116bc:	4798      	blx	r3
 80116be:	e7e8      	b.n	8011692 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80116c0:	2400ae0c 	.word	0x2400ae0c
 80116c4:	2400ae06 	.word	0x2400ae06

080116c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80116c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116cc:	b08b      	sub	sp, #44	; 0x2c
 80116ce:	460d      	mov	r5, r1
 80116d0:	4616      	mov	r6, r2
 80116d2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80116d6:	f1b8 0f00 	cmp.w	r8, #0
 80116da:	d047      	beq.n	801176c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80116dc:	6810      	ldr	r0, [r2, #0]
 80116de:	ac06      	add	r4, sp, #24
 80116e0:	6851      	ldr	r1, [r2, #4]
 80116e2:	4f51      	ldr	r7, [pc, #324]	; (8011828 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80116e4:	c403      	stmia	r4!, {r0, r1}
 80116e6:	6818      	ldr	r0, [r3, #0]
 80116e8:	ac08      	add	r4, sp, #32
 80116ea:	6859      	ldr	r1, [r3, #4]
 80116ec:	c403      	stmia	r4!, {r0, r1}
 80116ee:	a806      	add	r0, sp, #24
 80116f0:	f7fb fb28 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80116f4:	4631      	mov	r1, r6
 80116f6:	a808      	add	r0, sp, #32
 80116f8:	f7fb fb4c 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80116fc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011700:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011704:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011708:	6838      	ldr	r0, [r7, #0]
 801170a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801170e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8011712:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8011716:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801171a:	440d      	add	r5, r1
 801171c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011720:	440a      	add	r2, r1
 8011722:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011726:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801172a:	4413      	add	r3, r2
 801172c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011730:	6803      	ldr	r3, [r0, #0]
 8011732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011734:	4798      	blx	r3
 8011736:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801173a:	d01a      	beq.n	8011772 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801173c:	f010 0f04 	tst.w	r0, #4
 8011740:	6838      	ldr	r0, [r7, #0]
 8011742:	d019      	beq.n	8011778 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8011744:	2100      	movs	r1, #0
 8011746:	6807      	ldr	r7, [r0, #0]
 8011748:	b2a4      	uxth	r4, r4
 801174a:	f8cd 800c 	str.w	r8, [sp, #12]
 801174e:	b2b6      	uxth	r6, r6
 8011750:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8011754:	9401      	str	r4, [sp, #4]
 8011756:	9600      	str	r6, [sp, #0]
 8011758:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801175c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8011760:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011764:	9102      	str	r1, [sp, #8]
 8011766:	4629      	mov	r1, r5
 8011768:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801176a:	47a0      	blx	r4
 801176c:	b00b      	add	sp, #44	; 0x2c
 801176e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011772:	f010 0f01 	tst.w	r0, #1
 8011776:	e7e3      	b.n	8011740 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8011778:	6803      	ldr	r3, [r0, #0]
 801177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801177c:	4798      	blx	r3
 801177e:	4a2b      	ldr	r2, [pc, #172]	; (801182c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8011780:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8011784:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011788:	8813      	ldrh	r3, [r2, #0]
 801178a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801178e:	fb03 f404 	mul.w	r4, r3, r4
 8011792:	fb03 c101 	mla	r1, r3, r1, ip
 8011796:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801179a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801179e:	4408      	add	r0, r1
 80117a0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80117a4:	4404      	add	r4, r0
 80117a6:	d02e      	beq.n	8011806 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80117a8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80117ac:	1b9b      	subs	r3, r3, r6
 80117ae:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80117b2:	1b96      	subs	r6, r2, r6
 80117b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80117bc:	42a0      	cmp	r0, r4
 80117be:	d22d      	bcs.n	801181c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80117c0:	eb00 0e01 	add.w	lr, r0, r1
 80117c4:	4570      	cmp	r0, lr
 80117c6:	d210      	bcs.n	80117ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80117c8:	f890 9000 	ldrb.w	r9, [r0]
 80117cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80117d0:	fb19 f90c 	smulbb	r9, r9, ip
 80117d4:	fb02 9208 	mla	r2, r2, r8, r9
 80117d8:	b292      	uxth	r2, r2
 80117da:	f102 0901 	add.w	r9, r2, #1
 80117de:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80117e2:	1212      	asrs	r2, r2, #8
 80117e4:	f800 2b01 	strb.w	r2, [r0], #1
 80117e8:	e7ec      	b.n	80117c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80117ea:	4418      	add	r0, r3
 80117ec:	4435      	add	r5, r6
 80117ee:	e7e5      	b.n	80117bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80117f0:	8813      	ldrh	r3, [r2, #0]
 80117f2:	1b9b      	subs	r3, r3, r6
 80117f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117f8:	4418      	add	r0, r3
 80117fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80117fe:	1b9b      	subs	r3, r3, r6
 8011800:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011804:	441d      	add	r5, r3
 8011806:	42a0      	cmp	r0, r4
 8011808:	d208      	bcs.n	801181c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801180a:	eb00 0c01 	add.w	ip, r0, r1
 801180e:	4560      	cmp	r0, ip
 8011810:	d2ee      	bcs.n	80117f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8011812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011816:	f800 3b01 	strb.w	r3, [r0], #1
 801181a:	e7f8      	b.n	801180e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801181c:	6838      	ldr	r0, [r7, #0]
 801181e:	6803      	ldr	r3, [r0, #0]
 8011820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011822:	4798      	blx	r3
 8011824:	e7a2      	b.n	801176c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8011826:	bf00      	nop
 8011828:	2400ae0c 	.word	0x2400ae0c
 801182c:	2400ae06 	.word	0x2400ae06

08011830 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8011830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011832:	2300      	movs	r3, #0
 8011834:	b085      	sub	sp, #20
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	4b41      	ldr	r3, [pc, #260]	; (8011940 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d136      	bne.n	80118ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8011840:	4a40      	ldr	r2, [pc, #256]	; (8011944 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8011842:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011846:	f8ad 2004 	strh.w	r2, [sp, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d131      	bne.n	80118b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801184e:	4b3e      	ldr	r3, [pc, #248]	; (8011948 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8011850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011854:	ac02      	add	r4, sp, #8
 8011856:	6808      	ldr	r0, [r1, #0]
 8011858:	f8ad 3006 	strh.w	r3, [sp, #6]
 801185c:	ab02      	add	r3, sp, #8
 801185e:	6849      	ldr	r1, [r1, #4]
 8011860:	4d3a      	ldr	r5, [pc, #232]	; (801194c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8011862:	c303      	stmia	r3!, {r0, r1}
 8011864:	4669      	mov	r1, sp
 8011866:	4620      	mov	r0, r4
 8011868:	f7fb fa94 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801186c:	4668      	mov	r0, sp
 801186e:	f7fb fa69 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011872:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011876:	f8bd 2000 	ldrh.w	r2, [sp]
 801187a:	462e      	mov	r6, r5
 801187c:	6828      	ldr	r0, [r5, #0]
 801187e:	4413      	add	r3, r2
 8011880:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011884:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011888:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801188c:	4413      	add	r3, r2
 801188e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011892:	6803      	ldr	r3, [r0, #0]
 8011894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011896:	4798      	blx	r3
 8011898:	f010 0f01 	tst.w	r0, #1
 801189c:	d00b      	beq.n	80118b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801189e:	6828      	ldr	r0, [r5, #0]
 80118a0:	6803      	ldr	r3, [r0, #0]
 80118a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80118a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118a8:	4798      	blx	r3
 80118aa:	b005      	add	sp, #20
 80118ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ae:	4a26      	ldr	r2, [pc, #152]	; (8011948 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80118b0:	e7c7      	b.n	8011842 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80118b2:	4b24      	ldr	r3, [pc, #144]	; (8011944 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80118b4:	e7cc      	b.n	8011850 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80118b6:	6830      	ldr	r0, [r6, #0]
 80118b8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80118bc:	6803      	ldr	r3, [r0, #0]
 80118be:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80118c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c4:	4798      	blx	r3
 80118c6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80118ca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80118ce:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80118d2:	fb14 3402 	smlabb	r4, r4, r2, r3
 80118d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80118da:	4404      	add	r4, r0
 80118dc:	6830      	ldr	r0, [r6, #0]
 80118de:	6803      	ldr	r3, [r0, #0]
 80118e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e2:	4798      	blx	r3
 80118e4:	4917      	ldr	r1, [pc, #92]	; (8011944 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80118e6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80118ea:	880b      	ldrh	r3, [r1, #0]
 80118ec:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80118f0:	fb03 c202 	mla	r2, r3, r2, ip
 80118f4:	437b      	muls	r3, r7
 80118f6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80118fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80118fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011902:	4410      	add	r0, r2
 8011904:	18c2      	adds	r2, r0, r3
 8011906:	4290      	cmp	r0, r2
 8011908:	d214      	bcs.n	8011934 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801190a:	eb00 0c07 	add.w	ip, r0, r7
 801190e:	4560      	cmp	r0, ip
 8011910:	d204      	bcs.n	801191c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8011912:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011916:	f800 3b01 	strb.w	r3, [r0], #1
 801191a:	e7f8      	b.n	801190e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801191c:	880b      	ldrh	r3, [r1, #0]
 801191e:	1b5b      	subs	r3, r3, r5
 8011920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011924:	4418      	add	r0, r3
 8011926:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801192a:	1b5b      	subs	r3, r3, r5
 801192c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011930:	441c      	add	r4, r3
 8011932:	e7e8      	b.n	8011906 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8011934:	6830      	ldr	r0, [r6, #0]
 8011936:	6803      	ldr	r3, [r0, #0]
 8011938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193a:	4798      	blx	r3
 801193c:	e7b5      	b.n	80118aa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801193e:	bf00      	nop
 8011940:	2400ae04 	.word	0x2400ae04
 8011944:	2400ae06 	.word	0x2400ae06
 8011948:	2400ae08 	.word	0x2400ae08
 801194c:	2400ae0c 	.word	0x2400ae0c

08011950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8011950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	b089      	sub	sp, #36	; 0x24
 8011956:	4607      	mov	r7, r0
 8011958:	4689      	mov	r9, r1
 801195a:	4692      	mov	sl, r2
 801195c:	ac08      	add	r4, sp, #32
 801195e:	461e      	mov	r6, r3
 8011960:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8011964:	4620      	mov	r0, r4
 8011966:	f7fe f8ef 	bl	800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	4605      	mov	r5, r0
 801196e:	4620      	mov	r0, r4
 8011970:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011974:	f7fe f834 	bl	800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011978:	4683      	mov	fp, r0
 801197a:	4620      	mov	r0, r4
 801197c:	f7fe f864 	bl	800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011980:	4653      	mov	r3, sl
 8011982:	464a      	mov	r2, r9
 8011984:	4639      	mov	r1, r7
 8011986:	9500      	str	r5, [sp, #0]
 8011988:	e9cd b001 	strd	fp, r0, [sp, #4]
 801198c:	a806      	add	r0, sp, #24
 801198e:	47c0      	blx	r8
 8011990:	a906      	add	r1, sp, #24
 8011992:	4630      	mov	r0, r6
 8011994:	f7fd ff08 	bl	800f7a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8011998:	4628      	mov	r0, r5
 801199a:	b009      	add	sp, #36	; 0x24
 801199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119a0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80119a0:	b510      	push	{r4, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	2158      	movs	r1, #88	; 0x58
 80119a6:	f006 f8f6 	bl	8017b96 <_ZdlPvj>
 80119aa:	4620      	mov	r0, r4
 80119ac:	bd10      	pop	{r4, pc}

080119ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80119ae:	b510      	push	{r4, lr}
 80119b0:	4604      	mov	r4, r0
 80119b2:	2104      	movs	r1, #4
 80119b4:	f006 f8ef 	bl	8017b96 <_ZdlPvj>
 80119b8:	4620      	mov	r0, r4
 80119ba:	bd10      	pop	{r4, pc}

080119bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80119bc:	b510      	push	{r4, lr}
 80119be:	4604      	mov	r4, r0
 80119c0:	2104      	movs	r1, #4
 80119c2:	f006 f8e8 	bl	8017b96 <_ZdlPvj>
 80119c6:	4620      	mov	r0, r4
 80119c8:	bd10      	pop	{r4, pc}

080119ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80119ca:	b510      	push	{r4, lr}
 80119cc:	4604      	mov	r4, r0
 80119ce:	2104      	movs	r1, #4
 80119d0:	f006 f8e1 	bl	8017b96 <_ZdlPvj>
 80119d4:	4620      	mov	r0, r4
 80119d6:	bd10      	pop	{r4, pc}

080119d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	4604      	mov	r4, r0
 80119dc:	2104      	movs	r1, #4
 80119de:	f006 f8da 	bl	8017b96 <_ZdlPvj>
 80119e2:	4620      	mov	r0, r4
 80119e4:	bd10      	pop	{r4, pc}

080119e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80119e6:	b510      	push	{r4, lr}
 80119e8:	4604      	mov	r4, r0
 80119ea:	2104      	movs	r1, #4
 80119ec:	f006 f8d3 	bl	8017b96 <_ZdlPvj>
 80119f0:	4620      	mov	r0, r4
 80119f2:	bd10      	pop	{r4, pc}

080119f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80119f4:	b510      	push	{r4, lr}
 80119f6:	4604      	mov	r4, r0
 80119f8:	2104      	movs	r1, #4
 80119fa:	f006 f8cc 	bl	8017b96 <_ZdlPvj>
 80119fe:	4620      	mov	r0, r4
 8011a00:	bd10      	pop	{r4, pc}

08011a02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011a02:	b510      	push	{r4, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	2104      	movs	r1, #4
 8011a08:	f006 f8c5 	bl	8017b96 <_ZdlPvj>
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	bd10      	pop	{r4, pc}

08011a10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011a10:	b510      	push	{r4, lr}
 8011a12:	4604      	mov	r4, r0
 8011a14:	2104      	movs	r1, #4
 8011a16:	f006 f8be 	bl	8017b96 <_ZdlPvj>
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	bd10      	pop	{r4, pc}

08011a1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8011a1e:	b510      	push	{r4, lr}
 8011a20:	4604      	mov	r4, r0
 8011a22:	2104      	movs	r1, #4
 8011a24:	f006 f8b7 	bl	8017b96 <_ZdlPvj>
 8011a28:	4620      	mov	r0, r4
 8011a2a:	bd10      	pop	{r4, pc}

08011a2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	4604      	mov	r4, r0
 8011a30:	2104      	movs	r1, #4
 8011a32:	f006 f8b0 	bl	8017b96 <_ZdlPvj>
 8011a36:	4620      	mov	r0, r4
 8011a38:	bd10      	pop	{r4, pc}

08011a3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011a3a:	b510      	push	{r4, lr}
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	2104      	movs	r1, #4
 8011a40:	f006 f8a9 	bl	8017b96 <_ZdlPvj>
 8011a44:	4620      	mov	r0, r4
 8011a46:	bd10      	pop	{r4, pc}

08011a48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	2104      	movs	r1, #4
 8011a4e:	f006 f8a2 	bl	8017b96 <_ZdlPvj>
 8011a52:	4620      	mov	r0, r4
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011a56:	b510      	push	{r4, lr}
 8011a58:	4604      	mov	r4, r0
 8011a5a:	2104      	movs	r1, #4
 8011a5c:	f006 f89b 	bl	8017b96 <_ZdlPvj>
 8011a60:	4620      	mov	r0, r4
 8011a62:	bd10      	pop	{r4, pc}

08011a64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011a64:	b510      	push	{r4, lr}
 8011a66:	4604      	mov	r4, r0
 8011a68:	2104      	movs	r1, #4
 8011a6a:	f006 f894 	bl	8017b96 <_ZdlPvj>
 8011a6e:	4620      	mov	r0, r4
 8011a70:	bd10      	pop	{r4, pc}

08011a72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011a72:	b510      	push	{r4, lr}
 8011a74:	4604      	mov	r4, r0
 8011a76:	2104      	movs	r1, #4
 8011a78:	f006 f88d 	bl	8017b96 <_ZdlPvj>
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	bd10      	pop	{r4, pc}

08011a80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	4604      	mov	r4, r0
 8011a84:	2104      	movs	r1, #4
 8011a86:	f006 f886 	bl	8017b96 <_ZdlPvj>
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	bd10      	pop	{r4, pc}

08011a8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8011a8e:	b510      	push	{r4, lr}
 8011a90:	4604      	mov	r4, r0
 8011a92:	2104      	movs	r1, #4
 8011a94:	f006 f87f 	bl	8017b96 <_ZdlPvj>
 8011a98:	4620      	mov	r0, r4
 8011a9a:	bd10      	pop	{r4, pc}

08011a9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	2104      	movs	r1, #4
 8011aa2:	f006 f878 	bl	8017b96 <_ZdlPvj>
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	bd10      	pop	{r4, pc}

08011aaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8011aaa:	b510      	push	{r4, lr}
 8011aac:	4604      	mov	r4, r0
 8011aae:	2104      	movs	r1, #4
 8011ab0:	f006 f871 	bl	8017b96 <_ZdlPvj>
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	bd10      	pop	{r4, pc}

08011ab8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8011ab8:	b510      	push	{r4, lr}
 8011aba:	4604      	mov	r4, r0
 8011abc:	2104      	movs	r1, #4
 8011abe:	f006 f86a 	bl	8017b96 <_ZdlPvj>
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	bd10      	pop	{r4, pc}

08011ac6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aca:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011ace:	9c06      	ldr	r4, [sp, #24]
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d06e      	beq.n	8011bb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011ad4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8011ad8:	2d00      	cmp	r5, #0
 8011ada:	dd6a      	ble.n	8011bb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011adc:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8011ae0:	f1bc 0f00 	cmp.w	ip, #0
 8011ae4:	dd65      	ble.n	8011bb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011ae6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8011aea:	28ff      	cmp	r0, #255	; 0xff
 8011aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011af0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8011af4:	fb02 3306 	mla	r3, r2, r6, r3
 8011af8:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011afc:	b2e4      	uxtb	r4, r4
 8011afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b02:	4419      	add	r1, r3
 8011b04:	fb02 f30c 	mul.w	r3, r2, ip
 8011b08:	eba2 0205 	sub.w	r2, r2, r5
 8011b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011b18:	440b      	add	r3, r1
 8011b1a:	d03e      	beq.n	8011b9a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8011b1c:	fa1f fc80 	uxth.w	ip, r0
 8011b20:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011b24:	fb06 f60c 	mul.w	r6, r6, ip
 8011b28:	b280      	uxth	r0, r0
 8011b2a:	fb07 f70c 	mul.w	r7, r7, ip
 8011b2e:	fb04 f40c 	mul.w	r4, r4, ip
 8011b32:	4299      	cmp	r1, r3
 8011b34:	d23d      	bcs.n	8011bb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011b36:	eb01 0c05 	add.w	ip, r1, r5
 8011b3a:	458c      	cmp	ip, r1
 8011b3c:	f101 0e03 	add.w	lr, r1, #3
 8011b40:	d928      	bls.n	8011b94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8011b42:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8011b46:	fb11 f100 	smulbb	r1, r1, r0
 8011b4a:	4421      	add	r1, r4
 8011b4c:	b289      	uxth	r1, r1
 8011b4e:	f101 0801 	add.w	r8, r1, #1
 8011b52:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b56:	1209      	asrs	r1, r1, #8
 8011b58:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8011b5c:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8011b60:	fb11 f100 	smulbb	r1, r1, r0
 8011b64:	4439      	add	r1, r7
 8011b66:	b289      	uxth	r1, r1
 8011b68:	f101 0801 	add.w	r8, r1, #1
 8011b6c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b70:	1209      	asrs	r1, r1, #8
 8011b72:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8011b76:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8011b7a:	fb11 f100 	smulbb	r1, r1, r0
 8011b7e:	4431      	add	r1, r6
 8011b80:	b289      	uxth	r1, r1
 8011b82:	f101 0801 	add.w	r8, r1, #1
 8011b86:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b8a:	1209      	asrs	r1, r1, #8
 8011b8c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8011b90:	4671      	mov	r1, lr
 8011b92:	e7d2      	b.n	8011b3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8011b94:	4411      	add	r1, r2
 8011b96:	e7cc      	b.n	8011b32 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8011b98:	4411      	add	r1, r2
 8011b9a:	4299      	cmp	r1, r3
 8011b9c:	d209      	bcs.n	8011bb2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011b9e:	1948      	adds	r0, r1, r5
 8011ba0:	4281      	cmp	r1, r0
 8011ba2:	d2f9      	bcs.n	8011b98 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8011ba4:	700c      	strb	r4, [r1, #0]
 8011ba6:	3103      	adds	r1, #3
 8011ba8:	f801 7c02 	strb.w	r7, [r1, #-2]
 8011bac:	f801 6c01 	strb.w	r6, [r1, #-1]
 8011bb0:	e7f6      	b.n	8011ba0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8011bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011bb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	b093      	sub	sp, #76	; 0x4c
 8011bbe:	4699      	mov	r9, r3
 8011bc0:	4617      	mov	r7, r2
 8011bc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bc6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8011bca:	4604      	mov	r4, r0
 8011bcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bd0:	a80c      	add	r0, sp, #48	; 0x30
 8011bd2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8011bd6:	460d      	mov	r5, r1
 8011bd8:	4649      	mov	r1, r9
 8011bda:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8011bde:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011be2:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8011be6:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8011bea:	f7f9 f93b 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 8011bee:	4639      	mov	r1, r7
 8011bf0:	a80c      	add	r0, sp, #48	; 0x30
 8011bf2:	f7f9 f937 	bl	800ae64 <_ZN8touchgfx4RectaNERKS0_>
 8011bf6:	4b78      	ldr	r3, [pc, #480]	; (8011dd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8011bf8:	8818      	ldrh	r0, [r3, #0]
 8011bfa:	4b78      	ldr	r3, [pc, #480]	; (8011ddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8011bfc:	b202      	sxth	r2, r0
 8011bfe:	8819      	ldrh	r1, [r3, #0]
 8011c00:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011c04:	b20f      	sxth	r7, r1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	da07      	bge.n	8011c1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8011c0a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8011c0e:	4463      	add	r3, ip
 8011c10:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011c14:	2300      	movs	r3, #0
 8011c16:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011c1a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011c1e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8011c22:	1ad2      	subs	r2, r2, r3
 8011c24:	4594      	cmp	ip, r2
 8011c26:	bfc4      	itt	gt
 8011c28:	1ac2      	subgt	r2, r0, r3
 8011c2a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8011c2e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c32:	2a00      	cmp	r2, #0
 8011c34:	da07      	bge.n	8011c46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8011c36:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8011c3a:	4462      	add	r2, ip
 8011c3c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8011c40:	2200      	movs	r2, #0
 8011c42:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011c46:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c4a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8011c4e:	1abf      	subs	r7, r7, r2
 8011c50:	45bc      	cmp	ip, r7
 8011c52:	f8df c190 	ldr.w	ip, [pc, #400]	; 8011de4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8011c56:	bfc8      	it	gt
 8011c58:	1a8f      	subgt	r7, r1, r2
 8011c5a:	f89c c000 	ldrb.w	ip, [ip]
 8011c5e:	bfc8      	it	gt
 8011c60:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8011c64:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8011c68:	f1bc 0f00 	cmp.w	ip, #0
 8011c6c:	d176      	bne.n	8011d5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8011c6e:	4287      	cmp	r7, r0
 8011c70:	bf14      	ite	ne
 8011c72:	2100      	movne	r1, #0
 8011c74:	2101      	moveq	r1, #1
 8011c76:	2f00      	cmp	r7, #0
 8011c78:	9107      	str	r1, [sp, #28]
 8011c7a:	dd73      	ble.n	8011d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c7c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8011c80:	2900      	cmp	r1, #0
 8011c82:	9104      	str	r1, [sp, #16]
 8011c84:	dd6e      	ble.n	8011d64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c86:	f8b9 1000 	ldrh.w	r1, [r9]
 8011c8a:	a80e      	add	r0, sp, #56	; 0x38
 8011c8c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8011c90:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011c94:	1a5b      	subs	r3, r3, r1
 8011c96:	a910      	add	r1, sp, #64	; 0x40
 8011c98:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8011c9c:	b21b      	sxth	r3, r3
 8011c9e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8011ca2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8011de8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011ca6:	9305      	str	r3, [sp, #20]
 8011ca8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8011cac:	1ad2      	subs	r2, r2, r3
 8011cae:	b213      	sxth	r3, r2
 8011cb0:	9306      	str	r3, [sp, #24]
 8011cb2:	9b05      	ldr	r3, [sp, #20]
 8011cb4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8011cb8:	9b06      	ldr	r3, [sp, #24]
 8011cba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011cbe:	9b04      	ldr	r3, [sp, #16]
 8011cc0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9310      	str	r3, [sp, #64]	; 0x40
 8011cc8:	f7fb f864 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011ccc:	4640      	mov	r0, r8
 8011cce:	f7fb f839 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011cd2:	a810      	add	r0, sp, #64	; 0x40
 8011cd4:	f7fb f836 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011cd8:	4b41      	ldr	r3, [pc, #260]	; (8011de0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8011cda:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8011cde:	4628      	mov	r0, r5
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	9308      	str	r3, [sp, #32]
 8011ce4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8011ce8:	b21b      	sxth	r3, r3
 8011cea:	9303      	str	r3, [sp, #12]
 8011cec:	682b      	ldr	r3, [r5, #0]
 8011cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf0:	4798      	blx	r3
 8011cf2:	9a03      	ldr	r2, [sp, #12]
 8011cf4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011cf8:	4681      	mov	r9, r0
 8011cfa:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011cfe:	fb13 f302 	smulbb	r3, r3, r2
 8011d02:	2203      	movs	r2, #3
 8011d04:	f8da 0000 	ldr.w	r0, [sl]
 8011d08:	fb15 3302 	smlabb	r3, r5, r2, r3
 8011d0c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8011d0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d10:	441d      	add	r5, r3
 8011d12:	6803      	ldr	r3, [r0, #0]
 8011d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d16:	4798      	blx	r3
 8011d18:	9009      	str	r0, [sp, #36]	; 0x24
 8011d1a:	f8da 0000 	ldr.w	r0, [sl]
 8011d1e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011d22:	6803      	ldr	r3, [r0, #0]
 8011d24:	910a      	str	r1, [sp, #40]	; 0x28
 8011d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d28:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8011d2c:	4798      	blx	r3
 8011d2e:	f010 0f01 	tst.w	r0, #1
 8011d32:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011d36:	d01e      	beq.n	8011d76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8011d38:	f8da 0000 	ldr.w	r0, [sl]
 8011d3c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8011d40:	6803      	ldr	r3, [r0, #0]
 8011d42:	9200      	str	r2, [sp, #0]
 8011d44:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8011d46:	462b      	mov	r3, r5
 8011d48:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011d4c:	47b0      	blx	r6
 8011d4e:	9b05      	ldr	r3, [sp, #20]
 8011d50:	80a7      	strh	r7, [r4, #4]
 8011d52:	8023      	strh	r3, [r4, #0]
 8011d54:	9b06      	ldr	r3, [sp, #24]
 8011d56:	8063      	strh	r3, [r4, #2]
 8011d58:	9b04      	ldr	r3, [sp, #16]
 8011d5a:	e007      	b.n	8011d6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8011d5c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8011d60:	4288      	cmp	r0, r1
 8011d62:	e785      	b.n	8011c70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8011d64:	2300      	movs	r3, #0
 8011d66:	8023      	strh	r3, [r4, #0]
 8011d68:	8063      	strh	r3, [r4, #2]
 8011d6a:	80a3      	strh	r3, [r4, #4]
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	80e3      	strh	r3, [r4, #6]
 8011d70:	b013      	add	sp, #76	; 0x4c
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d76:	fb09 f606 	mul.w	r6, r9, r6
 8011d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d7c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8011d80:	9a07      	ldr	r2, [sp, #28]
 8011d82:	4433      	add	r3, r6
 8011d84:	461e      	mov	r6, r3
 8011d86:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011d8a:	b16a      	cbz	r2, 8011da8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011d8c:	9a08      	ldr	r2, [sp, #32]
 8011d8e:	4593      	cmp	fp, r2
 8011d90:	d10a      	bne.n	8011da8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011d92:	f8da 0000 	ldr.w	r0, [sl]
 8011d96:	fb09 f303 	mul.w	r3, r9, r3
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	6802      	ldr	r2, [r0, #0]
 8011d9e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011da2:	4632      	mov	r2, r6
 8011da4:	47d0      	blx	sl
 8011da6:	e7d2      	b.n	8011d4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011da8:	9a03      	ldr	r2, [sp, #12]
 8011daa:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8011de8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011dae:	fb02 5803 	mla	r8, r2, r3, r5
 8011db2:	4545      	cmp	r5, r8
 8011db4:	d2cb      	bcs.n	8011d4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011db6:	f8db 0000 	ldr.w	r0, [fp]
 8011dba:	4629      	mov	r1, r5
 8011dbc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8011dc0:	6802      	ldr	r2, [r0, #0]
 8011dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011dc6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011dca:	4632      	mov	r2, r6
 8011dcc:	47d0      	blx	sl
 8011dce:	9b03      	ldr	r3, [sp, #12]
 8011dd0:	444e      	add	r6, r9
 8011dd2:	441d      	add	r5, r3
 8011dd4:	e7ed      	b.n	8011db2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8011dd6:	bf00      	nop
 8011dd8:	2400ae00 	.word	0x2400ae00
 8011ddc:	2400ae02 	.word	0x2400ae02
 8011de0:	2400ae06 	.word	0x2400ae06
 8011de4:	2400ae04 	.word	0x2400ae04
 8011de8:	2400ae0c 	.word	0x2400ae0c

08011dec <_ZN8touchgfx8LCD24bppC1Ev>:
 8011dec:	2200      	movs	r2, #0
 8011dee:	490c      	ldr	r1, [pc, #48]	; (8011e20 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8011df0:	6042      	str	r2, [r0, #4]
 8011df2:	6001      	str	r1, [r0, #0]
 8011df4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8011df8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8011dfc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011e00:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8011e04:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8011e08:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8011e0c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8011e10:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8011e14:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8011e18:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	0801a638 	.word	0x0801a638

08011e24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e28:	b091      	sub	sp, #68	; 0x44
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	4688      	mov	r8, r1
 8011e2e:	6810      	ldr	r0, [r2, #0]
 8011e30:	6851      	ldr	r1, [r2, #4]
 8011e32:	ac0c      	add	r4, sp, #48	; 0x30
 8011e34:	4616      	mov	r6, r2
 8011e36:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8011e3a:	4d64      	ldr	r5, [pc, #400]	; (8011fcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011e3c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8011fd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8011e40:	c403      	stmia	r4!, {r0, r1}
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	ac0e      	add	r4, sp, #56	; 0x38
 8011e46:	6859      	ldr	r1, [r3, #4]
 8011e48:	c403      	stmia	r4!, {r0, r1}
 8011e4a:	a80c      	add	r0, sp, #48	; 0x30
 8011e4c:	f7fa ff7a 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e50:	4631      	mov	r1, r6
 8011e52:	a80e      	add	r0, sp, #56	; 0x38
 8011e54:	f7fa ff9e 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e58:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011e5c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011e60:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011e64:	6828      	ldr	r0, [r5, #0]
 8011e66:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011e6a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8011e6e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8011e72:	440f      	add	r7, r1
 8011e74:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8011e78:	440a      	add	r2, r1
 8011e7a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8011e7e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011e82:	4413      	add	r3, r2
 8011e84:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011e88:	6803      	ldr	r3, [r0, #0]
 8011e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8c:	4798      	blx	r3
 8011e8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011e92:	6828      	ldr	r0, [r5, #0]
 8011e94:	d01f      	beq.n	8011ed6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8011e96:	2201      	movs	r2, #1
 8011e98:	2500      	movs	r5, #0
 8011e9a:	6801      	ldr	r1, [r0, #0]
 8011e9c:	b2a4      	uxth	r4, r4
 8011e9e:	b2b6      	uxth	r6, r6
 8011ea0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011ea4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8011ea8:	250b      	movs	r5, #11
 8011eaa:	9507      	str	r5, [sp, #28]
 8011eac:	f8ba 5000 	ldrh.w	r5, [sl]
 8011eb0:	f8cd 9010 	str.w	r9, [sp, #16]
 8011eb4:	9602      	str	r6, [sp, #8]
 8011eb6:	9401      	str	r4, [sp, #4]
 8011eb8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8011ebc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011ec0:	9203      	str	r2, [sp, #12]
 8011ec2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011ec6:	9200      	str	r2, [sp, #0]
 8011ec8:	4642      	mov	r2, r8
 8011eca:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8011ecc:	4639      	mov	r1, r7
 8011ece:	47a0      	blx	r4
 8011ed0:	b011      	add	sp, #68	; 0x44
 8011ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed6:	6803      	ldr	r3, [r0, #0]
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	4798      	blx	r3
 8011edc:	f8ba 5000 	ldrh.w	r5, [sl]
 8011ee0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011ee4:	f04f 0e04 	mov.w	lr, #4
 8011ee8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011eec:	436e      	muls	r6, r5
 8011eee:	fb05 2303 	mla	r3, r5, r3, r2
 8011ef2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011ef6:	1b2d      	subs	r5, r5, r4
 8011ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f00:	4418      	add	r0, r3
 8011f02:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8011f06:	1982      	adds	r2, r0, r6
 8011f08:	1b1b      	subs	r3, r3, r4
 8011f0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f10:	4290      	cmp	r0, r2
 8011f12:	d254      	bcs.n	8011fbe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8011f14:	eb00 0a04 	add.w	sl, r0, r4
 8011f18:	4550      	cmp	r0, sl
 8011f1a:	d24c      	bcs.n	8011fb6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8011f1c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011f20:	fb1e e101 	smlabb	r1, lr, r1, lr
 8011f24:	eb08 0c01 	add.w	ip, r8, r1
 8011f28:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8011f2c:	b173      	cbz	r3, 8011f4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011f2e:	2bff      	cmp	r3, #255	; 0xff
 8011f30:	f818 b001 	ldrb.w	fp, [r8, r1]
 8011f34:	d10c      	bne.n	8011f50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011f3a:	d109      	bne.n	8011f50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f3c:	f880 b000 	strb.w	fp, [r0]
 8011f40:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8011f44:	7043      	strb	r3, [r0, #1]
 8011f46:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8011f4a:	7083      	strb	r3, [r0, #2]
 8011f4c:	3003      	adds	r0, #3
 8011f4e:	e7e3      	b.n	8011f18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8011f50:	fb09 f103 	mul.w	r1, r9, r3
 8011f54:	1c4b      	adds	r3, r1, #1
 8011f56:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8011f5a:	7801      	ldrb	r1, [r0, #0]
 8011f5c:	121b      	asrs	r3, r3, #8
 8011f5e:	b29e      	uxth	r6, r3
 8011f60:	43db      	mvns	r3, r3
 8011f62:	fb1b fb06 	smulbb	fp, fp, r6
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	fb01 b103 	mla	r1, r1, r3, fp
 8011f6c:	b289      	uxth	r1, r1
 8011f6e:	f101 0b01 	add.w	fp, r1, #1
 8011f72:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011f76:	f890 b001 	ldrb.w	fp, [r0, #1]
 8011f7a:	fb1b fb03 	smulbb	fp, fp, r3
 8011f7e:	1209      	asrs	r1, r1, #8
 8011f80:	7001      	strb	r1, [r0, #0]
 8011f82:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011f86:	fb01 b106 	mla	r1, r1, r6, fp
 8011f8a:	b289      	uxth	r1, r1
 8011f8c:	f101 0b01 	add.w	fp, r1, #1
 8011f90:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011f94:	1209      	asrs	r1, r1, #8
 8011f96:	7041      	strb	r1, [r0, #1]
 8011f98:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011f9c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8011fa0:	fb1c f303 	smulbb	r3, ip, r3
 8011fa4:	fb01 3606 	mla	r6, r1, r6, r3
 8011fa8:	b2b6      	uxth	r6, r6
 8011faa:	1c73      	adds	r3, r6, #1
 8011fac:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8011fb0:	1236      	asrs	r6, r6, #8
 8011fb2:	7086      	strb	r6, [r0, #2]
 8011fb4:	e7ca      	b.n	8011f4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fb8:	4428      	add	r0, r5
 8011fba:	441f      	add	r7, r3
 8011fbc:	e7a8      	b.n	8011f10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8011fbe:	4b03      	ldr	r3, [pc, #12]	; (8011fcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011fc0:	6818      	ldr	r0, [r3, #0]
 8011fc2:	6803      	ldr	r3, [r0, #0]
 8011fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc6:	4798      	blx	r3
 8011fc8:	e782      	b.n	8011ed0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011fca:	bf00      	nop
 8011fcc:	2400ae0c 	.word	0x2400ae0c
 8011fd0:	2400ae06 	.word	0x2400ae06

08011fd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd8:	b091      	sub	sp, #68	; 0x44
 8011fda:	4680      	mov	r8, r0
 8011fdc:	460e      	mov	r6, r1
 8011fde:	6810      	ldr	r0, [r2, #0]
 8011fe0:	6851      	ldr	r1, [r2, #4]
 8011fe2:	ad0c      	add	r5, sp, #48	; 0x30
 8011fe4:	4614      	mov	r4, r2
 8011fe6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8011fea:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8012184 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8011fee:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012188 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011ff2:	c503      	stmia	r5!, {r0, r1}
 8011ff4:	6818      	ldr	r0, [r3, #0]
 8011ff6:	ad0e      	add	r5, sp, #56	; 0x38
 8011ff8:	6859      	ldr	r1, [r3, #4]
 8011ffa:	c503      	stmia	r5!, {r0, r1}
 8011ffc:	a80c      	add	r0, sp, #48	; 0x30
 8011ffe:	f7fa fea1 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012002:	4621      	mov	r1, r4
 8012004:	a80e      	add	r0, sp, #56	; 0x38
 8012006:	f7fa fec5 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801200a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801200e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012012:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012016:	f8d9 0000 	ldr.w	r0, [r9]
 801201a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801201e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012022:	eb08 0401 	add.w	r4, r8, r1
 8012026:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801202a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801202e:	440a      	add	r2, r1
 8012030:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012034:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012038:	4413      	add	r3, r2
 801203a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801203e:	6803      	ldr	r3, [r0, #0]
 8012040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012042:	4798      	blx	r3
 8012044:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012048:	f8d9 0000 	ldr.w	r0, [r9]
 801204c:	d022      	beq.n	8012094 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801204e:	2200      	movs	r2, #0
 8012050:	f04f 0c01 	mov.w	ip, #1
 8012054:	6801      	ldr	r1, [r0, #0]
 8012056:	b2ad      	uxth	r5, r5
 8012058:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801205c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8012060:	f04f 0c0b 	mov.w	ip, #11
 8012064:	f8cd c01c 	str.w	ip, [sp, #28]
 8012068:	f8ba c000 	ldrh.w	ip, [sl]
 801206c:	9704      	str	r7, [sp, #16]
 801206e:	9502      	str	r5, [sp, #8]
 8012070:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8012074:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012078:	9203      	str	r2, [sp, #12]
 801207a:	fa1f f288 	uxth.w	r2, r8
 801207e:	9201      	str	r2, [sp, #4]
 8012080:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012084:	9200      	str	r2, [sp, #0]
 8012086:	4632      	mov	r2, r6
 8012088:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801208a:	4621      	mov	r1, r4
 801208c:	47a8      	blx	r5
 801208e:	b011      	add	sp, #68	; 0x44
 8012090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012094:	6803      	ldr	r3, [r0, #0]
 8012096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012098:	4798      	blx	r3
 801209a:	f8ba 2000 	ldrh.w	r2, [sl]
 801209e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80120a2:	f04f 0e03 	mov.w	lr, #3
 80120a6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80120aa:	4355      	muls	r5, r2
 80120ac:	fa1f fc87 	uxth.w	ip, r7
 80120b0:	fb02 1303 	mla	r3, r2, r3, r1
 80120b4:	eba2 0208 	sub.w	r2, r2, r8
 80120b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80120c4:	4418      	add	r0, r3
 80120c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80120c8:	1943      	adds	r3, r0, r5
 80120ca:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80120ce:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80120d2:	eba2 0208 	sub.w	r2, r2, r8
 80120d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80120da:	b2ad      	uxth	r5, r5
 80120dc:	4298      	cmp	r0, r3
 80120de:	d24a      	bcs.n	8012176 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80120e0:	eb00 0908 	add.w	r9, r0, r8
 80120e4:	4621      	mov	r1, r4
 80120e6:	4548      	cmp	r0, r9
 80120e8:	460c      	mov	r4, r1
 80120ea:	d240      	bcs.n	801216e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80120ec:	f04f 0a04 	mov.w	sl, #4
 80120f0:	7824      	ldrb	r4, [r4, #0]
 80120f2:	2fff      	cmp	r7, #255	; 0xff
 80120f4:	f101 0101 	add.w	r1, r1, #1
 80120f8:	fb1e a404 	smlabb	r4, lr, r4, sl
 80120fc:	eb06 0a04 	add.w	sl, r6, r4
 8012100:	f816 b004 	ldrb.w	fp, [r6, r4]
 8012104:	d02b      	beq.n	801215e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8012106:	7804      	ldrb	r4, [r0, #0]
 8012108:	fb14 f405 	smulbb	r4, r4, r5
 801210c:	fb0b 440c 	mla	r4, fp, ip, r4
 8012110:	b2a4      	uxth	r4, r4
 8012112:	f104 0b01 	add.w	fp, r4, #1
 8012116:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801211a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801211e:	fb1b fb05 	smulbb	fp, fp, r5
 8012122:	1224      	asrs	r4, r4, #8
 8012124:	7004      	strb	r4, [r0, #0]
 8012126:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801212a:	fb04 b40c 	mla	r4, r4, ip, fp
 801212e:	b2a4      	uxth	r4, r4
 8012130:	f104 0b01 	add.w	fp, r4, #1
 8012134:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012138:	1224      	asrs	r4, r4, #8
 801213a:	7044      	strb	r4, [r0, #1]
 801213c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012140:	f890 a002 	ldrb.w	sl, [r0, #2]
 8012144:	fb1a fa05 	smulbb	sl, sl, r5
 8012148:	fb04 a40c 	mla	r4, r4, ip, sl
 801214c:	b2a4      	uxth	r4, r4
 801214e:	f104 0a01 	add.w	sl, r4, #1
 8012152:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8012156:	1224      	asrs	r4, r4, #8
 8012158:	7084      	strb	r4, [r0, #2]
 801215a:	3003      	adds	r0, #3
 801215c:	e7c3      	b.n	80120e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801215e:	f880 b000 	strb.w	fp, [r0]
 8012162:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012166:	7044      	strb	r4, [r0, #1]
 8012168:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801216c:	e7f4      	b.n	8012158 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801216e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012170:	4420      	add	r0, r4
 8012172:	188c      	adds	r4, r1, r2
 8012174:	e7b2      	b.n	80120dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8012176:	4b03      	ldr	r3, [pc, #12]	; (8012184 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8012178:	6818      	ldr	r0, [r3, #0]
 801217a:	6803      	ldr	r3, [r0, #0]
 801217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217e:	4798      	blx	r3
 8012180:	e785      	b.n	801208e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8012182:	bf00      	nop
 8012184:	2400ae0c 	.word	0x2400ae0c
 8012188:	2400ae06 	.word	0x2400ae06

0801218c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801218c:	b430      	push	{r4, r5}
 801218e:	780d      	ldrb	r5, [r1, #0]
 8012190:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8012194:	b11d      	cbz	r5, 801219e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8012196:	2d01      	cmp	r5, #1
 8012198:	d005      	beq.n	80121a6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801219a:	bc30      	pop	{r4, r5}
 801219c:	4770      	bx	lr
 801219e:	9402      	str	r4, [sp, #8]
 80121a0:	bc30      	pop	{r4, r5}
 80121a2:	f7ff be3f 	b.w	8011e24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80121a6:	9402      	str	r4, [sp, #8]
 80121a8:	bc30      	pop	{r4, r5}
 80121aa:	f7ff bf13 	b.w	8011fd4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

080121b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80121b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121b4:	4605      	mov	r5, r0
 80121b6:	b08f      	sub	sp, #60	; 0x3c
 80121b8:	460c      	mov	r4, r1
 80121ba:	461f      	mov	r7, r3
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d052      	beq.n	8012266 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80121c0:	6808      	ldr	r0, [r1, #0]
 80121c2:	ab0a      	add	r3, sp, #40	; 0x28
 80121c4:	6849      	ldr	r1, [r1, #4]
 80121c6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8012390 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80121ca:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8012394 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80121ce:	c303      	stmia	r3!, {r0, r1}
 80121d0:	6810      	ldr	r0, [r2, #0]
 80121d2:	ab0c      	add	r3, sp, #48	; 0x30
 80121d4:	6851      	ldr	r1, [r2, #4]
 80121d6:	c303      	stmia	r3!, {r0, r1}
 80121d8:	a80a      	add	r0, sp, #40	; 0x28
 80121da:	f7fa fdb3 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80121de:	4621      	mov	r1, r4
 80121e0:	a80c      	add	r0, sp, #48	; 0x30
 80121e2:	f7fa fdd7 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121e6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80121ea:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80121ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80121f2:	f8d8 0000 	ldr.w	r0, [r8]
 80121f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80121fa:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80121fe:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8012202:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8012206:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801220a:	440a      	add	r2, r1
 801220c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012210:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012214:	4413      	add	r3, r2
 8012216:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801221a:	6803      	ldr	r3, [r0, #0]
 801221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801221e:	4798      	blx	r3
 8012220:	2fff      	cmp	r7, #255	; 0xff
 8012222:	d023      	beq.n	801226c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012224:	f010 0f04 	tst.w	r0, #4
 8012228:	f8d8 0000 	ldr.w	r0, [r8]
 801222c:	d021      	beq.n	8012272 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801222e:	2100      	movs	r1, #0
 8012230:	f04f 0e01 	mov.w	lr, #1
 8012234:	f8d0 c000 	ldr.w	ip, [r0]
 8012238:	b2a4      	uxth	r4, r4
 801223a:	9106      	str	r1, [sp, #24]
 801223c:	b2b6      	uxth	r6, r6
 801223e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012242:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012246:	e9cd e107 	strd	lr, r1, [sp, #28]
 801224a:	f8b9 e000 	ldrh.w	lr, [r9]
 801224e:	9703      	str	r7, [sp, #12]
 8012250:	9401      	str	r4, [sp, #4]
 8012252:	9600      	str	r6, [sp, #0]
 8012254:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8012258:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801225c:	9102      	str	r1, [sp, #8]
 801225e:	4629      	mov	r1, r5
 8012260:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8012264:	47a0      	blx	r4
 8012266:	b00f      	add	sp, #60	; 0x3c
 8012268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801226c:	f010 0f01 	tst.w	r0, #1
 8012270:	e7da      	b.n	8012228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8012272:	6803      	ldr	r3, [r0, #0]
 8012274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012276:	4798      	blx	r3
 8012278:	f8b9 1000 	ldrh.w	r1, [r9]
 801227c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012280:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8012284:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012288:	434c      	muls	r4, r1
 801228a:	2fff      	cmp	r7, #255	; 0xff
 801228c:	fb01 2303 	mla	r3, r1, r3, r2
 8012290:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012294:	eba1 0106 	sub.w	r1, r1, r6
 8012298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801229c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80122a0:	4418      	add	r0, r3
 80122a2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80122a6:	eba3 0606 	sub.w	r6, r3, r6
 80122aa:	4404      	add	r4, r0
 80122ac:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80122b0:	d04a      	beq.n	8012348 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80122b2:	43fa      	mvns	r2, r7
 80122b4:	b2bb      	uxth	r3, r7
 80122b6:	b2d7      	uxtb	r7, r2
 80122b8:	42a0      	cmp	r0, r4
 80122ba:	d263      	bcs.n	8012384 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80122bc:	eb00 0e0c 	add.w	lr, r0, ip
 80122c0:	4586      	cmp	lr, r0
 80122c2:	f100 0803 	add.w	r8, r0, #3
 80122c6:	d93a      	bls.n	801233e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80122c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80122cc:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80122d0:	00d0      	lsls	r0, r2, #3
 80122d2:	fb19 f907 	smulbb	r9, r9, r7
 80122d6:	b2c0      	uxtb	r0, r0
 80122d8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80122dc:	fb00 9003 	mla	r0, r0, r3, r9
 80122e0:	b280      	uxth	r0, r0
 80122e2:	f100 0901 	add.w	r9, r0, #1
 80122e6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80122ea:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80122ee:	fb19 f907 	smulbb	r9, r9, r7
 80122f2:	1200      	asrs	r0, r0, #8
 80122f4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80122f8:	10d0      	asrs	r0, r2, #3
 80122fa:	1212      	asrs	r2, r2, #8
 80122fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8012300:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8012304:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012308:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801230c:	fb00 9003 	mla	r0, r0, r3, r9
 8012310:	b280      	uxth	r0, r0
 8012312:	f100 0901 	add.w	r9, r0, #1
 8012316:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801231a:	1200      	asrs	r0, r0, #8
 801231c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8012320:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8012324:	fb10 f007 	smulbb	r0, r0, r7
 8012328:	fb02 0203 	mla	r2, r2, r3, r0
 801232c:	b292      	uxth	r2, r2
 801232e:	1c50      	adds	r0, r2, #1
 8012330:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8012334:	4640      	mov	r0, r8
 8012336:	1212      	asrs	r2, r2, #8
 8012338:	f808 2c01 	strb.w	r2, [r8, #-1]
 801233c:	e7c0      	b.n	80122c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801233e:	4408      	add	r0, r1
 8012340:	4435      	add	r5, r6
 8012342:	e7b9      	b.n	80122b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8012344:	4408      	add	r0, r1
 8012346:	4435      	add	r5, r6
 8012348:	42a0      	cmp	r0, r4
 801234a:	d21b      	bcs.n	8012384 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801234c:	eb00 070c 	add.w	r7, r0, ip
 8012350:	42b8      	cmp	r0, r7
 8012352:	d2f7      	bcs.n	8012344 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8012354:	f835 3b02 	ldrh.w	r3, [r5], #2
 8012358:	3003      	adds	r0, #3
 801235a:	00da      	lsls	r2, r3, #3
 801235c:	b2d2      	uxtb	r2, r2
 801235e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012362:	f800 2c03 	strb.w	r2, [r0, #-3]
 8012366:	10da      	asrs	r2, r3, #3
 8012368:	121b      	asrs	r3, r3, #8
 801236a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801236e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012372:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012376:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801237a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801237e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012382:	e7e5      	b.n	8012350 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8012384:	4b02      	ldr	r3, [pc, #8]	; (8012390 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8012386:	6818      	ldr	r0, [r3, #0]
 8012388:	6803      	ldr	r3, [r0, #0]
 801238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238c:	4798      	blx	r3
 801238e:	e76a      	b.n	8012266 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8012390:	2400ae0c 	.word	0x2400ae0c
 8012394:	2400ae06 	.word	0x2400ae06

08012398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8012398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801239c:	b08a      	sub	sp, #40	; 0x28
 801239e:	460d      	mov	r5, r1
 80123a0:	4604      	mov	r4, r0
 80123a2:	461e      	mov	r6, r3
 80123a4:	6808      	ldr	r0, [r1, #0]
 80123a6:	ab06      	add	r3, sp, #24
 80123a8:	6849      	ldr	r1, [r1, #4]
 80123aa:	4f5d      	ldr	r7, [pc, #372]	; (8012520 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80123ac:	c303      	stmia	r3!, {r0, r1}
 80123ae:	6810      	ldr	r0, [r2, #0]
 80123b0:	ab08      	add	r3, sp, #32
 80123b2:	6851      	ldr	r1, [r2, #4]
 80123b4:	c303      	stmia	r3!, {r0, r1}
 80123b6:	a806      	add	r0, sp, #24
 80123b8:	f7fa fcc4 	bl	800cd44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123bc:	4629      	mov	r1, r5
 80123be:	a808      	add	r0, sp, #32
 80123c0:	f7fa fce8 	bl	800cd94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80123c4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80123c8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80123cc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80123d0:	6838      	ldr	r0, [r7, #0]
 80123d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80123d6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80123da:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80123de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80123e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80123e6:	440a      	add	r2, r1
 80123e8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80123ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80123f0:	4413      	add	r3, r2
 80123f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80123f6:	6803      	ldr	r3, [r0, #0]
 80123f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123fa:	4798      	blx	r3
 80123fc:	2eff      	cmp	r6, #255	; 0xff
 80123fe:	d119      	bne.n	8012434 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8012400:	f010 0f20 	tst.w	r0, #32
 8012404:	6838      	ldr	r0, [r7, #0]
 8012406:	d018      	beq.n	801243a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8012408:	b2ad      	uxth	r5, r5
 801240a:	2700      	movs	r7, #0
 801240c:	6801      	ldr	r1, [r0, #0]
 801240e:	9501      	str	r5, [sp, #4]
 8012410:	fa1f f588 	uxth.w	r5, r8
 8012414:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012418:	9500      	str	r5, [sp, #0]
 801241a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801241e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8012422:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8012426:	9602      	str	r6, [sp, #8]
 8012428:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801242a:	4621      	mov	r1, r4
 801242c:	47a8      	blx	r5
 801242e:	b00a      	add	sp, #40	; 0x28
 8012430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012438:	e7e4      	b.n	8012404 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801243a:	6803      	ldr	r3, [r0, #0]
 801243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801243e:	4798      	blx	r3
 8012440:	4b38      	ldr	r3, [pc, #224]	; (8012524 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8012442:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012446:	f8b3 c000 	ldrh.w	ip, [r3]
 801244a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801244e:	fb0c f505 	mul.w	r5, ip, r5
 8012452:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8012456:	fb0c 2303 	mla	r3, ip, r3, r2
 801245a:	ebac 0c08 	sub.w	ip, ip, r8
 801245e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012462:	ebae 0e08 	sub.w	lr, lr, r8
 8012466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801246a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801246e:	4418      	add	r0, r3
 8012470:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8012474:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8012478:	4405      	add	r5, r0
 801247a:	42a8      	cmp	r0, r5
 801247c:	d24a      	bcs.n	8012514 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801247e:	eb00 0803 	add.w	r8, r0, r3
 8012482:	4540      	cmp	r0, r8
 8012484:	d243      	bcs.n	801250e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8012486:	78e2      	ldrb	r2, [r4, #3]
 8012488:	b15a      	cbz	r2, 80124a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801248a:	2aff      	cmp	r2, #255	; 0xff
 801248c:	f894 9000 	ldrb.w	r9, [r4]
 8012490:	d10a      	bne.n	80124a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8012492:	2eff      	cmp	r6, #255	; 0xff
 8012494:	d108      	bne.n	80124a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8012496:	f880 9000 	strb.w	r9, [r0]
 801249a:	7862      	ldrb	r2, [r4, #1]
 801249c:	7042      	strb	r2, [r0, #1]
 801249e:	78a2      	ldrb	r2, [r4, #2]
 80124a0:	7082      	strb	r2, [r0, #2]
 80124a2:	3003      	adds	r0, #3
 80124a4:	3404      	adds	r4, #4
 80124a6:	e7ec      	b.n	8012482 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80124a8:	4372      	muls	r2, r6
 80124aa:	1c51      	adds	r1, r2, #1
 80124ac:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80124b0:	1209      	asrs	r1, r1, #8
 80124b2:	fa1f fa81 	uxth.w	sl, r1
 80124b6:	43c9      	mvns	r1, r1
 80124b8:	fb19 f90a 	smulbb	r9, r9, sl
 80124bc:	b2ca      	uxtb	r2, r1
 80124be:	7801      	ldrb	r1, [r0, #0]
 80124c0:	fb01 9902 	mla	r9, r1, r2, r9
 80124c4:	fa1f f989 	uxth.w	r9, r9
 80124c8:	f109 0101 	add.w	r1, r9, #1
 80124cc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80124d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80124d4:	f880 9000 	strb.w	r9, [r0]
 80124d8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80124dc:	7861      	ldrb	r1, [r4, #1]
 80124de:	fb19 f902 	smulbb	r9, r9, r2
 80124e2:	fb01 910a 	mla	r1, r1, sl, r9
 80124e6:	b289      	uxth	r1, r1
 80124e8:	f101 0901 	add.w	r9, r1, #1
 80124ec:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80124f0:	1209      	asrs	r1, r1, #8
 80124f2:	7041      	strb	r1, [r0, #1]
 80124f4:	7881      	ldrb	r1, [r0, #2]
 80124f6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80124fa:	fb11 f202 	smulbb	r2, r1, r2
 80124fe:	fb09 220a 	mla	r2, r9, sl, r2
 8012502:	b292      	uxth	r2, r2
 8012504:	1c51      	adds	r1, r2, #1
 8012506:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801250a:	1212      	asrs	r2, r2, #8
 801250c:	e7c8      	b.n	80124a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801250e:	4460      	add	r0, ip
 8012510:	4474      	add	r4, lr
 8012512:	e7b2      	b.n	801247a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8012514:	6838      	ldr	r0, [r7, #0]
 8012516:	6803      	ldr	r3, [r0, #0]
 8012518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251a:	4798      	blx	r3
 801251c:	e787      	b.n	801242e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801251e:	bf00      	nop
 8012520:	2400ae0c 	.word	0x2400ae0c
 8012524:	2400ae06 	.word	0x2400ae06

08012528 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801252c:	b085      	sub	sp, #20
 801252e:	4606      	mov	r6, r0
 8012530:	460c      	mov	r4, r1
 8012532:	4691      	mov	r9, r2
 8012534:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8012538:	4698      	mov	r8, r3
 801253a:	b31d      	cbz	r5, 8012584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801253c:	4608      	mov	r0, r1
 801253e:	f7fd fa4f 	bl	800f9e0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012542:	4607      	mov	r7, r0
 8012544:	4620      	mov	r0, r4
 8012546:	f7fd fa7f 	bl	800fa48 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801254a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801254e:	4620      	mov	r0, r4
 8012550:	f8ad 9008 	strh.w	r9, [sp, #8]
 8012554:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012558:	f8ad 700c 	strh.w	r7, [sp, #12]
 801255c:	f7fd fb78 	bl	800fc50 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012560:	280b      	cmp	r0, #11
 8012562:	d80f      	bhi.n	8012584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012564:	e8df f000 	tbb	[pc, r0]
 8012568:	0e062920 	.word	0x0e062920
 801256c:	0e0e0e0e 	.word	0x0e0e0e0e
 8012570:	110e0e0e 	.word	0x110e0e0e
 8012574:	4620      	mov	r0, r4
 8012576:	f7fd fae7 	bl	800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>
 801257a:	462b      	mov	r3, r5
 801257c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801257e:	a902      	add	r1, sp, #8
 8012580:	f7ff ff0a 	bl	8012398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012584:	b005      	add	sp, #20
 8012586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801258a:	4620      	mov	r0, r4
 801258c:	f7fd fadc 	bl	800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012590:	4606      	mov	r6, r0
 8012592:	4620      	mov	r0, r4
 8012594:	f7fd fb08 	bl	800fba8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012598:	9500      	str	r5, [sp, #0]
 801259a:	4601      	mov	r1, r0
 801259c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801259e:	aa02      	add	r2, sp, #8
 80125a0:	4630      	mov	r0, r6
 80125a2:	f7ff fdf3 	bl	801218c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80125a6:	e7ed      	b.n	8012584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80125a8:	4620      	mov	r0, r4
 80125aa:	f7fd facd 	bl	800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125ae:	462b      	mov	r3, r5
 80125b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125b2:	a902      	add	r1, sp, #8
 80125b4:	f7ff fdfc 	bl	80121b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80125b8:	e7e4      	b.n	8012584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80125ba:	6833      	ldr	r3, [r6, #0]
 80125bc:	4620      	mov	r0, r4
 80125be:	68df      	ldr	r7, [r3, #12]
 80125c0:	f7fd fac2 	bl	800fb48 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125c4:	2300      	movs	r3, #0
 80125c6:	4601      	mov	r1, r0
 80125c8:	aa02      	add	r2, sp, #8
 80125ca:	4630      	mov	r0, r6
 80125cc:	e9cd 5300 	strd	r5, r3, [sp]
 80125d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125d2:	47b8      	blx	r7
 80125d4:	e7d6      	b.n	8012584 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080125d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80125d6:	b4f0      	push	{r4, r5, r6, r7}
 80125d8:	4616      	mov	r6, r2
 80125da:	461c      	mov	r4, r3
 80125dc:	460d      	mov	r5, r1
 80125de:	9a04      	ldr	r2, [sp, #16]
 80125e0:	2e01      	cmp	r6, #1
 80125e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80125e6:	d00e      	beq.n	8012606 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80125e8:	d303      	bcc.n	80125f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80125ea:	2e02      	cmp	r6, #2
 80125ec:	d006      	beq.n	80125fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80125ee:	bcf0      	pop	{r4, r5, r6, r7}
 80125f0:	4770      	bx	lr
 80125f2:	4621      	mov	r1, r4
 80125f4:	4628      	mov	r0, r5
 80125f6:	bcf0      	pop	{r4, r5, r6, r7}
 80125f8:	f7ff bdda 	b.w	80121b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80125fc:	4621      	mov	r1, r4
 80125fe:	4628      	mov	r0, r5
 8012600:	bcf0      	pop	{r4, r5, r6, r7}
 8012602:	f7ff bec9 	b.w	8012398 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012606:	6805      	ldr	r5, [r0, #0]
 8012608:	2600      	movs	r6, #0
 801260a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801260e:	68ed      	ldr	r5, [r5, #12]
 8012610:	4613      	mov	r3, r2
 8012612:	4622      	mov	r2, r4
 8012614:	46ac      	mov	ip, r5
 8012616:	bcf0      	pop	{r4, r5, r6, r7}
 8012618:	4760      	bx	ip
	...

0801261c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801261c:	b160      	cbz	r0, 8012638 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801261e:	2903      	cmp	r1, #3
 8012620:	d818      	bhi.n	8012654 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8012622:	e8df f001 	tbb	[pc, r1]
 8012626:	1902      	.short	0x1902
 8012628:	1b06      	.short	0x1b06
 801262a:	4b0e      	ldr	r3, [pc, #56]	; (8012664 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801262c:	8818      	ldrh	r0, [r3, #0]
 801262e:	4240      	negs	r0, r0
 8012630:	4770      	bx	lr
 8012632:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8012634:	8818      	ldrh	r0, [r3, #0]
 8012636:	4770      	bx	lr
 8012638:	2903      	cmp	r1, #3
 801263a:	d80b      	bhi.n	8012654 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801263c:	a301      	add	r3, pc, #4	; (adr r3, 8012644 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801263e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012642:	bf00      	nop
 8012644:	08012659 	.word	0x08012659
 8012648:	08012633 	.word	0x08012633
 801264c:	0801265d 	.word	0x0801265d
 8012650:	0801262b 	.word	0x0801262b
 8012654:	2000      	movs	r0, #0
 8012656:	4770      	bx	lr
 8012658:	2001      	movs	r0, #1
 801265a:	4770      	bx	lr
 801265c:	f04f 30ff 	mov.w	r0, #4294967295
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	2400ae06 	.word	0x2400ae06

08012668 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8012668:	b160      	cbz	r0, 8012684 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801266a:	2903      	cmp	r1, #3
 801266c:	d818      	bhi.n	80126a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801266e:	e8df f001 	tbb	[pc, r1]
 8012672:	0219      	.short	0x0219
 8012674:	051b      	.short	0x051b
 8012676:	4b0e      	ldr	r3, [pc, #56]	; (80126b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8012678:	8818      	ldrh	r0, [r3, #0]
 801267a:	4770      	bx	lr
 801267c:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801267e:	8818      	ldrh	r0, [r3, #0]
 8012680:	4240      	negs	r0, r0
 8012682:	4770      	bx	lr
 8012684:	2903      	cmp	r1, #3
 8012686:	d80b      	bhi.n	80126a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8012688:	a301      	add	r3, pc, #4	; (adr r3, 8012690 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801268a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801268e:	bf00      	nop
 8012690:	08012677 	.word	0x08012677
 8012694:	080126a9 	.word	0x080126a9
 8012698:	0801267d 	.word	0x0801267d
 801269c:	080126a5 	.word	0x080126a5
 80126a0:	2000      	movs	r0, #0
 80126a2:	4770      	bx	lr
 80126a4:	2001      	movs	r0, #1
 80126a6:	4770      	bx	lr
 80126a8:	f04f 30ff 	mov.w	r0, #4294967295
 80126ac:	4770      	bx	lr
 80126ae:	bf00      	nop
 80126b0:	2400ae06 	.word	0x2400ae06

080126b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80126b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b8:	b097      	sub	sp, #92	; 0x5c
 80126ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80126bc:	a912      	add	r1, sp, #72	; 0x48
 80126be:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80126c2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80126c6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80126ca:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80126ce:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80126d2:	e881 000c 	stmia.w	r1, {r2, r3}
 80126d6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80126da:	930a      	str	r3, [sp, #40]	; 0x28
 80126dc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80126e0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80126e4:	9311      	str	r3, [sp, #68]	; 0x44
 80126e6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80126ea:	798d      	ldrb	r5, [r1, #6]
 80126ec:	930c      	str	r3, [sp, #48]	; 0x30
 80126ee:	7b4b      	ldrb	r3, [r1, #13]
 80126f0:	0158      	lsls	r0, r3, #5
 80126f2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80126f6:	4328      	orrs	r0, r5
 80126f8:	9009      	str	r0, [sp, #36]	; 0x24
 80126fa:	f000 817c 	beq.w	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80126fe:	011b      	lsls	r3, r3, #4
 8012700:	79c8      	ldrb	r0, [r1, #7]
 8012702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012706:	4303      	orrs	r3, r0
 8012708:	930e      	str	r3, [sp, #56]	; 0x38
 801270a:	f000 8174 	beq.w	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801270e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012712:	b29b      	uxth	r3, r3
 8012714:	2f00      	cmp	r7, #0
 8012716:	f000 8116 	beq.w	8012946 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801271a:	1aff      	subs	r7, r7, r3
 801271c:	b2bf      	uxth	r7, r7
 801271e:	043b      	lsls	r3, r7, #16
 8012720:	d502      	bpl.n	8012728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8012722:	1bf6      	subs	r6, r6, r7
 8012724:	2700      	movs	r7, #0
 8012726:	b236      	sxth	r6, r6
 8012728:	f9b2 1000 	ldrsh.w	r1, [r2]
 801272c:	a812      	add	r0, sp, #72	; 0x48
 801272e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8012732:	428e      	cmp	r6, r1
 8012734:	b28b      	uxth	r3, r1
 8012736:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801273a:	bfbf      	itttt	lt
 801273c:	18ff      	addlt	r7, r7, r3
 801273e:	1bbe      	sublt	r6, r7, r6
 8012740:	b2b7      	uxthlt	r7, r6
 8012742:	460e      	movlt	r6, r1
 8012744:	8891      	ldrh	r1, [r2, #4]
 8012746:	440b      	add	r3, r1
 8012748:	4631      	mov	r1, r6
 801274a:	b21b      	sxth	r3, r3
 801274c:	9310      	str	r3, [sp, #64]	; 0x40
 801274e:	88d3      	ldrh	r3, [r2, #6]
 8012750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012752:	449a      	add	sl, r3
 8012754:	fa0f f38a 	sxth.w	r3, sl
 8012758:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801275c:	930f      	str	r3, [sp, #60]	; 0x3c
 801275e:	4bb5      	ldr	r3, [pc, #724]	; (8012a34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8012760:	f893 b000 	ldrb.w	fp, [r3]
 8012764:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012768:	f1dc 0300 	rsbs	r3, ip, #0
 801276c:	eb43 030c 	adc.w	r3, r3, ip
 8012770:	930d      	str	r3, [sp, #52]	; 0x34
 8012772:	464b      	mov	r3, r9
 8012774:	f7fa f960 	bl	800ca38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012778:	4631      	mov	r1, r6
 801277a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801277e:	464b      	mov	r3, r9
 8012780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012782:	a812      	add	r0, sp, #72	; 0x48
 8012784:	f7fa f975 	bl	800ca72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012788:	a916      	add	r1, sp, #88	; 0x58
 801278a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801278e:	a815      	add	r0, sp, #84	; 0x54
 8012790:	f7fa fa96 	bl	800ccc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012794:	f1b9 0f00 	cmp.w	r9, #0
 8012798:	f040 80d8 	bne.w	801294c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801279c:	f1bb 0f01 	cmp.w	fp, #1
 80127a0:	f040 80dc 	bne.w	801295c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80127a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80127a6:	b153      	cbz	r3, 80127be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80127a8:	2508      	movs	r5, #8
 80127aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127ac:	fb95 f3f8 	sdiv	r3, r5, r8
 80127b0:	1e5d      	subs	r5, r3, #1
 80127b2:	4415      	add	r5, r2
 80127b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80127b8:	fb15 f503 	smulbb	r5, r5, r3
 80127bc:	b2ad      	uxth	r5, r5
 80127be:	b907      	cbnz	r7, 80127c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80127c0:	b16c      	cbz	r4, 80127de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80127c2:	fb04 7305 	mla	r3, r4, r5, r7
 80127c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80127c8:	ebaa 0a04 	sub.w	sl, sl, r4
 80127cc:	fb08 f303 	mul.w	r3, r8, r3
 80127d0:	fa1f fa8a 	uxth.w	sl, sl
 80127d4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80127d8:	f003 0407 	and.w	r4, r3, #7
 80127dc:	9226      	str	r2, [sp, #152]	; 0x98
 80127de:	4649      	mov	r1, r9
 80127e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127e2:	f7ff ff1b 	bl	801261c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80127e6:	4683      	mov	fp, r0
 80127e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127ea:	f7ff ff3d 	bl	8012668 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80127ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127f2:	4681      	mov	r9, r0
 80127f4:	1a9b      	subs	r3, r3, r2
 80127f6:	459a      	cmp	sl, r3
 80127f8:	bfa8      	it	ge
 80127fa:	469a      	movge	sl, r3
 80127fc:	f1ba 0f00 	cmp.w	sl, #0
 8012800:	f340 80f9 	ble.w	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012804:	1bf6      	subs	r6, r6, r7
 8012806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012808:	1b9e      	subs	r6, r3, r6
 801280a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801280c:	429e      	cmp	r6, r3
 801280e:	bfd4      	ite	le
 8012810:	ebc7 0706 	rsble	r7, r7, r6
 8012814:	ebc7 0703 	rsbgt	r7, r7, r3
 8012818:	2f00      	cmp	r7, #0
 801281a:	f340 80ec 	ble.w	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801281e:	1bed      	subs	r5, r5, r7
 8012820:	fb08 f305 	mul.w	r3, r8, r5
 8012824:	930d      	str	r3, [sp, #52]	; 0x34
 8012826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012828:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801282c:	930e      	str	r3, [sp, #56]	; 0x38
 801282e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012830:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012834:	930f      	str	r3, [sp, #60]	; 0x3c
 8012836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012838:	b2db      	uxtb	r3, r3
 801283a:	9310      	str	r3, [sp, #64]	; 0x40
 801283c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801283e:	2b00      	cmp	r3, #0
 8012840:	f040 80de 	bne.w	8012a00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8012844:	4b7c      	ldr	r3, [pc, #496]	; (8012a38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8012846:	6818      	ldr	r0, [r3, #0]
 8012848:	6803      	ldr	r3, [r0, #0]
 801284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284c:	4798      	blx	r3
 801284e:	2301      	movs	r3, #1
 8012850:	4a7a      	ldr	r2, [pc, #488]	; (8012a3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8012852:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8012856:	fb07 9b1b 	mls	fp, r7, fp, r9
 801285a:	fa03 f308 	lsl.w	r3, r3, r8
 801285e:	8811      	ldrh	r1, [r2, #0]
 8012860:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8012864:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8012868:	3b01      	subs	r3, #1
 801286a:	fb06 bb07 	mla	fp, r6, r7, fp
 801286e:	b2db      	uxtb	r3, r3
 8012870:	930a      	str	r3, [sp, #40]	; 0x28
 8012872:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8012876:	fb01 2303 	mla	r3, r1, r3, r2
 801287a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801287e:	18c3      	adds	r3, r0, r3
 8012880:	9309      	str	r3, [sp, #36]	; 0x24
 8012882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012884:	781a      	ldrb	r2, [r3, #0]
 8012886:	4122      	asrs	r2, r4
 8012888:	b2d2      	uxtb	r2, r2
 801288a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801288e:	f0c0 80d7 	bcc.w	8012a40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8012892:	46be      	mov	lr, r7
 8012894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012896:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801289a:	f0c0 80ba 	bcc.w	8012a12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801289e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128a0:	4013      	ands	r3, r2
 80128a2:	d041      	beq.n	8012928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80128a4:	20ff      	movs	r0, #255	; 0xff
 80128a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80128a8:	fb90 f5f5 	sdiv	r5, r0, r5
 80128ac:	436b      	muls	r3, r5
 80128ae:	2bfe      	cmp	r3, #254	; 0xfe
 80128b0:	dd03      	ble.n	80128ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80128b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128b4:	4285      	cmp	r5, r0
 80128b6:	f000 80a5 	beq.w	8012a04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80128ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80128be:	fb15 f303 	smulbb	r3, r5, r3
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	1c5d      	adds	r5, r3, #1
 80128c6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80128ca:	780d      	ldrb	r5, [r1, #0]
 80128cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128d0:	fa1f fc83 	uxth.w	ip, r3
 80128d4:	43db      	mvns	r3, r3
 80128d6:	fb10 f90c 	smulbb	r9, r0, ip
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80128de:	fb05 9503 	mla	r5, r5, r3, r9
 80128e2:	b2ad      	uxth	r5, r5
 80128e4:	f105 0901 	add.w	r9, r5, #1
 80128e8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80128ec:	fb10 f90c 	smulbb	r9, r0, ip
 80128f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80128f2:	122d      	asrs	r5, r5, #8
 80128f4:	fb10 fc0c 	smulbb	ip, r0, ip
 80128f8:	700d      	strb	r5, [r1, #0]
 80128fa:	784d      	ldrb	r5, [r1, #1]
 80128fc:	fb05 9503 	mla	r5, r5, r3, r9
 8012900:	b2ad      	uxth	r5, r5
 8012902:	f105 0901 	add.w	r9, r5, #1
 8012906:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801290a:	122d      	asrs	r5, r5, #8
 801290c:	704d      	strb	r5, [r1, #1]
 801290e:	788d      	ldrb	r5, [r1, #2]
 8012910:	fb05 cc03 	mla	ip, r5, r3, ip
 8012914:	fa1f fc8c 	uxth.w	ip, ip
 8012918:	f10c 0301 	add.w	r3, ip, #1
 801291c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8012920:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012924:	f881 c002 	strb.w	ip, [r1, #2]
 8012928:	4444      	add	r4, r8
 801292a:	4431      	add	r1, r6
 801292c:	b2a4      	uxth	r4, r4
 801292e:	2c07      	cmp	r4, #7
 8012930:	bf89      	itett	hi
 8012932:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8012934:	fa42 f208 	asrls.w	r2, r2, r8
 8012938:	2400      	movhi	r4, #0
 801293a:	785a      	ldrbhi	r2, [r3, #1]
 801293c:	bf8a      	itet	hi
 801293e:	3301      	addhi	r3, #1
 8012940:	b2d2      	uxtbls	r2, r2
 8012942:	9326      	strhi	r3, [sp, #152]	; 0x98
 8012944:	e7a7      	b.n	8012896 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8012946:	441e      	add	r6, r3
 8012948:	b236      	sxth	r6, r6
 801294a:	e6ed      	b.n	8012728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801294c:	f1b9 0f01 	cmp.w	r9, #1
 8012950:	f47f af28 	bne.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012954:	f1bb 0f01 	cmp.w	fp, #1
 8012958:	f47f af24 	bne.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801295c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8012a38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8012960:	f8db 0000 	ldr.w	r0, [fp]
 8012964:	6803      	ldr	r3, [r0, #0]
 8012966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012968:	4798      	blx	r3
 801296a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801296e:	465a      	mov	r2, fp
 8012970:	d006      	beq.n	8012980 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8012972:	f1b8 0f04 	cmp.w	r8, #4
 8012976:	d141      	bne.n	80129fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8012978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801297a:	3300      	adds	r3, #0
 801297c:	bf18      	it	ne
 801297e:	2301      	movne	r3, #1
 8012980:	0580      	lsls	r0, r0, #22
 8012982:	d566      	bpl.n	8012a52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8012984:	f1b8 0f08 	cmp.w	r8, #8
 8012988:	d163      	bne.n	8012a52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801298a:	2b00      	cmp	r3, #0
 801298c:	bf0c      	ite	eq
 801298e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8012992:	f44f 7180 	movne.w	r1, #256	; 0x100
 8012996:	2f00      	cmp	r7, #0
 8012998:	f47f af04 	bne.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801299c:	2c00      	cmp	r4, #0
 801299e:	f47f af01 	bne.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80129a6:	18f3      	adds	r3, r6, r3
 80129a8:	4283      	cmp	r3, r0
 80129aa:	f73f aefb 	bgt.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80129b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129b2:	4403      	add	r3, r0
 80129b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80129b6:	4283      	cmp	r3, r0
 80129b8:	f73f aef4 	bgt.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129bc:	f1b8 0f08 	cmp.w	r8, #8
 80129c0:	6810      	ldr	r0, [r2, #0]
 80129c2:	f04f 0600 	mov.w	r6, #0
 80129c6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80129ca:	bf18      	it	ne
 80129cc:	3501      	addne	r5, #1
 80129ce:	6804      	ldr	r4, [r0, #0]
 80129d0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80129d4:	bf18      	it	ne
 80129d6:	f025 0501 	bicne.w	r5, r5, #1
 80129da:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80129de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80129e0:	bf18      	it	ne
 80129e2:	b2ad      	uxthne	r5, r5
 80129e4:	9104      	str	r1, [sp, #16]
 80129e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80129e8:	e9cd 5a00 	strd	r5, sl, [sp]
 80129ec:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80129f0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80129f2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80129f4:	47a0      	blx	r4
 80129f6:	b017      	add	sp, #92	; 0x5c
 80129f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fc:	2300      	movs	r3, #0
 80129fe:	e7bf      	b.n	8012980 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8012a00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012a02:	e724      	b.n	801284e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8012a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a06:	700b      	strb	r3, [r1, #0]
 8012a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a0a:	704b      	strb	r3, [r1, #1]
 8012a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a0e:	708b      	strb	r3, [r1, #2]
 8012a10:	e78a      	b.n	8012928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8012a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a14:	b153      	cbz	r3, 8012a2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8012a16:	441c      	add	r4, r3
 8012a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012a1a:	b2a4      	uxth	r4, r4
 8012a1c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8012a20:	f004 0407 	and.w	r4, r4, #7
 8012a24:	781a      	ldrb	r2, [r3, #0]
 8012a26:	9326      	str	r3, [sp, #152]	; 0x98
 8012a28:	4122      	asrs	r2, r4
 8012a2a:	b2d2      	uxtb	r2, r2
 8012a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a2e:	445b      	add	r3, fp
 8012a30:	9309      	str	r3, [sp, #36]	; 0x24
 8012a32:	e72a      	b.n	801288a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8012a34:	2400ae04 	.word	0x2400ae04
 8012a38:	2400ae0c 	.word	0x2400ae0c
 8012a3c:	2400ae06 	.word	0x2400ae06
 8012a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1d7      	bne.n	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a46:	4b06      	ldr	r3, [pc, #24]	; (8012a60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8012a48:	6818      	ldr	r0, [r3, #0]
 8012a4a:	6803      	ldr	r3, [r0, #0]
 8012a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a4e:	4798      	blx	r3
 8012a50:	e7d1      	b.n	80129f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f43f aea6 	beq.w	80127a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012a5c:	e79b      	b.n	8012996 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8012a5e:	bf00      	nop
 8012a60:	2400ae0c 	.word	0x2400ae0c

08012a64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4c15      	ldr	r4, [pc, #84]	; (8012abc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8012a68:	4605      	mov	r5, r0
 8012a6a:	7823      	ldrb	r3, [r4, #0]
 8012a6c:	f3bf 8f5b 	dmb	ish
 8012a70:	07da      	lsls	r2, r3, #31
 8012a72:	d40b      	bmi.n	8012a8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a74:	4620      	mov	r0, r4
 8012a76:	f005 f890 	bl	8017b9a <__cxa_guard_acquire>
 8012a7a:	b138      	cbz	r0, 8012a8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f005 f898 	bl	8017bb2 <__cxa_guard_release>
 8012a82:	4a0f      	ldr	r2, [pc, #60]	; (8012ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012a84:	490f      	ldr	r1, [pc, #60]	; (8012ac4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8012a86:	4810      	ldr	r0, [pc, #64]	; (8012ac8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012a88:	f005 f880 	bl	8017b8c <__aeabi_atexit>
 8012a8c:	4c0f      	ldr	r4, [pc, #60]	; (8012acc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8012a8e:	7823      	ldrb	r3, [r4, #0]
 8012a90:	f3bf 8f5b 	dmb	ish
 8012a94:	07db      	lsls	r3, r3, #31
 8012a96:	d40b      	bmi.n	8012ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012a98:	4620      	mov	r0, r4
 8012a9a:	f005 f87e 	bl	8017b9a <__cxa_guard_acquire>
 8012a9e:	b138      	cbz	r0, 8012ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f005 f886 	bl	8017bb2 <__cxa_guard_release>
 8012aa6:	4a06      	ldr	r2, [pc, #24]	; (8012ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012aa8:	4909      	ldr	r1, [pc, #36]	; (8012ad0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8012aaa:	480a      	ldr	r0, [pc, #40]	; (8012ad4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012aac:	f005 f86e 	bl	8017b8c <__aeabi_atexit>
 8012ab0:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012ab2:	612b      	str	r3, [r5, #16]
 8012ab4:	4b07      	ldr	r3, [pc, #28]	; (8012ad4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012ab6:	616b      	str	r3, [r5, #20]
 8012ab8:	bd38      	pop	{r3, r4, r5, pc}
 8012aba:	bf00      	nop
 8012abc:	2400aed8 	.word	0x2400aed8
 8012ac0:	24000000 	.word	0x24000000
 8012ac4:	08011629 	.word	0x08011629
 8012ac8:	24000094 	.word	0x24000094
 8012acc:	2400aedc 	.word	0x2400aedc
 8012ad0:	08011627 	.word	0x08011627
 8012ad4:	24000098 	.word	0x24000098

08012ad8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8012ad8:	b538      	push	{r3, r4, r5, lr}
 8012ada:	4c15      	ldr	r4, [pc, #84]	; (8012b30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8012adc:	4605      	mov	r5, r0
 8012ade:	7823      	ldrb	r3, [r4, #0]
 8012ae0:	f3bf 8f5b 	dmb	ish
 8012ae4:	07da      	lsls	r2, r3, #31
 8012ae6:	d40b      	bmi.n	8012b00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f005 f856 	bl	8017b9a <__cxa_guard_acquire>
 8012aee:	b138      	cbz	r0, 8012b00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012af0:	4620      	mov	r0, r4
 8012af2:	f005 f85e 	bl	8017bb2 <__cxa_guard_release>
 8012af6:	4a0f      	ldr	r2, [pc, #60]	; (8012b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012af8:	490f      	ldr	r1, [pc, #60]	; (8012b38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8012afa:	4810      	ldr	r0, [pc, #64]	; (8012b3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012afc:	f005 f846 	bl	8017b8c <__aeabi_atexit>
 8012b00:	4c0f      	ldr	r4, [pc, #60]	; (8012b40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8012b02:	7823      	ldrb	r3, [r4, #0]
 8012b04:	f3bf 8f5b 	dmb	ish
 8012b08:	07db      	lsls	r3, r3, #31
 8012b0a:	d40b      	bmi.n	8012b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f005 f844 	bl	8017b9a <__cxa_guard_acquire>
 8012b12:	b138      	cbz	r0, 8012b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012b14:	4620      	mov	r0, r4
 8012b16:	f005 f84c 	bl	8017bb2 <__cxa_guard_release>
 8012b1a:	4a06      	ldr	r2, [pc, #24]	; (8012b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012b1c:	4909      	ldr	r1, [pc, #36]	; (8012b44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8012b1e:	480a      	ldr	r0, [pc, #40]	; (8012b48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b20:	f005 f834 	bl	8017b8c <__aeabi_atexit>
 8012b24:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012b26:	60ab      	str	r3, [r5, #8]
 8012b28:	4b07      	ldr	r3, [pc, #28]	; (8012b48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b2a:	60eb      	str	r3, [r5, #12]
 8012b2c:	bd38      	pop	{r3, r4, r5, pc}
 8012b2e:	bf00      	nop
 8012b30:	2400aeb8 	.word	0x2400aeb8
 8012b34:	24000000 	.word	0x24000000
 8012b38:	0801162d 	.word	0x0801162d
 8012b3c:	24000074 	.word	0x24000074
 8012b40:	2400aebc 	.word	0x2400aebc
 8012b44:	0801162b 	.word	0x0801162b
 8012b48:	24000078 	.word	0x24000078

08012b4c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	4604      	mov	r4, r0
 8012b50:	f7ff ff88 	bl	8012a64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8012b54:	4620      	mov	r0, r4
 8012b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5a:	f7ff bfbd 	b.w	8012ad8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08012b60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4c15      	ldr	r4, [pc, #84]	; (8012bb8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8012b64:	4605      	mov	r5, r0
 8012b66:	7823      	ldrb	r3, [r4, #0]
 8012b68:	f3bf 8f5b 	dmb	ish
 8012b6c:	07da      	lsls	r2, r3, #31
 8012b6e:	d40b      	bmi.n	8012b88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b70:	4620      	mov	r0, r4
 8012b72:	f005 f812 	bl	8017b9a <__cxa_guard_acquire>
 8012b76:	b138      	cbz	r0, 8012b88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f005 f81a 	bl	8017bb2 <__cxa_guard_release>
 8012b7e:	4a0f      	ldr	r2, [pc, #60]	; (8012bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012b80:	490f      	ldr	r1, [pc, #60]	; (8012bc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8012b82:	4810      	ldr	r0, [pc, #64]	; (8012bc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012b84:	f005 f802 	bl	8017b8c <__aeabi_atexit>
 8012b88:	4c0f      	ldr	r4, [pc, #60]	; (8012bc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8012b8a:	7823      	ldrb	r3, [r4, #0]
 8012b8c:	f3bf 8f5b 	dmb	ish
 8012b90:	07db      	lsls	r3, r3, #31
 8012b92:	d40b      	bmi.n	8012bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012b94:	4620      	mov	r0, r4
 8012b96:	f005 f800 	bl	8017b9a <__cxa_guard_acquire>
 8012b9a:	b138      	cbz	r0, 8012bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f005 f808 	bl	8017bb2 <__cxa_guard_release>
 8012ba2:	4a06      	ldr	r2, [pc, #24]	; (8012bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012ba4:	4909      	ldr	r1, [pc, #36]	; (8012bcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8012ba6:	480a      	ldr	r0, [pc, #40]	; (8012bd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012ba8:	f004 fff0 	bl	8017b8c <__aeabi_atexit>
 8012bac:	4b05      	ldr	r3, [pc, #20]	; (8012bc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012bae:	622b      	str	r3, [r5, #32]
 8012bb0:	4b07      	ldr	r3, [pc, #28]	; (8012bd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012bb2:	626b      	str	r3, [r5, #36]	; 0x24
 8012bb4:	bd38      	pop	{r3, r4, r5, pc}
 8012bb6:	bf00      	nop
 8012bb8:	2400aee0 	.word	0x2400aee0
 8012bbc:	24000000 	.word	0x24000000
 8012bc0:	08011621 	.word	0x08011621
 8012bc4:	2400009c 	.word	0x2400009c
 8012bc8:	2400aee4 	.word	0x2400aee4
 8012bcc:	0801161f 	.word	0x0801161f
 8012bd0:	240000a0 	.word	0x240000a0

08012bd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4c15      	ldr	r4, [pc, #84]	; (8012c2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8012bd8:	4605      	mov	r5, r0
 8012bda:	7823      	ldrb	r3, [r4, #0]
 8012bdc:	f3bf 8f5b 	dmb	ish
 8012be0:	07da      	lsls	r2, r3, #31
 8012be2:	d40b      	bmi.n	8012bfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012be4:	4620      	mov	r0, r4
 8012be6:	f004 ffd8 	bl	8017b9a <__cxa_guard_acquire>
 8012bea:	b138      	cbz	r0, 8012bfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012bec:	4620      	mov	r0, r4
 8012bee:	f004 ffe0 	bl	8017bb2 <__cxa_guard_release>
 8012bf2:	4a0f      	ldr	r2, [pc, #60]	; (8012c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012bf4:	490f      	ldr	r1, [pc, #60]	; (8012c34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8012bf6:	4810      	ldr	r0, [pc, #64]	; (8012c38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012bf8:	f004 ffc8 	bl	8017b8c <__aeabi_atexit>
 8012bfc:	4c0f      	ldr	r4, [pc, #60]	; (8012c3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8012bfe:	7823      	ldrb	r3, [r4, #0]
 8012c00:	f3bf 8f5b 	dmb	ish
 8012c04:	07db      	lsls	r3, r3, #31
 8012c06:	d40b      	bmi.n	8012c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f004 ffc6 	bl	8017b9a <__cxa_guard_acquire>
 8012c0e:	b138      	cbz	r0, 8012c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012c10:	4620      	mov	r0, r4
 8012c12:	f004 ffce 	bl	8017bb2 <__cxa_guard_release>
 8012c16:	4a06      	ldr	r2, [pc, #24]	; (8012c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012c18:	4909      	ldr	r1, [pc, #36]	; (8012c40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8012c1a:	480a      	ldr	r0, [pc, #40]	; (8012c44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012c1c:	f004 ffb6 	bl	8017b8c <__aeabi_atexit>
 8012c20:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012c22:	61ab      	str	r3, [r5, #24]
 8012c24:	4b07      	ldr	r3, [pc, #28]	; (8012c44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012c26:	61eb      	str	r3, [r5, #28]
 8012c28:	bd38      	pop	{r3, r4, r5, pc}
 8012c2a:	bf00      	nop
 8012c2c:	2400aec0 	.word	0x2400aec0
 8012c30:	24000000 	.word	0x24000000
 8012c34:	08011625 	.word	0x08011625
 8012c38:	2400007c 	.word	0x2400007c
 8012c3c:	2400aec4 	.word	0x2400aec4
 8012c40:	08011623 	.word	0x08011623
 8012c44:	24000080 	.word	0x24000080

08012c48 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8012c48:	b510      	push	{r4, lr}
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	f7ff ff88 	bl	8012b60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8012c50:	4620      	mov	r0, r4
 8012c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c56:	f7ff bfbd 	b.w	8012bd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08012c5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4c15      	ldr	r4, [pc, #84]	; (8012cb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8012c60:	4605      	mov	r5, r0
 8012c62:	7823      	ldrb	r3, [r4, #0]
 8012c64:	f3bf 8f5b 	dmb	ish
 8012c68:	07da      	lsls	r2, r3, #31
 8012c6a:	d40b      	bmi.n	8012c84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f004 ff94 	bl	8017b9a <__cxa_guard_acquire>
 8012c72:	b138      	cbz	r0, 8012c84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c74:	4620      	mov	r0, r4
 8012c76:	f004 ff9c 	bl	8017bb2 <__cxa_guard_release>
 8012c7a:	4a0f      	ldr	r2, [pc, #60]	; (8012cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012c7c:	490f      	ldr	r1, [pc, #60]	; (8012cbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8012c7e:	4810      	ldr	r0, [pc, #64]	; (8012cc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012c80:	f004 ff84 	bl	8017b8c <__aeabi_atexit>
 8012c84:	4c0f      	ldr	r4, [pc, #60]	; (8012cc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8012c86:	7823      	ldrb	r3, [r4, #0]
 8012c88:	f3bf 8f5b 	dmb	ish
 8012c8c:	07db      	lsls	r3, r3, #31
 8012c8e:	d40b      	bmi.n	8012ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012c90:	4620      	mov	r0, r4
 8012c92:	f004 ff82 	bl	8017b9a <__cxa_guard_acquire>
 8012c96:	b138      	cbz	r0, 8012ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f004 ff8a 	bl	8017bb2 <__cxa_guard_release>
 8012c9e:	4a06      	ldr	r2, [pc, #24]	; (8012cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012ca0:	4909      	ldr	r1, [pc, #36]	; (8012cc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8012ca2:	480a      	ldr	r0, [pc, #40]	; (8012ccc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012ca4:	f004 ff72 	bl	8017b8c <__aeabi_atexit>
 8012ca8:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012caa:	632b      	str	r3, [r5, #48]	; 0x30
 8012cac:	4b07      	ldr	r3, [pc, #28]	; (8012ccc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012cae:	636b      	str	r3, [r5, #52]	; 0x34
 8012cb0:	bd38      	pop	{r3, r4, r5, pc}
 8012cb2:	bf00      	nop
 8012cb4:	2400aec8 	.word	0x2400aec8
 8012cb8:	24000000 	.word	0x24000000
 8012cbc:	08011619 	.word	0x08011619
 8012cc0:	24000084 	.word	0x24000084
 8012cc4:	2400aecc 	.word	0x2400aecc
 8012cc8:	08011617 	.word	0x08011617
 8012ccc:	24000088 	.word	0x24000088

08012cd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4c15      	ldr	r4, [pc, #84]	; (8012d28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8012cd4:	4605      	mov	r5, r0
 8012cd6:	7823      	ldrb	r3, [r4, #0]
 8012cd8:	f3bf 8f5b 	dmb	ish
 8012cdc:	07da      	lsls	r2, r3, #31
 8012cde:	d40b      	bmi.n	8012cf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f004 ff5a 	bl	8017b9a <__cxa_guard_acquire>
 8012ce6:	b138      	cbz	r0, 8012cf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f004 ff62 	bl	8017bb2 <__cxa_guard_release>
 8012cee:	4a0f      	ldr	r2, [pc, #60]	; (8012d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012cf0:	490f      	ldr	r1, [pc, #60]	; (8012d30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8012cf2:	4810      	ldr	r0, [pc, #64]	; (8012d34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012cf4:	f004 ff4a 	bl	8017b8c <__aeabi_atexit>
 8012cf8:	4c0f      	ldr	r4, [pc, #60]	; (8012d38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8012cfa:	7823      	ldrb	r3, [r4, #0]
 8012cfc:	f3bf 8f5b 	dmb	ish
 8012d00:	07db      	lsls	r3, r3, #31
 8012d02:	d40b      	bmi.n	8012d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012d04:	4620      	mov	r0, r4
 8012d06:	f004 ff48 	bl	8017b9a <__cxa_guard_acquire>
 8012d0a:	b138      	cbz	r0, 8012d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f004 ff50 	bl	8017bb2 <__cxa_guard_release>
 8012d12:	4a06      	ldr	r2, [pc, #24]	; (8012d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012d14:	4909      	ldr	r1, [pc, #36]	; (8012d3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8012d16:	480a      	ldr	r0, [pc, #40]	; (8012d40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012d18:	f004 ff38 	bl	8017b8c <__aeabi_atexit>
 8012d1c:	4b05      	ldr	r3, [pc, #20]	; (8012d34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012d1e:	62ab      	str	r3, [r5, #40]	; 0x28
 8012d20:	4b07      	ldr	r3, [pc, #28]	; (8012d40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012d22:	62eb      	str	r3, [r5, #44]	; 0x2c
 8012d24:	bd38      	pop	{r3, r4, r5, pc}
 8012d26:	bf00      	nop
 8012d28:	2400aea0 	.word	0x2400aea0
 8012d2c:	24000000 	.word	0x24000000
 8012d30:	0801161d 	.word	0x0801161d
 8012d34:	2400005c 	.word	0x2400005c
 8012d38:	2400aea4 	.word	0x2400aea4
 8012d3c:	0801161b 	.word	0x0801161b
 8012d40:	24000060 	.word	0x24000060

08012d44 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8012d44:	b510      	push	{r4, lr}
 8012d46:	4604      	mov	r4, r0
 8012d48:	f7ff ff88 	bl	8012c5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d52:	f7ff bfbd 	b.w	8012cd0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08012d58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8012d58:	b538      	push	{r3, r4, r5, lr}
 8012d5a:	4c15      	ldr	r4, [pc, #84]	; (8012db0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	7823      	ldrb	r3, [r4, #0]
 8012d60:	f3bf 8f5b 	dmb	ish
 8012d64:	07da      	lsls	r2, r3, #31
 8012d66:	d40b      	bmi.n	8012d80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f004 ff16 	bl	8017b9a <__cxa_guard_acquire>
 8012d6e:	b138      	cbz	r0, 8012d80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d70:	4620      	mov	r0, r4
 8012d72:	f004 ff1e 	bl	8017bb2 <__cxa_guard_release>
 8012d76:	4a0f      	ldr	r2, [pc, #60]	; (8012db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012d78:	490f      	ldr	r1, [pc, #60]	; (8012db8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8012d7a:	4810      	ldr	r0, [pc, #64]	; (8012dbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012d7c:	f004 ff06 	bl	8017b8c <__aeabi_atexit>
 8012d80:	4c0f      	ldr	r4, [pc, #60]	; (8012dc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8012d82:	7823      	ldrb	r3, [r4, #0]
 8012d84:	f3bf 8f5b 	dmb	ish
 8012d88:	07db      	lsls	r3, r3, #31
 8012d8a:	d40b      	bmi.n	8012da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f004 ff04 	bl	8017b9a <__cxa_guard_acquire>
 8012d92:	b138      	cbz	r0, 8012da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012d94:	4620      	mov	r0, r4
 8012d96:	f004 ff0c 	bl	8017bb2 <__cxa_guard_release>
 8012d9a:	4a06      	ldr	r2, [pc, #24]	; (8012db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012d9c:	4909      	ldr	r1, [pc, #36]	; (8012dc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8012d9e:	480a      	ldr	r0, [pc, #40]	; (8012dc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012da0:	f004 fef4 	bl	8017b8c <__aeabi_atexit>
 8012da4:	4b05      	ldr	r3, [pc, #20]	; (8012dbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012da6:	642b      	str	r3, [r5, #64]	; 0x40
 8012da8:	4b07      	ldr	r3, [pc, #28]	; (8012dc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012daa:	646b      	str	r3, [r5, #68]	; 0x44
 8012dac:	bd38      	pop	{r3, r4, r5, pc}
 8012dae:	bf00      	nop
 8012db0:	2400aed0 	.word	0x2400aed0
 8012db4:	24000000 	.word	0x24000000
 8012db8:	08011611 	.word	0x08011611
 8012dbc:	2400008c 	.word	0x2400008c
 8012dc0:	2400aed4 	.word	0x2400aed4
 8012dc4:	0801160f 	.word	0x0801160f
 8012dc8:	24000090 	.word	0x24000090

08012dcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4c15      	ldr	r4, [pc, #84]	; (8012e24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8012dd0:	4605      	mov	r5, r0
 8012dd2:	7823      	ldrb	r3, [r4, #0]
 8012dd4:	f3bf 8f5b 	dmb	ish
 8012dd8:	07da      	lsls	r2, r3, #31
 8012dda:	d40b      	bmi.n	8012df4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f004 fedc 	bl	8017b9a <__cxa_guard_acquire>
 8012de2:	b138      	cbz	r0, 8012df4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012de4:	4620      	mov	r0, r4
 8012de6:	f004 fee4 	bl	8017bb2 <__cxa_guard_release>
 8012dea:	4a0f      	ldr	r2, [pc, #60]	; (8012e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012dec:	490f      	ldr	r1, [pc, #60]	; (8012e2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8012dee:	4810      	ldr	r0, [pc, #64]	; (8012e30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012df0:	f004 fecc 	bl	8017b8c <__aeabi_atexit>
 8012df4:	4c0f      	ldr	r4, [pc, #60]	; (8012e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8012df6:	7823      	ldrb	r3, [r4, #0]
 8012df8:	f3bf 8f5b 	dmb	ish
 8012dfc:	07db      	lsls	r3, r3, #31
 8012dfe:	d40b      	bmi.n	8012e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012e00:	4620      	mov	r0, r4
 8012e02:	f004 feca 	bl	8017b9a <__cxa_guard_acquire>
 8012e06:	b138      	cbz	r0, 8012e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f004 fed2 	bl	8017bb2 <__cxa_guard_release>
 8012e0e:	4a06      	ldr	r2, [pc, #24]	; (8012e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012e10:	4909      	ldr	r1, [pc, #36]	; (8012e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8012e12:	480a      	ldr	r0, [pc, #40]	; (8012e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012e14:	f004 feba 	bl	8017b8c <__aeabi_atexit>
 8012e18:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012e1a:	63ab      	str	r3, [r5, #56]	; 0x38
 8012e1c:	4b07      	ldr	r3, [pc, #28]	; (8012e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012e1e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	bf00      	nop
 8012e24:	2400aeb0 	.word	0x2400aeb0
 8012e28:	24000000 	.word	0x24000000
 8012e2c:	08011615 	.word	0x08011615
 8012e30:	2400006c 	.word	0x2400006c
 8012e34:	2400aeb4 	.word	0x2400aeb4
 8012e38:	08011613 	.word	0x08011613
 8012e3c:	24000070 	.word	0x24000070

08012e40 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8012e40:	b510      	push	{r4, lr}
 8012e42:	4604      	mov	r4, r0
 8012e44:	f7ff ff88 	bl	8012d58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8012e48:	4620      	mov	r0, r4
 8012e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e4e:	f7ff bfbd 	b.w	8012dcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08012e54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8012e54:	b538      	push	{r3, r4, r5, lr}
 8012e56:	4c15      	ldr	r4, [pc, #84]	; (8012eac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8012e58:	4605      	mov	r5, r0
 8012e5a:	7823      	ldrb	r3, [r4, #0]
 8012e5c:	f3bf 8f5b 	dmb	ish
 8012e60:	07da      	lsls	r2, r3, #31
 8012e62:	d40b      	bmi.n	8012e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e64:	4620      	mov	r0, r4
 8012e66:	f004 fe98 	bl	8017b9a <__cxa_guard_acquire>
 8012e6a:	b138      	cbz	r0, 8012e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f004 fea0 	bl	8017bb2 <__cxa_guard_release>
 8012e72:	4a0f      	ldr	r2, [pc, #60]	; (8012eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012e74:	490f      	ldr	r1, [pc, #60]	; (8012eb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8012e76:	4810      	ldr	r0, [pc, #64]	; (8012eb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012e78:	f004 fe88 	bl	8017b8c <__aeabi_atexit>
 8012e7c:	4c0f      	ldr	r4, [pc, #60]	; (8012ebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8012e7e:	7823      	ldrb	r3, [r4, #0]
 8012e80:	f3bf 8f5b 	dmb	ish
 8012e84:	07db      	lsls	r3, r3, #31
 8012e86:	d40b      	bmi.n	8012ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f004 fe86 	bl	8017b9a <__cxa_guard_acquire>
 8012e8e:	b138      	cbz	r0, 8012ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012e90:	4620      	mov	r0, r4
 8012e92:	f004 fe8e 	bl	8017bb2 <__cxa_guard_release>
 8012e96:	4a06      	ldr	r2, [pc, #24]	; (8012eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012e98:	4909      	ldr	r1, [pc, #36]	; (8012ec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8012e9a:	480a      	ldr	r0, [pc, #40]	; (8012ec4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012e9c:	f004 fe76 	bl	8017b8c <__aeabi_atexit>
 8012ea0:	4b05      	ldr	r3, [pc, #20]	; (8012eb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012ea2:	652b      	str	r3, [r5, #80]	; 0x50
 8012ea4:	4b07      	ldr	r3, [pc, #28]	; (8012ec4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012ea6:	656b      	str	r3, [r5, #84]	; 0x54
 8012ea8:	bd38      	pop	{r3, r4, r5, pc}
 8012eaa:	bf00      	nop
 8012eac:	2400aea8 	.word	0x2400aea8
 8012eb0:	24000000 	.word	0x24000000
 8012eb4:	08011609 	.word	0x08011609
 8012eb8:	24000064 	.word	0x24000064
 8012ebc:	2400aeac 	.word	0x2400aeac
 8012ec0:	08011607 	.word	0x08011607
 8012ec4:	24000068 	.word	0x24000068

08012ec8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	4c15      	ldr	r4, [pc, #84]	; (8012f20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8012ecc:	4605      	mov	r5, r0
 8012ece:	7823      	ldrb	r3, [r4, #0]
 8012ed0:	f3bf 8f5b 	dmb	ish
 8012ed4:	07da      	lsls	r2, r3, #31
 8012ed6:	d40b      	bmi.n	8012ef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f004 fe5e 	bl	8017b9a <__cxa_guard_acquire>
 8012ede:	b138      	cbz	r0, 8012ef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f004 fe66 	bl	8017bb2 <__cxa_guard_release>
 8012ee6:	4a0f      	ldr	r2, [pc, #60]	; (8012f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012ee8:	490f      	ldr	r1, [pc, #60]	; (8012f28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8012eea:	4810      	ldr	r0, [pc, #64]	; (8012f2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012eec:	f004 fe4e 	bl	8017b8c <__aeabi_atexit>
 8012ef0:	4c0f      	ldr	r4, [pc, #60]	; (8012f30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8012ef2:	7823      	ldrb	r3, [r4, #0]
 8012ef4:	f3bf 8f5b 	dmb	ish
 8012ef8:	07db      	lsls	r3, r3, #31
 8012efa:	d40b      	bmi.n	8012f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012efc:	4620      	mov	r0, r4
 8012efe:	f004 fe4c 	bl	8017b9a <__cxa_guard_acquire>
 8012f02:	b138      	cbz	r0, 8012f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012f04:	4620      	mov	r0, r4
 8012f06:	f004 fe54 	bl	8017bb2 <__cxa_guard_release>
 8012f0a:	4a06      	ldr	r2, [pc, #24]	; (8012f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012f0c:	4909      	ldr	r1, [pc, #36]	; (8012f34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8012f0e:	480a      	ldr	r0, [pc, #40]	; (8012f38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012f10:	f004 fe3c 	bl	8017b8c <__aeabi_atexit>
 8012f14:	4b05      	ldr	r3, [pc, #20]	; (8012f2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012f16:	64ab      	str	r3, [r5, #72]	; 0x48
 8012f18:	4b07      	ldr	r3, [pc, #28]	; (8012f38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012f1a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012f1c:	bd38      	pop	{r3, r4, r5, pc}
 8012f1e:	bf00      	nop
 8012f20:	2400ae98 	.word	0x2400ae98
 8012f24:	24000000 	.word	0x24000000
 8012f28:	0801160d 	.word	0x0801160d
 8012f2c:	24000054 	.word	0x24000054
 8012f30:	2400ae9c 	.word	0x2400ae9c
 8012f34:	0801160b 	.word	0x0801160b
 8012f38:	24000058 	.word	0x24000058

08012f3c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8012f3c:	b510      	push	{r4, lr}
 8012f3e:	4604      	mov	r4, r0
 8012f40:	f7ff ff88 	bl	8012e54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8012f44:	4620      	mov	r0, r4
 8012f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4a:	f7ff bfbd 	b.w	8012ec8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08012f4e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8012f4e:	b510      	push	{r4, lr}
 8012f50:	4604      	mov	r4, r0
 8012f52:	f7ff fff3 	bl	8012f3c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8012f56:	4620      	mov	r0, r4
 8012f58:	f7ff ff72 	bl	8012e40 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	f7ff fe73 	bl	8012c48 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8012f62:	4620      	mov	r0, r4
 8012f64:	f7ff fdf2 	bl	8012b4c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8012f68:	4620      	mov	r0, r4
 8012f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f6e:	f7ff bee9 	b.w	8012d44 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08012f72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8012f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f76:	b087      	sub	sp, #28
 8012f78:	788d      	ldrb	r5, [r1, #2]
 8012f7a:	f891 9000 	ldrb.w	r9, [r1]
 8012f7e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8012f82:	9501      	str	r5, [sp, #4]
 8012f84:	784d      	ldrb	r5, [r1, #1]
 8012f86:	9203      	str	r2, [sp, #12]
 8012f88:	9502      	str	r5, [sp, #8]
 8012f8a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8012f8e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8012f92:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012f96:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8012f9a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8012f9e:	fb06 0708 	mla	r7, r6, r8, r0
 8012fa2:	2e00      	cmp	r6, #0
 8012fa4:	eb02 0a07 	add.w	sl, r2, r7
 8012fa8:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8012fac:	9d01      	ldr	r5, [sp, #4]
 8012fae:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8012fb2:	ea45 0509 	orr.w	r5, r5, r9
 8012fb6:	9505      	str	r5, [sp, #20]
 8012fb8:	f2c0 80b2 	blt.w	8013120 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012fbc:	45b3      	cmp	fp, r6
 8012fbe:	f340 80af 	ble.w	8013120 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	f2c0 80aa 	blt.w	801311c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fc8:	4580      	cmp	r8, r0
 8012fca:	f340 80a7 	ble.w	801311c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fce:	9a03      	ldr	r2, [sp, #12]
 8012fd0:	5dd7      	ldrb	r7, [r2, r7]
 8012fd2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012fd6:	441f      	add	r7, r3
 8012fd8:	1c42      	adds	r2, r0, #1
 8012fda:	f100 80a4 	bmi.w	8013126 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fde:	4590      	cmp	r8, r2
 8012fe0:	f340 80a1 	ble.w	8013126 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fe4:	2c00      	cmp	r4, #0
 8012fe6:	f000 809e 	beq.w	8013126 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fea:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ff2:	441d      	add	r5, r3
 8012ff4:	3601      	adds	r6, #1
 8012ff6:	f100 809a 	bmi.w	801312e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8012ffa:	45b3      	cmp	fp, r6
 8012ffc:	f340 8097 	ble.w	801312e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013000:	f1bc 0f00 	cmp.w	ip, #0
 8013004:	f000 8093 	beq.w	801312e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013008:	2800      	cmp	r0, #0
 801300a:	f2c0 808e 	blt.w	801312a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801300e:	4580      	cmp	r8, r0
 8013010:	f340 808b 	ble.w	801312a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8013014:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8013018:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801301c:	441e      	add	r6, r3
 801301e:	3001      	adds	r0, #1
 8013020:	f100 8088 	bmi.w	8013134 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013024:	4580      	cmp	r8, r0
 8013026:	f340 8085 	ble.w	8013134 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801302a:	2c00      	cmp	r4, #0
 801302c:	f000 8082 	beq.w	8013134 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013030:	44d0      	add	r8, sl
 8013032:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801303a:	4413      	add	r3, r2
 801303c:	b2a4      	uxth	r4, r4
 801303e:	f895 a000 	ldrb.w	sl, [r5]
 8013042:	fa1f fc8c 	uxth.w	ip, ip
 8013046:	fb04 fb0c 	mul.w	fp, r4, ip
 801304a:	0124      	lsls	r4, r4, #4
 801304c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8013050:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8013054:	eba4 040b 	sub.w	r4, r4, fp
 8013058:	fa1f f08c 	uxth.w	r0, ip
 801305c:	b2a2      	uxth	r2, r4
 801305e:	783c      	ldrb	r4, [r7, #0]
 8013060:	eba8 0800 	sub.w	r8, r8, r0
 8013064:	fa1f fc8e 	uxth.w	ip, lr
 8013068:	fb02 fa0a 	mul.w	sl, r2, sl
 801306c:	ea6f 0e0e 	mvn.w	lr, lr
 8013070:	fa1f f888 	uxth.w	r8, r8
 8013074:	fa5f fe8e 	uxtb.w	lr, lr
 8013078:	fb08 aa04 	mla	sl, r8, r4, sl
 801307c:	7834      	ldrb	r4, [r6, #0]
 801307e:	fb19 f90e 	smulbb	r9, r9, lr
 8013082:	fb00 aa04 	mla	sl, r0, r4, sl
 8013086:	781c      	ldrb	r4, [r3, #0]
 8013088:	fb0b a404 	mla	r4, fp, r4, sl
 801308c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013090:	fb04 990c 	mla	r9, r4, ip, r9
 8013094:	fa1f f989 	uxth.w	r9, r9
 8013098:	f109 0401 	add.w	r4, r9, #1
 801309c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80130a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80130a4:	f881 9000 	strb.w	r9, [r1]
 80130a8:	f895 9001 	ldrb.w	r9, [r5, #1]
 80130ac:	787c      	ldrb	r4, [r7, #1]
 80130ae:	fb02 f909 	mul.w	r9, r2, r9
 80130b2:	fb08 9904 	mla	r9, r8, r4, r9
 80130b6:	7874      	ldrb	r4, [r6, #1]
 80130b8:	fb00 9904 	mla	r9, r0, r4, r9
 80130bc:	785c      	ldrb	r4, [r3, #1]
 80130be:	fb0b 9404 	mla	r4, fp, r4, r9
 80130c2:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80130c6:	9c02      	ldr	r4, [sp, #8]
 80130c8:	fb14 f90e 	smulbb	r9, r4, lr
 80130cc:	fb0a 940c 	mla	r4, sl, ip, r9
 80130d0:	b2a4      	uxth	r4, r4
 80130d2:	f104 0901 	add.w	r9, r4, #1
 80130d6:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80130da:	1224      	asrs	r4, r4, #8
 80130dc:	704c      	strb	r4, [r1, #1]
 80130de:	78ad      	ldrb	r5, [r5, #2]
 80130e0:	78bc      	ldrb	r4, [r7, #2]
 80130e2:	436a      	muls	r2, r5
 80130e4:	789b      	ldrb	r3, [r3, #2]
 80130e6:	fb08 2204 	mla	r2, r8, r4, r2
 80130ea:	78b4      	ldrb	r4, [r6, #2]
 80130ec:	fb00 2004 	mla	r0, r0, r4, r2
 80130f0:	fb0b 0b03 	mla	fp, fp, r3, r0
 80130f4:	9b01      	ldr	r3, [sp, #4]
 80130f6:	fb13 fe0e 	smulbb	lr, r3, lr
 80130fa:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80130fe:	fb0b ec0c 	mla	ip, fp, ip, lr
 8013102:	fa1f fc8c 	uxth.w	ip, ip
 8013106:	f10c 0e01 	add.w	lr, ip, #1
 801310a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801310e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013112:	f881 c002 	strb.w	ip, [r1, #2]
 8013116:	b007      	add	sp, #28
 8013118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311c:	af05      	add	r7, sp, #20
 801311e:	e75b      	b.n	8012fd8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8013120:	ad05      	add	r5, sp, #20
 8013122:	462f      	mov	r7, r5
 8013124:	e766      	b.n	8012ff4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8013126:	ad05      	add	r5, sp, #20
 8013128:	e764      	b.n	8012ff4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801312a:	ae05      	add	r6, sp, #20
 801312c:	e777      	b.n	801301e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801312e:	ab05      	add	r3, sp, #20
 8013130:	461e      	mov	r6, r3
 8013132:	e783      	b.n	801303c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8013134:	ab05      	add	r3, sp, #20
 8013136:	e781      	b.n	801303c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08013138 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801313c:	b093      	sub	sp, #76	; 0x4c
 801313e:	9210      	str	r2, [sp, #64]	; 0x40
 8013140:	9309      	str	r3, [sp, #36]	; 0x24
 8013142:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013144:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013148:	9011      	str	r0, [sp, #68]	; 0x44
 801314a:	930e      	str	r3, [sp, #56]	; 0x38
 801314c:	6850      	ldr	r0, [r2, #4]
 801314e:	910d      	str	r1, [sp, #52]	; 0x34
 8013150:	6812      	ldr	r2, [r2, #0]
 8013152:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8013156:	fb00 1303 	mla	r3, r0, r3, r1
 801315a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801315e:	18d3      	adds	r3, r2, r3
 8013160:	930a      	str	r3, [sp, #40]	; 0x28
 8013162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	930c      	str	r3, [sp, #48]	; 0x30
 8013168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801316a:	685c      	ldr	r4, [r3, #4]
 801316c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801316e:	3404      	adds	r4, #4
 8013170:	43db      	mvns	r3, r3
 8013172:	b2db      	uxtb	r3, r3
 8013174:	930b      	str	r3, [sp, #44]	; 0x2c
 8013176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013178:	2b00      	cmp	r3, #0
 801317a:	dc03      	bgt.n	8013184 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801317c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801317e:	2b00      	cmp	r3, #0
 8013180:	f340 8250 	ble.w	8013624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8013184:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013186:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801318a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801318e:	1e48      	subs	r0, r1, #1
 8013190:	1e55      	subs	r5, r2, #1
 8013192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013194:	2b00      	cmp	r3, #0
 8013196:	f340 80ee 	ble.w	8013376 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801319a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801319c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801319e:	1436      	asrs	r6, r6, #16
 80131a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80131a4:	d406      	bmi.n	80131b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131a6:	4286      	cmp	r6, r0
 80131a8:	da04      	bge.n	80131b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	db02      	blt.n	80131b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131ae:	42ab      	cmp	r3, r5
 80131b0:	f2c0 80e2 	blt.w	8013378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80131b4:	3601      	adds	r6, #1
 80131b6:	f100 80cf 	bmi.w	8013358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131ba:	42b1      	cmp	r1, r6
 80131bc:	f2c0 80cc 	blt.w	8013358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131c0:	3301      	adds	r3, #1
 80131c2:	f100 80c9 	bmi.w	8013358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131c6:	429a      	cmp	r2, r3
 80131c8:	f2c0 80c6 	blt.w	8013358 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131cc:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80131d0:	f1bb 0f00 	cmp.w	fp, #0
 80131d4:	f340 80f1 	ble.w	80133ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80131d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80131da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80131dc:	9824      	ldr	r0, [sp, #144]	; 0x90
 80131de:	141d      	asrs	r5, r3, #16
 80131e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131e2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80131e6:	68c7      	ldr	r7, [r0, #12]
 80131e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80131ea:	1418      	asrs	r0, r3, #16
 80131ec:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80131f0:	6892      	ldr	r2, [r2, #8]
 80131f2:	f100 8137 	bmi.w	8013464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80131f6:	f102 3cff 	add.w	ip, r2, #4294967295
 80131fa:	4560      	cmp	r0, ip
 80131fc:	f280 8132 	bge.w	8013464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013200:	2d00      	cmp	r5, #0
 8013202:	f2c0 812f 	blt.w	8013464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013206:	f107 3cff 	add.w	ip, r7, #4294967295
 801320a:	4565      	cmp	r5, ip
 801320c:	f280 812a 	bge.w	8013464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013210:	b212      	sxth	r2, r2
 8013212:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013214:	fb05 0002 	mla	r0, r5, r2, r0
 8013218:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801321a:	f817 c000 	ldrb.w	ip, [r7, r0]
 801321e:	4405      	add	r5, r0
 8013220:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013224:	eb04 0e0c 	add.w	lr, r4, ip
 8013228:	f1b8 0f00 	cmp.w	r8, #0
 801322c:	f000 810c 	beq.w	8013448 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8013230:	786f      	ldrb	r7, [r5, #1]
 8013232:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013236:	4427      	add	r7, r4
 8013238:	2900      	cmp	r1, #0
 801323a:	f000 810d 	beq.w	8013458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801323e:	18a8      	adds	r0, r5, r2
 8013240:	5caa      	ldrb	r2, [r5, r2]
 8013242:	7840      	ldrb	r0, [r0, #1]
 8013244:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013248:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801324c:	4422      	add	r2, r4
 801324e:	4420      	add	r0, r4
 8013250:	fa1f f388 	uxth.w	r3, r8
 8013254:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8013258:	b289      	uxth	r1, r1
 801325a:	f897 c000 	ldrb.w	ip, [r7]
 801325e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013262:	fb03 f901 	mul.w	r9, r3, r1
 8013266:	011b      	lsls	r3, r3, #4
 8013268:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801326c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8013270:	eba3 0309 	sub.w	r3, r3, r9
 8013274:	b289      	uxth	r1, r1
 8013276:	b29b      	uxth	r3, r3
 8013278:	eba8 0801 	sub.w	r8, r8, r1
 801327c:	fb03 fc0c 	mul.w	ip, r3, ip
 8013280:	fa1f f888 	uxth.w	r8, r8
 8013284:	930f      	str	r3, [sp, #60]	; 0x3c
 8013286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013288:	fb08 cc0a 	mla	ip, r8, sl, ip
 801328c:	f892 a000 	ldrb.w	sl, [r2]
 8013290:	fb01 cc0a 	mla	ip, r1, sl, ip
 8013294:	f890 a000 	ldrb.w	sl, [r0]
 8013298:	fb09 cc0a 	mla	ip, r9, sl, ip
 801329c:	f896 a000 	ldrb.w	sl, [r6]
 80132a0:	fb1a fa03 	smulbb	sl, sl, r3
 80132a4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80132a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132aa:	fb0c ac05 	mla	ip, ip, r5, sl
 80132ae:	fa1f fc8c 	uxth.w	ip, ip
 80132b2:	f10c 0a01 	add.w	sl, ip, #1
 80132b6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80132ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80132be:	f886 a000 	strb.w	sl, [r6]
 80132c2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80132c6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80132ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80132ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132d0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80132d4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80132d8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80132dc:	f890 a001 	ldrb.w	sl, [r0, #1]
 80132e0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80132e4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80132e8:	fb1a fa03 	smulbb	sl, sl, r3
 80132ec:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80132f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132f2:	fb0c ac05 	mla	ip, ip, r5, sl
 80132f6:	fa1f fc8c 	uxth.w	ip, ip
 80132fa:	f10c 0a01 	add.w	sl, ip, #1
 80132fe:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8013302:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013306:	f886 c001 	strb.w	ip, [r6, #1]
 801330a:	78bf      	ldrb	r7, [r7, #2]
 801330c:	f89e c002 	ldrb.w	ip, [lr, #2]
 8013310:	437b      	muls	r3, r7
 8013312:	fb08 330c 	mla	r3, r8, ip, r3
 8013316:	f892 c002 	ldrb.w	ip, [r2, #2]
 801331a:	7882      	ldrb	r2, [r0, #2]
 801331c:	fb01 310c 	mla	r1, r1, ip, r3
 8013320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013322:	fb09 1902 	mla	r9, r9, r2, r1
 8013326:	78b1      	ldrb	r1, [r6, #2]
 8013328:	fb11 f103 	smulbb	r1, r1, r3
 801332c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013330:	fb09 1505 	mla	r5, r9, r5, r1
 8013334:	b2ad      	uxth	r5, r5
 8013336:	1c6b      	adds	r3, r5, #1
 8013338:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801333c:	122d      	asrs	r5, r5, #8
 801333e:	70b5      	strb	r5, [r6, #2]
 8013340:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013342:	3603      	adds	r6, #3
 8013344:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013346:	f10b 3bff 	add.w	fp, fp, #4294967295
 801334a:	4413      	add	r3, r2
 801334c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801334e:	931d      	str	r3, [sp, #116]	; 0x74
 8013350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013352:	4413      	add	r3, r2
 8013354:	931e      	str	r3, [sp, #120]	; 0x78
 8013356:	e73b      	b.n	80131d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801335a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801335c:	4433      	add	r3, r6
 801335e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013360:	931d      	str	r3, [sp, #116]	; 0x74
 8013362:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013364:	4433      	add	r3, r6
 8013366:	931e      	str	r3, [sp, #120]	; 0x78
 8013368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801336a:	3b01      	subs	r3, #1
 801336c:	9309      	str	r3, [sp, #36]	; 0x24
 801336e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013370:	3303      	adds	r3, #3
 8013372:	930a      	str	r3, [sp, #40]	; 0x28
 8013374:	e70d      	b.n	8013192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013376:	d028      	beq.n	80133ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8013378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801337a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801337c:	3b01      	subs	r3, #1
 801337e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013380:	fb00 5003 	mla	r0, r0, r3, r5
 8013384:	1400      	asrs	r0, r0, #16
 8013386:	f53f af21 	bmi.w	80131cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801338a:	3901      	subs	r1, #1
 801338c:	4288      	cmp	r0, r1
 801338e:	f6bf af1d 	bge.w	80131cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8013392:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013394:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013396:	fb01 0303 	mla	r3, r1, r3, r0
 801339a:	141b      	asrs	r3, r3, #16
 801339c:	f53f af16 	bmi.w	80131cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80133a0:	3a01      	subs	r2, #1
 80133a2:	4293      	cmp	r3, r2
 80133a4:	f6bf af12 	bge.w	80131cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80133a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133aa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80133ae:	1cdf      	adds	r7, r3, #3
 80133b0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80133b4:	f1b9 0f00 	cmp.w	r9, #0
 80133b8:	dc73      	bgt.n	80134a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80133ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80133c6:	441a      	add	r2, r3
 80133c8:	920a      	str	r2, [sp, #40]	; 0x28
 80133ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	f340 8129 	ble.w	8013624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80133d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80133d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80133d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80133dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80133e0:	eef0 6a62 	vmov.f32	s13, s5
 80133e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80133ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80133f0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80133f4:	eef0 6a43 	vmov.f32	s13, s6
 80133f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80133fc:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8013400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013404:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013408:	ee77 2a62 	vsub.f32	s5, s14, s5
 801340c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013414:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013418:	ee12 2a90 	vmov	r2, s5
 801341c:	eef0 2a47 	vmov.f32	s5, s14
 8013420:	fb92 f3f3 	sdiv	r3, r2, r3
 8013424:	ee13 2a10 	vmov	r2, s6
 8013428:	931f      	str	r3, [sp, #124]	; 0x7c
 801342a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801342c:	eeb0 3a67 	vmov.f32	s6, s15
 8013430:	fb92 f3f3 	sdiv	r3, r2, r3
 8013434:	9320      	str	r3, [sp, #128]	; 0x80
 8013436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013438:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801343a:	3b01      	subs	r3, #1
 801343c:	930d      	str	r3, [sp, #52]	; 0x34
 801343e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013440:	bf08      	it	eq
 8013442:	4613      	moveq	r3, r2
 8013444:	9309      	str	r3, [sp, #36]	; 0x24
 8013446:	e696      	b.n	8013176 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013448:	b149      	cbz	r1, 801345e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801344a:	5caa      	ldrb	r2, [r5, r2]
 801344c:	4670      	mov	r0, lr
 801344e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013452:	4422      	add	r2, r4
 8013454:	4677      	mov	r7, lr
 8013456:	e6fb      	b.n	8013250 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8013458:	4670      	mov	r0, lr
 801345a:	4672      	mov	r2, lr
 801345c:	e6f8      	b.n	8013250 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801345e:	4670      	mov	r0, lr
 8013460:	4672      	mov	r2, lr
 8013462:	e7f7      	b.n	8013454 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8013464:	f110 0c01 	adds.w	ip, r0, #1
 8013468:	f53f af6a 	bmi.w	8013340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801346c:	4562      	cmp	r2, ip
 801346e:	f6ff af67 	blt.w	8013340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013472:	f115 0c01 	adds.w	ip, r5, #1
 8013476:	f53f af63 	bmi.w	8013340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801347a:	4567      	cmp	r7, ip
 801347c:	f6ff af60 	blt.w	8013340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013482:	b23f      	sxth	r7, r7
 8013484:	b212      	sxth	r2, r2
 8013486:	9002      	str	r0, [sp, #8]
 8013488:	9701      	str	r7, [sp, #4]
 801348a:	9200      	str	r2, [sp, #0]
 801348c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801348e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013490:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8013494:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8013498:	4623      	mov	r3, r4
 801349a:	4631      	mov	r1, r6
 801349c:	f7ff fd69 	bl	8012f72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80134a0:	e74e      	b.n	8013340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80134a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80134a4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80134a6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80134aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80134ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80134ae:	1400      	asrs	r0, r0, #16
 80134b0:	142d      	asrs	r5, r5, #16
 80134b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134b4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80134b8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80134bc:	fb02 5000 	mla	r0, r2, r0, r5
 80134c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134c2:	f815 e000 	ldrb.w	lr, [r5, r0]
 80134c6:	eb05 0c00 	add.w	ip, r5, r0
 80134ca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80134ce:	eb04 060e 	add.w	r6, r4, lr
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	f000 8097 	beq.w	8013606 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80134d8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80134dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134e0:	4425      	add	r5, r4
 80134e2:	2900      	cmp	r1, #0
 80134e4:	f000 8098 	beq.w	8013618 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80134e8:	eb0c 0002 	add.w	r0, ip, r2
 80134ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80134f0:	7840      	ldrb	r0, [r0, #1]
 80134f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80134f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80134fa:	4422      	add	r2, r4
 80134fc:	4420      	add	r0, r4
 80134fe:	b29b      	uxth	r3, r3
 8013500:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8013504:	b289      	uxth	r1, r1
 8013506:	f895 e000 	ldrb.w	lr, [r5]
 801350a:	3703      	adds	r7, #3
 801350c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013510:	fb03 f801 	mul.w	r8, r3, r1
 8013514:	011b      	lsls	r3, r3, #4
 8013516:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801351a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801351e:	eba3 0308 	sub.w	r3, r3, r8
 8013522:	b289      	uxth	r1, r1
 8013524:	b29b      	uxth	r3, r3
 8013526:	ebac 0c01 	sub.w	ip, ip, r1
 801352a:	fb03 fe0e 	mul.w	lr, r3, lr
 801352e:	fa1f fc8c 	uxth.w	ip, ip
 8013532:	930f      	str	r3, [sp, #60]	; 0x3c
 8013534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013536:	fb0c ee0b 	mla	lr, ip, fp, lr
 801353a:	f892 b000 	ldrb.w	fp, [r2]
 801353e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013542:	f890 b000 	ldrb.w	fp, [r0]
 8013546:	fb08 ee0b 	mla	lr, r8, fp, lr
 801354a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801354e:	fb1b fb03 	smulbb	fp, fp, r3
 8013552:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8013556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013558:	fb0e be0a 	mla	lr, lr, sl, fp
 801355c:	fa1f fe8e 	uxth.w	lr, lr
 8013560:	f10e 0b01 	add.w	fp, lr, #1
 8013564:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013568:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801356c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8013570:	f895 e001 	ldrb.w	lr, [r5, #1]
 8013574:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013578:	fb03 fe0e 	mul.w	lr, r3, lr
 801357c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801357e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013582:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013586:	fb01 ee0b 	mla	lr, r1, fp, lr
 801358a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801358e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8013592:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8013596:	fb1b fb03 	smulbb	fp, fp, r3
 801359a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801359e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135a0:	fb0e be0a 	mla	lr, lr, sl, fp
 80135a4:	fa1f fe8e 	uxth.w	lr, lr
 80135a8:	f10e 0b01 	add.w	fp, lr, #1
 80135ac:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80135b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80135b4:	f807 ec05 	strb.w	lr, [r7, #-5]
 80135b8:	78ad      	ldrb	r5, [r5, #2]
 80135ba:	78b6      	ldrb	r6, [r6, #2]
 80135bc:	436b      	muls	r3, r5
 80135be:	7895      	ldrb	r5, [r2, #2]
 80135c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135c2:	fb0c 3306 	mla	r3, ip, r6, r3
 80135c6:	fb01 3305 	mla	r3, r1, r5, r3
 80135ca:	7885      	ldrb	r5, [r0, #2]
 80135cc:	fb08 3805 	mla	r8, r8, r5, r3
 80135d0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80135d4:	fb13 f302 	smulbb	r3, r3, r2
 80135d8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80135dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80135de:	fb08 380a 	mla	r8, r8, sl, r3
 80135e2:	fa1f f888 	uxth.w	r8, r8
 80135e6:	f108 0301 	add.w	r3, r8, #1
 80135ea:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80135ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135f0:	4413      	add	r3, r2
 80135f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80135f8:	931d      	str	r3, [sp, #116]	; 0x74
 80135fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80135fc:	f807 8c04 	strb.w	r8, [r7, #-4]
 8013600:	4413      	add	r3, r2
 8013602:	931e      	str	r3, [sp, #120]	; 0x78
 8013604:	e6d6      	b.n	80133b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8013606:	b151      	cbz	r1, 801361e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8013608:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801360c:	4630      	mov	r0, r6
 801360e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013612:	4422      	add	r2, r4
 8013614:	4635      	mov	r5, r6
 8013616:	e772      	b.n	80134fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8013618:	4630      	mov	r0, r6
 801361a:	4632      	mov	r2, r6
 801361c:	e76f      	b.n	80134fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801361e:	4630      	mov	r0, r6
 8013620:	4632      	mov	r2, r6
 8013622:	e7f7      	b.n	8013614 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8013624:	b013      	add	sp, #76	; 0x4c
 8013626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801362a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801362a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801362e:	784c      	ldrb	r4, [r1, #1]
 8013630:	f891 a002 	ldrb.w	sl, [r1, #2]
 8013634:	0224      	lsls	r4, r4, #8
 8013636:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801363a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801363e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013642:	f891 a000 	ldrb.w	sl, [r1]
 8013646:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801364a:	ea44 040a 	orr.w	r4, r4, sl
 801364e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8013652:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8013656:	9401      	str	r4, [sp, #4]
 8013658:	fb05 c70e 	mla	r7, r5, lr, ip
 801365c:	2d00      	cmp	r5, #0
 801365e:	eb02 0807 	add.w	r8, r2, r7
 8013662:	db72      	blt.n	801374a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013664:	45a9      	cmp	r9, r5
 8013666:	dd70      	ble.n	801374a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013668:	f1bc 0f00 	cmp.w	ip, #0
 801366c:	db6b      	blt.n	8013746 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801366e:	45e6      	cmp	lr, ip
 8013670:	dd69      	ble.n	8013746 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8013672:	5dd7      	ldrb	r7, [r2, r7]
 8013674:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013678:	441f      	add	r7, r3
 801367a:	f11c 0201 	adds.w	r2, ip, #1
 801367e:	d467      	bmi.n	8013750 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013680:	4596      	cmp	lr, r2
 8013682:	dd65      	ble.n	8013750 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013684:	2800      	cmp	r0, #0
 8013686:	d063      	beq.n	8013750 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013688:	f898 4001 	ldrb.w	r4, [r8, #1]
 801368c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013690:	441c      	add	r4, r3
 8013692:	3501      	adds	r5, #1
 8013694:	d460      	bmi.n	8013758 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8013696:	45a9      	cmp	r9, r5
 8013698:	dd5e      	ble.n	8013758 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801369a:	2e00      	cmp	r6, #0
 801369c:	d05c      	beq.n	8013758 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801369e:	f1bc 0f00 	cmp.w	ip, #0
 80136a2:	db57      	blt.n	8013754 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80136a4:	45e6      	cmp	lr, ip
 80136a6:	dd55      	ble.n	8013754 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80136a8:	f818 500e 	ldrb.w	r5, [r8, lr]
 80136ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136b0:	441d      	add	r5, r3
 80136b2:	f11c 0201 	adds.w	r2, ip, #1
 80136b6:	d452      	bmi.n	801375e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136b8:	4596      	cmp	lr, r2
 80136ba:	dd50      	ble.n	801375e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d04e      	beq.n	801375e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136c0:	44c6      	add	lr, r8
 80136c2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80136c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80136ca:	4413      	add	r3, r2
 80136cc:	b280      	uxth	r0, r0
 80136ce:	f897 8000 	ldrb.w	r8, [r7]
 80136d2:	b2b2      	uxth	r2, r6
 80136d4:	fb00 f602 	mul.w	r6, r0, r2
 80136d8:	0100      	lsls	r0, r0, #4
 80136da:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80136de:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80136e2:	1b80      	subs	r0, r0, r6
 80136e4:	fa1f fc82 	uxth.w	ip, r2
 80136e8:	b282      	uxth	r2, r0
 80136ea:	7820      	ldrb	r0, [r4, #0]
 80136ec:	ebae 0e0c 	sub.w	lr, lr, ip
 80136f0:	4350      	muls	r0, r2
 80136f2:	fa1f fe8e 	uxth.w	lr, lr
 80136f6:	fb0e 0808 	mla	r8, lr, r8, r0
 80136fa:	7828      	ldrb	r0, [r5, #0]
 80136fc:	fb0c 8800 	mla	r8, ip, r0, r8
 8013700:	7818      	ldrb	r0, [r3, #0]
 8013702:	fb06 8000 	mla	r0, r6, r0, r8
 8013706:	1200      	asrs	r0, r0, #8
 8013708:	7008      	strb	r0, [r1, #0]
 801370a:	7860      	ldrb	r0, [r4, #1]
 801370c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8013710:	4350      	muls	r0, r2
 8013712:	fb0e 0808 	mla	r8, lr, r8, r0
 8013716:	7868      	ldrb	r0, [r5, #1]
 8013718:	fb0c 8800 	mla	r8, ip, r0, r8
 801371c:	7858      	ldrb	r0, [r3, #1]
 801371e:	fb06 8000 	mla	r0, r6, r0, r8
 8013722:	1200      	asrs	r0, r0, #8
 8013724:	7048      	strb	r0, [r1, #1]
 8013726:	78a0      	ldrb	r0, [r4, #2]
 8013728:	78bf      	ldrb	r7, [r7, #2]
 801372a:	4350      	muls	r0, r2
 801372c:	78aa      	ldrb	r2, [r5, #2]
 801372e:	fb0e 0007 	mla	r0, lr, r7, r0
 8013732:	fb0c 0c02 	mla	ip, ip, r2, r0
 8013736:	789a      	ldrb	r2, [r3, #2]
 8013738:	fb06 c202 	mla	r2, r6, r2, ip
 801373c:	1212      	asrs	r2, r2, #8
 801373e:	708a      	strb	r2, [r1, #2]
 8013740:	b002      	add	sp, #8
 8013742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013746:	af01      	add	r7, sp, #4
 8013748:	e797      	b.n	801367a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801374a:	ac01      	add	r4, sp, #4
 801374c:	4627      	mov	r7, r4
 801374e:	e7a0      	b.n	8013692 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013750:	ac01      	add	r4, sp, #4
 8013752:	e79e      	b.n	8013692 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013754:	ad01      	add	r5, sp, #4
 8013756:	e7ac      	b.n	80136b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8013758:	ab01      	add	r3, sp, #4
 801375a:	461d      	mov	r5, r3
 801375c:	e7b6      	b.n	80136cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801375e:	ab01      	add	r3, sp, #4
 8013760:	e7b4      	b.n	80136cc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08013762 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013766:	b08d      	sub	sp, #52	; 0x34
 8013768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801376c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8013770:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013772:	900b      	str	r0, [sp, #44]	; 0x2c
 8013774:	9306      	str	r3, [sp, #24]
 8013776:	6850      	ldr	r0, [r2, #4]
 8013778:	6812      	ldr	r2, [r2, #0]
 801377a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801377c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8013780:	fb00 1303 	mla	r3, r0, r3, r1
 8013784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013788:	18d3      	adds	r3, r2, r3
 801378a:	9307      	str	r3, [sp, #28]
 801378c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	9308      	str	r3, [sp, #32]
 8013792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013794:	685d      	ldr	r5, [r3, #4]
 8013796:	3504      	adds	r5, #4
 8013798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801379a:	2b00      	cmp	r3, #0
 801379c:	dc03      	bgt.n	80137a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f340 81e6 	ble.w	8013b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80137a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80137a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80137ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80137b0:	1e48      	subs	r0, r1, #1
 80137b2:	1e56      	subs	r6, r2, #1
 80137b4:	9b06      	ldr	r3, [sp, #24]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f340 80bd 	ble.w	8013936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80137bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80137be:	1427      	asrs	r7, r4, #16
 80137c0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80137c4:	d406      	bmi.n	80137d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137c6:	4287      	cmp	r7, r0
 80137c8:	da04      	bge.n	80137d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	db02      	blt.n	80137d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137ce:	42b3      	cmp	r3, r6
 80137d0:	f2c0 80b2 	blt.w	8013938 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80137d4:	3701      	adds	r7, #1
 80137d6:	f100 80a1 	bmi.w	801391c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137da:	42b9      	cmp	r1, r7
 80137dc:	f2c0 809e 	blt.w	801391c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137e0:	3301      	adds	r3, #1
 80137e2:	f100 809b 	bmi.w	801391c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137e6:	429a      	cmp	r2, r3
 80137e8:	f2c0 8098 	blt.w	801391c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137ec:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80137f0:	f1bb 0f00 	cmp.w	fp, #0
 80137f4:	f340 80bf 	ble.w	8013976 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80137f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137fa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80137fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80137fe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013802:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8013806:	1420      	asrs	r0, r4, #16
 8013808:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801380a:	ea4f 4723 	mov.w	r7, r3, asr #16
 801380e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8013812:	6892      	ldr	r2, [r2, #8]
 8013814:	f100 8103 	bmi.w	8013a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013818:	f102 3eff 	add.w	lr, r2, #4294967295
 801381c:	4570      	cmp	r0, lr
 801381e:	f280 80fe 	bge.w	8013a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013822:	2f00      	cmp	r7, #0
 8013824:	f2c0 80fb 	blt.w	8013a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013828:	f10c 3eff 	add.w	lr, ip, #4294967295
 801382c:	4577      	cmp	r7, lr
 801382e:	f280 80f6 	bge.w	8013a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013832:	b212      	sxth	r2, r2
 8013834:	fb07 0002 	mla	r0, r7, r2, r0
 8013838:	9f08      	ldr	r7, [sp, #32]
 801383a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801383e:	eb07 0e00 	add.w	lr, r7, r0
 8013842:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013846:	eb05 0c08 	add.w	ip, r5, r8
 801384a:	2b00      	cmp	r3, #0
 801384c:	f000 80d8 	beq.w	8013a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013850:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8013854:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013858:	442f      	add	r7, r5
 801385a:	2900      	cmp	r1, #0
 801385c:	f000 80d9 	beq.w	8013a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013860:	eb0e 0002 	add.w	r0, lr, r2
 8013864:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013868:	7840      	ldrb	r0, [r0, #1]
 801386a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801386e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013872:	442a      	add	r2, r5
 8013874:	4428      	add	r0, r5
 8013876:	b29b      	uxth	r3, r3
 8013878:	f815 a008 	ldrb.w	sl, [r5, r8]
 801387c:	b289      	uxth	r1, r1
 801387e:	f897 8000 	ldrb.w	r8, [r7]
 8013882:	fb03 f901 	mul.w	r9, r3, r1
 8013886:	011b      	lsls	r3, r3, #4
 8013888:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801388c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8013890:	eba3 0309 	sub.w	r3, r3, r9
 8013894:	b289      	uxth	r1, r1
 8013896:	b29b      	uxth	r3, r3
 8013898:	ebae 0e01 	sub.w	lr, lr, r1
 801389c:	fb03 f808 	mul.w	r8, r3, r8
 80138a0:	fa1f fe8e 	uxth.w	lr, lr
 80138a4:	fb0e 880a 	mla	r8, lr, sl, r8
 80138a8:	f892 a000 	ldrb.w	sl, [r2]
 80138ac:	fb01 880a 	mla	r8, r1, sl, r8
 80138b0:	f890 a000 	ldrb.w	sl, [r0]
 80138b4:	fb09 880a 	mla	r8, r9, sl, r8
 80138b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80138bc:	f886 8000 	strb.w	r8, [r6]
 80138c0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80138c4:	f89c a001 	ldrb.w	sl, [ip, #1]
 80138c8:	fb03 f808 	mul.w	r8, r3, r8
 80138cc:	fb0e 880a 	mla	r8, lr, sl, r8
 80138d0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80138d4:	fb01 880a 	mla	r8, r1, sl, r8
 80138d8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80138dc:	fb09 880a 	mla	r8, r9, sl, r8
 80138e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80138e4:	f886 8001 	strb.w	r8, [r6, #1]
 80138e8:	78bf      	ldrb	r7, [r7, #2]
 80138ea:	f89c c002 	ldrb.w	ip, [ip, #2]
 80138ee:	437b      	muls	r3, r7
 80138f0:	7892      	ldrb	r2, [r2, #2]
 80138f2:	fb0e 330c 	mla	r3, lr, ip, r3
 80138f6:	fb01 3102 	mla	r1, r1, r2, r3
 80138fa:	7882      	ldrb	r2, [r0, #2]
 80138fc:	fb09 1902 	mla	r9, r9, r2, r1
 8013900:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013904:	f886 9002 	strb.w	r9, [r6, #2]
 8013908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801390a:	3603      	adds	r6, #3
 801390c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801390e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013912:	441c      	add	r4, r3
 8013914:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013916:	4413      	add	r3, r2
 8013918:	9318      	str	r3, [sp, #96]	; 0x60
 801391a:	e769      	b.n	80137f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801391c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801391e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8013920:	441c      	add	r4, r3
 8013922:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013924:	443b      	add	r3, r7
 8013926:	9318      	str	r3, [sp, #96]	; 0x60
 8013928:	9b06      	ldr	r3, [sp, #24]
 801392a:	3b01      	subs	r3, #1
 801392c:	9306      	str	r3, [sp, #24]
 801392e:	9b07      	ldr	r3, [sp, #28]
 8013930:	3303      	adds	r3, #3
 8013932:	9307      	str	r3, [sp, #28]
 8013934:	e73e      	b.n	80137b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8013936:	d026      	beq.n	8013986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8013938:	9b06      	ldr	r3, [sp, #24]
 801393a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801393c:	3b01      	subs	r3, #1
 801393e:	fb00 4003 	mla	r0, r0, r3, r4
 8013942:	1400      	asrs	r0, r0, #16
 8013944:	f53f af52 	bmi.w	80137ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013948:	3901      	subs	r1, #1
 801394a:	4288      	cmp	r0, r1
 801394c:	f6bf af4e 	bge.w	80137ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013950:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013952:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013954:	fb01 0303 	mla	r3, r1, r3, r0
 8013958:	141b      	asrs	r3, r3, #16
 801395a:	f53f af47 	bmi.w	80137ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801395e:	3a01      	subs	r2, #1
 8013960:	4293      	cmp	r3, r2
 8013962:	f6bf af43 	bge.w	80137ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013966:	9b07      	ldr	r3, [sp, #28]
 8013968:	f8dd a018 	ldr.w	sl, [sp, #24]
 801396c:	f103 0803 	add.w	r8, r3, #3
 8013970:	f1ba 0f00 	cmp.w	sl, #0
 8013974:	dc71      	bgt.n	8013a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8013976:	9b06      	ldr	r3, [sp, #24]
 8013978:	9a07      	ldr	r2, [sp, #28]
 801397a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801397e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013982:	441a      	add	r2, r3
 8013984:	9207      	str	r2, [sp, #28]
 8013986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013988:	2b00      	cmp	r3, #0
 801398a:	f340 80f2 	ble.w	8013b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801398e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013992:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013994:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013998:	eeb0 6a62 	vmov.f32	s12, s5
 801399c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139a8:	ee16 4a10 	vmov	r4, s12
 80139ac:	eeb0 6a43 	vmov.f32	s12, s6
 80139b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139b4:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 80139b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80139d0:	ee12 2a90 	vmov	r2, s5
 80139d4:	eef0 2a47 	vmov.f32	s5, s14
 80139d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139dc:	ee13 2a10 	vmov	r2, s6
 80139e0:	9319      	str	r3, [sp, #100]	; 0x64
 80139e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139e4:	eeb0 3a67 	vmov.f32	s6, s15
 80139e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139ec:	931a      	str	r3, [sp, #104]	; 0x68
 80139ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139f2:	3b01      	subs	r3, #1
 80139f4:	9309      	str	r3, [sp, #36]	; 0x24
 80139f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139f8:	bf08      	it	eq
 80139fa:	4613      	moveq	r3, r2
 80139fc:	9306      	str	r3, [sp, #24]
 80139fe:	e6cb      	b.n	8013798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013a00:	b151      	cbz	r1, 8013a18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8013a02:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013a06:	4660      	mov	r0, ip
 8013a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013a0c:	442a      	add	r2, r5
 8013a0e:	4667      	mov	r7, ip
 8013a10:	e731      	b.n	8013876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8013a12:	4660      	mov	r0, ip
 8013a14:	4662      	mov	r2, ip
 8013a16:	e72e      	b.n	8013876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8013a18:	4660      	mov	r0, ip
 8013a1a:	4662      	mov	r2, ip
 8013a1c:	e7f7      	b.n	8013a0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8013a1e:	f110 0e01 	adds.w	lr, r0, #1
 8013a22:	f53f af71 	bmi.w	8013908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a26:	4572      	cmp	r2, lr
 8013a28:	f6ff af6e 	blt.w	8013908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a2c:	f117 0e01 	adds.w	lr, r7, #1
 8013a30:	f53f af6a 	bmi.w	8013908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a34:	45f4      	cmp	ip, lr
 8013a36:	f6ff af67 	blt.w	8013908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a3a:	b212      	sxth	r2, r2
 8013a3c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8013a40:	fa0f f38c 	sxth.w	r3, ip
 8013a44:	9200      	str	r2, [sp, #0]
 8013a46:	4631      	mov	r1, r6
 8013a48:	9a08      	ldr	r2, [sp, #32]
 8013a4a:	9301      	str	r3, [sp, #4]
 8013a4c:	462b      	mov	r3, r5
 8013a4e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8013a52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013a54:	f7ff fde9 	bl	801362a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8013a58:	e756      	b.n	8013908 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a5c:	1426      	asrs	r6, r4, #16
 8013a5e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013a60:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8013a64:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013a68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a6a:	1400      	asrs	r0, r0, #16
 8013a6c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8013a70:	fb02 6000 	mla	r0, r2, r0, r6
 8013a74:	9e08      	ldr	r6, [sp, #32]
 8013a76:	f816 e000 	ldrb.w	lr, [r6, r0]
 8013a7a:	eb06 0c00 	add.w	ip, r6, r0
 8013a7e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013a82:	eb05 070e 	add.w	r7, r5, lr
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d064      	beq.n	8013b54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8013a8a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8013a8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013a92:	442e      	add	r6, r5
 8013a94:	2900      	cmp	r1, #0
 8013a96:	d066      	beq.n	8013b66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8013a98:	eb0c 0002 	add.w	r0, ip, r2
 8013a9c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013aa0:	7840      	ldrb	r0, [r0, #1]
 8013aa2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013aa6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013aaa:	442a      	add	r2, r5
 8013aac:	4428      	add	r0, r5
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8013ab4:	b289      	uxth	r1, r1
 8013ab6:	f896 e000 	ldrb.w	lr, [r6]
 8013aba:	f108 0803 	add.w	r8, r8, #3
 8013abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ac2:	fb03 f901 	mul.w	r9, r3, r1
 8013ac6:	011b      	lsls	r3, r3, #4
 8013ac8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013acc:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8013ad0:	eba3 0309 	sub.w	r3, r3, r9
 8013ad4:	b289      	uxth	r1, r1
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	ebac 0c01 	sub.w	ip, ip, r1
 8013adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8013ae0:	fa1f fc8c 	uxth.w	ip, ip
 8013ae4:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013ae8:	f892 b000 	ldrb.w	fp, [r2]
 8013aec:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013af0:	f890 b000 	ldrb.w	fp, [r0]
 8013af4:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013af8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013afc:	f808 ec06 	strb.w	lr, [r8, #-6]
 8013b00:	f896 e001 	ldrb.w	lr, [r6, #1]
 8013b04:	f897 b001 	ldrb.w	fp, [r7, #1]
 8013b08:	fb03 fe0e 	mul.w	lr, r3, lr
 8013b0c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013b10:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013b14:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013b18:	f890 b001 	ldrb.w	fp, [r0, #1]
 8013b1c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013b20:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013b24:	f808 ec05 	strb.w	lr, [r8, #-5]
 8013b28:	78b6      	ldrb	r6, [r6, #2]
 8013b2a:	78bf      	ldrb	r7, [r7, #2]
 8013b2c:	4373      	muls	r3, r6
 8013b2e:	7896      	ldrb	r6, [r2, #2]
 8013b30:	7882      	ldrb	r2, [r0, #2]
 8013b32:	fb0c 3307 	mla	r3, ip, r7, r3
 8013b36:	fb01 3306 	mla	r3, r1, r6, r3
 8013b3a:	fb09 3902 	mla	r9, r9, r2, r3
 8013b3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b42:	441c      	add	r4, r3
 8013b44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013b46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013b4a:	4413      	add	r3, r2
 8013b4c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8013b50:	9318      	str	r3, [sp, #96]	; 0x60
 8013b52:	e70d      	b.n	8013970 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8013b54:	b151      	cbz	r1, 8013b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8013b56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013b5a:	4638      	mov	r0, r7
 8013b5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013b60:	442a      	add	r2, r5
 8013b62:	463e      	mov	r6, r7
 8013b64:	e7a3      	b.n	8013aae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b66:	4638      	mov	r0, r7
 8013b68:	463a      	mov	r2, r7
 8013b6a:	e7a0      	b.n	8013aae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b6c:	4638      	mov	r0, r7
 8013b6e:	463a      	mov	r2, r7
 8013b70:	e7f7      	b.n	8013b62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8013b72:	b00d      	add	sp, #52	; 0x34
 8013b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8013b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8013b80:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8013b84:	2d00      	cmp	r5, #0
 8013b86:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8013b8a:	fb05 700c 	mla	r0, r5, ip, r7
 8013b8e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013b92:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8013b96:	eb02 0800 	add.w	r8, r2, r0
 8013b9a:	f2c0 8118 	blt.w	8013dce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013b9e:	45a9      	cmp	r9, r5
 8013ba0:	f340 8115 	ble.w	8013dce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013ba4:	2f00      	cmp	r7, #0
 8013ba6:	f2c0 8110 	blt.w	8013dca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013baa:	45bc      	cmp	ip, r7
 8013bac:	f340 810d 	ble.w	8013dca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013bb0:	5c12      	ldrb	r2, [r2, r0]
 8013bb2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013bb6:	1c7a      	adds	r2, r7, #1
 8013bb8:	f100 810c 	bmi.w	8013dd4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013bbc:	4594      	cmp	ip, r2
 8013bbe:	f340 8109 	ble.w	8013dd4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013bc2:	2c00      	cmp	r4, #0
 8013bc4:	f000 8108 	beq.w	8013dd8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8013bc8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013bcc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013bd0:	3501      	adds	r5, #1
 8013bd2:	f100 8105 	bmi.w	8013de0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013bd6:	45a9      	cmp	r9, r5
 8013bd8:	f340 8102 	ble.w	8013de0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013bdc:	f1be 0f00 	cmp.w	lr, #0
 8013be0:	f000 8101 	beq.w	8013de6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8013be4:	2f00      	cmp	r7, #0
 8013be6:	f2c0 80f9 	blt.w	8013ddc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013bea:	45bc      	cmp	ip, r7
 8013bec:	f340 80f6 	ble.w	8013ddc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013bf0:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013bf4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013bf8:	3701      	adds	r7, #1
 8013bfa:	f100 80f7 	bmi.w	8013dec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013bfe:	45bc      	cmp	ip, r7
 8013c00:	f340 80f4 	ble.w	8013dec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013c04:	2c00      	cmp	r4, #0
 8013c06:	f000 80f3 	beq.w	8013df0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8013c0a:	44c4      	add	ip, r8
 8013c0c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8013c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c14:	fa1f fc84 	uxth.w	ip, r4
 8013c18:	fa1f f48e 	uxth.w	r4, lr
 8013c1c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8013c20:	fb04 fe0c 	mul.w	lr, r4, ip
 8013c24:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8013c28:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8013c2c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8013c30:	ebac 070e 	sub.w	r7, ip, lr
 8013c34:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8013c38:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8013c3c:	b2a4      	uxth	r4, r4
 8013c3e:	b2bf      	uxth	r7, r7
 8013c40:	1b1b      	subs	r3, r3, r4
 8013c42:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8013c46:	fb07 fc0a 	mul.w	ip, r7, sl
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8013c50:	9300      	str	r3, [sp, #0]
 8013c52:	fb04 cc09 	mla	ip, r4, r9, ip
 8013c56:	fb0e cc08 	mla	ip, lr, r8, ip
 8013c5a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8013c5e:	9301      	str	r3, [sp, #4]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 80af 	beq.w	8013dc4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8013c66:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8013c6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013c6e:	fb0b fc0c 	mul.w	ip, fp, ip
 8013c72:	fb0b f606 	mul.w	r6, fp, r6
 8013c76:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8013c7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8013c7e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8013c82:	44dc      	add	ip, fp
 8013c84:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8013c88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013c8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013c90:	fb0a fb0b 	mul.w	fp, sl, fp
 8013c94:	fb0a fa00 	mul.w	sl, sl, r0
 8013c98:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8013c9c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8013ca0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8013ca4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8013ca8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8013cac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013cb0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8013cb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cb8:	0a36      	lsrs	r6, r6, #8
 8013cba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013cbe:	44dc      	add	ip, fp
 8013cc0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8013cc4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8013cc8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013ccc:	fb09 fb0b 	mul.w	fp, r9, fp
 8013cd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013cd4:	fb09 f905 	mul.w	r9, r9, r5
 8013cd8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8013cdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013ce0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8013ce4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013ce8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013cec:	fb0c fc07 	mul.w	ip, ip, r7
 8013cf0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8013cf4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8013cf8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8013cfc:	4458      	add	r0, fp
 8013cfe:	fb08 f505 	mul.w	r5, r8, r5
 8013d02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8013d06:	fb08 f802 	mul.w	r8, r8, r2
 8013d0a:	0a00      	lsrs	r0, r0, #8
 8013d0c:	0a2a      	lsrs	r2, r5, #8
 8013d0e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8013d12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013d16:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8013d1a:	4415      	add	r5, r2
 8013d1c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8013d20:	0a2d      	lsrs	r5, r5, #8
 8013d22:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d26:	9a00      	ldr	r2, [sp, #0]
 8013d28:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8013d2c:	fb03 cc02 	mla	ip, r3, r2, ip
 8013d30:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8013d34:	9b01      	ldr	r3, [sp, #4]
 8013d36:	fb05 c50e 	mla	r5, r5, lr, ip
 8013d3a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8013d3e:	fb00 5004 	mla	r0, r0, r4, r5
 8013d42:	0a00      	lsrs	r0, r0, #8
 8013d44:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8013d48:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8013d4c:	4378      	muls	r0, r7
 8013d4e:	fb02 0006 	mla	r0, r2, r6, r0
 8013d52:	fb0e 0e08 	mla	lr, lr, r8, r0
 8013d56:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8013d5a:	fb04 e000 	mla	r0, r4, r0, lr
 8013d5e:	0a00      	lsrs	r0, r0, #8
 8013d60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013d64:	4328      	orrs	r0, r5
 8013d66:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013d6a:	b2ad      	uxth	r5, r5
 8013d6c:	b2c4      	uxtb	r4, r0
 8013d6e:	436b      	muls	r3, r5
 8013d70:	fb14 f405 	smulbb	r4, r4, r5
 8013d74:	1c5a      	adds	r2, r3, #1
 8013d76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8013d7a:	780b      	ldrb	r3, [r1, #0]
 8013d7c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8013d80:	b2d2      	uxtb	r2, r2
 8013d82:	fb03 4302 	mla	r3, r3, r2, r4
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	1c5c      	adds	r4, r3, #1
 8013d8a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013d8e:	784c      	ldrb	r4, [r1, #1]
 8013d90:	fb14 f402 	smulbb	r4, r4, r2
 8013d94:	121b      	asrs	r3, r3, #8
 8013d96:	700b      	strb	r3, [r1, #0]
 8013d98:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013d9c:	fb03 4305 	mla	r3, r3, r5, r4
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	1c5c      	adds	r4, r3, #1
 8013da4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013da8:	0c04      	lsrs	r4, r0, #16
 8013daa:	7888      	ldrb	r0, [r1, #2]
 8013dac:	121b      	asrs	r3, r3, #8
 8013dae:	fb10 f002 	smulbb	r0, r0, r2
 8013db2:	704b      	strb	r3, [r1, #1]
 8013db4:	fb04 0005 	mla	r0, r4, r5, r0
 8013db8:	b280      	uxth	r0, r0
 8013dba:	1c43      	adds	r3, r0, #1
 8013dbc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8013dc0:	1200      	asrs	r0, r0, #8
 8013dc2:	7088      	strb	r0, [r1, #2]
 8013dc4:	b003      	add	sp, #12
 8013dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dca:	2600      	movs	r6, #0
 8013dcc:	e6f3      	b.n	8013bb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8013dce:	2000      	movs	r0, #0
 8013dd0:	4606      	mov	r6, r0
 8013dd2:	e6fd      	b.n	8013bd0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013dd4:	2000      	movs	r0, #0
 8013dd6:	e6fb      	b.n	8013bd0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013dd8:	4620      	mov	r0, r4
 8013dda:	e6f9      	b.n	8013bd0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013ddc:	2500      	movs	r5, #0
 8013dde:	e70b      	b.n	8013bf8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8013de0:	2200      	movs	r2, #0
 8013de2:	4615      	mov	r5, r2
 8013de4:	e716      	b.n	8013c14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013de6:	4672      	mov	r2, lr
 8013de8:	4675      	mov	r5, lr
 8013dea:	e713      	b.n	8013c14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013dec:	2200      	movs	r2, #0
 8013dee:	e711      	b.n	8013c14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013df0:	4622      	mov	r2, r4
 8013df2:	e70f      	b.n	8013c14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08013df4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	b09f      	sub	sp, #124	; 0x7c
 8013dfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8013dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dfe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013e00:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8013e04:	901d      	str	r0, [sp, #116]	; 0x74
 8013e06:	931c      	str	r3, [sp, #112]	; 0x70
 8013e08:	6850      	ldr	r0, [r2, #4]
 8013e0a:	9119      	str	r1, [sp, #100]	; 0x64
 8013e0c:	6812      	ldr	r2, [r2, #0]
 8013e0e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013e10:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8013e14:	fb00 1303 	mla	r3, r0, r3, r1
 8013e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e1c:	18d3      	adds	r3, r2, r3
 8013e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8013e20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	9312      	str	r3, [sp, #72]	; 0x48
 8013e26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e28:	685e      	ldr	r6, [r3, #4]
 8013e2a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8013e2e:	3604      	adds	r6, #4
 8013e30:	930d      	str	r3, [sp, #52]	; 0x34
 8013e32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	dc03      	bgt.n	8013e40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013e38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f340 8378 	ble.w	8014530 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8013e40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013e46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013e4a:	1e48      	subs	r0, r1, #1
 8013e4c:	1e57      	subs	r7, r2, #1
 8013e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f340 818c 	ble.w	801416e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8013e56:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8013e58:	142b      	asrs	r3, r5, #16
 8013e5a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8013e5e:	d406      	bmi.n	8013e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e60:	4584      	cmp	ip, r0
 8013e62:	da04      	bge.n	8013e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	db02      	blt.n	8013e6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e68:	42bb      	cmp	r3, r7
 8013e6a:	f2c0 8181 	blt.w	8014170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8013e6e:	f11c 0c01 	adds.w	ip, ip, #1
 8013e72:	f100 816f 	bmi.w	8014154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e76:	4561      	cmp	r1, ip
 8013e78:	f2c0 816c 	blt.w	8014154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	f100 8169 	bmi.w	8014154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e82:	429a      	cmp	r2, r3
 8013e84:	f2c0 8166 	blt.w	8014154 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	f340 818c 	ble.w	80141ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8013e96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013e98:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8013e9c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8013ea0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013ea4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013ea6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8013eaa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013eac:	141b      	asrs	r3, r3, #16
 8013eae:	f100 81d0 	bmi.w	8014252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8013eb6:	4543      	cmp	r3, r8
 8013eb8:	f280 81cb 	bge.w	8014252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ebc:	f1bc 0f00 	cmp.w	ip, #0
 8013ec0:	f2c0 81c7 	blt.w	8014252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ec4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8013ec8:	45c4      	cmp	ip, r8
 8013eca:	f280 81c2 	bge.w	8014252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ece:	b200      	sxth	r0, r0
 8013ed0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013ed2:	fb0c 3300 	mla	r3, ip, r0, r3
 8013ed6:	eb04 0803 	add.w	r8, r4, r3
 8013eda:	5ce3      	ldrb	r3, [r4, r3]
 8013edc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013ee0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8013ee4:	2a00      	cmp	r2, #0
 8013ee6:	f000 81a9 	beq.w	801423c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8013eea:	f898 c001 	ldrb.w	ip, [r8, #1]
 8013eee:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8013ef2:	940e      	str	r4, [sp, #56]	; 0x38
 8013ef4:	0e24      	lsrs	r4, r4, #24
 8013ef6:	9415      	str	r4, [sp, #84]	; 0x54
 8013ef8:	b179      	cbz	r1, 8013f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013efa:	eb08 0c00 	add.w	ip, r8, r0
 8013efe:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013f02:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013f06:	900a      	str	r0, [sp, #40]	; 0x28
 8013f08:	0e00      	lsrs	r0, r0, #24
 8013f0a:	9013      	str	r0, [sp, #76]	; 0x4c
 8013f0c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8013f10:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013f14:	900f      	str	r0, [sp, #60]	; 0x3c
 8013f16:	0e00      	lsrs	r0, r0, #24
 8013f18:	9016      	str	r0, [sp, #88]	; 0x58
 8013f1a:	b292      	uxth	r2, r2
 8013f1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013f1e:	b289      	uxth	r1, r1
 8013f20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013f22:	fb02 f901 	mul.w	r9, r2, r1
 8013f26:	0112      	lsls	r2, r2, #4
 8013f28:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013f2c:	eba2 0809 	sub.w	r8, r2, r9
 8013f30:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8013f34:	b289      	uxth	r1, r1
 8013f36:	fa1f f888 	uxth.w	r8, r8
 8013f3a:	1a52      	subs	r2, r2, r1
 8013f3c:	fb08 f000 	mul.w	r0, r8, r0
 8013f40:	b292      	uxth	r2, r2
 8013f42:	fb02 000e 	mla	r0, r2, lr, r0
 8013f46:	fb01 0004 	mla	r0, r1, r4, r0
 8013f4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8013f4c:	fb09 0004 	mla	r0, r9, r4, r0
 8013f50:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013f54:	2800      	cmp	r0, #0
 8013f56:	f000 80f2 	beq.w	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8013f5a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f5e:	d01b      	beq.n	8013f98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8013f60:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8013f64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013f68:	fb0e fa0a 	mul.w	sl, lr, sl
 8013f6c:	fb0e fe03 	mul.w	lr, lr, r3
 8013f70:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013f74:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8013f78:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8013f7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013f80:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8013f84:	4453      	add	r3, sl
 8013f86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013f8a:	0a1b      	lsrs	r3, r3, #8
 8013f8c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013f90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013f94:	ea43 030c 	orr.w	r3, r3, ip
 8013f98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013f9a:	2cff      	cmp	r4, #255	; 0xff
 8013f9c:	d021      	beq.n	8013fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8013f9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013fa0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013fa4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013fa6:	fb04 fb0b 	mul.w	fp, r4, fp
 8013faa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013fac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013fb0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013fb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8013fb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013fba:	fb04 fa0a 	mul.w	sl, r4, sl
 8013fbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fc2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8013fc6:	44de      	add	lr, fp
 8013fc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8013fcc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8013fd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013fd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fd8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013fdc:	ea4e 040a 	orr.w	r4, lr, sl
 8013fe0:	940e      	str	r4, [sp, #56]	; 0x38
 8013fe2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013fe4:	2cff      	cmp	r4, #255	; 0xff
 8013fe6:	d021      	beq.n	801402c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8013fe8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013fea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013fee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013ff0:	fb04 fb0b 	mul.w	fp, r4, fp
 8013ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ff6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013ffa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013ffc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014000:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014004:	fb04 fa0a 	mul.w	sl, r4, sl
 8014008:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801400c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014010:	44de      	add	lr, fp
 8014012:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014016:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801401a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801401e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014022:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014026:	ea4e 040a 	orr.w	r4, lr, sl
 801402a:	940a      	str	r4, [sp, #40]	; 0x28
 801402c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801402e:	2cff      	cmp	r4, #255	; 0xff
 8014030:	d021      	beq.n	8014076 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8014032:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014034:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014038:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801403a:	fb04 fb0b 	mul.w	fp, r4, fp
 801403e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014040:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014044:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014046:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801404a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801404e:	fb04 fa0a 	mul.w	sl, r4, sl
 8014052:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014056:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801405a:	44de      	add	lr, fp
 801405c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014060:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014064:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014068:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801406c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014070:	ea4e 040a 	orr.w	r4, lr, sl
 8014074:	940f      	str	r4, [sp, #60]	; 0x3c
 8014076:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014078:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801407c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014080:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014086:	fb08 fc0c 	mul.w	ip, r8, ip
 801408a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801408e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014092:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014094:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014098:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801409c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801409e:	fb09 cc0e 	mla	ip, r9, lr, ip
 80140a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80140a6:	fb08 f80e 	mul.w	r8, r8, lr
 80140aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80140ae:	fb02 8303 	mla	r3, r2, r3, r8
 80140b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80140b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80140bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140be:	fb01 330a 	mla	r3, r1, sl, r3
 80140c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80140c6:	fb09 3901 	mla	r9, r9, r1, r3
 80140ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80140ce:	4343      	muls	r3, r0
 80140d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80140d4:	1c58      	adds	r0, r3, #1
 80140d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80140da:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80140de:	ea4c 0c09 	orr.w	ip, ip, r9
 80140e2:	783b      	ldrb	r3, [r7, #0]
 80140e4:	fa5f f28c 	uxtb.w	r2, ip
 80140e8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80140ec:	fb12 f201 	smulbb	r2, r2, r1
 80140f0:	b2c0      	uxtb	r0, r0
 80140f2:	fb03 2300 	mla	r3, r3, r0, r2
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	1c5a      	adds	r2, r3, #1
 80140fa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80140fe:	787a      	ldrb	r2, [r7, #1]
 8014100:	fb12 f200 	smulbb	r2, r2, r0
 8014104:	121b      	asrs	r3, r3, #8
 8014106:	703b      	strb	r3, [r7, #0]
 8014108:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801410c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014110:	fb03 2301 	mla	r3, r3, r1, r2
 8014114:	b29b      	uxth	r3, r3
 8014116:	1c5a      	adds	r2, r3, #1
 8014118:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801411c:	121b      	asrs	r3, r3, #8
 801411e:	707b      	strb	r3, [r7, #1]
 8014120:	78bb      	ldrb	r3, [r7, #2]
 8014122:	fb13 f000 	smulbb	r0, r3, r0
 8014126:	fb0c 0c01 	mla	ip, ip, r1, r0
 801412a:	fa1f fc8c 	uxth.w	ip, ip
 801412e:	f10c 0301 	add.w	r3, ip, #1
 8014132:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014136:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801413a:	f887 c002 	strb.w	ip, [r7, #2]
 801413e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014140:	3703      	adds	r7, #3
 8014142:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014144:	441a      	add	r2, r3
 8014146:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014148:	441d      	add	r5, r3
 801414a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801414c:	9229      	str	r2, [sp, #164]	; 0xa4
 801414e:	3b01      	subs	r3, #1
 8014150:	931a      	str	r3, [sp, #104]	; 0x68
 8014152:	e69c      	b.n	8013e8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8014154:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014156:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014158:	441c      	add	r4, r3
 801415a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801415c:	441d      	add	r5, r3
 801415e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014160:	9429      	str	r4, [sp, #164]	; 0xa4
 8014162:	3b01      	subs	r3, #1
 8014164:	9309      	str	r3, [sp, #36]	; 0x24
 8014166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014168:	3303      	adds	r3, #3
 801416a:	930c      	str	r3, [sp, #48]	; 0x30
 801416c:	e66f      	b.n	8013e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801416e:	d026      	beq.n	80141be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014172:	982b      	ldr	r0, [sp, #172]	; 0xac
 8014174:	3b01      	subs	r3, #1
 8014176:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014178:	fb00 4003 	mla	r0, r0, r3, r4
 801417c:	1400      	asrs	r0, r0, #16
 801417e:	f53f ae83 	bmi.w	8013e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014182:	3901      	subs	r1, #1
 8014184:	4288      	cmp	r0, r1
 8014186:	f6bf ae7f 	bge.w	8013e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801418a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801418c:	fb01 5303 	mla	r3, r1, r3, r5
 8014190:	141b      	asrs	r3, r3, #16
 8014192:	f53f ae79 	bmi.w	8013e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014196:	3a01      	subs	r2, #1
 8014198:	4293      	cmp	r3, r2
 801419a:	f6bf ae75 	bge.w	8013e88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801419e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80141a4:	f103 0e03 	add.w	lr, r3, #3
 80141a8:	f1bb 0f00 	cmp.w	fp, #0
 80141ac:	dc71      	bgt.n	8014292 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80141ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80141b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80141ba:	4423      	add	r3, r4
 80141bc:	930c      	str	r3, [sp, #48]	; 0x30
 80141be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	f340 81b5 	ble.w	8014530 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80141c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80141cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80141d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141d4:	eef0 6a62 	vmov.f32	s13, s5
 80141d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141e4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80141e8:	eef0 6a43 	vmov.f32	s13, s6
 80141ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141f0:	ee16 5a90 	vmov	r5, s13
 80141f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80141f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80141fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014200:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014204:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014208:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801420c:	ee12 2a90 	vmov	r2, s5
 8014210:	eef0 2a47 	vmov.f32	s5, s14
 8014214:	fb92 f3f3 	sdiv	r3, r2, r3
 8014218:	ee13 2a10 	vmov	r2, s6
 801421c:	932b      	str	r3, [sp, #172]	; 0xac
 801421e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014220:	eeb0 3a67 	vmov.f32	s6, s15
 8014224:	fb92 f3f3 	sdiv	r3, r2, r3
 8014228:	932c      	str	r3, [sp, #176]	; 0xb0
 801422a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801422c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801422e:	3b01      	subs	r3, #1
 8014230:	9319      	str	r3, [sp, #100]	; 0x64
 8014232:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014234:	bf08      	it	eq
 8014236:	4613      	moveq	r3, r2
 8014238:	9309      	str	r3, [sp, #36]	; 0x24
 801423a:	e5fa      	b.n	8013e32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801423c:	2900      	cmp	r1, #0
 801423e:	f43f ae6c 	beq.w	8013f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014242:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014246:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801424a:	900a      	str	r0, [sp, #40]	; 0x28
 801424c:	0e00      	lsrs	r0, r0, #24
 801424e:	9013      	str	r0, [sp, #76]	; 0x4c
 8014250:	e663      	b.n	8013f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014252:	f113 0801 	adds.w	r8, r3, #1
 8014256:	f53f af72 	bmi.w	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801425a:	4540      	cmp	r0, r8
 801425c:	f6ff af6f 	blt.w	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014260:	f11c 0801 	adds.w	r8, ip, #1
 8014264:	f53f af6b 	bmi.w	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014268:	45c6      	cmp	lr, r8
 801426a:	f6ff af68 	blt.w	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801426e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014270:	b200      	sxth	r0, r0
 8014272:	9302      	str	r3, [sp, #8]
 8014274:	fa0f f38e 	sxth.w	r3, lr
 8014278:	9000      	str	r0, [sp, #0]
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	4633      	mov	r3, r6
 801427e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014280:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8014284:	e9cd c203 	strd	ip, r2, [sp, #12]
 8014288:	4639      	mov	r1, r7
 801428a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801428c:	f7ff fc74 	bl	8013b78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8014290:	e755      	b.n	801413e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014292:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014294:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014298:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801429a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801429e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80142a0:	1427      	asrs	r7, r4, #16
 80142a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80142a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80142a8:	142b      	asrs	r3, r5, #16
 80142aa:	fb01 7303 	mla	r3, r1, r3, r7
 80142ae:	18e7      	adds	r7, r4, r3
 80142b0:	5ce3      	ldrb	r3, [r4, r3]
 80142b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80142b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80142ba:	2a00      	cmp	r2, #0
 80142bc:	f000 812e 	beq.w	801451c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80142c0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80142c4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80142c8:	9410      	str	r4, [sp, #64]	; 0x40
 80142ca:	0e24      	lsrs	r4, r4, #24
 80142cc:	9417      	str	r4, [sp, #92]	; 0x5c
 80142ce:	b170      	cbz	r0, 80142ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80142d0:	eb07 0801 	add.w	r8, r7, r1
 80142d4:	5c79      	ldrb	r1, [r7, r1]
 80142d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142da:	910b      	str	r1, [sp, #44]	; 0x2c
 80142dc:	0e09      	lsrs	r1, r1, #24
 80142de:	9114      	str	r1, [sp, #80]	; 0x50
 80142e0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80142e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142e8:	9111      	str	r1, [sp, #68]	; 0x44
 80142ea:	0e09      	lsrs	r1, r1, #24
 80142ec:	9118      	str	r1, [sp, #96]	; 0x60
 80142ee:	b292      	uxth	r2, r2
 80142f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80142f2:	b280      	uxth	r0, r0
 80142f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80142f6:	fb02 f900 	mul.w	r9, r2, r0
 80142fa:	0112      	lsls	r2, r2, #4
 80142fc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8014300:	eba2 0809 	sub.w	r8, r2, r9
 8014304:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8014308:	b280      	uxth	r0, r0
 801430a:	fa1f f888 	uxth.w	r8, r8
 801430e:	1a12      	subs	r2, r2, r0
 8014310:	fb08 f101 	mul.w	r1, r8, r1
 8014314:	b292      	uxth	r2, r2
 8014316:	fb02 110c 	mla	r1, r2, ip, r1
 801431a:	fb00 1104 	mla	r1, r0, r4, r1
 801431e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014320:	fb09 1104 	mla	r1, r9, r4, r1
 8014324:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014328:	2900      	cmp	r1, #0
 801432a:	f000 80ec 	beq.w	8014506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801432e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014332:	d019      	beq.n	8014368 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8014334:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801433c:	fb0c fa0a 	mul.w	sl, ip, sl
 8014340:	fb0c fc03 	mul.w	ip, ip, r3
 8014344:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014348:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801434c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014350:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014354:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014358:	4453      	add	r3, sl
 801435a:	0a3f      	lsrs	r7, r7, #8
 801435c:	0a1b      	lsrs	r3, r3, #8
 801435e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014366:	433b      	orrs	r3, r7
 8014368:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801436a:	2cff      	cmp	r4, #255	; 0xff
 801436c:	d020      	beq.n	80143b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801436e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014370:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014374:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014376:	4367      	muls	r7, r4
 8014378:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801437a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801437e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014382:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014384:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014388:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801438c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014390:	44bc      	add	ip, r7
 8014392:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801439a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801439e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80143a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80143aa:	ea4c 040a 	orr.w	r4, ip, sl
 80143ae:	9410      	str	r4, [sp, #64]	; 0x40
 80143b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143b2:	2cff      	cmp	r4, #255	; 0xff
 80143b4:	d020      	beq.n	80143f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80143b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80143b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80143bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143be:	4367      	muls	r7, r4
 80143c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80143c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80143c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80143ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80143d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80143d8:	44bc      	add	ip, r7
 80143da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80143de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80143e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80143e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80143ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80143f2:	ea4c 040a 	orr.w	r4, ip, sl
 80143f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80143f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80143fa:	2cff      	cmp	r4, #255	; 0xff
 80143fc:	d020      	beq.n	8014440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80143fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014400:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014404:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014406:	4367      	muls	r7, r4
 8014408:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801440a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801440e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014412:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014414:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014418:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801441c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014420:	44bc      	add	ip, r7
 8014422:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014426:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801442a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801442e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014432:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014436:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801443a:	ea4c 040a 	orr.w	r4, ip, sl
 801443e:	9411      	str	r4, [sp, #68]	; 0x44
 8014440:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014442:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801444a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801444e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014450:	fb08 f707 	mul.w	r7, r8, r7
 8014454:	fb02 770c 	mla	r7, r2, ip, r7
 8014458:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801445c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801445e:	fb00 770c 	mla	r7, r0, ip, r7
 8014462:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014466:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014468:	fb09 770c 	mla	r7, r9, ip, r7
 801446c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014470:	fb08 f80c 	mul.w	r8, r8, ip
 8014474:	0a3f      	lsrs	r7, r7, #8
 8014476:	fb02 8303 	mla	r3, r2, r3, r8
 801447a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801447c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014480:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014486:	fb00 330a 	mla	r3, r0, sl, r3
 801448a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801448e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014490:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014496:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801449a:	434b      	muls	r3, r1
 801449c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80144a0:	1c59      	adds	r1, r3, #1
 80144a2:	ea47 070c 	orr.w	r7, r7, ip
 80144a6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80144aa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80144ae:	b2fa      	uxtb	r2, r7
 80144b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80144b4:	fb12 f200 	smulbb	r2, r2, r0
 80144b8:	b2c9      	uxtb	r1, r1
 80144ba:	fb03 2301 	mla	r3, r3, r1, r2
 80144be:	b29b      	uxth	r3, r3
 80144c0:	1c5a      	adds	r2, r3, #1
 80144c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144c6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80144ca:	fb12 f201 	smulbb	r2, r2, r1
 80144ce:	121b      	asrs	r3, r3, #8
 80144d0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80144d4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80144d8:	0c3f      	lsrs	r7, r7, #16
 80144da:	fb03 2300 	mla	r3, r3, r0, r2
 80144de:	b29b      	uxth	r3, r3
 80144e0:	1c5a      	adds	r2, r3, #1
 80144e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144e6:	121b      	asrs	r3, r3, #8
 80144e8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80144ec:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80144f0:	fb13 f101 	smulbb	r1, r3, r1
 80144f4:	fb07 1700 	mla	r7, r7, r0, r1
 80144f8:	b2bf      	uxth	r7, r7
 80144fa:	1c7b      	adds	r3, r7, #1
 80144fc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8014500:	123f      	asrs	r7, r7, #8
 8014502:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8014506:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014508:	f10e 0e03 	add.w	lr, lr, #3
 801450c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801450e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014512:	441a      	add	r2, r3
 8014514:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014516:	9229      	str	r2, [sp, #164]	; 0xa4
 8014518:	441d      	add	r5, r3
 801451a:	e645      	b.n	80141a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801451c:	2800      	cmp	r0, #0
 801451e:	f43f aee6 	beq.w	80142ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014522:	5c79      	ldrb	r1, [r7, r1]
 8014524:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014528:	910b      	str	r1, [sp, #44]	; 0x2c
 801452a:	0e09      	lsrs	r1, r1, #24
 801452c:	9114      	str	r1, [sp, #80]	; 0x50
 801452e:	e6de      	b.n	80142ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014530:	b01f      	add	sp, #124	; 0x7c
 8014532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014536 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8014536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801453e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8014542:	2d00      	cmp	r5, #0
 8014544:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8014548:	fb05 700e 	mla	r0, r5, lr, r7
 801454c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8014550:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8014554:	eb02 0800 	add.w	r8, r2, r0
 8014558:	f2c0 8105 	blt.w	8014766 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801455c:	45a9      	cmp	r9, r5
 801455e:	f340 8102 	ble.w	8014766 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8014562:	2f00      	cmp	r7, #0
 8014564:	f2c0 80fd 	blt.w	8014762 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8014568:	45be      	cmp	lr, r7
 801456a:	f340 80fa 	ble.w	8014762 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801456e:	5c12      	ldrb	r2, [r2, r0]
 8014570:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014574:	1c7a      	adds	r2, r7, #1
 8014576:	f100 80f9 	bmi.w	801476c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801457a:	4596      	cmp	lr, r2
 801457c:	f340 80f6 	ble.w	801476c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8014580:	2c00      	cmp	r4, #0
 8014582:	f000 80f5 	beq.w	8014770 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8014586:	f898 2001 	ldrb.w	r2, [r8, #1]
 801458a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801458e:	3501      	adds	r5, #1
 8014590:	f100 80f2 	bmi.w	8014778 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8014594:	45a9      	cmp	r9, r5
 8014596:	f340 80ef 	ble.w	8014778 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801459a:	f1bc 0f00 	cmp.w	ip, #0
 801459e:	f000 80ee 	beq.w	801477e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80145a2:	2f00      	cmp	r7, #0
 80145a4:	f2c0 80e6 	blt.w	8014774 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80145a8:	45be      	cmp	lr, r7
 80145aa:	f340 80e3 	ble.w	8014774 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80145ae:	f818 200e 	ldrb.w	r2, [r8, lr]
 80145b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80145b6:	3701      	adds	r7, #1
 80145b8:	f100 80e4 	bmi.w	8014784 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80145bc:	45be      	cmp	lr, r7
 80145be:	f340 80e1 	ble.w	8014784 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80145c2:	2c00      	cmp	r4, #0
 80145c4:	f000 80e0 	beq.w	8014788 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80145c8:	44c6      	add	lr, r8
 80145ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80145ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80145d2:	b2a3      	uxth	r3, r4
 80145d4:	fa1f fc8c 	uxth.w	ip, ip
 80145d8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80145dc:	fb0c fe03 	mul.w	lr, ip, r3
 80145e0:	011b      	lsls	r3, r3, #4
 80145e2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80145e6:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80145ea:	eba3 070e 	sub.w	r7, r3, lr
 80145ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80145f2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80145f6:	fa1f f48c 	uxth.w	r4, ip
 80145fa:	b2bf      	uxth	r7, r7
 80145fc:	1b1b      	subs	r3, r3, r4
 80145fe:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8014602:	fb07 fc0a 	mul.w	ip, r7, sl
 8014606:	b29b      	uxth	r3, r3
 8014608:	fb03 cc0b 	mla	ip, r3, fp, ip
 801460c:	9300      	str	r3, [sp, #0]
 801460e:	fb04 cc09 	mla	ip, r4, r9, ip
 8014612:	fb0e cc08 	mla	ip, lr, r8, ip
 8014616:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801461a:	9301      	str	r3, [sp, #4]
 801461c:	2b00      	cmp	r3, #0
 801461e:	f000 809d 	beq.w	801475c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8014622:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014626:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801462a:	fb0b fc0c 	mul.w	ip, fp, ip
 801462e:	fb0b f606 	mul.w	r6, fp, r6
 8014632:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014636:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801463a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801463e:	44dc      	add	ip, fp
 8014640:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8014644:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014648:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801464c:	fb0a fb0b 	mul.w	fp, sl, fp
 8014650:	fb0a fa00 	mul.w	sl, sl, r0
 8014654:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014658:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801465c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8014660:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014664:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014668:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801466c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8014670:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014674:	0a36      	lsrs	r6, r6, #8
 8014676:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801467a:	44dc      	add	ip, fp
 801467c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014680:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014684:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014688:	fb09 fb0b 	mul.w	fp, r9, fp
 801468c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014690:	fb09 f905 	mul.w	r9, r9, r5
 8014694:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8014698:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801469c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80146a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80146a4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80146a8:	fb0c fc07 	mul.w	ip, ip, r7
 80146ac:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80146b0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80146b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80146b8:	4458      	add	r0, fp
 80146ba:	fb08 f505 	mul.w	r5, r8, r5
 80146be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80146c2:	fb08 f802 	mul.w	r8, r8, r2
 80146c6:	0a00      	lsrs	r0, r0, #8
 80146c8:	0a2a      	lsrs	r2, r5, #8
 80146ca:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80146ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80146d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80146d6:	4415      	add	r5, r2
 80146d8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80146dc:	0a2d      	lsrs	r5, r5, #8
 80146de:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80146e2:	9a00      	ldr	r2, [sp, #0]
 80146e4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80146e8:	fb03 cc02 	mla	ip, r3, r2, ip
 80146ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80146f0:	9b01      	ldr	r3, [sp, #4]
 80146f2:	fb05 c50e 	mla	r5, r5, lr, ip
 80146f6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80146fa:	43db      	mvns	r3, r3
 80146fc:	fb00 5004 	mla	r0, r0, r4, r5
 8014700:	b2db      	uxtb	r3, r3
 8014702:	0a00      	lsrs	r0, r0, #8
 8014704:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8014708:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801470c:	4378      	muls	r0, r7
 801470e:	fb02 0006 	mla	r0, r2, r6, r0
 8014712:	780a      	ldrb	r2, [r1, #0]
 8014714:	fb0e 0e08 	mla	lr, lr, r8, r0
 8014718:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801471c:	fb04 e000 	mla	r0, r4, r0, lr
 8014720:	fb02 f403 	mul.w	r4, r2, r3
 8014724:	0a00      	lsrs	r0, r0, #8
 8014726:	1c62      	adds	r2, r4, #1
 8014728:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801472c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8014730:	4328      	orrs	r0, r5
 8014732:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014736:	700a      	strb	r2, [r1, #0]
 8014738:	784a      	ldrb	r2, [r1, #1]
 801473a:	435a      	muls	r2, r3
 801473c:	1c54      	adds	r4, r2, #1
 801473e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8014742:	0a02      	lsrs	r2, r0, #8
 8014744:	0c00      	lsrs	r0, r0, #16
 8014746:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801474a:	704a      	strb	r2, [r1, #1]
 801474c:	788a      	ldrb	r2, [r1, #2]
 801474e:	4353      	muls	r3, r2
 8014750:	1c5a      	adds	r2, r3, #1
 8014752:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014756:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801475a:	7088      	strb	r0, [r1, #2]
 801475c:	b003      	add	sp, #12
 801475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014762:	2600      	movs	r6, #0
 8014764:	e706      	b.n	8014574 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8014766:	2000      	movs	r0, #0
 8014768:	4606      	mov	r6, r0
 801476a:	e710      	b.n	801458e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801476c:	2000      	movs	r0, #0
 801476e:	e70e      	b.n	801458e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014770:	4620      	mov	r0, r4
 8014772:	e70c      	b.n	801458e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014774:	2500      	movs	r5, #0
 8014776:	e71e      	b.n	80145b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8014778:	2200      	movs	r2, #0
 801477a:	4615      	mov	r5, r2
 801477c:	e729      	b.n	80145d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801477e:	4662      	mov	r2, ip
 8014780:	4665      	mov	r5, ip
 8014782:	e726      	b.n	80145d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014784:	2200      	movs	r2, #0
 8014786:	e724      	b.n	80145d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014788:	4622      	mov	r2, r4
 801478a:	e722      	b.n	80145d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801478c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014790:	b09b      	sub	sp, #108	; 0x6c
 8014792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014796:	9218      	str	r2, [sp, #96]	; 0x60
 8014798:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801479a:	9019      	str	r0, [sp, #100]	; 0x64
 801479c:	9116      	str	r1, [sp, #88]	; 0x58
 801479e:	6850      	ldr	r0, [r2, #4]
 80147a0:	9307      	str	r3, [sp, #28]
 80147a2:	6812      	ldr	r2, [r2, #0]
 80147a4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80147a6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80147aa:	fb00 1303 	mla	r3, r0, r3, r1
 80147ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80147b2:	18d3      	adds	r3, r2, r3
 80147b4:	930a      	str	r3, [sp, #40]	; 0x28
 80147b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80147bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147be:	685e      	ldr	r6, [r3, #4]
 80147c0:	3604      	adds	r6, #4
 80147c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	dc03      	bgt.n	80147d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80147c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f340 834f 	ble.w	8014e6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80147d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80147d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80147da:	1e48      	subs	r0, r1, #1
 80147dc:	1e57      	subs	r7, r2, #1
 80147de:	9b07      	ldr	r3, [sp, #28]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	f340 8178 	ble.w	8014ad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80147e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80147e8:	142b      	asrs	r3, r5, #16
 80147ea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80147ee:	d406      	bmi.n	80147fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147f0:	4584      	cmp	ip, r0
 80147f2:	da04      	bge.n	80147fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	db02      	blt.n	80147fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80147f8:	42bb      	cmp	r3, r7
 80147fa:	f2c0 816d 	blt.w	8014ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80147fe:	f11c 0c01 	adds.w	ip, ip, #1
 8014802:	f100 815b 	bmi.w	8014abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014806:	4561      	cmp	r1, ip
 8014808:	f2c0 8158 	blt.w	8014abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801480c:	3301      	adds	r3, #1
 801480e:	f100 8155 	bmi.w	8014abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014812:	429a      	cmp	r2, r3
 8014814:	f2c0 8152 	blt.w	8014abc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014818:	9b07      	ldr	r3, [sp, #28]
 801481a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801481c:	9317      	str	r3, [sp, #92]	; 0x5c
 801481e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014820:	2b00      	cmp	r3, #0
 8014822:	f340 8178 	ble.w	8014b16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8014826:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014828:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801482c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014830:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014834:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014836:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801483a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801483c:	141b      	asrs	r3, r3, #16
 801483e:	f100 81ba 	bmi.w	8014bb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014842:	f101 38ff 	add.w	r8, r1, #4294967295
 8014846:	4543      	cmp	r3, r8
 8014848:	f280 81b5 	bge.w	8014bb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801484c:	f1bc 0f00 	cmp.w	ip, #0
 8014850:	f2c0 81b1 	blt.w	8014bb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014854:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014858:	45c4      	cmp	ip, r8
 801485a:	f280 81ac 	bge.w	8014bb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801485e:	b209      	sxth	r1, r1
 8014860:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014862:	fb0c 3301 	mla	r3, ip, r1, r3
 8014866:	eb04 0803 	add.w	r8, r4, r3
 801486a:	5ce3      	ldrb	r3, [r4, r3]
 801486c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014870:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8014874:	2a00      	cmp	r2, #0
 8014876:	f000 8193 	beq.w	8014ba0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801487a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801487e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8014882:	940b      	str	r4, [sp, #44]	; 0x2c
 8014884:	0e24      	lsrs	r4, r4, #24
 8014886:	9412      	str	r4, [sp, #72]	; 0x48
 8014888:	b178      	cbz	r0, 80148aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801488a:	eb08 0c01 	add.w	ip, r8, r1
 801488e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8014892:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014896:	9108      	str	r1, [sp, #32]
 8014898:	0e09      	lsrs	r1, r1, #24
 801489a:	9110      	str	r1, [sp, #64]	; 0x40
 801489c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80148a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80148a4:	910c      	str	r1, [sp, #48]	; 0x30
 80148a6:	0e09      	lsrs	r1, r1, #24
 80148a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80148aa:	b292      	uxth	r2, r2
 80148ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80148ae:	b280      	uxth	r0, r0
 80148b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80148b2:	fb02 f900 	mul.w	r9, r2, r0
 80148b6:	0112      	lsls	r2, r2, #4
 80148b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80148bc:	eba2 0809 	sub.w	r8, r2, r9
 80148c0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80148c4:	b280      	uxth	r0, r0
 80148c6:	fa1f f888 	uxth.w	r8, r8
 80148ca:	1a12      	subs	r2, r2, r0
 80148cc:	fb08 f101 	mul.w	r1, r8, r1
 80148d0:	b292      	uxth	r2, r2
 80148d2:	fb02 110e 	mla	r1, r2, lr, r1
 80148d6:	fb00 1104 	mla	r1, r0, r4, r1
 80148da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80148dc:	fb09 1104 	mla	r1, r9, r4, r1
 80148e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80148e4:	2900      	cmp	r1, #0
 80148e6:	f000 80de 	beq.w	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80148ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80148ee:	d01b      	beq.n	8014928 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80148f0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80148f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80148f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80148fc:	fb0e fe03 	mul.w	lr, lr, r3
 8014900:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014904:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014908:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801490c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014910:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014914:	4453      	add	r3, sl
 8014916:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801491a:	0a1b      	lsrs	r3, r3, #8
 801491c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014920:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014924:	ea43 030c 	orr.w	r3, r3, ip
 8014928:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801492a:	2cff      	cmp	r4, #255	; 0xff
 801492c:	d021      	beq.n	8014972 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801492e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014930:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014936:	fb04 fb0b 	mul.w	fp, r4, fp
 801493a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801493c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014940:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014942:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014946:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801494a:	fb04 fa0a 	mul.w	sl, r4, sl
 801494e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014952:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014956:	44de      	add	lr, fp
 8014958:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801495c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014960:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014964:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014968:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801496c:	ea4e 040a 	orr.w	r4, lr, sl
 8014970:	940b      	str	r4, [sp, #44]	; 0x2c
 8014972:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014974:	2cff      	cmp	r4, #255	; 0xff
 8014976:	d021      	beq.n	80149bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8014978:	9c08      	ldr	r4, [sp, #32]
 801497a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801497e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014980:	fb04 fb0b 	mul.w	fp, r4, fp
 8014984:	9c08      	ldr	r4, [sp, #32]
 8014986:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801498a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801498c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014990:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014994:	fb04 fa0a 	mul.w	sl, r4, sl
 8014998:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801499c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80149a0:	44de      	add	lr, fp
 80149a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80149a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80149aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80149ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80149b6:	ea4e 040a 	orr.w	r4, lr, sl
 80149ba:	9408      	str	r4, [sp, #32]
 80149bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149be:	2cff      	cmp	r4, #255	; 0xff
 80149c0:	d021      	beq.n	8014a06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80149c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80149c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80149ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80149d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80149da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80149de:	fb04 fa0a 	mul.w	sl, r4, sl
 80149e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80149ea:	44de      	add	lr, fp
 80149ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80149f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80149f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80149f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014a00:	ea4e 040a 	orr.w	r4, lr, sl
 8014a04:	940c      	str	r4, [sp, #48]	; 0x30
 8014a06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014a08:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8014a0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014a10:	43c9      	mvns	r1, r1
 8014a12:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014a16:	9c08      	ldr	r4, [sp, #32]
 8014a18:	b2c9      	uxtb	r1, r1
 8014a1a:	fb08 fc0c 	mul.w	ip, r8, ip
 8014a1e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8014a22:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014a28:	fb00 cc0e 	mla	ip, r0, lr, ip
 8014a2c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014a32:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014a36:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014a3a:	fb08 f80e 	mul.w	r8, r8, lr
 8014a3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014a42:	fb02 8303 	mla	r3, r2, r3, r8
 8014a46:	9a08      	ldr	r2, [sp, #32]
 8014a48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a4c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a52:	fb00 330a 	mla	r3, r0, sl, r3
 8014a56:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8014a5a:	fb09 3900 	mla	r9, r9, r0, r3
 8014a5e:	783b      	ldrb	r3, [r7, #0]
 8014a60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014a64:	fb03 f201 	mul.w	r2, r3, r1
 8014a68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014a6c:	1c53      	adds	r3, r2, #1
 8014a6e:	ea4c 0c09 	orr.w	ip, ip, r9
 8014a72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a76:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8014a7a:	703b      	strb	r3, [r7, #0]
 8014a7c:	787b      	ldrb	r3, [r7, #1]
 8014a7e:	434b      	muls	r3, r1
 8014a80:	1c5a      	adds	r2, r3, #1
 8014a82:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8014a86:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8014a8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014a8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a92:	707b      	strb	r3, [r7, #1]
 8014a94:	78bb      	ldrb	r3, [r7, #2]
 8014a96:	4359      	muls	r1, r3
 8014a98:	1c4b      	adds	r3, r1, #1
 8014a9a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8014a9e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8014aa2:	f887 c002 	strb.w	ip, [r7, #2]
 8014aa6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014aa8:	3703      	adds	r7, #3
 8014aaa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014aac:	441a      	add	r2, r3
 8014aae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014ab0:	441d      	add	r5, r3
 8014ab2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ab4:	9225      	str	r2, [sp, #148]	; 0x94
 8014ab6:	3b01      	subs	r3, #1
 8014ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 8014aba:	e6b0      	b.n	801481e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014abc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014abe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014ac0:	441c      	add	r4, r3
 8014ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014ac4:	441d      	add	r5, r3
 8014ac6:	9b07      	ldr	r3, [sp, #28]
 8014ac8:	9425      	str	r4, [sp, #148]	; 0x94
 8014aca:	3b01      	subs	r3, #1
 8014acc:	9307      	str	r3, [sp, #28]
 8014ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ad0:	3303      	adds	r3, #3
 8014ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ad4:	e683      	b.n	80147de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014ad6:	d026      	beq.n	8014b26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8014ad8:	9b07      	ldr	r3, [sp, #28]
 8014ada:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014adc:	3b01      	subs	r3, #1
 8014ade:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014ae0:	fb00 4003 	mla	r0, r0, r3, r4
 8014ae4:	1400      	asrs	r0, r0, #16
 8014ae6:	f53f ae97 	bmi.w	8014818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014aea:	3901      	subs	r1, #1
 8014aec:	4288      	cmp	r0, r1
 8014aee:	f6bf ae93 	bge.w	8014818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014af2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014af4:	fb01 5303 	mla	r3, r1, r3, r5
 8014af8:	141b      	asrs	r3, r3, #16
 8014afa:	f53f ae8d 	bmi.w	8014818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014afe:	3a01      	subs	r2, #1
 8014b00:	4293      	cmp	r3, r2
 8014b02:	f6bf ae89 	bge.w	8014818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b08:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014b0c:	f103 0e03 	add.w	lr, r3, #3
 8014b10:	f1bb 0f00 	cmp.w	fp, #0
 8014b14:	dc6d      	bgt.n	8014bf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8014b16:	9b07      	ldr	r3, [sp, #28]
 8014b18:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014b22:	4423      	add	r3, r4
 8014b24:	930a      	str	r3, [sp, #40]	; 0x28
 8014b26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f340 81a0 	ble.w	8014e6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8014b2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b38:	eeb0 6a62 	vmov.f32	s12, s5
 8014b3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b48:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8014b4c:	eeb0 6a43 	vmov.f32	s12, s6
 8014b50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b54:	ee16 5a10 	vmov	r5, s12
 8014b58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b70:	ee12 2a90 	vmov	r2, s5
 8014b74:	eef0 2a47 	vmov.f32	s5, s14
 8014b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b7c:	ee13 2a10 	vmov	r2, s6
 8014b80:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b84:	eeb0 3a67 	vmov.f32	s6, s15
 8014b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b92:	3b01      	subs	r3, #1
 8014b94:	9316      	str	r3, [sp, #88]	; 0x58
 8014b96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b98:	bf08      	it	eq
 8014b9a:	4613      	moveq	r3, r2
 8014b9c:	9307      	str	r3, [sp, #28]
 8014b9e:	e610      	b.n	80147c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014ba0:	2800      	cmp	r0, #0
 8014ba2:	f43f ae82 	beq.w	80148aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014ba6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8014baa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014bae:	9108      	str	r1, [sp, #32]
 8014bb0:	0e09      	lsrs	r1, r1, #24
 8014bb2:	9110      	str	r1, [sp, #64]	; 0x40
 8014bb4:	e679      	b.n	80148aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014bb6:	f113 0801 	adds.w	r8, r3, #1
 8014bba:	f53f af74 	bmi.w	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bbe:	4541      	cmp	r1, r8
 8014bc0:	f6ff af71 	blt.w	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bc4:	f11c 0801 	adds.w	r8, ip, #1
 8014bc8:	f53f af6d 	bmi.w	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bcc:	45c6      	cmp	lr, r8
 8014bce:	f6ff af6a 	blt.w	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bd2:	b209      	sxth	r1, r1
 8014bd4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8014bd8:	fa0f f38e 	sxth.w	r3, lr
 8014bdc:	9100      	str	r1, [sp, #0]
 8014bde:	4639      	mov	r1, r7
 8014be0:	9301      	str	r3, [sp, #4]
 8014be2:	4633      	mov	r3, r6
 8014be4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8014be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bea:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014bec:	f7ff fca3 	bl	8014536 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8014bf0:	e759      	b.n	8014aa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014bf4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014bf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014bfa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014bfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014c00:	1427      	asrs	r7, r4, #16
 8014c02:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014c04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014c08:	142b      	asrs	r3, r5, #16
 8014c0a:	fb01 7303 	mla	r3, r1, r3, r7
 8014c0e:	18e7      	adds	r7, r4, r3
 8014c10:	5ce3      	ldrb	r3, [r4, r3]
 8014c12:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014c16:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8014c1a:	2a00      	cmp	r2, #0
 8014c1c:	f000 811d 	beq.w	8014e5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8014c20:	f897 8001 	ldrb.w	r8, [r7, #1]
 8014c24:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8014c28:	940d      	str	r4, [sp, #52]	; 0x34
 8014c2a:	0e24      	lsrs	r4, r4, #24
 8014c2c:	9414      	str	r4, [sp, #80]	; 0x50
 8014c2e:	b170      	cbz	r0, 8014c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014c30:	eb07 0801 	add.w	r8, r7, r1
 8014c34:	5c79      	ldrb	r1, [r7, r1]
 8014c36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8014c3c:	0e09      	lsrs	r1, r1, #24
 8014c3e:	9111      	str	r1, [sp, #68]	; 0x44
 8014c40:	f898 1001 	ldrb.w	r1, [r8, #1]
 8014c44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c48:	910e      	str	r1, [sp, #56]	; 0x38
 8014c4a:	0e09      	lsrs	r1, r1, #24
 8014c4c:	9115      	str	r1, [sp, #84]	; 0x54
 8014c4e:	b292      	uxth	r2, r2
 8014c50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014c52:	b280      	uxth	r0, r0
 8014c54:	fb02 f900 	mul.w	r9, r2, r0
 8014c58:	0112      	lsls	r2, r2, #4
 8014c5a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8014c5e:	eba2 0809 	sub.w	r8, r2, r9
 8014c62:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8014c66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c68:	b280      	uxth	r0, r0
 8014c6a:	fa1f f888 	uxth.w	r8, r8
 8014c6e:	1a09      	subs	r1, r1, r0
 8014c70:	fb08 f202 	mul.w	r2, r8, r2
 8014c74:	b289      	uxth	r1, r1
 8014c76:	fb01 220c 	mla	r2, r1, ip, r2
 8014c7a:	fb00 2204 	mla	r2, r0, r4, r2
 8014c7e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014c80:	fb09 2204 	mla	r2, r9, r4, r2
 8014c84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	f000 80db 	beq.w	8014e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8014c8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014c92:	d019      	beq.n	8014cc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8014c94:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014c98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014c9c:	fb0c fa0a 	mul.w	sl, ip, sl
 8014ca0:	fb0c fc03 	mul.w	ip, ip, r3
 8014ca4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014ca8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014cac:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014cb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014cb4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014cb8:	4453      	add	r3, sl
 8014cba:	0a3f      	lsrs	r7, r7, #8
 8014cbc:	0a1b      	lsrs	r3, r3, #8
 8014cbe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014cc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014cc6:	433b      	orrs	r3, r7
 8014cc8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cca:	2cff      	cmp	r4, #255	; 0xff
 8014ccc:	d020      	beq.n	8014d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8014cce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014cd0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014cd4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cd6:	4367      	muls	r7, r4
 8014cd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014cda:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014cde:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014ce2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014ce4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014ce8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014cec:	fb04 fa0a 	mul.w	sl, r4, sl
 8014cf0:	44bc      	add	ip, r7
 8014cf2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014cf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014cfa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014cfe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d0a:	ea4c 040a 	orr.w	r4, ip, sl
 8014d0e:	940d      	str	r4, [sp, #52]	; 0x34
 8014d10:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d12:	2cff      	cmp	r4, #255	; 0xff
 8014d14:	d020      	beq.n	8014d58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8014d16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d18:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d1e:	4367      	muls	r7, r4
 8014d20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d26:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d2c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d34:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d38:	44bc      	add	ip, r7
 8014d3a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d42:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d52:	ea4c 040a 	orr.w	r4, ip, sl
 8014d56:	9409      	str	r4, [sp, #36]	; 0x24
 8014d58:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d5a:	2cff      	cmp	r4, #255	; 0xff
 8014d5c:	d020      	beq.n	8014da0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8014d5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d60:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d64:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d66:	4367      	muls	r7, r4
 8014d68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d6a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d72:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d74:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d80:	44bc      	add	ip, r7
 8014d82:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d9a:	ea4c 040a 	orr.w	r4, ip, sl
 8014d9e:	940e      	str	r4, [sp, #56]	; 0x38
 8014da0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014da2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014da6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014daa:	43d2      	mvns	r2, r2
 8014dac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014db0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014db2:	b2d2      	uxtb	r2, r2
 8014db4:	fb08 f707 	mul.w	r7, r8, r7
 8014db8:	fb01 770c 	mla	r7, r1, ip, r7
 8014dbc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014dc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014dc2:	fb00 770c 	mla	r7, r0, ip, r7
 8014dc6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014dca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014dcc:	fb09 770c 	mla	r7, r9, ip, r7
 8014dd0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014dd4:	fb08 f80c 	mul.w	r8, r8, ip
 8014dd8:	0a3f      	lsrs	r7, r7, #8
 8014dda:	fb01 8303 	mla	r3, r1, r3, r8
 8014dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014de0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014de4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8014de8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014dea:	fb00 330a 	mla	r3, r0, sl, r3
 8014dee:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8014df2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014df6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8014dfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014dfe:	fb03 f102 	mul.w	r1, r3, r2
 8014e02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014e06:	1c4b      	adds	r3, r1, #1
 8014e08:	ea47 070c 	orr.w	r7, r7, ip
 8014e0c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e10:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8014e14:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8014e18:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8014e1c:	4353      	muls	r3, r2
 8014e1e:	1c59      	adds	r1, r3, #1
 8014e20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8014e24:	0a3b      	lsrs	r3, r7, #8
 8014e26:	0c3f      	lsrs	r7, r7, #16
 8014e28:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e2c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8014e30:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8014e34:	435a      	muls	r2, r3
 8014e36:	1c53      	adds	r3, r2, #1
 8014e38:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8014e3c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8014e40:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8014e44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014e46:	f10e 0e03 	add.w	lr, lr, #3
 8014e4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e50:	441a      	add	r2, r3
 8014e52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014e54:	9225      	str	r2, [sp, #148]	; 0x94
 8014e56:	441d      	add	r5, r3
 8014e58:	e65a      	b.n	8014b10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	f43f aef7 	beq.w	8014c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e60:	5c79      	ldrb	r1, [r7, r1]
 8014e62:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014e66:	9109      	str	r1, [sp, #36]	; 0x24
 8014e68:	0e09      	lsrs	r1, r1, #24
 8014e6a:	9111      	str	r1, [sp, #68]	; 0x44
 8014e6c:	e6ef      	b.n	8014c4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e6e:	b01b      	add	sp, #108	; 0x6c
 8014e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8014e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e78:	b08d      	sub	sp, #52	; 0x34
 8014e7a:	468b      	mov	fp, r1
 8014e7c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8014e80:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8014e84:	fb0c 5703 	mla	r7, ip, r3, r5
 8014e88:	f1bc 0f00 	cmp.w	ip, #0
 8014e8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e8e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014e92:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8014e96:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8014e9a:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8014e9e:	eb02 0607 	add.w	r6, r2, r7
 8014ea2:	f89b 4000 	ldrb.w	r4, [fp]
 8014ea6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8014eaa:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8014eae:	f2c0 80c1 	blt.w	8015034 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014eb2:	45e6      	cmp	lr, ip
 8014eb4:	f340 80be 	ble.w	8015034 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014eb8:	2d00      	cmp	r5, #0
 8014eba:	f2c0 80b7 	blt.w	801502c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014ebe:	42ab      	cmp	r3, r5
 8014ec0:	f340 80b4 	ble.w	801502c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014ec4:	5dd2      	ldrb	r2, [r2, r7]
 8014ec6:	9205      	str	r2, [sp, #20]
 8014ec8:	7872      	ldrb	r2, [r6, #1]
 8014eca:	9206      	str	r2, [sp, #24]
 8014ecc:	78b2      	ldrb	r2, [r6, #2]
 8014ece:	9207      	str	r2, [sp, #28]
 8014ed0:	1c6a      	adds	r2, r5, #1
 8014ed2:	f100 80b6 	bmi.w	8015042 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	f340 80b3 	ble.w	8015042 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014edc:	f1b8 0f00 	cmp.w	r8, #0
 8014ee0:	f000 80af 	beq.w	8015042 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ee4:	78f2      	ldrb	r2, [r6, #3]
 8014ee6:	9201      	str	r2, [sp, #4]
 8014ee8:	7932      	ldrb	r2, [r6, #4]
 8014eea:	9202      	str	r2, [sp, #8]
 8014eec:	7972      	ldrb	r2, [r6, #5]
 8014eee:	9203      	str	r2, [sp, #12]
 8014ef0:	f11c 0c01 	adds.w	ip, ip, #1
 8014ef4:	f100 80ad 	bmi.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014ef8:	45e6      	cmp	lr, ip
 8014efa:	f340 80aa 	ble.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014efe:	f1ba 0f00 	cmp.w	sl, #0
 8014f02:	f000 80a6 	beq.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014f06:	2d00      	cmp	r5, #0
 8014f08:	f2c0 809f 	blt.w	801504a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014f0c:	42ab      	cmp	r3, r5
 8014f0e:	f340 809c 	ble.w	801504a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014f12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014f16:	f816 9002 	ldrb.w	r9, [r6, r2]
 8014f1a:	2203      	movs	r2, #3
 8014f1c:	fb03 6c02 	mla	ip, r3, r2, r6
 8014f20:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8014f24:	f89c e002 	ldrb.w	lr, [ip, #2]
 8014f28:	9704      	str	r7, [sp, #16]
 8014f2a:	3501      	adds	r5, #1
 8014f2c:	f100 8098 	bmi.w	8015060 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f30:	42ab      	cmp	r3, r5
 8014f32:	f340 8095 	ble.w	8015060 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f36:	f1b8 0f00 	cmp.w	r8, #0
 8014f3a:	f000 8091 	beq.w	8015060 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f3e:	f04f 0c03 	mov.w	ip, #3
 8014f42:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8014f46:	5cb5      	ldrb	r5, [r6, r2]
 8014f48:	fb03 620c 	mla	r2, r3, ip, r6
 8014f4c:	fb03 630c 	mla	r3, r3, ip, r6
 8014f50:	7912      	ldrb	r2, [r2, #4]
 8014f52:	795e      	ldrb	r6, [r3, #5]
 8014f54:	fa1f f388 	uxth.w	r3, r8
 8014f58:	fa1f fc8a 	uxth.w	ip, sl
 8014f5c:	fb03 f70c 	mul.w	r7, r3, ip
 8014f60:	011b      	lsls	r3, r3, #4
 8014f62:	9708      	str	r7, [sp, #32]
 8014f64:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8014f68:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8014f6c:	1bdb      	subs	r3, r3, r7
 8014f6e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8014f72:	fa1f fc8c 	uxth.w	ip, ip
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	9709      	str	r7, [sp, #36]	; 0x24
 8014f7a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8014f7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014f80:	930a      	str	r3, [sp, #40]	; 0x28
 8014f82:	fa1f fa8a 	uxth.w	sl, sl
 8014f86:	ea6f 0807 	mvn.w	r8, r7
 8014f8a:	9f01      	ldr	r7, [sp, #4]
 8014f8c:	435f      	muls	r7, r3
 8014f8e:	9b05      	ldr	r3, [sp, #20]
 8014f90:	fa5f f888 	uxtb.w	r8, r8
 8014f94:	fb0a 7703 	mla	r7, sl, r3, r7
 8014f98:	9b08      	ldr	r3, [sp, #32]
 8014f9a:	fb14 f408 	smulbb	r4, r4, r8
 8014f9e:	fb0c 7709 	mla	r7, ip, r9, r7
 8014fa2:	fb10 f008 	smulbb	r0, r0, r8
 8014fa6:	fb11 f108 	smulbb	r1, r1, r8
 8014faa:	fb03 7705 	mla	r7, r3, r5, r7
 8014fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8014fb4:	fb07 4703 	mla	r7, r7, r3, r4
 8014fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fba:	b2bf      	uxth	r7, r7
 8014fbc:	1c7c      	adds	r4, r7, #1
 8014fbe:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8014fc2:	1224      	asrs	r4, r4, #8
 8014fc4:	f88b 4000 	strb.w	r4, [fp]
 8014fc8:	9c02      	ldr	r4, [sp, #8]
 8014fca:	435c      	muls	r4, r3
 8014fcc:	9b06      	ldr	r3, [sp, #24]
 8014fce:	fb0a 4403 	mla	r4, sl, r3, r4
 8014fd2:	9b04      	ldr	r3, [sp, #16]
 8014fd4:	fb0c 4403 	mla	r4, ip, r3, r4
 8014fd8:	9b08      	ldr	r3, [sp, #32]
 8014fda:	fb03 4402 	mla	r4, r3, r2, r4
 8014fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fe2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014fe6:	fb04 0403 	mla	r4, r4, r3, r0
 8014fea:	9b03      	ldr	r3, [sp, #12]
 8014fec:	435a      	muls	r2, r3
 8014fee:	b2a4      	uxth	r4, r4
 8014ff0:	4613      	mov	r3, r2
 8014ff2:	9a07      	ldr	r2, [sp, #28]
 8014ff4:	1c60      	adds	r0, r4, #1
 8014ff6:	fb0a 3a02 	mla	sl, sl, r2, r3
 8014ffa:	9b08      	ldr	r3, [sp, #32]
 8014ffc:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8015000:	fb0c ac0e 	mla	ip, ip, lr, sl
 8015004:	1224      	asrs	r4, r4, #8
 8015006:	fb03 c606 	mla	r6, r3, r6, ip
 801500a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801500c:	f88b 4001 	strb.w	r4, [fp, #1]
 8015010:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015014:	fb06 1103 	mla	r1, r6, r3, r1
 8015018:	b289      	uxth	r1, r1
 801501a:	1c4e      	adds	r6, r1, #1
 801501c:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8015020:	1209      	asrs	r1, r1, #8
 8015022:	f88b 1002 	strb.w	r1, [fp, #2]
 8015026:	b00d      	add	sp, #52	; 0x34
 8015028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015030:	9405      	str	r4, [sp, #20]
 8015032:	e74d      	b.n	8014ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8015034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015038:	9401      	str	r4, [sp, #4]
 801503a:	9405      	str	r4, [sp, #20]
 801503c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015040:	e756      	b.n	8014ef0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8015042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015046:	9401      	str	r4, [sp, #4]
 8015048:	e752      	b.n	8014ef0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801504a:	468e      	mov	lr, r1
 801504c:	9004      	str	r0, [sp, #16]
 801504e:	46a1      	mov	r9, r4
 8015050:	e76b      	b.n	8014f2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8015052:	460e      	mov	r6, r1
 8015054:	4602      	mov	r2, r0
 8015056:	4625      	mov	r5, r4
 8015058:	468e      	mov	lr, r1
 801505a:	9004      	str	r0, [sp, #16]
 801505c:	46a1      	mov	r9, r4
 801505e:	e779      	b.n	8014f54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8015060:	460e      	mov	r6, r1
 8015062:	4602      	mov	r2, r0
 8015064:	4625      	mov	r5, r4
 8015066:	e775      	b.n	8014f54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08015068 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801506c:	b09f      	sub	sp, #124	; 0x7c
 801506e:	920e      	str	r2, [sp, #56]	; 0x38
 8015070:	9307      	str	r3, [sp, #28]
 8015072:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015074:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8015078:	901d      	str	r0, [sp, #116]	; 0x74
 801507a:	930c      	str	r3, [sp, #48]	; 0x30
 801507c:	6850      	ldr	r0, [r2, #4]
 801507e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015080:	6812      	ldr	r2, [r2, #0]
 8015082:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8015086:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801508a:	fb00 1303 	mla	r3, r0, r3, r1
 801508e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015092:	18d3      	adds	r3, r2, r3
 8015094:	9308      	str	r3, [sp, #32]
 8015096:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	930a      	str	r3, [sp, #40]	; 0x28
 801509c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801509e:	43db      	mvns	r3, r3
 80150a0:	b2db      	uxtb	r3, r3
 80150a2:	9309      	str	r3, [sp, #36]	; 0x24
 80150a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	dc03      	bgt.n	80150b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80150aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	f340 81f5 	ble.w	801549c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80150b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80150b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80150b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80150bc:	1e48      	subs	r0, r1, #1
 80150be:	1e54      	subs	r4, r2, #1
 80150c0:	9b07      	ldr	r3, [sp, #28]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f340 80d5 	ble.w	8015272 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80150c8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80150cc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80150d0:	d406      	bmi.n	80150e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150d2:	4285      	cmp	r5, r0
 80150d4:	da04      	bge.n	80150e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	db02      	blt.n	80150e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150da:	42a3      	cmp	r3, r4
 80150dc:	f2c0 80ca 	blt.w	8015274 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80150e0:	3501      	adds	r5, #1
 80150e2:	f100 80bb 	bmi.w	801525c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150e6:	42a9      	cmp	r1, r5
 80150e8:	f2c0 80b8 	blt.w	801525c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150ec:	3301      	adds	r3, #1
 80150ee:	f100 80b5 	bmi.w	801525c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150f2:	429a      	cmp	r2, r3
 80150f4:	f2c0 80b2 	blt.w	801525c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150f8:	9b07      	ldr	r3, [sp, #28]
 80150fa:	9d08      	ldr	r5, [sp, #32]
 80150fc:	930d      	str	r3, [sp, #52]	; 0x34
 80150fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015100:	2b00      	cmp	r3, #0
 8015102:	f340 80d6 	ble.w	80152b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8015106:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8015108:	ea4f 4428 	mov.w	r4, r8, asr #16
 801510c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801510e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8015112:	68c6      	ldr	r6, [r0, #12]
 8015114:	ea5f 402a 	movs.w	r0, sl, asr #16
 8015118:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801511c:	689b      	ldr	r3, [r3, #8]
 801511e:	f100 810f 	bmi.w	8015340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015122:	1e5f      	subs	r7, r3, #1
 8015124:	42b8      	cmp	r0, r7
 8015126:	f280 810b 	bge.w	8015340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801512a:	2c00      	cmp	r4, #0
 801512c:	f2c0 8108 	blt.w	8015340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015130:	1e77      	subs	r7, r6, #1
 8015132:	42bc      	cmp	r4, r7
 8015134:	f280 8104 	bge.w	8015340 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015138:	b21b      	sxth	r3, r3
 801513a:	fb04 0003 	mla	r0, r4, r3, r0
 801513e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015144:	1826      	adds	r6, r4, r0
 8015146:	5c24      	ldrb	r4, [r4, r0]
 8015148:	78b7      	ldrb	r7, [r6, #2]
 801514a:	7870      	ldrb	r0, [r6, #1]
 801514c:	970f      	str	r7, [sp, #60]	; 0x3c
 801514e:	7977      	ldrb	r7, [r6, #5]
 8015150:	f896 e003 	ldrb.w	lr, [r6, #3]
 8015154:	f896 c004 	ldrb.w	ip, [r6, #4]
 8015158:	9710      	str	r7, [sp, #64]	; 0x40
 801515a:	b1c9      	cbz	r1, 8015190 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801515c:	f04f 0b03 	mov.w	fp, #3
 8015160:	f06f 0904 	mvn.w	r9, #4
 8015164:	3605      	adds	r6, #5
 8015166:	fb13 930b 	smlabb	r3, r3, fp, r9
 801516a:	eb06 0b03 	add.w	fp, r6, r3
 801516e:	5cf3      	ldrb	r3, [r6, r3]
 8015170:	9311      	str	r3, [sp, #68]	; 0x44
 8015172:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015176:	9313      	str	r3, [sp, #76]	; 0x4c
 8015178:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801517c:	9315      	str	r3, [sp, #84]	; 0x54
 801517e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8015182:	9312      	str	r3, [sp, #72]	; 0x48
 8015184:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8015188:	9314      	str	r3, [sp, #80]	; 0x50
 801518a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801518e:	9316      	str	r3, [sp, #88]	; 0x58
 8015190:	b292      	uxth	r2, r2
 8015192:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015194:	b289      	uxth	r1, r1
 8015196:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801519a:	fb02 f601 	mul.w	r6, r2, r1
 801519e:	0112      	lsls	r2, r2, #4
 80151a0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80151a4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80151a8:	1b92      	subs	r2, r2, r6
 80151aa:	b289      	uxth	r1, r1
 80151ac:	b292      	uxth	r2, r2
 80151ae:	eba9 0901 	sub.w	r9, r9, r1
 80151b2:	fb02 fe0e 	mul.w	lr, r2, lr
 80151b6:	fa1f f989 	uxth.w	r9, r9
 80151ba:	fb02 fc0c 	mul.w	ip, r2, ip
 80151be:	fb09 e404 	mla	r4, r9, r4, lr
 80151c2:	f895 e000 	ldrb.w	lr, [r5]
 80151c6:	fb09 c000 	mla	r0, r9, r0, ip
 80151ca:	fb01 4407 	mla	r4, r1, r7, r4
 80151ce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80151d0:	fb06 4407 	mla	r4, r6, r7, r4
 80151d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80151d6:	fb1e fe07 	smulbb	lr, lr, r7
 80151da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80151de:	fb04 e403 	mla	r4, r4, r3, lr
 80151e2:	b2a4      	uxth	r4, r4
 80151e4:	f104 0e01 	add.w	lr, r4, #1
 80151e8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80151ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80151ee:	fb01 0004 	mla	r0, r1, r4, r0
 80151f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80151f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80151f8:	fb06 0004 	mla	r0, r6, r4, r0
 80151fc:	786c      	ldrb	r4, [r5, #1]
 80151fe:	f885 e000 	strb.w	lr, [r5]
 8015202:	fb14 f407 	smulbb	r4, r4, r7
 8015206:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801520a:	fb00 4003 	mla	r0, r0, r3, r4
 801520e:	b280      	uxth	r0, r0
 8015210:	1c44      	adds	r4, r0, #1
 8015212:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8015216:	1200      	asrs	r0, r0, #8
 8015218:	7068      	strb	r0, [r5, #1]
 801521a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801521c:	4342      	muls	r2, r0
 801521e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015220:	fb09 2200 	mla	r2, r9, r0, r2
 8015224:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015226:	fb01 2100 	mla	r1, r1, r0, r2
 801522a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801522c:	fb06 1602 	mla	r6, r6, r2, r1
 8015230:	78a9      	ldrb	r1, [r5, #2]
 8015232:	fb11 f107 	smulbb	r1, r1, r7
 8015236:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801523a:	fb06 1303 	mla	r3, r6, r3, r1
 801523e:	b29b      	uxth	r3, r3
 8015240:	1c5e      	adds	r6, r3, #1
 8015242:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8015246:	121b      	asrs	r3, r3, #8
 8015248:	70ab      	strb	r3, [r5, #2]
 801524a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801524c:	3503      	adds	r5, #3
 801524e:	449a      	add	sl, r3
 8015250:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015252:	4498      	add	r8, r3
 8015254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015256:	3b01      	subs	r3, #1
 8015258:	930d      	str	r3, [sp, #52]	; 0x34
 801525a:	e750      	b.n	80150fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801525c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801525e:	449a      	add	sl, r3
 8015260:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015262:	4498      	add	r8, r3
 8015264:	9b07      	ldr	r3, [sp, #28]
 8015266:	3b01      	subs	r3, #1
 8015268:	9307      	str	r3, [sp, #28]
 801526a:	9b08      	ldr	r3, [sp, #32]
 801526c:	3303      	adds	r3, #3
 801526e:	9308      	str	r3, [sp, #32]
 8015270:	e726      	b.n	80150c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8015272:	d026      	beq.n	80152c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8015274:	9b07      	ldr	r3, [sp, #28]
 8015276:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015278:	3b01      	subs	r3, #1
 801527a:	fb00 a003 	mla	r0, r0, r3, sl
 801527e:	1400      	asrs	r0, r0, #16
 8015280:	f53f af3a 	bmi.w	80150f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015284:	3901      	subs	r1, #1
 8015286:	4288      	cmp	r0, r1
 8015288:	f6bf af36 	bge.w	80150f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801528c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801528e:	fb01 8303 	mla	r3, r1, r3, r8
 8015292:	141b      	asrs	r3, r3, #16
 8015294:	f53f af30 	bmi.w	80150f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015298:	3a01      	subs	r2, #1
 801529a:	4293      	cmp	r3, r2
 801529c:	f6bf af2c 	bge.w	80150f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80152a0:	9b08      	ldr	r3, [sp, #32]
 80152a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80152a6:	1cdd      	adds	r5, r3, #3
 80152a8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80152ac:	f1bc 0f00 	cmp.w	ip, #0
 80152b0:	dc5f      	bgt.n	8015372 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80152b2:	9b07      	ldr	r3, [sp, #28]
 80152b4:	9a08      	ldr	r2, [sp, #32]
 80152b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80152be:	441a      	add	r2, r3
 80152c0:	9208      	str	r2, [sp, #32]
 80152c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	f340 80e9 	ble.w	801549c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80152ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80152d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80152d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80152d8:	eef0 6a62 	vmov.f32	s13, s5
 80152dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80152e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80152e8:	ee16 aa90 	vmov	sl, s13
 80152ec:	eef0 6a43 	vmov.f32	s13, s6
 80152f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80152f4:	ee16 8a90 	vmov	r8, s13
 80152f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80152fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015300:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015304:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015308:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801530c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015310:	ee12 2a90 	vmov	r2, s5
 8015314:	eef0 2a47 	vmov.f32	s5, s14
 8015318:	fb92 f3f3 	sdiv	r3, r2, r3
 801531c:	ee13 2a10 	vmov	r2, s6
 8015320:	932b      	str	r3, [sp, #172]	; 0xac
 8015322:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015324:	eeb0 3a67 	vmov.f32	s6, s15
 8015328:	fb92 f3f3 	sdiv	r3, r2, r3
 801532c:	932c      	str	r3, [sp, #176]	; 0xb0
 801532e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015332:	3b01      	subs	r3, #1
 8015334:	930b      	str	r3, [sp, #44]	; 0x2c
 8015336:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015338:	bf08      	it	eq
 801533a:	4613      	moveq	r3, r2
 801533c:	9307      	str	r3, [sp, #28]
 801533e:	e6b1      	b.n	80150a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015340:	1c47      	adds	r7, r0, #1
 8015342:	d482      	bmi.n	801524a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015344:	42bb      	cmp	r3, r7
 8015346:	db80      	blt.n	801524a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015348:	1c67      	adds	r7, r4, #1
 801534a:	f53f af7e 	bmi.w	801524a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801534e:	42be      	cmp	r6, r7
 8015350:	f6ff af7b 	blt.w	801524a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015354:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015356:	b236      	sxth	r6, r6
 8015358:	9001      	str	r0, [sp, #4]
 801535a:	b21b      	sxth	r3, r3
 801535c:	9600      	str	r6, [sp, #0]
 801535e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015360:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8015364:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8015368:	4629      	mov	r1, r5
 801536a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801536c:	f7ff fd82 	bl	8014e74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8015370:	e76b      	b.n	801524a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015372:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8015374:	ea4f 402a 	mov.w	r0, sl, asr #16
 8015378:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801537c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8015380:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8015384:	ea4f 4128 	mov.w	r1, r8, asr #16
 8015388:	fb07 0101 	mla	r1, r7, r1, r0
 801538c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801538e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015392:	1844      	adds	r4, r0, r1
 8015394:	5c40      	ldrb	r0, [r0, r1]
 8015396:	78a6      	ldrb	r6, [r4, #2]
 8015398:	7861      	ldrb	r1, [r4, #1]
 801539a:	960f      	str	r6, [sp, #60]	; 0x3c
 801539c:	78e6      	ldrb	r6, [r4, #3]
 801539e:	910d      	str	r1, [sp, #52]	; 0x34
 80153a0:	9610      	str	r6, [sp, #64]	; 0x40
 80153a2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80153a6:	f894 b005 	ldrb.w	fp, [r4, #5]
 80153aa:	b192      	cbz	r2, 80153d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80153ac:	f06f 0604 	mvn.w	r6, #4
 80153b0:	2103      	movs	r1, #3
 80153b2:	3405      	adds	r4, #5
 80153b4:	fb17 6701 	smlabb	r7, r7, r1, r6
 80153b8:	19e6      	adds	r6, r4, r7
 80153ba:	5de4      	ldrb	r4, [r4, r7]
 80153bc:	9417      	str	r4, [sp, #92]	; 0x5c
 80153be:	7874      	ldrb	r4, [r6, #1]
 80153c0:	9419      	str	r4, [sp, #100]	; 0x64
 80153c2:	78b4      	ldrb	r4, [r6, #2]
 80153c4:	941b      	str	r4, [sp, #108]	; 0x6c
 80153c6:	78f4      	ldrb	r4, [r6, #3]
 80153c8:	9418      	str	r4, [sp, #96]	; 0x60
 80153ca:	7934      	ldrb	r4, [r6, #4]
 80153cc:	941a      	str	r4, [sp, #104]	; 0x68
 80153ce:	7974      	ldrb	r4, [r6, #5]
 80153d0:	941c      	str	r4, [sp, #112]	; 0x70
 80153d2:	b29b      	uxth	r3, r3
 80153d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80153d6:	b292      	uxth	r2, r2
 80153d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153da:	3503      	adds	r5, #3
 80153dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80153e0:	fb03 f402 	mul.w	r4, r3, r2
 80153e4:	011b      	lsls	r3, r3, #4
 80153e6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80153ea:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80153ee:	1b1b      	subs	r3, r3, r4
 80153f0:	b292      	uxth	r2, r2
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	1ab6      	subs	r6, r6, r2
 80153f6:	435f      	muls	r7, r3
 80153f8:	b2b6      	uxth	r6, r6
 80153fa:	fb03 f909 	mul.w	r9, r3, r9
 80153fe:	fb03 fb0b 	mul.w	fp, r3, fp
 8015402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015404:	fb06 7000 	mla	r0, r6, r0, r7
 8015408:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801540a:	fb06 bb03 	mla	fp, r6, r3, fp
 801540e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015410:	fb02 0007 	mla	r0, r2, r7, r0
 8015414:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8015416:	fb02 bb03 	mla	fp, r2, r3, fp
 801541a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801541c:	fb04 0007 	mla	r0, r4, r7, r0
 8015420:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8015424:	fb17 f701 	smulbb	r7, r7, r1
 8015428:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801542c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801542e:	fb00 700e 	mla	r0, r0, lr, r7
 8015432:	fb06 9101 	mla	r1, r6, r1, r9
 8015436:	b280      	uxth	r0, r0
 8015438:	1c47      	adds	r7, r0, #1
 801543a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801543e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015440:	1200      	asrs	r0, r0, #8
 8015442:	f805 0c06 	strb.w	r0, [r5, #-6]
 8015446:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015448:	fb02 1100 	mla	r1, r2, r0, r1
 801544c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801544e:	fb04 1100 	mla	r1, r4, r0, r1
 8015452:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8015456:	fb04 b403 	mla	r4, r4, r3, fp
 801545a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801545e:	fb10 f007 	smulbb	r0, r0, r7
 8015462:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015466:	fb13 f307 	smulbb	r3, r3, r7
 801546a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801546e:	fb01 010e 	mla	r1, r1, lr, r0
 8015472:	fb04 340e 	mla	r4, r4, lr, r3
 8015476:	b289      	uxth	r1, r1
 8015478:	b2a4      	uxth	r4, r4
 801547a:	1c48      	adds	r0, r1, #1
 801547c:	1c63      	adds	r3, r4, #1
 801547e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8015482:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8015486:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015488:	1209      	asrs	r1, r1, #8
 801548a:	1224      	asrs	r4, r4, #8
 801548c:	449a      	add	sl, r3
 801548e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015490:	f805 1c05 	strb.w	r1, [r5, #-5]
 8015494:	f805 4c04 	strb.w	r4, [r5, #-4]
 8015498:	4498      	add	r8, r3
 801549a:	e707      	b.n	80152ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801549c:	b01f      	add	sp, #124	; 0x7c
 801549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80154a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a6:	b087      	sub	sp, #28
 80154a8:	780d      	ldrb	r5, [r1, #0]
 80154aa:	784c      	ldrb	r4, [r1, #1]
 80154ac:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80154b0:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 80154b4:	9004      	str	r0, [sp, #16]
 80154b6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80154ba:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 80154be:	9005      	str	r0, [sp, #20]
 80154c0:	fb06 bc03 	mla	ip, r6, r3, fp
 80154c4:	2e00      	cmp	r6, #0
 80154c6:	7888      	ldrb	r0, [r1, #2]
 80154c8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80154cc:	eb02 090c 	add.w	r9, r2, ip
 80154d0:	f2c0 8084 	blt.w	80155dc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154d4:	42b7      	cmp	r7, r6
 80154d6:	f340 8081 	ble.w	80155dc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154da:	f1bb 0f00 	cmp.w	fp, #0
 80154de:	db79      	blt.n	80155d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154e0:	455b      	cmp	r3, fp
 80154e2:	dd77      	ble.n	80155d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154e4:	f812 200c 	ldrb.w	r2, [r2, ip]
 80154e8:	9201      	str	r2, [sp, #4]
 80154ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 80154ee:	9202      	str	r2, [sp, #8]
 80154f0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80154f4:	9203      	str	r2, [sp, #12]
 80154f6:	f11b 0201 	adds.w	r2, fp, #1
 80154fa:	d476      	bmi.n	80155ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80154fc:	4293      	cmp	r3, r2
 80154fe:	dd74      	ble.n	80155ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8015500:	9a04      	ldr	r2, [sp, #16]
 8015502:	2a00      	cmp	r2, #0
 8015504:	d071      	beq.n	80155ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8015506:	f899 8003 	ldrb.w	r8, [r9, #3]
 801550a:	f899 c004 	ldrb.w	ip, [r9, #4]
 801550e:	f899 a005 	ldrb.w	sl, [r9, #5]
 8015512:	3601      	adds	r6, #1
 8015514:	d471      	bmi.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8015516:	42b7      	cmp	r7, r6
 8015518:	dd6f      	ble.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801551a:	9a05      	ldr	r2, [sp, #20]
 801551c:	2a00      	cmp	r2, #0
 801551e:	d06c      	beq.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8015520:	f1bb 0f00 	cmp.w	fp, #0
 8015524:	db65      	blt.n	80155f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8015526:	455b      	cmp	r3, fp
 8015528:	dd63      	ble.n	80155f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801552a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801552e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8015532:	2203      	movs	r2, #3
 8015534:	fb03 9602 	mla	r6, r3, r2, r9
 8015538:	7877      	ldrb	r7, [r6, #1]
 801553a:	78b6      	ldrb	r6, [r6, #2]
 801553c:	f11b 0b01 	adds.w	fp, fp, #1
 8015540:	d40c      	bmi.n	801555c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015542:	455b      	cmp	r3, fp
 8015544:	dd0a      	ble.n	801555c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015546:	9a04      	ldr	r2, [sp, #16]
 8015548:	b142      	cbz	r2, 801555c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801554a:	2203      	movs	r2, #3
 801554c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8015550:	f819 5000 	ldrb.w	r5, [r9, r0]
 8015554:	fb03 9002 	mla	r0, r3, r2, r9
 8015558:	7904      	ldrb	r4, [r0, #4]
 801555a:	7940      	ldrb	r0, [r0, #5]
 801555c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015560:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015564:	fb03 fb02 	mul.w	fp, r3, r2
 8015568:	011b      	lsls	r3, r3, #4
 801556a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801556e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8015572:	eba3 030b 	sub.w	r3, r3, fp
 8015576:	b292      	uxth	r2, r2
 8015578:	b29b      	uxth	r3, r3
 801557a:	eba9 0902 	sub.w	r9, r9, r2
 801557e:	9304      	str	r3, [sp, #16]
 8015580:	fa1f f989 	uxth.w	r9, r9
 8015584:	fb03 f808 	mul.w	r8, r3, r8
 8015588:	9b01      	ldr	r3, [sp, #4]
 801558a:	fb09 8803 	mla	r8, r9, r3, r8
 801558e:	9b04      	ldr	r3, [sp, #16]
 8015590:	fb03 fc0c 	mul.w	ip, r3, ip
 8015594:	9b02      	ldr	r3, [sp, #8]
 8015596:	fb02 880e 	mla	r8, r2, lr, r8
 801559a:	fb09 cc03 	mla	ip, r9, r3, ip
 801559e:	9b04      	ldr	r3, [sp, #16]
 80155a0:	fb0b 8805 	mla	r8, fp, r5, r8
 80155a4:	fb02 c707 	mla	r7, r2, r7, ip
 80155a8:	fb03 f30a 	mul.w	r3, r3, sl
 80155ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80155b0:	fb0b 7404 	mla	r4, fp, r4, r7
 80155b4:	f881 8000 	strb.w	r8, [r1]
 80155b8:	1224      	asrs	r4, r4, #8
 80155ba:	704c      	strb	r4, [r1, #1]
 80155bc:	9c03      	ldr	r4, [sp, #12]
 80155be:	fb09 3904 	mla	r9, r9, r4, r3
 80155c2:	fb02 9206 	mla	r2, r2, r6, r9
 80155c6:	fb0b 2000 	mla	r0, fp, r0, r2
 80155ca:	1200      	asrs	r0, r0, #8
 80155cc:	7088      	strb	r0, [r1, #2]
 80155ce:	b007      	add	sp, #28
 80155d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155d8:	9501      	str	r5, [sp, #4]
 80155da:	e78c      	b.n	80154f6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80155dc:	4682      	mov	sl, r0
 80155de:	46a4      	mov	ip, r4
 80155e0:	46a8      	mov	r8, r5
 80155e2:	9501      	str	r5, [sp, #4]
 80155e4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155e8:	e793      	b.n	8015512 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80155ea:	4682      	mov	sl, r0
 80155ec:	46a4      	mov	ip, r4
 80155ee:	46a8      	mov	r8, r5
 80155f0:	e78f      	b.n	8015512 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80155f2:	4606      	mov	r6, r0
 80155f4:	4627      	mov	r7, r4
 80155f6:	46ae      	mov	lr, r5
 80155f8:	e7a0      	b.n	801553c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80155fa:	4606      	mov	r6, r0
 80155fc:	4627      	mov	r7, r4
 80155fe:	46ae      	mov	lr, r5
 8015600:	e7ac      	b.n	801555c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08015602 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015606:	b09b      	sub	sp, #108	; 0x6c
 8015608:	920b      	str	r2, [sp, #44]	; 0x2c
 801560a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801560c:	9019      	str	r0, [sp, #100]	; 0x64
 801560e:	9109      	str	r1, [sp, #36]	; 0x24
 8015610:	6850      	ldr	r0, [r2, #4]
 8015612:	9306      	str	r3, [sp, #24]
 8015614:	6812      	ldr	r2, [r2, #0]
 8015616:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801561a:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801561e:	fb00 1303 	mla	r3, r0, r3, r1
 8015622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015626:	18d3      	adds	r3, r2, r3
 8015628:	9307      	str	r3, [sp, #28]
 801562a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	9308      	str	r3, [sp, #32]
 8015630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015632:	2b00      	cmp	r3, #0
 8015634:	dc03      	bgt.n	801563e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015638:	2b00      	cmp	r3, #0
 801563a:	f340 81ab 	ble.w	8015994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801563e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015640:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015644:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015648:	1e48      	subs	r0, r1, #1
 801564a:	1e55      	subs	r5, r2, #1
 801564c:	9b06      	ldr	r3, [sp, #24]
 801564e:	2b00      	cmp	r3, #0
 8015650:	f340 80b1 	ble.w	80157b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015654:	ea5f 462b 	movs.w	r6, fp, asr #16
 8015658:	ea4f 4324 	mov.w	r3, r4, asr #16
 801565c:	d406      	bmi.n	801566c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801565e:	4286      	cmp	r6, r0
 8015660:	da04      	bge.n	801566c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015662:	2b00      	cmp	r3, #0
 8015664:	db02      	blt.n	801566c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015666:	42ab      	cmp	r3, r5
 8015668:	f2c0 80a6 	blt.w	80157b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801566c:	3601      	adds	r6, #1
 801566e:	f100 8097 	bmi.w	80157a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015672:	42b1      	cmp	r1, r6
 8015674:	f2c0 8094 	blt.w	80157a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015678:	3301      	adds	r3, #1
 801567a:	f100 8091 	bmi.w	80157a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801567e:	429a      	cmp	r2, r3
 8015680:	f2c0 808e 	blt.w	80157a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015684:	9b06      	ldr	r3, [sp, #24]
 8015686:	9e07      	ldr	r6, [sp, #28]
 8015688:	930a      	str	r3, [sp, #40]	; 0x28
 801568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801568c:	2b00      	cmp	r3, #0
 801568e:	f340 80b0 	ble.w	80157f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8015692:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015694:	1425      	asrs	r5, r4, #16
 8015696:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015698:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801569c:	68c7      	ldr	r7, [r0, #12]
 801569e:	ea5f 402b 	movs.w	r0, fp, asr #16
 80156a2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80156a6:	689b      	ldr	r3, [r3, #8]
 80156a8:	f100 80ea 	bmi.w	8015880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156ac:	f103 3cff 	add.w	ip, r3, #4294967295
 80156b0:	4560      	cmp	r0, ip
 80156b2:	f280 80e5 	bge.w	8015880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156b6:	2d00      	cmp	r5, #0
 80156b8:	f2c0 80e2 	blt.w	8015880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156bc:	f107 3cff 	add.w	ip, r7, #4294967295
 80156c0:	4565      	cmp	r5, ip
 80156c2:	f280 80dd 	bge.w	8015880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156c6:	b21b      	sxth	r3, r3
 80156c8:	fb05 0003 	mla	r0, r5, r3, r0
 80156cc:	9d08      	ldr	r5, [sp, #32]
 80156ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80156d2:	182f      	adds	r7, r5, r0
 80156d4:	5c2d      	ldrb	r5, [r5, r0]
 80156d6:	7878      	ldrb	r0, [r7, #1]
 80156d8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80156dc:	900c      	str	r0, [sp, #48]	; 0x30
 80156de:	f897 9003 	ldrb.w	r9, [r7, #3]
 80156e2:	f897 8004 	ldrb.w	r8, [r7, #4]
 80156e6:	f897 a005 	ldrb.w	sl, [r7, #5]
 80156ea:	b1c9      	cbz	r1, 8015720 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80156ec:	f04f 0c03 	mov.w	ip, #3
 80156f0:	f06f 0004 	mvn.w	r0, #4
 80156f4:	3705      	adds	r7, #5
 80156f6:	fb13 030c 	smlabb	r3, r3, ip, r0
 80156fa:	eb07 0c03 	add.w	ip, r7, r3
 80156fe:	5cfb      	ldrb	r3, [r7, r3]
 8015700:	930d      	str	r3, [sp, #52]	; 0x34
 8015702:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015706:	930f      	str	r3, [sp, #60]	; 0x3c
 8015708:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801570c:	9311      	str	r3, [sp, #68]	; 0x44
 801570e:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8015712:	930e      	str	r3, [sp, #56]	; 0x38
 8015714:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8015718:	9310      	str	r3, [sp, #64]	; 0x40
 801571a:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801571e:	9312      	str	r3, [sp, #72]	; 0x48
 8015720:	b292      	uxth	r2, r2
 8015722:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015724:	b289      	uxth	r1, r1
 8015726:	fb02 f301 	mul.w	r3, r2, r1
 801572a:	0112      	lsls	r2, r2, #4
 801572c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8015730:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8015734:	1ad2      	subs	r2, r2, r3
 8015736:	b289      	uxth	r1, r1
 8015738:	b292      	uxth	r2, r2
 801573a:	1a7f      	subs	r7, r7, r1
 801573c:	fb02 f909 	mul.w	r9, r2, r9
 8015740:	b2bf      	uxth	r7, r7
 8015742:	fb02 f808 	mul.w	r8, r2, r8
 8015746:	fb02 fa0a 	mul.w	sl, r2, sl
 801574a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801574c:	fb07 9905 	mla	r9, r7, r5, r9
 8015750:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015752:	fb07 8800 	mla	r8, r7, r0, r8
 8015756:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015758:	fb07 aa0e 	mla	sl, r7, lr, sl
 801575c:	fb01 9905 	mla	r9, r1, r5, r9
 8015760:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015762:	fb01 8800 	mla	r8, r1, r0, r8
 8015766:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015768:	fb01 a102 	mla	r1, r1, r2, sl
 801576c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801576e:	fb03 9905 	mla	r9, r3, r5, r9
 8015772:	fb03 8800 	mla	r8, r3, r0, r8
 8015776:	fb03 1302 	mla	r3, r3, r2, r1
 801577a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801577e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015782:	121b      	asrs	r3, r3, #8
 8015784:	f886 9000 	strb.w	r9, [r6]
 8015788:	f886 8001 	strb.w	r8, [r6, #1]
 801578c:	70b3      	strb	r3, [r6, #2]
 801578e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015790:	3603      	adds	r6, #3
 8015792:	449b      	add	fp, r3
 8015794:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015796:	441c      	add	r4, r3
 8015798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801579a:	3b01      	subs	r3, #1
 801579c:	930a      	str	r3, [sp, #40]	; 0x28
 801579e:	e774      	b.n	801568a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80157a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80157a2:	449b      	add	fp, r3
 80157a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157a6:	441c      	add	r4, r3
 80157a8:	9b06      	ldr	r3, [sp, #24]
 80157aa:	3b01      	subs	r3, #1
 80157ac:	9306      	str	r3, [sp, #24]
 80157ae:	9b07      	ldr	r3, [sp, #28]
 80157b0:	3303      	adds	r3, #3
 80157b2:	9307      	str	r3, [sp, #28]
 80157b4:	e74a      	b.n	801564c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80157b6:	d024      	beq.n	8015802 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80157b8:	9b06      	ldr	r3, [sp, #24]
 80157ba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80157bc:	3b01      	subs	r3, #1
 80157be:	fb00 b003 	mla	r0, r0, r3, fp
 80157c2:	1400      	asrs	r0, r0, #16
 80157c4:	f53f af5e 	bmi.w	8015684 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157c8:	3901      	subs	r1, #1
 80157ca:	4288      	cmp	r0, r1
 80157cc:	f6bf af5a 	bge.w	8015684 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157d0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80157d2:	fb01 4303 	mla	r3, r1, r3, r4
 80157d6:	141b      	asrs	r3, r3, #16
 80157d8:	f53f af54 	bmi.w	8015684 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157dc:	3a01      	subs	r2, #1
 80157de:	4293      	cmp	r3, r2
 80157e0:	f6bf af50 	bge.w	8015684 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157e4:	9b07      	ldr	r3, [sp, #28]
 80157e6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80157ea:	1cde      	adds	r6, r3, #3
 80157ec:	f1be 0f00 	cmp.w	lr, #0
 80157f0:	dc5f      	bgt.n	80158b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157f2:	9b06      	ldr	r3, [sp, #24]
 80157f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80157f8:	9b07      	ldr	r3, [sp, #28]
 80157fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80157fe:	4423      	add	r3, r4
 8015800:	9307      	str	r3, [sp, #28]
 8015802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015804:	2b00      	cmp	r3, #0
 8015806:	f340 80c5 	ble.w	8015994 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801580a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801580e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015810:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015814:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015818:	eef0 6a62 	vmov.f32	s13, s5
 801581c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015820:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015824:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015828:	ee16 ba90 	vmov	fp, s13
 801582c:	eef0 6a43 	vmov.f32	s13, s6
 8015830:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015834:	ee16 4a90 	vmov	r4, s13
 8015838:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801583c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015840:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015844:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015848:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801584c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015850:	ee12 2a90 	vmov	r2, s5
 8015854:	eef0 2a47 	vmov.f32	s5, s14
 8015858:	fb92 f3f3 	sdiv	r3, r2, r3
 801585c:	ee13 2a10 	vmov	r2, s6
 8015860:	9327      	str	r3, [sp, #156]	; 0x9c
 8015862:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015864:	eeb0 3a67 	vmov.f32	s6, s15
 8015868:	fb92 f3f3 	sdiv	r3, r2, r3
 801586c:	9328      	str	r3, [sp, #160]	; 0xa0
 801586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015872:	3b01      	subs	r3, #1
 8015874:	9309      	str	r3, [sp, #36]	; 0x24
 8015876:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015878:	bf08      	it	eq
 801587a:	4613      	moveq	r3, r2
 801587c:	9306      	str	r3, [sp, #24]
 801587e:	e6d7      	b.n	8015630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015880:	f110 0c01 	adds.w	ip, r0, #1
 8015884:	d483      	bmi.n	801578e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015886:	4563      	cmp	r3, ip
 8015888:	db81      	blt.n	801578e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801588a:	f115 0c01 	adds.w	ip, r5, #1
 801588e:	f53f af7e 	bmi.w	801578e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015892:	4567      	cmp	r7, ip
 8015894:	f6ff af7b 	blt.w	801578e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015898:	b23f      	sxth	r7, r7
 801589a:	b21b      	sxth	r3, r3
 801589c:	9700      	str	r7, [sp, #0]
 801589e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80158a2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80158a6:	9a08      	ldr	r2, [sp, #32]
 80158a8:	4631      	mov	r1, r6
 80158aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80158ac:	f7ff fdf9 	bl	80154a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80158b0:	e76d      	b.n	801578e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80158b2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80158b4:	ea4f 402b 	mov.w	r0, fp, asr #16
 80158b8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80158bc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80158c0:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80158c4:	1421      	asrs	r1, r4, #16
 80158c6:	930a      	str	r3, [sp, #40]	; 0x28
 80158c8:	fb0c 0101 	mla	r1, ip, r1, r0
 80158cc:	9808      	ldr	r0, [sp, #32]
 80158ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158d2:	1845      	adds	r5, r0, r1
 80158d4:	5c40      	ldrb	r0, [r0, r1]
 80158d6:	796f      	ldrb	r7, [r5, #5]
 80158d8:	7869      	ldrb	r1, [r5, #1]
 80158da:	f895 8002 	ldrb.w	r8, [r5, #2]
 80158de:	f895 a003 	ldrb.w	sl, [r5, #3]
 80158e2:	f895 9004 	ldrb.w	r9, [r5, #4]
 80158e6:	970c      	str	r7, [sp, #48]	; 0x30
 80158e8:	b1a2      	cbz	r2, 8015914 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80158ea:	2703      	movs	r7, #3
 80158ec:	f06f 0304 	mvn.w	r3, #4
 80158f0:	3505      	adds	r5, #5
 80158f2:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80158f6:	eb05 070c 	add.w	r7, r5, ip
 80158fa:	f815 500c 	ldrb.w	r5, [r5, ip]
 80158fe:	9513      	str	r5, [sp, #76]	; 0x4c
 8015900:	787d      	ldrb	r5, [r7, #1]
 8015902:	9515      	str	r5, [sp, #84]	; 0x54
 8015904:	78bd      	ldrb	r5, [r7, #2]
 8015906:	9517      	str	r5, [sp, #92]	; 0x5c
 8015908:	78fd      	ldrb	r5, [r7, #3]
 801590a:	9514      	str	r5, [sp, #80]	; 0x50
 801590c:	793d      	ldrb	r5, [r7, #4]
 801590e:	9516      	str	r5, [sp, #88]	; 0x58
 8015910:	797d      	ldrb	r5, [r7, #5]
 8015912:	9518      	str	r5, [sp, #96]	; 0x60
 8015914:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015918:	b292      	uxth	r2, r2
 801591a:	3603      	adds	r6, #3
 801591c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015920:	fb03 f502 	mul.w	r5, r3, r2
 8015924:	011b      	lsls	r3, r3, #4
 8015926:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801592a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801592e:	1b5b      	subs	r3, r3, r5
 8015930:	b292      	uxth	r2, r2
 8015932:	b29b      	uxth	r3, r3
 8015934:	1abf      	subs	r7, r7, r2
 8015936:	fb03 f909 	mul.w	r9, r3, r9
 801593a:	b2bf      	uxth	r7, r7
 801593c:	fb03 fa0a 	mul.w	sl, r3, sl
 8015940:	fb07 9901 	mla	r9, r7, r1, r9
 8015944:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015946:	fb07 aa00 	mla	sl, r7, r0, sl
 801594a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801594c:	fb02 9901 	mla	r9, r2, r1, r9
 8015950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015952:	fb02 aa00 	mla	sl, r2, r0, sl
 8015956:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015958:	fb05 9901 	mla	r9, r5, r1, r9
 801595c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801595e:	fb05 aa00 	mla	sl, r5, r0, sl
 8015962:	434b      	muls	r3, r1
 8015964:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015966:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801596a:	fb07 3308 	mla	r3, r7, r8, r3
 801596e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015972:	f806 ac06 	strb.w	sl, [r6, #-6]
 8015976:	fb02 3201 	mla	r2, r2, r1, r3
 801597a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801597c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8015980:	fb05 2503 	mla	r5, r5, r3, r2
 8015984:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015986:	122d      	asrs	r5, r5, #8
 8015988:	449b      	add	fp, r3
 801598a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801598c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8015990:	441c      	add	r4, r3
 8015992:	e72b      	b.n	80157ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015994:	b01b      	add	sp, #108	; 0x6c
 8015996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801599a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801599a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801599e:	b087      	sub	sp, #28
 80159a0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80159a4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80159a8:	fb05 7003 	mla	r0, r5, r3, r7
 80159ac:	2d00      	cmp	r5, #0
 80159ae:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80159b2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80159b6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80159ba:	f2c0 811f 	blt.w	8015bfc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80159be:	45a8      	cmp	r8, r5
 80159c0:	f340 811c 	ble.w	8015bfc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80159c4:	2f00      	cmp	r7, #0
 80159c6:	f2c0 8117 	blt.w	8015bf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159ca:	42bb      	cmp	r3, r7
 80159cc:	f340 8114 	ble.w	8015bf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159d0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80159d4:	1c7a      	adds	r2, r7, #1
 80159d6:	f100 8114 	bmi.w	8015c02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159da:	4293      	cmp	r3, r2
 80159dc:	f340 8111 	ble.w	8015c02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159e0:	2c00      	cmp	r4, #0
 80159e2:	f000 8110 	beq.w	8015c06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80159e6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80159ea:	3501      	adds	r5, #1
 80159ec:	f100 810f 	bmi.w	8015c0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80159f0:	45a8      	cmp	r8, r5
 80159f2:	f340 810c 	ble.w	8015c0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80159f6:	f1be 0f00 	cmp.w	lr, #0
 80159fa:	f000 810b 	beq.w	8015c14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80159fe:	2f00      	cmp	r7, #0
 8015a00:	f2c0 8103 	blt.w	8015c0a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8015a04:	42bb      	cmp	r3, r7
 8015a06:	f340 8100 	ble.w	8015c0a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8015a0a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8015a0e:	3701      	adds	r7, #1
 8015a10:	f100 8103 	bmi.w	8015c1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8015a14:	42bb      	cmp	r3, r7
 8015a16:	f340 8100 	ble.w	8015c1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8015a1a:	2c00      	cmp	r4, #0
 8015a1c:	f000 80ff 	beq.w	8015c1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8015a20:	3301      	adds	r3, #1
 8015a22:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a26:	fa1f fc84 	uxth.w	ip, r4
 8015a2a:	fa1f fe8e 	uxth.w	lr, lr
 8015a2e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8015a32:	fb0c f90e 	mul.w	r9, ip, lr
 8015a36:	0e13      	lsrs	r3, r2, #24
 8015a38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015a3c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8015a40:	9302      	str	r3, [sp, #8]
 8015a42:	ebac 0709 	sub.w	r7, ip, r9
 8015a46:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8015a4a:	fa1f f48e 	uxth.w	r4, lr
 8015a4e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8015a52:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015a56:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8015a5a:	fb0a fe0e 	mul.w	lr, sl, lr
 8015a5e:	1b1b      	subs	r3, r3, r4
 8015a60:	fb0a f606 	mul.w	r6, sl, r6
 8015a64:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8015a68:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8015a6c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015a76:	b2bf      	uxth	r7, r7
 8015a78:	9301      	str	r3, [sp, #4]
 8015a7a:	44e6      	add	lr, ip
 8015a7c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8015a80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015a84:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8015a88:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8015a8c:	9303      	str	r3, [sp, #12]
 8015a8e:	0a33      	lsrs	r3, r6, #8
 8015a90:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8015a94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015a98:	9304      	str	r3, [sp, #16]
 8015a9a:	fb0b f606 	mul.w	r6, fp, r6
 8015a9e:	fb0b f000 	mul.w	r0, fp, r0
 8015aa2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8015aa6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015aaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015aae:	44b6      	add	lr, r6
 8015ab0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8015ab4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8015ab8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8015abc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8015ac0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015ac4:	fb08 f606 	mul.w	r6, r8, r6
 8015ac8:	0a03      	lsrs	r3, r0, #8
 8015aca:	fb08 f505 	mul.w	r5, r8, r5
 8015ace:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015ad2:	0a30      	lsrs	r0, r6, #8
 8015ad4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015ad8:	9305      	str	r3, [sp, #20]
 8015ada:	0e13      	lsrs	r3, r2, #24
 8015adc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015ae0:	fb0e fe07 	mul.w	lr, lr, r7
 8015ae4:	4430      	add	r0, r6
 8015ae6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8015aea:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015aee:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8015af2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015af6:	0a00      	lsrs	r0, r0, #8
 8015af8:	435e      	muls	r6, r3
 8015afa:	0a2d      	lsrs	r5, r5, #8
 8015afc:	435a      	muls	r2, r3
 8015afe:	9b03      	ldr	r3, [sp, #12]
 8015b00:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8015b04:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015b08:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015b0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b10:	44b4      	add	ip, r6
 8015b12:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8015b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b1a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8015b1e:	9e01      	ldr	r6, [sp, #4]
 8015b20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b24:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b28:	9b04      	ldr	r3, [sp, #16]
 8015b2a:	0a12      	lsrs	r2, r2, #8
 8015b2c:	fb0c ee09 	mla	lr, ip, r9, lr
 8015b30:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8015b34:	9b05      	ldr	r3, [sp, #20]
 8015b36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015b3a:	fb00 ee04 	mla	lr, r0, r4, lr
 8015b3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b42:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8015b46:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8015b4a:	9b01      	ldr	r3, [sp, #4]
 8015b4c:	fb07 fe0e 	mul.w	lr, r7, lr
 8015b50:	fb07 f70b 	mul.w	r7, r7, fp
 8015b54:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b58:	fb03 730a 	mla	r3, r3, sl, r7
 8015b5c:	fb09 e202 	mla	r2, r9, r2, lr
 8015b60:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8015b64:	fb04 2e0e 	mla	lr, r4, lr, r2
 8015b68:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8015b6c:	fb04 3408 	mla	r4, r4, r8, r3
 8015b70:	9b02      	ldr	r3, [sp, #8]
 8015b72:	b292      	uxth	r2, r2
 8015b74:	fb09 4903 	mla	r9, r9, r3, r4
 8015b78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b7c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8015b80:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015b84:	fb09 f902 	mul.w	r9, r9, r2
 8015b88:	ea40 0e0e 	orr.w	lr, r0, lr
 8015b8c:	f109 0301 	add.w	r3, r9, #1
 8015b90:	fa5f f08e 	uxtb.w	r0, lr
 8015b94:	fb10 f002 	smulbb	r0, r0, r2
 8015b98:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8015b9c:	780b      	ldrb	r3, [r1, #0]
 8015b9e:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8015ba2:	fa5f f989 	uxtb.w	r9, r9
 8015ba6:	fb03 0309 	mla	r3, r3, r9, r0
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	1c58      	adds	r0, r3, #1
 8015bae:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015bb2:	7848      	ldrb	r0, [r1, #1]
 8015bb4:	fb10 f009 	smulbb	r0, r0, r9
 8015bb8:	121b      	asrs	r3, r3, #8
 8015bba:	700b      	strb	r3, [r1, #0]
 8015bbc:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8015bc0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015bc4:	fb03 0302 	mla	r3, r3, r2, r0
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	1c58      	adds	r0, r3, #1
 8015bcc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015bd0:	121b      	asrs	r3, r3, #8
 8015bd2:	704b      	strb	r3, [r1, #1]
 8015bd4:	788b      	ldrb	r3, [r1, #2]
 8015bd6:	fb13 f909 	smulbb	r9, r3, r9
 8015bda:	fb0e 9e02 	mla	lr, lr, r2, r9
 8015bde:	fa1f fe8e 	uxth.w	lr, lr
 8015be2:	f10e 0301 	add.w	r3, lr, #1
 8015be6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8015bea:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015bee:	f881 e002 	strb.w	lr, [r1, #2]
 8015bf2:	b007      	add	sp, #28
 8015bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf8:	2600      	movs	r6, #0
 8015bfa:	e6eb      	b.n	80159d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8015bfc:	2000      	movs	r0, #0
 8015bfe:	4606      	mov	r6, r0
 8015c00:	e6f3      	b.n	80159ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c02:	2000      	movs	r0, #0
 8015c04:	e6f1      	b.n	80159ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c06:	4620      	mov	r0, r4
 8015c08:	e6ef      	b.n	80159ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c0a:	2500      	movs	r5, #0
 8015c0c:	e6ff      	b.n	8015a0e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8015c0e:	2200      	movs	r2, #0
 8015c10:	4615      	mov	r5, r2
 8015c12:	e708      	b.n	8015a26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c14:	4672      	mov	r2, lr
 8015c16:	4675      	mov	r5, lr
 8015c18:	e705      	b.n	8015a26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	e703      	b.n	8015a26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c1e:	4622      	mov	r2, r4
 8015c20:	e701      	b.n	8015a26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08015c22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c26:	b09d      	sub	sp, #116	; 0x74
 8015c28:	9219      	str	r2, [sp, #100]	; 0x64
 8015c2a:	9307      	str	r3, [sp, #28]
 8015c2c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015c2e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8015c32:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c34:	931a      	str	r3, [sp, #104]	; 0x68
 8015c36:	6850      	ldr	r0, [r2, #4]
 8015c38:	9117      	str	r1, [sp, #92]	; 0x5c
 8015c3a:	6812      	ldr	r2, [r2, #0]
 8015c3c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8015c40:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8015c44:	fb00 1303 	mla	r3, r0, r3, r1
 8015c48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c4c:	18d3      	adds	r3, r2, r3
 8015c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	9310      	str	r3, [sp, #64]	; 0x40
 8015c56:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8015c5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	dc03      	bgt.n	8015c6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f340 8368 	ble.w	801633a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015c6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c6c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015c70:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015c74:	1e48      	subs	r0, r1, #1
 8015c76:	1e57      	subs	r7, r2, #1
 8015c78:	9b07      	ldr	r3, [sp, #28]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	f340 8187 	ble.w	8015f8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8015c80:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8015c84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8015c88:	d406      	bmi.n	8015c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c8a:	4584      	cmp	ip, r0
 8015c8c:	da04      	bge.n	8015c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	db02      	blt.n	8015c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c92:	42bb      	cmp	r3, r7
 8015c94:	f2c0 817c 	blt.w	8015f90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015c98:	f11c 0c01 	adds.w	ip, ip, #1
 8015c9c:	f100 816c 	bmi.w	8015f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015ca0:	4561      	cmp	r1, ip
 8015ca2:	f2c0 8169 	blt.w	8015f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	f100 8166 	bmi.w	8015f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cac:	429a      	cmp	r2, r3
 8015cae:	f2c0 8163 	blt.w	8015f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cb2:	9b07      	ldr	r3, [sp, #28]
 8015cb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8015cb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f340 8186 	ble.w	8015fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8015cc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015cc2:	142a      	asrs	r2, r5, #16
 8015cc4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8015cc8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015ccc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8015cd0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8015cd4:	f100 81cb 	bmi.w	801606e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cd8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015cdc:	4542      	cmp	r2, r8
 8015cde:	f280 81c6 	bge.w	801606e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	f2c0 81c3 	blt.w	801606e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015ce8:	f103 38ff 	add.w	r8, r3, #4294967295
 8015cec:	4540      	cmp	r0, r8
 8015cee:	f280 81be 	bge.w	801606e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cf2:	fa0f f38e 	sxth.w	r3, lr
 8015cf6:	fb00 2203 	mla	r2, r0, r3, r2
 8015cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015cfc:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8015d00:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8015d04:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8015d08:	2900      	cmp	r1, #0
 8015d0a:	f000 81a6 	beq.w	801605a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8015d0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d12:	900c      	str	r0, [sp, #48]	; 0x30
 8015d14:	0e00      	lsrs	r0, r0, #24
 8015d16:	9013      	str	r0, [sp, #76]	; 0x4c
 8015d18:	f1bc 0f00 	cmp.w	ip, #0
 8015d1c:	d00f      	beq.n	8015d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d22:	3b01      	subs	r3, #1
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	3304      	adds	r3, #4
 8015d28:	eb08 0003 	add.w	r0, r8, r3
 8015d2c:	f858 3003 	ldr.w	r3, [r8, r3]
 8015d30:	9308      	str	r3, [sp, #32]
 8015d32:	0e1b      	lsrs	r3, r3, #24
 8015d34:	9311      	str	r3, [sp, #68]	; 0x44
 8015d36:	6843      	ldr	r3, [r0, #4]
 8015d38:	930d      	str	r3, [sp, #52]	; 0x34
 8015d3a:	0e1b      	lsrs	r3, r3, #24
 8015d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8015d3e:	b289      	uxth	r1, r1
 8015d40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015d42:	fa1f fc8c 	uxth.w	ip, ip
 8015d46:	0108      	lsls	r0, r1, #4
 8015d48:	fb01 f90c 	mul.w	r9, r1, ip
 8015d4c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8015d50:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8015d54:	eba0 0809 	sub.w	r8, r0, r9
 8015d58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015d5a:	fa1f f18c 	uxth.w	r1, ip
 8015d5e:	fa1f f888 	uxth.w	r8, r8
 8015d62:	1a5b      	subs	r3, r3, r1
 8015d64:	fb08 f000 	mul.w	r0, r8, r0
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	fb03 000e 	mla	r0, r3, lr, r0
 8015d6e:	fb01 0004 	mla	r0, r1, r4, r0
 8015d72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015d74:	fb09 0004 	mla	r0, r9, r4, r0
 8015d78:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	f000 80f2 	beq.w	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015d82:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015d86:	d01b      	beq.n	8015dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015d88:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8015d8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015d90:	fb0e fa0a 	mul.w	sl, lr, sl
 8015d94:	fb0e fe02 	mul.w	lr, lr, r2
 8015d98:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8015d9c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015da0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015da4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015da8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015dac:	4452      	add	r2, sl
 8015dae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015db2:	0a12      	lsrs	r2, r2, #8
 8015db4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015db8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015dbc:	ea42 020c 	orr.w	r2, r2, ip
 8015dc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dc2:	2cff      	cmp	r4, #255	; 0xff
 8015dc4:	d021      	beq.n	8015e0a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015dc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015dc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015dcc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dce:	fb04 fb0b 	mul.w	fp, r4, fp
 8015dd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015dd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015dd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dda:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015dde:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015de2:	fb04 fa0a 	mul.w	sl, r4, sl
 8015de6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015dea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015dee:	44de      	add	lr, fp
 8015df0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015df4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015df8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015dfc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e04:	ea4e 040a 	orr.w	r4, lr, sl
 8015e08:	940c      	str	r4, [sp, #48]	; 0x30
 8015e0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e0c:	2cff      	cmp	r4, #255	; 0xff
 8015e0e:	d021      	beq.n	8015e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8015e10:	9c08      	ldr	r4, [sp, #32]
 8015e12:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e16:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e18:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e1c:	9c08      	ldr	r4, [sp, #32]
 8015e1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e24:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e34:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e38:	44de      	add	lr, fp
 8015e3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e4e:	ea4e 040a 	orr.w	r4, lr, sl
 8015e52:	9408      	str	r4, [sp, #32]
 8015e54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e56:	2cff      	cmp	r4, #255	; 0xff
 8015e58:	d021      	beq.n	8015e9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8015e5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e5c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e62:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e6e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e72:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e76:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e7e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e82:	44de      	add	lr, fp
 8015e84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e98:	ea4e 040a 	orr.w	r4, lr, sl
 8015e9c:	940d      	str	r4, [sp, #52]	; 0x34
 8015e9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ea0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8015ea4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015ea8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015eac:	9c08      	ldr	r4, [sp, #32]
 8015eae:	fb08 fc0c 	mul.w	ip, r8, ip
 8015eb2:	fb03 cc0e 	mla	ip, r3, lr, ip
 8015eb6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015eba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015ebc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015ec0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015ec4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ec6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015eca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015ece:	fb08 f80e 	mul.w	r8, r8, lr
 8015ed2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015ed6:	fb03 8202 	mla	r2, r3, r2, r8
 8015eda:	9b08      	ldr	r3, [sp, #32]
 8015edc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ee0:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8015ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ee6:	fb01 220a 	mla	r2, r1, sl, r2
 8015eea:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8015eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ef0:	fb09 2901 	mla	r9, r9, r1, r2
 8015ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ef6:	4343      	muls	r3, r0
 8015ef8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015efc:	1c58      	adds	r0, r3, #1
 8015efe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015f02:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015f06:	783b      	ldrb	r3, [r7, #0]
 8015f08:	ea4c 0c09 	orr.w	ip, ip, r9
 8015f0c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8015f10:	fa5f f28c 	uxtb.w	r2, ip
 8015f14:	b2c0      	uxtb	r0, r0
 8015f16:	fb12 f201 	smulbb	r2, r2, r1
 8015f1a:	fb03 2300 	mla	r3, r3, r0, r2
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	1c5a      	adds	r2, r3, #1
 8015f22:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f26:	787a      	ldrb	r2, [r7, #1]
 8015f28:	fb12 f200 	smulbb	r2, r2, r0
 8015f2c:	121b      	asrs	r3, r3, #8
 8015f2e:	703b      	strb	r3, [r7, #0]
 8015f30:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015f34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015f38:	fb03 2301 	mla	r3, r3, r1, r2
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	1c5a      	adds	r2, r3, #1
 8015f40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f44:	121b      	asrs	r3, r3, #8
 8015f46:	707b      	strb	r3, [r7, #1]
 8015f48:	78bb      	ldrb	r3, [r7, #2]
 8015f4a:	fb13 f000 	smulbb	r0, r3, r0
 8015f4e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8015f52:	fa1f fc8c 	uxth.w	ip, ip
 8015f56:	f10c 0301 	add.w	r3, ip, #1
 8015f5a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015f5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015f62:	f887 c002 	strb.w	ip, [r7, #2]
 8015f66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f68:	3703      	adds	r7, #3
 8015f6a:	441d      	add	r5, r3
 8015f6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f6e:	441e      	add	r6, r3
 8015f70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015f72:	3b01      	subs	r3, #1
 8015f74:	9318      	str	r3, [sp, #96]	; 0x60
 8015f76:	e69f      	b.n	8015cb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015f78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f7a:	441d      	add	r5, r3
 8015f7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f7e:	441e      	add	r6, r3
 8015f80:	9b07      	ldr	r3, [sp, #28]
 8015f82:	3b01      	subs	r3, #1
 8015f84:	9307      	str	r3, [sp, #28]
 8015f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f88:	3303      	adds	r3, #3
 8015f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f8c:	e674      	b.n	8015c78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8015f8e:	d025      	beq.n	8015fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8015f90:	9b07      	ldr	r3, [sp, #28]
 8015f92:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015f94:	3b01      	subs	r3, #1
 8015f96:	fb00 5003 	mla	r0, r0, r3, r5
 8015f9a:	1400      	asrs	r0, r0, #16
 8015f9c:	f53f ae89 	bmi.w	8015cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fa0:	3901      	subs	r1, #1
 8015fa2:	4288      	cmp	r0, r1
 8015fa4:	f6bf ae85 	bge.w	8015cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fa8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015faa:	fb01 6303 	mla	r3, r1, r3, r6
 8015fae:	141b      	asrs	r3, r3, #16
 8015fb0:	f53f ae7f 	bmi.w	8015cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fb4:	3a01      	subs	r2, #1
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	f6bf ae7b 	bge.w	8015cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8015fc2:	f103 0e03 	add.w	lr, r3, #3
 8015fc6:	f1bb 0f00 	cmp.w	fp, #0
 8015fca:	dc6e      	bgt.n	80160aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8015fcc:	9b07      	ldr	r3, [sp, #28]
 8015fce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015fd8:	4423      	add	r3, r4
 8015fda:	930a      	str	r3, [sp, #40]	; 0x28
 8015fdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	f340 81ab 	ble.w	801633a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015fea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015fee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ff2:	eef0 6a62 	vmov.f32	s13, s5
 8015ff6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ffa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015ffe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016002:	ee16 5a90 	vmov	r5, s13
 8016006:	eef0 6a43 	vmov.f32	s13, s6
 801600a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801600e:	ee16 6a90 	vmov	r6, s13
 8016012:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016016:	ee61 7a27 	vmul.f32	s15, s2, s15
 801601a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801601e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016022:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016026:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801602a:	ee12 2a90 	vmov	r2, s5
 801602e:	eef0 2a47 	vmov.f32	s5, s14
 8016032:	fb92 f3f3 	sdiv	r3, r2, r3
 8016036:	ee13 2a10 	vmov	r2, s6
 801603a:	9329      	str	r3, [sp, #164]	; 0xa4
 801603c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801603e:	eeb0 3a67 	vmov.f32	s6, s15
 8016042:	fb92 f3f3 	sdiv	r3, r2, r3
 8016046:	932a      	str	r3, [sp, #168]	; 0xa8
 8016048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801604a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801604c:	3b01      	subs	r3, #1
 801604e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016050:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016052:	bf08      	it	eq
 8016054:	4613      	moveq	r3, r2
 8016056:	9307      	str	r3, [sp, #28]
 8016058:	e600      	b.n	8015c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801605a:	f1bc 0f00 	cmp.w	ip, #0
 801605e:	f43f ae6e 	beq.w	8015d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016062:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016066:	9308      	str	r3, [sp, #32]
 8016068:	0e1b      	lsrs	r3, r3, #24
 801606a:	9311      	str	r3, [sp, #68]	; 0x44
 801606c:	e667      	b.n	8015d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801606e:	f112 0801 	adds.w	r8, r2, #1
 8016072:	f53f af78 	bmi.w	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016076:	45c6      	cmp	lr, r8
 8016078:	f6ff af75 	blt.w	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801607c:	f110 0801 	adds.w	r8, r0, #1
 8016080:	f53f af71 	bmi.w	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016084:	4543      	cmp	r3, r8
 8016086:	f6ff af6e 	blt.w	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801608a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801608c:	b21b      	sxth	r3, r3
 801608e:	9201      	str	r2, [sp, #4]
 8016090:	9300      	str	r3, [sp, #0]
 8016092:	fa0f f38e 	sxth.w	r3, lr
 8016096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801609c:	e9cd c404 	strd	ip, r4, [sp, #16]
 80160a0:	4639      	mov	r1, r7
 80160a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80160a4:	f7ff fc79 	bl	801599a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80160a8:	e75d      	b.n	8015f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80160aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80160ac:	142f      	asrs	r7, r5, #16
 80160ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80160b0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80160b4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80160b8:	1433      	asrs	r3, r6, #16
 80160ba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80160be:	fb02 7303 	mla	r3, r2, r3, r7
 80160c2:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80160c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80160ca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80160ce:	2900      	cmp	r1, #0
 80160d0:	f000 812a 	beq.w	8016328 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80160d4:	687c      	ldr	r4, [r7, #4]
 80160d6:	940e      	str	r4, [sp, #56]	; 0x38
 80160d8:	0e24      	lsrs	r4, r4, #24
 80160da:	9415      	str	r4, [sp, #84]	; 0x54
 80160dc:	b178      	cbz	r0, 80160fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80160de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80160e2:	3a01      	subs	r2, #1
 80160e4:	0092      	lsls	r2, r2, #2
 80160e6:	3204      	adds	r2, #4
 80160e8:	eb07 0802 	add.w	r8, r7, r2
 80160ec:	58ba      	ldr	r2, [r7, r2]
 80160ee:	9209      	str	r2, [sp, #36]	; 0x24
 80160f0:	0e12      	lsrs	r2, r2, #24
 80160f2:	9212      	str	r2, [sp, #72]	; 0x48
 80160f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80160f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80160fa:	0e12      	lsrs	r2, r2, #24
 80160fc:	9216      	str	r2, [sp, #88]	; 0x58
 80160fe:	b289      	uxth	r1, r1
 8016100:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016102:	b280      	uxth	r0, r0
 8016104:	fb01 f900 	mul.w	r9, r1, r0
 8016108:	0109      	lsls	r1, r1, #4
 801610a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801610e:	eba1 0809 	sub.w	r8, r1, r9
 8016112:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8016116:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016118:	b280      	uxth	r0, r0
 801611a:	fa1f f888 	uxth.w	r8, r8
 801611e:	1a12      	subs	r2, r2, r0
 8016120:	fb08 f101 	mul.w	r1, r8, r1
 8016124:	b292      	uxth	r2, r2
 8016126:	fb02 110c 	mla	r1, r2, ip, r1
 801612a:	fb00 1104 	mla	r1, r0, r4, r1
 801612e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016130:	fb09 1104 	mla	r1, r9, r4, r1
 8016134:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016138:	2900      	cmp	r1, #0
 801613a:	f000 80ec 	beq.w	8016316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801613e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016142:	d019      	beq.n	8016178 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8016144:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016148:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801614c:	fb0c fa0a 	mul.w	sl, ip, sl
 8016150:	fb0c fc03 	mul.w	ip, ip, r3
 8016154:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016158:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801615c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016160:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016164:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016168:	4453      	add	r3, sl
 801616a:	0a3f      	lsrs	r7, r7, #8
 801616c:	0a1b      	lsrs	r3, r3, #8
 801616e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016172:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016176:	433b      	orrs	r3, r7
 8016178:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801617a:	2cff      	cmp	r4, #255	; 0xff
 801617c:	d020      	beq.n	80161c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801617e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016180:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016184:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016186:	4367      	muls	r7, r4
 8016188:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801618a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801618e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016192:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016194:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801619c:	fb04 fa0a 	mul.w	sl, r4, sl
 80161a0:	44bc      	add	ip, r7
 80161a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80161aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80161b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80161ba:	ea4c 040a 	orr.w	r4, ip, sl
 80161be:	940e      	str	r4, [sp, #56]	; 0x38
 80161c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161c2:	2cff      	cmp	r4, #255	; 0xff
 80161c4:	d020      	beq.n	8016208 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80161c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80161cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161ce:	4367      	muls	r7, r4
 80161d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80161d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80161da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80161e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80161e8:	44bc      	add	ip, r7
 80161ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80161f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80161fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016202:	ea4c 040a 	orr.w	r4, ip, sl
 8016206:	9409      	str	r4, [sp, #36]	; 0x24
 8016208:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801620a:	2cff      	cmp	r4, #255	; 0xff
 801620c:	d020      	beq.n	8016250 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801620e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016210:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016214:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016216:	4367      	muls	r7, r4
 8016218:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801621a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801621e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016222:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016224:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016228:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801622c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016230:	44bc      	add	ip, r7
 8016232:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016236:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801623a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801623e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016242:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016246:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801624a:	ea4c 040a 	orr.w	r4, ip, sl
 801624e:	940f      	str	r4, [sp, #60]	; 0x3c
 8016250:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016252:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801625a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801625e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016260:	fb08 f707 	mul.w	r7, r8, r7
 8016264:	fb02 770c 	mla	r7, r2, ip, r7
 8016268:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801626c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801626e:	fb00 770c 	mla	r7, r0, ip, r7
 8016272:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016276:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016278:	fb09 770c 	mla	r7, r9, ip, r7
 801627c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8016280:	fb08 f80c 	mul.w	r8, r8, ip
 8016284:	0a3f      	lsrs	r7, r7, #8
 8016286:	fb02 8303 	mla	r3, r2, r3, r8
 801628a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801628c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8016290:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8016294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016296:	fb00 330a 	mla	r3, r0, sl, r3
 801629a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801629e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80162a0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80162a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80162aa:	434b      	muls	r3, r1
 80162ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80162b0:	1c59      	adds	r1, r3, #1
 80162b2:	ea47 070c 	orr.w	r7, r7, ip
 80162b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80162ba:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80162be:	b2fa      	uxtb	r2, r7
 80162c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80162c4:	fb12 f200 	smulbb	r2, r2, r0
 80162c8:	b2c9      	uxtb	r1, r1
 80162ca:	fb03 2301 	mla	r3, r3, r1, r2
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	1c5a      	adds	r2, r3, #1
 80162d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80162d6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80162da:	fb12 f201 	smulbb	r2, r2, r1
 80162de:	121b      	asrs	r3, r3, #8
 80162e0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80162e4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80162e8:	0c3f      	lsrs	r7, r7, #16
 80162ea:	fb03 2300 	mla	r3, r3, r0, r2
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	1c5a      	adds	r2, r3, #1
 80162f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80162f6:	121b      	asrs	r3, r3, #8
 80162f8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80162fc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8016300:	fb13 f101 	smulbb	r1, r3, r1
 8016304:	fb07 1700 	mla	r7, r7, r0, r1
 8016308:	b2bf      	uxth	r7, r7
 801630a:	1c79      	adds	r1, r7, #1
 801630c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8016310:	123f      	asrs	r7, r7, #8
 8016312:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8016316:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016318:	f10e 0e03 	add.w	lr, lr, #3
 801631c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016320:	441d      	add	r5, r3
 8016322:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016324:	441e      	add	r6, r3
 8016326:	e64e      	b.n	8015fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8016328:	2800      	cmp	r0, #0
 801632a:	f43f aee8 	beq.w	80160fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801632e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016332:	9209      	str	r2, [sp, #36]	; 0x24
 8016334:	0e12      	lsrs	r2, r2, #24
 8016336:	9212      	str	r2, [sp, #72]	; 0x48
 8016338:	e6e1      	b.n	80160fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801633a:	b01d      	add	sp, #116	; 0x74
 801633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016340 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8016340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016344:	b087      	sub	sp, #28
 8016346:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801634a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801634e:	fb05 7003 	mla	r0, r5, r3, r7
 8016352:	2d00      	cmp	r5, #0
 8016354:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016358:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801635c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8016360:	f2c0 810a 	blt.w	8016578 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8016364:	45a8      	cmp	r8, r5
 8016366:	f340 8107 	ble.w	8016578 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801636a:	2f00      	cmp	r7, #0
 801636c:	f2c0 8102 	blt.w	8016574 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016370:	42bb      	cmp	r3, r7
 8016372:	f340 80ff 	ble.w	8016574 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016376:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801637a:	1c7a      	adds	r2, r7, #1
 801637c:	f100 80ff 	bmi.w	801657e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016380:	4293      	cmp	r3, r2
 8016382:	f340 80fc 	ble.w	801657e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016386:	2c00      	cmp	r4, #0
 8016388:	f000 80fb 	beq.w	8016582 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801638c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016390:	3501      	adds	r5, #1
 8016392:	f100 80fa 	bmi.w	801658a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8016396:	45a8      	cmp	r8, r5
 8016398:	f340 80f7 	ble.w	801658a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801639c:	f1be 0f00 	cmp.w	lr, #0
 80163a0:	f000 80f6 	beq.w	8016590 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80163a4:	2f00      	cmp	r7, #0
 80163a6:	f2c0 80ee 	blt.w	8016586 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80163aa:	42bb      	cmp	r3, r7
 80163ac:	f340 80eb 	ble.w	8016586 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80163b0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80163b4:	3701      	adds	r7, #1
 80163b6:	f100 80ee 	bmi.w	8016596 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80163ba:	42bb      	cmp	r3, r7
 80163bc:	f340 80eb 	ble.w	8016596 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80163c0:	2c00      	cmp	r4, #0
 80163c2:	f000 80ea 	beq.w	801659a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80163c6:	3301      	adds	r3, #1
 80163c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163cc:	fa1f fc84 	uxth.w	ip, r4
 80163d0:	fa1f fe8e 	uxth.w	lr, lr
 80163d4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80163d8:	fb0c f90e 	mul.w	r9, ip, lr
 80163dc:	0e13      	lsrs	r3, r2, #24
 80163de:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80163e2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80163e6:	9302      	str	r3, [sp, #8]
 80163e8:	ebac 0709 	sub.w	r7, ip, r9
 80163ec:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80163f0:	fa1f f48e 	uxth.w	r4, lr
 80163f4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80163f8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80163fc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8016400:	fb0a fe0e 	mul.w	lr, sl, lr
 8016404:	1b1b      	subs	r3, r3, r4
 8016406:	fb0a f606 	mul.w	r6, sl, r6
 801640a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801640e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8016412:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8016416:	b29b      	uxth	r3, r3
 8016418:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801641c:	b2bf      	uxth	r7, r7
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	44e6      	add	lr, ip
 8016422:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016426:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801642a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801642e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8016432:	9303      	str	r3, [sp, #12]
 8016434:	0a33      	lsrs	r3, r6, #8
 8016436:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801643a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801643e:	9304      	str	r3, [sp, #16]
 8016440:	fb0b f606 	mul.w	r6, fp, r6
 8016444:	fb0b f000 	mul.w	r0, fp, r0
 8016448:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801644c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8016450:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016454:	44b6      	add	lr, r6
 8016456:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801645a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801645e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8016462:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016466:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801646a:	fb08 f606 	mul.w	r6, r8, r6
 801646e:	0a03      	lsrs	r3, r0, #8
 8016470:	fb08 f505 	mul.w	r5, r8, r5
 8016474:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016478:	0a30      	lsrs	r0, r6, #8
 801647a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801647e:	9305      	str	r3, [sp, #20]
 8016480:	0e13      	lsrs	r3, r2, #24
 8016482:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016486:	fb0e fe07 	mul.w	lr, lr, r7
 801648a:	4430      	add	r0, r6
 801648c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8016490:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016494:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8016498:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801649c:	0a00      	lsrs	r0, r0, #8
 801649e:	435e      	muls	r6, r3
 80164a0:	0a2d      	lsrs	r5, r5, #8
 80164a2:	435a      	muls	r2, r3
 80164a4:	9b03      	ldr	r3, [sp, #12]
 80164a6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80164aa:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80164ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80164b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80164b6:	44b4      	add	ip, r6
 80164b8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80164bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80164c0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80164c4:	9e01      	ldr	r6, [sp, #4]
 80164c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80164ca:	fb03 ee06 	mla	lr, r3, r6, lr
 80164ce:	9b04      	ldr	r3, [sp, #16]
 80164d0:	0a12      	lsrs	r2, r2, #8
 80164d2:	fb0c ee09 	mla	lr, ip, r9, lr
 80164d6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80164da:	9b05      	ldr	r3, [sp, #20]
 80164dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80164e0:	fb00 ee04 	mla	lr, r0, r4, lr
 80164e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80164e8:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80164ec:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80164f0:	9b01      	ldr	r3, [sp, #4]
 80164f2:	fb07 fe0e 	mul.w	lr, r7, lr
 80164f6:	fb07 f70b 	mul.w	r7, r7, fp
 80164fa:	fb03 ee06 	mla	lr, r3, r6, lr
 80164fe:	fb03 730a 	mla	r3, r3, sl, r7
 8016502:	fb09 e202 	mla	r2, r9, r2, lr
 8016506:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801650a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801650e:	fb04 3408 	mla	r4, r4, r8, r3
 8016512:	9b02      	ldr	r3, [sp, #8]
 8016514:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016518:	fb09 4903 	mla	r9, r9, r3, r4
 801651c:	780b      	ldrb	r3, [r1, #0]
 801651e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016522:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8016526:	ea40 0e0e 	orr.w	lr, r0, lr
 801652a:	fa5f f989 	uxtb.w	r9, r9
 801652e:	fb03 f209 	mul.w	r2, r3, r9
 8016532:	1c53      	adds	r3, r2, #1
 8016534:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016538:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801653c:	700b      	strb	r3, [r1, #0]
 801653e:	784b      	ldrb	r3, [r1, #1]
 8016540:	fb03 f309 	mul.w	r3, r3, r9
 8016544:	1c5a      	adds	r2, r3, #1
 8016546:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801654a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801654e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8016552:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016556:	704b      	strb	r3, [r1, #1]
 8016558:	788b      	ldrb	r3, [r1, #2]
 801655a:	fb03 f909 	mul.w	r9, r3, r9
 801655e:	f109 0301 	add.w	r3, r9, #1
 8016562:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8016566:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801656a:	f881 e002 	strb.w	lr, [r1, #2]
 801656e:	b007      	add	sp, #28
 8016570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016574:	2600      	movs	r6, #0
 8016576:	e700      	b.n	801637a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8016578:	2000      	movs	r0, #0
 801657a:	4606      	mov	r6, r0
 801657c:	e708      	b.n	8016390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801657e:	2000      	movs	r0, #0
 8016580:	e706      	b.n	8016390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016582:	4620      	mov	r0, r4
 8016584:	e704      	b.n	8016390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016586:	2500      	movs	r5, #0
 8016588:	e714      	b.n	80163b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801658a:	2200      	movs	r2, #0
 801658c:	4615      	mov	r5, r2
 801658e:	e71d      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8016590:	4672      	mov	r2, lr
 8016592:	4675      	mov	r5, lr
 8016594:	e71a      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8016596:	2200      	movs	r2, #0
 8016598:	e718      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801659a:	4622      	mov	r2, r4
 801659c:	e716      	b.n	80163cc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801659e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801659e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a2:	b099      	sub	sp, #100	; 0x64
 80165a4:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80165a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80165aa:	9017      	str	r0, [sp, #92]	; 0x5c
 80165ac:	9306      	str	r3, [sp, #24]
 80165ae:	6850      	ldr	r0, [r2, #4]
 80165b0:	6812      	ldr	r2, [r2, #0]
 80165b2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80165b6:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 80165ba:	fb00 1303 	mla	r3, r0, r3, r1
 80165be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165c2:	18d3      	adds	r3, r2, r3
 80165c4:	9309      	str	r3, [sp, #36]	; 0x24
 80165c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	930e      	str	r3, [sp, #56]	; 0x38
 80165cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	dc03      	bgt.n	80165da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80165d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	f340 8360 	ble.w	8016c9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80165da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80165e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80165e4:	1e48      	subs	r0, r1, #1
 80165e6:	1e57      	subs	r7, r2, #1
 80165e8:	9b06      	ldr	r3, [sp, #24]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	f340 817b 	ble.w	80168e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80165f0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80165f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80165f8:	d406      	bmi.n	8016608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80165fa:	4584      	cmp	ip, r0
 80165fc:	da04      	bge.n	8016608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80165fe:	2b00      	cmp	r3, #0
 8016600:	db02      	blt.n	8016608 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016602:	42bb      	cmp	r3, r7
 8016604:	f2c0 8170 	blt.w	80168e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8016608:	f11c 0c01 	adds.w	ip, ip, #1
 801660c:	f100 8160 	bmi.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016610:	4561      	cmp	r1, ip
 8016612:	f2c0 815d 	blt.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016616:	3301      	adds	r3, #1
 8016618:	f100 815a 	bmi.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801661c:	429a      	cmp	r2, r3
 801661e:	f2c0 8157 	blt.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016622:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016626:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016628:	f1b8 0f00 	cmp.w	r8, #0
 801662c:	f340 8179 	ble.w	8016922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016630:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016632:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8016636:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016638:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801663c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8016640:	142a      	asrs	r2, r5, #16
 8016642:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016646:	689b      	ldr	r3, [r3, #8]
 8016648:	f100 81be 	bmi.w	80169c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801664c:	f103 39ff 	add.w	r9, r3, #4294967295
 8016650:	454a      	cmp	r2, r9
 8016652:	f280 81b9 	bge.w	80169c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016656:	f1bc 0f00 	cmp.w	ip, #0
 801665a:	f2c0 81b5 	blt.w	80169c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801665e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8016662:	45cc      	cmp	ip, r9
 8016664:	f280 81b0 	bge.w	80169c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016668:	b21b      	sxth	r3, r3
 801666a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801666c:	fb0c 2203 	mla	r2, ip, r3, r2
 8016670:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8016674:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016678:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801667c:	2900      	cmp	r1, #0
 801667e:	f000 8197 	beq.w	80169b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8016682:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016686:	940a      	str	r4, [sp, #40]	; 0x28
 8016688:	0e24      	lsrs	r4, r4, #24
 801668a:	9411      	str	r4, [sp, #68]	; 0x44
 801668c:	b180      	cbz	r0, 80166b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801668e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016692:	3b01      	subs	r3, #1
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	3304      	adds	r3, #4
 8016698:	eb09 0c03 	add.w	ip, r9, r3
 801669c:	f859 3003 	ldr.w	r3, [r9, r3]
 80166a0:	9307      	str	r3, [sp, #28]
 80166a2:	0e1b      	lsrs	r3, r3, #24
 80166a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80166a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80166aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80166ac:	0e1b      	lsrs	r3, r3, #24
 80166ae:	9312      	str	r3, [sp, #72]	; 0x48
 80166b0:	b289      	uxth	r1, r1
 80166b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166b4:	b280      	uxth	r0, r0
 80166b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80166b8:	fb01 fa00 	mul.w	sl, r1, r0
 80166bc:	0109      	lsls	r1, r1, #4
 80166be:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80166c2:	eba1 090a 	sub.w	r9, r1, sl
 80166c6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80166ca:	b280      	uxth	r0, r0
 80166cc:	fa1f f989 	uxth.w	r9, r9
 80166d0:	1a09      	subs	r1, r1, r0
 80166d2:	fb09 f303 	mul.w	r3, r9, r3
 80166d6:	b289      	uxth	r1, r1
 80166d8:	fb01 330e 	mla	r3, r1, lr, r3
 80166dc:	fb00 3304 	mla	r3, r0, r4, r3
 80166e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80166e2:	fb0a 3304 	mla	r3, sl, r4, r3
 80166e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	f000 80e8 	beq.w	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80166f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80166f4:	d01b      	beq.n	801672e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80166f6:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80166fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80166fe:	fb0e fb0b 	mul.w	fp, lr, fp
 8016702:	fb0e fe02 	mul.w	lr, lr, r2
 8016706:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801670a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801670e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016712:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016716:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801671a:	445a      	add	r2, fp
 801671c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016720:	0a12      	lsrs	r2, r2, #8
 8016722:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016726:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801672a:	ea42 020c 	orr.w	r2, r2, ip
 801672e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016730:	2cff      	cmp	r4, #255	; 0xff
 8016732:	d021      	beq.n	8016778 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8016734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016736:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801673a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801673c:	fb04 fc0c 	mul.w	ip, r4, ip
 8016740:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016742:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016746:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801674a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801674c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016750:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016754:	fb04 fb0b 	mul.w	fp, r4, fp
 8016758:	44e6      	add	lr, ip
 801675a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801675e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016762:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8016766:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801676a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801676e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016772:	ea4e 040b 	orr.w	r4, lr, fp
 8016776:	940a      	str	r4, [sp, #40]	; 0x28
 8016778:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801677a:	2cff      	cmp	r4, #255	; 0xff
 801677c:	d021      	beq.n	80167c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801677e:	9c07      	ldr	r4, [sp, #28]
 8016780:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016784:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016786:	fb04 fc0c 	mul.w	ip, r4, ip
 801678a:	9c07      	ldr	r4, [sp, #28]
 801678c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016790:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8016794:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016796:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801679a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801679e:	fb04 fb0b 	mul.w	fp, r4, fp
 80167a2:	44e6      	add	lr, ip
 80167a4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80167a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80167ac:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80167b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167b4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80167b8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80167bc:	ea4e 040b 	orr.w	r4, lr, fp
 80167c0:	9407      	str	r4, [sp, #28]
 80167c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167c4:	2cff      	cmp	r4, #255	; 0xff
 80167c6:	d021      	beq.n	801680c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80167c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80167ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167d0:	fb04 fc0c 	mul.w	ip, r4, ip
 80167d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167d6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80167da:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80167de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80167e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80167ec:	44e6      	add	lr, ip
 80167ee:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80167f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80167f6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80167fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167fe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8016802:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016806:	ea4e 040b 	orr.w	r4, lr, fp
 801680a:	940b      	str	r4, [sp, #44]	; 0x2c
 801680c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801680e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8016812:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016816:	2bff      	cmp	r3, #255	; 0xff
 8016818:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801681c:	9c07      	ldr	r4, [sp, #28]
 801681e:	fb09 fc0c 	mul.w	ip, r9, ip
 8016822:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016826:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801682a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801682c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016830:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016836:	fb0a cc0e 	mla	ip, sl, lr, ip
 801683a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801683e:	fb09 f90e 	mul.w	r9, r9, lr
 8016842:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016846:	fb01 9202 	mla	r2, r1, r2, r9
 801684a:	9907      	ldr	r1, [sp, #28]
 801684c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016850:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8016854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016856:	fb00 220b 	mla	r2, r0, fp, r2
 801685a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801685e:	fb0a 2a00 	mla	sl, sl, r0, r2
 8016862:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016866:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801686a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801686e:	fa5f f08c 	uxtb.w	r0, ip
 8016872:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016876:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801687a:	f000 80a2 	beq.w	80169c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801687e:	43db      	mvns	r3, r3
 8016880:	783a      	ldrb	r2, [r7, #0]
 8016882:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016886:	b2db      	uxtb	r3, r3
 8016888:	fb02 fe03 	mul.w	lr, r2, r3
 801688c:	fb0a fa03 	mul.w	sl, sl, r3
 8016890:	f10e 0201 	add.w	r2, lr, #1
 8016894:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8016898:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801689c:	703a      	strb	r2, [r7, #0]
 801689e:	787a      	ldrb	r2, [r7, #1]
 80168a0:	fb02 f003 	mul.w	r0, r2, r3
 80168a4:	f10a 0301 	add.w	r3, sl, #1
 80168a8:	1c42      	adds	r2, r0, #1
 80168aa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80168ae:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80168b2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80168b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80168ba:	707a      	strb	r2, [r7, #1]
 80168bc:	f887 c002 	strb.w	ip, [r7, #2]
 80168c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168c2:	3703      	adds	r7, #3
 80168c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80168c8:	441d      	add	r5, r3
 80168ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168cc:	441e      	add	r6, r3
 80168ce:	e6ab      	b.n	8016628 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80168d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168d2:	441d      	add	r5, r3
 80168d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168d6:	441e      	add	r6, r3
 80168d8:	9b06      	ldr	r3, [sp, #24]
 80168da:	3b01      	subs	r3, #1
 80168dc:	9306      	str	r3, [sp, #24]
 80168de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168e0:	3303      	adds	r3, #3
 80168e2:	9309      	str	r3, [sp, #36]	; 0x24
 80168e4:	e680      	b.n	80165e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80168e6:	d024      	beq.n	8016932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80168e8:	9b06      	ldr	r3, [sp, #24]
 80168ea:	9825      	ldr	r0, [sp, #148]	; 0x94
 80168ec:	3b01      	subs	r3, #1
 80168ee:	fb00 5003 	mla	r0, r0, r3, r5
 80168f2:	1400      	asrs	r0, r0, #16
 80168f4:	f53f ae95 	bmi.w	8016622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80168f8:	3901      	subs	r1, #1
 80168fa:	4288      	cmp	r0, r1
 80168fc:	f6bf ae91 	bge.w	8016622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016900:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016902:	fb01 6303 	mla	r3, r1, r3, r6
 8016906:	141b      	asrs	r3, r3, #16
 8016908:	f53f ae8b 	bmi.w	8016622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801690c:	3a01      	subs	r2, #1
 801690e:	4293      	cmp	r3, r2
 8016910:	f6bf ae87 	bge.w	8016622 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016916:	f8dd b018 	ldr.w	fp, [sp, #24]
 801691a:	1cdf      	adds	r7, r3, #3
 801691c:	f1bb 0f00 	cmp.w	fp, #0
 8016920:	dc6e      	bgt.n	8016a00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8016922:	9b06      	ldr	r3, [sp, #24]
 8016924:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801692a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801692e:	4423      	add	r3, r4
 8016930:	9309      	str	r3, [sp, #36]	; 0x24
 8016932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016934:	2b00      	cmp	r3, #0
 8016936:	f340 81b0 	ble.w	8016c9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801693a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801693e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016940:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016944:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016948:	eef0 6a62 	vmov.f32	s13, s5
 801694c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016950:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016958:	ee16 5a90 	vmov	r5, s13
 801695c:	eef0 6a43 	vmov.f32	s13, s6
 8016960:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016964:	ee16 6a90 	vmov	r6, s13
 8016968:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801696c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016970:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016974:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016978:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801697c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016980:	ee12 2a90 	vmov	r2, s5
 8016984:	eef0 2a47 	vmov.f32	s5, s14
 8016988:	fb92 f3f3 	sdiv	r3, r2, r3
 801698c:	ee13 2a10 	vmov	r2, s6
 8016990:	9325      	str	r3, [sp, #148]	; 0x94
 8016992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016994:	eeb0 3a67 	vmov.f32	s6, s15
 8016998:	fb92 f3f3 	sdiv	r3, r2, r3
 801699c:	9326      	str	r3, [sp, #152]	; 0x98
 801699e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80169a2:	3b01      	subs	r3, #1
 80169a4:	9315      	str	r3, [sp, #84]	; 0x54
 80169a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80169a8:	bf08      	it	eq
 80169aa:	4613      	moveq	r3, r2
 80169ac:	9306      	str	r3, [sp, #24]
 80169ae:	e60d      	b.n	80165cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80169b0:	2800      	cmp	r0, #0
 80169b2:	f43f ae7d 	beq.w	80166b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80169b6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80169ba:	9307      	str	r3, [sp, #28]
 80169bc:	0e1b      	lsrs	r3, r3, #24
 80169be:	930f      	str	r3, [sp, #60]	; 0x3c
 80169c0:	e676      	b.n	80166b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80169c2:	7038      	strb	r0, [r7, #0]
 80169c4:	7079      	strb	r1, [r7, #1]
 80169c6:	e779      	b.n	80168bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80169c8:	f112 0901 	adds.w	r9, r2, #1
 80169cc:	f53f af78 	bmi.w	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169d0:	454b      	cmp	r3, r9
 80169d2:	f6ff af75 	blt.w	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169d6:	f11c 0901 	adds.w	r9, ip, #1
 80169da:	f53f af71 	bmi.w	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169de:	45ce      	cmp	lr, r9
 80169e0:	f6ff af6e 	blt.w	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169e4:	b21b      	sxth	r3, r3
 80169e6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80169ea:	fa0f f28e 	sxth.w	r2, lr
 80169ee:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80169f2:	9200      	str	r2, [sp, #0]
 80169f4:	4639      	mov	r1, r7
 80169f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80169fa:	f7ff fca1 	bl	8016340 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80169fe:	e75f      	b.n	80168c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8016a00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016a02:	1429      	asrs	r1, r5, #16
 8016a04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016a06:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8016a0a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8016a0e:	1433      	asrs	r3, r6, #16
 8016a10:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016a14:	fb0c 1303 	mla	r3, ip, r3, r1
 8016a18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016a1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016a1e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016a22:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016a26:	2a00      	cmp	r2, #0
 8016a28:	f000 8129 	beq.w	8016c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8016a2c:	684c      	ldr	r4, [r1, #4]
 8016a2e:	940c      	str	r4, [sp, #48]	; 0x30
 8016a30:	0e24      	lsrs	r4, r4, #24
 8016a32:	9413      	str	r4, [sp, #76]	; 0x4c
 8016a34:	b198      	cbz	r0, 8016a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016a36:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8016a3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016a3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016a42:	f10c 0c04 	add.w	ip, ip, #4
 8016a46:	eb01 080c 	add.w	r8, r1, ip
 8016a4a:	f851 100c 	ldr.w	r1, [r1, ip]
 8016a4e:	9108      	str	r1, [sp, #32]
 8016a50:	0e09      	lsrs	r1, r1, #24
 8016a52:	9110      	str	r1, [sp, #64]	; 0x40
 8016a54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016a58:	910d      	str	r1, [sp, #52]	; 0x34
 8016a5a:	0e09      	lsrs	r1, r1, #24
 8016a5c:	9114      	str	r1, [sp, #80]	; 0x50
 8016a5e:	b292      	uxth	r2, r2
 8016a60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016a62:	b280      	uxth	r0, r0
 8016a64:	fb02 f900 	mul.w	r9, r2, r0
 8016a68:	0112      	lsls	r2, r2, #4
 8016a6a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016a6e:	eba2 0809 	sub.w	r8, r2, r9
 8016a72:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8016a76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a78:	b280      	uxth	r0, r0
 8016a7a:	fa1f f888 	uxth.w	r8, r8
 8016a7e:	1a09      	subs	r1, r1, r0
 8016a80:	fb08 f202 	mul.w	r2, r8, r2
 8016a84:	b289      	uxth	r1, r1
 8016a86:	fb01 220e 	mla	r2, r1, lr, r2
 8016a8a:	fb00 2204 	mla	r2, r0, r4, r2
 8016a8e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016a90:	fb09 2204 	mla	r2, r9, r4, r2
 8016a94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	f000 80e8 	beq.w	8016c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8016a9e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016aa2:	d01b      	beq.n	8016adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8016aa4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016aa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016aac:	fb0e fa0a 	mul.w	sl, lr, sl
 8016ab0:	fb0e fe03 	mul.w	lr, lr, r3
 8016ab4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016ab8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016abc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016ac0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ac4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016ac8:	4453      	add	r3, sl
 8016aca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016ace:	0a1b      	lsrs	r3, r3, #8
 8016ad0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016ad4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ad8:	ea43 030c 	orr.w	r3, r3, ip
 8016adc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016ade:	2cff      	cmp	r4, #255	; 0xff
 8016ae0:	d021      	beq.n	8016b26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8016ae2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016ae4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016ae8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016aea:	fb04 fc0c 	mul.w	ip, r4, ip
 8016aee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016af0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016af4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016af8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016afa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016afe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b02:	fb04 fa0a 	mul.w	sl, r4, sl
 8016b06:	44e6      	add	lr, ip
 8016b08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b20:	ea4e 040a 	orr.w	r4, lr, sl
 8016b24:	940c      	str	r4, [sp, #48]	; 0x30
 8016b26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b28:	2cff      	cmp	r4, #255	; 0xff
 8016b2a:	d021      	beq.n	8016b70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8016b2c:	9c08      	ldr	r4, [sp, #32]
 8016b2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b34:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b38:	9c08      	ldr	r4, [sp, #32]
 8016b3a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016b3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b40:	fb04 fa0e 	mul.w	sl, r4, lr
 8016b44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b50:	44e6      	add	lr, ip
 8016b52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b6a:	ea4e 040a 	orr.w	r4, lr, sl
 8016b6e:	9408      	str	r4, [sp, #32]
 8016b70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b72:	2cff      	cmp	r4, #255	; 0xff
 8016b74:	d021      	beq.n	8016bba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8016b76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b78:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b7e:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b84:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b96:	fb04 fa0a 	mul.w	sl, r4, sl
 8016b9a:	44e6      	add	lr, ip
 8016b9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016ba0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016ba4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016ba8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016bac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016bb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016bb4:	ea4e 040a 	orr.w	r4, lr, sl
 8016bb8:	940d      	str	r4, [sp, #52]	; 0x34
 8016bba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016bbc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8016bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016bc4:	2aff      	cmp	r2, #255	; 0xff
 8016bc6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016bca:	9c08      	ldr	r4, [sp, #32]
 8016bcc:	fb08 fc0c 	mul.w	ip, r8, ip
 8016bd0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016bd4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016bd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016bda:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016bde:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016be2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016be4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016be8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016bec:	fb08 f80e 	mul.w	r8, r8, lr
 8016bf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016bf4:	fb01 8303 	mla	r3, r1, r3, r8
 8016bf8:	9908      	ldr	r1, [sp, #32]
 8016bfa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016bfe:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8016c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016c04:	fb00 330a 	mla	r3, r0, sl, r3
 8016c08:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8016c0c:	fb09 3e0e 	mla	lr, r9, lr, r3
 8016c10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016c14:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016c18:	ea4c 0c0e 	orr.w	ip, ip, lr
 8016c1c:	fa5f f08c 	uxtb.w	r0, ip
 8016c20:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016c24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016c28:	d032      	beq.n	8016c90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8016c2a:	43d2      	mvns	r2, r2
 8016c2c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8016c30:	b2d2      	uxtb	r2, r2
 8016c32:	fb0e fe02 	mul.w	lr, lr, r2
 8016c36:	f10e 0301 	add.w	r3, lr, #1
 8016c3a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8016c3e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8016c42:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8016c46:	4350      	muls	r0, r2
 8016c48:	f807 3c03 	strb.w	r3, [r7, #-3]
 8016c4c:	1c43      	adds	r3, r0, #1
 8016c4e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016c52:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8016c56:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8016c5a:	4353      	muls	r3, r2
 8016c5c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016c60:	1c5a      	adds	r2, r3, #1
 8016c62:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c66:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8016c6a:	f807 cc01 	strb.w	ip, [r7, #-1]
 8016c6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016c70:	3703      	adds	r7, #3
 8016c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c76:	441d      	add	r5, r3
 8016c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c7a:	441e      	add	r6, r3
 8016c7c:	e64e      	b.n	801691c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	f43f aeed 	beq.w	8016a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016c84:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8016c88:	9108      	str	r1, [sp, #32]
 8016c8a:	0e09      	lsrs	r1, r1, #24
 8016c8c:	9110      	str	r1, [sp, #64]	; 0x40
 8016c8e:	e6e6      	b.n	8016a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016c90:	f807 0c03 	strb.w	r0, [r7, #-3]
 8016c94:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016c98:	e7e7      	b.n	8016c6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8016c9a:	b019      	add	sp, #100	; 0x64
 8016c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ca0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8016ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8016ca8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016cac:	2c00      	cmp	r4, #0
 8016cae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8016cb2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8016cb6:	fb00 4e03 	mla	lr, r0, r3, r4
 8016cba:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8016cbe:	f2c0 80b8 	blt.w	8016e32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cc2:	45a1      	cmp	r9, r4
 8016cc4:	f340 80b5 	ble.w	8016e32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	f2c0 80b2 	blt.w	8016e32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cce:	4580      	cmp	r8, r0
 8016cd0:	f340 80af 	ble.w	8016e32 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cd4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8016cd8:	f01e 0f01 	tst.w	lr, #1
 8016cdc:	5d56      	ldrb	r6, [r2, r5]
 8016cde:	bf0c      	ite	eq
 8016ce0:	f006 060f 	andeq.w	r6, r6, #15
 8016ce4:	1136      	asrne	r6, r6, #4
 8016ce6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8016cea:	b2f6      	uxtb	r6, r6
 8016cec:	f114 0a01 	adds.w	sl, r4, #1
 8016cf0:	f100 80a1 	bmi.w	8016e36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016cf4:	45d1      	cmp	r9, sl
 8016cf6:	f340 809e 	ble.w	8016e36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	f2c0 809b 	blt.w	8016e36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d00:	4580      	cmp	r8, r0
 8016d02:	f340 8098 	ble.w	8016e36 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d06:	2f00      	cmp	r7, #0
 8016d08:	f000 8097 	beq.w	8016e3a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8016d0c:	f10e 0b01 	add.w	fp, lr, #1
 8016d10:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8016d14:	f01b 0f01 	tst.w	fp, #1
 8016d18:	5d55      	ldrb	r5, [r2, r5]
 8016d1a:	bf0c      	ite	eq
 8016d1c:	f005 050f 	andeq.w	r5, r5, #15
 8016d20:	112d      	asrne	r5, r5, #4
 8016d22:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8016d26:	b2ed      	uxtb	r5, r5
 8016d28:	f1bc 0f00 	cmp.w	ip, #0
 8016d2c:	f000 8089 	beq.w	8016e42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8016d30:	2c00      	cmp	r4, #0
 8016d32:	f100 0001 	add.w	r0, r0, #1
 8016d36:	f2c0 8082 	blt.w	8016e3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d3a:	45a1      	cmp	r9, r4
 8016d3c:	dd7f      	ble.n	8016e3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	db7d      	blt.n	8016e3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d42:	4580      	cmp	r8, r0
 8016d44:	dd7b      	ble.n	8016e3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d46:	eb03 0b0e 	add.w	fp, r3, lr
 8016d4a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8016d4e:	f01b 0f01 	tst.w	fp, #1
 8016d52:	5d14      	ldrb	r4, [r2, r4]
 8016d54:	bf0c      	ite	eq
 8016d56:	f004 040f 	andeq.w	r4, r4, #15
 8016d5a:	1124      	asrne	r4, r4, #4
 8016d5c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8016d60:	b2e4      	uxtb	r4, r4
 8016d62:	f1ba 0f00 	cmp.w	sl, #0
 8016d66:	db6f      	blt.n	8016e48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d68:	45d1      	cmp	r9, sl
 8016d6a:	dd6d      	ble.n	8016e48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d6c:	2800      	cmp	r0, #0
 8016d6e:	db6b      	blt.n	8016e48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d70:	4580      	cmp	r8, r0
 8016d72:	dd69      	ble.n	8016e48 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d74:	2f00      	cmp	r7, #0
 8016d76:	d069      	beq.n	8016e4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8016d78:	3301      	adds	r3, #1
 8016d7a:	449e      	add	lr, r3
 8016d7c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8016d80:	f01e 0f01 	tst.w	lr, #1
 8016d84:	5cd0      	ldrb	r0, [r2, r3]
 8016d86:	bf0c      	ite	eq
 8016d88:	f000 000f 	andeq.w	r0, r0, #15
 8016d8c:	1100      	asrne	r0, r0, #4
 8016d8e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016d92:	b2c3      	uxtb	r3, r0
 8016d94:	b2ba      	uxth	r2, r7
 8016d96:	fa1f fc8c 	uxth.w	ip, ip
 8016d9a:	fb02 f00c 	mul.w	r0, r2, ip
 8016d9e:	0112      	lsls	r2, r2, #4
 8016da0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8016da4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8016da8:	1a12      	subs	r2, r2, r0
 8016daa:	fa1f fc8c 	uxth.w	ip, ip
 8016dae:	b292      	uxth	r2, r2
 8016db0:	eba7 070c 	sub.w	r7, r7, ip
 8016db4:	436a      	muls	r2, r5
 8016db6:	b2bf      	uxth	r7, r7
 8016db8:	fb06 2207 	mla	r2, r6, r7, r2
 8016dbc:	fb0c 2404 	mla	r4, ip, r4, r2
 8016dc0:	fb00 4303 	mla	r3, r0, r3, r4
 8016dc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016dc8:	b38b      	cbz	r3, 8016e2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8016dca:	4a21      	ldr	r2, [pc, #132]	; (8016e50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8016dcc:	6814      	ldr	r4, [r2, #0]
 8016dce:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8016dd2:	b2e5      	uxtb	r5, r4
 8016dd4:	4353      	muls	r3, r2
 8016dd6:	1c5a      	adds	r2, r3, #1
 8016dd8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016ddc:	1212      	asrs	r2, r2, #8
 8016dde:	b290      	uxth	r0, r2
 8016de0:	43d2      	mvns	r2, r2
 8016de2:	fb15 f500 	smulbb	r5, r5, r0
 8016de6:	b2d3      	uxtb	r3, r2
 8016de8:	780a      	ldrb	r2, [r1, #0]
 8016dea:	fb02 5203 	mla	r2, r2, r3, r5
 8016dee:	b292      	uxth	r2, r2
 8016df0:	1c55      	adds	r5, r2, #1
 8016df2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016df6:	784d      	ldrb	r5, [r1, #1]
 8016df8:	fb15 f503 	smulbb	r5, r5, r3
 8016dfc:	1212      	asrs	r2, r2, #8
 8016dfe:	700a      	strb	r2, [r1, #0]
 8016e00:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016e04:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8016e08:	fb02 5200 	mla	r2, r2, r0, r5
 8016e0c:	b292      	uxth	r2, r2
 8016e0e:	1c55      	adds	r5, r2, #1
 8016e10:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016e14:	1212      	asrs	r2, r2, #8
 8016e16:	704a      	strb	r2, [r1, #1]
 8016e18:	788a      	ldrb	r2, [r1, #2]
 8016e1a:	fb12 f303 	smulbb	r3, r2, r3
 8016e1e:	fb04 3300 	mla	r3, r4, r0, r3
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	1c5a      	adds	r2, r3, #1
 8016e26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016e2a:	121b      	asrs	r3, r3, #8
 8016e2c:	708b      	strb	r3, [r1, #2]
 8016e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e32:	2600      	movs	r6, #0
 8016e34:	e75a      	b.n	8016cec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8016e36:	2500      	movs	r5, #0
 8016e38:	e776      	b.n	8016d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e3a:	463d      	mov	r5, r7
 8016e3c:	e774      	b.n	8016d28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e3e:	2400      	movs	r4, #0
 8016e40:	e78f      	b.n	8016d62 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8016e42:	4663      	mov	r3, ip
 8016e44:	4664      	mov	r4, ip
 8016e46:	e7a5      	b.n	8016d94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	e7a3      	b.n	8016d94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e4c:	463b      	mov	r3, r7
 8016e4e:	e7a1      	b.n	8016d94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e50:	2400ae14 	.word	0x2400ae14

08016e54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e58:	b097      	sub	sp, #92	; 0x5c
 8016e5a:	9214      	str	r2, [sp, #80]	; 0x50
 8016e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016e60:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8016e64:	9015      	str	r0, [sp, #84]	; 0x54
 8016e66:	910c      	str	r1, [sp, #48]	; 0x30
 8016e68:	6850      	ldr	r0, [r2, #4]
 8016e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8016e6c:	6812      	ldr	r2, [r2, #0]
 8016e6e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016e72:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8016e76:	fb00 1303 	mla	r3, r0, r3, r1
 8016e7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e7e:	eb02 0a03 	add.w	sl, r2, r3
 8016e82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e84:	689b      	ldr	r3, [r3, #8]
 8016e86:	3301      	adds	r3, #1
 8016e88:	f023 0301 	bic.w	r3, r3, #1
 8016e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e90:	681f      	ldr	r7, [r3, #0]
 8016e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	dc03      	bgt.n	8016ea0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8016e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f340 8247 	ble.w	801732e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8016ea0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ea2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016ea6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016eaa:	1e48      	subs	r0, r1, #1
 8016eac:	f102 3cff 	add.w	ip, r2, #4294967295
 8016eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	f340 80e5 	ble.w	8017082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8016eb8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8016ebc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016ec0:	d406      	bmi.n	8016ed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ec2:	4586      	cmp	lr, r0
 8016ec4:	da04      	bge.n	8016ed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	db02      	blt.n	8016ed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016eca:	4563      	cmp	r3, ip
 8016ecc:	f2c0 80da 	blt.w	8017084 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8016ed0:	f11e 0e01 	adds.w	lr, lr, #1
 8016ed4:	f100 80cb 	bmi.w	801706e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ed8:	4571      	cmp	r1, lr
 8016eda:	f2c0 80c8 	blt.w	801706e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ede:	3301      	adds	r3, #1
 8016ee0:	f100 80c5 	bmi.w	801706e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	f2c0 80c2 	blt.w	801706e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eec:	46d0      	mov	r8, sl
 8016eee:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8016ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8016ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	f340 80e3 	ble.w	80170c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8016efc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016efe:	1430      	asrs	r0, r6, #16
 8016f00:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8016f04:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016f08:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8016f0c:	142b      	asrs	r3, r5, #16
 8016f0e:	f100 812e 	bmi.w	801716e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f12:	f10c 3bff 	add.w	fp, ip, #4294967295
 8016f16:	455b      	cmp	r3, fp
 8016f18:	f280 8129 	bge.w	801716e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	f2c0 8126 	blt.w	801716e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f22:	f10e 3bff 	add.w	fp, lr, #4294967295
 8016f26:	4558      	cmp	r0, fp
 8016f28:	f280 8121 	bge.w	801716e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f2c:	fb00 3309 	mla	r3, r0, r9, r3
 8016f30:	0858      	lsrs	r0, r3, #1
 8016f32:	07dc      	lsls	r4, r3, #31
 8016f34:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016f38:	bf54      	ite	pl
 8016f3a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8016f3e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8016f42:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8016f46:	fa5f fc8c 	uxtb.w	ip, ip
 8016f4a:	2a00      	cmp	r2, #0
 8016f4c:	f000 80fe 	beq.w	801714c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8016f50:	1c58      	adds	r0, r3, #1
 8016f52:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016f56:	07c0      	lsls	r0, r0, #31
 8016f58:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8016f5c:	bf54      	ite	pl
 8016f5e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8016f62:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8016f66:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8016f6a:	fa5f f08e 	uxtb.w	r0, lr
 8016f6e:	9010      	str	r0, [sp, #64]	; 0x40
 8016f70:	b1d9      	cbz	r1, 8016faa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016f72:	444b      	add	r3, r9
 8016f74:	0858      	lsrs	r0, r3, #1
 8016f76:	07dc      	lsls	r4, r3, #31
 8016f78:	f103 0301 	add.w	r3, r3, #1
 8016f7c:	5c38      	ldrb	r0, [r7, r0]
 8016f7e:	bf54      	ite	pl
 8016f80:	f000 000f 	andpl.w	r0, r0, #15
 8016f84:	1100      	asrmi	r0, r0, #4
 8016f86:	07dc      	lsls	r4, r3, #31
 8016f88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016f8c:	b2c0      	uxtb	r0, r0
 8016f8e:	900a      	str	r0, [sp, #40]	; 0x28
 8016f90:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016f94:	f817 e000 	ldrb.w	lr, [r7, r0]
 8016f98:	bf54      	ite	pl
 8016f9a:	f00e 030f 	andpl.w	r3, lr, #15
 8016f9e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8016fa2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8016faa:	b292      	uxth	r2, r2
 8016fac:	b289      	uxth	r1, r1
 8016fae:	0113      	lsls	r3, r2, #4
 8016fb0:	fb02 f001 	mul.w	r0, r2, r1
 8016fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fb6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016fba:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8016fbe:	1a1b      	subs	r3, r3, r0
 8016fc0:	b289      	uxth	r1, r1
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	ebae 0e01 	sub.w	lr, lr, r1
 8016fc8:	4353      	muls	r3, r2
 8016fca:	fa1f fe8e 	uxth.w	lr, lr
 8016fce:	fb0c 320e 	mla	r2, ip, lr, r3
 8016fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fd4:	fb01 2203 	mla	r2, r1, r3, r2
 8016fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fda:	fb00 2203 	mla	r2, r0, r3, r2
 8016fde:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016fe2:	2a00      	cmp	r2, #0
 8016fe4:	d039      	beq.n	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016fe6:	4bc7      	ldr	r3, [pc, #796]	; (8017304 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8016fe8:	6819      	ldr	r1, [r3, #0]
 8016fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fec:	fa5f fc81 	uxtb.w	ip, r1
 8016ff0:	435a      	muls	r2, r3
 8016ff2:	1c53      	adds	r3, r2, #1
 8016ff4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016ff8:	1212      	asrs	r2, r2, #8
 8016ffa:	b290      	uxth	r0, r2
 8016ffc:	43d2      	mvns	r2, r2
 8016ffe:	fb1c fc00 	smulbb	ip, ip, r0
 8017002:	b2d3      	uxtb	r3, r2
 8017004:	f898 2000 	ldrb.w	r2, [r8]
 8017008:	fb02 c203 	mla	r2, r2, r3, ip
 801700c:	b292      	uxth	r2, r2
 801700e:	f102 0c01 	add.w	ip, r2, #1
 8017012:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017016:	f898 c001 	ldrb.w	ip, [r8, #1]
 801701a:	fb1c fc03 	smulbb	ip, ip, r3
 801701e:	1212      	asrs	r2, r2, #8
 8017020:	f888 2000 	strb.w	r2, [r8]
 8017024:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8017028:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801702c:	fb02 c200 	mla	r2, r2, r0, ip
 8017030:	b292      	uxth	r2, r2
 8017032:	f102 0c01 	add.w	ip, r2, #1
 8017036:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801703a:	1212      	asrs	r2, r2, #8
 801703c:	f888 2001 	strb.w	r2, [r8, #1]
 8017040:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017044:	fb12 f303 	smulbb	r3, r2, r3
 8017048:	fb01 3300 	mla	r3, r1, r0, r3
 801704c:	b29b      	uxth	r3, r3
 801704e:	1c5a      	adds	r2, r3, #1
 8017050:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017054:	121b      	asrs	r3, r3, #8
 8017056:	f888 3002 	strb.w	r3, [r8, #2]
 801705a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801705c:	f108 0803 	add.w	r8, r8, #3
 8017060:	441d      	add	r5, r3
 8017062:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017064:	441e      	add	r6, r3
 8017066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017068:	3b01      	subs	r3, #1
 801706a:	930d      	str	r3, [sp, #52]	; 0x34
 801706c:	e742      	b.n	8016ef4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801706e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017070:	f10a 0a03 	add.w	sl, sl, #3
 8017074:	441d      	add	r5, r3
 8017076:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017078:	441e      	add	r6, r3
 801707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801707c:	3b01      	subs	r3, #1
 801707e:	9309      	str	r3, [sp, #36]	; 0x24
 8017080:	e716      	b.n	8016eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017082:	d024      	beq.n	80170ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8017084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017086:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017088:	3b01      	subs	r3, #1
 801708a:	fb00 5003 	mla	r0, r0, r3, r5
 801708e:	1400      	asrs	r0, r0, #16
 8017090:	f53f af2b 	bmi.w	8016eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017094:	3901      	subs	r1, #1
 8017096:	4288      	cmp	r0, r1
 8017098:	f6bf af27 	bge.w	8016eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801709c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801709e:	fb01 6303 	mla	r3, r1, r3, r6
 80170a2:	141b      	asrs	r3, r3, #16
 80170a4:	f53f af21 	bmi.w	8016eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170a8:	3a01      	subs	r2, #1
 80170aa:	4293      	cmp	r3, r2
 80170ac:	f6bf af1d 	bge.w	8016eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170b0:	f10a 0e03 	add.w	lr, sl, #3
 80170b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80170b8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80170bc:	f1b8 0f00 	cmp.w	r8, #0
 80170c0:	dc76      	bgt.n	80171b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80170c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80170c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80170cc:	44a2      	add	sl, r4
 80170ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f340 812c 	ble.w	801732e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80170d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170e4:	eef0 6a62 	vmov.f32	s13, s5
 80170e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80170f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80170f4:	ee16 5a90 	vmov	r5, s13
 80170f8:	eef0 6a43 	vmov.f32	s13, s6
 80170fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017100:	ee16 6a90 	vmov	r6, s13
 8017104:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017108:	ee61 7a27 	vmul.f32	s15, s2, s15
 801710c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017110:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017114:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017118:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801711c:	ee12 2a90 	vmov	r2, s5
 8017120:	eef0 2a47 	vmov.f32	s5, s14
 8017124:	fb92 f3f3 	sdiv	r3, r2, r3
 8017128:	ee13 2a10 	vmov	r2, s6
 801712c:	9323      	str	r3, [sp, #140]	; 0x8c
 801712e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017130:	eeb0 3a67 	vmov.f32	s6, s15
 8017134:	fb92 f3f3 	sdiv	r3, r2, r3
 8017138:	9324      	str	r3, [sp, #144]	; 0x90
 801713a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801713c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801713e:	3b01      	subs	r3, #1
 8017140:	930c      	str	r3, [sp, #48]	; 0x30
 8017142:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017144:	bf08      	it	eq
 8017146:	4613      	moveq	r3, r2
 8017148:	9309      	str	r3, [sp, #36]	; 0x24
 801714a:	e6a2      	b.n	8016e92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801714c:	2900      	cmp	r1, #0
 801714e:	f43f af2c 	beq.w	8016faa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017152:	eb09 0003 	add.w	r0, r9, r3
 8017156:	0843      	lsrs	r3, r0, #1
 8017158:	07c0      	lsls	r0, r0, #31
 801715a:	5cfb      	ldrb	r3, [r7, r3]
 801715c:	bf54      	ite	pl
 801715e:	f003 030f 	andpl.w	r3, r3, #15
 8017162:	111b      	asrmi	r3, r3, #4
 8017164:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017168:	b2db      	uxtb	r3, r3
 801716a:	930a      	str	r3, [sp, #40]	; 0x28
 801716c:	e71d      	b.n	8016faa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801716e:	f113 0b01 	adds.w	fp, r3, #1
 8017172:	f53f af72 	bmi.w	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017176:	45dc      	cmp	ip, fp
 8017178:	f6ff af6f 	blt.w	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801717c:	f110 0b01 	adds.w	fp, r0, #1
 8017180:	f53f af6b 	bmi.w	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017184:	45de      	cmp	lr, fp
 8017186:	f6ff af68 	blt.w	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801718a:	9302      	str	r3, [sp, #8]
 801718c:	fa0f f38e 	sxth.w	r3, lr
 8017190:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017192:	9301      	str	r3, [sp, #4]
 8017194:	fa0f f38c 	sxth.w	r3, ip
 8017198:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801719c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	463a      	mov	r2, r7
 80171a4:	464b      	mov	r3, r9
 80171a6:	4641      	mov	r1, r8
 80171a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80171aa:	f7ff fd79 	bl	8016ca0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80171ae:	e754      	b.n	801705a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80171b0:	142a      	asrs	r2, r5, #16
 80171b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80171b6:	1433      	asrs	r3, r6, #16
 80171b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80171bc:	fb09 2303 	mla	r3, r9, r3, r2
 80171c0:	085a      	lsrs	r2, r3, #1
 80171c2:	07dc      	lsls	r4, r3, #31
 80171c4:	5cba      	ldrb	r2, [r7, r2]
 80171c6:	bf54      	ite	pl
 80171c8:	f002 020f 	andpl.w	r2, r2, #15
 80171cc:	1112      	asrmi	r2, r2, #4
 80171ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80171d2:	b2d2      	uxtb	r2, r2
 80171d4:	2900      	cmp	r1, #0
 80171d6:	f000 8097 	beq.w	8017308 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80171da:	f103 0b01 	add.w	fp, r3, #1
 80171de:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80171e2:	f01b 0f01 	tst.w	fp, #1
 80171e6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80171ea:	bf0c      	ite	eq
 80171ec:	f00c 0c0f 	andeq.w	ip, ip, #15
 80171f0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80171f4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80171f8:	fa5f f48c 	uxtb.w	r4, ip
 80171fc:	9412      	str	r4, [sp, #72]	; 0x48
 80171fe:	b300      	cbz	r0, 8017242 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8017200:	444b      	add	r3, r9
 8017202:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017206:	07dc      	lsls	r4, r3, #31
 8017208:	f103 0301 	add.w	r3, r3, #1
 801720c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017210:	bf54      	ite	pl
 8017212:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017216:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801721a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801721e:	fa5f f48c 	uxtb.w	r4, ip
 8017222:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017226:	940b      	str	r4, [sp, #44]	; 0x2c
 8017228:	07dc      	lsls	r4, r3, #31
 801722a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801722e:	bf54      	ite	pl
 8017230:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017234:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017238:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801723c:	fa5f f38c 	uxtb.w	r3, ip
 8017240:	9313      	str	r3, [sp, #76]	; 0x4c
 8017242:	b289      	uxth	r1, r1
 8017244:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017246:	b280      	uxth	r0, r0
 8017248:	fb01 f300 	mul.w	r3, r1, r0
 801724c:	0109      	lsls	r1, r1, #4
 801724e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8017252:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8017256:	1ac9      	subs	r1, r1, r3
 8017258:	b280      	uxth	r0, r0
 801725a:	b289      	uxth	r1, r1
 801725c:	ebac 0c00 	sub.w	ip, ip, r0
 8017260:	4361      	muls	r1, r4
 8017262:	fa1f fc8c 	uxth.w	ip, ip
 8017266:	fb02 120c 	mla	r2, r2, ip, r1
 801726a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801726c:	fb00 2001 	mla	r0, r0, r1, r2
 8017270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017272:	fb03 0302 	mla	r3, r3, r2, r0
 8017276:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801727a:	2b00      	cmp	r3, #0
 801727c:	d039      	beq.n	80172f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801727e:	4a21      	ldr	r2, [pc, #132]	; (8017304 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8017280:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017284:	6810      	ldr	r0, [r2, #0]
 8017286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017288:	fa5f fc80 	uxtb.w	ip, r0
 801728c:	4353      	muls	r3, r2
 801728e:	1c5a      	adds	r2, r3, #1
 8017290:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017294:	121b      	asrs	r3, r3, #8
 8017296:	b29a      	uxth	r2, r3
 8017298:	43db      	mvns	r3, r3
 801729a:	fb1c fc02 	smulbb	ip, ip, r2
 801729e:	b2db      	uxtb	r3, r3
 80172a0:	fb01 c103 	mla	r1, r1, r3, ip
 80172a4:	b289      	uxth	r1, r1
 80172a6:	f101 0c01 	add.w	ip, r1, #1
 80172aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80172ae:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80172b2:	fb1c fc03 	smulbb	ip, ip, r3
 80172b6:	1209      	asrs	r1, r1, #8
 80172b8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80172bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80172c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80172c4:	fb01 c102 	mla	r1, r1, r2, ip
 80172c8:	b289      	uxth	r1, r1
 80172ca:	f101 0c01 	add.w	ip, r1, #1
 80172ce:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80172d2:	1209      	asrs	r1, r1, #8
 80172d4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80172d8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80172dc:	fb11 f303 	smulbb	r3, r1, r3
 80172e0:	fb00 3002 	mla	r0, r0, r2, r3
 80172e4:	b280      	uxth	r0, r0
 80172e6:	1c42      	adds	r2, r0, #1
 80172e8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80172ec:	1200      	asrs	r0, r0, #8
 80172ee:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80172f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80172f4:	f10e 0e03 	add.w	lr, lr, #3
 80172f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80172fc:	441d      	add	r5, r3
 80172fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017300:	441e      	add	r6, r3
 8017302:	e6db      	b.n	80170bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8017304:	2400ae14 	.word	0x2400ae14
 8017308:	2800      	cmp	r0, #0
 801730a:	d09a      	beq.n	8017242 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801730c:	444b      	add	r3, r9
 801730e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017312:	07db      	lsls	r3, r3, #31
 8017314:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017318:	bf54      	ite	pl
 801731a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801731e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017322:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017326:	fa5f f38c 	uxtb.w	r3, ip
 801732a:	930b      	str	r3, [sp, #44]	; 0x2c
 801732c:	e789      	b.n	8017242 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801732e:	b017      	add	sp, #92	; 0x5c
 8017330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017334 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8017334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017338:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801733c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017340:	2d00      	cmp	r5, #0
 8017342:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017346:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801734a:	fb04 5e03 	mla	lr, r4, r3, r5
 801734e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8017352:	f2c0 80b1 	blt.w	80174b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017356:	45a9      	cmp	r9, r5
 8017358:	f340 80ae 	ble.w	80174b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801735c:	2c00      	cmp	r4, #0
 801735e:	f2c0 80ab 	blt.w	80174b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017362:	45a0      	cmp	r8, r4
 8017364:	f340 80a8 	ble.w	80174b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017368:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801736c:	f01e 0f01 	tst.w	lr, #1
 8017370:	5d97      	ldrb	r7, [r2, r6]
 8017372:	bf0c      	ite	eq
 8017374:	f007 070f 	andeq.w	r7, r7, #15
 8017378:	113f      	asrne	r7, r7, #4
 801737a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801737e:	b2ff      	uxtb	r7, r7
 8017380:	f115 0a01 	adds.w	sl, r5, #1
 8017384:	f100 809a 	bmi.w	80174bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8017388:	45d1      	cmp	r9, sl
 801738a:	f340 8097 	ble.w	80174bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801738e:	2c00      	cmp	r4, #0
 8017390:	f2c0 8094 	blt.w	80174bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8017394:	45a0      	cmp	r8, r4
 8017396:	f340 8091 	ble.w	80174bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801739a:	2800      	cmp	r0, #0
 801739c:	f000 8090 	beq.w	80174c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80173a0:	f10e 0b01 	add.w	fp, lr, #1
 80173a4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80173a8:	f01b 0f01 	tst.w	fp, #1
 80173ac:	5d96      	ldrb	r6, [r2, r6]
 80173ae:	bf0c      	ite	eq
 80173b0:	f006 060f 	andeq.w	r6, r6, #15
 80173b4:	1136      	asrne	r6, r6, #4
 80173b6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80173ba:	b2f6      	uxtb	r6, r6
 80173bc:	f1bc 0f00 	cmp.w	ip, #0
 80173c0:	f000 8082 	beq.w	80174c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80173c4:	2d00      	cmp	r5, #0
 80173c6:	f104 0401 	add.w	r4, r4, #1
 80173ca:	db7b      	blt.n	80174c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173cc:	45a9      	cmp	r9, r5
 80173ce:	dd79      	ble.n	80174c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173d0:	2c00      	cmp	r4, #0
 80173d2:	db77      	blt.n	80174c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173d4:	45a0      	cmp	r8, r4
 80173d6:	dd75      	ble.n	80174c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173d8:	eb03 0b0e 	add.w	fp, r3, lr
 80173dc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80173e0:	f01b 0f01 	tst.w	fp, #1
 80173e4:	5d55      	ldrb	r5, [r2, r5]
 80173e6:	bf0c      	ite	eq
 80173e8:	f005 050f 	andeq.w	r5, r5, #15
 80173ec:	112d      	asrne	r5, r5, #4
 80173ee:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80173f2:	b2ed      	uxtb	r5, r5
 80173f4:	f1ba 0f00 	cmp.w	sl, #0
 80173f8:	db69      	blt.n	80174ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173fa:	45d1      	cmp	r9, sl
 80173fc:	dd67      	ble.n	80174ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80173fe:	2c00      	cmp	r4, #0
 8017400:	db65      	blt.n	80174ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8017402:	45a0      	cmp	r8, r4
 8017404:	dd63      	ble.n	80174ce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8017406:	2800      	cmp	r0, #0
 8017408:	d063      	beq.n	80174d2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801740a:	3301      	adds	r3, #1
 801740c:	449e      	add	lr, r3
 801740e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017412:	f01e 0f01 	tst.w	lr, #1
 8017416:	5cd4      	ldrb	r4, [r2, r3]
 8017418:	bf0c      	ite	eq
 801741a:	f004 040f 	andeq.w	r4, r4, #15
 801741e:	1124      	asrne	r4, r4, #4
 8017420:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017424:	b2e3      	uxtb	r3, r4
 8017426:	b282      	uxth	r2, r0
 8017428:	fa1f fc8c 	uxth.w	ip, ip
 801742c:	fb02 f40c 	mul.w	r4, r2, ip
 8017430:	0112      	lsls	r2, r2, #4
 8017432:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8017436:	fa1f f08c 	uxth.w	r0, ip
 801743a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801743e:	1b12      	subs	r2, r2, r4
 8017440:	ebac 0c00 	sub.w	ip, ip, r0
 8017444:	b292      	uxth	r2, r2
 8017446:	fa1f fc8c 	uxth.w	ip, ip
 801744a:	4372      	muls	r2, r6
 801744c:	fb07 220c 	mla	r2, r7, ip, r2
 8017450:	fb00 2005 	mla	r0, r0, r5, r2
 8017454:	fb04 0303 	mla	r3, r4, r3, r0
 8017458:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801745c:	b353      	cbz	r3, 80174b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801745e:	4a1e      	ldr	r2, [pc, #120]	; (80174d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8017460:	7808      	ldrb	r0, [r1, #0]
 8017462:	6814      	ldr	r4, [r2, #0]
 8017464:	b29a      	uxth	r2, r3
 8017466:	43db      	mvns	r3, r3
 8017468:	b2e5      	uxtb	r5, r4
 801746a:	b2db      	uxtb	r3, r3
 801746c:	fb15 f502 	smulbb	r5, r5, r2
 8017470:	fb00 5003 	mla	r0, r0, r3, r5
 8017474:	b280      	uxth	r0, r0
 8017476:	1c45      	adds	r5, r0, #1
 8017478:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801747c:	784d      	ldrb	r5, [r1, #1]
 801747e:	fb15 f503 	smulbb	r5, r5, r3
 8017482:	1200      	asrs	r0, r0, #8
 8017484:	7008      	strb	r0, [r1, #0]
 8017486:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801748a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801748e:	fb00 5002 	mla	r0, r0, r2, r5
 8017492:	b280      	uxth	r0, r0
 8017494:	1c45      	adds	r5, r0, #1
 8017496:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801749a:	1200      	asrs	r0, r0, #8
 801749c:	7048      	strb	r0, [r1, #1]
 801749e:	7888      	ldrb	r0, [r1, #2]
 80174a0:	fb10 f303 	smulbb	r3, r0, r3
 80174a4:	fb04 3202 	mla	r2, r4, r2, r3
 80174a8:	b292      	uxth	r2, r2
 80174aa:	1c53      	adds	r3, r2, #1
 80174ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80174b0:	1212      	asrs	r2, r2, #8
 80174b2:	708a      	strb	r2, [r1, #2]
 80174b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b8:	2700      	movs	r7, #0
 80174ba:	e761      	b.n	8017380 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80174bc:	2600      	movs	r6, #0
 80174be:	e77d      	b.n	80173bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174c0:	4606      	mov	r6, r0
 80174c2:	e77b      	b.n	80173bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174c4:	2500      	movs	r5, #0
 80174c6:	e795      	b.n	80173f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80174c8:	4663      	mov	r3, ip
 80174ca:	4665      	mov	r5, ip
 80174cc:	e7ab      	b.n	8017426 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174ce:	2300      	movs	r3, #0
 80174d0:	e7a9      	b.n	8017426 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174d2:	4603      	mov	r3, r0
 80174d4:	e7a7      	b.n	8017426 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174d6:	bf00      	nop
 80174d8:	2400ae14 	.word	0x2400ae14

080174dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e0:	b093      	sub	sp, #76	; 0x4c
 80174e2:	461c      	mov	r4, r3
 80174e4:	920c      	str	r2, [sp, #48]	; 0x30
 80174e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174e8:	9011      	str	r0, [sp, #68]	; 0x44
 80174ea:	9107      	str	r1, [sp, #28]
 80174ec:	6850      	ldr	r0, [r2, #4]
 80174ee:	6812      	ldr	r2, [r2, #0]
 80174f0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80174f4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 80174f8:	fb00 1303 	mla	r3, r0, r3, r1
 80174fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017500:	eb02 0b03 	add.w	fp, r2, r3
 8017504:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017506:	689b      	ldr	r3, [r3, #8]
 8017508:	3301      	adds	r3, #1
 801750a:	f023 0301 	bic.w	r3, r3, #1
 801750e:	9309      	str	r3, [sp, #36]	; 0x24
 8017510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017512:	f8d3 8000 	ldr.w	r8, [r3]
 8017516:	9b07      	ldr	r3, [sp, #28]
 8017518:	2b00      	cmp	r3, #0
 801751a:	dc03      	bgt.n	8017524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801751c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801751e:	2b00      	cmp	r3, #0
 8017520:	f340 822b 	ble.w	801797a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017524:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017526:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801752a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801752e:	1e48      	subs	r0, r1, #1
 8017530:	1e57      	subs	r7, r2, #1
 8017532:	2c00      	cmp	r4, #0
 8017534:	f340 80d7 	ble.w	80176e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8017538:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801753c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017540:	d406      	bmi.n	8017550 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017542:	4584      	cmp	ip, r0
 8017544:	da04      	bge.n	8017550 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017546:	2b00      	cmp	r3, #0
 8017548:	db02      	blt.n	8017550 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801754a:	42bb      	cmp	r3, r7
 801754c:	f2c0 80cc 	blt.w	80176e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8017550:	f11c 0c01 	adds.w	ip, ip, #1
 8017554:	f100 80bf 	bmi.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017558:	4561      	cmp	r1, ip
 801755a:	f2c0 80bc 	blt.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801755e:	3301      	adds	r3, #1
 8017560:	f100 80b9 	bmi.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017564:	429a      	cmp	r2, r3
 8017566:	f2c0 80b6 	blt.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801756a:	46a2      	mov	sl, r4
 801756c:	465f      	mov	r7, fp
 801756e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017572:	f1ba 0f00 	cmp.w	sl, #0
 8017576:	f340 80d4 	ble.w	8017722 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801757a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801757e:	1430      	asrs	r0, r6, #16
 8017580:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017584:	9308      	str	r3, [sp, #32]
 8017586:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017588:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801758c:	142b      	asrs	r3, r5, #16
 801758e:	f100 8124 	bmi.w	80177da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8017592:	f10c 32ff 	add.w	r2, ip, #4294967295
 8017596:	4293      	cmp	r3, r2
 8017598:	f280 811f 	bge.w	80177da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801759c:	2800      	cmp	r0, #0
 801759e:	f2c0 811c 	blt.w	80177da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175a2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80175a6:	4290      	cmp	r0, r2
 80175a8:	f280 8117 	bge.w	80177da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175ac:	fb00 3309 	mla	r3, r0, r9, r3
 80175b0:	0858      	lsrs	r0, r3, #1
 80175b2:	07da      	lsls	r2, r3, #31
 80175b4:	9a08      	ldr	r2, [sp, #32]
 80175b6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80175ba:	bf54      	ite	pl
 80175bc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80175c0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80175c4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80175c8:	fa5f fc8c 	uxtb.w	ip, ip
 80175cc:	2a00      	cmp	r2, #0
 80175ce:	f000 80ed 	beq.w	80177ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80175d2:	1c58      	adds	r0, r3, #1
 80175d4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80175d8:	07c0      	lsls	r0, r0, #31
 80175da:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80175de:	bf54      	ite	pl
 80175e0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80175e4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80175e8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80175ec:	fa5f fe8e 	uxtb.w	lr, lr
 80175f0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80175f4:	b1c9      	cbz	r1, 801762a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80175f6:	444b      	add	r3, r9
 80175f8:	0858      	lsrs	r0, r3, #1
 80175fa:	07da      	lsls	r2, r3, #31
 80175fc:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017600:	bf54      	ite	pl
 8017602:	f000 000f 	andpl.w	r0, r0, #15
 8017606:	1100      	asrmi	r0, r0, #4
 8017608:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801760c:	b2c0      	uxtb	r0, r0
 801760e:	900a      	str	r0, [sp, #40]	; 0x28
 8017610:	1c58      	adds	r0, r3, #1
 8017612:	0843      	lsrs	r3, r0, #1
 8017614:	07c2      	lsls	r2, r0, #31
 8017616:	f818 3003 	ldrb.w	r3, [r8, r3]
 801761a:	bf54      	ite	pl
 801761c:	f003 030f 	andpl.w	r3, r3, #15
 8017620:	111b      	asrmi	r3, r3, #4
 8017622:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017626:	b2db      	uxtb	r3, r3
 8017628:	930e      	str	r3, [sp, #56]	; 0x38
 801762a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801762e:	b289      	uxth	r1, r1
 8017630:	fb02 f301 	mul.w	r3, r2, r1
 8017634:	0112      	lsls	r2, r2, #4
 8017636:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801763a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801763e:	1ad2      	subs	r2, r2, r3
 8017640:	b289      	uxth	r1, r1
 8017642:	b292      	uxth	r2, r2
 8017644:	1a40      	subs	r0, r0, r1
 8017646:	fa1f fe80 	uxth.w	lr, r0
 801764a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801764c:	4342      	muls	r2, r0
 801764e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8017652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017654:	fb01 c102 	mla	r1, r1, r2, ip
 8017658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801765a:	fb03 1302 	mla	r3, r3, r2, r1
 801765e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017662:	b383      	cbz	r3, 80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017664:	4ac6      	ldr	r2, [pc, #792]	; (8017980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8017666:	2bff      	cmp	r3, #255	; 0xff
 8017668:	6812      	ldr	r2, [r2, #0]
 801766a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801766e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8017672:	b2d2      	uxtb	r2, r2
 8017674:	f000 80ac 	beq.w	80177d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8017678:	b299      	uxth	r1, r3
 801767a:	43db      	mvns	r3, r3
 801767c:	f897 c000 	ldrb.w	ip, [r7]
 8017680:	fb12 f201 	smulbb	r2, r2, r1
 8017684:	b2db      	uxtb	r3, r3
 8017686:	fb10 f001 	smulbb	r0, r0, r1
 801768a:	fb0c 2203 	mla	r2, ip, r3, r2
 801768e:	fb1e f101 	smulbb	r1, lr, r1
 8017692:	b292      	uxth	r2, r2
 8017694:	f102 0c01 	add.w	ip, r2, #1
 8017698:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801769c:	1212      	asrs	r2, r2, #8
 801769e:	703a      	strb	r2, [r7, #0]
 80176a0:	787a      	ldrb	r2, [r7, #1]
 80176a2:	fb02 0003 	mla	r0, r2, r3, r0
 80176a6:	b280      	uxth	r0, r0
 80176a8:	1c42      	adds	r2, r0, #1
 80176aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80176ae:	78ba      	ldrb	r2, [r7, #2]
 80176b0:	fb02 1303 	mla	r3, r2, r3, r1
 80176b4:	1200      	asrs	r0, r0, #8
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	7078      	strb	r0, [r7, #1]
 80176ba:	f103 0e01 	add.w	lr, r3, #1
 80176be:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80176c2:	121b      	asrs	r3, r3, #8
 80176c4:	70bb      	strb	r3, [r7, #2]
 80176c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176c8:	3703      	adds	r7, #3
 80176ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176ce:	441d      	add	r5, r3
 80176d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176d2:	441e      	add	r6, r3
 80176d4:	e74d      	b.n	8017572 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80176d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176d8:	3c01      	subs	r4, #1
 80176da:	f10b 0b03 	add.w	fp, fp, #3
 80176de:	441d      	add	r5, r3
 80176e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176e2:	441e      	add	r6, r3
 80176e4:	e725      	b.n	8017532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80176e6:	d021      	beq.n	801772c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80176e8:	1e63      	subs	r3, r4, #1
 80176ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80176ec:	fb00 5003 	mla	r0, r0, r3, r5
 80176f0:	1400      	asrs	r0, r0, #16
 80176f2:	f53f af3a 	bmi.w	801756a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176f6:	3901      	subs	r1, #1
 80176f8:	4288      	cmp	r0, r1
 80176fa:	f6bf af36 	bge.w	801756a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80176fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017700:	fb01 6303 	mla	r3, r1, r3, r6
 8017704:	141b      	asrs	r3, r3, #16
 8017706:	f53f af30 	bmi.w	801756a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801770a:	3a01      	subs	r2, #1
 801770c:	4293      	cmp	r3, r2
 801770e:	f6bf af2c 	bge.w	801756a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017712:	f10b 0c03 	add.w	ip, fp, #3
 8017716:	46a6      	mov	lr, r4
 8017718:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801771c:	f1be 0f00 	cmp.w	lr, #0
 8017720:	dc79      	bgt.n	8017816 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8017722:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017726:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801772a:	44a3      	add	fp, r4
 801772c:	9b07      	ldr	r3, [sp, #28]
 801772e:	2b00      	cmp	r3, #0
 8017730:	f340 8123 	ble.w	801797a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017738:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801773a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801773e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017742:	eef0 6a62 	vmov.f32	s13, s5
 8017746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801774a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801774e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017752:	ee16 5a90 	vmov	r5, s13
 8017756:	eef0 6a43 	vmov.f32	s13, s6
 801775a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801775e:	ee16 6a90 	vmov	r6, s13
 8017762:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017766:	ee61 7a27 	vmul.f32	s15, s2, s15
 801776a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801776e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017772:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017776:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801777a:	ee12 2a90 	vmov	r2, s5
 801777e:	eef0 2a47 	vmov.f32	s5, s14
 8017782:	fb92 f3f3 	sdiv	r3, r2, r3
 8017786:	ee13 2a10 	vmov	r2, s6
 801778a:	931f      	str	r3, [sp, #124]	; 0x7c
 801778c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801778e:	eeb0 3a67 	vmov.f32	s6, s15
 8017792:	fb92 f3f3 	sdiv	r3, r2, r3
 8017796:	9320      	str	r3, [sp, #128]	; 0x80
 8017798:	9b07      	ldr	r3, [sp, #28]
 801779a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801779c:	3b01      	subs	r3, #1
 801779e:	9307      	str	r3, [sp, #28]
 80177a0:	bf08      	it	eq
 80177a2:	4614      	moveq	r4, r2
 80177a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80177a6:	bf18      	it	ne
 80177a8:	461c      	movne	r4, r3
 80177aa:	e6b4      	b.n	8017516 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80177ac:	2900      	cmp	r1, #0
 80177ae:	f43f af3c 	beq.w	801762a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80177b2:	eb09 0003 	add.w	r0, r9, r3
 80177b6:	0843      	lsrs	r3, r0, #1
 80177b8:	07c0      	lsls	r0, r0, #31
 80177ba:	f818 3003 	ldrb.w	r3, [r8, r3]
 80177be:	bf54      	ite	pl
 80177c0:	f003 030f 	andpl.w	r3, r3, #15
 80177c4:	111b      	asrmi	r3, r3, #4
 80177c6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	930a      	str	r3, [sp, #40]	; 0x28
 80177ce:	e72c      	b.n	801762a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80177d0:	703a      	strb	r2, [r7, #0]
 80177d2:	7078      	strb	r0, [r7, #1]
 80177d4:	f887 e002 	strb.w	lr, [r7, #2]
 80177d8:	e775      	b.n	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177da:	1c5a      	adds	r2, r3, #1
 80177dc:	f53f af73 	bmi.w	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177e0:	4594      	cmp	ip, r2
 80177e2:	f6ff af70 	blt.w	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177e6:	1c42      	adds	r2, r0, #1
 80177e8:	f53f af6d 	bmi.w	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177ec:	4596      	cmp	lr, r2
 80177ee:	f6ff af6a 	blt.w	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177f2:	9302      	str	r3, [sp, #8]
 80177f4:	fa0f f38e 	sxth.w	r3, lr
 80177f8:	9a08      	ldr	r2, [sp, #32]
 80177fa:	9301      	str	r3, [sp, #4]
 80177fc:	fa0f f38c 	sxth.w	r3, ip
 8017800:	9105      	str	r1, [sp, #20]
 8017802:	4639      	mov	r1, r7
 8017804:	9300      	str	r3, [sp, #0]
 8017806:	464b      	mov	r3, r9
 8017808:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801780c:	4642      	mov	r2, r8
 801780e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017810:	f7ff fd90 	bl	8017334 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8017814:	e757      	b.n	80176c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017816:	142a      	asrs	r2, r5, #16
 8017818:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801781c:	1433      	asrs	r3, r6, #16
 801781e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8017822:	fb09 2303 	mla	r3, r9, r3, r2
 8017826:	085a      	lsrs	r2, r3, #1
 8017828:	07d9      	lsls	r1, r3, #31
 801782a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801782e:	bf54      	ite	pl
 8017830:	f002 020f 	andpl.w	r2, r2, #15
 8017834:	1112      	asrmi	r2, r2, #4
 8017836:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801783a:	b2d2      	uxtb	r2, r2
 801783c:	2800      	cmp	r0, #0
 801783e:	f000 8085 	beq.w	801794c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017842:	f103 0a01 	add.w	sl, r3, #1
 8017846:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801784a:	f01a 0f01 	tst.w	sl, #1
 801784e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017852:	bf0c      	ite	eq
 8017854:	f001 010f 	andeq.w	r1, r1, #15
 8017858:	1109      	asrne	r1, r1, #4
 801785a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801785e:	b2c9      	uxtb	r1, r1
 8017860:	910f      	str	r1, [sp, #60]	; 0x3c
 8017862:	b1df      	cbz	r7, 801789c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017864:	444b      	add	r3, r9
 8017866:	0859      	lsrs	r1, r3, #1
 8017868:	f013 0f01 	tst.w	r3, #1
 801786c:	f103 0301 	add.w	r3, r3, #1
 8017870:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017874:	bf0c      	ite	eq
 8017876:	f001 010f 	andeq.w	r1, r1, #15
 801787a:	1109      	asrne	r1, r1, #4
 801787c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017880:	b2c9      	uxtb	r1, r1
 8017882:	910b      	str	r1, [sp, #44]	; 0x2c
 8017884:	0859      	lsrs	r1, r3, #1
 8017886:	07db      	lsls	r3, r3, #31
 8017888:	f818 1001 	ldrb.w	r1, [r8, r1]
 801788c:	bf54      	ite	pl
 801788e:	f001 010f 	andpl.w	r1, r1, #15
 8017892:	1109      	asrmi	r1, r1, #4
 8017894:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017898:	b2c9      	uxtb	r1, r1
 801789a:	9110      	str	r1, [sp, #64]	; 0x40
 801789c:	b280      	uxth	r0, r0
 801789e:	b2bf      	uxth	r7, r7
 80178a0:	fb00 f307 	mul.w	r3, r0, r7
 80178a4:	0100      	lsls	r0, r0, #4
 80178a6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80178aa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80178ae:	1ac0      	subs	r0, r0, r3
 80178b0:	b2bf      	uxth	r7, r7
 80178b2:	b280      	uxth	r0, r0
 80178b4:	1bc9      	subs	r1, r1, r7
 80178b6:	fa1f fa81 	uxth.w	sl, r1
 80178ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80178bc:	4348      	muls	r0, r1
 80178be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178c0:	fb02 020a 	mla	r2, r2, sl, r0
 80178c4:	fb07 2701 	mla	r7, r7, r1, r2
 80178c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178ca:	fb03 7302 	mla	r3, r3, r2, r7
 80178ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80178d2:	b393      	cbz	r3, 801793a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80178d4:	4a2a      	ldr	r2, [pc, #168]	; (8017980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80178d6:	2bff      	cmp	r3, #255	; 0xff
 80178d8:	6811      	ldr	r1, [r2, #0]
 80178da:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80178de:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80178e2:	b2c9      	uxtb	r1, r1
 80178e4:	d042      	beq.n	801796c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80178e6:	b298      	uxth	r0, r3
 80178e8:	43db      	mvns	r3, r3
 80178ea:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80178ee:	fb11 f100 	smulbb	r1, r1, r0
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	fb17 f700 	smulbb	r7, r7, r0
 80178f8:	fb02 1103 	mla	r1, r2, r3, r1
 80178fc:	fb1a f000 	smulbb	r0, sl, r0
 8017900:	b289      	uxth	r1, r1
 8017902:	1c4a      	adds	r2, r1, #1
 8017904:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8017908:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801790c:	fb02 7703 	mla	r7, r2, r3, r7
 8017910:	1209      	asrs	r1, r1, #8
 8017912:	b2bf      	uxth	r7, r7
 8017914:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8017918:	1c7a      	adds	r2, r7, #1
 801791a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801791e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8017922:	fb02 0303 	mla	r3, r2, r3, r0
 8017926:	123f      	asrs	r7, r7, #8
 8017928:	b29b      	uxth	r3, r3
 801792a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801792e:	1c5a      	adds	r2, r3, #1
 8017930:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017934:	121b      	asrs	r3, r3, #8
 8017936:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801793a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801793c:	f10c 0c03 	add.w	ip, ip, #3
 8017940:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017944:	441d      	add	r5, r3
 8017946:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017948:	441e      	add	r6, r3
 801794a:	e6e7      	b.n	801771c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801794c:	2f00      	cmp	r7, #0
 801794e:	d0a5      	beq.n	801789c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017950:	444b      	add	r3, r9
 8017952:	0859      	lsrs	r1, r3, #1
 8017954:	07db      	lsls	r3, r3, #31
 8017956:	f818 1001 	ldrb.w	r1, [r8, r1]
 801795a:	bf54      	ite	pl
 801795c:	f001 010f 	andpl.w	r1, r1, #15
 8017960:	1109      	asrmi	r1, r1, #4
 8017962:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017966:	b2c9      	uxtb	r1, r1
 8017968:	910b      	str	r1, [sp, #44]	; 0x2c
 801796a:	e797      	b.n	801789c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801796c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8017970:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8017974:	f80c ac01 	strb.w	sl, [ip, #-1]
 8017978:	e7df      	b.n	801793a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801797a:	b013      	add	sp, #76	; 0x4c
 801797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017980:	2400ae14 	.word	0x2400ae14

08017984 <CRC_Lock>:
 8017984:	4a20      	ldr	r2, [pc, #128]	; (8017a08 <CRC_Lock+0x84>)
 8017986:	b530      	push	{r4, r5, lr}
 8017988:	6813      	ldr	r3, [r2, #0]
 801798a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801798e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8017992:	f023 0301 	bic.w	r3, r3, #1
 8017996:	6013      	str	r3, [r2, #0]
 8017998:	4b1c      	ldr	r3, [pc, #112]	; (8017a0c <CRC_Lock+0x88>)
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	4022      	ands	r2, r4
 801799e:	42aa      	cmp	r2, r5
 80179a0:	d005      	beq.n	80179ae <CRC_Lock+0x2a>
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80179a8:	4023      	ands	r3, r4
 80179aa:	4293      	cmp	r3, r2
 80179ac:	d124      	bne.n	80179f8 <CRC_Lock+0x74>
 80179ae:	4b18      	ldr	r3, [pc, #96]	; (8017a10 <CRC_Lock+0x8c>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	bb0b      	cbnz	r3, 80179f8 <CRC_Lock+0x74>
 80179b4:	4b17      	ldr	r3, [pc, #92]	; (8017a14 <CRC_Lock+0x90>)
 80179b6:	681a      	ldr	r2, [r3, #0]
 80179b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80179bc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80179c0:	d00d      	beq.n	80179de <CRC_Lock+0x5a>
 80179c2:	681a      	ldr	r2, [r3, #0]
 80179c4:	f240 4483 	movw	r4, #1155	; 0x483
 80179c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80179cc:	42a2      	cmp	r2, r4
 80179ce:	d006      	beq.n	80179de <CRC_Lock+0x5a>
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	f240 4285 	movw	r2, #1157	; 0x485
 80179d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179da:	4293      	cmp	r3, r2
 80179dc:	d10c      	bne.n	80179f8 <CRC_Lock+0x74>
 80179de:	4b0e      	ldr	r3, [pc, #56]	; (8017a18 <CRC_Lock+0x94>)
 80179e0:	2201      	movs	r2, #1
 80179e2:	601a      	str	r2, [r3, #0]
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	2a00      	cmp	r2, #0
 80179e8:	d1fc      	bne.n	80179e4 <CRC_Lock+0x60>
 80179ea:	4b0c      	ldr	r3, [pc, #48]	; (8017a1c <CRC_Lock+0x98>)
 80179ec:	6018      	str	r0, [r3, #0]
 80179ee:	6818      	ldr	r0, [r3, #0]
 80179f0:	1a43      	subs	r3, r0, r1
 80179f2:	4258      	negs	r0, r3
 80179f4:	4158      	adcs	r0, r3
 80179f6:	bd30      	pop	{r4, r5, pc}
 80179f8:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <CRC_Lock+0x9c>)
 80179fa:	2201      	movs	r2, #1
 80179fc:	601a      	str	r2, [r3, #0]
 80179fe:	681a      	ldr	r2, [r3, #0]
 8017a00:	2a00      	cmp	r2, #0
 8017a02:	d1fc      	bne.n	80179fe <CRC_Lock+0x7a>
 8017a04:	4b07      	ldr	r3, [pc, #28]	; (8017a24 <CRC_Lock+0xa0>)
 8017a06:	e7f1      	b.n	80179ec <CRC_Lock+0x68>
 8017a08:	e0002000 	.word	0xe0002000
 8017a0c:	e000ed00 	.word	0xe000ed00
 8017a10:	e0042000 	.word	0xe0042000
 8017a14:	5c001000 	.word	0x5c001000
 8017a18:	58024c08 	.word	0x58024c08
 8017a1c:	58024c00 	.word	0x58024c00
 8017a20:	40023008 	.word	0x40023008
 8017a24:	40023000 	.word	0x40023000

08017a28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8017a28:	6101      	str	r1, [r0, #16]
 8017a2a:	4770      	bx	lr

08017a2c <_ZN8touchgfx8Gestures4tickEv>:
 8017a2c:	7b83      	ldrb	r3, [r0, #14]
 8017a2e:	b14b      	cbz	r3, 8017a44 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8017a30:	8903      	ldrh	r3, [r0, #8]
 8017a32:	3301      	adds	r3, #1
 8017a34:	b29b      	uxth	r3, r3
 8017a36:	2b07      	cmp	r3, #7
 8017a38:	8103      	strh	r3, [r0, #8]
 8017a3a:	bf81      	itttt	hi
 8017a3c:	2300      	movhi	r3, #0
 8017a3e:	8143      	strhhi	r3, [r0, #10]
 8017a40:	8183      	strhhi	r3, [r0, #12]
 8017a42:	7383      	strbhi	r3, [r0, #14]
 8017a44:	4770      	bx	lr
	...

08017a48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8017a48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017a4c:	4698      	mov	r8, r3
 8017a4e:	8883      	ldrh	r3, [r0, #4]
 8017a50:	4604      	mov	r4, r0
 8017a52:	4617      	mov	r7, r2
 8017a54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a58:	eba8 0303 	sub.w	r3, r8, r3
 8017a5c:	4a19      	ldr	r2, [pc, #100]	; (8017ac4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8017a5e:	460e      	mov	r6, r1
 8017a60:	b21b      	sxth	r3, r3
 8017a62:	88c1      	ldrh	r1, [r0, #6]
 8017a64:	9200      	str	r2, [sp, #0]
 8017a66:	2000      	movs	r0, #0
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	8aa2      	ldrh	r2, [r4, #20]
 8017a6c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8017a70:	bfb8      	it	lt
 8017a72:	425b      	neglt	r3, r3
 8017a74:	f88d 0004 	strb.w	r0, [sp, #4]
 8017a78:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017a7c:	b21b      	sxth	r3, r3
 8017a7e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8017a82:	f8ad 500c 	strh.w	r5, [sp, #12]
 8017a86:	4293      	cmp	r3, r2
 8017a88:	dc07      	bgt.n	8017a9a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8017a8a:	1a69      	subs	r1, r5, r1
 8017a8c:	b209      	sxth	r1, r1
 8017a8e:	2900      	cmp	r1, #0
 8017a90:	bfb8      	it	lt
 8017a92:	4249      	neglt	r1, r1
 8017a94:	b209      	sxth	r1, r1
 8017a96:	428a      	cmp	r2, r1
 8017a98:	da10      	bge.n	8017abc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8017a9a:	6920      	ldr	r0, [r4, #16]
 8017a9c:	4669      	mov	r1, sp
 8017a9e:	eba8 0606 	sub.w	r6, r8, r6
 8017aa2:	1bef      	subs	r7, r5, r7
 8017aa4:	6803      	ldr	r3, [r0, #0]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	4798      	blx	r3
 8017aaa:	2300      	movs	r3, #0
 8017aac:	2001      	movs	r0, #1
 8017aae:	8166      	strh	r6, [r4, #10]
 8017ab0:	8123      	strh	r3, [r4, #8]
 8017ab2:	81a7      	strh	r7, [r4, #12]
 8017ab4:	f8a4 8004 	strh.w	r8, [r4, #4]
 8017ab8:	80e5      	strh	r5, [r4, #6]
 8017aba:	73a0      	strb	r0, [r4, #14]
 8017abc:	b004      	add	sp, #16
 8017abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ac2:	bf00      	nop
 8017ac4:	0801a44c 	.word	0x0801a44c

08017ac8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8017ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aca:	461e      	mov	r6, r3
 8017acc:	1e4b      	subs	r3, r1, #1
 8017ace:	b085      	sub	sp, #20
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	460d      	mov	r5, r1
 8017ad6:	4617      	mov	r7, r2
 8017ad8:	d84b      	bhi.n	8017b72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8017ada:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017ade:	1cd3      	adds	r3, r2, #3
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	2b06      	cmp	r3, #6
 8017ae4:	d916      	bls.n	8017b14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8017ae6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8017b88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017aea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017aee:	f8cd c004 	str.w	ip, [sp, #4]
 8017af2:	f04f 0c00 	mov.w	ip, #0
 8017af6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017afa:	6900      	ldr	r0, [r0, #16]
 8017afc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017b00:	a901      	add	r1, sp, #4
 8017b02:	f88d c008 	strb.w	ip, [sp, #8]
 8017b06:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017b0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b0e:	6803      	ldr	r3, [r0, #0]
 8017b10:	689b      	ldr	r3, [r3, #8]
 8017b12:	4798      	blx	r3
 8017b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b18:	1cd3      	adds	r3, r2, #3
 8017b1a:	b29b      	uxth	r3, r3
 8017b1c:	2b06      	cmp	r3, #6
 8017b1e:	d916      	bls.n	8017b4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b20:	f8df c064 	ldr.w	ip, [pc, #100]	; 8017b88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017b24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017b28:	f8cd c004 	str.w	ip, [sp, #4]
 8017b2c:	f04f 0c01 	mov.w	ip, #1
 8017b30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017b34:	6920      	ldr	r0, [r4, #16]
 8017b36:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017b3a:	a901      	add	r1, sp, #4
 8017b3c:	f88d c008 	strb.w	ip, [sp, #8]
 8017b40:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017b44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b48:	6803      	ldr	r3, [r0, #0]
 8017b4a:	689b      	ldr	r3, [r3, #8]
 8017b4c:	4798      	blx	r3
 8017b4e:	4b0d      	ldr	r3, [pc, #52]	; (8017b84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8017b50:	a901      	add	r1, sp, #4
 8017b52:	6920      	ldr	r0, [r4, #16]
 8017b54:	9301      	str	r3, [sp, #4]
 8017b56:	2300      	movs	r3, #0
 8017b58:	f88d 5008 	strb.w	r5, [sp, #8]
 8017b5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8017b60:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017b64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b68:	6803      	ldr	r3, [r0, #0]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	4798      	blx	r3
 8017b6e:	b005      	add	sp, #20
 8017b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b72:	2900      	cmp	r1, #0
 8017b74:	d1eb      	bne.n	8017b4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b76:	80a2      	strh	r2, [r4, #4]
 8017b78:	80c6      	strh	r6, [r0, #6]
 8017b7a:	60a1      	str	r1, [r4, #8]
 8017b7c:	81a1      	strh	r1, [r4, #12]
 8017b7e:	73a1      	strb	r1, [r4, #14]
 8017b80:	e7e5      	b.n	8017b4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b82:	bf00      	nop
 8017b84:	0801a438 	.word	0x0801a438
 8017b88:	0801a460 	.word	0x0801a460

08017b8c <__aeabi_atexit>:
 8017b8c:	460b      	mov	r3, r1
 8017b8e:	4601      	mov	r1, r0
 8017b90:	4618      	mov	r0, r3
 8017b92:	f000 b853 	b.w	8017c3c <__cxa_atexit>

08017b96 <_ZdlPvj>:
 8017b96:	f000 b812 	b.w	8017bbe <_ZdlPv>

08017b9a <__cxa_guard_acquire>:
 8017b9a:	6803      	ldr	r3, [r0, #0]
 8017b9c:	07db      	lsls	r3, r3, #31
 8017b9e:	d406      	bmi.n	8017bae <__cxa_guard_acquire+0x14>
 8017ba0:	7843      	ldrb	r3, [r0, #1]
 8017ba2:	b103      	cbz	r3, 8017ba6 <__cxa_guard_acquire+0xc>
 8017ba4:	deff      	udf	#255	; 0xff
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	7043      	strb	r3, [r0, #1]
 8017baa:	4618      	mov	r0, r3
 8017bac:	4770      	bx	lr
 8017bae:	2000      	movs	r0, #0
 8017bb0:	4770      	bx	lr

08017bb2 <__cxa_guard_release>:
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	6003      	str	r3, [r0, #0]
 8017bb6:	4770      	bx	lr

08017bb8 <__cxa_pure_virtual>:
 8017bb8:	b508      	push	{r3, lr}
 8017bba:	f000 f80f 	bl	8017bdc <_ZSt9terminatev>

08017bbe <_ZdlPv>:
 8017bbe:	f000 b989 	b.w	8017ed4 <free>

08017bc2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8017bc2:	b508      	push	{r3, lr}
 8017bc4:	4780      	blx	r0
 8017bc6:	f000 f80e 	bl	8017be6 <abort>
	...

08017bcc <_ZSt13get_terminatev>:
 8017bcc:	4b02      	ldr	r3, [pc, #8]	; (8017bd8 <_ZSt13get_terminatev+0xc>)
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	f3bf 8f5b 	dmb	ish
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	240000a4 	.word	0x240000a4

08017bdc <_ZSt9terminatev>:
 8017bdc:	b508      	push	{r3, lr}
 8017bde:	f7ff fff5 	bl	8017bcc <_ZSt13get_terminatev>
 8017be2:	f7ff ffee 	bl	8017bc2 <_ZN10__cxxabiv111__terminateEPFvvE>

08017be6 <abort>:
 8017be6:	b508      	push	{r3, lr}
 8017be8:	2006      	movs	r0, #6
 8017bea:	f000 fe01 	bl	80187f0 <raise>
 8017bee:	2001      	movs	r0, #1
 8017bf0:	f7ea fb28 	bl	8002244 <_exit>

08017bf4 <__assert_func>:
 8017bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bf6:	4614      	mov	r4, r2
 8017bf8:	461a      	mov	r2, r3
 8017bfa:	4b09      	ldr	r3, [pc, #36]	; (8017c20 <__assert_func+0x2c>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	4605      	mov	r5, r0
 8017c00:	68d8      	ldr	r0, [r3, #12]
 8017c02:	b14c      	cbz	r4, 8017c18 <__assert_func+0x24>
 8017c04:	4b07      	ldr	r3, [pc, #28]	; (8017c24 <__assert_func+0x30>)
 8017c06:	9100      	str	r1, [sp, #0]
 8017c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c0c:	4906      	ldr	r1, [pc, #24]	; (8017c28 <__assert_func+0x34>)
 8017c0e:	462b      	mov	r3, r5
 8017c10:	f000 f8fe 	bl	8017e10 <fiprintf>
 8017c14:	f7ff ffe7 	bl	8017be6 <abort>
 8017c18:	4b04      	ldr	r3, [pc, #16]	; (8017c2c <__assert_func+0x38>)
 8017c1a:	461c      	mov	r4, r3
 8017c1c:	e7f3      	b.n	8017c06 <__assert_func+0x12>
 8017c1e:	bf00      	nop
 8017c20:	240000a8 	.word	0x240000a8
 8017c24:	0801a688 	.word	0x0801a688
 8017c28:	0801a695 	.word	0x0801a695
 8017c2c:	0801a6c3 	.word	0x0801a6c3

08017c30 <atexit>:
 8017c30:	2300      	movs	r3, #0
 8017c32:	4601      	mov	r1, r0
 8017c34:	461a      	mov	r2, r3
 8017c36:	4618      	mov	r0, r3
 8017c38:	f000 bf0c 	b.w	8018a54 <__register_exitproc>

08017c3c <__cxa_atexit>:
 8017c3c:	b510      	push	{r4, lr}
 8017c3e:	4c05      	ldr	r4, [pc, #20]	; (8017c54 <__cxa_atexit+0x18>)
 8017c40:	4613      	mov	r3, r2
 8017c42:	b12c      	cbz	r4, 8017c50 <__cxa_atexit+0x14>
 8017c44:	460a      	mov	r2, r1
 8017c46:	4601      	mov	r1, r0
 8017c48:	2002      	movs	r0, #2
 8017c4a:	f000 ff03 	bl	8018a54 <__register_exitproc>
 8017c4e:	bd10      	pop	{r4, pc}
 8017c50:	4620      	mov	r0, r4
 8017c52:	e7fc      	b.n	8017c4e <__cxa_atexit+0x12>
 8017c54:	08018a55 	.word	0x08018a55

08017c58 <__errno>:
 8017c58:	4b01      	ldr	r3, [pc, #4]	; (8017c60 <__errno+0x8>)
 8017c5a:	6818      	ldr	r0, [r3, #0]
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop
 8017c60:	240000a8 	.word	0x240000a8

08017c64 <std>:
 8017c64:	2300      	movs	r3, #0
 8017c66:	b510      	push	{r4, lr}
 8017c68:	4604      	mov	r4, r0
 8017c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8017c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c72:	6083      	str	r3, [r0, #8]
 8017c74:	8181      	strh	r1, [r0, #12]
 8017c76:	6643      	str	r3, [r0, #100]	; 0x64
 8017c78:	81c2      	strh	r2, [r0, #14]
 8017c7a:	6183      	str	r3, [r0, #24]
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	2208      	movs	r2, #8
 8017c80:	305c      	adds	r0, #92	; 0x5c
 8017c82:	f000 f93d 	bl	8017f00 <memset>
 8017c86:	4b05      	ldr	r3, [pc, #20]	; (8017c9c <std+0x38>)
 8017c88:	6263      	str	r3, [r4, #36]	; 0x24
 8017c8a:	4b05      	ldr	r3, [pc, #20]	; (8017ca0 <std+0x3c>)
 8017c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c8e:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <std+0x40>)
 8017c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c92:	4b05      	ldr	r3, [pc, #20]	; (8017ca8 <std+0x44>)
 8017c94:	6224      	str	r4, [r4, #32]
 8017c96:	6323      	str	r3, [r4, #48]	; 0x30
 8017c98:	bd10      	pop	{r4, pc}
 8017c9a:	bf00      	nop
 8017c9c:	08018829 	.word	0x08018829
 8017ca0:	0801884b 	.word	0x0801884b
 8017ca4:	08018883 	.word	0x08018883
 8017ca8:	080188a7 	.word	0x080188a7

08017cac <_cleanup_r>:
 8017cac:	4901      	ldr	r1, [pc, #4]	; (8017cb4 <_cleanup_r+0x8>)
 8017cae:	f000 b8c1 	b.w	8017e34 <_fwalk_reent>
 8017cb2:	bf00      	nop
 8017cb4:	08018c45 	.word	0x08018c45

08017cb8 <__sfmoreglue>:
 8017cb8:	b570      	push	{r4, r5, r6, lr}
 8017cba:	2268      	movs	r2, #104	; 0x68
 8017cbc:	1e4d      	subs	r5, r1, #1
 8017cbe:	4355      	muls	r5, r2
 8017cc0:	460e      	mov	r6, r1
 8017cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017cc6:	f000 f98f 	bl	8017fe8 <_malloc_r>
 8017cca:	4604      	mov	r4, r0
 8017ccc:	b140      	cbz	r0, 8017ce0 <__sfmoreglue+0x28>
 8017cce:	2100      	movs	r1, #0
 8017cd0:	e9c0 1600 	strd	r1, r6, [r0]
 8017cd4:	300c      	adds	r0, #12
 8017cd6:	60a0      	str	r0, [r4, #8]
 8017cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017cdc:	f000 f910 	bl	8017f00 <memset>
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}

08017ce4 <__sfp_lock_acquire>:
 8017ce4:	4801      	ldr	r0, [pc, #4]	; (8017cec <__sfp_lock_acquire+0x8>)
 8017ce6:	f000 b8ea 	b.w	8017ebe <__retarget_lock_acquire_recursive>
 8017cea:	bf00      	nop
 8017cec:	2400aeea 	.word	0x2400aeea

08017cf0 <__sfp_lock_release>:
 8017cf0:	4801      	ldr	r0, [pc, #4]	; (8017cf8 <__sfp_lock_release+0x8>)
 8017cf2:	f000 b8e6 	b.w	8017ec2 <__retarget_lock_release_recursive>
 8017cf6:	bf00      	nop
 8017cf8:	2400aeea 	.word	0x2400aeea

08017cfc <__sinit_lock_acquire>:
 8017cfc:	4801      	ldr	r0, [pc, #4]	; (8017d04 <__sinit_lock_acquire+0x8>)
 8017cfe:	f000 b8de 	b.w	8017ebe <__retarget_lock_acquire_recursive>
 8017d02:	bf00      	nop
 8017d04:	2400aeeb 	.word	0x2400aeeb

08017d08 <__sinit_lock_release>:
 8017d08:	4801      	ldr	r0, [pc, #4]	; (8017d10 <__sinit_lock_release+0x8>)
 8017d0a:	f000 b8da 	b.w	8017ec2 <__retarget_lock_release_recursive>
 8017d0e:	bf00      	nop
 8017d10:	2400aeeb 	.word	0x2400aeeb

08017d14 <__sinit>:
 8017d14:	b510      	push	{r4, lr}
 8017d16:	4604      	mov	r4, r0
 8017d18:	f7ff fff0 	bl	8017cfc <__sinit_lock_acquire>
 8017d1c:	69a3      	ldr	r3, [r4, #24]
 8017d1e:	b11b      	cbz	r3, 8017d28 <__sinit+0x14>
 8017d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d24:	f7ff bff0 	b.w	8017d08 <__sinit_lock_release>
 8017d28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d2c:	6523      	str	r3, [r4, #80]	; 0x50
 8017d2e:	4b13      	ldr	r3, [pc, #76]	; (8017d7c <__sinit+0x68>)
 8017d30:	4a13      	ldr	r2, [pc, #76]	; (8017d80 <__sinit+0x6c>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d36:	42a3      	cmp	r3, r4
 8017d38:	bf04      	itt	eq
 8017d3a:	2301      	moveq	r3, #1
 8017d3c:	61a3      	streq	r3, [r4, #24]
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f000 f820 	bl	8017d84 <__sfp>
 8017d44:	6060      	str	r0, [r4, #4]
 8017d46:	4620      	mov	r0, r4
 8017d48:	f000 f81c 	bl	8017d84 <__sfp>
 8017d4c:	60a0      	str	r0, [r4, #8]
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f000 f818 	bl	8017d84 <__sfp>
 8017d54:	2200      	movs	r2, #0
 8017d56:	60e0      	str	r0, [r4, #12]
 8017d58:	2104      	movs	r1, #4
 8017d5a:	6860      	ldr	r0, [r4, #4]
 8017d5c:	f7ff ff82 	bl	8017c64 <std>
 8017d60:	68a0      	ldr	r0, [r4, #8]
 8017d62:	2201      	movs	r2, #1
 8017d64:	2109      	movs	r1, #9
 8017d66:	f7ff ff7d 	bl	8017c64 <std>
 8017d6a:	68e0      	ldr	r0, [r4, #12]
 8017d6c:	2202      	movs	r2, #2
 8017d6e:	2112      	movs	r1, #18
 8017d70:	f7ff ff78 	bl	8017c64 <std>
 8017d74:	2301      	movs	r3, #1
 8017d76:	61a3      	str	r3, [r4, #24]
 8017d78:	e7d2      	b.n	8017d20 <__sinit+0xc>
 8017d7a:	bf00      	nop
 8017d7c:	0801a724 	.word	0x0801a724
 8017d80:	08017cad 	.word	0x08017cad

08017d84 <__sfp>:
 8017d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d86:	4607      	mov	r7, r0
 8017d88:	f7ff ffac 	bl	8017ce4 <__sfp_lock_acquire>
 8017d8c:	4b1e      	ldr	r3, [pc, #120]	; (8017e08 <__sfp+0x84>)
 8017d8e:	681e      	ldr	r6, [r3, #0]
 8017d90:	69b3      	ldr	r3, [r6, #24]
 8017d92:	b913      	cbnz	r3, 8017d9a <__sfp+0x16>
 8017d94:	4630      	mov	r0, r6
 8017d96:	f7ff ffbd 	bl	8017d14 <__sinit>
 8017d9a:	3648      	adds	r6, #72	; 0x48
 8017d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017da0:	3b01      	subs	r3, #1
 8017da2:	d503      	bpl.n	8017dac <__sfp+0x28>
 8017da4:	6833      	ldr	r3, [r6, #0]
 8017da6:	b30b      	cbz	r3, 8017dec <__sfp+0x68>
 8017da8:	6836      	ldr	r6, [r6, #0]
 8017daa:	e7f7      	b.n	8017d9c <__sfp+0x18>
 8017dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017db0:	b9d5      	cbnz	r5, 8017de8 <__sfp+0x64>
 8017db2:	4b16      	ldr	r3, [pc, #88]	; (8017e0c <__sfp+0x88>)
 8017db4:	60e3      	str	r3, [r4, #12]
 8017db6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017dba:	6665      	str	r5, [r4, #100]	; 0x64
 8017dbc:	f000 f87e 	bl	8017ebc <__retarget_lock_init_recursive>
 8017dc0:	f7ff ff96 	bl	8017cf0 <__sfp_lock_release>
 8017dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017dcc:	6025      	str	r5, [r4, #0]
 8017dce:	61a5      	str	r5, [r4, #24]
 8017dd0:	2208      	movs	r2, #8
 8017dd2:	4629      	mov	r1, r5
 8017dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017dd8:	f000 f892 	bl	8017f00 <memset>
 8017ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017de4:	4620      	mov	r0, r4
 8017de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017de8:	3468      	adds	r4, #104	; 0x68
 8017dea:	e7d9      	b.n	8017da0 <__sfp+0x1c>
 8017dec:	2104      	movs	r1, #4
 8017dee:	4638      	mov	r0, r7
 8017df0:	f7ff ff62 	bl	8017cb8 <__sfmoreglue>
 8017df4:	4604      	mov	r4, r0
 8017df6:	6030      	str	r0, [r6, #0]
 8017df8:	2800      	cmp	r0, #0
 8017dfa:	d1d5      	bne.n	8017da8 <__sfp+0x24>
 8017dfc:	f7ff ff78 	bl	8017cf0 <__sfp_lock_release>
 8017e00:	230c      	movs	r3, #12
 8017e02:	603b      	str	r3, [r7, #0]
 8017e04:	e7ee      	b.n	8017de4 <__sfp+0x60>
 8017e06:	bf00      	nop
 8017e08:	0801a724 	.word	0x0801a724
 8017e0c:	ffff0001 	.word	0xffff0001

08017e10 <fiprintf>:
 8017e10:	b40e      	push	{r1, r2, r3}
 8017e12:	b503      	push	{r0, r1, lr}
 8017e14:	4601      	mov	r1, r0
 8017e16:	ab03      	add	r3, sp, #12
 8017e18:	4805      	ldr	r0, [pc, #20]	; (8017e30 <fiprintf+0x20>)
 8017e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e1e:	6800      	ldr	r0, [r0, #0]
 8017e20:	9301      	str	r3, [sp, #4]
 8017e22:	f000 f97f 	bl	8018124 <_vfiprintf_r>
 8017e26:	b002      	add	sp, #8
 8017e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e2c:	b003      	add	sp, #12
 8017e2e:	4770      	bx	lr
 8017e30:	240000a8 	.word	0x240000a8

08017e34 <_fwalk_reent>:
 8017e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e38:	4606      	mov	r6, r0
 8017e3a:	4688      	mov	r8, r1
 8017e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e40:	2700      	movs	r7, #0
 8017e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e46:	f1b9 0901 	subs.w	r9, r9, #1
 8017e4a:	d505      	bpl.n	8017e58 <_fwalk_reent+0x24>
 8017e4c:	6824      	ldr	r4, [r4, #0]
 8017e4e:	2c00      	cmp	r4, #0
 8017e50:	d1f7      	bne.n	8017e42 <_fwalk_reent+0xe>
 8017e52:	4638      	mov	r0, r7
 8017e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e58:	89ab      	ldrh	r3, [r5, #12]
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d907      	bls.n	8017e6e <_fwalk_reent+0x3a>
 8017e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e62:	3301      	adds	r3, #1
 8017e64:	d003      	beq.n	8017e6e <_fwalk_reent+0x3a>
 8017e66:	4629      	mov	r1, r5
 8017e68:	4630      	mov	r0, r6
 8017e6a:	47c0      	blx	r8
 8017e6c:	4307      	orrs	r7, r0
 8017e6e:	3568      	adds	r5, #104	; 0x68
 8017e70:	e7e9      	b.n	8017e46 <_fwalk_reent+0x12>
	...

08017e74 <__libc_init_array>:
 8017e74:	b570      	push	{r4, r5, r6, lr}
 8017e76:	4d0d      	ldr	r5, [pc, #52]	; (8017eac <__libc_init_array+0x38>)
 8017e78:	4c0d      	ldr	r4, [pc, #52]	; (8017eb0 <__libc_init_array+0x3c>)
 8017e7a:	1b64      	subs	r4, r4, r5
 8017e7c:	10a4      	asrs	r4, r4, #2
 8017e7e:	2600      	movs	r6, #0
 8017e80:	42a6      	cmp	r6, r4
 8017e82:	d109      	bne.n	8017e98 <__libc_init_array+0x24>
 8017e84:	4d0b      	ldr	r5, [pc, #44]	; (8017eb4 <__libc_init_array+0x40>)
 8017e86:	4c0c      	ldr	r4, [pc, #48]	; (8017eb8 <__libc_init_array+0x44>)
 8017e88:	f000 ffd0 	bl	8018e2c <_init>
 8017e8c:	1b64      	subs	r4, r4, r5
 8017e8e:	10a4      	asrs	r4, r4, #2
 8017e90:	2600      	movs	r6, #0
 8017e92:	42a6      	cmp	r6, r4
 8017e94:	d105      	bne.n	8017ea2 <__libc_init_array+0x2e>
 8017e96:	bd70      	pop	{r4, r5, r6, pc}
 8017e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e9c:	4798      	blx	r3
 8017e9e:	3601      	adds	r6, #1
 8017ea0:	e7ee      	b.n	8017e80 <__libc_init_array+0xc>
 8017ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ea6:	4798      	blx	r3
 8017ea8:	3601      	adds	r6, #1
 8017eaa:	e7f2      	b.n	8017e92 <__libc_init_array+0x1e>
 8017eac:	0801a778 	.word	0x0801a778
 8017eb0:	0801a778 	.word	0x0801a778
 8017eb4:	0801a778 	.word	0x0801a778
 8017eb8:	0801a78c 	.word	0x0801a78c

08017ebc <__retarget_lock_init_recursive>:
 8017ebc:	4770      	bx	lr

08017ebe <__retarget_lock_acquire_recursive>:
 8017ebe:	4770      	bx	lr

08017ec0 <__retarget_lock_release>:
 8017ec0:	4770      	bx	lr

08017ec2 <__retarget_lock_release_recursive>:
 8017ec2:	4770      	bx	lr

08017ec4 <malloc>:
 8017ec4:	4b02      	ldr	r3, [pc, #8]	; (8017ed0 <malloc+0xc>)
 8017ec6:	4601      	mov	r1, r0
 8017ec8:	6818      	ldr	r0, [r3, #0]
 8017eca:	f000 b88d 	b.w	8017fe8 <_malloc_r>
 8017ece:	bf00      	nop
 8017ed0:	240000a8 	.word	0x240000a8

08017ed4 <free>:
 8017ed4:	4b02      	ldr	r3, [pc, #8]	; (8017ee0 <free+0xc>)
 8017ed6:	4601      	mov	r1, r0
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	f000 b819 	b.w	8017f10 <_free_r>
 8017ede:	bf00      	nop
 8017ee0:	240000a8 	.word	0x240000a8

08017ee4 <memcpy>:
 8017ee4:	440a      	add	r2, r1
 8017ee6:	4291      	cmp	r1, r2
 8017ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8017eec:	d100      	bne.n	8017ef0 <memcpy+0xc>
 8017eee:	4770      	bx	lr
 8017ef0:	b510      	push	{r4, lr}
 8017ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017efa:	4291      	cmp	r1, r2
 8017efc:	d1f9      	bne.n	8017ef2 <memcpy+0xe>
 8017efe:	bd10      	pop	{r4, pc}

08017f00 <memset>:
 8017f00:	4402      	add	r2, r0
 8017f02:	4603      	mov	r3, r0
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d100      	bne.n	8017f0a <memset+0xa>
 8017f08:	4770      	bx	lr
 8017f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8017f0e:	e7f9      	b.n	8017f04 <memset+0x4>

08017f10 <_free_r>:
 8017f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f12:	2900      	cmp	r1, #0
 8017f14:	d044      	beq.n	8017fa0 <_free_r+0x90>
 8017f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f1a:	9001      	str	r0, [sp, #4]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8017f22:	bfb8      	it	lt
 8017f24:	18e4      	addlt	r4, r4, r3
 8017f26:	f000 ff41 	bl	8018dac <__malloc_lock>
 8017f2a:	4a1e      	ldr	r2, [pc, #120]	; (8017fa4 <_free_r+0x94>)
 8017f2c:	9801      	ldr	r0, [sp, #4]
 8017f2e:	6813      	ldr	r3, [r2, #0]
 8017f30:	b933      	cbnz	r3, 8017f40 <_free_r+0x30>
 8017f32:	6063      	str	r3, [r4, #4]
 8017f34:	6014      	str	r4, [r2, #0]
 8017f36:	b003      	add	sp, #12
 8017f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f3c:	f000 bf3c 	b.w	8018db8 <__malloc_unlock>
 8017f40:	42a3      	cmp	r3, r4
 8017f42:	d908      	bls.n	8017f56 <_free_r+0x46>
 8017f44:	6825      	ldr	r5, [r4, #0]
 8017f46:	1961      	adds	r1, r4, r5
 8017f48:	428b      	cmp	r3, r1
 8017f4a:	bf01      	itttt	eq
 8017f4c:	6819      	ldreq	r1, [r3, #0]
 8017f4e:	685b      	ldreq	r3, [r3, #4]
 8017f50:	1949      	addeq	r1, r1, r5
 8017f52:	6021      	streq	r1, [r4, #0]
 8017f54:	e7ed      	b.n	8017f32 <_free_r+0x22>
 8017f56:	461a      	mov	r2, r3
 8017f58:	685b      	ldr	r3, [r3, #4]
 8017f5a:	b10b      	cbz	r3, 8017f60 <_free_r+0x50>
 8017f5c:	42a3      	cmp	r3, r4
 8017f5e:	d9fa      	bls.n	8017f56 <_free_r+0x46>
 8017f60:	6811      	ldr	r1, [r2, #0]
 8017f62:	1855      	adds	r5, r2, r1
 8017f64:	42a5      	cmp	r5, r4
 8017f66:	d10b      	bne.n	8017f80 <_free_r+0x70>
 8017f68:	6824      	ldr	r4, [r4, #0]
 8017f6a:	4421      	add	r1, r4
 8017f6c:	1854      	adds	r4, r2, r1
 8017f6e:	42a3      	cmp	r3, r4
 8017f70:	6011      	str	r1, [r2, #0]
 8017f72:	d1e0      	bne.n	8017f36 <_free_r+0x26>
 8017f74:	681c      	ldr	r4, [r3, #0]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	6053      	str	r3, [r2, #4]
 8017f7a:	4421      	add	r1, r4
 8017f7c:	6011      	str	r1, [r2, #0]
 8017f7e:	e7da      	b.n	8017f36 <_free_r+0x26>
 8017f80:	d902      	bls.n	8017f88 <_free_r+0x78>
 8017f82:	230c      	movs	r3, #12
 8017f84:	6003      	str	r3, [r0, #0]
 8017f86:	e7d6      	b.n	8017f36 <_free_r+0x26>
 8017f88:	6825      	ldr	r5, [r4, #0]
 8017f8a:	1961      	adds	r1, r4, r5
 8017f8c:	428b      	cmp	r3, r1
 8017f8e:	bf04      	itt	eq
 8017f90:	6819      	ldreq	r1, [r3, #0]
 8017f92:	685b      	ldreq	r3, [r3, #4]
 8017f94:	6063      	str	r3, [r4, #4]
 8017f96:	bf04      	itt	eq
 8017f98:	1949      	addeq	r1, r1, r5
 8017f9a:	6021      	streq	r1, [r4, #0]
 8017f9c:	6054      	str	r4, [r2, #4]
 8017f9e:	e7ca      	b.n	8017f36 <_free_r+0x26>
 8017fa0:	b003      	add	sp, #12
 8017fa2:	bd30      	pop	{r4, r5, pc}
 8017fa4:	2400aeec 	.word	0x2400aeec

08017fa8 <sbrk_aligned>:
 8017fa8:	b570      	push	{r4, r5, r6, lr}
 8017faa:	4e0e      	ldr	r6, [pc, #56]	; (8017fe4 <sbrk_aligned+0x3c>)
 8017fac:	460c      	mov	r4, r1
 8017fae:	6831      	ldr	r1, [r6, #0]
 8017fb0:	4605      	mov	r5, r0
 8017fb2:	b911      	cbnz	r1, 8017fba <sbrk_aligned+0x12>
 8017fb4:	f000 fbe4 	bl	8018780 <_sbrk_r>
 8017fb8:	6030      	str	r0, [r6, #0]
 8017fba:	4621      	mov	r1, r4
 8017fbc:	4628      	mov	r0, r5
 8017fbe:	f000 fbdf 	bl	8018780 <_sbrk_r>
 8017fc2:	1c43      	adds	r3, r0, #1
 8017fc4:	d00a      	beq.n	8017fdc <sbrk_aligned+0x34>
 8017fc6:	1cc4      	adds	r4, r0, #3
 8017fc8:	f024 0403 	bic.w	r4, r4, #3
 8017fcc:	42a0      	cmp	r0, r4
 8017fce:	d007      	beq.n	8017fe0 <sbrk_aligned+0x38>
 8017fd0:	1a21      	subs	r1, r4, r0
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	f000 fbd4 	bl	8018780 <_sbrk_r>
 8017fd8:	3001      	adds	r0, #1
 8017fda:	d101      	bne.n	8017fe0 <sbrk_aligned+0x38>
 8017fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	bd70      	pop	{r4, r5, r6, pc}
 8017fe4:	2400aef0 	.word	0x2400aef0

08017fe8 <_malloc_r>:
 8017fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fec:	1ccd      	adds	r5, r1, #3
 8017fee:	f025 0503 	bic.w	r5, r5, #3
 8017ff2:	3508      	adds	r5, #8
 8017ff4:	2d0c      	cmp	r5, #12
 8017ff6:	bf38      	it	cc
 8017ff8:	250c      	movcc	r5, #12
 8017ffa:	2d00      	cmp	r5, #0
 8017ffc:	4607      	mov	r7, r0
 8017ffe:	db01      	blt.n	8018004 <_malloc_r+0x1c>
 8018000:	42a9      	cmp	r1, r5
 8018002:	d905      	bls.n	8018010 <_malloc_r+0x28>
 8018004:	230c      	movs	r3, #12
 8018006:	603b      	str	r3, [r7, #0]
 8018008:	2600      	movs	r6, #0
 801800a:	4630      	mov	r0, r6
 801800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018010:	4e2e      	ldr	r6, [pc, #184]	; (80180cc <_malloc_r+0xe4>)
 8018012:	f000 fecb 	bl	8018dac <__malloc_lock>
 8018016:	6833      	ldr	r3, [r6, #0]
 8018018:	461c      	mov	r4, r3
 801801a:	bb34      	cbnz	r4, 801806a <_malloc_r+0x82>
 801801c:	4629      	mov	r1, r5
 801801e:	4638      	mov	r0, r7
 8018020:	f7ff ffc2 	bl	8017fa8 <sbrk_aligned>
 8018024:	1c43      	adds	r3, r0, #1
 8018026:	4604      	mov	r4, r0
 8018028:	d14d      	bne.n	80180c6 <_malloc_r+0xde>
 801802a:	6834      	ldr	r4, [r6, #0]
 801802c:	4626      	mov	r6, r4
 801802e:	2e00      	cmp	r6, #0
 8018030:	d140      	bne.n	80180b4 <_malloc_r+0xcc>
 8018032:	6823      	ldr	r3, [r4, #0]
 8018034:	4631      	mov	r1, r6
 8018036:	4638      	mov	r0, r7
 8018038:	eb04 0803 	add.w	r8, r4, r3
 801803c:	f000 fba0 	bl	8018780 <_sbrk_r>
 8018040:	4580      	cmp	r8, r0
 8018042:	d13a      	bne.n	80180ba <_malloc_r+0xd2>
 8018044:	6821      	ldr	r1, [r4, #0]
 8018046:	3503      	adds	r5, #3
 8018048:	1a6d      	subs	r5, r5, r1
 801804a:	f025 0503 	bic.w	r5, r5, #3
 801804e:	3508      	adds	r5, #8
 8018050:	2d0c      	cmp	r5, #12
 8018052:	bf38      	it	cc
 8018054:	250c      	movcc	r5, #12
 8018056:	4629      	mov	r1, r5
 8018058:	4638      	mov	r0, r7
 801805a:	f7ff ffa5 	bl	8017fa8 <sbrk_aligned>
 801805e:	3001      	adds	r0, #1
 8018060:	d02b      	beq.n	80180ba <_malloc_r+0xd2>
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	442b      	add	r3, r5
 8018066:	6023      	str	r3, [r4, #0]
 8018068:	e00e      	b.n	8018088 <_malloc_r+0xa0>
 801806a:	6822      	ldr	r2, [r4, #0]
 801806c:	1b52      	subs	r2, r2, r5
 801806e:	d41e      	bmi.n	80180ae <_malloc_r+0xc6>
 8018070:	2a0b      	cmp	r2, #11
 8018072:	d916      	bls.n	80180a2 <_malloc_r+0xba>
 8018074:	1961      	adds	r1, r4, r5
 8018076:	42a3      	cmp	r3, r4
 8018078:	6025      	str	r5, [r4, #0]
 801807a:	bf18      	it	ne
 801807c:	6059      	strne	r1, [r3, #4]
 801807e:	6863      	ldr	r3, [r4, #4]
 8018080:	bf08      	it	eq
 8018082:	6031      	streq	r1, [r6, #0]
 8018084:	5162      	str	r2, [r4, r5]
 8018086:	604b      	str	r3, [r1, #4]
 8018088:	4638      	mov	r0, r7
 801808a:	f104 060b 	add.w	r6, r4, #11
 801808e:	f000 fe93 	bl	8018db8 <__malloc_unlock>
 8018092:	f026 0607 	bic.w	r6, r6, #7
 8018096:	1d23      	adds	r3, r4, #4
 8018098:	1af2      	subs	r2, r6, r3
 801809a:	d0b6      	beq.n	801800a <_malloc_r+0x22>
 801809c:	1b9b      	subs	r3, r3, r6
 801809e:	50a3      	str	r3, [r4, r2]
 80180a0:	e7b3      	b.n	801800a <_malloc_r+0x22>
 80180a2:	6862      	ldr	r2, [r4, #4]
 80180a4:	42a3      	cmp	r3, r4
 80180a6:	bf0c      	ite	eq
 80180a8:	6032      	streq	r2, [r6, #0]
 80180aa:	605a      	strne	r2, [r3, #4]
 80180ac:	e7ec      	b.n	8018088 <_malloc_r+0xa0>
 80180ae:	4623      	mov	r3, r4
 80180b0:	6864      	ldr	r4, [r4, #4]
 80180b2:	e7b2      	b.n	801801a <_malloc_r+0x32>
 80180b4:	4634      	mov	r4, r6
 80180b6:	6876      	ldr	r6, [r6, #4]
 80180b8:	e7b9      	b.n	801802e <_malloc_r+0x46>
 80180ba:	230c      	movs	r3, #12
 80180bc:	603b      	str	r3, [r7, #0]
 80180be:	4638      	mov	r0, r7
 80180c0:	f000 fe7a 	bl	8018db8 <__malloc_unlock>
 80180c4:	e7a1      	b.n	801800a <_malloc_r+0x22>
 80180c6:	6025      	str	r5, [r4, #0]
 80180c8:	e7de      	b.n	8018088 <_malloc_r+0xa0>
 80180ca:	bf00      	nop
 80180cc:	2400aeec 	.word	0x2400aeec

080180d0 <__sfputc_r>:
 80180d0:	6893      	ldr	r3, [r2, #8]
 80180d2:	3b01      	subs	r3, #1
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	b410      	push	{r4}
 80180d8:	6093      	str	r3, [r2, #8]
 80180da:	da08      	bge.n	80180ee <__sfputc_r+0x1e>
 80180dc:	6994      	ldr	r4, [r2, #24]
 80180de:	42a3      	cmp	r3, r4
 80180e0:	db01      	blt.n	80180e6 <__sfputc_r+0x16>
 80180e2:	290a      	cmp	r1, #10
 80180e4:	d103      	bne.n	80180ee <__sfputc_r+0x1e>
 80180e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ea:	f000 bbe1 	b.w	80188b0 <__swbuf_r>
 80180ee:	6813      	ldr	r3, [r2, #0]
 80180f0:	1c58      	adds	r0, r3, #1
 80180f2:	6010      	str	r0, [r2, #0]
 80180f4:	7019      	strb	r1, [r3, #0]
 80180f6:	4608      	mov	r0, r1
 80180f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180fc:	4770      	bx	lr

080180fe <__sfputs_r>:
 80180fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018100:	4606      	mov	r6, r0
 8018102:	460f      	mov	r7, r1
 8018104:	4614      	mov	r4, r2
 8018106:	18d5      	adds	r5, r2, r3
 8018108:	42ac      	cmp	r4, r5
 801810a:	d101      	bne.n	8018110 <__sfputs_r+0x12>
 801810c:	2000      	movs	r0, #0
 801810e:	e007      	b.n	8018120 <__sfputs_r+0x22>
 8018110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018114:	463a      	mov	r2, r7
 8018116:	4630      	mov	r0, r6
 8018118:	f7ff ffda 	bl	80180d0 <__sfputc_r>
 801811c:	1c43      	adds	r3, r0, #1
 801811e:	d1f3      	bne.n	8018108 <__sfputs_r+0xa>
 8018120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018124 <_vfiprintf_r>:
 8018124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018128:	460d      	mov	r5, r1
 801812a:	b09d      	sub	sp, #116	; 0x74
 801812c:	4614      	mov	r4, r2
 801812e:	4698      	mov	r8, r3
 8018130:	4606      	mov	r6, r0
 8018132:	b118      	cbz	r0, 801813c <_vfiprintf_r+0x18>
 8018134:	6983      	ldr	r3, [r0, #24]
 8018136:	b90b      	cbnz	r3, 801813c <_vfiprintf_r+0x18>
 8018138:	f7ff fdec 	bl	8017d14 <__sinit>
 801813c:	4b89      	ldr	r3, [pc, #548]	; (8018364 <_vfiprintf_r+0x240>)
 801813e:	429d      	cmp	r5, r3
 8018140:	d11b      	bne.n	801817a <_vfiprintf_r+0x56>
 8018142:	6875      	ldr	r5, [r6, #4]
 8018144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018146:	07d9      	lsls	r1, r3, #31
 8018148:	d405      	bmi.n	8018156 <_vfiprintf_r+0x32>
 801814a:	89ab      	ldrh	r3, [r5, #12]
 801814c:	059a      	lsls	r2, r3, #22
 801814e:	d402      	bmi.n	8018156 <_vfiprintf_r+0x32>
 8018150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018152:	f7ff feb4 	bl	8017ebe <__retarget_lock_acquire_recursive>
 8018156:	89ab      	ldrh	r3, [r5, #12]
 8018158:	071b      	lsls	r3, r3, #28
 801815a:	d501      	bpl.n	8018160 <_vfiprintf_r+0x3c>
 801815c:	692b      	ldr	r3, [r5, #16]
 801815e:	b9eb      	cbnz	r3, 801819c <_vfiprintf_r+0x78>
 8018160:	4629      	mov	r1, r5
 8018162:	4630      	mov	r0, r6
 8018164:	f000 fc08 	bl	8018978 <__swsetup_r>
 8018168:	b1c0      	cbz	r0, 801819c <_vfiprintf_r+0x78>
 801816a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801816c:	07dc      	lsls	r4, r3, #31
 801816e:	d50e      	bpl.n	801818e <_vfiprintf_r+0x6a>
 8018170:	f04f 30ff 	mov.w	r0, #4294967295
 8018174:	b01d      	add	sp, #116	; 0x74
 8018176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801817a:	4b7b      	ldr	r3, [pc, #492]	; (8018368 <_vfiprintf_r+0x244>)
 801817c:	429d      	cmp	r5, r3
 801817e:	d101      	bne.n	8018184 <_vfiprintf_r+0x60>
 8018180:	68b5      	ldr	r5, [r6, #8]
 8018182:	e7df      	b.n	8018144 <_vfiprintf_r+0x20>
 8018184:	4b79      	ldr	r3, [pc, #484]	; (801836c <_vfiprintf_r+0x248>)
 8018186:	429d      	cmp	r5, r3
 8018188:	bf08      	it	eq
 801818a:	68f5      	ldreq	r5, [r6, #12]
 801818c:	e7da      	b.n	8018144 <_vfiprintf_r+0x20>
 801818e:	89ab      	ldrh	r3, [r5, #12]
 8018190:	0598      	lsls	r0, r3, #22
 8018192:	d4ed      	bmi.n	8018170 <_vfiprintf_r+0x4c>
 8018194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018196:	f7ff fe94 	bl	8017ec2 <__retarget_lock_release_recursive>
 801819a:	e7e9      	b.n	8018170 <_vfiprintf_r+0x4c>
 801819c:	2300      	movs	r3, #0
 801819e:	9309      	str	r3, [sp, #36]	; 0x24
 80181a0:	2320      	movs	r3, #32
 80181a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80181aa:	2330      	movs	r3, #48	; 0x30
 80181ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018370 <_vfiprintf_r+0x24c>
 80181b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181b4:	f04f 0901 	mov.w	r9, #1
 80181b8:	4623      	mov	r3, r4
 80181ba:	469a      	mov	sl, r3
 80181bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181c0:	b10a      	cbz	r2, 80181c6 <_vfiprintf_r+0xa2>
 80181c2:	2a25      	cmp	r2, #37	; 0x25
 80181c4:	d1f9      	bne.n	80181ba <_vfiprintf_r+0x96>
 80181c6:	ebba 0b04 	subs.w	fp, sl, r4
 80181ca:	d00b      	beq.n	80181e4 <_vfiprintf_r+0xc0>
 80181cc:	465b      	mov	r3, fp
 80181ce:	4622      	mov	r2, r4
 80181d0:	4629      	mov	r1, r5
 80181d2:	4630      	mov	r0, r6
 80181d4:	f7ff ff93 	bl	80180fe <__sfputs_r>
 80181d8:	3001      	adds	r0, #1
 80181da:	f000 80aa 	beq.w	8018332 <_vfiprintf_r+0x20e>
 80181de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181e0:	445a      	add	r2, fp
 80181e2:	9209      	str	r2, [sp, #36]	; 0x24
 80181e4:	f89a 3000 	ldrb.w	r3, [sl]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	f000 80a2 	beq.w	8018332 <_vfiprintf_r+0x20e>
 80181ee:	2300      	movs	r3, #0
 80181f0:	f04f 32ff 	mov.w	r2, #4294967295
 80181f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181f8:	f10a 0a01 	add.w	sl, sl, #1
 80181fc:	9304      	str	r3, [sp, #16]
 80181fe:	9307      	str	r3, [sp, #28]
 8018200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018204:	931a      	str	r3, [sp, #104]	; 0x68
 8018206:	4654      	mov	r4, sl
 8018208:	2205      	movs	r2, #5
 801820a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801820e:	4858      	ldr	r0, [pc, #352]	; (8018370 <_vfiprintf_r+0x24c>)
 8018210:	f7e8 f86e 	bl	80002f0 <memchr>
 8018214:	9a04      	ldr	r2, [sp, #16]
 8018216:	b9d8      	cbnz	r0, 8018250 <_vfiprintf_r+0x12c>
 8018218:	06d1      	lsls	r1, r2, #27
 801821a:	bf44      	itt	mi
 801821c:	2320      	movmi	r3, #32
 801821e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018222:	0713      	lsls	r3, r2, #28
 8018224:	bf44      	itt	mi
 8018226:	232b      	movmi	r3, #43	; 0x2b
 8018228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801822c:	f89a 3000 	ldrb.w	r3, [sl]
 8018230:	2b2a      	cmp	r3, #42	; 0x2a
 8018232:	d015      	beq.n	8018260 <_vfiprintf_r+0x13c>
 8018234:	9a07      	ldr	r2, [sp, #28]
 8018236:	4654      	mov	r4, sl
 8018238:	2000      	movs	r0, #0
 801823a:	f04f 0c0a 	mov.w	ip, #10
 801823e:	4621      	mov	r1, r4
 8018240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018244:	3b30      	subs	r3, #48	; 0x30
 8018246:	2b09      	cmp	r3, #9
 8018248:	d94e      	bls.n	80182e8 <_vfiprintf_r+0x1c4>
 801824a:	b1b0      	cbz	r0, 801827a <_vfiprintf_r+0x156>
 801824c:	9207      	str	r2, [sp, #28]
 801824e:	e014      	b.n	801827a <_vfiprintf_r+0x156>
 8018250:	eba0 0308 	sub.w	r3, r0, r8
 8018254:	fa09 f303 	lsl.w	r3, r9, r3
 8018258:	4313      	orrs	r3, r2
 801825a:	9304      	str	r3, [sp, #16]
 801825c:	46a2      	mov	sl, r4
 801825e:	e7d2      	b.n	8018206 <_vfiprintf_r+0xe2>
 8018260:	9b03      	ldr	r3, [sp, #12]
 8018262:	1d19      	adds	r1, r3, #4
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	9103      	str	r1, [sp, #12]
 8018268:	2b00      	cmp	r3, #0
 801826a:	bfbb      	ittet	lt
 801826c:	425b      	neglt	r3, r3
 801826e:	f042 0202 	orrlt.w	r2, r2, #2
 8018272:	9307      	strge	r3, [sp, #28]
 8018274:	9307      	strlt	r3, [sp, #28]
 8018276:	bfb8      	it	lt
 8018278:	9204      	strlt	r2, [sp, #16]
 801827a:	7823      	ldrb	r3, [r4, #0]
 801827c:	2b2e      	cmp	r3, #46	; 0x2e
 801827e:	d10c      	bne.n	801829a <_vfiprintf_r+0x176>
 8018280:	7863      	ldrb	r3, [r4, #1]
 8018282:	2b2a      	cmp	r3, #42	; 0x2a
 8018284:	d135      	bne.n	80182f2 <_vfiprintf_r+0x1ce>
 8018286:	9b03      	ldr	r3, [sp, #12]
 8018288:	1d1a      	adds	r2, r3, #4
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	9203      	str	r2, [sp, #12]
 801828e:	2b00      	cmp	r3, #0
 8018290:	bfb8      	it	lt
 8018292:	f04f 33ff 	movlt.w	r3, #4294967295
 8018296:	3402      	adds	r4, #2
 8018298:	9305      	str	r3, [sp, #20]
 801829a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018380 <_vfiprintf_r+0x25c>
 801829e:	7821      	ldrb	r1, [r4, #0]
 80182a0:	2203      	movs	r2, #3
 80182a2:	4650      	mov	r0, sl
 80182a4:	f7e8 f824 	bl	80002f0 <memchr>
 80182a8:	b140      	cbz	r0, 80182bc <_vfiprintf_r+0x198>
 80182aa:	2340      	movs	r3, #64	; 0x40
 80182ac:	eba0 000a 	sub.w	r0, r0, sl
 80182b0:	fa03 f000 	lsl.w	r0, r3, r0
 80182b4:	9b04      	ldr	r3, [sp, #16]
 80182b6:	4303      	orrs	r3, r0
 80182b8:	3401      	adds	r4, #1
 80182ba:	9304      	str	r3, [sp, #16]
 80182bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182c0:	482c      	ldr	r0, [pc, #176]	; (8018374 <_vfiprintf_r+0x250>)
 80182c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182c6:	2206      	movs	r2, #6
 80182c8:	f7e8 f812 	bl	80002f0 <memchr>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d03f      	beq.n	8018350 <_vfiprintf_r+0x22c>
 80182d0:	4b29      	ldr	r3, [pc, #164]	; (8018378 <_vfiprintf_r+0x254>)
 80182d2:	bb1b      	cbnz	r3, 801831c <_vfiprintf_r+0x1f8>
 80182d4:	9b03      	ldr	r3, [sp, #12]
 80182d6:	3307      	adds	r3, #7
 80182d8:	f023 0307 	bic.w	r3, r3, #7
 80182dc:	3308      	adds	r3, #8
 80182de:	9303      	str	r3, [sp, #12]
 80182e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182e2:	443b      	add	r3, r7
 80182e4:	9309      	str	r3, [sp, #36]	; 0x24
 80182e6:	e767      	b.n	80181b8 <_vfiprintf_r+0x94>
 80182e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80182ec:	460c      	mov	r4, r1
 80182ee:	2001      	movs	r0, #1
 80182f0:	e7a5      	b.n	801823e <_vfiprintf_r+0x11a>
 80182f2:	2300      	movs	r3, #0
 80182f4:	3401      	adds	r4, #1
 80182f6:	9305      	str	r3, [sp, #20]
 80182f8:	4619      	mov	r1, r3
 80182fa:	f04f 0c0a 	mov.w	ip, #10
 80182fe:	4620      	mov	r0, r4
 8018300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018304:	3a30      	subs	r2, #48	; 0x30
 8018306:	2a09      	cmp	r2, #9
 8018308:	d903      	bls.n	8018312 <_vfiprintf_r+0x1ee>
 801830a:	2b00      	cmp	r3, #0
 801830c:	d0c5      	beq.n	801829a <_vfiprintf_r+0x176>
 801830e:	9105      	str	r1, [sp, #20]
 8018310:	e7c3      	b.n	801829a <_vfiprintf_r+0x176>
 8018312:	fb0c 2101 	mla	r1, ip, r1, r2
 8018316:	4604      	mov	r4, r0
 8018318:	2301      	movs	r3, #1
 801831a:	e7f0      	b.n	80182fe <_vfiprintf_r+0x1da>
 801831c:	ab03      	add	r3, sp, #12
 801831e:	9300      	str	r3, [sp, #0]
 8018320:	462a      	mov	r2, r5
 8018322:	4b16      	ldr	r3, [pc, #88]	; (801837c <_vfiprintf_r+0x258>)
 8018324:	a904      	add	r1, sp, #16
 8018326:	4630      	mov	r0, r6
 8018328:	f3af 8000 	nop.w
 801832c:	4607      	mov	r7, r0
 801832e:	1c78      	adds	r0, r7, #1
 8018330:	d1d6      	bne.n	80182e0 <_vfiprintf_r+0x1bc>
 8018332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018334:	07d9      	lsls	r1, r3, #31
 8018336:	d405      	bmi.n	8018344 <_vfiprintf_r+0x220>
 8018338:	89ab      	ldrh	r3, [r5, #12]
 801833a:	059a      	lsls	r2, r3, #22
 801833c:	d402      	bmi.n	8018344 <_vfiprintf_r+0x220>
 801833e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018340:	f7ff fdbf 	bl	8017ec2 <__retarget_lock_release_recursive>
 8018344:	89ab      	ldrh	r3, [r5, #12]
 8018346:	065b      	lsls	r3, r3, #25
 8018348:	f53f af12 	bmi.w	8018170 <_vfiprintf_r+0x4c>
 801834c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801834e:	e711      	b.n	8018174 <_vfiprintf_r+0x50>
 8018350:	ab03      	add	r3, sp, #12
 8018352:	9300      	str	r3, [sp, #0]
 8018354:	462a      	mov	r2, r5
 8018356:	4b09      	ldr	r3, [pc, #36]	; (801837c <_vfiprintf_r+0x258>)
 8018358:	a904      	add	r1, sp, #16
 801835a:	4630      	mov	r0, r6
 801835c:	f000 f880 	bl	8018460 <_printf_i>
 8018360:	e7e4      	b.n	801832c <_vfiprintf_r+0x208>
 8018362:	bf00      	nop
 8018364:	0801a6e4 	.word	0x0801a6e4
 8018368:	0801a704 	.word	0x0801a704
 801836c:	0801a6c4 	.word	0x0801a6c4
 8018370:	0801a728 	.word	0x0801a728
 8018374:	0801a732 	.word	0x0801a732
 8018378:	00000000 	.word	0x00000000
 801837c:	080180ff 	.word	0x080180ff
 8018380:	0801a72e 	.word	0x0801a72e

08018384 <_printf_common>:
 8018384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018388:	4616      	mov	r6, r2
 801838a:	4699      	mov	r9, r3
 801838c:	688a      	ldr	r2, [r1, #8]
 801838e:	690b      	ldr	r3, [r1, #16]
 8018390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018394:	4293      	cmp	r3, r2
 8018396:	bfb8      	it	lt
 8018398:	4613      	movlt	r3, r2
 801839a:	6033      	str	r3, [r6, #0]
 801839c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80183a0:	4607      	mov	r7, r0
 80183a2:	460c      	mov	r4, r1
 80183a4:	b10a      	cbz	r2, 80183aa <_printf_common+0x26>
 80183a6:	3301      	adds	r3, #1
 80183a8:	6033      	str	r3, [r6, #0]
 80183aa:	6823      	ldr	r3, [r4, #0]
 80183ac:	0699      	lsls	r1, r3, #26
 80183ae:	bf42      	ittt	mi
 80183b0:	6833      	ldrmi	r3, [r6, #0]
 80183b2:	3302      	addmi	r3, #2
 80183b4:	6033      	strmi	r3, [r6, #0]
 80183b6:	6825      	ldr	r5, [r4, #0]
 80183b8:	f015 0506 	ands.w	r5, r5, #6
 80183bc:	d106      	bne.n	80183cc <_printf_common+0x48>
 80183be:	f104 0a19 	add.w	sl, r4, #25
 80183c2:	68e3      	ldr	r3, [r4, #12]
 80183c4:	6832      	ldr	r2, [r6, #0]
 80183c6:	1a9b      	subs	r3, r3, r2
 80183c8:	42ab      	cmp	r3, r5
 80183ca:	dc26      	bgt.n	801841a <_printf_common+0x96>
 80183cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80183d0:	1e13      	subs	r3, r2, #0
 80183d2:	6822      	ldr	r2, [r4, #0]
 80183d4:	bf18      	it	ne
 80183d6:	2301      	movne	r3, #1
 80183d8:	0692      	lsls	r2, r2, #26
 80183da:	d42b      	bmi.n	8018434 <_printf_common+0xb0>
 80183dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183e0:	4649      	mov	r1, r9
 80183e2:	4638      	mov	r0, r7
 80183e4:	47c0      	blx	r8
 80183e6:	3001      	adds	r0, #1
 80183e8:	d01e      	beq.n	8018428 <_printf_common+0xa4>
 80183ea:	6823      	ldr	r3, [r4, #0]
 80183ec:	68e5      	ldr	r5, [r4, #12]
 80183ee:	6832      	ldr	r2, [r6, #0]
 80183f0:	f003 0306 	and.w	r3, r3, #6
 80183f4:	2b04      	cmp	r3, #4
 80183f6:	bf08      	it	eq
 80183f8:	1aad      	subeq	r5, r5, r2
 80183fa:	68a3      	ldr	r3, [r4, #8]
 80183fc:	6922      	ldr	r2, [r4, #16]
 80183fe:	bf0c      	ite	eq
 8018400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018404:	2500      	movne	r5, #0
 8018406:	4293      	cmp	r3, r2
 8018408:	bfc4      	itt	gt
 801840a:	1a9b      	subgt	r3, r3, r2
 801840c:	18ed      	addgt	r5, r5, r3
 801840e:	2600      	movs	r6, #0
 8018410:	341a      	adds	r4, #26
 8018412:	42b5      	cmp	r5, r6
 8018414:	d11a      	bne.n	801844c <_printf_common+0xc8>
 8018416:	2000      	movs	r0, #0
 8018418:	e008      	b.n	801842c <_printf_common+0xa8>
 801841a:	2301      	movs	r3, #1
 801841c:	4652      	mov	r2, sl
 801841e:	4649      	mov	r1, r9
 8018420:	4638      	mov	r0, r7
 8018422:	47c0      	blx	r8
 8018424:	3001      	adds	r0, #1
 8018426:	d103      	bne.n	8018430 <_printf_common+0xac>
 8018428:	f04f 30ff 	mov.w	r0, #4294967295
 801842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018430:	3501      	adds	r5, #1
 8018432:	e7c6      	b.n	80183c2 <_printf_common+0x3e>
 8018434:	18e1      	adds	r1, r4, r3
 8018436:	1c5a      	adds	r2, r3, #1
 8018438:	2030      	movs	r0, #48	; 0x30
 801843a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801843e:	4422      	add	r2, r4
 8018440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018448:	3302      	adds	r3, #2
 801844a:	e7c7      	b.n	80183dc <_printf_common+0x58>
 801844c:	2301      	movs	r3, #1
 801844e:	4622      	mov	r2, r4
 8018450:	4649      	mov	r1, r9
 8018452:	4638      	mov	r0, r7
 8018454:	47c0      	blx	r8
 8018456:	3001      	adds	r0, #1
 8018458:	d0e6      	beq.n	8018428 <_printf_common+0xa4>
 801845a:	3601      	adds	r6, #1
 801845c:	e7d9      	b.n	8018412 <_printf_common+0x8e>
	...

08018460 <_printf_i>:
 8018460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018464:	7e0f      	ldrb	r7, [r1, #24]
 8018466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018468:	2f78      	cmp	r7, #120	; 0x78
 801846a:	4691      	mov	r9, r2
 801846c:	4680      	mov	r8, r0
 801846e:	460c      	mov	r4, r1
 8018470:	469a      	mov	sl, r3
 8018472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018476:	d807      	bhi.n	8018488 <_printf_i+0x28>
 8018478:	2f62      	cmp	r7, #98	; 0x62
 801847a:	d80a      	bhi.n	8018492 <_printf_i+0x32>
 801847c:	2f00      	cmp	r7, #0
 801847e:	f000 80d8 	beq.w	8018632 <_printf_i+0x1d2>
 8018482:	2f58      	cmp	r7, #88	; 0x58
 8018484:	f000 80a3 	beq.w	80185ce <_printf_i+0x16e>
 8018488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801848c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018490:	e03a      	b.n	8018508 <_printf_i+0xa8>
 8018492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018496:	2b15      	cmp	r3, #21
 8018498:	d8f6      	bhi.n	8018488 <_printf_i+0x28>
 801849a:	a101      	add	r1, pc, #4	; (adr r1, 80184a0 <_printf_i+0x40>)
 801849c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184a0:	080184f9 	.word	0x080184f9
 80184a4:	0801850d 	.word	0x0801850d
 80184a8:	08018489 	.word	0x08018489
 80184ac:	08018489 	.word	0x08018489
 80184b0:	08018489 	.word	0x08018489
 80184b4:	08018489 	.word	0x08018489
 80184b8:	0801850d 	.word	0x0801850d
 80184bc:	08018489 	.word	0x08018489
 80184c0:	08018489 	.word	0x08018489
 80184c4:	08018489 	.word	0x08018489
 80184c8:	08018489 	.word	0x08018489
 80184cc:	08018619 	.word	0x08018619
 80184d0:	0801853d 	.word	0x0801853d
 80184d4:	080185fb 	.word	0x080185fb
 80184d8:	08018489 	.word	0x08018489
 80184dc:	08018489 	.word	0x08018489
 80184e0:	0801863b 	.word	0x0801863b
 80184e4:	08018489 	.word	0x08018489
 80184e8:	0801853d 	.word	0x0801853d
 80184ec:	08018489 	.word	0x08018489
 80184f0:	08018489 	.word	0x08018489
 80184f4:	08018603 	.word	0x08018603
 80184f8:	682b      	ldr	r3, [r5, #0]
 80184fa:	1d1a      	adds	r2, r3, #4
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	602a      	str	r2, [r5, #0]
 8018500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018508:	2301      	movs	r3, #1
 801850a:	e0a3      	b.n	8018654 <_printf_i+0x1f4>
 801850c:	6820      	ldr	r0, [r4, #0]
 801850e:	6829      	ldr	r1, [r5, #0]
 8018510:	0606      	lsls	r6, r0, #24
 8018512:	f101 0304 	add.w	r3, r1, #4
 8018516:	d50a      	bpl.n	801852e <_printf_i+0xce>
 8018518:	680e      	ldr	r6, [r1, #0]
 801851a:	602b      	str	r3, [r5, #0]
 801851c:	2e00      	cmp	r6, #0
 801851e:	da03      	bge.n	8018528 <_printf_i+0xc8>
 8018520:	232d      	movs	r3, #45	; 0x2d
 8018522:	4276      	negs	r6, r6
 8018524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018528:	485e      	ldr	r0, [pc, #376]	; (80186a4 <_printf_i+0x244>)
 801852a:	230a      	movs	r3, #10
 801852c:	e019      	b.n	8018562 <_printf_i+0x102>
 801852e:	680e      	ldr	r6, [r1, #0]
 8018530:	602b      	str	r3, [r5, #0]
 8018532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018536:	bf18      	it	ne
 8018538:	b236      	sxthne	r6, r6
 801853a:	e7ef      	b.n	801851c <_printf_i+0xbc>
 801853c:	682b      	ldr	r3, [r5, #0]
 801853e:	6820      	ldr	r0, [r4, #0]
 8018540:	1d19      	adds	r1, r3, #4
 8018542:	6029      	str	r1, [r5, #0]
 8018544:	0601      	lsls	r1, r0, #24
 8018546:	d501      	bpl.n	801854c <_printf_i+0xec>
 8018548:	681e      	ldr	r6, [r3, #0]
 801854a:	e002      	b.n	8018552 <_printf_i+0xf2>
 801854c:	0646      	lsls	r6, r0, #25
 801854e:	d5fb      	bpl.n	8018548 <_printf_i+0xe8>
 8018550:	881e      	ldrh	r6, [r3, #0]
 8018552:	4854      	ldr	r0, [pc, #336]	; (80186a4 <_printf_i+0x244>)
 8018554:	2f6f      	cmp	r7, #111	; 0x6f
 8018556:	bf0c      	ite	eq
 8018558:	2308      	moveq	r3, #8
 801855a:	230a      	movne	r3, #10
 801855c:	2100      	movs	r1, #0
 801855e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018562:	6865      	ldr	r5, [r4, #4]
 8018564:	60a5      	str	r5, [r4, #8]
 8018566:	2d00      	cmp	r5, #0
 8018568:	bfa2      	ittt	ge
 801856a:	6821      	ldrge	r1, [r4, #0]
 801856c:	f021 0104 	bicge.w	r1, r1, #4
 8018570:	6021      	strge	r1, [r4, #0]
 8018572:	b90e      	cbnz	r6, 8018578 <_printf_i+0x118>
 8018574:	2d00      	cmp	r5, #0
 8018576:	d04d      	beq.n	8018614 <_printf_i+0x1b4>
 8018578:	4615      	mov	r5, r2
 801857a:	fbb6 f1f3 	udiv	r1, r6, r3
 801857e:	fb03 6711 	mls	r7, r3, r1, r6
 8018582:	5dc7      	ldrb	r7, [r0, r7]
 8018584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018588:	4637      	mov	r7, r6
 801858a:	42bb      	cmp	r3, r7
 801858c:	460e      	mov	r6, r1
 801858e:	d9f4      	bls.n	801857a <_printf_i+0x11a>
 8018590:	2b08      	cmp	r3, #8
 8018592:	d10b      	bne.n	80185ac <_printf_i+0x14c>
 8018594:	6823      	ldr	r3, [r4, #0]
 8018596:	07de      	lsls	r6, r3, #31
 8018598:	d508      	bpl.n	80185ac <_printf_i+0x14c>
 801859a:	6923      	ldr	r3, [r4, #16]
 801859c:	6861      	ldr	r1, [r4, #4]
 801859e:	4299      	cmp	r1, r3
 80185a0:	bfde      	ittt	le
 80185a2:	2330      	movle	r3, #48	; 0x30
 80185a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80185a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80185ac:	1b52      	subs	r2, r2, r5
 80185ae:	6122      	str	r2, [r4, #16]
 80185b0:	f8cd a000 	str.w	sl, [sp]
 80185b4:	464b      	mov	r3, r9
 80185b6:	aa03      	add	r2, sp, #12
 80185b8:	4621      	mov	r1, r4
 80185ba:	4640      	mov	r0, r8
 80185bc:	f7ff fee2 	bl	8018384 <_printf_common>
 80185c0:	3001      	adds	r0, #1
 80185c2:	d14c      	bne.n	801865e <_printf_i+0x1fe>
 80185c4:	f04f 30ff 	mov.w	r0, #4294967295
 80185c8:	b004      	add	sp, #16
 80185ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ce:	4835      	ldr	r0, [pc, #212]	; (80186a4 <_printf_i+0x244>)
 80185d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80185d4:	6829      	ldr	r1, [r5, #0]
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80185dc:	6029      	str	r1, [r5, #0]
 80185de:	061d      	lsls	r5, r3, #24
 80185e0:	d514      	bpl.n	801860c <_printf_i+0x1ac>
 80185e2:	07df      	lsls	r7, r3, #31
 80185e4:	bf44      	itt	mi
 80185e6:	f043 0320 	orrmi.w	r3, r3, #32
 80185ea:	6023      	strmi	r3, [r4, #0]
 80185ec:	b91e      	cbnz	r6, 80185f6 <_printf_i+0x196>
 80185ee:	6823      	ldr	r3, [r4, #0]
 80185f0:	f023 0320 	bic.w	r3, r3, #32
 80185f4:	6023      	str	r3, [r4, #0]
 80185f6:	2310      	movs	r3, #16
 80185f8:	e7b0      	b.n	801855c <_printf_i+0xfc>
 80185fa:	6823      	ldr	r3, [r4, #0]
 80185fc:	f043 0320 	orr.w	r3, r3, #32
 8018600:	6023      	str	r3, [r4, #0]
 8018602:	2378      	movs	r3, #120	; 0x78
 8018604:	4828      	ldr	r0, [pc, #160]	; (80186a8 <_printf_i+0x248>)
 8018606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801860a:	e7e3      	b.n	80185d4 <_printf_i+0x174>
 801860c:	0659      	lsls	r1, r3, #25
 801860e:	bf48      	it	mi
 8018610:	b2b6      	uxthmi	r6, r6
 8018612:	e7e6      	b.n	80185e2 <_printf_i+0x182>
 8018614:	4615      	mov	r5, r2
 8018616:	e7bb      	b.n	8018590 <_printf_i+0x130>
 8018618:	682b      	ldr	r3, [r5, #0]
 801861a:	6826      	ldr	r6, [r4, #0]
 801861c:	6961      	ldr	r1, [r4, #20]
 801861e:	1d18      	adds	r0, r3, #4
 8018620:	6028      	str	r0, [r5, #0]
 8018622:	0635      	lsls	r5, r6, #24
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	d501      	bpl.n	801862c <_printf_i+0x1cc>
 8018628:	6019      	str	r1, [r3, #0]
 801862a:	e002      	b.n	8018632 <_printf_i+0x1d2>
 801862c:	0670      	lsls	r0, r6, #25
 801862e:	d5fb      	bpl.n	8018628 <_printf_i+0x1c8>
 8018630:	8019      	strh	r1, [r3, #0]
 8018632:	2300      	movs	r3, #0
 8018634:	6123      	str	r3, [r4, #16]
 8018636:	4615      	mov	r5, r2
 8018638:	e7ba      	b.n	80185b0 <_printf_i+0x150>
 801863a:	682b      	ldr	r3, [r5, #0]
 801863c:	1d1a      	adds	r2, r3, #4
 801863e:	602a      	str	r2, [r5, #0]
 8018640:	681d      	ldr	r5, [r3, #0]
 8018642:	6862      	ldr	r2, [r4, #4]
 8018644:	2100      	movs	r1, #0
 8018646:	4628      	mov	r0, r5
 8018648:	f7e7 fe52 	bl	80002f0 <memchr>
 801864c:	b108      	cbz	r0, 8018652 <_printf_i+0x1f2>
 801864e:	1b40      	subs	r0, r0, r5
 8018650:	6060      	str	r0, [r4, #4]
 8018652:	6863      	ldr	r3, [r4, #4]
 8018654:	6123      	str	r3, [r4, #16]
 8018656:	2300      	movs	r3, #0
 8018658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801865c:	e7a8      	b.n	80185b0 <_printf_i+0x150>
 801865e:	6923      	ldr	r3, [r4, #16]
 8018660:	462a      	mov	r2, r5
 8018662:	4649      	mov	r1, r9
 8018664:	4640      	mov	r0, r8
 8018666:	47d0      	blx	sl
 8018668:	3001      	adds	r0, #1
 801866a:	d0ab      	beq.n	80185c4 <_printf_i+0x164>
 801866c:	6823      	ldr	r3, [r4, #0]
 801866e:	079b      	lsls	r3, r3, #30
 8018670:	d413      	bmi.n	801869a <_printf_i+0x23a>
 8018672:	68e0      	ldr	r0, [r4, #12]
 8018674:	9b03      	ldr	r3, [sp, #12]
 8018676:	4298      	cmp	r0, r3
 8018678:	bfb8      	it	lt
 801867a:	4618      	movlt	r0, r3
 801867c:	e7a4      	b.n	80185c8 <_printf_i+0x168>
 801867e:	2301      	movs	r3, #1
 8018680:	4632      	mov	r2, r6
 8018682:	4649      	mov	r1, r9
 8018684:	4640      	mov	r0, r8
 8018686:	47d0      	blx	sl
 8018688:	3001      	adds	r0, #1
 801868a:	d09b      	beq.n	80185c4 <_printf_i+0x164>
 801868c:	3501      	adds	r5, #1
 801868e:	68e3      	ldr	r3, [r4, #12]
 8018690:	9903      	ldr	r1, [sp, #12]
 8018692:	1a5b      	subs	r3, r3, r1
 8018694:	42ab      	cmp	r3, r5
 8018696:	dcf2      	bgt.n	801867e <_printf_i+0x21e>
 8018698:	e7eb      	b.n	8018672 <_printf_i+0x212>
 801869a:	2500      	movs	r5, #0
 801869c:	f104 0619 	add.w	r6, r4, #25
 80186a0:	e7f5      	b.n	801868e <_printf_i+0x22e>
 80186a2:	bf00      	nop
 80186a4:	0801a739 	.word	0x0801a739
 80186a8:	0801a74a 	.word	0x0801a74a

080186ac <cleanup_glue>:
 80186ac:	b538      	push	{r3, r4, r5, lr}
 80186ae:	460c      	mov	r4, r1
 80186b0:	6809      	ldr	r1, [r1, #0]
 80186b2:	4605      	mov	r5, r0
 80186b4:	b109      	cbz	r1, 80186ba <cleanup_glue+0xe>
 80186b6:	f7ff fff9 	bl	80186ac <cleanup_glue>
 80186ba:	4621      	mov	r1, r4
 80186bc:	4628      	mov	r0, r5
 80186be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186c2:	f7ff bc25 	b.w	8017f10 <_free_r>
	...

080186c8 <_reclaim_reent>:
 80186c8:	4b2c      	ldr	r3, [pc, #176]	; (801877c <_reclaim_reent+0xb4>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	4283      	cmp	r3, r0
 80186ce:	b570      	push	{r4, r5, r6, lr}
 80186d0:	4604      	mov	r4, r0
 80186d2:	d051      	beq.n	8018778 <_reclaim_reent+0xb0>
 80186d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186d6:	b143      	cbz	r3, 80186ea <_reclaim_reent+0x22>
 80186d8:	68db      	ldr	r3, [r3, #12]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d14a      	bne.n	8018774 <_reclaim_reent+0xac>
 80186de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186e0:	6819      	ldr	r1, [r3, #0]
 80186e2:	b111      	cbz	r1, 80186ea <_reclaim_reent+0x22>
 80186e4:	4620      	mov	r0, r4
 80186e6:	f7ff fc13 	bl	8017f10 <_free_r>
 80186ea:	6961      	ldr	r1, [r4, #20]
 80186ec:	b111      	cbz	r1, 80186f4 <_reclaim_reent+0x2c>
 80186ee:	4620      	mov	r0, r4
 80186f0:	f7ff fc0e 	bl	8017f10 <_free_r>
 80186f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80186f6:	b111      	cbz	r1, 80186fe <_reclaim_reent+0x36>
 80186f8:	4620      	mov	r0, r4
 80186fa:	f7ff fc09 	bl	8017f10 <_free_r>
 80186fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018700:	b111      	cbz	r1, 8018708 <_reclaim_reent+0x40>
 8018702:	4620      	mov	r0, r4
 8018704:	f7ff fc04 	bl	8017f10 <_free_r>
 8018708:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801870a:	b111      	cbz	r1, 8018712 <_reclaim_reent+0x4a>
 801870c:	4620      	mov	r0, r4
 801870e:	f7ff fbff 	bl	8017f10 <_free_r>
 8018712:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018714:	b111      	cbz	r1, 801871c <_reclaim_reent+0x54>
 8018716:	4620      	mov	r0, r4
 8018718:	f7ff fbfa 	bl	8017f10 <_free_r>
 801871c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801871e:	b111      	cbz	r1, 8018726 <_reclaim_reent+0x5e>
 8018720:	4620      	mov	r0, r4
 8018722:	f7ff fbf5 	bl	8017f10 <_free_r>
 8018726:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018728:	b111      	cbz	r1, 8018730 <_reclaim_reent+0x68>
 801872a:	4620      	mov	r0, r4
 801872c:	f7ff fbf0 	bl	8017f10 <_free_r>
 8018730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018732:	b111      	cbz	r1, 801873a <_reclaim_reent+0x72>
 8018734:	4620      	mov	r0, r4
 8018736:	f7ff fbeb 	bl	8017f10 <_free_r>
 801873a:	69a3      	ldr	r3, [r4, #24]
 801873c:	b1e3      	cbz	r3, 8018778 <_reclaim_reent+0xb0>
 801873e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018740:	4620      	mov	r0, r4
 8018742:	4798      	blx	r3
 8018744:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018746:	b1b9      	cbz	r1, 8018778 <_reclaim_reent+0xb0>
 8018748:	4620      	mov	r0, r4
 801874a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801874e:	f7ff bfad 	b.w	80186ac <cleanup_glue>
 8018752:	5949      	ldr	r1, [r1, r5]
 8018754:	b941      	cbnz	r1, 8018768 <_reclaim_reent+0xa0>
 8018756:	3504      	adds	r5, #4
 8018758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801875a:	2d80      	cmp	r5, #128	; 0x80
 801875c:	68d9      	ldr	r1, [r3, #12]
 801875e:	d1f8      	bne.n	8018752 <_reclaim_reent+0x8a>
 8018760:	4620      	mov	r0, r4
 8018762:	f7ff fbd5 	bl	8017f10 <_free_r>
 8018766:	e7ba      	b.n	80186de <_reclaim_reent+0x16>
 8018768:	680e      	ldr	r6, [r1, #0]
 801876a:	4620      	mov	r0, r4
 801876c:	f7ff fbd0 	bl	8017f10 <_free_r>
 8018770:	4631      	mov	r1, r6
 8018772:	e7ef      	b.n	8018754 <_reclaim_reent+0x8c>
 8018774:	2500      	movs	r5, #0
 8018776:	e7ef      	b.n	8018758 <_reclaim_reent+0x90>
 8018778:	bd70      	pop	{r4, r5, r6, pc}
 801877a:	bf00      	nop
 801877c:	240000a8 	.word	0x240000a8

08018780 <_sbrk_r>:
 8018780:	b538      	push	{r3, r4, r5, lr}
 8018782:	4d06      	ldr	r5, [pc, #24]	; (801879c <_sbrk_r+0x1c>)
 8018784:	2300      	movs	r3, #0
 8018786:	4604      	mov	r4, r0
 8018788:	4608      	mov	r0, r1
 801878a:	602b      	str	r3, [r5, #0]
 801878c:	f7e9 fd8a 	bl	80022a4 <_sbrk>
 8018790:	1c43      	adds	r3, r0, #1
 8018792:	d102      	bne.n	801879a <_sbrk_r+0x1a>
 8018794:	682b      	ldr	r3, [r5, #0]
 8018796:	b103      	cbz	r3, 801879a <_sbrk_r+0x1a>
 8018798:	6023      	str	r3, [r4, #0]
 801879a:	bd38      	pop	{r3, r4, r5, pc}
 801879c:	2400affc 	.word	0x2400affc

080187a0 <_raise_r>:
 80187a0:	291f      	cmp	r1, #31
 80187a2:	b538      	push	{r3, r4, r5, lr}
 80187a4:	4604      	mov	r4, r0
 80187a6:	460d      	mov	r5, r1
 80187a8:	d904      	bls.n	80187b4 <_raise_r+0x14>
 80187aa:	2316      	movs	r3, #22
 80187ac:	6003      	str	r3, [r0, #0]
 80187ae:	f04f 30ff 	mov.w	r0, #4294967295
 80187b2:	bd38      	pop	{r3, r4, r5, pc}
 80187b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80187b6:	b112      	cbz	r2, 80187be <_raise_r+0x1e>
 80187b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187bc:	b94b      	cbnz	r3, 80187d2 <_raise_r+0x32>
 80187be:	4620      	mov	r0, r4
 80187c0:	f000 f830 	bl	8018824 <_getpid_r>
 80187c4:	462a      	mov	r2, r5
 80187c6:	4601      	mov	r1, r0
 80187c8:	4620      	mov	r0, r4
 80187ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187ce:	f000 b817 	b.w	8018800 <_kill_r>
 80187d2:	2b01      	cmp	r3, #1
 80187d4:	d00a      	beq.n	80187ec <_raise_r+0x4c>
 80187d6:	1c59      	adds	r1, r3, #1
 80187d8:	d103      	bne.n	80187e2 <_raise_r+0x42>
 80187da:	2316      	movs	r3, #22
 80187dc:	6003      	str	r3, [r0, #0]
 80187de:	2001      	movs	r0, #1
 80187e0:	e7e7      	b.n	80187b2 <_raise_r+0x12>
 80187e2:	2400      	movs	r4, #0
 80187e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80187e8:	4628      	mov	r0, r5
 80187ea:	4798      	blx	r3
 80187ec:	2000      	movs	r0, #0
 80187ee:	e7e0      	b.n	80187b2 <_raise_r+0x12>

080187f0 <raise>:
 80187f0:	4b02      	ldr	r3, [pc, #8]	; (80187fc <raise+0xc>)
 80187f2:	4601      	mov	r1, r0
 80187f4:	6818      	ldr	r0, [r3, #0]
 80187f6:	f7ff bfd3 	b.w	80187a0 <_raise_r>
 80187fa:	bf00      	nop
 80187fc:	240000a8 	.word	0x240000a8

08018800 <_kill_r>:
 8018800:	b538      	push	{r3, r4, r5, lr}
 8018802:	4d07      	ldr	r5, [pc, #28]	; (8018820 <_kill_r+0x20>)
 8018804:	2300      	movs	r3, #0
 8018806:	4604      	mov	r4, r0
 8018808:	4608      	mov	r0, r1
 801880a:	4611      	mov	r1, r2
 801880c:	602b      	str	r3, [r5, #0]
 801880e:	f7e9 fd11 	bl	8002234 <_kill>
 8018812:	1c43      	adds	r3, r0, #1
 8018814:	d102      	bne.n	801881c <_kill_r+0x1c>
 8018816:	682b      	ldr	r3, [r5, #0]
 8018818:	b103      	cbz	r3, 801881c <_kill_r+0x1c>
 801881a:	6023      	str	r3, [r4, #0]
 801881c:	bd38      	pop	{r3, r4, r5, pc}
 801881e:	bf00      	nop
 8018820:	2400affc 	.word	0x2400affc

08018824 <_getpid_r>:
 8018824:	f7e9 bd04 	b.w	8002230 <_getpid>

08018828 <__sread>:
 8018828:	b510      	push	{r4, lr}
 801882a:	460c      	mov	r4, r1
 801882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018830:	f000 fac8 	bl	8018dc4 <_read_r>
 8018834:	2800      	cmp	r0, #0
 8018836:	bfab      	itete	ge
 8018838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801883a:	89a3      	ldrhlt	r3, [r4, #12]
 801883c:	181b      	addge	r3, r3, r0
 801883e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018842:	bfac      	ite	ge
 8018844:	6563      	strge	r3, [r4, #84]	; 0x54
 8018846:	81a3      	strhlt	r3, [r4, #12]
 8018848:	bd10      	pop	{r4, pc}

0801884a <__swrite>:
 801884a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801884e:	461f      	mov	r7, r3
 8018850:	898b      	ldrh	r3, [r1, #12]
 8018852:	05db      	lsls	r3, r3, #23
 8018854:	4605      	mov	r5, r0
 8018856:	460c      	mov	r4, r1
 8018858:	4616      	mov	r6, r2
 801885a:	d505      	bpl.n	8018868 <__swrite+0x1e>
 801885c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018860:	2302      	movs	r3, #2
 8018862:	2200      	movs	r2, #0
 8018864:	f000 fa2a 	bl	8018cbc <_lseek_r>
 8018868:	89a3      	ldrh	r3, [r4, #12]
 801886a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801886e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018872:	81a3      	strh	r3, [r4, #12]
 8018874:	4632      	mov	r2, r6
 8018876:	463b      	mov	r3, r7
 8018878:	4628      	mov	r0, r5
 801887a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801887e:	f000 b869 	b.w	8018954 <_write_r>

08018882 <__sseek>:
 8018882:	b510      	push	{r4, lr}
 8018884:	460c      	mov	r4, r1
 8018886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801888a:	f000 fa17 	bl	8018cbc <_lseek_r>
 801888e:	1c43      	adds	r3, r0, #1
 8018890:	89a3      	ldrh	r3, [r4, #12]
 8018892:	bf15      	itete	ne
 8018894:	6560      	strne	r0, [r4, #84]	; 0x54
 8018896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801889a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801889e:	81a3      	strheq	r3, [r4, #12]
 80188a0:	bf18      	it	ne
 80188a2:	81a3      	strhne	r3, [r4, #12]
 80188a4:	bd10      	pop	{r4, pc}

080188a6 <__sclose>:
 80188a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188aa:	f000 b935 	b.w	8018b18 <_close_r>
	...

080188b0 <__swbuf_r>:
 80188b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188b2:	460e      	mov	r6, r1
 80188b4:	4614      	mov	r4, r2
 80188b6:	4605      	mov	r5, r0
 80188b8:	b118      	cbz	r0, 80188c2 <__swbuf_r+0x12>
 80188ba:	6983      	ldr	r3, [r0, #24]
 80188bc:	b90b      	cbnz	r3, 80188c2 <__swbuf_r+0x12>
 80188be:	f7ff fa29 	bl	8017d14 <__sinit>
 80188c2:	4b21      	ldr	r3, [pc, #132]	; (8018948 <__swbuf_r+0x98>)
 80188c4:	429c      	cmp	r4, r3
 80188c6:	d12b      	bne.n	8018920 <__swbuf_r+0x70>
 80188c8:	686c      	ldr	r4, [r5, #4]
 80188ca:	69a3      	ldr	r3, [r4, #24]
 80188cc:	60a3      	str	r3, [r4, #8]
 80188ce:	89a3      	ldrh	r3, [r4, #12]
 80188d0:	071a      	lsls	r2, r3, #28
 80188d2:	d52f      	bpl.n	8018934 <__swbuf_r+0x84>
 80188d4:	6923      	ldr	r3, [r4, #16]
 80188d6:	b36b      	cbz	r3, 8018934 <__swbuf_r+0x84>
 80188d8:	6923      	ldr	r3, [r4, #16]
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	1ac0      	subs	r0, r0, r3
 80188de:	6963      	ldr	r3, [r4, #20]
 80188e0:	b2f6      	uxtb	r6, r6
 80188e2:	4283      	cmp	r3, r0
 80188e4:	4637      	mov	r7, r6
 80188e6:	dc04      	bgt.n	80188f2 <__swbuf_r+0x42>
 80188e8:	4621      	mov	r1, r4
 80188ea:	4628      	mov	r0, r5
 80188ec:	f000 f9aa 	bl	8018c44 <_fflush_r>
 80188f0:	bb30      	cbnz	r0, 8018940 <__swbuf_r+0x90>
 80188f2:	68a3      	ldr	r3, [r4, #8]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	60a3      	str	r3, [r4, #8]
 80188f8:	6823      	ldr	r3, [r4, #0]
 80188fa:	1c5a      	adds	r2, r3, #1
 80188fc:	6022      	str	r2, [r4, #0]
 80188fe:	701e      	strb	r6, [r3, #0]
 8018900:	6963      	ldr	r3, [r4, #20]
 8018902:	3001      	adds	r0, #1
 8018904:	4283      	cmp	r3, r0
 8018906:	d004      	beq.n	8018912 <__swbuf_r+0x62>
 8018908:	89a3      	ldrh	r3, [r4, #12]
 801890a:	07db      	lsls	r3, r3, #31
 801890c:	d506      	bpl.n	801891c <__swbuf_r+0x6c>
 801890e:	2e0a      	cmp	r6, #10
 8018910:	d104      	bne.n	801891c <__swbuf_r+0x6c>
 8018912:	4621      	mov	r1, r4
 8018914:	4628      	mov	r0, r5
 8018916:	f000 f995 	bl	8018c44 <_fflush_r>
 801891a:	b988      	cbnz	r0, 8018940 <__swbuf_r+0x90>
 801891c:	4638      	mov	r0, r7
 801891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018920:	4b0a      	ldr	r3, [pc, #40]	; (801894c <__swbuf_r+0x9c>)
 8018922:	429c      	cmp	r4, r3
 8018924:	d101      	bne.n	801892a <__swbuf_r+0x7a>
 8018926:	68ac      	ldr	r4, [r5, #8]
 8018928:	e7cf      	b.n	80188ca <__swbuf_r+0x1a>
 801892a:	4b09      	ldr	r3, [pc, #36]	; (8018950 <__swbuf_r+0xa0>)
 801892c:	429c      	cmp	r4, r3
 801892e:	bf08      	it	eq
 8018930:	68ec      	ldreq	r4, [r5, #12]
 8018932:	e7ca      	b.n	80188ca <__swbuf_r+0x1a>
 8018934:	4621      	mov	r1, r4
 8018936:	4628      	mov	r0, r5
 8018938:	f000 f81e 	bl	8018978 <__swsetup_r>
 801893c:	2800      	cmp	r0, #0
 801893e:	d0cb      	beq.n	80188d8 <__swbuf_r+0x28>
 8018940:	f04f 37ff 	mov.w	r7, #4294967295
 8018944:	e7ea      	b.n	801891c <__swbuf_r+0x6c>
 8018946:	bf00      	nop
 8018948:	0801a6e4 	.word	0x0801a6e4
 801894c:	0801a704 	.word	0x0801a704
 8018950:	0801a6c4 	.word	0x0801a6c4

08018954 <_write_r>:
 8018954:	b538      	push	{r3, r4, r5, lr}
 8018956:	4d07      	ldr	r5, [pc, #28]	; (8018974 <_write_r+0x20>)
 8018958:	4604      	mov	r4, r0
 801895a:	4608      	mov	r0, r1
 801895c:	4611      	mov	r1, r2
 801895e:	2200      	movs	r2, #0
 8018960:	602a      	str	r2, [r5, #0]
 8018962:	461a      	mov	r2, r3
 8018964:	f7e9 fc84 	bl	8002270 <_write>
 8018968:	1c43      	adds	r3, r0, #1
 801896a:	d102      	bne.n	8018972 <_write_r+0x1e>
 801896c:	682b      	ldr	r3, [r5, #0]
 801896e:	b103      	cbz	r3, 8018972 <_write_r+0x1e>
 8018970:	6023      	str	r3, [r4, #0]
 8018972:	bd38      	pop	{r3, r4, r5, pc}
 8018974:	2400affc 	.word	0x2400affc

08018978 <__swsetup_r>:
 8018978:	4b32      	ldr	r3, [pc, #200]	; (8018a44 <__swsetup_r+0xcc>)
 801897a:	b570      	push	{r4, r5, r6, lr}
 801897c:	681d      	ldr	r5, [r3, #0]
 801897e:	4606      	mov	r6, r0
 8018980:	460c      	mov	r4, r1
 8018982:	b125      	cbz	r5, 801898e <__swsetup_r+0x16>
 8018984:	69ab      	ldr	r3, [r5, #24]
 8018986:	b913      	cbnz	r3, 801898e <__swsetup_r+0x16>
 8018988:	4628      	mov	r0, r5
 801898a:	f7ff f9c3 	bl	8017d14 <__sinit>
 801898e:	4b2e      	ldr	r3, [pc, #184]	; (8018a48 <__swsetup_r+0xd0>)
 8018990:	429c      	cmp	r4, r3
 8018992:	d10f      	bne.n	80189b4 <__swsetup_r+0x3c>
 8018994:	686c      	ldr	r4, [r5, #4]
 8018996:	89a3      	ldrh	r3, [r4, #12]
 8018998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801899c:	0719      	lsls	r1, r3, #28
 801899e:	d42c      	bmi.n	80189fa <__swsetup_r+0x82>
 80189a0:	06dd      	lsls	r5, r3, #27
 80189a2:	d411      	bmi.n	80189c8 <__swsetup_r+0x50>
 80189a4:	2309      	movs	r3, #9
 80189a6:	6033      	str	r3, [r6, #0]
 80189a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80189ac:	81a3      	strh	r3, [r4, #12]
 80189ae:	f04f 30ff 	mov.w	r0, #4294967295
 80189b2:	e03e      	b.n	8018a32 <__swsetup_r+0xba>
 80189b4:	4b25      	ldr	r3, [pc, #148]	; (8018a4c <__swsetup_r+0xd4>)
 80189b6:	429c      	cmp	r4, r3
 80189b8:	d101      	bne.n	80189be <__swsetup_r+0x46>
 80189ba:	68ac      	ldr	r4, [r5, #8]
 80189bc:	e7eb      	b.n	8018996 <__swsetup_r+0x1e>
 80189be:	4b24      	ldr	r3, [pc, #144]	; (8018a50 <__swsetup_r+0xd8>)
 80189c0:	429c      	cmp	r4, r3
 80189c2:	bf08      	it	eq
 80189c4:	68ec      	ldreq	r4, [r5, #12]
 80189c6:	e7e6      	b.n	8018996 <__swsetup_r+0x1e>
 80189c8:	0758      	lsls	r0, r3, #29
 80189ca:	d512      	bpl.n	80189f2 <__swsetup_r+0x7a>
 80189cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189ce:	b141      	cbz	r1, 80189e2 <__swsetup_r+0x6a>
 80189d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189d4:	4299      	cmp	r1, r3
 80189d6:	d002      	beq.n	80189de <__swsetup_r+0x66>
 80189d8:	4630      	mov	r0, r6
 80189da:	f7ff fa99 	bl	8017f10 <_free_r>
 80189de:	2300      	movs	r3, #0
 80189e0:	6363      	str	r3, [r4, #52]	; 0x34
 80189e2:	89a3      	ldrh	r3, [r4, #12]
 80189e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189e8:	81a3      	strh	r3, [r4, #12]
 80189ea:	2300      	movs	r3, #0
 80189ec:	6063      	str	r3, [r4, #4]
 80189ee:	6923      	ldr	r3, [r4, #16]
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	89a3      	ldrh	r3, [r4, #12]
 80189f4:	f043 0308 	orr.w	r3, r3, #8
 80189f8:	81a3      	strh	r3, [r4, #12]
 80189fa:	6923      	ldr	r3, [r4, #16]
 80189fc:	b94b      	cbnz	r3, 8018a12 <__swsetup_r+0x9a>
 80189fe:	89a3      	ldrh	r3, [r4, #12]
 8018a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a08:	d003      	beq.n	8018a12 <__swsetup_r+0x9a>
 8018a0a:	4621      	mov	r1, r4
 8018a0c:	4630      	mov	r0, r6
 8018a0e:	f000 f98d 	bl	8018d2c <__smakebuf_r>
 8018a12:	89a0      	ldrh	r0, [r4, #12]
 8018a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a18:	f010 0301 	ands.w	r3, r0, #1
 8018a1c:	d00a      	beq.n	8018a34 <__swsetup_r+0xbc>
 8018a1e:	2300      	movs	r3, #0
 8018a20:	60a3      	str	r3, [r4, #8]
 8018a22:	6963      	ldr	r3, [r4, #20]
 8018a24:	425b      	negs	r3, r3
 8018a26:	61a3      	str	r3, [r4, #24]
 8018a28:	6923      	ldr	r3, [r4, #16]
 8018a2a:	b943      	cbnz	r3, 8018a3e <__swsetup_r+0xc6>
 8018a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018a30:	d1ba      	bne.n	80189a8 <__swsetup_r+0x30>
 8018a32:	bd70      	pop	{r4, r5, r6, pc}
 8018a34:	0781      	lsls	r1, r0, #30
 8018a36:	bf58      	it	pl
 8018a38:	6963      	ldrpl	r3, [r4, #20]
 8018a3a:	60a3      	str	r3, [r4, #8]
 8018a3c:	e7f4      	b.n	8018a28 <__swsetup_r+0xb0>
 8018a3e:	2000      	movs	r0, #0
 8018a40:	e7f7      	b.n	8018a32 <__swsetup_r+0xba>
 8018a42:	bf00      	nop
 8018a44:	240000a8 	.word	0x240000a8
 8018a48:	0801a6e4 	.word	0x0801a6e4
 8018a4c:	0801a704 	.word	0x0801a704
 8018a50:	0801a6c4 	.word	0x0801a6c4

08018a54 <__register_exitproc>:
 8018a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a58:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8018b14 <__register_exitproc+0xc0>
 8018a5c:	4606      	mov	r6, r0
 8018a5e:	f8d8 0000 	ldr.w	r0, [r8]
 8018a62:	461f      	mov	r7, r3
 8018a64:	460d      	mov	r5, r1
 8018a66:	4691      	mov	r9, r2
 8018a68:	f7ff fa29 	bl	8017ebe <__retarget_lock_acquire_recursive>
 8018a6c:	4b25      	ldr	r3, [pc, #148]	; (8018b04 <__register_exitproc+0xb0>)
 8018a6e:	681c      	ldr	r4, [r3, #0]
 8018a70:	b934      	cbnz	r4, 8018a80 <__register_exitproc+0x2c>
 8018a72:	4c25      	ldr	r4, [pc, #148]	; (8018b08 <__register_exitproc+0xb4>)
 8018a74:	601c      	str	r4, [r3, #0]
 8018a76:	4b25      	ldr	r3, [pc, #148]	; (8018b0c <__register_exitproc+0xb8>)
 8018a78:	b113      	cbz	r3, 8018a80 <__register_exitproc+0x2c>
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8018a80:	6863      	ldr	r3, [r4, #4]
 8018a82:	2b1f      	cmp	r3, #31
 8018a84:	dd07      	ble.n	8018a96 <__register_exitproc+0x42>
 8018a86:	f8d8 0000 	ldr.w	r0, [r8]
 8018a8a:	f7ff fa1a 	bl	8017ec2 <__retarget_lock_release_recursive>
 8018a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8018a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a96:	b34e      	cbz	r6, 8018aec <__register_exitproc+0x98>
 8018a98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018a9c:	b988      	cbnz	r0, 8018ac2 <__register_exitproc+0x6e>
 8018a9e:	4b1c      	ldr	r3, [pc, #112]	; (8018b10 <__register_exitproc+0xbc>)
 8018aa0:	b923      	cbnz	r3, 8018aac <__register_exitproc+0x58>
 8018aa2:	f8d8 0000 	ldr.w	r0, [r8]
 8018aa6:	f7ff fa0b 	bl	8017ec0 <__retarget_lock_release>
 8018aaa:	e7f0      	b.n	8018a8e <__register_exitproc+0x3a>
 8018aac:	f44f 7084 	mov.w	r0, #264	; 0x108
 8018ab0:	f7ff fa08 	bl	8017ec4 <malloc>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d0f4      	beq.n	8018aa2 <__register_exitproc+0x4e>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8018abe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018ac2:	6863      	ldr	r3, [r4, #4]
 8018ac4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8018ac8:	2201      	movs	r2, #1
 8018aca:	409a      	lsls	r2, r3
 8018acc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8018ad0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8018ad4:	4313      	orrs	r3, r2
 8018ad6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8018ada:	2e02      	cmp	r6, #2
 8018adc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8018ae0:	bf02      	ittt	eq
 8018ae2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8018ae6:	4313      	orreq	r3, r2
 8018ae8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8018aec:	6863      	ldr	r3, [r4, #4]
 8018aee:	f8d8 0000 	ldr.w	r0, [r8]
 8018af2:	1c5a      	adds	r2, r3, #1
 8018af4:	3302      	adds	r3, #2
 8018af6:	6062      	str	r2, [r4, #4]
 8018af8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018afc:	f7ff f9e1 	bl	8017ec2 <__retarget_lock_release_recursive>
 8018b00:	2000      	movs	r0, #0
 8018b02:	e7c6      	b.n	8018a92 <__register_exitproc+0x3e>
 8018b04:	2400b08c 	.word	0x2400b08c
 8018b08:	2400b000 	.word	0x2400b000
 8018b0c:	0801a75c 	.word	0x0801a75c
 8018b10:	08017ec5 	.word	0x08017ec5
 8018b14:	2400010c 	.word	0x2400010c

08018b18 <_close_r>:
 8018b18:	b538      	push	{r3, r4, r5, lr}
 8018b1a:	4d06      	ldr	r5, [pc, #24]	; (8018b34 <_close_r+0x1c>)
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	4604      	mov	r4, r0
 8018b20:	4608      	mov	r0, r1
 8018b22:	602b      	str	r3, [r5, #0]
 8018b24:	f7e9 fbb2 	bl	800228c <_close>
 8018b28:	1c43      	adds	r3, r0, #1
 8018b2a:	d102      	bne.n	8018b32 <_close_r+0x1a>
 8018b2c:	682b      	ldr	r3, [r5, #0]
 8018b2e:	b103      	cbz	r3, 8018b32 <_close_r+0x1a>
 8018b30:	6023      	str	r3, [r4, #0]
 8018b32:	bd38      	pop	{r3, r4, r5, pc}
 8018b34:	2400affc 	.word	0x2400affc

08018b38 <__sflush_r>:
 8018b38:	898a      	ldrh	r2, [r1, #12]
 8018b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b3e:	4605      	mov	r5, r0
 8018b40:	0710      	lsls	r0, r2, #28
 8018b42:	460c      	mov	r4, r1
 8018b44:	d458      	bmi.n	8018bf8 <__sflush_r+0xc0>
 8018b46:	684b      	ldr	r3, [r1, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	dc05      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	dc02      	bgt.n	8018b58 <__sflush_r+0x20>
 8018b52:	2000      	movs	r0, #0
 8018b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b5a:	2e00      	cmp	r6, #0
 8018b5c:	d0f9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b64:	682f      	ldr	r7, [r5, #0]
 8018b66:	602b      	str	r3, [r5, #0]
 8018b68:	d032      	beq.n	8018bd0 <__sflush_r+0x98>
 8018b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b6c:	89a3      	ldrh	r3, [r4, #12]
 8018b6e:	075a      	lsls	r2, r3, #29
 8018b70:	d505      	bpl.n	8018b7e <__sflush_r+0x46>
 8018b72:	6863      	ldr	r3, [r4, #4]
 8018b74:	1ac0      	subs	r0, r0, r3
 8018b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b78:	b10b      	cbz	r3, 8018b7e <__sflush_r+0x46>
 8018b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b7c:	1ac0      	subs	r0, r0, r3
 8018b7e:	2300      	movs	r3, #0
 8018b80:	4602      	mov	r2, r0
 8018b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b84:	6a21      	ldr	r1, [r4, #32]
 8018b86:	4628      	mov	r0, r5
 8018b88:	47b0      	blx	r6
 8018b8a:	1c43      	adds	r3, r0, #1
 8018b8c:	89a3      	ldrh	r3, [r4, #12]
 8018b8e:	d106      	bne.n	8018b9e <__sflush_r+0x66>
 8018b90:	6829      	ldr	r1, [r5, #0]
 8018b92:	291d      	cmp	r1, #29
 8018b94:	d82c      	bhi.n	8018bf0 <__sflush_r+0xb8>
 8018b96:	4a2a      	ldr	r2, [pc, #168]	; (8018c40 <__sflush_r+0x108>)
 8018b98:	40ca      	lsrs	r2, r1
 8018b9a:	07d6      	lsls	r6, r2, #31
 8018b9c:	d528      	bpl.n	8018bf0 <__sflush_r+0xb8>
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	6062      	str	r2, [r4, #4]
 8018ba2:	04d9      	lsls	r1, r3, #19
 8018ba4:	6922      	ldr	r2, [r4, #16]
 8018ba6:	6022      	str	r2, [r4, #0]
 8018ba8:	d504      	bpl.n	8018bb4 <__sflush_r+0x7c>
 8018baa:	1c42      	adds	r2, r0, #1
 8018bac:	d101      	bne.n	8018bb2 <__sflush_r+0x7a>
 8018bae:	682b      	ldr	r3, [r5, #0]
 8018bb0:	b903      	cbnz	r3, 8018bb4 <__sflush_r+0x7c>
 8018bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8018bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bb6:	602f      	str	r7, [r5, #0]
 8018bb8:	2900      	cmp	r1, #0
 8018bba:	d0ca      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bc0:	4299      	cmp	r1, r3
 8018bc2:	d002      	beq.n	8018bca <__sflush_r+0x92>
 8018bc4:	4628      	mov	r0, r5
 8018bc6:	f7ff f9a3 	bl	8017f10 <_free_r>
 8018bca:	2000      	movs	r0, #0
 8018bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8018bce:	e7c1      	b.n	8018b54 <__sflush_r+0x1c>
 8018bd0:	6a21      	ldr	r1, [r4, #32]
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	47b0      	blx	r6
 8018bd8:	1c41      	adds	r1, r0, #1
 8018bda:	d1c7      	bne.n	8018b6c <__sflush_r+0x34>
 8018bdc:	682b      	ldr	r3, [r5, #0]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d0c4      	beq.n	8018b6c <__sflush_r+0x34>
 8018be2:	2b1d      	cmp	r3, #29
 8018be4:	d001      	beq.n	8018bea <__sflush_r+0xb2>
 8018be6:	2b16      	cmp	r3, #22
 8018be8:	d101      	bne.n	8018bee <__sflush_r+0xb6>
 8018bea:	602f      	str	r7, [r5, #0]
 8018bec:	e7b1      	b.n	8018b52 <__sflush_r+0x1a>
 8018bee:	89a3      	ldrh	r3, [r4, #12]
 8018bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bf4:	81a3      	strh	r3, [r4, #12]
 8018bf6:	e7ad      	b.n	8018b54 <__sflush_r+0x1c>
 8018bf8:	690f      	ldr	r7, [r1, #16]
 8018bfa:	2f00      	cmp	r7, #0
 8018bfc:	d0a9      	beq.n	8018b52 <__sflush_r+0x1a>
 8018bfe:	0793      	lsls	r3, r2, #30
 8018c00:	680e      	ldr	r6, [r1, #0]
 8018c02:	bf08      	it	eq
 8018c04:	694b      	ldreq	r3, [r1, #20]
 8018c06:	600f      	str	r7, [r1, #0]
 8018c08:	bf18      	it	ne
 8018c0a:	2300      	movne	r3, #0
 8018c0c:	eba6 0807 	sub.w	r8, r6, r7
 8018c10:	608b      	str	r3, [r1, #8]
 8018c12:	f1b8 0f00 	cmp.w	r8, #0
 8018c16:	dd9c      	ble.n	8018b52 <__sflush_r+0x1a>
 8018c18:	6a21      	ldr	r1, [r4, #32]
 8018c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c1c:	4643      	mov	r3, r8
 8018c1e:	463a      	mov	r2, r7
 8018c20:	4628      	mov	r0, r5
 8018c22:	47b0      	blx	r6
 8018c24:	2800      	cmp	r0, #0
 8018c26:	dc06      	bgt.n	8018c36 <__sflush_r+0xfe>
 8018c28:	89a3      	ldrh	r3, [r4, #12]
 8018c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c2e:	81a3      	strh	r3, [r4, #12]
 8018c30:	f04f 30ff 	mov.w	r0, #4294967295
 8018c34:	e78e      	b.n	8018b54 <__sflush_r+0x1c>
 8018c36:	4407      	add	r7, r0
 8018c38:	eba8 0800 	sub.w	r8, r8, r0
 8018c3c:	e7e9      	b.n	8018c12 <__sflush_r+0xda>
 8018c3e:	bf00      	nop
 8018c40:	20400001 	.word	0x20400001

08018c44 <_fflush_r>:
 8018c44:	b538      	push	{r3, r4, r5, lr}
 8018c46:	690b      	ldr	r3, [r1, #16]
 8018c48:	4605      	mov	r5, r0
 8018c4a:	460c      	mov	r4, r1
 8018c4c:	b913      	cbnz	r3, 8018c54 <_fflush_r+0x10>
 8018c4e:	2500      	movs	r5, #0
 8018c50:	4628      	mov	r0, r5
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	b118      	cbz	r0, 8018c5e <_fflush_r+0x1a>
 8018c56:	6983      	ldr	r3, [r0, #24]
 8018c58:	b90b      	cbnz	r3, 8018c5e <_fflush_r+0x1a>
 8018c5a:	f7ff f85b 	bl	8017d14 <__sinit>
 8018c5e:	4b14      	ldr	r3, [pc, #80]	; (8018cb0 <_fflush_r+0x6c>)
 8018c60:	429c      	cmp	r4, r3
 8018c62:	d11b      	bne.n	8018c9c <_fflush_r+0x58>
 8018c64:	686c      	ldr	r4, [r5, #4]
 8018c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d0ef      	beq.n	8018c4e <_fflush_r+0xa>
 8018c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c70:	07d0      	lsls	r0, r2, #31
 8018c72:	d404      	bmi.n	8018c7e <_fflush_r+0x3a>
 8018c74:	0599      	lsls	r1, r3, #22
 8018c76:	d402      	bmi.n	8018c7e <_fflush_r+0x3a>
 8018c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c7a:	f7ff f920 	bl	8017ebe <__retarget_lock_acquire_recursive>
 8018c7e:	4628      	mov	r0, r5
 8018c80:	4621      	mov	r1, r4
 8018c82:	f7ff ff59 	bl	8018b38 <__sflush_r>
 8018c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c88:	07da      	lsls	r2, r3, #31
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	d4e0      	bmi.n	8018c50 <_fflush_r+0xc>
 8018c8e:	89a3      	ldrh	r3, [r4, #12]
 8018c90:	059b      	lsls	r3, r3, #22
 8018c92:	d4dd      	bmi.n	8018c50 <_fflush_r+0xc>
 8018c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c96:	f7ff f914 	bl	8017ec2 <__retarget_lock_release_recursive>
 8018c9a:	e7d9      	b.n	8018c50 <_fflush_r+0xc>
 8018c9c:	4b05      	ldr	r3, [pc, #20]	; (8018cb4 <_fflush_r+0x70>)
 8018c9e:	429c      	cmp	r4, r3
 8018ca0:	d101      	bne.n	8018ca6 <_fflush_r+0x62>
 8018ca2:	68ac      	ldr	r4, [r5, #8]
 8018ca4:	e7df      	b.n	8018c66 <_fflush_r+0x22>
 8018ca6:	4b04      	ldr	r3, [pc, #16]	; (8018cb8 <_fflush_r+0x74>)
 8018ca8:	429c      	cmp	r4, r3
 8018caa:	bf08      	it	eq
 8018cac:	68ec      	ldreq	r4, [r5, #12]
 8018cae:	e7da      	b.n	8018c66 <_fflush_r+0x22>
 8018cb0:	0801a6e4 	.word	0x0801a6e4
 8018cb4:	0801a704 	.word	0x0801a704
 8018cb8:	0801a6c4 	.word	0x0801a6c4

08018cbc <_lseek_r>:
 8018cbc:	b538      	push	{r3, r4, r5, lr}
 8018cbe:	4d07      	ldr	r5, [pc, #28]	; (8018cdc <_lseek_r+0x20>)
 8018cc0:	4604      	mov	r4, r0
 8018cc2:	4608      	mov	r0, r1
 8018cc4:	4611      	mov	r1, r2
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	602a      	str	r2, [r5, #0]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	f7e9 fae8 	bl	80022a0 <_lseek>
 8018cd0:	1c43      	adds	r3, r0, #1
 8018cd2:	d102      	bne.n	8018cda <_lseek_r+0x1e>
 8018cd4:	682b      	ldr	r3, [r5, #0]
 8018cd6:	b103      	cbz	r3, 8018cda <_lseek_r+0x1e>
 8018cd8:	6023      	str	r3, [r4, #0]
 8018cda:	bd38      	pop	{r3, r4, r5, pc}
 8018cdc:	2400affc 	.word	0x2400affc

08018ce0 <__swhatbuf_r>:
 8018ce0:	b570      	push	{r4, r5, r6, lr}
 8018ce2:	460e      	mov	r6, r1
 8018ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ce8:	2900      	cmp	r1, #0
 8018cea:	b096      	sub	sp, #88	; 0x58
 8018cec:	4614      	mov	r4, r2
 8018cee:	461d      	mov	r5, r3
 8018cf0:	da08      	bge.n	8018d04 <__swhatbuf_r+0x24>
 8018cf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	602a      	str	r2, [r5, #0]
 8018cfa:	061a      	lsls	r2, r3, #24
 8018cfc:	d410      	bmi.n	8018d20 <__swhatbuf_r+0x40>
 8018cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d02:	e00e      	b.n	8018d22 <__swhatbuf_r+0x42>
 8018d04:	466a      	mov	r2, sp
 8018d06:	f000 f86f 	bl	8018de8 <_fstat_r>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	dbf1      	blt.n	8018cf2 <__swhatbuf_r+0x12>
 8018d0e:	9a01      	ldr	r2, [sp, #4]
 8018d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d18:	425a      	negs	r2, r3
 8018d1a:	415a      	adcs	r2, r3
 8018d1c:	602a      	str	r2, [r5, #0]
 8018d1e:	e7ee      	b.n	8018cfe <__swhatbuf_r+0x1e>
 8018d20:	2340      	movs	r3, #64	; 0x40
 8018d22:	2000      	movs	r0, #0
 8018d24:	6023      	str	r3, [r4, #0]
 8018d26:	b016      	add	sp, #88	; 0x58
 8018d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08018d2c <__smakebuf_r>:
 8018d2c:	898b      	ldrh	r3, [r1, #12]
 8018d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d30:	079d      	lsls	r5, r3, #30
 8018d32:	4606      	mov	r6, r0
 8018d34:	460c      	mov	r4, r1
 8018d36:	d507      	bpl.n	8018d48 <__smakebuf_r+0x1c>
 8018d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018d3c:	6023      	str	r3, [r4, #0]
 8018d3e:	6123      	str	r3, [r4, #16]
 8018d40:	2301      	movs	r3, #1
 8018d42:	6163      	str	r3, [r4, #20]
 8018d44:	b002      	add	sp, #8
 8018d46:	bd70      	pop	{r4, r5, r6, pc}
 8018d48:	ab01      	add	r3, sp, #4
 8018d4a:	466a      	mov	r2, sp
 8018d4c:	f7ff ffc8 	bl	8018ce0 <__swhatbuf_r>
 8018d50:	9900      	ldr	r1, [sp, #0]
 8018d52:	4605      	mov	r5, r0
 8018d54:	4630      	mov	r0, r6
 8018d56:	f7ff f947 	bl	8017fe8 <_malloc_r>
 8018d5a:	b948      	cbnz	r0, 8018d70 <__smakebuf_r+0x44>
 8018d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d60:	059a      	lsls	r2, r3, #22
 8018d62:	d4ef      	bmi.n	8018d44 <__smakebuf_r+0x18>
 8018d64:	f023 0303 	bic.w	r3, r3, #3
 8018d68:	f043 0302 	orr.w	r3, r3, #2
 8018d6c:	81a3      	strh	r3, [r4, #12]
 8018d6e:	e7e3      	b.n	8018d38 <__smakebuf_r+0xc>
 8018d70:	4b0d      	ldr	r3, [pc, #52]	; (8018da8 <__smakebuf_r+0x7c>)
 8018d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8018d74:	89a3      	ldrh	r3, [r4, #12]
 8018d76:	6020      	str	r0, [r4, #0]
 8018d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d7c:	81a3      	strh	r3, [r4, #12]
 8018d7e:	9b00      	ldr	r3, [sp, #0]
 8018d80:	6163      	str	r3, [r4, #20]
 8018d82:	9b01      	ldr	r3, [sp, #4]
 8018d84:	6120      	str	r0, [r4, #16]
 8018d86:	b15b      	cbz	r3, 8018da0 <__smakebuf_r+0x74>
 8018d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d8c:	4630      	mov	r0, r6
 8018d8e:	f000 f83d 	bl	8018e0c <_isatty_r>
 8018d92:	b128      	cbz	r0, 8018da0 <__smakebuf_r+0x74>
 8018d94:	89a3      	ldrh	r3, [r4, #12]
 8018d96:	f023 0303 	bic.w	r3, r3, #3
 8018d9a:	f043 0301 	orr.w	r3, r3, #1
 8018d9e:	81a3      	strh	r3, [r4, #12]
 8018da0:	89a0      	ldrh	r0, [r4, #12]
 8018da2:	4305      	orrs	r5, r0
 8018da4:	81a5      	strh	r5, [r4, #12]
 8018da6:	e7cd      	b.n	8018d44 <__smakebuf_r+0x18>
 8018da8:	08017cad 	.word	0x08017cad

08018dac <__malloc_lock>:
 8018dac:	4801      	ldr	r0, [pc, #4]	; (8018db4 <__malloc_lock+0x8>)
 8018dae:	f7ff b886 	b.w	8017ebe <__retarget_lock_acquire_recursive>
 8018db2:	bf00      	nop
 8018db4:	2400aee9 	.word	0x2400aee9

08018db8 <__malloc_unlock>:
 8018db8:	4801      	ldr	r0, [pc, #4]	; (8018dc0 <__malloc_unlock+0x8>)
 8018dba:	f7ff b882 	b.w	8017ec2 <__retarget_lock_release_recursive>
 8018dbe:	bf00      	nop
 8018dc0:	2400aee9 	.word	0x2400aee9

08018dc4 <_read_r>:
 8018dc4:	b538      	push	{r3, r4, r5, lr}
 8018dc6:	4d07      	ldr	r5, [pc, #28]	; (8018de4 <_read_r+0x20>)
 8018dc8:	4604      	mov	r4, r0
 8018dca:	4608      	mov	r0, r1
 8018dcc:	4611      	mov	r1, r2
 8018dce:	2200      	movs	r2, #0
 8018dd0:	602a      	str	r2, [r5, #0]
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	f7e9 fa3c 	bl	8002250 <_read>
 8018dd8:	1c43      	adds	r3, r0, #1
 8018dda:	d102      	bne.n	8018de2 <_read_r+0x1e>
 8018ddc:	682b      	ldr	r3, [r5, #0]
 8018dde:	b103      	cbz	r3, 8018de2 <_read_r+0x1e>
 8018de0:	6023      	str	r3, [r4, #0]
 8018de2:	bd38      	pop	{r3, r4, r5, pc}
 8018de4:	2400affc 	.word	0x2400affc

08018de8 <_fstat_r>:
 8018de8:	b538      	push	{r3, r4, r5, lr}
 8018dea:	4d07      	ldr	r5, [pc, #28]	; (8018e08 <_fstat_r+0x20>)
 8018dec:	2300      	movs	r3, #0
 8018dee:	4604      	mov	r4, r0
 8018df0:	4608      	mov	r0, r1
 8018df2:	4611      	mov	r1, r2
 8018df4:	602b      	str	r3, [r5, #0]
 8018df6:	f7e9 fa4c 	bl	8002292 <_fstat>
 8018dfa:	1c43      	adds	r3, r0, #1
 8018dfc:	d102      	bne.n	8018e04 <_fstat_r+0x1c>
 8018dfe:	682b      	ldr	r3, [r5, #0]
 8018e00:	b103      	cbz	r3, 8018e04 <_fstat_r+0x1c>
 8018e02:	6023      	str	r3, [r4, #0]
 8018e04:	bd38      	pop	{r3, r4, r5, pc}
 8018e06:	bf00      	nop
 8018e08:	2400affc 	.word	0x2400affc

08018e0c <_isatty_r>:
 8018e0c:	b538      	push	{r3, r4, r5, lr}
 8018e0e:	4d06      	ldr	r5, [pc, #24]	; (8018e28 <_isatty_r+0x1c>)
 8018e10:	2300      	movs	r3, #0
 8018e12:	4604      	mov	r4, r0
 8018e14:	4608      	mov	r0, r1
 8018e16:	602b      	str	r3, [r5, #0]
 8018e18:	f7e9 fa40 	bl	800229c <_isatty>
 8018e1c:	1c43      	adds	r3, r0, #1
 8018e1e:	d102      	bne.n	8018e26 <_isatty_r+0x1a>
 8018e20:	682b      	ldr	r3, [r5, #0]
 8018e22:	b103      	cbz	r3, 8018e26 <_isatty_r+0x1a>
 8018e24:	6023      	str	r3, [r4, #0]
 8018e26:	bd38      	pop	{r3, r4, r5, pc}
 8018e28:	2400affc 	.word	0x2400affc

08018e2c <_init>:
 8018e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e2e:	bf00      	nop
 8018e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e32:	bc08      	pop	{r3}
 8018e34:	469e      	mov	lr, r3
 8018e36:	4770      	bx	lr

08018e38 <_fini>:
 8018e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3a:	bf00      	nop
 8018e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e3e:	bc08      	pop	{r3}
 8018e40:	469e      	mov	lr, r3
 8018e42:	4770      	bx	lr
