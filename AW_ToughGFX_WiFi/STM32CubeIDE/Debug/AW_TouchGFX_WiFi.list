
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d778  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c8c  0801da28  0801da28  0002da28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801f6b4  0801f6b4  0002f6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f6cc  0801f6cc  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801f6cc  0801f6cc  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801f6cc  0801f6cc  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801f6cc  0801f6cc  0002f6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801f6e0  0801f6e0  0002f6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000114  24000000  0801f6e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000baf0  24000114  0801f7fc  00030114  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bc04  0801f7fc  0003bc04  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0005d3e7  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000afd21  00000000  00000000  000fcfcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00012a0c  00000000  00000000  001accee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003970  00000000  00000000  001bf700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00177460  00000000  00000000  001c3070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003af8  00000000  00000000  0033a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0003777f  00000000  00000000  0033dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00040f96  00000000  00000000  00375747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  003b66dd  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000af40  00000000  00000000  003b67ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000114 	.word	0x24000114
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801da10 	.word	0x0801da10

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000118 	.word	0x24000118
 80002ec:	0801da10 	.word	0x0801da10

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f006 fa9d 	bl	8006928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f01c f8bf 	bl	801c570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f001 fcaf 	bl	8001d54 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	0801f6e8 	.word	0x0801f6e8
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000114 	.word	0x24000114
  ldr  r2, =_sbss
 8000408:	24000114 	.word	0x24000114
  ldr  r3, = _ebss
 800040c:	2400bc04 	.word	0x2400bc04

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff51 	bl	80012bc <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 ffc7 	bl	80013b0 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	0801da88 	.word	0x0801da88
 8000434:	0801da70 	.word	0x0801da70

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f006 f975 	bl	8006740 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400b97a 	.word	0x2400b97a
 8000460:	2400b97c 	.word	0x2400b97c

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f006 f9d3 	bl	8006820 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f01b feee 	bl	801c292 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	0801da88 	.word	0x0801da88
 80004c0:	0801da70 	.word	0x0801da70

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f007 f83b 	bl	800755e <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f007 f82f 	bl	800755e <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f007 f823 	bl	800755e <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f007 f817 	bl	800755e <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000130 	.word	0x24000130
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f006 fffd 	bl	800755e <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f006 fff1 	bl	800755e <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f006 ffe6 	bl	800755e <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f006 ffd9 	bl	800755e <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000130 	.word	0x24000130
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f006 ffc9 	bl	800756a <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f006 ffc3 	bl	800756a <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f006 ffbd 	bl	800756a <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f006 ffb7 	bl	800756a <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400b97f 	.word	0x2400b97f

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400b978 	.word	0x2400b978
 80006ac:	2400b976 	.word	0x2400b976
 80006b0:	2400b974 	.word	0x2400b974

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	0801dc18 	.word	0x0801dc18
 80006c8:	0801e218 	.word	0x0801e218
 80006cc:	0801ef94 	.word	0x0801ef94

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f000 fffd 	bl	80016d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f006 ff2e 	bl	800755e <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f006 ff28 	bl	800755e <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f006 f988 	bl	8006a24 <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f006 ff20 	bl	800755e <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f000 ff57 	bl	80015e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f000 ff59 	bl	80015f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f000 ffeb 	bl	8001720 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f000 fee5 	bl	8001564 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f000 feeb 	bl	8001578 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f000 fef1 	bl	800158c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f000 ff01 	bl	80015b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f01b fd88 	bl	801c2f0 <__assert_func>
 80007e0:	2400b97e 	.word	0x2400b97e
 80007e4:	0801da98 	.word	0x0801da98
 80007e8:	0801dad0 	.word	0x0801dad0
 80007ec:	0801db20 	.word	0x0801db20

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f01b fd6c 	bl	801c2f0 <__assert_func>
 8000818:	2400b974 	.word	0x2400b974
 800081c:	2400b976 	.word	0x2400b976
 8000820:	2400b97a 	.word	0x2400b97a
 8000824:	2400b97c 	.word	0x2400b97c
 8000828:	0801db68 	.word	0x0801db68
 800082c:	0801dbcc 	.word	0x0801dbcc
 8000830:	0801db20 	.word	0x0801db20

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f00f fd58 	bl	80102ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f00e ff9b 	bl	800f784 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f01b fd16 	bl	801c292 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	0801dc18 	.word	0x0801dc18
 8000870:	0801e218 	.word	0x0801e218
 8000874:	0801ef94 	.word	0x0801ef94

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00a ffe2 	bl	800b848 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00b f899 	bl	800b9c6 <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f01b fd24 	bl	801c2f0 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f01b fd1e 	bl	801c2f0 <__assert_func>
 80008b4:	24000144 	.word	0x24000144
 80008b8:	24000140 	.word	0x24000140
 80008bc:	0801dce8 	.word	0x0801dce8
 80008c0:	0801dd34 	.word	0x0801dd34
 80008c4:	0801dd64 	.word	0x0801dd64
 80008c8:	0801ddc4 	.word	0x0801ddc4

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00b f813 	bl	800b900 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000144 	.word	0x24000144

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00b f83f 	bl	800b968 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000144 	.word	0x24000144

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00b f802 	bl	800b900 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000144 	.word	0x24000144

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00b f82d 	bl	800b968 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000144 	.word	0x24000144

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00b f89d 	bl	800ba5e <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000140 	.word	0x24000140

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00b f8ce 	bl	800bade <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00b f8c7 	bl	800bade <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000140 	.word	0x24000140

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400b980 	.word	0x2400b980

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	0801dfa4 	.word	0x0801dfa4
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	0801f0bc 	.word	0x0801f0bc
 80009b4:	0801df80 	.word	0x0801df80
 80009b8:	0801f06c 	.word	0x0801f06c

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24001240 	.word	0x24001240
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f01b fc37 	bl	801c292 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f01b fc50 	bl	801c2f0 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	0801de08 	.word	0x0801de08
 8000ac8:	0801de24 	.word	0x0801de24
 8000acc:	0801de70 	.word	0x0801de70
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f01b fbe8 	bl	801c2f0 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f01b fbd1 	bl	801c2f0 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f01b fbc5 	bl	801c2f0 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f01b fb27 	bl	801c2f0 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	0801de08 	.word	0x0801de08
 8000cf0:	0801ded0 	.word	0x0801ded0
 8000cf4:	0801de70 	.word	0x0801de70
 8000cf8:	0801de24 	.word	0x0801de24
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	0801df1c 	.word	0x0801df1c
 8000d14:	0801df38 	.word	0x0801df38
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f00f fc19 	bl	8010570 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	0801f06c 	.word	0x0801f06c
 8000d58:	0801dfa4 	.word	0x0801dfa4

08000d5c <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	0801e008 	.word	0x0801e008

08000d68 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d68:	4770      	bx	lr

08000d6a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d6a:	4770      	bx	lr

08000d6c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d6c:	4770      	bx	lr

08000d6e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d6e:	4770      	bx	lr

08000d70 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d70:	4770      	bx	lr

08000d72 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d72:	4770      	bx	lr

08000d74 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d76:	6003      	str	r3, [r0, #0]
    }
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	0801e018 	.word	0x0801e018

08000d80 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d80:	4770      	bx	lr

08000d82 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d82:	4770      	bx	lr

08000d84 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d84:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d88:	6808      	ldr	r0, [r1, #0]
 8000d8a:	6849      	ldr	r1, [r1, #4]
 8000d8c:	c303      	stmia	r3!, {r0, r1}
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d90:	b510      	push	{r4, lr}
 8000d92:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d94:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d98:	b158      	cbz	r0, 8000db2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	4798      	blx	r3
 8000da0:	b138      	cbz	r0, 8000db2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000da2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000db6:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dba:	6002      	str	r2, [r0, #0]
    {
 8000dbc:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dbe:	6002      	str	r2, [r0, #0]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0801e058 	.word	0x0801e058
 8000dc8:	0801f20c 	.word	0x0801f20c
 8000dcc:	0801e018 	.word	0x0801e018

08000dd0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dd2:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000dd6:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000ddc:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000de2:	6002      	str	r2, [r0, #0]
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000de6:	6002      	str	r2, [r0, #0]
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000dea:	6002      	str	r2, [r0, #0]
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	0801e0bc 	.word	0x0801e0bc
 8000df4:	0801e0a4 	.word	0x0801e0a4
 8000df8:	0801e040 	.word	0x0801e040
 8000dfc:	0801e058 	.word	0x0801e058
 8000e00:	0801f20c 	.word	0x0801f20c
 8000e04:	0801e018 	.word	0x0801e018

08000e08 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e0a:	6002      	str	r2, [r0, #0]
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e0e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e12:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e18:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e1e:	6002      	str	r2, [r0, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e22:	6002      	str	r2, [r0, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e26:	6002      	str	r2, [r0, #0]
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	0801e108 	.word	0x0801e108
 8000e30:	0801e0bc 	.word	0x0801e0bc
 8000e34:	0801e0a4 	.word	0x0801e0a4
 8000e38:	0801e040 	.word	0x0801e040
 8000e3c:	0801e058 	.word	0x0801e058
 8000e40:	0801f20c 	.word	0x0801f20c
 8000e44:	0801e018 	.word	0x0801e018

08000e48 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e48:	4a02      	ldr	r2, [pc, #8]	; (8000e54 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e4a:	6002      	str	r2, [r0, #0]
    {
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e4e:	6002      	str	r2, [r0, #0]
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0801e154 	.word	0x0801e154
 8000e58:	0801e008 	.word	0x0801e008

08000e5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e5c:	4a02      	ldr	r2, [pc, #8]	; (8000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e5e:	6002      	str	r2, [r0, #0]
    {
 8000e60:	4a02      	ldr	r2, [pc, #8]	; (8000e6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e62:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	0801e0a4 	.word	0x0801e0a4
 8000e6c:	0801e040 	.word	0x0801e040

08000e70 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e70:	2001      	movs	r0, #1
 8000e72:	4770      	bx	lr

08000e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e74:	200c      	movs	r0, #12
 8000e76:	4770      	bx	lr

08000e78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e7c:	0089      	lsls	r1, r1, #2
 8000e7e:	3108      	adds	r1, #8
    }
 8000e80:	4408      	add	r0, r1
 8000e82:	4770      	bx	lr

08000e84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e90:	2001      	movs	r0, #1
 8000e92:	4770      	bx	lr

08000e94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e94:	2098      	movs	r0, #152	; 0x98
 8000e96:	4770      	bx	lr

08000e98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e98:	2398      	movs	r3, #152	; 0x98
 8000e9a:	fb03 f101 	mul.w	r1, r3, r1
 8000e9e:	3108      	adds	r1, #8
    }
 8000ea0:	4408      	add	r0, r1
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea4:	2398      	movs	r3, #152	; 0x98
 8000ea6:	fb03 f101 	mul.w	r1, r3, r1
 8000eaa:	3108      	adds	r1, #8
    }
 8000eac:	4408      	add	r0, r1
 8000eae:	4770      	bx	lr

08000eb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb8:	0109      	lsls	r1, r1, #4
 8000eba:	3108      	adds	r1, #8
    }
 8000ebc:	4408      	add	r0, r1
 8000ebe:	4770      	bx	lr

08000ec0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ec0:	0109      	lsls	r1, r1, #4
 8000ec2:	3108      	adds	r1, #8
    }
 8000ec4:	4408      	add	r0, r1
 8000ec6:	4770      	bx	lr

08000ec8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000ec8:	b508      	push	{r3, lr}
 8000eca:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ecc:	6841      	ldr	r1, [r0, #4]
 8000ece:	68c2      	ldr	r2, [r0, #12]
 8000ed0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ed4:	f012 0f01 	tst.w	r2, #1
 8000ed8:	d102      	bne.n	8000ee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4798      	blx	r3
    }
 8000ede:	bd08      	pop	{r3, pc}
 8000ee0:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ee4:	f851 200c 	ldr.w	r2, [r1, ip]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	58d3      	ldr	r3, [r2, r3]
 8000eec:	e7f6      	b.n	8000edc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000eee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000eee:	6843      	ldr	r3, [r0, #4]
 8000ef0:	b14b      	cbz	r3, 8000f06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ef2:	6883      	ldr	r3, [r0, #8]
 8000ef4:	b10b      	cbz	r3, 8000efa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4770      	bx	lr
 8000efa:	68c3      	ldr	r3, [r0, #12]
 8000efc:	f013 0f01 	tst.w	r3, #1
 8000f00:	d003      	beq.n	8000f0a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f02:	2001      	movs	r0, #1
 8000f04:	4770      	bx	lr
 8000f06:	2000      	movs	r0, #0
 8000f08:	4770      	bx	lr
 8000f0a:	2000      	movs	r0, #0
    }
 8000f0c:	4770      	bx	lr
	...

08000f10 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f10:	b510      	push	{r4, lr}
 8000f12:	4604      	mov	r4, r0
    {
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f16:	6003      	str	r3, [r0, #0]
    }
 8000f18:	2104      	movs	r1, #4
 8000f1a:	f01b f9ba 	bl	801c292 <_ZdlPvj>
 8000f1e:	4620      	mov	r0, r4
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	bf00      	nop
 8000f24:	0801e018 	.word	0x0801e018

08000f28 <_ZN16FrontendHeapBaseD0Ev>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f2e:	6003      	str	r3, [r0, #0]
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f32:	6003      	str	r3, [r0, #0]
 8000f34:	2114      	movs	r1, #20
 8000f36:	f01b f9ac 	bl	801c292 <_ZdlPvj>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	bd10      	pop	{r4, pc}
 8000f3e:	bf00      	nop
 8000f40:	0801e154 	.word	0x0801e154
 8000f44:	0801e008 	.word	0x0801e008

08000f48 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	4604      	mov	r4, r0
    {
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f4e:	6003      	str	r3, [r0, #0]
    }
 8000f50:	2114      	movs	r1, #20
 8000f52:	f01b f99e 	bl	801c292 <_ZdlPvj>
 8000f56:	4620      	mov	r0, r4
 8000f58:	bd10      	pop	{r4, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0801e008 	.word	0x0801e008

08000f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f66:	6003      	str	r3, [r0, #0]
    {
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f6a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f01b f990 	bl	801c292 <_ZdlPvj>
 8000f72:	4620      	mov	r0, r4
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	0801e0a4 	.word	0x0801e0a4
 8000f7c:	0801e040 	.word	0x0801e040

08000f80 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f80:	b510      	push	{r4, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f86:	6003      	str	r3, [r0, #0]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f8a:	6003      	str	r3, [r0, #0]
    {
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f94:	f01b f97d 	bl	801c292 <_ZdlPvj>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	bd10      	pop	{r4, pc}
 8000f9c:	0801e058 	.word	0x0801e058
 8000fa0:	0801f20c 	.word	0x0801f20c
 8000fa4:	0801e018 	.word	0x0801e018

08000fa8 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fb2:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fb8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fc6:	6003      	str	r3, [r0, #0]
 8000fc8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fcc:	f01b f961 	bl	801c292 <_ZdlPvj>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	bd10      	pop	{r4, pc}
 8000fd4:	0801e0bc 	.word	0x0801e0bc
 8000fd8:	0801e0a4 	.word	0x0801e0a4
 8000fdc:	0801e040 	.word	0x0801e040
 8000fe0:	0801e058 	.word	0x0801e058
 8000fe4:	0801f20c 	.word	0x0801f20c
 8000fe8:	0801e018 	.word	0x0801e018

08000fec <_ZN19FrontendApplicationD0Ev>:
 8000fec:	b510      	push	{r4, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <_ZN19FrontendApplicationD0Ev+0x30>)
 8000ff2:	6003      	str	r3, [r0, #0]
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <_ZN19FrontendApplicationD0Ev+0x34>)
 8000ff6:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000ffa:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001000:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <_ZN19FrontendApplicationD0Ev+0x40>)
 8001006:	6003      	str	r3, [r0, #0]
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <_ZN19FrontendApplicationD0Ev+0x44>)
 800100a:	6003      	str	r3, [r0, #0]
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <_ZN19FrontendApplicationD0Ev+0x48>)
 800100e:	6003      	str	r3, [r0, #0]
 8001010:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001014:	f01b f93d 	bl	801c292 <_ZdlPvj>
 8001018:	4620      	mov	r0, r4
 800101a:	bd10      	pop	{r4, pc}
 800101c:	0801e108 	.word	0x0801e108
 8001020:	0801e0bc 	.word	0x0801e0bc
 8001024:	0801e0a4 	.word	0x0801e0a4
 8001028:	0801e040 	.word	0x0801e040
 800102c:	0801e058 	.word	0x0801e058
 8001030:	0801f20c 	.word	0x0801f20c
 8001034:	0801e018 	.word	0x0801e018

08001038 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001038:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 800103a:	4608      	mov	r0, r1
 800103c:	f001 ff08 	bl	8002e50 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001040:	bd08      	pop	{r3, pc}

08001042 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8001042:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001044:	f001 ff04 	bl	8002e50 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001048:	bd08      	pop	{r3, pc}

0800104a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800104a:	b510      	push	{r4, lr}
 800104c:	4604      	mov	r4, r0
    {
        model.tick();
 800104e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8001052:	f002 fb8a 	bl	800376a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001056:	4620      	mov	r0, r4
 8001058:	f010 faa4 	bl	80115a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800105c:	bd10      	pop	{r4, pc}
	...

08001060 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001066:	6003      	str	r3, [r0, #0]
 8001068:	f00e f8d7 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800106c:	4620      	mov	r0, r4
 800106e:	bd10      	pop	{r4, pc}
 8001070:	0801e1d0 	.word	0x0801e1d0

08001074 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001074:	b510      	push	{r4, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800107a:	6003      	str	r3, [r0, #0]
 800107c:	f00e f8cd 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001080:	2114      	movs	r1, #20
 8001082:	4620      	mov	r0, r4
 8001084:	f01b f905 	bl	801c292 <_ZdlPvj>
 8001088:	4620      	mov	r0, r4
 800108a:	bd10      	pop	{r4, pc}
 800108c:	0801e1d0 	.word	0x0801e1d0

08001090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001090:	b510      	push	{r4, lr}
 8001092:	4604      	mov	r4, r0
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001096:	6003      	str	r3, [r0, #0]
 8001098:	f00e f8bf 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800109c:	4620      	mov	r0, r4
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	0801e19c 	.word	0x0801e19c

080010a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010aa:	6003      	str	r3, [r0, #0]
 80010ac:	f00e f8b5 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010b0:	21a0      	movs	r1, #160	; 0xa0
 80010b2:	4620      	mov	r0, r4
 80010b4:	f01b f8ed 	bl	801c292 <_ZdlPvj>
 80010b8:	4620      	mov	r0, r4
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	0801e19c 	.word	0x0801e19c

080010c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4604      	mov	r4, r0
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010c6:	6003      	str	r3, [r0, #0]
 80010c8:	f00e f8a7 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	0801e168 	.word	0x0801e168

080010d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010da:	6003      	str	r3, [r0, #0]
 80010dc:	f00e f89d 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010e0:	2118      	movs	r1, #24
 80010e2:	4620      	mov	r0, r4
 80010e4:	f01b f8d5 	bl	801c292 <_ZdlPvj>
 80010e8:	4620      	mov	r0, r4
 80010ea:	bd10      	pop	{r4, pc}
 80010ec:	0801e168 	.word	0x0801e168

080010f0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010f0:	b510      	push	{r4, lr}
 80010f2:	4604      	mov	r4, r0
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <_ZN12FrontendHeapD1Ev+0x60>)
 80010f6:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <_ZN12FrontendHeapD1Ev+0x64>)
 80010fa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <_ZN12FrontendHeapD1Ev+0x68>)
 8001100:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <_ZN12FrontendHeapD1Ev+0x6c>)
 8001106:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_ZN12FrontendHeapD1Ev+0x70>)
 800110c:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <_ZN12FrontendHeapD1Ev+0x74>)
 8001112:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <_ZN12FrontendHeapD1Ev+0x78>)
 8001118:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_ZN12FrontendHeapD1Ev+0x7c>)
 800111e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_ZN12FrontendHeapD1Ev+0x80>)
 8001124:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001128:	f00e f877 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800112c:	4620      	mov	r0, r4
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_ZN12FrontendHeapD1Ev+0x84>)
 8001130:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001134:	f00e f871 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001138:	4620      	mov	r0, r4
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <_ZN12FrontendHeapD1Ev+0x88>)
 800113c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001140:	f00e f86b 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <_ZN12FrontendHeapD1Ev+0x8c>)
 8001146:	6023      	str	r3, [r4, #0]
    {
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <_ZN12FrontendHeapD1Ev+0x90>)
 800114a:	6023      	str	r3, [r4, #0]
 800114c:	4620      	mov	r0, r4
 800114e:	bd10      	pop	{r4, pc}
 8001150:	0801e204 	.word	0x0801e204
 8001154:	0801e108 	.word	0x0801e108
 8001158:	0801e0bc 	.word	0x0801e0bc
 800115c:	0801e0a4 	.word	0x0801e0a4
 8001160:	0801e040 	.word	0x0801e040
 8001164:	0801e058 	.word	0x0801e058
 8001168:	0801f20c 	.word	0x0801f20c
 800116c:	0801e018 	.word	0x0801e018
 8001170:	0801e1d0 	.word	0x0801e1d0
 8001174:	0801e19c 	.word	0x0801e19c
 8001178:	0801e168 	.word	0x0801e168
 800117c:	0801e154 	.word	0x0801e154
 8001180:	0801e008 	.word	0x0801e008

08001184 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001184:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001186:	4c17      	ldr	r4, [pc, #92]	; (80011e4 <__tcf_0+0x60>)
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <__tcf_0+0x64>)
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <__tcf_0+0x68>)
 800118e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <__tcf_0+0x6c>)
 8001194:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <__tcf_0+0x70>)
 800119a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <__tcf_0+0x74>)
 80011a0:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <__tcf_0+0x78>)
 80011a6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <__tcf_0+0x7c>)
 80011ac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <__tcf_0+0x80>)
 80011b2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011b6:	4620      	mov	r0, r4
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__tcf_0+0x84>)
 80011ba:	f840 3fcc 	str.w	r3, [r0, #204]!
 80011be:	f00e f82c 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011c2:	4620      	mov	r0, r4
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <__tcf_0+0x88>)
 80011c6:	f840 3f2c 	str.w	r3, [r0, #44]!
 80011ca:	f00e f826 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011ce:	4620      	mov	r0, r4
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <__tcf_0+0x8c>)
 80011d2:	f840 3f14 	str.w	r3, [r0, #20]!
 80011d6:	f00e f820 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <__tcf_0+0x90>)
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <__tcf_0+0x94>)
 80011e0:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	2400014c 	.word	0x2400014c
 80011e8:	0801e204 	.word	0x0801e204
 80011ec:	0801e108 	.word	0x0801e108
 80011f0:	0801e0bc 	.word	0x0801e0bc
 80011f4:	0801e0a4 	.word	0x0801e0a4
 80011f8:	0801e040 	.word	0x0801e040
 80011fc:	0801e058 	.word	0x0801e058
 8001200:	0801f20c 	.word	0x0801f20c
 8001204:	0801e018 	.word	0x0801e018
 8001208:	0801e1d0 	.word	0x0801e1d0
 800120c:	0801e19c 	.word	0x0801e19c
 8001210:	0801e168 	.word	0x0801e168
 8001214:	0801e154 	.word	0x0801e154
 8001218:	0801e008 	.word	0x0801e008

0800121c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800121c:	b510      	push	{r4, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <_ZN12FrontendHeapD0Ev+0x6c>)
 8001222:	6003      	str	r3, [r0, #0]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <_ZN12FrontendHeapD0Ev+0x70>)
 8001226:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <_ZN12FrontendHeapD0Ev+0x74>)
 800122c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <_ZN12FrontendHeapD0Ev+0x78>)
 8001232:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001238:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <_ZN12FrontendHeapD0Ev+0x80>)
 800123e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <_ZN12FrontendHeapD0Ev+0x84>)
 8001244:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <_ZN12FrontendHeapD0Ev+0x88>)
 800124a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <_ZN12FrontendHeapD0Ev+0x8c>)
 8001250:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001254:	f00d ffe1 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001258:	4620      	mov	r0, r4
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <_ZN12FrontendHeapD0Ev+0x90>)
 800125c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001260:	f00d ffdb 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001264:	4620      	mov	r0, r4
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <_ZN12FrontendHeapD0Ev+0x94>)
 8001268:	f840 3f14 	str.w	r3, [r0, #20]!
 800126c:	f00d ffd5 	bl	800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_ZN12FrontendHeapD0Ev+0x98>)
 8001272:	6023      	str	r3, [r4, #0]
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001276:	6023      	str	r3, [r4, #0]
 8001278:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800127c:	4620      	mov	r0, r4
 800127e:	f01b f808 	bl	801c292 <_ZdlPvj>
 8001282:	4620      	mov	r0, r4
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	0801e204 	.word	0x0801e204
 800128c:	0801e108 	.word	0x0801e108
 8001290:	0801e0bc 	.word	0x0801e0bc
 8001294:	0801e0a4 	.word	0x0801e0a4
 8001298:	0801e040 	.word	0x0801e040
 800129c:	0801e058 	.word	0x0801e058
 80012a0:	0801f20c 	.word	0x0801f20c
 80012a4:	0801e018 	.word	0x0801e018
 80012a8:	0801e1d0 	.word	0x0801e1d0
 80012ac:	0801e19c 	.word	0x0801e19c
 80012b0:	0801e168 	.word	0x0801e168
 80012b4:	0801e154 	.word	0x0801e154
 80012b8:	0801e008 	.word	0x0801e008

080012bc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80012c0:	f001 fd24 	bl	8002d0c <_ZN14BitmapDatabase11getInstanceEv>
 80012c4:	4605      	mov	r5, r0
 80012c6:	f001 fd25 	bl	8002d14 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80012ca:	4601      	mov	r1, r0
 80012cc:	2400      	movs	r4, #0
 80012ce:	9400      	str	r4, [sp, #0]
 80012d0:	4623      	mov	r3, r4
 80012d2:	4622      	mov	r2, r4
 80012d4:	4628      	mov	r0, r5
 80012d6:	f012 feed 	bl	80140b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <touchgfx_init+0xc0>)
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <touchgfx_init+0xc4>)
 80012de:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012e0:	4620      	mov	r0, r4
 80012e2:	f002 f877 	bl	80033d4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <touchgfx_init+0xc8>)
 80012e8:	f012 fd9c 	bl	8013e24 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <touchgfx_init+0xcc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f3bf 8f5b 	dmb	ish
 80012f4:	f013 0f01 	tst.w	r3, #1
 80012f8:	d004      	beq.n	8001304 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012fa:	4824      	ldr	r0, [pc, #144]	; (800138c <touchgfx_init+0xd0>)
 80012fc:	f7ff f9e8 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001300:	b003      	add	sp, #12
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <touchgfx_init+0xcc>)
 8001306:	f01a ffc6 	bl	801c296 <__cxa_guard_acquire>
 800130a:	2800      	cmp	r0, #0
 800130c:	d0f5      	beq.n	80012fa <touchgfx_init+0x3e>
          frontendApplication(app)
 800130e:	4c20      	ldr	r4, [pc, #128]	; (8001390 <touchgfx_init+0xd4>)
 8001310:	4620      	mov	r0, r4
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <touchgfx_init+0xd8>)
 8001314:	f840 3b14 	str.w	r3, [r0], #20
 8001318:	6060      	str	r0, [r4, #4]
 800131a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 800131e:	60a7      	str	r7, [r4, #8]
 8001320:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 8001324:	60e6      	str	r6, [r4, #12]
 8001326:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 800132a:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <touchgfx_init+0xdc>)
 800132e:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <touchgfx_init+0xe0>)
 8001332:	6023      	str	r3, [r4, #0]
 8001334:	f00d ff72 	bl	800f21c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <touchgfx_init+0xe4>)
 800133a:	6163      	str	r3, [r4, #20]
 800133c:	4638      	mov	r0, r7
 800133e:	f00d ff6d 	bl	800f21c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <touchgfx_init+0xe8>)
 8001344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001346:	4630      	mov	r0, r6
 8001348:	f00d ff68 	bl	800f21c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <touchgfx_init+0xec>)
 800134e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8001352:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001356:	4630      	mov	r0, r6
 8001358:	f002 fa04 	bl	8003764 <_ZN5ModelC1Ev>
 800135c:	4622      	mov	r2, r4
 800135e:	4631      	mov	r1, r6
 8001360:	4628      	mov	r0, r5
 8001362:	f002 f9f5 	bl	8003750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001366:	4628      	mov	r0, r5
 8001368:	f001 fd72 	bl	8002e50 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <touchgfx_init+0xf0>)
 800136e:	f01a ffdd 	bl	801c32c <atexit>
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <touchgfx_init+0xcc>)
 8001374:	f01a ff9b 	bl	801c2ae <__cxa_guard_release>
 8001378:	e7bf      	b.n	80012fa <touchgfx_init+0x3e>
 800137a:	bf00      	nop
 800137c:	2400b9dc 	.word	0x2400b9dc
 8001380:	240011a8 	.word	0x240011a8
 8001384:	24000008 	.word	0x24000008
 8001388:	24000148 	.word	0x24000148
 800138c:	2400112c 	.word	0x2400112c
 8001390:	2400014c 	.word	0x2400014c
 8001394:	0801e008 	.word	0x0801e008
 8001398:	0801e154 	.word	0x0801e154
 800139c:	0801e204 	.word	0x0801e204
 80013a0:	0801e168 	.word	0x0801e168
 80013a4:	0801e19c 	.word	0x0801e19c
 80013a8:	0801e1d0 	.word	0x0801e1d0
 80013ac:	08001185 	.word	0x08001185

080013b0 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013b0:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013b2:	4802      	ldr	r0, [pc, #8]	; (80013bc <touchgfx_taskEntry+0xc>)
 80013b4:	f7ff f990 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	2400112c 	.word	0x2400112c

080013c0 <_Z41__static_initialization_and_destruction_0ii>:
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	2801      	cmp	r0, #1
 80013ca:	d006      	beq.n	80013da <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80013cc:	b91c      	cbnz	r4, 80013d6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	429d      	cmp	r5, r3
 80013d4:	d076      	beq.n	80014c4 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	4299      	cmp	r1, r3
 80013e0:	d1f4      	bne.n	80013cc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013e2:	4e45      	ldr	r6, [pc, #276]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013e6:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013ea:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013ec:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001544 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013f0:	4640      	mov	r0, r8
 80013f2:	f7ff fc93 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013f6:	4f43      	ldr	r7, [pc, #268]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013f8:	4638      	mov	r0, r7
 80013fa:	f015 f875 	bl	80164e8 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001400:	4a42      	ldr	r2, [pc, #264]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f8c3 8004 	str.w	r8, [r3, #4]
 8001408:	609f      	str	r7, [r3, #8]
 800140a:	60de      	str	r6, [r3, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001414:	839a      	strh	r2, [r3, #28]
 8001416:	83da      	strh	r2, [r3, #30]
 8001418:	841a      	strh	r2, [r3, #32]
 800141a:	845a      	strh	r2, [r3, #34]	; 0x22
 800141c:	849a      	strh	r2, [r3, #36]	; 0x24
 800141e:	84da      	strh	r2, [r3, #38]	; 0x26
 8001420:	851a      	strh	r2, [r3, #40]	; 0x28
 8001422:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
 8001428:	861a      	strh	r2, [r3, #48]	; 0x30
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
 8001436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800143a:	2101      	movs	r1, #1
 800143c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 8001440:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001444:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001448:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800144a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800144e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8001452:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
 800145c:	65da      	str	r2, [r3, #92]	; 0x5c
 800145e:	661a      	str	r2, [r3, #96]	; 0x60
 8001460:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001464:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001468:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800146c:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 8001470:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001474:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001478:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800147c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001480:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001484:	671a      	str	r2, [r3, #112]	; 0x70
 8001486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800148a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800148e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001492:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001496:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 800149a:	491d      	ldr	r1, [pc, #116]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800149c:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800149e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80014a2:	481c      	ldr	r0, [pc, #112]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80014a4:	8001      	strh	r1, [r0, #0]
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80014a8:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80014aa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80014b0:	8001      	strh	r1, [r0, #0]
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80014b4:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80014b6:	491b      	ldr	r1, [pc, #108]	; (8001524 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80014b8:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014bc:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014c0:	601a      	str	r2, [r3, #0]
    }
 80014c2:	e783      	b.n	80013cc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014c8:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014cc:	601a      	str	r2, [r3, #0]
    {
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80014d0:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014d6:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014d8:	4a17      	ldr	r2, [pc, #92]	; (8001538 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014da:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014e0:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014e4:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014e6:	4817      	ldr	r0, [pc, #92]	; (8001544 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014e8:	f7ff fa4c 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014f0:	601a      	str	r2, [r3, #0]
    {
 80014f2:	4a02      	ldr	r2, [pc, #8]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	e76e      	b.n	80013d6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014f8:	24000388 	.word	0x24000388
 80014fc:	0801da70 	.word	0x0801da70
 8001500:	0801da88 	.word	0x0801da88
 8001504:	240011ac 	.word	0x240011ac
 8001508:	2400112c 	.word	0x2400112c
 800150c:	0801ef94 	.word	0x0801ef94
 8001510:	2400b980 	.word	0x2400b980
 8001514:	2400b974 	.word	0x2400b974
 8001518:	2400b97a 	.word	0x2400b97a
 800151c:	2400b976 	.word	0x2400b976
 8001520:	2400b97c 	.word	0x2400b97c
 8001524:	2400b978 	.word	0x2400b978
 8001528:	0801e218 	.word	0x0801e218
 800152c:	0801dc18 	.word	0x0801dc18
 8001530:	24000008 	.word	0x24000008
 8001534:	0801e398 	.word	0x0801e398
 8001538:	0801dff4 	.word	0x0801dff4
 800153c:	0801f518 	.word	0x0801f518
 8001540:	0801f1b4 	.word	0x0801f1b4
 8001544:	2400038c 	.word	0x2400038c

08001548 <_GLOBAL__sub_I_touchgfx_init>:
 8001548:	b508      	push	{r3, lr}
 800154a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff ff36 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 8001554:	bd08      	pop	{r3, pc}

08001556 <_GLOBAL__sub_D_touchgfx_init>:
 8001556:	b508      	push	{r3, lr}
 8001558:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ff2f 	bl	80013c0 <_Z41__static_initialization_and_destruction_0ii>
 8001562:	bd08      	pop	{r3, pc}

08001564 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001566:	2290      	movs	r2, #144	; 0x90
 8001568:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800156c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800157a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100

0800158c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800158e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80015a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015aa:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80015b6:	68d3      	ldr	r3, [r2, #12]
 80015b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80015c2:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80015c4:	6911      	ldr	r1, [r2, #16]
 80015c6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80015ca:	3901      	subs	r1, #1
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 80015ce:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80015d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015da:	4770      	bx	lr
 80015dc:	50001000 	.word	0x50001000
 80015e0:	24001208 	.word	0x24001208
 80015e4:	24001206 	.word	0x24001206

080015e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015ea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015ee:	4770      	bx	lr
 80015f0:	50001000 	.word	0x50001000

080015f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015f6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015fa:	2201      	movs	r2, #1
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015fe:	4770      	bx	lr
 8001600:	50001000 	.word	0x50001000

08001604 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800160c:	d025      	beq.n	800165a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 800160e:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800161c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001620:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001624:	e000      	b.n	8001628 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001626:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001628:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800162c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001630:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001634:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001638:	4908      	ldr	r1, [pc, #32]	; (800165c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 800163a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800163e:	4613      	mov	r3, r2
 8001640:	3a01      	subs	r2, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001646:	1e43      	subs	r3, r0, #1
 8001648:	2800      	cmp	r0, #0
 800164a:	d1ec      	bne.n	8001626 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 800164c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001668:	d025      	beq.n	80016b6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 800166a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001674:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001678:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800167c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001680:	e000      	b.n	8001684 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001682:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001684:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001688:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800168c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001690:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001694:	4908      	ldr	r1, [pc, #32]	; (80016b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001696:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800169a:	4613      	mov	r3, r2
 800169c:	3a01      	subs	r2, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 80016a2:	1e43      	subs	r3, r0, #1
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d1ec      	bne.n	8001682 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 80016a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016ac:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80016b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <_ZN20TouchGFXGeneratedHALD1Ev>:
 80016bc:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 80016be:	6002      	str	r2, [r0, #0]
 80016c0:	4a02      	ldr	r2, [pc, #8]	; (80016cc <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 80016c2:	6002      	str	r2, [r0, #0]
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0801e218 	.word	0x0801e218
 80016cc:	0801ef94 	.word	0x0801ef94

080016d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
 80016d2:	4604      	mov	r4, r0
    HAL::initialize();
 80016d4:	f00e f8ab 	bl	800f82e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016dc:	f010 f8b4 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4620      	mov	r0, r4
 80016e4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016ec:	2300      	movs	r3, #0
 80016ee:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016f2:	4620      	mov	r0, r4
 80016f4:	47a8      	blx	r5
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	2409fa00 	.word	0x2409fa00
 80016fc:	24040000 	.word	0x24040000

08001700 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001700:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001702:	f00e f87b 	bl	800f7fc <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001706:	bd08      	pop	{r3, pc}

08001708 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001708:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 800170a:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800170e:	b113      	cbz	r3, 8001716 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001716:	f00e f87d 	bl	800f814 <_ZN8touchgfx3HAL8endFrameEv>
}
 800171a:	bd08      	pop	{r3, pc}
 800171c:	24001204 	.word	0x24001204

08001720 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001720:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001722:	f00e f835 	bl	800f790 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800172e:	d021      	beq.n	8001774 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001738:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800173c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001740:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001744:	e000      	b.n	8001748 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001746:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001748:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800174c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001750:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001754:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800175a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800175e:	4613      	mov	r3, r2
 8001760:	3a01      	subs	r2, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f2      	bne.n	800174c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001766:	1e43      	subs	r3, r0, #1
 8001768:	2800      	cmp	r0, #0
 800176a:	d1ec      	bne.n	8001746 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800176c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001770:	f3bf 8f6f 	isb	sy
}
 8001774:	bd10      	pop	{r4, pc}
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800177c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800177e:	f00e f970 	bl	800fa62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8001782:	bd08      	pop	{r3, pc}

08001784 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001784:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001786:	f00d fffd 	bl	800f784 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800178a:	bd08      	pop	{r3, pc}

0800178c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800178c:	b510      	push	{r4, lr}
 800178e:	4604      	mov	r4, r0
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8001792:	6003      	str	r3, [r0, #0]
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	217c      	movs	r1, #124	; 0x7c
 800179a:	f01a fd7a 	bl	801c292 <_ZdlPvj>
 800179e:	4620      	mov	r0, r4
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	0801e218 	.word	0x0801e218
 80017a8:	0801ef94 	.word	0x0801ef94

080017ac <HAL_LTDC_LineEventCallback>:
        return instance;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017ae:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 80017b0:	b32b      	cbz	r3, 80017fe <HAL_LTDC_LineEventCallback+0x52>
    {
 80017b2:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_LTDC_LineEventCallback+0x58>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_LTDC_LineEventCallback+0x5c>)
 80017ba:	8811      	ldrh	r1, [r2, #0]
 80017bc:	428b      	cmp	r3, r1
 80017be:	d00a      	beq.n	80017d6 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80017c0:	f006 fd2a 	bl	8008218 <HAL_LTDC_ProgramLineEvent>
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017c6:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7fe feb6 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017d4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_LTDC_LineEventCallback+0x60>)
 80017d8:	8819      	ldrh	r1, [r3, #0]
 80017da:	f006 fd1d 	bl	8008218 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017de:	4c08      	ldr	r4, [pc, #32]	; (8001800 <HAL_LTDC_LineEventCallback+0x54>)
 80017e0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017e2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017e6:	3301      	adds	r3, #1
 80017e8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017ec:	f7ff f892 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	f00e fd7b 	bl	80102ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7fe fe64 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017fc:	e7ea      	b.n	80017d4 <HAL_LTDC_LineEventCallback+0x28>
 80017fe:	4770      	bx	lr
 8001800:	2400b980 	.word	0x2400b980
 8001804:	50001000 	.word	0x50001000
 8001808:	24001208 	.word	0x24001208
 800180c:	24001206 	.word	0x24001206

08001810 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001810:	b530      	push	{r4, r5, lr}
 8001812:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001814:	2400      	movs	r4, #0
 8001816:	9400      	str	r4, [sp, #0]
 8001818:	9401      	str	r4, [sp, #4]
 800181a:	9402      	str	r4, [sp, #8]
 800181c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800181e:	f005 f97d 	bl	8006b1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001822:	2501      	movs	r5, #1
 8001824:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001828:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800182c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001830:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001832:	231b      	movs	r3, #27
 8001834:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001838:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800183c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001840:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001844:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001848:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800184c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001850:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001854:	4668      	mov	r0, sp
 8001856:	f005 f97f 	bl	8006b58 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800185a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800185e:	2319      	movs	r3, #25
 8001860:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001864:	2403      	movs	r4, #3
 8001866:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800186a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800186e:	4668      	mov	r0, sp
 8001870:	f005 f972 	bl	8006b58 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001874:	2302      	movs	r3, #2
 8001876:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800187a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800187e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8001880:	2313      	movs	r3, #19
 8001882:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001886:	4668      	mov	r0, sp
 8001888:	f005 f966 	bl	8006b58 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800188c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001890:	2311      	movs	r3, #17
 8001892:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001896:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800189a:	4668      	mov	r0, sp
 800189c:	f005 f95c 	bl	8006b58 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018a0:	2004      	movs	r0, #4
 80018a2:	f005 f949 	bl	8006b38 <HAL_MPU_Enable>

}
 80018a6:	b005      	add	sp, #20
 80018a8:	bd30      	pop	{r4, r5, pc}
	...

080018ac <MX_CRC_Init>:
{
 80018ac:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_CRC_Init+0x1c>)
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_CRC_Init+0x20>)
 80018b2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018b8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018ba:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018bc:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018be:	2301      	movs	r3, #1
 80018c0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018c2:	f005 f979 	bl	8006bb8 <HAL_CRC_Init>
}
 80018c6:	bd08      	pop	{r3, pc}
 80018c8:	2400121c 	.word	0x2400121c
 80018cc:	40023000 	.word	0x40023000

080018d0 <MX_GPIO_Init>:
{
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2400      	movs	r4, #0
 80018d8:	9409      	str	r4, [sp, #36]	; 0x24
 80018da:	940a      	str	r4, [sp, #40]	; 0x28
 80018dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80018de:	940c      	str	r4, [sp, #48]	; 0x30
 80018e0:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <MX_GPIO_Init+0x1ec>)
 80018e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001904:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001908:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800190c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001910:	9202      	str	r2, [sp, #8]
 8001912:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001914:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001920:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001924:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800192c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001934:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001938:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800193c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001940:	9204      	str	r2, [sp, #16]
 8001942:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001944:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001948:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001950:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001954:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001958:	9205      	str	r2, [sp, #20]
 800195a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001968:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800196c:	f002 0201 	and.w	r2, r2, #1
 8001970:	9206      	str	r2, [sp, #24]
 8001972:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001974:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001980:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001984:	f002 0204 	and.w	r2, r2, #4
 8001988:	9207      	str	r2, [sp, #28]
 800198a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001998:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	9308      	str	r3, [sp, #32]
 80019a2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 80019a4:	4e46      	ldr	r6, [pc, #280]	; (8001ac0 <MX_GPIO_Init+0x1f0>)
 80019a6:	4622      	mov	r2, r4
 80019a8:	f240 210e 	movw	r1, #526	; 0x20e
 80019ac:	4630      	mov	r0, r6
 80019ae:	f005 fdd6 	bl	800755e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80019b2:	f8df a118 	ldr.w	sl, [pc, #280]	; 8001acc <MX_GPIO_Init+0x1fc>
 80019b6:	4622      	mov	r2, r4
 80019b8:	f640 0104 	movw	r1, #2052	; 0x804
 80019bc:	4650      	mov	r0, sl
 80019be:	f005 fdce 	bl	800755e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80019c2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001ad0 <MX_GPIO_Init+0x200>
 80019c6:	4622      	mov	r2, r4
 80019c8:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80019cc:	4640      	mov	r0, r8
 80019ce:	f005 fdc6 	bl	800755e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80019d2:	4f3c      	ldr	r7, [pc, #240]	; (8001ac4 <MX_GPIO_Init+0x1f4>)
 80019d4:	4622      	mov	r2, r4
 80019d6:	2106      	movs	r1, #6
 80019d8:	4638      	mov	r0, r7
 80019da:	f005 fdc0 	bl	800755e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80019de:	2330      	movs	r3, #48	; 0x30
 80019e0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80019e6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ec:	a909      	add	r1, sp, #36	; 0x24
 80019ee:	4630      	mov	r0, r6
 80019f0:	f005 fbf6 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80019f4:	230e      	movs	r3, #14
 80019f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2501      	movs	r5, #1
 80019fa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a00:	a909      	add	r1, sp, #36	; 0x24
 8001a02:	4630      	mov	r0, r6
 8001a04:	f005 fbec 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001a08:	f640 0304 	movw	r3, #2052	; 0x804
 8001a0c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a14:	a909      	add	r1, sp, #36	; 0x24
 8001a16:	4650      	mov	r0, sl
 8001a18:	f005 fbe2 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8001a1c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001a20:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	f04f 0a03 	mov.w	sl, #3
 8001a2a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2e:	a909      	add	r1, sp, #36	; 0x24
 8001a30:	4640      	mov	r0, r8
 8001a32:	f005 fbd5 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8001a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8001a44:	a909      	add	r1, sp, #36	; 0x24
 8001a46:	4630      	mov	r0, r6
 8001a48:	f005 fbca 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001a58:	a909      	add	r1, sp, #36	; 0x24
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <MX_GPIO_Init+0x1f8>)
 8001a5c:	f005 fbc0 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a60:	2604      	movs	r6, #4
 8001a62:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a64:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	a909      	add	r1, sp, #36	; 0x24
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	f005 fbb7 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	a909      	add	r1, sp, #36	; 0x24
 8001a7e:	4638      	mov	r0, r7
 8001a80:	f005 fbae 	bl	80071e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a84:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	a909      	add	r1, sp, #36	; 0x24
 8001a8e:	4638      	mov	r0, r7
 8001a90:	f005 fba6 	bl	80071e0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a94:	4622      	mov	r2, r4
 8001a96:	2105      	movs	r1, #5
 8001a98:	2017      	movs	r0, #23
 8001a9a:	f004 ffe9 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a9e:	2017      	movs	r0, #23
 8001aa0:	f005 f81c 	bl	8006adc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	2028      	movs	r0, #40	; 0x28
 8001aaa:	f004 ffe1 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aae:	2028      	movs	r0, #40	; 0x28
 8001ab0:	f005 f814 	bl	8006adc <HAL_NVIC_EnableIRQ>
}
 8001ab4:	b00e      	add	sp, #56	; 0x38
 8001ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aba:	bf00      	nop
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58022000 	.word	0x58022000
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58021800 	.word	0x58021800
 8001ad0:	58021c00 	.word	0x58021c00

08001ad4 <MX_DMA2D_Init>:
{
 8001ad4:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001ad6:	4c0b      	ldr	r4, [pc, #44]	; (8001b04 <MX_DMA2D_Init+0x30>)
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_DMA2D_Init+0x34>)
 8001ada:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ae4:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001ae6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001ae8:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001aea:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001aec:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001aee:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001af0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001af2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001af4:	4620      	mov	r0, r4
 8001af6:	f005 fa0f 	bl	8006f18 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001afa:	2101      	movs	r1, #1
 8001afc:	4620      	mov	r0, r4
 8001afe:	f005 faed 	bl	80070dc <HAL_DMA2D_ConfigLayer>
}
 8001b02:	bd10      	pop	{r4, pc}
 8001b04:	24001240 	.word	0x24001240
 8001b08:	52001000 	.word	0x52001000

08001b0c <MX_LTDC_Init>:
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b10:	2234      	movs	r2, #52	; 0x34
 8001b12:	2100      	movs	r1, #0
 8001b14:	a801      	add	r0, sp, #4
 8001b16:	f01a fd81 	bl	801c61c <memset>
  hltdc.Instance = LTDC;
 8001b1a:	4c23      	ldr	r4, [pc, #140]	; (8001ba8 <MX_LTDC_Init+0x9c>)
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <MX_LTDC_Init+0xa0>)
 8001b1e:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b20:	2500      	movs	r5, #0
 8001b22:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b24:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b26:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b28:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b2a:	2328      	movs	r3, #40	; 0x28
 8001b2c:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001b2e:	2309      	movs	r3, #9
 8001b30:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001b32:	232a      	movs	r3, #42	; 0x2a
 8001b34:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b36:	230b      	movs	r3, #11
 8001b38:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001b3a:	f240 230a 	movw	r3, #522	; 0x20a
 8001b3e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b40:	f240 131b 	movw	r3, #283	; 0x11b
 8001b44:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001b46:	f240 232a 	movw	r3, #554	; 0x22a
 8001b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b4c:	f240 131d 	movw	r3, #285	; 0x11d
 8001b50:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b52:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b56:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b5a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f006 fa3c 	bl	8007fdc <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001b64:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001b66:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001b6a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001b6c:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001b6e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001b72:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001b74:	2301      	movs	r3, #1
 8001b76:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001b78:	23ff      	movs	r3, #255	; 0xff
 8001b7a:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001b7c:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b82:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b84:	2005      	movs	r0, #5
 8001b86:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001b88:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001b8a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b8c:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001b8e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b92:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b96:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	a901      	add	r1, sp, #4
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f006 fb05 	bl	80081ae <HAL_LTDC_ConfigLayer>
}
 8001ba4:	b00f      	add	sp, #60	; 0x3c
 8001ba6:	bd30      	pop	{r4, r5, pc}
 8001ba8:	240012f4 	.word	0x240012f4
 8001bac:	50001000 	.word	0x50001000

08001bb0 <MX_I2C4_Init>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <MX_I2C4_Init+0x38>)
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <MX_I2C4_Init+0x3c>)
 8001bb6:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <MX_I2C4_Init+0x40>)
 8001bba:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc4:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001bc6:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc8:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bcc:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f005 fea4 	bl	800791c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f006 f8c8 	bl	8007d6e <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001bde:	4629      	mov	r1, r5
 8001be0:	4620      	mov	r0, r4
 8001be2:	f006 f8f2 	bl	8007dca <HAL_I2CEx_ConfigDigitalFilter>
}
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	240012a8 	.word	0x240012a8
 8001bec:	58001c00 	.word	0x58001c00
 8001bf0:	30808bd0 	.word	0x30808bd0

08001bf4 <MX_OCTOSPI1_Init>:
{
 8001bf4:	b530      	push	{r4, r5, lr}
 8001bf6:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_OCTOSPI1_Init+0x58>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_OCTOSPI1_Init+0x5c>)
 8001bfc:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bfe:	2501      	movs	r5, #1
 8001c00:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001c02:	2400      	movs	r4, #0
 8001c04:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001c06:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001c08:	231a      	movs	r3, #26
 8001c0a:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001c10:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001c12:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001c14:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001c16:	2303      	movs	r3, #3
 8001c18:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001c1a:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001c1c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001c1e:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001c20:	2308      	movs	r3, #8
 8001c22:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001c24:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001c26:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c28:	f006 ff74 	bl	8008b14 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001c2c:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001c30:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001c34:	4620      	mov	r0, r4
 8001c36:	f004 fc6d 	bl	8006514 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001c3a:	a901      	add	r1, sp, #4
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f004 fce3 	bl	8006608 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f004 fc0e 	bl	8006464 <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd30      	pop	{r4, r5, pc}
 8001c4c:	2400139c 	.word	0x2400139c
 8001c50:	52005000 	.word	0x52005000

08001c54 <MX_SPI2_Init>:
{
 8001c54:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001c56:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_SPI2_Init+0x48>)
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_SPI2_Init+0x4c>)
 8001c5a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c60:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	2300      	movs	r3, #0
 8001c64:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c66:	220f      	movs	r2, #15
 8001c68:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6c:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c72:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c78:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001c80:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c82:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c84:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c86:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c88:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c8a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c8c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c8e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c90:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c92:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c94:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c96:	f008 fcb9 	bl	800a60c <HAL_SPI_Init>
}
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	240013f8 	.word	0x240013f8
 8001ca0:	40003800 	.word	0x40003800

08001ca4 <SystemClock_Config>:
{
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca8:	224c      	movs	r2, #76	; 0x4c
 8001caa:	2100      	movs	r1, #0
 8001cac:	a809      	add	r0, sp, #36	; 0x24
 8001cae:	f01a fcb5 	bl	801c61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	a801      	add	r0, sp, #4
 8001cb8:	f01a fcb0 	bl	801c61c <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <SystemClock_Config+0xa8>)
 8001cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	f006 ffa8 	bl	8008c1c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <SystemClock_Config+0xac>)
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <SystemClock_Config+0xac>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001cec:	d0fa      	beq.n	8001ce4 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001cee:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <SystemClock_Config+0xa8>)
 8001cf0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d04:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001d10:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d14:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d16:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d18:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d1a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d20:	2400      	movs	r4, #0
 8001d22:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d24:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	a809      	add	r0, sp, #36	; 0x24
 8001d28:	f006 ffc2 	bl	8008cb0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	233f      	movs	r3, #63	; 0x3f
 8001d2e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2103      	movs	r1, #3
 8001d32:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d36:	2308      	movs	r3, #8
 8001d38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d3a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d3c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d3e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d40:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d42:	a801      	add	r0, sp, #4
 8001d44:	f007 fbc0 	bl	80094c8 <HAL_RCC_ClockConfig>
}
 8001d48:	b01c      	add	sp, #112	; 0x70
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58024800 	.word	0x58024800

08001d54 <main>:
{
 8001d54:	b508      	push	{r3, lr}
  MPU_Config();
 8001d56:	f7ff fd5b 	bl	8001810 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <main+0x104>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d62:	d113      	bne.n	8001d8c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d68:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <main+0x104>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d78:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d82:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d88:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <main+0x104>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d94:	d127      	bne.n	8001de6 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <main+0x104>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001da2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001da6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001daa:	e000      	b.n	8001dae <main+0x5a>
    } while(sets-- != 0U);
 8001dac:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dae:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001db2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001db6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001dba:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001dbe:	4926      	ldr	r1, [pc, #152]	; (8001e58 <main+0x104>)
 8001dc0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f2      	bne.n	8001db2 <main+0x5e>
    } while(sets-- != 0U);
 8001dcc:	1e43      	subs	r3, r0, #1
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1ec      	bne.n	8001dac <main+0x58>
 8001dd2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001dd6:	694b      	ldr	r3, [r1, #20]
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	614b      	str	r3, [r1, #20]
 8001dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001de2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001de6:	f004 fddd 	bl	80069a4 <HAL_Init>
  SystemClock_Config();
 8001dea:	f7ff ff5b 	bl	8001ca4 <SystemClock_Config>
  MX_CRC_Init();
 8001dee:	f7ff fd5d 	bl	80018ac <MX_CRC_Init>
  MX_GPIO_Init();
 8001df2:	f7ff fd6d 	bl	80018d0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001df6:	f7ff fe6d 	bl	8001ad4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001dfa:	f7ff fe87 	bl	8001b0c <MX_LTDC_Init>
  MX_I2C4_Init();
 8001dfe:	f7ff fed7 	bl	8001bb0 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001e02:	f7ff fef7 	bl	8001bf4 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8001e06:	f7ff ff25 	bl	8001c54 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 8001e0a:	f7fe fb03 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001e0e:	f7fe fb00 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 8001e12:	f000 fead 	bl	8002b70 <wifi_initialise>
  osKernelInitialize();
 8001e16:	f009 fc8b 	bl	800b730 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <main+0x108>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f009 fdd1 	bl	800b9c6 <osMessageQueueNew>
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <main+0x10c>)
 8001e26:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <main+0x110>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f009 fdca 	bl	800b9c6 <osMessageQueueNew>
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <main+0x114>)
 8001e34:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <main+0x118>)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <main+0x11c>)
 8001e3c:	f009 fca6 	bl	800b78c <osThreadNew>
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <main+0x120>)
 8001e42:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001e44:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <main+0x124>)
 8001e46:	2100      	movs	r1, #0
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <main+0x128>)
 8001e4a:	f009 fc9f 	bl	800b78c <osThreadNew>
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <main+0x12c>)
 8001e50:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001e52:	f009 fc7f 	bl	800b754 <osKernelStart>
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <main+0x102>
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	0801e318 	.word	0x0801e318
 8001e60:	2400120c 	.word	0x2400120c
 8001e64:	0801e354 	.word	0x0801e354
 8001e68:	24001214 	.word	0x24001214
 8001e6c:	0801e36c 	.word	0x0801e36c
 8001e70:	08002c05 	.word	0x08002c05
 8001e74:	24001218 	.word	0x24001218
 8001e78:	0801e330 	.word	0x0801e330
 8001e7c:	0800041d 	.word	0x0800041d
 8001e80:	24001210 	.word	0x24001210

08001e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d000      	beq.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e8e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001e90:	f004 fdb6 	bl	8006a00 <HAL_IncTick>
}
 8001e94:	e7fb      	b.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001e96:	bf00      	nop
 8001e98:	40001000 	.word	0x40001000

08001e9c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e9c:	4770      	bx	lr
	...

08001ea0 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8001ea4:	f004 fdb8 	bl	8006a18 <HAL_GetTick>
 8001ea8:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <wait_cmddata_rdy_rising_event+0x28>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 8001eb2:	f004 fdb1 	bl	8006a18 <HAL_GetTick>
 8001eb6:	1b00      	subs	r0, r0, r4
 8001eb8:	42a8      	cmp	r0, r5
 8001eba:	d9f6      	bls.n	8001eaa <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	e000      	b.n	8001ec4 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 8001ec2:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24001b28 	.word	0x24001b28

08001ecc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001ecc:	b530      	push	{r4, r5, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b16b      	cbz	r3, 8001ef8 <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <SPI_WIFI_DelayUs+0x78>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4819      	ldr	r0, [pc, #100]	; (8001f48 <SPI_WIFI_DelayUs+0x7c>)
 8001ee2:	fba0 2303 	umull	r2, r3, r0, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 8001ef0:	fb04 f303 	mul.w	r3, r4, r3
 8001ef4:	9301      	str	r3, [sp, #4]
    while (ct)
 8001ef6:	e01d      	b.n	8001f34 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <SPI_WIFI_DelayUs+0x78>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <SPI_WIFI_DelayUs+0x80>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 8001f04:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 8001f06:	f004 fd87 	bl	8006a18 <HAL_GetTick>
 8001f0a:	4605      	mov	r5, r0
        while (ct)
 8001f0c:	e002      	b.n	8001f14 <SPI_WIFI_DelayUs+0x48>
            ct--;
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
        while (ct)
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 8001f1a:	f004 fd7d 	bl	8006a18 <HAL_GetTick>
 8001f1e:	1b40      	subs	r0, r0, r5
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SPI_WIFI_DelayUs+0x74>)
 8001f22:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1d9      	bne.n	8001edc <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e7d6      	b.n	8001edc <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 8001f2e:	9b01      	ldr	r3, [sp, #4]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	9301      	str	r3, [sp, #4]
    while (ct)
 8001f34:	9b01      	ldr	r3, [sp, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bd30      	pop	{r4, r5, pc}
 8001f3e:	bf00      	nop
 8001f40:	24001b2c 	.word	0x24001b2c
 8001f44:	24000040 	.word	0x24000040
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <wait_spi_rx_event>:
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8001f54:	f004 fd60 	bl	8006a18 <HAL_GetTick>
 8001f58:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <wait_spi_rx_event+0x28>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8001f62:	f004 fd59 	bl	8006a18 <HAL_GetTick>
 8001f66:	1b00      	subs	r0, r0, r4
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	d9f6      	bls.n	8001f5a <wait_spi_rx_event+0xa>
            return -1;
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	e000      	b.n	8001f74 <wait_spi_rx_event+0x24>
    return 0;
 8001f72:	2000      	movs	r0, #0
}
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	24001b30 	.word	0x24001b30

08001f7c <wait_spi_tx_event>:
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8001f80:	f004 fd4a 	bl	8006a18 <HAL_GetTick>
 8001f84:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <wait_spi_tx_event+0x28>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8001f8e:	f004 fd43 	bl	8006a18 <HAL_GetTick>
 8001f92:	1b00      	subs	r0, r0, r4
 8001f94:	42a8      	cmp	r0, r5
 8001f96:	d9f6      	bls.n	8001f86 <wait_spi_tx_event+0xa>
            return -1;
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	e000      	b.n	8001fa0 <wait_spi_tx_event+0x24>
    return 0;
 8001f9e:	2000      	movs	r0, #0
}
 8001fa0:	bd38      	pop	{r3, r4, r5, pc}
 8001fa2:	bf00      	nop
 8001fa4:	24001b34 	.word	0x24001b34

08001fa8 <SPI_WIFI_ResetModule>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 8001fac:	f004 fd34 	bl	8006a18 <HAL_GetTick>
 8001fb0:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 8001fb2:	4c38      	ldr	r4, [pc, #224]	; (8002094 <SPI_WIFI_ResetModule+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f005 fad0 	bl	800755e <HAL_GPIO_WritePin>
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f004 fd30 	bl	8006a24 <HAL_Delay>
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f005 fac8 	bl	800755e <HAL_GPIO_WritePin>
 8001fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd2:	f004 fd27 	bl	8006a24 <HAL_Delay>
    WIFI_ENABLE_NSS();
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8001fde:	f005 fabe 	bl	800755e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff ff72 	bl	8001ecc <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 8001fe8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 8001fea:	2120      	movs	r1, #32
 8001fec:	4829      	ldr	r0, [pc, #164]	; (8002094 <SPI_WIFI_ResetModule+0xec>)
 8001fee:	f005 faaf 	bl	8007550 <HAL_GPIO_ReadPin>
 8001ff2:	2801      	cmp	r0, #1
 8001ff4:	d11c      	bne.n	8002030 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 8001ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	eb0d 0104 	add.w	r1, sp, r4
 8002000:	4826      	ldr	r0, [pc, #152]	; (800209c <SPI_WIFI_ResetModule+0xf4>)
 8002002:	f008 fd57 	bl	800aab4 <HAL_SPI_Receive>
 8002006:	4605      	mov	r5, r0
        count += 2;
 8002008:	3402      	adds	r4, #2
 800200a:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800200c:	f004 fd04 	bl	8006a18 <HAL_GetTick>
 8002010:	1b83      	subs	r3, r0, r6
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d201      	bcs.n	800201c <SPI_WIFI_ResetModule+0x74>
 8002018:	2d00      	cmp	r5, #0
 800201a:	d0e6      	beq.n	8001fea <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002022:	481d      	ldr	r0, [pc, #116]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8002024:	f005 fa9b 	bl	800755e <HAL_GPIO_WritePin>
            return -1;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
}
 800202c:	b002      	add	sp, #8
 800202e:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <SPI_WIFI_ResetModule+0xf0>)
 8002038:	f005 fa91 	bl	800755e <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800203c:	f89d 3000 	ldrb.w	r3, [sp]
 8002040:	2b15      	cmp	r3, #21
 8002042:	d115      	bne.n	8002070 <SPI_WIFI_ResetModule+0xc8>
 8002044:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002048:	2b15      	cmp	r3, #21
 800204a:	d114      	bne.n	8002076 <SPI_WIFI_ResetModule+0xce>
 800204c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002050:	2b0d      	cmp	r3, #13
 8002052:	d113      	bne.n	800207c <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002054:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d112      	bne.n	8002082 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800205c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002060:	2b3e      	cmp	r3, #62	; 0x3e
 8002062:	d111      	bne.n	8002088 <SPI_WIFI_ResetModule+0xe0>
 8002064:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002068:	2b20      	cmp	r3, #32
 800206a:	d110      	bne.n	800208e <SPI_WIFI_ResetModule+0xe6>
    return 0;
 800206c:	2000      	movs	r0, #0
 800206e:	e7dd      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	e7da      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002076:	f04f 30ff 	mov.w	r0, #4294967295
 800207a:	e7d7      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	e7d4      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	e7d1      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	e7ce      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 800208e:	f04f 30ff 	mov.w	r0, #4294967295
 8002092:	e7cb      	b.n	800202c <SPI_WIFI_ResetModule+0x84>
 8002094:	58022000 	.word	0x58022000
 8002098:	58020000 	.word	0x58020000
 800209c:	240013f8 	.word	0x240013f8

080020a0 <SPI_WIFI_ReceiveData>:
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	b083      	sub	sp, #12
 80020a4:	4605      	mov	r5, r0
 80020a6:	460e      	mov	r6, r1
 80020a8:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	482b      	ldr	r0, [pc, #172]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 80020b2:	f005 fa54 	bl	800755e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f7ff ff08 	bl	8001ecc <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80020bc:	4638      	mov	r0, r7
 80020be:	f7ff feef 	bl	8001ea0 <wait_cmddata_rdy_rising_event>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	db48      	blt.n	8002158 <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 80020ce:	f005 fa46 	bl	800755e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80020d2:	201e      	movs	r0, #30
 80020d4:	f7ff fefa 	bl	8001ecc <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80020d8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80020da:	e016      	b.n	800210a <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80020dc:	2201      	movs	r2, #1
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <SPI_WIFI_ReceiveData+0xc4>)
 80020e0:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80020e2:	a901      	add	r1, sp, #4
 80020e4:	4820      	ldr	r0, [pc, #128]	; (8002168 <SPI_WIFI_ReceiveData+0xc8>)
 80020e6:	f008 ff91 	bl	800b00c <HAL_SPI_Receive_IT>
 80020ea:	bb08      	cbnz	r0, 8002130 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80020ec:	4638      	mov	r0, r7
 80020ee:	f7ff ff2f 	bl	8001f50 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80020f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020f6:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80020f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80020fc:	706b      	strb	r3, [r5, #1]
            length += 2;
 80020fe:	3402      	adds	r4, #2
 8002100:	b224      	sxth	r4, r4
            pData  += 2;
 8002102:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 8002104:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 8002108:	da1b      	bge.n	8002142 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 800210a:	2120      	movs	r1, #32
 800210c:	4817      	ldr	r0, [pc, #92]	; (800216c <SPI_WIFI_ReceiveData+0xcc>)
 800210e:	f005 fa1f 	bl	8007550 <HAL_GPIO_ReadPin>
 8002112:	2801      	cmp	r0, #1
 8002114:	d103      	bne.n	800211e <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 8002116:	42b4      	cmp	r4, r6
 8002118:	dbe0      	blt.n	80020dc <SPI_WIFI_ReceiveData+0x3c>
 800211a:	2e00      	cmp	r6, #0
 800211c:	d0de      	beq.n	80020dc <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002124:	480e      	ldr	r0, [pc, #56]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 8002126:	f005 fa1a 	bl	800755e <HAL_GPIO_WritePin>
}
 800212a:	4620      	mov	r0, r4
 800212c:	b003      	add	sp, #12
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 8002138:	f005 fa11 	bl	800755e <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 800213c:	f04f 34ff 	mov.w	r4, #4294967295
 8002140:	e7f3      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <SPI_WIFI_ReceiveData+0xc0>)
 800214a:	f005 fa08 	bl	800755e <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 800214e:	f7ff ff2b 	bl	8001fa8 <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002152:	f06f 0403 	mvn.w	r4, #3
 8002156:	e7e8      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002158:	f06f 0402 	mvn.w	r4, #2
 800215c:	e7e5      	b.n	800212a <SPI_WIFI_ReceiveData+0x8a>
 800215e:	bf00      	nop
 8002160:	58020000 	.word	0x58020000
 8002164:	24001b30 	.word	0x24001b30
 8002168:	240013f8 	.word	0x240013f8
 800216c:	58022000 	.word	0x58022000

08002170 <SPI_WIFI_DeInit>:
{
 8002170:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <SPI_WIFI_DeInit+0xc>)
 8002174:	f008 fafe 	bl	800a774 <HAL_SPI_DeInit>
}
 8002178:	2000      	movs	r0, #0
 800217a:	bd08      	pop	{r3, pc}
 800217c:	240013f8 	.word	0x240013f8

08002180 <SPI_WIFI_MspInit>:
{
 8002180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002184:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002186:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <SPI_WIFI_MspInit+0x140>)
 8002188:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800218c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002190:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002194:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002198:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 80021a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 80021ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80021b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021c8:	f002 0201 	and.w	r2, r2, #1
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d4:	f042 0204 	orr.w	r2, r2, #4
 80021d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e0:	f002 0204 	and.w	r2, r2, #4
 80021e4:	9203      	str	r2, [sp, #12]
 80021e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002200:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80022c4 <SPI_WIFI_MspInit+0x144>
 8002204:	2200      	movs	r2, #0
 8002206:	2104      	movs	r1, #4
 8002208:	4640      	mov	r0, r8
 800220a:	f005 f9a8 	bl	800755e <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 800220e:	f04f 0904 	mov.w	r9, #4
 8002212:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002216:	2501      	movs	r5, #1
 8002218:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 800221a:	2400      	movs	r4, #0
 800221c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800221e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002220:	a905      	add	r1, sp, #20
 8002222:	4640      	mov	r0, r8
 8002224:	f004 ffdc 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002228:	2320      	movs	r3, #32
 800222a:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800222c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002230:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002232:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002234:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002236:	a905      	add	r1, sp, #20
 8002238:	4640      	mov	r0, r8
 800223a:	f004 ffd1 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 800223e:	2702      	movs	r7, #2
 8002240:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002242:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002244:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002246:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002248:	2605      	movs	r6, #5
 800224a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 800224c:	a905      	add	r1, sp, #20
 800224e:	4640      	mov	r0, r8
 8002250:	f004 ffc6 	bl	80071e0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002254:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002258:	462a      	mov	r2, r5
 800225a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225e:	4640      	mov	r0, r8
 8002260:	f005 f97d 	bl	800755e <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002268:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800226a:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 800226c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800226e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002270:	a905      	add	r1, sp, #20
 8002272:	4640      	mov	r0, r8
 8002274:	f004 ffb4 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800227e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002280:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002282:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002284:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002286:	a905      	add	r1, sp, #20
 8002288:	4640      	mov	r0, r8
 800228a:	f004 ffa9 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 800228e:	2308      	movs	r3, #8
 8002290:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002292:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002294:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002296:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002298:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 800229a:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 800229e:	a905      	add	r1, sp, #20
 80022a0:	4640      	mov	r0, r8
 80022a2:	f004 ff9d 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 80022a6:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80022aa:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 80022ac:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80022ae:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 80022b0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 80022b2:	a905      	add	r1, sp, #20
 80022b4:	4640      	mov	r0, r8
 80022b6:	f004 ff93 	bl	80071e0 <HAL_GPIO_Init>
}
 80022ba:	b00b      	add	sp, #44	; 0x2c
 80022bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58022000 	.word	0x58022000

080022c8 <SPI_WIFI_Init>:
{
 80022c8:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 80022ca:	bb78      	cbnz	r0, 800232c <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 80022cc:	4c1a      	ldr	r4, [pc, #104]	; (8002338 <SPI_WIFI_Init+0x70>)
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <SPI_WIFI_Init+0x74>)
 80022d0:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff54 	bl	8002180 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 80022d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022dc:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 80022de:	2300      	movs	r3, #0
 80022e0:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 80022e2:	220f      	movs	r2, #15
 80022e4:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80022e6:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80022e8:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 80022ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ee:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80022f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f4:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80022f6:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 80022f8:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80022fa:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 80022fc:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022fe:	4620      	mov	r0, r4
 8002300:	f008 f984 	bl	800a60c <HAL_SPI_Init>
 8002304:	b9a8      	cbnz	r0, 8002332 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002306:	2200      	movs	r2, #0
 8002308:	4611      	mov	r1, r2
 800230a:	2017      	movs	r0, #23
 800230c:	f004 fbb0 	bl	8006a70 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002310:	2017      	movs	r0, #23
 8002312:	f004 fbe3 	bl	8006adc <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	4611      	mov	r1, r2
 800231a:	2024      	movs	r0, #36	; 0x24
 800231c:	f004 fba8 	bl	8006a70 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002320:	2024      	movs	r0, #36	; 0x24
 8002322:	f004 fbdb 	bl	8006adc <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002326:	200a      	movs	r0, #10
 8002328:	f7ff fdd0 	bl	8001ecc <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 800232c:	f7ff fe3c 	bl	8001fa8 <SPI_WIFI_ResetModule>
}
 8002330:	bd10      	pop	{r4, pc}
            return -1;
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	e7fb      	b.n	8002330 <SPI_WIFI_Init+0x68>
 8002338:	240013f8 	.word	0x240013f8
 800233c:	40003800 	.word	0x40003800

08002340 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_SPI_RxCpltCallback+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b113      	cbz	r3, 800234c <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002346:	4b02      	ldr	r3, [pc, #8]	; (8002350 <HAL_SPI_RxCpltCallback+0x10>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
    }
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	24001b30 	.word	0x24001b30

08002354 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_SPI_TxCpltCallback+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b113      	cbz	r3, 8002360 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 800235a:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_SPI_TxCpltCallback+0x10>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    }
}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	24001b34 	.word	0x24001b34

08002368 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <SPI_WIFI_ISR+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002370:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002372:	4b02      	ldr	r3, [pc, #8]	; (800237c <SPI_WIFI_ISR+0x14>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	e7fa      	b.n	8002370 <SPI_WIFI_ISR+0x8>
 800237a:	bf00      	nop
 800237c:	24001b28 	.word	0x24001b28

08002380 <wait_cmddata_rdy_high>:
{
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002384:	f004 fb48 	bl	8006a18 <HAL_GetTick>
 8002388:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 800238a:	e001      	b.n	8002390 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 800238c:	f7ff ffec 	bl	8002368 <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002390:	2120      	movs	r1, #32
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <wait_cmddata_rdy_high+0x30>)
 8002394:	f005 f8dc 	bl	8007550 <HAL_GPIO_ReadPin>
 8002398:	2801      	cmp	r0, #1
 800239a:	d007      	beq.n	80023ac <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 800239c:	f004 fb3c 	bl	8006a18 <HAL_GetTick>
 80023a0:	1b00      	subs	r0, r0, r4
 80023a2:	42a8      	cmp	r0, r5
 80023a4:	d9f2      	bls.n	800238c <wait_cmddata_rdy_high+0xc>
            return -1;
 80023a6:	f04f 30ff 	mov.w	r0, #4294967295
 80023aa:	e000      	b.n	80023ae <wait_cmddata_rdy_high+0x2e>
    return 0;
 80023ac:	2000      	movs	r0, #0
}
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	58022000 	.word	0x58022000

080023b4 <SPI_WIFI_SendData>:
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	4606      	mov	r6, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff ffde 	bl	8002380 <wait_cmddata_rdy_high>
 80023c4:	2800      	cmp	r0, #0
 80023c6:	db47      	blt.n	8002458 <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <SPI_WIFI_SendData+0xac>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d4:	4823      	ldr	r0, [pc, #140]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 80023d6:	f005 f8c2 	bl	800755e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80023da:	200a      	movs	r0, #10
 80023dc:	f7ff fd76 	bl	8001ecc <SPI_WIFI_DelayUs>
    if (len > 1)
 80023e0:	2c01      	cmp	r4, #1
 80023e2:	d805      	bhi.n	80023f0 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 80023e4:	f014 0f01 	tst.w	r4, #1
 80023e8:	d119      	bne.n	800241e <SPI_WIFI_SendData+0x6a>
    return len;
 80023ea:	b220      	sxth	r0, r4
}
 80023ec:	b002      	add	sp, #8
 80023ee:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <SPI_WIFI_SendData+0xb4>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 80023f6:	fa24 f202 	lsr.w	r2, r4, r2
 80023fa:	4631      	mov	r1, r6
 80023fc:	481b      	ldr	r0, [pc, #108]	; (800246c <SPI_WIFI_SendData+0xb8>)
 80023fe:	f008 fc7b 	bl	800acf8 <HAL_SPI_Transmit_IT>
 8002402:	b918      	cbnz	r0, 800240c <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002404:	4628      	mov	r0, r5
 8002406:	f7ff fdb9 	bl	8001f7c <wait_spi_tx_event>
 800240a:	e7eb      	b.n	80023e4 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002412:	4814      	ldr	r0, [pc, #80]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 8002414:	f005 f8a3 	bl	800755e <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	e7e6      	b.n	80023ec <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 800241e:	1930      	adds	r0, r6, r4
 8002420:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002424:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002428:	230a      	movs	r3, #10
 800242a:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 800242e:	2201      	movs	r2, #1
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <SPI_WIFI_SendData+0xb4>)
 8002432:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002434:	a901      	add	r1, sp, #4
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <SPI_WIFI_SendData+0xb8>)
 8002438:	f008 fc5e 	bl	800acf8 <HAL_SPI_Transmit_IT>
 800243c:	b918      	cbnz	r0, 8002446 <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 800243e:	4628      	mov	r0, r5
 8002440:	f7ff fd9c 	bl	8001f7c <wait_spi_tx_event>
 8002444:	e7d1      	b.n	80023ea <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002446:	2201      	movs	r2, #1
 8002448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <SPI_WIFI_SendData+0xb0>)
 800244e:	f005 f886 	bl	800755e <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	e7c9      	b.n	80023ec <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	e7c6      	b.n	80023ec <SPI_WIFI_SendData+0x38>
 800245e:	bf00      	nop
 8002460:	24001b28 	.word	0x24001b28
 8002464:	58020000 	.word	0x58020000
 8002468:	24001b34 	.word	0x24001b34
 800246c:	240013f8 	.word	0x240013f8

08002470 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002470:	b510      	push	{r4, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <wifi_probe+0x2c>)
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <wifi_probe+0x30>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <wifi_probe+0x34>)
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <wifi_probe+0x38>)
 8002482:	490a      	ldr	r1, [pc, #40]	; (80024ac <wifi_probe+0x3c>)
 8002484:	480a      	ldr	r0, [pc, #40]	; (80024b0 <wifi_probe+0x40>)
 8002486:	f001 fed3 	bl	8004230 <ES_WIFI_RegisterBusIO>
 800248a:	b918      	cbnz	r0, 8002494 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <wifi_probe+0x40>)
 800248e:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002490:	b002      	add	sp, #8
 8002492:	bd10      	pop	{r4, pc}
    return -1;
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	e7fa      	b.n	8002490 <wifi_probe+0x20>
 800249a:	bf00      	nop
 800249c:	080020a1 	.word	0x080020a1
 80024a0:	080023b5 	.word	0x080023b5
 80024a4:	08006a25 	.word	0x08006a25
 80024a8:	08002171 	.word	0x08002171
 80024ac:	080022c9 	.word	0x080022c9
 80024b0:	24001480 	.word	0x24001480

080024b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 80024b4:	2820      	cmp	r0, #32
 80024b6:	d000      	beq.n	80024ba <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 80024b8:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 80024ba:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x10>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	e7fa      	b.n	80024b8 <HAL_GPIO_EXTI_Callback+0x4>
 80024c2:	bf00      	nop
 80024c4:	24001b28 	.word	0x24001b28

080024c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c8:	b500      	push	{lr}
 80024ca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_MspInit+0x30>)
 80024ce:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 80024d2:	f042 0202 	orr.w	r2, r2, #2
 80024d6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 80024da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	210f      	movs	r1, #15
 80024ea:	f06f 0001 	mvn.w	r0, #1
 80024ee:	f004 fabf 	bl	8006a70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	b003      	add	sp, #12
 80024f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f8:	58024400 	.word	0x58024400

080024fc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_CRC_MspInit+0x2c>)
 8002500:	429a      	cmp	r2, r3
 8002502:	d000      	beq.n	8002506 <HAL_CRC_MspInit+0xa>
 8002504:	4770      	bx	lr
{
 8002506:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_CRC_MspInit+0x30>)
 800250a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002516:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800251a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002522:	b002      	add	sp, #8
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023000 	.word	0x40023000
 800252c:	58024400 	.word	0x58024400

08002530 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002530:	6802      	ldr	r2, [r0, #0]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_DMA2D_MspInit+0x40>)
 8002534:	429a      	cmp	r2, r3
 8002536:	d000      	beq.n	800253a <HAL_DMA2D_MspInit+0xa>
 8002538:	4770      	bx	lr
{
 800253a:	b500      	push	{lr}
 800253c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_DMA2D_MspInit+0x44>)
 8002540:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002544:	f042 0210 	orr.w	r2, r2, #16
 8002548:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800254c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2105      	movs	r1, #5
 800255c:	205a      	movs	r0, #90	; 0x5a
 800255e:	f004 fa87 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002562:	205a      	movs	r0, #90	; 0x5a
 8002564:	f004 faba 	bl	8006adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002568:	b003      	add	sp, #12
 800256a:	f85d fb04 	ldr.w	pc, [sp], #4
 800256e:	bf00      	nop
 8002570:	52001000 	.word	0x52001000
 8002574:	58024400 	.word	0x58024400

08002578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002578:	b510      	push	{r4, lr}
 800257a:	b0b6      	sub	sp, #216	; 0xd8
 800257c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	2100      	movs	r1, #0
 8002580:	9131      	str	r1, [sp, #196]	; 0xc4
 8002582:	9132      	str	r1, [sp, #200]	; 0xc8
 8002584:	9133      	str	r1, [sp, #204]	; 0xcc
 8002586:	9134      	str	r1, [sp, #208]	; 0xd0
 8002588:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258a:	22b8      	movs	r2, #184	; 0xb8
 800258c:	a803      	add	r0, sp, #12
 800258e:	f01a f845 	bl	801c61c <memset>
  if(hi2c->Instance==I2C4)
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_I2C_MspInit+0x8c>)
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800259a:	b036      	add	sp, #216	; 0xd8
 800259c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800259e:	2310      	movs	r3, #16
 80025a0:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	a803      	add	r0, sp, #12
 80025a4:	f007 fa56 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	bb40      	cbnz	r0, 80025fc <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025aa:	4c17      	ldr	r4, [pc, #92]	; (8002608 <HAL_I2C_MspInit+0x90>)
 80025ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80025b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80025c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025c8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d2:	2302      	movs	r3, #2
 80025d4:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80025d6:	2304      	movs	r3, #4
 80025d8:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025da:	a931      	add	r1, sp, #196	; 0xc4
 80025dc:	480b      	ldr	r0, [pc, #44]	; (800260c <HAL_I2C_MspInit+0x94>)
 80025de:	f004 fdff 	bl	80071e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025e2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80025e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ea:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 80025ee:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	9b02      	ldr	r3, [sp, #8]
}
 80025fa:	e7ce      	b.n	800259a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80025fc:	f7ff fc4e 	bl	8001e9c <Error_Handler>
 8002600:	e7d3      	b.n	80025aa <HAL_I2C_MspInit+0x32>
 8002602:	bf00      	nop
 8002604:	58001c00 	.word	0x58001c00
 8002608:	58024400 	.word	0x58024400
 800260c:	58020c00 	.word	0x58020c00

08002610 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_I2C_MspDeInit+0x34>)
 8002614:	429a      	cmp	r2, r3
 8002616:	d000      	beq.n	800261a <HAL_I2C_MspDeInit+0xa>
 8002618:	4770      	bx	lr
{
 800261a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_I2C_MspDeInit+0x38>)
 800261e:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002626:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800262a:	4c08      	ldr	r4, [pc, #32]	; (800264c <HAL_I2C_MspDeInit+0x3c>)
 800262c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002630:	4620      	mov	r0, r4
 8002632:	f004 fee5 	bl	8007400 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263a:	4620      	mov	r0, r4
 800263c:	f004 fee0 	bl	8007400 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002640:	bd10      	pop	{r4, pc}
 8002642:	bf00      	nop
 8002644:	58001c00 	.word	0x58001c00
 8002648:	58024400 	.word	0x58024400
 800264c:	58020c00 	.word	0x58020c00

08002650 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	b0b8      	sub	sp, #224	; 0xe0
 8002654:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	2100      	movs	r1, #0
 8002658:	9133      	str	r1, [sp, #204]	; 0xcc
 800265a:	9134      	str	r1, [sp, #208]	; 0xd0
 800265c:	9135      	str	r1, [sp, #212]	; 0xd4
 800265e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002660:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002662:	22b8      	movs	r2, #184	; 0xb8
 8002664:	a805      	add	r0, sp, #20
 8002666:	f019 ffd9 	bl	801c61c <memset>
  if(hltdc->Instance==LTDC)
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_LTDC_MspInit+0x114>)
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002672:	b038      	add	sp, #224	; 0xe0
 8002674:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002676:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800267a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800267c:	2318      	movs	r3, #24
 800267e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002680:	23c9      	movs	r3, #201	; 0xc9
 8002682:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002684:	2302      	movs	r3, #2
 8002686:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002688:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 800268a:	2315      	movs	r3, #21
 800268c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800268e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002692:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002694:	f241 5356 	movw	r3, #5462	; 0x1556
 8002698:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269a:	a805      	add	r0, sp, #20
 800269c:	f007 f9da 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d15c      	bne.n	800275e <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_LTDC_MspInit+0x118>)
 80026a6:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80026b2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80026b6:	f002 0208 	and.w	r2, r2, #8
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80026be:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026d6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80026ea:	9203      	str	r2, [sp, #12]
 80026ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80026f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80026fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	9304      	str	r3, [sp, #16]
 8002704:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2602      	movs	r6, #2
 800270c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2400      	movs	r4, #0
 8002710:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002714:	250e      	movs	r5, #14
 8002716:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002718:	a933      	add	r1, sp, #204	; 0xcc
 800271a:	4814      	ldr	r0, [pc, #80]	; (800276c <HAL_LTDC_MspInit+0x11c>)
 800271c:	f004 fd60 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8002720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002724:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272c:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800272e:	a933      	add	r1, sp, #204	; 0xcc
 8002730:	480f      	ldr	r0, [pc, #60]	; (8002770 <HAL_LTDC_MspInit+0x120>)
 8002732:	f004 fd55 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8002736:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800273a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002742:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002744:	a933      	add	r1, sp, #204	; 0xcc
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <HAL_LTDC_MspInit+0x124>)
 8002748:	f004 fd4a 	bl	80071e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800274c:	4622      	mov	r2, r4
 800274e:	2105      	movs	r1, #5
 8002750:	2058      	movs	r0, #88	; 0x58
 8002752:	f004 f98d 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002756:	2058      	movs	r0, #88	; 0x58
 8002758:	f004 f9c0 	bl	8006adc <HAL_NVIC_EnableIRQ>
}
 800275c:	e789      	b.n	8002672 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800275e:	f7ff fb9d 	bl	8001e9c <Error_Handler>
 8002762:	e79f      	b.n	80026a4 <HAL_LTDC_MspInit+0x54>
 8002764:	50001000 	.word	0x50001000
 8002768:	58024400 	.word	0x58024400
 800276c:	58022800 	.word	0x58022800
 8002770:	58022400 	.word	0x58022400
 8002774:	58022000 	.word	0x58022000

08002778 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002778:	b510      	push	{r4, lr}
 800277a:	b0b0      	sub	sp, #192	; 0xc0
 800277c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277e:	22b8      	movs	r2, #184	; 0xb8
 8002780:	2100      	movs	r1, #0
 8002782:	a802      	add	r0, sp, #8
 8002784:	f019 ff4a 	bl	801c61c <memset>
  if(hospi->Instance==OCTOSPI1)
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_OSPI_MspInit+0x8c>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002790:	b030      	add	sp, #192	; 0xc0
 8002792:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002798:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800279a:	2318      	movs	r3, #24
 800279c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800279e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80027a2:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80027a4:	2302      	movs	r3, #2
 80027a6:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80027a8:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027aa:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80027ac:	2320      	movs	r3, #32
 80027ae:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80027b0:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b2:	a802      	add	r0, sp, #8
 80027b4:	f007 f94e 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 80027b8:	bb08      	cbnz	r0, 80027fe <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_OSPI_MspInit+0x90>)
 80027bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027c4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80027c8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80027d4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80027d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027dc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80027e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80027e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2105      	movs	r1, #5
 80027f0:	205c      	movs	r0, #92	; 0x5c
 80027f2:	f004 f93d 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80027f6:	205c      	movs	r0, #92	; 0x5c
 80027f8:	f004 f970 	bl	8006adc <HAL_NVIC_EnableIRQ>
}
 80027fc:	e7c8      	b.n	8002790 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80027fe:	f7ff fb4d 	bl	8001e9c <Error_Handler>
 8002802:	e7da      	b.n	80027ba <HAL_OSPI_MspInit+0x42>
 8002804:	52005000 	.word	0x52005000
 8002808:	58024400 	.word	0x58024400

0800280c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800280c:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 800280e:	6802      	ldr	r2, [r0, #0]
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_OSPI_MspDeInit+0x30>)
 8002812:	429a      	cmp	r2, r3
 8002814:	d000      	beq.n	8002818 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002816:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_OSPI_MspDeInit+0x34>)
 800281a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800281e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002822:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002826:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800282a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800282e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8002832:	205c      	movs	r0, #92	; 0x5c
 8002834:	f004 f960 	bl	8006af8 <HAL_NVIC_DisableIRQ>
}
 8002838:	e7ed      	b.n	8002816 <HAL_OSPI_MspDeInit+0xa>
 800283a:	bf00      	nop
 800283c:	52005000 	.word	0x52005000
 8002840:	58024400 	.word	0x58024400

08002844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	b0b6      	sub	sp, #216	; 0xd8
 8002848:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284a:	2100      	movs	r1, #0
 800284c:	9131      	str	r1, [sp, #196]	; 0xc4
 800284e:	9132      	str	r1, [sp, #200]	; 0xc8
 8002850:	9133      	str	r1, [sp, #204]	; 0xcc
 8002852:	9134      	str	r1, [sp, #208]	; 0xd0
 8002854:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002856:	22b8      	movs	r2, #184	; 0xb8
 8002858:	a803      	add	r0, sp, #12
 800285a:	f019 fedf 	bl	801c61c <memset>
  if(hspi->Instance==SPI2)
 800285e:	6822      	ldr	r2, [r4, #0]
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_SPI_MspInit+0xc8>)
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002866:	b036      	add	sp, #216	; 0xd8
 8002868:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800286a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002870:	a803      	add	r0, sp, #12
 8002872:	f007 f8ef 	bl	8009a54 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	2800      	cmp	r0, #0
 8002878:	d145      	bne.n	8002906 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_SPI_MspInit+0xcc>)
 800287c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002884:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002888:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800288c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002890:	9200      	str	r2, [sp, #0]
 8002892:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80028a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80028a4:	f002 0201 	and.w	r2, r2, #1
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80028b0:	f042 0204 	orr.w	r2, r2, #4
 80028b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80028b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	9302      	str	r3, [sp, #8]
 80028c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2602      	movs	r6, #2
 80028cc:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2400      	movs	r4, #0
 80028d0:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028d4:	2505      	movs	r5, #5
 80028d6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d8:	a931      	add	r1, sp, #196	; 0xc4
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <HAL_SPI_MspInit+0xd0>)
 80028dc:	f004 fc80 	bl	80071e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028e0:	230c      	movs	r3, #12
 80028e2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ea:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	a931      	add	r1, sp, #196	; 0xc4
 80028ee:	480a      	ldr	r0, [pc, #40]	; (8002918 <HAL_SPI_MspInit+0xd4>)
 80028f0:	f004 fc76 	bl	80071e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80028f4:	4622      	mov	r2, r4
 80028f6:	4621      	mov	r1, r4
 80028f8:	2024      	movs	r0, #36	; 0x24
 80028fa:	f004 f8b9 	bl	8006a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80028fe:	2024      	movs	r0, #36	; 0x24
 8002900:	f004 f8ec 	bl	8006adc <HAL_NVIC_EnableIRQ>
}
 8002904:	e7af      	b.n	8002866 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8002906:	f7ff fac9 	bl	8001e9c <Error_Handler>
 800290a:	e7b6      	b.n	800287a <HAL_SPI_MspInit+0x36>
 800290c:	40003800 	.word	0x40003800
 8002910:	58024400 	.word	0x58024400
 8002914:	58020000 	.word	0x58020000
 8002918:	58020800 	.word	0x58020800

0800291c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 800291e:	6802      	ldr	r2, [r0, #0]
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_SPI_MspDeInit+0x34>)
 8002922:	429a      	cmp	r2, r3
 8002924:	d000      	beq.n	8002928 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002926:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_SPI_MspDeInit+0x38>)
 800292a:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <HAL_SPI_MspDeInit+0x3c>)
 800293c:	f004 fd60 	bl	8007400 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8002940:	210c      	movs	r1, #12
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <HAL_SPI_MspDeInit+0x40>)
 8002944:	f004 fd5c 	bl	8007400 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8002948:	2024      	movs	r0, #36	; 0x24
 800294a:	f004 f8d5 	bl	8006af8 <HAL_NVIC_DisableIRQ>
}
 800294e:	e7ea      	b.n	8002926 <HAL_SPI_MspDeInit+0xa>
 8002950:	40003800 	.word	0x40003800
 8002954:	58024400 	.word	0x58024400
 8002958:	58020000 	.word	0x58020000
 800295c:	58020800 	.word	0x58020800

08002960 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	280f      	cmp	r0, #15
 8002962:	d901      	bls.n	8002968 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002966:	4770      	bx	lr
{
 8002968:	b510      	push	{r4, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800296e:	2200      	movs	r2, #0
 8002970:	4601      	mov	r1, r0
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f004 f87c 	bl	8006a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002978:	2036      	movs	r0, #54	; 0x36
 800297a:	f004 f8af 	bl	8006adc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_InitTick+0x88>)
 8002980:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_InitTick+0x8c>)
 8002984:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002988:	f042 0210 	orr.w	r2, r2, #16
 800298c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002990:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299c:	a901      	add	r1, sp, #4
 800299e:	a802      	add	r0, sp, #8
 80029a0:	f006 ff22 	bl	80097e8 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029a4:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029a6:	b9bb      	cbnz	r3, 80029d8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029a8:	f006 fefa 	bl	80097a0 <HAL_RCC_GetPCLK1Freq>
 80029ac:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ae:	4810      	ldr	r0, [pc, #64]	; (80029f0 <HAL_InitTick+0x90>)
 80029b0:	fba0 2303 	umull	r2, r3, r0, r3
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <HAL_InitTick+0x94>)
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_InitTick+0x98>)
 80029bc:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029c4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029cc:	f008 fe70 	bl	800b6b0 <HAL_TIM_Base_Init>
 80029d0:	b130      	cbz	r0, 80029e0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
}
 80029d4:	b00a      	add	sp, #40	; 0x28
 80029d6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029d8:	f006 fee2 	bl	80097a0 <HAL_RCC_GetPCLK1Freq>
 80029dc:	0043      	lsls	r3, r0, #1
 80029de:	e7e6      	b.n	80029ae <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <HAL_InitTick+0x94>)
 80029e2:	f008 fcc9 	bl	800b378 <HAL_TIM_Base_Start_IT>
 80029e6:	e7f5      	b.n	80029d4 <HAL_InitTick+0x74>
 80029e8:	2400004c 	.word	0x2400004c
 80029ec:	58024400 	.word	0x58024400
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	24001b38 	.word	0x24001b38
 80029f8:	40001000 	.word	0x40001000

080029fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	4770      	bx	lr

080029fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler>

08002a00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler>

08002a02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler>

08002a04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler>

08002a06 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a06:	4770      	bx	lr

08002a08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 8002a0a:	2020      	movs	r0, #32
 8002a0c:	f004 fdb6 	bl	800757c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a10:	bd08      	pop	{r3, pc}
	...

08002a14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002a16:	4802      	ldr	r0, [pc, #8]	; (8002a20 <SPI2_IRQHandler+0xc>)
 8002a18:	f008 fb80 	bl	800b11c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002a1c:	bd08      	pop	{r3, pc}
 8002a1e:	bf00      	nop
 8002a20:	240013f8 	.word	0x240013f8

08002a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 8002a26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a2a:	f004 fda7 	bl	800757c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a2e:	bd08      	pop	{r3, pc}

08002a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a32:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM6_DAC_IRQHandler+0xc>)
 8002a34:	f008 fcec 	bl	800b410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a38:	bd08      	pop	{r3, pc}
 8002a3a:	bf00      	nop
 8002a3c:	24001b38 	.word	0x24001b38

08002a40 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a42:	4802      	ldr	r0, [pc, #8]	; (8002a4c <LTDC_IRQHandler+0xc>)
 8002a44:	f005 fb46 	bl	80080d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a48:	bd08      	pop	{r3, pc}
 8002a4a:	bf00      	nop
 8002a4c:	240012f4 	.word	0x240012f4

08002a50 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a52:	4802      	ldr	r0, [pc, #8]	; (8002a5c <DMA2D_IRQHandler+0xc>)
 8002a54:	f004 faa4 	bl	8006fa0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002a58:	bd08      	pop	{r3, pc}
 8002a5a:	bf00      	nop
 8002a5c:	24001240 	.word	0x24001240

08002a60 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002a62:	4802      	ldr	r0, [pc, #8]	; (8002a6c <OCTOSPI1_IRQHandler+0xc>)
 8002a64:	f005 ff40 	bl	80088e8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8002a68:	bd08      	pop	{r3, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2400139c 	.word	0x2400139c

08002a70 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002a70:	2001      	movs	r0, #1
 8002a72:	4770      	bx	lr

08002a74 <_kill>:

int _kill(int pid, int sig)
{
 8002a74:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002a76:	f019 fc6d 	bl	801c354 <__errno>
 8002a7a:	2316      	movs	r3, #22
 8002a7c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	bd08      	pop	{r3, pc}

08002a84 <_exit>:

void _exit (int status)
{
 8002a84:	b508      	push	{r3, lr}
	_kill(status, -1);
 8002a86:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8a:	f7ff fff3 	bl	8002a74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a8e:	e7fe      	b.n	8002a8e <_exit+0xa>

08002a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	2500      	movs	r5, #0
 8002a98:	e006      	b.n	8002aa8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8002a9a:	f3af 8000 	nop.w
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8002aa6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	42b5      	cmp	r5, r6
 8002aaa:	dbf6      	blt.n	8002a9a <_read+0xa>
	}

return len;
}
 8002aac:	4630      	mov	r0, r6
 8002aae:	bd70      	pop	{r4, r5, r6, pc}

08002ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e004      	b.n	8002ac4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8002aba:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002abe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	42b5      	cmp	r5, r6
 8002ac6:	dbf8      	blt.n	8002aba <_write+0xa>
	}
	return len;
}
 8002ac8:	4630      	mov	r0, r6
 8002aca:	bd70      	pop	{r4, r5, r6, pc}

08002acc <_close>:

int _close(int file)
{
	return -1;
}
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4770      	bx	lr

08002adc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002adc:	2001      	movs	r0, #1
 8002ade:	4770      	bx	lr

08002ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4770      	bx	lr

08002ae4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ae4:	b508      	push	{r3, lr}
 8002ae6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <_sbrk+0x34>)
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	b142      	cbz	r2, 8002b00 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <_sbrk+0x34>)
 8002af0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002af2:	4403      	add	r3, r0
 8002af4:	466a      	mov	r2, sp
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d806      	bhi.n	8002b08 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <_sbrk+0x34>)
 8002afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002afe:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <_sbrk+0x34>)
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <_sbrk+0x38>)
 8002b04:	6011      	str	r1, [r2, #0]
 8002b06:	e7f2      	b.n	8002aee <_sbrk+0xa>
		errno = ENOMEM;
 8002b08:	f019 fc24 	bl	801c354 <__errno>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	e7f3      	b.n	8002afe <_sbrk+0x1a>
 8002b16:	bf00      	nop
 8002b18:	24001b84 	.word	0x24001b84
 8002b1c:	2400bc08 	.word	0x2400bc08

08002b20 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 8002b20:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <wifi_networkInit+0x44>)
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <wifi_networkInit+0x48>)
 8002b26:	6819      	ldr	r1, [r3, #0]
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b2a:	f00b faa3 	bl	800e074 <net_if_init>
 8002b2e:	b998      	cbnz	r0, 8002b58 <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8002b30:	4c0e      	ldr	r4, [pc, #56]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b36:	2101      	movs	r1, #1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f00b fa74 	bl	800e026 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f00b faad 	bl	800e09e <net_if_start>
 8002b44:	4604      	mov	r4, r0
 8002b46:	b950      	cbnz	r0, 8002b5e <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 8002b48:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b4c:	2103      	movs	r1, #3
 8002b4e:	4807      	ldr	r0, [pc, #28]	; (8002b6c <wifi_networkInit+0x4c>)
 8002b50:	f00b fa69 	bl	800e026 <net_if_wait_state>

  return 0;
}
 8002b54:	4620      	mov	r0, r4
 8002b56:	bd10      	pop	{r4, pc}
    return -1;
 8002b58:	f04f 34ff 	mov.w	r4, #4294967295
 8002b5c:	e7fa      	b.n	8002b54 <wifi_networkInit+0x34>
    return -1;
 8002b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b62:	e7f7      	b.n	8002b54 <wifi_networkInit+0x34>
 8002b64:	24001d90 	.word	0x24001d90
 8002b68:	2400000c 	.word	0x2400000c
 8002b6c:	24001d98 	.word	0x24001d98

08002b70 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8002b70:	b508      	push	{r3, lr}
    wifi_networkInit();
 8002b72:	f7ff ffd5 	bl	8002b20 <wifi_networkInit>
}
 8002b76:	bd08      	pop	{r3, pc}

08002b78 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <wifi_scan+0x28>)
 8002b82:	f00b f9e3 	bl	800df4c <net_wifi_scan>
  if (ret == NET_OK)
 8002b86:	4605      	mov	r5, r0
 8002b88:	b108      	cbz	r0, 8002b8e <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002b8e:	220a      	movs	r2, #10
 8002b90:	4621      	mov	r1, r4
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <wifi_scan+0x28>)
 8002b94:	f00b f9f4 	bl	800df80 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	dcf6      	bgt.n	8002b8a <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002b9c:	4605      	mov	r5, r0
  return ret;
 8002b9e:	e7f4      	b.n	8002b8a <wifi_scan+0x12>
 8002ba0:	24001d98 	.word	0x24001d98

08002ba4 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8002ba4:	b500      	push	{lr}
 8002ba6:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 8002ba8:	9001      	str	r0, [sp, #4]
 8002baa:	9102      	str	r1, [sp, #8]
 8002bac:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 8002bae:	a901      	add	r1, sp, #4
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <wifi_connect+0x5c>)
 8002bb2:	f00b f9fb 	bl	800dfac <net_wifi_set_credentials>
 8002bb6:	b9e8      	cbnz	r0, 8002bf4 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <wifi_connect+0x5c>)
 8002bba:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00b      	beq.n	8002bda <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <wifi_connect+0x5c>)
 8002bc4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d00b      	beq.n	8002be4 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <wifi_connect+0x5c>)
 8002bce:	f00b fa6b 	bl	800e0a8 <net_if_connect>
 8002bd2:	b990      	cbnz	r0, 8002bfa <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <wifi_connect+0x5c>)
 8002bdc:	2205      	movs	r2, #5
 8002bde:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8002be2:	e7ee      	b.n	8002bc2 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 8002be4:	4806      	ldr	r0, [pc, #24]	; (8002c00 <wifi_connect+0x5c>)
 8002be6:	f00b fa64 	bl	800e0b2 <net_if_disconnect>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d0ee      	beq.n	8002bcc <wifi_connect+0x28>
      return  -1;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	e7ef      	b.n	8002bd4 <wifi_connect+0x30>
    return -1;
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	e7ec      	b.n	8002bd4 <wifi_connect+0x30>
    return -1;
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	e7e9      	b.n	8002bd4 <wifi_connect+0x30>
 8002c00:	24001d98 	.word	0x24001d98

08002c04 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 8002c04:	b500      	push	{lr}
 8002c06:	b083      	sub	sp, #12
 8002c08:	e015      	b.n	8002c36 <esWiFi_Task+0x32>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 8002c0a:	4c23      	ldr	r4, [pc, #140]	; (8002c98 <esWiFi_Task+0x94>)
 8002c0c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002c10:	2100      	movs	r1, #0
 8002c12:	4620      	mov	r0, r4
 8002c14:	f019 fd02 	bl	801c61c <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff ffad 	bl	8002b78 <wifi_scan>
 8002c1e:	b950      	cbnz	r0, 8002c36 <esWiFi_Task+0x32>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8002c26:	2300      	movs	r3, #0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f10d 0106 	add.w	r1, sp, #6
 8002c2e:	481b      	ldr	r0, [pc, #108]	; (8002c9c <esWiFi_Task+0x98>)
 8002c30:	6800      	ldr	r0, [r0, #0]
 8002c32:	f008 ff14 	bl	800ba5e <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f10d 0107 	add.w	r1, sp, #7
 8002c40:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <esWiFi_Task+0x9c>)
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	f008 ff4b 	bl	800bade <osMessageQueueGet>
        switch(msg)
 8002c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0dc      	beq.n	8002c0a <esWiFi_Task+0x6>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d1f0      	bne.n	8002c36 <esWiFi_Task+0x32>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <esWiFi_Task+0xa0>)
 8002c56:	f00b f8b7 	bl	800ddc8 <net_wifi_string_to_security>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4912      	ldr	r1, [pc, #72]	; (8002ca8 <esWiFi_Task+0xa4>)
 8002c5e:	4813      	ldr	r0, [pc, #76]	; (8002cac <esWiFi_Task+0xa8>)
 8002c60:	f7ff ffa0 	bl	8002ba4 <wifi_connect>
 8002c64:	b158      	cbz	r0, 8002c7e <esWiFi_Task+0x7a>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8002c66:	2304      	movs	r3, #4
 8002c68:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f10d 0106 	add.w	r1, sp, #6
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <esWiFi_Task+0x98>)
 8002c76:	6800      	ldr	r0, [r0, #0]
 8002c78:	f008 fef1 	bl	800ba5e <osMessageQueuePut>
 8002c7c:	e7db      	b.n	8002c36 <esWiFi_Task+0x32>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8002c84:	2300      	movs	r3, #0
 8002c86:	461a      	mov	r2, r3
 8002c88:	f10d 0106 	add.w	r1, sp, #6
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <esWiFi_Task+0x98>)
 8002c8e:	6800      	ldr	r0, [r0, #0]
 8002c90:	f008 fee5 	bl	800ba5e <osMessageQueuePut>
 8002c94:	e7cf      	b.n	8002c36 <esWiFi_Task+0x32>
 8002c96:	bf00      	nop
 8002c98:	24001b88 	.word	0x24001b88
 8002c9c:	2400120c 	.word	0x2400120c
 8002ca0:	24001214 	.word	0x24001214
 8002ca4:	24001f30 	.word	0x24001f30
 8002ca8:	24001f50 	.word	0x24001f50
 8002cac:	24001f90 	.word	0x24001f90

08002cb0 <_ZN23ApplicationFontProviderD1Ev>:
 8002cb0:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <_ZN23ApplicationFontProviderD1Ev+0xc>)
 8002cb2:	6002      	str	r2, [r0, #0]
 8002cb4:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 8002cb6:	6002      	str	r2, [r0, #0]
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	0801e398 	.word	0x0801e398
 8002cc0:	0801dff4 	.word	0x0801dff4

08002cc4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002cc4:	b508      	push	{r3, lr}
    switch (typography)
 8002cc6:	2901      	cmp	r1, #1
 8002cc8:	d008      	beq.n	8002cdc <_ZN23ApplicationFontProvider7getFontEt+0x18>
 8002cca:	2902      	cmp	r1, #2
 8002ccc:	d00a      	beq.n	8002ce4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8002cce:	b109      	cbz	r1, 8002cd4 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 8002cd0:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002cd2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002cd4:	f000 fbd6 	bl	8003484 <_ZN17TypedTextDatabase8getFontsEv>
 8002cd8:	6800      	ldr	r0, [r0, #0]
 8002cda:	e7fa      	b.n	8002cd2 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002cdc:	f000 fbd2 	bl	8003484 <_ZN17TypedTextDatabase8getFontsEv>
 8002ce0:	6840      	ldr	r0, [r0, #4]
 8002ce2:	e7f6      	b.n	8002cd2 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002ce4:	f000 fbce 	bl	8003484 <_ZN17TypedTextDatabase8getFontsEv>
 8002ce8:	6880      	ldr	r0, [r0, #8]
 8002cea:	e7f2      	b.n	8002cd2 <_ZN23ApplicationFontProvider7getFontEt+0xe>

08002cec <_ZN23ApplicationFontProviderD0Ev>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8002cf2:	6003      	str	r3, [r0, #0]
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 8002cf6:	6003      	str	r3, [r0, #0]
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	f019 faca 	bl	801c292 <_ZdlPvj>
 8002cfe:	4620      	mov	r0, r4
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	bf00      	nop
 8002d04:	0801e398 	.word	0x0801e398
 8002d08:	0801dff4 	.word	0x0801dff4

08002d0c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002d0c:	4800      	ldr	r0, [pc, #0]	; (8002d10 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002d0e:	4770      	bx	lr
 8002d10:	0801e3a4 	.word	0x0801e3a4

08002d14 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002d14:	2001      	movs	r0, #1
 8002d16:	4770      	bx	lr

08002d18 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8002d18:	b169      	cbz	r1, 8002d36 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002d1a:	b510      	push	{r4, lr}
 8002d1c:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002d22:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002d26:	6803      	ldr	r3, [r0, #0]
 8002d28:	689c      	ldr	r4, [r3, #8]
 8002d2a:	f10d 0303 	add.w	r3, sp, #3
 8002d2e:	aa01      	add	r2, sp, #4
 8002d30:	47a0      	blx	r4
        return glyph;
    }
 8002d32:	b002      	add	sp, #8
 8002d34:	bd10      	pop	{r4, pc}
            return 0;
 8002d36:	2000      	movs	r0, #0
    }
 8002d38:	4770      	bx	lr

08002d3a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002d3a:	8940      	ldrh	r0, [r0, #10]
 8002d3c:	4770      	bx	lr

08002d3e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002d3e:	8980      	ldrh	r0, [r0, #12]
 8002d40:	4770      	bx	lr

08002d42 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002d42:	8880      	ldrh	r0, [r0, #4]
 8002d44:	4770      	bx	lr

08002d46 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002d46:	8883      	ldrh	r3, [r0, #4]
 8002d48:	7980      	ldrb	r0, [r0, #6]
 8002d4a:	4418      	add	r0, r3
    }
 8002d4c:	b280      	uxth	r0, r0
 8002d4e:	4770      	bx	lr

08002d50 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002d50:	79c0      	ldrb	r0, [r0, #7]
    }
 8002d52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002d56:	4770      	bx	lr

08002d58 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002d58:	79c0      	ldrb	r0, [r0, #7]
    }
 8002d5a:	09c0      	lsrs	r0, r0, #7
 8002d5c:	4770      	bx	lr
	...

08002d60 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8002d62:	6003      	str	r3, [r0, #0]
    }
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	0801e6ec 	.word	0x0801e6ec

08002d6c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8002d6c:	4770      	bx	lr

08002d6e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002d6e:	4770      	bx	lr

08002d70 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002d70:	4770      	bx	lr

08002d72 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002d72:	6041      	str	r1, [r0, #4]
    }
 8002d74:	4770      	bx	lr

08002d76 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002d76:	2301      	movs	r3, #1
 8002d78:	7203      	strb	r3, [r0, #8]
    }
 8002d7a:	4770      	bx	lr

08002d7c <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002d7c:	4a02      	ldr	r2, [pc, #8]	; (8002d88 <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8002d7e:	6002      	str	r2, [r0, #0]
    {
 8002d80:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 8002d82:	6002      	str	r2, [r0, #0]
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	0801e710 	.word	0x0801e710
 8002d8c:	0801e6ec 	.word	0x0801e6ec

08002d90 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8002d96:	6003      	str	r3, [r0, #0]
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8002d9a:	6003      	str	r3, [r0, #0]
 8002d9c:	210c      	movs	r1, #12
 8002d9e:	f019 fa78 	bl	801c292 <_ZdlPvj>
 8002da2:	4620      	mov	r0, r4
 8002da4:	bd10      	pop	{r4, pc}
 8002da6:	bf00      	nop
 8002da8:	0801e710 	.word	0x0801e710
 8002dac:	0801e6ec 	.word	0x0801e6ec

08002db0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
    {
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8002db6:	6003      	str	r3, [r0, #0]
    }
 8002db8:	210c      	movs	r1, #12
 8002dba:	f019 fa6a 	bl	801c292 <_ZdlPvj>
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0801e6ec 	.word	0x0801e6ec

08002dc8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002dc8:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002dca:	f00e fd3d 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 8002dce:	f00f f8e1 	bl	8011f94 <_ZN8touchgfx11Application10invalidateEv>
    }
 8002dd2:	bd08      	pop	{r3, pc}

08002dd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002ddc:	f00e fd56 	bl	801188c <_ZN8touchgfx11ApplicationC1Ev>
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8002dea:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 8002df0:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8002df4:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8002df8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8002dfe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002e02:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 8002e06:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002e0a:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002e0e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 8002e12:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 8002e16:	4d0d      	ldr	r5, [pc, #52]	; (8002e4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8002e18:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002e26:	b10a      	cbz	r2, 8002e2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 8002e28:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e2a:	b900      	cbnz	r0, 8002e2e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 8002e2c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002e2e:	f014 fc0c 	bl	801764a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002e32:	4620      	mov	r0, r4
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	bf00      	nop
 8002e38:	0801e058 	.word	0x0801e058
 8002e3c:	2400b9cc 	.word	0x2400b9cc
 8002e40:	0801e0bc 	.word	0x0801e0bc
 8002e44:	0801e040 	.word	0x0801e040
 8002e48:	0801e0a4 	.word	0x0801e0a4
 8002e4c:	2400b980 	.word	0x2400b980

08002e50 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002e50:	b410      	push	{r4}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8002e58:	9206      	str	r2, [sp, #24]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	9207      	str	r2, [sp, #28]
 8002e5e:	46ec      	mov	ip, sp
 8002e60:	aa08      	add	r2, sp, #32
 8002e62:	e912 0003 	ldmdb	r2, {r0, r1}
 8002e66:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8002e6c:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8002e70:	9202      	str	r2, [sp, #8]
 8002e72:	9303      	str	r3, [sp, #12]
 8002e74:	aa04      	add	r2, sp, #16
 8002e76:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e7a:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8002e7e:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8002e82:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8002e86:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8002e88:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002e8c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8002e90:	b009      	add	sp, #36	; 0x24
 8002e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	08002ff5 	.word	0x08002ff5
 8002e9c:	0801e040 	.word	0x0801e040
 8002ea0:	0801e0a4 	.word	0x0801e0a4

08002ea4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8002ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	4688      	mov	r8, r1
 8002eac:	4615      	mov	r5, r2
 8002eae:	4699      	mov	r9, r3
 8002eb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002eb4:	6890      	ldr	r0, [r2, #8]
 8002eb6:	6803      	ldr	r3, [r0, #0]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4798      	blx	r3
 8002ebc:	2897      	cmp	r0, #151	; 0x97
 8002ebe:	d976      	bls.n	8002fae <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002ec0:	6868      	ldr	r0, [r5, #4]
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4798      	blx	r3
 8002ec8:	280f      	cmp	r0, #15
 8002eca:	d976      	bls.n	8002fba <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002ecc:	68e8      	ldr	r0, [r5, #12]
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4798      	blx	r3
 8002ed4:	280b      	cmp	r0, #11
 8002ed6:	d976      	bls.n	8002fc6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 8002ed8:	f00e fcb6 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 8002edc:	f00e fcba 	bl	8011854 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002ee0:	f8d9 0000 	ldr.w	r0, [r9]
 8002ee4:	b110      	cbz	r0, 8002eec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 8002ee6:	6803      	ldr	r3, [r0, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4798      	blx	r3
    if (*currentTrans)
 8002eec:	f8d9 0000 	ldr.w	r0, [r9]
 8002ef0:	b110      	cbz	r0, 8002ef8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4798      	blx	r3
    if (*currentScreen)
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	b110      	cbz	r0, 8002f02 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4798      	blx	r3
    if (*currentPresenter)
 8002f02:	f8d8 0000 	ldr.w	r0, [r8]
 8002f06:	b110      	cbz	r0, 8002f0e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4798      	blx	r3
    if (*currentScreen)
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	b110      	cbz	r0, 8002f18 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4798      	blx	r3
    if (*currentPresenter)
 8002f18:	f8d8 0000 	ldr.w	r0, [r8]
 8002f1c:	b110      	cbz	r0, 8002f24 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 8002f1e:	6803      	ldr	r3, [r0, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002f24:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002f26:	6803      	ldr	r3, [r0, #0]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4798      	blx	r3
 8002f2e:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002f30:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002f32:	6003      	str	r3, [r0, #0]
 8002f34:	f04f 0b00 	mov.w	fp, #0
 8002f38:	f8c0 b004 	str.w	fp, [r0, #4]
 8002f3c:	f880 b008 	strb.w	fp, [r0, #8]
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002f42:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002f44:	68a8      	ldr	r0, [r5, #8]
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	4659      	mov	r1, fp
 8002f4c:	4798      	blx	r3
 8002f4e:	4606      	mov	r6, r0
 8002f50:	f000 fd08 	bl	8003964 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002f54:	6868      	ldr	r0, [r5, #4]
 8002f56:	6803      	ldr	r3, [r0, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	4798      	blx	r3
 8002f5e:	4605      	mov	r5, r0
 8002f60:	4631      	mov	r1, r6
 8002f62:	f000 fc87 	bl	8003874 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8002f66:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002f6a:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8002f6e:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	d02e      	beq.n	8002fd2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8002f74:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002f76:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002f7a:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002f7e:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8002f80:	6833      	ldr	r3, [r6, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4630      	mov	r0, r6
 8002f86:	4798      	blx	r3
    newPresenter->activate();
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002f90:	4621      	mov	r1, r4
 8002f92:	4630      	mov	r0, r6
 8002f94:	f010 f83e 	bl	8013014 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4798      	blx	r3
    newTransition->invalidate();
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002fa8:	4628      	mov	r0, r5
 8002faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fb2:	21a3      	movs	r1, #163	; 0xa3
 8002fb4:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fb6:	f019 f99b 	bl	801c2f0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8002fbc:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fbe:	21a4      	movs	r1, #164	; 0xa4
 8002fc0:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fc2:	f019 f995 	bl	801c2f0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8002fca:	21a5      	movs	r1, #165	; 0xa5
 8002fcc:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002fce:	f019 f98f 	bl	801c2f0 <__assert_func>
    model->bind(newPresenter);
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	e7cf      	b.n	8002f76 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 8002fd6:	bf00      	nop
 8002fd8:	0801e6ec 	.word	0x0801e6ec
 8002fdc:	0801e710 	.word	0x0801e710
 8002fe0:	0801e3b8 	.word	0x0801e3b8
 8002fe4:	0801e448 	.word	0x0801e448
 8002fe8:	0801e554 	.word	0x0801e554
 8002fec:	0801e59c 	.word	0x0801e59c
 8002ff0:	0801e640 	.word	0x0801e640

08002ff4 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 8002ff4:	b500      	push	{lr}
 8002ff6:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002ff8:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003000:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003004:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 800300a:	f7ff ff4b 	bl	8002ea4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800300e:	b003      	add	sp, #12
 8003010:	f85d fb04 	ldr.w	pc, [sp], #4
 8003014:	2400b9c0 	.word	0x2400b9c0
 8003018:	2400b9bc 	.word	0x2400b9bc

0800301c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800301c:	6a00      	ldr	r0, [r0, #32]
 800301e:	4770      	bx	lr

08003020 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003020:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003022:	4770      	bx	lr

08003024 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003024:	4a03      	ldr	r2, [pc, #12]	; (8003034 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003026:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003028:	4a03      	ldr	r2, [pc, #12]	; (8003038 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800302a:	6002      	str	r2, [r0, #0]
    {
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 800302e:	6002      	str	r2, [r0, #0]
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	0801e734 	.word	0x0801e734
 8003038:	0801f2c0 	.word	0x0801f2c0
 800303c:	0801e974 	.word	0x0801e974

08003040 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003040:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003042:	888b      	ldrh	r3, [r1, #4]
 8003044:	0adb      	lsrs	r3, r3, #11
 8003046:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800304a:	680b      	ldr	r3, [r1, #0]
}
 800304c:	4418      	add	r0, r3
 800304e:	4770      	bx	lr

08003050 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003050:	4694      	mov	ip, r2
 8003052:	b1da      	cbz	r2, 800308c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003054:	7b13      	ldrb	r3, [r2, #12]
 8003056:	b1db      	cbz	r3, 8003090 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003058:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800305a:	f89c 000d 	ldrb.w	r0, [ip, #13]
 800305e:	0200      	lsls	r0, r0, #8
 8003060:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003064:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003068:	ea40 000c 	orr.w	r0, r0, ip
 800306c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003070:	b29b      	uxth	r3, r3
 8003072:	b17b      	cbz	r3, 8003094 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003074:	8810      	ldrh	r0, [r2, #0]
 8003076:	4288      	cmp	r0, r1
 8003078:	d005      	beq.n	8003086 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 800307a:	4288      	cmp	r0, r1
 800307c:	d80c      	bhi.n	8003098 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800307e:	3b01      	subs	r3, #1
 8003080:	b29b      	uxth	r3, r3
 8003082:	3204      	adds	r2, #4
 8003084:	e7f5      	b.n	8003072 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003086:	f992 0002 	ldrsb.w	r0, [r2, #2]
 800308a:	4770      	bx	lr
        return 0;
 800308c:	2000      	movs	r0, #0
 800308e:	4770      	bx	lr
 8003090:	2000      	movs	r0, #0
 8003092:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003094:	2000      	movs	r0, #0
 8003096:	4770      	bx	lr
 8003098:	2000      	movs	r0, #0
}
 800309a:	4770      	bx	lr

0800309c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80030a2:	6003      	str	r3, [r0, #0]
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80030a6:	6003      	str	r3, [r0, #0]
    {
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80030aa:	6003      	str	r3, [r0, #0]
 80030ac:	2128      	movs	r1, #40	; 0x28
 80030ae:	f019 f8f0 	bl	801c292 <_ZdlPvj>
 80030b2:	4620      	mov	r0, r4
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	bf00      	nop
 80030b8:	0801e734 	.word	0x0801e734
 80030bc:	0801f2c0 	.word	0x0801f2c0
 80030c0:	0801e974 	.word	0x0801e974

080030c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80030c4:	b530      	push	{r4, r5, lr}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80030ca:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80030ce:	9506      	str	r5, [sp, #24]
 80030d0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80030d4:	9505      	str	r5, [sp, #20]
 80030d6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80030da:	9504      	str	r5, [sp, #16]
 80030dc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80030e0:	9503      	str	r5, [sp, #12]
 80030e2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80030e6:	9502      	str	r5, [sp, #8]
 80030e8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80030ec:	9501      	str	r5, [sp, #4]
 80030ee:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80030f2:	9500      	str	r5, [sp, #0]
 80030f4:	f00f fbee 	bl	80128d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030fe:	61a3      	str	r3, [r4, #24]
 8003100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003102:	61e3      	str	r3, [r4, #28]
 8003104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003106:	6223      	str	r3, [r4, #32]
 8003108:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800310a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800310c:	4620      	mov	r0, r4
 800310e:	b009      	add	sp, #36	; 0x24
 8003110:	bd30      	pop	{r4, r5, pc}
 8003112:	bf00      	nop
 8003114:	0801e734 	.word	0x0801e734

08003118 <__tcf_0>:
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <__tcf_0+0x10>)
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <__tcf_0+0x14>)
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__tcf_0+0x18>)
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__tcf_0+0x1c>)
 8003124:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003126:	4770      	bx	lr
 8003128:	24001e94 	.word	0x24001e94
 800312c:	0801e734 	.word	0x0801e734
 8003130:	0801f2c0 	.word	0x0801f2c0
 8003134:	0801e974 	.word	0x0801e974

08003138 <_Z23getFont_verdana_10_4bppv>:
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <_Z23getFont_verdana_10_4bppv+0x60>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f3bf 8f5b 	dmb	ish
 8003140:	f013 0f01 	tst.w	r3, #1
 8003144:	d001      	beq.n	800314a <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8003146:	4815      	ldr	r0, [pc, #84]	; (800319c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003148:	4770      	bx	lr
{
 800314a:	b500      	push	{lr}
 800314c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800314e:	4812      	ldr	r0, [pc, #72]	; (8003198 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003150:	f019 f8a1 	bl	801c296 <__cxa_guard_acquire>
 8003154:	b918      	cbnz	r0, 800315e <_Z23getFont_verdana_10_4bppv+0x26>
}
 8003156:	4811      	ldr	r0, [pc, #68]	; (800319c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003158:	b00d      	add	sp, #52	; 0x34
 800315a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800315e:	2300      	movs	r3, #0
 8003160:	930a      	str	r3, [sp, #40]	; 0x28
 8003162:	9309      	str	r3, [sp, #36]	; 0x24
 8003164:	9308      	str	r3, [sp, #32]
 8003166:	223f      	movs	r2, #63	; 0x3f
 8003168:	9207      	str	r2, [sp, #28]
 800316a:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800316c:	9206      	str	r2, [sp, #24]
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003170:	9205      	str	r2, [sp, #20]
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	9202      	str	r2, [sp, #8]
 800317a:	2104      	movs	r1, #4
 800317c:	9101      	str	r1, [sp, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	230a      	movs	r3, #10
 8003182:	4909      	ldr	r1, [pc, #36]	; (80031a8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003184:	4805      	ldr	r0, [pc, #20]	; (800319c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003186:	f7ff ff9d 	bl	80030c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800318a:	4808      	ldr	r0, [pc, #32]	; (80031ac <_Z23getFont_verdana_10_4bppv+0x74>)
 800318c:	f019 f8ce 	bl	801c32c <atexit>
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003192:	f019 f88c 	bl	801c2ae <__cxa_guard_release>
 8003196:	e7de      	b.n	8003156 <_Z23getFont_verdana_10_4bppv+0x1e>
 8003198:	24001e90 	.word	0x24001e90
 800319c:	24001e94 	.word	0x24001e94
 80031a0:	0801f6b4 	.word	0x0801f6b4
 80031a4:	0801f6c0 	.word	0x0801f6c0
 80031a8:	90000178 	.word	0x90000178
 80031ac:	08003119 	.word	0x08003119

080031b0 <__tcf_0>:
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <__tcf_0+0x10>)
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__tcf_0+0x14>)
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__tcf_0+0x18>)
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	4a04      	ldr	r2, [pc, #16]	; (80031cc <__tcf_0+0x1c>)
 80031bc:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031be:	4770      	bx	lr
 80031c0:	24001ec0 	.word	0x24001ec0
 80031c4:	0801e734 	.word	0x0801e734
 80031c8:	0801f2c0 	.word	0x0801f2c0
 80031cc:	0801e974 	.word	0x0801e974

080031d0 <_Z23getFont_verdana_20_4bppv>:
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <_Z23getFont_verdana_20_4bppv+0x60>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f3bf 8f5b 	dmb	ish
 80031d8:	f013 0f01 	tst.w	r3, #1
 80031dc:	d001      	beq.n	80031e2 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 80031de:	4815      	ldr	r0, [pc, #84]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x64>)
 80031e0:	4770      	bx	lr
{
 80031e2:	b500      	push	{lr}
 80031e4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031e6:	4812      	ldr	r0, [pc, #72]	; (8003230 <_Z23getFont_verdana_20_4bppv+0x60>)
 80031e8:	f019 f855 	bl	801c296 <__cxa_guard_acquire>
 80031ec:	b918      	cbnz	r0, 80031f6 <_Z23getFont_verdana_20_4bppv+0x26>
}
 80031ee:	4811      	ldr	r0, [pc, #68]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x64>)
 80031f0:	b00d      	add	sp, #52	; 0x34
 80031f2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80031f6:	2300      	movs	r3, #0
 80031f8:	930a      	str	r3, [sp, #40]	; 0x28
 80031fa:	9309      	str	r3, [sp, #36]	; 0x24
 80031fc:	9308      	str	r3, [sp, #32]
 80031fe:	223f      	movs	r2, #63	; 0x3f
 8003200:	9207      	str	r2, [sp, #28]
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003204:	9206      	str	r2, [sp, #24]
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003208:	9205      	str	r2, [sp, #20]
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	9202      	str	r2, [sp, #8]
 8003212:	2104      	movs	r1, #4
 8003214:	9101      	str	r1, [sp, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2314      	movs	r3, #20
 800321a:	4909      	ldr	r1, [pc, #36]	; (8003240 <_Z23getFont_verdana_20_4bppv+0x70>)
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <_Z23getFont_verdana_20_4bppv+0x64>)
 800321e:	f7ff ff51 	bl	80030c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <_Z23getFont_verdana_20_4bppv+0x74>)
 8003224:	f019 f882 	bl	801c32c <atexit>
 8003228:	4801      	ldr	r0, [pc, #4]	; (8003230 <_Z23getFont_verdana_20_4bppv+0x60>)
 800322a:	f019 f840 	bl	801c2ae <__cxa_guard_release>
 800322e:	e7de      	b.n	80031ee <_Z23getFont_verdana_20_4bppv+0x1e>
 8003230:	24001ebc 	.word	0x24001ebc
 8003234:	24001ec0 	.word	0x24001ec0
 8003238:	0801f6b8 	.word	0x0801f6b8
 800323c:	0801f6c4 	.word	0x0801f6c4
 8003240:	90000188 	.word	0x90000188
 8003244:	080031b1 	.word	0x080031b1

08003248 <__tcf_0>:
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <__tcf_0+0x10>)
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__tcf_0+0x14>)
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__tcf_0+0x18>)
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__tcf_0+0x1c>)
 8003254:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003256:	4770      	bx	lr
 8003258:	24001eec 	.word	0x24001eec
 800325c:	0801e734 	.word	0x0801e734
 8003260:	0801f2c0 	.word	0x0801f2c0
 8003264:	0801e974 	.word	0x0801e974

08003268 <_Z23getFont_verdana_40_4bppv>:
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f3bf 8f5b 	dmb	ish
 8003270:	f013 0f01 	tst.w	r3, #1
 8003274:	d001      	beq.n	800327a <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8003276:	4815      	ldr	r0, [pc, #84]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x64>)
 8003278:	4770      	bx	lr
{
 800327a:	b500      	push	{lr}
 800327c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800327e:	4812      	ldr	r0, [pc, #72]	; (80032c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003280:	f019 f809 	bl	801c296 <__cxa_guard_acquire>
 8003284:	b918      	cbnz	r0, 800328e <_Z23getFont_verdana_40_4bppv+0x26>
}
 8003286:	4811      	ldr	r0, [pc, #68]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x64>)
 8003288:	b00d      	add	sp, #52	; 0x34
 800328a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800328e:	2300      	movs	r3, #0
 8003290:	930a      	str	r3, [sp, #40]	; 0x28
 8003292:	9309      	str	r3, [sp, #36]	; 0x24
 8003294:	9308      	str	r3, [sp, #32]
 8003296:	223f      	movs	r2, #63	; 0x3f
 8003298:	9207      	str	r2, [sp, #28]
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800329c:	9206      	str	r2, [sp, #24]
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80032a0:	9205      	str	r2, [sp, #20]
 80032a2:	9304      	str	r3, [sp, #16]
 80032a4:	9303      	str	r3, [sp, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	9202      	str	r2, [sp, #8]
 80032aa:	2104      	movs	r1, #4
 80032ac:	9101      	str	r1, [sp, #4]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2328      	movs	r3, #40	; 0x28
 80032b2:	4909      	ldr	r1, [pc, #36]	; (80032d8 <_Z23getFont_verdana_40_4bppv+0x70>)
 80032b4:	4805      	ldr	r0, [pc, #20]	; (80032cc <_Z23getFont_verdana_40_4bppv+0x64>)
 80032b6:	f7ff ff05 	bl	80030c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <_Z23getFont_verdana_40_4bppv+0x74>)
 80032bc:	f019 f836 	bl	801c32c <atexit>
 80032c0:	4801      	ldr	r0, [pc, #4]	; (80032c8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80032c2:	f018 fff4 	bl	801c2ae <__cxa_guard_release>
 80032c6:	e7de      	b.n	8003286 <_Z23getFont_verdana_40_4bppv+0x1e>
 80032c8:	24001ee8 	.word	0x24001ee8
 80032cc:	24001eec 	.word	0x24001eec
 80032d0:	0801f6bc 	.word	0x0801f6bc
 80032d4:	0801f6c8 	.word	0x0801f6c8
 80032d8:	90000198 	.word	0x90000198
 80032dc:	08003249 	.word	0x08003249

080032e0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80032e0:	2000      	movs	r0, #0
 80032e2:	4770      	bx	lr

080032e4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80032e4:	2000      	movs	r0, #0
 80032e6:	4770      	bx	lr

080032e8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80032e8:	2000      	movs	r0, #0
 80032ea:	4770      	bx	lr

080032ec <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80032ec:	b40e      	push	{r1, r2, r3}
 80032ee:	b500      	push	{lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	ab03      	add	r3, sp, #12
 80032f4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80032f8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f00f f91a 	bl	8012534 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003300:	b002      	add	sp, #8
 8003302:	f85d eb04 	ldr.w	lr, [sp], #4
 8003306:	b003      	add	sp, #12
 8003308:	4770      	bx	lr

0800330a <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800330a:	b40c      	push	{r2, r3}
 800330c:	b500      	push	{lr}
 800330e:	b083      	sub	sp, #12
 8003310:	ab04      	add	r3, sp, #16
 8003312:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003316:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003318:	f00f f90c 	bl	8012534 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800331c:	b003      	add	sp, #12
 800331e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003322:	b002      	add	sp, #8
 8003324:	4770      	bx	lr
	...

08003328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800332c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800332e:	b133      	cbz	r3, 800333e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003330:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003332:	b143      	cbz	r3, 8003346 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8003334:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003336:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800333a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800333c:	b94b      	cbnz	r3, 8003352 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800333e:	4620      	mov	r0, r4
 8003340:	f010 fa36 	bl	80137b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8003344:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800334a:	21c0      	movs	r1, #192	; 0xc0
 800334c:	481c      	ldr	r0, [pc, #112]	; (80033c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800334e:	f018 ffcf 	bl	801c2f0 <__assert_func>
        substituteGlyphs();
 8003352:	f010 fb2b 	bl	80139ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003356:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8003358:	2801      	cmp	r0, #1
 800335a:	d91d      	bls.n	8003398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 800335c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800335e:	1c4b      	adds	r3, r1, #1
 8003360:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003362:	2b09      	cmp	r3, #9
 8003364:	d81e      	bhi.n	80033a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 8003366:	461a      	mov	r2, r3
 8003368:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800336c:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003370:	f640 123f 	movw	r2, #2367	; 0x93f
 8003374:	4594      	cmp	ip, r2
 8003376:	d1e2      	bne.n	800333e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8003378:	b1b8      	cbz	r0, 80033aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 800337a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 800337e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003380:	2b09      	cmp	r3, #9
 8003382:	d900      	bls.n	8003386 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8003384:	2300      	movs	r3, #0
 8003386:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800338a:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800338c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003390:	f640 133f 	movw	r3, #2367	; 0x93f
 8003394:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 8003396:	e7d2      	b.n	800333e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 800339c:	21c5      	movs	r1, #197	; 0xc5
 800339e:	4808      	ldr	r0, [pc, #32]	; (80033c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80033a0:	f018 ffa6 	bl	801c2f0 <__assert_func>
            return buffer[index < size ? index : index - size];
 80033a4:	f1a3 020a 	sub.w	r2, r3, #10
 80033a8:	e7de      	b.n	8003368 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80033aa:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80033ac:	4a03      	ldr	r2, [pc, #12]	; (80033bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80033ae:	21c0      	movs	r1, #192	; 0xc0
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80033b2:	f018 ff9d 	bl	801c2f0 <__assert_func>
 80033b6:	bf00      	nop
 80033b8:	0801e784 	.word	0x0801e784
 80033bc:	0801e790 	.word	0x0801e790
 80033c0:	0801e83c 	.word	0x0801e83c
 80033c4:	0801e888 	.word	0x0801e888
 80033c8:	0801e898 	.word	0x0801e898

080033cc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80033cc:	b508      	push	{r3, lr}
    fillInputBuffer();
 80033ce:	f010 f9b8 	bl	8013742 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80033d2:	bd08      	pop	{r3, pc}

080033d4 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80033d4:	bb40      	cbnz	r0, 8003428 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80033d6:	b538      	push	{r3, r4, r5, lr}
 80033d8:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80033dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80033e0:	b1c3      	cbz	r3, 8003414 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	4419      	add	r1, r3
 80033e6:	4812      	ldr	r0, [pc, #72]	; (8003430 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80033e8:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	4419      	add	r1, r3
 80033ee:	4811      	ldr	r0, [pc, #68]	; (8003434 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80033f0:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80033f2:	689c      	ldr	r4, [r3, #8]
 80033f4:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 80033f6:	b164      	cbz	r4, 8003412 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80033fa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80033fc:	f000 f842 	bl	8003484 <_ZN17TypedTextDatabase8getFontsEv>
 8003400:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003402:	f000 f83d 	bl	8003480 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003408:	601c      	str	r4, [r3, #0]
        fonts = f;
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800340c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003410:	8018      	strh	r0, [r3, #0]
    }
}
 8003412:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003416:	490c      	ldr	r1, [pc, #48]	; (8003448 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003418:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 800341e:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8003422:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8003426:	e7e6      	b.n	80033f6 <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	24001f14 	.word	0x24001f14
 8003430:	24001f18 	.word	0x24001f18
 8003434:	24001f1c 	.word	0x24001f1c
 8003438:	24001f20 	.word	0x24001f20
 800343c:	2400b9d0 	.word	0x2400b9d0
 8003440:	2400b9d8 	.word	0x2400b9d8
 8003444:	2400b9d4 	.word	0x2400b9d4
 8003448:	900001ac 	.word	0x900001ac
 800344c:	900001a8 	.word	0x900001a8
 8003450:	900001b4 	.word	0x900001b4

08003454 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003454:	2801      	cmp	r0, #1
 8003456:	d000      	beq.n	800345a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003458:	4770      	bx	lr
 800345a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800345e:	4299      	cmp	r1, r3
 8003460:	d1fa      	bne.n	8003458 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003462:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003464:	f7ff feb4 	bl	80031d0 <_Z23getFont_verdana_20_4bppv>
};
 8003468:	4c04      	ldr	r4, [pc, #16]	; (800347c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800346a:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800346c:	f7ff fefc 	bl	8003268 <_Z23getFont_verdana_40_4bppv>
};
 8003470:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003472:	f7ff fe61 	bl	8003138 <_Z23getFont_verdana_10_4bppv>
};
 8003476:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003478:	bd10      	pop	{r4, pc}
 800347a:	bf00      	nop
 800347c:	24001f24 	.word	0x24001f24

08003480 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8003480:	2000      	movs	r0, #0
 8003482:	4770      	bx	lr

08003484 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8003484:	4800      	ldr	r0, [pc, #0]	; (8003488 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003486:	4770      	bx	lr
 8003488:	24001f24 	.word	0x24001f24

0800348c <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 800348c:	b508      	push	{r3, lr}
 800348e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003492:	2001      	movs	r0, #1
 8003494:	f7ff ffde 	bl	8003454 <_Z41__static_initialization_and_destruction_0ii>
 8003498:	bd08      	pop	{r3, pc}

0800349a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800349a:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800349c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80034a0:	b113      	cbz	r3, 80034a8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 80034a2:	6803      	ldr	r3, [r0, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	4798      	blx	r3
        }
    }
 80034a8:	bd08      	pop	{r3, pc}

080034aa <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80034aa:	2000      	movs	r0, #0
 80034ac:	4770      	bx	lr

080034ae <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80034ae:	8081      	strh	r1, [r0, #4]
    }
 80034b0:	4770      	bx	lr

080034b2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80034b2:	80c1      	strh	r1, [r0, #6]
    }
 80034b4:	4770      	bx	lr

080034b6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80034b6:	8101      	strh	r1, [r0, #8]
    }
 80034b8:	4770      	bx	lr

080034ba <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80034ba:	8141      	strh	r1, [r0, #10]
    }
 80034bc:	4770      	bx	lr

080034be <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80034be:	4770      	bx	lr

080034c0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c0:	4770      	bx	lr

080034c2 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c2:	4770      	bx	lr

080034c4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80034c4:	4770      	bx	lr

080034c6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80034c6:	4770      	bx	lr

080034c8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80034c8:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 80034ca:	6804      	ldr	r4, [r0, #0]
 80034cc:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80034ce:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 80034d2:	eba1 010c 	sub.w	r1, r1, ip
 80034d6:	88c3      	ldrh	r3, [r0, #6]
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	b212      	sxth	r2, r2
 80034dc:	b209      	sxth	r1, r1
 80034de:	47a0      	blx	r4
    }
 80034e0:	bd10      	pop	{r4, pc}

080034e2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80034e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80034e8:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80034ea:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80034f0:	6010      	str	r0, [r2, #0]
    }
 80034f2:	4770      	bx	lr

080034f4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80034f4:	4770      	bx	lr

080034f6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80034f6:	4770      	bx	lr

080034f8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80034f8:	4770      	bx	lr

080034fa <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80034fa:	4770      	bx	lr

080034fc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80034fc:	4770      	bx	lr

080034fe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 80034fe:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003502:	b11a      	cbz	r2, 800350c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8003504:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003508:	b102      	cbz	r2, 800350c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800350a:	6018      	str	r0, [r3, #0]
        }
    }
 800350c:	4770      	bx	lr
	...

08003510 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8003512:	6002      	str	r2, [r0, #0]
    {
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8003516:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 800351a:	6042      	str	r2, [r0, #4]
    {
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800351e:	6042      	str	r2, [r0, #4]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	0801ea30 	.word	0x0801ea30
 8003528:	0801f354 	.word	0x0801f354
 800352c:	0801eef8 	.word	0x0801eef8
 8003530:	0801f258 	.word	0x0801f258

08003534 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8003534:	b410      	push	{r4}
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8003538:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <_ZN18mainScreenViewBaseD1Ev+0x34>)
 800353c:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 800353e:	490b      	ldr	r1, [pc, #44]	; (800356c <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8003540:	66c1      	str	r1, [r0, #108]	; 0x6c
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8003544:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8003546:	4c0b      	ldr	r4, [pc, #44]	; (8003574 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8003548:	6404      	str	r4, [r0, #64]	; 0x40
 800354a:	6401      	str	r1, [r0, #64]	; 0x40
 800354c:	6402      	str	r2, [r0, #64]	; 0x40
 800354e:	490a      	ldr	r1, [pc, #40]	; (8003578 <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8003550:	6001      	str	r1, [r0, #0]
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8003554:	6001      	str	r1, [r0, #0]
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8003558:	6041      	str	r1, [r0, #4]
 800355a:	6042      	str	r2, [r0, #4]
 800355c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	0801ea64 	.word	0x0801ea64
 8003568:	0801f148 	.word	0x0801f148
 800356c:	0801e9c8 	.word	0x0801e9c8
 8003570:	0801f258 	.word	0x0801f258
 8003574:	0801f0e0 	.word	0x0801f0e0
 8003578:	0801ea30 	.word	0x0801ea30
 800357c:	0801f354 	.word	0x0801f354
 8003580:	0801eef8 	.word	0x0801eef8

08003584 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8003584:	4770      	bx	lr
	...

08003588 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4604      	mov	r4, r0
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 800358e:	6003      	str	r3, [r0, #0]
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8003592:	6003      	str	r3, [r0, #0]
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8003596:	6043      	str	r3, [r0, #4]
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 800359a:	6043      	str	r3, [r0, #4]
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	f018 fe78 	bl	801c292 <_ZdlPvj>
 80035a2:	4620      	mov	r0, r4
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	0801ea30 	.word	0x0801ea30
 80035ac:	0801f354 	.word	0x0801f354
 80035b0:	0801eef8 	.word	0x0801eef8
 80035b4:	0801f258 	.word	0x0801f258

080035b8 <_ZN18mainScreenViewBaseD0Ev>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4604      	mov	r4, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <_ZN18mainScreenViewBaseD0Ev+0x34>)
 80035be:	6003      	str	r3, [r0, #0]
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 80035c2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80035c4:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 80035c6:	66c2      	str	r2, [r0, #108]	; 0x6c
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <_ZN18mainScreenViewBaseD0Ev+0x40>)
 80035ca:	66c3      	str	r3, [r0, #108]	; 0x6c
 80035cc:	490b      	ldr	r1, [pc, #44]	; (80035fc <_ZN18mainScreenViewBaseD0Ev+0x44>)
 80035ce:	6401      	str	r1, [r0, #64]	; 0x40
 80035d0:	6402      	str	r2, [r0, #64]	; 0x40
 80035d2:	6403      	str	r3, [r0, #64]	; 0x40
 80035d4:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 80035d6:	6002      	str	r2, [r0, #0]
 80035d8:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 80035da:	6002      	str	r2, [r0, #0]
 80035dc:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <_ZN18mainScreenViewBaseD0Ev+0x50>)
 80035de:	6042      	str	r2, [r0, #4]
 80035e0:	6043      	str	r3, [r0, #4]
 80035e2:	2198      	movs	r1, #152	; 0x98
 80035e4:	f018 fe55 	bl	801c292 <_ZdlPvj>
 80035e8:	4620      	mov	r0, r4
 80035ea:	bd10      	pop	{r4, pc}
 80035ec:	0801ea64 	.word	0x0801ea64
 80035f0:	0801f148 	.word	0x0801f148
 80035f4:	0801e9c8 	.word	0x0801e9c8
 80035f8:	0801f258 	.word	0x0801f258
 80035fc:	0801f0e0 	.word	0x0801f0e0
 8003600:	0801ea30 	.word	0x0801ea30
 8003604:	0801f354 	.word	0x0801f354
 8003608:	0801eef8 	.word	0x0801eef8

0800360c <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	b083      	sub	sp, #12
 8003612:	4607      	mov	r7, r0
        : presenter(0)
 8003614:	f00f fb52 	bl	8012cbc <_ZN8touchgfx6ScreenC1Ev>
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	2400      	movs	r4, #0
 800361e:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003620:	463d      	mov	r5, r7
 8003622:	4b46      	ldr	r3, [pc, #280]	; (800373c <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8003624:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003628:	f04f 0926 	mov.w	r9, #38	; 0x26
 800362c:	464a      	mov	r2, r9
 800362e:	4621      	mov	r1, r4
 8003630:	4628      	mov	r0, r5
 8003632:	f018 fff3 	bl	801c61c <memset>
          visible(true)
 8003636:	f8df b114 	ldr.w	fp, [pc, #276]	; 800374c <_ZN18mainScreenViewBaseC1Ev+0x140>
 800363a:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 800363e:	80ac      	strh	r4, [r5, #4]
 8003640:	80ec      	strh	r4, [r5, #6]
 8003642:	812c      	strh	r4, [r5, #8]
 8003644:	816c      	strh	r4, [r5, #10]
 8003646:	81ac      	strh	r4, [r5, #12]
 8003648:	81ec      	strh	r4, [r5, #14]
 800364a:	822c      	strh	r4, [r5, #16]
 800364c:	826c      	strh	r4, [r5, #18]
 800364e:	616c      	str	r4, [r5, #20]
 8003650:	61ac      	str	r4, [r5, #24]
 8003652:	61ec      	str	r4, [r5, #28]
 8003654:	842c      	strh	r4, [r5, #32]
 8003656:	846c      	strh	r4, [r5, #34]	; 0x22
 8003658:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 800365c:	f04f 0a01 	mov.w	sl, #1
 8003660:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8003666:	643b      	str	r3, [r7, #64]	; 0x40
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
 800366c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8003670:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8003674:	62ac      	str	r4, [r5, #40]	; 0x28
 8003676:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800367a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800367e:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8003682:	464a      	mov	r2, r9
 8003684:	4621      	mov	r1, r4
 8003686:	4630      	mov	r0, r6
 8003688:	f018 ffc8 	bl	801c61c <memset>
 800368c:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8003690:	80b4      	strh	r4, [r6, #4]
 8003692:	80f4      	strh	r4, [r6, #6]
 8003694:	8134      	strh	r4, [r6, #8]
 8003696:	8174      	strh	r4, [r6, #10]
 8003698:	81b4      	strh	r4, [r6, #12]
 800369a:	81f4      	strh	r4, [r6, #14]
 800369c:	8234      	strh	r4, [r6, #16]
 800369e:	8274      	strh	r4, [r6, #18]
 80036a0:	6174      	str	r4, [r6, #20]
 80036a2:	61b4      	str	r4, [r6, #24]
 80036a4:	61f4      	str	r4, [r6, #28]
 80036a6:	8434      	strh	r4, [r6, #32]
 80036a8:	8474      	strh	r4, [r6, #34]	; 0x22
 80036aa:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 80036ae:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 80036b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 80036b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80036be:	84f3      	strh	r3, [r6, #38]	; 0x26
 80036c0:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80036c4:	4669      	mov	r1, sp
 80036c6:	4630      	mov	r0, r6
 80036c8:	f00c ffa1 	bl	801060e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80036cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	4798      	blx	r3
        setY(y);
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	4621      	mov	r1, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	4798      	blx	r3
        setWidth(width);
 80036e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80036e8:	4628      	mov	r0, r5
 80036ea:	4798      	blx	r3
        setHeight(height);
 80036ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80036f4:	4628      	mov	r0, r5
 80036f6:	4798      	blx	r3
        : color(col)
 80036f8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80036fc:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4621      	mov	r1, r4
 8003704:	4630      	mov	r0, r6
 8003706:	4798      	blx	r3
        setY(y);
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	4621      	mov	r1, r4
 800370e:	4630      	mov	r0, r6
 8003710:	4798      	blx	r3
 8003712:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8003716:	a901      	add	r1, sp, #4
 8003718:	4630      	mov	r0, r6
 800371a:	f00c ff78 	bl	801060e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800371e:	1d3c      	adds	r4, r7, #4
 8003720:	4629      	mov	r1, r5
 8003722:	4620      	mov	r0, r4
 8003724:	f00b fd8e 	bl	800f244 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003728:	4631      	mov	r1, r6
 800372a:	4620      	mov	r0, r4
 800372c:	f00b fd8a 	bl	800f244 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003730:	4638      	mov	r0, r7
 8003732:	b003      	add	sp, #12
 8003734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003738:	0801ea30 	.word	0x0801ea30
 800373c:	0801ea64 	.word	0x0801ea64
 8003740:	0801e9c8 	.word	0x0801e9c8
 8003744:	0801f0e0 	.word	0x0801f0e0
 8003748:	0801f148 	.word	0x0801f148
 800374c:	0801f258 	.word	0x0801f258

08003750 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003750:	b510      	push	{r4, lr}
 8003752:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003754:	f7ff fb3e 	bl	8002dd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003758:	4b01      	ldr	r3, [pc, #4]	; (8003760 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800375a:	6023      	str	r3, [r4, #0]
{

}
 800375c:	4620      	mov	r0, r4
 800375e:	bd10      	pop	{r4, pc}
 8003760:	0801e108 	.word	0x0801e108

08003764 <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 8003764:	2200      	movs	r2, #0
 8003766:	6002      	str	r2, [r0, #0]
{

}
 8003768:	4770      	bx	lr

0800376a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800376a:	4770      	bx	lr

0800376c <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 800376c:	4770      	bx	lr

0800376e <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 800376e:	4770      	bx	lr

08003770 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8003770:	4b01      	ldr	r3, [pc, #4]	; (8003778 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8003772:	6003      	str	r3, [r0, #0]
    }
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	0801ea98 	.word	0x0801ea98

0800377c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800377c:	4b01      	ldr	r3, [pc, #4]	; (8003784 <_ZN13ModelListenerD1Ev+0x8>)
 800377e:	6003      	str	r3, [r0, #0]
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	0801eab0 	.word	0x0801eab0

08003788 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <_ZN19mainScreenPresenterD1Ev+0x18>)
 800378a:	f102 0108 	add.w	r1, r2, #8
 800378e:	6001      	str	r1, [r0, #0]
 8003790:	3220      	adds	r2, #32
 8003792:	6042      	str	r2, [r0, #4]
 8003794:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8003796:	6042      	str	r2, [r0, #4]
    {
 8003798:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <_ZN19mainScreenPresenterD1Ev+0x20>)
 800379a:	6002      	str	r2, [r0, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	0801eab8 	.word	0x0801eab8
 80037a4:	0801eab0 	.word	0x0801eab0
 80037a8:	0801ea98 	.word	0x0801ea98

080037ac <_ZThn4_N19mainScreenPresenterD1Ev>:
 80037ac:	4603      	mov	r3, r0
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 80037b0:	f102 0108 	add.w	r1, r2, #8
 80037b4:	f840 1c04 	str.w	r1, [r0, #-4]
 80037b8:	3220      	adds	r2, #32
 80037ba:	f840 2904 	str.w	r2, [r0], #-4
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 80037c0:	6042      	str	r2, [r0, #4]
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 80037c4:	f843 2c04 	str.w	r2, [r3, #-4]
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	0801eab8 	.word	0x0801eab8
 80037d0:	0801eab0 	.word	0x0801eab0
 80037d4:	0801ea98 	.word	0x0801ea98

080037d8 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 80037d8:	4770      	bx	lr

080037da <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 80037da:	4770      	bx	lr

080037dc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
    {
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80037e2:	6003      	str	r3, [r0, #0]
    }
 80037e4:	2104      	movs	r1, #4
 80037e6:	f018 fd54 	bl	801c292 <_ZdlPvj>
 80037ea:	4620      	mov	r0, r4
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	bf00      	nop
 80037f0:	0801ea98 	.word	0x0801ea98

080037f4 <_ZN13ModelListenerD0Ev>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4604      	mov	r4, r0
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <_ZN13ModelListenerD0Ev+0x14>)
 80037fa:	6003      	str	r3, [r0, #0]
 80037fc:	2108      	movs	r1, #8
 80037fe:	f018 fd48 	bl	801c292 <_ZdlPvj>
 8003802:	4620      	mov	r0, r4
 8003804:	bd10      	pop	{r4, pc}
 8003806:	bf00      	nop
 8003808:	0801eab0 	.word	0x0801eab0

0800380c <_ZN19mainScreenPresenterD0Ev>:
 800380c:	b510      	push	{r4, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	6002      	str	r2, [r0, #0]
 8003818:	3320      	adds	r3, #32
 800381a:	6043      	str	r3, [r0, #4]
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <_ZN19mainScreenPresenterD0Ev+0x28>)
 800381e:	6043      	str	r3, [r0, #4]
    {
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8003822:	6003      	str	r3, [r0, #0]
 8003824:	2110      	movs	r1, #16
 8003826:	f018 fd34 	bl	801c292 <_ZdlPvj>
 800382a:	4620      	mov	r0, r4
 800382c:	bd10      	pop	{r4, pc}
 800382e:	bf00      	nop
 8003830:	0801eab8 	.word	0x0801eab8
 8003834:	0801eab0 	.word	0x0801eab0
 8003838:	0801ea98 	.word	0x0801ea98

0800383c <_ZThn4_N19mainScreenPresenterD0Ev>:
 800383c:	b510      	push	{r4, lr}
 800383e:	4604      	mov	r4, r0
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8003842:	f103 0208 	add.w	r2, r3, #8
 8003846:	f840 2c04 	str.w	r2, [r0, #-4]
 800384a:	3320      	adds	r3, #32
 800384c:	f844 3904 	str.w	r3, [r4], #-4
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8003852:	6063      	str	r3, [r4, #4]
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8003856:	f840 3c04 	str.w	r3, [r0, #-4]
 800385a:	2110      	movs	r1, #16
 800385c:	4620      	mov	r0, r4
 800385e:	f018 fd18 	bl	801c292 <_ZdlPvj>
 8003862:	4620      	mov	r0, r4
 8003864:	bd10      	pop	{r4, pc}
 8003866:	bf00      	nop
 8003868:	0801eab8 	.word	0x0801eab8
 800386c:	0801eab0 	.word	0x0801eab0
 8003870:	0801ea98 	.word	0x0801ea98

08003874 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8003874:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8003878:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 800387c:	6042      	str	r2, [r0, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	6082      	str	r2, [r0, #8]
    : view(v)
 8003882:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8003884:	f102 0408 	add.w	r4, r2, #8
 8003888:	6004      	str	r4, [r0, #0]
 800388a:	3220      	adds	r2, #32
 800388c:	6042      	str	r2, [r0, #4]
 800388e:	60c1      	str	r1, [r0, #12]
}
 8003890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	0801ea98 	.word	0x0801ea98
 800389c:	0801eab0 	.word	0x0801eab0
 80038a0:	0801eab8 	.word	0x0801eab8

080038a4 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 80038a4:	b410      	push	{r4}
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <_ZN14mainScreenViewD1Ev+0x34>)
 80038a8:	6002      	str	r2, [r0, #0]
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <_ZN14mainScreenViewD1Ev+0x38>)
 80038ac:	6002      	str	r2, [r0, #0]
class Image : public Widget
 80038ae:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <_ZN14mainScreenViewD1Ev+0x3c>)
 80038b0:	66c2      	str	r2, [r0, #108]	; 0x6c
 80038b2:	490c      	ldr	r1, [pc, #48]	; (80038e4 <_ZN14mainScreenViewD1Ev+0x40>)
 80038b4:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <_ZN14mainScreenViewD1Ev+0x44>)
 80038b8:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 80038ba:	4c0c      	ldr	r4, [pc, #48]	; (80038ec <_ZN14mainScreenViewD1Ev+0x48>)
 80038bc:	6404      	str	r4, [r0, #64]	; 0x40
 80038be:	6401      	str	r1, [r0, #64]	; 0x40
 80038c0:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 80038c2:	490b      	ldr	r1, [pc, #44]	; (80038f0 <_ZN14mainScreenViewD1Ev+0x4c>)
 80038c4:	6001      	str	r1, [r0, #0]
    {
 80038c6:	490b      	ldr	r1, [pc, #44]	; (80038f4 <_ZN14mainScreenViewD1Ev+0x50>)
 80038c8:	6001      	str	r1, [r0, #0]
 80038ca:	490b      	ldr	r1, [pc, #44]	; (80038f8 <_ZN14mainScreenViewD1Ev+0x54>)
 80038cc:	6041      	str	r1, [r0, #4]
 80038ce:	6042      	str	r2, [r0, #4]
 80038d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	0801eae8 	.word	0x0801eae8
 80038dc:	0801ea64 	.word	0x0801ea64
 80038e0:	0801f148 	.word	0x0801f148
 80038e4:	0801e9c8 	.word	0x0801e9c8
 80038e8:	0801f258 	.word	0x0801f258
 80038ec:	0801f0e0 	.word	0x0801f0e0
 80038f0:	0801ea30 	.word	0x0801ea30
 80038f4:	0801f354 	.word	0x0801f354
 80038f8:	0801eef8 	.word	0x0801eef8

080038fc <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80038fc:	4770      	bx	lr

080038fe <_ZN14mainScreenView11setupScreenEv>:
{
 80038fe:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 8003900:	f7ff fe40 	bl	8003584 <_ZN18mainScreenViewBase11setupScreenEv>
}
 8003904:	bd08      	pop	{r3, pc}
	...

08003908 <_ZN14mainScreenViewD0Ev>:
 8003908:	b510      	push	{r4, lr}
 800390a:	4604      	mov	r4, r0
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <_ZN14mainScreenViewD0Ev+0x38>)
 800390e:	6003      	str	r3, [r0, #0]
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <_ZN14mainScreenViewD0Ev+0x3c>)
 8003912:	6003      	str	r3, [r0, #0]
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <_ZN14mainScreenViewD0Ev+0x40>)
 8003916:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003918:	4a0c      	ldr	r2, [pc, #48]	; (800394c <_ZN14mainScreenViewD0Ev+0x44>)
 800391a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <_ZN14mainScreenViewD0Ev+0x48>)
 800391e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <_ZN14mainScreenViewD0Ev+0x4c>)
 8003922:	6401      	str	r1, [r0, #64]	; 0x40
 8003924:	6402      	str	r2, [r0, #64]	; 0x40
 8003926:	6403      	str	r3, [r0, #64]	; 0x40
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <_ZN14mainScreenViewD0Ev+0x50>)
 800392a:	6002      	str	r2, [r0, #0]
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <_ZN14mainScreenViewD0Ev+0x54>)
 800392e:	6002      	str	r2, [r0, #0]
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <_ZN14mainScreenViewD0Ev+0x58>)
 8003932:	6042      	str	r2, [r0, #4]
 8003934:	6043      	str	r3, [r0, #4]
 8003936:	2198      	movs	r1, #152	; 0x98
 8003938:	f018 fcab 	bl	801c292 <_ZdlPvj>
 800393c:	4620      	mov	r0, r4
 800393e:	bd10      	pop	{r4, pc}
 8003940:	0801eae8 	.word	0x0801eae8
 8003944:	0801ea64 	.word	0x0801ea64
 8003948:	0801f148 	.word	0x0801f148
 800394c:	0801e9c8 	.word	0x0801e9c8
 8003950:	0801f258 	.word	0x0801f258
 8003954:	0801f0e0 	.word	0x0801f0e0
 8003958:	0801ea30 	.word	0x0801ea30
 800395c:	0801f354 	.word	0x0801f354
 8003960:	0801eef8 	.word	0x0801eef8

08003964 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 8003964:	b510      	push	{r4, lr}
 8003966:	4604      	mov	r4, r0
 8003968:	f7ff fe50 	bl	800360c <_ZN18mainScreenViewBaseC1Ev>
 800396c:	4b01      	ldr	r3, [pc, #4]	; (8003974 <_ZN14mainScreenViewC1Ev+0x10>)
 800396e:	6023      	str	r3, [r4, #0]
}
 8003970:	4620      	mov	r0, r4
 8003972:	bd10      	pop	{r4, pc}
 8003974:	0801eae8 	.word	0x0801eae8

08003978 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8003978:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800397a:	3830      	subs	r0, #48	; 0x30
 800397c:	b2c0      	uxtb	r0, r0
 800397e:	2809      	cmp	r0, #9
 8003980:	d90a      	bls.n	8003998 <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003982:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	2a05      	cmp	r2, #5
 800398a:	d906      	bls.n	800399a <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800398c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	2a05      	cmp	r2, #5
 8003994:	d904      	bls.n	80039a0 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 8003996:	2000      	movs	r0, #0
}
 8003998:	4770      	bx	lr
        return (a - 'a') + 10;
 800399a:	3b57      	subs	r3, #87	; 0x57
 800399c:	b2d8      	uxtb	r0, r3
 800399e:	4770      	bx	lr
        return (a - 'A') + 10;
 80039a0:	3b37      	subs	r3, #55	; 0x37
 80039a2:	b2d8      	uxtb	r0, r3
 80039a4:	4770      	bx	lr

080039a6 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80039a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a8:	4605      	mov	r5, r0
 80039aa:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 80039ac:	2400      	movs	r4, #0
    uint32_t sum = 0;
 80039ae:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80039b0:	e006      	b.n	80039c0 <ParseHexNumber+0x1a>
        sum <<= 4;
 80039b2:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 80039b4:	f7ff ffe0 	bl	8003978 <Hex2Num>
 80039b8:	4407      	add	r7, r0
        ptr++;
 80039ba:	3501      	adds	r5, #1
        i++;
 80039bc:	3401      	adds	r4, #1
 80039be:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80039c0:	7828      	ldrb	r0, [r5, #0]
 80039c2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	bf88      	it	hi
 80039d2:	2a09      	cmphi	r2, #9
 80039d4:	d9ed      	bls.n	80039b2 <ParseHexNumber+0xc>
 80039d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d9e8      	bls.n	80039b2 <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80039e0:	b106      	cbz	r6, 80039e4 <ParseHexNumber+0x3e>
        *cnt = i;
 80039e2:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 80039e4:	4638      	mov	r0, r7
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039e8 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 80039ec:	7803      	ldrb	r3, [r0, #0]
 80039ee:	2b2d      	cmp	r3, #45	; 0x2d
 80039f0:	d003      	beq.n	80039fa <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 80039f2:	2400      	movs	r4, #0
 80039f4:	46a4      	mov	ip, r4
 80039f6:	2000      	movs	r0, #0
 80039f8:	e00e      	b.n	8003a18 <ParseNumber+0x30>
        minus = 1;
        ptr++;
 80039fa:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 80039fe:	2401      	movs	r4, #1
 8003a00:	e7f8      	b.n	80039f4 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8003a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a06:	3b30      	subs	r3, #48	; 0x30
 8003a08:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 8003a0c:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 8003a10:	f10c 0c01 	add.w	ip, ip, #1
 8003a14:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003a18:	f89e 3000 	ldrb.w	r3, [lr]
 8003a1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	2a09      	cmp	r2, #9
 8003a24:	d9ed      	bls.n	8003a02 <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8003a26:	b109      	cbz	r1, 8003a2c <ParseNumber+0x44>
        *cnt = i;
 8003a28:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 8003a2c:	b904      	cbnz	r4, 8003a30 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 8003a2e:	bd10      	pop	{r4, pc}
        return 0 - sum;
 8003a30:	4240      	negs	r0, r0
 8003a32:	e7fc      	b.n	8003a2e <ParseNumber+0x46>

08003a34 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	4604      	mov	r4, r0
 8003a3a:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8003a3c:	2500      	movs	r5, #0

  while(* ptr) {
 8003a3e:	e002      	b.n	8003a46 <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8003a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a44:	441c      	add	r4, r3
  while(* ptr) {
 8003a46:	7823      	ldrb	r3, [r4, #0]
 8003a48:	b173      	cbz	r3, 8003a68 <ParseMAC+0x34>
    hexcnt = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 8003a50:	7823      	ldrb	r3, [r4, #0]
 8003a52:	2b3a      	cmp	r3, #58	; 0x3a
 8003a54:	d0f4      	beq.n	8003a40 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8003a56:	f10d 0107 	add.w	r1, sp, #7
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff ffa3 	bl	80039a6 <ParseHexNumber>
 8003a60:	1c6b      	adds	r3, r5, #1
 8003a62:	5570      	strb	r0, [r6, r5]
 8003a64:	b2dd      	uxtb	r5, r3
 8003a66:	e7eb      	b.n	8003a40 <ParseMAC+0xc>
  }
}
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}

08003a6c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	4604      	mov	r4, r0
 8003a72:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8003a74:	2500      	movs	r5, #0

  while(* ptr) {
 8003a76:	e002      	b.n	8003a7e <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8003a78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a7c:	441c      	add	r4, r3
  while(* ptr) {
 8003a7e:	7823      	ldrb	r3, [r4, #0]
 8003a80:	b173      	cbz	r3, 8003aa0 <ParseIP+0x34>
    hexcnt = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 8003a88:	7823      	ldrb	r3, [r4, #0]
 8003a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8c:	d0f4      	beq.n	8003a78 <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8003a8e:	f10d 0107 	add.w	r1, sp, #7
 8003a92:	4620      	mov	r0, r4
 8003a94:	f7ff ffa8 	bl	80039e8 <ParseNumber>
 8003a98:	1c6b      	adds	r3, r5, #1
 8003a9a:	5570      	strb	r0, [r6, r5]
 8003a9c:	b2dd      	uxtb	r5, r3
 8003a9e:	e7eb      	b.n	8003a78 <ParseIP+0xc>
  }
}
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}

08003aa4 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8003aa4:	7802      	ldrb	r2, [r0, #0]
 8003aa6:	7843      	ldrb	r3, [r0, #1]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003aae:	7882      	ldrb	r2, [r0, #2]
 8003ab0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ab4:	78c0      	ldrb	r0, [r0, #3]
}
 8003ab6:	4318      	orrs	r0, r3
 8003ab8:	4770      	bx	lr

08003aba <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8003aba:	7883      	ldrb	r3, [r0, #2]
 8003abc:	2b31      	cmp	r3, #49	; 0x31
 8003abe:	bf14      	ite	ne
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	700b      	strb	r3, [r1, #0]
}
 8003ac6:	4770      	bx	lr

08003ac8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	4604      	mov	r4, r0
 8003acc:	460d      	mov	r5, r1
 8003ace:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8003ad0:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	f7fc fc15 	bl	8000304 <strlen>
 8003ada:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003ade:	b281      	uxth	r1, r0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7

  if( ret > 0)
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	dd25      	ble.n	8003b34 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8003ae8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003aec:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003af0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8003af4:	4630      	mov	r0, r6
 8003af6:	4798      	blx	r3
 8003af8:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8003afa:	1e43      	subs	r3, r0, #1
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003b02:	d212      	bcs.n	8003b2a <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8003b04:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 8003b08:	d008      	beq.n	8003b1c <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8003b0e:	490c      	ldr	r1, [pc, #48]	; (8003b40 <AT_ExecuteCommand+0x78>)
 8003b10:	4630      	mov	r0, r6
 8003b12:	f019 faa1 	bl	801d058 <strstr>
 8003b16:	b118      	cbz	r0, 8003b20 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e00a      	b.n	8003b32 <AT_ExecuteCommand+0x6a>
        recv_len--;
 8003b1c:	b21c      	sxth	r4, r3
 8003b1e:	e7f4      	b.n	8003b0a <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003b20:	4908      	ldr	r1, [pc, #32]	; (8003b44 <AT_ExecuteCommand+0x7c>)
 8003b22:	4630      	mov	r0, r6
 8003b24:	f019 fa98 	bl	801d058 <strstr>
 8003b28:	b930      	cbnz	r0, 8003b38 <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003b2a:	f114 0f04 	cmn.w	r4, #4
 8003b2e:	d005      	beq.n	8003b3c <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003b30:	2004      	movs	r0, #4
}
 8003b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 8003b34:	2004      	movs	r0, #4
 8003b36:	e7fc      	b.n	8003b32 <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003b38:	2005      	movs	r0, #5
 8003b3a:	e7fa      	b.n	8003b32 <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8003b3c:	2006      	movs	r0, #6
 8003b3e:	e7f8      	b.n	8003b32 <AT_ExecuteCommand+0x6a>
 8003b40:	0801eb14 	.word	0x0801eb14
 8003b44:	0801eb20 	.word	0x0801eb20

08003b48 <ParseSecurity>:
{
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 8003b4c:	4915      	ldr	r1, [pc, #84]	; (8003ba4 <ParseSecurity+0x5c>)
 8003b4e:	f019 fa83 	bl	801d058 <strstr>
 8003b52:	b108      	cbz	r0, 8003b58 <ParseSecurity+0x10>
 8003b54:	2000      	movs	r0, #0
}
 8003b56:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 8003b58:	4913      	ldr	r1, [pc, #76]	; (8003ba8 <ParseSecurity+0x60>)
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f019 fa7c 	bl	801d058 <strstr>
 8003b60:	b108      	cbz	r0, 8003b66 <ParseSecurity+0x1e>
 8003b62:	2001      	movs	r0, #1
 8003b64:	e7f7      	b.n	8003b56 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8003b66:	4911      	ldr	r1, [pc, #68]	; (8003bac <ParseSecurity+0x64>)
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f019 fa75 	bl	801d058 <strstr>
 8003b6e:	b980      	cbnz	r0, 8003b92 <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8003b70:	490f      	ldr	r1, [pc, #60]	; (8003bb0 <ParseSecurity+0x68>)
 8003b72:	4620      	mov	r0, r4
 8003b74:	f019 fa70 	bl	801d058 <strstr>
 8003b78:	b968      	cbnz	r0, 8003b96 <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8003b7a:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <ParseSecurity+0x6c>)
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f019 fa6b 	bl	801d058 <strstr>
 8003b82:	b950      	cbnz	r0, 8003b9a <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 8003b84:	490c      	ldr	r1, [pc, #48]	; (8003bb8 <ParseSecurity+0x70>)
 8003b86:	4620      	mov	r0, r4
 8003b88:	f019 fa66 	bl	801d058 <strstr>
 8003b8c:	b138      	cbz	r0, 8003b9e <ParseSecurity+0x56>
 8003b8e:	2002      	movs	r0, #2
 8003b90:	e7e1      	b.n	8003b56 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8003b92:	2004      	movs	r0, #4
 8003b94:	e7df      	b.n	8003b56 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8003b96:	2005      	movs	r0, #5
 8003b98:	e7dd      	b.n	8003b56 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	e7db      	b.n	8003b56 <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8003b9e:	20ff      	movs	r0, #255	; 0xff
 8003ba0:	e7d9      	b.n	8003b56 <ParseSecurity+0xe>
 8003ba2:	bf00      	nop
 8003ba4:	0801eb28 	.word	0x0801eb28
 8003ba8:	0801eb30 	.word	0x0801eb30
 8003bac:	0801eb34 	.word	0x0801eb34
 8003bb0:	0801eb40 	.word	0x0801eb40
 8003bb4:	0801eb38 	.word	0x0801eb38
 8003bb8:	0801eb4c 	.word	0x0801eb4c

08003bbc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	460d      	mov	r5, r1
 8003bc4:	4617      	mov	r7, r2
 8003bc6:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8003bc8:	4608      	mov	r0, r1
 8003bca:	f7fc fb9b 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8003bce:	f010 0f01 	tst.w	r0, #1
 8003bd2:	d138      	bne.n	8003c46 <AT_RequestSendData+0x8a>
 8003bd4:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8003bd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003bdc:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003be0:	4641      	mov	r1, r8
 8003be2:	4628      	mov	r0, r5
 8003be4:	4798      	blx	r3
 8003be6:	b280      	uxth	r0, r0
  if (n == cmd_len)
 8003be8:	4580      	cmp	r8, r0
 8003bea:	d002      	beq.n	8003bf2 <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003bec:	2004      	movs	r0, #4
}
 8003bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8003bf2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003bf6:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	4798      	blx	r3
    if (send_len == len)
 8003c00:	42b0      	cmp	r0, r6
 8003c02:	d122      	bne.n	8003c4a <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003c04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c08:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	9806      	ldr	r0, [sp, #24]
 8003c10:	4798      	blx	r3
      if (recv_len > 0)
 8003c12:	2800      	cmp	r0, #0
 8003c14:	dd10      	ble.n	8003c38 <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	9a06      	ldr	r2, [sp, #24]
 8003c1a:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8003c1c:	490d      	ldr	r1, [pc, #52]	; (8003c54 <AT_RequestSendData+0x98>)
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f019 fa1a 	bl	801d058 <strstr>
 8003c24:	b108      	cbz	r0, 8003c2a <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8003c26:	2000      	movs	r0, #0
 8003c28:	e7e1      	b.n	8003bee <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003c2a:	490b      	ldr	r1, [pc, #44]	; (8003c58 <AT_RequestSendData+0x9c>)
 8003c2c:	9806      	ldr	r0, [sp, #24]
 8003c2e:	f019 fa13 	bl	801d058 <strstr>
 8003c32:	b160      	cbz	r0, 8003c4e <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003c34:	2005      	movs	r0, #5
 8003c36:	e7da      	b.n	8003bee <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003c38:	f110 0f04 	cmn.w	r0, #4
 8003c3c:	d001      	beq.n	8003c42 <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 8003c3e:	2002      	movs	r0, #2
 8003c40:	e7d5      	b.n	8003bee <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8003c42:	2006      	movs	r0, #6
 8003c44:	e7d3      	b.n	8003bee <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8003c46:	2002      	movs	r0, #2
 8003c48:	e7d1      	b.n	8003bee <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	e7cf      	b.n	8003bee <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 8003c4e:	2002      	movs	r0, #2
 8003c50:	e7cd      	b.n	8003bee <AT_RequestSendData+0x32>
 8003c52:	bf00      	nop
 8003c54:	0801eb14 	.word	0x0801eb14
 8003c58:	0801eb20 	.word	0x0801eb20

08003c5c <AT_ParseFWRev>:
{
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	460d      	mov	r5, r1
  ptr = strtok(pdata + 1, ".");
 8003c60:	490d      	ldr	r1, [pc, #52]	; (8003c98 <AT_ParseFWRev+0x3c>)
 8003c62:	3001      	adds	r0, #1
 8003c64:	f019 fa0e 	bl	801d084 <strtok>
  uint8_t num = 0;
 8003c68:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 8003c6a:	e005      	b.n	8003c78 <AT_ParseFWRev+0x1c>
    num++;
 8003c6c:	3401      	adds	r4, #1
 8003c6e:	b2e4      	uxtb	r4, r4
    ptr = strtok(NULL, ".");
 8003c70:	4909      	ldr	r1, [pc, #36]	; (8003c98 <AT_ParseFWRev+0x3c>)
 8003c72:	2000      	movs	r0, #0
 8003c74:	f019 fa06 	bl	801d084 <strtok>
  while ((ptr != NULL) && (num < 4)) {
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	bf18      	it	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2c03      	cmp	r4, #3
 8003c80:	bf88      	it	hi
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b133      	cbz	r3, 8003c94 <AT_ParseFWRev+0x38>
    switch (num) {
 8003c86:	2c03      	cmp	r4, #3
 8003c88:	d8f0      	bhi.n	8003c6c <AT_ParseFWRev+0x10>
      ver[num] =  ParseNumber(ptr,0);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f7ff feac 	bl	80039e8 <ParseNumber>
 8003c90:	5528      	strb	r0, [r5, r4]
      break;
 8003c92:	e7eb      	b.n	8003c6c <AT_ParseFWRev+0x10>
}
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
 8003c96:	bf00      	nop
 8003c98:	0801eb50 	.word	0x0801eb50

08003c9c <AT_ParsePing>:
{
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	460c      	mov	r4, r1
  ptr= strtok(pdata,",\n\r");
 8003ca2:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <AT_ParsePing+0x44>)
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f019 f9ed 	bl	801d084 <strtok>
 8003caa:	4603      	mov	r3, r0
  int i=0;
 8003cac:	2600      	movs	r6, #0
  while(ptr)
 8003cae:	b1ab      	cbz	r3, 8003cdc <AT_ParsePing+0x40>
    ptr = strtok(0,"\n\r");
 8003cb0:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <AT_ParsePing+0x48>)
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f019 f9e6 	bl	801d084 <strtok>
    if (ptr)
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d0f7      	beq.n	8003cae <AT_ParsePing+0x12>
      res[i++]=ParseNumber(ptr,0);
 8003cbe:	1c77      	adds	r7, r6, #1
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	f7ff fe91 	bl	80039e8 <ParseNumber>
 8003cc6:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 8003cca:	42bc      	cmp	r4, r7
 8003ccc:	d006      	beq.n	8003cdc <AT_ParsePing+0x40>
      ptr = strtok(0,",\n\r");
 8003cce:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <AT_ParsePing+0x44>)
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f019 f9d7 	bl	801d084 <strtok>
 8003cd6:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 8003cd8:	463e      	mov	r6, r7
 8003cda:	e7e8      	b.n	8003cae <AT_ParsePing+0x12>
}
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	0801eb58 	.word	0x0801eb58
 8003ce4:	0801eb5c 	.word	0x0801eb5c

08003ce8 <AT_ParseTransportSettings>:
{
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	460d      	mov	r5, r1
  ptr = strtok(pdata + 2, ",");
 8003cec:	4936      	ldr	r1, [pc, #216]	; (8003dc8 <AT_ParseTransportSettings+0xe0>)
 8003cee:	3002      	adds	r0, #2
 8003cf0:	f019 f9c8 	bl	801d084 <strtok>
 8003cf4:	4603      	mov	r3, r0
  uint8_t num = 0;
 8003cf6:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8003cf8:	e00f      	b.n	8003d1a <AT_ParseTransportSettings+0x32>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fe73 	bl	80039e8 <ParseNumber>
 8003d02:	7028      	strb	r0, [r5, #0]
    ptr = strtok(NULL, ",");
 8003d04:	4930      	ldr	r1, [pc, #192]	; (8003dc8 <AT_ParseTransportSettings+0xe0>)
 8003d06:	2000      	movs	r0, #0
 8003d08:	f019 f9bc 	bl	801d084 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	b118      	cbz	r0, 8003d18 <AT_ParseTransportSettings+0x30>
 8003d10:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8003d14:	2a2c      	cmp	r2, #44	; 0x2c
 8003d16:	d052      	beq.n	8003dbe <AT_ParseTransportSettings+0xd6>
{
 8003d18:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d052      	beq.n	8003dc4 <AT_ParseTransportSettings+0xdc>
    switch (num++) {
 8003d1e:	1c74      	adds	r4, r6, #1
 8003d20:	b2e4      	uxtb	r4, r4
 8003d22:	2e09      	cmp	r6, #9
 8003d24:	d8ee      	bhi.n	8003d04 <AT_ParseTransportSettings+0x1c>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <AT_ParseTransportSettings+0x44>)
 8003d28:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8003d2c:	08003cfb 	.word	0x08003cfb
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d5f 	.word	0x08003d5f
 8003d38:	08003d6b 	.word	0x08003d6b
 8003d3c:	08003d77 	.word	0x08003d77
 8003d40:	08003d83 	.word	0x08003d83
 8003d44:	08003d8f 	.word	0x08003d8f
 8003d48:	08003d9b 	.word	0x08003d9b
 8003d4c:	08003da7 	.word	0x08003da7
 8003d50:	08003db3 	.word	0x08003db3
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8003d54:	1c69      	adds	r1, r5, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fe88 	bl	8003a6c <ParseIP>
      break;
 8003d5c:	e7d2      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fe41 	bl	80039e8 <ParseNumber>
 8003d66:	80e8      	strh	r0, [r5, #6]
      break;
 8003d68:	e7cc      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8003d6a:	f105 0108 	add.w	r1, r5, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe7c 	bl	8003a6c <ParseIP>
      break;
 8003d74:	e7c6      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fe35 	bl	80039e8 <ParseNumber>
 8003d7e:	81a8      	strh	r0, [r5, #12]
      break;
 8003d80:	e7c0      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fe2f 	bl	80039e8 <ParseNumber>
 8003d8a:	73a8      	strb	r0, [r5, #14]
      break;
 8003d8c:	e7ba      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fe29 	bl	80039e8 <ParseNumber>
 8003d96:	73e8      	strb	r0, [r5, #15]
      break;
 8003d98:	e7b4      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fe23 	bl	80039e8 <ParseNumber>
 8003da2:	7428      	strb	r0, [r5, #16]
      break;
 8003da4:	e7ae      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fe1d 	bl	80039e8 <ParseNumber>
 8003dae:	7468      	strb	r0, [r5, #17]
      break;
 8003db0:	e7a8      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fe17 	bl	80039e8 <ParseNumber>
 8003dba:	74a8      	strb	r0, [r5, #18]
      break;
 8003dbc:	e7a2      	b.n	8003d04 <AT_ParseTransportSettings+0x1c>
      num++;
 8003dbe:	1cb4      	adds	r4, r6, #2
 8003dc0:	b2e4      	uxtb	r4, r4
 8003dc2:	e7a9      	b.n	8003d18 <AT_ParseTransportSettings+0x30>
}
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	bf00      	nop
 8003dc8:	0801eb54 	.word	0x0801eb54

08003dcc <AT_ParseInfo>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	4608      	mov	r0, r1
  ptr = strtok((char *)pdata + 2, ",");
 8003dd2:	492a      	ldr	r1, [pc, #168]	; (8003e7c <AT_ParseInfo+0xb0>)
 8003dd4:	3002      	adds	r0, #2
 8003dd6:	f019 f955 	bl	801d084 <strtok>
  uint8_t num = 0;
 8003dda:	2300      	movs	r3, #0
  while (ptr != NULL){
 8003ddc:	e009      	b.n	8003df2 <AT_ParseInfo+0x26>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8003dde:	2220      	movs	r2, #32
 8003de0:	4601      	mov	r1, r0
 8003de2:	4628      	mov	r0, r5
 8003de4:	f019 f925 	bl	801d032 <strncpy>
    ptr = strtok(NULL, ",");
 8003de8:	4924      	ldr	r1, [pc, #144]	; (8003e7c <AT_ParseInfo+0xb0>)
 8003dea:	2000      	movs	r0, #0
 8003dec:	f019 f94a 	bl	801d084 <strtok>
    switch (num++) {
 8003df0:	4623      	mov	r3, r4
  while (ptr != NULL){
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d040      	beq.n	8003e78 <AT_ParseInfo+0xac>
    switch (num++) {
 8003df6:	1c5c      	adds	r4, r3, #1
 8003df8:	b2e4      	uxtb	r4, r4
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d8f4      	bhi.n	8003de8 <AT_ParseInfo+0x1c>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <AT_ParseInfo+0x38>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003ddf 	.word	0x08003ddf
 8003e08:	08003e21 	.word	0x08003e21
 8003e0c:	08003e2f 	.word	0x08003e2f
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e59 	.word	0x08003e59
 8003e1c:	08003e65 	.word	0x08003e65
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8003e20:	2218      	movs	r2, #24
 8003e22:	4601      	mov	r1, r0
 8003e24:	f105 0020 	add.w	r0, r5, #32
 8003e28:	f019 f903 	bl	801d032 <strncpy>
      break;
 8003e2c:	e7dc      	b.n	8003de8 <AT_ParseInfo+0x1c>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8003e2e:	2210      	movs	r2, #16
 8003e30:	4601      	mov	r1, r0
 8003e32:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8003e36:	f019 f8fc 	bl	801d032 <strncpy>
      break;
 8003e3a:	e7d5      	b.n	8003de8 <AT_ParseInfo+0x1c>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	4601      	mov	r1, r0
 8003e40:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8003e44:	f019 f8f5 	bl	801d032 <strncpy>
      break;
 8003e48:	e7ce      	b.n	8003de8 <AT_ParseInfo+0x1c>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8003e52:	f019 f8ee 	bl	801d032 <strncpy>
      break;
 8003e56:	e7c7      	b.n	8003de8 <AT_ParseInfo+0x1c>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f7ff fdc5 	bl	80039e8 <ParseNumber>
 8003e5e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 8003e62:	e7c1      	b.n	8003de8 <AT_ParseInfo+0x1c>
      ptr = strtok(ptr, "\r");
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <AT_ParseInfo+0xb4>)
 8003e66:	f019 f90d 	bl	801d084 <strtok>
 8003e6a:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8003e72:	f019 f8de 	bl	801d032 <strncpy>
      break;
 8003e76:	e7b7      	b.n	8003de8 <AT_ParseInfo+0x1c>
}
 8003e78:	bd38      	pop	{r3, r4, r5, pc}
 8003e7a:	bf00      	nop
 8003e7c:	0801eb54 	.word	0x0801eb54
 8003e80:	0801eccc 	.word	0x0801eccc

08003e84 <AT_ParseSingleAP>:
{
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	460e      	mov	r6, r1
  ptr = strtok(pdata + 2, ",");
 8003e88:	4926      	ldr	r1, [pc, #152]	; (8003f24 <AT_ParseSingleAP+0xa0>)
 8003e8a:	3002      	adds	r0, #2
 8003e8c:	f019 f8fa 	bl	801d084 <strtok>
 8003e90:	4604      	mov	r4, r0
  uint8_t num = 0;
 8003e92:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8003e94:	e010      	b.n	8003eb8 <AT_ParseSingleAP+0x34>
      ptr[strlen(ptr) - 1] = 0;
 8003e96:	4620      	mov	r0, r4
 8003e98:	f7fc fa34 	bl	8000304 <strlen>
 8003e9c:	3801      	subs	r0, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	1c61      	adds	r1, r4, #1
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f019 f8c3 	bl	801d032 <strncpy>
    ptr = strtok(NULL, ",");
 8003eac:	491d      	ldr	r1, [pc, #116]	; (8003f24 <AT_ParseSingleAP+0xa0>)
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f019 f8e8 	bl	801d084 <strtok>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8003eb8:	b394      	cbz	r4, 8003f20 <AT_ParseSingleAP+0x9c>
    switch (num++) {
 8003eba:	1c5d      	adds	r5, r3, #1
 8003ebc:	b2ed      	uxtb	r5, r5
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2b07      	cmp	r3, #7
 8003ec2:	d8f3      	bhi.n	8003eac <AT_ParseSingleAP+0x28>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <AT_ParseSingleAP+0x48>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003e97 	.word	0x08003e97
 8003ed0:	08003eed 	.word	0x08003eed
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003ead 	.word	0x08003ead
 8003edc:	08003ead 	.word	0x08003ead
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003ead 	.word	0x08003ead
 8003ee8:	08003f11 	.word	0x08003f11
      ParseMAC(ptr, AP->MAC);
 8003eec:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff fd9f 	bl	8003a34 <ParseMAC>
      break;
 8003ef6:	e7d9      	b.n	8003eac <AT_ParseSingleAP+0x28>
      AP->RSSI = ParseNumber(ptr, NULL);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fd74 	bl	80039e8 <ParseNumber>
 8003f00:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 8003f02:	e7d3      	b.n	8003eac <AT_ParseSingleAP+0x28>
      AP->Security = ParseSecurity(ptr);
 8003f04:	4620      	mov	r0, r4
 8003f06:	f7ff fe1f 	bl	8003b48 <ParseSecurity>
 8003f0a:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8003f0e:	e7cd      	b.n	8003eac <AT_ParseSingleAP+0x28>
      AP->Channel = ParseNumber(ptr, NULL);
 8003f10:	2100      	movs	r1, #0
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff fd68 	bl	80039e8 <ParseNumber>
 8003f18:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 8003f1c:	2501      	movs	r5, #1
      break;
 8003f1e:	e7c5      	b.n	8003eac <AT_ParseSingleAP+0x28>
}
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	bf00      	nop
 8003f24:	0801eb54 	.word	0x0801eb54

08003f28 <AT_ParseAP>:
{
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	460f      	mov	r7, r1
  APs->nbr = 0;
 8003f2c:	2400      	movs	r4, #0
 8003f2e:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok(pdata + 2, ",");
 8003f32:	4935      	ldr	r1, [pc, #212]	; (8004008 <AT_ParseAP+0xe0>)
 8003f34:	3002      	adds	r0, #2
 8003f36:	f019 f8a5 	bl	801d084 <strtok>
 8003f3a:	4605      	mov	r5, r0
  uint8_t num = 0;
 8003f3c:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8003f3e:	e014      	b.n	8003f6a <AT_ParseAP+0x42>
      ptr[strlen(ptr) - 1] = 0;
 8003f40:	4628      	mov	r0, r5
 8003f42:	f7fc f9df 	bl	8000304 <strlen>
 8003f46:	3801      	subs	r0, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003f4c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8003f50:	2221      	movs	r2, #33	; 0x21
 8003f52:	1c69      	adds	r1, r5, #1
 8003f54:	202c      	movs	r0, #44	; 0x2c
 8003f56:	fb00 7003 	mla	r0, r0, r3, r7
 8003f5a:	f019 f86a 	bl	801d032 <strncpy>
    ptr = strtok(NULL, ",");
 8003f5e:	492a      	ldr	r1, [pc, #168]	; (8004008 <AT_ParseAP+0xe0>)
 8003f60:	2000      	movs	r0, #0
 8003f62:	f019 f88f 	bl	801d084 <strtok>
 8003f66:	4605      	mov	r5, r0
 8003f68:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	d04a      	beq.n	8004004 <AT_ParseAP+0xdc>
 8003f6e:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8003f72:	2e13      	cmp	r6, #19
 8003f74:	d846      	bhi.n	8004004 <AT_ParseAP+0xdc>
    switch (num++) {
 8003f76:	1c5c      	adds	r4, r3, #1
 8003f78:	b2e4      	uxtb	r4, r4
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	2b07      	cmp	r3, #7
 8003f7e:	d8ee      	bhi.n	8003f5e <AT_ParseAP+0x36>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <AT_ParseAP+0x60>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f41 	.word	0x08003f41
 8003f8c:	08003fa9 	.word	0x08003fa9
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003f5f 	.word	0x08003f5f
 8003f98:	08003f5f 	.word	0x08003f5f
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003f5f 	.word	0x08003f5f
 8003fa4:	08003fe5 	.word	0x08003fe5
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb06 f101 	mul.w	r1, r6, r1
 8003fae:	3120      	adds	r1, #32
 8003fb0:	4439      	add	r1, r7
 8003fb2:	3104      	adds	r1, #4
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f7ff fd3d 	bl	8003a34 <ParseMAC>
      break;
 8003fba:	e7d0      	b.n	8003f5e <AT_ParseAP+0x36>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f7ff fd12 	bl	80039e8 <ParseNumber>
 8003fc4:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8003fc8:	222c      	movs	r2, #44	; 0x2c
 8003fca:	fb02 7303 	mla	r3, r2, r3, r7
 8003fce:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 8003fd0:	e7c5      	b.n	8003f5e <AT_ParseAP+0x36>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7ff fdb8 	bl	8003b48 <ParseSecurity>
 8003fd8:	232c      	movs	r3, #44	; 0x2c
 8003fda:	fb03 7606 	mla	r6, r3, r6, r7
 8003fde:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8003fe2:	e7bc      	b.n	8003f5e <AT_ParseAP+0x36>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f7ff fcfe 	bl	80039e8 <ParseNumber>
 8003fec:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8003ff0:	222c      	movs	r2, #44	; 0x2c
 8003ff2:	fb02 7203 	mla	r2, r2, r3, r7
 8003ff6:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 8004000:	2401      	movs	r4, #1
      break;
 8004002:	e7ac      	b.n	8003f5e <AT_ParseAP+0x36>
}
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004006:	bf00      	nop
 8004008:	0801eb54 	.word	0x0801eb54

0800400c <AT_ParseConnSettings>:
{
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	460d      	mov	r5, r1
  ptr = strtok(pdata + 2, ",");
 8004010:	4941      	ldr	r1, [pc, #260]	; (8004118 <AT_ParseConnSettings+0x10c>)
 8004012:	3002      	adds	r0, #2
 8004014:	f019 f836 	bl	801d084 <strtok>
 8004018:	4603      	mov	r3, r0
  uint8_t num = 0;
 800401a:	2600      	movs	r6, #0
  while (ptr != NULL) {
 800401c:	e00f      	b.n	800403e <AT_ParseConnSettings+0x32>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800401e:	2221      	movs	r2, #33	; 0x21
 8004020:	4619      	mov	r1, r3
 8004022:	4628      	mov	r0, r5
 8004024:	f019 f805 	bl	801d032 <strncpy>
    ptr = strtok(NULL, ",");
 8004028:	493b      	ldr	r1, [pc, #236]	; (8004118 <AT_ParseConnSettings+0x10c>)
 800402a:	2000      	movs	r0, #0
 800402c:	f019 f82a 	bl	801d084 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8004030:	4603      	mov	r3, r0
 8004032:	b118      	cbz	r0, 800403c <AT_ParseConnSettings+0x30>
 8004034:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8004038:	2a2c      	cmp	r2, #44	; 0x2c
 800403a:	d068      	beq.n	800410e <AT_ParseConnSettings+0x102>
{
 800403c:	4626      	mov	r6, r4
  while (ptr != NULL) {
 800403e:	2b00      	cmp	r3, #0
 8004040:	d068      	beq.n	8004114 <AT_ParseConnSettings+0x108>
    switch (num++) {
 8004042:	1c74      	adds	r4, r6, #1
 8004044:	b2e4      	uxtb	r4, r4
 8004046:	2e0b      	cmp	r6, #11
 8004048:	d8ee      	bhi.n	8004028 <AT_ParseConnSettings+0x1c>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <AT_ParseConnSettings+0x44>)
 800404c:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8004050:	0800401f 	.word	0x0800401f
 8004054:	08004081 	.word	0x08004081
 8004058:	0800408d 	.word	0x0800408d
 800405c:	0800409b 	.word	0x0800409b
 8004060:	080040a9 	.word	0x080040a9
 8004064:	080040b7 	.word	0x080040b7
 8004068:	080040c3 	.word	0x080040c3
 800406c:	080040cf 	.word	0x080040cf
 8004070:	080040db 	.word	0x080040db
 8004074:	080040e7 	.word	0x080040e7
 8004078:	080040f3 	.word	0x080040f3
 800407c:	08004101 	.word	0x08004101
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8004080:	2221      	movs	r2, #33	; 0x21
 8004082:	4619      	mov	r1, r3
 8004084:	18a8      	adds	r0, r5, r2
 8004086:	f018 ffd4 	bl	801d032 <strncpy>
      break;
 800408a:	e7cd      	b.n	8004028 <AT_ParseConnSettings+0x1c>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fcaa 	bl	80039e8 <ParseNumber>
 8004094:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8004098:	e7c6      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fca3 	bl	80039e8 <ParseNumber>
 80040a2:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 80040a6:	e7bf      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fc9c 	bl	80039e8 <ParseNumber>
 80040b0:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 80040b4:	e7b8      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      ParseIP(ptr, NetSettings->IP_Addr);
 80040b6:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fcd6 	bl	8003a6c <ParseIP>
      break;
 80040c0:	e7b2      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      ParseIP(ptr, NetSettings->IP_Mask);
 80040c2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fcd0 	bl	8003a6c <ParseIP>
      break;
 80040cc:	e7ac      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80040ce:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fcca 	bl	8003a6c <ParseIP>
      break;
 80040d8:	e7a6      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      ParseIP(ptr, NetSettings->DNS1);
 80040da:	f105 0154 	add.w	r1, r5, #84	; 0x54
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fcc4 	bl	8003a6c <ParseIP>
      break;
 80040e4:	e7a0      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      ParseIP(ptr, NetSettings->DNS2);
 80040e6:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fcbe 	bl	8003a6c <ParseIP>
      break;
 80040f0:	e79a      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fc77 	bl	80039e8 <ParseNumber>
 80040fa:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 80040fe:	e793      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fc70 	bl	80039e8 <ParseNumber>
 8004108:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 800410c:	e78c      	b.n	8004028 <AT_ParseConnSettings+0x1c>
      num++;
 800410e:	1cb4      	adds	r4, r6, #2
 8004110:	b2e4      	uxtb	r4, r4
 8004112:	e793      	b.n	800403c <AT_ParseConnSettings+0x30>
}
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	bf00      	nop
 8004118:	0801eb54 	.word	0x0801eb54

0800411c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800411c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004120:	4604      	mov	r4, r0
 8004122:	460d      	mov	r5, r1
 8004124:	4690      	mov	r8, r2
 8004126:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8004128:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800412c:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8004130:	4608      	mov	r0, r1
 8004132:	f7fc f8e7 	bl	8000304 <strlen>
 8004136:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800413a:	b281      	uxth	r1, r0
 800413c:	4628      	mov	r0, r5
 800413e:	47b8      	blx	r7
 8004140:	2800      	cmp	r0, #0
 8004142:	dd48      	ble.n	80041d6 <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8004144:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004148:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800414c:	2100      	movs	r1, #0
 800414e:	4648      	mov	r0, r9
 8004150:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8004152:	f110 0f04 	cmn.w	r0, #4
 8004156:	d041      	beq.n	80041dc <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8004158:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 800415c:	2b0d      	cmp	r3, #13
 800415e:	d13f      	bne.n	80041e0 <AT_RequestReceiveData+0xc4>
 8004160:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8004164:	2b0a      	cmp	r3, #10
 8004166:	d13d      	bne.n	80041e4 <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8004168:	1e85      	subs	r5, r0, #2
    p+=2;
 800416a:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 800416e:	2d07      	cmp	r5, #7
 8004170:	d802      	bhi.n	8004178 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8004172:	2004      	movs	r0, #4
 8004174:	e030      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 8004176:	3d01      	subs	r5, #1
 8004178:	b125      	cbz	r5, 8004184 <AT_RequestReceiveData+0x68>
 800417a:	1963      	adds	r3, r4, r5
 800417c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004180:	2b15      	cmp	r3, #21
 8004182:	d0f8      	beq.n	8004176 <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8004184:	2300      	movs	r3, #0
 8004186:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8004188:	f1a5 0008 	sub.w	r0, r5, #8
 800418c:	4916      	ldr	r1, [pc, #88]	; (80041e8 <AT_RequestReceiveData+0xcc>)
 800418e:	4420      	add	r0, r4
 8004190:	f018 ff62 	bl	801d058 <strstr>
 8004194:	b170      	cbz	r0, 80041b4 <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 8004196:	3d08      	subs	r5, #8
 8004198:	b2ad      	uxth	r5, r5
 800419a:	9b08      	ldr	r3, [sp, #32]
 800419c:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 800419e:	42b5      	cmp	r5, r6
 80041a0:	d900      	bls.n	80041a4 <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 80041a2:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 80041a4:	9b08      	ldr	r3, [sp, #32]
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	4621      	mov	r1, r4
 80041aa:	4640      	mov	r0, r8
 80041ac:	f018 fa28 	bl	801c600 <memcpy>
       return ES_WIFI_STATUS_OK;
 80041b0:	2000      	movs	r0, #0
 80041b2:	e011      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80041b4:	1f28      	subs	r0, r5, #4
 80041b6:	2204      	movs	r2, #4
 80041b8:	490c      	ldr	r1, [pc, #48]	; (80041ec <AT_RequestReceiveData+0xd0>)
 80041ba:	4420      	add	r0, r4
 80041bc:	f018 fa10 	bl	801c5e0 <memcmp>
 80041c0:	b920      	cbnz	r0, 80041cc <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	9a08      	ldr	r2, [sp, #32]
 80041c6:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80041c8:	2005      	movs	r0, #5
 80041ca:	e005      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	9a08      	ldr	r2, [sp, #32]
 80041d0:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80041d2:	2005      	movs	r0, #5
 80041d4:	e000      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 80041d6:	2004      	movs	r0, #4
}
 80041d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 80041dc:	2006      	movs	r0, #6
 80041de:	e7fb      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 80041e0:	2004      	movs	r0, #4
 80041e2:	e7f9      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
 80041e4:	2004      	movs	r0, #4
 80041e6:	e7f7      	b.n	80041d8 <AT_RequestReceiveData+0xbc>
 80041e8:	0801eb14 	.word	0x0801eb14
 80041ec:	0801eb18 	.word	0x0801eb18

080041f0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80041f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f8:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80041fc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8004200:	2000      	movs	r0, #0
 8004202:	4798      	blx	r3
 8004204:	b110      	cbz	r0, 800420c <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004206:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8004208:	4628      	mov	r0, r5
 800420a:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800420c:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8004210:	4632      	mov	r2, r6
 8004212:	4906      	ldr	r1, [pc, #24]	; (800422c <ES_WIFI_Init+0x3c>)
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff fc57 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800421a:	4605      	mov	r5, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	d1f3      	bne.n	8004208 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8004220:	4631      	mov	r1, r6
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff fdd2 	bl	8003dcc <AT_ParseInfo>
 8004228:	e7ee      	b.n	8004208 <ES_WIFI_Init+0x18>
 800422a:	bf00      	nop
 800422c:	0801eb60 	.word	0x0801eb60

08004230 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8004230:	b470      	push	{r4, r5, r6}
 8004232:	9c03      	ldr	r4, [sp, #12]
 8004234:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8004236:	2900      	cmp	r1, #0
 8004238:	bf18      	it	ne
 800423a:	2800      	cmpne	r0, #0
 800423c:	d013      	beq.n	8004266 <ES_WIFI_RegisterBusIO+0x36>
 800423e:	460e      	mov	r6, r1
 8004240:	fab4 f184 	clz	r1, r4
 8004244:	0949      	lsrs	r1, r1, #5
 8004246:	b182      	cbz	r2, 800426a <ES_WIFI_RegisterBusIO+0x3a>
 8004248:	b979      	cbnz	r1, 800426a <ES_WIFI_RegisterBusIO+0x3a>
 800424a:	b185      	cbz	r5, 800426e <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 800424c:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8004250:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8004254:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8004258:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800425c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8004260:	2000      	movs	r0, #0
}
 8004262:	bc70      	pop	{r4, r5, r6}
 8004264:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8004266:	2002      	movs	r0, #2
 8004268:	e7fb      	b.n	8004262 <ES_WIFI_RegisterBusIO+0x32>
 800426a:	2002      	movs	r0, #2
 800426c:	e7f9      	b.n	8004262 <ES_WIFI_RegisterBusIO+0x32>
 800426e:	2002      	movs	r0, #2
 8004270:	e7f7      	b.n	8004262 <ES_WIFI_RegisterBusIO+0x32>
	...

08004274 <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b083      	sub	sp, #12
 8004278:	4606      	mov	r6, r0
 800427a:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 800427c:	2300      	movs	r3, #0
 800427e:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8004280:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8004284:	f100 0120 	add.w	r1, r0, #32
 8004288:	4620      	mov	r0, r4
 800428a:	f018 fe5b 	bl	801cf44 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 800428e:	a901      	add	r1, sp, #4
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff fce3 	bl	8003c5c <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8004296:	a801      	add	r0, sp, #4
 8004298:	f7ff fc04 	bl	8003aa4 <ArrayTo32bit>
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <ES_WIFI_ListAccessPoints+0x104>)
 800429e:	4298      	cmp	r0, r3
 80042a0:	d958      	bls.n	8004354 <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 80042a8:	4b34      	ldr	r3, [pc, #208]	; (800437c <ES_WIFI_ListAccessPoints+0x108>)
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 80042b0:	889b      	ldrh	r3, [r3, #4]
 80042b2:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 80042b4:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7fc f823 	bl	8000304 <strlen>
 80042be:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 80042c2:	b281      	uxth	r1, r0
 80042c4:	4620      	mov	r0, r4
 80042c6:	47a8      	blx	r5

    if (send_len == 5)
 80042c8:	2805      	cmp	r0, #5
 80042ca:	d019      	beq.n	8004300 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 80042cc:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 80042ce:	4628      	mov	r0, r5
 80042d0:	b003      	add	sp, #12
 80042d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80042d4:	f115 0f04 	cmn.w	r5, #4
 80042d8:	d04b      	beq.n	8004372 <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 80042da:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80042de:	2b13      	cmp	r3, #19
 80042e0:	d92c      	bls.n	800433c <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <ES_WIFI_ListAccessPoints+0x10c>)
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 80042e8:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7fc f809 	bl	8000304 <strlen>
 80042f2:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 80042f6:	b281      	uxth	r1, r0
 80042f8:	4620      	mov	r0, r4
 80042fa:	47a8      	blx	r5
	  } while (send_len == 3);
 80042fc:	2803      	cmp	r0, #3
 80042fe:	d1e5      	bne.n	80042cc <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8004300:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8004304:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8004308:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800430c:	4620      	mov	r0, r4
 800430e:	4798      	blx	r3
 8004310:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8004312:	1e43      	subs	r3, r0, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	f240 5276 	movw	r2, #1398	; 0x576
 800431a:	4293      	cmp	r3, r2
 800431c:	d8da      	bhi.n	80042d4 <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8004322:	4918      	ldr	r1, [pc, #96]	; (8004384 <ES_WIFI_ListAccessPoints+0x110>)
 8004324:	4620      	mov	r0, r4
 8004326:	f018 fe97 	bl	801d058 <strstr>
 800432a:	bb00      	cbnz	r0, 800436e <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <ES_WIFI_ListAccessPoints+0x114>)
 800432e:	4620      	mov	r0, r4
 8004330:	f018 fe92 	bl	801d058 <strstr>
 8004334:	2800      	cmp	r0, #0
 8004336:	d0cd      	beq.n	80042d4 <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004338:	2505      	movs	r5, #5
 800433a:	e7c8      	b.n	80042ce <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 7103 	mla	r1, r1, r3, r7
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff fd9e 	bl	8003e84 <AT_ParseSingleAP>
          APs->nbr++;
 8004348:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 800434c:	3301      	adds	r3, #1
 800434e:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8004352:	e7c6      	b.n	80042e2 <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8004354:	4622      	mov	r2, r4
 8004356:	490d      	ldr	r1, [pc, #52]	; (800438c <ES_WIFI_ListAccessPoints+0x118>)
 8004358:	4630      	mov	r0, r6
 800435a:	f7ff fbb5 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800435e:	4605      	mov	r5, r0
 8004360:	2800      	cmp	r0, #0
 8004362:	d1b4      	bne.n	80042ce <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 8004364:	4639      	mov	r1, r7
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff fdde 	bl	8003f28 <AT_ParseAP>
    return ret;
 800436c:	e7af      	b.n	80042ce <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 800436e:	2500      	movs	r5, #0
 8004370:	e7ad      	b.n	80042ce <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 8004372:	2506      	movs	r5, #6
 8004374:	e7ab      	b.n	80042ce <ES_WIFI_ListAccessPoints+0x5a>
 8004376:	bf00      	nop
 8004378:	03050204 	.word	0x03050204
 800437c:	0801eb68 	.word	0x0801eb68
 8004380:	0801eb70 	.word	0x0801eb70
 8004384:	0801eb14 	.word	0x0801eb14
 8004388:	0801eb20 	.word	0x0801eb20
 800438c:	0801eb74 	.word	0x0801eb74

08004390 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8004390:	2a00      	cmp	r2, #0
 8004392:	bf18      	it	ne
 8004394:	2900      	cmpne	r1, #0
 8004396:	d101      	bne.n	800439c <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8004398:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 800439a:	4770      	bx	lr
{
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	4604      	mov	r4, r0
 80043a0:	461e      	mov	r6, r3
 80043a2:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80043a4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80043a8:	460a      	mov	r2, r1
 80043aa:	491a      	ldr	r1, [pc, #104]	; (8004414 <ES_WIFI_Connect+0x84>)
 80043ac:	4628      	mov	r0, r5
 80043ae:	f018 fdc9 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043b2:	462a      	mov	r2, r5
 80043b4:	4629      	mov	r1, r5
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff fb86 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80043bc:	b100      	cbz	r0, 80043c0 <ES_WIFI_Connect+0x30>
}
 80043be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80043c0:	463a      	mov	r2, r7
 80043c2:	4915      	ldr	r1, [pc, #84]	; (8004418 <ES_WIFI_Connect+0x88>)
 80043c4:	4628      	mov	r0, r5
 80043c6:	f018 fdbd 	bl	801cf44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043ca:	462a      	mov	r2, r5
 80043cc:	4629      	mov	r1, r5
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fb7a 	bl	8003ac8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1f2      	bne.n	80043be <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 80043d8:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80043dc:	4632      	mov	r2, r6
 80043de:	490f      	ldr	r1, [pc, #60]	; (800441c <ES_WIFI_Connect+0x8c>)
 80043e0:	4628      	mov	r0, r5
 80043e2:	f018 fdaf 	bl	801cf44 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043e6:	462a      	mov	r2, r5
 80043e8:	4629      	mov	r1, r5
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff fb6c 	bl	8003ac8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d1e4      	bne.n	80043be <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <ES_WIFI_Connect+0x90>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043fc:	462a      	mov	r2, r5
 80043fe:	4629      	mov	r1, r5
 8004400:	4620      	mov	r0, r4
 8004402:	f7ff fb61 	bl	8003ac8 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8004406:	2800      	cmp	r0, #0
 8004408:	d1d9      	bne.n	80043be <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8004410:	e7d5      	b.n	80043be <ES_WIFI_Connect+0x2e>
 8004412:	bf00      	nop
 8004414:	0801eb78 	.word	0x0801eb78
 8004418:	0801eb80 	.word	0x0801eb80
 800441c:	0801eb88 	.word	0x0801eb88
 8004420:	0801eb90 	.word	0x0801eb90

08004424 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8004428:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <ES_WIFI_IsConnected+0x30>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004434:	462a      	mov	r2, r5
 8004436:	4629      	mov	r1, r5
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff fb45 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800443e:	b110      	cbz	r0, 8004446 <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8004440:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8004444:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8004446:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 800444a:	4628      	mov	r0, r5
 800444c:	f7ff fb35 	bl	8003aba <AT_ParseIsConnected>
 8004450:	e7f6      	b.n	8004440 <ES_WIFI_IsConnected+0x1c>
 8004452:	bf00      	nop
 8004454:	0801eb94 	.word	0x0801eb94

08004458 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8004458:	b508      	push	{r3, lr}
 800445a:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 800445c:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <ES_WIFI_Disconnect+0x1c>)
 8004462:	6810      	ldr	r0, [r2, #0]
 8004464:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004468:	460a      	mov	r2, r1
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fb2c 	bl	8003ac8 <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8004470:	bd08      	pop	{r3, pc}
 8004472:	bf00      	nop
 8004474:	0801eb98 	.word	0x0801eb98

08004478 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800447c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <ES_WIFI_GetNetworkSettings+0x30>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004488:	462a      	mov	r2, r5
 800448a:	4629      	mov	r1, r5
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff fb1b 	bl	8003ac8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8004492:	4606      	mov	r6, r0
 8004494:	b108      	cbz	r0, 800449a <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 8004496:	4630      	mov	r0, r6
 8004498:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800449a:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 800449e:	4628      	mov	r0, r5
 80044a0:	f7ff fdb4 	bl	800400c <AT_ParseConnSettings>
 80044a4:	e7f7      	b.n	8004496 <ES_WIFI_GetNetworkSettings+0x1e>
 80044a6:	bf00      	nop
 80044a8:	0801eb9c 	.word	0x0801eb9c

080044ac <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	4604      	mov	r4, r0
 80044b0:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 80044b2:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80044b6:	460a      	mov	r2, r1
 80044b8:	492b      	ldr	r1, [pc, #172]	; (8004568 <ES_WIFI_ActivateAP+0xbc>)
 80044ba:	4628      	mov	r0, r5
 80044bc:	f018 fd42 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044c0:	462a      	mov	r2, r5
 80044c2:	4629      	mov	r1, r5
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff faff 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80044ca:	4607      	mov	r7, r0
 80044cc:	b108      	cbz	r0, 80044d2 <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80044ce:	4638      	mov	r0, r7
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 80044d2:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 80044d6:	3230      	adds	r2, #48	; 0x30
 80044d8:	4924      	ldr	r1, [pc, #144]	; (800456c <ES_WIFI_ActivateAP+0xc0>)
 80044da:	4628      	mov	r0, r5
 80044dc:	f018 fd32 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044e0:	462a      	mov	r2, r5
 80044e2:	4629      	mov	r1, r5
 80044e4:	4620      	mov	r0, r4
 80044e6:	f7ff faef 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80044ea:	4607      	mov	r7, r0
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1ee      	bne.n	80044ce <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 80044f0:	f106 0221 	add.w	r2, r6, #33	; 0x21
 80044f4:	491e      	ldr	r1, [pc, #120]	; (8004570 <ES_WIFI_ActivateAP+0xc4>)
 80044f6:	4628      	mov	r0, r5
 80044f8:	f018 fd24 	bl	801cf44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044fc:	462a      	mov	r2, r5
 80044fe:	4629      	mov	r1, r5
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff fae1 	bl	8003ac8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004506:	4607      	mov	r7, r0
 8004508:	2800      	cmp	r0, #0
 800450a:	d1e0      	bne.n	80044ce <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 800450c:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8004510:	4918      	ldr	r1, [pc, #96]	; (8004574 <ES_WIFI_ActivateAP+0xc8>)
 8004512:	4628      	mov	r0, r5
 8004514:	f018 fd16 	bl	801cf44 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004518:	462a      	mov	r2, r5
 800451a:	4629      	mov	r1, r5
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff fad3 	bl	8003ac8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8004522:	4607      	mov	r7, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d1d2      	bne.n	80044ce <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8004528:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 800452c:	4912      	ldr	r1, [pc, #72]	; (8004578 <ES_WIFI_ActivateAP+0xcc>)
 800452e:	4628      	mov	r0, r5
 8004530:	f018 fd08 	bl	801cf44 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004534:	462a      	mov	r2, r5
 8004536:	4629      	mov	r1, r5
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fac5 	bl	8003ac8 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 800453e:	4607      	mov	r7, r0
 8004540:	2800      	cmp	r0, #0
 8004542:	d1c4      	bne.n	80044ce <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <ES_WIFI_ActivateAP+0xd0>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800454c:	462a      	mov	r2, r5
 800454e:	4629      	mov	r1, r5
 8004550:	4620      	mov	r0, r4
 8004552:	f7ff fab9 	bl	8003ac8 <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 8004556:	4607      	mov	r7, r0
 8004558:	2800      	cmp	r0, #0
 800455a:	d1b8      	bne.n	80044ce <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 800455c:	4908      	ldr	r1, [pc, #32]	; (8004580 <ES_WIFI_ActivateAP+0xd4>)
 800455e:	4628      	mov	r0, r5
 8004560:	f018 fd7a 	bl	801d058 <strstr>
 8004564:	e7b3      	b.n	80044ce <ES_WIFI_ActivateAP+0x22>
 8004566:	bf00      	nop
 8004568:	0801eba0 	.word	0x0801eba0
 800456c:	0801ebac 	.word	0x0801ebac
 8004570:	0801ebb4 	.word	0x0801ebb4
 8004574:	0801ebbc 	.word	0x0801ebbc
 8004578:	0801ebc4 	.word	0x0801ebc4
 800457c:	0801ebcc 	.word	0x0801ebcc
 8004580:	0801ebd0 	.word	0x0801ebd0

08004584 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800458a:	f500 7194 	add.w	r1, r0, #296	; 0x128
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <ES_WIFI_GetMACAddress+0x34>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004596:	460a      	mov	r2, r1
 8004598:	4620      	mov	r0, r4
 800459a:	f7ff fa95 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800459e:	4606      	mov	r6, r0
 80045a0:	b108      	cbz	r0, 80045a6 <ES_WIFI_GetMACAddress+0x22>
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 80045a2:	4630      	mov	r0, r6
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80045a6:	4905      	ldr	r1, [pc, #20]	; (80045bc <ES_WIFI_GetMACAddress+0x38>)
 80045a8:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80045ac:	f018 fd6a 	bl	801d084 <strtok>
    ParseMAC(ptr, mac) ;
 80045b0:	4629      	mov	r1, r5
 80045b2:	f7ff fa3f 	bl	8003a34 <ParseMAC>
 80045b6:	e7f4      	b.n	80045a2 <ES_WIFI_GetMACAddress+0x1e>
 80045b8:	0801ebdc 	.word	0x0801ebdc
 80045bc:	0801ebe0 	.word	0x0801ebe0

080045c0 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	4605      	mov	r5, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	4617      	mov	r7, r2
 80045cc:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295
 80045d4:	9808      	ldr	r0, [sp, #32]
 80045d6:	f018 f821 	bl	801c61c <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 80045da:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 80045de:	78a3      	ldrb	r3, [r4, #2]
 80045e0:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 80045e2:	9201      	str	r2, [sp, #4]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	7863      	ldrb	r3, [r4, #1]
 80045e8:	7822      	ldrb	r2, [r4, #0]
 80045ea:	491f      	ldr	r1, [pc, #124]	; (8004668 <ES_WIFI_Ping+0xa8>)
 80045ec:	4630      	mov	r0, r6
 80045ee:	f018 fca9 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80045f2:	4632      	mov	r2, r6
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7ff fa66 	bl	8003ac8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80045fc:	4604      	mov	r4, r0
 80045fe:	b118      	cbz	r0, 8004608 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8004600:	4620      	mov	r0, r4
 8004602:	b002      	add	sp, #8
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8004608:	463a      	mov	r2, r7
 800460a:	4918      	ldr	r1, [pc, #96]	; (800466c <ES_WIFI_Ping+0xac>)
 800460c:	4630      	mov	r0, r6
 800460e:	f018 fc99 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004612:	4632      	mov	r2, r6
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	f7ff fa56 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800461c:	4604      	mov	r4, r0
 800461e:	2800      	cmp	r0, #0
 8004620:	d1ee      	bne.n	8004600 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 8004622:	4642      	mov	r2, r8
 8004624:	4912      	ldr	r1, [pc, #72]	; (8004670 <ES_WIFI_Ping+0xb0>)
 8004626:	4630      	mov	r0, r6
 8004628:	f018 fc8c 	bl	801cf44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800462c:	4632      	mov	r2, r6
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	f7ff fa49 	bl	8003ac8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004636:	4604      	mov	r4, r0
 8004638:	2800      	cmp	r0, #0
 800463a:	d1e1      	bne.n	8004600 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <ES_WIFI_Ping+0xb4>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800464a:	4632      	mov	r2, r6
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	f7ff fa3a 	bl	8003ac8 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8004654:	4604      	mov	r4, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d1d2      	bne.n	8004600 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 800465a:	4632      	mov	r2, r6
 800465c:	4639      	mov	r1, r7
 800465e:	9808      	ldr	r0, [sp, #32]
 8004660:	f7ff fb1c 	bl	8003c9c <AT_ParsePing>
 8004664:	e7cc      	b.n	8004600 <ES_WIFI_Ping+0x40>
 8004666:	bf00      	nop
 8004668:	0801ebe4 	.word	0x0801ebe4
 800466c:	0801ebf4 	.word	0x0801ebf4
 8004670:	0801ebfc 	.word	0x0801ebfc
 8004674:	0801ec04 	.word	0x0801ec04

08004678 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 800467e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004682:	460a      	mov	r2, r1
 8004684:	490a      	ldr	r1, [pc, #40]	; (80046b0 <ES_WIFI_DNS_LookUp+0x38>)
 8004686:	4628      	mov	r0, r5
 8004688:	f018 fc5c 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800468c:	462a      	mov	r2, r5
 800468e:	4629      	mov	r1, r5
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff fa19 	bl	8003ac8 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8004696:	4605      	mov	r5, r0
 8004698:	b108      	cbz	r0, 800469e <ES_WIFI_DNS_LookUp+0x26>
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 800469a:	4628      	mov	r0, r5
 800469c:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 800469e:	4905      	ldr	r1, [pc, #20]	; (80046b4 <ES_WIFI_DNS_LookUp+0x3c>)
 80046a0:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80046a4:	f018 fcee 	bl	801d084 <strtok>
    ParseIP(ptr, ipaddress);
 80046a8:	4631      	mov	r1, r6
 80046aa:	f7ff f9df 	bl	8003a6c <ParseIP>
 80046ae:	e7f4      	b.n	800469a <ES_WIFI_DNS_LookUp+0x22>
 80046b0:	0801ec0c 	.word	0x0801ec0c
 80046b4:	0801eccc 	.word	0x0801eccc

080046b8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	4605      	mov	r5, r0
 80046be:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80046c0:	780b      	ldrb	r3, [r1, #0]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	bf18      	it	ne
 80046c6:	2b00      	cmpne	r3, #0
 80046c8:	d102      	bne.n	80046d0 <ES_WIFI_StartClientConnection+0x18>
 80046ca:	888b      	ldrh	r3, [r1, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d079      	beq.n	80047c4 <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80046d0:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80046d4:	78b2      	ldrb	r2, [r6, #2]
 80046d6:	493c      	ldr	r1, [pc, #240]	; (80047c8 <ES_WIFI_StartClientConnection+0x110>)
 80046d8:	4620      	mov	r0, r4
 80046da:	f018 fc33 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80046de:	4622      	mov	r2, r4
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7ff f9f0 	bl	8003ac8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80046e8:	b1c0      	cbz	r0, 800471c <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80046ea:	b310      	cbz	r0, 8004732 <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80046ec:	b920      	cbnz	r0, 80046f8 <ES_WIFI_StartClientConnection+0x40>
 80046ee:	7833      	ldrb	r3, [r6, #0]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	bf18      	it	ne
 80046f4:	2b00      	cmpne	r3, #0
 80046f6:	d027      	beq.n	8004748 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80046f8:	b920      	cbnz	r0, 8004704 <ES_WIFI_StartClientConnection+0x4c>
 80046fa:	7833      	ldrb	r3, [r6, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	bf18      	it	ne
 8004700:	2b00      	cmpne	r3, #0
 8004702:	d02c      	beq.n	800475e <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8004704:	b910      	cbnz	r0, 800470c <ES_WIFI_StartClientConnection+0x54>
 8004706:	7833      	ldrb	r3, [r6, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d038      	beq.n	800477e <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800470c:	b910      	cbnz	r0, 8004714 <ES_WIFI_StartClientConnection+0x5c>
 800470e:	7833      	ldrb	r3, [r6, #0]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d03f      	beq.n	8004794 <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8004714:	2800      	cmp	r0, #0
 8004716:	d049      	beq.n	80047ac <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8004718:	b002      	add	sp, #8
 800471a:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800471c:	7832      	ldrb	r2, [r6, #0]
 800471e:	492b      	ldr	r1, [pc, #172]	; (80047cc <ES_WIFI_StartClientConnection+0x114>)
 8004720:	4620      	mov	r0, r4
 8004722:	f018 fc0f 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004726:	4622      	mov	r2, r4
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f7ff f9cc 	bl	8003ac8 <AT_ExecuteCommand>
 8004730:	e7db      	b.n	80046ea <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8004732:	88f2      	ldrh	r2, [r6, #6]
 8004734:	4926      	ldr	r1, [pc, #152]	; (80047d0 <ES_WIFI_StartClientConnection+0x118>)
 8004736:	4620      	mov	r0, r4
 8004738:	f018 fc04 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800473c:	4622      	mov	r2, r4
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f7ff f9c1 	bl	8003ac8 <AT_ExecuteCommand>
 8004746:	e7d1      	b.n	80046ec <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8004748:	88b2      	ldrh	r2, [r6, #4]
 800474a:	4922      	ldr	r1, [pc, #136]	; (80047d4 <ES_WIFI_StartClientConnection+0x11c>)
 800474c:	4620      	mov	r0, r4
 800474e:	f018 fbf9 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004752:	4622      	mov	r2, r4
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f7ff f9b6 	bl	8003ac8 <AT_ExecuteCommand>
 800475c:	e7cc      	b.n	80046f8 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800475e:	7ab3      	ldrb	r3, [r6, #10]
 8004760:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004762:	9201      	str	r2, [sp, #4]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	7a73      	ldrb	r3, [r6, #9]
 8004768:	7a32      	ldrb	r2, [r6, #8]
 800476a:	491b      	ldr	r1, [pc, #108]	; (80047d8 <ES_WIFI_StartClientConnection+0x120>)
 800476c:	4620      	mov	r0, r4
 800476e:	f018 fbe9 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004772:	4622      	mov	r2, r4
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff f9a6 	bl	8003ac8 <AT_ExecuteCommand>
 800477c:	e7c2      	b.n	8004704 <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 800477e:	7872      	ldrb	r2, [r6, #1]
 8004780:	4916      	ldr	r1, [pc, #88]	; (80047dc <ES_WIFI_StartClientConnection+0x124>)
 8004782:	4620      	mov	r0, r4
 8004784:	f018 fbde 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004788:	4622      	mov	r2, r4
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff f99b 	bl	8003ac8 <AT_ExecuteCommand>
 8004792:	e7bb      	b.n	800470c <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <ES_WIFI_StartClientConnection+0x128>)
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800479c:	889b      	ldrh	r3, [r3, #4]
 800479e:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047a0:	4622      	mov	r2, r4
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff f98f 	bl	8003ac8 <AT_ExecuteCommand>
 80047aa:	e7b3      	b.n	8004714 <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80047ac:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <ES_WIFI_StartClientConnection+0x12c>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80047b4:	889b      	ldrh	r3, [r3, #4]
 80047b6:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047b8:	4622      	mov	r2, r4
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	f7ff f983 	bl	8003ac8 <AT_ExecuteCommand>
 80047c2:	e7a9      	b.n	8004718 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80047c4:	2002      	movs	r0, #2
 80047c6:	e7a7      	b.n	8004718 <ES_WIFI_StartClientConnection+0x60>
 80047c8:	0801ec14 	.word	0x0801ec14
 80047cc:	0801ec1c 	.word	0x0801ec1c
 80047d0:	0801ec24 	.word	0x0801ec24
 80047d4:	0801ec2c 	.word	0x0801ec2c
 80047d8:	0801ec34 	.word	0x0801ec34
 80047dc:	0801ec44 	.word	0x0801ec44
 80047e0:	0801ec4c 	.word	0x0801ec4c
 80047e4:	0801ec54 	.word	0x0801ec54

080047e8 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80047ec:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80047f0:	788a      	ldrb	r2, [r1, #2]
 80047f2:	490c      	ldr	r1, [pc, #48]	; (8004824 <ES_WIFI_StopClientConnection+0x3c>)
 80047f4:	4628      	mov	r0, r5
 80047f6:	f018 fba5 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80047fa:	462a      	mov	r2, r5
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff f962 	bl	8003ac8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004804:	b100      	cbz	r0, 8004808 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 8004806:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <ES_WIFI_StopClientConnection+0x40>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004810:	889b      	ldrh	r3, [r3, #4]
 8004812:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004816:	462a      	mov	r2, r5
 8004818:	4629      	mov	r1, r5
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff f954 	bl	8003ac8 <AT_ExecuteCommand>
 8004820:	e7f1      	b.n	8004806 <ES_WIFI_StopClientConnection+0x1e>
 8004822:	bf00      	nop
 8004824:	0801ec14 	.word	0x0801ec14
 8004828:	0801ec5c 	.word	0x0801ec5c

0800482c <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	4605      	mov	r5, r0
 8004830:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004832:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8004836:	788a      	ldrb	r2, [r1, #2]
 8004838:	492c      	ldr	r1, [pc, #176]	; (80048ec <ES_WIFI_StartServerSingleConn+0xc0>)
 800483a:	4620      	mov	r0, r4
 800483c:	f018 fb82 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004840:	4622      	mov	r2, r4
 8004842:	4621      	mov	r1, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f7ff f93f 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800484a:	4602      	mov	r2, r0
 800484c:	b928      	cbnz	r0, 800485a <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800484e:	7833      	ldrb	r3, [r6, #0]
 8004850:	3b01      	subs	r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d802      	bhi.n	800485e <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004858:	b18a      	cbz	r2, 800487e <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 800485a:	4610      	mov	r0, r2
 800485c:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <ES_WIFI_StartServerSingleConn+0xc4>)
 8004860:	cb03      	ldmia	r3!, {r0, r1}
 8004862:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8004866:	6061      	str	r1, [r4, #4]
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	789b      	ldrb	r3, [r3, #2]
 800486c:	8122      	strh	r2, [r4, #8]
 800486e:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004870:	4622      	mov	r2, r4
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f7ff f927 	bl	8003ac8 <AT_ExecuteCommand>
 800487a:	4602      	mov	r2, r0
 800487c:	e7ec      	b.n	8004858 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800487e:	7832      	ldrb	r2, [r6, #0]
 8004880:	491c      	ldr	r1, [pc, #112]	; (80048f4 <ES_WIFI_StartServerSingleConn+0xc8>)
 8004882:	4620      	mov	r0, r4
 8004884:	f018 fb5e 	bl	801cf44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004888:	4622      	mov	r2, r4
 800488a:	4621      	mov	r1, r4
 800488c:	4628      	mov	r0, r5
 800488e:	f7ff f91b 	bl	8003ac8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004892:	4602      	mov	r2, r0
 8004894:	2800      	cmp	r0, #0
 8004896:	d1e0      	bne.n	800485a <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8004898:	7c32      	ldrb	r2, [r6, #16]
 800489a:	4917      	ldr	r1, [pc, #92]	; (80048f8 <ES_WIFI_StartServerSingleConn+0xcc>)
 800489c:	4620      	mov	r0, r4
 800489e:	f018 fb51 	bl	801cf44 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048a2:	4622      	mov	r2, r4
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff f90e 	bl	8003ac8 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80048ac:	4602      	mov	r2, r0
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1d3      	bne.n	800485a <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80048b2:	88f2      	ldrh	r2, [r6, #6]
 80048b4:	4911      	ldr	r1, [pc, #68]	; (80048fc <ES_WIFI_StartServerSingleConn+0xd0>)
 80048b6:	4620      	mov	r0, r4
 80048b8:	f018 fb44 	bl	801cf44 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048bc:	4622      	mov	r2, r4
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f7ff f901 	bl	8003ac8 <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 80048c6:	4602      	mov	r2, r0
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d1c6      	bne.n	800485a <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <ES_WIFI_StartServerSingleConn+0xd4>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80048d4:	889a      	ldrh	r2, [r3, #4]
 80048d6:	799b      	ldrb	r3, [r3, #6]
 80048d8:	80a2      	strh	r2, [r4, #4]
 80048da:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048dc:	4622      	mov	r2, r4
 80048de:	4621      	mov	r1, r4
 80048e0:	4628      	mov	r0, r5
 80048e2:	f7ff f8f1 	bl	8003ac8 <AT_ExecuteCommand>
 80048e6:	4602      	mov	r2, r0
 80048e8:	e7b7      	b.n	800485a <ES_WIFI_StartServerSingleConn+0x2e>
 80048ea:	bf00      	nop
 80048ec:	0801ec14 	.word	0x0801ec14
 80048f0:	0801ec64 	.word	0x0801ec64
 80048f4:	0801ec1c 	.word	0x0801ec1c
 80048f8:	0801ec70 	.word	0x0801ec70
 80048fc:	0801ec24 	.word	0x0801ec24
 8004900:	0801ec78 	.word	0x0801ec78

08004904 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8004904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4605      	mov	r5, r0
 800490a:	460f      	mov	r7, r1
 800490c:	4692      	mov	sl, r2
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 800490e:	f002 f883 	bl	8006a18 <HAL_GetTick>
 8004912:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 8004914:	eb10 0907 	adds.w	r9, r0, r7
 8004918:	d301      	bcc.n	800491e <ES_WIFI_WaitServerConnection+0x1a>
  {
	   tstart=0;
 800491a:	f04f 0800 	mov.w	r8, #0
 800491e:	2600      	movs	r6, #0
 8004920:	e02c      	b.n	800497c <ES_WIFI_WaitServerConnection+0x78>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8004922:	4943      	ldr	r1, [pc, #268]	; (8004a30 <ES_WIFI_WaitServerConnection+0x12c>)
 8004924:	4620      	mov	r0, r4
 8004926:	f018 fb97 	bl	801d058 <strstr>
 800492a:	2800      	cmp	r0, #0
 800492c:	d07a      	beq.n	8004a24 <ES_WIFI_WaitServerConnection+0x120>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800492e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8004932:	2100      	movs	r1, #0
 8004934:	4620      	mov	r0, r4
 8004936:	f017 fe71 	bl	801c61c <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800493a:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <ES_WIFI_WaitServerConnection+0x130>)
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004942:	4622      	mov	r2, r4
 8004944:	4621      	mov	r1, r4
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff f8be 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800494c:	4683      	mov	fp, r0
 800494e:	2800      	cmp	r0, #0
 8004950:	d16b      	bne.n	8004a2a <ES_WIFI_WaitServerConnection+0x126>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 8004952:	b136      	cbz	r6, 8004962 <ES_WIFI_WaitServerConnection+0x5e>
 8004954:	220c      	movs	r2, #12
 8004956:	4938      	ldr	r1, [pc, #224]	; (8004a38 <ES_WIFI_WaitServerConnection+0x134>)
 8004958:	4620      	mov	r0, r4
 800495a:	f018 fb56 	bl	801d00a <strncmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	d133      	bne.n	80049ca <ES_WIFI_WaitServerConnection+0xc6>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8004962:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8004966:	2064      	movs	r0, #100	; 0x64
 8004968:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 800496a:	f002 f855 	bl	8006a18 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800496e:	b12f      	cbz	r7, 800497c <ES_WIFI_WaitServerConnection+0x78>
 8004970:	464b      	mov	r3, r9
 8004972:	45c1      	cmp	r9, r8
 8004974:	bf38      	it	cc
 8004976:	4643      	movcc	r3, r8
 8004978:	4283      	cmp	r3, r0
 800497a:	d94b      	bls.n	8004a14 <ES_WIFI_WaitServerConnection+0x110>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800497c:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8004980:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8004984:	2100      	movs	r1, #0
 8004986:	4620      	mov	r0, r4
 8004988:	f017 fe48 	bl	801c61c <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <ES_WIFI_WaitServerConnection+0x138>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004994:	4622      	mov	r2, r4
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f7ff f895 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800499e:	2800      	cmp	r0, #0
 80049a0:	d13b      	bne.n	8004a1a <ES_WIFI_WaitServerConnection+0x116>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80049a2:	4927      	ldr	r1, [pc, #156]	; (8004a40 <ES_WIFI_WaitServerConnection+0x13c>)
 80049a4:	4620      	mov	r0, r4
 80049a6:	f018 fb57 	bl	801d058 <strstr>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d0bf      	beq.n	800492e <ES_WIFI_WaitServerConnection+0x2a>
 80049ae:	4925      	ldr	r1, [pc, #148]	; (8004a44 <ES_WIFI_WaitServerConnection+0x140>)
 80049b0:	4620      	mov	r0, r4
 80049b2:	f018 fb51 	bl	801d058 <strstr>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0b9      	beq.n	800492e <ES_WIFI_WaitServerConnection+0x2a>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80049ba:	4923      	ldr	r1, [pc, #140]	; (8004a48 <ES_WIFI_WaitServerConnection+0x144>)
 80049bc:	4620      	mov	r0, r4
 80049be:	f018 fb4b 	bl	801d058 <strstr>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0ad      	beq.n	8004922 <ES_WIFI_WaitServerConnection+0x1e>
         accepted=true;// flushing out the MR messages
 80049c6:	2601      	movs	r6, #1
 80049c8:	e7b1      	b.n	800492e <ES_WIFI_WaitServerConnection+0x2a>
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 80049ca:	4c20      	ldr	r4, [pc, #128]	; (8004a4c <ES_WIFI_WaitServerConnection+0x148>)
 80049cc:	4621      	mov	r1, r4
 80049ce:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 80049d2:	f018 fb57 	bl	801d084 <strtok>
        ptr = strtok(0, ","); //port
 80049d6:	4621      	mov	r1, r4
 80049d8:	2000      	movs	r0, #0
 80049da:	f018 fb53 	bl	801d084 <strtok>
        ParseIP((char *)ptr, conn->RemoteIP);
 80049de:	f10a 0108 	add.w	r1, sl, #8
 80049e2:	f7ff f843 	bl	8003a6c <ParseIP>
        ptr = strtok(0, ","); //port
 80049e6:	4621      	mov	r1, r4
 80049e8:	2000      	movs	r0, #0
 80049ea:	f018 fb4b 	bl	801d084 <strtok>
        conn->LocalPort=ParseNumber(ptr,0);
 80049ee:	2100      	movs	r1, #0
 80049f0:	f7fe fffa 	bl	80039e8 <ParseNumber>
 80049f4:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok(0, ","); //ip
 80049f8:	4621      	mov	r1, r4
 80049fa:	2000      	movs	r0, #0
 80049fc:	f018 fb42 	bl	801d084 <strtok>
        ptr = strtok(0, ","); //remote port
 8004a00:	4621      	mov	r1, r4
 8004a02:	2000      	movs	r0, #0
 8004a04:	f018 fb3e 	bl	801d084 <strtok>
        conn->RemotePort=ParseNumber(ptr,0);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f7fe ffed 	bl	80039e8 <ParseNumber>
 8004a0e:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 8004a12:	e004      	b.n	8004a1e <ES_WIFI_WaitServerConnection+0x11a>
  return ES_WIFI_STATUS_TIMEOUT;
 8004a14:	f04f 0b03 	mov.w	fp, #3
 8004a18:	e001      	b.n	8004a1e <ES_WIFI_WaitServerConnection+0x11a>
      return ES_WIFI_STATUS_ERROR;
 8004a1a:	f04f 0b02 	mov.w	fp, #2
}
 8004a1e:	4658      	mov	r0, fp
 8004a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 8004a24:	f04f 0b02 	mov.w	fp, #2
 8004a28:	e7f9      	b.n	8004a1e <ES_WIFI_WaitServerConnection+0x11a>
      return ES_WIFI_STATUS_ERROR;
 8004a2a:	f04f 0b02 	mov.w	fp, #2
 8004a2e:	e7f6      	b.n	8004a1e <ES_WIFI_WaitServerConnection+0x11a>
 8004a30:	0801ec9c 	.word	0x0801ec9c
 8004a34:	0801ecac 	.word	0x0801ecac
 8004a38:	0801ecb0 	.word	0x0801ecb0
 8004a3c:	0801eb70 	.word	0x0801eb70
 8004a40:	0801ec80 	.word	0x0801ec80
 8004a44:	0801ec88 	.word	0x0801ec88
 8004a48:	0801ec90 	.word	0x0801ec90
 8004a4c:	0801eb54 	.word	0x0801eb54

08004a50 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8004a56:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004a5a:	490d      	ldr	r1, [pc, #52]	; (8004a90 <ES_WIFI_CloseServerConnection+0x40>)
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f018 fa71 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004a62:	462a      	mov	r2, r5
 8004a64:	4629      	mov	r1, r5
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff f82e 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004a6c:	b100      	cbz	r0, 8004a70 <ES_WIFI_CloseServerConnection+0x20>
    DEBUG(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <ES_WIFI_CloseServerConnection+0x44>)
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004a78:	889a      	ldrh	r2, [r3, #4]
 8004a7a:	799b      	ldrb	r3, [r3, #6]
 8004a7c:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 8004a80:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004a84:	462a      	mov	r2, r5
 8004a86:	4629      	mov	r1, r5
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f7ff f81d 	bl	8003ac8 <AT_ExecuteCommand>
  return ret;
 8004a8e:	e7ee      	b.n	8004a6e <ES_WIFI_CloseServerConnection+0x1e>
 8004a90:	0801ec14 	.word	0x0801ec14
 8004a94:	0801ecc0 	.word	0x0801ecc0

08004a98 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8004a9e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004aa2:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <ES_WIFI_StopServerSingleConn+0x3c>)
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f018 fa4d 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004aaa:	462a      	mov	r2, r5
 8004aac:	4629      	mov	r1, r5
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff f80a 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004ab4:	b100      	cbz	r0, 8004ab8 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <ES_WIFI_StopServerSingleConn+0x40>)
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004ac0:	889b      	ldrh	r3, [r3, #4]
 8004ac2:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fe fffc 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8004ad0:	e7f1      	b.n	8004ab6 <ES_WIFI_StopServerSingleConn+0x1e>
 8004ad2:	bf00      	nop
 8004ad4:	0801ec14 	.word	0x0801ec14
 8004ad8:	0801ecc8 	.word	0x0801ecc8

08004adc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	4690      	mov	r8, r2
 8004ae6:	461c      	mov	r4, r3
 8004ae8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004aec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004af0:	f1b9 0f00 	cmp.w	r9, #0
 8004af4:	d101      	bne.n	8004afa <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8004af6:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004afa:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8004afe:	d301      	bcc.n	8004b04 <ES_WIFI_SendData+0x28>
 8004b00:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 8004b04:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004b08:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	491c      	ldr	r1, [pc, #112]	; (8004b80 <ES_WIFI_SendData+0xa4>)
 8004b10:	4630      	mov	r0, r6
 8004b12:	f018 fa17 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b16:	4632      	mov	r2, r6
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7fe ffd4 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004b20:	4607      	mov	r7, r0
 8004b22:	b128      	cbz	r0, 8004b30 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8004b24:	2f02      	cmp	r7, #2
 8004b26:	d026      	beq.n	8004b76 <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 8004b28:	4638      	mov	r0, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8004b30:	464a      	mov	r2, r9
 8004b32:	4914      	ldr	r1, [pc, #80]	; (8004b84 <ES_WIFI_SendData+0xa8>)
 8004b34:	4630      	mov	r0, r6
 8004b36:	f018 fa05 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f7fe ffc2 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004b44:	4607      	mov	r7, r0
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d1ec      	bne.n	8004b24 <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	490e      	ldr	r1, [pc, #56]	; (8004b88 <ES_WIFI_SendData+0xac>)
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f018 f9f8 	bl	801cf44 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004b54:	9600      	str	r6, [sp, #0]
 8004b56:	4623      	mov	r3, r4
 8004b58:	4642      	mov	r2, r8
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f7ff f82d 	bl	8003bbc <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 8004b62:	4607      	mov	r7, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1dd      	bne.n	8004b24 <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8004b68:	4908      	ldr	r1, [pc, #32]	; (8004b8c <ES_WIFI_SendData+0xb0>)
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f018 fa74 	bl	801d058 <strstr>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d0d7      	beq.n	8004b24 <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 8004b74:	2702      	movs	r7, #2
    *SentLen = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f8aa 3000 	strh.w	r3, [sl]
 8004b7c:	e7d4      	b.n	8004b28 <ES_WIFI_SendData+0x4c>
 8004b7e:	bf00      	nop
 8004b80:	0801ec14 	.word	0x0801ec14
 8004b84:	0801ecd0 	.word	0x0801ecd0
 8004b88:	0801ecd8 	.word	0x0801ecd8
 8004b8c:	0801ece4 	.word	0x0801ece4

08004b90 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	4606      	mov	r6, r0
 8004b98:	4690      	mov	r8, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004ba4:	f1b9 0f00 	cmp.w	r9, #0
 8004ba8:	d101      	bne.n	8004bae <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8004baa:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004bae:	f506 7594 	add.w	r5, r6, #296	; 0x128
 8004bb2:	460a      	mov	r2, r1
 8004bb4:	493d      	ldr	r1, [pc, #244]	; (8004cac <ES_WIFI_SendDataTo+0x11c>)
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f018 f9c4 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f7fe ff81 	bl	8003ac8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	b300      	cbz	r0, 8004c0c <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8004bca:	b364      	cbz	r4, 8004c26 <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004bcc:	2c00      	cmp	r4, #0
 8004bce:	d037      	beq.n	8004c40 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004bd0:	b924      	cbnz	r4, 8004bdc <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 8004bd2:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 8004bd6:	d301      	bcc.n	8004bdc <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004bd8:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d044      	beq.n	8004c6a <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004be0:	2c00      	cmp	r4, #0
 8004be2:	d04e      	beq.n	8004c82 <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	d15a      	bne.n	8004c9e <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8004be8:	4931      	ldr	r1, [pc, #196]	; (8004cb0 <ES_WIFI_SendDataTo+0x120>)
 8004bea:	4628      	mov	r0, r5
 8004bec:	f018 fa34 	bl	801d058 <strstr>
    if(ptr != NULL)
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d054      	beq.n	8004c9e <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8004bf4:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 8004bf8:	4286      	cmp	r6, r0
 8004bfa:	d855      	bhi.n	8004ca8 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8004bfc:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c02:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 8004c04:	4620      	mov	r0, r4
 8004c06:	b002      	add	sp, #8
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8004c0c:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8004c10:	4928      	ldr	r1, [pc, #160]	; (8004cb4 <ES_WIFI_SendDataTo+0x124>)
 8004c12:	4628      	mov	r0, r5
 8004c14:	f018 f996 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c18:	462a      	mov	r2, r5
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7fe ff53 	bl	8003ac8 <AT_ExecuteCommand>
 8004c22:	4604      	mov	r4, r0
 8004c24:	e7d1      	b.n	8004bca <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 8004c26:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8004c2a:	4923      	ldr	r1, [pc, #140]	; (8004cb8 <ES_WIFI_SendDataTo+0x128>)
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f018 f989 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c32:	462a      	mov	r2, r5
 8004c34:	4629      	mov	r1, r5
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7fe ff46 	bl	8003ac8 <AT_ExecuteCommand>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	e7c5      	b.n	8004bcc <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8004c40:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8004c44:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8004c48:	9201      	str	r2, [sp, #4]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004c50:	f89a 2000 	ldrb.w	r2, [sl]
 8004c54:	4919      	ldr	r1, [pc, #100]	; (8004cbc <ES_WIFI_SendDataTo+0x12c>)
 8004c56:	4628      	mov	r0, r5
 8004c58:	f018 f974 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	4629      	mov	r1, r5
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7fe ff31 	bl	8003ac8 <AT_ExecuteCommand>
 8004c66:	4604      	mov	r4, r0
 8004c68:	e7b2      	b.n	8004bd0 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8004c6a:	464a      	mov	r2, r9
 8004c6c:	4914      	ldr	r1, [pc, #80]	; (8004cc0 <ES_WIFI_SendDataTo+0x130>)
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f018 f968 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c74:	462a      	mov	r2, r5
 8004c76:	4629      	mov	r1, r5
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f7fe ff25 	bl	8003ac8 <AT_ExecuteCommand>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	e7ae      	b.n	8004be0 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8004c82:	463a      	mov	r2, r7
 8004c84:	490f      	ldr	r1, [pc, #60]	; (8004cc4 <ES_WIFI_SendDataTo+0x134>)
 8004c86:	4628      	mov	r0, r5
 8004c88:	f018 f95c 	bl	801cf44 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004c8c:	9500      	str	r5, [sp, #0]
 8004c8e:	463b      	mov	r3, r7
 8004c90:	4642      	mov	r2, r8
 8004c92:	4629      	mov	r1, r5
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7fe ff91 	bl	8003bbc <AT_RequestSendData>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	e7a2      	b.n	8004be4 <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	d1ad      	bne.n	8004bfe <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 8004ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca4:	801f      	strh	r7, [r3, #0]
 8004ca6:	e7ad      	b.n	8004c04 <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 8004ca8:	2402      	movs	r4, #2
 8004caa:	e7a8      	b.n	8004bfe <ES_WIFI_SendDataTo+0x6e>
 8004cac:	0801ec14 	.word	0x0801ec14
 8004cb0:	0801ece4 	.word	0x0801ece4
 8004cb4:	0801ec24 	.word	0x0801ec24
 8004cb8:	0801ec2c 	.word	0x0801ec2c
 8004cbc:	0801ec34 	.word	0x0801ec34
 8004cc0:	0801ecd0 	.word	0x0801ecd0
 8004cc4:	0801ecd8 	.word	0x0801ecd8

08004cc8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4690      	mov	r8, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8004cd6:	b906      	cbnz	r6, 8004cda <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8004cd8:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8004cda:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8004cde:	d903      	bls.n	8004ce8 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004ce0:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8004ce2:	b002      	add	sp, #8
 8004ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004ce8:	f504 7794 	add.w	r7, r4, #296	; 0x128
 8004cec:	460a      	mov	r2, r1
 8004cee:	491b      	ldr	r1, [pc, #108]	; (8004d5c <ES_WIFI_ReceiveData+0x94>)
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f018 f927 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004cf6:	463a      	mov	r2, r7
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7fe fee4 	bl	8003ac8 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8004d00:	b120      	cbz	r0, 8004d0c <ES_WIFI_ReceiveData+0x44>
      issue15++;
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <ES_WIFI_ReceiveData+0x98>)
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e7ea      	b.n	8004ce2 <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4915      	ldr	r1, [pc, #84]	; (8004d64 <ES_WIFI_ReceiveData+0x9c>)
 8004d10:	4638      	mov	r0, r7
 8004d12:	f018 f917 	bl	801cf44 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d16:	463a      	mov	r2, r7
 8004d18:	4639      	mov	r1, r7
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7fe fed4 	bl	8003ac8 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8004d20:	b118      	cbz	r0, 8004d2a <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	9a08      	ldr	r2, [sp, #32]
 8004d26:	8013      	strh	r3, [r2, #0]
 8004d28:	e7db      	b.n	8004ce2 <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004d2a:	4632      	mov	r2, r6
 8004d2c:	490e      	ldr	r1, [pc, #56]	; (8004d68 <ES_WIFI_ReceiveData+0xa0>)
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f018 f908 	bl	801cf44 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004d34:	463a      	mov	r2, r7
 8004d36:	4639      	mov	r1, r7
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7fe fec5 	bl	8003ac8 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d1cf      	bne.n	8004ce2 <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <ES_WIFI_ReceiveData+0xa4>)
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004d4a:	9b08      	ldr	r3, [sp, #32]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	462b      	mov	r3, r5
 8004d50:	4642      	mov	r2, r8
 8004d52:	4639      	mov	r1, r7
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff f9e1 	bl	800411c <AT_RequestReceiveData>
            DEBUG("AT_RequestReceiveData  failed\n");
 8004d5a:	e7c2      	b.n	8004ce2 <ES_WIFI_ReceiveData+0x1a>
 8004d5c:	0801ec14 	.word	0x0801ec14
 8004d60:	24001fb0 	.word	0x24001fb0
 8004d64:	0801ecec 	.word	0x0801ecec
 8004d68:	0801ecf4 	.word	0x0801ecf4
 8004d6c:	0801ecfc 	.word	0x0801ecfc

08004d70 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	4605      	mov	r5, r0
 8004d78:	4690      	mov	r8, r2
 8004d7a:	461e      	mov	r6, r3
 8004d7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004d7e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 8004d86:	f1b9 0f00 	cmp.w	r9, #0
 8004d8a:	d101      	bne.n	8004d90 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8004d8c:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8004d90:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 8004d94:	d90f      	bls.n	8004db6 <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004d96:	2402      	movs	r4, #2
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004d98:	b344      	cbz	r4, 8004dec <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUG("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004d9a:	b3ac      	cbz	r4, 8004e08 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUG("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004d9c:	b924      	cbnz	r4, 8004da8 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 8004d9e:	883b      	ldrh	r3, [r7, #0]
 8004da0:	42b3      	cmp	r3, r6
 8004da2:	d85f      	bhi.n	8004e64 <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUG("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d13d      	bne.n	8004e24 <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 8004da8:	b10c      	cbz	r4, 8004dae <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8004dae:	4620      	mov	r0, r4
 8004db0:	b008      	add	sp, #32
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004db6:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 8004dba:	460a      	mov	r2, r1
 8004dbc:	492a      	ldr	r1, [pc, #168]	; (8004e68 <ES_WIFI_ReceiveDataFrom+0xf8>)
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f018 f8c0 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f7fe fe7d 	bl	8003ac8 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8004dce:	4604      	mov	r4, r0
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d1e1      	bne.n	8004d98 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4925      	ldr	r1, [pc, #148]	; (8004e6c <ES_WIFI_ReceiveDataFrom+0xfc>)
 8004dd8:	4650      	mov	r0, sl
 8004dda:	f018 f8b3 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004dde:	4652      	mov	r2, sl
 8004de0:	4651      	mov	r1, sl
 8004de2:	4628      	mov	r0, r5
 8004de4:	f7fe fe70 	bl	8003ac8 <AT_ExecuteCommand>
 8004de8:	4604      	mov	r4, r0
 8004dea:	e7d5      	b.n	8004d98 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004dec:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8004df0:	464a      	mov	r2, r9
 8004df2:	491f      	ldr	r1, [pc, #124]	; (8004e70 <ES_WIFI_ReceiveDataFrom+0x100>)
 8004df4:	4620      	mov	r0, r4
 8004df6:	f018 f8a5 	bl	801cf44 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f7fe fe62 	bl	8003ac8 <AT_ExecuteCommand>
 8004e04:	4604      	mov	r4, r0
 8004e06:	e7c8      	b.n	8004d9a <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <ES_WIFI_ReceiveDataFrom+0x104>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004e10:	9700      	str	r7, [sp, #0]
 8004e12:	4633      	mov	r3, r6
 8004e14:	4642      	mov	r2, r8
 8004e16:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7ff f97e 	bl	800411c <AT_RequestReceiveData>
 8004e20:	4604      	mov	r4, r0
 8004e22:	e7bb      	b.n	8004d9c <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 8004e24:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <ES_WIFI_ReceiveDataFrom+0x108>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e30:	4632      	mov	r2, r6
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	f7fe fe47 	bl	8003ac8 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d1b3      	bne.n	8004da8 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004e40:	2300      	movs	r3, #0
 8004e42:	9303      	str	r3, [sp, #12]
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	9306      	str	r3, [sp, #24]
 8004e4a:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004e4c:	a903      	add	r1, sp, #12
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7fe ff4a 	bl	8003ce8 <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8004e54:	9a05      	ldr	r2, [sp, #20]
 8004e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e58:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8004e5a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e7a1      	b.n	8004da8 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 8004e64:	2402      	movs	r4, #2
 8004e66:	e7a0      	b.n	8004daa <ES_WIFI_ReceiveDataFrom+0x3a>
 8004e68:	0801ec14 	.word	0x0801ec14
 8004e6c:	0801ecec 	.word	0x0801ecec
 8004e70:	0801ecf4 	.word	0x0801ecf4
 8004e74:	0801ecfc 	.word	0x0801ecfc
 8004e78:	0801ecac 	.word	0x0801ecac

08004e7c <ES_WIFI_SockInfo>:


ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	4604      	mov	r4, r0
 8004e84:	4690      	mov	r8, r2
 8004e86:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004e88:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004e8c:	460a      	mov	r2, r1
 8004e8e:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <ES_WIFI_SockInfo+0x6c>)
 8004e90:	4628      	mov	r0, r5
 8004e92:	f018 f857 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e96:	462a      	mov	r2, r5
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7fe fe14 	bl	8003ac8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	b118      	cbz	r0, 8004eac <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	b006      	add	sp, #24
 8004ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <ES_WIFI_SockInfo+0x70>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7fe fe05 	bl	8003ac8 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d1ef      	bne.n	8004ea4 <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004ed0:	a901      	add	r1, sp, #4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7fe ff08 	bl	8003ce8 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 8004ed8:	f8dd 3005 	ldr.w	r3, [sp, #5]
 8004edc:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 8004ee0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004ee4:	803b      	strh	r3, [r7, #0]
 8004ee6:	e7dd      	b.n	8004ea4 <ES_WIFI_SockInfo+0x28>
 8004ee8:	0801ec14 	.word	0x0801ec14
 8004eec:	0801ecac 	.word	0x0801ecac

08004ef0 <ES_WIFI_PeerInfo>:

ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8004ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4690      	mov	r8, r2
 8004efa:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8004efc:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8004f00:	460a      	mov	r2, r1
 8004f02:	4916      	ldr	r1, [pc, #88]	; (8004f5c <ES_WIFI_PeerInfo+0x6c>)
 8004f04:	4628      	mov	r0, r5
 8004f06:	f018 f81d 	bl	801cf44 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f0a:	462a      	mov	r2, r5
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7fe fdda 	bl	8003ac8 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8004f14:	4606      	mov	r6, r0
 8004f16:	b118      	cbz	r0, 8004f20 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8004f18:	4630      	mov	r0, r6
 8004f1a:	b006      	add	sp, #24
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <ES_WIFI_PeerInfo+0x70>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f28:	462a      	mov	r2, r5
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7fe fdcb 	bl	8003ac8 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8004f32:	4606      	mov	r6, r0
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1ef      	bne.n	8004f18 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	9304      	str	r3, [sp, #16]
 8004f42:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8004f44:	a901      	add	r1, sp, #4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7fe fece 	bl	8003ce8 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 8004f52:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8004f56:	803b      	strh	r3, [r7, #0]
 8004f58:	e7de      	b.n	8004f18 <ES_WIFI_PeerInfo+0x28>
 8004f5a:	bf00      	nop
 8004f5c:	0801ec14 	.word	0x0801ec14
 8004f60:	0801ecac 	.word	0x0801ecac

08004f64 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8004f68:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8004f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004f72:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8004f74:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004f78:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	4770      	bx	lr

08004f7e <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8004f7e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8004f86:	2000      	movs	r0, #0
 8004f88:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8004f90:	e7f9      	b.n	8004f86 <FT5336_DeInit+0x8>

08004f92 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004f92:	2000      	movs	r0, #0
 8004f94:	4770      	bx	lr

08004f96 <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8004f96:	2000      	movs	r0, #0
 8004f98:	4770      	bx	lr

08004f9a <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004f9a:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f9c:	6904      	ldr	r4, [r0, #16]
 8004f9e:	8900      	ldrh	r0, [r0, #8]
 8004fa0:	47a0      	blx	r4
}
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004fa4:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004fa6:	68c4      	ldr	r4, [r0, #12]
 8004fa8:	8900      	ldrh	r0, [r0, #8]
 8004faa:	47a0      	blx	r4
}
 8004fac:	bd10      	pop	{r4, pc}

08004fae <FT5336_GestureConfig>:
{
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004fb2:	f100 0518 	add.w	r5, r0, #24
 8004fb6:	7809      	ldrb	r1, [r1, #0]
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 f91d 	bl	80051f8 <ft5336_radian_value>
 8004fbe:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004fc0:	7931      	ldrb	r1, [r6, #4]
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f925 	bl	8005212 <ft5336_offset_left_right>
 8004fc8:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004fca:	7a31      	ldrb	r1, [r6, #8]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f92d 	bl	800522c <ft5336_offset_up_down>
 8004fd2:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004fd4:	7b31      	ldrb	r1, [r6, #12]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 f935 	bl	8005246 <ft5336_disatnce_left_right>
 8004fdc:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004fde:	7c31      	ldrb	r1, [r6, #16]
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f93d 	bl	8005260 <ft5336_distance_up_down>
 8004fe6:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004fe8:	7d31      	ldrb	r1, [r6, #20]
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f945 	bl	800527a <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8004ff0:	1820      	adds	r0, r4, r0
 8004ff2:	d100      	bne.n	8004ff6 <FT5336_GestureConfig+0x48>
}
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004ffa:	e7fb      	b.n	8004ff4 <FT5336_GestureConfig+0x46>

08004ffc <FT5336_ReadID>:
{
 8004ffc:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8004ffe:	3018      	adds	r0, #24
 8005000:	f000 f955 	bl	80052ae <ft5336_chip_id>
}
 8005004:	bd08      	pop	{r3, pc}

08005006 <FT5336_DetectTouch>:
{
 8005006:	b500      	push	{lr}
 8005008:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800500a:	f10d 0107 	add.w	r1, sp, #7
 800500e:	3018      	adds	r0, #24
 8005010:	f000 f8e5 	bl	80051de <ft5336_td_status>
 8005014:	b938      	cbnz	r0, 8005026 <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8005016:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800501a:	2b05      	cmp	r3, #5
 800501c:	d800      	bhi.n	8005020 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 800501e:	4618      	mov	r0, r3
}
 8005020:	b003      	add	sp, #12
 8005022:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 8005026:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800502a:	e7f9      	b.n	8005020 <FT5336_DetectTouch+0x1a>

0800502c <FT5336_GetState>:
{
 800502c:	b530      	push	{r4, r5, lr}
 800502e:	b083      	sub	sp, #12
 8005030:	4605      	mov	r5, r0
 8005032:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8005034:	f7ff ffe7 	bl	8005006 <FT5336_DetectTouch>
 8005038:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800503a:	2304      	movs	r3, #4
 800503c:	eb0d 0203 	add.w	r2, sp, r3
 8005040:	2103      	movs	r1, #3
 8005042:	f105 0018 	add.w	r0, r5, #24
 8005046:	f000 f8b9 	bl	80051bc <ft5336_read_reg>
 800504a:	b998      	cbnz	r0, 8005074 <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800504c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005056:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800505a:	4313      	orrs	r3, r2
 800505c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800505e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005068:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800506c:	4313      	orrs	r3, r2
 800506e:	60a3      	str	r3, [r4, #8]
}
 8005070:	b003      	add	sp, #12
 8005072:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005078:	e7fa      	b.n	8005070 <FT5336_GetState+0x44>

0800507a <FT5336_GetMultiTouchState>:
{
 800507a:	b530      	push	{r4, r5, lr}
 800507c:	b089      	sub	sp, #36	; 0x24
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8005082:	f7ff ffc0 	bl	8005006 <FT5336_DetectTouch>
 8005086:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8005088:	231e      	movs	r3, #30
 800508a:	466a      	mov	r2, sp
 800508c:	2103      	movs	r1, #3
 800508e:	f104 0018 	add.w	r0, r4, #24
 8005092:	f000 f893 	bl	80051bc <ft5336_read_reg>
 8005096:	2800      	cmp	r0, #0
 8005098:	d146      	bne.n	8005128 <FT5336_GetMultiTouchState+0xae>
 800509a:	4603      	mov	r3, r0
 800509c:	e040      	b.n	8005120 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800509e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80050a2:	004a      	lsls	r2, r1, #1
 80050a4:	ac08      	add	r4, sp, #32
 80050a6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80050aa:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80050ae:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80050b2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80050b6:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80050ba:	446c      	add	r4, sp
 80050bc:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 80050c0:	4321      	orrs	r1, r4
 80050c2:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80050c6:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80050c8:	f102 0122 	add.w	r1, r2, #34	; 0x22
 80050cc:	4469      	add	r1, sp
 80050ce:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80050d2:	0224      	lsls	r4, r4, #8
 80050d4:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80050d8:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80050dc:	4469      	add	r1, sp
 80050de:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80050e2:	430c      	orrs	r4, r1
 80050e4:	1d99      	adds	r1, r3, #6
 80050e6:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80050ea:	ea4f 119c 	mov.w	r1, ip, lsr #6
 80050ee:	f103 0410 	add.w	r4, r3, #16
 80050f2:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80050f6:	f102 0124 	add.w	r1, r2, #36	; 0x24
 80050fa:	4469      	add	r1, sp
 80050fc:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8005100:	f103 010a 	add.w	r1, r3, #10
 8005104:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8005108:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800510a:	3225      	adds	r2, #37	; 0x25
 800510c:	446a      	add	r2, sp
 800510e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8005112:	0909      	lsrs	r1, r1, #4
 8005114:	f103 0214 	add.w	r2, r3, #20
 8005118:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800511c:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800511e:	3301      	adds	r3, #1
 8005120:	2b04      	cmp	r3, #4
 8005122:	d9bc      	bls.n	800509e <FT5336_GetMultiTouchState+0x24>
}
 8005124:	b009      	add	sp, #36	; 0x24
 8005126:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800512c:	e7fa      	b.n	8005124 <FT5336_GetMultiTouchState+0xaa>

0800512e <FT5336_GetGesture>:
{
 800512e:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8005130:	3018      	adds	r0, #24
 8005132:	f000 f84d 	bl	80051d0 <ft5336_gest_id>
}
 8005136:	bd08      	pop	{r3, pc}

08005138 <FT5336_EnableIT>:
{
 8005138:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800513a:	2101      	movs	r1, #1
 800513c:	3018      	adds	r0, #24
 800513e:	f000 f8a9 	bl	8005294 <ft5336_g_mode>
}
 8005142:	bd08      	pop	{r3, pc}

08005144 <FT5336_DisableIT>:
{
 8005144:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8005146:	2100      	movs	r1, #0
 8005148:	3018      	adds	r0, #24
 800514a:	f000 f8a3 	bl	8005294 <ft5336_g_mode>
}
 800514e:	bd08      	pop	{r3, pc}

08005150 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8005150:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005154:	b95b      	cbnz	r3, 800516e <FT5336_Init+0x1e>
{
 8005156:	b510      	push	{r4, lr}
 8005158:	4604      	mov	r4, r0
    pObj->IO.Init();
 800515a:	6803      	ldr	r3, [r0, #0]
 800515c:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 800515e:	4620      	mov	r0, r4
 8005160:	f7ff fff0 	bl	8005144 <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8005164:	2201      	movs	r2, #1
 8005166:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 800516a:	b910      	cbnz	r0, 8005172 <FT5336_Init+0x22>
}
 800516c:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 800516e:	2000      	movs	r0, #0
}
 8005170:	4770      	bx	lr
    ret = FT5336_ERROR;
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005176:	e7f9      	b.n	800516c <FT5336_Init+0x1c>

08005178 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8005178:	b1a8      	cbz	r0, 80051a6 <FT5336_RegisterBusIO+0x2e>
{
 800517a:	b508      	push	{r3, lr}
 800517c:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 800517e:	680a      	ldr	r2, [r1, #0]
 8005180:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005182:	6848      	ldr	r0, [r1, #4]
 8005184:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8005186:	8908      	ldrh	r0, [r1, #8]
 8005188:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800518a:	68c8      	ldr	r0, [r1, #12]
 800518c:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800518e:	6908      	ldr	r0, [r1, #16]
 8005190:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005192:	6949      	ldr	r1, [r1, #20]
 8005194:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005196:	4907      	ldr	r1, [pc, #28]	; (80051b4 <FT5336_RegisterBusIO+0x3c>)
 8005198:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800519a:	4907      	ldr	r1, [pc, #28]	; (80051b8 <FT5336_RegisterBusIO+0x40>)
 800519c:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800519e:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80051a0:	b122      	cbz	r2, 80051ac <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80051a2:	4790      	blx	r2
}
 80051a4:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80051a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80051aa:	4770      	bx	lr
      ret = FT5336_ERROR;
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80051b0:	e7f8      	b.n	80051a4 <FT5336_RegisterBusIO+0x2c>
 80051b2:	bf00      	nop
 80051b4:	08004f9b 	.word	0x08004f9b
 80051b8:	08004fa5 	.word	0x08004fa5

080051bc <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80051bc:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80051be:	6844      	ldr	r4, [r0, #4]
 80051c0:	6880      	ldr	r0, [r0, #8]
 80051c2:	47a0      	blx	r4
}
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80051c6:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80051c8:	6804      	ldr	r4, [r0, #0]
 80051ca:	6880      	ldr	r0, [r0, #8]
 80051cc:	47a0      	blx	r4
}
 80051ce:	bd10      	pop	{r4, pc}

080051d0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80051d0:	b508      	push	{r3, lr}
 80051d2:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80051d4:	2301      	movs	r3, #1
 80051d6:	4619      	mov	r1, r3
 80051d8:	f7ff fff0 	bl	80051bc <ft5336_read_reg>
}
 80051dc:	bd08      	pop	{r3, pc}

080051de <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80051de:	b510      	push	{r4, lr}
 80051e0:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80051e2:	2301      	movs	r3, #1
 80051e4:	460a      	mov	r2, r1
 80051e6:	2102      	movs	r1, #2
 80051e8:	f7ff ffe8 	bl	80051bc <ft5336_read_reg>
  
  if(ret == 0)
 80051ec:	b918      	cbnz	r0, 80051f6 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80051ee:	7823      	ldrb	r3, [r4, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80051f8:	b500      	push	{lr}
 80051fa:	b083      	sub	sp, #12
 80051fc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8005200:	2301      	movs	r3, #1
 8005202:	f10d 0207 	add.w	r2, sp, #7
 8005206:	2191      	movs	r1, #145	; 0x91
 8005208:	f7ff ffdd 	bl	80051c6 <ft5336_write_reg>
}
 800520c:	b003      	add	sp, #12
 800520e:	f85d fb04 	ldr.w	pc, [sp], #4

08005212 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005212:	b500      	push	{lr}
 8005214:	b083      	sub	sp, #12
 8005216:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800521a:	2301      	movs	r3, #1
 800521c:	f10d 0207 	add.w	r2, sp, #7
 8005220:	2192      	movs	r1, #146	; 0x92
 8005222:	f7ff ffd0 	bl	80051c6 <ft5336_write_reg>
}
 8005226:	b003      	add	sp, #12
 8005228:	f85d fb04 	ldr.w	pc, [sp], #4

0800522c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800522c:	b500      	push	{lr}
 800522e:	b083      	sub	sp, #12
 8005230:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8005234:	2301      	movs	r3, #1
 8005236:	f10d 0207 	add.w	r2, sp, #7
 800523a:	2193      	movs	r1, #147	; 0x93
 800523c:	f7ff ffc3 	bl	80051c6 <ft5336_write_reg>
}
 8005240:	b003      	add	sp, #12
 8005242:	f85d fb04 	ldr.w	pc, [sp], #4

08005246 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8005246:	b500      	push	{lr}
 8005248:	b083      	sub	sp, #12
 800524a:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800524e:	2301      	movs	r3, #1
 8005250:	f10d 0207 	add.w	r2, sp, #7
 8005254:	2194      	movs	r1, #148	; 0x94
 8005256:	f7ff ffb6 	bl	80051c6 <ft5336_write_reg>
}
 800525a:	b003      	add	sp, #12
 800525c:	f85d fb04 	ldr.w	pc, [sp], #4

08005260 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8005260:	b500      	push	{lr}
 8005262:	b083      	sub	sp, #12
 8005264:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8005268:	2301      	movs	r3, #1
 800526a:	f10d 0207 	add.w	r2, sp, #7
 800526e:	2195      	movs	r1, #149	; 0x95
 8005270:	f7ff ffa9 	bl	80051c6 <ft5336_write_reg>
}
 8005274:	b003      	add	sp, #12
 8005276:	f85d fb04 	ldr.w	pc, [sp], #4

0800527a <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800527a:	b500      	push	{lr}
 800527c:	b083      	sub	sp, #12
 800527e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8005282:	2301      	movs	r3, #1
 8005284:	f10d 0207 	add.w	r2, sp, #7
 8005288:	2196      	movs	r1, #150	; 0x96
 800528a:	f7ff ff9c 	bl	80051c6 <ft5336_write_reg>
}
 800528e:	b003      	add	sp, #12
 8005290:	f85d fb04 	ldr.w	pc, [sp], #4

08005294 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8005294:	b500      	push	{lr}
 8005296:	b083      	sub	sp, #12
 8005298:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800529c:	2301      	movs	r3, #1
 800529e:	f10d 0207 	add.w	r2, sp, #7
 80052a2:	21a4      	movs	r1, #164	; 0xa4
 80052a4:	f7ff ff8f 	bl	80051c6 <ft5336_write_reg>
}
 80052a8:	b003      	add	sp, #12
 80052aa:	f85d fb04 	ldr.w	pc, [sp], #4

080052ae <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80052ae:	b508      	push	{r3, lr}
 80052b0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80052b2:	2301      	movs	r3, #1
 80052b4:	21a8      	movs	r1, #168	; 0xa8
 80052b6:	f7ff ff81 	bl	80051bc <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 80052ba:	bd08      	pop	{r3, pc}

080052bc <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 80052bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80052c0:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80052c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052c6:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 80052c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052cc:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80052ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052d2:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80052d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052d8:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80052da:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80052dc:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 80052de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052e2:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80052e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80052e8:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 80052ea:	2000      	movs	r0, #0
 80052ec:	4770      	bx	lr

080052ee <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	b09a      	sub	sp, #104	; 0x68
 80052f2:	4606      	mov	r6, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 80052f8:	2250      	movs	r2, #80	; 0x50
 80052fa:	2100      	movs	r1, #0
 80052fc:	a806      	add	r0, sp, #24
 80052fe:	f017 f98d 	bl	801c61c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8005302:	2300      	movs	r3, #0
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	9302      	str	r3, [sp, #8]
 8005308:	9303      	str	r3, [sp, #12]
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800530e:	429c      	cmp	r4, r3
 8005310:	bf08      	it	eq
 8005312:	2d01      	cmpeq	r5, #1
 8005314:	d061      	beq.n	80053da <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005316:	2c00      	cmp	r4, #0
 8005318:	d143      	bne.n	80053a2 <MX25LM51245G_AutoPollingMemReady+0xb4>
 800531a:	2301      	movs	r3, #1
 800531c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800531e:	2d01      	cmp	r5, #1
 8005320:	d041      	beq.n	80053a6 <MX25LM51245G_AutoPollingMemReady+0xb8>
 8005322:	2300      	movs	r3, #0
 8005324:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005326:	2c00      	cmp	r4, #0
 8005328:	d13f      	bne.n	80053aa <MX25LM51245G_AutoPollingMemReady+0xbc>
 800532a:	2300      	movs	r3, #0
 800532c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800532e:	2c00      	cmp	r4, #0
 8005330:	d13d      	bne.n	80053ae <MX25LM51245G_AutoPollingMemReady+0xc0>
 8005332:	2305      	movs	r3, #5
 8005334:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005336:	2c00      	cmp	r4, #0
 8005338:	d13c      	bne.n	80053b4 <MX25LM51245G_AutoPollingMemReady+0xc6>
 800533a:	2300      	movs	r3, #0
 800533c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800533e:	2d01      	cmp	r5, #1
 8005340:	d03b      	beq.n	80053ba <MX25LM51245G_AutoPollingMemReady+0xcc>
 8005342:	2300      	movs	r3, #0
 8005344:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8005346:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800534a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800534c:	2c00      	cmp	r4, #0
 800534e:	d137      	bne.n	80053c0 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8005350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005354:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005356:	2d01      	cmp	r5, #1
 8005358:	d035      	beq.n	80053c6 <MX25LM51245G_AutoPollingMemReady+0xd8>
 800535a:	2300      	movs	r3, #0
 800535c:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800535e:	bbac      	cbnz	r4, 80053cc <MX25LM51245G_AutoPollingMemReady+0xde>
 8005360:	2300      	movs	r3, #0
 8005362:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005364:	2d01      	cmp	r5, #1
 8005366:	d033      	beq.n	80053d0 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8005368:	2301      	movs	r3, #1
 800536a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800536c:	2d01      	cmp	r5, #1
 800536e:	d031      	beq.n	80053d4 <MX25LM51245G_AutoPollingMemReady+0xe6>
 8005370:	2300      	movs	r3, #0
 8005372:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8005374:	2301      	movs	r3, #1
 8005376:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8005378:	2310      	movs	r3, #16
 800537a:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800537c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005380:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	a906      	add	r1, sp, #24
 8005388:	4630      	mov	r0, r6
 800538a:	f003 f8dd 	bl	8008548 <HAL_OSPI_Command>
 800538e:	bb38      	cbnz	r0, 80053e0 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	a901      	add	r1, sp, #4
 8005396:	4630      	mov	r0, r6
 8005398:	f003 f9e7 	bl	800876a <HAL_OSPI_AutoPolling>
 800539c:	bb18      	cbnz	r0, 80053e6 <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800539e:	b01a      	add	sp, #104	; 0x68
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80053a2:	2304      	movs	r3, #4
 80053a4:	e7ba      	b.n	800531c <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80053a6:	2308      	movs	r3, #8
 80053a8:	e7bc      	b.n	8005324 <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80053aa:	2310      	movs	r3, #16
 80053ac:	e7be      	b.n	800532c <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80053ae:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80053b2:	e7bf      	b.n	8005334 <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80053b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b8:	e7c0      	b.n	800533c <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80053ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053be:	e7c1      	b.n	8005344 <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80053c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053c4:	e7c6      	b.n	8005354 <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80053c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053ca:	e7c7      	b.n	800535c <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80053cc:	2305      	movs	r3, #5
 80053ce:	e7c8      	b.n	8005362 <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e7ca      	b.n	800536a <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80053d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80053d8:	e7cb      	b.n	8005372 <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	e7de      	b.n	800539e <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e7db      	b.n	800539e <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	e7d8      	b.n	800539e <MX25LM51245G_AutoPollingMemReady+0xb0>

080053ec <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	b096      	sub	sp, #88	; 0x58
 80053f0:	4606      	mov	r6, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80053f6:	2250      	movs	r2, #80	; 0x50
 80053f8:	2100      	movs	r1, #0
 80053fa:	a802      	add	r0, sp, #8
 80053fc:	f017 f90e 	bl	801c61c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8005400:	2300      	movs	r3, #0
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8005406:	2c01      	cmp	r4, #1
 8005408:	bf08      	it	eq
 800540a:	429d      	cmpeq	r5, r3
 800540c:	d04e      	beq.n	80054ac <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800540e:	2301      	movs	r3, #1
 8005410:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005412:	b104      	cbz	r4, 8005416 <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8005414:	2304      	movs	r3, #4
 8005416:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005418:	b92c      	cbnz	r4, 8005426 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800541a:	2300      	movs	r3, #0
 800541c:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800541e:	b924      	cbnz	r4, 800542a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8005420:	bb15      	cbnz	r5, 8005468 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8005422:	230b      	movs	r3, #11
 8005424:	e003      	b.n	800542e <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005426:	2310      	movs	r3, #16
 8005428:	e7f8      	b.n	800541c <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800542a:	f64e 4313 	movw	r3, #60435	; 0xec13
 800542e:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005430:	b9e4      	cbnz	r4, 800546c <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8005432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005436:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005438:	b9dd      	cbnz	r5, 8005472 <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 800543a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800543e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005440:	b9d4      	cbnz	r4, 8005478 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8005442:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005446:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8005448:	b9cc      	cbnz	r4, 800547e <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 800544a:	2308      	movs	r3, #8
 800544c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	a902      	add	r1, sp, #8
 8005454:	4630      	mov	r0, r6
 8005456:	f003 f877 	bl	8008548 <HAL_OSPI_Command>
 800545a:	bb50      	cbnz	r0, 80054b2 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800545c:	2302      	movs	r3, #2
 800545e:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005460:	b97c      	cbnz	r4, 8005482 <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 8005462:	b185      	cbz	r5, 8005486 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8005464:	2312      	movs	r3, #18
 8005466:	e00e      	b.n	8005486 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8005468:	230c      	movs	r3, #12
 800546a:	e7e0      	b.n	800542e <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800546c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005470:	e7e1      	b.n	8005436 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8005472:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005476:	e7e2      	b.n	800543e <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005478:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800547c:	e7e3      	b.n	8005446 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800547e:	2306      	movs	r3, #6
 8005480:	e7e4      	b.n	800544c <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8005482:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8005486:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	a902      	add	r1, sp, #8
 8005492:	4630      	mov	r0, r6
 8005494:	f003 f858 	bl	8008548 <HAL_OSPI_Command>
 8005498:	b970      	cbnz	r0, 80054b8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 800549e:	4669      	mov	r1, sp
 80054a0:	4630      	mov	r0, r6
 80054a2:	f003 f9bf 	bl	8008824 <HAL_OSPI_MemoryMapped>
 80054a6:	b950      	cbnz	r0, 80054be <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80054a8:	b016      	add	sp, #88	; 0x58
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	e7fa      	b.n	80054a8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
 80054b6:	e7f7      	b.n	80054a8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e7f4      	b.n	80054a8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80054be:	f04f 30ff 	mov.w	r0, #4294967295
 80054c2:	e7f1      	b.n	80054a8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

080054c4 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80054c4:	b510      	push	{r4, lr}
 80054c6:	b096      	sub	sp, #88	; 0x58
 80054c8:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80054ca:	2250      	movs	r2, #80	; 0x50
 80054cc:	2100      	movs	r1, #0
 80054ce:	a802      	add	r0, sp, #8
 80054d0:	f017 f8a4 	bl	801c61c <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80054da:	2301      	movs	r3, #1
 80054dc:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80054de:	2304      	movs	r3, #4
 80054e0:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80054e2:	2308      	movs	r3, #8
 80054e4:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80054e6:	2310      	movs	r3, #16
 80054e8:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80054ea:	f64e 6311 	movw	r3, #60945	; 0xee11
 80054ee:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80054f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054fa:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80054fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005500:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8005502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005506:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8005508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800550c:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800550e:	2306      	movs	r3, #6
 8005510:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8005512:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005516:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005518:	f241 3288 	movw	r2, #5000	; 0x1388
 800551c:	a902      	add	r1, sp, #8
 800551e:	4620      	mov	r0, r4
 8005520:	f003 f812 	bl	8008548 <HAL_OSPI_Command>
 8005524:	b9b8      	cbnz	r0, 8005556 <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8005526:	2302      	movs	r3, #2
 8005528:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800552a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800552e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8005534:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	a902      	add	r1, sp, #8
 800553c:	4620      	mov	r0, r4
 800553e:	f003 f803 	bl	8008548 <HAL_OSPI_Command>
 8005542:	b958      	cbnz	r0, 800555c <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8005544:	2300      	movs	r3, #0
 8005546:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8005548:	4669      	mov	r1, sp
 800554a:	4620      	mov	r0, r4
 800554c:	f003 f96a 	bl	8008824 <HAL_OSPI_MemoryMapped>
 8005550:	b938      	cbnz	r0, 8005562 <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005552:	b016      	add	sp, #88	; 0x58
 8005554:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8005556:	f04f 30ff 	mov.w	r0, #4294967295
 800555a:	e7fa      	b.n	8005552 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e7f7      	b.n	8005552 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8005562:	f04f 30ff 	mov.w	r0, #4294967295
 8005566:	e7f4      	b.n	8005552 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08005568 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	b09a      	sub	sp, #104	; 0x68
 800556c:	4606      	mov	r6, r0
 800556e:	460c      	mov	r4, r1
 8005570:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8005572:	2250      	movs	r2, #80	; 0x50
 8005574:	2100      	movs	r1, #0
 8005576:	a806      	add	r0, sp, #24
 8005578:	f017 f850 	bl	801c61c <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800557c:	2300      	movs	r3, #0
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	9303      	str	r3, [sp, #12]
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	2d01      	cmpeq	r5, #1
 800558e:	d076      	beq.n	800567e <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005590:	2c00      	cmp	r4, #0
 8005592:	d155      	bne.n	8005640 <MX25LM51245G_WriteEnable+0xd8>
 8005594:	2301      	movs	r3, #1
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005598:	2d01      	cmp	r5, #1
 800559a:	d053      	beq.n	8005644 <MX25LM51245G_WriteEnable+0xdc>
 800559c:	2300      	movs	r3, #0
 800559e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80055a0:	2c00      	cmp	r4, #0
 80055a2:	d151      	bne.n	8005648 <MX25LM51245G_WriteEnable+0xe0>
 80055a4:	2300      	movs	r3, #0
 80055a6:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	d14f      	bne.n	800564c <MX25LM51245G_WriteEnable+0xe4>
 80055ac:	2306      	movs	r3, #6
 80055ae:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b4:	a906      	add	r1, sp, #24
 80055b6:	4630      	mov	r0, r6
 80055b8:	f002 ffc6 	bl	8008548 <HAL_OSPI_Command>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d161      	bne.n	8005684 <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	d146      	bne.n	8005652 <MX25LM51245G_WriteEnable+0xea>
 80055c4:	2305      	movs	r3, #5
 80055c6:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	d145      	bne.n	8005658 <MX25LM51245G_WriteEnable+0xf0>
 80055cc:	2300      	movs	r3, #0
 80055ce:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80055d0:	2d01      	cmp	r5, #1
 80055d2:	d044      	beq.n	800565e <MX25LM51245G_WriteEnable+0xf6>
 80055d4:	2300      	movs	r3, #0
 80055d6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80055d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055dc:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d13e      	bne.n	8005664 <MX25LM51245G_WriteEnable+0xfc>
 80055e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055ea:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80055ec:	2d01      	cmp	r5, #1
 80055ee:	d03c      	beq.n	800566a <MX25LM51245G_WriteEnable+0x102>
 80055f0:	2300      	movs	r3, #0
 80055f2:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	d13b      	bne.n	8005670 <MX25LM51245G_WriteEnable+0x108>
 80055f8:	2300      	movs	r3, #0
 80055fa:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80055fc:	2d01      	cmp	r5, #1
 80055fe:	d039      	beq.n	8005674 <MX25LM51245G_WriteEnable+0x10c>
 8005600:	2301      	movs	r3, #1
 8005602:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005604:	2d01      	cmp	r5, #1
 8005606:	d037      	beq.n	8005678 <MX25LM51245G_WriteEnable+0x110>
 8005608:	2300      	movs	r3, #0
 800560a:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	a906      	add	r1, sp, #24
 8005612:	4630      	mov	r0, r6
 8005614:	f002 ff98 	bl	8008548 <HAL_OSPI_Command>
 8005618:	bbb8      	cbnz	r0, 800568a <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 800561a:	2302      	movs	r3, #2
 800561c:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 800561e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8005620:	2300      	movs	r3, #0
 8005622:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8005624:	2310      	movs	r3, #16
 8005626:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005628:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800562c:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	a901      	add	r1, sp, #4
 8005634:	4630      	mov	r0, r6
 8005636:	f003 f898 	bl	800876a <HAL_OSPI_AutoPolling>
 800563a:	bb48      	cbnz	r0, 8005690 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800563c:	b01a      	add	sp, #104	; 0x68
 800563e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005640:	2304      	movs	r3, #4
 8005642:	e7a8      	b.n	8005596 <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005644:	2308      	movs	r3, #8
 8005646:	e7aa      	b.n	800559e <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005648:	2310      	movs	r3, #16
 800564a:	e7ac      	b.n	80055a6 <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800564c:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8005650:	e7ad      	b.n	80055ae <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8005652:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005656:	e7b6      	b.n	80055c6 <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8005658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565c:	e7b7      	b.n	80055ce <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800565e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005662:	e7b8      	b.n	80055d6 <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005668:	e7bf      	b.n	80055ea <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800566a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800566e:	e7c0      	b.n	80055f2 <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8005670:	2305      	movs	r3, #5
 8005672:	e7c2      	b.n	80055fa <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005674:	2302      	movs	r3, #2
 8005676:	e7c4      	b.n	8005602 <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005678:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800567c:	e7c5      	b.n	800560a <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 800567e:	f04f 30ff 	mov.w	r0, #4294967295
 8005682:	e7db      	b.n	800563c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e7d8      	b.n	800563c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 800568a:	f04f 30ff 	mov.w	r0, #4294967295
 800568e:	e7d5      	b.n	800563c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	e7d2      	b.n	800563c <MX25LM51245G_WriteEnable+0xd4>

08005696 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8005696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005698:	b095      	sub	sp, #84	; 0x54
 800569a:	4607      	mov	r7, r0
 800569c:	460c      	mov	r4, r1
 800569e:	4615      	mov	r5, r2
 80056a0:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80056a2:	2250      	movs	r2, #80	; 0x50
 80056a4:	2100      	movs	r1, #0
 80056a6:	4668      	mov	r0, sp
 80056a8:	f016 ffb8 	bl	801c61c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	bf08      	it	eq
 80056b0:	2d01      	cmpeq	r5, #1
 80056b2:	d04e      	beq.n	8005752 <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80056b4:	bb24      	cbnz	r4, 8005700 <MX25LM51245G_WriteCfg2Register+0x6a>
 80056b6:	2301      	movs	r3, #1
 80056b8:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80056ba:	2d01      	cmp	r5, #1
 80056bc:	d022      	beq.n	8005704 <MX25LM51245G_WriteCfg2Register+0x6e>
 80056be:	2300      	movs	r3, #0
 80056c0:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80056c2:	bb0c      	cbnz	r4, 8005708 <MX25LM51245G_WriteCfg2Register+0x72>
 80056c4:	2300      	movs	r3, #0
 80056c6:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80056c8:	bb04      	cbnz	r4, 800570c <MX25LM51245G_WriteCfg2Register+0x76>
 80056ca:	2372      	movs	r3, #114	; 0x72
 80056cc:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80056ce:	bb04      	cbnz	r4, 8005712 <MX25LM51245G_WriteCfg2Register+0x7c>
 80056d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d4:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80056d6:	2d01      	cmp	r5, #1
 80056d8:	d01e      	beq.n	8005718 <MX25LM51245G_WriteCfg2Register+0x82>
 80056da:	2300      	movs	r3, #0
 80056dc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80056de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80056e2:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 80056e4:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80056e6:	b9d4      	cbnz	r4, 800571e <MX25LM51245G_WriteCfg2Register+0x88>
 80056e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056ec:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80056ee:	2d01      	cmp	r5, #1
 80056f0:	d018      	beq.n	8005724 <MX25LM51245G_WriteCfg2Register+0x8e>
 80056f2:	2300      	movs	r3, #0
 80056f4:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80056f6:	b1d4      	cbz	r4, 800572e <MX25LM51245G_WriteCfg2Register+0x98>
 80056f8:	2d01      	cmp	r5, #1
 80056fa:	d016      	beq.n	800572a <MX25LM51245G_WriteCfg2Register+0x94>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e017      	b.n	8005730 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005700:	2304      	movs	r3, #4
 8005702:	e7d9      	b.n	80056b8 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005704:	2308      	movs	r3, #8
 8005706:	e7db      	b.n	80056c0 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005708:	2310      	movs	r3, #16
 800570a:	e7dc      	b.n	80056c6 <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800570c:	f247 238d 	movw	r3, #29325	; 0x728d
 8005710:	e7dc      	b.n	80056cc <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005716:	e7dd      	b.n	80056d4 <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8005718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800571c:	e7de      	b.n	80056dc <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800571e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005722:	e7e3      	b.n	80056ec <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005724:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005728:	e7e4      	b.n	80056f4 <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800572a:	2302      	movs	r3, #2
 800572c:	e000      	b.n	8005730 <MX25LM51245G_WriteCfg2Register+0x9a>
 800572e:	2301      	movs	r3, #1
 8005730:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005732:	f241 3288 	movw	r2, #5000	; 0x1388
 8005736:	4669      	mov	r1, sp
 8005738:	4638      	mov	r0, r7
 800573a:	f002 ff05 	bl	8008548 <HAL_OSPI_Command>
 800573e:	b958      	cbnz	r0, 8005758 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	a91a      	add	r1, sp, #104	; 0x68
 8005746:	4638      	mov	r0, r7
 8005748:	f002 ff5f 	bl	800860a <HAL_OSPI_Transmit>
 800574c:	b938      	cbnz	r0, 800575e <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800574e:	b015      	add	sp, #84	; 0x54
 8005750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 8005752:	f04f 30ff 	mov.w	r0, #4294967295
 8005756:	e7fa      	b.n	800574e <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	e7f7      	b.n	800574e <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 800575e:	f04f 30ff 	mov.w	r0, #4294967295
 8005762:	e7f4      	b.n	800574e <MX25LM51245G_WriteCfg2Register+0xb8>

08005764 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8005764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005766:	b095      	sub	sp, #84	; 0x54
 8005768:	4607      	mov	r7, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4615      	mov	r5, r2
 800576e:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8005770:	2250      	movs	r2, #80	; 0x50
 8005772:	2100      	movs	r1, #0
 8005774:	4668      	mov	r0, sp
 8005776:	f016 ff51 	bl	801c61c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800577a:	2c00      	cmp	r4, #0
 800577c:	bf08      	it	eq
 800577e:	2d01      	cmpeq	r5, #1
 8005780:	d05b      	beq.n	800583a <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005782:	2c00      	cmp	r4, #0
 8005784:	d13d      	bne.n	8005802 <MX25LM51245G_ReadCfg2Register+0x9e>
 8005786:	2301      	movs	r3, #1
 8005788:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800578a:	2d01      	cmp	r5, #1
 800578c:	d03b      	beq.n	8005806 <MX25LM51245G_ReadCfg2Register+0xa2>
 800578e:	2300      	movs	r3, #0
 8005790:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005792:	2c00      	cmp	r4, #0
 8005794:	d139      	bne.n	800580a <MX25LM51245G_ReadCfg2Register+0xa6>
 8005796:	2300      	movs	r3, #0
 8005798:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800579a:	2c00      	cmp	r4, #0
 800579c:	d137      	bne.n	800580e <MX25LM51245G_ReadCfg2Register+0xaa>
 800579e:	2371      	movs	r3, #113	; 0x71
 80057a0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	d136      	bne.n	8005814 <MX25LM51245G_ReadCfg2Register+0xb0>
 80057a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057aa:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80057ac:	2d01      	cmp	r5, #1
 80057ae:	d034      	beq.n	800581a <MX25LM51245G_ReadCfg2Register+0xb6>
 80057b0:	2300      	movs	r3, #0
 80057b2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80057b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80057b8:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80057ba:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80057bc:	bb84      	cbnz	r4, 8005820 <MX25LM51245G_ReadCfg2Register+0xbc>
 80057be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057c2:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80057c4:	2d01      	cmp	r5, #1
 80057c6:	d02e      	beq.n	8005826 <MX25LM51245G_ReadCfg2Register+0xc2>
 80057c8:	2300      	movs	r3, #0
 80057ca:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80057cc:	bb74      	cbnz	r4, 800582c <MX25LM51245G_ReadCfg2Register+0xc8>
 80057ce:	2300      	movs	r3, #0
 80057d0:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80057d2:	2d01      	cmp	r5, #1
 80057d4:	d02c      	beq.n	8005830 <MX25LM51245G_ReadCfg2Register+0xcc>
 80057d6:	2301      	movs	r3, #1
 80057d8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80057da:	2d01      	cmp	r5, #1
 80057dc:	d02a      	beq.n	8005834 <MX25LM51245G_ReadCfg2Register+0xd0>
 80057de:	2300      	movs	r3, #0
 80057e0:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e6:	4669      	mov	r1, sp
 80057e8:	4638      	mov	r0, r7
 80057ea:	f002 fead 	bl	8008548 <HAL_OSPI_Command>
 80057ee:	bb38      	cbnz	r0, 8005840 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057f6:	4638      	mov	r0, r7
 80057f8:	f002 ff54 	bl	80086a4 <HAL_OSPI_Receive>
 80057fc:	bb18      	cbnz	r0, 8005846 <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80057fe:	b015      	add	sp, #84	; 0x54
 8005800:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005802:	2304      	movs	r3, #4
 8005804:	e7c0      	b.n	8005788 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005806:	2308      	movs	r3, #8
 8005808:	e7c2      	b.n	8005790 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800580a:	2310      	movs	r3, #16
 800580c:	e7c4      	b.n	8005798 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800580e:	f247 138e 	movw	r3, #29070	; 0x718e
 8005812:	e7c5      	b.n	80057a0 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8005814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005818:	e7c7      	b.n	80057aa <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800581a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800581e:	e7c8      	b.n	80057b2 <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8005820:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005824:	e7cd      	b.n	80057c2 <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8005826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800582a:	e7ce      	b.n	80057ca <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800582c:	2305      	movs	r3, #5
 800582e:	e7cf      	b.n	80057d0 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8005830:	2302      	movs	r3, #2
 8005832:	e7d1      	b.n	80057d8 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8005834:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005838:	e7d2      	b.n	80057e0 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 800583a:	f04f 30ff 	mov.w	r0, #4294967295
 800583e:	e7de      	b.n	80057fe <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e7db      	b.n	80057fe <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	e7d8      	b.n	80057fe <MX25LM51245G_ReadCfg2Register+0x9a>

0800584c <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	b094      	sub	sp, #80	; 0x50
 8005850:	4606      	mov	r6, r0
 8005852:	460c      	mov	r4, r1
 8005854:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8005856:	2250      	movs	r2, #80	; 0x50
 8005858:	2100      	movs	r1, #0
 800585a:	4668      	mov	r0, sp
 800585c:	f016 fede 	bl	801c61c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8005860:	2c00      	cmp	r4, #0
 8005862:	bf08      	it	eq
 8005864:	2d01      	cmpeq	r5, #1
 8005866:	d01e      	beq.n	80058a6 <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005868:	b9a4      	cbnz	r4, 8005894 <MX25LM51245G_ResetEnable+0x48>
 800586a:	2301      	movs	r3, #1
 800586c:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800586e:	2d01      	cmp	r5, #1
 8005870:	d012      	beq.n	8005898 <MX25LM51245G_ResetEnable+0x4c>
 8005872:	2300      	movs	r3, #0
 8005874:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005876:	b98c      	cbnz	r4, 800589c <MX25LM51245G_ResetEnable+0x50>
 8005878:	2300      	movs	r3, #0
 800587a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800587c:	b984      	cbnz	r4, 80058a0 <MX25LM51245G_ResetEnable+0x54>
 800587e:	2366      	movs	r3, #102	; 0x66
 8005880:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4669      	mov	r1, sp
 8005888:	4630      	mov	r0, r6
 800588a:	f002 fe5d 	bl	8008548 <HAL_OSPI_Command>
 800588e:	b968      	cbnz	r0, 80058ac <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8005890:	b014      	add	sp, #80	; 0x50
 8005892:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8005894:	2304      	movs	r3, #4
 8005896:	e7e9      	b.n	800586c <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005898:	2308      	movs	r3, #8
 800589a:	e7eb      	b.n	8005874 <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800589c:	2310      	movs	r3, #16
 800589e:	e7ec      	b.n	800587a <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80058a0:	f246 6399 	movw	r3, #26265	; 0x6699
 80058a4:	e7ec      	b.n	8005880 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	e7f1      	b.n	8005890 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e7ee      	b.n	8005890 <MX25LM51245G_ResetEnable+0x44>

080058b2 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	b094      	sub	sp, #80	; 0x50
 80058b6:	4606      	mov	r6, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80058bc:	2250      	movs	r2, #80	; 0x50
 80058be:	2100      	movs	r1, #0
 80058c0:	4668      	mov	r0, sp
 80058c2:	f016 feab 	bl	801c61c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80058c6:	2c00      	cmp	r4, #0
 80058c8:	bf08      	it	eq
 80058ca:	2d01      	cmpeq	r5, #1
 80058cc:	d01e      	beq.n	800590c <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80058ce:	b9a4      	cbnz	r4, 80058fa <MX25LM51245G_ResetMemory+0x48>
 80058d0:	2301      	movs	r3, #1
 80058d2:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058d4:	2d01      	cmp	r5, #1
 80058d6:	d012      	beq.n	80058fe <MX25LM51245G_ResetMemory+0x4c>
 80058d8:	2300      	movs	r3, #0
 80058da:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80058dc:	b98c      	cbnz	r4, 8005902 <MX25LM51245G_ResetMemory+0x50>
 80058de:	2300      	movs	r3, #0
 80058e0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80058e2:	b984      	cbnz	r4, 8005906 <MX25LM51245G_ResetMemory+0x54>
 80058e4:	2399      	movs	r3, #153	; 0x99
 80058e6:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4669      	mov	r1, sp
 80058ee:	4630      	mov	r0, r6
 80058f0:	f002 fe2a 	bl	8008548 <HAL_OSPI_Command>
 80058f4:	b968      	cbnz	r0, 8005912 <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80058f6:	b014      	add	sp, #80	; 0x50
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80058fa:	2304      	movs	r3, #4
 80058fc:	e7e9      	b.n	80058d2 <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058fe:	2308      	movs	r3, #8
 8005900:	e7eb      	b.n	80058da <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8005902:	2310      	movs	r3, #16
 8005904:	e7ec      	b.n	80058e0 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8005906:	f649 1366 	movw	r3, #39270	; 0x9966
 800590a:	e7ec      	b.n	80058e6 <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e7f1      	b.n	80058f6 <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	e7ee      	b.n	80058f6 <MX25LM51245G_ResetMemory+0x44>

08005918 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800591c:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 800591e:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 8005922:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005926:	4b31      	ldr	r3, [pc, #196]	; (80059ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8005928:	222c      	movs	r2, #44	; 0x2c
 800592a:	fb02 3101 	mla	r1, r2, r1, r3
 800592e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005930:	68ca      	ldr	r2, [r1, #12]
 8005932:	eb03 0e02 	add.w	lr, r3, r2
 8005936:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800593a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800593c:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800593e:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005942:	690b      	ldr	r3, [r1, #16]
 8005944:	6a08      	ldr	r0, [r1, #32]
 8005946:	1a1e      	subs	r6, r3, r0
 8005948:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800594c:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800594e:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8005952:	694b      	ldr	r3, [r1, #20]
 8005954:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8005958:	f1be 0f00 	cmp.w	lr, #0
 800595c:	dd08      	ble.n	8005970 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 800595e:	2e00      	cmp	r6, #0
 8005960:	dd09      	ble.n	8005976 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005962:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005964:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005968:	2d0f      	cmp	r5, #15
 800596a:	d83b      	bhi.n	80059e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800596c:	2400      	movs	r4, #0
 800596e:	e02b      	b.n	80059c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8005970:	f04f 0e00 	mov.w	lr, #0
 8005974:	e7f3      	b.n	800595e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 8005976:	2600      	movs	r6, #0
 8005978:	e7f3      	b.n	8005962 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800597a:	3201      	adds	r2, #1
 800597c:	2a0f      	cmp	r2, #15
 800597e:	d822      	bhi.n	80059c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8005980:	fb02 f300 	mul.w	r3, r2, r0
 8005984:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005988:	459e      	cmp	lr, r3
 800598a:	bf8c      	ite	hi
 800598c:	2100      	movhi	r1, #0
 800598e:	2101      	movls	r1, #1
 8005990:	429e      	cmp	r6, r3
 8005992:	bf38      	it	cc
 8005994:	2100      	movcc	r1, #0
 8005996:	2900      	cmp	r1, #0
 8005998:	d0ef      	beq.n	800597a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 800599a:	45a9      	cmp	r9, r5
 800599c:	d0ed      	beq.n	800597a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800599e:	4914      	ldr	r1, [pc, #80]	; (80059f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80059a0:	680b      	ldr	r3, [r1, #0]
 80059a2:	f8df a050 	ldr.w	sl, [pc, #80]	; 80059f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80059a6:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80059aa:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80059ae:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80059b2:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80059b6:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80059ba:	3301      	adds	r3, #1
 80059bc:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80059be:	2b7f      	cmp	r3, #127	; 0x7f
 80059c0:	d810      	bhi.n	80059e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80059c2:	46a9      	mov	r9, r5
 80059c4:	e7d9      	b.n	800597a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80059c6:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80059c8:	2c0f      	cmp	r4, #15
 80059ca:	d809      	bhi.n	80059e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80059cc:	1c67      	adds	r7, r4, #1
 80059ce:	1c68      	adds	r0, r5, #1
 80059d0:	fb04 0300 	mla	r3, r4, r0, r0
 80059d4:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80059d8:	4598      	cmp	r8, r3
 80059da:	d8f4      	bhi.n	80059c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80059dc:	2200      	movs	r2, #0
 80059de:	e7cd      	b.n	800597c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7c1      	b.n	8005968 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	3b9aca00 	.word	0x3b9aca00
 80059ec:	0801ed00 	.word	0x0801ed00
 80059f0:	240029b8 	.word	0x240029b8
 80059f4:	24001fb8 	.word	0x24001fb8

080059f8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	b089      	sub	sp, #36	; 0x24
 80059fe:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a00:	4f4b      	ldr	r7, [pc, #300]	; (8005b30 <I2C_Compute_SCLL_SCLH+0x138>)
 8005a02:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8005a06:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8005a0a:	494a      	ldr	r1, [pc, #296]	; (8005b34 <I2C_Compute_SCLL_SCLH+0x13c>)
 8005a0c:	232c      	movs	r3, #44	; 0x2c
 8005a0e:	fb04 f303 	mul.w	r3, r4, r3
 8005a12:	18ca      	adds	r2, r1, r3
 8005a14:	58cb      	ldr	r3, [r1, r3]
 8005a16:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8005a1a:	fbb1 f1f3 	udiv	r1, r1, r3
 8005a1e:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005a20:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005a22:	fb08 f303 	mul.w	r3, r8, r3
 8005a26:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005a28:	6853      	ldr	r3, [r2, #4]
 8005a2a:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005a2e:	6893      	ldr	r3, [r2, #8]
 8005a30:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8005a34:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a42:	e060      	b.n	8005b06 <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8005a44:	1af2      	subs	r2, r6, r3
 8005a46:	e02a      	b.n	8005a9e <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8005a48:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005a4a:	29ff      	cmp	r1, #255	; 0xff
 8005a4c:	d837      	bhi.n	8005abe <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005a4e:	1c4d      	adds	r5, r1, #1
 8005a50:	fb01 0200 	mla	r2, r1, r0, r0
 8005a54:	4442      	add	r2, r8
 8005a56:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005a58:	eb0c 0302 	add.w	r3, ip, r2
 8005a5c:	4e35      	ldr	r6, [pc, #212]	; (8005b34 <I2C_Compute_SCLL_SCLH+0x13c>)
 8005a5e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8005a62:	fb0b 6b04 	mla	fp, fp, r4, r6
 8005a66:	f8db 6020 	ldr.w	r6, [fp, #32]
 8005a6a:	4433      	add	r3, r6
 8005a6c:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8005a70:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005a72:	429f      	cmp	r7, r3
 8005a74:	bf8c      	ite	hi
 8005a76:	2600      	movhi	r6, #0
 8005a78:	2601      	movls	r6, #1
 8005a7a:	4599      	cmp	r9, r3
 8005a7c:	bf38      	it	cc
 8005a7e:	2600      	movcc	r6, #0
 8005a80:	2e00      	cmp	r6, #0
 8005a82:	d0e1      	beq.n	8005a48 <I2C_Compute_SCLL_SCLH+0x50>
 8005a84:	4e2b      	ldr	r6, [pc, #172]	; (8005b34 <I2C_Compute_SCLL_SCLH+0x13c>)
 8005a86:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8005a8a:	fb0b 6604 	mla	r6, fp, r4, r6
 8005a8e:	69f6      	ldr	r6, [r6, #28]
 8005a90:	4296      	cmp	r6, r2
 8005a92:	d8d9      	bhi.n	8005a48 <I2C_Compute_SCLL_SCLH+0x50>
 8005a94:	4592      	cmp	sl, r2
 8005a96:	d2d7      	bcs.n	8005a48 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8005a98:	9e05      	ldr	r6, [sp, #20]
 8005a9a:	1b9a      	subs	r2, r3, r6
 8005a9c:	d4d2      	bmi.n	8005a44 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d2d1      	bcs.n	8005a48 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8005aa4:	9b04      	ldr	r3, [sp, #16]
 8005aa6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <I2C_Compute_SCLL_SCLH+0x140>)
 8005aac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005ab0:	9e01      	ldr	r6, [sp, #4]
 8005ab2:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005ab4:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8005ab6:	9202      	str	r2, [sp, #8]
              ret = count;
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	9307      	str	r3, [sp, #28]
 8005abc:	e7c4      	b.n	8005a48 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	2bff      	cmp	r3, #255	; 0xff
 8005ac6:	d81b      	bhi.n	8005b00 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005ac8:	9906      	ldr	r1, [sp, #24]
 8005aca:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	9203      	str	r2, [sp, #12]
 8005ad4:	fb03 0c00 	mla	ip, r3, r0, r0
 8005ad8:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8005adc:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8005ae0:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <I2C_Compute_SCLL_SCLH+0x13c>)
 8005ae4:	222c      	movs	r2, #44	; 0x2c
 8005ae6:	fb02 3304 	mla	r3, r2, r4, r3
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	4563      	cmp	r3, ip
 8005aee:	d2e6      	bcs.n	8005abe <I2C_Compute_SCLL_SCLH+0xc6>
 8005af0:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8005af4:	1a5b      	subs	r3, r3, r1
 8005af6:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8005afa:	d2e0      	bcs.n	8005abe <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005afc:	2100      	movs	r1, #0
 8005afe:	e7a4      	b.n	8005a4a <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005b00:	9b04      	ldr	r3, [sp, #16]
 8005b02:	3301      	adds	r3, #1
 8005b04:	9304      	str	r3, [sp, #16]
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <I2C_Compute_SCLL_SCLH+0x144>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	9a04      	ldr	r2, [sp, #16]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d90a      	bls.n	8005b26 <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b16:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <I2C_Compute_SCLL_SCLH+0x140>)
 8005b18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b1c:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	e7cd      	b.n	8005ac2 <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8005b26:	9807      	ldr	r0, [sp, #28]
 8005b28:	b009      	add	sp, #36	; 0x24
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2e:	bf00      	nop
 8005b30:	3b9aca00 	.word	0x3b9aca00
 8005b34:	0801ed00 	.word	0x0801ed00
 8005b38:	24001fb8 	.word	0x24001fb8
 8005b3c:	240029b8 	.word	0x240029b8

08005b40 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005b40:	2800      	cmp	r0, #0
 8005b42:	bf18      	it	ne
 8005b44:	2900      	cmpne	r1, #0
 8005b46:	d134      	bne.n	8005bb2 <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8005b48:	2000      	movs	r0, #0
}
 8005b4a:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005b4c:	3401      	adds	r4, #1
 8005b4e:	2c02      	cmp	r4, #2
 8005b50:	d834      	bhi.n	8005bbc <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <I2C_GetTiming+0x84>)
 8005b54:	212c      	movs	r1, #44	; 0x2c
 8005b56:	fb01 3304 	mla	r3, r1, r4, r3
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d8f5      	bhi.n	8005b4c <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8005b60:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <I2C_GetTiming+0x84>)
 8005b62:	fb01 3304 	mla	r3, r1, r4, r3
 8005b66:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d3ef      	bcc.n	8005b4c <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f7ff fed2 	bl	8005918 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8005b74:	4621      	mov	r1, r4
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7ff ff3e 	bl	80059f8 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8005b7c:	287f      	cmp	r0, #127	; 0x7f
 8005b7e:	d81f      	bhi.n	8005bc0 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <I2C_GetTiming+0x88>)
 8005b82:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005b86:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8005b8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	051b      	lsls	r3, r3, #20
 8005b92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005b96:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005b9a:	68a1      	ldr	r1, [r4, #8]
 8005b9c:	0409      	lsls	r1, r1, #16
 8005b9e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005ba2:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005ba4:	68e1      	ldr	r1, [r4, #12]
 8005ba6:	0209      	lsls	r1, r1, #8
 8005ba8:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005baa:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005bac:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005bae:	4318      	orrs	r0, r3
 8005bb0:	e005      	b.n	8005bbe <I2C_GetTiming+0x7e>
{
 8005bb2:	b538      	push	{r3, r4, r5, lr}
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005bb8:	2400      	movs	r4, #0
 8005bba:	e7c8      	b.n	8005b4e <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8005bbc:	2000      	movs	r0, #0
}
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8005bc0:	2000      	movs	r0, #0
  return ret;
 8005bc2:	e7fc      	b.n	8005bbe <I2C_GetTiming+0x7e>
 8005bc4:	0801ed00 	.word	0x0801ed00
 8005bc8:	24001fb8 	.word	0x24001fb8

08005bcc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8005bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bd0:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005bd2:	4c2a      	ldr	r4, [pc, #168]	; (8005c7c <I2C4_MspInit+0xb0>)
 8005bd4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8005be0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005bec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005bf0:	f043 0308 	orr.w	r3, r3, #8
 8005bf4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8005bf8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c08:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c0a:	f04f 0912 	mov.w	r9, #18
 8005c0e:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005c1a:	2702      	movs	r7, #2
 8005c1c:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005c1e:	2604      	movs	r6, #4
 8005c20:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005c22:	4d17      	ldr	r5, [pc, #92]	; (8005c80 <I2C4_MspInit+0xb4>)
 8005c24:	a903      	add	r1, sp, #12
 8005c26:	4628      	mov	r0, r5
 8005c28:	f001 fada 	bl	80071e0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c30:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c32:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c36:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005c3a:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005c3c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005c3e:	a903      	add	r1, sp, #12
 8005c40:	4628      	mov	r0, r5
 8005c42:	f001 facd 	bl	80071e0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8005c46:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8005c52:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	9302      	str	r3, [sp, #8]
 8005c5c:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8005c5e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8005c6a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8005c76:	b009      	add	sp, #36	; 0x24
 8005c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	58020c00 	.word	0x58020c00

08005c84 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8005c84:	b510      	push	{r4, lr}
 8005c86:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8005c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c8c:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005c8e:	4c09      	ldr	r4, [pc, #36]	; (8005cb4 <I2C4_MspDeInit+0x30>)
 8005c90:	4620      	mov	r0, r4
 8005c92:	f001 fbb5 	bl	8007400 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8005c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c9a:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f001 fbaf 	bl	8007400 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005ca2:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <I2C4_MspDeInit+0x34>)
 8005ca4:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8005ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8005cb0:	b006      	add	sp, #24
 8005cb2:	bd10      	pop	{r4, pc}
 8005cb4:	58020c00 	.word	0x58020c00
 8005cb8:	58024400 	.word	0x58024400

08005cbc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005cc0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005cc4:	9402      	str	r4, [sp, #8]
 8005cc6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8005cca:	9401      	str	r4, [sp, #4]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <I2C4_WriteReg+0x2c>)
 8005cd6:	f001 fe98 	bl	8007a0a <HAL_I2C_Mem_Write>
 8005cda:	b910      	cbnz	r0, 8005ce2 <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8005cdc:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8005cde:	b004      	add	sp, #16
 8005ce0:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8005ce2:	f06f 0007 	mvn.w	r0, #7
 8005ce6:	e7fa      	b.n	8005cde <I2C4_WriteReg+0x22>
 8005ce8:	240029bc 	.word	0x240029bc

08005cec <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005cec:	b510      	push	{r4, lr}
 8005cee:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005cf0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005cf4:	9402      	str	r4, [sp, #8]
 8005cf6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8005cfa:	9401      	str	r4, [sp, #4]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	460a      	mov	r2, r1
 8005d02:	4601      	mov	r1, r0
 8005d04:	4804      	ldr	r0, [pc, #16]	; (8005d18 <I2C4_ReadReg+0x2c>)
 8005d06:	f001 ff55 	bl	8007bb4 <HAL_I2C_Mem_Read>
 8005d0a:	b910      	cbnz	r0, 8005d12 <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8005d0c:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8005d12:	f06f 0007 	mvn.w	r0, #7
 8005d16:	e7fa      	b.n	8005d0e <I2C4_ReadReg+0x22>
 8005d18:	240029bc 	.word	0x240029bc

08005d1c <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8005d1c:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <BSP_I2C4_DeInit+0x28>)
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005d24:	b10b      	cbz	r3, 8005d2a <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8005d26:	2000      	movs	r0, #0
}
 8005d28:	4770      	bx	lr
{
 8005d2a:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8005d2c:	4c06      	ldr	r4, [pc, #24]	; (8005d48 <BSP_I2C4_DeInit+0x2c>)
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff ffa8 	bl	8005c84 <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005d34:	4620      	mov	r0, r4
 8005d36:	f001 fe4f 	bl	80079d8 <HAL_I2C_DeInit>
 8005d3a:	b900      	cbnz	r0, 8005d3e <BSP_I2C4_DeInit+0x22>
}
 8005d3c:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8005d3e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005d42:	e7fb      	b.n	8005d3c <BSP_I2C4_DeInit+0x20>
 8005d44:	24001fb4 	.word	0x24001fb4
 8005d48:	240029bc 	.word	0x240029bc

08005d4c <MX_I2C4_Init>:
{
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8005d50:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005d56:	2201      	movs	r2, #1
 8005d58:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005d5a:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005d5c:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d5e:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005d60:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005d62:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005d64:	f001 fdda 	bl	800791c <HAL_I2C_Init>
 8005d68:	b108      	cbz	r0, 8005d6e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8005d6a:	2001      	movs	r0, #1
}
 8005d6c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4620      	mov	r0, r4
 8005d72:	f001 fffc 	bl	8007d6e <HAL_I2CEx_ConfigAnalogFilter>
 8005d76:	b108      	cbz	r0, 8005d7c <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8005d78:	2001      	movs	r0, #1
 8005d7a:	e7f7      	b.n	8005d6c <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f002 f823 	bl	8007dca <HAL_I2CEx_ConfigDigitalFilter>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0f1      	beq.n	8005d6c <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e7ef      	b.n	8005d6c <MX_I2C4_Init+0x20>

08005d8c <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005d8c:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <BSP_I2C4_Init+0x48>)
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <BSP_I2C4_Init+0x4c>)
 8005d90:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <BSP_I2C4_Init+0x50>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	b10b      	cbz	r3, 8005d9c <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8005d98:	2000      	movs	r0, #0
}
 8005d9a:	4770      	bx	lr
{
 8005d9c:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8005d9e:	3301      	adds	r3, #1
 8005da0:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <BSP_I2C4_Init+0x50>)
 8005da2:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <BSP_I2C4_Init+0x48>)
 8005da6:	f001 ffdd 	bl	8007d64 <HAL_I2C_GetState>
 8005daa:	b108      	cbz	r0, 8005db0 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8005dac:	2000      	movs	r0, #0
}
 8005dae:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8005db0:	4c08      	ldr	r4, [pc, #32]	; (8005dd4 <BSP_I2C4_Init+0x48>)
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff ff0a 	bl	8005bcc <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005db8:	f003 fd04 	bl	80097c4 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	4908      	ldr	r1, [pc, #32]	; (8005de0 <BSP_I2C4_Init+0x54>)
 8005dbe:	f7ff febf 	bl	8005b40 <I2C_GetTiming>
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7ff ffc1 	bl	8005d4c <MX_I2C4_Init>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d0ef      	beq.n	8005dae <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8005dce:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005dd2:	e7ec      	b.n	8005dae <BSP_I2C4_Init+0x22>
 8005dd4:	240029bc 	.word	0x240029bc
 8005dd8:	58001c00 	.word	0x58001c00
 8005ddc:	24001fb4 	.word	0x24001fb4
 8005de0:	000186a0 	.word	0x000186a0

08005de4 <BSP_I2C4_WriteReg>:
{
 8005de4:	b500      	push	{lr}
 8005de6:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	2201      	movs	r2, #1
 8005dee:	f7ff ff65 	bl	8005cbc <I2C4_WriteReg>
 8005df2:	b910      	cbnz	r0, 8005dfa <BSP_I2C4_WriteReg+0x16>
}
 8005df4:	b003      	add	sp, #12
 8005df6:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005dfa:	4805      	ldr	r0, [pc, #20]	; (8005e10 <BSP_I2C4_WriteReg+0x2c>)
 8005dfc:	f001 ffb5 	bl	8007d6a <HAL_I2C_GetError>
 8005e00:	2804      	cmp	r0, #4
 8005e02:	d002      	beq.n	8005e0a <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e04:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005e08:	e7f4      	b.n	8005df4 <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e0a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8005e0e:	e7f1      	b.n	8005df4 <BSP_I2C4_WriteReg+0x10>
 8005e10:	240029bc 	.word	0x240029bc

08005e14 <BSP_I2C4_ReadReg>:
{
 8005e14:	b500      	push	{lr}
 8005e16:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f7ff ff65 	bl	8005cec <I2C4_ReadReg>
 8005e22:	b910      	cbnz	r0, 8005e2a <BSP_I2C4_ReadReg+0x16>
}
 8005e24:	b003      	add	sp, #12
 8005e26:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005e2a:	4805      	ldr	r0, [pc, #20]	; (8005e40 <BSP_I2C4_ReadReg+0x2c>)
 8005e2c:	f001 ff9d 	bl	8007d6a <HAL_I2C_GetError>
 8005e30:	2804      	cmp	r0, #4
 8005e32:	d002      	beq.n	8005e3a <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e34:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005e38:	e7f4      	b.n	8005e24 <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e3a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8005e3e:	e7f1      	b.n	8005e24 <BSP_I2C4_ReadReg+0x10>
 8005e40:	240029bc 	.word	0x240029bc

08005e44 <BSP_GetTick>:
{
 8005e44:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8005e46:	f000 fde7 	bl	8006a18 <HAL_GetTick>
}
 8005e4a:	bd08      	pop	{r3, pc}

08005e4c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8005e52:	4b7e      	ldr	r3, [pc, #504]	; (800604c <OSPI_NOR_MspInit+0x200>)
 8005e54:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e5c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8005e60:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005e64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e68:	9201      	str	r2, [sp, #4]
 8005e6a:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8005e6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8005e74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e7a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8005e7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005e80:	f042 0202 	orr.w	r2, r2, #2
 8005e84:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005e88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005e8c:	f002 0202 	and.w	r2, r2, #2
 8005e90:	9202      	str	r2, [sp, #8]
 8005e92:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8005e94:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005e98:	f042 0204 	orr.w	r2, r2, #4
 8005e9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005ea0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ea4:	f002 0204 	and.w	r2, r2, #4
 8005ea8:	9203      	str	r2, [sp, #12]
 8005eaa:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8005eac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005eb8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ebc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005ec0:	9204      	str	r2, [sp, #16]
 8005ec2:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8005ec4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ec8:	f042 0208 	orr.w	r2, r2, #8
 8005ecc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005ed0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ed4:	f002 0208 	and.w	r2, r2, #8
 8005ed8:	9205      	str	r2, [sp, #20]
 8005eda:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8005edc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ee0:	f042 0220 	orr.w	r2, r2, #32
 8005ee4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005ee8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005eec:	f002 0220 	and.w	r2, r2, #32
 8005ef0:	9206      	str	r2, [sp, #24]
 8005ef2:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8005ef4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005ef8:	f042 0220 	orr.w	r2, r2, #32
 8005efc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f00:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f04:	f002 0220 	and.w	r2, r2, #32
 8005f08:	9207      	str	r2, [sp, #28]
 8005f0a:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8005f0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f10:	f042 0220 	orr.w	r2, r2, #32
 8005f14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f18:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f1c:	f002 0220 	and.w	r2, r2, #32
 8005f20:	9208      	str	r2, [sp, #32]
 8005f22:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8005f24:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f28:	f042 0204 	orr.w	r2, r2, #4
 8005f2c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f30:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f34:	f002 0204 	and.w	r2, r2, #4
 8005f38:	9209      	str	r2, [sp, #36]	; 0x24
 8005f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8005f3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f48:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f4c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005f50:	920a      	str	r2, [sp, #40]	; 0x28
 8005f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8005f54:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f60:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f64:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f68:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8005f6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8005f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f74:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8005f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	930c      	str	r3, [sp, #48]	; 0x30
 8005f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8005f84:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8005f88:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005f8c:	f04f 0a02 	mov.w	sl, #2
 8005f90:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005f94:	2301      	movs	r3, #1
 8005f96:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8005f9c:	240a      	movs	r4, #10
 8005f9e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005fa0:	a90d      	add	r1, sp, #52	; 0x34
 8005fa2:	482b      	ldr	r0, [pc, #172]	; (8006050 <OSPI_NOR_MspInit+0x204>)
 8005fa4:	f001 f91c 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8005fa8:	2320      	movs	r3, #32
 8005faa:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8005fac:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8005fae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006064 <OSPI_NOR_MspInit+0x218>
 8005fb2:	a90d      	add	r1, sp, #52	; 0x34
 8005fb4:	4648      	mov	r0, r9
 8005fb6:	f001 f913 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8005fba:	2304      	movs	r3, #4
 8005fbc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8005fc2:	2509      	movs	r5, #9
 8005fc4:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005fc6:	a90d      	add	r1, sp, #52	; 0x34
 8005fc8:	4822      	ldr	r0, [pc, #136]	; (8006054 <OSPI_NOR_MspInit+0x208>)
 8005fca:	f001 f909 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8005fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fd2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8005fd4:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8005fd6:	a90d      	add	r1, sp, #52	; 0x34
 8005fd8:	481f      	ldr	r0, [pc, #124]	; (8006058 <OSPI_NOR_MspInit+0x20c>)
 8005fda:	f001 f901 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8005fde:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005fe2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8005fe6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8005fe8:	4e1c      	ldr	r6, [pc, #112]	; (800605c <OSPI_NOR_MspInit+0x210>)
 8005fea:	a90d      	add	r1, sp, #52	; 0x34
 8005fec:	4630      	mov	r0, r6
 8005fee:	f001 f8f7 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8005ff2:	2780      	movs	r7, #128	; 0x80
 8005ff4:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8005ff6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8005ff8:	a90d      	add	r1, sp, #52	; 0x34
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f001 f8f0 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006000:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8006004:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006006:	a90d      	add	r1, sp, #52	; 0x34
 8006008:	4630      	mov	r0, r6
 800600a:	f001 f8e9 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800600e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8006012:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006014:	a90d      	add	r1, sp, #52	; 0x34
 8006016:	4648      	mov	r0, r9
 8006018:	f001 f8e2 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800601c:	2308      	movs	r3, #8
 800601e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006020:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8006022:	a90d      	add	r1, sp, #52	; 0x34
 8006024:	480e      	ldr	r0, [pc, #56]	; (8006060 <OSPI_NOR_MspInit+0x214>)
 8006026:	f001 f8db 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800602a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800602e:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006030:	a90d      	add	r1, sp, #52	; 0x34
 8006032:	4807      	ldr	r0, [pc, #28]	; (8006050 <OSPI_NOR_MspInit+0x204>)
 8006034:	f001 f8d4 	bl	80071e0 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8006038:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800603a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800603c:	a90d      	add	r1, sp, #52	; 0x34
 800603e:	4806      	ldr	r0, [pc, #24]	; (8006058 <OSPI_NOR_MspInit+0x20c>)
 8006040:	f001 f8ce 	bl	80071e0 <HAL_GPIO_Init>
}
 8006044:	b013      	add	sp, #76	; 0x4c
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
 8006050:	58021800 	.word	0x58021800
 8006054:	58020400 	.word	0x58020400
 8006058:	58020c00 	.word	0x58020c00
 800605c:	58021400 	.word	0x58021400
 8006060:	58021c00 	.word	0x58021c00
 8006064:	58020800 	.word	0x58020800

08006068 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800606c:	4c24      	ldr	r4, [pc, #144]	; (8006100 <OSPI_NOR_ResetMemory+0x98>)
 800606e:	235c      	movs	r3, #92	; 0x5c
 8006070:	fb03 4400 	mla	r4, r3, r0, r4
 8006074:	2200      	movs	r2, #0
 8006076:	4611      	mov	r1, r2
 8006078:	4620      	mov	r0, r4
 800607a:	f7ff fbe7 	bl	800584c <MX25LM51245G_ResetEnable>
 800607e:	bb60      	cbnz	r0, 80060da <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006080:	2200      	movs	r2, #0
 8006082:	4611      	mov	r1, r2
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fc14 	bl	80058b2 <MX25LM51245G_ResetMemory>
 800608a:	bb48      	cbnz	r0, 80060e0 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800608c:	2200      	movs	r2, #0
 800608e:	2101      	movs	r1, #1
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff fbdb 	bl	800584c <MX25LM51245G_ResetEnable>
 8006096:	bb30      	cbnz	r0, 80060e6 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006098:	2200      	movs	r2, #0
 800609a:	2101      	movs	r1, #1
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff fc08 	bl	80058b2 <MX25LM51245G_ResetMemory>
 80060a2:	bb18      	cbnz	r0, 80060ec <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80060a4:	2201      	movs	r2, #1
 80060a6:	4611      	mov	r1, r2
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7ff fbcf 	bl	800584c <MX25LM51245G_ResetEnable>
 80060ae:	bb00      	cbnz	r0, 80060f2 <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80060b0:	2201      	movs	r2, #1
 80060b2:	4611      	mov	r1, r2
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff fbfc 	bl	80058b2 <MX25LM51245G_ResetMemory>
 80060ba:	4604      	mov	r4, r0
 80060bc:	b9e0      	cbnz	r0, 80060f8 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80060be:	4811      	ldr	r0, [pc, #68]	; (8006104 <OSPI_NOR_ResetMemory+0x9c>)
 80060c0:	2301      	movs	r3, #1
 80060c2:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80060c6:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80060ca:	2300      	movs	r3, #0
 80060cc:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80060ce:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80060d0:	2064      	movs	r0, #100	; 0x64
 80060d2:	f000 fca7 	bl	8006a24 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 80060d6:	4620      	mov	r0, r4
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060da:	f06f 0404 	mvn.w	r4, #4
 80060de:	e7fa      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e0:	f06f 0404 	mvn.w	r4, #4
 80060e4:	e7f7      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e6:	f06f 0404 	mvn.w	r4, #4
 80060ea:	e7f4      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060ec:	f06f 0404 	mvn.w	r4, #4
 80060f0:	e7f1      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060f2:	f06f 0404 	mvn.w	r4, #4
 80060f6:	e7ee      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80060f8:	f06f 0404 	mvn.w	r4, #4
  return ret;
 80060fc:	e7eb      	b.n	80060d6 <OSPI_NOR_ResetMemory+0x6e>
 80060fe:	bf00      	nop
 8006100:	24002a10 	.word	0x24002a10
 8006104:	24002a08 	.word	0x24002a08

08006108 <OSPI_NOR_MspDeInit>:
{
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800610a:	2104      	movs	r1, #4
 800610c:	4820      	ldr	r0, [pc, #128]	; (8006190 <OSPI_NOR_MspDeInit+0x88>)
 800610e:	f001 f977 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8006112:	4f20      	ldr	r7, [pc, #128]	; (8006194 <OSPI_NOR_MspDeInit+0x8c>)
 8006114:	2120      	movs	r1, #32
 8006116:	4638      	mov	r0, r7
 8006118:	f001 f972 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800611c:	4e1e      	ldr	r6, [pc, #120]	; (8006198 <OSPI_NOR_MspDeInit+0x90>)
 800611e:	2140      	movs	r1, #64	; 0x40
 8006120:	4630      	mov	r0, r6
 8006122:	f001 f96d 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006126:	4d1d      	ldr	r5, [pc, #116]	; (800619c <OSPI_NOR_MspDeInit+0x94>)
 8006128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800612c:	4628      	mov	r0, r5
 800612e:	f001 f967 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8006132:	4c1b      	ldr	r4, [pc, #108]	; (80061a0 <OSPI_NOR_MspDeInit+0x98>)
 8006134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006138:	4620      	mov	r0, r4
 800613a:	f001 f961 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	4620      	mov	r0, r4
 8006142:	f001 f95d 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8006146:	2140      	movs	r1, #64	; 0x40
 8006148:	4620      	mov	r0, r4
 800614a:	f001 f959 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800614e:	2102      	movs	r1, #2
 8006150:	4638      	mov	r0, r7
 8006152:	f001 f955 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8006156:	2108      	movs	r1, #8
 8006158:	4812      	ldr	r0, [pc, #72]	; (80061a4 <OSPI_NOR_MspDeInit+0x9c>)
 800615a:	f001 f951 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800615e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006162:	4630      	mov	r0, r6
 8006164:	f001 f94c 	bl	8007400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8006168:	2180      	movs	r1, #128	; 0x80
 800616a:	4628      	mov	r0, r5
 800616c:	f001 f948 	bl	8007400 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <OSPI_NOR_MspDeInit+0xa0>)
 8006172:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006178:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800617a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800617c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006180:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 8006182:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8006186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800618a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006190:	58020400 	.word	0x58020400
 8006194:	58020800 	.word	0x58020800
 8006198:	58021800 	.word	0x58021800
 800619c:	58020c00 	.word	0x58020c00
 80061a0:	58021400 	.word	0x58021400
 80061a4:	58021c00 	.word	0x58021c00
 80061a8:	58024400 	.word	0x58024400

080061ac <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80061b2:	4d2b      	ldr	r5, [pc, #172]	; (8006260 <OSPI_NOR_ExitOPIMode+0xb4>)
 80061b4:	235c      	movs	r3, #92	; 0x5c
 80061b6:	fb03 5500 	mla	r5, r3, r0, r5
 80061ba:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <OSPI_NOR_ExitOPIMode+0xb8>)
 80061bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80061c0:	789a      	ldrb	r2, [r3, #2]
 80061c2:	7859      	ldrb	r1, [r3, #1]
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff f9cf 	bl	8005568 <MX25LM51245G_WriteEnable>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d138      	bne.n	8006240 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 80061d4:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80061d8:	4922      	ldr	r1, [pc, #136]	; (8006264 <OSPI_NOR_ExitOPIMode+0xb8>)
 80061da:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	788a      	ldrb	r2, [r1, #2]
 80061e2:	7849      	ldrb	r1, [r1, #1]
 80061e4:	4628      	mov	r0, r5
 80061e6:	f7ff fa56 	bl	8005696 <MX25LM51245G_WriteCfg2Register>
 80061ea:	4606      	mov	r6, r0
 80061ec:	bb58      	cbnz	r0, 8006246 <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80061ee:	2028      	movs	r0, #40	; 0x28
 80061f0:	f000 fc18 	bl	8006a24 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <OSPI_NOR_ExitOPIMode+0xb8>)
 80061f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061fa:	789b      	ldrb	r3, [r3, #2]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d014      	beq.n	800622a <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8006200:	2200      	movs	r2, #0
 8006202:	4611      	mov	r1, r2
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff f872 	bl	80052ee <MX25LM51245G_AutoPollingMemReady>
 800620a:	b9f8      	cbnz	r0, 800624c <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800620c:	ab03      	add	r3, sp, #12
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	461a      	mov	r2, r3
 8006214:	4619      	mov	r1, r3
 8006216:	4628      	mov	r0, r5
 8006218:	f7ff faa4 	bl	8005764 <MX25LM51245G_ReadCfg2Register>
 800621c:	b9c8      	cbnz	r0, 8006252 <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 800621e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006222:	b9cb      	cbnz	r3, 8006258 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8006224:	4630      	mov	r0, r6
 8006226:	b004      	add	sp, #16
 8006228:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800622a:	2300      	movs	r3, #0
 800622c:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800622e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006230:	4628      	mov	r0, r5
 8006232:	f002 fc6f 	bl	8008b14 <HAL_OSPI_Init>
 8006236:	2800      	cmp	r0, #0
 8006238:	d0e2      	beq.n	8006200 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800623a:	f06f 0603 	mvn.w	r6, #3
 800623e:	e7df      	b.n	8006200 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006240:	f06f 0604 	mvn.w	r6, #4
 8006244:	e7ee      	b.n	8006224 <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006246:	f06f 0604 	mvn.w	r6, #4
 800624a:	e7eb      	b.n	8006224 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800624c:	f06f 0604 	mvn.w	r6, #4
 8006250:	e7e8      	b.n	8006224 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006252:	f06f 0604 	mvn.w	r6, #4
 8006256:	e7e5      	b.n	8006224 <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006258:	f06f 0604 	mvn.w	r6, #4
  return ret;
 800625c:	e7e2      	b.n	8006224 <OSPI_NOR_ExitOPIMode+0x78>
 800625e:	bf00      	nop
 8006260:	24002a10 	.word	0x24002a10
 8006264:	24002a08 	.word	0x24002a08

08006268 <OSPI_NOR_EnterSOPIMode>:
{
 8006268:	b530      	push	{r4, r5, lr}
 800626a:	b085      	sub	sp, #20
 800626c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800626e:	4c2e      	ldr	r4, [pc, #184]	; (8006328 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8006270:	235c      	movs	r3, #92	; 0x5c
 8006272:	fb03 4400 	mla	r4, r3, r0, r4
 8006276:	4b2d      	ldr	r3, [pc, #180]	; (800632c <OSPI_NOR_EnterSOPIMode+0xc4>)
 8006278:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800627c:	789a      	ldrb	r2, [r3, #2]
 800627e:	7859      	ldrb	r1, [r3, #1]
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff f971 	bl	8005568 <MX25LM51245G_WriteEnable>
 8006286:	2800      	cmp	r0, #0
 8006288:	d139      	bne.n	80062fe <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800628a:	4928      	ldr	r1, [pc, #160]	; (800632c <OSPI_NOR_EnterSOPIMode+0xc4>)
 800628c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006290:	2307      	movs	r3, #7
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006298:	788a      	ldrb	r2, [r1, #2]
 800629a:	7849      	ldrb	r1, [r1, #1]
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff f9fa 	bl	8005696 <MX25LM51245G_WriteCfg2Register>
 80062a2:	bb78      	cbnz	r0, 8006304 <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80062a4:	4b21      	ldr	r3, [pc, #132]	; (800632c <OSPI_NOR_EnterSOPIMode+0xc4>)
 80062a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80062aa:	789a      	ldrb	r2, [r3, #2]
 80062ac:	7859      	ldrb	r1, [r3, #1]
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff f95a 	bl	8005568 <MX25LM51245G_WriteEnable>
 80062b4:	bb48      	cbnz	r0, 800630a <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80062b6:	481d      	ldr	r0, [pc, #116]	; (800632c <OSPI_NOR_EnterSOPIMode+0xc4>)
 80062b8:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80062bc:	2301      	movs	r3, #1
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	78aa      	ldrb	r2, [r5, #2]
 80062c4:	7869      	ldrb	r1, [r5, #1]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7ff f9e5 	bl	8005696 <MX25LM51245G_WriteCfg2Register>
 80062cc:	bb00      	cbnz	r0, 8006310 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80062ce:	2028      	movs	r0, #40	; 0x28
 80062d0:	f000 fba8 	bl	8006a24 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80062d4:	2200      	movs	r2, #0
 80062d6:	2101      	movs	r1, #1
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff f808 	bl	80052ee <MX25LM51245G_AutoPollingMemReady>
 80062de:	b9d0      	cbnz	r0, 8006316 <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80062e0:	ab03      	add	r3, sp, #12
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	2300      	movs	r3, #0
 80062e6:	461a      	mov	r2, r3
 80062e8:	2101      	movs	r1, #1
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fa3a 	bl	8005764 <MX25LM51245G_ReadCfg2Register>
 80062f0:	b9a0      	cbnz	r0, 800631c <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 80062f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d113      	bne.n	8006322 <OSPI_NOR_EnterSOPIMode+0xba>
}
 80062fa:	b005      	add	sp, #20
 80062fc:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80062fe:	f06f 0004 	mvn.w	r0, #4
 8006302:	e7fa      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006304:	f06f 0004 	mvn.w	r0, #4
 8006308:	e7f7      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800630a:	f06f 0004 	mvn.w	r0, #4
 800630e:	e7f4      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006310:	f06f 0004 	mvn.w	r0, #4
 8006314:	e7f1      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006316:	f06f 0004 	mvn.w	r0, #4
 800631a:	e7ee      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800631c:	f06f 0004 	mvn.w	r0, #4
 8006320:	e7eb      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006322:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8006326:	e7e8      	b.n	80062fa <OSPI_NOR_EnterSOPIMode+0x92>
 8006328:	24002a10 	.word	0x24002a10
 800632c:	24002a08 	.word	0x24002a08

08006330 <OSPI_NOR_EnterDOPIMode>:
{
 8006330:	b530      	push	{r4, r5, lr}
 8006332:	b085      	sub	sp, #20
 8006334:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8006336:	4c35      	ldr	r4, [pc, #212]	; (800640c <OSPI_NOR_EnterDOPIMode+0xdc>)
 8006338:	235c      	movs	r3, #92	; 0x5c
 800633a:	fb03 4400 	mla	r4, r3, r0, r4
 800633e:	4b34      	ldr	r3, [pc, #208]	; (8006410 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8006340:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006344:	789a      	ldrb	r2, [r3, #2]
 8006346:	7859      	ldrb	r1, [r3, #1]
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff f90d 	bl	8005568 <MX25LM51245G_WriteEnable>
 800634e:	2800      	cmp	r0, #0
 8006350:	d144      	bne.n	80063dc <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8006352:	492f      	ldr	r1, [pc, #188]	; (8006410 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8006354:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006358:	2307      	movs	r3, #7
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006360:	788a      	ldrb	r2, [r1, #2]
 8006362:	7849      	ldrb	r1, [r1, #1]
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff f996 	bl	8005696 <MX25LM51245G_WriteCfg2Register>
 800636a:	2800      	cmp	r0, #0
 800636c:	d139      	bne.n	80063e2 <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8006370:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006374:	789a      	ldrb	r2, [r3, #2]
 8006376:	7859      	ldrb	r1, [r3, #1]
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff f8f5 	bl	8005568 <MX25LM51245G_WriteEnable>
 800637e:	bb98      	cbnz	r0, 80063e8 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8006380:	4923      	ldr	r1, [pc, #140]	; (8006410 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8006382:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006386:	2302      	movs	r3, #2
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	788a      	ldrb	r2, [r1, #2]
 800638e:	7849      	ldrb	r1, [r1, #1]
 8006390:	4620      	mov	r0, r4
 8006392:	f7ff f980 	bl	8005696 <MX25LM51245G_WriteCfg2Register>
 8006396:	bb50      	cbnz	r0, 80063ee <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8006398:	2028      	movs	r0, #40	; 0x28
 800639a:	f000 fb43 	bl	8006a24 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800639e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063a2:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80063a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80063aa:	4620      	mov	r0, r4
 80063ac:	f002 fbb2 	bl	8008b14 <HAL_OSPI_Init>
 80063b0:	bb00      	cbnz	r0, 80063f4 <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80063b2:	2201      	movs	r2, #1
 80063b4:	4611      	mov	r1, r2
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7fe ff99 	bl	80052ee <MX25LM51245G_AutoPollingMemReady>
 80063bc:	b9e8      	cbnz	r0, 80063fa <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80063be:	ab03      	add	r3, sp, #12
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	2201      	movs	r2, #1
 80063c6:	4611      	mov	r1, r2
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7ff f9cb 	bl	8005764 <MX25LM51245G_ReadCfg2Register>
 80063ce:	b9b8      	cbnz	r0, 8006400 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 80063d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d116      	bne.n	8006406 <OSPI_NOR_EnterDOPIMode+0xd6>
}
 80063d8:	b005      	add	sp, #20
 80063da:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80063dc:	f06f 0004 	mvn.w	r0, #4
 80063e0:	e7fa      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80063e2:	f06f 0004 	mvn.w	r0, #4
 80063e6:	e7f7      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80063e8:	f06f 0004 	mvn.w	r0, #4
 80063ec:	e7f4      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80063ee:	f06f 0004 	mvn.w	r0, #4
 80063f2:	e7f1      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80063f4:	f06f 0003 	mvn.w	r0, #3
 80063f8:	e7ee      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80063fa:	f06f 0004 	mvn.w	r0, #4
 80063fe:	e7eb      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006400:	f06f 0004 	mvn.w	r0, #4
 8006404:	e7e8      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006406:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800640a:	e7e5      	b.n	80063d8 <OSPI_NOR_EnterDOPIMode+0xa8>
 800640c:	24002a10 	.word	0x24002a10
 8006410:	24002a08 	.word	0x24002a08

08006414 <MX_OSPI_NOR_Init>:
{
 8006414:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <MX_OSPI_NOR_Init+0x4c>)
 8006418:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 800641a:	2304      	movs	r3, #4
 800641c:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800641e:	2300      	movs	r3, #0
 8006420:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8006422:	680a      	ldr	r2, [r1, #0]
 8006424:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8006426:	2202      	movs	r2, #2
 8006428:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800642a:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800642c:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800642e:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006430:	684a      	ldr	r2, [r1, #4]
 8006432:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8006434:	688a      	ldr	r2, [r1, #8]
 8006436:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8006438:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800643a:	2308      	movs	r3, #8
 800643c:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800643e:	68cb      	ldr	r3, [r1, #12]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d005      	beq.n	8006450 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8006444:	2300      	movs	r3, #0
 8006446:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006448:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 800644a:	f002 fb63 	bl	8008b14 <HAL_OSPI_Init>
}
 800644e:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8006450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006454:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8006456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800645a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800645c:	e7f5      	b.n	800644a <MX_OSPI_NOR_Init+0x36>
 800645e:	bf00      	nop
 8006460:	52005000 	.word	0x52005000

08006464 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006464:	bb38      	cbnz	r0, 80064b6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800646c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006470:	789b      	ldrb	r3, [r3, #2]
 8006472:	b983      	cbnz	r3, 8006496 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8006474:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8006476:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800647a:	2201      	movs	r2, #1
 800647c:	7859      	ldrb	r1, [r3, #1]
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8006480:	205c      	movs	r0, #92	; 0x5c
 8006482:	fb00 3004 	mla	r0, r0, r4, r3
 8006486:	f7fe ffb1 	bl	80053ec <MX25LM51245G_EnableMemoryMappedModeSTR>
 800648a:	b9b8      	cbnz	r0, 80064bc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800648e:	2202      	movs	r2, #2
 8006490:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8006494:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8006498:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800649c:	7859      	ldrb	r1, [r3, #1]
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80064a0:	205c      	movs	r0, #92	; 0x5c
 80064a2:	fb00 3004 	mla	r0, r0, r4, r3
 80064a6:	f7ff f80d 	bl	80054c4 <MX25LM51245G_EnableMemoryMappedModeDTR>
 80064aa:	b950      	cbnz	r0, 80064c2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80064ac:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80064ae:	2202      	movs	r2, #2
 80064b0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80064b4:	e7ee      	b.n	8006494 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80064b6:	f06f 0001 	mvn.w	r0, #1
}
 80064ba:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064bc:	f06f 0004 	mvn.w	r0, #4
 80064c0:	e7e8      	b.n	8006494 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80064c2:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80064c6:	e7e5      	b.n	8006494 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 80064c8:	24002a08 	.word	0x24002a08
 80064cc:	24002a10 	.word	0x24002a10

080064d0 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80064d0:	b990      	cbnz	r0, 80064f8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 80064d2:	b510      	push	{r4, lr}
 80064d4:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 80064d8:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d10e      	bne.n	80064fe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 80064e2:	205c      	movs	r0, #92	; 0x5c
 80064e4:	fb00 3004 	mla	r0, r0, r4, r3
 80064e8:	f002 facc 	bl	8008a84 <HAL_OSPI_Abort>
 80064ec:	b950      	cbnz	r0, 8006504 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80064ee:	4b07      	ldr	r3, [pc, #28]	; (800650c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80064f6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80064f8:	f06f 0001 	mvn.w	r0, #1
}
 80064fc:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 80064fe:	f06f 001a 	mvn.w	r0, #26
 8006502:	e7f8      	b.n	80064f6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006504:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006508:	e7f5      	b.n	80064f6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 800650a:	bf00      	nop
 800650c:	24002a08 	.word	0x24002a08
 8006510:	24002a10 	.word	0x24002a10

08006514 <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006514:	bb08      	cbnz	r0, 800655a <BSP_OSPI_NOR_DeInit+0x46>
{
 8006516:	b510      	push	{r4, lr}
 8006518:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <BSP_OSPI_NOR_DeInit+0x54>)
 800651c:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d013      	beq.n	800654c <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8006524:	4b10      	ldr	r3, [pc, #64]	; (8006568 <BSP_OSPI_NOR_DeInit+0x54>)
 8006526:	2200      	movs	r2, #0
 8006528:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800652c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006530:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8006532:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <BSP_OSPI_NOR_DeInit+0x58>)
 8006536:	225c      	movs	r2, #92	; 0x5c
 8006538:	fb02 3404 	mla	r4, r2, r4, r3
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fde3 	bl	8006108 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8006542:	4620      	mov	r0, r4
 8006544:	f001 ffec 	bl	8008520 <HAL_OSPI_DeInit>
 8006548:	b950      	cbnz	r0, 8006560 <BSP_OSPI_NOR_DeInit+0x4c>
}
 800654a:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800654c:	f7ff ffc0 	bl	80064d0 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8006550:	2800      	cmp	r0, #0
 8006552:	d0e7      	beq.n	8006524 <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006554:	f06f 0004 	mvn.w	r0, #4
 8006558:	e7f7      	b.n	800654a <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 800655a:	f06f 0001 	mvn.w	r0, #1
}
 800655e:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006560:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006564:	e7f1      	b.n	800654a <BSP_OSPI_NOR_DeInit+0x36>
 8006566:	bf00      	nop
 8006568:	24002a08 	.word	0x24002a08
 800656c:	24002a10 	.word	0x24002a10

08006570 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006570:	2800      	cmp	r0, #0
 8006572:	d141      	bne.n	80065f8 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	460d      	mov	r5, r1
 8006578:	4616      	mov	r6, r2
 800657a:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800657c:	4b21      	ldr	r3, [pc, #132]	; (8006604 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800657e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d03b      	beq.n	80065fe <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8006586:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8006588:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d00b      	beq.n	80065aa <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8006592:	2901      	cmp	r1, #1
 8006594:	d025      	beq.n	80065e2 <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 8006596:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800659a:	2201      	movs	r2, #1
 800659c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80065a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80065a4:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80065a6:	70a6      	strb	r6, [r4, #2]
}
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80065aa:	2901      	cmp	r1, #1
 80065ac:	d105      	bne.n	80065ba <BSP_OSPI_NOR_ConfigFlash+0x4a>
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80065b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80065b4:	789b      	ldrb	r3, [r3, #2]
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01c      	beq.n	80065f4 <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff fdf6 	bl	80061ac <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80065c0:	2800      	cmp	r0, #0
 80065c2:	bf08      	it	eq
 80065c4:	2d01      	cmpeq	r5, #1
 80065c6:	d10f      	bne.n	80065e8 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80065ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065ce:	789b      	ldrb	r3, [r3, #2]
 80065d0:	b91b      	cbnz	r3, 80065da <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff feac 	bl	8006330 <OSPI_NOR_EnterDOPIMode>
 80065d8:	e006      	b.n	80065e8 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80065da:	4620      	mov	r0, r4
 80065dc:	f7ff fe44 	bl	8006268 <OSPI_NOR_EnterSOPIMode>
 80065e0:	e002      	b.n	80065e8 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80065e2:	b922      	cbnz	r2, 80065ee <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80065e4:	f7ff fe40 	bl	8006268 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1dd      	bne.n	80065a8 <BSP_OSPI_NOR_ConfigFlash+0x38>
 80065ec:	e7d4      	b.n	8006598 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 80065ee:	f7ff fe9f 	bl	8006330 <OSPI_NOR_EnterDOPIMode>
 80065f2:	e7f9      	b.n	80065e8 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 80065f4:	2000      	movs	r0, #0
 80065f6:	e7cf      	b.n	8006598 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 80065f8:	f06f 0001 	mvn.w	r0, #1
}
 80065fc:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 80065fe:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8006602:	e7d1      	b.n	80065a8 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8006604:	24002a08 	.word	0x24002a08

08006608 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006608:	2800      	cmp	r0, #0
 800660a:	d13f      	bne.n	800668c <BSP_OSPI_NOR_Init+0x84>
{
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	460d      	mov	r5, r1
 8006612:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006614:	4b23      	ldr	r3, [pc, #140]	; (80066a4 <BSP_OSPI_NOR_Init+0x9c>)
 8006616:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800661a:	b113      	cbz	r3, 8006622 <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800661c:	2000      	movs	r0, #0
}
 800661e:	b00e      	add	sp, #56	; 0x38
 8006620:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8006622:	4e21      	ldr	r6, [pc, #132]	; (80066a8 <BSP_OSPI_NOR_Init+0xa0>)
 8006624:	235c      	movs	r3, #92	; 0x5c
 8006626:	fb03 6600 	mla	r6, r3, r0, r6
 800662a:	4630      	mov	r0, r6
 800662c:	f7ff fc0e 	bl	8005e4c <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8006630:	a805      	add	r0, sp, #20
 8006632:	f7fe fe43 	bl	80052bc <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 8006636:	2303      	movs	r3, #3
 8006638:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800663a:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663c:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006640:	b313      	cbz	r3, 8006688 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006642:	fab3 f383 	clz	r3, r3
 8006646:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006648:	2300      	movs	r3, #0
 800664a:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800664c:	786b      	ldrb	r3, [r5, #1]
 800664e:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8006650:	a901      	add	r1, sp, #4
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff fede 	bl	8006414 <MX_OSPI_NOR_Init>
 8006658:	b9d8      	cbnz	r0, 8006692 <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fd04 	bl	8006068 <OSPI_NOR_ResetMemory>
 8006660:	b9d0      	cbnz	r0, 8006698 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <BSP_OSPI_NOR_Init+0x9c>)
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	789a      	ldrb	r2, [r3, #2]
 800666a:	7859      	ldrb	r1, [r3, #1]
 800666c:	4630      	mov	r0, r6
 800666e:	f7fe fe3e 	bl	80052ee <MX25LM51245G_AutoPollingMemReady>
 8006672:	b9a0      	cbnz	r0, 800669e <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006674:	786a      	ldrb	r2, [r5, #1]
 8006676:	7829      	ldrb	r1, [r5, #0]
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff ff79 	bl	8006570 <BSP_OSPI_NOR_ConfigFlash>
 800667e:	2800      	cmp	r0, #0
 8006680:	d0cd      	beq.n	800661e <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8006682:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8006686:	e7ca      	b.n	800661e <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 8006688:	2320      	movs	r3, #32
 800668a:	e7dc      	b.n	8006646 <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800668c:	f06f 0001 	mvn.w	r0, #1
}
 8006690:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006692:	f06f 0003 	mvn.w	r0, #3
 8006696:	e7c2      	b.n	800661e <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006698:	f06f 0004 	mvn.w	r0, #4
 800669c:	e7bf      	b.n	800661e <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800669e:	f06f 0004 	mvn.w	r0, #4
 80066a2:	e7bc      	b.n	800661e <BSP_OSPI_NOR_Init+0x16>
 80066a4:	24002a08 	.word	0x24002a08
 80066a8:	24002a10 	.word	0x24002a10

080066ac <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80066ac:	b510      	push	{r4, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80066b6:	2370      	movs	r3, #112	; 0x70
 80066b8:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <FT5336_Probe+0x70>)
 80066be:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80066c0:	4b17      	ldr	r3, [pc, #92]	; (8006720 <FT5336_Probe+0x74>)
 80066c2:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80066c4:	4b17      	ldr	r3, [pc, #92]	; (8006724 <FT5336_Probe+0x78>)
 80066c6:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80066c8:	4b17      	ldr	r3, [pc, #92]	; (8006728 <FT5336_Probe+0x7c>)
 80066ca:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <FT5336_Probe+0x80>)
 80066ce:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80066d0:	a902      	add	r1, sp, #8
 80066d2:	4817      	ldr	r0, [pc, #92]	; (8006730 <FT5336_Probe+0x84>)
 80066d4:	f7fe fd50 	bl	8005178 <FT5336_RegisterBusIO>
 80066d8:	b998      	cbnz	r0, 8006702 <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80066da:	a901      	add	r1, sp, #4
 80066dc:	4814      	ldr	r0, [pc, #80]	; (8006730 <FT5336_Probe+0x84>)
 80066de:	f7fe fc8d 	bl	8004ffc <FT5336_ReadID>
 80066e2:	b988      	cbnz	r0, 8006708 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	2b51      	cmp	r3, #81	; 0x51
 80066e8:	d111      	bne.n	800670e <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80066ea:	4811      	ldr	r0, [pc, #68]	; (8006730 <FT5336_Probe+0x84>)
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <FT5336_Probe+0x88>)
 80066ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <FT5336_Probe+0x8c>)
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <FT5336_Probe+0x90>)
 80066f6:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4798      	blx	r3
 80066fc:	b950      	cbnz	r0, 8006714 <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 80066fe:	b008      	add	sp, #32
 8006700:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 8006702:	f06f 0007 	mvn.w	r0, #7
 8006706:	e7fa      	b.n	80066fe <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006708:	f06f 0004 	mvn.w	r0, #4
 800670c:	e7f7      	b.n	80066fe <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800670e:	f06f 0006 	mvn.w	r0, #6
 8006712:	e7f4      	b.n	80066fe <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006714:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8006718:	e7f1      	b.n	80066fe <FT5336_Probe+0x52>
 800671a:	bf00      	nop
 800671c:	08005d8d 	.word	0x08005d8d
 8006720:	08005d1d 	.word	0x08005d1d
 8006724:	08005e15 	.word	0x08005e15
 8006728:	08005de5 	.word	0x08005de5
 800672c:	08005e45 	.word	0x08005e45
 8006730:	24002a6c 	.word	0x24002a6c
 8006734:	24002a94 	.word	0x24002a94
 8006738:	24000010 	.word	0x24000010
 800673c:	24002ab8 	.word	0x24002ab8

08006740 <BSP_TS_Init>:
{
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006744:	2800      	cmp	r0, #0
 8006746:	d150      	bne.n	80067ea <BSP_TS_Init+0xaa>
 8006748:	460c      	mov	r4, r1
 800674a:	4605      	mov	r5, r0
 800674c:	680b      	ldr	r3, [r1, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d04e      	beq.n	80067f0 <BSP_TS_Init+0xb0>
 8006752:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006756:	d84e      	bhi.n	80067f6 <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006758:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800675a:	2a00      	cmp	r2, #0
 800675c:	d04e      	beq.n	80067fc <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800675e:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8006762:	d84e      	bhi.n	8006802 <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006764:	68c9      	ldr	r1, [r1, #12]
 8006766:	4293      	cmp	r3, r2
 8006768:	bf28      	it	cs
 800676a:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800676c:	4299      	cmp	r1, r3
 800676e:	d84b      	bhi.n	8006808 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8006770:	f7ff ff9c 	bl	80066ac <FT5336_Probe>
 8006774:	4606      	mov	r6, r0
 8006776:	2800      	cmp	r0, #0
 8006778:	d149      	bne.n	800680e <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	4925      	ldr	r1, [pc, #148]	; (8006814 <BSP_TS_Init+0xd4>)
 800677e:	016a      	lsls	r2, r5, #5
 8006780:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 8006784:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8006786:	6862      	ldr	r2, [r4, #4]
 8006788:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800678a:	68a2      	ldr	r2, [r4, #8]
 800678c:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800678e:	68e2      	ldr	r2, [r4, #12]
 8006790:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <BSP_TS_Init+0xd8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	a901      	add	r1, sp, #4
 800679a:	4a20      	ldr	r2, [pc, #128]	; (800681c <BSP_TS_Init+0xdc>)
 800679c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80067a0:	4798      	blx	r3
 80067a2:	2800      	cmp	r0, #0
 80067a4:	db1e      	blt.n	80067e4 <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80067a6:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <BSP_TS_Init+0xd4>)
 80067a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80067ac:	9a02      	ldr	r2, [sp, #8]
 80067ae:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80067b0:	9a03      	ldr	r2, [sp, #12]
 80067b2:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80067b4:	462b      	mov	r3, r5
 80067b6:	b113      	cbz	r3, 80067be <BSP_TS_Init+0x7e>
}
 80067b8:	4630      	mov	r0, r6
 80067ba:	b005      	add	sp, #20
 80067bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	68e1      	ldr	r1, [r4, #12]
 80067c2:	440a      	add	r2, r1
 80067c4:	3201      	adds	r2, #1
 80067c6:	4913      	ldr	r1, [pc, #76]	; (8006814 <BSP_TS_Init+0xd4>)
 80067c8:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 80067cc:	3006      	adds	r0, #6
 80067ce:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	68e7      	ldr	r7, [r4, #12]
 80067d6:	443a      	add	r2, r7
 80067d8:	3201      	adds	r2, #1
 80067da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80067de:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80067e0:	3301      	adds	r3, #1
 80067e2:	e7e8      	b.n	80067b6 <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067e4:	f06f 0604 	mvn.w	r6, #4
 80067e8:	e7e6      	b.n	80067b8 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 80067ea:	f06f 0601 	mvn.w	r6, #1
 80067ee:	e7e3      	b.n	80067b8 <BSP_TS_Init+0x78>
 80067f0:	f06f 0601 	mvn.w	r6, #1
 80067f4:	e7e0      	b.n	80067b8 <BSP_TS_Init+0x78>
 80067f6:	f06f 0601 	mvn.w	r6, #1
 80067fa:	e7dd      	b.n	80067b8 <BSP_TS_Init+0x78>
 80067fc:	f06f 0601 	mvn.w	r6, #1
 8006800:	e7da      	b.n	80067b8 <BSP_TS_Init+0x78>
 8006802:	f06f 0601 	mvn.w	r6, #1
 8006806:	e7d7      	b.n	80067b8 <BSP_TS_Init+0x78>
 8006808:	f06f 0601 	mvn.w	r6, #1
 800680c:	e7d4      	b.n	80067b8 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 800680e:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 8006812:	e7d1      	b.n	80067b8 <BSP_TS_Init+0x78>
 8006814:	24002a98 	.word	0x24002a98
 8006818:	24002ab8 	.word	0x24002ab8
 800681c:	24002a94 	.word	0x24002a94

08006820 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8006820:	2800      	cmp	r0, #0
 8006822:	d178      	bne.n	8006916 <BSP_TS_GetState+0xf6>
{
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	460c      	mov	r4, r1
 800682a:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <BSP_TS_GetState+0xfc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	a901      	add	r1, sp, #4
 8006834:	4a3a      	ldr	r2, [pc, #232]	; (8006920 <BSP_TS_GetState+0x100>)
 8006836:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800683a:	4798      	blx	r3
 800683c:	2800      	cmp	r0, #0
 800683e:	db66      	blt.n	800690e <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8006840:	9e01      	ldr	r6, [sp, #4]
 8006842:	2e00      	cmp	r6, #0
 8006844:	d059      	beq.n	80068fa <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 8006846:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8006848:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <BSP_TS_GetState+0x104>)
 800684c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	f011 0f08 	tst.w	r1, #8
 8006856:	d141      	bne.n	80068dc <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 8006858:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 800685a:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800685c:	f011 0f02 	tst.w	r1, #2
 8006860:	d005      	beq.n	800686e <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8006862:	4b30      	ldr	r3, [pc, #192]	; (8006924 <BSP_TS_GetState+0x104>)
 8006864:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800686e:	f011 0f04 	tst.w	r1, #4
 8006872:	d005      	beq.n	8006880 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8006874:	4a2b      	ldr	r2, [pc, #172]	; (8006924 <BSP_TS_GetState+0x104>)
 8006876:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 800687a:	6952      	ldr	r2, [r2, #20]
 800687c:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006880:	4a28      	ldr	r2, [pc, #160]	; (8006924 <BSP_TS_GetState+0x104>)
 8006882:	0168      	lsls	r0, r5, #5
 8006884:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 8006888:	5810      	ldr	r0, [r2, r0]
 800688a:	fb00 f303 	mul.w	r3, r0, r3
 800688e:	690a      	ldr	r2, [r1, #16]
 8006890:	fbb3 f3f2 	udiv	r3, r3, r2
 8006894:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006896:	684a      	ldr	r2, [r1, #4]
 8006898:	fb0c f202 	mul.w	r2, ip, r2
 800689c:	6948      	ldr	r0, [r1, #20]
 800689e:	fbb2 f2f0 	udiv	r2, r2, r0
 80068a2:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80068a4:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80068a6:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80068a8:	4283      	cmp	r3, r0
 80068aa:	d91a      	bls.n	80068e2 <BSP_TS_GetState+0xc2>
 80068ac:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80068ae:	491d      	ldr	r1, [pc, #116]	; (8006924 <BSP_TS_GetState+0x104>)
 80068b0:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80068b4:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80068b6:	428a      	cmp	r2, r1
 80068b8:	d915      	bls.n	80068e6 <BSP_TS_GetState+0xc6>
 80068ba:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80068bc:	4919      	ldr	r1, [pc, #100]	; (8006924 <BSP_TS_GetState+0x104>)
 80068be:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80068c2:	68c9      	ldr	r1, [r1, #12]
 80068c4:	42b1      	cmp	r1, r6
 80068c6:	d301      	bcc.n	80068cc <BSP_TS_GetState+0xac>
 80068c8:	4291      	cmp	r1, r2
 80068ca:	d20e      	bcs.n	80068ea <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80068cc:	4a15      	ldr	r2, [pc, #84]	; (8006924 <BSP_TS_GetState+0x104>)
 80068ce:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 80068d2:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80068d4:	68a3      	ldr	r3, [r4, #8]
 80068d6:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 80068d8:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80068da:	e01a      	b.n	8006912 <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 80068dc:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 80068de:	4603      	mov	r3, r0
 80068e0:	e7bc      	b.n	800685c <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80068e2:	1ac6      	subs	r6, r0, r3
 80068e4:	e7e3      	b.n	80068ae <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80068e6:	1a8a      	subs	r2, r1, r2
 80068e8:	e7e8      	b.n	80068bc <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80068ea:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80068ec:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <BSP_TS_GetState+0x104>)
 80068ee:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 80068f2:	69eb      	ldr	r3, [r5, #28]
 80068f4:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 80068f6:	2000      	movs	r0, #0
 80068f8:	e00b      	b.n	8006912 <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 80068fa:	2000      	movs	r0, #0
 80068fc:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <BSP_TS_GetState+0x104>)
 8006900:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8006904:	69ab      	ldr	r3, [r5, #24]
 8006906:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006908:	69eb      	ldr	r3, [r5, #28]
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	e001      	b.n	8006912 <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800690e:	f06f 0004 	mvn.w	r0, #4
}
 8006912:	b004      	add	sp, #16
 8006914:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006916:	f06f 0001 	mvn.w	r0, #1
}
 800691a:	4770      	bx	lr
 800691c:	24002ab8 	.word	0x24002ab8
 8006920:	24002a94 	.word	0x24002a94
 8006924:	24002a98 	.word	0x24002a98

08006928 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006928:	4a18      	ldr	r2, [pc, #96]	; (800698c <SystemInit+0x64>)
 800692a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800692e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006932:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006936:	4b16      	ldr	r3, [pc, #88]	; (8006990 <SystemInit+0x68>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006940:	2200      	movs	r2, #0
 8006942:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	4913      	ldr	r1, [pc, #76]	; (8006994 <SystemInit+0x6c>)
 8006948:	4001      	ands	r1, r0
 800694a:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800694c:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800694e:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8006950:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8006952:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8006954:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800695a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800695c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006968:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800696a:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <SystemInit+0x70>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <SystemInit+0x74>)
 8006972:	4013      	ands	r3, r2
 8006974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006978:	d203      	bcs.n	8006982 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <SystemInit+0x78>)
 800697c:	2201      	movs	r2, #1
 800697e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006982:	4b02      	ldr	r3, [pc, #8]	; (800698c <SystemInit+0x64>)
 8006984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006988:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800698a:	4770      	bx	lr
 800698c:	e000ed00 	.word	0xe000ed00
 8006990:	58024400 	.word	0x58024400
 8006994:	eaf6ed7f 	.word	0xeaf6ed7f
 8006998:	5c001000 	.word	0x5c001000
 800699c:	ffff0000 	.word	0xffff0000
 80069a0:	51008000 	.word	0x51008000

080069a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069a4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069a6:	2003      	movs	r0, #3
 80069a8:	f000 f850 	bl	8006a4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80069ac:	f002 fc92 	bl	80092d4 <HAL_RCC_GetSysClockFreq>
 80069b0:	490f      	ldr	r1, [pc, #60]	; (80069f0 <HAL_Init+0x4c>)
 80069b2:	698b      	ldr	r3, [r1, #24]
 80069b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80069b8:	4a0e      	ldr	r2, [pc, #56]	; (80069f4 <HAL_Init+0x50>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069c2:	698b      	ldr	r3, [r1, #24]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	5cd3      	ldrb	r3, [r2, r3]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	fa20 f303 	lsr.w	r3, r0, r3
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <HAL_Init+0x54>)
 80069d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <HAL_Init+0x58>)
 80069d8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069da:	2001      	movs	r0, #1
 80069dc:	f7fb ffc0 	bl	8002960 <HAL_InitTick>
 80069e0:	b110      	cbz	r0, 80069e8 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80069e2:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80069e4:	4620      	mov	r0, r4
 80069e6:	bd10      	pop	{r4, pc}
 80069e8:	4604      	mov	r4, r0
  HAL_MspInit();
 80069ea:	f7fb fd6d 	bl	80024c8 <HAL_MspInit>
  return HAL_OK;
 80069ee:	e7f9      	b.n	80069e4 <HAL_Init+0x40>
 80069f0:	58024400 	.word	0x58024400
 80069f4:	0801ed84 	.word	0x0801ed84
 80069f8:	24000044 	.word	0x24000044
 80069fc:	24000040 	.word	0x24000040

08006a00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006a00:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <HAL_IncTick+0x10>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4a03      	ldr	r2, [pc, #12]	; (8006a14 <HAL_IncTick+0x14>)
 8006a06:	6811      	ldr	r1, [r2, #0]
 8006a08:	440b      	add	r3, r1
 8006a0a:	6013      	str	r3, [r2, #0]
}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	24000048 	.word	0x24000048
 8006a14:	24002abc 	.word	0x24002abc

08006a18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006a18:	4b01      	ldr	r3, [pc, #4]	; (8006a20 <HAL_GetTick+0x8>)
 8006a1a:	6818      	ldr	r0, [r3, #0]
}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	24002abc 	.word	0x24002abc

08006a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006a28:	f7ff fff6 	bl	8006a18 <HAL_GetTick>
 8006a2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a32:	d002      	beq.n	8006a3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <HAL_Delay+0x24>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a3a:	f7ff ffed 	bl	8006a18 <HAL_GetTick>
 8006a3e:	1b40      	subs	r0, r0, r5
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d3fa      	bcc.n	8006a3a <HAL_Delay+0x16>
  {
  }
}
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	24000048 	.word	0x24000048

08006a4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a4c:	4906      	ldr	r1, [pc, #24]	; (8006a68 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8006a4e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a58:	0200      	lsls	r0, r0, #8
 8006a5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006a60:	4a02      	ldr	r2, [pc, #8]	; (8006a6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006a62:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8006a64:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00
 8006a6c:	05fa0000 	.word	0x05fa0000

08006a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a70:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_NVIC_SetPriority+0x60>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a7a:	f1c3 0c07 	rsb	ip, r3, #7
 8006a7e:	f1bc 0f04 	cmp.w	ip, #4
 8006a82:	bf28      	it	cs
 8006a84:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a88:	f103 0e04 	add.w	lr, r3, #4
 8006a8c:	f1be 0f06 	cmp.w	lr, #6
 8006a90:	d914      	bls.n	8006abc <HAL_NVIC_SetPriority+0x4c>
 8006a92:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a94:	f04f 3eff 	mov.w	lr, #4294967295
 8006a98:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006a9c:	ea21 010c 	bic.w	r1, r1, ip
 8006aa0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa2:	fa0e f303 	lsl.w	r3, lr, r3
 8006aa6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aaa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006aac:	2800      	cmp	r0, #0
 8006aae:	db07      	blt.n	8006ac0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ab0:	0109      	lsls	r1, r1, #4
 8006ab2:	b2c9      	uxtb	r1, r1
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <HAL_NVIC_SetPriority+0x64>)
 8006ab6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ab8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006abc:	2300      	movs	r3, #0
 8006abe:	e7e9      	b.n	8006a94 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac0:	f000 000f 	and.w	r0, r0, #15
 8006ac4:	0109      	lsls	r1, r1, #4
 8006ac6:	b2c9      	uxtb	r1, r1
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <HAL_NVIC_SetPriority+0x68>)
 8006aca:	5419      	strb	r1, [r3, r0]
 8006acc:	e7f4      	b.n	8006ab8 <HAL_NVIC_SetPriority+0x48>
 8006ace:	bf00      	nop
 8006ad0:	e000ed00 	.word	0xe000ed00
 8006ad4:	e000e400 	.word	0xe000e400
 8006ad8:	e000ed14 	.word	0xe000ed14

08006adc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006adc:	2800      	cmp	r0, #0
 8006ade:	db07      	blt.n	8006af0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ae0:	f000 021f 	and.w	r2, r0, #31
 8006ae4:	0940      	lsrs	r0, r0, #5
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4093      	lsls	r3, r2
 8006aea:	4a02      	ldr	r2, [pc, #8]	; (8006af4 <HAL_NVIC_EnableIRQ+0x18>)
 8006aec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	e000e100 	.word	0xe000e100

08006af8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006af8:	2800      	cmp	r0, #0
 8006afa:	db0c      	blt.n	8006b16 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006afc:	f000 021f 	and.w	r2, r0, #31
 8006b00:	0940      	lsrs	r0, r0, #5
 8006b02:	2301      	movs	r3, #1
 8006b04:	4093      	lsls	r3, r2
 8006b06:	3020      	adds	r0, #32
 8006b08:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <HAL_NVIC_DisableIRQ+0x20>)
 8006b0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006b12:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006b16:	4770      	bx	lr
 8006b18:	e000e100 	.word	0xe000e100

08006b1c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006b1c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b20:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <HAL_MPU_Disable+0x18>)
 8006b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	e000ed00 	.word	0xe000ed00

08006b38 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006b38:	f040 0001 	orr.w	r0, r0, #1
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <HAL_MPU_Enable+0x1c>)
 8006b3e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006b4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006b4e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006b52:	4770      	bx	lr
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006b58:	7842      	ldrb	r2, [r0, #1]
 8006b5a:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <HAL_MPU_ConfigRegion+0x5c>)
 8006b5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006b60:	7803      	ldrb	r3, [r0, #0]
 8006b62:	b1fb      	cbz	r3, 8006ba4 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006b64:	6843      	ldr	r3, [r0, #4]
 8006b66:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <HAL_MPU_ConfigRegion+0x5c>)
 8006b68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b6c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b6e:	7ac3      	ldrb	r3, [r0, #11]
 8006b70:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b72:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b76:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006b78:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b7c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006b7e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b82:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006b84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b88:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b8e:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006b90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b94:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006b96:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006b9a:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006b9c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006b9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8006ba2:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <HAL_MPU_ConfigRegion+0x5c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006bac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	e000ed00 	.word	0xe000ed00

08006bb8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d038      	beq.n	8006c2e <HAL_CRC_Init+0x76>
{
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006bc0:	7f43      	ldrb	r3, [r0, #29]
 8006bc2:	b31b      	cbz	r3, 8006c0c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006bc8:	7923      	ldrb	r3, [r4, #4]
 8006bca:	bb1b      	cbnz	r3, 8006c14 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_CRC_Init+0x7c>)
 8006bd0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	6893      	ldr	r3, [r2, #8]
 8006bd6:	f023 0318 	bic.w	r3, r3, #24
 8006bda:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006bdc:	7963      	ldrb	r3, [r4, #5]
 8006bde:	bb13      	cbnz	r3, 8006c26 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006be8:	6822      	ldr	r2, [r4, #0]
 8006bea:	6893      	ldr	r3, [r2, #8]
 8006bec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006bf0:	6961      	ldr	r1, [r4, #20]
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	6893      	ldr	r3, [r2, #8]
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bfe:	69a1      	ldr	r1, [r4, #24]
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c04:	2301      	movs	r3, #1
 8006c06:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8006c08:	2000      	movs	r0, #0
}
 8006c0a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8006c0c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006c0e:	f7fb fc75 	bl	80024fc <HAL_CRC_MspInit>
 8006c12:	e7d7      	b.n	8006bc4 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c14:	68e2      	ldr	r2, [r4, #12]
 8006c16:	68a1      	ldr	r1, [r4, #8]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 f80d 	bl	8006c38 <HAL_CRCEx_Polynomial_Set>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0dc      	beq.n	8006bdc <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8006c22:	2001      	movs	r0, #1
 8006c24:	e7f1      	b.n	8006c0a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	6922      	ldr	r2, [r4, #16]
 8006c2a:	611a      	str	r2, [r3, #16]
 8006c2c:	e7dc      	b.n	8006be8 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8006c2e:	2001      	movs	r0, #1
}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	04c11db7 	.word	0x04c11db7

08006c38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c38:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006c3a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b134      	cbz	r4, 8006c50 <HAL_CRCEx_Polynomial_Set+0x18>
 8006c42:	f003 0c1f 	and.w	ip, r3, #31
 8006c46:	fa21 fc0c 	lsr.w	ip, r1, ip
 8006c4a:	f01c 0f01 	tst.w	ip, #1
 8006c4e:	d0f5      	beq.n	8006c3c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006c50:	2a18      	cmp	r2, #24
 8006c52:	d822      	bhi.n	8006c9a <HAL_CRCEx_Polynomial_Set+0x62>
 8006c54:	e8df f002 	tbb	[pc, r2]
 8006c58:	2121210f 	.word	0x2121210f
 8006c5c:	21212121 	.word	0x21212121
 8006c60:	2121211d 	.word	0x2121211d
 8006c64:	21212121 	.word	0x21212121
 8006c68:	21212119 	.word	0x21212119
 8006c6c:	21212121 	.word	0x21212121
 8006c70:	0d          	.byte	0x0d
 8006c71:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d815      	bhi.n	8006ca2 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c76:	6803      	ldr	r3, [r0, #0]
 8006c78:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c7a:	6801      	ldr	r1, [r0, #0]
 8006c7c:	688b      	ldr	r3, [r1, #8]
 8006c7e:	f023 0318 	bic.w	r3, r3, #24
 8006c82:	431a      	orrs	r2, r3
 8006c84:	608a      	str	r2, [r1, #8]
 8006c86:	2000      	movs	r0, #0
 8006c88:	e008      	b.n	8006c9c <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	d9f3      	bls.n	8006c76 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006c8e:	2001      	movs	r0, #1
 8006c90:	e004      	b.n	8006c9c <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d9ef      	bls.n	8006c76 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8006c96:	2001      	movs	r0, #1
 8006c98:	e000      	b.n	8006c9c <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8006c9a:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8006c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca0:	4770      	bx	lr
        status =   HAL_ERROR;
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e7fa      	b.n	8006c9c <HAL_CRCEx_Polynomial_Set+0x64>
	...

08006ca8 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f000 8129 	beq.w	8006f00 <HAL_DMA_Abort_IT+0x258>
{
 8006cae:	b508      	push	{r3, lr}
 8006cb0:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cb2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d003      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006cc0:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8006cc2:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	4890      	ldr	r0, [pc, #576]	; (8006f08 <HAL_DMA_Abort_IT+0x260>)
 8006cc8:	4990      	ldr	r1, [pc, #576]	; (8006f0c <HAL_DMA_Abort_IT+0x264>)
 8006cca:	428b      	cmp	r3, r1
 8006ccc:	bf18      	it	ne
 8006cce:	4283      	cmpne	r3, r0
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2101      	moveq	r1, #1
 8006cd4:	2100      	movne	r1, #0
 8006cd6:	d066      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cd8:	3030      	adds	r0, #48	; 0x30
 8006cda:	4283      	cmp	r3, r0
 8006cdc:	d063      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cde:	3018      	adds	r0, #24
 8006ce0:	4283      	cmp	r3, r0
 8006ce2:	d060      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006ce4:	3018      	adds	r0, #24
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	d05d      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cea:	3018      	adds	r0, #24
 8006cec:	4283      	cmp	r3, r0
 8006cee:	d05a      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cf0:	3018      	adds	r0, #24
 8006cf2:	4283      	cmp	r3, r0
 8006cf4:	d057      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cf6:	3018      	adds	r0, #24
 8006cf8:	4283      	cmp	r3, r0
 8006cfa:	d054      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006cfc:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006d00:	4283      	cmp	r3, r0
 8006d02:	d050      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d04:	3018      	adds	r0, #24
 8006d06:	4283      	cmp	r3, r0
 8006d08:	d04d      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d0a:	3018      	adds	r0, #24
 8006d0c:	4283      	cmp	r3, r0
 8006d0e:	d04a      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d10:	3018      	adds	r0, #24
 8006d12:	4283      	cmp	r3, r0
 8006d14:	d047      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d16:	3018      	adds	r0, #24
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	d044      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d1c:	3018      	adds	r0, #24
 8006d1e:	4283      	cmp	r3, r0
 8006d20:	d041      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d22:	3018      	adds	r0, #24
 8006d24:	4283      	cmp	r3, r0
 8006d26:	d03e      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
 8006d28:	3018      	adds	r0, #24
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	d03b      	beq.n	8006da6 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	f021 010e 	bic.w	r1, r1, #14
 8006d34:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8006d3c:	4973      	ldr	r1, [pc, #460]	; (8006f0c <HAL_DMA_Abort_IT+0x264>)
 8006d3e:	428b      	cmp	r3, r1
 8006d40:	bf18      	it	ne
 8006d42:	4283      	cmpne	r3, r0
 8006d44:	d06a      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d46:	4972      	ldr	r1, [pc, #456]	; (8006f10 <HAL_DMA_Abort_IT+0x268>)
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	d067      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d4c:	3118      	adds	r1, #24
 8006d4e:	428b      	cmp	r3, r1
 8006d50:	d064      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d52:	3118      	adds	r1, #24
 8006d54:	428b      	cmp	r3, r1
 8006d56:	d061      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d58:	3118      	adds	r1, #24
 8006d5a:	428b      	cmp	r3, r1
 8006d5c:	d05e      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d5e:	3118      	adds	r1, #24
 8006d60:	428b      	cmp	r3, r1
 8006d62:	d05b      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d64:	3118      	adds	r1, #24
 8006d66:	428b      	cmp	r3, r1
 8006d68:	d058      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d6a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006d6e:	428b      	cmp	r3, r1
 8006d70:	d054      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d72:	3118      	adds	r1, #24
 8006d74:	428b      	cmp	r3, r1
 8006d76:	d051      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d78:	3118      	adds	r1, #24
 8006d7a:	428b      	cmp	r3, r1
 8006d7c:	d04e      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d7e:	3118      	adds	r1, #24
 8006d80:	428b      	cmp	r3, r1
 8006d82:	d04b      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d84:	3118      	adds	r1, #24
 8006d86:	428b      	cmp	r3, r1
 8006d88:	d048      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d8a:	3118      	adds	r1, #24
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	d045      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d90:	3118      	adds	r1, #24
 8006d92:	428b      	cmp	r3, r1
 8006d94:	d042      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d96:	3118      	adds	r1, #24
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	d03f      	beq.n	8006e1c <HAL_DMA_Abort_IT+0x174>
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	f021 0101 	bic.w	r1, r1, #1
 8006da2:	6019      	str	r1, [r3, #0]
 8006da4:	e03e      	b.n	8006e24 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006da6:	2004      	movs	r0, #4
 8006da8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006dac:	bb81      	cbnz	r1, 8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dae:	4a58      	ldr	r2, [pc, #352]	; (8006f10 <HAL_DMA_Abort_IT+0x268>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d02d      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006db4:	3218      	adds	r2, #24
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d02a      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dba:	3218      	adds	r2, #24
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dc0:	3218      	adds	r2, #24
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d024      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dc6:	3218      	adds	r2, #24
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d021      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dcc:	3218      	adds	r2, #24
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d01e      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dd2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01a      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dda:	3218      	adds	r2, #24
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d017      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006de0:	3218      	adds	r2, #24
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d014      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006de6:	3218      	adds	r2, #24
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d011      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dec:	3218      	adds	r2, #24
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006df2:	3218      	adds	r2, #24
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006df8:	3218      	adds	r2, #24
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d008      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006dfe:	3218      	adds	r2, #24
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d005      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x168>
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e758      	b.n	8006cc2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e18:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8006e1a:	e752      	b.n	8006cc2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	f021 0101 	bic.w	r1, r1, #1
 8006e22:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	4838      	ldr	r0, [pc, #224]	; (8006f08 <HAL_DMA_Abort_IT+0x260>)
 8006e28:	4938      	ldr	r1, [pc, #224]	; (8006f0c <HAL_DMA_Abort_IT+0x264>)
 8006e2a:	428b      	cmp	r3, r1
 8006e2c:	bf18      	it	ne
 8006e2e:	4283      	cmpne	r3, r0
 8006e30:	d042      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e32:	3118      	adds	r1, #24
 8006e34:	428b      	cmp	r3, r1
 8006e36:	d03f      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e38:	3118      	adds	r1, #24
 8006e3a:	428b      	cmp	r3, r1
 8006e3c:	d03c      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e3e:	3118      	adds	r1, #24
 8006e40:	428b      	cmp	r3, r1
 8006e42:	d039      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e44:	3118      	adds	r1, #24
 8006e46:	428b      	cmp	r3, r1
 8006e48:	d036      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e4a:	3118      	adds	r1, #24
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	d033      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e50:	3118      	adds	r1, #24
 8006e52:	428b      	cmp	r3, r1
 8006e54:	d030      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e56:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006e5a:	428b      	cmp	r3, r1
 8006e5c:	d02c      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e5e:	3118      	adds	r1, #24
 8006e60:	428b      	cmp	r3, r1
 8006e62:	d029      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e64:	3118      	adds	r1, #24
 8006e66:	428b      	cmp	r3, r1
 8006e68:	d026      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e6a:	3118      	adds	r1, #24
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	d023      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e70:	3118      	adds	r1, #24
 8006e72:	428b      	cmp	r3, r1
 8006e74:	d020      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e76:	3118      	adds	r1, #24
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	d01d      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e7c:	3118      	adds	r1, #24
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	d01a      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e82:	3118      	adds	r1, #24
 8006e84:	428b      	cmp	r3, r1
 8006e86:	d017      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e88:	4922      	ldr	r1, [pc, #136]	; (8006f14 <HAL_DMA_Abort_IT+0x26c>)
 8006e8a:	428b      	cmp	r3, r1
 8006e8c:	d014      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e8e:	3114      	adds	r1, #20
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d011      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e94:	3114      	adds	r1, #20
 8006e96:	428b      	cmp	r3, r1
 8006e98:	d00e      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006e9a:	3114      	adds	r1, #20
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	d00b      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006ea0:	3114      	adds	r1, #20
 8006ea2:	428b      	cmp	r3, r1
 8006ea4:	d008      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006ea6:	3114      	adds	r1, #20
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	d005      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006eac:	3114      	adds	r1, #20
 8006eae:	428b      	cmp	r3, r1
 8006eb0:	d002      	beq.n	8006eb8 <HAL_DMA_Abort_IT+0x210>
 8006eb2:	3114      	adds	r1, #20
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	d117      	bne.n	8006ee8 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006eb8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8006eba:	680b      	ldr	r3, [r1, #0]
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec2:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ec4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006ec6:	f003 011f 	and.w	r1, r3, #31
 8006eca:	2301      	movs	r3, #1
 8006ecc:	408b      	lsls	r3, r1
 8006ece:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ed0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006ed2:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8006ed4:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006ed6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8006ed8:	b133      	cbz	r3, 8006ee8 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006eda:	6819      	ldr	r1, [r3, #0]
 8006edc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006ee0:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ee2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006ee4:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8006ee6:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8006ef4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ef6:	b12b      	cbz	r3, 8006f04 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
  return HAL_OK;
 8006efc:	2000      	movs	r0, #0
 8006efe:	e6e0      	b.n	8006cc2 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8006f00:	2001      	movs	r0, #1
}
 8006f02:	4770      	bx	lr
  return HAL_OK;
 8006f04:	2000      	movs	r0, #0
 8006f06:	e6dc      	b.n	8006cc2 <HAL_DMA_Abort_IT+0x1a>
 8006f08:	40020010 	.word	0x40020010
 8006f0c:	40020028 	.word	0x40020028
 8006f10:	40020040 	.word	0x40020040
 8006f14:	58025408 	.word	0x58025408

08006f18 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d037      	beq.n	8006f8c <HAL_DMA2D_Init+0x74>
{
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006f20:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d02c      	beq.n	8006f82 <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f2e:	6821      	ldr	r1, [r4, #0]
 8006f30:	680a      	ldr	r2, [r1, #0]
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <HAL_DMA2D_Init+0x78>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	69e0      	ldr	r0, [r4, #28]
 8006f3a:	4302      	orrs	r2, r0
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f40:	6821      	ldr	r1, [r4, #0]
 8006f42:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006f44:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <HAL_DMA2D_Init+0x7c>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	68a2      	ldr	r2, [r4, #8]
 8006f4a:	69a0      	ldr	r0, [r4, #24]
 8006f4c:	4302      	orrs	r2, r0
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <HAL_DMA2D_Init+0x80>)
 8006f58:	400b      	ands	r3, r1
 8006f5a:	68e1      	ldr	r1, [r4, #12]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006f60:	6821      	ldr	r1, [r4, #0]
 8006f62:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006f64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f68:	6920      	ldr	r0, [r4, #16]
 8006f6a:	6962      	ldr	r2, [r4, #20]
 8006f6c:	0552      	lsls	r2, r2, #21
 8006f6e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8006f72:	4313      	orrs	r3, r2
 8006f74:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f76:	2000      	movs	r0, #0
 8006f78:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006f80:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8006f82:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8006f86:	f7fb fad3 	bl	8002530 <HAL_DMA2D_MspInit>
 8006f8a:	e7cd      	b.n	8006f28 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8006f8c:	2001      	movs	r0, #1
}
 8006f8e:	4770      	bx	lr
 8006f90:	fff8ffbf 	.word	0xfff8ffbf
 8006f94:	fffffef8 	.word	0xfffffef8
 8006f98:	ffff0000 	.word	0xffff0000

08006f9c <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006f9c:	4770      	bx	lr

08006f9e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_DMA2D_IRQHandler>:
{
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fa4:	6803      	ldr	r3, [r0, #0]
 8006fa6:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006fa8:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006faa:	f015 0f01 	tst.w	r5, #1
 8006fae:	d016      	beq.n	8006fde <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006fb0:	f416 7f80 	tst.w	r6, #256	; 0x100
 8006fb4:	d013      	beq.n	8006fde <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fbc:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fbe:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006fc6:	6803      	ldr	r3, [r0, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006fd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fda:	b103      	cbz	r3, 8006fde <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8006fdc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006fde:	f015 0f20 	tst.w	r5, #32
 8006fe2:	d018      	beq.n	8007016 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006fe4:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8006fe8:	d015      	beq.n	8007016 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007002:	2304      	movs	r3, #4
 8007004:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007008:	2300      	movs	r3, #0
 800700a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800700e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007010:	b10b      	cbz	r3, 8007016 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8007012:	4620      	mov	r0, r4
 8007014:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007016:	f015 0f08 	tst.w	r5, #8
 800701a:	d018      	beq.n	800704e <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800701c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8007020:	d015      	beq.n	800704e <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	6813      	ldr	r3, [r2, #0]
 8007026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	2208      	movs	r2, #8
 8007030:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007034:	f043 0304 	orr.w	r3, r3, #4
 8007038:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800703a:	2304      	movs	r3, #4
 800703c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007040:	2300      	movs	r3, #0
 8007042:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007048:	b10b      	cbz	r3, 800704e <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800704a:	4620      	mov	r0, r4
 800704c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800704e:	f015 0f04 	tst.w	r5, #4
 8007052:	d002      	beq.n	800705a <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007054:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8007058:	d120      	bne.n	800709c <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800705a:	f015 0f02 	tst.w	r5, #2
 800705e:	d016      	beq.n	800708e <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007060:	f416 7f00 	tst.w	r6, #512	; 0x200
 8007064:	d013      	beq.n	800708e <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	6813      	ldr	r3, [r2, #0]
 800706a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800706e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	2202      	movs	r2, #2
 8007074:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007078:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800707a:	2301      	movs	r3, #1
 800707c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8007080:	2300      	movs	r3, #0
 8007082:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8007086:	6a23      	ldr	r3, [r4, #32]
 8007088:	b10b      	cbz	r3, 800708e <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800708a:	4620      	mov	r0, r4
 800708c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800708e:	f015 0f10 	tst.w	r5, #16
 8007092:	d002      	beq.n	800709a <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007094:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8007098:	d10c      	bne.n	80070b4 <HAL_DMA2D_IRQHandler+0x114>
}
 800709a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	2204      	movs	r2, #4
 80070aa:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7ff ff75 	bl	8006f9c <HAL_DMA2D_LineEventCallback>
 80070b2:	e7d2      	b.n	800705a <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	6813      	ldr	r3, [r2, #0]
 80070b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070bc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	2210      	movs	r2, #16
 80070c2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80070c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070c6:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80070ce:	2300      	movs	r3, #0
 80070d0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7ff ff62 	bl	8006f9e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80070da:	e7de      	b.n	800709a <HAL_DMA2D_IRQHandler+0xfa>

080070dc <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80070dc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d074      	beq.n	80071ce <HAL_DMA2D_ConfigLayer+0xf2>
{
 80070e4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80070e6:	2301      	movs	r3, #1
 80070e8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80070ec:	2302      	movs	r3, #2
 80070ee:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80070f2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80070f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80070fa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80070fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070fe:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007102:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8007104:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007108:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800710a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800710e:	f1a4 0209 	sub.w	r2, r4, #9
 8007112:	2a01      	cmp	r2, #1
 8007114:	d921      	bls.n	800715a <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007116:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800711a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800711e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007120:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007124:	bb61      	cbnz	r1, 8007180 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007126:	6804      	ldr	r4, [r0, #0]
 8007128:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800712a:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <HAL_DMA2D_ConfigLayer+0xf8>)
 800712c:	402a      	ands	r2, r5
 800712e:	4313      	orrs	r3, r2
 8007130:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007132:	6802      	ldr	r2, [r0, #0]
 8007134:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007138:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800713c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800713e:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	3b09      	subs	r3, #9
 8007144:	2b01      	cmp	r3, #1
 8007146:	d911      	bls.n	800716c <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007148:	2301      	movs	r3, #1
 800714a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800714e:	2300      	movs	r3, #0
 8007150:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8007154:	4618      	mov	r0, r3
}
 8007156:	bc30      	pop	{r4, r5}
 8007158:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800715a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800715e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007164:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007168:	4313      	orrs	r3, r2
 800716a:	e7db      	b.n	8007124 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800716c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007174:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007176:	6802      	ldr	r2, [r0, #0]
 8007178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800717c:	6293      	str	r3, [r2, #40]	; 0x28
 800717e:	e7e3      	b.n	8007148 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007180:	2c0b      	cmp	r4, #11
 8007182:	d01b      	beq.n	80071bc <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007184:	4d14      	ldr	r5, [pc, #80]	; (80071d8 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007186:	6804      	ldr	r4, [r0, #0]
 8007188:	69e2      	ldr	r2, [r4, #28]
 800718a:	ea22 0205 	bic.w	r2, r2, r5
 800718e:	4313      	orrs	r3, r2
 8007190:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007192:	6802      	ldr	r2, [r0, #0]
 8007194:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007198:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800719c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800719e:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	3b09      	subs	r3, #9
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d8cf      	bhi.n	8007148 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80071a8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80071ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80071b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80071b2:	6802      	ldr	r2, [r0, #0]
 80071b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071b8:	6213      	str	r3, [r2, #32]
 80071ba:	e7c5      	b.n	8007148 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80071bc:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80071c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80071c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071c6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 80071ca:	4d04      	ldr	r5, [pc, #16]	; (80071dc <HAL_DMA2D_ConfigLayer+0x100>)
 80071cc:	e7db      	b.n	8007186 <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 80071ce:	2002      	movs	r0, #2
}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00ccfff0 	.word	0x00ccfff0
 80071d8:	ff33000f 	.word	0xff33000f
 80071dc:	ff3f000f 	.word	0xff3f000f

080071e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80071e4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071e6:	e06b      	b.n	80072c0 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071e8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071ea:	005e      	lsls	r6, r3, #1
 80071ec:	2403      	movs	r4, #3
 80071ee:	40b4      	lsls	r4, r6
 80071f0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071f4:	68cc      	ldr	r4, [r1, #12]
 80071f6:	40b4      	lsls	r4, r6
 80071f8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80071fa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071fc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071fe:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007202:	684c      	ldr	r4, [r1, #4]
 8007204:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8007208:	409c      	lsls	r4, r3
 800720a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800720e:	6044      	str	r4, [r0, #4]
 8007210:	e068      	b.n	80072e4 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007212:	08dd      	lsrs	r5, r3, #3
 8007214:	3508      	adds	r5, #8
 8007216:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800721a:	f003 0407 	and.w	r4, r3, #7
 800721e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007222:	240f      	movs	r4, #15
 8007224:	fa04 f40c 	lsl.w	r4, r4, ip
 8007228:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800722c:	690c      	ldr	r4, [r1, #16]
 800722e:	fa04 f40c 	lsl.w	r4, r4, ip
 8007232:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007236:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800723a:	e06b      	b.n	8007314 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800723c:	2409      	movs	r4, #9
 800723e:	e000      	b.n	8007242 <HAL_GPIO_Init+0x62>
 8007240:	2400      	movs	r4, #0
 8007242:	fa04 f40e 	lsl.w	r4, r4, lr
 8007246:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007248:	f10c 0c02 	add.w	ip, ip, #2
 800724c:	4d69      	ldr	r5, [pc, #420]	; (80073f4 <HAL_GPIO_Init+0x214>)
 800724e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007252:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8007256:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007258:	43d4      	mvns	r4, r2
 800725a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800725e:	684f      	ldr	r7, [r1, #4]
 8007260:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8007264:	d001      	beq.n	800726a <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8007266:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800726a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800726e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8007270:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8007272:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007276:	684f      	ldr	r7, [r1, #4]
 8007278:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800727c:	d001      	beq.n	8007282 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800727e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8007282:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007286:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007288:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800728c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007290:	684f      	ldr	r7, [r1, #4]
 8007292:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8007296:	d001      	beq.n	800729c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8007298:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800729c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80072a0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072a4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80072a8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072aa:	684e      	ldr	r6, [r1, #4]
 80072ac:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80072b0:	d001      	beq.n	80072b6 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80072b2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80072b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ba:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80072be:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072c0:	680a      	ldr	r2, [r1, #0]
 80072c2:	fa32 f403 	lsrs.w	r4, r2, r3
 80072c6:	f000 8092 	beq.w	80073ee <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072ca:	f04f 0c01 	mov.w	ip, #1
 80072ce:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80072d2:	ea1c 0202 	ands.w	r2, ip, r2
 80072d6:	d0f2      	beq.n	80072be <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072d8:	684c      	ldr	r4, [r1, #4]
 80072da:	f004 0403 	and.w	r4, r4, #3
 80072de:	3c01      	subs	r4, #1
 80072e0:	2c01      	cmp	r4, #1
 80072e2:	d981      	bls.n	80071e8 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072e4:	684c      	ldr	r4, [r1, #4]
 80072e6:	f004 0403 	and.w	r4, r4, #3
 80072ea:	2c03      	cmp	r4, #3
 80072ec:	d00c      	beq.n	8007308 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80072ee:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072f0:	005d      	lsls	r5, r3, #1
 80072f2:	f04f 0c03 	mov.w	ip, #3
 80072f6:	fa0c fc05 	lsl.w	ip, ip, r5
 80072fa:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072fe:	688c      	ldr	r4, [r1, #8]
 8007300:	40ac      	lsls	r4, r5
 8007302:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8007306:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007308:	684c      	ldr	r4, [r1, #4]
 800730a:	f004 0403 	and.w	r4, r4, #3
 800730e:	2c02      	cmp	r4, #2
 8007310:	f43f af7f 	beq.w	8007212 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8007314:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007316:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800731a:	f04f 0c03 	mov.w	ip, #3
 800731e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007322:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007326:	684c      	ldr	r4, [r1, #4]
 8007328:	f004 0403 	and.w	r4, r4, #3
 800732c:	fa04 f40e 	lsl.w	r4, r4, lr
 8007330:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8007334:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007336:	684c      	ldr	r4, [r1, #4]
 8007338:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800733c:	d0bf      	beq.n	80072be <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800733e:	4c2e      	ldr	r4, [pc, #184]	; (80073f8 <HAL_GPIO_Init+0x218>)
 8007340:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8007344:	f045 0502 	orr.w	r5, r5, #2
 8007348:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800734c:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 8007350:	f004 0402 	and.w	r4, r4, #2
 8007354:	9401      	str	r4, [sp, #4]
 8007356:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007358:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800735c:	f10c 0502 	add.w	r5, ip, #2
 8007360:	4c24      	ldr	r4, [pc, #144]	; (80073f4 <HAL_GPIO_Init+0x214>)
 8007362:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007366:	f003 0403 	and.w	r4, r3, #3
 800736a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800736e:	240f      	movs	r4, #15
 8007370:	fa04 f40e 	lsl.w	r4, r4, lr
 8007374:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007378:	4c20      	ldr	r4, [pc, #128]	; (80073fc <HAL_GPIO_Init+0x21c>)
 800737a:	42a0      	cmp	r0, r4
 800737c:	f43f af60 	beq.w	8007240 <HAL_GPIO_Init+0x60>
 8007380:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007384:	42a0      	cmp	r0, r4
 8007386:	d022      	beq.n	80073ce <HAL_GPIO_Init+0x1ee>
 8007388:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800738c:	42a0      	cmp	r0, r4
 800738e:	d020      	beq.n	80073d2 <HAL_GPIO_Init+0x1f2>
 8007390:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007394:	42a0      	cmp	r0, r4
 8007396:	d01e      	beq.n	80073d6 <HAL_GPIO_Init+0x1f6>
 8007398:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800739c:	42a0      	cmp	r0, r4
 800739e:	d01c      	beq.n	80073da <HAL_GPIO_Init+0x1fa>
 80073a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d01a      	beq.n	80073de <HAL_GPIO_Init+0x1fe>
 80073a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d018      	beq.n	80073e2 <HAL_GPIO_Init+0x202>
 80073b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073b4:	42a0      	cmp	r0, r4
 80073b6:	d016      	beq.n	80073e6 <HAL_GPIO_Init+0x206>
 80073b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073bc:	42a0      	cmp	r0, r4
 80073be:	d014      	beq.n	80073ea <HAL_GPIO_Init+0x20a>
 80073c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073c4:	42a0      	cmp	r0, r4
 80073c6:	f43f af39 	beq.w	800723c <HAL_GPIO_Init+0x5c>
 80073ca:	240a      	movs	r4, #10
 80073cc:	e739      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073ce:	2401      	movs	r4, #1
 80073d0:	e737      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073d2:	2402      	movs	r4, #2
 80073d4:	e735      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073d6:	2403      	movs	r4, #3
 80073d8:	e733      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073da:	2404      	movs	r4, #4
 80073dc:	e731      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073de:	2405      	movs	r4, #5
 80073e0:	e72f      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073e2:	2406      	movs	r4, #6
 80073e4:	e72d      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073e6:	2407      	movs	r4, #7
 80073e8:	e72b      	b.n	8007242 <HAL_GPIO_Init+0x62>
 80073ea:	2408      	movs	r4, #8
 80073ec:	e729      	b.n	8007242 <HAL_GPIO_Init+0x62>
  }
}
 80073ee:	b003      	add	sp, #12
 80073f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f2:	bf00      	nop
 80073f4:	58000400 	.word	0x58000400
 80073f8:	58024400 	.word	0x58024400
 80073fc:	58020000 	.word	0x58020000

08007400 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8007400:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007402:	fa31 f203 	lsrs.w	r2, r1, r3
 8007406:	f000 809d 	beq.w	8007544 <HAL_GPIO_DeInit+0x144>
{
 800740a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740c:	e02e      	b.n	800746c <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800740e:	2509      	movs	r5, #9
 8007410:	e000      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 8007412:	2500      	movs	r5, #0
 8007414:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007418:	45a4      	cmp	ip, r4
 800741a:	d072      	beq.n	8007502 <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800741c:	6804      	ldr	r4, [r0, #0]
 800741e:	005d      	lsls	r5, r3, #1
 8007420:	f04f 0c03 	mov.w	ip, #3
 8007424:	fa0c fc05 	lsl.w	ip, ip, r5
 8007428:	ea44 040c 	orr.w	r4, r4, ip
 800742c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800742e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8007432:	f10e 0e08 	add.w	lr, lr, #8
 8007436:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800743a:	f003 0507 	and.w	r5, r3, #7
 800743e:	00ae      	lsls	r6, r5, #2
 8007440:	250f      	movs	r5, #15
 8007442:	40b5      	lsls	r5, r6
 8007444:	ea24 0405 	bic.w	r4, r4, r5
 8007448:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800744c:	68c4      	ldr	r4, [r0, #12]
 800744e:	ea24 040c 	bic.w	r4, r4, ip
 8007452:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007454:	6844      	ldr	r4, [r0, #4]
 8007456:	ea24 0202 	bic.w	r2, r4, r2
 800745a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800745c:	6882      	ldr	r2, [r0, #8]
 800745e:	ea22 020c 	bic.w	r2, r2, ip
 8007462:	6082      	str	r2, [r0, #8]
    }

    position++;
 8007464:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8007466:	fa31 f203 	lsrs.w	r2, r1, r3
 800746a:	d06a      	beq.n	8007542 <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800746c:	2201      	movs	r2, #1
 800746e:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007470:	ea12 0e01 	ands.w	lr, r2, r1
 8007474:	d0f6      	beq.n	8007464 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007476:	089e      	lsrs	r6, r3, #2
 8007478:	1cb5      	adds	r5, r6, #2
 800747a:	4c33      	ldr	r4, [pc, #204]	; (8007548 <HAL_GPIO_DeInit+0x148>)
 800747c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007480:	f003 0c03 	and.w	ip, r3, #3
 8007484:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007488:	250f      	movs	r5, #15
 800748a:	fa05 f70c 	lsl.w	r7, r5, ip
 800748e:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007490:	4d2e      	ldr	r5, [pc, #184]	; (800754c <HAL_GPIO_DeInit+0x14c>)
 8007492:	42a8      	cmp	r0, r5
 8007494:	d0bd      	beq.n	8007412 <HAL_GPIO_DeInit+0x12>
 8007496:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800749a:	42a8      	cmp	r0, r5
 800749c:	d021      	beq.n	80074e2 <HAL_GPIO_DeInit+0xe2>
 800749e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074a2:	42a8      	cmp	r0, r5
 80074a4:	d01f      	beq.n	80074e6 <HAL_GPIO_DeInit+0xe6>
 80074a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074aa:	42a8      	cmp	r0, r5
 80074ac:	d01d      	beq.n	80074ea <HAL_GPIO_DeInit+0xea>
 80074ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074b2:	42a8      	cmp	r0, r5
 80074b4:	d01b      	beq.n	80074ee <HAL_GPIO_DeInit+0xee>
 80074b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074ba:	42a8      	cmp	r0, r5
 80074bc:	d019      	beq.n	80074f2 <HAL_GPIO_DeInit+0xf2>
 80074be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074c2:	42a8      	cmp	r0, r5
 80074c4:	d017      	beq.n	80074f6 <HAL_GPIO_DeInit+0xf6>
 80074c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074ca:	42a8      	cmp	r0, r5
 80074cc:	d015      	beq.n	80074fa <HAL_GPIO_DeInit+0xfa>
 80074ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074d2:	42a8      	cmp	r0, r5
 80074d4:	d013      	beq.n	80074fe <HAL_GPIO_DeInit+0xfe>
 80074d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074da:	42a8      	cmp	r0, r5
 80074dc:	d097      	beq.n	800740e <HAL_GPIO_DeInit+0xe>
 80074de:	250a      	movs	r5, #10
 80074e0:	e798      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074e2:	2501      	movs	r5, #1
 80074e4:	e796      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074e6:	2502      	movs	r5, #2
 80074e8:	e794      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074ea:	2503      	movs	r5, #3
 80074ec:	e792      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074ee:	2504      	movs	r5, #4
 80074f0:	e790      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074f2:	2505      	movs	r5, #5
 80074f4:	e78e      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074f6:	2506      	movs	r5, #6
 80074f8:	e78c      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074fa:	2507      	movs	r5, #7
 80074fc:	e78a      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
 80074fe:	2508      	movs	r5, #8
 8007500:	e788      	b.n	8007414 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007502:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8007506:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800750a:	ea25 050e 	bic.w	r5, r5, lr
 800750e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007512:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8007516:	ea25 050e 	bic.w	r5, r5, lr
 800751a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800751e:	6865      	ldr	r5, [r4, #4]
 8007520:	ea25 050e 	bic.w	r5, r5, lr
 8007524:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	ea25 050e 	bic.w	r5, r5, lr
 800752c:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800752e:	f8df c018 	ldr.w	ip, [pc, #24]	; 8007548 <HAL_GPIO_DeInit+0x148>
 8007532:	1cb4      	adds	r4, r6, #2
 8007534:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007538:	ea25 0507 	bic.w	r5, r5, r7
 800753c:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8007540:	e76c      	b.n	800741c <HAL_GPIO_DeInit+0x1c>
  }
}
 8007542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	58000400 	.word	0x58000400
 800754c:	58020000 	.word	0x58020000

08007550 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007550:	6903      	ldr	r3, [r0, #16]
 8007552:	4219      	tst	r1, r3
 8007554:	d001      	beq.n	800755a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8007556:	2001      	movs	r0, #1
 8007558:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800755a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800755c:	4770      	bx	lr

0800755e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800755e:	b10a      	cbz	r2, 8007564 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007560:	6181      	str	r1, [r0, #24]
 8007562:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007564:	0409      	lsls	r1, r1, #16
 8007566:	6181      	str	r1, [r0, #24]
  }
}
 8007568:	4770      	bx	lr

0800756a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800756a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800756c:	ea01 0203 	and.w	r2, r1, r3
 8007570:	ea21 0103 	bic.w	r1, r1, r3
 8007574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007578:	6181      	str	r1, [r0, #24]
}
 800757a:	4770      	bx	lr

0800757c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800757c:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800757e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	4203      	tst	r3, r0
 8007588:	d100      	bne.n	800758c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 800758a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800758c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007590:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007594:	f7fa ff8e 	bl	80024b4 <HAL_GPIO_EXTI_Callback>
}
 8007598:	e7f7      	b.n	800758a <HAL_GPIO_EXTI_IRQHandler+0xe>

0800759a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800759a:	6803      	ldr	r3, [r0, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	f012 0f02 	tst.w	r2, #2
 80075a2:	d001      	beq.n	80075a8 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80075a4:	2200      	movs	r2, #0
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a8:	6803      	ldr	r3, [r0, #0]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	f012 0f01 	tst.w	r2, #1
 80075b0:	d103      	bne.n	80075ba <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	619a      	str	r2, [r3, #24]
  }
}
 80075ba:	4770      	bx	lr

080075bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075bc:	b410      	push	{r4}
 80075be:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80075c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075c8:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ca:	4321      	orrs	r1, r4
 80075cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075d0:	6802      	ldr	r2, [r0, #0]
 80075d2:	6853      	ldr	r3, [r2, #4]
 80075d4:	0d64      	lsrs	r4, r4, #21
 80075d6:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80075da:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80075de:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80075e2:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80075e6:	f044 0403 	orr.w	r4, r4, #3
 80075ea:	ea23 0404 	bic.w	r4, r3, r4
 80075ee:	4321      	orrs	r1, r4
 80075f0:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <I2C_IsErrorOccurred>:
{
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80075fe:	6803      	ldr	r3, [r0, #0]
 8007600:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007602:	f017 0710 	ands.w	r7, r7, #16
 8007606:	d04e      	beq.n	80076a6 <I2C_IsErrorOccurred+0xae>
 8007608:	460e      	mov	r6, r1
 800760a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760c:	2210      	movs	r2, #16
 800760e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	6998      	ldr	r0, [r3, #24]
 8007616:	f010 0f20 	tst.w	r0, #32
 800761a:	d13d      	bne.n	8007698 <I2C_IsErrorOccurred+0xa0>
 800761c:	2d00      	cmp	r5, #0
 800761e:	d13b      	bne.n	8007698 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8007620:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007624:	d0f5      	beq.n	8007612 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7ff f9f7 	bl	8006a18 <HAL_GetTick>
 800762a:	eba0 0008 	sub.w	r0, r0, r8
 800762e:	42b0      	cmp	r0, r6
 8007630:	d801      	bhi.n	8007636 <I2C_IsErrorOccurred+0x3e>
 8007632:	2e00      	cmp	r6, #0
 8007634:	d1ed      	bne.n	8007612 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007636:	6821      	ldr	r1, [r4, #0]
 8007638:	684a      	ldr	r2, [r1, #4]
 800763a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800763e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007642:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007644:	6988      	ldr	r0, [r1, #24]
 8007646:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800764a:	d004      	beq.n	8007656 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800764c:	3b20      	subs	r3, #32
 800764e:	bf18      	it	ne
 8007650:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8007652:	b902      	cbnz	r2, 8007656 <I2C_IsErrorOccurred+0x5e>
 8007654:	b9c3      	cbnz	r3, 8007688 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f013 0f20 	tst.w	r3, #32
 800765e:	d1d8      	bne.n	8007612 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007660:	f7ff f9da 	bl	8006a18 <HAL_GetTick>
 8007664:	eba0 0008 	sub.w	r0, r0, r8
 8007668:	2819      	cmp	r0, #25
 800766a:	d9f4      	bls.n	8007656 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800766c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800766e:	f043 0320 	orr.w	r3, r3, #32
 8007672:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007674:	2320      	movs	r3, #32
 8007676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800767a:	2300      	movs	r3, #0
 800767c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8007680:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8007684:	2501      	movs	r5, #1
 8007686:	e7e6      	b.n	8007656 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007688:	684b      	ldr	r3, [r1, #4]
 800768a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800768e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8007690:	f7ff f9c2 	bl	8006a18 <HAL_GetTick>
 8007694:	4680      	mov	r8, r0
 8007696:	e7de      	b.n	8007656 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8007698:	2d00      	cmp	r5, #0
 800769a:	d140      	bne.n	800771e <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769c:	2220      	movs	r2, #32
 800769e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80076a0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80076a2:	2501      	movs	r5, #1
 80076a4:	e000      	b.n	80076a8 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 80076a6:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80076ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80076b0:	d005      	beq.n	80076be <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 80076b2:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80076b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076ba:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80076bc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80076be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80076c2:	d006      	beq.n	80076d2 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 80076c4:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80076ce:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80076d0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80076d6:	d024      	beq.n	8007722 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80076d8:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e2:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80076e4:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff ff57 	bl	800759a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	6853      	ldr	r3, [r2, #4]
 80076f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80076f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80076f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007702:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007704:	431f      	orrs	r7, r3
 8007706:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007708:	2320      	movs	r3, #32
 800770a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007714:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007718:	4628      	mov	r0, r5
 800771a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800771e:	2704      	movs	r7, #4
 8007720:	e7c2      	b.n	80076a8 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8007722:	2d00      	cmp	r5, #0
 8007724:	d0f8      	beq.n	8007718 <I2C_IsErrorOccurred+0x120>
 8007726:	e7de      	b.n	80076e6 <I2C_IsErrorOccurred+0xee>

08007728 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	460d      	mov	r5, r1
 800772e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f013 0f02 	tst.w	r3, #2
 8007738:	d11d      	bne.n	8007776 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800773a:	4632      	mov	r2, r6
 800773c:	4629      	mov	r1, r5
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff ff5a 	bl	80075f8 <I2C_IsErrorOccurred>
 8007744:	b9c8      	cbnz	r0, 800777a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007746:	f1b5 3fff 	cmp.w	r5, #4294967295
 800774a:	d0f1      	beq.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774c:	f7ff f964 	bl	8006a18 <HAL_GetTick>
 8007750:	1b80      	subs	r0, r0, r6
 8007752:	42a8      	cmp	r0, r5
 8007754:	d801      	bhi.n	800775a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007756:	2d00      	cmp	r5, #0
 8007758:	d1ea      	bne.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800775a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800775c:	f043 0320 	orr.w	r3, r3, #32
 8007760:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007762:	2320      	movs	r3, #32
 8007764:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007768:	2300      	movs	r3, #0
 800776a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800776e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8007772:	2001      	movs	r0, #1
 8007774:	e000      	b.n	8007778 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800777a:	2001      	movs	r0, #1
 800777c:	e7fc      	b.n	8007778 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800777e <I2C_WaitOnFlagUntilTimeout>:
{
 800777e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007782:	4606      	mov	r6, r0
 8007784:	4688      	mov	r8, r1
 8007786:	4617      	mov	r7, r2
 8007788:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800778a:	6834      	ldr	r4, [r6, #0]
 800778c:	69a4      	ldr	r4, [r4, #24]
 800778e:	ea38 0304 	bics.w	r3, r8, r4
 8007792:	bf0c      	ite	eq
 8007794:	f04f 0c01 	moveq.w	ip, #1
 8007798:	f04f 0c00 	movne.w	ip, #0
 800779c:	45bc      	cmp	ip, r7
 800779e:	d118      	bne.n	80077d2 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80077a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80077a4:	d0f1      	beq.n	800778a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a6:	f7ff f937 	bl	8006a18 <HAL_GetTick>
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	1ac0      	subs	r0, r0, r3
 80077ae:	42a8      	cmp	r0, r5
 80077b0:	d801      	bhi.n	80077b6 <I2C_WaitOnFlagUntilTimeout+0x38>
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	d1e9      	bne.n	800778a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077b6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80077b8:	f043 0320 	orr.w	r3, r3, #32
 80077bc:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077be:	2320      	movs	r3, #32
 80077c0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80077ca:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80077ce:	2001      	movs	r0, #1
 80077d0:	e000      	b.n	80077d4 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80077d2:	2000      	movs	r0, #0
}
 80077d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077d8 <I2C_RequestMemoryWrite>:
{
 80077d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	4604      	mov	r4, r0
 80077e0:	4690      	mov	r8, r2
 80077e2:	461d      	mov	r5, r3
 80077e4:	9e08      	ldr	r6, [sp, #32]
 80077e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80077e8:	4b19      	ldr	r3, [pc, #100]	; (8007850 <I2C_RequestMemoryWrite+0x78>)
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077f0:	b2ea      	uxtb	r2, r5
 80077f2:	f7ff fee3 	bl	80075bc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f6:	463a      	mov	r2, r7
 80077f8:	4631      	mov	r1, r6
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff ff94 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 8007800:	b9f8      	cbnz	r0, 8007842 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007802:	2d01      	cmp	r5, #1
 8007804:	d10e      	bne.n	8007824 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	fa5f f288 	uxtb.w	r2, r8
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800780e:	9700      	str	r7, [sp, #0]
 8007810:	4633      	mov	r3, r6
 8007812:	2200      	movs	r2, #0
 8007814:	2180      	movs	r1, #128	; 0x80
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff ffb1 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 800781c:	b9a8      	cbnz	r0, 800784a <I2C_RequestMemoryWrite+0x72>
}
 800781e:	b002      	add	sp, #8
 8007820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800782a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800782c:	463a      	mov	r2, r7
 800782e:	4631      	mov	r1, r6
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff79 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 8007836:	b930      	cbnz	r0, 8007846 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	fa5f f288 	uxtb.w	r2, r8
 800783e:	629a      	str	r2, [r3, #40]	; 0x28
 8007840:	e7e5      	b.n	800780e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8007842:	2001      	movs	r0, #1
 8007844:	e7eb      	b.n	800781e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8007846:	2001      	movs	r0, #1
 8007848:	e7e9      	b.n	800781e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800784a:	2001      	movs	r0, #1
 800784c:	e7e7      	b.n	800781e <I2C_RequestMemoryWrite+0x46>
 800784e:	bf00      	nop
 8007850:	80002000 	.word	0x80002000

08007854 <I2C_RequestMemoryRead>:
{
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	4604      	mov	r4, r0
 800785c:	4690      	mov	r8, r2
 800785e:	461d      	mov	r5, r3
 8007860:	9e08      	ldr	r6, [sp, #32]
 8007862:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <I2C_RequestMemoryRead+0x74>)
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	2300      	movs	r3, #0
 800786a:	b2ea      	uxtb	r2, r5
 800786c:	f7ff fea6 	bl	80075bc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007870:	463a      	mov	r2, r7
 8007872:	4631      	mov	r1, r6
 8007874:	4620      	mov	r0, r4
 8007876:	f7ff ff57 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 800787a:	b9f8      	cbnz	r0, 80078bc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800787c:	2d01      	cmp	r5, #1
 800787e:	d10e      	bne.n	800789e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	fa5f f288 	uxtb.w	r2, r8
 8007886:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007888:	9700      	str	r7, [sp, #0]
 800788a:	4633      	mov	r3, r6
 800788c:	2200      	movs	r2, #0
 800788e:	2140      	movs	r1, #64	; 0x40
 8007890:	4620      	mov	r0, r4
 8007892:	f7ff ff74 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007896:	b9a8      	cbnz	r0, 80078c4 <I2C_RequestMemoryRead+0x70>
}
 8007898:	b002      	add	sp, #8
 800789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80078a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a6:	463a      	mov	r2, r7
 80078a8:	4631      	mov	r1, r6
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff ff3c 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 80078b0:	b930      	cbnz	r0, 80078c0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	fa5f f288 	uxtb.w	r2, r8
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28
 80078ba:	e7e5      	b.n	8007888 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80078bc:	2001      	movs	r0, #1
 80078be:	e7eb      	b.n	8007898 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80078c0:	2001      	movs	r0, #1
 80078c2:	e7e9      	b.n	8007898 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80078c4:	2001      	movs	r0, #1
 80078c6:	e7e7      	b.n	8007898 <I2C_RequestMemoryRead+0x44>
 80078c8:	80002000 	.word	0x80002000

080078cc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4605      	mov	r5, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f013 0f20 	tst.w	r3, #32
 80078dc:	d11a      	bne.n	8007914 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	4632      	mov	r2, r6
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7ff fe88 	bl	80075f8 <I2C_IsErrorOccurred>
 80078e8:	b9b0      	cbnz	r0, 8007918 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ea:	f7ff f895 	bl	8006a18 <HAL_GetTick>
 80078ee:	1b80      	subs	r0, r0, r6
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d801      	bhi.n	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80078f4:	2c00      	cmp	r4, #0
 80078f6:	d1ed      	bne.n	80078d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80078fa:	f043 0320 	orr.w	r3, r3, #32
 80078fe:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007900:	2320      	movs	r3, #32
 8007902:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800790c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8007910:	2001      	movs	r0, #1
}
 8007912:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007914:	2000      	movs	r0, #0
 8007916:	e7fc      	b.n	8007912 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8007918:	2001      	movs	r0, #1
 800791a:	e7fa      	b.n	8007912 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800791c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800791c:	2800      	cmp	r0, #0
 800791e:	d057      	beq.n	80079d0 <HAL_I2C_Init+0xb4>
{
 8007920:	b510      	push	{r4, lr}
 8007922:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007924:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007928:	2b00      	cmp	r3, #0
 800792a:	d041      	beq.n	80079b0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800792c:	2324      	movs	r3, #36	; 0x24
 800792e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007932:	6822      	ldr	r2, [r4, #0]
 8007934:	6813      	ldr	r3, [r2, #0]
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8007944:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	6893      	ldr	r3, [r2, #8]
 800794a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007950:	68e3      	ldr	r3, [r4, #12]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d031      	beq.n	80079ba <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800795e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007960:	68e3      	ldr	r3, [r4, #12]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d02f      	beq.n	80079c6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	6851      	ldr	r1, [r2, #4]
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <HAL_I2C_Init+0xb8>)
 800796c:	430b      	orrs	r3, r1
 800796e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	68d3      	ldr	r3, [r2, #12]
 8007974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007978:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	6962      	ldr	r2, [r4, #20]
 800797e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007980:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007988:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800798a:	69e3      	ldr	r3, [r4, #28]
 800798c:	6a21      	ldr	r1, [r4, #32]
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	6813      	ldr	r3, [r2, #0]
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800799e:	2000      	movs	r0, #0
 80079a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079a2:	2320      	movs	r3, #32
 80079a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80079ae:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80079b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80079b4:	f7fa fde0 	bl	8002578 <HAL_I2C_MspInit>
 80079b8:	e7b8      	b.n	800792c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c2:	6093      	str	r3, [r2, #8]
 80079c4:	e7cc      	b.n	8007960 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	e7ca      	b.n	8007966 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80079d0:	2001      	movs	r0, #1
}
 80079d2:	4770      	bx	lr
 80079d4:	02008000 	.word	0x02008000

080079d8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80079d8:	b1a8      	cbz	r0, 8007a06 <HAL_I2C_DeInit+0x2e>
{
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80079de:	2324      	movs	r3, #36	; 0x24
 80079e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80079e4:	6802      	ldr	r2, [r0, #0]
 80079e6:	6813      	ldr	r3, [r2, #0]
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80079ee:	f7fa fe0f 	bl	8002610 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f2:	2000      	movs	r0, #0
 80079f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80079f6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079fa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8007a00:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8007a04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a06:	2001      	movs	r0, #1
}
 8007a08:	4770      	bx	lr

08007a0a <HAL_I2C_Mem_Write>:
{
 8007a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	460d      	mov	r5, r1
 8007a12:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007a16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a18:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007a1c:	b2c9      	uxtb	r1, r1
 8007a1e:	2920      	cmp	r1, #32
 8007a20:	f040 80bc 	bne.w	8007b9c <HAL_I2C_Mem_Write+0x192>
 8007a24:	4604      	mov	r4, r0
 8007a26:	4690      	mov	r8, r2
 8007a28:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8007a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a2c:	f1ba 0f00 	cmp.w	sl, #0
 8007a30:	bf18      	it	ne
 8007a32:	2b00      	cmpne	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8007a36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	f000 80b2 	beq.w	8007ba4 <HAL_I2C_Mem_Write+0x19a>
 8007a40:	f04f 0b01 	mov.w	fp, #1
 8007a44:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007a48:	f7fe ffe6 	bl	8006a18 <HAL_GetTick>
 8007a4c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	2319      	movs	r3, #25
 8007a52:	465a      	mov	r2, fp
 8007a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7ff fe90 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007a5e:	b130      	cbz	r0, 8007a6e <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8007a60:	2001      	movs	r0, #1
 8007a62:	e09c      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	e097      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a6e:	2321      	movs	r3, #33	; 0x21
 8007a70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a80:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a86:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a88:	9601      	str	r6, [sp, #4]
 8007a8a:	9700      	str	r7, [sp, #0]
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	4642      	mov	r2, r8
 8007a90:	4629      	mov	r1, r5
 8007a92:	4620      	mov	r0, r4
 8007a94:	f7ff fea0 	bl	80077d8 <I2C_RequestMemoryWrite>
 8007a98:	b970      	cbnz	r0, 8007ab8 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2bff      	cmp	r3, #255	; 0xff
 8007aa0:	d90f      	bls.n	8007ac2 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa2:	22ff      	movs	r2, #255	; 0xff
 8007aa4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f7ff fd83 	bl	80075bc <I2C_TransferConfig>
 8007ab6:	e021      	b.n	8007afc <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007abe:	4658      	mov	r0, fp
 8007ac0:	e06d      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8007ac2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007ac4:	b292      	uxth	r2, r2
 8007ac6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7ff fd71 	bl	80075bc <I2C_TransferConfig>
 8007ada:	e00f      	b.n	8007afc <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8007adc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007ade:	b292      	uxth	r2, r2
 8007ae0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff fd64 	bl	80075bc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d033      	beq.n	8007b64 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007afc:	4632      	mov	r2, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7ff fe11 	bl	8007728 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d14e      	bne.n	8007ba8 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007b18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007b22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007b2c:	b292      	uxth	r2, r2
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d0e0      	beq.n	8007af4 <HAL_I2C_Mem_Write+0xea>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1de      	bne.n	8007af4 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b36:	9600      	str	r6, [sp, #0]
 8007b38:	463b      	mov	r3, r7
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2180      	movs	r1, #128	; 0x80
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff fe1d 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007b44:	bb90      	cbnz	r0, 8007bac <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2bff      	cmp	r3, #255	; 0xff
 8007b4c:	d9c6      	bls.n	8007adc <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b4e:	22ff      	movs	r2, #255	; 0xff
 8007b50:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b52:	2300      	movs	r3, #0
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff fd2d 	bl	80075bc <I2C_TransferConfig>
 8007b62:	e7c7      	b.n	8007af4 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b64:	4632      	mov	r2, r6
 8007b66:	4639      	mov	r1, r7
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7ff feaf 	bl	80078cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b6e:	b9f8      	cbnz	r0, 8007bb0 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	2220      	movs	r2, #32
 8007b74:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	684b      	ldr	r3, [r1, #4]
 8007b7a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007b7e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007b82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b8c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007b96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007b9a:	e000      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8007b9c:	2002      	movs	r0, #2
}
 8007b9e:	b003      	add	sp, #12
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007ba4:	2002      	movs	r0, #2
 8007ba6:	e7fa      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8007ba8:	2001      	movs	r0, #1
 8007baa:	e7f8      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8007bac:	2001      	movs	r0, #1
 8007bae:	e7f6      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	e7f4      	b.n	8007b9e <HAL_I2C_Mem_Write+0x194>

08007bb4 <HAL_I2C_Mem_Read>:
{
 8007bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	460d      	mov	r5, r1
 8007bbc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007bc0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bc2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007bc6:	b2c9      	uxtb	r1, r1
 8007bc8:	2920      	cmp	r1, #32
 8007bca:	f040 80bd 	bne.w	8007d48 <HAL_I2C_Mem_Read+0x194>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4690      	mov	r8, r2
 8007bd2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	bf18      	it	ne
 8007bdc:	2b00      	cmpne	r3, #0
 8007bde:	d016      	beq.n	8007c0e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8007be0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	f000 80b3 	beq.w	8007d50 <HAL_I2C_Mem_Read+0x19c>
 8007bea:	f04f 0b01 	mov.w	fp, #1
 8007bee:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007bf2:	f7fe ff11 	bl	8006a18 <HAL_GetTick>
 8007bf6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bf8:	9000      	str	r0, [sp, #0]
 8007bfa:	2319      	movs	r3, #25
 8007bfc:	465a      	mov	r2, fp
 8007bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7ff fdbb 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007c08:	b130      	cbz	r0, 8007c18 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	e09d      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c12:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8007c14:	2001      	movs	r0, #1
 8007c16:	e098      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c18:	2322      	movs	r3, #34	; 0x22
 8007c1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c2c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c30:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c32:	9601      	str	r6, [sp, #4]
 8007c34:	9700      	str	r7, [sp, #0]
 8007c36:	464b      	mov	r3, r9
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7ff fe09 	bl	8007854 <I2C_RequestMemoryRead>
 8007c42:	b970      	cbnz	r0, 8007c62 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	2bff      	cmp	r3, #255	; 0xff
 8007c4a:	d90f      	bls.n	8007c6c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c4c:	22ff      	movs	r2, #255	; 0xff
 8007c4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c50:	4b43      	ldr	r3, [pc, #268]	; (8007d60 <HAL_I2C_Mem_Read+0x1ac>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff fcae 	bl	80075bc <I2C_TransferConfig>
 8007c60:	e021      	b.n	8007ca6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8007c62:	2300      	movs	r3, #0
 8007c64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007c68:	4658      	mov	r0, fp
 8007c6a:	e06e      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8007c6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c72:	4b3b      	ldr	r3, [pc, #236]	; (8007d60 <HAL_I2C_Mem_Read+0x1ac>)
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff fc9c 	bl	80075bc <I2C_TransferConfig>
 8007c84:	e00f      	b.n	8007ca6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8007c86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	4629      	mov	r1, r5
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7ff fc8f 	bl	80075bc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007c9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d034      	beq.n	8007d10 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ca6:	9600      	str	r6, [sp, #0]
 8007ca8:	463b      	mov	r3, r7
 8007caa:	2200      	movs	r2, #0
 8007cac:	2104      	movs	r1, #4
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff fd65 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d14d      	bne.n	8007d54 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cbe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007cc6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007cc8:	3a01      	subs	r2, #1
 8007cca:	b292      	uxth	r2, r2
 8007ccc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0de      	beq.n	8007c9e <HAL_I2C_Mem_Read+0xea>
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	d1dc      	bne.n	8007c9e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ce4:	9600      	str	r6, [sp, #0]
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	2180      	movs	r1, #128	; 0x80
 8007cea:	4620      	mov	r0, r4
 8007cec:	f7ff fd47 	bl	800777e <I2C_WaitOnFlagUntilTimeout>
 8007cf0:	bb90      	cbnz	r0, 8007d58 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2bff      	cmp	r3, #255	; 0xff
 8007cf8:	d9c5      	bls.n	8007c86 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d06:	4629      	mov	r1, r5
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fc57 	bl	80075bc <I2C_TransferConfig>
 8007d0e:	e7c6      	b.n	8007c9e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d10:	4632      	mov	r2, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff fdd9 	bl	80078cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d1a:	b9f8      	cbnz	r0, 8007d5c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007d22:	6821      	ldr	r1, [r4, #0]
 8007d24:	684b      	ldr	r3, [r1, #4]
 8007d26:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007d2a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007d2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d38:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007d42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007d46:	e000      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8007d48:	2002      	movs	r0, #2
}
 8007d4a:	b003      	add	sp, #12
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007d50:	2002      	movs	r0, #2
 8007d52:	e7fa      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8007d54:	2001      	movs	r0, #1
 8007d56:	e7f8      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e7f6      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	e7f4      	b.n	8007d4a <HAL_I2C_Mem_Read+0x196>
 8007d60:	80002400 	.word	0x80002400

08007d64 <HAL_I2C_GetState>:
  return hi2c->State;
 8007d64:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007d68:	4770      	bx	lr

08007d6a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007d6a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007d6c:	4770      	bx	lr

08007d6e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	d124      	bne.n	8007dc2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d022      	beq.n	8007dc6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8007d80:	2301      	movs	r3, #1
 8007d82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d86:	2324      	movs	r3, #36	; 0x24
 8007d88:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d8c:	6802      	ldr	r2, [r0, #0]
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	f023 0301 	bic.w	r3, r3, #1
 8007d94:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d96:	6802      	ldr	r2, [r0, #0]
 8007d98:	6813      	ldr	r3, [r2, #0]
 8007d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9e:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007da0:	6802      	ldr	r2, [r0, #0]
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	4319      	orrs	r1, r3
 8007da6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007da8:	6802      	ldr	r2, [r0, #0]
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007db2:	2320      	movs	r3, #32
 8007db4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db8:	2300      	movs	r3, #0
 8007dba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007dc2:	2002      	movs	r0, #2
 8007dc4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007dc6:	2002      	movs	r0, #2
  }
}
 8007dc8:	4770      	bx	lr

08007dca <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d122      	bne.n	8007e1a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d020      	beq.n	8007e1e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007de2:	2324      	movs	r3, #36	; 0x24
 8007de4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de8:	6802      	ldr	r2, [r0, #0]
 8007dea:	6813      	ldr	r3, [r2, #0]
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007df2:	6802      	ldr	r2, [r0, #0]
 8007df4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007df6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dfa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dfe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e00:	6802      	ldr	r2, [r0, #0]
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	f043 0301 	orr.w	r3, r3, #1
 8007e08:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e0a:	2320      	movs	r3, #32
 8007e0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e10:	2300      	movs	r3, #0
 8007e12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007e16:	4618      	mov	r0, r3
 8007e18:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007e1a:	2002      	movs	r0, #2
 8007e1c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007e1e:	2002      	movs	r0, #2
  }
}
 8007e20:	4770      	bx	lr
	...

08007e24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007e26:	684d      	ldr	r5, [r1, #4]
 8007e28:	6804      	ldr	r4, [r0, #0]
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8007e30:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007e32:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8007e36:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007e3a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007e3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e42:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e46:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e48:	6804      	ldr	r4, [r0, #0]
 8007e4a:	68e6      	ldr	r6, [r4, #12]
 8007e4c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e50:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e52:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e54:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007e58:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007e5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007e60:	68cd      	ldr	r5, [r1, #12]
 8007e62:	6804      	ldr	r4, [r0, #0]
 8007e64:	68e3      	ldr	r3, [r4, #12]
 8007e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e6a:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007e6c:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8007e70:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8007e74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e78:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007e7c:	688b      	ldr	r3, [r1, #8]
 8007e7e:	6804      	ldr	r4, [r0, #0]
 8007e80:	68e6      	ldr	r6, [r4, #12]
 8007e82:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8007e86:	4473      	add	r3, lr
 8007e88:	3301      	adds	r3, #1
 8007e8a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007e8e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007e92:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007e96:	6803      	ldr	r3, [r0, #0]
 8007e98:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007e9c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8007ea0:	f024 0407 	bic.w	r4, r4, #7
 8007ea4:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007ea8:	6803      	ldr	r3, [r0, #0]
 8007eaa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007eae:	690c      	ldr	r4, [r1, #16]
 8007eb0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007eb4:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007eb8:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007ebc:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007ebe:	6804      	ldr	r4, [r0, #0]
 8007ec0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8007ec4:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8007ec8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007ecc:	2400      	movs	r4, #0
 8007ece:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007ed2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8007ed6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007eda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007ede:	6806      	ldr	r6, [r0, #0]
 8007ee0:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8007ee4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007ee8:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8007eec:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ef0:	6803      	ldr	r3, [r0, #0]
 8007ef2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007ef6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8007efa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007efe:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f02:	6803      	ldr	r3, [r0, #0]
 8007f04:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f08:	694d      	ldr	r5, [r1, #20]
 8007f0a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f0e:	6803      	ldr	r3, [r0, #0]
 8007f10:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f14:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8007f18:	4d2e      	ldr	r5, [pc, #184]	; (8007fd4 <LTDC_SetConfig+0x1b0>)
 8007f1a:	4035      	ands	r5, r6
 8007f1c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f20:	6a0d      	ldr	r5, [r1, #32]
 8007f22:	6803      	ldr	r3, [r0, #0]
 8007f24:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f28:	69ce      	ldr	r6, [r1, #28]
 8007f2a:	4335      	orrs	r5, r6
 8007f2c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007f30:	6803      	ldr	r3, [r0, #0]
 8007f32:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8007f36:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8007f3a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007f3e:	6803      	ldr	r3, [r0, #0]
 8007f40:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8007f44:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007f46:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007f4a:	690b      	ldr	r3, [r1, #16]
 8007f4c:	b16b      	cbz	r3, 8007f6a <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d039      	beq.n	8007fc6 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	bf18      	it	ne
 8007f56:	2b04      	cmpne	r3, #4
 8007f58:	d037      	beq.n	8007fca <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d037      	beq.n	8007fce <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	d001      	beq.n	8007f66 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007f62:	2501      	movs	r5, #1
 8007f64:	e002      	b.n	8007f6c <LTDC_SetConfig+0x148>
    tmp = 2U;
 8007f66:	2502      	movs	r5, #2
 8007f68:	e000      	b.n	8007f6c <LTDC_SetConfig+0x148>
    tmp = 4U;
 8007f6a:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007f6c:	6802      	ldr	r2, [r0, #0]
 8007f6e:	4462      	add	r2, ip
 8007f70:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007f74:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8007f78:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007f7c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8007f7e:	fb05 f402 	mul.w	r4, r5, r2
 8007f82:	684b      	ldr	r3, [r1, #4]
 8007f84:	680a      	ldr	r2, [r1, #0]
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	fb05 f303 	mul.w	r3, r5, r3
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	6802      	ldr	r2, [r0, #0]
 8007f90:	4462      	add	r2, ip
 8007f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007f9a:	6803      	ldr	r3, [r0, #0]
 8007f9c:	4463      	add	r3, ip
 8007f9e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8007fa2:	4a0d      	ldr	r2, [pc, #52]	; (8007fd8 <LTDC_SetConfig+0x1b4>)
 8007fa4:	4022      	ands	r2, r4
 8007fa6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	4463      	add	r3, ip
 8007fae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007fb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007fb4:	6803      	ldr	r3, [r0, #0]
 8007fb6:	449c      	add	ip, r3
 8007fb8:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8007fc6:	2503      	movs	r5, #3
 8007fc8:	e7d0      	b.n	8007f6c <LTDC_SetConfig+0x148>
    tmp = 2U;
 8007fca:	2502      	movs	r5, #2
 8007fcc:	e7ce      	b.n	8007f6c <LTDC_SetConfig+0x148>
 8007fce:	2502      	movs	r5, #2
 8007fd0:	e7cc      	b.n	8007f6c <LTDC_SetConfig+0x148>
 8007fd2:	bf00      	nop
 8007fd4:	fffff8f8 	.word	0xfffff8f8
 8007fd8:	fffff800 	.word	0xfffff800

08007fdc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d072      	beq.n	80080c6 <HAL_LTDC_Init+0xea>
{
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007fe4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d067      	beq.n	80080bc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fec:	2302      	movs	r3, #2
 8007fee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	6993      	ldr	r3, [r2, #24]
 8007ff6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ffa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ffc:	6821      	ldr	r1, [r4, #0]
 8007ffe:	698a      	ldr	r2, [r1, #24]
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	68a0      	ldr	r0, [r4, #8]
 8008004:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008006:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008008:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800800a:	6920      	ldr	r0, [r4, #16]
 800800c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800800e:	4313      	orrs	r3, r2
 8008010:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008012:	6821      	ldr	r1, [r4, #0]
 8008014:	688a      	ldr	r2, [r1, #8]
 8008016:	4b2d      	ldr	r3, [pc, #180]	; (80080cc <HAL_LTDC_Init+0xf0>)
 8008018:	401a      	ands	r2, r3
 800801a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	6882      	ldr	r2, [r0, #8]
 8008020:	69a1      	ldr	r1, [r4, #24]
 8008022:	6965      	ldr	r5, [r4, #20]
 8008024:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008028:	430a      	orrs	r2, r1
 800802a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800802c:	6821      	ldr	r1, [r4, #0]
 800802e:	68ca      	ldr	r2, [r1, #12]
 8008030:	401a      	ands	r2, r3
 8008032:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	68c2      	ldr	r2, [r0, #12]
 8008038:	6a21      	ldr	r1, [r4, #32]
 800803a:	69e5      	ldr	r5, [r4, #28]
 800803c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008040:	430a      	orrs	r2, r1
 8008042:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008044:	6821      	ldr	r1, [r4, #0]
 8008046:	690a      	ldr	r2, [r1, #16]
 8008048:	401a      	ands	r2, r3
 800804a:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	6902      	ldr	r2, [r0, #16]
 8008050:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008052:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008054:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008058:	430a      	orrs	r2, r1
 800805a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800805c:	6821      	ldr	r1, [r4, #0]
 800805e:	694a      	ldr	r2, [r1, #20]
 8008060:	4013      	ands	r3, r2
 8008062:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008064:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008066:	6821      	ldr	r1, [r4, #0]
 8008068:	694b      	ldr	r3, [r1, #20]
 800806a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800806c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008070:	4313      	orrs	r3, r2
 8008072:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008074:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008078:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800807c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800807e:	6821      	ldr	r1, [r4, #0]
 8008080:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008082:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008086:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008088:	6821      	ldr	r1, [r4, #0]
 800808a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800808c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008090:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8008094:	4303      	orrs	r3, r0
 8008096:	4313      	orrs	r3, r2
 8008098:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800809e:	f043 0306 	orr.w	r3, r3, #6
 80080a2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	6993      	ldr	r3, [r2, #24]
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080ae:	2000      	movs	r0, #0
 80080b0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80080bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80080c0:	f7fa fac6 	bl	8002650 <HAL_LTDC_MspInit>
 80080c4:	e792      	b.n	8007fec <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80080c6:	2001      	movs	r0, #1
}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	f000f800 	.word	0xf000f800

080080d0 <HAL_LTDC_ErrorCallback>:
}
 80080d0:	4770      	bx	lr

080080d2 <HAL_LTDC_ReloadEventCallback>:
}
 80080d2:	4770      	bx	lr

080080d4 <HAL_LTDC_IRQHandler>:
{
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80080d8:	6803      	ldr	r3, [r0, #0]
 80080da:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80080dc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80080de:	f015 0f04 	tst.w	r5, #4
 80080e2:	d002      	beq.n	80080ea <HAL_LTDC_IRQHandler+0x16>
 80080e4:	f016 0f04 	tst.w	r6, #4
 80080e8:	d112      	bne.n	8008110 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80080ea:	f015 0f02 	tst.w	r5, #2
 80080ee:	d002      	beq.n	80080f6 <HAL_LTDC_IRQHandler+0x22>
 80080f0:	f016 0f02 	tst.w	r6, #2
 80080f4:	d121      	bne.n	800813a <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80080f6:	f015 0f01 	tst.w	r5, #1
 80080fa:	d002      	beq.n	8008102 <HAL_LTDC_IRQHandler+0x2e>
 80080fc:	f016 0f01 	tst.w	r6, #1
 8008100:	d132      	bne.n	8008168 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008102:	f015 0f08 	tst.w	r5, #8
 8008106:	d002      	beq.n	800810e <HAL_LTDC_IRQHandler+0x3a>
 8008108:	f016 0f08 	tst.w	r6, #8
 800810c:	d13d      	bne.n	800818a <HAL_LTDC_IRQHandler+0xb6>
}
 800810e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008112:	f022 0204 	bic.w	r2, r2, #4
 8008116:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008118:	6803      	ldr	r3, [r0, #0]
 800811a:	2204      	movs	r2, #4
 800811c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800811e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800812a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800812e:	2300      	movs	r3, #0
 8008130:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008134:	f7ff ffcc 	bl	80080d0 <HAL_LTDC_ErrorCallback>
 8008138:	e7d7      	b.n	80080ea <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800813e:	f023 0302 	bic.w	r3, r3, #2
 8008142:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	2202      	movs	r2, #2
 8008148:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800814a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008154:	2304      	movs	r3, #4
 8008156:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800815a:	2300      	movs	r3, #0
 800815c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008160:	4620      	mov	r0, r4
 8008162:	f7ff ffb5 	bl	80080d0 <HAL_LTDC_ErrorCallback>
 8008166:	e7c6      	b.n	80080f6 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800816c:	f023 0301 	bic.w	r3, r3, #1
 8008170:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	2301      	movs	r3, #1
 8008176:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008178:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800817c:	2300      	movs	r3, #0
 800817e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008182:	4620      	mov	r0, r4
 8008184:	f7f9 fb12 	bl	80017ac <HAL_LTDC_LineEventCallback>
 8008188:	e7bb      	b.n	8008102 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800818e:	f023 0308 	bic.w	r3, r3, #8
 8008192:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	2208      	movs	r2, #8
 8008198:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800819a:	2301      	movs	r3, #1
 800819c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80081a0:	2300      	movs	r3, #0
 80081a2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081a6:	4620      	mov	r0, r4
 80081a8:	f7ff ff93 	bl	80080d2 <HAL_LTDC_ReloadEventCallback>
}
 80081ac:	e7af      	b.n	800810e <HAL_LTDC_IRQHandler+0x3a>

080081ae <HAL_LTDC_ConfigLayer>:
{
 80081ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80081b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d02c      	beq.n	8008212 <HAL_LTDC_ConfigLayer+0x64>
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	4616      	mov	r6, r2
 80081be:	2701      	movs	r7, #1
 80081c0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081c4:	2302      	movs	r3, #2
 80081c6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081ca:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80081ce:	fb0c 0c02 	mla	ip, ip, r2, r0
 80081d2:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80081d6:	468e      	mov	lr, r1
 80081d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80081dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80081e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80081ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081f0:	f8de 3000 	ldr.w	r3, [lr]
 80081f4:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081f8:	4632      	mov	r2, r6
 80081fa:	4629      	mov	r1, r5
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7ff fe11 	bl	8007e24 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008206:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800820a:	2000      	movs	r0, #0
 800820c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8008210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8008212:	2002      	movs	r0, #2
 8008214:	e7fc      	b.n	8008210 <HAL_LTDC_ConfigLayer+0x62>
	...

08008218 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8008218:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800821c:	2b01      	cmp	r3, #1
 800821e:	d01a      	beq.n	8008256 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8008220:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8008222:	2201      	movs	r2, #1
 8008224:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008228:	2302      	movs	r3, #2
 800822a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800822e:	6804      	ldr	r4, [r0, #0]
 8008230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <HAL_LTDC_ProgramLineEvent+0x44>)
 800823a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800823c:	6801      	ldr	r1, [r0, #0]
 800823e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008240:	4313      	orrs	r3, r2
 8008242:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8008244:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008248:	2300      	movs	r3, #0
 800824a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800824e:	4618      	mov	r0, r3
}
 8008250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008254:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8008256:	2002      	movs	r0, #2
}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	50001000 	.word	0x50001000

08008260 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8008264:	f7fe fbd8 	bl	8006a18 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008268:	2c00      	cmp	r4, #0
 800826a:	d035      	beq.n	80082d8 <HAL_MDMA_Abort+0x78>
 800826c:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800826e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d006      	beq.n	8008286 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008278:	2380      	movs	r3, #128	; 0x80
 800827a:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800827c:	2300      	movs	r3, #0
 800827e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 8008282:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 8008284:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	68d3      	ldr	r3, [r2, #12]
 800828a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800828e:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 8008290:	6822      	ldr	r2, [r4, #0]
 8008292:	68d3      	ldr	r3, [r2, #12]
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	f012 0f01 	tst.w	r2, #1
 80082a2:	d010      	beq.n	80082c6 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80082a4:	f7fe fbb8 	bl	8006a18 <HAL_GetTick>
 80082a8:	1b43      	subs	r3, r0, r5
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d9f5      	bls.n	800829a <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80082ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 80082b6:	2300      	movs	r3, #0
 80082b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80082bc:	2303      	movs	r3, #3
 80082be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 80082c2:	2001      	movs	r0, #1
 80082c4:	e7de      	b.n	8008284 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80082c6:	221f      	movs	r2, #31
 80082c8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 80082ca:	2000      	movs	r0, #0
 80082cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80082d6:	e7d5      	b.n	8008284 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 80082d8:	2001      	movs	r0, #1
 80082da:	e7d3      	b.n	8008284 <HAL_MDMA_Abort+0x24>

080082dc <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80082dc:	b190      	cbz	r0, 8008304 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80082de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d003      	beq.n	80082f0 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 80082ec:	2001      	movs	r0, #1
 80082ee:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80082f0:	2304      	movs	r3, #4
 80082f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80082f6:	6802      	ldr	r2, [r0, #0]
 80082f8:	68d3      	ldr	r3, [r2, #12]
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8008300:	2000      	movs	r0, #0
 8008302:	4770      	bx	lr
    return HAL_ERROR;
 8008304:	2001      	movs	r0, #1
}
 8008306:	4770      	bx	lr

08008308 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800830a:	6802      	ldr	r2, [r0, #0]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008312:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8008314:	6883      	ldr	r3, [r0, #8]
 8008316:	b933      	cbnz	r3, 8008326 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8008318:	6802      	ldr	r2, [r0, #0]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008320:	684c      	ldr	r4, [r1, #4]
 8008322:	4323      	orrs	r3, r4
 8008324:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8008326:	680b      	ldr	r3, [r1, #0]
 8008328:	2b02      	cmp	r3, #2
 800832a:	d04d      	beq.n	80083c8 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800832c:	2b03      	cmp	r3, #3
 800832e:	d055      	beq.n	80083dc <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8008330:	6803      	ldr	r3, [r0, #0]
 8008332:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8008336:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800833a:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800833e:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8008342:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8008344:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8008346:	432c      	orrs	r4, r5
 8008348:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800834a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800834c:	b15c      	cbz	r4, 8008366 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800834e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008350:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8008352:	6813      	ldr	r3, [r2, #0]
 8008354:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8008358:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800835a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800835c:	432c      	orrs	r4, r5
 800835e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8008360:	432c      	orrs	r4, r5
 8008362:	4323      	orrs	r3, r4
 8008364:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8008366:	f8de 3000 	ldr.w	r3, [lr]
 800836a:	f023 031f 	bic.w	r3, r3, #31
 800836e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8008370:	4323      	orrs	r3, r4
 8008372:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008376:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008378:	b12b      	cbz	r3, 8008386 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800837a:	680b      	ldr	r3, [r1, #0]
 800837c:	b91b      	cbnz	r3, 8008386 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800837e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008380:	6804      	ldr	r4, [r0, #0]
 8008382:	3b01      	subs	r3, #1
 8008384:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8008386:	68cb      	ldr	r3, [r1, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d073      	beq.n	8008474 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800838c:	69cc      	ldr	r4, [r1, #28]
 800838e:	2c00      	cmp	r4, #0
 8008390:	d048      	beq.n	8008424 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008392:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8008394:	b365      	cbz	r5, 80083f0 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8008396:	6817      	ldr	r7, [r2, #0]
 8008398:	4e48      	ldr	r6, [pc, #288]	; (80084bc <OSPI_ConfigCmd+0x1b4>)
 800839a:	403e      	ands	r6, r7
 800839c:	694f      	ldr	r7, [r1, #20]
 800839e:	433b      	orrs	r3, r7
 80083a0:	690f      	ldr	r7, [r1, #16]
 80083a2:	433b      	orrs	r3, r7
 80083a4:	431c      	orrs	r4, r3
 80083a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80083a8:	431c      	orrs	r4, r3
 80083aa:	6a0b      	ldr	r3, [r1, #32]
 80083ac:	431c      	orrs	r4, r3
 80083ae:	432c      	orrs	r4, r5
 80083b0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80083b2:	432c      	orrs	r4, r5
 80083b4:	4334      	orrs	r4, r6
 80083b6:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80083b8:	688b      	ldr	r3, [r1, #8]
 80083ba:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80083be:	6803      	ldr	r3, [r0, #0]
 80083c0:	698a      	ldr	r2, [r1, #24]
 80083c2:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80083c4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 80083c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 80083c8:	6803      	ldr	r3, [r0, #0]
 80083ca:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 80083ce:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 80083d2:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80083d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80083da:	e7b2      	b.n	8008342 <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80083e2:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80083e6:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80083ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80083ee:	e7a8      	b.n	8008342 <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80083f0:	6816      	ldr	r6, [r2, #0]
 80083f2:	4d33      	ldr	r5, [pc, #204]	; (80084c0 <OSPI_ConfigCmd+0x1b8>)
 80083f4:	4035      	ands	r5, r6
 80083f6:	694e      	ldr	r6, [r1, #20]
 80083f8:	4333      	orrs	r3, r6
 80083fa:	690e      	ldr	r6, [r1, #16]
 80083fc:	4333      	orrs	r3, r6
 80083fe:	431c      	orrs	r4, r3
 8008400:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8008402:	431c      	orrs	r4, r3
 8008404:	6a0b      	ldr	r3, [r1, #32]
 8008406:	431c      	orrs	r4, r3
 8008408:	432c      	orrs	r4, r5
 800840a:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800840c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800840e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008412:	d1d1      	bne.n	80083b8 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8008414:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008416:	2b08      	cmp	r3, #8
 8008418:	d1ce      	bne.n	80083b8 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	e7c9      	b.n	80083b8 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008424:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8008426:	b184      	cbz	r4, 800844a <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8008428:	6815      	ldr	r5, [r2, #0]
 800842a:	4826      	ldr	r0, [pc, #152]	; (80084c4 <OSPI_ConfigCmd+0x1bc>)
 800842c:	4028      	ands	r0, r5
 800842e:	694d      	ldr	r5, [r1, #20]
 8008430:	432b      	orrs	r3, r5
 8008432:	690d      	ldr	r5, [r1, #16]
 8008434:	432b      	orrs	r3, r5
 8008436:	431c      	orrs	r4, r3
 8008438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800843a:	431c      	orrs	r4, r3
 800843c:	4304      	orrs	r4, r0
 800843e:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 8008440:	688b      	ldr	r3, [r1, #8]
 8008442:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8008446:	2000      	movs	r0, #0
 8008448:	e7bd      	b.n	80083c6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800844a:	6814      	ldr	r4, [r2, #0]
 800844c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8008450:	694d      	ldr	r5, [r1, #20]
 8008452:	432b      	orrs	r3, r5
 8008454:	690d      	ldr	r5, [r1, #16]
 8008456:	432b      	orrs	r3, r5
 8008458:	4323      	orrs	r3, r4
 800845a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800845c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800845e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008462:	d1ed      	bne.n	8008440 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8008464:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8008466:	2b08      	cmp	r3, #8
 8008468:	d1ea      	bne.n	8008440 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800846a:	6813      	ldr	r3, [r2, #0]
 800846c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	e7e5      	b.n	8008440 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8008474:	69cb      	ldr	r3, [r1, #28]
 8008476:	b1e3      	cbz	r3, 80084b2 <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8008478:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800847a:	b184      	cbz	r4, 800849e <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800847c:	6816      	ldr	r6, [r2, #0]
 800847e:	4d12      	ldr	r5, [pc, #72]	; (80084c8 <OSPI_ConfigCmd+0x1c0>)
 8008480:	4035      	ands	r5, r6
 8008482:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008484:	4333      	orrs	r3, r6
 8008486:	6a0e      	ldr	r6, [r1, #32]
 8008488:	4333      	orrs	r3, r6
 800848a:	4323      	orrs	r3, r4
 800848c:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800848e:	4323      	orrs	r3, r4
 8008490:	432b      	orrs	r3, r5
 8008492:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8008494:	6803      	ldr	r3, [r0, #0]
 8008496:	698a      	ldr	r2, [r1, #24]
 8008498:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800849a:	2000      	movs	r0, #0
 800849c:	e793      	b.n	80083c6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800849e:	6814      	ldr	r4, [r2, #0]
 80084a0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80084a4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80084a6:	432b      	orrs	r3, r5
 80084a8:	6a0d      	ldr	r5, [r1, #32]
 80084aa:	432b      	orrs	r3, r5
 80084ac:	4323      	orrs	r3, r4
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e7f0      	b.n	8008494 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80084b2:	2308      	movs	r3, #8
 80084b4:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 80084b6:	2001      	movs	r0, #1
 80084b8:	e785      	b.n	80083c6 <OSPI_ConfigCmd+0xbe>
 80084ba:	bf00      	nop
 80084bc:	f0ffc0c0 	.word	0xf0ffc0c0
 80084c0:	ffffc0c0 	.word	0xffffc0c0
 80084c4:	f0ffffc0 	.word	0xf0ffffc0
 80084c8:	f0ffc0ff 	.word	0xf0ffc0ff

080084cc <OSPI_WaitFlagStateUntilTimeout>:
{
 80084cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4605      	mov	r5, r0
 80084d2:	460f      	mov	r7, r1
 80084d4:	4616      	mov	r6, r2
 80084d6:	4699      	mov	r9, r3
 80084d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80084dc:	682c      	ldr	r4, [r5, #0]
 80084de:	6a24      	ldr	r4, [r4, #32]
 80084e0:	423c      	tst	r4, r7
 80084e2:	bf14      	ite	ne
 80084e4:	f04f 0c01 	movne.w	ip, #1
 80084e8:	f04f 0c00 	moveq.w	ip, #0
 80084ec:	45b4      	cmp	ip, r6
 80084ee:	d014      	beq.n	800851a <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80084f4:	d0f2      	beq.n	80084dc <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f6:	f7fe fa8f 	bl	8006a18 <HAL_GetTick>
 80084fa:	eba0 0009 	sub.w	r0, r0, r9
 80084fe:	4540      	cmp	r0, r8
 8008500:	d802      	bhi.n	8008508 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 8008502:	f1b8 0f00 	cmp.w	r8, #0
 8008506:	d1e9      	bne.n	80084dc <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800850c:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800850e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 8008516:	2001      	movs	r0, #1
 8008518:	e000      	b.n	800851c <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800851a:	2000      	movs	r0, #0
}
 800851c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008520 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 8008520:	b180      	cbz	r0, 8008544 <HAL_OSPI_DeInit+0x24>
{
 8008522:	b510      	push	{r4, lr}
 8008524:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 8008526:	6802      	ldr	r2, [r0, #0]
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008530:	6802      	ldr	r2, [r0, #0]
 8008532:	6893      	ldr	r3, [r2, #8]
 8008534:	f023 0302 	bic.w	r3, r3, #2
 8008538:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800853a:	f7fa f967 	bl	800280c <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800853e:	2000      	movs	r0, #0
 8008540:	6520      	str	r0, [r4, #80]	; 0x50
}
 8008542:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8008544:	2001      	movs	r0, #1
}
 8008546:	4770      	bx	lr

08008548 <HAL_OSPI_Command>:
{
 8008548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	4604      	mov	r4, r0
 8008550:	4688      	mov	r8, r1
 8008552:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8008554:	f7fe fa60 	bl	8006a18 <HAL_GetTick>
 8008558:	4606      	mov	r6, r0
  state = hospi->State;
 800855a:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800855c:	2d02      	cmp	r5, #2
 800855e:	d009      	beq.n	8008574 <HAL_OSPI_Command+0x2c>
 8008560:	2d14      	cmp	r5, #20
 8008562:	d024      	beq.n	80085ae <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8008564:	2d24      	cmp	r5, #36	; 0x24
 8008566:	d028      	beq.n	80085ba <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008568:	2310      	movs	r3, #16
 800856a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800856c:	2001      	movs	r0, #1
}
 800856e:	b002      	add	sp, #8
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8008574:	68e3      	ldr	r3, [r4, #12]
 8008576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800857a:	d0f1      	beq.n	8008560 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800857c:	9700      	str	r7, [sp, #0]
 800857e:	4633      	mov	r3, r6
 8008580:	2200      	movs	r2, #0
 8008582:	2120      	movs	r1, #32
 8008584:	4620      	mov	r0, r4
 8008586:	f7ff ffa1 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800858a:	2800      	cmp	r0, #0
 800858c:	d1ef      	bne.n	800856e <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800858e:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8008590:	4641      	mov	r1, r8
 8008592:	4620      	mov	r0, r4
 8008594:	f7ff feb8 	bl	8008308 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8008598:	2800      	cmp	r0, #0
 800859a:	d1e8      	bne.n	800856e <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800859c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80085a0:	b193      	cbz	r3, 80085c8 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80085a2:	f8d8 3000 	ldr.w	r3, [r8]
 80085a6:	b9d3      	cbnz	r3, 80085de <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80085a8:	2304      	movs	r3, #4
 80085aa:	6523      	str	r3, [r4, #80]	; 0x50
 80085ac:	e7df      	b.n	800856e <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80085ae:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80085b2:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d8d5      	bhi.n	8008564 <HAL_OSPI_Command+0x1c>
 80085b8:	e7e0      	b.n	800857c <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80085ba:	f8d8 3000 	ldr.w	r3, [r8]
 80085be:	2b03      	cmp	r3, #3
 80085c0:	bf18      	it	ne
 80085c2:	2b01      	cmpne	r3, #1
 80085c4:	d1d0      	bne.n	8008568 <HAL_OSPI_Command+0x20>
 80085c6:	e7d9      	b.n	800857c <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80085c8:	9700      	str	r7, [sp, #0]
 80085ca:	4633      	mov	r3, r6
 80085cc:	2201      	movs	r2, #1
 80085ce:	2102      	movs	r1, #2
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7ff ff7b 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	2202      	movs	r2, #2
 80085da:	625a      	str	r2, [r3, #36]	; 0x24
 80085dc:	e7c7      	b.n	800856e <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d007      	beq.n	80085f2 <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d1c3      	bne.n	800856e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80085e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80085e8:	2b14      	cmp	r3, #20
 80085ea:	d00b      	beq.n	8008604 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80085ec:	2324      	movs	r3, #36	; 0x24
 80085ee:	6523      	str	r3, [r4, #80]	; 0x50
 80085f0:	e7bd      	b.n	800856e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80085f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80085f4:	2b24      	cmp	r3, #36	; 0x24
 80085f6:	d002      	beq.n	80085fe <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80085f8:	2314      	movs	r3, #20
 80085fa:	6523      	str	r3, [r4, #80]	; 0x50
 80085fc:	e7b7      	b.n	800856e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80085fe:	2304      	movs	r3, #4
 8008600:	6523      	str	r3, [r4, #80]	; 0x50
 8008602:	e7b4      	b.n	800856e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8008604:	2304      	movs	r3, #4
 8008606:	6523      	str	r3, [r4, #80]	; 0x50
 8008608:	e7b1      	b.n	800856e <HAL_OSPI_Command+0x26>

0800860a <HAL_OSPI_Transmit>:
{
 800860a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	4604      	mov	r4, r0
 8008612:	4688      	mov	r8, r1
 8008614:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8008616:	f7fe f9ff 	bl	8006a18 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800861a:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800861c:	f1b8 0f00 	cmp.w	r8, #0
 8008620:	d00a      	beq.n	8008638 <HAL_OSPI_Transmit+0x2e>
 8008622:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008624:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008626:	2b04      	cmp	r3, #4
 8008628:	d00a      	beq.n	8008640 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800862a:	2310      	movs	r3, #16
 800862c:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
}
 8008630:	4618      	mov	r0, r3
 8008632:	b002      	add	sp, #8
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8008638:	2308      	movs	r3, #8
 800863a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e7f7      	b.n	8008630 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8008640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008642:	3301      	adds	r3, #1
 8008644:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8008646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008648:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800864a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008654:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8008656:	9600      	str	r6, [sp, #0]
 8008658:	462b      	mov	r3, r5
 800865a:	2201      	movs	r2, #1
 800865c:	2104      	movs	r1, #4
 800865e:	4620      	mov	r0, r4
 8008660:	f7ff ff34 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8008664:	4603      	mov	r3, r0
 8008666:	b960      	cbnz	r0, 8008682 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8008668:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 8008670:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008672:	3101      	adds	r1, #1
 8008674:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8008676:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008678:	3901      	subs	r1, #1
 800867a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800867c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800867e:	2a00      	cmp	r2, #0
 8008680:	d1e9      	bne.n	8008656 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d4      	bne.n	8008630 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008686:	9600      	str	r6, [sp, #0]
 8008688:	462b      	mov	r3, r5
 800868a:	2201      	movs	r2, #1
 800868c:	2102      	movs	r1, #2
 800868e:	4620      	mov	r0, r4
 8008690:	f7ff ff1c 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008694:	4603      	mov	r3, r0
 8008696:	2800      	cmp	r0, #0
 8008698:	d1ca      	bne.n	8008630 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	2202      	movs	r2, #2
 800869e:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80086a0:	6522      	str	r2, [r4, #80]	; 0x50
 80086a2:	e7c5      	b.n	8008630 <HAL_OSPI_Transmit+0x26>

080086a4 <HAL_OSPI_Receive>:
{
 80086a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	4604      	mov	r4, r0
 80086ac:	4688      	mov	r8, r1
 80086ae:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80086b0:	f7fe f9b2 	bl	8006a18 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80086b4:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 80086b6:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80086b8:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 80086bc:	f1b8 0f00 	cmp.w	r8, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_OSPI_Receive+0x34>
 80086c2:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80086c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d00a      	beq.n	80086e0 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80086ca:	2310      	movs	r3, #16
 80086cc:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	b002      	add	sp, #8
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80086d8:	2308      	movs	r3, #8
 80086da:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e7f7      	b.n	80086d0 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80086e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80086e2:	3301      	adds	r3, #1
 80086e4:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80086e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086e8:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80086ea:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f8:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80086fa:	68e3      	ldr	r3, [r4, #12]
 80086fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008700:	d007      	beq.n	8008712 <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8008708:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800870c:	d02a      	beq.n	8008764 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800870e:	649a      	str	r2, [r3, #72]	; 0x48
 8008710:	e001      	b.n	8008716 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8008716:	9700      	str	r7, [sp, #0]
 8008718:	4633      	mov	r3, r6
 800871a:	2201      	movs	r2, #1
 800871c:	2106      	movs	r1, #6
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff fed4 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8008724:	4603      	mov	r3, r0
 8008726:	b960      	cbnz	r0, 8008742 <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008728:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800872a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800872e:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8008730:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008732:	3101      	adds	r1, #1
 8008734:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8008736:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008738:	3901      	subs	r1, #1
 800873a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800873c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800873e:	2a00      	cmp	r2, #0
 8008740:	d1e9      	bne.n	8008716 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1c4      	bne.n	80086d0 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8008746:	9700      	str	r7, [sp, #0]
 8008748:	4633      	mov	r3, r6
 800874a:	2201      	movs	r2, #1
 800874c:	2102      	movs	r1, #2
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff febc 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008754:	4603      	mov	r3, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d1ba      	bne.n	80086d0 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800875a:	6821      	ldr	r1, [r4, #0]
 800875c:	2202      	movs	r2, #2
 800875e:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8008760:	6522      	str	r2, [r4, #80]	; 0x50
 8008762:	e7b5      	b.n	80086d0 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8008764:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8008768:	e7d5      	b.n	8008716 <HAL_OSPI_Receive+0x72>

0800876a <HAL_OSPI_AutoPolling>:
{
 800876a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800876e:	b083      	sub	sp, #12
 8008770:	4604      	mov	r4, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8008776:	f7fe f94f 	bl	8006a18 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800877a:	6821      	ldr	r1, [r4, #0]
 800877c:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800877e:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8008782:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008784:	2904      	cmp	r1, #4
 8008786:	d005      	beq.n	8008794 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008788:	2310      	movs	r3, #16
 800878a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800878c:	2001      	movs	r0, #1
}
 800878e:	b003      	add	sp, #12
 8008790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008794:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8008796:	68eb      	ldr	r3, [r5, #12]
 8008798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800879c:	d1f4      	bne.n	8008788 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800879e:	f8cd 9000 	str.w	r9, [sp]
 80087a2:	4603      	mov	r3, r0
 80087a4:	2200      	movs	r2, #0
 80087a6:	2120      	movs	r1, #32
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7ff fe8f 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d1ed      	bne.n	800878e <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	682a      	ldr	r2, [r5, #0]
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	686a      	ldr	r2, [r5, #4]
 80087be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	692a      	ldr	r2, [r5, #16]
 80087c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80087ca:	6821      	ldr	r1, [r4, #0]
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 80087d2:	68aa      	ldr	r2, [r5, #8]
 80087d4:	68e8      	ldr	r0, [r5, #12]
 80087d6:	4302      	orrs	r2, r0
 80087d8:	4313      	orrs	r3, r2
 80087da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087de:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80087e0:	68e3      	ldr	r3, [r4, #12]
 80087e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087e6:	d007      	beq.n	80087f8 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80087ee:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 80087f2:	d013      	beq.n	800881c <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80087f4:	649f      	str	r7, [r3, #72]	; 0x48
 80087f6:	e001      	b.n	80087fc <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80087fc:	f8cd 9000 	str.w	r9, [sp]
 8008800:	4643      	mov	r3, r8
 8008802:	2201      	movs	r2, #1
 8008804:	2108      	movs	r1, #8
 8008806:	4620      	mov	r0, r4
 8008808:	f7ff fe60 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800880c:	2800      	cmp	r0, #0
 800880e:	d1be      	bne.n	800878e <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	2208      	movs	r2, #8
 8008814:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8008816:	2302      	movs	r3, #2
 8008818:	6523      	str	r3, [r4, #80]	; 0x50
 800881a:	e7b8      	b.n	800878e <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800881c:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 8008820:	e7ec      	b.n	80087fc <HAL_OSPI_AutoPolling+0x92>
	...

08008824 <HAL_OSPI_MemoryMapped>:
{
 8008824:	b530      	push	{r4, r5, lr}
 8008826:	b083      	sub	sp, #12
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800882c:	f7fe f8f4 	bl	8006a18 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8008830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008832:	2b04      	cmp	r3, #4
 8008834:	d004      	beq.n	8008840 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008836:	2310      	movs	r3, #16
 8008838:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800883a:	2001      	movs	r0, #1
}
 800883c:	b003      	add	sp, #12
 800883e:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	4603      	mov	r3, r0
 8008846:	2200      	movs	r2, #0
 8008848:	2120      	movs	r1, #32
 800884a:	4620      	mov	r0, r4
 800884c:	f7ff fe3e 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008850:	2800      	cmp	r0, #0
 8008852:	d1f3      	bne.n	800883c <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8008854:	2388      	movs	r3, #136	; 0x88
 8008856:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	2b08      	cmp	r3, #8
 800885c:	d009      	beq.n	8008872 <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <HAL_OSPI_MemoryMapped+0x68>)
 8008864:	400b      	ands	r3, r1
 8008866:	6829      	ldr	r1, [r5, #0]
 8008868:	430b      	orrs	r3, r1
 800886a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e7e4      	b.n	800883c <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	686a      	ldr	r2, [r5, #4]
 8008876:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	2210      	movs	r2, #16
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8008880:	6822      	ldr	r2, [r4, #0]
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e7e8      	b.n	800885e <HAL_OSPI_MemoryMapped+0x3a>
 800888c:	cffffff7 	.word	0xcffffff7

08008890 <HAL_OSPI_ErrorCallback>:
}
 8008890:	4770      	bx	lr

08008892 <HAL_OSPI_AbortCpltCallback>:
}
 8008892:	4770      	bx	lr

08008894 <OSPI_DMAAbortCplt>:
{
 8008894:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8008896:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800889c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800889e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a2:	d116      	bne.n	80088d2 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80088a4:	6803      	ldr	r3, [r0, #0]
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	f012 0f20 	tst.w	r2, #32
 80088ac:	d00c      	beq.n	80088c8 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80088ae:	2202      	movs	r2, #2
 80088b0:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80088b2:	6802      	ldr	r2, [r0, #0]
 80088b4:	6813      	ldr	r3, [r2, #0]
 80088b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ba:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80088bc:	6802      	ldr	r2, [r0, #0]
 80088be:	6813      	ldr	r3, [r2, #0]
 80088c0:	f043 0302 	orr.w	r3, r3, #2
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e008      	b.n	80088da <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 80088c8:	2302      	movs	r3, #2
 80088ca:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 80088cc:	f7ff ffe1 	bl	8008892 <HAL_OSPI_AbortCpltCallback>
 80088d0:	e003      	b.n	80088da <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 80088d2:	2302      	movs	r3, #2
 80088d4:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80088d6:	f7ff ffdb 	bl	8008890 <HAL_OSPI_ErrorCallback>
}
 80088da:	bd08      	pop	{r3, pc}

080088dc <HAL_OSPI_FifoThresholdCallback>:
}
 80088dc:	4770      	bx	lr

080088de <HAL_OSPI_CmdCpltCallback>:
}
 80088de:	4770      	bx	lr

080088e0 <HAL_OSPI_RxCpltCallback>:
}
 80088e0:	4770      	bx	lr

080088e2 <HAL_OSPI_TxCpltCallback>:
}
 80088e2:	4770      	bx	lr

080088e4 <HAL_OSPI_StatusMatchCallback>:
}
 80088e4:	4770      	bx	lr

080088e6 <HAL_OSPI_TimeOutCallback>:
}
 80088e6:	4770      	bx	lr

080088e8 <HAL_OSPI_IRQHandler>:
{
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80088ec:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 80088ee:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 80088f0:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 80088f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80088f4:	f013 0f04 	tst.w	r3, #4
 80088f8:	d027      	beq.n	800894a <HAL_OSPI_IRQHandler+0x62>
 80088fa:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 80088fe:	d024      	beq.n	800894a <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8008900:	2818      	cmp	r0, #24
 8008902:	d00c      	beq.n	800891e <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008904:	2828      	cmp	r0, #40	; 0x28
 8008906:	d015      	beq.n	8008934 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 8008908:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800890a:	b923      	cbnz	r3, 8008916 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008914:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff ffe0 	bl	80088dc <HAL_OSPI_FifoThresholdCallback>
}
 800891c:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800891e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 8008926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008928:	3301      	adds	r3, #1
 800892a:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800892c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800892e:	3b01      	subs	r3, #1
 8008930:	64a3      	str	r3, [r4, #72]	; 0x48
 8008932:	e7e9      	b.n	8008908 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8008934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008936:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800893a:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800893c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893e:	3301      	adds	r3, #1
 8008940:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 8008942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008944:	3b01      	subs	r3, #1
 8008946:	64a3      	str	r3, [r4, #72]	; 0x48
 8008948:	e7de      	b.n	8008908 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800894a:	f013 0f02 	tst.w	r3, #2
 800894e:	d044      	beq.n	80089da <HAL_OSPI_IRQHandler+0xf2>
 8008950:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8008954:	d041      	beq.n	80089da <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8008956:	2828      	cmp	r0, #40	; 0x28
 8008958:	d014      	beq.n	8008984 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800895a:	2102      	movs	r1, #2
 800895c:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	6813      	ldr	r3, [r2, #0]
 8008962:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008966:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8008968:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800896a:	2818      	cmp	r0, #24
 800896c:	d029      	beq.n	80089c2 <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800896e:	2808      	cmp	r0, #8
 8008970:	d02b      	beq.n	80089ca <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8008972:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008976:	d1d1      	bne.n	800891c <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8008978:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800897a:	bb53      	cbnz	r3, 80089d2 <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff88 	bl	8008892 <HAL_OSPI_AbortCpltCallback>
 8008982:	e7cb      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8008984:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008986:	b169      	cbz	r1, 80089a4 <HAL_OSPI_IRQHandler+0xbc>
 8008988:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800898c:	d00a      	beq.n	80089a4 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800898e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008990:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8008994:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8008996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008998:	3301      	adds	r3, #1
 800899a:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800899c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800899e:	3b01      	subs	r3, #1
 80089a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80089a2:	e7bb      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 80089a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1b8      	bne.n	800891c <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80089aa:	2102      	movs	r1, #2
 80089ac:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	6813      	ldr	r3, [r2, #0]
 80089b2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80089b6:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 80089b8:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7ff ff90 	bl	80088e0 <HAL_OSPI_RxCpltCallback>
 80089c0:	e7ac      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 80089c2:	4620      	mov	r0, r4
 80089c4:	f7ff ff8d 	bl	80088e2 <HAL_OSPI_TxCpltCallback>
 80089c8:	e7a8      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff ff87 	bl	80088de <HAL_OSPI_CmdCpltCallback>
 80089d0:	e7a4      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff ff5c 	bl	8008890 <HAL_OSPI_ErrorCallback>
 80089d8:	e7a0      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80089da:	f013 0f08 	tst.w	r3, #8
 80089de:	d013      	beq.n	8008a08 <HAL_OSPI_IRQHandler+0x120>
 80089e0:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80089e4:	d010      	beq.n	8008a08 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80089e6:	2308      	movs	r3, #8
 80089e8:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80089f2:	d005      	beq.n	8008a00 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80089fa:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80089fc:	2302      	movs	r3, #2
 80089fe:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff ff6f 	bl	80088e4 <HAL_OSPI_StatusMatchCallback>
 8008a06:	e789      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8008a08:	f013 0f01 	tst.w	r3, #1
 8008a0c:	d029      	beq.n	8008a62 <HAL_OSPI_IRQHandler+0x17a>
 8008a0e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8008a12:	d026      	beq.n	8008a62 <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8008a18:	6822      	ldr	r2, [r4, #0]
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a20:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8008a22:	2302      	movs	r3, #2
 8008a24:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	f012 0f04 	tst.w	r2, #4
 8008a2e:	d012      	beq.n	8008a56 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	f022 0204 	bic.w	r2, r2, #4
 8008a36:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8008a38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008a3a:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <HAL_OSPI_IRQHandler+0x198>)
 8008a3c:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8008a3e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008a40:	f7ff fc4c 	bl	80082dc <HAL_MDMA_Abort_IT>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43f af69 	beq.w	800891c <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7ff ff1e 	bl	8008890 <HAL_OSPI_ErrorCallback>
 8008a54:	e762      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8008a56:	2302      	movs	r3, #2
 8008a58:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7ff ff18 	bl	8008890 <HAL_OSPI_ErrorCallback>
 8008a60:	e75c      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8008a62:	f013 0f10 	tst.w	r3, #16
 8008a66:	f43f af59 	beq.w	800891c <HAL_OSPI_IRQHandler+0x34>
 8008a6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a6e:	f43f af55 	beq.w	800891c <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8008a72:	2310      	movs	r3, #16
 8008a74:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7ff ff35 	bl	80088e6 <HAL_OSPI_TimeOutCallback>
}
 8008a7c:	e74e      	b.n	800891c <HAL_OSPI_IRQHandler+0x34>
 8008a7e:	bf00      	nop
 8008a80:	08008895 	.word	0x08008895

08008a84 <HAL_OSPI_Abort>:
{
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	b083      	sub	sp, #12
 8008a88:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008a8a:	f7fd ffc5 	bl	8006a18 <HAL_GetTick>
  state = hospi->State;
 8008a8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8008a90:	f012 0f0c 	tst.w	r2, #12
 8008a94:	d036      	beq.n	8008b04 <HAL_OSPI_Abort+0x80>
 8008a96:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f012 0f04 	tst.w	r2, #4
 8008aa0:	d108      	bne.n	8008ab4 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8008aa2:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	6a1a      	ldr	r2, [r3, #32]
 8008aa8:	f012 0f20 	tst.w	r2, #32
 8008aac:	d10e      	bne.n	8008acc <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ab2:	e02a      	b.n	8008b0a <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8008abc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008abe:	f7ff fbcf 	bl	8008260 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0ee      	beq.n	8008aa4 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8008ac6:	2304      	movs	r3, #4
 8008ac8:	6563      	str	r3, [r4, #84]	; 0x54
 8008aca:	e7eb      	b.n	8008aa4 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	f042 0202 	orr.w	r2, r2, #2
 8008ad2:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8008ad4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462b      	mov	r3, r5
 8008ada:	2201      	movs	r2, #1
 8008adc:	2102      	movs	r1, #2
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff fcf4 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008ae4:	b988      	cbnz	r0, 8008b0a <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	462b      	mov	r3, r5
 8008af2:	2200      	movs	r2, #0
 8008af4:	2120      	movs	r1, #32
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fce8 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008afc:	b928      	cbnz	r0, 8008b0a <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 8008afe:	2302      	movs	r3, #2
 8008b00:	6523      	str	r3, [r4, #80]	; 0x50
 8008b02:	e002      	b.n	8008b0a <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8008b04:	2310      	movs	r3, #16
 8008b06:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8008b08:	2001      	movs	r0, #1
}
 8008b0a:	b003      	add	sp, #12
 8008b0c:	bd30      	pop	{r4, r5, pc}

08008b0e <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8008b0e:	6581      	str	r1, [r0, #88]	; 0x58
}
 8008b10:	2000      	movs	r0, #0
 8008b12:	4770      	bx	lr

08008b14 <HAL_OSPI_Init>:
{
 8008b14:	b530      	push	{r4, r5, lr}
 8008b16:	b083      	sub	sp, #12
 8008b18:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b1a:	f7fd ff7d 	bl	8006a18 <HAL_GetTick>
  if (hospi == NULL)
 8008b1e:	2c00      	cmp	r4, #0
 8008b20:	d077      	beq.n	8008c12 <HAL_OSPI_Init+0xfe>
 8008b22:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8008b28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008b2a:	b113      	cbz	r3, 8008b32 <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8008b2c:	2000      	movs	r0, #0
}
 8008b2e:	b003      	add	sp, #12
 8008b30:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7f9 fe20 	bl	8002778 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8008b38:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7ff ffe6 	bl	8008b0e <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	6882      	ldr	r2, [r0, #8]
 8008b46:	4b34      	ldr	r3, [pc, #208]	; (8008c18 <HAL_OSPI_Init+0x104>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	68e2      	ldr	r2, [r4, #12]
 8008b4c:	6921      	ldr	r1, [r4, #16]
 8008b4e:	3901      	subs	r1, #1
 8008b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008b54:	6961      	ldr	r1, [r4, #20]
 8008b56:	3901      	subs	r1, #1
 8008b58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	69e1      	ldr	r1, [r4, #28]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	68d3      	ldr	r3, [r2, #12]
 8008b6c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	430b      	orrs	r3, r1
 8008b74:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008b76:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8008b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b80:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008b86:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8008b88:	6821      	ldr	r1, [r4, #0]
 8008b8a:	680b      	ldr	r3, [r1, #0]
 8008b8c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008b90:	6862      	ldr	r2, [r4, #4]
 8008b92:	3a01      	subs	r2, #1
 8008b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b98:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8008b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	462b      	mov	r3, r5
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2120      	movs	r1, #32
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f7ff fc91 	bl	80084cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d1bf      	bne.n	8008b2e <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	68cb      	ldr	r3, [r1, #12]
 8008bb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	6813      	ldr	r3, [r2, #0]
 8008bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc6:	68a1      	ldr	r1, [r4, #8]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8008bcc:	6821      	ldr	r1, [r4, #0]
 8008bce:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 8008bd2:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8008bd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008bd8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008bda:	432a      	orrs	r2, r5
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	6813      	ldr	r3, [r2, #0]
 8008be6:	f043 0301 	orr.w	r3, r3, #1
 8008bea:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8008bec:	69a3      	ldr	r3, [r4, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d006      	beq.n	8008c00 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bf8:	d008      	beq.n	8008c0c <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	6523      	str	r3, [r4, #80]	; 0x50
 8008bfe:	e796      	b.n	8008b2e <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	6893      	ldr	r3, [r2, #8]
 8008c04:	f043 0302 	orr.w	r3, r3, #2
 8008c08:	6093      	str	r3, [r2, #8]
 8008c0a:	e7f2      	b.n	8008bf2 <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	6523      	str	r3, [r4, #80]	; 0x50
 8008c10:	e78d      	b.n	8008b2e <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8008c12:	2001      	movs	r0, #1
 8008c14:	e78b      	b.n	8008b2e <HAL_OSPI_Init+0x1a>
 8008c16:	bf00      	nop
 8008c18:	f8e0f8f4 	.word	0xf8e0f8f4

08008c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c20:	4b22      	ldr	r3, [pc, #136]	; (8008cac <HAL_PWREx_ConfigSupply+0x90>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d007      	beq.n	8008c3c <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c2c:	4b1f      	ldr	r3, [pc, #124]	; (8008cac <HAL_PWREx_ConfigSupply+0x90>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c34:	4283      	cmp	r3, r0
 8008c36:	d036      	beq.n	8008ca6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c38:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c3c:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <HAL_PWREx_ConfigSupply+0x90>)
 8008c3e:	68d3      	ldr	r3, [r2, #12]
 8008c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008c44:	4303      	orrs	r3, r0
 8008c46:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8008c48:	f7fd fee6 	bl	8006a18 <HAL_GetTick>
 8008c4c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c4e:	4b17      	ldr	r3, [pc, #92]	; (8008cac <HAL_PWREx_ConfigSupply+0x90>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008c56:	d107      	bne.n	8008c68 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c58:	f7fd fede 	bl	8006a18 <HAL_GetTick>
 8008c5c:	1b43      	subs	r3, r0, r5
 8008c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c62:	d9f4      	bls.n	8008c4e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8008c64:	2001      	movs	r0, #1
 8008c66:	e7e8      	b.n	8008c3a <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008c68:	2c2e      	cmp	r4, #46	; 0x2e
 8008c6a:	bf18      	it	ne
 8008c6c:	2c1e      	cmpne	r4, #30
 8008c6e:	d008      	beq.n	8008c82 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8008c70:	2c2d      	cmp	r4, #45	; 0x2d
 8008c72:	bf14      	ite	ne
 8008c74:	2300      	movne	r3, #0
 8008c76:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c78:	2c1d      	cmp	r4, #29
 8008c7a:	d002      	beq.n	8008c82 <HAL_PWREx_ConfigSupply+0x66>
 8008c7c:	b90b      	cbnz	r3, 8008c82 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e7db      	b.n	8008c3a <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8008c82:	f7fd fec9 	bl	8006a18 <HAL_GetTick>
 8008c86:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <HAL_PWREx_ConfigSupply+0x90>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008c90:	d107      	bne.n	8008ca2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c92:	f7fd fec1 	bl	8006a18 <HAL_GetTick>
 8008c96:	1b00      	subs	r0, r0, r4
 8008c98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008c9c:	d9f4      	bls.n	8008c88 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7cb      	b.n	8008c3a <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e7c9      	b.n	8008c3a <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e7c7      	b.n	8008c3a <HAL_PWREx_ConfigSupply+0x1e>
 8008caa:	bf00      	nop
 8008cac:	58024800 	.word	0x58024800

08008cb0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f000 82f0 	beq.w	8009296 <HAL_RCC_OscConfig+0x5e6>
{
 8008cb6:	b538      	push	{r3, r4, r5, lr}
 8008cb8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cba:	6803      	ldr	r3, [r0, #0]
 8008cbc:	f013 0f01 	tst.w	r3, #1
 8008cc0:	d029      	beq.n	8008d16 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc2:	4aa1      	ldr	r2, [pc, #644]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008cc4:	6913      	ldr	r3, [r2, #16]
 8008cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cca:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d019      	beq.n	8008d04 <HAL_RCC_OscConfig+0x54>
 8008cd0:	2b18      	cmp	r3, #24
 8008cd2:	d013      	beq.n	8008cfc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cda:	d043      	beq.n	8008d64 <HAL_RCC_OscConfig+0xb4>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d158      	bne.n	8008d92 <HAL_RCC_OscConfig+0xe2>
 8008ce0:	4b99      	ldr	r3, [pc, #612]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	e038      	b.n	8008d6e <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cfc:	f002 0203 	and.w	r2, r2, #3
 8008d00:	2a02      	cmp	r2, #2
 8008d02:	d1e7      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d04:	4b90      	ldr	r3, [pc, #576]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d0c:	d003      	beq.n	8008d16 <HAL_RCC_OscConfig+0x66>
 8008d0e:	6863      	ldr	r3, [r4, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 82c2 	beq.w	800929a <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f013 0f02 	tst.w	r3, #2
 8008d1c:	f000 80a2 	beq.w	8008e64 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d20:	4a89      	ldr	r2, [pc, #548]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d22:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d24:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d26:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008d2a:	d074      	beq.n	8008e16 <HAL_RCC_OscConfig+0x166>
 8008d2c:	2b18      	cmp	r3, #24
 8008d2e:	d06f      	beq.n	8008e10 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d30:	68e3      	ldr	r3, [r4, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80c3 	beq.w	8008ebe <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d38:	4983      	ldr	r1, [pc, #524]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d3a:	680a      	ldr	r2, [r1, #0]
 8008d3c:	f022 0219 	bic.w	r2, r2, #25
 8008d40:	4313      	orrs	r3, r2
 8008d42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fd fe68 	bl	8006a18 <HAL_GetTick>
 8008d48:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d4a:	4b7f      	ldr	r3, [pc, #508]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f013 0f04 	tst.w	r3, #4
 8008d52:	f040 80ab 	bne.w	8008eac <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d56:	f7fd fe5f 	bl	8006a18 <HAL_GetTick>
 8008d5a:	1b40      	subs	r0, r0, r5
 8008d5c:	2802      	cmp	r0, #2
 8008d5e:	d9f4      	bls.n	8008d4a <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8008d60:	2003      	movs	r0, #3
 8008d62:	e2a1      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d64:	4a78      	ldr	r2, [pc, #480]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d6e:	6863      	ldr	r3, [r4, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d03e      	beq.n	8008df2 <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8008d74:	f7fd fe50 	bl	8006a18 <HAL_GetTick>
 8008d78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d7a:	4b73      	ldr	r3, [pc, #460]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d82:	d1c8      	bne.n	8008d16 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d84:	f7fd fe48 	bl	8006a18 <HAL_GetTick>
 8008d88:	1b40      	subs	r0, r0, r5
 8008d8a:	2864      	cmp	r0, #100	; 0x64
 8008d8c:	d9f5      	bls.n	8008d7a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8008d8e:	2003      	movs	r0, #3
 8008d90:	e28a      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d96:	d010      	beq.n	8008dba <HAL_RCC_OscConfig+0x10a>
 8008d98:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008d9c:	d01b      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x126>
 8008d9e:	4b6a      	ldr	r3, [pc, #424]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e7d9      	b.n	8008d6e <HAL_RCC_OscConfig+0xbe>
 8008dba:	4b63      	ldr	r3, [pc, #396]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e7cb      	b.n	8008d6e <HAL_RCC_OscConfig+0xbe>
 8008dd6:	4b5c      	ldr	r3, [pc, #368]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e7bd      	b.n	8008d6e <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8008df2:	f7fd fe11 	bl	8006a18 <HAL_GetTick>
 8008df6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008df8:	4b53      	ldr	r3, [pc, #332]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008e00:	d089      	beq.n	8008d16 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e02:	f7fd fe09 	bl	8006a18 <HAL_GetTick>
 8008e06:	1b40      	subs	r0, r0, r5
 8008e08:	2864      	cmp	r0, #100	; 0x64
 8008e0a:	d9f5      	bls.n	8008df8 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8008e0c:	2003      	movs	r0, #3
 8008e0e:	e24b      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e10:	f012 0f03 	tst.w	r2, #3
 8008e14:	d18c      	bne.n	8008d30 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e16:	4b4c      	ldr	r3, [pc, #304]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f013 0f04 	tst.w	r3, #4
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCC_OscConfig+0x178>
 8008e20:	68e3      	ldr	r3, [r4, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 823b 	beq.w	800929e <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e28:	4a47      	ldr	r2, [pc, #284]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e2a:	6813      	ldr	r3, [r2, #0]
 8008e2c:	f023 0319 	bic.w	r3, r3, #25
 8008e30:	68e1      	ldr	r1, [r4, #12]
 8008e32:	430b      	orrs	r3, r1
 8008e34:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8008e36:	f7fd fdef 	bl	8006a18 <HAL_GetTick>
 8008e3a:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3c:	4b42      	ldr	r3, [pc, #264]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f013 0f04 	tst.w	r3, #4
 8008e44:	d106      	bne.n	8008e54 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e46:	f7fd fde7 	bl	8006a18 <HAL_GetTick>
 8008e4a:	1b40      	subs	r0, r0, r5
 8008e4c:	2802      	cmp	r0, #2
 8008e4e:	d9f5      	bls.n	8008e3c <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8008e50:	2003      	movs	r0, #3
 8008e52:	e229      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e54:	4a3c      	ldr	r2, [pc, #240]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e56:	6853      	ldr	r3, [r2, #4]
 8008e58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008e62:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	f013 0f10 	tst.w	r3, #16
 8008e6a:	d051      	beq.n	8008f10 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e6c:	4a36      	ldr	r2, [pc, #216]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e6e:	6913      	ldr	r3, [r2, #16]
 8008e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e74:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d039      	beq.n	8008eee <HAL_RCC_OscConfig+0x23e>
 8008e7a:	2b18      	cmp	r3, #24
 8008e7c:	d033      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008e7e:	69e3      	ldr	r3, [r4, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d06c      	beq.n	8008f5e <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e84:	4a30      	ldr	r2, [pc, #192]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8e:	f7fd fdc3 	bl	8006a18 <HAL_GetTick>
 8008e92:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e94:	4b2c      	ldr	r3, [pc, #176]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e9c:	d156      	bne.n	8008f4c <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008e9e:	f7fd fdbb 	bl	8006a18 <HAL_GetTick>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	2802      	cmp	r0, #2
 8008ea6:	d9f5      	bls.n	8008e94 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 8008ea8:	2003      	movs	r0, #3
 8008eaa:	e1fd      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eac:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008eae:	6853      	ldr	r3, [r2, #4]
 8008eb0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008eb4:	6921      	ldr	r1, [r4, #16]
 8008eb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008eba:	6053      	str	r3, [r2, #4]
 8008ebc:	e7d2      	b.n	8008e64 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8008ebe:	4a22      	ldr	r2, [pc, #136]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008ec0:	6813      	ldr	r3, [r2, #0]
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008ec8:	f7fd fda6 	bl	8006a18 <HAL_GetTick>
 8008ecc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ece:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f013 0f04 	tst.w	r3, #4
 8008ed6:	d0c5      	beq.n	8008e64 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ed8:	f7fd fd9e 	bl	8006a18 <HAL_GetTick>
 8008edc:	1b40      	subs	r0, r0, r5
 8008ede:	2802      	cmp	r0, #2
 8008ee0:	d9f5      	bls.n	8008ece <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8008ee2:	2003      	movs	r0, #3
 8008ee4:	e1e0      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ee6:	f002 0203 	and.w	r2, r2, #3
 8008eea:	2a01      	cmp	r2, #1
 8008eec:	d1c7      	bne.n	8008e7e <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eee:	4b16      	ldr	r3, [pc, #88]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008ef6:	d003      	beq.n	8008f00 <HAL_RCC_OscConfig+0x250>
 8008ef8:	69e3      	ldr	r3, [r4, #28]
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	f040 81d1 	bne.w	80092a2 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f00:	4a11      	ldr	r2, [pc, #68]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008f02:	68d3      	ldr	r3, [r2, #12]
 8008f04:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008f08:	6a21      	ldr	r1, [r4, #32]
 8008f0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008f0e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	f013 0f08 	tst.w	r3, #8
 8008f16:	d04a      	beq.n	8008fae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f18:	6963      	ldr	r3, [r4, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d033      	beq.n	8008f86 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008f20:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008f22:	f043 0301 	orr.w	r3, r3, #1
 8008f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f28:	f7fd fd76 	bl	8006a18 <HAL_GetTick>
 8008f2c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f2e:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <HAL_RCC_OscConfig+0x298>)
 8008f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f32:	f013 0f02 	tst.w	r3, #2
 8008f36:	d13a      	bne.n	8008fae <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f38:	f7fd fd6e 	bl	8006a18 <HAL_GetTick>
 8008f3c:	1b40      	subs	r0, r0, r5
 8008f3e:	2802      	cmp	r0, #2
 8008f40:	d9f5      	bls.n	8008f2e <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8008f42:	2003      	movs	r0, #3
 8008f44:	e1b0      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f4c:	4a8c      	ldr	r2, [pc, #560]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f4e:	68d3      	ldr	r3, [r2, #12]
 8008f50:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008f54:	6a21      	ldr	r1, [r4, #32]
 8008f56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008f5a:	60d3      	str	r3, [r2, #12]
 8008f5c:	e7d8      	b.n	8008f10 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8008f5e:	4a88      	ldr	r2, [pc, #544]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f60:	6813      	ldr	r3, [r2, #0]
 8008f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008f68:	f7fd fd56 	bl	8006a18 <HAL_GetTick>
 8008f6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f6e:	4b84      	ldr	r3, [pc, #528]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f76:	d0cb      	beq.n	8008f10 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f78:	f7fd fd4e 	bl	8006a18 <HAL_GetTick>
 8008f7c:	1b40      	subs	r0, r0, r5
 8008f7e:	2802      	cmp	r0, #2
 8008f80:	d9f5      	bls.n	8008f6e <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8008f82:	2003      	movs	r0, #3
 8008f84:	e190      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f86:	4a7e      	ldr	r2, [pc, #504]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f88:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008f8a:	f023 0301 	bic.w	r3, r3, #1
 8008f8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f90:	f7fd fd42 	bl	8006a18 <HAL_GetTick>
 8008f94:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f96:	4b7a      	ldr	r3, [pc, #488]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f9a:	f013 0f02 	tst.w	r3, #2
 8008f9e:	d006      	beq.n	8008fae <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fa0:	f7fd fd3a 	bl	8006a18 <HAL_GetTick>
 8008fa4:	1b40      	subs	r0, r0, r5
 8008fa6:	2802      	cmp	r0, #2
 8008fa8:	d9f5      	bls.n	8008f96 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 8008faa:	2003      	movs	r0, #3
 8008fac:	e17c      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	f013 0f20 	tst.w	r3, #32
 8008fb4:	d029      	beq.n	800900a <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008fb6:	69a3      	ldr	r3, [r4, #24]
 8008fb8:	b19b      	cbz	r3, 8008fe2 <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fba:	4a71      	ldr	r2, [pc, #452]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fc4:	f7fd fd28 	bl	8006a18 <HAL_GetTick>
 8008fc8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fca:	4b6d      	ldr	r3, [pc, #436]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008fd2:	d11a      	bne.n	800900a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008fd4:	f7fd fd20 	bl	8006a18 <HAL_GetTick>
 8008fd8:	1b40      	subs	r0, r0, r5
 8008fda:	2802      	cmp	r0, #2
 8008fdc:	d9f5      	bls.n	8008fca <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 8008fde:	2003      	movs	r0, #3
 8008fe0:	e162      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fe2:	4a67      	ldr	r2, [pc, #412]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008fe4:	6813      	ldr	r3, [r2, #0]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fec:	f7fd fd14 	bl	8006a18 <HAL_GetTick>
 8008ff0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ff2:	4b63      	ldr	r3, [pc, #396]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008ffa:	d006      	beq.n	800900a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ffc:	f7fd fd0c 	bl	8006a18 <HAL_GetTick>
 8009000:	1b40      	subs	r0, r0, r5
 8009002:	2802      	cmp	r0, #2
 8009004:	d9f5      	bls.n	8008ff2 <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 8009006:	2003      	movs	r0, #3
 8009008:	e14e      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	f013 0f04 	tst.w	r3, #4
 8009010:	d122      	bne.n	8009058 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8146 	beq.w	80092a6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800901a:	4a59      	ldr	r2, [pc, #356]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 800901c:	6912      	ldr	r2, [r2, #16]
 800901e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009022:	2a18      	cmp	r2, #24
 8009024:	f000 810e 	beq.w	8009244 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009028:	2b02      	cmp	r3, #2
 800902a:	f000 8094 	beq.w	8009156 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800902e:	4a54      	ldr	r2, [pc, #336]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8009030:	6813      	ldr	r3, [r2, #0]
 8009032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009038:	f7fd fcee 	bl	8006a18 <HAL_GetTick>
 800903c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800903e:	4b50      	ldr	r3, [pc, #320]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009046:	f000 80fb 	beq.w	8009240 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800904a:	f7fd fce5 	bl	8006a18 <HAL_GetTick>
 800904e:	1b00      	subs	r0, r0, r4
 8009050:	2802      	cmp	r0, #2
 8009052:	d9f4      	bls.n	800903e <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 8009054:	2003      	movs	r0, #3
 8009056:	e127      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 8009058:	4a4a      	ldr	r2, [pc, #296]	; (8009184 <HAL_RCC_OscConfig+0x4d4>)
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009060:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009062:	f7fd fcd9 	bl	8006a18 <HAL_GetTick>
 8009066:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009068:	4b46      	ldr	r3, [pc, #280]	; (8009184 <HAL_RCC_OscConfig+0x4d4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009070:	d106      	bne.n	8009080 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009072:	f7fd fcd1 	bl	8006a18 <HAL_GetTick>
 8009076:	1b40      	subs	r0, r0, r5
 8009078:	2864      	cmp	r0, #100	; 0x64
 800907a:	d9f5      	bls.n	8009068 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800907c:	2003      	movs	r0, #3
 800907e:	e113      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d00e      	beq.n	80090a4 <HAL_RCC_OscConfig+0x3f4>
 8009086:	bb33      	cbnz	r3, 80090d6 <HAL_RCC_OscConfig+0x426>
 8009088:	4b3d      	ldr	r3, [pc, #244]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 800908a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800908c:	f022 0201 	bic.w	r2, r2, #1
 8009090:	671a      	str	r2, [r3, #112]	; 0x70
 8009092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009098:	671a      	str	r2, [r3, #112]	; 0x70
 800909a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800909c:	f022 0204 	bic.w	r2, r2, #4
 80090a0:	671a      	str	r2, [r3, #112]	; 0x70
 80090a2:	e004      	b.n	80090ae <HAL_RCC_OscConfig+0x3fe>
 80090a4:	4a36      	ldr	r2, [pc, #216]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 80090a6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d03e      	beq.n	8009132 <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 80090b4:	f7fd fcb0 	bl	8006a18 <HAL_GetTick>
 80090b8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ba:	4b31      	ldr	r3, [pc, #196]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	f013 0f02 	tst.w	r3, #2
 80090c2:	d1a6      	bne.n	8009012 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090c4:	f7fd fca8 	bl	8006a18 <HAL_GetTick>
 80090c8:	1b40      	subs	r0, r0, r5
 80090ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80090ce:	4298      	cmp	r0, r3
 80090d0:	d9f3      	bls.n	80090ba <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80090d2:	2003      	movs	r0, #3
 80090d4:	e0e8      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d00f      	beq.n	80090fa <HAL_RCC_OscConfig+0x44a>
 80090da:	2b85      	cmp	r3, #133	; 0x85
 80090dc:	d01b      	beq.n	8009116 <HAL_RCC_OscConfig+0x466>
 80090de:	4b28      	ldr	r3, [pc, #160]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 80090e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090e2:	f022 0201 	bic.w	r2, r2, #1
 80090e6:	671a      	str	r2, [r3, #112]	; 0x70
 80090e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090ea:	f022 0204 	bic.w	r2, r2, #4
 80090ee:	671a      	str	r2, [r3, #112]	; 0x70
 80090f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f6:	671a      	str	r2, [r3, #112]	; 0x70
 80090f8:	e7d9      	b.n	80090ae <HAL_RCC_OscConfig+0x3fe>
 80090fa:	4b21      	ldr	r3, [pc, #132]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 80090fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090fe:	f042 0204 	orr.w	r2, r2, #4
 8009102:	671a      	str	r2, [r3, #112]	; 0x70
 8009104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800910a:	671a      	str	r2, [r3, #112]	; 0x70
 800910c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800910e:	f042 0201 	orr.w	r2, r2, #1
 8009112:	671a      	str	r2, [r3, #112]	; 0x70
 8009114:	e7cb      	b.n	80090ae <HAL_RCC_OscConfig+0x3fe>
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8009118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800911a:	f042 0204 	orr.w	r2, r2, #4
 800911e:	671a      	str	r2, [r3, #112]	; 0x70
 8009120:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009126:	671a      	str	r2, [r3, #112]	; 0x70
 8009128:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	671a      	str	r2, [r3, #112]	; 0x70
 8009130:	e7bd      	b.n	80090ae <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8009132:	f7fd fc71 	bl	8006a18 <HAL_GetTick>
 8009136:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 800913a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913c:	f013 0f02 	tst.w	r3, #2
 8009140:	f43f af67 	beq.w	8009012 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009144:	f7fd fc68 	bl	8006a18 <HAL_GetTick>
 8009148:	1b40      	subs	r0, r0, r5
 800914a:	f241 3388 	movw	r3, #5000	; 0x1388
 800914e:	4298      	cmp	r0, r3
 8009150:	d9f2      	bls.n	8009138 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8009152:	2003      	movs	r0, #3
 8009154:	e0a8      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 8009156:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8009158:	6813      	ldr	r3, [r2, #0]
 800915a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800915e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009160:	f7fd fc5a 	bl	8006a18 <HAL_GetTick>
 8009164:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <HAL_RCC_OscConfig+0x4d0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800916e:	d00b      	beq.n	8009188 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009170:	f7fd fc52 	bl	8006a18 <HAL_GetTick>
 8009174:	1b40      	subs	r0, r0, r5
 8009176:	2802      	cmp	r0, #2
 8009178:	d9f5      	bls.n	8009166 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800917a:	2003      	movs	r0, #3
 800917c:	e094      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009188:	4b4f      	ldr	r3, [pc, #316]	; (80092c8 <HAL_RCC_OscConfig+0x618>)
 800918a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800918c:	4a4f      	ldr	r2, [pc, #316]	; (80092cc <HAL_RCC_OscConfig+0x61c>)
 800918e:	400a      	ands	r2, r1
 8009190:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009192:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009194:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8009198:	430a      	orrs	r2, r1
 800919a:	629a      	str	r2, [r3, #40]	; 0x28
 800919c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800919e:	3a01      	subs	r2, #1
 80091a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a6:	3901      	subs	r1, #1
 80091a8:	0249      	lsls	r1, r1, #9
 80091aa:	b289      	uxth	r1, r1
 80091ac:	430a      	orrs	r2, r1
 80091ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091b0:	3901      	subs	r1, #1
 80091b2:	0409      	lsls	r1, r1, #16
 80091b4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80091b8:	430a      	orrs	r2, r1
 80091ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091bc:	3901      	subs	r1, #1
 80091be:	0609      	lsls	r1, r1, #24
 80091c0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80091c4:	430a      	orrs	r2, r1
 80091c6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	f022 0201 	bic.w	r2, r2, #1
 80091ce:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091d2:	4a3f      	ldr	r2, [pc, #252]	; (80092d0 <HAL_RCC_OscConfig+0x620>)
 80091d4:	400a      	ands	r2, r1
 80091d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091d8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80091dc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e0:	f022 020c 	bic.w	r2, r2, #12
 80091e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091e6:	430a      	orrs	r2, r1
 80091e8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ec:	f022 0202 	bic.w	r2, r2, #2
 80091f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80091f2:	430a      	orrs	r2, r1
 80091f4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009200:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009204:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	f042 0201 	orr.w	r2, r2, #1
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800921c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800921e:	f7fd fbfb 	bl	8006a18 <HAL_GetTick>
 8009222:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <HAL_RCC_OscConfig+0x618>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800922c:	d106      	bne.n	800923c <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800922e:	f7fd fbf3 	bl	8006a18 <HAL_GetTick>
 8009232:	1b00      	subs	r0, r0, r4
 8009234:	2802      	cmp	r0, #2
 8009236:	d9f5      	bls.n	8009224 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8009238:	2003      	movs	r0, #3
 800923a:	e035      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800923c:	2000      	movs	r0, #0
 800923e:	e033      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 8009240:	2000      	movs	r0, #0
 8009242:	e031      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009244:	4920      	ldr	r1, [pc, #128]	; (80092c8 <HAL_RCC_OscConfig+0x618>)
 8009246:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009248:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800924a:	2b01      	cmp	r3, #1
 800924c:	d02d      	beq.n	80092aa <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800924e:	f002 0303 	and.w	r3, r2, #3
 8009252:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009254:	428b      	cmp	r3, r1
 8009256:	d12a      	bne.n	80092ae <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009258:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800925c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800925e:	429a      	cmp	r2, r3
 8009260:	d127      	bne.n	80092b2 <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009262:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8009266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009268:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800926a:	429a      	cmp	r2, r3
 800926c:	d123      	bne.n	80092b6 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800926e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8009272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009274:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009276:	429a      	cmp	r2, r3
 8009278:	d11f      	bne.n	80092ba <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800927a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800927e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009280:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009282:	429a      	cmp	r2, r3
 8009284:	d11b      	bne.n	80092be <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009286:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800928a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800928c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800928e:	4298      	cmp	r0, r3
 8009290:	d117      	bne.n	80092c2 <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 8009292:	2000      	movs	r0, #0
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 8009296:	2001      	movs	r0, #1
}
 8009298:	4770      	bx	lr
        return HAL_ERROR;
 800929a:	2001      	movs	r0, #1
 800929c:	e004      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800929e:	2001      	movs	r0, #1
 80092a0:	e002      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 80092a2:	2001      	movs	r0, #1
 80092a4:	e000      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 80092a6:	2000      	movs	r0, #0
}
 80092a8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80092aa:	2001      	movs	r0, #1
 80092ac:	e7fc      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7fa      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7f8      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092b6:	2001      	movs	r0, #1
 80092b8:	e7f6      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092ba:	2001      	movs	r0, #1
 80092bc:	e7f4      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092be:	2001      	movs	r0, #1
 80092c0:	e7f2      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092c2:	2001      	movs	r0, #1
 80092c4:	e7f0      	b.n	80092a8 <HAL_RCC_OscConfig+0x5f8>
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	fffffc0c 	.word	0xfffffc0c
 80092d0:	ffff0007 	.word	0xffff0007

080092d4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d4:	4b74      	ldr	r3, [pc, #464]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092dc:	2b10      	cmp	r3, #16
 80092de:	f000 80de 	beq.w	800949e <HAL_RCC_GetSysClockFreq+0x1ca>
 80092e2:	2b18      	cmp	r3, #24
 80092e4:	d010      	beq.n	8009308 <HAL_RCC_GetSysClockFreq+0x34>
 80092e6:	b10b      	cbz	r3, 80092ec <HAL_RCC_GetSysClockFreq+0x18>
 80092e8:	4870      	ldr	r0, [pc, #448]	; (80094ac <HAL_RCC_GetSysClockFreq+0x1d8>)
 80092ea:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ec:	4b6e      	ldr	r3, [pc, #440]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f013 0f20 	tst.w	r3, #32
 80092f4:	f000 80d5 	beq.w	80094a2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092f8:	4b6b      	ldr	r3, [pc, #428]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8009300:	4b6b      	ldr	r3, [pc, #428]	; (80094b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8009302:	fa23 f000 	lsr.w	r0, r3, r0
 8009306:	4770      	bx	lr
{
 8009308:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800930a:	4a67      	ldr	r2, [pc, #412]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800930c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800930e:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009312:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8009314:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800931a:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800931e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009320:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8009324:	fb0c f303 	mul.w	r3, ip, r3
 8009328:	ee07 3a90 	vmov	s15, r3
 800932c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8009330:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8009334:	f000 8093 	beq.w	800945e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8009338:	2901      	cmp	r1, #1
 800933a:	d065      	beq.n	8009408 <HAL_RCC_GetSysClockFreq+0x134>
 800933c:	2902      	cmp	r1, #2
 800933e:	f000 8091 	beq.w	8009464 <HAL_RCC_GetSysClockFreq+0x190>
 8009342:	b1e1      	cbz	r1, 800937e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009344:	ee07 0a10 	vmov	s14, r0
 8009348:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800934c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80094b4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8009350:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009354:	4b54      	ldr	r3, [pc, #336]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	ee06 3a90 	vmov	s13, r3
 8009360:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009364:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80094b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009368:	ee67 7a86 	vmul.f32	s15, s15, s12
 800936c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009378:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800937c:	e060      	b.n	8009440 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	f013 0f20 	tst.w	r3, #32
 8009384:	d023      	beq.n	80093ce <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009386:	4611      	mov	r1, r2
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800938e:	4b48      	ldr	r3, [pc, #288]	; (80094b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8009390:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009392:	ee07 3a10 	vmov	s14, r3
 8009396:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800939a:	ee07 0a10 	vmov	s14, r0
 800939e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80093a2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80093a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80093a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ac:	ee06 3a90 	vmov	s13, r3
 80093b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80093b4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80094b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80093b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80093bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093cc:	e038      	b.n	8009440 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093ce:	ee07 0a10 	vmov	s14, r0
 80093d2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80093d6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80094bc <HAL_RCC_GetSysClockFreq+0x1e8>
 80093da:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80093de:	4b32      	ldr	r3, [pc, #200]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee06 3a90 	vmov	s13, r3
 80093ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80093ee:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80094b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80093f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009406:	e01b      	b.n	8009440 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009408:	ee07 0a10 	vmov	s14, r0
 800940c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8009410:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80094b4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8009414:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009418:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800941a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009420:	ee06 3a90 	vmov	s13, r3
 8009424:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009428:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80094b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800942c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943c:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009440:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009448:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009452:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009456:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800945a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800945e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009462:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009464:	ee07 0a10 	vmov	s14, r0
 8009468:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800946c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80094c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009470:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009474:	4b0c      	ldr	r3, [pc, #48]	; (80094a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	ee06 3a90 	vmov	s13, r3
 8009480:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009484:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80094b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009488:	ee67 7a86 	vmul.f32	s15, s15, s12
 800948c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009498:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800949c:	e7d0      	b.n	8009440 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800949e:	4809      	ldr	r0, [pc, #36]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094a0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094a2:	4803      	ldr	r0, [pc, #12]	; (80094b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	58024400 	.word	0x58024400
 80094ac:	003d0900 	.word	0x003d0900
 80094b0:	03d09000 	.word	0x03d09000
 80094b4:	4a742400 	.word	0x4a742400
 80094b8:	39000000 	.word	0x39000000
 80094bc:	4c742400 	.word	0x4c742400
 80094c0:	4bb71b00 	.word	0x4bb71b00
 80094c4:	016e3600 	.word	0x016e3600

080094c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f000 8132 	beq.w	8009732 <HAL_RCC_ClockConfig+0x26a>
{
 80094ce:	b570      	push	{r4, r5, r6, lr}
 80094d0:	460d      	mov	r5, r1
 80094d2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094d4:	4b9b      	ldr	r3, [pc, #620]	; (8009744 <HAL_RCC_ClockConfig+0x27c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 030f 	and.w	r3, r3, #15
 80094dc:	428b      	cmp	r3, r1
 80094de:	d20b      	bcs.n	80094f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094e0:	4a98      	ldr	r2, [pc, #608]	; (8009744 <HAL_RCC_ClockConfig+0x27c>)
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	f023 030f 	bic.w	r3, r3, #15
 80094e8:	430b      	orrs	r3, r1
 80094ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ec:	6813      	ldr	r3, [r2, #0]
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	428b      	cmp	r3, r1
 80094f4:	f040 811f 	bne.w	8009736 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	f013 0f04 	tst.w	r3, #4
 80094fe:	d00c      	beq.n	800951a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009500:	6922      	ldr	r2, [r4, #16]
 8009502:	4b91      	ldr	r3, [pc, #580]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800950a:	429a      	cmp	r2, r3
 800950c:	d905      	bls.n	800951a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800950e:	498e      	ldr	r1, [pc, #568]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009510:	698b      	ldr	r3, [r1, #24]
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	431a      	orrs	r2, r3
 8009518:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	f013 0f08 	tst.w	r3, #8
 8009520:	d00c      	beq.n	800953c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009522:	6962      	ldr	r2, [r4, #20]
 8009524:	4b88      	ldr	r3, [pc, #544]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800952c:	429a      	cmp	r2, r3
 800952e:	d905      	bls.n	800953c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009530:	4985      	ldr	r1, [pc, #532]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009532:	69cb      	ldr	r3, [r1, #28]
 8009534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009538:	431a      	orrs	r2, r3
 800953a:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	f013 0f10 	tst.w	r3, #16
 8009542:	d00c      	beq.n	800955e <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009544:	69a2      	ldr	r2, [r4, #24]
 8009546:	4b80      	ldr	r3, [pc, #512]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800954e:	429a      	cmp	r2, r3
 8009550:	d905      	bls.n	800955e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009552:	497d      	ldr	r1, [pc, #500]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009554:	69cb      	ldr	r3, [r1, #28]
 8009556:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800955a:	431a      	orrs	r2, r3
 800955c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	f013 0f20 	tst.w	r3, #32
 8009564:	d00c      	beq.n	8009580 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009566:	69e2      	ldr	r2, [r4, #28]
 8009568:	4b77      	ldr	r3, [pc, #476]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009570:	429a      	cmp	r2, r3
 8009572:	d905      	bls.n	8009580 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009574:	4974      	ldr	r1, [pc, #464]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009576:	6a0b      	ldr	r3, [r1, #32]
 8009578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957c:	431a      	orrs	r2, r3
 800957e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	f013 0f02 	tst.w	r3, #2
 8009586:	d00c      	beq.n	80095a2 <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009588:	68e2      	ldr	r2, [r4, #12]
 800958a:	4b6f      	ldr	r3, [pc, #444]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	429a      	cmp	r2, r3
 8009594:	d905      	bls.n	80095a2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009596:	496c      	ldr	r1, [pc, #432]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009598:	698b      	ldr	r3, [r1, #24]
 800959a:	f023 030f 	bic.w	r3, r3, #15
 800959e:	431a      	orrs	r2, r3
 80095a0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	f013 0f01 	tst.w	r3, #1
 80095a8:	d041      	beq.n	800962e <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80095aa:	4a67      	ldr	r2, [pc, #412]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80095ac:	6993      	ldr	r3, [r2, #24]
 80095ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80095b2:	68a1      	ldr	r1, [r4, #8]
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b8:	6863      	ldr	r3, [r4, #4]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d00a      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d027      	beq.n	8009612 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d02c      	beq.n	8009620 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095c6:	4a60      	ldr	r2, [pc, #384]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	f012 0f04 	tst.w	r2, #4
 80095ce:	d106      	bne.n	80095de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80095d0:	2001      	movs	r0, #1
 80095d2:	e0ad      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095d4:	6812      	ldr	r2, [r2, #0]
 80095d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80095da:	f000 80ae 	beq.w	800973a <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095de:	495a      	ldr	r1, [pc, #360]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80095e0:	690a      	ldr	r2, [r1, #16]
 80095e2:	f022 0207 	bic.w	r2, r2, #7
 80095e6:	4313      	orrs	r3, r2
 80095e8:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80095ea:	f7fd fa15 	bl	8006a18 <HAL_GetTick>
 80095ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f0:	4b55      	ldr	r3, [pc, #340]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f8:	6862      	ldr	r2, [r4, #4]
 80095fa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80095fe:	d016      	beq.n	800962e <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009600:	f7fd fa0a 	bl	8006a18 <HAL_GetTick>
 8009604:	1b80      	subs	r0, r0, r6
 8009606:	f241 3388 	movw	r3, #5000	; 0x1388
 800960a:	4298      	cmp	r0, r3
 800960c:	d9f0      	bls.n	80095f0 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800960e:	2003      	movs	r0, #3
 8009610:	e08e      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009612:	4a4d      	ldr	r2, [pc, #308]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009614:	6812      	ldr	r2, [r2, #0]
 8009616:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800961a:	d1e0      	bne.n	80095de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800961c:	2001      	movs	r0, #1
 800961e:	e087      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009620:	4a49      	ldr	r2, [pc, #292]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009628:	d1d9      	bne.n	80095de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800962a:	2001      	movs	r0, #1
 800962c:	e080      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f013 0f02 	tst.w	r3, #2
 8009634:	d00c      	beq.n	8009650 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009636:	68e2      	ldr	r2, [r4, #12]
 8009638:	4b43      	ldr	r3, [pc, #268]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	429a      	cmp	r2, r3
 8009642:	d205      	bcs.n	8009650 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009644:	4940      	ldr	r1, [pc, #256]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009646:	698b      	ldr	r3, [r1, #24]
 8009648:	f023 030f 	bic.w	r3, r3, #15
 800964c:	431a      	orrs	r2, r3
 800964e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009650:	4b3c      	ldr	r3, [pc, #240]	; (8009744 <HAL_RCC_ClockConfig+0x27c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	42ab      	cmp	r3, r5
 800965a:	d90a      	bls.n	8009672 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800965c:	4a39      	ldr	r2, [pc, #228]	; (8009744 <HAL_RCC_ClockConfig+0x27c>)
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	f023 030f 	bic.w	r3, r3, #15
 8009664:	432b      	orrs	r3, r5
 8009666:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009668:	6813      	ldr	r3, [r2, #0]
 800966a:	f003 030f 	and.w	r3, r3, #15
 800966e:	42ab      	cmp	r3, r5
 8009670:	d165      	bne.n	800973e <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	f013 0f04 	tst.w	r3, #4
 8009678:	d00c      	beq.n	8009694 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800967a:	6922      	ldr	r2, [r4, #16]
 800967c:	4b32      	ldr	r3, [pc, #200]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009684:	429a      	cmp	r2, r3
 8009686:	d205      	bcs.n	8009694 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009688:	492f      	ldr	r1, [pc, #188]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 800968a:	698b      	ldr	r3, [r1, #24]
 800968c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009690:	431a      	orrs	r2, r3
 8009692:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	f013 0f08 	tst.w	r3, #8
 800969a:	d00c      	beq.n	80096b6 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800969c:	6962      	ldr	r2, [r4, #20]
 800969e:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d205      	bcs.n	80096b6 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096aa:	4927      	ldr	r1, [pc, #156]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096ac:	69cb      	ldr	r3, [r1, #28]
 80096ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b2:	431a      	orrs	r2, r3
 80096b4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f013 0f10 	tst.w	r3, #16
 80096bc:	d00c      	beq.n	80096d8 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80096be:	69a2      	ldr	r2, [r4, #24]
 80096c0:	4b21      	ldr	r3, [pc, #132]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d205      	bcs.n	80096d8 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096cc:	491e      	ldr	r1, [pc, #120]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096ce:	69cb      	ldr	r3, [r1, #28]
 80096d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80096d4:	431a      	orrs	r2, r3
 80096d6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	f013 0f20 	tst.w	r3, #32
 80096de:	d00c      	beq.n	80096fa <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80096e0:	69e2      	ldr	r2, [r4, #28]
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d205      	bcs.n	80096fa <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096ee:	4916      	ldr	r1, [pc, #88]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 80096f0:	6a0b      	ldr	r3, [r1, #32]
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	431a      	orrs	r2, r3
 80096f8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096fa:	f7ff fdeb 	bl	80092d4 <HAL_RCC_GetSysClockFreq>
 80096fe:	4912      	ldr	r1, [pc, #72]	; (8009748 <HAL_RCC_ClockConfig+0x280>)
 8009700:	698b      	ldr	r3, [r1, #24]
 8009702:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009706:	4a11      	ldr	r2, [pc, #68]	; (800974c <HAL_RCC_ClockConfig+0x284>)
 8009708:	5cd3      	ldrb	r3, [r2, r3]
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009710:	698b      	ldr	r3, [r1, #24]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	5cd3      	ldrb	r3, [r2, r3]
 8009718:	f003 031f 	and.w	r3, r3, #31
 800971c:	fa20 f303 	lsr.w	r3, r0, r3
 8009720:	4a0b      	ldr	r2, [pc, #44]	; (8009750 <HAL_RCC_ClockConfig+0x288>)
 8009722:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <HAL_RCC_ClockConfig+0x28c>)
 8009726:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <HAL_RCC_ClockConfig+0x290>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	f7f9 f918 	bl	8002960 <HAL_InitTick>
}
 8009730:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009732:	2001      	movs	r0, #1
}
 8009734:	4770      	bx	lr
      return HAL_ERROR;
 8009736:	2001      	movs	r0, #1
 8009738:	e7fa      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800973a:	2001      	movs	r0, #1
 800973c:	e7f8      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800973e:	2001      	movs	r0, #1
 8009740:	e7f6      	b.n	8009730 <HAL_RCC_ClockConfig+0x268>
 8009742:	bf00      	nop
 8009744:	52002000 	.word	0x52002000
 8009748:	58024400 	.word	0x58024400
 800974c:	0801ed84 	.word	0x0801ed84
 8009750:	24000044 	.word	0x24000044
 8009754:	24000040 	.word	0x24000040
 8009758:	2400004c 	.word	0x2400004c

0800975c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800975c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800975e:	f7ff fdb9 	bl	80092d4 <HAL_RCC_GetSysClockFreq>
 8009762:	4a0b      	ldr	r2, [pc, #44]	; (8009790 <HAL_RCC_GetHCLKFreq+0x34>)
 8009764:	6993      	ldr	r3, [r2, #24]
 8009766:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800976a:	490a      	ldr	r1, [pc, #40]	; (8009794 <HAL_RCC_GetHCLKFreq+0x38>)
 800976c:	5ccb      	ldrb	r3, [r1, r3]
 800976e:	f003 031f 	and.w	r3, r3, #31
 8009772:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009776:	6992      	ldr	r2, [r2, #24]
 8009778:	f002 020f 	and.w	r2, r2, #15
 800977c:	5c88      	ldrb	r0, [r1, r2]
 800977e:	f000 001f 	and.w	r0, r0, #31
 8009782:	fa23 f000 	lsr.w	r0, r3, r0
 8009786:	4a04      	ldr	r2, [pc, #16]	; (8009798 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009788:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800978a:	4a04      	ldr	r2, [pc, #16]	; (800979c <HAL_RCC_GetHCLKFreq+0x40>)
 800978c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800978e:	bd08      	pop	{r3, pc}
 8009790:	58024400 	.word	0x58024400
 8009794:	0801ed84 	.word	0x0801ed84
 8009798:	24000044 	.word	0x24000044
 800979c:	24000040 	.word	0x24000040

080097a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097a0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80097a2:	f7ff ffdb 	bl	800975c <HAL_RCC_GetHCLKFreq>
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80097ae:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097b0:	5cd3      	ldrb	r3, [r2, r3]
 80097b2:	f003 031f 	and.w	r3, r3, #31
#endif
}
 80097b6:	40d8      	lsrs	r0, r3
 80097b8:	bd08      	pop	{r3, pc}
 80097ba:	bf00      	nop
 80097bc:	58024400 	.word	0x58024400
 80097c0:	0801ed84 	.word	0x0801ed84

080097c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80097c6:	f7ff ffc9 	bl	800975c <HAL_RCC_GetHCLKFreq>
 80097ca:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80097d2:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097d4:	5cd3      	ldrb	r3, [r2, r3]
 80097d6:	f003 031f 	and.w	r3, r3, #31
#endif
}
 80097da:	40d8      	lsrs	r0, r3
 80097dc:	bd08      	pop	{r3, pc}
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400
 80097e4:	0801ed84 	.word	0x0801ed84

080097e8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80097e8:	233f      	movs	r3, #63	; 0x3f
 80097ea:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097ec:	4b11      	ldr	r3, [pc, #68]	; (8009834 <HAL_RCC_GetClockConfig+0x4c>)
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	f002 0207 	and.w	r2, r2, #7
 80097f4:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80097f6:	699a      	ldr	r2, [r3, #24]
 80097f8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80097fc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	f002 020f 	and.w	r2, r2, #15
 8009804:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8009806:	699a      	ldr	r2, [r3, #24]
 8009808:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800980c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800980e:	69da      	ldr	r2, [r3, #28]
 8009810:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009814:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800981c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009824:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009826:	4b04      	ldr	r3, [pc, #16]	; (8009838 <HAL_RCC_GetClockConfig+0x50>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	600b      	str	r3, [r1, #0]
}
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	52002000 	.word	0x52002000

0800983c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983c:	4b40      	ldr	r3, [pc, #256]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	2b03      	cmp	r3, #3
 8009846:	d079      	beq.n	800993c <RCCEx_PLL2_Config+0x100>
{
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	4605      	mov	r5, r0
 800984c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800984e:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 8009850:	6813      	ldr	r3, [r2, #0]
 8009852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009858:	f7fd f8de 	bl	8006a18 <HAL_GetTick>
 800985c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800985e:	4b38      	ldr	r3, [pc, #224]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009866:	d006      	beq.n	8009876 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009868:	f7fd f8d6 	bl	8006a18 <HAL_GetTick>
 800986c:	1b03      	subs	r3, r0, r4
 800986e:	2b02      	cmp	r3, #2
 8009870:	d9f5      	bls.n	800985e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8009872:	2003      	movs	r0, #3

  }


  return status;
}
 8009874:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009876:	4b32      	ldr	r3, [pc, #200]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 8009878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800987a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800987e:	6829      	ldr	r1, [r5, #0]
 8009880:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8009884:	629a      	str	r2, [r3, #40]	; 0x28
 8009886:	686a      	ldr	r2, [r5, #4]
 8009888:	3a01      	subs	r2, #1
 800988a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800988e:	68a9      	ldr	r1, [r5, #8]
 8009890:	3901      	subs	r1, #1
 8009892:	0249      	lsls	r1, r1, #9
 8009894:	b289      	uxth	r1, r1
 8009896:	430a      	orrs	r2, r1
 8009898:	68e9      	ldr	r1, [r5, #12]
 800989a:	3901      	subs	r1, #1
 800989c:	0409      	lsls	r1, r1, #16
 800989e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80098a2:	430a      	orrs	r2, r1
 80098a4:	6929      	ldr	r1, [r5, #16]
 80098a6:	3901      	subs	r1, #1
 80098a8:	0609      	lsls	r1, r1, #24
 80098aa:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80098ae:	430a      	orrs	r2, r1
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80098b8:	6969      	ldr	r1, [r5, #20]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c0:	f022 0220 	bic.w	r2, r2, #32
 80098c4:	69a9      	ldr	r1, [r5, #24]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098cc:	f022 0210 	bic.w	r2, r2, #16
 80098d0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80098d4:	4a1b      	ldr	r2, [pc, #108]	; (8009944 <RCCEx_PLL2_Config+0x108>)
 80098d6:	400a      	ands	r2, r1
 80098d8:	69e9      	ldr	r1, [r5, #28]
 80098da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80098de:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e2:	f042 0210 	orr.w	r2, r2, #16
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80098e8:	b9c6      	cbnz	r6, 800991c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098ea:	461a      	mov	r2, r3
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80098f4:	4a12      	ldr	r2, [pc, #72]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098fc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80098fe:	f7fd f88b 	bl	8006a18 <HAL_GetTick>
 8009902:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009904:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800990c:	d114      	bne.n	8009938 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800990e:	f7fd f883 	bl	8006a18 <HAL_GetTick>
 8009912:	1b00      	subs	r0, r0, r4
 8009914:	2802      	cmp	r0, #2
 8009916:	d9f5      	bls.n	8009904 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8009918:	2003      	movs	r0, #3
 800991a:	e7ab      	b.n	8009874 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800991c:	2e01      	cmp	r6, #1
 800991e:	d005      	beq.n	800992c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009920:	4a07      	ldr	r2, [pc, #28]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 8009922:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009924:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009928:	62d3      	str	r3, [r2, #44]	; 0x2c
 800992a:	e7e3      	b.n	80098f4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800992c:	4a04      	ldr	r2, [pc, #16]	; (8009940 <RCCEx_PLL2_Config+0x104>)
 800992e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009934:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009936:	e7dd      	b.n	80098f4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8009938:	2000      	movs	r0, #0
 800993a:	e79b      	b.n	8009874 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800993c:	2001      	movs	r0, #1
}
 800993e:	4770      	bx	lr
 8009940:	58024400 	.word	0x58024400
 8009944:	ffff0007 	.word	0xffff0007

08009948 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009948:	4b40      	ldr	r3, [pc, #256]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	f003 0303 	and.w	r3, r3, #3
 8009950:	2b03      	cmp	r3, #3
 8009952:	d079      	beq.n	8009a48 <RCCEx_PLL3_Config+0x100>
{
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4605      	mov	r5, r0
 8009958:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800995a:	4a3c      	ldr	r2, [pc, #240]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 800995c:	6813      	ldr	r3, [r2, #0]
 800995e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009964:	f7fd f858 	bl	8006a18 <HAL_GetTick>
 8009968:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800996a:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009972:	d006      	beq.n	8009982 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009974:	f7fd f850 	bl	8006a18 <HAL_GetTick>
 8009978:	1b03      	subs	r3, r0, r4
 800997a:	2b02      	cmp	r3, #2
 800997c:	d9f5      	bls.n	800996a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800997e:	2003      	movs	r0, #3

  }


  return status;
}
 8009980:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009982:	4b32      	ldr	r3, [pc, #200]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 8009984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009986:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800998a:	6829      	ldr	r1, [r5, #0]
 800998c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009990:	629a      	str	r2, [r3, #40]	; 0x28
 8009992:	686a      	ldr	r2, [r5, #4]
 8009994:	3a01      	subs	r2, #1
 8009996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800999a:	68a9      	ldr	r1, [r5, #8]
 800999c:	3901      	subs	r1, #1
 800999e:	0249      	lsls	r1, r1, #9
 80099a0:	b289      	uxth	r1, r1
 80099a2:	430a      	orrs	r2, r1
 80099a4:	68e9      	ldr	r1, [r5, #12]
 80099a6:	3901      	subs	r1, #1
 80099a8:	0409      	lsls	r1, r1, #16
 80099aa:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80099ae:	430a      	orrs	r2, r1
 80099b0:	6929      	ldr	r1, [r5, #16]
 80099b2:	3901      	subs	r1, #1
 80099b4:	0609      	lsls	r1, r1, #24
 80099b6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80099ba:	430a      	orrs	r2, r1
 80099bc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099c4:	6969      	ldr	r1, [r5, #20]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099d0:	69a9      	ldr	r1, [r5, #24]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099dc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80099e0:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <RCCEx_PLL3_Config+0x108>)
 80099e2:	400a      	ands	r2, r1
 80099e4:	69e9      	ldr	r1, [r5, #28]
 80099e6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80099ea:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80099f4:	b9c6      	cbnz	r6, 8009a28 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099f6:	461a      	mov	r2, r3
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099fe:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8009a00:	4a12      	ldr	r2, [pc, #72]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009a0a:	f7fd f805 	bl	8006a18 <HAL_GetTick>
 8009a0e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a10:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8009a18:	d114      	bne.n	8009a44 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a1a:	f7fc fffd 	bl	8006a18 <HAL_GetTick>
 8009a1e:	1b00      	subs	r0, r0, r4
 8009a20:	2802      	cmp	r0, #2
 8009a22:	d9f5      	bls.n	8009a10 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8009a24:	2003      	movs	r0, #3
 8009a26:	e7ab      	b.n	8009980 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a28:	2e01      	cmp	r6, #1
 8009a2a:	d005      	beq.n	8009a38 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a2c:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 8009a2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a36:	e7e3      	b.n	8009a00 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a38:	4a04      	ldr	r2, [pc, #16]	; (8009a4c <RCCEx_PLL3_Config+0x104>)
 8009a3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a42:	e7dd      	b.n	8009a00 <RCCEx_PLL3_Config+0xb8>
  return status;
 8009a44:	2000      	movs	r0, #0
 8009a46:	e79b      	b.n	8009980 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8009a48:	2001      	movs	r0, #1
}
 8009a4a:	4770      	bx	lr
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	ffff0007 	.word	0xffff0007

08009a54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a58:	6803      	ldr	r3, [r0, #0]
 8009a5a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009a5e:	d030      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a60:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a66:	d026      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009a68:	d80e      	bhi.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8009a6a:	b1eb      	cbz	r3, 8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a70:	d107      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a72:	2102      	movs	r1, #2
 8009a74:	3004      	adds	r0, #4
 8009a76:	f7ff fee1 	bl	800983c <RCCEx_PLL2_Config>
 8009a7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009a7c:	b145      	cbz	r5, 8009a90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8009a7e:	462e      	mov	r6, r5
 8009a80:	e021      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a82:	2601      	movs	r6, #1
 8009a84:	4635      	mov	r5, r6
 8009a86:	e01e      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009a88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a8c:	d109      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009a8e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a90:	4a99      	ldr	r2, [pc, #612]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009a92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009a94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a98:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	e011      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009aa2:	2601      	movs	r6, #1
 8009aa4:	4635      	mov	r5, r6
 8009aa6:	e00e      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa8:	4a93      	ldr	r2, [pc, #588]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009aaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ab2:	2500      	movs	r5, #0
 8009ab4:	e7ec      	b.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ab6:	2102      	movs	r1, #2
 8009ab8:	3024      	adds	r0, #36	; 0x24
 8009aba:	f7ff ff45 	bl	8009948 <RCCEx_PLL3_Config>
 8009abe:	4605      	mov	r5, r0
      break;
 8009ac0:	e7dc      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ac2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ac4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009acc:	d026      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ace:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d81f      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8009ad4:	e8df f003 	tbb	[pc, r3]
 8009ad8:	08171103 	.word	0x08171103
 8009adc:	08          	.byte	0x08
 8009add:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ade:	4a86      	ldr	r2, [pc, #536]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009ae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ae8:	b9bd      	cbnz	r5, 8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009aea:	4a83      	ldr	r2, [pc, #524]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009aec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009af4:	430b      	orrs	r3, r1
 8009af6:	6513      	str	r3, [r2, #80]	; 0x50
 8009af8:	e010      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009afa:	2100      	movs	r1, #0
 8009afc:	1d20      	adds	r0, r4, #4
 8009afe:	f7ff fe9d 	bl	800983c <RCCEx_PLL2_Config>
 8009b02:	4605      	mov	r5, r0
      break;
 8009b04:	e7f0      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b06:	2100      	movs	r1, #0
 8009b08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b0c:	f7ff ff1c 	bl	8009948 <RCCEx_PLL3_Config>
 8009b10:	4605      	mov	r5, r0
      break;
 8009b12:	e7e9      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b14:	2601      	movs	r6, #1
 8009b16:	4635      	mov	r5, r6
 8009b18:	e000      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8009b1a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009b22:	d01d      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d039      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009b2a:	d80b      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8009b2c:	b38b      	cbz	r3, 8009b92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d105      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b32:	2100      	movs	r1, #0
 8009b34:	1d20      	adds	r0, r4, #4
 8009b36:	f7ff fe81 	bl	800983c <RCCEx_PLL2_Config>
 8009b3a:	4605      	mov	r5, r0
      break;
 8009b3c:	e008      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009b3e:	2601      	movs	r6, #1
 8009b40:	4635      	mov	r5, r6
 8009b42:	e00d      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b48:	d002      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009b4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009b4e:	d11b      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8009b50:	bb65      	cbnz	r5, 8009bac <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009b52:	4a69      	ldr	r2, [pc, #420]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009b54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b56:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009b5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009b66:	d035      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009b68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b6e:	d057      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009b70:	d821      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d04e      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b7a:	d119      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	1d20      	adds	r0, r4, #4
 8009b80:	f7ff fe5c 	bl	800983c <RCCEx_PLL2_Config>
 8009b84:	4605      	mov	r5, r0
      break;
 8009b86:	e01c      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8009b88:	2bc0      	cmp	r3, #192	; 0xc0
 8009b8a:	d0e1      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009b8c:	2601      	movs	r6, #1
 8009b8e:	4635      	mov	r5, r6
 8009b90:	e7e6      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b92:	4a59      	ldr	r2, [pc, #356]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009b94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009b9c:	e7d8      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ba4:	f7ff fed0 	bl	8009948 <RCCEx_PLL3_Config>
 8009ba8:	4605      	mov	r5, r0
      break;
 8009baa:	e7d1      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009bac:	462e      	mov	r6, r5
 8009bae:	e7d7      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009bb0:	2601      	movs	r6, #1
 8009bb2:	4635      	mov	r5, r6
 8009bb4:	e00e      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bba:	d002      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009bbc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009bc0:	d122      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	d133      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009bc6:	4a4c      	ldr	r2, [pc, #304]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009bc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009bca:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8009bce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009bda:	d031      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 8009bdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d041      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8009be2:	d829      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009be4:	b133      	cbz	r3, 8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009be6:	2b10      	cmp	r3, #16
 8009be8:	d123      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bea:	4a43      	ldr	r2, [pc, #268]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009bec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009bf4:	2d00      	cmp	r5, #0
 8009bf6:	d13c      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009bf8:	4a3f      	ldr	r2, [pc, #252]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009bfa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009bfc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c02:	430b      	orrs	r3, r1
 8009c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c06:	e01b      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 8009c08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c0c:	d0d9      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009c0e:	2601      	movs	r6, #1
 8009c10:	4635      	mov	r5, r6
 8009c12:	e7df      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c14:	4a38      	ldr	r2, [pc, #224]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009c1e:	e7d0      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c20:	2100      	movs	r1, #0
 8009c22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c26:	f7ff fe8f 	bl	8009948 <RCCEx_PLL3_Config>
 8009c2a:	4605      	mov	r5, r0
      break;
 8009c2c:	e7c9      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8009c2e:	462e      	mov	r6, r5
 8009c30:	e7d0      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 8009c32:	2601      	movs	r6, #1
 8009c34:	4635      	mov	r5, r6
 8009c36:	e003      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8009c38:	2b30      	cmp	r3, #48	; 0x30
 8009c3a:	d0db      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009c3c:	2601      	movs	r6, #1
 8009c3e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8009c46:	d039      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4e:	d02d      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x258>
 8009c50:	d814      	bhi.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009c52:	b32b      	cbz	r3, 8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8009c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c58:	d10d      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	1d20      	adds	r0, r4, #4
 8009c5e:	f7ff fded 	bl	800983c <RCCEx_PLL2_Config>
 8009c62:	4605      	mov	r5, r0
      break;
 8009c64:	e010      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c66:	2102      	movs	r1, #2
 8009c68:	1d20      	adds	r0, r4, #4
 8009c6a:	f7ff fde7 	bl	800983c <RCCEx_PLL2_Config>
 8009c6e:	4605      	mov	r5, r0
      break;
 8009c70:	e7c0      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009c72:	462e      	mov	r6, r5
 8009c74:	e7e4      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c76:	2601      	movs	r6, #1
 8009c78:	4635      	mov	r5, r6
 8009c7a:	e01f      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c80:	d002      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c86:	d108      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8009c88:	b9bd      	cbnz	r5, 8009cba <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c8a:	4a1b      	ldr	r2, [pc, #108]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009c8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c92:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6513      	str	r3, [r2, #80]	; 0x50
 8009c98:	e010      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c9a:	2601      	movs	r6, #1
 8009c9c:	4635      	mov	r5, r6
 8009c9e:	e00d      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca0:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009ca2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009caa:	e7ed      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cac:	2100      	movs	r1, #0
 8009cae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009cb2:	f7ff fe49 	bl	8009948 <RCCEx_PLL3_Config>
 8009cb6:	4605      	mov	r5, r0
      break;
 8009cb8:	e7e6      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009cba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009cc2:	d026      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cca:	d037      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8009ccc:	d816      	bhi.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009cce:	b13b      	cbz	r3, 8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd4:	d10d      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	1d20      	adds	r0, r4, #4
 8009cda:	f7ff fdaf 	bl	800983c <RCCEx_PLL2_Config>
 8009cde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ce0:	bb9d      	cbnz	r5, 8009d4a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009ce2:	4a05      	ldr	r2, [pc, #20]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009ce4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ce6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009cea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	; 0x50
 8009cf0:	e00f      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cf2:	2601      	movs	r6, #1
 8009cf4:	4635      	mov	r5, r6
 8009cf6:	e00c      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d00:	d0ee      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d06:	d0eb      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d0c:	d0e8      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d0e:	2601      	movs	r6, #1
 8009d10:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009d18:	d025      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d1a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d22:	d04c      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009d24:	d816      	bhi.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d03c      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d2e:	d10e      	bne.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d30:	2101      	movs	r1, #1
 8009d32:	1d20      	adds	r0, r4, #4
 8009d34:	f7ff fd82 	bl	800983c <RCCEx_PLL2_Config>
 8009d38:	4605      	mov	r5, r0
      break;
 8009d3a:	e033      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d42:	f7ff fe01 	bl	8009948 <RCCEx_PLL3_Config>
 8009d46:	4605      	mov	r5, r0
      break;
 8009d48:	e7ca      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009d4a:	462e      	mov	r6, r5
 8009d4c:	e7e1      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d4e:	2601      	movs	r6, #1
 8009d50:	4635      	mov	r5, r6
 8009d52:	e008      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d58:	d024      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009d5a:	d91d      	bls.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009d5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009d60:	d020      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009d62:	2601      	movs	r6, #1
 8009d64:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009d6c:	d009      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 8009d6e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d74:	d02c      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8009d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d7a:	d037      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x398>
 8009d7c:	b36b      	cbz	r3, 8009dda <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009d7e:	2601      	movs	r6, #1
 8009d80:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009d88:	d045      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 8009d8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d86d      	bhi.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009d90:	e8df f003 	tbb	[pc, r3]
 8009d94:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d9c:	d002      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d109      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 8009da4:	b995      	cbnz	r5, 8009dcc <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009da6:	4a8c      	ldr	r2, [pc, #560]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009da8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009daa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009dae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6593      	str	r3, [r2, #88]	; 0x58
 8009db6:	e7d6      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009db8:	2601      	movs	r6, #1
 8009dba:	4635      	mov	r5, r6
 8009dbc:	e7d3      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dc4:	f7ff fdc0 	bl	8009948 <RCCEx_PLL3_Config>
 8009dc8:	4605      	mov	r5, r0
      break;
 8009dca:	e7eb      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8009dcc:	462e      	mov	r6, r5
 8009dce:	e7ca      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd0:	4a81      	ldr	r2, [pc, #516]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009dd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009dda:	b96d      	cbnz	r5, 8009df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ddc:	4a7e      	ldr	r2, [pc, #504]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009dde:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009de0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009de4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6513      	str	r3, [r2, #80]	; 0x50
 8009dea:	e7ca      	b.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dec:	2101      	movs	r1, #1
 8009dee:	1d20      	adds	r0, r4, #4
 8009df0:	f7ff fd24 	bl	800983c <RCCEx_PLL2_Config>
 8009df4:	4605      	mov	r5, r0
      break;
 8009df6:	e7f0      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x386>
 8009df8:	462e      	mov	r6, r5
 8009dfa:	e7c2      	b.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfc:	4a76      	ldr	r2, [pc, #472]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009dfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009e06:	bba5      	cbnz	r5, 8009e72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e08:	4a73      	ldr	r2, [pc, #460]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009e0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009e12:	430b      	orrs	r3, r1
 8009e14:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009e1c:	d12b      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	f013 0f01 	tst.w	r3, #1
 8009e24:	f000 80a3 	beq.w	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e28:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009e2c:	2b28      	cmp	r3, #40	; 0x28
 8009e2e:	f200 809c 	bhi.w	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009e32:	e8df f003 	tbb	[pc, r3]
 8009e36:	9a89      	.short	0x9a89
 8009e38:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e3c:	9a849a9a 	.word	0x9a849a9a
 8009e40:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e44:	9a939a9a 	.word	0x9a939a9a
 8009e48:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e4c:	9a899a9a 	.word	0x9a899a9a
 8009e50:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e54:	9a899a9a 	.word	0x9a899a9a
 8009e58:	9a9a9a9a 	.word	0x9a9a9a9a
 8009e5c:	9a9a      	.short	0x9a9a
 8009e5e:	89          	.byte	0x89
 8009e5f:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e60:	2102      	movs	r1, #2
 8009e62:	1d20      	adds	r0, r4, #4
 8009e64:	f7ff fcea 	bl	800983c <RCCEx_PLL2_Config>
 8009e68:	4605      	mov	r5, r0
      break;
 8009e6a:	e7cc      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8009e6c:	2601      	movs	r6, #1
 8009e6e:	4635      	mov	r5, r6
 8009e70:	e7d1      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8009e72:	462e      	mov	r6, r5
 8009e74:	e7cf      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e76:	4a59      	ldr	r2, [pc, #356]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009e80:	f7fc fdca 	bl	8006a18 <HAL_GetTick>
 8009e84:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e86:	4b55      	ldr	r3, [pc, #340]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009e8e:	d105      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e90:	f7fc fdc2 	bl	8006a18 <HAL_GetTick>
 8009e94:	1bc0      	subs	r0, r0, r7
 8009e96:	2864      	cmp	r0, #100	; 0x64
 8009e98:	d9f5      	bls.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 8009e9a:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	d14a      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ea0:	4b4d      	ldr	r3, [pc, #308]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009ea8:	4053      	eors	r3, r2
 8009eaa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009eae:	d00c      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009eb0:	4b49      	ldr	r3, [pc, #292]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009eb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009eb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009eba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009ebe:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ec0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009ec2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009ec6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009ec8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009eca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed2:	d015      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 8009ed4:	bb8d      	cbnz	r5, 8009f3a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ed6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009eda:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009ede:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009ee2:	d01e      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8009ee4:	4a3c      	ldr	r2, [pc, #240]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009ee6:	6913      	ldr	r3, [r2, #16]
 8009ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009eec:	6113      	str	r3, [r2, #16]
 8009eee:	493a      	ldr	r1, [pc, #232]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009ef0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8009ef2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8009ef6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009efa:	4313      	orrs	r3, r2
 8009efc:	670b      	str	r3, [r1, #112]	; 0x70
 8009efe:	e78e      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8009f00:	f7fc fd8a 	bl	8006a18 <HAL_GetTick>
 8009f04:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f06:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	f013 0f02 	tst.w	r3, #2
 8009f0e:	d1e1      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f10:	f7fc fd82 	bl	8006a18 <HAL_GetTick>
 8009f14:	1bc0      	subs	r0, r0, r7
 8009f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f1a:	4298      	cmp	r0, r3
 8009f1c:	d9f3      	bls.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 8009f1e:	2503      	movs	r5, #3
 8009f20:	e7d8      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f22:	482d      	ldr	r0, [pc, #180]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f24:	6902      	ldr	r2, [r0, #16]
 8009f26:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009f2a:	492d      	ldr	r1, [pc, #180]	; (8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009f2c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8009f30:	4313      	orrs	r3, r2
 8009f32:	6103      	str	r3, [r0, #16]
 8009f34:	e7db      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8009f36:	462e      	mov	r6, r5
 8009f38:	e771      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 8009f3a:	462e      	mov	r6, r5
 8009f3c:	e76f      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f3e:	2101      	movs	r1, #1
 8009f40:	1d20      	adds	r0, r4, #4
 8009f42:	f7ff fc7b 	bl	800983c <RCCEx_PLL2_Config>
 8009f46:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f48:	b9ed      	cbnz	r5, 8009f86 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f4a:	4a23      	ldr	r2, [pc, #140]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f4e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009f52:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009f56:	430b      	orrs	r3, r1
 8009f58:	6553      	str	r3, [r2, #84]	; 0x54
 8009f5a:	e008      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f62:	f7ff fcf1 	bl	8009948 <RCCEx_PLL3_Config>
 8009f66:	4605      	mov	r5, r0
      break;
 8009f68:	e7ee      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f6a:	2601      	movs	r6, #1
 8009f6c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	f013 0f02 	tst.w	r3, #2
 8009f74:	d016      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f76:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d827      	bhi.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x578>
 8009f7c:	e8df f003 	tbb	[pc, r3]
 8009f80:	0a1f050a 	.word	0x0a1f050a
 8009f84:	0a0a      	.short	0x0a0a
 8009f86:	462e      	mov	r6, r5
 8009f88:	e7f1      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	1d20      	adds	r0, r4, #4
 8009f8e:	f7ff fc55 	bl	800983c <RCCEx_PLL2_Config>
 8009f92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009f94:	b9ed      	cbnz	r5, 8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009f98:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	f013 0f04 	tst.w	r3, #4
 8009faa:	d029      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009fac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009fb0:	2b05      	cmp	r3, #5
 8009fb2:	d84a      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8009fb4:	e8df f003 	tbb	[pc, r3]
 8009fb8:	1b42161b 	.word	0x1b42161b
 8009fbc:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009fc4:	f7ff fcc0 	bl	8009948 <RCCEx_PLL3_Config>
 8009fc8:	4605      	mov	r5, r0
      break;
 8009fca:	e7e3      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009fcc:	2601      	movs	r6, #1
 8009fce:	4635      	mov	r5, r6
 8009fd0:	e7e8      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009fd2:	462e      	mov	r6, r5
 8009fd4:	e7e6      	b.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009fd6:	bf00      	nop
 8009fd8:	58024400 	.word	0x58024400
 8009fdc:	58024800 	.word	0x58024800
 8009fe0:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	1d20      	adds	r0, r4, #4
 8009fe8:	f7ff fc28 	bl	800983c <RCCEx_PLL2_Config>
 8009fec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009fee:	bb7d      	cbnz	r5, 800a050 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ff0:	4aa9      	ldr	r2, [pc, #676]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009ff2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ff4:	f023 0307 	bic.w	r3, r3, #7
 8009ff8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	f013 0f20 	tst.w	r3, #32
 800a006:	d033      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a008:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a00c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a010:	d04c      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x658>
 800a012:	d822      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x606>
 800a014:	b13b      	cbz	r3, 800a026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a01a:	d11b      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a01c:	2100      	movs	r1, #0
 800a01e:	1d20      	adds	r0, r4, #4
 800a020:	f7ff fc0c 	bl	800983c <RCCEx_PLL2_Config>
 800a024:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a026:	2d00      	cmp	r5, #0
 800a028:	d147      	bne.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a02a:	4a9b      	ldr	r2, [pc, #620]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a02c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a02e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a032:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a036:	430b      	orrs	r3, r1
 800a038:	6553      	str	r3, [r2, #84]	; 0x54
 800a03a:	e019      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a03c:	2101      	movs	r1, #1
 800a03e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a042:	f7ff fc81 	bl	8009948 <RCCEx_PLL3_Config>
 800a046:	4605      	mov	r5, r0
      break;
 800a048:	e7d1      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a04a:	2601      	movs	r6, #1
 800a04c:	4635      	mov	r5, r6
 800a04e:	e7d7      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a050:	462e      	mov	r6, r5
 800a052:	e7d5      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a054:	2601      	movs	r6, #1
 800a056:	4635      	mov	r5, r6
 800a058:	e00a      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05e:	d0e2      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a064:	d0df      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a06a:	d0dc      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a06c:	2601      	movs	r6, #1
 800a06e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a076:	d030      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a078:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a07c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a080:	d04b      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800a082:	d81f      	bhi.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800a084:	b13b      	cbz	r3, 800a096 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a08a:	d118      	bne.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a08c:	2100      	movs	r1, #0
 800a08e:	1d20      	adds	r0, r4, #4
 800a090:	f7ff fbd4 	bl	800983c <RCCEx_PLL2_Config>
 800a094:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a096:	2d00      	cmp	r5, #0
 800a098:	d146      	bne.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a09a:	4a7f      	ldr	r2, [pc, #508]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a09c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a09e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a0a2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a0a6:	430b      	orrs	r3, r1
 800a0a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a0aa:	e016      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a0b2:	f7ff fc49 	bl	8009948 <RCCEx_PLL3_Config>
 800a0b6:	4605      	mov	r5, r0
      break;
 800a0b8:	e7b5      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800a0ba:	462e      	mov	r6, r5
 800a0bc:	e7d8      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0be:	2601      	movs	r6, #1
 800a0c0:	4635      	mov	r5, r6
 800a0c2:	e00a      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x686>
 800a0c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c8:	d0e5      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a0ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0ce:	d0e2      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a0d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0d4:	d0df      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a0d6:	2601      	movs	r6, #1
 800a0d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a0e0:	d032      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0e2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a0e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ea:	f000 80a2 	beq.w	800a232 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800a0ee:	d820      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800a0f0:	b13b      	cbz	r3, 800a102 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f6:	d119      	bne.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	1d20      	adds	r0, r4, #4
 800a0fc:	f7ff fb9e 	bl	800983c <RCCEx_PLL2_Config>
 800a100:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a102:	2d00      	cmp	r5, #0
 800a104:	f040 809c 	bne.w	800a240 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a108:	4a63      	ldr	r2, [pc, #396]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a10a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a10c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a110:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a114:	430b      	orrs	r3, r1
 800a116:	6593      	str	r3, [r2, #88]	; 0x58
 800a118:	e016      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a11a:	2102      	movs	r1, #2
 800a11c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a120:	f7ff fc12 	bl	8009948 <RCCEx_PLL3_Config>
 800a124:	4605      	mov	r5, r0
      break;
 800a126:	e7b6      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a128:	462e      	mov	r6, r5
 800a12a:	e7d6      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a12c:	2601      	movs	r6, #1
 800a12e:	4635      	mov	r5, r6
 800a130:	e00a      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800a132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a136:	d0e4      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a138:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a13c:	d0e1      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a13e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a142:	d0de      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a144:	2601      	movs	r6, #1
 800a146:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	f013 0f08 	tst.w	r3, #8
 800a14e:	d00c      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a150:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a158:	d074      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a15a:	4a4f      	ldr	r2, [pc, #316]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a15c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a15e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a162:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a166:	430b      	orrs	r3, r1
 800a168:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	f013 0f10 	tst.w	r3, #16
 800a170:	d00c      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a172:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a17a:	d06c      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a17c:	4a46      	ldr	r2, [pc, #280]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a17e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a184:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a188:	430b      	orrs	r3, r1
 800a18a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800a192:	d00b      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800a194:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a19c:	d073      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a2:	d066      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d05f      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800a1a8:	2601      	movs	r6, #1
 800a1aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a1b2:	d00c      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800a1b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a1b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1bc:	d07d      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x866>
 800a1be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1c2:	d070      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a1c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1c8:	d068      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x848>
 800a1ca:	2601      	movs	r6, #1
 800a1cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a1d4:	d008      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a1d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d077      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x878>
 800a1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e0:	f000 8082 	beq.w	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a1e4:	2601      	movs	r6, #1
 800a1e6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800a1ee:	f040 8083 	bne.w	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a1f8:	f000 808b 	beq.w	800a312 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800a1fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a204:	f000 80c9 	beq.w	800a39a <HAL_RCCEx_PeriphCLKConfig+0x946>
 800a208:	f240 8080 	bls.w	800a30c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a210:	d003      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a216:	f040 80be 	bne.w	800a396 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	f040 80c3 	bne.w	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a220:	4a1d      	ldr	r2, [pc, #116]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a222:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a228:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6553      	str	r3, [r2, #84]	; 0x54
 800a230:	e06f      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a232:	2102      	movs	r1, #2
 800a234:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a238:	f7ff fb86 	bl	8009948 <RCCEx_PLL3_Config>
 800a23c:	4605      	mov	r5, r0
      break;
 800a23e:	e760      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800a240:	462e      	mov	r6, r5
 800a242:	e781      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a244:	2102      	movs	r1, #2
 800a246:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a24a:	f7ff fb7d 	bl	8009948 <RCCEx_PLL3_Config>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d083      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800a252:	2601      	movs	r6, #1
 800a254:	e781      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a256:	2102      	movs	r1, #2
 800a258:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a25c:	f7ff fb74 	bl	8009948 <RCCEx_PLL3_Config>
 800a260:	2800      	cmp	r0, #0
 800a262:	d08b      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800a264:	2601      	movs	r6, #1
 800a266:	e789      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a268:	2100      	movs	r1, #0
 800a26a:	1d20      	adds	r0, r4, #4
 800a26c:	f7ff fae6 	bl	800983c <RCCEx_PLL2_Config>
 800a270:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a272:	b97d      	cbnz	r5, 800a294 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a274:	4a08      	ldr	r2, [pc, #32]	; (800a298 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a276:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a278:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a27c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800a280:	430b      	orrs	r3, r1
 800a282:	6593      	str	r3, [r2, #88]	; 0x58
 800a284:	e792      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a286:	2102      	movs	r1, #2
 800a288:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a28c:	f7ff fb5c 	bl	8009948 <RCCEx_PLL3_Config>
 800a290:	4605      	mov	r5, r0
      break;
 800a292:	e7ee      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a294:	462e      	mov	r6, r5
 800a296:	e789      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x758>
 800a298:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a29c:	4a47      	ldr	r2, [pc, #284]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a29e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a2a6:	b97d      	cbnz	r5, 800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2a8:	4a44      	ldr	r2, [pc, #272]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a2aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a2ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a2b0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6553      	str	r3, [r2, #84]	; 0x54
 800a2b8:	e789      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2c0:	f7ff fb42 	bl	8009948 <RCCEx_PLL3_Config>
 800a2c4:	4605      	mov	r5, r0
      break;
 800a2c6:	e7ee      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a2c8:	462e      	mov	r6, r5
 800a2ca:	e780      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2cc:	4a3b      	ldr	r2, [pc, #236]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a2ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a2d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a2d6:	b96d      	cbnz	r5, 800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2d8:	4a38      	ldr	r2, [pc, #224]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a2da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a2dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2e6:	e77f      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	1d20      	adds	r0, r4, #4
 800a2ec:	f7ff faa6 	bl	800983c <RCCEx_PLL2_Config>
 800a2f0:	4605      	mov	r5, r0
      break;
 800a2f2:	e7f0      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800a2f4:	462e      	mov	r6, r5
 800a2f6:	e777      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a2f8:	2102      	movs	r1, #2
 800a2fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2fe:	f7ff fb23 	bl	8009948 <RCCEx_PLL3_Config>
 800a302:	2800      	cmp	r0, #0
 800a304:	f43f af75 	beq.w	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800a308:	2601      	movs	r6, #1
 800a30a:	e772      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d084      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a310:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a318:	d006      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a31a:	4a28      	ldr	r2, [pc, #160]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a31c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a31e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a322:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a324:	430b      	orrs	r3, r1
 800a326:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800a32e:	d006      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a330:	4a22      	ldr	r2, [pc, #136]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a332:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a338:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a33a:	430b      	orrs	r3, r1
 800a33c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a344:	d006      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a346:	4a1d      	ldr	r2, [pc, #116]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a348:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a34a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800a34e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a350:	430b      	orrs	r3, r1
 800a352:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a35a:	d009      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a35c:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a364:	611a      	str	r2, [r3, #16]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800a36c:	430a      	orrs	r2, r1
 800a36e:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	db19      	blt.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a37c:	d007      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a37e:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a380:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a382:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a386:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a38a:	430b      	orrs	r3, r1
 800a38c:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800a38e:	b106      	cbz	r6, 800a392 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800a390:	2601      	movs	r6, #1
}
 800a392:	4630      	mov	r0, r6
 800a394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800a396:	2601      	movs	r6, #1
 800a398:	e7bb      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a39a:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a39c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800a3a4:	e739      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a3a6:	462e      	mov	r6, r5
 800a3a8:	e7b3      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3aa:	4a04      	ldr	r2, [pc, #16]	; (800a3bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800a3ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a3ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a3b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3b8:	e7dd      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800a3ba:	bf00      	nop
 800a3bc:	58024400 	.word	0x58024400

0800a3c0 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800a3c0:	6802      	ldr	r2, [r0, #0]
 800a3c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a3c4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a3c8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a3d0:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a3de:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	b923      	cbnz	r3, 800a3f0 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a3e6:	6802      	ldr	r2, [r0, #0]
 800a3e8:	6913      	ldr	r3, [r2, #16]
 800a3ea:	f023 0301 	bic.w	r3, r3, #1
 800a3ee:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a3f0:	4770      	bx	lr

0800a3f2 <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3f2:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3f4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a3f6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800a3f8:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3fa:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a400:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29b      	uxth	r3, r3
 800a40a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a40e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a412:	b29b      	uxth	r3, r3
 800a414:	b923      	cbnz	r3, 800a420 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a416:	6802      	ldr	r2, [r0, #0]
 800a418:	6913      	ldr	r3, [r2, #16]
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a420:	4770      	bx	lr

0800a422 <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800a422:	6802      	ldr	r2, [r0, #0]
 800a424:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a426:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a428:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800a42a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a42c:	3304      	adds	r3, #4
 800a42e:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800a430:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a434:	b29b      	uxth	r3, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	b29b      	uxth	r3, r3
 800a43a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800a43e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800a442:	b29b      	uxth	r3, r3
 800a444:	b923      	cbnz	r3, 800a450 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800a446:	6802      	ldr	r2, [r0, #0]
 800a448:	6913      	ldr	r3, [r2, #16]
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a450:	4770      	bx	lr

0800a452 <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800a452:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a454:	6803      	ldr	r3, [r0, #0]
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800a45c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a45e:	3301      	adds	r3, #1
 800a460:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a462:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a466:	b29b      	uxth	r3, r3
 800a468:	3b01      	subs	r3, #1
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a470:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a474:	b29b      	uxth	r3, r3
 800a476:	b923      	cbnz	r3, 800a482 <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a478:	6802      	ldr	r2, [r0, #0]
 800a47a:	6913      	ldr	r3, [r2, #16]
 800a47c:	f023 0302 	bic.w	r3, r3, #2
 800a480:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a482:	4770      	bx	lr

0800a484 <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a484:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a486:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a488:	8812      	ldrh	r2, [r2, #0]
 800a48a:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a48c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a48e:	3302      	adds	r3, #2
 800a490:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a492:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a4a0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	b923      	cbnz	r3, 800a4b2 <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a4a8:	6802      	ldr	r2, [r0, #0]
 800a4aa:	6913      	ldr	r3, [r2, #16]
 800a4ac:	f023 0302 	bic.w	r3, r3, #2
 800a4b0:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a4b2:	4770      	bx	lr

0800a4b4 <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a4b4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a4b6:	6803      	ldr	r3, [r0, #0]
 800a4b8:	6812      	ldr	r2, [r2, #0]
 800a4ba:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4bc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a4be:	3304      	adds	r3, #4
 800a4c0:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800a4c2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800a4d0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	b923      	cbnz	r3, 800a4e2 <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800a4d8:	6802      	ldr	r2, [r0, #0]
 800a4da:	6913      	ldr	r3, [r2, #16]
 800a4dc:	f023 0302 	bic.w	r3, r3, #2
 800a4e0:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800a4e2:	4770      	bx	lr

0800a4e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a4e4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a4e6:	6802      	ldr	r2, [r0, #0]
 800a4e8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a4ea:	6991      	ldr	r1, [r2, #24]
 800a4ec:	f041 0108 	orr.w	r1, r1, #8
 800a4f0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a4f2:	6801      	ldr	r1, [r0, #0]
 800a4f4:	698a      	ldr	r2, [r1, #24]
 800a4f6:	f042 0210 	orr.w	r2, r2, #16
 800a4fa:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4fc:	6801      	ldr	r1, [r0, #0]
 800a4fe:	680a      	ldr	r2, [r1, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a506:	6801      	ldr	r1, [r0, #0]
 800a508:	690c      	ldr	r4, [r1, #16]
 800a50a:	4a29      	ldr	r2, [pc, #164]	; (800a5b0 <SPI_CloseTransfer+0xcc>)
 800a50c:	4022      	ands	r2, r4
 800a50e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a510:	6801      	ldr	r1, [r0, #0]
 800a512:	688a      	ldr	r2, [r1, #8]
 800a514:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a518:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a51a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	2a04      	cmp	r2, #4
 800a522:	d00d      	beq.n	800a540 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a524:	f013 0f20 	tst.w	r3, #32
 800a528:	d00a      	beq.n	800a540 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a52a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a52e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a532:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a536:	6801      	ldr	r1, [r0, #0]
 800a538:	698a      	ldr	r2, [r1, #24]
 800a53a:	f042 0220 	orr.w	r2, r2, #32
 800a53e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a540:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	2a03      	cmp	r2, #3
 800a548:	d00d      	beq.n	800a566 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a54a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a54e:	d00a      	beq.n	800a566 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a550:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a554:	f042 0204 	orr.w	r2, r2, #4
 800a558:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a55c:	6801      	ldr	r1, [r0, #0]
 800a55e:	698a      	ldr	r2, [r1, #24]
 800a560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a564:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a566:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a56a:	d00a      	beq.n	800a582 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a56c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a570:	f042 0201 	orr.w	r2, r2, #1
 800a574:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a578:	6801      	ldr	r1, [r0, #0]
 800a57a:	698a      	ldr	r2, [r1, #24]
 800a57c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a580:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a582:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a586:	d00a      	beq.n	800a59e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a588:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a58c:	f043 0308 	orr.w	r3, r3, #8
 800a590:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a594:	6802      	ldr	r2, [r0, #0]
 800a596:	6993      	ldr	r3, [r2, #24]
 800a598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a5a4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	fffffc90 	.word	0xfffffc90

0800a5b4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a5b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a5b6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a5b8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a5ba:	3008      	adds	r0, #8
 800a5bc:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800a5be:	fb03 0000 	mla	r0, r3, r0, r0
 800a5c2:	4770      	bx	lr

0800a5c4 <SPI_WaitOnFlagUntilTimeout>:
{
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460e      	mov	r6, r1
 800a5cc:	4615      	mov	r5, r2
 800a5ce:	4698      	mov	r8, r3
 800a5d0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a5d2:	e000      	b.n	800a5d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5d4:	b1c4      	cbz	r4, 800a608 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	ea36 0303 	bics.w	r3, r6, r3
 800a5de:	bf0c      	ite	eq
 800a5e0:	f04f 0c01 	moveq.w	ip, #1
 800a5e4:	f04f 0c00 	movne.w	ip, #0
 800a5e8:	45ac      	cmp	ip, r5
 800a5ea:	d10a      	bne.n	800a602 <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5ec:	f7fc fa14 	bl	8006a18 <HAL_GetTick>
 800a5f0:	eba0 0008 	sub.w	r0, r0, r8
 800a5f4:	42a0      	cmp	r0, r4
 800a5f6:	d3ed      	bcc.n	800a5d4 <SPI_WaitOnFlagUntilTimeout+0x10>
 800a5f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a5fc:	d0ea      	beq.n	800a5d4 <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800a5fe:	2003      	movs	r0, #3
 800a600:	e000      	b.n	800a604 <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800a602:	2000      	movs	r0, #0
}
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800a608:	2003      	movs	r0, #3
 800a60a:	e7fb      	b.n	800a604 <SPI_WaitOnFlagUntilTimeout+0x40>

0800a60c <HAL_SPI_Init>:
  if (hspi == NULL)
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f000 80a3 	beq.w	800a758 <HAL_SPI_Init+0x14c>
{
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a616:	2300      	movs	r3, #0
 800a618:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a61a:	6805      	ldr	r5, [r0, #0]
 800a61c:	4b52      	ldr	r3, [pc, #328]	; (800a768 <HAL_SPI_Init+0x15c>)
 800a61e:	4e53      	ldr	r6, [pc, #332]	; (800a76c <HAL_SPI_Init+0x160>)
 800a620:	429d      	cmp	r5, r3
 800a622:	bf18      	it	ne
 800a624:	42b5      	cmpne	r5, r6
 800a626:	bf14      	ite	ne
 800a628:	2601      	movne	r6, #1
 800a62a:	2600      	moveq	r6, #0
 800a62c:	d007      	beq.n	800a63e <HAL_SPI_Init+0x32>
 800a62e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a632:	429d      	cmp	r5, r3
 800a634:	d003      	beq.n	800a63e <HAL_SPI_Init+0x32>
 800a636:	68c3      	ldr	r3, [r0, #12]
 800a638:	2b0f      	cmp	r3, #15
 800a63a:	f200 808f 	bhi.w	800a75c <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff ffb8 	bl	800a5b4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a644:	b12e      	cbz	r6, 800a652 <HAL_SPI_Init+0x46>
 800a646:	4b4a      	ldr	r3, [pc, #296]	; (800a770 <HAL_SPI_Init+0x164>)
 800a648:	429d      	cmp	r5, r3
 800a64a:	d002      	beq.n	800a652 <HAL_SPI_Init+0x46>
 800a64c:	2808      	cmp	r0, #8
 800a64e:	f200 8087 	bhi.w	800a760 <HAL_SPI_Init+0x154>
 800a652:	4a45      	ldr	r2, [pc, #276]	; (800a768 <HAL_SPI_Init+0x15c>)
 800a654:	4b45      	ldr	r3, [pc, #276]	; (800a76c <HAL_SPI_Init+0x160>)
 800a656:	429d      	cmp	r5, r3
 800a658:	bf18      	it	ne
 800a65a:	4295      	cmpne	r5, r2
 800a65c:	d003      	beq.n	800a666 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a65e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a662:	429d      	cmp	r5, r3
 800a664:	d101      	bne.n	800a66a <HAL_SPI_Init+0x5e>
 800a666:	2810      	cmp	r0, #16
 800a668:	d87c      	bhi.n	800a764 <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a66a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d059      	beq.n	800a726 <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a672:	2302      	movs	r3, #2
 800a674:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a678:	6822      	ldr	r2, [r4, #0]
 800a67a:	6813      	ldr	r3, [r2, #0]
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a682:	6821      	ldr	r1, [r4, #0]
 800a684:	688a      	ldr	r2, [r1, #8]
 800a686:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a68a:	69a3      	ldr	r3, [r4, #24]
 800a68c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a690:	d04f      	beq.n	800a732 <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a692:	69e3      	ldr	r3, [r4, #28]
 800a694:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a696:	430b      	orrs	r3, r1
 800a698:	4313      	orrs	r3, r2
 800a69a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a69c:	4313      	orrs	r3, r2
 800a69e:	68e1      	ldr	r1, [r4, #12]
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	69a2      	ldr	r2, [r4, #24]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	6922      	ldr	r2, [r4, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	6962      	ldr	r2, [r4, #20]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	6a22      	ldr	r2, [r4, #32]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	68a2      	ldr	r2, [r4, #8]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	b96b      	cbnz	r3, 800a6f8 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	6893      	ldr	r3, [r2, #8]
 800a6e0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a6e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a6e8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	6893      	ldr	r3, [r2, #8]
 800a6ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a6f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6f6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a708:	d006      	beq.n	800a718 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	68d3      	ldr	r3, [r2, #12]
 800a70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a712:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a714:	430b      	orrs	r3, r1
 800a716:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a718:	2000      	movs	r0, #0
 800a71a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a71e:	2301      	movs	r3, #1
 800a720:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a724:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800a726:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7f8 f88a 	bl	8002844 <HAL_SPI_MspInit>
 800a730:	e79f      	b.n	800a672 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a738:	d006      	beq.n	800a748 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1a9      	bne.n	800a692 <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a73e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a744:	d1a5      	bne.n	800a692 <HAL_SPI_Init+0x86>
 800a746:	e002      	b.n	800a74e <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a748:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d1f5      	bne.n	800a73a <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a74e:	680b      	ldr	r3, [r1, #0]
 800a750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a754:	600b      	str	r3, [r1, #0]
 800a756:	e79c      	b.n	800a692 <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800a758:	2001      	movs	r0, #1
}
 800a75a:	4770      	bx	lr
    return HAL_ERROR;
 800a75c:	2001      	movs	r0, #1
 800a75e:	e7e1      	b.n	800a724 <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800a760:	2001      	movs	r0, #1
 800a762:	e7df      	b.n	800a724 <HAL_SPI_Init+0x118>
 800a764:	2001      	movs	r0, #1
 800a766:	e7dd      	b.n	800a724 <HAL_SPI_Init+0x118>
 800a768:	40013000 	.word	0x40013000
 800a76c:	40003800 	.word	0x40003800
 800a770:	40003c00 	.word	0x40003c00

0800a774 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800a774:	b198      	cbz	r0, 800a79e <HAL_SPI_DeInit+0x2a>
{
 800a776:	b510      	push	{r4, lr}
 800a778:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800a77a:	2302      	movs	r3, #2
 800a77c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a780:	6802      	ldr	r2, [r0, #0]
 800a782:	6813      	ldr	r3, [r2, #0]
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800a78a:	f7f8 f8c7 	bl	800291c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a78e:	2000      	movs	r0, #0
 800a790:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800a794:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800a798:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a79c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a79e:	2001      	movs	r0, #1
}
 800a7a0:	4770      	bx	lr

0800a7a2 <HAL_SPI_TransmitReceive>:
{
 800a7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	461d      	mov	r5, r3
 800a7aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a7ac:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800a7b0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	f000 8179 	beq.w	800aaac <HAL_SPI_TransmitReceive+0x30a>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4688      	mov	r8, r1
 800a7be:	4691      	mov	r9, r2
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800a7c6:	f7fc f927 	bl	8006a18 <HAL_GetTick>
 800a7ca:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800a7cc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a7d0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800a7d2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d007      	beq.n	800a7e8 <HAL_SPI_TransmitReceive+0x46>
 800a7d8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a7dc:	d13d      	bne.n	800a85a <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a7de:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a7e0:	2a00      	cmp	r2, #0
 800a7e2:	d13a      	bne.n	800a85a <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d138      	bne.n	800a85a <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a7e8:	f1b9 0f00 	cmp.w	r9, #0
 800a7ec:	bf18      	it	ne
 800a7ee:	f1b8 0f00 	cmpne.w	r8, #0
 800a7f2:	d039      	beq.n	800a868 <HAL_SPI_TransmitReceive+0xc6>
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	d037      	beq.n	800a868 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7f8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d002      	beq.n	800a808 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a802:	2305      	movs	r3, #5
 800a804:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a808:	2300      	movs	r3, #0
 800a80a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a80e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a812:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a816:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a81a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a81e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a822:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800a826:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a828:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	6851      	ldr	r1, [r2, #4]
 800a82e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800a832:	400b      	ands	r3, r1
 800a834:	432b      	orrs	r3, r5
 800a836:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800a838:	6822      	ldr	r2, [r4, #0]
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	f043 0301 	orr.w	r3, r3, #1
 800a840:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a848:	d013      	beq.n	800a872 <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	2b0f      	cmp	r3, #15
 800a84e:	d868      	bhi.n	800a922 <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a850:	2b07      	cmp	r3, #7
 800a852:	f200 80bb 	bhi.w	800a9cc <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800a856:	46a8      	mov	r8, r5
 800a858:	e0c4      	b.n	800a9e4 <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800a85a:	2300      	movs	r3, #0
 800a85c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a860:	2002      	movs	r0, #2
}
 800a862:	b002      	add	sp, #8
 800a864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800a868:	2300      	movs	r3, #0
 800a86a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a86e:	2001      	movs	r0, #1
 800a870:	e7f7      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a872:	6822      	ldr	r2, [r4, #0]
 800a874:	6813      	ldr	r3, [r2, #0]
 800a876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	e7e5      	b.n	800a84a <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	6959      	ldr	r1, [r3, #20]
 800a882:	f248 0208 	movw	r2, #32776	; 0x8008
 800a886:	4211      	tst	r1, r2
 800a888:	d013      	beq.n	800a8b2 <HAL_SPI_TransmitReceive+0x110>
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	d010      	beq.n	800a8b2 <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a890:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a898:	3304      	adds	r3, #4
 800a89a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800a89c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a8aa:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800a8ae:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b2:	f7fc f8b1 	bl	8006a18 <HAL_GetTick>
 800a8b6:	1bc0      	subs	r0, r0, r7
 800a8b8:	42b0      	cmp	r0, r6
 800a8ba:	d302      	bcc.n	800a8c2 <HAL_SPI_TransmitReceive+0x120>
 800a8bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8c0:	d11e      	bne.n	800a900 <HAL_SPI_TransmitReceive+0x15e>
 800a8c2:	b1ee      	cbz	r6, 800a900 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a8c4:	ea45 0308 	orr.w	r3, r5, r8
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 80d2 	beq.w	800aa74 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	695a      	ldr	r2, [r3, #20]
 800a8d4:	f012 0f02 	tst.w	r2, #2
 800a8d8:	d0d1      	beq.n	800a87e <HAL_SPI_TransmitReceive+0xdc>
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	d0cf      	beq.n	800a87e <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a8de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800a8ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a8f8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800a8fc:	b2ad      	uxth	r5, r5
 800a8fe:	e7be      	b.n	800a87e <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800a900:	4620      	mov	r0, r4
 800a902:	f7ff fdef 	bl	800a4e4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800a906:	2300      	movs	r3, #0
 800a908:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a90c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a914:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a918:	2301      	movs	r3, #1
 800a91a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800a91e:	2003      	movs	r0, #3
 800a920:	e79f      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800a922:	46a8      	mov	r8, r5
 800a924:	e7ce      	b.n	800a8c4 <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a926:	f7fc f877 	bl	8006a18 <HAL_GetTick>
 800a92a:	1bc0      	subs	r0, r0, r7
 800a92c:	42b0      	cmp	r0, r6
 800a92e:	d302      	bcc.n	800a936 <HAL_SPI_TransmitReceive+0x194>
 800a930:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a934:	d139      	bne.n	800a9aa <HAL_SPI_TransmitReceive+0x208>
 800a936:	2e00      	cmp	r6, #0
 800a938:	d037      	beq.n	800a9aa <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a93a:	ea45 0308 	orr.w	r3, r5, r8
 800a93e:	b29b      	uxth	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8097 	beq.w	800aa74 <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	f013 0f02 	tst.w	r3, #2
 800a94e:	d011      	beq.n	800a974 <HAL_SPI_TransmitReceive+0x1d2>
 800a950:	b185      	cbz	r5, 800a974 <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a952:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a95a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a95c:	3302      	adds	r3, #2
 800a95e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800a960:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a964:	b29b      	uxth	r3, r3
 800a966:	3b01      	subs	r3, #1
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a96e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800a972:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	f013 0f01 	tst.w	r3, #1
 800a97c:	d0d3      	beq.n	800a926 <HAL_SPI_TransmitReceive+0x184>
 800a97e:	f1b8 0f00 	cmp.w	r8, #0
 800a982:	d0d0      	beq.n	800a926 <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a986:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800a98a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a98c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a98e:	3302      	adds	r3, #2
 800a990:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800a992:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a9a0:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800a9a4:	fa1f f888 	uxth.w	r8, r8
 800a9a8:	e7bd      	b.n	800a926 <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff fd9a 	bl	800a4e4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a9ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800a9c8:	2003      	movs	r0, #3
 800a9ca:	e74a      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800a9cc:	46a8      	mov	r8, r5
 800a9ce:	e7b4      	b.n	800a93a <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9d0:	f7fc f822 	bl	8006a18 <HAL_GetTick>
 800a9d4:	1bc0      	subs	r0, r0, r7
 800a9d6:	42b0      	cmp	r0, r6
 800a9d8:	d302      	bcc.n	800a9e0 <HAL_SPI_TransmitReceive+0x23e>
 800a9da:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a9de:	d138      	bne.n	800aa52 <HAL_SPI_TransmitReceive+0x2b0>
 800a9e0:	2e00      	cmp	r6, #0
 800a9e2:	d036      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a9e4:	ea45 0308 	orr.w	r3, r5, r8
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d042      	beq.n	800aa74 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	695a      	ldr	r2, [r3, #20]
 800a9f2:	f012 0f02 	tst.w	r2, #2
 800a9f6:	d011      	beq.n	800aa1c <HAL_SPI_TransmitReceive+0x27a>
 800a9f8:	b185      	cbz	r5, 800aa1c <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a9fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a9fc:	7812      	ldrb	r2, [r2, #0]
 800a9fe:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa04:	3301      	adds	r3, #1
 800aa06:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800aa08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa16:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800aa1a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	f012 0f01 	tst.w	r2, #1
 800aa24:	d0d4      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x22e>
 800aa26:	f1b8 0f00 	cmp.w	r8, #0
 800aa2a:	d0d1      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa32:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa36:	3301      	adds	r3, #1
 800aa38:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800aa3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800aa48:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800aa4c:	fa1f f888 	uxth.w	r8, r8
 800aa50:	e7be      	b.n	800a9d0 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff fd46 	bl	800a4e4 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa5e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa66:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800aa70:	2003      	movs	r0, #3
 800aa72:	e6f6      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800aa74:	9600      	str	r6, [sp, #0]
 800aa76:	463b      	mov	r3, r7
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2108      	movs	r1, #8
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7ff fda1 	bl	800a5c4 <SPI_WaitOnFlagUntilTimeout>
 800aa82:	b128      	cbz	r0, 800aa90 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa88:	f043 0320 	orr.w	r3, r3, #32
 800aa8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7ff fd27 	bl	800a4e4 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800aa96:	2300      	movs	r3, #0
 800aa98:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaa2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aaa6:	b91b      	cbnz	r3, 800aab0 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	e6da      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800aaac:	2002      	movs	r0, #2
 800aaae:	e6d8      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800aab0:	2001      	movs	r0, #1
 800aab2:	e6d6      	b.n	800a862 <HAL_SPI_TransmitReceive+0xc0>

0800aab4 <HAL_SPI_Receive>:
{
 800aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	4604      	mov	r4, r0
 800aabc:	468a      	mov	sl, r1
 800aabe:	4691      	mov	r9, r2
 800aac0:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aac2:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800aac6:	6843      	ldr	r3, [r0, #4]
 800aac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aacc:	d042      	beq.n	800ab54 <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800aace:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	f000 810c 	beq.w	800acf0 <HAL_SPI_Receive+0x23c>
 800aad8:	2301      	movs	r3, #1
 800aada:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800aade:	f7fb ff9b 	bl	8006a18 <HAL_GetTick>
 800aae2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800aae4:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800aae8:	b2f6      	uxtb	r6, r6
 800aaea:	2e01      	cmp	r6, #1
 800aaec:	d13f      	bne.n	800ab6e <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800aaee:	f1b9 0f00 	cmp.w	r9, #0
 800aaf2:	bf18      	it	ne
 800aaf4:	f1ba 0f00 	cmpne.w	sl, #0
 800aaf8:	d041      	beq.n	800ab7e <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aafa:	2304      	movs	r3, #4
 800aafc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab06:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ab0a:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ab0e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800ab12:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ab14:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab18:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ab1c:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ab1e:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab20:	68a3      	ldr	r3, [r4, #8]
 800ab22:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ab26:	d02e      	beq.n	800ab86 <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	6859      	ldr	r1, [r3, #4]
 800ab2c:	4a71      	ldr	r2, [pc, #452]	; (800acf4 <HAL_SPI_Receive+0x240>)
 800ab2e:	400a      	ands	r2, r1
 800ab30:	ea49 0202 	orr.w	r2, r9, r2
 800ab34:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	6813      	ldr	r3, [r2, #0]
 800ab3a:	f043 0301 	orr.w	r3, r3, #1
 800ab3e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab46:	d024      	beq.n	800ab92 <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ab48:	68e3      	ldr	r3, [r4, #12]
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d830      	bhi.n	800abb0 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab4e:	2b07      	cmp	r3, #7
 800ab50:	d862      	bhi.n	800ac18 <HAL_SPI_Receive+0x164>
 800ab52:	e094      	b.n	800ac7e <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab54:	6883      	ldr	r3, [r0, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1b9      	bne.n	800aace <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ab5a:	2304      	movs	r3, #4
 800ab5c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ab60:	9500      	str	r5, [sp, #0]
 800ab62:	4613      	mov	r3, r2
 800ab64:	460a      	mov	r2, r1
 800ab66:	f7ff fe1c 	bl	800a7a2 <HAL_SPI_TransmitReceive>
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	e003      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800ab74:	2602      	movs	r6, #2
}
 800ab76:	4630      	mov	r0, r6
 800ab78:	b002      	add	sp, #8
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800ab84:	e7f7      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800ab86:	6822      	ldr	r2, [r4, #0]
 800ab88:	6813      	ldr	r3, [r2, #0]
 800ab8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	e7ca      	b.n	800ab28 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab92:	6822      	ldr	r2, [r4, #0]
 800ab94:	6813      	ldr	r3, [r2, #0]
 800ab96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	e7d4      	b.n	800ab48 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab9e:	f7fb ff3b 	bl	8006a18 <HAL_GetTick>
 800aba2:	1bc0      	subs	r0, r0, r7
 800aba4:	42a8      	cmp	r0, r5
 800aba6:	d302      	bcc.n	800abae <HAL_SPI_Receive+0xfa>
 800aba8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800abac:	d11a      	bne.n	800abe4 <HAL_SPI_Receive+0x130>
 800abae:	b1cd      	cbz	r5, 800abe4 <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800abb0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 808a 	beq.w	800acd0 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	6959      	ldr	r1, [r3, #20]
 800abc0:	f248 0208 	movw	r2, #32776	; 0x8008
 800abc4:	4211      	tst	r1, r2
 800abc6:	d0ea      	beq.n	800ab9e <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800abc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800abce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abd0:	3304      	adds	r3, #4
 800abd2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800abd4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800abd8:	b292      	uxth	r2, r2
 800abda:	3a01      	subs	r2, #1
 800abdc:	b292      	uxth	r2, r2
 800abde:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800abe2:	e7e5      	b.n	800abb0 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7ff fc7d 	bl	800a4e4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800abea:	2300      	movs	r3, #0
 800abec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abf0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800abf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800ac02:	2603      	movs	r6, #3
 800ac04:	e7b7      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac06:	f7fb ff07 	bl	8006a18 <HAL_GetTick>
 800ac0a:	1bc0      	subs	r0, r0, r7
 800ac0c:	42a8      	cmp	r0, r5
 800ac0e:	d302      	bcc.n	800ac16 <HAL_SPI_Receive+0x162>
 800ac10:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac14:	d119      	bne.n	800ac4a <HAL_SPI_Receive+0x196>
 800ac16:	b1c5      	cbz	r5, 800ac4a <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800ac18:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d056      	beq.n	800acd0 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f013 0f01 	tst.w	r3, #1
 800ac2a:	d0ec      	beq.n	800ac06 <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac2e:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800ac32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac36:	3302      	adds	r3, #2
 800ac38:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ac3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	3b01      	subs	r3, #1
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ac48:	e7e6      	b.n	800ac18 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7ff fc4a 	bl	800a4e4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800ac50:	2300      	movs	r3, #0
 800ac52:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ac5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac5e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800ac68:	2603      	movs	r6, #3
 800ac6a:	e784      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac6c:	f7fb fed4 	bl	8006a18 <HAL_GetTick>
 800ac70:	1bc0      	subs	r0, r0, r7
 800ac72:	42a8      	cmp	r0, r5
 800ac74:	d302      	bcc.n	800ac7c <HAL_SPI_Receive+0x1c8>
 800ac76:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac7a:	d118      	bne.n	800acae <HAL_SPI_Receive+0x1fa>
 800ac7c:	b1bd      	cbz	r5, 800acae <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800ac7e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	b323      	cbz	r3, 800acd0 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	695a      	ldr	r2, [r3, #20]
 800ac8a:	f012 0f01 	tst.w	r2, #1
 800ac8e:	d0ed      	beq.n	800ac6c <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac90:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac96:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ac9e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800acac:	e7e7      	b.n	800ac7e <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff fc18 	bl	800a4e4 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800acb4:	2300      	movs	r3, #0
 800acb6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800acbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800accc:	2603      	movs	r6, #3
 800acce:	e752      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800acd0:	4620      	mov	r0, r4
 800acd2:	f7ff fc07 	bl	800a4e4 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800acd6:	2300      	movs	r3, #0
 800acd8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800acdc:	2301      	movs	r3, #1
 800acde:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ace2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f47f af45 	bne.w	800ab76 <HAL_SPI_Receive+0xc2>
  return errorcode;
 800acec:	2600      	movs	r6, #0
 800acee:	e742      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800acf0:	2602      	movs	r6, #2
 800acf2:	e740      	b.n	800ab76 <HAL_SPI_Receive+0xc2>
 800acf4:	ffff0000 	.word	0xffff0000

0800acf8 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800acf8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d060      	beq.n	800adc2 <HAL_SPI_Transmit_IT+0xca>
 800ad00:	2301      	movs	r3, #1
 800ad02:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800ad06:	2a00      	cmp	r2, #0
 800ad08:	bf18      	it	ne
 800ad0a:	2900      	cmpne	r1, #0
 800ad0c:	d03b      	beq.n	800ad86 <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ad0e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d13b      	bne.n	800ad90 <HAL_SPI_Transmit_IT+0x98>
{
 800ad18:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad20:	2300      	movs	r3, #0
 800ad22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad26:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ad28:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ad2c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800ad30:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ad32:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad36:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800ad3a:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad3c:	68c3      	ldr	r3, [r0, #12]
 800ad3e:	2b0f      	cmp	r3, #15
 800ad40:	d92b      	bls.n	800ad9a <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <HAL_SPI_Transmit_IT+0xd0>)
 800ad44:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad46:	6883      	ldr	r3, [r0, #8]
 800ad48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad4c:	d02d      	beq.n	800adaa <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad4e:	6801      	ldr	r1, [r0, #0]
 800ad50:	684c      	ldr	r4, [r1, #4]
 800ad52:	4b1e      	ldr	r3, [pc, #120]	; (800adcc <HAL_SPI_Transmit_IT+0xd4>)
 800ad54:	4023      	ands	r3, r4
 800ad56:	431a      	orrs	r2, r3
 800ad58:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800ad5a:	6802      	ldr	r2, [r0, #0]
 800ad5c:	6813      	ldr	r3, [r2, #0]
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800ad64:	6802      	ldr	r2, [r0, #0]
 800ad66:	6911      	ldr	r1, [r2, #16]
 800ad68:	f240 732a 	movw	r3, #1834	; 0x72a
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad70:	6843      	ldr	r3, [r0, #4]
 800ad72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad76:	d01e      	beq.n	800adb6 <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800ad7e:	4618      	mov	r0, r3
}
 800ad80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad84:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ad86:	2300      	movs	r3, #0
 800ad88:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ad90:	2300      	movs	r3, #0
 800ad92:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ad96:	2002      	movs	r0, #2
 800ad98:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad9a:	2b07      	cmp	r3, #7
 800ad9c:	d902      	bls.n	800ada4 <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800ad9e:	4b0c      	ldr	r3, [pc, #48]	; (800add0 <HAL_SPI_Transmit_IT+0xd8>)
 800ada0:	6743      	str	r3, [r0, #116]	; 0x74
 800ada2:	e7d0      	b.n	800ad46 <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800ada4:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <HAL_SPI_Transmit_IT+0xdc>)
 800ada6:	6743      	str	r3, [r0, #116]	; 0x74
 800ada8:	e7cd      	b.n	800ad46 <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800adaa:	6801      	ldr	r1, [r0, #0]
 800adac:	680b      	ldr	r3, [r1, #0]
 800adae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800adb2:	600b      	str	r3, [r1, #0]
 800adb4:	e7cb      	b.n	800ad4e <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800adb6:	6802      	ldr	r2, [r0, #0]
 800adb8:	6813      	ldr	r3, [r2, #0]
 800adba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	e7da      	b.n	800ad78 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800adc2:	2002      	movs	r0, #2
}
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	0800a4b5 	.word	0x0800a4b5
 800adcc:	ffff0000 	.word	0xffff0000
 800add0:	0800a485 	.word	0x0800a485
 800add4:	0800a453 	.word	0x0800a453

0800add8 <HAL_SPI_TransmitReceive_IT>:
{
 800add8:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800adda:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800addc:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800ade0:	f1bc 0f01 	cmp.w	ip, #1
 800ade4:	f000 8101 	beq.w	800afea <HAL_SPI_TransmitReceive_IT+0x212>
 800ade8:	f04f 0c01 	mov.w	ip, #1
 800adec:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800adf0:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800adf4:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800adf8:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800adfa:	f1bc 0f01 	cmp.w	ip, #1
 800adfe:	d008      	beq.n	800ae12 <HAL_SPI_TransmitReceive_IT+0x3a>
 800ae00:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800ae04:	d136      	bne.n	800ae74 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ae06:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	d133      	bne.n	800ae74 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ae0c:	f1bc 0f04 	cmp.w	ip, #4
 800ae10:	d130      	bne.n	800ae74 <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	bf18      	it	ne
 800ae16:	2900      	cmpne	r1, #0
 800ae18:	d032      	beq.n	800ae80 <HAL_SPI_TransmitReceive_IT+0xa8>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d030      	beq.n	800ae80 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae1e:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800ae22:	b2ed      	uxtb	r5, r5
 800ae24:	2d04      	cmp	r5, #4
 800ae26:	d002      	beq.n	800ae2e <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae28:	2505      	movs	r5, #5
 800ae2a:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae2e:	2500      	movs	r5, #0
 800ae30:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae34:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ae36:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ae3a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae3e:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ae40:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ae44:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800ae48:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ae4c:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ae4e:	68c1      	ldr	r1, [r0, #12]
 800ae50:	290f      	cmp	r1, #15
 800ae52:	d91a      	bls.n	800ae8a <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800ae54:	4966      	ldr	r1, [pc, #408]	; (800aff0 <HAL_SPI_TransmitReceive_IT+0x218>)
 800ae56:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800ae58:	4966      	ldr	r1, [pc, #408]	; (800aff4 <HAL_SPI_TransmitReceive_IT+0x21c>)
 800ae5a:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae5c:	6865      	ldr	r5, [r4, #4]
 800ae5e:	4966      	ldr	r1, [pc, #408]	; (800aff8 <HAL_SPI_TransmitReceive_IT+0x220>)
 800ae60:	4029      	ands	r1, r5
 800ae62:	430b      	orrs	r3, r1
 800ae64:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800ae66:	6801      	ldr	r1, [r0, #0]
 800ae68:	680b      	ldr	r3, [r1, #0]
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800ae70:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800ae72:	e041      	b.n	800aef8 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800ae74:	2300      	movs	r3, #0
 800ae76:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ae7a:	2002      	movs	r0, #2
}
 800ae7c:	bc30      	pop	{r4, r5}
 800ae7e:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ae80:	2300      	movs	r3, #0
 800ae82:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7f8      	b.n	800ae7c <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae8a:	2907      	cmp	r1, #7
 800ae8c:	d904      	bls.n	800ae98 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800ae8e:	495b      	ldr	r1, [pc, #364]	; (800affc <HAL_SPI_TransmitReceive_IT+0x224>)
 800ae90:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800ae92:	495b      	ldr	r1, [pc, #364]	; (800b000 <HAL_SPI_TransmitReceive_IT+0x228>)
 800ae94:	6741      	str	r1, [r0, #116]	; 0x74
 800ae96:	e7e1      	b.n	800ae5c <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800ae98:	495a      	ldr	r1, [pc, #360]	; (800b004 <HAL_SPI_TransmitReceive_IT+0x22c>)
 800ae9a:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800ae9c:	495a      	ldr	r1, [pc, #360]	; (800b008 <HAL_SPI_TransmitReceive_IT+0x230>)
 800ae9e:	6741      	str	r1, [r0, #116]	; 0x74
 800aea0:	e7dc      	b.n	800ae5c <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	d945      	bls.n	800af32 <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aea6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d912      	bls.n	800aed6 <HAL_SPI_TransmitReceive_IT+0xfe>
 800aeb0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800aeb2:	b183      	cbz	r3, 800aed6 <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aeb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aeba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800aebc:	3304      	adds	r3, #4
 800aebe:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aec0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b02      	subs	r3, #2
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800aece:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800aed2:	b292      	uxth	r2, r2
 800aed4:	e00f      	b.n	800aef6 <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aed6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aedc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800aede:	3302      	adds	r3, #2
 800aee0:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800aee2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800aef0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800aef4:	b292      	uxth	r2, r2
      max_fifo_length++;
 800aef6:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800aef8:	6805      	ldr	r5, [r0, #0]
 800aefa:	696b      	ldr	r3, [r5, #20]
 800aefc:	f013 0f02 	tst.w	r3, #2
 800af00:	d05f      	beq.n	800afc2 <HAL_SPI_TransmitReceive_IT+0x1ea>
 800af02:	2a00      	cmp	r2, #0
 800af04:	d05d      	beq.n	800afc2 <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800af06:	290f      	cmp	r1, #15
 800af08:	d856      	bhi.n	800afb8 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af0a:	68c3      	ldr	r3, [r0, #12]
 800af0c:	2b0f      	cmp	r3, #15
 800af0e:	d9c8      	bls.n	800aea2 <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800af16:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af18:	3304      	adds	r3, #4
 800af1a:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800af1c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af20:	b29b      	uxth	r3, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	b29b      	uxth	r3, r3
 800af26:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800af2a:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af2e:	b292      	uxth	r2, r2
 800af30:	e7e1      	b.n	800aef6 <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800af32:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b03      	cmp	r3, #3
 800af3a:	d913      	bls.n	800af64 <HAL_SPI_TransmitReceive_IT+0x18c>
 800af3c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af3e:	2b40      	cmp	r3, #64	; 0x40
 800af40:	d910      	bls.n	800af64 <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800af42:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800af48:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af4a:	3304      	adds	r3, #4
 800af4c:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800af4e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af52:	b29b      	uxth	r3, r3
 800af54:	3b04      	subs	r3, #4
 800af56:	b29b      	uxth	r3, r3
 800af58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800af5c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af60:	b292      	uxth	r2, r2
 800af62:	e7c8      	b.n	800aef6 <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800af64:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af68:	b29b      	uxth	r3, r3
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d912      	bls.n	800af94 <HAL_SPI_TransmitReceive_IT+0x1bc>
 800af6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af70:	b183      	cbz	r3, 800af94 <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800af72:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800af78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af7a:	3302      	adds	r3, #2
 800af7c:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800af7e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af82:	b29b      	uxth	r3, r3
 800af84:	3b02      	subs	r3, #2
 800af86:	b29b      	uxth	r3, r3
 800af88:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800af8c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800af90:	b292      	uxth	r2, r2
 800af92:	e7b0      	b.n	800aef6 <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800af94:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800af9c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800af9e:	3301      	adds	r3, #1
 800afa0:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800afa2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	3b01      	subs	r3, #1
 800afaa:	b29b      	uxth	r3, r3
 800afac:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800afb0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800afb4:	b292      	uxth	r2, r2
 800afb6:	e79e      	b.n	800aef6 <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800afb8:	2300      	movs	r3, #0
 800afba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800afbe:	2002      	movs	r0, #2
 800afc0:	e75c      	b.n	800ae7c <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800afc2:	692a      	ldr	r2, [r5, #16]
 800afc4:	f240 736c 	movw	r3, #1900	; 0x76c
 800afc8:	4313      	orrs	r3, r2
 800afca:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afcc:	6843      	ldr	r3, [r0, #4]
 800afce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afd2:	d004      	beq.n	800afde <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800afd4:	2300      	movs	r3, #0
 800afd6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800afda:	4618      	mov	r0, r3
 800afdc:	e74e      	b.n	800ae7c <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800afde:	6802      	ldr	r2, [r0, #0]
 800afe0:	6813      	ldr	r3, [r2, #0]
 800afe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	e7f4      	b.n	800afd4 <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800afea:	2002      	movs	r0, #2
 800afec:	e746      	b.n	800ae7c <HAL_SPI_TransmitReceive_IT+0xa4>
 800afee:	bf00      	nop
 800aff0:	0800a4b5 	.word	0x0800a4b5
 800aff4:	0800a423 	.word	0x0800a423
 800aff8:	ffff0000 	.word	0xffff0000
 800affc:	0800a3f3 	.word	0x0800a3f3
 800b000:	0800a485 	.word	0x0800a485
 800b004:	0800a3c1 	.word	0x0800a3c1
 800b008:	0800a453 	.word	0x0800a453

0800b00c <HAL_SPI_Receive_IT>:
{
 800b00c:	b510      	push	{r4, lr}
 800b00e:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b010:	6884      	ldr	r4, [r0, #8]
 800b012:	b91c      	cbnz	r4, 800b01c <HAL_SPI_Receive_IT+0x10>
 800b014:	6843      	ldr	r3, [r0, #4]
 800b016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b01a:	d04a      	beq.n	800b0b2 <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800b01c:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800b020:	2b01      	cmp	r3, #1
 800b022:	d06f      	beq.n	800b104 <HAL_SPI_Receive_IT+0xf8>
 800b024:	2301      	movs	r3, #1
 800b026:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b02a:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800b02e:	b2c0      	uxtb	r0, r0
 800b030:	4298      	cmp	r0, r3
 800b032:	d146      	bne.n	800b0c2 <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800b034:	2a00      	cmp	r2, #0
 800b036:	bf18      	it	ne
 800b038:	2900      	cmpne	r1, #0
 800b03a:	d047      	beq.n	800b0cc <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b03c:	2304      	movs	r3, #4
 800b03e:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b042:	2300      	movs	r3, #0
 800b044:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b048:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800b04c:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800b050:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800b054:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b058:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b05c:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b060:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b064:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b068:	2b0f      	cmp	r3, #15
 800b06a:	d933      	bls.n	800b0d4 <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800b06c:	4b26      	ldr	r3, [pc, #152]	; (800b108 <HAL_SPI_Receive_IT+0xfc>)
 800b06e:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b072:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800b076:	d037      	beq.n	800b0e8 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b078:	f8dc 1000 	ldr.w	r1, [ip]
 800b07c:	6848      	ldr	r0, [r1, #4]
 800b07e:	4b23      	ldr	r3, [pc, #140]	; (800b10c <HAL_SPI_Receive_IT+0x100>)
 800b080:	4003      	ands	r3, r0
 800b082:	431a      	orrs	r2, r3
 800b084:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800b086:	f8dc 2000 	ldr.w	r2, [ip]
 800b08a:	6813      	ldr	r3, [r2, #0]
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800b092:	f8dc 2000 	ldr.w	r2, [ip]
 800b096:	6911      	ldr	r1, [r2, #16]
 800b098:	f240 7349 	movw	r3, #1865	; 0x749
 800b09c:	430b      	orrs	r3, r1
 800b09e:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b0a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0a8:	d025      	beq.n	800b0f6 <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800b0b0:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0b2:	2304      	movs	r3, #4
 800b0b4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	f7ff fe8c 	bl	800add8 <HAL_SPI_TransmitReceive_IT>
 800b0c0:	e7f6      	b.n	800b0b0 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800b0c8:	2002      	movs	r0, #2
 800b0ca:	e7f1      	b.n	800b0b0 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800b0d2:	e7ed      	b.n	800b0b0 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0d4:	2b07      	cmp	r3, #7
 800b0d6:	d903      	bls.n	800b0e0 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <HAL_SPI_Receive_IT+0x104>)
 800b0da:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800b0de:	e7c8      	b.n	800b072 <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <HAL_SPI_Receive_IT+0x108>)
 800b0e2:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800b0e6:	e7c4      	b.n	800b072 <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800b0e8:	f8dc 1000 	ldr.w	r1, [ip]
 800b0ec:	680b      	ldr	r3, [r1, #0]
 800b0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0f2:	600b      	str	r3, [r1, #0]
 800b0f4:	e7c0      	b.n	800b078 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b0f6:	f8dc 2000 	ldr.w	r2, [ip]
 800b0fa:	6813      	ldr	r3, [r2, #0]
 800b0fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	e7d2      	b.n	800b0aa <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800b104:	2002      	movs	r0, #2
 800b106:	e7d3      	b.n	800b0b0 <HAL_SPI_Receive_IT+0xa4>
 800b108:	0800a423 	.word	0x0800a423
 800b10c:	ffff0000 	.word	0xffff0000
 800b110:	0800a3f3 	.word	0x0800a3f3
 800b114:	0800a3c1 	.word	0x0800a3c1

0800b118 <HAL_SPI_TxRxCpltCallback>:
}
 800b118:	4770      	bx	lr

0800b11a <HAL_SPI_ErrorCallback>:
}
 800b11a:	4770      	bx	lr

0800b11c <HAL_SPI_IRQHandler>:
{
 800b11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b122:	6806      	ldr	r6, [r0, #0]
 800b124:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b128:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800b12c:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b130:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800b134:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800b138:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b13a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d03b      	beq.n	800b1ba <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800b142:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b144:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800b148:	f1b8 0f01 	cmp.w	r8, #1
 800b14c:	d03c      	beq.n	800b1c8 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b14e:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800b152:	2a02      	cmp	r2, #2
 800b154:	d03d      	beq.n	800b1d2 <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800b156:	2b00      	cmp	r3, #0
 800b158:	d13e      	bne.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b15a:	f015 0f08 	tst.w	r5, #8
 800b15e:	d071      	beq.n	800b244 <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	6993      	ldr	r3, [r2, #24]
 800b164:	f043 0308 	orr.w	r3, r3, #8
 800b168:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	6993      	ldr	r3, [r2, #24]
 800b16e:	f043 0310 	orr.w	r3, r3, #16
 800b172:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	6993      	ldr	r3, [r2, #24]
 800b178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b17c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	6913      	ldr	r3, [r2, #16]
 800b182:	f023 0308 	bic.w	r3, r3, #8
 800b186:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b190:	d033      	beq.n	800b1fa <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff f9a6 	bl	800a4e4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b198:	2301      	movs	r3, #1
 800b19a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b19e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d142      	bne.n	800b22c <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b1a6:	2f05      	cmp	r7, #5
 800b1a8:	d044      	beq.n	800b234 <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b1aa:	2f04      	cmp	r7, #4
 800b1ac:	d046      	beq.n	800b23c <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b1ae:	2f03      	cmp	r7, #3
 800b1b0:	d112      	bne.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7f7 f8ce 	bl	8002354 <HAL_SPI_TxCpltCallback>
    return;
 800b1b8:	e00e      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800b1ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b1bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b1be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	4798      	blx	r3
    handled = 1UL;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e7bd      	b.n	800b144 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800b1c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4798      	blx	r3
    handled = 1UL;
 800b1ce:	4643      	mov	r3, r8
 800b1d0:	e7bd      	b.n	800b14e <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800b1d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4798      	blx	r3
}
 800b1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1dc:	2b07      	cmp	r3, #7
 800b1de:	d91c      	bls.n	800b21a <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e2:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800b1e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b1ec:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b1fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0c6      	beq.n	800b192 <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b204:	68e3      	ldr	r3, [r4, #12]
 800b206:	2b0f      	cmp	r3, #15
 800b208:	d9e8      	bls.n	800b1dc <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b20e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b210:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b214:	3304      	adds	r3, #4
 800b216:	6663      	str	r3, [r4, #100]	; 0x64
 800b218:	e7e8      	b.n	800b1ec <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b21a:	6822      	ldr	r2, [r4, #0]
 800b21c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b21e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b222:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b226:	3301      	adds	r3, #1
 800b228:	6663      	str	r3, [r4, #100]	; 0x64
 800b22a:	e7df      	b.n	800b1ec <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800b22c:	4620      	mov	r0, r4
 800b22e:	f7ff ff74 	bl	800b11a <HAL_SPI_ErrorCallback>
      return;
 800b232:	e7d1      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b234:	4620      	mov	r0, r4
 800b236:	f7ff ff6f 	bl	800b118 <HAL_SPI_TxRxCpltCallback>
 800b23a:	e7cd      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800b23c:	4620      	mov	r0, r4
 800b23e:	f7f7 f87f 	bl	8002340 <HAL_SPI_RxCpltCallback>
 800b242:	e7c9      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b244:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b248:	d002      	beq.n	800b250 <HAL_SPI_IRQHandler+0x134>
 800b24a:	f01a 0f08 	tst.w	sl, #8
 800b24e:	d173      	bne.n	800b338 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b250:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b254:	d0c0      	beq.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b256:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b25a:	d00a      	beq.n	800b272 <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b25c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b260:	f043 0304 	orr.w	r3, r3, #4
 800b264:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	6993      	ldr	r3, [r2, #24]
 800b26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b270:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b272:	f415 7f00 	tst.w	r5, #512	; 0x200
 800b276:	d00a      	beq.n	800b28e <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b278:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b27c:	f043 0301 	orr.w	r3, r3, #1
 800b280:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b284:	6822      	ldr	r2, [r4, #0]
 800b286:	6993      	ldr	r3, [r2, #24]
 800b288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b28c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b28e:	f415 7f80 	tst.w	r5, #256	; 0x100
 800b292:	d00a      	beq.n	800b2aa <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b294:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b298:	f043 0308 	orr.w	r3, r3, #8
 800b29c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	6993      	ldr	r3, [r2, #24]
 800b2a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2a8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b2aa:	f015 0f20 	tst.w	r5, #32
 800b2ae:	d00a      	beq.n	800b2c6 <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b2b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b2bc:	6822      	ldr	r2, [r4, #0]
 800b2be:	6993      	ldr	r3, [r2, #24]
 800b2c0:	f043 0320 	orr.w	r3, r3, #32
 800b2c4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d084      	beq.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800b2ce:	6822      	ldr	r2, [r4, #0]
 800b2d0:	6813      	ldr	r3, [r2, #0]
 800b2d2:	f023 0301 	bic.w	r3, r3, #1
 800b2d6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b2d8:	6822      	ldr	r2, [r4, #0]
 800b2da:	6911      	ldr	r1, [r2, #16]
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <HAL_SPI_IRQHandler+0x238>)
 800b2de:	400b      	ands	r3, r1
 800b2e0:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b2e2:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800b2e6:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800b2ea:	d12b      	bne.n	800b344 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	6893      	ldr	r3, [r2, #8]
 800b2f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b2f4:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b2f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b2f8:	b15b      	cbz	r3, 800b312 <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <HAL_SPI_IRQHandler+0x23c>)
 800b2fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b2fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b300:	f7fb fcd2 	bl	8006ca8 <HAL_DMA_Abort_IT>
 800b304:	b128      	cbz	r0, 800b312 <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b306:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b312:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b314:	2b00      	cmp	r3, #0
 800b316:	f43f af5f 	beq.w	800b1d8 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b31a:	4a0f      	ldr	r2, [pc, #60]	; (800b358 <HAL_SPI_IRQHandler+0x23c>)
 800b31c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b31e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b320:	f7fb fcc2 	bl	8006ca8 <HAL_DMA_Abort_IT>
 800b324:	2800      	cmp	r0, #0
 800b326:	f43f af57 	beq.w	800b1d8 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b32a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b332:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b336:	e74f      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	6993      	ldr	r3, [r2, #24]
 800b33c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b340:	6193      	str	r3, [r2, #24]
    return;
 800b342:	e749      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800b344:	2301      	movs	r3, #1
 800b346:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7ff fee5 	bl	800b11a <HAL_SPI_ErrorCallback>
    return;
 800b350:	e742      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xbc>
 800b352:	bf00      	nop
 800b354:	fffffc94 	.word	0xfffffc94
 800b358:	0800b35d 	.word	0x0800b35d

0800b35c <SPI_DMAAbortOnError>:
{
 800b35c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b35e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b360:	2300      	movs	r3, #0
 800b362:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b366:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b370:	f7ff fed3 	bl	800b11a <HAL_SPI_ErrorCallback>
}
 800b374:	bd08      	pop	{r3, pc}

0800b376 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b376:	4770      	bx	lr

0800b378 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b378:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d13a      	bne.n	800b3f8 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b382:	2302      	movs	r3, #2
 800b384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b388:	6802      	ldr	r2, [r0, #0]
 800b38a:	68d3      	ldr	r3, [r2, #12]
 800b38c:	f043 0301 	orr.w	r3, r3, #1
 800b390:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b392:	6803      	ldr	r3, [r0, #0]
 800b394:	4a1a      	ldr	r2, [pc, #104]	; (800b400 <HAL_TIM_Base_Start_IT+0x88>)
 800b396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b39a:	bf18      	it	ne
 800b39c:	4293      	cmpne	r3, r2
 800b39e:	d01d      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d019      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d015      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d011      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3b8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d00d      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3c0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d009      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
 800b3c8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d005      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	f042 0201 	orr.w	r2, r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3d8:	2000      	movs	r0, #0
 800b3da:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3dc:	6899      	ldr	r1, [r3, #8]
 800b3de:	4a09      	ldr	r2, [pc, #36]	; (800b404 <HAL_TIM_Base_Start_IT+0x8c>)
 800b3e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e2:	2a06      	cmp	r2, #6
 800b3e4:	bf18      	it	ne
 800b3e6:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800b3ea:	d007      	beq.n	800b3fc <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	4770      	bx	lr
    return HAL_ERROR;
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	4770      	bx	lr
  return HAL_OK;
 800b3fc:	2000      	movs	r0, #0
}
 800b3fe:	4770      	bx	lr
 800b400:	40010000 	.word	0x40010000
 800b404:	00010007 	.word	0x00010007

0800b408 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b408:	4770      	bx	lr

0800b40a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b40a:	4770      	bx	lr

0800b40c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b40c:	4770      	bx	lr

0800b40e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b40e:	4770      	bx	lr

0800b410 <HAL_TIM_IRQHandler>:
{
 800b410:	b510      	push	{r4, lr}
 800b412:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	f012 0f02 	tst.w	r2, #2
 800b41c:	d011      	beq.n	800b442 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	f012 0f02 	tst.w	r2, #2
 800b424:	d00d      	beq.n	800b442 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b426:	f06f 0202 	mvn.w	r2, #2
 800b42a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b430:	6803      	ldr	r3, [r0, #0]
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	f013 0f03 	tst.w	r3, #3
 800b438:	d079      	beq.n	800b52e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b43a:	f7ff ffe6 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b43e:	2300      	movs	r3, #0
 800b440:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	f012 0f04 	tst.w	r2, #4
 800b44a:	d012      	beq.n	800b472 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	f012 0f04 	tst.w	r2, #4
 800b452:	d00e      	beq.n	800b472 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b454:	f06f 0204 	mvn.w	r2, #4
 800b458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b45a:	2302      	movs	r3, #2
 800b45c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b466:	d068      	beq.n	800b53a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b468:	4620      	mov	r0, r4
 800b46a:	f7ff ffce 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b46e:	2300      	movs	r3, #0
 800b470:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	f012 0f08 	tst.w	r2, #8
 800b47a:	d012      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	f012 0f08 	tst.w	r2, #8
 800b482:	d00e      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b484:	f06f 0208 	mvn.w	r2, #8
 800b488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b48a:	2304      	movs	r3, #4
 800b48c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f013 0f03 	tst.w	r3, #3
 800b496:	d057      	beq.n	800b548 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800b498:	4620      	mov	r0, r4
 800b49a:	f7ff ffb6 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	691a      	ldr	r2, [r3, #16]
 800b4a6:	f012 0f10 	tst.w	r2, #16
 800b4aa:	d012      	beq.n	800b4d2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	f012 0f10 	tst.w	r2, #16
 800b4b2:	d00e      	beq.n	800b4d2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4b4:	f06f 0210 	mvn.w	r2, #16
 800b4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b4c6:	d046      	beq.n	800b556 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7ff ff9e 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	691a      	ldr	r2, [r3, #16]
 800b4d6:	f012 0f01 	tst.w	r2, #1
 800b4da:	d003      	beq.n	800b4e4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	f012 0f01 	tst.w	r2, #1
 800b4e2:	d13f      	bne.n	800b564 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b4ec:	d003      	beq.n	800b4f6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4ee:	68da      	ldr	r2, [r3, #12]
 800b4f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b4f4:	d13d      	bne.n	800b572 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	691a      	ldr	r2, [r3, #16]
 800b4fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b4fe:	d003      	beq.n	800b508 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b506:	d13b      	bne.n	800b580 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b510:	d003      	beq.n	800b51a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b518:	d139      	bne.n	800b58e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	691a      	ldr	r2, [r3, #16]
 800b51e:	f012 0f20 	tst.w	r2, #32
 800b522:	d003      	beq.n	800b52c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	f012 0f20 	tst.w	r2, #32
 800b52a:	d137      	bne.n	800b59c <HAL_TIM_IRQHandler+0x18c>
}
 800b52c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52e:	f7ff ff6b 	bl	800b408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff ff6a 	bl	800b40c <HAL_TIM_PWM_PulseFinishedCallback>
 800b538:	e781      	b.n	800b43e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff ff64 	bl	800b408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b540:	4620      	mov	r0, r4
 800b542:	f7ff ff63 	bl	800b40c <HAL_TIM_PWM_PulseFinishedCallback>
 800b546:	e792      	b.n	800b46e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff ff5d 	bl	800b408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff ff5c 	bl	800b40c <HAL_TIM_PWM_PulseFinishedCallback>
 800b554:	e7a3      	b.n	800b49e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff ff56 	bl	800b408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7ff ff55 	bl	800b40c <HAL_TIM_PWM_PulseFinishedCallback>
 800b562:	e7b4      	b.n	800b4ce <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b564:	f06f 0201 	mvn.w	r2, #1
 800b568:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7f6 fc8a 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
 800b570:	e7b8      	b.n	800b4e4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b576:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 f8ca 	bl	800b712 <HAL_TIMEx_BreakCallback>
 800b57e:	e7ba      	b.n	800b4f6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b580:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b584:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f8c4 	bl	800b714 <HAL_TIMEx_Break2Callback>
 800b58c:	e7bc      	b.n	800b508 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b58e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b592:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b594:	4620      	mov	r0, r4
 800b596:	f7ff ff3a 	bl	800b40e <HAL_TIM_TriggerCallback>
 800b59a:	e7be      	b.n	800b51a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b59c:	f06f 0220 	mvn.w	r2, #32
 800b5a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 f8b4 	bl	800b710 <HAL_TIMEx_CommutCallback>
}
 800b5a8:	e7c0      	b.n	800b52c <HAL_TIM_IRQHandler+0x11c>
	...

0800b5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5ac:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5ae:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5b0:	4a39      	ldr	r2, [pc, #228]	; (800b698 <TIM_Base_SetConfig+0xec>)
 800b5b2:	4290      	cmp	r0, r2
 800b5b4:	bf14      	ite	ne
 800b5b6:	f04f 0e00 	movne.w	lr, #0
 800b5ba:	f04f 0e01 	moveq.w	lr, #1
 800b5be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b5c2:	bf14      	ite	ne
 800b5c4:	4672      	movne	r2, lr
 800b5c6:	f04e 0201 	orreq.w	r2, lr, #1
 800b5ca:	b9aa      	cbnz	r2, 800b5f8 <TIM_Base_SetConfig+0x4c>
 800b5cc:	4c33      	ldr	r4, [pc, #204]	; (800b69c <TIM_Base_SetConfig+0xf0>)
 800b5ce:	42a0      	cmp	r0, r4
 800b5d0:	bf14      	ite	ne
 800b5d2:	2400      	movne	r4, #0
 800b5d4:	2401      	moveq	r4, #1
 800b5d6:	4d32      	ldr	r5, [pc, #200]	; (800b6a0 <TIM_Base_SetConfig+0xf4>)
 800b5d8:	42a8      	cmp	r0, r5
 800b5da:	d00d      	beq.n	800b5f8 <TIM_Base_SetConfig+0x4c>
 800b5dc:	b964      	cbnz	r4, 800b5f8 <TIM_Base_SetConfig+0x4c>
 800b5de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800b5e2:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800b5e6:	42a0      	cmp	r0, r4
 800b5e8:	bf14      	ite	ne
 800b5ea:	2400      	movne	r4, #0
 800b5ec:	2401      	moveq	r4, #1
 800b5ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800b5f2:	42a8      	cmp	r0, r5
 800b5f4:	d000      	beq.n	800b5f8 <TIM_Base_SetConfig+0x4c>
 800b5f6:	b11c      	cbz	r4, 800b600 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b5fc:	684c      	ldr	r4, [r1, #4]
 800b5fe:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b600:	bb12      	cbnz	r2, 800b648 <TIM_Base_SetConfig+0x9c>
 800b602:	4a26      	ldr	r2, [pc, #152]	; (800b69c <TIM_Base_SetConfig+0xf0>)
 800b604:	4290      	cmp	r0, r2
 800b606:	bf14      	ite	ne
 800b608:	2200      	movne	r2, #0
 800b60a:	2201      	moveq	r2, #1
 800b60c:	4c24      	ldr	r4, [pc, #144]	; (800b6a0 <TIM_Base_SetConfig+0xf4>)
 800b60e:	42a0      	cmp	r0, r4
 800b610:	d01a      	beq.n	800b648 <TIM_Base_SetConfig+0x9c>
 800b612:	b9ca      	cbnz	r2, 800b648 <TIM_Base_SetConfig+0x9c>
 800b614:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b618:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800b61c:	4290      	cmp	r0, r2
 800b61e:	bf14      	ite	ne
 800b620:	2200      	movne	r2, #0
 800b622:	2201      	moveq	r2, #1
 800b624:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d00d      	beq.n	800b648 <TIM_Base_SetConfig+0x9c>
 800b62c:	b962      	cbnz	r2, 800b648 <TIM_Base_SetConfig+0x9c>
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <TIM_Base_SetConfig+0xf8>)
 800b630:	4290      	cmp	r0, r2
 800b632:	bf14      	ite	ne
 800b634:	2200      	movne	r2, #0
 800b636:	2201      	moveq	r2, #1
 800b638:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800b63c:	42a0      	cmp	r0, r4
 800b63e:	d003      	beq.n	800b648 <TIM_Base_SetConfig+0x9c>
 800b640:	b912      	cbnz	r2, 800b648 <TIM_Base_SetConfig+0x9c>
 800b642:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <TIM_Base_SetConfig+0xfc>)
 800b644:	4290      	cmp	r0, r2
 800b646:	d104      	bne.n	800b652 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b648:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b64c:	68cb      	ldr	r3, [r1, #12]
 800b64e:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b656:	694a      	ldr	r2, [r1, #20]
 800b658:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b65a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b65c:	688a      	ldr	r2, [r1, #8]
 800b65e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b660:	680a      	ldr	r2, [r1, #0]
 800b662:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b664:	4a11      	ldr	r2, [pc, #68]	; (800b6ac <TIM_Base_SetConfig+0x100>)
 800b666:	4290      	cmp	r0, r2
 800b668:	bf14      	ite	ne
 800b66a:	4673      	movne	r3, lr
 800b66c:	f04e 0301 	orreq.w	r3, lr, #1
 800b670:	b963      	cbnz	r3, 800b68c <TIM_Base_SetConfig+0xe0>
 800b672:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <TIM_Base_SetConfig+0xf8>)
 800b674:	4298      	cmp	r0, r3
 800b676:	bf14      	ite	ne
 800b678:	2300      	movne	r3, #0
 800b67a:	2301      	moveq	r3, #1
 800b67c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b680:	4290      	cmp	r0, r2
 800b682:	d003      	beq.n	800b68c <TIM_Base_SetConfig+0xe0>
 800b684:	b913      	cbnz	r3, 800b68c <TIM_Base_SetConfig+0xe0>
 800b686:	4b08      	ldr	r3, [pc, #32]	; (800b6a8 <TIM_Base_SetConfig+0xfc>)
 800b688:	4298      	cmp	r0, r3
 800b68a:	d101      	bne.n	800b690 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b68c:	690b      	ldr	r3, [r1, #16]
 800b68e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b690:	2301      	movs	r3, #1
 800b692:	6143      	str	r3, [r0, #20]
}
 800b694:	bd30      	pop	{r4, r5, pc}
 800b696:	bf00      	nop
 800b698:	40010000 	.word	0x40010000
 800b69c:	40000800 	.word	0x40000800
 800b6a0:	40000400 	.word	0x40000400
 800b6a4:	40014400 	.word	0x40014400
 800b6a8:	40014800 	.word	0x40014800
 800b6ac:	40010400 	.word	0x40010400

0800b6b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b6b0:	b360      	cbz	r0, 800b70c <HAL_TIM_Base_Init+0x5c>
{
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b6b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b6ba:	b313      	cbz	r3, 800b702 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	f851 0b04 	ldr.w	r0, [r1], #4
 800b6c8:	f7ff ff70 	bl	800b5ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b6d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b6da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b6de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b6e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b6ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b6f6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b6fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b6fe:	2000      	movs	r0, #0
}
 800b700:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b702:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b706:	f7ff fe36 	bl	800b376 <HAL_TIM_Base_MspInit>
 800b70a:	e7d7      	b.n	800b6bc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800b70c:	2001      	movs	r0, #1
}
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b710:	4770      	bx	lr

0800b712 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b712:	4770      	bx	lr

0800b714 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b714:	4770      	bx	lr

0800b716 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b716:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b71c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b71e:	f001 ff6b 	bl	800d5f8 <xTaskGetSchedulerState>
 800b722:	2801      	cmp	r0, #1
 800b724:	d100      	bne.n	800b728 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b726:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800b728:	f000 fc6c 	bl	800c004 <xPortSysTickHandler>
}
 800b72c:	e7fb      	b.n	800b726 <SysTick_Handler+0x10>
	...

0800b730 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b730:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b734:	b92b      	cbnz	r3, 800b742 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <osKernelInitialize+0x20>)
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	b928      	cbnz	r0, 800b748 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b73c:	2201      	movs	r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b740:	4770      	bx	lr
    stat = osErrorISR;
 800b742:	f06f 0005 	mvn.w	r0, #5
 800b746:	4770      	bx	lr
    } else {
      stat = osError;
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	24002d7c 	.word	0x24002d7c

0800b754 <osKernelStart>:
 800b754:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b758:	b973      	cbnz	r3, 800b778 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b75a:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <osKernelStart+0x30>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d10d      	bne.n	800b77e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800b762:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b764:	2400      	movs	r4, #0
 800b766:	4b08      	ldr	r3, [pc, #32]	; (800b788 <osKernelStart+0x34>)
 800b768:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b76a:	4b06      	ldr	r3, [pc, #24]	; (800b784 <osKernelStart+0x30>)
 800b76c:	2202      	movs	r2, #2
 800b76e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b770:	f001 fcb8 	bl	800d0e4 <vTaskStartScheduler>
      stat = osOK;
 800b774:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b776:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b778:	f06f 0005 	mvn.w	r0, #5
 800b77c:	4770      	bx	lr
      stat = osError;
 800b77e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b782:	4770      	bx	lr
 800b784:	24002d7c 	.word	0x24002d7c
 800b788:	e000ed00 	.word	0xe000ed00

0800b78c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b78e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b790:	2400      	movs	r4, #0
 800b792:	9405      	str	r4, [sp, #20]
 800b794:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b798:	bb74      	cbnz	r4, 800b7f8 <osThreadNew+0x6c>
 800b79a:	b368      	cbz	r0, 800b7f8 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b79c:	b322      	cbz	r2, 800b7e8 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800b79e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b7a0:	6993      	ldr	r3, [r2, #24]
 800b7a2:	b903      	cbnz	r3, 800b7a6 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800b7a4:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7a6:	1e5c      	subs	r4, r3, #1
 800b7a8:	2c37      	cmp	r4, #55	; 0x37
 800b7aa:	d849      	bhi.n	800b840 <osThreadNew+0xb4>
 800b7ac:	6854      	ldr	r4, [r2, #4]
 800b7ae:	f014 0f01 	tst.w	r4, #1
 800b7b2:	d147      	bne.n	800b844 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b7b4:	6956      	ldr	r6, [r2, #20]
 800b7b6:	b16e      	cbz	r6, 800b7d4 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7b8:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7bc:	6894      	ldr	r4, [r2, #8]
 800b7be:	b12c      	cbz	r4, 800b7cc <osThreadNew+0x40>
 800b7c0:	68d7      	ldr	r7, [r2, #12]
 800b7c2:	2fbb      	cmp	r7, #187	; 0xbb
 800b7c4:	d902      	bls.n	800b7cc <osThreadNew+0x40>
 800b7c6:	6917      	ldr	r7, [r2, #16]
 800b7c8:	b107      	cbz	r7, 800b7cc <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7ca:	b9c6      	cbnz	r6, 800b7fe <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7cc:	b12c      	cbz	r4, 800b7da <osThreadNew+0x4e>
    mem  = -1;
 800b7ce:	f04f 34ff 	mov.w	r4, #4294967295
 800b7d2:	e00e      	b.n	800b7f2 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800b7d4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800b7d8:	e7f0      	b.n	800b7bc <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7da:	68d4      	ldr	r4, [r2, #12]
 800b7dc:	b98c      	cbnz	r4, 800b802 <osThreadNew+0x76>
 800b7de:	6914      	ldr	r4, [r2, #16]
 800b7e0:	b194      	cbz	r4, 800b808 <osThreadNew+0x7c>
    mem  = -1;
 800b7e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b7e6:	e004      	b.n	800b7f2 <osThreadNew+0x66>
    name = NULL;
 800b7e8:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b7ea:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800b7ec:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800b7ee:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800b7f2:	2c01      	cmp	r4, #1
 800b7f4:	d00a      	beq.n	800b80c <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800b7f6:	b1ac      	cbz	r4, 800b824 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b7f8:	9805      	ldr	r0, [sp, #20]
}
 800b7fa:	b007      	add	sp, #28
 800b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800b7fe:	2401      	movs	r4, #1
 800b800:	e7f7      	b.n	800b7f2 <osThreadNew+0x66>
    mem  = -1;
 800b802:	f04f 34ff 	mov.w	r4, #4294967295
 800b806:	e7f4      	b.n	800b7f2 <osThreadNew+0x66>
          mem = 0;
 800b808:	2400      	movs	r4, #0
 800b80a:	e7f2      	b.n	800b7f2 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b80c:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b80e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b810:	9202      	str	r2, [sp, #8]
 800b812:	9401      	str	r4, [sp, #4]
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	460b      	mov	r3, r1
 800b818:	4662      	mov	r2, ip
 800b81a:	4629      	mov	r1, r5
 800b81c:	f001 fbf2 	bl	800d004 <xTaskCreateStatic>
 800b820:	9005      	str	r0, [sp, #20]
 800b822:	e7e9      	b.n	800b7f8 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b824:	aa05      	add	r2, sp, #20
 800b826:	9201      	str	r2, [sp, #4]
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	460b      	mov	r3, r1
 800b82c:	fa1f f28c 	uxth.w	r2, ip
 800b830:	4629      	mov	r1, r5
 800b832:	f001 fc22 	bl	800d07a <xTaskCreate>
 800b836:	2801      	cmp	r0, #1
 800b838:	d0de      	beq.n	800b7f8 <osThreadNew+0x6c>
            hTask = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	9305      	str	r3, [sp, #20]
 800b83e:	e7db      	b.n	800b7f8 <osThreadNew+0x6c>
        return (NULL);
 800b840:	2000      	movs	r0, #0
 800b842:	e7da      	b.n	800b7fa <osThreadNew+0x6e>
 800b844:	2000      	movs	r0, #0
 800b846:	e7d8      	b.n	800b7fa <osThreadNew+0x6e>

0800b848 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b850:	2b00      	cmp	r3, #0
 800b852:	d14d      	bne.n	800b8f0 <osSemaphoreNew+0xa8>
 800b854:	460e      	mov	r6, r1
 800b856:	4614      	mov	r4, r2
 800b858:	4288      	cmp	r0, r1
 800b85a:	bf34      	ite	cc
 800b85c:	2300      	movcc	r3, #0
 800b85e:	2301      	movcs	r3, #1
 800b860:	2800      	cmp	r0, #0
 800b862:	d049      	beq.n	800b8f8 <osSemaphoreNew+0xb0>
 800b864:	2b00      	cmp	r3, #0
 800b866:	d047      	beq.n	800b8f8 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800b868:	b14a      	cbz	r2, 800b87e <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b86a:	6895      	ldr	r5, [r2, #8]
 800b86c:	b115      	cbz	r5, 800b874 <osSemaphoreNew+0x2c>
 800b86e:	68d3      	ldr	r3, [r2, #12]
 800b870:	2b4f      	cmp	r3, #79	; 0x4f
 800b872:	d814      	bhi.n	800b89e <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b874:	2d00      	cmp	r5, #0
 800b876:	d141      	bne.n	800b8fc <osSemaphoreNew+0xb4>
 800b878:	68e3      	ldr	r3, [r4, #12]
 800b87a:	b10b      	cbz	r3, 800b880 <osSemaphoreNew+0x38>
 800b87c:	e039      	b.n	800b8f2 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800b87e:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800b880:	2801      	cmp	r0, #1
 800b882:	d00e      	beq.n	800b8a2 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800b884:	bb73      	cbnz	r3, 800b8e4 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b886:	4631      	mov	r1, r6
 800b888:	f000 fe35 	bl	800c4f6 <xQueueCreateCountingSemaphore>
 800b88c:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b88e:	b385      	cbz	r5, 800b8f2 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800b890:	b104      	cbz	r4, 800b894 <osSemaphoreNew+0x4c>
          name = attr->name;
 800b892:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b894:	4621      	mov	r1, r4
 800b896:	4628      	mov	r0, r5
 800b898:	f001 f9a6 	bl	800cbe8 <vQueueAddToRegistry>
 800b89c:	e029      	b.n	800b8f2 <osSemaphoreNew+0xaa>
        mem = 1;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e7ee      	b.n	800b880 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800b8a2:	b9b3      	cbnz	r3, 800b8d2 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	f000 fddd 	bl	800c468 <xQueueGenericCreate>
 800b8ae:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	2e00      	cmpne	r6, #0
 800b8b6:	d0ea      	beq.n	800b88e <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 fe37 	bl	800c532 <xQueueGenericSend>
 800b8c4:	2801      	cmp	r0, #1
 800b8c6:	d0e2      	beq.n	800b88e <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f001 f9b7 	bl	800cc3c <vQueueDelete>
            hSemaphore = NULL;
 800b8ce:	2500      	movs	r5, #0
 800b8d0:	e00f      	b.n	800b8f2 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	9200      	str	r2, [sp, #0]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4611      	mov	r1, r2
 800b8dc:	f000 fd71 	bl	800c3c2 <xQueueGenericCreateStatic>
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	e7e5      	b.n	800b8b0 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b8e4:	68a2      	ldr	r2, [r4, #8]
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	f000 fde2 	bl	800c4b0 <xQueueCreateCountingSemaphoreStatic>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	e7ce      	b.n	800b88e <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800b8f0:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	b002      	add	sp, #8
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	e7fa      	b.n	800b8f2 <osSemaphoreNew+0xaa>
 800b8fc:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800b8fe:	e7f8      	b.n	800b8f2 <osSemaphoreNew+0xaa>

0800b900 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b900:	b320      	cbz	r0, 800b94c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b902:	b510      	push	{r4, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	460c      	mov	r4, r1
 800b908:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b90c:	b1b3      	cbz	r3, 800b93c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800b90e:	bb01      	cbnz	r1, 800b952 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800b910:	2100      	movs	r1, #0
 800b912:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b914:	aa01      	add	r2, sp, #4
 800b916:	f001 f912 	bl	800cb3e <xQueueReceiveFromISR>
 800b91a:	2801      	cmp	r0, #1
 800b91c:	d11c      	bne.n	800b958 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b91e:	9801      	ldr	r0, [sp, #4]
 800b920:	b150      	cbz	r0, 800b938 <osSemaphoreAcquire+0x38>
 800b922:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b936:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b938:	b002      	add	sp, #8
 800b93a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b93c:	f001 f82c 	bl	800c998 <xQueueSemaphoreTake>
 800b940:	2801      	cmp	r0, #1
 800b942:	d00c      	beq.n	800b95e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800b944:	b16c      	cbz	r4, 800b962 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800b946:	f06f 0001 	mvn.w	r0, #1
 800b94a:	e7f5      	b.n	800b938 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800b94c:	f06f 0003 	mvn.w	r0, #3
}
 800b950:	4770      	bx	lr
      stat = osErrorParameter;
 800b952:	f06f 0003 	mvn.w	r0, #3
 800b956:	e7ef      	b.n	800b938 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800b958:	f06f 0002 	mvn.w	r0, #2
 800b95c:	e7ec      	b.n	800b938 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800b95e:	2000      	movs	r0, #0
 800b960:	e7ea      	b.n	800b938 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800b962:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b966:	e7e7      	b.n	800b938 <osSemaphoreAcquire+0x38>

0800b968 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b968:	b320      	cbz	r0, 800b9b4 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b96a:	b500      	push	{lr}
 800b96c:	b083      	sub	sp, #12
 800b96e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b972:	b1a3      	cbz	r3, 800b99e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800b974:	2300      	movs	r3, #0
 800b976:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b978:	a901      	add	r1, sp, #4
 800b97a:	f000 ff05 	bl	800c788 <xQueueGiveFromISR>
 800b97e:	2801      	cmp	r0, #1
 800b980:	d11b      	bne.n	800b9ba <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800b982:	9801      	ldr	r0, [sp, #4]
 800b984:	b198      	cbz	r0, 800b9ae <osSemaphoreRelease+0x46>
 800b986:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b99a:	2000      	movs	r0, #0
 800b99c:	e007      	b.n	800b9ae <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b99e:	2300      	movs	r3, #0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f000 fdc5 	bl	800c532 <xQueueGenericSend>
 800b9a8:	2801      	cmp	r0, #1
 800b9aa:	d109      	bne.n	800b9c0 <osSemaphoreRelease+0x58>
  stat = osOK;
 800b9ac:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800b9ae:	b003      	add	sp, #12
 800b9b0:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800b9b4:	f06f 0003 	mvn.w	r0, #3
}
 800b9b8:	4770      	bx	lr
      stat = osErrorResource;
 800b9ba:	f06f 0002 	mvn.w	r0, #2
 800b9be:	e7f6      	b.n	800b9ae <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800b9c0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800b9c4:	e7f3      	b.n	800b9ae <osSemaphoreRelease+0x46>

0800b9c6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b9c6:	b570      	push	{r4, r5, r6, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d13d      	bne.n	800ba4e <osMessageQueueNew+0x88>
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	1e0b      	subs	r3, r1, #0
 800b9d6:	bf18      	it	ne
 800b9d8:	2301      	movne	r3, #1
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d03b      	beq.n	800ba56 <osMessageQueueNew+0x90>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d039      	beq.n	800ba56 <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800b9e2:	b36a      	cbz	r2, 800ba40 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b9e4:	6893      	ldr	r3, [r2, #8]
 800b9e6:	b14b      	cbz	r3, 800b9fc <osMessageQueueNew+0x36>
 800b9e8:	68d2      	ldr	r2, [r2, #12]
 800b9ea:	2a4f      	cmp	r2, #79	; 0x4f
 800b9ec:	d906      	bls.n	800b9fc <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b9ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b9f0:	b122      	cbz	r2, 800b9fc <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b9f2:	fb01 f500 	mul.w	r5, r1, r0
 800b9f6:	6966      	ldr	r6, [r4, #20]
 800b9f8:	42ae      	cmp	r6, r5
 800b9fa:	d21b      	bcs.n	800ba34 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9fc:	b173      	cbz	r3, 800ba1c <osMessageQueueNew+0x56>
    mem = -1;
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800ba02:	bb53      	cbnz	r3, 800ba5a <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ba04:	2200      	movs	r2, #0
 800ba06:	f000 fd2f 	bl	800c468 <xQueueGenericCreate>
 800ba0a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ba0c:	b305      	cbz	r5, 800ba50 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800ba0e:	b104      	cbz	r4, 800ba12 <osMessageQueueNew+0x4c>
        name = attr->name;
 800ba10:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800ba12:	4621      	mov	r1, r4
 800ba14:	4628      	mov	r0, r5
 800ba16:	f001 f8e7 	bl	800cbe8 <vQueueAddToRegistry>
 800ba1a:	e019      	b.n	800ba50 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba1c:	68e3      	ldr	r3, [r4, #12]
 800ba1e:	b98b      	cbnz	r3, 800ba44 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba20:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba22:	b113      	cbz	r3, 800ba2a <osMessageQueueNew+0x64>
    mem = -1;
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	e7eb      	b.n	800ba02 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba2a:	6963      	ldr	r3, [r4, #20]
 800ba2c:	b16b      	cbz	r3, 800ba4a <osMessageQueueNew+0x84>
    mem = -1;
 800ba2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba32:	e7e6      	b.n	800ba02 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ba34:	2500      	movs	r5, #0
 800ba36:	9500      	str	r5, [sp, #0]
 800ba38:	f000 fcc3 	bl	800c3c2 <xQueueGenericCreateStatic>
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	e7e5      	b.n	800ba0c <osMessageQueueNew+0x46>
      mem = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	e7de      	b.n	800ba02 <osMessageQueueNew+0x3c>
    mem = -1;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
 800ba48:	e7db      	b.n	800ba02 <osMessageQueueNew+0x3c>
          mem = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e7d9      	b.n	800ba02 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800ba4e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800ba50:	4628      	mov	r0, r5
 800ba52:	b002      	add	sp, #8
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800ba56:	2500      	movs	r5, #0
 800ba58:	e7fa      	b.n	800ba50 <osMessageQueueNew+0x8a>
 800ba5a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800ba5c:	e7f8      	b.n	800ba50 <osMessageQueueNew+0x8a>

0800ba5e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	461c      	mov	r4, r3
 800ba64:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ba68:	b1d3      	cbz	r3, 800baa0 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba6a:	2900      	cmp	r1, #0
 800ba6c:	bf18      	it	ne
 800ba6e:	2800      	cmpne	r0, #0
 800ba70:	d024      	beq.n	800babc <osMessageQueuePut+0x5e>
 800ba72:	bb34      	cbnz	r4, 800bac2 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba78:	aa01      	add	r2, sp, #4
 800ba7a:	f000 fe1e 	bl	800c6ba <xQueueGenericSendFromISR>
 800ba7e:	2801      	cmp	r0, #1
 800ba80:	d122      	bne.n	800bac8 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ba82:	9801      	ldr	r0, [sp, #4]
 800ba84:	b150      	cbz	r0, 800ba9c <osMessageQueuePut+0x3e>
 800ba86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800ba9a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ba9c:	b002      	add	sp, #8
 800ba9e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800baa0:	2900      	cmp	r1, #0
 800baa2:	bf18      	it	ne
 800baa4:	2800      	cmpne	r0, #0
 800baa6:	d012      	beq.n	800bace <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800baa8:	2300      	movs	r3, #0
 800baaa:	4622      	mov	r2, r4
 800baac:	f000 fd41 	bl	800c532 <xQueueGenericSend>
 800bab0:	2801      	cmp	r0, #1
 800bab2:	d00f      	beq.n	800bad4 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800bab4:	b184      	cbz	r4, 800bad8 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800bab6:	f06f 0001 	mvn.w	r0, #1
 800baba:	e7ef      	b.n	800ba9c <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800babc:	f06f 0003 	mvn.w	r0, #3
 800bac0:	e7ec      	b.n	800ba9c <osMessageQueuePut+0x3e>
 800bac2:	f06f 0003 	mvn.w	r0, #3
 800bac6:	e7e9      	b.n	800ba9c <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800bac8:	f06f 0002 	mvn.w	r0, #2
 800bacc:	e7e6      	b.n	800ba9c <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bace:	f06f 0003 	mvn.w	r0, #3
 800bad2:	e7e3      	b.n	800ba9c <osMessageQueuePut+0x3e>
  stat = osOK;
 800bad4:	2000      	movs	r0, #0
 800bad6:	e7e1      	b.n	800ba9c <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800bad8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800badc:	e7de      	b.n	800ba9c <osMessageQueuePut+0x3e>

0800bade <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bade:	b510      	push	{r4, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	461c      	mov	r4, r3
 800bae4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800bae8:	b1d3      	cbz	r3, 800bb20 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800baea:	2900      	cmp	r1, #0
 800baec:	bf18      	it	ne
 800baee:	2800      	cmpne	r0, #0
 800baf0:	d023      	beq.n	800bb3a <osMessageQueueGet+0x5c>
 800baf2:	bb2c      	cbnz	r4, 800bb40 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800baf4:	2300      	movs	r3, #0
 800baf6:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800baf8:	aa01      	add	r2, sp, #4
 800bafa:	f001 f820 	bl	800cb3e <xQueueReceiveFromISR>
 800bafe:	2801      	cmp	r0, #1
 800bb00:	d121      	bne.n	800bb46 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800bb02:	9801      	ldr	r0, [sp, #4]
 800bb04:	b150      	cbz	r0, 800bb1c <osMessageQueueGet+0x3e>
 800bb06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800bb1a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800bb1c:	b002      	add	sp, #8
 800bb1e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb20:	2900      	cmp	r1, #0
 800bb22:	bf18      	it	ne
 800bb24:	2800      	cmpne	r0, #0
 800bb26:	d011      	beq.n	800bb4c <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb28:	4622      	mov	r2, r4
 800bb2a:	f000 fe86 	bl	800c83a <xQueueReceive>
 800bb2e:	2801      	cmp	r0, #1
 800bb30:	d00f      	beq.n	800bb52 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800bb32:	b184      	cbz	r4, 800bb56 <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800bb34:	f06f 0001 	mvn.w	r0, #1
 800bb38:	e7f0      	b.n	800bb1c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800bb3a:	f06f 0003 	mvn.w	r0, #3
 800bb3e:	e7ed      	b.n	800bb1c <osMessageQueueGet+0x3e>
 800bb40:	f06f 0003 	mvn.w	r0, #3
 800bb44:	e7ea      	b.n	800bb1c <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800bb46:	f06f 0002 	mvn.w	r0, #2
 800bb4a:	e7e7      	b.n	800bb1c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800bb4c:	f06f 0003 	mvn.w	r0, #3
 800bb50:	e7e4      	b.n	800bb1c <osMessageQueueGet+0x3e>
  stat = osOK;
 800bb52:	2000      	movs	r0, #0
 800bb54:	e7e2      	b.n	800bb1c <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800bb56:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800bb5a:	e7df      	b.n	800bb1c <osMessageQueueGet+0x3e>

0800bb5c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb5c:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <vApplicationGetIdleTaskMemory+0x10>)
 800bb5e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb60:	4b03      	ldr	r3, [pc, #12]	; (800bb70 <vApplicationGetIdleTaskMemory+0x14>)
 800bb62:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb64:	2380      	movs	r3, #128	; 0x80
 800bb66:	6013      	str	r3, [r2, #0]
}
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	24002cc0 	.word	0x24002cc0
 800bb70:	24002ac0 	.word	0x24002ac0

0800bb74 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb74:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <vApplicationGetTimerTaskMemory+0x10>)
 800bb76:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb78:	4b03      	ldr	r3, [pc, #12]	; (800bb88 <vApplicationGetTimerTaskMemory+0x14>)
 800bb7a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb80:	6013      	str	r3, [r2, #0]
}
 800bb82:	4770      	bx	lr
 800bb84:	24003180 	.word	0x24003180
 800bb88:	24002d80 	.word	0x24002d80

0800bb8c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb8c:	4a12      	ldr	r2, [pc, #72]	; (800bbd8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb8e:	f012 0f07 	tst.w	r2, #7
 800bb92:	d01e      	beq.n	800bbd2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb94:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb96:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb9a:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800bb9e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bba2:	480e      	ldr	r0, [pc, #56]	; (800bbdc <prvHeapInit+0x50>)
 800bba4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bba6:	2100      	movs	r1, #0
 800bba8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbaa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800bbac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800bbb2:	480b      	ldr	r0, [pc, #44]	; (800bbe0 <prvHeapInit+0x54>)
 800bbb4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbb8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbba:	1a99      	subs	r1, r3, r2
 800bbbc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbbe:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbc0:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <prvHeapInit+0x58>)
 800bbc2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbc4:	4b08      	ldr	r3, [pc, #32]	; (800bbe8 <prvHeapInit+0x5c>)
 800bbc6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbc8:	4b08      	ldr	r3, [pc, #32]	; (800bbec <prvHeapInit+0x60>)
 800bbca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbce:	601a      	str	r2, [r3, #0]
}
 800bbd0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbd6:	e7e4      	b.n	800bba2 <prvHeapInit+0x16>
 800bbd8:	24003240 	.word	0x24003240
 800bbdc:	2400b254 	.word	0x2400b254
 800bbe0:	2400323c 	.word	0x2400323c
 800bbe4:	2400b248 	.word	0x2400b248
 800bbe8:	2400b244 	.word	0x2400b244
 800bbec:	2400b240 	.word	0x2400b240

0800bbf0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbf0:	4b16      	ldr	r3, [pc, #88]	; (800bc4c <prvInsertBlockIntoFreeList+0x5c>)
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4283      	cmp	r3, r0
 800bbf8:	d3fb      	bcc.n	800bbf2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbfa:	6851      	ldr	r1, [r2, #4]
 800bbfc:	eb02 0c01 	add.w	ip, r2, r1
 800bc00:	4584      	cmp	ip, r0
 800bc02:	d009      	beq.n	800bc18 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc04:	6841      	ldr	r1, [r0, #4]
 800bc06:	eb00 0c01 	add.w	ip, r0, r1
 800bc0a:	4563      	cmp	r3, ip
 800bc0c:	d009      	beq.n	800bc22 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc0e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc10:	4290      	cmp	r0, r2
 800bc12:	d019      	beq.n	800bc48 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc14:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800bc16:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc18:	6840      	ldr	r0, [r0, #4]
 800bc1a:	4401      	add	r1, r0
 800bc1c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800bc1e:	4610      	mov	r0, r2
 800bc20:	e7f0      	b.n	800bc04 <prvInsertBlockIntoFreeList+0x14>
{
 800bc22:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc24:	4c0a      	ldr	r4, [pc, #40]	; (800bc50 <prvInsertBlockIntoFreeList+0x60>)
 800bc26:	6824      	ldr	r4, [r4, #0]
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d00b      	beq.n	800bc44 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4419      	add	r1, r3
 800bc30:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc32:	6813      	ldr	r3, [r2, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800bc38:	4290      	cmp	r0, r2
 800bc3a:	d000      	beq.n	800bc3e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc3c:	6010      	str	r0, [r2, #0]
	}
}
 800bc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc42:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc44:	6004      	str	r4, [r0, #0]
 800bc46:	e7f7      	b.n	800bc38 <prvInsertBlockIntoFreeList+0x48>
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	2400b254 	.word	0x2400b254
 800bc50:	2400323c 	.word	0x2400323c

0800bc54 <pvPortMalloc>:
{
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800bc58:	f001 fa9a 	bl	800d190 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bc5c:	4b36      	ldr	r3, [pc, #216]	; (800bd38 <pvPortMalloc+0xe4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	b1a3      	cbz	r3, 800bc8c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc62:	4b36      	ldr	r3, [pc, #216]	; (800bd3c <pvPortMalloc+0xe8>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	421d      	tst	r5, r3
 800bc68:	d14e      	bne.n	800bd08 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800bc6a:	b135      	cbz	r5, 800bc7a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800bc6c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc6e:	f015 0f07 	tst.w	r5, #7
 800bc72:	d002      	beq.n	800bc7a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc74:	f025 0507 	bic.w	r5, r5, #7
 800bc78:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc7a:	2d00      	cmp	r5, #0
 800bc7c:	d046      	beq.n	800bd0c <pvPortMalloc+0xb8>
 800bc7e:	4b30      	ldr	r3, [pc, #192]	; (800bd40 <pvPortMalloc+0xec>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	42ab      	cmp	r3, r5
 800bc84:	d351      	bcc.n	800bd2a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800bc86:	4a2f      	ldr	r2, [pc, #188]	; (800bd44 <pvPortMalloc+0xf0>)
 800bc88:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc8a:	e004      	b.n	800bc96 <pvPortMalloc+0x42>
			prvHeapInit();
 800bc8c:	f7ff ff7e 	bl	800bb8c <prvHeapInit>
 800bc90:	e7e7      	b.n	800bc62 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800bc92:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc94:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc96:	6863      	ldr	r3, [r4, #4]
 800bc98:	42ab      	cmp	r3, r5
 800bc9a:	d202      	bcs.n	800bca2 <pvPortMalloc+0x4e>
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1f7      	bne.n	800bc92 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800bca2:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <pvPortMalloc+0xe4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	d041      	beq.n	800bd2e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcaa:	6816      	ldr	r6, [r2, #0]
 800bcac:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcb2:	6863      	ldr	r3, [r4, #4]
 800bcb4:	1b5b      	subs	r3, r3, r5
 800bcb6:	2b10      	cmp	r3, #16
 800bcb8:	d910      	bls.n	800bcdc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcba:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcbc:	f010 0f07 	tst.w	r0, #7
 800bcc0:	d008      	beq.n	800bcd4 <pvPortMalloc+0x80>
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	e7fe      	b.n	800bcd2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bcd4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcd6:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcd8:	f7ff ff8a 	bl	800bbf0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcdc:	6862      	ldr	r2, [r4, #4]
 800bcde:	4918      	ldr	r1, [pc, #96]	; (800bd40 <pvPortMalloc+0xec>)
 800bce0:	680b      	ldr	r3, [r1, #0]
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bce6:	4918      	ldr	r1, [pc, #96]	; (800bd48 <pvPortMalloc+0xf4>)
 800bce8:	6809      	ldr	r1, [r1, #0]
 800bcea:	428b      	cmp	r3, r1
 800bcec:	d201      	bcs.n	800bcf2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcee:	4916      	ldr	r1, [pc, #88]	; (800bd48 <pvPortMalloc+0xf4>)
 800bcf0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcf2:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <pvPortMalloc+0xe8>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800bcfe:	4a13      	ldr	r2, [pc, #76]	; (800bd4c <pvPortMalloc+0xf8>)
 800bd00:	6813      	ldr	r3, [r2, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	e002      	b.n	800bd0e <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800bd08:	2600      	movs	r6, #0
 800bd0a:	e000      	b.n	800bd0e <pvPortMalloc+0xba>
 800bd0c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800bd0e:	f001 fad9 	bl	800d2c4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd12:	f016 0f07 	tst.w	r6, #7
 800bd16:	d00c      	beq.n	800bd32 <pvPortMalloc+0xde>
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	e7fe      	b.n	800bd28 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	e7ef      	b.n	800bd0e <pvPortMalloc+0xba>
 800bd2e:	2600      	movs	r6, #0
 800bd30:	e7ed      	b.n	800bd0e <pvPortMalloc+0xba>
}
 800bd32:	4630      	mov	r0, r6
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	bf00      	nop
 800bd38:	2400323c 	.word	0x2400323c
 800bd3c:	2400b240 	.word	0x2400b240
 800bd40:	2400b244 	.word	0x2400b244
 800bd44:	2400b254 	.word	0x2400b254
 800bd48:	2400b248 	.word	0x2400b248
 800bd4c:	2400b24c 	.word	0x2400b24c

0800bd50 <vPortFree>:
	if( pv != NULL )
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d034      	beq.n	800bdbe <vPortFree+0x6e>
{
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800bd58:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800bd60:	4a17      	ldr	r2, [pc, #92]	; (800bdc0 <vPortFree+0x70>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	4213      	tst	r3, r2
 800bd66:	d108      	bne.n	800bd7a <vPortFree+0x2a>
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	e7fe      	b.n	800bd78 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd7a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800bd7e:	b141      	cbz	r1, 800bd92 <vPortFree+0x42>
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	e7fe      	b.n	800bd90 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd92:	ea23 0302 	bic.w	r3, r3, r2
 800bd96:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800bd9a:	f001 f9f9 	bl	800d190 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd9e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800bda2:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <vPortFree+0x74>)
 800bda4:	6813      	ldr	r3, [r2, #0]
 800bda6:	440b      	add	r3, r1
 800bda8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f7ff ff20 	bl	800bbf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bdb0:	4a05      	ldr	r2, [pc, #20]	; (800bdc8 <vPortFree+0x78>)
 800bdb2:	6813      	ldr	r3, [r2, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800bdb8:	f001 fa84 	bl	800d2c4 <xTaskResumeAll>
}
 800bdbc:	bd38      	pop	{r3, r4, r5, pc}
 800bdbe:	4770      	bx	lr
 800bdc0:	2400b240 	.word	0x2400b240
 800bdc4:	2400b244 	.word	0x2400b244
 800bdc8:	2400b250 	.word	0x2400b250

0800bdcc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdcc:	f100 0308 	add.w	r3, r0, #8
 800bdd0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdd8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdda:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bddc:	2300      	movs	r3, #0
 800bdde:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bde0:	4770      	bx	lr

0800bde2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bde6:	4770      	bx	lr

0800bde8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800bde8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bdea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bdf0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bdf2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bdf4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800bdf6:	6803      	ldr	r3, [r0, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	6003      	str	r3, [r0, #0]
}
 800bdfc:	4770      	bx	lr

0800bdfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdfe:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be00:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be02:	f1b5 3fff 	cmp.w	r5, #4294967295
 800be06:	d011      	beq.n	800be2c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be08:	f100 0308 	add.w	r3, r0, #8
 800be0c:	461c      	mov	r4, r3
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	42aa      	cmp	r2, r5
 800be14:	d9fa      	bls.n	800be0c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be16:	6863      	ldr	r3, [r4, #4]
 800be18:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be1a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be1c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800be1e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be20:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800be22:	6803      	ldr	r3, [r0, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	6003      	str	r3, [r0, #0]
}
 800be28:	bc30      	pop	{r4, r5}
 800be2a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800be2c:	6904      	ldr	r4, [r0, #16]
 800be2e:	e7f2      	b.n	800be16 <vListInsert+0x18>

0800be30 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be30:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be32:	6841      	ldr	r1, [r0, #4]
 800be34:	6882      	ldr	r2, [r0, #8]
 800be36:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be38:	6841      	ldr	r1, [r0, #4]
 800be3a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	4282      	cmp	r2, r0
 800be40:	d006      	beq.n	800be50 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be42:	2200      	movs	r2, #0
 800be44:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	3a01      	subs	r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be4c:	6818      	ldr	r0, [r3, #0]
}
 800be4e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be50:	6882      	ldr	r2, [r0, #8]
 800be52:	605a      	str	r2, [r3, #4]
 800be54:	e7f5      	b.n	800be42 <uxListRemove+0x12>
	...

0800be58 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be58:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be5e:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <prvTaskExitError+0x3c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be66:	d008      	beq.n	800be7a <prvTaskExitError+0x22>
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	e7fe      	b.n	800be78 <prvTaskExitError+0x20>
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0fc      	beq.n	800be8a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be90:	b002      	add	sp, #8
 800be92:	4770      	bx	lr
 800be94:	24000050 	.word	0x24000050

0800be98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be98:	4808      	ldr	r0, [pc, #32]	; (800bebc <prvPortStartFirstTask+0x24>)
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	6800      	ldr	r0, [r0, #0]
 800be9e:	f380 8808 	msr	MSP, r0
 800bea2:	f04f 0000 	mov.w	r0, #0
 800bea6:	f380 8814 	msr	CONTROL, r0
 800beaa:	b662      	cpsie	i
 800beac:	b661      	cpsie	f
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	df00      	svc	0
 800beb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beba:	0000      	.short	0x0000
 800bebc:	e000ed08 	.word	0xe000ed08

0800bec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bec0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bed0 <vPortEnableVFP+0x10>
 800bec4:	6801      	ldr	r1, [r0, #0]
 800bec6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800beca:	6001      	str	r1, [r0, #0]
 800becc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bece:	0000      	.short	0x0000
 800bed0:	e000ed88 	.word	0xe000ed88

0800bed4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bed8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bedc:	f021 0101 	bic.w	r1, r1, #1
 800bee0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <pxPortInitialiseStack+0x28>)
 800bee6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beea:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800beee:	f06f 0302 	mvn.w	r3, #2
 800bef2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800bef6:	3844      	subs	r0, #68	; 0x44
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	0800be59 	.word	0x0800be59

0800bf00 <SVC_Handler>:
	__asm volatile (
 800bf00:	4b07      	ldr	r3, [pc, #28]	; (800bf20 <pxCurrentTCBConst2>)
 800bf02:	6819      	ldr	r1, [r3, #0]
 800bf04:	6808      	ldr	r0, [r1, #0]
 800bf06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	f380 8809 	msr	PSP, r0
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8811 	msr	BASEPRI, r0
 800bf1a:	4770      	bx	lr
 800bf1c:	f3af 8000 	nop.w

0800bf20 <pxCurrentTCBConst2>:
 800bf20:	2400b2a4 	.word	0x2400b2a4

0800bf24 <vPortEnterCritical>:
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800bf34:	4a0b      	ldr	r2, [pc, #44]	; (800bf64 <vPortEnterCritical+0x40>)
 800bf36:	6813      	ldr	r3, [r2, #0]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d000      	beq.n	800bf42 <vPortEnterCritical+0x1e>
}
 800bf40:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bf46:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800bf4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf4e:	d0f7      	beq.n	800bf40 <vPortEnterCritical+0x1c>
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	e7fe      	b.n	800bf60 <vPortEnterCritical+0x3c>
 800bf62:	bf00      	nop
 800bf64:	24000050 	.word	0x24000050

0800bf68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800bf68:	4b09      	ldr	r3, [pc, #36]	; (800bf90 <vPortExitCritical+0x28>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	b943      	cbnz	r3, 800bf80 <vPortExitCritical+0x18>
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	e7fe      	b.n	800bf7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800bf80:	3b01      	subs	r3, #1
 800bf82:	4a03      	ldr	r2, [pc, #12]	; (800bf90 <vPortExitCritical+0x28>)
 800bf84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf86:	b90b      	cbnz	r3, 800bf8c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf88:	f383 8811 	msr	BASEPRI, r3
}
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	24000050 	.word	0x24000050
	...

0800bfa0 <PendSV_Handler>:
	__asm volatile
 800bfa0:	f3ef 8009 	mrs	r0, PSP
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4b15      	ldr	r3, [pc, #84]	; (800c000 <pxCurrentTCBConst>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	f01e 0f10 	tst.w	lr, #16
 800bfb0:	bf08      	it	eq
 800bfb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfc4:	f380 8811 	msr	BASEPRI, r0
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f001 f9f4 	bl	800d3bc <vTaskSwitchContext>
 800bfd4:	f04f 0000 	mov.w	r0, #0
 800bfd8:	f380 8811 	msr	BASEPRI, r0
 800bfdc:	bc09      	pop	{r0, r3}
 800bfde:	6819      	ldr	r1, [r3, #0]
 800bfe0:	6808      	ldr	r0, [r1, #0]
 800bfe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe6:	f01e 0f10 	tst.w	lr, #16
 800bfea:	bf08      	it	eq
 800bfec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bff0:	f380 8809 	msr	PSP, r0
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w

0800c000 <pxCurrentTCBConst>:
 800c000:	2400b2a4 	.word	0x2400b2a4

0800c004 <xPortSysTickHandler>:
{
 800c004:	b508      	push	{r3, lr}
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800c016:	f001 f8c9 	bl	800d1ac <xTaskIncrementTick>
 800c01a:	b128      	cbz	r0, 800c028 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c01c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c024:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800c028:	2300      	movs	r3, #0
 800c02a:	f383 8811 	msr	BASEPRI, r3
}
 800c02e:	bd08      	pop	{r3, pc}

0800c030 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c030:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800c034:	2300      	movs	r3, #0
 800c036:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c038:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <vPortSetupTimerInterrupt+0x20>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4905      	ldr	r1, [pc, #20]	; (800c054 <vPortSetupTimerInterrupt+0x24>)
 800c040:	fba1 1303 	umull	r1, r3, r1, r3
 800c044:	099b      	lsrs	r3, r3, #6
 800c046:	3b01      	subs	r3, #1
 800c048:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c04a:	2307      	movs	r3, #7
 800c04c:	6113      	str	r3, [r2, #16]
}
 800c04e:	4770      	bx	lr
 800c050:	24000040 	.word	0x24000040
 800c054:	10624dd3 	.word	0x10624dd3

0800c058 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c05c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800c060:	4b3d      	ldr	r3, [pc, #244]	; (800c158 <xPortStartScheduler+0x100>)
 800c062:	429a      	cmp	r2, r3
 800c064:	d01c      	beq.n	800c0a0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c066:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c06a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800c06e:	4b3b      	ldr	r3, [pc, #236]	; (800c15c <xPortStartScheduler+0x104>)
 800c070:	429a      	cmp	r2, r3
 800c072:	d01e      	beq.n	800c0b2 <xPortStartScheduler+0x5a>
{
 800c074:	b530      	push	{r4, r5, lr}
 800c076:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c078:	4b39      	ldr	r3, [pc, #228]	; (800c160 <xPortStartScheduler+0x108>)
 800c07a:	781a      	ldrb	r2, [r3, #0]
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c080:	22ff      	movs	r2, #255	; 0xff
 800c082:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c08c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c090:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c094:	4a33      	ldr	r2, [pc, #204]	; (800c164 <xPortStartScheduler+0x10c>)
 800c096:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c098:	4b33      	ldr	r3, [pc, #204]	; (800c168 <xPortStartScheduler+0x110>)
 800c09a:	2207      	movs	r2, #7
 800c09c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c09e:	e01b      	b.n	800c0d8 <xPortStartScheduler+0x80>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0b0:	e7fe      	b.n	800c0b0 <xPortStartScheduler+0x58>
 800c0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0c2:	e7fe      	b.n	800c0c2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800c0c4:	4a28      	ldr	r2, [pc, #160]	; (800c168 <xPortStartScheduler+0x110>)
 800c0c6:	6813      	ldr	r3, [r2, #0]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0e0:	d1f0      	bne.n	800c0c4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0e2:	4b21      	ldr	r3, [pc, #132]	; (800c168 <xPortStartScheduler+0x110>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b03      	cmp	r3, #3
 800c0e8:	d008      	beq.n	800c0fc <xPortStartScheduler+0xa4>
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	e7fe      	b.n	800c0fa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0fc:	021b      	lsls	r3, r3, #8
 800c0fe:	4a1a      	ldr	r2, [pc, #104]	; (800c168 <xPortStartScheduler+0x110>)
 800c100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c102:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c106:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c108:	9b01      	ldr	r3, [sp, #4]
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	4a14      	ldr	r2, [pc, #80]	; (800c160 <xPortStartScheduler+0x108>)
 800c10e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c110:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800c114:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c11c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c120:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800c124:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c128:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800c12c:	f7ff ff80 	bl	800c030 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c130:	2500      	movs	r5, #0
 800c132:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <xPortStartScheduler+0x114>)
 800c134:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800c136:	f7ff fec3 	bl	800bec0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c13a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800c13e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c142:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800c146:	f7ff fea7 	bl	800be98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c14a:	f001 f937 	bl	800d3bc <vTaskSwitchContext>
	prvTaskExitError();
 800c14e:	f7ff fe83 	bl	800be58 <prvTaskExitError>
}
 800c152:	4628      	mov	r0, r5
 800c154:	b003      	add	sp, #12
 800c156:	bd30      	pop	{r4, r5, pc}
 800c158:	410fc271 	.word	0x410fc271
 800c15c:	410fc270 	.word	0x410fc270
 800c160:	e000e400 	.word	0xe000e400
 800c164:	2400b25c 	.word	0x2400b25c
 800c168:	2400b260 	.word	0x2400b260
 800c16c:	24000050 	.word	0x24000050

0800c170 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c170:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c174:	2b0f      	cmp	r3, #15
 800c176:	d90f      	bls.n	800c198 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c178:	4a11      	ldr	r2, [pc, #68]	; (800c1c0 <vPortValidateInterruptPriority+0x50>)
 800c17a:	5c9b      	ldrb	r3, [r3, r2]
 800c17c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c17e:	4a11      	ldr	r2, [pc, #68]	; (800c1c4 <vPortValidateInterruptPriority+0x54>)
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	429a      	cmp	r2, r3
 800c184:	d908      	bls.n	800c198 <vPortValidateInterruptPriority+0x28>
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	e7fe      	b.n	800c196 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c198:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c19c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1a4:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <vPortValidateInterruptPriority+0x58>)
 800c1a6:	6812      	ldr	r2, [r2, #0]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d908      	bls.n	800c1be <vPortValidateInterruptPriority+0x4e>
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	e7fe      	b.n	800c1bc <vPortValidateInterruptPriority+0x4c>
	}
 800c1be:	4770      	bx	lr
 800c1c0:	e000e3f0 	.word	0xe000e3f0
 800c1c4:	2400b25c 	.word	0x2400b25c
 800c1c8:	2400b260 	.word	0x2400b260

0800c1cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c1cc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c1d0:	b118      	cbz	r0, 800c1da <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c1da:	4770      	bx	lr

0800c1dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1e0:	f7ff fea0 	bl	800bf24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c1e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d004      	beq.n	800c1f6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c1ec:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c1ee:	f7ff febb 	bl	800bf68 <vPortExitCritical>

	return xReturn;
}
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c1f6:	2401      	movs	r4, #1
 800c1f8:	e7f9      	b.n	800c1ee <prvIsQueueFull+0x12>

0800c1fa <prvIsQueueEmpty>:
{
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c1fe:	f7ff fe91 	bl	800bf24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c204:	b923      	cbnz	r3, 800c210 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c206:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c208:	f7ff feae 	bl	800bf68 <vPortExitCritical>
}
 800c20c:	4620      	mov	r0, r4
 800c20e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c210:	2400      	movs	r4, #0
 800c212:	e7f9      	b.n	800c208 <prvIsQueueEmpty+0xe>

0800c214 <prvCopyDataToQueue>:
{
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	4604      	mov	r4, r0
 800c218:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c21a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c21c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c21e:	b95a      	cbnz	r2, 800c238 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c220:	6803      	ldr	r3, [r0, #0]
 800c222:	b11b      	cbz	r3, 800c22c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c224:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c226:	3601      	adds	r6, #1
 800c228:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c22c:	6880      	ldr	r0, [r0, #8]
 800c22e:	f001 fa3f 	bl	800d6b0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	60a3      	str	r3, [r4, #8]
 800c236:	e7f6      	b.n	800c226 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c238:	b96d      	cbnz	r5, 800c256 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c23a:	6840      	ldr	r0, [r0, #4]
 800c23c:	f010 f9e0 	bl	801c600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c240:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c242:	6863      	ldr	r3, [r4, #4]
 800c244:	4413      	add	r3, r2
 800c246:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c248:	68a2      	ldr	r2, [r4, #8]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d319      	bcc.n	800c282 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c252:	4628      	mov	r0, r5
 800c254:	e7e7      	b.n	800c226 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c256:	68c0      	ldr	r0, [r0, #12]
 800c258:	f010 f9d2 	bl	801c600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c25c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c25e:	4251      	negs	r1, r2
 800c260:	68e3      	ldr	r3, [r4, #12]
 800c262:	1a9b      	subs	r3, r3, r2
 800c264:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	4293      	cmp	r3, r2
 800c26a:	d202      	bcs.n	800c272 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c26c:	68a3      	ldr	r3, [r4, #8]
 800c26e:	440b      	add	r3, r1
 800c270:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c272:	2d02      	cmp	r5, #2
 800c274:	d001      	beq.n	800c27a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c276:	2000      	movs	r0, #0
 800c278:	e7d5      	b.n	800c226 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c27a:	b126      	cbz	r6, 800c286 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c27c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c27e:	2000      	movs	r0, #0
 800c280:	e7d1      	b.n	800c226 <prvCopyDataToQueue+0x12>
 800c282:	4628      	mov	r0, r5
 800c284:	e7cf      	b.n	800c226 <prvCopyDataToQueue+0x12>
 800c286:	2000      	movs	r0, #0
 800c288:	e7cd      	b.n	800c226 <prvCopyDataToQueue+0x12>

0800c28a <prvCopyDataFromQueue>:
{
 800c28a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c28c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c28e:	b16a      	cbz	r2, 800c2ac <prvCopyDataFromQueue+0x22>
{
 800c290:	b510      	push	{r4, lr}
 800c292:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c294:	68d9      	ldr	r1, [r3, #12]
 800c296:	4411      	add	r1, r2
 800c298:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c29a:	689c      	ldr	r4, [r3, #8]
 800c29c:	42a1      	cmp	r1, r4
 800c29e:	d301      	bcc.n	800c2a4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2a0:	6819      	ldr	r1, [r3, #0]
 800c2a2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2a4:	68d9      	ldr	r1, [r3, #12]
 800c2a6:	f010 f9ab 	bl	801c600 <memcpy>
}
 800c2aa:	bd10      	pop	{r4, pc}
 800c2ac:	4770      	bx	lr

0800c2ae <prvUnlockQueue>:
{
 800c2ae:	b538      	push	{r3, r4, r5, lr}
 800c2b0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c2b2:	f7ff fe37 	bl	800bf24 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c2b6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800c2ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2bc:	e001      	b.n	800c2c2 <prvUnlockQueue+0x14>
			--cTxLock;
 800c2be:	3c01      	subs	r4, #1
 800c2c0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	dd0a      	ble.n	800c2dc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2c8:	b143      	cbz	r3, 800c2dc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c2ce:	f001 f8f9 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0f3      	beq.n	800c2be <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800c2d6:	f001 f989 	bl	800d5ec <vTaskMissedYield>
 800c2da:	e7f0      	b.n	800c2be <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800c2dc:	23ff      	movs	r3, #255	; 0xff
 800c2de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c2e2:	f7ff fe41 	bl	800bf68 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c2e6:	f7ff fe1d 	bl	800bf24 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c2ea:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800c2ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2f0:	e001      	b.n	800c2f6 <prvUnlockQueue+0x48>
				--cRxLock;
 800c2f2:	3c01      	subs	r4, #1
 800c2f4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	dd0a      	ble.n	800c310 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2fa:	692b      	ldr	r3, [r5, #16]
 800c2fc:	b143      	cbz	r3, 800c310 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2fe:	f105 0010 	add.w	r0, r5, #16
 800c302:	f001 f8df 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c306:	2800      	cmp	r0, #0
 800c308:	d0f3      	beq.n	800c2f2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800c30a:	f001 f96f 	bl	800d5ec <vTaskMissedYield>
 800c30e:	e7f0      	b.n	800c2f2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800c310:	23ff      	movs	r3, #255	; 0xff
 800c312:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c316:	f7ff fe27 	bl	800bf68 <vPortExitCritical>
}
 800c31a:	bd38      	pop	{r3, r4, r5, pc}

0800c31c <xQueueGenericReset>:
{
 800c31c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800c31e:	b1e0      	cbz	r0, 800c35a <xQueueGenericReset+0x3e>
 800c320:	460d      	mov	r5, r1
 800c322:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c324:	f7ff fdfe 	bl	800bf24 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c32c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c32e:	fb01 3002 	mla	r0, r1, r2, r3
 800c332:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c334:	2000      	movs	r0, #0
 800c336:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c338:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c33a:	3a01      	subs	r2, #1
 800c33c:	fb02 3301 	mla	r3, r2, r1, r3
 800c340:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c342:	23ff      	movs	r3, #255	; 0xff
 800c344:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800c34c:	b9fd      	cbnz	r5, 800c38e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	b963      	cbnz	r3, 800c36c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800c352:	f7ff fe09 	bl	800bf68 <vPortExitCritical>
}
 800c356:	2001      	movs	r0, #1
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c36a:	e7fe      	b.n	800c36a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c36c:	f104 0010 	add.w	r0, r4, #16
 800c370:	f001 f8a8 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c374:	2800      	cmp	r0, #0
 800c376:	d0ec      	beq.n	800c352 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800c378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c380:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	e7e1      	b.n	800c352 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c38e:	f104 0010 	add.w	r0, r4, #16
 800c392:	f7ff fd1b 	bl	800bdcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c396:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c39a:	f7ff fd17 	bl	800bdcc <vListInitialise>
 800c39e:	e7d8      	b.n	800c352 <xQueueGenericReset+0x36>

0800c3a0 <prvInitialiseNewQueue>:
{
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	461d      	mov	r5, r3
 800c3a4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	b949      	cbnz	r1, 800c3be <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3aa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800c3ac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3ae:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff ffb2 	bl	800c31c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800c3b8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800c3bc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	e7f4      	b.n	800c3ac <prvInitialiseNewQueue+0xc>

0800c3c2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3c2:	b940      	cbnz	r0, 800c3d6 <xQueueGenericCreateStatic+0x14>
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	e7fe      	b.n	800c3d4 <xQueueGenericCreateStatic+0x12>
	{
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800c3dc:	b183      	cbz	r3, 800c400 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3de:	1e0b      	subs	r3, r1, #0
 800c3e0:	bf18      	it	ne
 800c3e2:	2301      	movne	r3, #1
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	bf08      	it	eq
 800c3e8:	f043 0301 	orreq.w	r3, r3, #1
 800c3ec:	b98b      	cbnz	r3, 800c412 <xQueueGenericCreateStatic+0x50>
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	e7fe      	b.n	800c3fe <xQueueGenericCreateStatic+0x3c>
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c410:	e7fe      	b.n	800c410 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c412:	fab1 f381 	clz	r3, r1
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	2a00      	cmp	r2, #0
 800c41a:	bf18      	it	ne
 800c41c:	f043 0301 	orrne.w	r3, r3, #1
 800c420:	b943      	cbnz	r3, 800c434 <xQueueGenericCreateStatic+0x72>
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	e7fe      	b.n	800c432 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c434:	2350      	movs	r3, #80	; 0x50
 800c436:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	2b50      	cmp	r3, #80	; 0x50
 800c43c:	d008      	beq.n	800c450 <xQueueGenericCreateStatic+0x8e>
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	e7fe      	b.n	800c44e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c450:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c452:	2301      	movs	r3, #1
 800c454:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c458:	9400      	str	r4, [sp, #0]
 800c45a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800c45e:	f7ff ff9f 	bl	800c3a0 <prvInitialiseNewQueue>
	}
 800c462:	4620      	mov	r0, r4
 800c464:	b004      	add	sp, #16
 800c466:	bd10      	pop	{r4, pc}

0800c468 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c468:	b940      	cbnz	r0, 800c47c <xQueueGenericCreate+0x14>
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	e7fe      	b.n	800c47a <xQueueGenericCreate+0x12>
	{
 800c47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47e:	b083      	sub	sp, #12
 800c480:	460d      	mov	r5, r1
 800c482:	4614      	mov	r4, r2
 800c484:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c486:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c48a:	3050      	adds	r0, #80	; 0x50
 800c48c:	f7ff fbe2 	bl	800bc54 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800c490:	4607      	mov	r7, r0
 800c492:	b150      	cbz	r0, 800c4aa <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c494:	2300      	movs	r3, #0
 800c496:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c49a:	9000      	str	r0, [sp, #0]
 800c49c:	4623      	mov	r3, r4
 800c49e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7ff ff7b 	bl	800c3a0 <prvInitialiseNewQueue>
	}
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	b003      	add	sp, #12
 800c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4b0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800c4b0:	b940      	cbnz	r0, 800c4c4 <xQueueCreateCountingSemaphoreStatic+0x14>
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	e7fe      	b.n	800c4c2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c4ca:	4288      	cmp	r0, r1
 800c4cc:	d208      	bcs.n	800c4e0 <xQueueCreateCountingSemaphoreStatic+0x30>
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	e7fe      	b.n	800c4de <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	f7ff ff6a 	bl	800c3c2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800c4ee:	b100      	cbz	r0, 800c4f2 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c4f0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c4f2:	b002      	add	sp, #8
 800c4f4:	bd10      	pop	{r4, pc}

0800c4f6 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800c4f6:	b940      	cbnz	r0, 800c50a <xQueueCreateCountingSemaphore+0x14>
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	e7fe      	b.n	800c508 <xQueueCreateCountingSemaphore+0x12>
	{
 800c50a:	b510      	push	{r4, lr}
 800c50c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800c50e:	4288      	cmp	r0, r1
 800c510:	d208      	bcs.n	800c524 <xQueueCreateCountingSemaphore+0x2e>
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	e7fe      	b.n	800c522 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c524:	2202      	movs	r2, #2
 800c526:	2100      	movs	r1, #0
 800c528:	f7ff ff9e 	bl	800c468 <xQueueGenericCreate>
		if( xHandle != NULL )
 800c52c:	b100      	cbz	r0, 800c530 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c52e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800c530:	bd10      	pop	{r4, pc}

0800c532 <xQueueGenericSend>:
{
 800c532:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c534:	b085      	sub	sp, #20
 800c536:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c538:	b188      	cbz	r0, 800c55e <xQueueGenericSend+0x2c>
 800c53a:	460f      	mov	r7, r1
 800c53c:	461d      	mov	r5, r3
 800c53e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c540:	b1b1      	cbz	r1, 800c570 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c542:	2d02      	cmp	r5, #2
 800c544:	d120      	bne.n	800c588 <xQueueGenericSend+0x56>
 800c546:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d01d      	beq.n	800c588 <xQueueGenericSend+0x56>
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	e7fe      	b.n	800c55c <xQueueGenericSend+0x2a>
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c56e:	e7fe      	b.n	800c56e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c570:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c572:	2b00      	cmp	r3, #0
 800c574:	d0e5      	beq.n	800c542 <xQueueGenericSend+0x10>
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	e7fe      	b.n	800c586 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c588:	f001 f836 	bl	800d5f8 <xTaskGetSchedulerState>
 800c58c:	4606      	mov	r6, r0
 800c58e:	b958      	cbnz	r0, 800c5a8 <xQueueGenericSend+0x76>
 800c590:	9b01      	ldr	r3, [sp, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d048      	beq.n	800c628 <xQueueGenericSend+0xf6>
 800c596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	e7fe      	b.n	800c5a6 <xQueueGenericSend+0x74>
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	e03d      	b.n	800c628 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff fe2f 	bl	800c214 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5b8:	b97b      	cbnz	r3, 800c5da <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800c5ba:	b148      	cbz	r0, 800c5d0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800c5bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c5d0:	f7ff fcca 	bl	800bf68 <vPortExitCritical>
				return pdPASS;
 800c5d4:	2001      	movs	r0, #1
}
 800c5d6:	b005      	add	sp, #20
 800c5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c5de:	f000 ff71 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0f4      	beq.n	800c5d0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800c5e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	e7e9      	b.n	800c5d0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800c5fc:	f7ff fcb4 	bl	800bf68 <vPortExitCritical>
					return errQUEUE_FULL;
 800c600:	2000      	movs	r0, #0
 800c602:	e7e8      	b.n	800c5d6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c604:	a802      	add	r0, sp, #8
 800c606:	f000 ffa3 	bl	800d550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c60a:	2601      	movs	r6, #1
 800c60c:	e019      	b.n	800c642 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800c60e:	2300      	movs	r3, #0
 800c610:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c614:	e021      	b.n	800c65a <xQueueGenericSend+0x128>
 800c616:	2300      	movs	r3, #0
 800c618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c61c:	e023      	b.n	800c666 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800c61e:	4620      	mov	r0, r4
 800c620:	f7ff fe45 	bl	800c2ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c624:	f000 fe4e 	bl	800d2c4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800c628:	f7ff fc7c 	bl	800bf24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c62c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c62e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c630:	429a      	cmp	r2, r3
 800c632:	d3bb      	bcc.n	800c5ac <xQueueGenericSend+0x7a>
 800c634:	2d02      	cmp	r5, #2
 800c636:	d0b9      	beq.n	800c5ac <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0de      	beq.n	800c5fc <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d0e0      	beq.n	800c604 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800c642:	f7ff fc91 	bl	800bf68 <vPortExitCritical>
		vTaskSuspendAll();
 800c646:	f000 fda3 	bl	800d190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c64a:	f7ff fc6b 	bl	800bf24 <vPortEnterCritical>
 800c64e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800c652:	b252      	sxtb	r2, r2
 800c654:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c658:	d0d9      	beq.n	800c60e <xQueueGenericSend+0xdc>
 800c65a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800c65e:	b252      	sxtb	r2, r2
 800c660:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c664:	d0d7      	beq.n	800c616 <xQueueGenericSend+0xe4>
 800c666:	f7ff fc7f 	bl	800bf68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c66a:	a901      	add	r1, sp, #4
 800c66c:	a802      	add	r0, sp, #8
 800c66e:	f000 ff7b 	bl	800d568 <xTaskCheckForTimeOut>
 800c672:	b9d8      	cbnz	r0, 800c6ac <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c674:	4620      	mov	r0, r4
 800c676:	f7ff fdb1 	bl	800c1dc <prvIsQueueFull>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0cf      	beq.n	800c61e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c67e:	9901      	ldr	r1, [sp, #4]
 800c680:	f104 0010 	add.w	r0, r4, #16
 800c684:	f000 feea 	bl	800d45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c688:	4620      	mov	r0, r4
 800c68a:	f7ff fe10 	bl	800c2ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c68e:	f000 fe19 	bl	800d2c4 <xTaskResumeAll>
 800c692:	2800      	cmp	r0, #0
 800c694:	d1c8      	bne.n	800c628 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800c696:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	e7bd      	b.n	800c628 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f7ff fdfe 	bl	800c2ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6b2:	f000 fe07 	bl	800d2c4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	e78d      	b.n	800c5d6 <xQueueGenericSend+0xa4>

0800c6ba <xQueueGenericSendFromISR>:
{
 800c6ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800c6be:	b190      	cbz	r0, 800c6e6 <xQueueGenericSendFromISR+0x2c>
 800c6c0:	460f      	mov	r7, r1
 800c6c2:	4616      	mov	r6, r2
 800c6c4:	461c      	mov	r4, r3
 800c6c6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6c8:	b1b1      	cbz	r1, 800c6f8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6ca:	2c02      	cmp	r4, #2
 800c6cc:	d120      	bne.n	800c710 <xQueueGenericSendFromISR+0x56>
 800c6ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d01d      	beq.n	800c710 <xQueueGenericSendFromISR+0x56>
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	e7fe      	b.n	800c6e4 <xQueueGenericSendFromISR+0x2a>
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c6f6:	e7fe      	b.n	800c6f6 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0e5      	beq.n	800c6ca <xQueueGenericSendFromISR+0x10>
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	e7fe      	b.n	800c70e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c710:	f7ff fd2e 	bl	800c170 <vPortValidateInterruptPriority>
	__asm volatile
 800c714:	f3ef 8911 	mrs	r9, BASEPRI
 800c718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c728:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c72a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d306      	bcc.n	800c73e <xQueueGenericSendFromISR+0x84>
 800c730:	2c02      	cmp	r4, #2
 800c732:	d004      	beq.n	800c73e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800c734:	2000      	movs	r0, #0
	__asm volatile
 800c736:	f389 8811 	msr	BASEPRI, r9
}
 800c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800c73e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800c742:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c746:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c748:	4622      	mov	r2, r4
 800c74a:	4639      	mov	r1, r7
 800c74c:	4628      	mov	r0, r5
 800c74e:	f7ff fd61 	bl	800c214 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c752:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c756:	d006      	beq.n	800c766 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c758:	f108 0301 	add.w	r3, r8, #1
 800c75c:	b25b      	sxtb	r3, r3
 800c75e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800c762:	2001      	movs	r0, #1
 800c764:	e7e7      	b.n	800c736 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c768:	b90b      	cbnz	r3, 800c76e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800c76a:	2001      	movs	r0, #1
 800c76c:	e7e3      	b.n	800c736 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c76e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c772:	f000 fea7 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c776:	b118      	cbz	r0, 800c780 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800c778:	b126      	cbz	r6, 800c784 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c77a:	2001      	movs	r0, #1
 800c77c:	6030      	str	r0, [r6, #0]
 800c77e:	e7da      	b.n	800c736 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800c780:	2001      	movs	r0, #1
 800c782:	e7d8      	b.n	800c736 <xQueueGenericSendFromISR+0x7c>
 800c784:	2001      	movs	r0, #1
 800c786:	e7d6      	b.n	800c736 <xQueueGenericSendFromISR+0x7c>

0800c788 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800c788:	b168      	cbz	r0, 800c7a6 <xQueueGiveFromISR+0x1e>
{
 800c78a:	b570      	push	{r4, r5, r6, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c792:	b18b      	cbz	r3, 800c7b8 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueGiveFromISR+0x1c>
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c7b6:	e7fe      	b.n	800c7b6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7b8:	6803      	ldr	r3, [r0, #0]
 800c7ba:	b1eb      	cbz	r3, 800c7f8 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7bc:	f7ff fcd8 	bl	800c170 <vPortValidateInterruptPriority>
	__asm volatile
 800c7c0:	f3ef 8611 	mrs	r6, BASEPRI
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c7d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d926      	bls.n	800c82a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7dc:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800c7e0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7e2:	3201      	adds	r2, #1
 800c7e4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d011      	beq.n	800c810 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	b25b      	sxtb	r3, r3
 800c7f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	e019      	b.n	800c82c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c7f8:	6883      	ldr	r3, [r0, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0de      	beq.n	800c7bc <xQueueGiveFromISR+0x34>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	e7fe      	b.n	800c80e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c810:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c812:	b90b      	cbnz	r3, 800c818 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800c814:	2001      	movs	r0, #1
 800c816:	e009      	b.n	800c82c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c818:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800c81c:	f000 fe52 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c820:	b138      	cbz	r0, 800c832 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800c822:	b144      	cbz	r4, 800c836 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c824:	2001      	movs	r0, #1
 800c826:	6020      	str	r0, [r4, #0]
 800c828:	e000      	b.n	800c82c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800c82a:	2000      	movs	r0, #0
	__asm volatile
 800c82c:	f386 8811 	msr	BASEPRI, r6
}
 800c830:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800c832:	2001      	movs	r0, #1
 800c834:	e7fa      	b.n	800c82c <xQueueGiveFromISR+0xa4>
 800c836:	2001      	movs	r0, #1
 800c838:	e7f8      	b.n	800c82c <xQueueGiveFromISR+0xa4>

0800c83a <xQueueReceive>:
{
 800c83a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83c:	b085      	sub	sp, #20
 800c83e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c840:	b190      	cbz	r0, 800c868 <xQueueReceive+0x2e>
 800c842:	460f      	mov	r7, r1
 800c844:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c846:	b1c1      	cbz	r1, 800c87a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c848:	f000 fed6 	bl	800d5f8 <xTaskGetSchedulerState>
 800c84c:	4606      	mov	r6, r0
 800c84e:	bb00      	cbnz	r0, 800c892 <xQueueReceive+0x58>
 800c850:	9b01      	ldr	r3, [sp, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d05e      	beq.n	800c914 <xQueueReceive+0xda>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	e7fe      	b.n	800c866 <xQueueReceive+0x2c>
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c878:	e7fe      	b.n	800c878 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c87a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0e3      	beq.n	800c848 <xQueueReceive+0xe>
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	e7fe      	b.n	800c890 <xQueueReceive+0x56>
 800c892:	2600      	movs	r6, #0
 800c894:	e03e      	b.n	800c914 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c896:	4639      	mov	r1, r7
 800c898:	4620      	mov	r0, r4
 800c89a:	f7ff fcf6 	bl	800c28a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c89e:	3d01      	subs	r5, #1
 800c8a0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	b923      	cbnz	r3, 800c8b0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800c8a6:	f7ff fb5f 	bl	800bf68 <vPortExitCritical>
				return pdPASS;
 800c8aa:	2001      	movs	r0, #1
}
 800c8ac:	b005      	add	sp, #20
 800c8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8b0:	f104 0010 	add.w	r0, r4, #16
 800c8b4:	f000 fe06 	bl	800d4c4 <xTaskRemoveFromEventList>
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d0f4      	beq.n	800c8a6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800c8bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	e7e9      	b.n	800c8a6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800c8d2:	f7ff fb49 	bl	800bf68 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	e7e8      	b.n	800c8ac <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8da:	a802      	add	r0, sp, #8
 800c8dc:	f000 fe38 	bl	800d550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8e0:	2601      	movs	r6, #1
 800c8e2:	e021      	b.n	800c928 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c8ea:	e029      	b.n	800c940 <xQueueReceive+0x106>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8f2:	e02b      	b.n	800c94c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff fcda 	bl	800c2ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8fa:	f000 fce3 	bl	800d2c4 <xTaskResumeAll>
 800c8fe:	e009      	b.n	800c914 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800c900:	4620      	mov	r0, r4
 800c902:	f7ff fcd4 	bl	800c2ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c906:	f000 fcdd 	bl	800d2c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c90a:	4620      	mov	r0, r4
 800c90c:	f7ff fc75 	bl	800c1fa <prvIsQueueEmpty>
 800c910:	2800      	cmp	r0, #0
 800c912:	d13f      	bne.n	800c994 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800c914:	f7ff fb06 	bl	800bf24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c918:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	d1bb      	bne.n	800c896 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0d6      	beq.n	800c8d2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800c924:	2e00      	cmp	r6, #0
 800c926:	d0d8      	beq.n	800c8da <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800c928:	f7ff fb1e 	bl	800bf68 <vPortExitCritical>
		vTaskSuspendAll();
 800c92c:	f000 fc30 	bl	800d190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c930:	f7ff faf8 	bl	800bf24 <vPortEnterCritical>
 800c934:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c938:	b25b      	sxtb	r3, r3
 800c93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93e:	d0d1      	beq.n	800c8e4 <xQueueReceive+0xaa>
 800c940:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c944:	b25b      	sxtb	r3, r3
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d0cf      	beq.n	800c8ec <xQueueReceive+0xb2>
 800c94c:	f7ff fb0c 	bl	800bf68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c950:	a901      	add	r1, sp, #4
 800c952:	a802      	add	r0, sp, #8
 800c954:	f000 fe08 	bl	800d568 <xTaskCheckForTimeOut>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d1d1      	bne.n	800c900 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff fc4c 	bl	800c1fa <prvIsQueueEmpty>
 800c962:	2800      	cmp	r0, #0
 800c964:	d0c6      	beq.n	800c8f4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c966:	9901      	ldr	r1, [sp, #4]
 800c968:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c96c:	f000 fd76 	bl	800d45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff fc9c 	bl	800c2ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c976:	f000 fca5 	bl	800d2c4 <xTaskResumeAll>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d1ca      	bne.n	800c914 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800c97e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c986:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	e7bf      	b.n	800c914 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800c994:	2000      	movs	r0, #0
 800c996:	e789      	b.n	800c8ac <xQueueReceive+0x72>

0800c998 <xQueueSemaphoreTake>:
{
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c99e:	b158      	cbz	r0, 800c9b8 <xQueueSemaphoreTake+0x20>
 800c9a0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c9a4:	b18b      	cbz	r3, 800c9ca <xQueueSemaphoreTake+0x32>
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	e7fe      	b.n	800c9b6 <xQueueSemaphoreTake+0x1e>
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ca:	f000 fe15 	bl	800d5f8 <xTaskGetSchedulerState>
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	b950      	cbnz	r0, 800c9e8 <xQueueSemaphoreTake+0x50>
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	b15b      	cbz	r3, 800c9ee <xQueueSemaphoreTake+0x56>
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	e7fe      	b.n	800c9e6 <xQueueSemaphoreTake+0x4e>
 800c9e8:	2600      	movs	r6, #0
 800c9ea:	4635      	mov	r5, r6
 800c9ec:	e055      	b.n	800ca9a <xQueueSemaphoreTake+0x102>
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	e053      	b.n	800ca9a <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	b13b      	cbz	r3, 800ca0a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	b94b      	cbnz	r3, 800ca12 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800c9fe:	f7ff fab3 	bl	800bf68 <vPortExitCritical>
				return pdPASS;
 800ca02:	2601      	movs	r6, #1
}
 800ca04:	4630      	mov	r0, r6
 800ca06:	b004      	add	sp, #16
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca0a:	f000 fee9 	bl	800d7e0 <pvTaskIncrementMutexHeldCount>
 800ca0e:	60a0      	str	r0, [r4, #8]
 800ca10:	e7f3      	b.n	800c9fa <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca12:	f104 0010 	add.w	r0, r4, #16
 800ca16:	f000 fd55 	bl	800d4c4 <xTaskRemoveFromEventList>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d0ef      	beq.n	800c9fe <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800ca1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ca22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	e7e4      	b.n	800c9fe <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca34:	b146      	cbz	r6, 800ca48 <xQueueSemaphoreTake+0xb0>
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	e7fe      	b.n	800ca46 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800ca48:	f7ff fa8e 	bl	800bf68 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ca4c:	e7da      	b.n	800ca04 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca4e:	a802      	add	r0, sp, #8
 800ca50:	f000 fd7e 	bl	800d550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca54:	2501      	movs	r5, #1
 800ca56:	e02a      	b.n	800caae <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ca5e:	e032      	b.n	800cac6 <xQueueSemaphoreTake+0x12e>
 800ca60:	2300      	movs	r3, #0
 800ca62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca66:	e034      	b.n	800cad2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800ca68:	f7ff fa5c 	bl	800bf24 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca6c:	68a0      	ldr	r0, [r4, #8]
 800ca6e:	f000 fdd3 	bl	800d618 <xTaskPriorityInherit>
 800ca72:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800ca74:	f7ff fa78 	bl	800bf68 <vPortExitCritical>
 800ca78:	e03b      	b.n	800caf2 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff fc17 	bl	800c2ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca80:	f000 fc20 	bl	800d2c4 <xTaskResumeAll>
 800ca84:	e009      	b.n	800ca9a <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7ff fc11 	bl	800c2ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca8c:	f000 fc1a 	bl	800d2c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7ff fbb2 	bl	800c1fa <prvIsQueueEmpty>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d142      	bne.n	800cb20 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800ca9a:	f7ff fa43 	bl	800bf24 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1a6      	bne.n	800c9f2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800caa4:	9b01      	ldr	r3, [sp, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d0c4      	beq.n	800ca34 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800caaa:	2d00      	cmp	r5, #0
 800caac:	d0cf      	beq.n	800ca4e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800caae:	f7ff fa5b 	bl	800bf68 <vPortExitCritical>
		vTaskSuspendAll();
 800cab2:	f000 fb6d 	bl	800d190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cab6:	f7ff fa35 	bl	800bf24 <vPortEnterCritical>
 800caba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cabe:	b25b      	sxtb	r3, r3
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d0c8      	beq.n	800ca58 <xQueueSemaphoreTake+0xc0>
 800cac6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad0:	d0c6      	beq.n	800ca60 <xQueueSemaphoreTake+0xc8>
 800cad2:	f7ff fa49 	bl	800bf68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cad6:	a901      	add	r1, sp, #4
 800cad8:	a802      	add	r0, sp, #8
 800cada:	f000 fd45 	bl	800d568 <xTaskCheckForTimeOut>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d1d1      	bne.n	800ca86 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff fb89 	bl	800c1fa <prvIsQueueEmpty>
 800cae8:	2800      	cmp	r0, #0
 800caea:	d0c6      	beq.n	800ca7a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0ba      	beq.n	800ca68 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caf2:	9901      	ldr	r1, [sp, #4]
 800caf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800caf8:	f000 fcb0 	bl	800d45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff fbd6 	bl	800c2ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb02:	f000 fbdf 	bl	800d2c4 <xTaskResumeAll>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d1c7      	bne.n	800ca9a <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800cb0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	e7bc      	b.n	800ca9a <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800cb20:	b90e      	cbnz	r6, 800cb26 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800cb22:	2600      	movs	r6, #0
 800cb24:	e76e      	b.n	800ca04 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800cb26:	f7ff f9fd 	bl	800bf24 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f7ff fb4e 	bl	800c1cc <prvGetDisinheritPriorityAfterTimeout>
 800cb30:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb32:	68a0      	ldr	r0, [r4, #8]
 800cb34:	f000 fe04 	bl	800d740 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800cb38:	f7ff fa16 	bl	800bf68 <vPortExitCritical>
 800cb3c:	e7f1      	b.n	800cb22 <xQueueSemaphoreTake+0x18a>

0800cb3e <xQueueReceiveFromISR>:
{
 800cb3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cb42:	b1b0      	cbz	r0, 800cb72 <xQueueReceiveFromISR+0x34>
 800cb44:	460d      	mov	r5, r1
 800cb46:	4616      	mov	r6, r2
 800cb48:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb4a:	b1d9      	cbz	r1, 800cb84 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb4c:	f7ff fb10 	bl	800c170 <vPortValidateInterruptPriority>
	__asm volatile
 800cb50:	f3ef 8811 	mrs	r8, BASEPRI
 800cb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb58:	f383 8811 	msr	BASEPRI, r3
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb64:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb66:	b9cf      	cbnz	r7, 800cb9c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800cb68:	2000      	movs	r0, #0
	__asm volatile
 800cb6a:	f388 8811 	msr	BASEPRI, r8
}
 800cb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cb82:	e7fe      	b.n	800cb82 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0e0      	beq.n	800cb4c <xQueueReceiveFromISR+0xe>
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	e7fe      	b.n	800cb9a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800cb9c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800cba0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cba4:	4629      	mov	r1, r5
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fb6f 	bl	800c28a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbac:	3f01      	subs	r7, #1
 800cbae:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800cbb0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cbb4:	d006      	beq.n	800cbc4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cbb6:	f109 0301 	add.w	r3, r9, #1
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7d2      	b.n	800cb6a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbc4:	6923      	ldr	r3, [r4, #16]
 800cbc6:	b90b      	cbnz	r3, 800cbcc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800cbc8:	2001      	movs	r0, #1
 800cbca:	e7ce      	b.n	800cb6a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbcc:	f104 0010 	add.w	r0, r4, #16
 800cbd0:	f000 fc78 	bl	800d4c4 <xTaskRemoveFromEventList>
 800cbd4:	b118      	cbz	r0, 800cbde <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800cbd6:	b126      	cbz	r6, 800cbe2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cbd8:	2001      	movs	r0, #1
 800cbda:	6030      	str	r0, [r6, #0]
 800cbdc:	e7c5      	b.n	800cb6a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7c3      	b.n	800cb6a <xQueueReceiveFromISR+0x2c>
 800cbe2:	2001      	movs	r0, #1
 800cbe4:	e7c1      	b.n	800cb6a <xQueueReceiveFromISR+0x2c>
	...

0800cbe8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2b07      	cmp	r3, #7
 800cbec:	d80c      	bhi.n	800cc08 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbee:	4a07      	ldr	r2, [pc, #28]	; (800cc0c <vQueueAddToRegistry+0x24>)
 800cbf0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cbf4:	b10a      	cbz	r2, 800cbfa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	e7f7      	b.n	800cbea <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbfa:	4a04      	ldr	r2, [pc, #16]	; (800cc0c <vQueueAddToRegistry+0x24>)
 800cbfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc04:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc06:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	2400b264 	.word	0x2400b264

0800cc10 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc10:	2300      	movs	r3, #0
 800cc12:	2b07      	cmp	r3, #7
 800cc14:	d80f      	bhi.n	800cc36 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc16:	4a08      	ldr	r2, [pc, #32]	; (800cc38 <vQueueUnregisterQueue+0x28>)
 800cc18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc1c:	6852      	ldr	r2, [r2, #4]
 800cc1e:	4282      	cmp	r2, r0
 800cc20:	d001      	beq.n	800cc26 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc22:	3301      	adds	r3, #1
 800cc24:	e7f5      	b.n	800cc12 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc26:	4a04      	ldr	r2, [pc, #16]	; (800cc38 <vQueueUnregisterQueue+0x28>)
 800cc28:	2100      	movs	r1, #0
 800cc2a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc32:	6059      	str	r1, [r3, #4]
				break;
 800cc34:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc36:	4770      	bx	lr
 800cc38:	2400b264 	.word	0x2400b264

0800cc3c <vQueueDelete>:
	configASSERT( pxQueue );
 800cc3c:	b138      	cbz	r0, 800cc4e <vQueueDelete+0x12>
{
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800cc42:	f7ff ffe5 	bl	800cc10 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cc46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cc4a:	b14b      	cbz	r3, 800cc60 <vQueueDelete+0x24>
}
 800cc4c:	bd10      	pop	{r4, pc}
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cc5e:	e7fe      	b.n	800cc5e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800cc60:	4620      	mov	r0, r4
 800cc62:	f7ff f875 	bl	800bd50 <vPortFree>
}
 800cc66:	e7f1      	b.n	800cc4c <vQueueDelete+0x10>

0800cc68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	460d      	mov	r5, r1
 800cc6e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc70:	f7ff f958 	bl	800bf24 <vPortEnterCritical>
 800cc74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc78:	b25b      	sxtb	r3, r3
 800cc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7e:	d00d      	beq.n	800cc9c <vQueueWaitForMessageRestricted+0x34>
 800cc80:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d00b      	beq.n	800cca4 <vQueueWaitForMessageRestricted+0x3c>
 800cc8c:	f7ff f96c 	bl	800bf68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc92:	b15b      	cbz	r3, 800ccac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc94:	4620      	mov	r0, r4
 800cc96:	f7ff fb0a 	bl	800c2ae <prvUnlockQueue>
	}
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800cca2:	e7ed      	b.n	800cc80 <vQueueWaitForMessageRestricted+0x18>
 800cca4:	2300      	movs	r3, #0
 800cca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccaa:	e7ef      	b.n	800cc8c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccac:	4632      	mov	r2, r6
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ccb4:	f000 fbea 	bl	800d48c <vTaskPlaceOnEventListRestricted>
 800ccb8:	e7ec      	b.n	800cc94 <vQueueWaitForMessageRestricted+0x2c>
	...

0800ccbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccbc:	4b08      	ldr	r3, [pc, #32]	; (800cce0 <prvResetNextTaskUnblockTime+0x24>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	b923      	cbnz	r3, 800ccce <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccc4:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <prvResetNextTaskUnblockTime+0x28>)
 800ccc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccce:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <prvResetNextTaskUnblockTime+0x24>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	4b02      	ldr	r3, [pc, #8]	; (800cce4 <prvResetNextTaskUnblockTime+0x28>)
 800ccda:	601a      	str	r2, [r3, #0]
	}
}
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	2400b2a8 	.word	0x2400b2a8
 800cce4:	2400b750 	.word	0x2400b750

0800cce8 <prvInitialiseNewTask>:
{
 800cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccec:	4680      	mov	r8, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	4617      	mov	r7, r2
 800ccf2:	4699      	mov	r9, r3
 800ccf4:	9e08      	ldr	r6, [sp, #32]
 800ccf6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ccfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccfc:	0092      	lsls	r2, r2, #2
 800ccfe:	21a5      	movs	r1, #165	; 0xa5
 800cd00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cd02:	f00f fc8b 	bl	801c61c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cd08:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800cd0c:	443a      	add	r2, r7
 800cd0e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd12:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	d043      	beq.n	800cda2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1a:	f04f 0c00 	mov.w	ip, #0
 800cd1e:	f1bc 0f0f 	cmp.w	ip, #15
 800cd22:	d80b      	bhi.n	800cd3c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd24:	f815 200c 	ldrb.w	r2, [r5, ip]
 800cd28:	eb04 030c 	add.w	r3, r4, ip
 800cd2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800cd30:	f815 300c 	ldrb.w	r3, [r5, ip]
 800cd34:	b113      	cbz	r3, 800cd3c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd36:	f10c 0c01 	add.w	ip, ip, #1
 800cd3a:	e7f0      	b.n	800cd1e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd42:	2e37      	cmp	r6, #55	; 0x37
 800cd44:	d900      	bls.n	800cd48 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd46:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800cd48:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800cd4a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd50:	1d20      	adds	r0, r4, #4
 800cd52:	f7ff f846 	bl	800bde2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd56:	f104 0018 	add.w	r0, r4, #24
 800cd5a:	f7ff f842 	bl	800bde2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd5e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd60:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800cd64:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd66:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800cd68:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd6c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd70:	2260      	movs	r2, #96	; 0x60
 800cd72:	4629      	mov	r1, r5
 800cd74:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800cd78:	f00f fc50 	bl	801c61c <memset>
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <prvInitialiseNewTask+0xc4>)
 800cd7e:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd80:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <prvInitialiseNewTask+0xc8>)
 800cd82:	65e3      	str	r3, [r4, #92]	; 0x5c
 800cd84:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <prvInitialiseNewTask+0xcc>)
 800cd86:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd88:	464a      	mov	r2, r9
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	f7ff f8a1 	bl	800bed4 <pxPortInitialiseStack>
 800cd92:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cd94:	f1ba 0f00 	cmp.w	sl, #0
 800cd98:	d001      	beq.n	800cd9e <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd9a:	f8ca 4000 	str.w	r4, [sl]
}
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cda2:	2300      	movs	r3, #0
 800cda4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800cda8:	e7cb      	b.n	800cd42 <prvInitialiseNewTask+0x5a>
 800cdaa:	bf00      	nop
 800cdac:	0801f5c4 	.word	0x0801f5c4
 800cdb0:	0801f5e4 	.word	0x0801f5e4
 800cdb4:	0801f5a4 	.word	0x0801f5a4

0800cdb8 <prvInitialiseTaskLists>:
{
 800cdb8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdba:	2400      	movs	r4, #0
 800cdbc:	e007      	b.n	800cdce <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdbe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800cdc2:	0093      	lsls	r3, r2, #2
 800cdc4:	480e      	ldr	r0, [pc, #56]	; (800ce00 <prvInitialiseTaskLists+0x48>)
 800cdc6:	4418      	add	r0, r3
 800cdc8:	f7ff f800 	bl	800bdcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdcc:	3401      	adds	r4, #1
 800cdce:	2c37      	cmp	r4, #55	; 0x37
 800cdd0:	d9f5      	bls.n	800cdbe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800cdd2:	4d0c      	ldr	r5, [pc, #48]	; (800ce04 <prvInitialiseTaskLists+0x4c>)
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f7fe fff9 	bl	800bdcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdda:	4c0b      	ldr	r4, [pc, #44]	; (800ce08 <prvInitialiseTaskLists+0x50>)
 800cddc:	4620      	mov	r0, r4
 800cdde:	f7fe fff5 	bl	800bdcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cde2:	480a      	ldr	r0, [pc, #40]	; (800ce0c <prvInitialiseTaskLists+0x54>)
 800cde4:	f7fe fff2 	bl	800bdcc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800cde8:	4809      	ldr	r0, [pc, #36]	; (800ce10 <prvInitialiseTaskLists+0x58>)
 800cdea:	f7fe ffef 	bl	800bdcc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800cdee:	4809      	ldr	r0, [pc, #36]	; (800ce14 <prvInitialiseTaskLists+0x5c>)
 800cdf0:	f7fe ffec 	bl	800bdcc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdf4:	4b08      	ldr	r3, [pc, #32]	; (800ce18 <prvInitialiseTaskLists+0x60>)
 800cdf6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdf8:	4b08      	ldr	r3, [pc, #32]	; (800ce1c <prvInitialiseTaskLists+0x64>)
 800cdfa:	601c      	str	r4, [r3, #0]
}
 800cdfc:	bd38      	pop	{r3, r4, r5, pc}
 800cdfe:	bf00      	nop
 800ce00:	2400b2b0 	.word	0x2400b2b0
 800ce04:	2400b724 	.word	0x2400b724
 800ce08:	2400b738 	.word	0x2400b738
 800ce0c:	2400b75c 	.word	0x2400b75c
 800ce10:	2400b788 	.word	0x2400b788
 800ce14:	2400b774 	.word	0x2400b774
 800ce18:	2400b2a8 	.word	0x2400b2a8
 800ce1c:	2400b2ac 	.word	0x2400b2ac

0800ce20 <prvAddNewTaskToReadyList>:
{
 800ce20:	b510      	push	{r4, lr}
 800ce22:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ce24:	f7ff f87e 	bl	800bf24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ce28:	4a22      	ldr	r2, [pc, #136]	; (800ceb4 <prvAddNewTaskToReadyList+0x94>)
 800ce2a:	6813      	ldr	r3, [r2, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce30:	4b21      	ldr	r3, [pc, #132]	; (800ceb8 <prvAddNewTaskToReadyList+0x98>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	b15b      	cbz	r3, 800ce4e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800ce36:	4b21      	ldr	r3, [pc, #132]	; (800cebc <prvAddNewTaskToReadyList+0x9c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	b96b      	cbnz	r3, 800ce58 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <prvAddNewTaskToReadyList+0x98>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d807      	bhi.n	800ce58 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800ce48:	4b1b      	ldr	r3, [pc, #108]	; (800ceb8 <prvAddNewTaskToReadyList+0x98>)
 800ce4a:	601c      	str	r4, [r3, #0]
 800ce4c:	e004      	b.n	800ce58 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800ce4e:	4b1a      	ldr	r3, [pc, #104]	; (800ceb8 <prvAddNewTaskToReadyList+0x98>)
 800ce50:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d029      	beq.n	800ceac <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800ce58:	4a19      	ldr	r2, [pc, #100]	; (800cec0 <prvAddNewTaskToReadyList+0xa0>)
 800ce5a:	6813      	ldr	r3, [r2, #0]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce60:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800ce62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ce64:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <prvAddNewTaskToReadyList+0xa4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4298      	cmp	r0, r3
 800ce6a:	d901      	bls.n	800ce70 <prvAddNewTaskToReadyList+0x50>
 800ce6c:	4b15      	ldr	r3, [pc, #84]	; (800cec4 <prvAddNewTaskToReadyList+0xa4>)
 800ce6e:	6018      	str	r0, [r3, #0]
 800ce70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ce74:	1d21      	adds	r1, r4, #4
 800ce76:	4b14      	ldr	r3, [pc, #80]	; (800cec8 <prvAddNewTaskToReadyList+0xa8>)
 800ce78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce7c:	f7fe ffb4 	bl	800bde8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ce80:	f7ff f872 	bl	800bf68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ce84:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <prvAddNewTaskToReadyList+0x9c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	b17b      	cbz	r3, 800ceaa <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce8a:	4b0b      	ldr	r3, [pc, #44]	; (800ceb8 <prvAddNewTaskToReadyList+0x98>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d209      	bcs.n	800ceaa <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800ce96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	f3bf 8f6f 	isb	sy
}
 800ceaa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800ceac:	f7ff ff84 	bl	800cdb8 <prvInitialiseTaskLists>
 800ceb0:	e7d2      	b.n	800ce58 <prvAddNewTaskToReadyList+0x38>
 800ceb2:	bf00      	nop
 800ceb4:	2400b710 	.word	0x2400b710
 800ceb8:	2400b2a4 	.word	0x2400b2a4
 800cebc:	2400b770 	.word	0x2400b770
 800cec0:	2400b71c 	.word	0x2400b71c
 800cec4:	2400b720 	.word	0x2400b720
 800cec8:	2400b2b0 	.word	0x2400b2b0

0800cecc <prvDeleteTCB>:
	{
 800cecc:	b510      	push	{r4, lr}
 800cece:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ced0:	3054      	adds	r0, #84	; 0x54
 800ced2:	f00f ff87 	bl	801cde4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ced6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800ceda:	b163      	cbz	r3, 800cef6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d011      	beq.n	800cf04 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d00e      	beq.n	800cf02 <prvDeleteTCB+0x36>
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	e7fe      	b.n	800cef4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800cef6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800cef8:	f7fe ff2a 	bl	800bd50 <vPortFree>
				vPortFree( pxTCB );
 800cefc:	4620      	mov	r0, r4
 800cefe:	f7fe ff27 	bl	800bd50 <vPortFree>
	}
 800cf02:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7fe ff23 	bl	800bd50 <vPortFree>
 800cf0a:	e7fa      	b.n	800cf02 <prvDeleteTCB+0x36>

0800cf0c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf0c:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <prvCheckTasksWaitingTermination+0x40>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	b1d3      	cbz	r3, 800cf48 <prvCheckTasksWaitingTermination+0x3c>
{
 800cf12:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800cf14:	f7ff f806 	bl	800bf24 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf18:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <prvCheckTasksWaitingTermination+0x44>)
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf1e:	1d20      	adds	r0, r4, #4
 800cf20:	f7fe ff86 	bl	800be30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf24:	4a0b      	ldr	r2, [pc, #44]	; (800cf54 <prvCheckTasksWaitingTermination+0x48>)
 800cf26:	6813      	ldr	r3, [r2, #0]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf2c:	4a07      	ldr	r2, [pc, #28]	; (800cf4c <prvCheckTasksWaitingTermination+0x40>)
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800cf34:	f7ff f818 	bl	800bf68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f7ff ffc7 	bl	800cecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf3e:	4b03      	ldr	r3, [pc, #12]	; (800cf4c <prvCheckTasksWaitingTermination+0x40>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e6      	bne.n	800cf14 <prvCheckTasksWaitingTermination+0x8>
}
 800cf46:	bd10      	pop	{r4, pc}
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	2400b714 	.word	0x2400b714
 800cf50:	2400b788 	.word	0x2400b788
 800cf54:	2400b710 	.word	0x2400b710

0800cf58 <prvIdleTask>:
{
 800cf58:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800cf5a:	f7ff ffd7 	bl	800cf0c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf5e:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <prvIdleTask+0x24>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d9f9      	bls.n	800cf5a <prvIdleTask+0x2>
				taskYIELD();
 800cf66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cf6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	e7ee      	b.n	800cf5a <prvIdleTask+0x2>
 800cf7c:	2400b2b0 	.word	0x2400b2b0

0800cf80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	4604      	mov	r4, r0
 800cf84:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf86:	4b19      	ldr	r3, [pc, #100]	; (800cfec <prvAddCurrentTaskToDelayedList+0x6c>)
 800cf88:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf8a:	4b19      	ldr	r3, [pc, #100]	; (800cff0 <prvAddCurrentTaskToDelayedList+0x70>)
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	3004      	adds	r0, #4
 800cf90:	f7fe ff4e 	bl	800be30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cf98:	bf14      	ite	ne
 800cf9a:	2300      	movne	r3, #0
 800cf9c:	2301      	moveq	r3, #1
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	bf08      	it	eq
 800cfa2:	2300      	moveq	r3, #0
 800cfa4:	b96b      	cbnz	r3, 800cfc2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfa6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfa8:	4b11      	ldr	r3, [pc, #68]	; (800cff0 <prvAddCurrentTaskToDelayedList+0x70>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800cfae:	42a6      	cmp	r6, r4
 800cfb0:	d90e      	bls.n	800cfd0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfb2:	4b10      	ldr	r3, [pc, #64]	; (800cff4 <prvAddCurrentTaskToDelayedList+0x74>)
 800cfb4:	6818      	ldr	r0, [r3, #0]
 800cfb6:	4b0e      	ldr	r3, [pc, #56]	; (800cff0 <prvAddCurrentTaskToDelayedList+0x70>)
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	3104      	adds	r1, #4
 800cfbc:	f7fe ff1f 	bl	800bdfe <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfc0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc2:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <prvAddCurrentTaskToDelayedList+0x70>)
 800cfc4:	6819      	ldr	r1, [r3, #0]
 800cfc6:	3104      	adds	r1, #4
 800cfc8:	480b      	ldr	r0, [pc, #44]	; (800cff8 <prvAddCurrentTaskToDelayedList+0x78>)
 800cfca:	f7fe ff0d 	bl	800bde8 <vListInsertEnd>
 800cfce:	e7f7      	b.n	800cfc0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <prvAddCurrentTaskToDelayedList+0x7c>)
 800cfd2:	6818      	ldr	r0, [r3, #0]
 800cfd4:	4b06      	ldr	r3, [pc, #24]	; (800cff0 <prvAddCurrentTaskToDelayedList+0x70>)
 800cfd6:	6819      	ldr	r1, [r3, #0]
 800cfd8:	3104      	adds	r1, #4
 800cfda:	f7fe ff10 	bl	800bdfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfde:	4b08      	ldr	r3, [pc, #32]	; (800d000 <prvAddCurrentTaskToDelayedList+0x80>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	42a3      	cmp	r3, r4
 800cfe4:	d9ec      	bls.n	800cfc0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800cfe6:	4b06      	ldr	r3, [pc, #24]	; (800d000 <prvAddCurrentTaskToDelayedList+0x80>)
 800cfe8:	601c      	str	r4, [r3, #0]
}
 800cfea:	e7e9      	b.n	800cfc0 <prvAddCurrentTaskToDelayedList+0x40>
 800cfec:	2400b79c 	.word	0x2400b79c
 800cff0:	2400b2a4 	.word	0x2400b2a4
 800cff4:	2400b2ac 	.word	0x2400b2ac
 800cff8:	2400b774 	.word	0x2400b774
 800cffc:	2400b2a8 	.word	0x2400b2a8
 800d000:	2400b750 	.word	0x2400b750

0800d004 <xTaskCreateStatic>:
	{
 800d004:	b530      	push	{r4, r5, lr}
 800d006:	b087      	sub	sp, #28
 800d008:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d00a:	b17c      	cbz	r4, 800d02c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d00c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d00e:	b1b5      	cbz	r5, 800d03e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d010:	25bc      	movs	r5, #188	; 0xbc
 800d012:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d014:	9d04      	ldr	r5, [sp, #16]
 800d016:	2dbc      	cmp	r5, #188	; 0xbc
 800d018:	d01a      	beq.n	800d050 <xTaskCreateStatic+0x4c>
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	e7fe      	b.n	800d02a <xTaskCreateStatic+0x26>
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d03c:	e7fe      	b.n	800d03c <xTaskCreateStatic+0x38>
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d04e:	e7fe      	b.n	800d04e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d050:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d054:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d056:	2402      	movs	r4, #2
 800d058:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d05c:	2400      	movs	r4, #0
 800d05e:	9403      	str	r4, [sp, #12]
 800d060:	9502      	str	r5, [sp, #8]
 800d062:	ac05      	add	r4, sp, #20
 800d064:	9401      	str	r4, [sp, #4]
 800d066:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d068:	9400      	str	r4, [sp, #0]
 800d06a:	f7ff fe3d 	bl	800cce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d06e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d070:	f7ff fed6 	bl	800ce20 <prvAddNewTaskToReadyList>
	}
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	b007      	add	sp, #28
 800d078:	bd30      	pop	{r4, r5, pc}

0800d07a <xTaskCreate>:
	{
 800d07a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d07e:	b085      	sub	sp, #20
 800d080:	4607      	mov	r7, r0
 800d082:	4688      	mov	r8, r1
 800d084:	4614      	mov	r4, r2
 800d086:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d088:	0090      	lsls	r0, r2, #2
 800d08a:	f7fe fde3 	bl	800bc54 <pvPortMalloc>
			if( pxStack != NULL )
 800d08e:	b300      	cbz	r0, 800d0d2 <xTaskCreate+0x58>
 800d090:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d092:	20bc      	movs	r0, #188	; 0xbc
 800d094:	f7fe fdde 	bl	800bc54 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d098:	4605      	mov	r5, r0
 800d09a:	b1b0      	cbz	r0, 800d0ca <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800d09c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800d0a0:	b1e5      	cbz	r5, 800d0dc <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0a8:	9303      	str	r3, [sp, #12]
 800d0aa:	9502      	str	r5, [sp, #8]
 800d0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	4633      	mov	r3, r6
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	4641      	mov	r1, r8
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	f7ff fe14 	bl	800cce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f7ff fead 	bl	800ce20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	e005      	b.n	800d0d6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	f7fe fe40 	bl	800bd50 <vPortFree>
 800d0d0:	e7e6      	b.n	800d0a0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d0d2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d0d6:	b005      	add	sp, #20
 800d0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800d0e0:	e7f9      	b.n	800d0d6 <xTaskCreate+0x5c>
	...

0800d0e4 <vTaskStartScheduler>:
{
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0e8:	2400      	movs	r4, #0
 800d0ea:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0ec:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0ee:	aa07      	add	r2, sp, #28
 800d0f0:	a906      	add	r1, sp, #24
 800d0f2:	a805      	add	r0, sp, #20
 800d0f4:	f7fe fd32 	bl	800bb5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0f8:	9b05      	ldr	r3, [sp, #20]
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	9b06      	ldr	r3, [sp, #24]
 800d0fe:	9301      	str	r3, [sp, #4]
 800d100:	9400      	str	r4, [sp, #0]
 800d102:	4623      	mov	r3, r4
 800d104:	9a07      	ldr	r2, [sp, #28]
 800d106:	491a      	ldr	r1, [pc, #104]	; (800d170 <vTaskStartScheduler+0x8c>)
 800d108:	481a      	ldr	r0, [pc, #104]	; (800d174 <vTaskStartScheduler+0x90>)
 800d10a:	f7ff ff7b 	bl	800d004 <xTaskCreateStatic>
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <vTaskStartScheduler+0x94>)
 800d110:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d112:	b140      	cbz	r0, 800d126 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800d114:	f000 fbe2 	bl	800d8dc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d118:	2801      	cmp	r0, #1
 800d11a:	d006      	beq.n	800d12a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d11c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d120:	d01d      	beq.n	800d15e <vTaskStartScheduler+0x7a>
}
 800d122:	b008      	add	sp, #32
 800d124:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800d126:	2000      	movs	r0, #0
 800d128:	e7f6      	b.n	800d118 <vTaskStartScheduler+0x34>
 800d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d13a:	4b10      	ldr	r3, [pc, #64]	; (800d17c <vTaskStartScheduler+0x98>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3354      	adds	r3, #84	; 0x54
 800d140:	4a0f      	ldr	r2, [pc, #60]	; (800d180 <vTaskStartScheduler+0x9c>)
 800d142:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d144:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <vTaskStartScheduler+0xa0>)
 800d146:	f04f 32ff 	mov.w	r2, #4294967295
 800d14a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <vTaskStartScheduler+0xa4>)
 800d14e:	2201      	movs	r2, #1
 800d150:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d152:	4b0e      	ldr	r3, [pc, #56]	; (800d18c <vTaskStartScheduler+0xa8>)
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d158:	f7fe ff7e 	bl	800c058 <xPortStartScheduler>
 800d15c:	e7e1      	b.n	800d122 <vTaskStartScheduler+0x3e>
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d16e:	e7fe      	b.n	800d16e <vTaskStartScheduler+0x8a>
 800d170:	0801ed94 	.word	0x0801ed94
 800d174:	0800cf59 	.word	0x0800cf59
 800d178:	2400b74c 	.word	0x2400b74c
 800d17c:	2400b2a4 	.word	0x2400b2a4
 800d180:	240000ac 	.word	0x240000ac
 800d184:	2400b750 	.word	0x2400b750
 800d188:	2400b770 	.word	0x2400b770
 800d18c:	2400b79c 	.word	0x2400b79c

0800d190 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d190:	4a02      	ldr	r2, [pc, #8]	; (800d19c <vTaskSuspendAll+0xc>)
 800d192:	6813      	ldr	r3, [r2, #0]
 800d194:	3301      	adds	r3, #1
 800d196:	6013      	str	r3, [r2, #0]
}
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	2400b718 	.word	0x2400b718

0800d1a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d1a0:	4b01      	ldr	r3, [pc, #4]	; (800d1a8 <xTaskGetTickCount+0x8>)
 800d1a2:	6818      	ldr	r0, [r3, #0]
}
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	2400b79c 	.word	0x2400b79c

0800d1ac <xTaskIncrementTick>:
{
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1ae:	4b3a      	ldr	r3, [pc, #232]	; (800d298 <xTaskIncrementTick+0xec>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d169      	bne.n	800d28a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1b6:	4b39      	ldr	r3, [pc, #228]	; (800d29c <xTaskIncrementTick+0xf0>)
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d1bc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1be:	b9c5      	cbnz	r5, 800d1f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d1c0:	4b37      	ldr	r3, [pc, #220]	; (800d2a0 <xTaskIncrementTick+0xf4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	b143      	cbz	r3, 800d1da <xTaskIncrementTick+0x2e>
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	e7fe      	b.n	800d1d8 <xTaskIncrementTick+0x2c>
 800d1da:	4a31      	ldr	r2, [pc, #196]	; (800d2a0 <xTaskIncrementTick+0xf4>)
 800d1dc:	6811      	ldr	r1, [r2, #0]
 800d1de:	4b31      	ldr	r3, [pc, #196]	; (800d2a4 <xTaskIncrementTick+0xf8>)
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	6010      	str	r0, [r2, #0]
 800d1e4:	6019      	str	r1, [r3, #0]
 800d1e6:	4a30      	ldr	r2, [pc, #192]	; (800d2a8 <xTaskIncrementTick+0xfc>)
 800d1e8:	6813      	ldr	r3, [r2, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	f7ff fd65 	bl	800ccbc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1f2:	4b2e      	ldr	r3, [pc, #184]	; (800d2ac <xTaskIncrementTick+0x100>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	42ab      	cmp	r3, r5
 800d1f8:	d93d      	bls.n	800d276 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d1fa:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1fc:	4b2c      	ldr	r3, [pc, #176]	; (800d2b0 <xTaskIncrementTick+0x104>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d206:	009a      	lsls	r2, r3, #2
 800d208:	4b2a      	ldr	r3, [pc, #168]	; (800d2b4 <xTaskIncrementTick+0x108>)
 800d20a:	589b      	ldr	r3, [r3, r2]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d900      	bls.n	800d212 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d210:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d212:	4b29      	ldr	r3, [pc, #164]	; (800d2b8 <xTaskIncrementTick+0x10c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d03c      	beq.n	800d294 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d21a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d21c:	e03a      	b.n	800d294 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d21e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d220:	4b1f      	ldr	r3, [pc, #124]	; (800d2a0 <xTaskIncrementTick+0xf4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	b343      	cbz	r3, 800d27a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d228:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <xTaskIncrementTick+0xf4>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d230:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d232:	429d      	cmp	r5, r3
 800d234:	d326      	bcc.n	800d284 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d236:	1d26      	adds	r6, r4, #4
 800d238:	4630      	mov	r0, r6
 800d23a:	f7fe fdf9 	bl	800be30 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d23e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d240:	b11b      	cbz	r3, 800d24a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d242:	f104 0018 	add.w	r0, r4, #24
 800d246:	f7fe fdf3 	bl	800be30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d24a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d24c:	4a1b      	ldr	r2, [pc, #108]	; (800d2bc <xTaskIncrementTick+0x110>)
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	4293      	cmp	r3, r2
 800d252:	d901      	bls.n	800d258 <xTaskIncrementTick+0xac>
 800d254:	4a19      	ldr	r2, [pc, #100]	; (800d2bc <xTaskIncrementTick+0x110>)
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d25c:	009a      	lsls	r2, r3, #2
 800d25e:	4631      	mov	r1, r6
 800d260:	4814      	ldr	r0, [pc, #80]	; (800d2b4 <xTaskIncrementTick+0x108>)
 800d262:	4410      	add	r0, r2
 800d264:	f7fe fdc0 	bl	800bde8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d268:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d26a:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <xTaskIncrementTick+0x104>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	429a      	cmp	r2, r3
 800d272:	d2d4      	bcs.n	800d21e <xTaskIncrementTick+0x72>
 800d274:	e7d4      	b.n	800d220 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d276:	2700      	movs	r7, #0
 800d278:	e7d2      	b.n	800d220 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27a:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <xTaskIncrementTick+0x100>)
 800d27c:	f04f 32ff 	mov.w	r2, #4294967295
 800d280:	601a      	str	r2, [r3, #0]
					break;
 800d282:	e7bb      	b.n	800d1fc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d284:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <xTaskIncrementTick+0x100>)
 800d286:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d288:	e7b8      	b.n	800d1fc <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d28a:	4a0d      	ldr	r2, [pc, #52]	; (800d2c0 <xTaskIncrementTick+0x114>)
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	3301      	adds	r3, #1
 800d290:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d292:	2700      	movs	r7, #0
}
 800d294:	4638      	mov	r0, r7
 800d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d298:	2400b718 	.word	0x2400b718
 800d29c:	2400b79c 	.word	0x2400b79c
 800d2a0:	2400b2a8 	.word	0x2400b2a8
 800d2a4:	2400b2ac 	.word	0x2400b2ac
 800d2a8:	2400b754 	.word	0x2400b754
 800d2ac:	2400b750 	.word	0x2400b750
 800d2b0:	2400b2a4 	.word	0x2400b2a4
 800d2b4:	2400b2b0 	.word	0x2400b2b0
 800d2b8:	2400b7a0 	.word	0x2400b7a0
 800d2bc:	2400b720 	.word	0x2400b720
 800d2c0:	2400b758 	.word	0x2400b758

0800d2c4 <xTaskResumeAll>:
{
 800d2c4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d2c6:	4b35      	ldr	r3, [pc, #212]	; (800d39c <xTaskResumeAll+0xd8>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	b943      	cbnz	r3, 800d2de <xTaskResumeAll+0x1a>
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	e7fe      	b.n	800d2dc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d2de:	f7fe fe21 	bl	800bf24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d2e2:	4b2e      	ldr	r3, [pc, #184]	; (800d39c <xTaskResumeAll+0xd8>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	3a01      	subs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d14f      	bne.n	800d390 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2f0:	4b2b      	ldr	r3, [pc, #172]	; (800d3a0 <xTaskResumeAll+0xdc>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	b90b      	cbnz	r3, 800d2fa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d2f6:	2400      	movs	r4, #0
 800d2f8:	e04b      	b.n	800d392 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d2fa:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2fc:	4b29      	ldr	r3, [pc, #164]	; (800d3a4 <xTaskResumeAll+0xe0>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	b31b      	cbz	r3, 800d34a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d302:	4b28      	ldr	r3, [pc, #160]	; (800d3a4 <xTaskResumeAll+0xe0>)
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d308:	f104 0018 	add.w	r0, r4, #24
 800d30c:	f7fe fd90 	bl	800be30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d310:	1d25      	adds	r5, r4, #4
 800d312:	4628      	mov	r0, r5
 800d314:	f7fe fd8c 	bl	800be30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d318:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d31a:	4b23      	ldr	r3, [pc, #140]	; (800d3a8 <xTaskResumeAll+0xe4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4298      	cmp	r0, r3
 800d320:	d901      	bls.n	800d326 <xTaskResumeAll+0x62>
 800d322:	4b21      	ldr	r3, [pc, #132]	; (800d3a8 <xTaskResumeAll+0xe4>)
 800d324:	6018      	str	r0, [r3, #0]
 800d326:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d32a:	4629      	mov	r1, r5
 800d32c:	4b1f      	ldr	r3, [pc, #124]	; (800d3ac <xTaskResumeAll+0xe8>)
 800d32e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d332:	f7fe fd59 	bl	800bde8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d338:	4b1d      	ldr	r3, [pc, #116]	; (800d3b0 <xTaskResumeAll+0xec>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d3dc      	bcc.n	800d2fc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <xTaskResumeAll+0xf0>)
 800d344:	2201      	movs	r2, #1
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	e7d8      	b.n	800d2fc <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d34a:	b10c      	cbz	r4, 800d350 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d34c:	f7ff fcb6 	bl	800ccbc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d350:	4b19      	ldr	r3, [pc, #100]	; (800d3b8 <xTaskResumeAll+0xf4>)
 800d352:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d354:	b984      	cbnz	r4, 800d378 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d356:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <xTaskResumeAll+0xf0>)
 800d358:	681c      	ldr	r4, [r3, #0]
 800d35a:	b1d4      	cbz	r4, 800d392 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d35c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d364:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d370:	2401      	movs	r4, #1
 800d372:	e00e      	b.n	800d392 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d374:	3c01      	subs	r4, #1
 800d376:	d007      	beq.n	800d388 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d378:	f7ff ff18 	bl	800d1ac <xTaskIncrementTick>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d0f9      	beq.n	800d374 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d380:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <xTaskResumeAll+0xf0>)
 800d382:	2201      	movs	r2, #1
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	e7f5      	b.n	800d374 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d388:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <xTaskResumeAll+0xf4>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	e7e2      	b.n	800d356 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d390:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d392:	f7fe fde9 	bl	800bf68 <vPortExitCritical>
}
 800d396:	4620      	mov	r0, r4
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	bf00      	nop
 800d39c:	2400b718 	.word	0x2400b718
 800d3a0:	2400b710 	.word	0x2400b710
 800d3a4:	2400b75c 	.word	0x2400b75c
 800d3a8:	2400b720 	.word	0x2400b720
 800d3ac:	2400b2b0 	.word	0x2400b2b0
 800d3b0:	2400b2a4 	.word	0x2400b2a4
 800d3b4:	2400b7a0 	.word	0x2400b7a0
 800d3b8:	2400b758 	.word	0x2400b758

0800d3bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3bc:	4b21      	ldr	r3, [pc, #132]	; (800d444 <vTaskSwitchContext+0x88>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	b11b      	cbz	r3, 800d3ca <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d3c2:	4b21      	ldr	r3, [pc, #132]	; (800d448 <vTaskSwitchContext+0x8c>)
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d3ca:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <vTaskSwitchContext+0x8c>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3d0:	4b1e      	ldr	r3, [pc, #120]	; (800d44c <vTaskSwitchContext+0x90>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d3d8:	008a      	lsls	r2, r1, #2
 800d3da:	491d      	ldr	r1, [pc, #116]	; (800d450 <vTaskSwitchContext+0x94>)
 800d3dc:	588a      	ldr	r2, [r1, r2]
 800d3de:	b95a      	cbnz	r2, 800d3f8 <vTaskSwitchContext+0x3c>
 800d3e0:	b10b      	cbz	r3, 800d3e6 <vTaskSwitchContext+0x2a>
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	e7f6      	b.n	800d3d4 <vTaskSwitchContext+0x18>
 800d3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ea:	f383 8811 	msr	BASEPRI, r3
 800d3ee:	f3bf 8f6f 	isb	sy
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	e7fe      	b.n	800d3f6 <vTaskSwitchContext+0x3a>
 800d3f8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800d3fc:	0082      	lsls	r2, r0, #2
 800d3fe:	440a      	add	r2, r1
 800d400:	6850      	ldr	r0, [r2, #4]
 800d402:	6840      	ldr	r0, [r0, #4]
 800d404:	6050      	str	r0, [r2, #4]
 800d406:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d40a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d40e:	3208      	adds	r2, #8
 800d410:	4411      	add	r1, r2
 800d412:	4288      	cmp	r0, r1
 800d414:	d00f      	beq.n	800d436 <vTaskSwitchContext+0x7a>
 800d416:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d41a:	0091      	lsls	r1, r2, #2
 800d41c:	4a0c      	ldr	r2, [pc, #48]	; (800d450 <vTaskSwitchContext+0x94>)
 800d41e:	440a      	add	r2, r1
 800d420:	6852      	ldr	r2, [r2, #4]
 800d422:	68d1      	ldr	r1, [r2, #12]
 800d424:	4a0b      	ldr	r2, [pc, #44]	; (800d454 <vTaskSwitchContext+0x98>)
 800d426:	6011      	str	r1, [r2, #0]
 800d428:	4908      	ldr	r1, [pc, #32]	; (800d44c <vTaskSwitchContext+0x90>)
 800d42a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d42c:	6813      	ldr	r3, [r2, #0]
 800d42e:	3354      	adds	r3, #84	; 0x54
 800d430:	4a09      	ldr	r2, [pc, #36]	; (800d458 <vTaskSwitchContext+0x9c>)
 800d432:	6013      	str	r3, [r2, #0]
}
 800d434:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d436:	6840      	ldr	r0, [r0, #4]
 800d438:	4662      	mov	r2, ip
 800d43a:	0091      	lsls	r1, r2, #2
 800d43c:	4a04      	ldr	r2, [pc, #16]	; (800d450 <vTaskSwitchContext+0x94>)
 800d43e:	440a      	add	r2, r1
 800d440:	6050      	str	r0, [r2, #4]
 800d442:	e7e8      	b.n	800d416 <vTaskSwitchContext+0x5a>
 800d444:	2400b718 	.word	0x2400b718
 800d448:	2400b7a0 	.word	0x2400b7a0
 800d44c:	2400b720 	.word	0x2400b720
 800d450:	2400b2b0 	.word	0x2400b2b0
 800d454:	2400b2a4 	.word	0x2400b2a4
 800d458:	240000ac 	.word	0x240000ac

0800d45c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d45c:	b158      	cbz	r0, 800d476 <vTaskPlaceOnEventList+0x1a>
{
 800d45e:	b510      	push	{r4, lr}
 800d460:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d462:	4a09      	ldr	r2, [pc, #36]	; (800d488 <vTaskPlaceOnEventList+0x2c>)
 800d464:	6811      	ldr	r1, [r2, #0]
 800d466:	3118      	adds	r1, #24
 800d468:	f7fe fcc9 	bl	800bdfe <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d46c:	2101      	movs	r1, #1
 800d46e:	4620      	mov	r0, r4
 800d470:	f7ff fd86 	bl	800cf80 <prvAddCurrentTaskToDelayedList>
}
 800d474:	bd10      	pop	{r4, pc}
 800d476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d486:	e7fe      	b.n	800d486 <vTaskPlaceOnEventList+0x2a>
 800d488:	2400b2a4 	.word	0x2400b2a4

0800d48c <vTaskPlaceOnEventListRestricted>:
	{
 800d48c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d48e:	b170      	cbz	r0, 800d4ae <vTaskPlaceOnEventListRestricted+0x22>
 800d490:	460d      	mov	r5, r1
 800d492:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d494:	4a0a      	ldr	r2, [pc, #40]	; (800d4c0 <vTaskPlaceOnEventListRestricted+0x34>)
 800d496:	6811      	ldr	r1, [r2, #0]
 800d498:	3118      	adds	r1, #24
 800d49a:	f7fe fca5 	bl	800bde8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d49e:	b10c      	cbz	r4, 800d4a4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d4a0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f7ff fd6a 	bl	800cf80 <prvAddCurrentTaskToDelayedList>
	}
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d4be:	e7fe      	b.n	800d4be <vTaskPlaceOnEventListRestricted+0x32>
 800d4c0:	2400b2a4 	.word	0x2400b2a4

0800d4c4 <xTaskRemoveFromEventList>:
{
 800d4c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c6:	68c3      	ldr	r3, [r0, #12]
 800d4c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d4ca:	b324      	cbz	r4, 800d516 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4cc:	f104 0518 	add.w	r5, r4, #24
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7fe fcad 	bl	800be30 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d6:	4b18      	ldr	r3, [pc, #96]	; (800d538 <xTaskRemoveFromEventList+0x74>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	bb2b      	cbnz	r3, 800d528 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4dc:	1d25      	adds	r5, r4, #4
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f7fe fca6 	bl	800be30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d4e6:	4b15      	ldr	r3, [pc, #84]	; (800d53c <xTaskRemoveFromEventList+0x78>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4298      	cmp	r0, r3
 800d4ec:	d901      	bls.n	800d4f2 <xTaskRemoveFromEventList+0x2e>
 800d4ee:	4b13      	ldr	r3, [pc, #76]	; (800d53c <xTaskRemoveFromEventList+0x78>)
 800d4f0:	6018      	str	r0, [r3, #0]
 800d4f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	4b11      	ldr	r3, [pc, #68]	; (800d540 <xTaskRemoveFromEventList+0x7c>)
 800d4fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4fe:	f7fe fc73 	bl	800bde8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d502:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d504:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <xTaskRemoveFromEventList+0x80>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d911      	bls.n	800d532 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800d50e:	2001      	movs	r0, #1
 800d510:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <xTaskRemoveFromEventList+0x84>)
 800d512:	6018      	str	r0, [r3, #0]
}
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800d526:	e7fe      	b.n	800d526 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d528:	4629      	mov	r1, r5
 800d52a:	4808      	ldr	r0, [pc, #32]	; (800d54c <xTaskRemoveFromEventList+0x88>)
 800d52c:	f7fe fc5c 	bl	800bde8 <vListInsertEnd>
 800d530:	e7e7      	b.n	800d502 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800d532:	2000      	movs	r0, #0
	return xReturn;
 800d534:	e7ee      	b.n	800d514 <xTaskRemoveFromEventList+0x50>
 800d536:	bf00      	nop
 800d538:	2400b718 	.word	0x2400b718
 800d53c:	2400b720 	.word	0x2400b720
 800d540:	2400b2b0 	.word	0x2400b2b0
 800d544:	2400b2a4 	.word	0x2400b2a4
 800d548:	2400b7a0 	.word	0x2400b7a0
 800d54c:	2400b75c 	.word	0x2400b75c

0800d550 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d550:	4b03      	ldr	r3, [pc, #12]	; (800d560 <vTaskInternalSetTimeOutState+0x10>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d556:	4b03      	ldr	r3, [pc, #12]	; (800d564 <vTaskInternalSetTimeOutState+0x14>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6043      	str	r3, [r0, #4]
}
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	2400b754 	.word	0x2400b754
 800d564:	2400b79c 	.word	0x2400b79c

0800d568 <xTaskCheckForTimeOut>:
{
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800d56a:	b1c8      	cbz	r0, 800d5a0 <xTaskCheckForTimeOut+0x38>
 800d56c:	460c      	mov	r4, r1
 800d56e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800d570:	b1f9      	cbz	r1, 800d5b2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800d572:	f7fe fcd7 	bl	800bf24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d576:	4b1b      	ldr	r3, [pc, #108]	; (800d5e4 <xTaskCheckForTimeOut+0x7c>)
 800d578:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d57a:	686b      	ldr	r3, [r5, #4]
 800d57c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800d57e:	6822      	ldr	r2, [r4, #0]
 800d580:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d584:	d026      	beq.n	800d5d4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d586:	4e18      	ldr	r6, [pc, #96]	; (800d5e8 <xTaskCheckForTimeOut+0x80>)
 800d588:	6836      	ldr	r6, [r6, #0]
 800d58a:	682f      	ldr	r7, [r5, #0]
 800d58c:	42b7      	cmp	r7, r6
 800d58e:	d001      	beq.n	800d594 <xTaskCheckForTimeOut+0x2c>
 800d590:	428b      	cmp	r3, r1
 800d592:	d924      	bls.n	800d5de <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d594:	4282      	cmp	r2, r0
 800d596:	d815      	bhi.n	800d5c4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d59c:	2401      	movs	r4, #1
 800d59e:	e01a      	b.n	800d5d6 <xTaskCheckForTimeOut+0x6e>
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800d5b0:	e7fe      	b.n	800d5b0 <xTaskCheckForTimeOut+0x48>
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800d5c2:	e7fe      	b.n	800d5c2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800d5c4:	1a5b      	subs	r3, r3, r1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f7ff ffc0 	bl	800d550 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5d0:	2400      	movs	r4, #0
 800d5d2:	e000      	b.n	800d5d6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800d5d4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d5d6:	f7fe fcc7 	bl	800bf68 <vPortExitCritical>
}
 800d5da:	4620      	mov	r0, r4
 800d5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800d5de:	2401      	movs	r4, #1
 800d5e0:	e7f9      	b.n	800d5d6 <xTaskCheckForTimeOut+0x6e>
 800d5e2:	bf00      	nop
 800d5e4:	2400b79c 	.word	0x2400b79c
 800d5e8:	2400b754 	.word	0x2400b754

0800d5ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d5ec:	4b01      	ldr	r3, [pc, #4]	; (800d5f4 <vTaskMissedYield+0x8>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]
}
 800d5f2:	4770      	bx	lr
 800d5f4:	2400b7a0 	.word	0x2400b7a0

0800d5f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d5f8:	4b05      	ldr	r3, [pc, #20]	; (800d610 <xTaskGetSchedulerState+0x18>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	b133      	cbz	r3, 800d60c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5fe:	4b05      	ldr	r3, [pc, #20]	; (800d614 <xTaskGetSchedulerState+0x1c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	b10b      	cbz	r3, 800d608 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800d604:	2000      	movs	r0, #0
	}
 800d606:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800d608:	2002      	movs	r0, #2
 800d60a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d60c:	2001      	movs	r0, #1
 800d60e:	4770      	bx	lr
 800d610:	2400b770 	.word	0x2400b770
 800d614:	2400b718 	.word	0x2400b718

0800d618 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d618:	2800      	cmp	r0, #0
 800d61a:	d03e      	beq.n	800d69a <xTaskPriorityInherit+0x82>
	{
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d620:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d622:	4a20      	ldr	r2, [pc, #128]	; (800d6a4 <xTaskPriorityInherit+0x8c>)
 800d624:	6812      	ldr	r2, [r2, #0]
 800d626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d628:	4293      	cmp	r3, r2
 800d62a:	d22e      	bcs.n	800d68a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d62c:	6982      	ldr	r2, [r0, #24]
 800d62e:	2a00      	cmp	r2, #0
 800d630:	db05      	blt.n	800d63e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d632:	4a1c      	ldr	r2, [pc, #112]	; (800d6a4 <xTaskPriorityInherit+0x8c>)
 800d634:	6812      	ldr	r2, [r2, #0]
 800d636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d638:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d63c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d63e:	6961      	ldr	r1, [r4, #20]
 800d640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d644:	4a18      	ldr	r2, [pc, #96]	; (800d6a8 <xTaskPriorityInherit+0x90>)
 800d646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d64a:	4299      	cmp	r1, r3
 800d64c:	d005      	beq.n	800d65a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d64e:	4b15      	ldr	r3, [pc, #84]	; (800d6a4 <xTaskPriorityInherit+0x8c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d654:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800d656:	2001      	movs	r0, #1
	}
 800d658:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d65a:	1d25      	adds	r5, r4, #4
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7fe fbe7 	bl	800be30 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d662:	4b10      	ldr	r3, [pc, #64]	; (800d6a4 <xTaskPriorityInherit+0x8c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d668:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d66a:	4b10      	ldr	r3, [pc, #64]	; (800d6ac <xTaskPriorityInherit+0x94>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4298      	cmp	r0, r3
 800d670:	d901      	bls.n	800d676 <xTaskPriorityInherit+0x5e>
 800d672:	4b0e      	ldr	r3, [pc, #56]	; (800d6ac <xTaskPriorityInherit+0x94>)
 800d674:	6018      	str	r0, [r3, #0]
 800d676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d67a:	4629      	mov	r1, r5
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <xTaskPriorityInherit+0x90>)
 800d67e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d682:	f7fe fbb1 	bl	800bde8 <vListInsertEnd>
				xReturn = pdTRUE;
 800d686:	2001      	movs	r0, #1
 800d688:	e7e6      	b.n	800d658 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d68a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d68c:	4b05      	ldr	r3, [pc, #20]	; (800d6a4 <xTaskPriorityInherit+0x8c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	429a      	cmp	r2, r3
 800d694:	d303      	bcc.n	800d69e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800d696:	2000      	movs	r0, #0
 800d698:	e7de      	b.n	800d658 <xTaskPriorityInherit+0x40>
 800d69a:	2000      	movs	r0, #0
	}
 800d69c:	4770      	bx	lr
					xReturn = pdTRUE;
 800d69e:	2001      	movs	r0, #1
		return xReturn;
 800d6a0:	e7da      	b.n	800d658 <xTaskPriorityInherit+0x40>
 800d6a2:	bf00      	nop
 800d6a4:	2400b2a4 	.word	0x2400b2a4
 800d6a8:	2400b2b0 	.word	0x2400b2b0
 800d6ac:	2400b720 	.word	0x2400b720

0800d6b0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d03b      	beq.n	800d72c <xTaskPriorityDisinherit+0x7c>
	{
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800d6b8:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <xTaskPriorityDisinherit+0x84>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4283      	cmp	r3, r0
 800d6be:	d008      	beq.n	800d6d2 <xTaskPriorityDisinherit+0x22>
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	e7fe      	b.n	800d6d0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d6d4:	b943      	cbnz	r3, 800d6e8 <xTaskPriorityDisinherit+0x38>
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	e7fe      	b.n	800d6e6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800d6ee:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d6f0:	4291      	cmp	r1, r2
 800d6f2:	d01d      	beq.n	800d730 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6f4:	b10b      	cbz	r3, 800d6fa <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d6f6:	2000      	movs	r0, #0
	}
 800d6f8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6fa:	1d05      	adds	r5, r0, #4
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f7fe fb97 	bl	800be30 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d702:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d704:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d706:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800d70a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d70c:	4b0a      	ldr	r3, [pc, #40]	; (800d738 <xTaskPriorityDisinherit+0x88>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4298      	cmp	r0, r3
 800d712:	d901      	bls.n	800d718 <xTaskPriorityDisinherit+0x68>
 800d714:	4b08      	ldr	r3, [pc, #32]	; (800d738 <xTaskPriorityDisinherit+0x88>)
 800d716:	6018      	str	r0, [r3, #0]
 800d718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d71c:	4629      	mov	r1, r5
 800d71e:	4b07      	ldr	r3, [pc, #28]	; (800d73c <xTaskPriorityDisinherit+0x8c>)
 800d720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d724:	f7fe fb60 	bl	800bde8 <vListInsertEnd>
					xReturn = pdTRUE;
 800d728:	2001      	movs	r0, #1
 800d72a:	e7e5      	b.n	800d6f8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800d72c:	2000      	movs	r0, #0
	}
 800d72e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d730:	2000      	movs	r0, #0
 800d732:	e7e1      	b.n	800d6f8 <xTaskPriorityDisinherit+0x48>
 800d734:	2400b2a4 	.word	0x2400b2a4
 800d738:	2400b720 	.word	0x2400b720
 800d73c:	2400b2b0 	.word	0x2400b2b0

0800d740 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d740:	2800      	cmp	r0, #0
 800d742:	d046      	beq.n	800d7d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d748:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d74a:	b943      	cbnz	r3, 800d75e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	e7fe      	b.n	800d75c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d75e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d760:	428a      	cmp	r2, r1
 800d762:	d200      	bcs.n	800d766 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d764:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d766:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d768:	4291      	cmp	r1, r2
 800d76a:	d001      	beq.n	800d770 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d000      	beq.n	800d772 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800d770:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d772:	4b18      	ldr	r3, [pc, #96]	; (800d7d4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	42a3      	cmp	r3, r4
 800d778:	d022      	beq.n	800d7c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800d77a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d77c:	69a3      	ldr	r3, [r4, #24]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	db02      	blt.n	800d788 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d782:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d786:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d788:	6962      	ldr	r2, [r4, #20]
 800d78a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d78e:	4b12      	ldr	r3, [pc, #72]	; (800d7d8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d790:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d794:	428a      	cmp	r2, r1
 800d796:	d1eb      	bne.n	800d770 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d798:	1d25      	adds	r5, r4, #4
 800d79a:	4628      	mov	r0, r5
 800d79c:	f7fe fb48 	bl	800be30 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d7a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	; (800d7dc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4298      	cmp	r0, r3
 800d7a8:	d901      	bls.n	800d7ae <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d7ac:	6018      	str	r0, [r3, #0]
 800d7ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d7b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7ba:	f7fe fb15 	bl	800bde8 <vListInsertEnd>
	}
 800d7be:	e7d7      	b.n	800d770 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d7d0:	e7fe      	b.n	800d7d0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800d7d2:	4770      	bx	lr
 800d7d4:	2400b2a4 	.word	0x2400b2a4
 800d7d8:	2400b2b0 	.word	0x2400b2b0
 800d7dc:	2400b720 	.word	0x2400b720

0800d7e0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d7e0:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	b123      	cbz	r3, 800d7f0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7e6:	4b04      	ldr	r3, [pc, #16]	; (800d7f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800d7f0:	4b01      	ldr	r3, [pc, #4]	; (800d7f8 <pvTaskIncrementMutexHeldCount+0x18>)
 800d7f2:	6818      	ldr	r0, [r3, #0]
	}
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	2400b2a4 	.word	0x2400b2a4

0800d7fc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d7fc:	4b06      	ldr	r3, [pc, #24]	; (800d818 <prvGetNextExpireTime+0x1c>)
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	6813      	ldr	r3, [r2, #0]
 800d802:	b92b      	cbnz	r3, 800d810 <prvGetNextExpireTime+0x14>
 800d804:	2301      	movs	r3, #1
 800d806:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d808:	b923      	cbnz	r3, 800d814 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d80a:	68d3      	ldr	r3, [r2, #12]
 800d80c:	6818      	ldr	r0, [r3, #0]
 800d80e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d810:	2300      	movs	r3, #0
 800d812:	e7f8      	b.n	800d806 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d814:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d816:	4770      	bx	lr
 800d818:	2400b7a4 	.word	0x2400b7a4

0800d81c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d81c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d81e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d820:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d822:	4291      	cmp	r1, r2
 800d824:	d80c      	bhi.n	800d840 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d826:	1ad2      	subs	r2, r2, r3
 800d828:	6983      	ldr	r3, [r0, #24]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d301      	bcc.n	800d832 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d82e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d830:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	1d01      	adds	r1, r0, #4
 800d834:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <prvInsertTimerInActiveList+0x48>)
 800d836:	6818      	ldr	r0, [r3, #0]
 800d838:	f7fe fae1 	bl	800bdfe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d83c:	2000      	movs	r0, #0
 800d83e:	e7f7      	b.n	800d830 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d840:	429a      	cmp	r2, r3
 800d842:	bf2c      	ite	cs
 800d844:	2200      	movcs	r2, #0
 800d846:	2201      	movcc	r2, #1
 800d848:	4299      	cmp	r1, r3
 800d84a:	bf38      	it	cc
 800d84c:	2200      	movcc	r2, #0
 800d84e:	b10a      	cbz	r2, 800d854 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800d850:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d852:	e7ed      	b.n	800d830 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d854:	1d01      	adds	r1, r0, #4
 800d856:	4b04      	ldr	r3, [pc, #16]	; (800d868 <prvInsertTimerInActiveList+0x4c>)
 800d858:	6818      	ldr	r0, [r3, #0]
 800d85a:	f7fe fad0 	bl	800bdfe <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d85e:	2000      	movs	r0, #0
 800d860:	e7e6      	b.n	800d830 <prvInsertTimerInActiveList+0x14>
 800d862:	bf00      	nop
 800d864:	2400b7a8 	.word	0x2400b7a8
 800d868:	2400b7a4 	.word	0x2400b7a4

0800d86c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d86c:	b530      	push	{r4, r5, lr}
 800d86e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d870:	f7fe fb58 	bl	800bf24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d874:	4b11      	ldr	r3, [pc, #68]	; (800d8bc <prvCheckForValidListAndQueue+0x50>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	b11b      	cbz	r3, 800d882 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d87a:	f7fe fb75 	bl	800bf68 <vPortExitCritical>
}
 800d87e:	b003      	add	sp, #12
 800d880:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800d882:	4d0f      	ldr	r5, [pc, #60]	; (800d8c0 <prvCheckForValidListAndQueue+0x54>)
 800d884:	4628      	mov	r0, r5
 800d886:	f7fe faa1 	bl	800bdcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d88a:	4c0e      	ldr	r4, [pc, #56]	; (800d8c4 <prvCheckForValidListAndQueue+0x58>)
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7fe fa9d 	bl	800bdcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d892:	4b0d      	ldr	r3, [pc, #52]	; (800d8c8 <prvCheckForValidListAndQueue+0x5c>)
 800d894:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d896:	4b0d      	ldr	r3, [pc, #52]	; (800d8cc <prvCheckForValidListAndQueue+0x60>)
 800d898:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d89a:	2300      	movs	r3, #0
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	4b0c      	ldr	r3, [pc, #48]	; (800d8d0 <prvCheckForValidListAndQueue+0x64>)
 800d8a0:	4a0c      	ldr	r2, [pc, #48]	; (800d8d4 <prvCheckForValidListAndQueue+0x68>)
 800d8a2:	2110      	movs	r1, #16
 800d8a4:	200a      	movs	r0, #10
 800d8a6:	f7fe fd8c 	bl	800c3c2 <xQueueGenericCreateStatic>
 800d8aa:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <prvCheckForValidListAndQueue+0x50>)
 800d8ac:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d0e3      	beq.n	800d87a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8b2:	4909      	ldr	r1, [pc, #36]	; (800d8d8 <prvCheckForValidListAndQueue+0x6c>)
 800d8b4:	f7ff f998 	bl	800cbe8 <vQueueAddToRegistry>
 800d8b8:	e7df      	b.n	800d87a <prvCheckForValidListAndQueue+0xe>
 800d8ba:	bf00      	nop
 800d8bc:	2400b8c8 	.word	0x2400b8c8
 800d8c0:	2400b84c 	.word	0x2400b84c
 800d8c4:	2400b860 	.word	0x2400b860
 800d8c8:	2400b7a4 	.word	0x2400b7a4
 800d8cc:	2400b7a8 	.word	0x2400b7a8
 800d8d0:	2400b878 	.word	0x2400b878
 800d8d4:	2400b7ac 	.word	0x2400b7ac
 800d8d8:	0801ed9c 	.word	0x0801ed9c

0800d8dc <xTimerCreateTimerTask>:
{
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d8e0:	f7ff ffc4 	bl	800d86c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d8e4:	4b12      	ldr	r3, [pc, #72]	; (800d930 <xTimerCreateTimerTask+0x54>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	b1cb      	cbz	r3, 800d91e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ea:	2400      	movs	r4, #0
 800d8ec:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8ee:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8f0:	aa07      	add	r2, sp, #28
 800d8f2:	a906      	add	r1, sp, #24
 800d8f4:	a805      	add	r0, sp, #20
 800d8f6:	f7fe f93d 	bl	800bb74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	9302      	str	r3, [sp, #8]
 800d8fe:	9b06      	ldr	r3, [sp, #24]
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	2302      	movs	r3, #2
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	4623      	mov	r3, r4
 800d908:	9a07      	ldr	r2, [sp, #28]
 800d90a:	490a      	ldr	r1, [pc, #40]	; (800d934 <xTimerCreateTimerTask+0x58>)
 800d90c:	480a      	ldr	r0, [pc, #40]	; (800d938 <xTimerCreateTimerTask+0x5c>)
 800d90e:	f7ff fb79 	bl	800d004 <xTaskCreateStatic>
 800d912:	4b0a      	ldr	r3, [pc, #40]	; (800d93c <xTimerCreateTimerTask+0x60>)
 800d914:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d916:	b110      	cbz	r0, 800d91e <xTimerCreateTimerTask+0x42>
}
 800d918:	2001      	movs	r0, #1
 800d91a:	b008      	add	sp, #32
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d92e:	e7fe      	b.n	800d92e <xTimerCreateTimerTask+0x52>
 800d930:	2400b8c8 	.word	0x2400b8c8
 800d934:	0801eda4 	.word	0x0801eda4
 800d938:	0800dc45 	.word	0x0800dc45
 800d93c:	2400b8cc 	.word	0x2400b8cc

0800d940 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800d940:	b1b8      	cbz	r0, 800d972 <xTimerGenericCommand+0x32>
 800d942:	469c      	mov	ip, r3
 800d944:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800d946:	4818      	ldr	r0, [pc, #96]	; (800d9a8 <xTimerGenericCommand+0x68>)
 800d948:	6800      	ldr	r0, [r0, #0]
 800d94a:	b358      	cbz	r0, 800d9a4 <xTimerGenericCommand+0x64>
{
 800d94c:	b500      	push	{lr}
 800d94e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800d950:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d952:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d954:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d956:	2905      	cmp	r1, #5
 800d958:	dc1c      	bgt.n	800d994 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d95a:	f7ff fe4d 	bl	800d5f8 <xTaskGetSchedulerState>
 800d95e:	2802      	cmp	r0, #2
 800d960:	d010      	beq.n	800d984 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d962:	2300      	movs	r3, #0
 800d964:	461a      	mov	r2, r3
 800d966:	4669      	mov	r1, sp
 800d968:	480f      	ldr	r0, [pc, #60]	; (800d9a8 <xTimerGenericCommand+0x68>)
 800d96a:	6800      	ldr	r0, [r0, #0]
 800d96c:	f7fe fde1 	bl	800c532 <xQueueGenericSend>
 800d970:	e015      	b.n	800d99e <xTimerGenericCommand+0x5e>
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800d982:	e7fe      	b.n	800d982 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d984:	2300      	movs	r3, #0
 800d986:	9a06      	ldr	r2, [sp, #24]
 800d988:	4669      	mov	r1, sp
 800d98a:	4807      	ldr	r0, [pc, #28]	; (800d9a8 <xTimerGenericCommand+0x68>)
 800d98c:	6800      	ldr	r0, [r0, #0]
 800d98e:	f7fe fdd0 	bl	800c532 <xQueueGenericSend>
 800d992:	e004      	b.n	800d99e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d994:	2300      	movs	r3, #0
 800d996:	4662      	mov	r2, ip
 800d998:	4669      	mov	r1, sp
 800d99a:	f7fe fe8e 	bl	800c6ba <xQueueGenericSendFromISR>
}
 800d99e:	b005      	add	sp, #20
 800d9a0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800d9a4:	2000      	movs	r0, #0
}
 800d9a6:	4770      	bx	lr
 800d9a8:	2400b8c8 	.word	0x2400b8c8

0800d9ac <prvSwitchTimerLists>:
{
 800d9ac:	b570      	push	{r4, r5, r6, lr}
 800d9ae:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	; (800da20 <prvSwitchTimerLists+0x74>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	b362      	cbz	r2, 800da12 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9bc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9be:	1d25      	adds	r5, r4, #4
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f7fe fa35 	bl	800be30 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9c6:	6a23      	ldr	r3, [r4, #32]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d9d0:	f013 0f04 	tst.w	r3, #4
 800d9d4:	d0ec      	beq.n	800d9b0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9d6:	69a3      	ldr	r3, [r4, #24]
 800d9d8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800d9da:	429e      	cmp	r6, r3
 800d9dc:	d207      	bcs.n	800d9ee <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9de:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9e0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <prvSwitchTimerLists+0x74>)
 800d9e6:	6818      	ldr	r0, [r3, #0]
 800d9e8:	f7fe fa09 	bl	800bdfe <vListInsert>
 800d9ec:	e7e0      	b.n	800d9b0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	9100      	str	r1, [sp, #0]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7ff ffa2 	bl	800d940 <xTimerGenericCommand>
				configASSERT( xResult );
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d1d7      	bne.n	800d9b0 <prvSwitchTimerLists+0x4>
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	e7fe      	b.n	800da10 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800da12:	4a04      	ldr	r2, [pc, #16]	; (800da24 <prvSwitchTimerLists+0x78>)
 800da14:	6810      	ldr	r0, [r2, #0]
 800da16:	4902      	ldr	r1, [pc, #8]	; (800da20 <prvSwitchTimerLists+0x74>)
 800da18:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800da1a:	6013      	str	r3, [r2, #0]
}
 800da1c:	b002      	add	sp, #8
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	2400b7a4 	.word	0x2400b7a4
 800da24:	2400b7a8 	.word	0x2400b7a8

0800da28 <prvSampleTimeNow>:
{
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800da2c:	f7ff fbb8 	bl	800d1a0 <xTaskGetTickCount>
 800da30:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800da32:	4b07      	ldr	r3, [pc, #28]	; (800da50 <prvSampleTimeNow+0x28>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4283      	cmp	r3, r0
 800da38:	d805      	bhi.n	800da46 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800da3e:	4b04      	ldr	r3, [pc, #16]	; (800da50 <prvSampleTimeNow+0x28>)
 800da40:	601c      	str	r4, [r3, #0]
}
 800da42:	4620      	mov	r0, r4
 800da44:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800da46:	f7ff ffb1 	bl	800d9ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da4a:	2301      	movs	r3, #1
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	e7f6      	b.n	800da3e <prvSampleTimeNow+0x16>
 800da50:	2400b874 	.word	0x2400b874

0800da54 <prvProcessExpiredTimer>:
{
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	4606      	mov	r6, r0
 800da5a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5c:	4917      	ldr	r1, [pc, #92]	; (800dabc <prvProcessExpiredTimer+0x68>)
 800da5e:	6809      	ldr	r1, [r1, #0]
 800da60:	68c9      	ldr	r1, [r1, #12]
 800da62:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da64:	1d20      	adds	r0, r4, #4
 800da66:	f7fe f9e3 	bl	800be30 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da6a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800da6e:	f01c 0f04 	tst.w	ip, #4
 800da72:	d108      	bne.n	800da86 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da74:	f02c 0c01 	bic.w	ip, ip, #1
 800da78:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da7c:	6a23      	ldr	r3, [r4, #32]
 800da7e:	4620      	mov	r0, r4
 800da80:	4798      	blx	r3
}
 800da82:	b002      	add	sp, #8
 800da84:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da86:	69a1      	ldr	r1, [r4, #24]
 800da88:	4633      	mov	r3, r6
 800da8a:	462a      	mov	r2, r5
 800da8c:	4431      	add	r1, r6
 800da8e:	4620      	mov	r0, r4
 800da90:	f7ff fec4 	bl	800d81c <prvInsertTimerInActiveList>
 800da94:	2800      	cmp	r0, #0
 800da96:	d0f1      	beq.n	800da7c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da98:	2100      	movs	r1, #0
 800da9a:	9100      	str	r1, [sp, #0]
 800da9c:	460b      	mov	r3, r1
 800da9e:	4632      	mov	r2, r6
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff ff4d 	bl	800d940 <xTimerGenericCommand>
			configASSERT( xResult );
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d1e8      	bne.n	800da7c <prvProcessExpiredTimer+0x28>
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	e7fe      	b.n	800daba <prvProcessExpiredTimer+0x66>
 800dabc:	2400b7a4 	.word	0x2400b7a4

0800dac0 <prvProcessTimerOrBlockTask>:
{
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	4606      	mov	r6, r0
 800dac6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800dac8:	f7ff fb62 	bl	800d190 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dacc:	a801      	add	r0, sp, #4
 800dace:	f7ff ffab 	bl	800da28 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800dad2:	9b01      	ldr	r3, [sp, #4]
 800dad4:	bb3b      	cbnz	r3, 800db26 <prvProcessTimerOrBlockTask+0x66>
 800dad6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dad8:	42b0      	cmp	r0, r6
 800dada:	bf28      	it	cs
 800dadc:	2c00      	cmpcs	r4, #0
 800dade:	d019      	beq.n	800db14 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800dae0:	b124      	cbz	r4, 800daec <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dae2:	4a13      	ldr	r2, [pc, #76]	; (800db30 <prvProcessTimerOrBlockTask+0x70>)
 800dae4:	6812      	ldr	r2, [r2, #0]
 800dae6:	6812      	ldr	r2, [r2, #0]
 800dae8:	b9da      	cbnz	r2, 800db22 <prvProcessTimerOrBlockTask+0x62>
 800daea:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800daec:	4622      	mov	r2, r4
 800daee:	1b71      	subs	r1, r6, r5
 800daf0:	4b10      	ldr	r3, [pc, #64]	; (800db34 <prvProcessTimerOrBlockTask+0x74>)
 800daf2:	6818      	ldr	r0, [r3, #0]
 800daf4:	f7ff f8b8 	bl	800cc68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daf8:	f7ff fbe4 	bl	800d2c4 <xTaskResumeAll>
 800dafc:	b9a8      	cbnz	r0, 800db2a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800dafe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800db02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	e00a      	b.n	800db2a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800db14:	f7ff fbd6 	bl	800d2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db18:	4629      	mov	r1, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ff9a 	bl	800da54 <prvProcessExpiredTimer>
 800db20:	e003      	b.n	800db2a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db22:	461c      	mov	r4, r3
 800db24:	e7e2      	b.n	800daec <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800db26:	f7ff fbcd 	bl	800d2c4 <xTaskResumeAll>
}
 800db2a:	b002      	add	sp, #8
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	bf00      	nop
 800db30:	2400b7a8 	.word	0x2400b7a8
 800db34:	2400b8c8 	.word	0x2400b8c8

0800db38 <prvProcessReceivedCommands>:
{
 800db38:	b510      	push	{r4, lr}
 800db3a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db3c:	e002      	b.n	800db44 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	da0f      	bge.n	800db64 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db44:	2200      	movs	r2, #0
 800db46:	a904      	add	r1, sp, #16
 800db48:	4b3d      	ldr	r3, [pc, #244]	; (800dc40 <prvProcessReceivedCommands+0x108>)
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	f7fe fe75 	bl	800c83a <xQueueReceive>
 800db50:	2800      	cmp	r0, #0
 800db52:	d073      	beq.n	800dc3c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	daf1      	bge.n	800db3e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db5a:	9907      	ldr	r1, [sp, #28]
 800db5c:	9806      	ldr	r0, [sp, #24]
 800db5e:	9b05      	ldr	r3, [sp, #20]
 800db60:	4798      	blx	r3
 800db62:	e7ec      	b.n	800db3e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db64:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db66:	6963      	ldr	r3, [r4, #20]
 800db68:	b113      	cbz	r3, 800db70 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db6a:	1d20      	adds	r0, r4, #4
 800db6c:	f7fe f960 	bl	800be30 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db70:	a803      	add	r0, sp, #12
 800db72:	f7ff ff59 	bl	800da28 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	2b09      	cmp	r3, #9
 800db7a:	d8e3      	bhi.n	800db44 <prvProcessReceivedCommands+0xc>
 800db7c:	e8df f003 	tbb	[pc, r3]
 800db80:	30050505 	.word	0x30050505
 800db84:	05055037 	.word	0x05055037
 800db88:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800db8e:	f043 0301 	orr.w	r3, r3, #1
 800db92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db96:	9b05      	ldr	r3, [sp, #20]
 800db98:	69a1      	ldr	r1, [r4, #24]
 800db9a:	4602      	mov	r2, r0
 800db9c:	4419      	add	r1, r3
 800db9e:	4620      	mov	r0, r4
 800dba0:	f7ff fe3c 	bl	800d81c <prvInsertTimerInActiveList>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d0cd      	beq.n	800db44 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba8:	6a23      	ldr	r3, [r4, #32]
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dbb2:	f013 0f04 	tst.w	r3, #4
 800dbb6:	d0c5      	beq.n	800db44 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dbb8:	69a2      	ldr	r2, [r4, #24]
 800dbba:	2100      	movs	r1, #0
 800dbbc:	9100      	str	r1, [sp, #0]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	9805      	ldr	r0, [sp, #20]
 800dbc2:	4402      	add	r2, r0
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f7ff febb 	bl	800d940 <xTimerGenericCommand>
							configASSERT( xResult );
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d1ba      	bne.n	800db44 <prvProcessReceivedCommands+0xc>
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	e7fe      	b.n	800dbde <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbe0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dbe4:	f023 0301 	bic.w	r3, r3, #1
 800dbe8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800dbec:	e7aa      	b.n	800db44 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dbf2:	f043 0301 	orr.w	r3, r3, #1
 800dbf6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbfa:	9905      	ldr	r1, [sp, #20]
 800dbfc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbfe:	b131      	cbz	r1, 800dc0e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc00:	4603      	mov	r3, r0
 800dc02:	4602      	mov	r2, r0
 800dc04:	4401      	add	r1, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f7ff fe08 	bl	800d81c <prvInsertTimerInActiveList>
					break;
 800dc0c:	e79a      	b.n	800db44 <prvProcessReceivedCommands+0xc>
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc1e:	e7fe      	b.n	800dc1e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dc24:	f013 0f02 	tst.w	r3, #2
 800dc28:	d004      	beq.n	800dc34 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc2a:	f023 0301 	bic.w	r3, r3, #1
 800dc2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800dc32:	e787      	b.n	800db44 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800dc34:	4620      	mov	r0, r4
 800dc36:	f7fe f88b 	bl	800bd50 <vPortFree>
 800dc3a:	e783      	b.n	800db44 <prvProcessReceivedCommands+0xc>
}
 800dc3c:	b008      	add	sp, #32
 800dc3e:	bd10      	pop	{r4, pc}
 800dc40:	2400b8c8 	.word	0x2400b8c8

0800dc44 <prvTimerTask>:
{
 800dc44:	b500      	push	{lr}
 800dc46:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc48:	a801      	add	r0, sp, #4
 800dc4a:	f7ff fdd7 	bl	800d7fc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc4e:	9901      	ldr	r1, [sp, #4]
 800dc50:	f7ff ff36 	bl	800dac0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800dc54:	f7ff ff70 	bl	800db38 <prvProcessReceivedCommands>
	for( ;; )
 800dc58:	e7f6      	b.n	800dc48 <prvTimerTask+0x4>

0800dc5a <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 800dc5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	4684      	mov	ip, r0
 800dc60:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 800dc62:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 800dc64:	2000      	movs	r0, #0
  int32_t ret = 1;
 800dc66:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 800dc68:	466c      	mov	r4, sp
  uint32_t val = 0;
 800dc6a:	4601      	mov	r1, r0
 800dc6c:	e03e      	b.n	800dcec <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 800dc6e:	4605      	mov	r5, r0
          done = 1;
 800dc70:	2001      	movs	r0, #1
 800dc72:	e03b      	b.n	800dcec <net_aton+0x92>
      ret = 0;
 800dc74:	4605      	mov	r5, r0
      done = 1;
 800dc76:	2001      	movs	r0, #1
 800dc78:	e038      	b.n	800dcec <net_aton+0x92>
        ++cp;
 800dc7a:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 800dc7e:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 800dc82:	2b58      	cmp	r3, #88	; 0x58
 800dc84:	bf18      	it	ne
 800dc86:	2b78      	cmpne	r3, #120	; 0x78
 800dc88:	d106      	bne.n	800dc98 <net_aton+0x3e>
          c0 = (char_t) * cp;
 800dc8a:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 800dc8e:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 800dc92:	f04f 0e10 	mov.w	lr, #16
 800dc96:	e033      	b.n	800dd00 <net_aton+0xa6>
        ++cp;
 800dc98:	4694      	mov	ip, r2
          base = 8;
 800dc9a:	f04f 0e08 	mov.w	lr, #8
 800dc9e:	e02f      	b.n	800dd00 <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 800dca0:	fb0e 3101 	mla	r1, lr, r1, r3
 800dca4:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 800dca6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 800dcaa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dcae:	b2d2      	uxtb	r2, r2
 800dcb0:	2a09      	cmp	r2, #9
 800dcb2:	d9f5      	bls.n	800dca0 <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 800dcb4:	f1be 0f10 	cmp.w	lr, #16
 800dcb8:	d115      	bne.n	800dce6 <net_aton+0x8c>
 800dcba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dcbe:	b2d2      	uxtb	r2, r2
 800dcc0:	2a05      	cmp	r2, #5
 800dcc2:	d904      	bls.n	800dcce <net_aton+0x74>
 800dcc4:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 800dcc8:	b2ff      	uxtb	r7, r7
 800dcca:	2f05      	cmp	r7, #5
 800dccc:	d80b      	bhi.n	800dce6 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 800dcce:	0109      	lsls	r1, r1, #4
 800dcd0:	2a19      	cmp	r2, #25
 800dcd2:	d806      	bhi.n	800dce2 <net_aton+0x88>
 800dcd4:	2261      	movs	r2, #97	; 0x61
 800dcd6:	1a9b      	subs	r3, r3, r2
 800dcd8:	330a      	adds	r3, #10
 800dcda:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 800dcdc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800dce0:	e7e3      	b.n	800dcaa <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 800dce2:	2241      	movs	r2, #65	; 0x41
 800dce4:	e7f7      	b.n	800dcd6 <net_aton+0x7c>
      if (c0 == '.')
 800dce6:	2b2e      	cmp	r3, #46	; 0x2e
 800dce8:	d00c      	beq.n	800dd04 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 800dcea:	2001      	movs	r0, #1
    if (done == 1)
 800dcec:	b9a0      	cbnz	r0, 800dd18 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 800dcee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dcf2:	b2d2      	uxtb	r2, r2
 800dcf4:	2a09      	cmp	r2, #9
 800dcf6:	d8bd      	bhi.n	800dc74 <net_aton+0x1a>
      if (c0 == '0')
 800dcf8:	2b30      	cmp	r3, #48	; 0x30
 800dcfa:	d0be      	beq.n	800dc7a <net_aton+0x20>
      base = 10;
 800dcfc:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 800dd00:	2100      	movs	r1, #0
 800dd02:	e7d2      	b.n	800dcaa <net_aton+0x50>
        if (pp >= (parts + 3))
 800dd04:	aa03      	add	r2, sp, #12
 800dd06:	4294      	cmp	r4, r2
 800dd08:	d2b1      	bcs.n	800dc6e <net_aton+0x14>
          *pp = val;
 800dd0a:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 800dd0e:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 800dd12:	f10c 0c01 	add.w	ip, ip, #1
 800dd16:	e7e9      	b.n	800dcec <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 800dd18:	b19b      	cbz	r3, 800dd42 <net_aton+0xe8>
 800dd1a:	2b0c      	cmp	r3, #12
 800dd1c:	bf18      	it	ne
 800dd1e:	2b20      	cmpne	r3, #32
 800dd20:	d00f      	beq.n	800dd42 <net_aton+0xe8>
 800dd22:	2b0d      	cmp	r3, #13
 800dd24:	bf14      	ite	ne
 800dd26:	2200      	movne	r2, #0
 800dd28:	2201      	moveq	r2, #1
 800dd2a:	2b0a      	cmp	r3, #10
 800dd2c:	d009      	beq.n	800dd42 <net_aton+0xe8>
 800dd2e:	b942      	cbnz	r2, 800dd42 <net_aton+0xe8>
 800dd30:	2b0b      	cmp	r3, #11
 800dd32:	bf14      	ite	ne
 800dd34:	2200      	movne	r2, #0
 800dd36:	2201      	moveq	r2, #1
 800dd38:	2b09      	cmp	r3, #9
 800dd3a:	d002      	beq.n	800dd42 <net_aton+0xe8>
 800dd3c:	b90a      	cbnz	r2, 800dd42 <net_aton+0xe8>
  {
    ret = 0;
 800dd3e:	2500      	movs	r5, #0
 800dd40:	e011      	b.n	800dd66 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 800dd42:	466b      	mov	r3, sp
 800dd44:	1ae3      	subs	r3, r4, r3
 800dd46:	109b      	asrs	r3, r3, #2
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d834      	bhi.n	800ddb6 <net_aton+0x15c>
 800dd4c:	e8df f003 	tbb	[pc, r3]
 800dd50:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 800dd54:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800dd58:	d300      	bcc.n	800dd5c <net_aton+0x102>
        {
          ret = 0;
 800dd5a:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 800dd5c:	9b00      	ldr	r3, [sp, #0]
 800dd5e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 800dd62:	2d01      	cmp	r5, #1
 800dd64:	d018      	beq.n	800dd98 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 800dd66:	4628      	mov	r0, r5
 800dd68:	b005      	add	sp, #20
 800dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 800dd6c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800dd70:	d223      	bcs.n	800ddba <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	041b      	lsls	r3, r3, #16
 800dd76:	9a00      	ldr	r2, [sp, #0]
 800dd78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd7c:	4319      	orrs	r1, r3
        break;
 800dd7e:	e7f0      	b.n	800dd62 <net_aton+0x108>
        if (val > 0xffU)
 800dd80:	29ff      	cmp	r1, #255	; 0xff
 800dd82:	d81c      	bhi.n	800ddbe <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800dd84:	9b01      	ldr	r3, [sp, #4]
 800dd86:	041b      	lsls	r3, r3, #16
 800dd88:	9a00      	ldr	r2, [sp, #0]
 800dd8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dd8e:	9a02      	ldr	r2, [sp, #8]
 800dd90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dd94:	4319      	orrs	r1, r3
        break;
 800dd96:	e7e4      	b.n	800dd62 <net_aton+0x108>
    if (addr != NULL)
 800dd98:	2e00      	cmp	r6, #0
 800dd9a:	d0e4      	beq.n	800dd66 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 800dd9c:	0a0b      	lsrs	r3, r1, #8
 800dd9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dda2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800dda6:	020a      	lsls	r2, r1, #8
 800dda8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ddac:	4313      	orrs	r3, r2
 800ddae:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 800ddb2:	6031      	str	r1, [r6, #0]
 800ddb4:	e7d7      	b.n	800dd66 <net_aton+0x10c>
    switch (pp - parts + 1)
 800ddb6:	2500      	movs	r5, #0
 800ddb8:	e7d5      	b.n	800dd66 <net_aton+0x10c>
          ret = 0;
 800ddba:	2500      	movs	r5, #0
 800ddbc:	e7d3      	b.n	800dd66 <net_aton+0x10c>
          ret = 0;
 800ddbe:	2500      	movs	r5, #0
  return ret;
 800ddc0:	e7d1      	b.n	800dd66 <net_aton+0x10c>

0800ddc2 <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 800ddc2:	6840      	ldr	r0, [r0, #4]
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 800ddcc:	493d      	ldr	r1, [pc, #244]	; (800dec4 <net_wifi_string_to_security+0xfc>)
 800ddce:	f7f2 fa8f 	bl	80002f0 <strcmp>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	d071      	beq.n	800deba <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 800ddd6:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 800ddda:	493b      	ldr	r1, [pc, #236]	; (800dec8 <net_wifi_string_to_security+0x100>)
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7f2 fa87 	bl	80002f0 <strcmp>
 800dde2:	b908      	cbnz	r0, 800dde8 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 800dde4:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 800dde8:	4938      	ldr	r1, [pc, #224]	; (800decc <net_wifi_string_to_security+0x104>)
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7f2 fa80 	bl	80002f0 <strcmp>
 800ddf0:	b900      	cbnz	r0, 800ddf4 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 800ddf2:	4d37      	ldr	r5, [pc, #220]	; (800ded0 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 800ddf4:	4937      	ldr	r1, [pc, #220]	; (800ded4 <net_wifi_string_to_security+0x10c>)
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7f2 fa7a 	bl	80002f0 <strcmp>
 800ddfc:	b900      	cbnz	r0, 800de00 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 800ddfe:	4d36      	ldr	r5, [pc, #216]	; (800ded8 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 800de00:	4936      	ldr	r1, [pc, #216]	; (800dedc <net_wifi_string_to_security+0x114>)
 800de02:	4620      	mov	r0, r4
 800de04:	f7f2 fa74 	bl	80002f0 <strcmp>
 800de08:	b900      	cbnz	r0, 800de0c <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 800de0a:	4d35      	ldr	r5, [pc, #212]	; (800dee0 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 800de0c:	4935      	ldr	r1, [pc, #212]	; (800dee4 <net_wifi_string_to_security+0x11c>)
 800de0e:	4620      	mov	r0, r4
 800de10:	f7f2 fa6e 	bl	80002f0 <strcmp>
 800de14:	b900      	cbnz	r0, 800de18 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 800de16:	4d34      	ldr	r5, [pc, #208]	; (800dee8 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 800de18:	4934      	ldr	r1, [pc, #208]	; (800deec <net_wifi_string_to_security+0x124>)
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7f2 fa68 	bl	80002f0 <strcmp>
 800de20:	b900      	cbnz	r0, 800de24 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800de22:	4d33      	ldr	r5, [pc, #204]	; (800def0 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 800de24:	4933      	ldr	r1, [pc, #204]	; (800def4 <net_wifi_string_to_security+0x12c>)
 800de26:	4620      	mov	r0, r4
 800de28:	f7f2 fa62 	bl	80002f0 <strcmp>
 800de2c:	b900      	cbnz	r0, 800de30 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 800de2e:	4d32      	ldr	r5, [pc, #200]	; (800def8 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 800de30:	4932      	ldr	r1, [pc, #200]	; (800defc <net_wifi_string_to_security+0x134>)
 800de32:	4620      	mov	r0, r4
 800de34:	f7f2 fa5c 	bl	80002f0 <strcmp>
 800de38:	b900      	cbnz	r0, 800de3c <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 800de3a:	4d31      	ldr	r5, [pc, #196]	; (800df00 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 800de3c:	4931      	ldr	r1, [pc, #196]	; (800df04 <net_wifi_string_to_security+0x13c>)
 800de3e:	4620      	mov	r0, r4
 800de40:	f7f2 fa56 	bl	80002f0 <strcmp>
 800de44:	b900      	cbnz	r0, 800de48 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 800de46:	4d30      	ldr	r5, [pc, #192]	; (800df08 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 800de48:	4930      	ldr	r1, [pc, #192]	; (800df0c <net_wifi_string_to_security+0x144>)
 800de4a:	4620      	mov	r0, r4
 800de4c:	f7f2 fa50 	bl	80002f0 <strcmp>
 800de50:	b900      	cbnz	r0, 800de54 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 800de52:	4d2f      	ldr	r5, [pc, #188]	; (800df10 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 800de54:	492f      	ldr	r1, [pc, #188]	; (800df14 <net_wifi_string_to_security+0x14c>)
 800de56:	4620      	mov	r0, r4
 800de58:	f7f2 fa4a 	bl	80002f0 <strcmp>
 800de5c:	b900      	cbnz	r0, 800de60 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 800de5e:	4d2e      	ldr	r5, [pc, #184]	; (800df18 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 800de60:	492e      	ldr	r1, [pc, #184]	; (800df1c <net_wifi_string_to_security+0x154>)
 800de62:	4620      	mov	r0, r4
 800de64:	f7f2 fa44 	bl	80002f0 <strcmp>
 800de68:	b900      	cbnz	r0, 800de6c <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 800de6a:	4d2d      	ldr	r5, [pc, #180]	; (800df20 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 800de6c:	492d      	ldr	r1, [pc, #180]	; (800df24 <net_wifi_string_to_security+0x15c>)
 800de6e:	4620      	mov	r0, r4
 800de70:	f7f2 fa3e 	bl	80002f0 <strcmp>
 800de74:	b900      	cbnz	r0, 800de78 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 800de76:	4d2c      	ldr	r5, [pc, #176]	; (800df28 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 800de78:	492c      	ldr	r1, [pc, #176]	; (800df2c <net_wifi_string_to_security+0x164>)
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7f2 fa38 	bl	80002f0 <strcmp>
 800de80:	b900      	cbnz	r0, 800de84 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 800de82:	4d2b      	ldr	r5, [pc, #172]	; (800df30 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 800de84:	492b      	ldr	r1, [pc, #172]	; (800df34 <net_wifi_string_to_security+0x16c>)
 800de86:	4620      	mov	r0, r4
 800de88:	f7f2 fa32 	bl	80002f0 <strcmp>
 800de8c:	b900      	cbnz	r0, 800de90 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 800de8e:	4d2a      	ldr	r5, [pc, #168]	; (800df38 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 800de90:	492a      	ldr	r1, [pc, #168]	; (800df3c <net_wifi_string_to_security+0x174>)
 800de92:	4620      	mov	r0, r4
 800de94:	f7f2 fa2c 	bl	80002f0 <strcmp>
 800de98:	b908      	cbnz	r0, 800de9e <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 800de9a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 800de9e:	4928      	ldr	r1, [pc, #160]	; (800df40 <net_wifi_string_to_security+0x178>)
 800dea0:	4620      	mov	r0, r4
 800dea2:	f7f2 fa25 	bl	80002f0 <strcmp>
 800dea6:	b908      	cbnz	r0, 800deac <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 800dea8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 800deac:	4925      	ldr	r1, [pc, #148]	; (800df44 <net_wifi_string_to_security+0x17c>)
 800deae:	4620      	mov	r0, r4
 800deb0:	f7f2 fa1e 	bl	80002f0 <strcmp>
 800deb4:	b118      	cbz	r0, 800debe <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 800deb6:	4628      	mov	r0, r5
 800deb8:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 800deba:	2500      	movs	r5, #0
 800debc:	e78d      	b.n	800ddda <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 800debe:	4d22      	ldr	r5, [pc, #136]	; (800df48 <net_wifi_string_to_security+0x180>)
  return ret;
 800dec0:	e7f9      	b.n	800deb6 <net_wifi_string_to_security+0xee>
 800dec2:	bf00      	nop
 800dec4:	0801eb28 	.word	0x0801eb28
 800dec8:	0801edb4 	.word	0x0801edb4
 800decc:	0801edc0 	.word	0x0801edc0
 800ded0:	00200002 	.word	0x00200002
 800ded4:	0801edcc 	.word	0x0801edcc
 800ded8:	00200006 	.word	0x00200006
 800dedc:	0801edd8 	.word	0x0801edd8
 800dee0:	00400004 	.word	0x00400004
 800dee4:	0801ede4 	.word	0x0801ede4
 800dee8:	00400002 	.word	0x00400002
 800deec:	0801ee84 	.word	0x0801ee84
 800def0:	00400006 	.word	0x00400006
 800def4:	0801ee90 	.word	0x0801ee90
 800def8:	40400004 	.word	0x40400004
 800defc:	0801ee08 	.word	0x0801ee08
 800df00:	01000004 	.word	0x01000004
 800df04:	0801ee10 	.word	0x0801ee10
 800df08:	01400004 	.word	0x01400004
 800df0c:	0801ee1c 	.word	0x0801ee1c
 800df10:	02200002 	.word	0x02200002
 800df14:	0801ee2c 	.word	0x0801ee2c
 800df18:	02200004 	.word	0x02200004
 800df1c:	0801ee38 	.word	0x0801ee38
 800df20:	02400002 	.word	0x02400002
 800df24:	0801ee48 	.word	0x0801ee48
 800df28:	02400004 	.word	0x02400004
 800df2c:	0801ee58 	.word	0x0801ee58
 800df30:	02400006 	.word	0x02400006
 800df34:	0801ee68 	.word	0x0801ee68
 800df38:	42400004 	.word	0x42400004
 800df3c:	0801ee74 	.word	0x0801ee74
 800df40:	0801ee78 	.word	0x0801ee78
 800df44:	0801ee7c 	.word	0x0801ee7c
 800df48:	10000004 	.word	0x10000004

0800df4c <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 800df4c:	b570      	push	{r4, r5, r6, lr}
 800df4e:	460d      	mov	r5, r1
 800df50:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800df52:	f000 f861 	bl	800e018 <netif_check>
  if (pnetif == NULL)
 800df56:	b150      	cbz	r0, 800df6e <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800df58:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800df5c:	7811      	ldrb	r1, [r2, #0]
 800df5e:	b949      	cbnz	r1, 800df74 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 800df60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800df62:	6816      	ldr	r6, [r2, #0]
 800df64:	4622      	mov	r2, r4
 800df66:	4629      	mov	r1, r5
 800df68:	47b0      	blx	r6
 800df6a:	b930      	cbnz	r0, 800df7a <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800df6e:	f06f 0003 	mvn.w	r0, #3
 800df72:	e7fb      	b.n	800df6c <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 800df74:	f06f 0003 	mvn.w	r0, #3
 800df78:	e7f8      	b.n	800df6c <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 800df7a:	f06f 001c 	mvn.w	r0, #28
  return ret;
 800df7e:	e7f5      	b.n	800df6c <net_wifi_scan+0x20>

0800df80 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	460d      	mov	r5, r1
 800df84:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800df86:	f000 f847 	bl	800e018 <netif_check>
  if (pnetif == NULL)
 800df8a:	b148      	cbz	r0, 800dfa0 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800df8c:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800df90:	7811      	ldrb	r1, [r2, #0]
 800df92:	b941      	cbnz	r1, 800dfa6 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 800df94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800df96:	6856      	ldr	r6, [r2, #4]
 800df98:	4622      	mov	r2, r4
 800df9a:	4629      	mov	r1, r5
 800df9c:	47b0      	blx	r6
  }
  return ret;
}
 800df9e:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800dfa0:	f06f 0003 	mvn.w	r0, #3
 800dfa4:	e7fb      	b.n	800df9e <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 800dfa6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800dfaa:	e7f8      	b.n	800df9e <net_wifi_get_scan_results+0x1e>

0800dfac <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 800dfac:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800dfb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfb2:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	4770      	bx	lr

0800dfb8 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 800dfb8:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <netif_add_to_list+0x18>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	b12b      	cbz	r3, 800dfca <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1fb      	bne.n	800dfbe <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 800dfc6:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 800dfc8:	4770      	bx	lr
    net_if_list = pnetif;
 800dfca:	4b01      	ldr	r3, [pc, #4]	; (800dfd0 <netif_add_to_list+0x18>)
 800dfcc:	6018      	str	r0, [r3, #0]
 800dfce:	4770      	bx	lr
 800dfd0:	2400b8d0 	.word	0x2400b8d0

0800dfd4 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 800dfdc:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 800dfde:	b110      	cbz	r0, 800dfe6 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 800dfe0:	f7ff feef 	bl	800ddc2 <net_get_ip_addr>
 800dfe4:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <net_if_find+0x40>)
 800dfe8:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 800dfea:	2204      	movs	r2, #4
 800dfec:	4669      	mov	r1, sp
 800dfee:	eb0d 0002 	add.w	r0, sp, r2
 800dff2:	f00e faf5 	bl	801c5e0 <memcmp>
 800dff6:	b148      	cbz	r0, 800e00c <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 800dff8:	2204      	movs	r2, #4
 800dffa:	eb0d 0102 	add.w	r1, sp, r2
 800dffe:	18a0      	adds	r0, r4, r2
 800e000:	f00e faee 	bl	801c5e0 <memcmp>
 800e004:	b110      	cbz	r0, 800e00c <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 800e006:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 800e008:	2c00      	cmp	r4, #0
 800e00a:	d1f5      	bne.n	800dff8 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 800e00c:	4620      	mov	r0, r4
 800e00e:	b002      	add	sp, #8
 800e010:	bd10      	pop	{r4, pc}
 800e012:	bf00      	nop
 800e014:	2400b8d0 	.word	0x2400b8d0

0800e018 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 800e018:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 800e01a:	b100      	cbz	r0, 800e01e <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 800e01c:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 800e01e:	2000      	movs	r0, #0
 800e020:	f7ff ffd8 	bl	800dfd4 <net_if_find>
    if (pnetif == NULL)
 800e024:	e7fa      	b.n	800e01c <netif_check+0x4>

0800e026 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 800e026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e028:	4604      	mov	r4, r0
 800e02a:	460d      	mov	r5, r1
 800e02c:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 800e02e:	f7f8 fcf3 	bl	8006a18 <HAL_GetTick>
 800e032:	4606      	mov	r6, r0
  while (*p != state)
 800e034:	e005      	b.n	800e042 <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 800e036:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e03a:	695b      	ldr	r3, [r3, #20]
 800e03c:	210a      	movs	r1, #10
 800e03e:	4620      	mov	r0, r4
 800e040:	4798      	blx	r3
  while (*p != state)
 800e042:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 800e046:	b2db      	uxtb	r3, r3
 800e048:	42ab      	cmp	r3, r5
 800e04a:	d007      	beq.n	800e05c <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 800e04c:	f7f8 fce4 	bl	8006a18 <HAL_GetTick>
 800e050:	19f3      	adds	r3, r6, r7
 800e052:	4298      	cmp	r0, r3
 800e054:	d3ef      	bcc.n	800e036 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 800e056:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 800e05a:	e000      	b.n	800e05e <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 800e05c:	2000      	movs	r0, #0

}
 800e05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e060 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800e060:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800e064:	b128      	cbz	r0, 800e072 <net_if_notify+0x12>
{
 800e066:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800e068:	6804      	ldr	r4, [r0, #0]
 800e06a:	b10c      	cbz	r4, 800e070 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 800e06c:	6840      	ldr	r0, [r0, #4]
 800e06e:	47a0      	blx	r4
  }
}
 800e070:	bd10      	pop	{r4, pc}
 800e072:	4770      	bx	lr

0800e074 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 800e074:	b168      	cbz	r0, 800e092 <net_if_init+0x1e>
{
 800e076:	b538      	push	{r3, r4, r5, lr}
 800e078:	460d      	mov	r5, r1
 800e07a:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 800e07c:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 800e080:	2301      	movs	r3, #1
 800e082:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 800e086:	f7ff ff97 	bl	800dfb8 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 800e08a:	4620      	mov	r0, r4
 800e08c:	47a8      	blx	r5
    if (NET_OK != ret)
 800e08e:	b918      	cbnz	r0, 800e098 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 800e090:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 800e092:	f06f 0003 	mvn.w	r0, #3
}
 800e096:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 800e098:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e09c:	e7f8      	b.n	800e090 <net_if_init+0x1c>

0800e09e <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 800e09e:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	f000 f8ab 	bl	800e1fc <net_state_manage_event>
}
 800e0a6:	bd08      	pop	{r3, pc}

0800e0a8 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 800e0a8:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 800e0aa:	2102      	movs	r1, #2
 800e0ac:	f000 f8a6 	bl	800e1fc <net_state_manage_event>
}
 800e0b0:	bd08      	pop	{r3, pc}

0800e0b2 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 800e0b2:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 800e0b4:	2103      	movs	r1, #3
 800e0b6:	f000 f8a1 	bl	800e1fc <net_state_manage_event>
}
 800e0ba:	bd08      	pop	{r3, pc}

0800e0bc <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 800e0bc:	b508      	push	{r3, lr}
 800e0be:	460a      	mov	r2, r1
  pnetif->state = state;
 800e0c0:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	f7ff ffca 	bl	800e060 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 800e0cc:	bd08      	pop	{r3, pc}

0800e0ce <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e0ce:	b538      	push	{r3, r4, r5, lr}
 800e0d0:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e0d2:	2901      	cmp	r1, #1
 800e0d4:	d004      	beq.n	800e0e0 <net_state_initialized+0x12>
 800e0d6:	2905      	cmp	r1, #5
 800e0d8:	d010      	beq.n	800e0fc <net_state_initialized+0x2e>
 800e0da:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 800e0dc:	4628      	mov	r0, r5
 800e0de:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 800e0e0:	2102      	movs	r1, #2
 800e0e2:	f7ff ffeb 	bl	800e0bc <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 800e0e6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	4798      	blx	r3
      if (NET_OK != ret)
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d0f2      	beq.n	800e0dc <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e0f6:	f06f 0510 	mvn.w	r5, #16
 800e0fa:	e7ef      	b.n	800e0dc <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 800e0fc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	4798      	blx	r3
 800e104:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 800e106:	2100      	movs	r1, #0
 800e108:	4620      	mov	r0, r4
 800e10a:	f7ff ffd7 	bl	800e0bc <set_state>
      if (NET_OK != ret)
 800e10e:	2d00      	cmp	r5, #0
 800e110:	d0e4      	beq.n	800e0dc <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e112:	f06f 0510 	mvn.w	r5, #16
  return ret;
 800e116:	e7e1      	b.n	800e0dc <net_state_initialized+0xe>

0800e118 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e118:	2907      	cmp	r1, #7
 800e11a:	d001      	beq.n	800e120 <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 800e11c:	2000      	movs	r0, #0
 800e11e:	4770      	bx	lr
{
 800e120:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800e122:	2103      	movs	r1, #3
 800e124:	f7ff ffca 	bl	800e0bc <set_state>
}
 800e128:	2000      	movs	r0, #0
 800e12a:	bd08      	pop	{r3, pc}

0800e12c <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e12c:	b510      	push	{r4, lr}
 800e12e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e130:	2902      	cmp	r1, #2
 800e132:	d003      	beq.n	800e13c <net_state_ready+0x10>
 800e134:	2904      	cmp	r1, #4
 800e136:	d00e      	beq.n	800e156 <net_state_ready+0x2a>
 800e138:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800e13a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 800e13c:	2104      	movs	r1, #4
 800e13e:	f7ff ffbd 	bl	800e0bc <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 800e142:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	4620      	mov	r0, r4
 800e14a:	4798      	blx	r3
      if (NET_OK != ret)
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d0f4      	beq.n	800e13a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e150:	f06f 0010 	mvn.w	r0, #16
 800e154:	e7f1      	b.n	800e13a <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 800e156:	2106      	movs	r1, #6
 800e158:	f7ff ffb0 	bl	800e0bc <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 800e15c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	4620      	mov	r0, r4
 800e164:	4798      	blx	r3
      if (NET_OK != ret)
 800e166:	2800      	cmp	r0, #0
 800e168:	d0e7      	beq.n	800e13a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e16a:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e16e:	e7e4      	b.n	800e13a <net_state_ready+0xe>

0800e170 <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 800e170:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 800e172:	2903      	cmp	r1, #3
 800e174:	d006      	beq.n	800e184 <net_state_connecting+0x14>
 800e176:	290a      	cmp	r1, #10
 800e178:	d102      	bne.n	800e180 <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 800e17a:	2105      	movs	r1, #5
 800e17c:	f7ff ff9e 	bl	800e0bc <set_state>

    default:
      break;
  }
  return ret;
}
 800e180:	2000      	movs	r0, #0
 800e182:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 800e184:	2103      	movs	r1, #3
 800e186:	f7ff ff99 	bl	800e0bc <set_state>
      break;
 800e18a:	e7f9      	b.n	800e180 <net_state_connecting+0x10>

0800e18c <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 800e18c:	b510      	push	{r4, lr}
 800e18e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800e190:	2903      	cmp	r1, #3
 800e192:	d003      	beq.n	800e19c <net_state_connected+0x10>
 800e194:	2909      	cmp	r1, #9
 800e196:	d00e      	beq.n	800e1b6 <net_state_connected+0x2a>
 800e198:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800e19a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 800e19c:	2107      	movs	r1, #7
 800e19e:	f7ff ff8d 	bl	800e0bc <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 800e1a2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4798      	blx	r3
      if (NET_OK != ret)
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d0f4      	beq.n	800e19a <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800e1b0:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800e1b4:	e7f1      	b.n	800e19a <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 800e1b6:	2108      	movs	r1, #8
 800e1b8:	f7ff ff80 	bl	800e0bc <set_state>
  int32_t       ret = NET_OK;
 800e1bc:	2000      	movs	r0, #0
      break;
 800e1be:	e7ec      	b.n	800e19a <net_state_connected+0xe>

0800e1c0 <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e1c0:	2907      	cmp	r1, #7
 800e1c2:	d001      	beq.n	800e1c8 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	4770      	bx	lr
{
 800e1c8:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800e1ca:	2103      	movs	r1, #3
 800e1cc:	f7ff ff76 	bl	800e0bc <set_state>
}
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	bd08      	pop	{r3, pc}

0800e1d4 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800e1d4:	2908      	cmp	r1, #8
 800e1d6:	d001      	beq.n	800e1dc <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 800e1d8:	2000      	movs	r0, #0
 800e1da:	4770      	bx	lr
{
 800e1dc:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 800e1de:	2105      	movs	r1, #5
 800e1e0:	f7ff ff6c 	bl	800e0bc <set_state>
}
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	bd08      	pop	{r3, pc}

0800e1e8 <net_state_stopping>:
  switch (event)
 800e1e8:	2906      	cmp	r1, #6
 800e1ea:	d001      	beq.n	800e1f0 <net_state_stopping+0x8>
}
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	4770      	bx	lr
{
 800e1f0:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 800e1f2:	2101      	movs	r1, #1
 800e1f4:	f7ff ff62 	bl	800e0bc <set_state>
}
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	bd08      	pop	{r3, pc}

0800e1fc <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800e200:	f7ff ff0a 	bl	800e018 <netif_check>
  if (pnetif == NULL)
 800e204:	b350      	cbz	r0, 800e25c <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 800e206:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800e20a:	3b01      	subs	r3, #1
 800e20c:	2b07      	cmp	r3, #7
 800e20e:	d828      	bhi.n	800e262 <net_state_manage_event+0x66>
 800e210:	e8df f003 	tbb	[pc, r3]
 800e214:	100c0804 	.word	0x100c0804
 800e218:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 800e21c:	4621      	mov	r1, r4
 800e21e:	f7ff ff56 	bl	800e0ce <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 800e222:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 800e224:	4621      	mov	r1, r4
 800e226:	f7ff ff77 	bl	800e118 <net_state_starting>
        break;
 800e22a:	e7fa      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 800e22c:	4621      	mov	r1, r4
 800e22e:	f7ff ff7d 	bl	800e12c <net_state_ready>
        break;
 800e232:	e7f6      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 800e234:	4621      	mov	r1, r4
 800e236:	f7ff ff9b 	bl	800e170 <net_state_connecting>
        break;
 800e23a:	e7f2      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 800e23c:	4621      	mov	r1, r4
 800e23e:	f7ff ffa5 	bl	800e18c <net_state_connected>
        break;
 800e242:	e7ee      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 800e244:	4621      	mov	r1, r4
 800e246:	f7ff ffbb 	bl	800e1c0 <net_state_disconnecting>
        break;
 800e24a:	e7ea      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 800e24c:	4621      	mov	r1, r4
 800e24e:	f7ff ffc1 	bl	800e1d4 <net_state_connection_lost>
        break;
 800e252:	e7e6      	b.n	800e222 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 800e254:	4621      	mov	r1, r4
 800e256:	f7ff ffc7 	bl	800e1e8 <net_state_stopping>
        break;
 800e25a:	e7e2      	b.n	800e222 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 800e25c:	f06f 0003 	mvn.w	r0, #3
 800e260:	e7df      	b.n	800e222 <net_state_manage_event+0x26>
    switch (pnetif->state)
 800e262:	f06f 001b 	mvn.w	r0, #27
  return ret;
 800e266:	e7dc      	b.n	800e222 <net_state_manage_event+0x26>

0800e268 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 800e268:	4770      	bx	lr

0800e26a <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 800e26a:	4770      	bx	lr

0800e26c <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 800e26c:	2802      	cmp	r0, #2
 800e26e:	d13b      	bne.n	800e2e8 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 800e270:	1e4b      	subs	r3, r1, #1
 800e272:	2b01      	cmp	r3, #1
 800e274:	d83b      	bhi.n	800e2ee <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 800e276:	2a06      	cmp	r2, #6
 800e278:	bf18      	it	ne
 800e27a:	2a11      	cmpne	r2, #17
 800e27c:	d004      	beq.n	800e288 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 800e27e:	2901      	cmp	r1, #1
 800e280:	d030      	beq.n	800e2e4 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 800e282:	2902      	cmp	r1, #2
 800e284:	d113      	bne.n	800e2ae <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 800e286:	2211      	movs	r2, #17
 800e288:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800e28a:	2803      	cmp	r0, #3
 800e28c:	dc32      	bgt.n	800e2f4 <es_wifi_socket+0x88>
{
 800e28e:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 800e290:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e294:	4c19      	ldr	r4, [pc, #100]	; (800e2fc <es_wifi_socket+0x90>)
 800e296:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e29a:	785b      	ldrb	r3, [r3, #1]
 800e29c:	b153      	cbz	r3, 800e2b4 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800e29e:	3001      	adds	r0, #1
 800e2a0:	2803      	cmp	r0, #3
 800e2a2:	ddf5      	ble.n	800e290 <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 800e2a4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 800e2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ac:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 800e2ae:	f06f 0002 	mvn.w	r0, #2
 800e2b2:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 800e2b4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e2b8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e2bc:	2401      	movs	r4, #1
 800e2be:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 800e2c0:	2902      	cmp	r1, #2
 800e2c2:	d007      	beq.n	800e2d4 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 800e2c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e2c8:	4c0c      	ldr	r4, [pc, #48]	; (800e2fc <es_wifi_socket+0x90>)
 800e2ca:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e2ce:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 800e2d0:	70d9      	strb	r1, [r3, #3]
        break;
 800e2d2:	e7e9      	b.n	800e2a8 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 800e2d4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e2d8:	4c08      	ldr	r4, [pc, #32]	; (800e2fc <es_wifi_socket+0x90>)
 800e2da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800e2de:	240d      	movs	r4, #13
 800e2e0:	705c      	strb	r4, [r3, #1]
 800e2e2:	e7ef      	b.n	800e2c4 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 800e2e4:	2206      	movs	r2, #6
 800e2e6:	e7cf      	b.n	800e288 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 800e2e8:	f06f 0002 	mvn.w	r0, #2
 800e2ec:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 800e2ee:	f06f 0002 	mvn.w	r0, #2
  return ret;
 800e2f2:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 800e2f4:	f06f 0005 	mvn.w	r0, #5
}
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	2400b8d4 	.word	0x2400b8d4

0800e300 <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e304:	2803      	cmp	r0, #3
 800e306:	d826      	bhi.n	800e356 <es_wifi_bind+0x56>
 800e308:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 800e30a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e30e:	4d18      	ldr	r5, [pc, #96]	; (800e370 <es_wifi_bind+0x70>)
 800e310:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e314:	785d      	ldrb	r5, [r3, #1]
 800e316:	2d01      	cmp	r5, #1
 800e318:	d00a      	beq.n	800e330 <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 800e31a:	f015 0f01 	tst.w	r5, #1
 800e31e:	d01d      	beq.n	800e35c <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 800e320:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e324:	4e12      	ldr	r6, [pc, #72]	; (800e370 <es_wifi_bind+0x70>)
 800e326:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e32a:	78db      	ldrb	r3, [r3, #3]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d118      	bne.n	800e362 <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 800e330:	2a10      	cmp	r2, #16
 800e332:	d119      	bne.n	800e368 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 800e334:	f7ff ff99 	bl	800e26a <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 800e338:	8841      	ldrh	r1, [r0, #2]
 800e33a:	ba49      	rev16	r1, r1
 800e33c:	4b0c      	ldr	r3, [pc, #48]	; (800e370 <es_wifi_bind+0x70>)
 800e33e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800e342:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e346:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 800e348:	6841      	ldr	r1, [r0, #4]
 800e34a:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 800e34c:	f045 0502 	orr.w	r5, r5, #2
 800e350:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 800e352:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 800e354:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 800e356:	f06f 0005 	mvn.w	r0, #5
 800e35a:	e7fb      	b.n	800e354 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 800e35c:	f06f 0005 	mvn.w	r0, #5
 800e360:	e7f8      	b.n	800e354 <es_wifi_bind+0x54>
 800e362:	f06f 0005 	mvn.w	r0, #5
 800e366:	e7f5      	b.n	800e354 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 800e368:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800e36c:	e7f2      	b.n	800e354 <es_wifi_bind+0x54>
 800e36e:	bf00      	nop
 800e370:	2400b8d4 	.word	0x2400b8d4

0800e374 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e374:	2803      	cmp	r0, #3
 800e376:	d82f      	bhi.n	800e3d8 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 800e378:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e37c:	4a19      	ldr	r2, [pc, #100]	; (800e3e4 <es_wifi_shutdown+0x70>)
 800e37e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	f013 0f10 	tst.w	r3, #16
 800e388:	d029      	beq.n	800e3de <es_wifi_shutdown+0x6a>
{
 800e38a:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 800e38c:	b939      	cbnz	r1, 800e39e <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 800e38e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e392:	4c14      	ldr	r4, [pc, #80]	; (800e3e4 <es_wifi_shutdown+0x70>)
 800e394:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e398:	f023 0308 	bic.w	r3, r3, #8
 800e39c:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 800e39e:	2901      	cmp	r1, #1
 800e3a0:	d005      	beq.n	800e3ae <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 800e3a2:	2902      	cmp	r1, #2
 800e3a4:	d00d      	beq.n	800e3c2 <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 800e3a6:	2000      	movs	r0, #0
  }
  return ret;
}
 800e3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ac:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 800e3ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e3b2:	4a0c      	ldr	r2, [pc, #48]	; (800e3e4 <es_wifi_shutdown+0x70>)
 800e3b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e3b8:	785a      	ldrb	r2, [r3, #1]
 800e3ba:	f022 0204 	bic.w	r2, r2, #4
 800e3be:	705a      	strb	r2, [r3, #1]
 800e3c0:	e7ef      	b.n	800e3a2 <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 800e3c2:	4b08      	ldr	r3, [pc, #32]	; (800e3e4 <es_wifi_shutdown+0x70>)
 800e3c4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e3c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e3cc:	7853      	ldrb	r3, [r2, #1]
 800e3ce:	f023 030c 	bic.w	r3, r3, #12
 800e3d2:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	e7e7      	b.n	800e3a8 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 800e3d8:	f06f 0005 	mvn.w	r0, #5
 800e3dc:	4770      	bx	lr
    ret = NET_OK;
 800e3de:	2000      	movs	r0, #0
}
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	2400b8d4 	.word	0x2400b8d4

0800e3e8 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 800e3e8:	2805      	cmp	r0, #5
 800e3ea:	d80e      	bhi.n	800e40a <conv_to_net_security+0x22>
 800e3ec:	e8df f000 	tbb	[pc, r0]
 800e3f0:	07051003 	.word	0x07051003
 800e3f4:	0b09      	.short	0x0b09
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 800e3fa:	4806      	ldr	r0, [pc, #24]	; (800e414 <conv_to_net_security+0x2c>)
      break;
 800e3fc:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800e3fe:	4806      	ldr	r0, [pc, #24]	; (800e418 <conv_to_net_security+0x30>)
      break;
 800e400:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800e402:	4805      	ldr	r0, [pc, #20]	; (800e418 <conv_to_net_security+0x30>)
      break;
 800e404:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 800e406:	4805      	ldr	r0, [pc, #20]	; (800e41c <conv_to_net_security+0x34>)
      break;
 800e408:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 800e40e:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 800e410:	2001      	movs	r0, #1

  }
  return ret;
}
 800e412:	4770      	bx	lr
 800e414:	00200006 	.word	0x00200006
 800e418:	00400006 	.word	0x00400006
 800e41c:	00400002 	.word	0x00400002

0800e420 <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e420:	2803      	cmp	r0, #3
 800e422:	d83e      	bhi.n	800e4a2 <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 800e424:	f241 0105 	movw	r1, #4101	; 0x1005
 800e428:	428a      	cmp	r2, r1
 800e42a:	d013      	beq.n	800e454 <es_wifi_setsockopt+0x34>
 800e42c:	dc05      	bgt.n	800e43a <es_wifi_setsockopt+0x1a>
 800e42e:	2a04      	cmp	r2, #4
 800e430:	d028      	beq.n	800e484 <es_wifi_setsockopt+0x64>
 800e432:	2a0e      	cmp	r2, #14
 800e434:	d138      	bne.n	800e4a8 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 800e436:	2000      	movs	r0, #0
 800e438:	4770      	bx	lr
    switch (optname)
 800e43a:	f241 0106 	movw	r1, #4102	; 0x1006
 800e43e:	428a      	cmp	r2, r1
 800e440:	d135      	bne.n	800e4ae <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e448:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <es_wifi_setsockopt+0xa4>)
 800e44a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e44e:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 800e450:	2000      	movs	r0, #0
        break;
 800e452:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 800e454:	6819      	ldr	r1, [r3, #0]
 800e456:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e45a:	4a1a      	ldr	r2, [pc, #104]	; (800e4c4 <es_wifi_setsockopt+0xa4>)
 800e45c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e460:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 800e462:	789b      	ldrb	r3, [r3, #2]
 800e464:	2b11      	cmp	r3, #17
 800e466:	d001      	beq.n	800e46c <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 800e468:	2000      	movs	r0, #0
 800e46a:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 800e46c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e470:	dd20      	ble.n	800e4b4 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 800e472:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e476:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e47e:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 800e480:	2000      	movs	r0, #0
 800e482:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 800e484:	9a00      	ldr	r2, [sp, #0]
 800e486:	2a01      	cmp	r2, #1
 800e488:	d116      	bne.n	800e4b8 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	b9bb      	cbnz	r3, 800e4be <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 800e48e:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <es_wifi_setsockopt+0xa4>)
 800e490:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800e494:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e498:	2101      	movs	r1, #1
 800e49a:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 800e49c:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 800e49e:	2000      	movs	r0, #0
 800e4a0:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 800e4a2:	f06f 0005 	mvn.w	r0, #5
 800e4a6:	4770      	bx	lr
    switch (optname)
 800e4a8:	f06f 0003 	mvn.w	r0, #3
 800e4ac:	4770      	bx	lr
 800e4ae:	f06f 0003 	mvn.w	r0, #3
 800e4b2:	4770      	bx	lr
        ret = NET_OK;
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 800e4b8:	f06f 0003 	mvn.w	r0, #3
 800e4bc:	4770      	bx	lr
          ret =  NET_OK;
 800e4be:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	2400b8d4 	.word	0x2400b8d4

0800e4c8 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 800e4c8:	f06f 0002 	mvn.w	r0, #2
 800e4cc:	4770      	bx	lr

0800e4ce <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	4770      	bx	lr

0800e4d2 <es_wifi_if_deinit>:
{
 800e4d2:	b538      	push	{r3, r4, r5, lr}
 800e4d4:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 800e4d6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e4da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e4dc:	f00e f878 	bl	801c5d0 <free>
  pnetif->pdrv->extension.wifi = NULL;
 800e4e0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 800e4e8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 800e4ec:	f00e f870 	bl	801c5d0 <free>
  pnetif->pdrv = NULL;
 800e4f0:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}

0800e4f8 <es_wifi_if_init>:
{
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 800e4fc:	2084      	movs	r0, #132	; 0x84
 800e4fe:	f00e f85f 	bl	801c5c0 <malloc>
  if (p != NULL)
 800e502:	2800      	cmp	r0, #0
 800e504:	d04c      	beq.n	800e5a0 <es_wifi_if_init+0xa8>
 800e506:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 800e508:	2300      	movs	r3, #0
 800e50a:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 800e50c:	4b26      	ldr	r3, [pc, #152]	; (800e5a8 <es_wifi_if_init+0xb0>)
 800e50e:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 800e510:	4b26      	ldr	r3, [pc, #152]	; (800e5ac <es_wifi_if_init+0xb4>)
 800e512:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 800e514:	4b26      	ldr	r3, [pc, #152]	; (800e5b0 <es_wifi_if_init+0xb8>)
 800e516:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 800e518:	4b26      	ldr	r3, [pc, #152]	; (800e5b4 <es_wifi_if_init+0xbc>)
 800e51a:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 800e51c:	4b26      	ldr	r3, [pc, #152]	; (800e5b8 <es_wifi_if_init+0xc0>)
 800e51e:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 800e520:	4b26      	ldr	r3, [pc, #152]	; (800e5bc <es_wifi_if_init+0xc4>)
 800e522:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 800e524:	4b26      	ldr	r3, [pc, #152]	; (800e5c0 <es_wifi_if_init+0xc8>)
 800e526:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 800e528:	4b26      	ldr	r3, [pc, #152]	; (800e5c4 <es_wifi_if_init+0xcc>)
 800e52a:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 800e52c:	4b26      	ldr	r3, [pc, #152]	; (800e5c8 <es_wifi_if_init+0xd0>)
 800e52e:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 800e530:	4b26      	ldr	r3, [pc, #152]	; (800e5cc <es_wifi_if_init+0xd4>)
 800e532:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 800e534:	4b26      	ldr	r3, [pc, #152]	; (800e5d0 <es_wifi_if_init+0xd8>)
 800e536:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 800e538:	4b26      	ldr	r3, [pc, #152]	; (800e5d4 <es_wifi_if_init+0xdc>)
 800e53a:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 800e53c:	4b26      	ldr	r3, [pc, #152]	; (800e5d8 <es_wifi_if_init+0xe0>)
 800e53e:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 800e540:	4b26      	ldr	r3, [pc, #152]	; (800e5dc <es_wifi_if_init+0xe4>)
 800e542:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 800e544:	4b26      	ldr	r3, [pc, #152]	; (800e5e0 <es_wifi_if_init+0xe8>)
 800e546:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 800e548:	4b26      	ldr	r3, [pc, #152]	; (800e5e4 <es_wifi_if_init+0xec>)
 800e54a:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 800e54c:	4b26      	ldr	r3, [pc, #152]	; (800e5e8 <es_wifi_if_init+0xf0>)
 800e54e:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 800e550:	4b26      	ldr	r3, [pc, #152]	; (800e5ec <es_wifi_if_init+0xf4>)
 800e552:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 800e554:	4b26      	ldr	r3, [pc, #152]	; (800e5f0 <es_wifi_if_init+0xf8>)
 800e556:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 800e558:	4b26      	ldr	r3, [pc, #152]	; (800e5f4 <es_wifi_if_init+0xfc>)
 800e55a:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 800e55c:	4b26      	ldr	r3, [pc, #152]	; (800e5f8 <es_wifi_if_init+0x100>)
 800e55e:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 800e560:	4b26      	ldr	r3, [pc, #152]	; (800e5fc <es_wifi_if_init+0x104>)
 800e562:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 800e564:	4b26      	ldr	r3, [pc, #152]	; (800e600 <es_wifi_if_init+0x108>)
 800e566:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 800e568:	2024      	movs	r0, #36	; 0x24
 800e56a:	f00e f829 	bl	801c5c0 <malloc>
    if (NULL == pextwifi)
 800e56e:	4606      	mov	r6, r0
 800e570:	b180      	cbz	r0, 800e594 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 800e572:	2224      	movs	r2, #36	; 0x24
 800e574:	2100      	movs	r1, #0
 800e576:	f00e f851 	bl	801c61c <memset>
      pnetif->pdrv = p;
 800e57a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 800e57e:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 800e580:	4b20      	ldr	r3, [pc, #128]	; (800e604 <es_wifi_if_init+0x10c>)
 800e582:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 800e584:	4b20      	ldr	r3, [pc, #128]	; (800e608 <es_wifi_if_init+0x110>)
 800e586:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 800e588:	2106      	movs	r1, #6
 800e58a:	4628      	mov	r0, r5
 800e58c:	f7ff fe36 	bl	800e1fc <net_state_manage_event>
      ret = NET_OK;
 800e590:	2000      	movs	r0, #0
}
 800e592:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 800e594:	4620      	mov	r0, r4
 800e596:	f00e f81b 	bl	801c5d0 <free>
      ret = NET_ERROR_NO_MEMORY;
 800e59a:	f06f 0007 	mvn.w	r0, #7
 800e59e:	e7f8      	b.n	800e592 <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 800e5a0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800e5a4:	e7f5      	b.n	800e592 <es_wifi_if_init+0x9a>
 800e5a6:	bf00      	nop
 800e5a8:	0800e4f9 	.word	0x0800e4f9
 800e5ac:	0800e4d3 	.word	0x0800e4d3
 800e5b0:	0800efad 	.word	0x0800efad
 800e5b4:	0800e60d 	.word	0x0800e60d
 800e5b8:	0800f1bd 	.word	0x0800f1bd
 800e5bc:	0800ef8d 	.word	0x0800ef8d
 800e5c0:	0800e26d 	.word	0x0800e26d
 800e5c4:	0800e301 	.word	0x0800e301
 800e5c8:	0800ef31 	.word	0x0800ef31
 800e5cc:	0800eead 	.word	0x0800eead
 800e5d0:	0800e9f1 	.word	0x0800e9f1
 800e5d4:	0800ee19 	.word	0x0800ee19
 800e5d8:	0800ed81 	.word	0x0800ed81
 800e5dc:	0800eaa9 	.word	0x0800eaa9
 800e5e0:	0800ec2d 	.word	0x0800ec2d
 800e5e4:	0800e421 	.word	0x0800e421
 800e5e8:	0800e4c9 	.word	0x0800e4c9
 800e5ec:	0800e905 	.word	0x0800e905
 800e5f0:	0800e861 	.word	0x0800e861
 800e5f4:	0800e76d 	.word	0x0800e76d
 800e5f8:	0800e375 	.word	0x0800e375
 800e5fc:	0800e71d 	.word	0x0800e71d
 800e600:	0800e6e5 	.word	0x0800e6e5
 800e604:	0800e4cf 	.word	0x0800e4cf
 800e608:	0800e619 	.word	0x0800e619

0800e60c <es_wifi_if_stop>:
{
 800e60c:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 800e60e:	2106      	movs	r1, #6
 800e610:	f7ff fdf4 	bl	800e1fc <net_state_manage_event>
}
 800e614:	2000      	movs	r0, #0
 800e616:	bd08      	pop	{r3, pc}

0800e618 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 800e620:	4688      	mov	r8, r1
 800e622:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 800e624:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e628:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e62a:	f7ff fe1d 	bl	800e268 <castcontext>
 800e62e:	a901      	add	r1, sp, #4
 800e630:	f7f5 fe20 	bl	8004274 <ES_WIFI_ListAccessPoints>
 800e634:	2800      	cmp	r0, #0
 800e636:	d14f      	bne.n	800e6d8 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 800e638:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 800e63c:	42a3      	cmp	r3, r4
 800e63e:	d901      	bls.n	800e644 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 800e640:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 800e644:	2600      	movs	r6, #0
 800e646:	ac01      	add	r4, sp, #4
 800e648:	e03e      	b.n	800e6c8 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 800e64a:	2234      	movs	r2, #52	; 0x34
 800e64c:	fb02 f706 	mul.w	r7, r2, r6
 800e650:	eb08 0507 	add.w	r5, r8, r7
 800e654:	2100      	movs	r1, #0
 800e656:	4628      	mov	r0, r5
 800e658:	f00d ffe0 	bl	801c61c <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 800e65c:	6821      	ldr	r1, [r4, #0]
 800e65e:	6860      	ldr	r0, [r4, #4]
 800e660:	68a2      	ldr	r2, [r4, #8]
 800e662:	68e3      	ldr	r3, [r4, #12]
 800e664:	f8c5 1001 	str.w	r1, [r5, #1]
 800e668:	f8c5 0005 	str.w	r0, [r5, #5]
 800e66c:	f8c5 2009 	str.w	r2, [r5, #9]
 800e670:	f8c5 300d 	str.w	r3, [r5, #13]
 800e674:	6921      	ldr	r1, [r4, #16]
 800e676:	6960      	ldr	r0, [r4, #20]
 800e678:	69a2      	ldr	r2, [r4, #24]
 800e67a:	69e3      	ldr	r3, [r4, #28]
 800e67c:	f8c5 1011 	str.w	r1, [r5, #17]
 800e680:	f8c5 0015 	str.w	r0, [r5, #21]
 800e684:	f8c5 2019 	str.w	r2, [r5, #25]
 800e688:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 800e68c:	4620      	mov	r0, r4
 800e68e:	f7f1 fe39 	bl	8000304 <strlen>
 800e692:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 800e696:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800e69a:	f7ff fea5 	bl	800e3e8 <conv_to_net_security>
 800e69e:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 800e6a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a2:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 800e6a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800e6a8:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 800e6ac:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 800e6b0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 800e6b4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800e6b8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 800e6bc:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <es_wifi_get_scan_results+0xc8>)
 800e6be:	6818      	ldr	r0, [r3, #0]
 800e6c0:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 800e6c4:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 800e6c6:	3601      	adds	r6, #1
 800e6c8:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 800e6cc:	42b0      	cmp	r0, r6
 800e6ce:	d8bc      	bhi.n	800e64a <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 800e6d0:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 800e6d8:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e6dc:	e7f8      	b.n	800e6d0 <es_wifi_get_scan_results+0xb8>
 800e6de:	bf00      	nop
 800e6e0:	0801ee9c 	.word	0x0801ee9c

0800e6e4 <es_wifi_ping>:
{
 800e6e4:	b530      	push	{r4, r5, lr}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	4684      	mov	ip, r0
 800e6ea:	4614      	mov	r4, r2
 800e6ec:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 800e6ee:	6848      	ldr	r0, [r1, #4]
 800e6f0:	9002      	str	r0, [sp, #8]
 800e6f2:	890b      	ldrh	r3, [r1, #8]
 800e6f4:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 800e6f8:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 800e6fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e6fe:	f7ff fdb3 	bl	800e268 <castcontext>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	b2ab      	uxth	r3, r5
 800e708:	b2a2      	uxth	r2, r4
 800e70a:	a902      	add	r1, sp, #8
 800e70c:	f7f5 ff58 	bl	80045c0 <ES_WIFI_Ping>
 800e710:	b908      	cbnz	r0, 800e716 <es_wifi_ping+0x32>
}
 800e712:	b005      	add	sp, #20
 800e714:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 800e716:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e71a:	e7fa      	b.n	800e712 <es_wifi_ping+0x2e>

0800e71c <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 800e71c:	780b      	ldrb	r3, [r1, #0]
 800e71e:	2b0f      	cmp	r3, #15
 800e720:	d91e      	bls.n	800e760 <es_wifi_gethostbyname+0x44>
{
 800e722:	b530      	push	{r4, r5, lr}
 800e724:	b083      	sub	sp, #12
 800e726:	460c      	mov	r4, r1
 800e728:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 800e72a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e72e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e730:	f7ff fd9a 	bl	800e268 <castcontext>
 800e734:	466a      	mov	r2, sp
 800e736:	4629      	mov	r1, r5
 800e738:	f7f5 ff9e 	bl	8004678 <ES_WIFI_DNS_LookUp>
 800e73c:	b998      	cbnz	r0, 800e766 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 800e73e:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 800e740:	4620      	mov	r0, r4
 800e742:	f7ff fd92 	bl	800e26a <cast2sockaddr_in>
 800e746:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 800e748:	462a      	mov	r2, r5
 800e74a:	2100      	movs	r1, #0
 800e74c:	f00d ff66 	bl	801c61c <memset>
      saddr->sin_len = len;
 800e750:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 800e752:	2302      	movs	r3, #2
 800e754:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 800e756:	9b00      	ldr	r3, [sp, #0]
 800e758:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 800e75a:	2000      	movs	r0, #0
}
 800e75c:	b003      	add	sp, #12
 800e75e:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 800e760:	f06f 0003 	mvn.w	r0, #3
}
 800e764:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 800e766:	f06f 0009 	mvn.w	r0, #9
  return ret;
 800e76a:	e7f7      	b.n	800e75c <es_wifi_gethostbyname+0x40>

0800e76c <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e76c:	2803      	cmp	r0, #3
 800e76e:	d871      	bhi.n	800e854 <es_wifi_close+0xe8>
{
 800e770:	b510      	push	{r4, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 800e776:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e77a:	4a38      	ldr	r2, [pc, #224]	; (800e85c <es_wifi_close+0xf0>)
 800e77c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e780:	785b      	ldrb	r3, [r3, #1]
 800e782:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e786:	d042      	beq.n	800e80e <es_wifi_close+0xa2>
      if (isaclone)
 800e788:	b301      	cbz	r1, 800e7cc <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 800e78a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e78e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e798:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e79a:	f7ff fd65 	bl	800e268 <castcontext>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	f7f6 f956 	bl	8004a50 <ES_WIFI_CloseServerConnection>
 800e7a4:	b940      	cbnz	r0, 800e7b8 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e7a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e7aa:	4b2c      	ldr	r3, [pc, #176]	; (800e85c <es_wifi_close+0xf0>)
 800e7ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	7060      	strb	r0, [r4, #1]
}
 800e7b4:	b006      	add	sp, #24
 800e7b6:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e7b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e7bc:	4b27      	ldr	r3, [pc, #156]	; (800e85c <es_wifi_close+0xf0>)
 800e7be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 800e7c6:	f06f 0012 	mvn.w	r0, #18
 800e7ca:	e7f3      	b.n	800e7b4 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 800e7cc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e7d0:	4a22      	ldr	r2, [pc, #136]	; (800e85c <es_wifi_close+0xf0>)
 800e7d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e7dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e7de:	f7ff fd43 	bl	800e268 <castcontext>
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	f7f6 f958 	bl	8004a98 <ES_WIFI_StopServerSingleConn>
 800e7e8:	b938      	cbnz	r0, 800e7fa <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e7ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e7ee:	4b1b      	ldr	r3, [pc, #108]	; (800e85c <es_wifi_close+0xf0>)
 800e7f0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 800e7f8:	e7dc      	b.n	800e7b4 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e7fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e7fe:	4b17      	ldr	r3, [pc, #92]	; (800e85c <es_wifi_close+0xf0>)
 800e800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e804:	2200      	movs	r2, #0
 800e806:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 800e808:	f06f 0012 	mvn.w	r0, #18
 800e80c:	e7d2      	b.n	800e7b4 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 800e80e:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 800e812:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e816:	4a11      	ldr	r2, [pc, #68]	; (800e85c <es_wifi_close+0xf0>)
 800e818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e822:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e824:	f7ff fd20 	bl	800e268 <castcontext>
 800e828:	a901      	add	r1, sp, #4
 800e82a:	f7f5 ffdd 	bl	80047e8 <ES_WIFI_StopClientConnection>
 800e82e:	b148      	cbz	r0, 800e844 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e830:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e834:	4b09      	ldr	r3, [pc, #36]	; (800e85c <es_wifi_close+0xf0>)
 800e836:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e83a:	2300      	movs	r3, #0
 800e83c:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 800e83e:	f06f 0012 	mvn.w	r0, #18
 800e842:	e7b7      	b.n	800e7b4 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 800e844:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <es_wifi_close+0xf0>)
 800e84a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e84e:	2000      	movs	r0, #0
 800e850:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 800e852:	e7af      	b.n	800e7b4 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 800e854:	f06f 0005 	mvn.w	r0, #5
}
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	2400b8d4 	.word	0x2400b8d4

0800e860 <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 800e860:	6813      	ldr	r3, [r2, #0]
 800e862:	2b0f      	cmp	r3, #15
 800e864:	d943      	bls.n	800e8ee <es_wifi_getpeername+0x8e>
{
 800e866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	4604      	mov	r4, r0
 800e86e:	460e      	mov	r6, r1
 800e870:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 800e872:	2803      	cmp	r0, #3
 800e874:	d83e      	bhi.n	800e8f4 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800e876:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800e900 <es_wifi_getpeername+0xa0>
 800e87a:	0087      	lsls	r7, r0, #2
 800e87c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e880:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e886:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e88a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e88c:	f7ff fcec 	bl	800e268 <castcontext>
 800e890:	443c      	add	r4, r7
 800e892:	f10d 0312 	add.w	r3, sp, #18
 800e896:	aa05      	add	r2, sp, #20
 800e898:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 800e89c:	f7f6 fb28 	bl	8004ef0 <ES_WIFI_PeerInfo>
 800e8a0:	bb58      	cbnz	r0, 800e8fa <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800e8a2:	2400      	movs	r4, #0
 800e8a4:	9400      	str	r4, [sp, #0]
 800e8a6:	9401      	str	r4, [sp, #4]
 800e8a8:	9402      	str	r4, [sp, #8]
 800e8aa:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 800e8ac:	2302      	movs	r3, #2
 800e8ae:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 800e8b2:	9b05      	ldr	r3, [sp, #20]
 800e8b4:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 800e8b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e8ba:	ba5b      	rev16	r3, r3
 800e8bc:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800e8c0:	2710      	movs	r7, #16
 800e8c2:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 800e8c6:	682a      	ldr	r2, [r5, #0]
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f00d fea6 	bl	801c61c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 800e8d0:	f89d 2000 	ldrb.w	r2, [sp]
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	bf28      	it	cs
 800e8da:	461a      	movcs	r2, r3
 800e8dc:	4669      	mov	r1, sp
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f00d fe8e 	bl	801c600 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 800e8e4:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 800e8e6:	4620      	mov	r0, r4
}
 800e8e8:	b006      	add	sp, #24
 800e8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 800e8ee:	f06f 0003 	mvn.w	r0, #3
}
 800e8f2:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 800e8f4:	f06f 0005 	mvn.w	r0, #5
 800e8f8:	e7f6      	b.n	800e8e8 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 800e8fa:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e8fe:	e7f3      	b.n	800e8e8 <es_wifi_getpeername+0x88>
 800e900:	2400b8d4 	.word	0x2400b8d4

0800e904 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 800e904:	6813      	ldr	r3, [r2, #0]
 800e906:	2b0f      	cmp	r3, #15
 800e908:	d943      	bls.n	800e992 <es_wifi_getsockname+0x8e>
{
 800e90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	4604      	mov	r4, r0
 800e912:	460e      	mov	r6, r1
 800e914:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e916:	2803      	cmp	r0, #3
 800e918:	d83e      	bhi.n	800e998 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800e91a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800e9a4 <es_wifi_getsockname+0xa0>
 800e91e:	0087      	lsls	r7, r0, #2
 800e920:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800e924:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800e928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e92e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e930:	f7ff fc9a 	bl	800e268 <castcontext>
 800e934:	443c      	add	r4, r7
 800e936:	f10d 0312 	add.w	r3, sp, #18
 800e93a:	aa05      	add	r2, sp, #20
 800e93c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 800e940:	f7f6 fa9c 	bl	8004e7c <ES_WIFI_SockInfo>
 800e944:	bb58      	cbnz	r0, 800e99e <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800e946:	2400      	movs	r4, #0
 800e948:	9400      	str	r4, [sp, #0]
 800e94a:	9401      	str	r4, [sp, #4]
 800e94c:	9402      	str	r4, [sp, #8]
 800e94e:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 800e950:	2302      	movs	r3, #2
 800e952:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 800e956:	9b05      	ldr	r3, [sp, #20]
 800e958:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 800e95a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e95e:	ba5b      	rev16	r3, r3
 800e960:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800e964:	2710      	movs	r7, #16
 800e966:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 800e96a:	682a      	ldr	r2, [r5, #0]
 800e96c:	4621      	mov	r1, r4
 800e96e:	4630      	mov	r0, r6
 800e970:	f00d fe54 	bl	801c61c <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 800e974:	f89d 2000 	ldrb.w	r2, [sp]
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	bf28      	it	cs
 800e97e:	461a      	movcs	r2, r3
 800e980:	4669      	mov	r1, sp
 800e982:	4630      	mov	r0, r6
 800e984:	f00d fe3c 	bl	801c600 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 800e988:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 800e98a:	4620      	mov	r0, r4
}
 800e98c:	b006      	add	sp, #24
 800e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 800e992:	f06f 0003 	mvn.w	r0, #3
}
 800e996:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 800e998:	f06f 0005 	mvn.w	r0, #5
 800e99c:	e7f6      	b.n	800e98c <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 800e99e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800e9a2:	e7f3      	b.n	800e98c <es_wifi_getsockname+0x88>
 800e9a4:	2400b8d4 	.word	0x2400b8d4

0800e9a8 <check_connection_lost>:
{
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	4604      	mov	r4, r0
  if (n <= 0)
 800e9ac:	2900      	cmp	r1, #0
 800e9ae:	dd04      	ble.n	800e9ba <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 800e9b0:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800e9b4:	2b08      	cmp	r3, #8
 800e9b6:	d014      	beq.n	800e9e2 <check_connection_lost+0x3a>
}
 800e9b8:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 800e9ba:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800e9be:	2b05      	cmp	r3, #5
 800e9c0:	d1fa      	bne.n	800e9b8 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 800e9c2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800e9c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e9c8:	f7ff fc4e 	bl	800e268 <castcontext>
 800e9cc:	f7f5 fd2a 	bl	8004424 <ES_WIFI_IsConnected>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d1f1      	bne.n	800e9b8 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	2208      	movs	r2, #8
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7ff fb40 	bl	800e060 <net_if_notify>
 800e9e0:	e7ea      	b.n	800e9b8 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	2205      	movs	r2, #5
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	f7ff fb3a 	bl	800e060 <net_if_notify>
}
 800e9ec:	e7e4      	b.n	800e9b8 <check_connection_lost+0x10>
	...

0800e9f0 <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800e9f0:	2803      	cmp	r0, #3
 800e9f2:	d854      	bhi.n	800ea9e <es_wifi_connect+0xae>
{
 800e9f4:	b510      	push	{r4, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 800e9fa:	2a10      	cmp	r2, #16
 800e9fc:	d003      	beq.n	800ea06 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 800e9fe:	f06f 0003 	mvn.w	r0, #3
}
 800ea02:	b006      	add	sp, #24
 800ea04:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 800ea06:	4608      	mov	r0, r1
 800ea08:	f7ff fc2f 	bl	800e26a <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 800ea0c:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 800ea10:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ea14:	4a23      	ldr	r2, [pc, #140]	; (800eaa4 <es_wifi_connect+0xb4>)
 800ea16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea1a:	889a      	ldrh	r2, [r3, #4]
 800ea1c:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 800ea20:	8842      	ldrh	r2, [r0, #2]
 800ea22:	ba52      	rev16	r2, r2
 800ea24:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 800ea28:	79c2      	ldrb	r2, [r0, #7]
 800ea2a:	f88d 200f 	strb.w	r2, [sp, #15]
 800ea2e:	7982      	ldrb	r2, [r0, #6]
 800ea30:	f88d 200e 	strb.w	r2, [sp, #14]
 800ea34:	7942      	ldrb	r2, [r0, #5]
 800ea36:	f88d 200d 	strb.w	r2, [sp, #13]
 800ea3a:	7902      	ldrb	r2, [r0, #4]
 800ea3c:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 800ea40:	789b      	ldrb	r3, [r3, #2]
 800ea42:	2b11      	cmp	r3, #17
 800ea44:	d022      	beq.n	800ea8c <es_wifi_connect+0x9c>
 800ea46:	2b24      	cmp	r3, #36	; 0x24
 800ea48:	d023      	beq.n	800ea92 <es_wifi_connect+0xa2>
 800ea4a:	2b06      	cmp	r3, #6
 800ea4c:	d002      	beq.n	800ea54 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 800ea4e:	f06f 0003 	mvn.w	r0, #3
 800ea52:	e7d6      	b.n	800ea02 <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 800ea54:	2300      	movs	r3, #0
 800ea56:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 800ea5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ea5e:	4a11      	ldr	r2, [pc, #68]	; (800eaa4 <es_wifi_connect+0xb4>)
 800ea60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ea6a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ea6c:	f7ff fbfc 	bl	800e268 <castcontext>
 800ea70:	a901      	add	r1, sp, #4
 800ea72:	f7f5 fe21 	bl	80046b8 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 800ea76:	b978      	cbnz	r0, 800ea98 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <es_wifi_connect+0xb4>)
 800ea7a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ea7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ea82:	7853      	ldrb	r3, [r2, #1]
 800ea84:	f043 031c 	orr.w	r3, r3, #28
 800ea88:	7053      	strb	r3, [r2, #1]
 800ea8a:	e7ba      	b.n	800ea02 <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 800ea8c:	f06f 0002 	mvn.w	r0, #2
 800ea90:	e7b7      	b.n	800ea02 <es_wifi_connect+0x12>
 800ea92:	f06f 0002 	mvn.w	r0, #2
 800ea96:	e7b4      	b.n	800ea02 <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 800ea98:	f06f 0012 	mvn.w	r0, #18
 800ea9c:	e7b1      	b.n	800ea02 <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 800ea9e:	f06f 0005 	mvn.w	r0, #5
}
 800eaa2:	4770      	bx	lr
 800eaa4:	2400b8d4 	.word	0x2400b8d4

0800eaa8 <es_wifi_sendto>:
{
 800eaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaac:	b08a      	sub	sp, #40	; 0x28
 800eaae:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f040 80aa 	bne.w	800ec0a <es_wifi_sendto+0x162>
 800eab6:	4604      	mov	r4, r0
 800eab8:	460e      	mov	r6, r1
 800eaba:	4615      	mov	r5, r2
 800eabc:	787b      	ldrb	r3, [r7, #1]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	f040 80a6 	bne.w	800ec10 <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800eac4:	2803      	cmp	r0, #3
 800eac6:	f200 80a6 	bhi.w	800ec16 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 800eaca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800eace:	4a56      	ldr	r2, [pc, #344]	; (800ec28 <es_wifi_sendto+0x180>)
 800ead0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ead4:	789b      	ldrb	r3, [r3, #2]
 800ead6:	2b11      	cmp	r3, #17
 800ead8:	f040 80a0 	bne.w	800ec1c <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 800eadc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800eae0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eae4:	785b      	ldrb	r3, [r3, #1]
 800eae6:	f013 0f04 	tst.w	r3, #4
 800eaea:	f000 809a 	beq.w	800ec22 <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 800eaee:	f013 0f20 	tst.w	r3, #32
 800eaf2:	d102      	bne.n	800eafa <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 800eaf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eaf6:	2b10      	cmp	r3, #16
 800eaf8:	d04d      	beq.n	800eb96 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 800eafa:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800eafe:	dd01      	ble.n	800eb04 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 800eb00:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 800eb04:	4638      	mov	r0, r7
 800eb06:	f7ff fbb0 	bl	800e26a <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 800eb0a:	6843      	ldr	r3, [r0, #4]
 800eb0c:	0a1a      	lsrs	r2, r3, #8
 800eb0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800eb12:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800eb16:	0219      	lsls	r1, r3, #8
 800eb18:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800eb1c:	430a      	orrs	r2, r1
 800eb1e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	0a11      	lsrs	r1, r2, #8
 800eb26:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800eb2a:	430b      	orrs	r3, r1
 800eb2c:	0211      	lsls	r1, r2, #8
 800eb2e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800eb32:	430b      	orrs	r3, r1
 800eb34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb38:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 800eb3a:	8847      	ldrh	r7, [r0, #2]
 800eb3c:	ba7f      	rev16	r7, r7
 800eb3e:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800eb40:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 800eb44:	4b38      	ldr	r3, [pc, #224]	; (800ec28 <es_wifi_sendto+0x180>)
 800eb46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800eb4a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800eb4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eb52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eb54:	f7ff fb88 	bl	800e268 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 800eb58:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800eb5c:	9703      	str	r7, [sp, #12]
 800eb5e:	aa05      	add	r2, sp, #20
 800eb60:	9202      	str	r2, [sp, #8]
 800eb62:	9301      	str	r3, [sp, #4]
 800eb64:	f10d 0312 	add.w	r3, sp, #18
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	b2ab      	uxth	r3, r5
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	b2e1      	uxtb	r1, r4
 800eb70:	f7f6 f80e 	bl	8004b90 <ES_WIFI_SendDataTo>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d145      	bne.n	800ec04 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 800eb78:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 800eb7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800eb80:	4829      	ldr	r0, [pc, #164]	; (800ec28 <es_wifi_sendto+0x180>)
 800eb82:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800eb86:	4629      	mov	r1, r5
 800eb88:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb8a:	f7ff ff0d 	bl	800e9a8 <check_connection_lost>
}
 800eb8e:	4628      	mov	r0, r5
 800eb90:	b00a      	add	sp, #40	; 0x28
 800eb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 800eb96:	4638      	mov	r0, r7
 800eb98:	f7ff fb67 	bl	800e26a <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 800eb9c:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 800eba0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800eba4:	4a20      	ldr	r2, [pc, #128]	; (800ec28 <es_wifi_sendto+0x180>)
 800eba6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebaa:	889a      	ldrh	r2, [r3, #4]
 800ebac:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 800ebb0:	8842      	ldrh	r2, [r0, #2]
 800ebb2:	ba52      	rev16	r2, r2
 800ebb4:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 800ebb8:	79c2      	ldrb	r2, [r0, #7]
 800ebba:	f88d 201f 	strb.w	r2, [sp, #31]
 800ebbe:	7982      	ldrb	r2, [r0, #6]
 800ebc0:	f88d 201e 	strb.w	r2, [sp, #30]
 800ebc4:	7942      	ldrb	r2, [r0, #5]
 800ebc6:	f88d 201d 	strb.w	r2, [sp, #29]
 800ebca:	7902      	ldrb	r2, [r0, #4]
 800ebcc:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ebdc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ebde:	f7ff fb43 	bl	800e268 <castcontext>
 800ebe2:	a905      	add	r1, sp, #20
 800ebe4:	f7f5 fd68 	bl	80046b8 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 800ebe8:	b948      	cbnz	r0, 800ebfe <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 800ebea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ebee:	4a0e      	ldr	r2, [pc, #56]	; (800ec28 <es_wifi_sendto+0x180>)
 800ebf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebf4:	785a      	ldrb	r2, [r3, #1]
 800ebf6:	f042 0220 	orr.w	r2, r2, #32
 800ebfa:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 800ebfc:	e77d      	b.n	800eafa <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 800ebfe:	f06f 0512 	mvn.w	r5, #18
 800ec02:	e7c4      	b.n	800eb8e <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 800ec04:	f06f 0512 	mvn.w	r5, #18
 800ec08:	e7b8      	b.n	800eb7c <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 800ec0a:	f06f 0502 	mvn.w	r5, #2
 800ec0e:	e7be      	b.n	800eb8e <es_wifi_sendto+0xe6>
 800ec10:	f06f 0502 	mvn.w	r5, #2
 800ec14:	e7bb      	b.n	800eb8e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 800ec16:	f06f 0505 	mvn.w	r5, #5
 800ec1a:	e7b8      	b.n	800eb8e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ec1c:	f06f 0512 	mvn.w	r5, #18
 800ec20:	e7b5      	b.n	800eb8e <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 800ec22:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800ec26:	e7b2      	b.n	800eb8e <es_wifi_sendto+0xe6>
 800ec28:	2400b8d4 	.word	0x2400b8d4

0800ec2c <es_wifi_recvfrom>:
{
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ec32:	2803      	cmp	r0, #3
 800ec34:	f200 8097 	bhi.w	800ed66 <es_wifi_recvfrom+0x13a>
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4688      	mov	r8, r1
 800ec3c:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 800ec3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ec42:	4f4d      	ldr	r7, [pc, #308]	; (800ed78 <es_wifi_recvfrom+0x14c>)
 800ec44:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800ec48:	7882      	ldrb	r2, [r0, #2]
 800ec4a:	2a11      	cmp	r2, #17
 800ec4c:	f040 808e 	bne.w	800ed6c <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 800ec50:	7842      	ldrb	r2, [r0, #1]
 800ec52:	f012 0f08 	tst.w	r2, #8
 800ec56:	f000 808c 	beq.w	800ed72 <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 800ec5a:	f013 0f08 	tst.w	r3, #8
 800ec5e:	d107      	bne.n	800ec70 <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 800ec60:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 800ec62:	f247 5330 	movw	r3, #30000	; 0x7530
 800ec66:	429e      	cmp	r6, r3
 800ec68:	d903      	bls.n	800ec72 <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 800ec6a:	f06f 0702 	mvn.w	r7, #2
  return ret;
 800ec6e:	e030      	b.n	800ecd2 <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 800ec70:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 800ec72:	f012 0f20 	tst.w	r2, #32
 800ec76:	d030      	beq.n	800ecda <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 800ec7c:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 800ec80:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800ec84:	dd01      	ble.n	800ec8a <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 800ec86:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ec8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ec8e:	4a3a      	ldr	r2, [pc, #232]	; (800ed78 <es_wifi_recvfrom+0x14c>)
 800ec90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ec9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ec9c:	f7ff fae4 	bl	800e268 <castcontext>
 800eca0:	f10d 0312 	add.w	r3, sp, #18
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	ab05      	add	r3, sp, #20
 800eca8:	9302      	str	r3, [sp, #8]
 800ecaa:	9601      	str	r6, [sp, #4]
 800ecac:	ab04      	add	r3, sp, #16
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	b2ab      	uxth	r3, r5
 800ecb2:	4642      	mov	r2, r8
 800ecb4:	b2e1      	uxtb	r1, r4
 800ecb6:	f7f6 f85b 	bl	8004d70 <ES_WIFI_ReceiveDataFrom>
 800ecba:	b368      	cbz	r0, 800ed18 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 800ecbc:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ecc0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ecc4:	482c      	ldr	r0, [pc, #176]	; (800ed78 <es_wifi_recvfrom+0x14c>)
 800ecc6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ecca:	4639      	mov	r1, r7
 800eccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ecce:	f7ff fe6b 	bl	800e9a8 <check_connection_lost>
}
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	b00a      	add	sp, #40	; 0x28
 800ecd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 800ecda:	a905      	add	r1, sp, #20
 800ecdc:	4827      	ldr	r0, [pc, #156]	; (800ed7c <es_wifi_recvfrom+0x150>)
 800ecde:	f7fe ffbc 	bl	800dc5a <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 800ece2:	2310      	movs	r3, #16
 800ece4:	f88d 3018 	strb.w	r3, [sp, #24]
 800ece8:	2202      	movs	r2, #2
 800ecea:	f88d 2019 	strb.w	r2, [sp, #25]
 800ecee:	f64e 1214 	movw	r2, #59668	; 0xe914
 800ecf2:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ecf6:	9a05      	ldr	r2, [sp, #20]
 800ecf8:	9207      	str	r2, [sp, #28]
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	9108      	str	r1, [sp, #32]
 800ecfe:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 800ed00:	9301      	str	r3, [sp, #4]
 800ed02:	ab06      	add	r3, sp, #24
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	460b      	mov	r3, r1
 800ed08:	460a      	mov	r2, r1
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7ff fecc 	bl	800eaa8 <es_wifi_sendto>
      if (ret == NET_OK)
 800ed10:	4607      	mov	r7, r0
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d1d4      	bne.n	800ecc0 <es_wifi_recvfrom+0x94>
 800ed16:	e7af      	b.n	800ec78 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 800ed18:	2100      	movs	r1, #0
 800ed1a:	9106      	str	r1, [sp, #24]
 800ed1c:	9107      	str	r1, [sp, #28]
 800ed1e:	9108      	str	r1, [sp, #32]
 800ed20:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 800ed22:	2302      	movs	r3, #2
 800ed24:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 800ed28:	9b05      	ldr	r3, [sp, #20]
 800ed2a:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 800ed2c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ed30:	ba5b      	rev16	r3, r3
 800ed32:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 800ed36:	2510      	movs	r5, #16
 800ed38:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 800ed3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ed42:	f00d fc6b 	bl	801c61c <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 800ed46:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800ed4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	bf28      	it	cs
 800ed52:	461a      	movcs	r2, r3
 800ed54:	a906      	add	r1, sp, #24
 800ed56:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ed58:	f00d fc52 	bl	801c600 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 800ed5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed5e:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 800ed60:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 800ed64:	e7ac      	b.n	800ecc0 <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 800ed66:	f06f 0705 	mvn.w	r7, #5
 800ed6a:	e7b2      	b.n	800ecd2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ed6c:	f06f 0712 	mvn.w	r7, #18
 800ed70:	e7af      	b.n	800ecd2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ed72:	f06f 0712 	mvn.w	r7, #18
 800ed76:	e7ac      	b.n	800ecd2 <es_wifi_recvfrom+0xa6>
 800ed78:	2400b8d4 	.word	0x2400b8d4
 800ed7c:	0801eea0 	.word	0x0801eea0

0800ed80 <es_wifi_recv>:
{
 800ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed82:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ed84:	2803      	cmp	r0, #3
 800ed86:	d83f      	bhi.n	800ee08 <es_wifi_recv+0x88>
 800ed88:	4604      	mov	r4, r0
 800ed8a:	460e      	mov	r6, r1
 800ed8c:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 800ed8e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800ed92:	4920      	ldr	r1, [pc, #128]	; (800ee14 <es_wifi_recv+0x94>)
 800ed94:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ed98:	7852      	ldrb	r2, [r2, #1]
 800ed9a:	f012 0f08 	tst.w	r2, #8
 800ed9e:	d036      	beq.n	800ee0e <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 800eda0:	2b08      	cmp	r3, #8
 800eda2:	d02c      	beq.n	800edfe <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 800eda4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800eda8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800edac:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 800edae:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800edb2:	dd01      	ble.n	800edb8 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 800edb4:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800edb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800edbc:	4a15      	ldr	r2, [pc, #84]	; (800ee14 <es_wifi_recv+0x94>)
 800edbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800edc8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800edca:	f7ff fa4d 	bl	800e268 <castcontext>
 800edce:	9701      	str	r7, [sp, #4]
 800edd0:	f10d 030e 	add.w	r3, sp, #14
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	b2ab      	uxth	r3, r5
 800edd8:	4632      	mov	r2, r6
 800edda:	b2e1      	uxtb	r1, r4
 800eddc:	f7f5 ff74 	bl	8004cc8 <ES_WIFI_ReceiveData>
 800ede0:	b978      	cbnz	r0, 800ee02 <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 800ede2:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ede6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800edea:	480a      	ldr	r0, [pc, #40]	; (800ee14 <es_wifi_recv+0x94>)
 800edec:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800edf0:	4629      	mov	r1, r5
 800edf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800edf4:	f7ff fdd8 	bl	800e9a8 <check_connection_lost>
}
 800edf8:	4628      	mov	r0, r5
 800edfa:	b005      	add	sp, #20
 800edfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 800edfe:	2700      	movs	r7, #0
 800ee00:	e7d5      	b.n	800edae <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 800ee02:	f06f 0512 	mvn.w	r5, #18
 800ee06:	e7ee      	b.n	800ede6 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 800ee08:	f06f 0505 	mvn.w	r5, #5
 800ee0c:	e7f4      	b.n	800edf8 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 800ee0e:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800ee12:	e7f1      	b.n	800edf8 <es_wifi_recv+0x78>
 800ee14:	2400b8d4 	.word	0x2400b8d4

0800ee18 <es_wifi_send>:
{
 800ee18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee1a:	b085      	sub	sp, #20
  if (flags != 0)
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d139      	bne.n	800ee94 <es_wifi_send+0x7c>
 800ee20:	4604      	mov	r4, r0
 800ee22:	460f      	mov	r7, r1
 800ee24:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ee26:	2803      	cmp	r0, #3
 800ee28:	d837      	bhi.n	800ee9a <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 800ee2a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800ee2e:	4a1e      	ldr	r2, [pc, #120]	; (800eea8 <es_wifi_send+0x90>)
 800ee30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee34:	785b      	ldrb	r3, [r3, #1]
 800ee36:	f013 0f04 	tst.w	r3, #4
 800ee3a:	d031      	beq.n	800eea0 <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 800ee3c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 800ee40:	dd01      	ble.n	800ee46 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 800ee42:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ee46:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 800ee4a:	4b17      	ldr	r3, [pc, #92]	; (800eea8 <es_wifi_send+0x90>)
 800ee4c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ee50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ee56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ee58:	f7ff fa06 	bl	800e268 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 800ee5c:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 800ee5e:	9301      	str	r3, [sp, #4]
 800ee60:	f10d 030e 	add.w	r3, sp, #14
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	b2ab      	uxth	r3, r5
 800ee68:	463a      	mov	r2, r7
 800ee6a:	b2e1      	uxtb	r1, r4
 800ee6c:	f7f5 fe36 	bl	8004adc <ES_WIFI_SendData>
 800ee70:	b968      	cbnz	r0, 800ee8e <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 800ee72:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 800ee76:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ee7a:	480b      	ldr	r0, [pc, #44]	; (800eea8 <es_wifi_send+0x90>)
 800ee7c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ee80:	4629      	mov	r1, r5
 800ee82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ee84:	f7ff fd90 	bl	800e9a8 <check_connection_lost>
}
 800ee88:	4628      	mov	r0, r5
 800ee8a:	b005      	add	sp, #20
 800ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 800ee8e:	f06f 0512 	mvn.w	r5, #18
 800ee92:	e7f0      	b.n	800ee76 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 800ee94:	f06f 0502 	mvn.w	r5, #2
 800ee98:	e7f6      	b.n	800ee88 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 800ee9a:	f06f 0505 	mvn.w	r5, #5
 800ee9e:	e7f3      	b.n	800ee88 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 800eea0:	f06f 0512 	mvn.w	r5, #18
  return ret;
 800eea4:	e7f0      	b.n	800ee88 <es_wifi_send+0x70>
 800eea6:	bf00      	nop
 800eea8:	2400b8d4 	.word	0x2400b8d4

0800eeac <es_wifi_accept>:
{
 800eeac:	b530      	push	{r4, r5, lr}
 800eeae:	b087      	sub	sp, #28
 800eeb0:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	f7ff f9d9 	bl	800e26a <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800eeb8:	2c03      	cmp	r4, #3
 800eeba:	d834      	bhi.n	800ef26 <es_wifi_accept+0x7a>
 800eebc:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 800eebe:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 800eec2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800eec6:	4a19      	ldr	r2, [pc, #100]	; (800ef2c <es_wifi_accept+0x80>)
 800eec8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eece:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800eed2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eed4:	f7ff f9c8 	bl	800e268 <castcontext>
 800eed8:	aa01      	add	r2, sp, #4
 800eeda:	2100      	movs	r1, #0
 800eedc:	f7f5 fd12 	bl	8004904 <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 800eee0:	b9e8      	cbnz	r0, 800ef1e <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 800eee2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800eee6:	ba5b      	rev16	r3, r3
 800eee8:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 800eeea:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800eeee:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800eef2:	041b      	lsls	r3, r3, #16
 800eef4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eef8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800eefc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ef04:	4313      	orrs	r3, r2
 800ef06:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 800ef08:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ef0c:	4b07      	ldr	r3, [pc, #28]	; (800ef2c <es_wifi_accept+0x80>)
 800ef0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef12:	785a      	ldrb	r2, [r3, #1]
 800ef14:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 800ef18:	705a      	strb	r2, [r3, #1]
      ret = sock;
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	e001      	b.n	800ef22 <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 800ef1e:	f06f 0012 	mvn.w	r0, #18
}
 800ef22:	b007      	add	sp, #28
 800ef24:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 800ef26:	f06f 0005 	mvn.w	r0, #5
  return ret;
 800ef2a:	e7fa      	b.n	800ef22 <es_wifi_accept+0x76>
 800ef2c:	2400b8d4 	.word	0x2400b8d4

0800ef30 <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 800ef30:	2803      	cmp	r0, #3
 800ef32:	d826      	bhi.n	800ef82 <es_wifi_listen+0x52>
{
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	b086      	sub	sp, #24
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 800ef3e:	4d12      	ldr	r5, [pc, #72]	; (800ef88 <es_wifi_listen+0x58>)
 800ef40:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 800ef44:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800ef48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800ef4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ef50:	f7ff f98a 	bl	800e268 <castcontext>
    conn.Number = (uint8_t) sock;
 800ef54:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 800ef58:	88b3      	ldrh	r3, [r6, #4]
 800ef5a:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 800ef64:	78b3      	ldrb	r3, [r6, #2]
 800ef66:	2b06      	cmp	r3, #6
 800ef68:	d007      	beq.n	800ef7a <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 800ef6a:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 800ef6e:	a901      	add	r1, sp, #4
 800ef70:	f7f5 fc5c 	bl	800482c <ES_WIFI_StartServerSingleConn>
}
 800ef74:	b006      	add	sp, #24
 800ef76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f88d 3004 	strb.w	r3, [sp, #4]
 800ef80:	e7f3      	b.n	800ef6a <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 800ef82:	f06f 0005 	mvn.w	r0, #5
}
 800ef86:	4770      	bx	lr
 800ef88:	2400b8d4 	.word	0x2400b8d4

0800ef8c <es_wifi_if_disconnect>:
{
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800ef90:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800ef94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ef96:	f7ff f967 	bl	800e268 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 800ef9a:	f7f5 fa5d 	bl	8004458 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 800ef9e:	2107      	movs	r1, #7
 800efa0:	4620      	mov	r0, r4
 800efa2:	f7ff f92b 	bl	800e1fc <net_state_manage_event>
}
 800efa6:	2000      	movs	r0, #0
 800efa8:	bd10      	pop	{r4, pc}
	...

0800efac <es_wifi_if_start>:
{
 800efac:	b570      	push	{r4, r5, r6, lr}
 800efae:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 800efb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800efb4:	302c      	adds	r0, #44	; 0x2c
 800efb6:	f7f3 fa5b 	bl	8002470 <wifi_probe>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d13f      	bne.n	800f03e <es_wifi_if_start+0x92>
 800efbe:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 800efc0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800efc4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800efc6:	f7ff f94f 	bl	800e268 <castcontext>
 800efca:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 800efcc:	f7f5 f910 	bl	80041f0 <ES_WIFI_Init>
 800efd0:	bbc0      	cbnz	r0, 800f044 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 800efd2:	2240      	movs	r2, #64	; 0x40
 800efd4:	f106 0168 	add.w	r1, r6, #104	; 0x68
 800efd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800efdc:	f00e f829 	bl	801d032 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 800efe0:	2240      	movs	r2, #64	; 0x40
 800efe2:	4631      	mov	r1, r6
 800efe4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800efe8:	f00e f823 	bl	801d032 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 800efec:	2240      	movs	r2, #64	; 0x40
 800efee:	f106 0120 	add.w	r1, r6, #32
 800eff2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 800eff6:	f00e f81c 	bl	801d032 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 800effa:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 800effe:	4630      	mov	r0, r6
 800f000:	f7f5 fac0 	bl	8004584 <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800f004:	462b      	mov	r3, r5
 800f006:	e012      	b.n	800f02e <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 800f008:	4910      	ldr	r1, [pc, #64]	; (800f04c <es_wifi_if_start+0xa0>)
 800f00a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800f00e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 800f012:	f04f 0c00 	mov.w	ip, #0
 800f016:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 800f01a:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 800f01e:	f247 5130 	movw	r1, #30000	; 0x7530
 800f022:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 800f024:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 800f026:	2101      	movs	r1, #1
 800f028:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 800f02a:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 800f02c:	440b      	add	r3, r1
 800f02e:	2b03      	cmp	r3, #3
 800f030:	ddea      	ble.n	800f008 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 800f032:	2107      	movs	r1, #7
 800f034:	4620      	mov	r0, r4
 800f036:	f7ff f8e1 	bl	800e1fc <net_state_manage_event>
}
 800f03a:	4628      	mov	r0, r5
 800f03c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 800f03e:	f06f 050c 	mvn.w	r5, #12
 800f042:	e7fa      	b.n	800f03a <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 800f044:	f06f 0510 	mvn.w	r5, #16
  return ret;
 800f048:	e7f7      	b.n	800f03a <es_wifi_if_start+0x8e>
 800f04a:	bf00      	nop
 800f04c:	2400b8d4 	.word	0x2400b8d4

0800f050 <es_wifi_driver>:
{
 800f050:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 800f052:	f7ff fa51 	bl	800e4f8 <es_wifi_if_init>
}
 800f056:	bd08      	pop	{r3, pc}

0800f058 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 800f058:	4603      	mov	r3, r0
 800f05a:	b1e8      	cbz	r0, 800f098 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 800f05c:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 800f05e:	f013 0f01 	tst.w	r3, #1
 800f062:	d000      	beq.n	800f066 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 800f064:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 800f066:	4a14      	ldr	r2, [pc, #80]	; (800f0b8 <GetESWifiSecurityType+0x60>)
 800f068:	439a      	bics	r2, r3
 800f06a:	d017      	beq.n	800f09c <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 800f06c:	4a13      	ldr	r2, [pc, #76]	; (800f0bc <GetESWifiSecurityType+0x64>)
 800f06e:	439a      	bics	r2, r3
 800f070:	d016      	beq.n	800f0a0 <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 800f072:	4a13      	ldr	r2, [pc, #76]	; (800f0c0 <GetESWifiSecurityType+0x68>)
 800f074:	439a      	bics	r2, r3
 800f076:	d015      	beq.n	800f0a4 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 800f078:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f07c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800f080:	d012      	beq.n	800f0a8 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 800f082:	4a10      	ldr	r2, [pc, #64]	; (800f0c4 <GetESWifiSecurityType+0x6c>)
 800f084:	439a      	bics	r2, r3
 800f086:	d011      	beq.n	800f0ac <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 800f088:	4a0f      	ldr	r2, [pc, #60]	; (800f0c8 <GetESWifiSecurityType+0x70>)
 800f08a:	439a      	bics	r2, r3
 800f08c:	d010      	beq.n	800f0b0 <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 800f08e:	4a0f      	ldr	r2, [pc, #60]	; (800f0cc <GetESWifiSecurityType+0x74>)
 800f090:	ea32 0303 	bics.w	r3, r2, r3
 800f094:	d00e      	beq.n	800f0b4 <GetESWifiSecurityType+0x5c>
}
 800f096:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 800f098:	2000      	movs	r0, #0
 800f09a:	e7e0      	b.n	800f05e <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 800f09c:	2002      	movs	r0, #2
 800f09e:	e7e5      	b.n	800f06c <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 800f0a0:	2002      	movs	r0, #2
 800f0a2:	e7e6      	b.n	800f072 <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 800f0a4:	2002      	movs	r0, #2
 800f0a6:	e7e7      	b.n	800f078 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f0a8:	2004      	movs	r0, #4
 800f0aa:	e7ea      	b.n	800f082 <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f0ac:	2004      	movs	r0, #4
 800f0ae:	e7eb      	b.n	800f088 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f0b0:	2004      	movs	r0, #4
 800f0b2:	e7ec      	b.n	800f08e <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 800f0b4:	2004      	movs	r0, #4
 800f0b6:	e7ee      	b.n	800f096 <GetESWifiSecurityType+0x3e>
 800f0b8:	00200006 	.word	0x00200006
 800f0bc:	00200002 	.word	0x00200002
 800f0c0:	00200004 	.word	0x00200004
 800f0c4:	00400002 	.word	0x00400002
 800f0c8:	00400004 	.word	0x00400004
 800f0cc:	00400006 	.word	0x00400006

0800f0d0 <es_wifi_if_connect_sta>:
{
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800f0d6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 800f0da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f0dc:	f7ff f8c4 	bl	800e268 <castcontext>
 800f0e0:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 800f0e2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800f0e4:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 800f0e6:	681e      	ldr	r6, [r3, #0]
 800f0e8:	685f      	ldr	r7, [r3, #4]
 800f0ea:	6898      	ldr	r0, [r3, #8]
 800f0ec:	f7ff ffb4 	bl	800f058 <GetESWifiSecurityType>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	463a      	mov	r2, r7
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f7f5 f94a 	bl	8004390 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 800f0fc:	4606      	mov	r6, r0
 800f0fe:	b138      	cbz	r0, 800f110 <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 800f100:	b91e      	cbnz	r6, 800f10a <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 800f102:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 800f106:	b943      	cbnz	r3, 800f11a <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 800f108:	2602      	movs	r6, #2
}
 800f10a:	4630      	mov	r0, r6
 800f10c:	b003      	add	sp, #12
 800f10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 800f110:	4620      	mov	r0, r4
 800f112:	f7f5 f9b1 	bl	8004478 <ES_WIFI_GetNetworkSettings>
 800f116:	4606      	mov	r6, r0
 800f118:	e7f2      	b.n	800f100 <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 800f11a:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 800f11e:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 800f120:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800f124:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 800f128:	430b      	orrs	r3, r1
 800f12a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 800f12e:	430b      	orrs	r3, r1
 800f130:	b2d2      	uxtb	r2, r2
 800f132:	4313      	orrs	r3, r2
 800f134:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 800f136:	210a      	movs	r1, #10
 800f138:	4628      	mov	r0, r5
 800f13a:	f7ff f85f 	bl	800e1fc <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 800f13e:	e7e4      	b.n	800f10a <es_wifi_if_connect_sta+0x3a>

0800f140 <es_wifi_if_connect_ap>:
{
 800f140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f142:	b093      	sub	sp, #76	; 0x4c
 800f144:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 800f146:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 800f14a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f14c:	f7ff f88c 	bl	800e268 <castcontext>
 800f150:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 800f152:	6f64      	ldr	r4, [r4, #116]	; 0x74
 800f154:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 800f156:	2221      	movs	r2, #33	; 0x21
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	4668      	mov	r0, sp
 800f15c:	f00d ff69 	bl	801d032 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 800f160:	2221      	movs	r2, #33	; 0x21
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	eb0d 0002 	add.w	r0, sp, r2
 800f168:	f00d ff63 	bl	801d032 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 800f16c:	68b8      	ldr	r0, [r7, #8]
 800f16e:	f7ff ff73 	bl	800f058 <GetESWifiSecurityType>
 800f172:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 800f176:	7e63      	ldrb	r3, [r4, #25]
 800f178:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 800f17c:	7ea3      	ldrb	r3, [r4, #26]
 800f17e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 800f182:	7ee3      	ldrb	r3, [r4, #27]
 800f184:	b15b      	cbz	r3, 800f19e <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 800f186:	2301      	movs	r3, #1
 800f188:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 800f18c:	4669      	mov	r1, sp
 800f18e:	4630      	mov	r0, r6
 800f190:	f7f5 f98c 	bl	80044ac <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 800f194:	4604      	mov	r4, r0
 800f196:	b130      	cbz	r0, 800f1a6 <es_wifi_if_connect_ap+0x66>
}
 800f198:	4620      	mov	r0, r4
 800f19a:	b013      	add	sp, #76	; 0x4c
 800f19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800f1a4:	e7f2      	b.n	800f18c <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 800f1a6:	1d29      	adds	r1, r5, #4
 800f1a8:	4803      	ldr	r0, [pc, #12]	; (800f1b8 <es_wifi_if_connect_ap+0x78>)
 800f1aa:	f7fe fd56 	bl	800dc5a <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 800f1ae:	210a      	movs	r1, #10
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f7ff f823 	bl	800e1fc <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 800f1b6:	e7ef      	b.n	800f198 <es_wifi_if_connect_ap+0x58>
 800f1b8:	0801eeac 	.word	0x0801eeac

0800f1bc <es_wifi_if_connect>:
{
 800f1bc:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 800f1be:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800f1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c4:	7e1b      	ldrb	r3, [r3, #24]
 800f1c6:	b913      	cbnz	r3, 800f1ce <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 800f1c8:	f7ff ff82 	bl	800f0d0 <es_wifi_if_connect_sta>
}
 800f1cc:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 800f1ce:	f7ff ffb7 	bl	800f140 <es_wifi_if_connect_ap>
  return ret;
 800f1d2:	e7fb      	b.n	800f1cc <es_wifi_if_connect+0x10>

0800f1d4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f1d4:	8880      	ldrh	r0, [r0, #4]
 800f1d6:	4770      	bx	lr

0800f1d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	6803      	ldr	r3, [r0, #0]
 800f1dc:	460c      	mov	r4, r1
 800f1de:	2100      	movs	r1, #0
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	4798      	blx	r3
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	1ba4      	subs	r4, r4, r6
 800f1ee:	6a1b      	ldr	r3, [r3, #32]
 800f1f0:	b2a4      	uxth	r4, r4
 800f1f2:	4798      	blx	r3
 800f1f4:	fbb4 f0f0 	udiv	r0, r4, r0
 800f1f8:	bd70      	pop	{r4, r5, r6, pc}

0800f1fa <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	8083      	strh	r3, [r0, #4]
 800f1fe:	4770      	bx	lr

0800f200 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f200:	b510      	push	{r4, lr}
 800f202:	6803      	ldr	r3, [r0, #0]
 800f204:	4604      	mov	r4, r0
 800f206:	8881      	ldrh	r1, [r0, #4]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	4798      	blx	r3
 800f20c:	88a3      	ldrh	r3, [r4, #4]
 800f20e:	3301      	adds	r3, #1
 800f210:	80a3      	strh	r3, [r4, #4]
 800f212:	bd10      	pop	{r4, pc}

0800f214 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f214:	6803      	ldr	r3, [r0, #0]
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	4718      	bx	r3

0800f21a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f21a:	4770      	bx	lr

0800f21c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f21c:	4a02      	ldr	r2, [pc, #8]	; (800f228 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f21e:	6002      	str	r2, [r0, #0]
 800f220:	2200      	movs	r2, #0
 800f222:	8082      	strh	r2, [r0, #4]
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	0801eec4 	.word	0x0801eec4

0800f22c <_ZN8touchgfx9Container13getFirstChildEv>:
 800f22c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f22e:	4770      	bx	lr

0800f230 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f230:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f232:	2000      	movs	r0, #0
 800f234:	b12b      	cbz	r3, 800f242 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f236:	b920      	cbnz	r0, 800f242 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f238:	1a5a      	subs	r2, r3, r1
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	4250      	negs	r0, r2
 800f23e:	4150      	adcs	r0, r2
 800f240:	e7f8      	b.n	800f234 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f244:	2300      	movs	r3, #0
 800f246:	6148      	str	r0, [r1, #20]
 800f248:	618b      	str	r3, [r1, #24]
 800f24a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f24c:	b913      	cbnz	r3, 800f254 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f24e:	6281      	str	r1, [r0, #40]	; 0x28
 800f250:	4770      	bx	lr
 800f252:	4613      	mov	r3, r2
 800f254:	699a      	ldr	r2, [r3, #24]
 800f256:	2a00      	cmp	r2, #0
 800f258:	d1fb      	bne.n	800f252 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f25a:	6199      	str	r1, [r3, #24]
 800f25c:	4770      	bx	lr

0800f25e <_ZN8touchgfx9Container9removeAllEv>:
 800f25e:	2200      	movs	r2, #0
 800f260:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f262:	b123      	cbz	r3, 800f26e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f264:	6999      	ldr	r1, [r3, #24]
 800f266:	6281      	str	r1, [r0, #40]	; 0x28
 800f268:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f26c:	e7f8      	b.n	800f260 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f26e:	4770      	bx	lr

0800f270 <_ZN8touchgfx9Container6unlinkEv>:
 800f270:	2300      	movs	r3, #0
 800f272:	6283      	str	r3, [r0, #40]	; 0x28
 800f274:	4770      	bx	lr

0800f276 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f276:	2200      	movs	r2, #0
 800f278:	8002      	strh	r2, [r0, #0]
 800f27a:	8042      	strh	r2, [r0, #2]
 800f27c:	8082      	strh	r2, [r0, #4]
 800f27e:	80c2      	strh	r2, [r0, #6]
 800f280:	4770      	bx	lr

0800f282 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	460d      	mov	r5, r1
 800f286:	4616      	mov	r6, r2
 800f288:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f28a:	b13c      	cbz	r4, 800f29c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	4620      	mov	r0, r4
 800f290:	4632      	mov	r2, r6
 800f292:	4629      	mov	r1, r5
 800f294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f296:	4798      	blx	r3
 800f298:	69a4      	ldr	r4, [r4, #24]
 800f29a:	e7f6      	b.n	800f28a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f29c:	bd70      	pop	{r4, r5, r6, pc}

0800f29e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f29e:	b538      	push	{r3, r4, r5, lr}
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f2a4:	b134      	cbz	r4, 800f2b4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f2a6:	682b      	ldr	r3, [r5, #0]
 800f2a8:	4621      	mov	r1, r4
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	4798      	blx	r3
 800f2b0:	69a4      	ldr	r4, [r4, #24]
 800f2b2:	e7f7      	b.n	800f2a4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}

0800f2b6 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800f2b6:	b510      	push	{r4, lr}
 800f2b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f2ba:	b12c      	cbz	r4, 800f2c8 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	4620      	mov	r0, r4
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	4798      	blx	r3
 800f2c4:	69a4      	ldr	r4, [r4, #24]
 800f2c6:	e7f8      	b.n	800f2ba <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800f2c8:	bd10      	pop	{r4, pc}

0800f2ca <_ZN8touchgfx9ContainerD1Ev>:
 800f2ca:	4770      	bx	lr

0800f2cc <_ZN8touchgfx9ContainerD0Ev>:
 800f2cc:	b510      	push	{r4, lr}
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	212c      	movs	r1, #44	; 0x2c
 800f2d2:	f00c ffde 	bl	801c292 <_ZdlPvj>
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	bd10      	pop	{r4, pc}

0800f2da <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f2da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f2dc:	b19b      	cbz	r3, 800f306 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f2de:	428b      	cmp	r3, r1
 800f2e0:	d109      	bne.n	800f2f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f2e2:	699a      	ldr	r2, [r3, #24]
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	6159      	str	r1, [r3, #20]
 800f2e8:	6282      	str	r2, [r0, #40]	; 0x28
 800f2ea:	b902      	cbnz	r2, 800f2ee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f2ec:	4770      	bx	lr
 800f2ee:	6199      	str	r1, [r3, #24]
 800f2f0:	4770      	bx	lr
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	b13a      	cbz	r2, 800f306 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f2f6:	699a      	ldr	r2, [r3, #24]
 800f2f8:	428a      	cmp	r2, r1
 800f2fa:	d1fa      	bne.n	800f2f2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f2fc:	698a      	ldr	r2, [r1, #24]
 800f2fe:	619a      	str	r2, [r3, #24]
 800f300:	2300      	movs	r3, #0
 800f302:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f306:	4770      	bx	lr

0800f308 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f308:	b410      	push	{r4}
 800f30a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f30c:	4604      	mov	r4, r0
 800f30e:	b92b      	cbnz	r3, 800f31c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f310:	6803      	ldr	r3, [r0, #0]
 800f312:	4611      	mov	r1, r2
 800f314:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f31a:	4718      	bx	r3
 800f31c:	b941      	cbnz	r1, 800f330 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f31e:	6193      	str	r3, [r2, #24]
 800f320:	6282      	str	r2, [r0, #40]	; 0x28
 800f322:	6154      	str	r4, [r2, #20]
 800f324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	4603      	mov	r3, r0
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d0f9      	beq.n	800f324 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f330:	4299      	cmp	r1, r3
 800f332:	6998      	ldr	r0, [r3, #24]
 800f334:	d1f9      	bne.n	800f32a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f336:	6190      	str	r0, [r2, #24]
 800f338:	618a      	str	r2, [r1, #24]
 800f33a:	e7f2      	b.n	800f322 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f33c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f340:	461f      	mov	r7, r3
 800f342:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800f346:	460d      	mov	r5, r1
 800f348:	4616      	mov	r6, r2
 800f34a:	b103      	cbz	r3, 800f34e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f34c:	6038      	str	r0, [r7, #0]
 800f34e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f350:	b314      	cbz	r4, 800f398 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f352:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f356:	b1eb      	cbz	r3, 800f394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f358:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f35c:	428d      	cmp	r5, r1
 800f35e:	db19      	blt.n	800f394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f360:	b289      	uxth	r1, r1
 800f362:	8923      	ldrh	r3, [r4, #8]
 800f364:	440b      	add	r3, r1
 800f366:	b21b      	sxth	r3, r3
 800f368:	429d      	cmp	r5, r3
 800f36a:	da13      	bge.n	800f394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f36c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f370:	4296      	cmp	r6, r2
 800f372:	db0f      	blt.n	800f394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f374:	b292      	uxth	r2, r2
 800f376:	8963      	ldrh	r3, [r4, #10]
 800f378:	4413      	add	r3, r2
 800f37a:	b21b      	sxth	r3, r3
 800f37c:	429e      	cmp	r6, r3
 800f37e:	da09      	bge.n	800f394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	1ab2      	subs	r2, r6, r2
 800f384:	1a69      	subs	r1, r5, r1
 800f386:	4620      	mov	r0, r4
 800f388:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800f38c:	b212      	sxth	r2, r2
 800f38e:	463b      	mov	r3, r7
 800f390:	b209      	sxth	r1, r1
 800f392:	47c0      	blx	r8
 800f394:	69a4      	ldr	r4, [r4, #24]
 800f396:	e7db      	b.n	800f350 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f39c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	4c6d      	ldr	r4, [pc, #436]	; (800f558 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f3a2:	b0a1      	sub	sp, #132	; 0x84
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	6824      	ldr	r4, [r4, #0]
 800f3a8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800f3aa:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800f3ae:	2400      	movs	r4, #0
 800f3b0:	9303      	str	r3, [sp, #12]
 800f3b2:	802c      	strh	r4, [r5, #0]
 800f3b4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800f3b6:	802c      	strh	r4, [r5, #0]
 800f3b8:	601c      	str	r4, [r3, #0]
 800f3ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f3be:	f7ff ffbd 	bl	800f33c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f3c2:	f1b9 0f03 	cmp.w	r9, #3
 800f3c6:	f340 80c1 	ble.w	800f54c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	a80c      	add	r0, sp, #48	; 0x30
 800f3ce:	f003 fa6f 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f3d2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800f3d6:	9306      	str	r3, [sp, #24]
 800f3d8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800f3dc:	9307      	str	r3, [sp, #28]
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	f8d3 a000 	ldr.w	sl, [r3]
 800f3e4:	f1ba 0f00 	cmp.w	sl, #0
 800f3e8:	f000 80b3 	beq.w	800f552 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f3ec:	4651      	mov	r1, sl
 800f3ee:	a810      	add	r0, sp, #64	; 0x40
 800f3f0:	f003 fa5e 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f3f4:	2002      	movs	r0, #2
 800f3f6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800f3fa:	9b01      	ldr	r3, [sp, #4]
 800f3fc:	9a06      	ldr	r2, [sp, #24]
 800f3fe:	fb91 f1f0 	sdiv	r1, r1, r0
 800f402:	189d      	adds	r5, r3, r2
 800f404:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800f408:	9a07      	ldr	r2, [sp, #28]
 800f40a:	4419      	add	r1, r3
 800f40c:	9b02      	ldr	r3, [sp, #8]
 800f40e:	4413      	add	r3, r2
 800f410:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800f414:	1a6d      	subs	r5, r5, r1
 800f416:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800f41a:	fb92 f2f0 	sdiv	r2, r2, r0
 800f41e:	440a      	add	r2, r1
 800f420:	1a9b      	subs	r3, r3, r2
 800f422:	435b      	muls	r3, r3
 800f424:	fb05 3505 	mla	r5, r5, r5, r3
 800f428:	4f4c      	ldr	r7, [pc, #304]	; (800f55c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f42a:	ac10      	add	r4, sp, #64	; 0x40
 800f42c:	f1b9 0f0c 	cmp.w	r9, #12
 800f430:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f434:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f438:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f43a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f43c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f444:	f04f 0303 	mov.w	r3, #3
 800f448:	bfd8      	it	le
 800f44a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f44e:	f04f 0400 	mov.w	r4, #0
 800f452:	f8cd 9000 	str.w	r9, [sp]
 800f456:	bfcc      	ite	gt
 800f458:	4698      	movgt	r8, r3
 800f45a:	fb92 f8f3 	sdivle	r8, r2, r3
 800f45e:	1c63      	adds	r3, r4, #1
 800f460:	aa10      	add	r2, sp, #64	; 0x40
 800f462:	f004 0401 	and.w	r4, r4, #1
 800f466:	f04f 0b00 	mov.w	fp, #0
 800f46a:	9308      	str	r3, [sp, #32]
 800f46c:	9b00      	ldr	r3, [sp, #0]
 800f46e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f472:	fb93 f3f8 	sdiv	r3, r3, r8
 800f476:	3404      	adds	r4, #4
 800f478:	b29b      	uxth	r3, r3
 800f47a:	9304      	str	r3, [sp, #16]
 800f47c:	9a04      	ldr	r2, [sp, #16]
 800f47e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f482:	fb13 f302 	smulbb	r3, r3, r2
 800f486:	9a01      	ldr	r2, [sp, #4]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	1899      	adds	r1, r3, r2
 800f48c:	9305      	str	r3, [sp, #20]
 800f48e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f492:	b209      	sxth	r1, r1
 800f494:	4299      	cmp	r1, r3
 800f496:	db4d      	blt.n	800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f498:	8932      	ldrh	r2, [r6, #8]
 800f49a:	4413      	add	r3, r2
 800f49c:	b21b      	sxth	r3, r3
 800f49e:	4299      	cmp	r1, r3
 800f4a0:	da48      	bge.n	800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	6827      	ldr	r7, [r4, #0]
 800f4a6:	fb17 f703 	smulbb	r7, r7, r3
 800f4aa:	9b02      	ldr	r3, [sp, #8]
 800f4ac:	b2bf      	uxth	r7, r7
 800f4ae:	18fa      	adds	r2, r7, r3
 800f4b0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f4b4:	b212      	sxth	r2, r2
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	db3c      	blt.n	800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4ba:	8970      	ldrh	r0, [r6, #10]
 800f4bc:	4403      	add	r3, r0
 800f4be:	b21b      	sxth	r3, r3
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	da37      	bge.n	800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4ca:	ab0b      	add	r3, sp, #44	; 0x2c
 800f4cc:	f7ff ff36 	bl	800f33c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f4d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4d2:	b37a      	cbz	r2, 800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4d4:	4552      	cmp	r2, sl
 800f4d6:	d02d      	beq.n	800f534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f4d8:	4611      	mov	r1, r2
 800f4da:	a80e      	add	r0, sp, #56	; 0x38
 800f4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800f4de:	f003 f9e7 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f4e2:	f04f 0e02 	mov.w	lr, #2
 800f4e6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800f4ea:	9a06      	ldr	r2, [sp, #24]
 800f4ec:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800f4f0:	9b01      	ldr	r3, [sp, #4]
 800f4f2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800f4f6:	4413      	add	r3, r2
 800f4f8:	9a07      	ldr	r2, [sp, #28]
 800f4fa:	fb91 f1fe 	sdiv	r1, r1, lr
 800f4fe:	fb9c fcfe 	sdiv	ip, ip, lr
 800f502:	4401      	add	r1, r0
 800f504:	1a58      	subs	r0, r3, r1
 800f506:	9b02      	ldr	r3, [sp, #8]
 800f508:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800f50c:	4413      	add	r3, r2
 800f50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f510:	448c      	add	ip, r1
 800f512:	eba3 030c 	sub.w	r3, r3, ip
 800f516:	435b      	muls	r3, r3
 800f518:	fb00 3300 	mla	r3, r0, r0, r3
 800f51c:	42ab      	cmp	r3, r5
 800f51e:	d208      	bcs.n	800f532 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f522:	461d      	mov	r5, r3
 800f524:	9803      	ldr	r0, [sp, #12]
 800f526:	6001      	str	r1, [r0, #0]
 800f528:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800f52a:	9805      	ldr	r0, [sp, #20]
 800f52c:	8008      	strh	r0, [r1, #0]
 800f52e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f530:	800f      	strh	r7, [r1, #0]
 800f532:	4692      	mov	sl, r2
 800f534:	f10b 0b01 	add.w	fp, fp, #1
 800f538:	3408      	adds	r4, #8
 800f53a:	f1bb 0f04 	cmp.w	fp, #4
 800f53e:	d19d      	bne.n	800f47c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f540:	9b00      	ldr	r3, [sp, #0]
 800f542:	9c08      	ldr	r4, [sp, #32]
 800f544:	444b      	add	r3, r9
 800f546:	4544      	cmp	r4, r8
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	d188      	bne.n	800f45e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f54c:	b021      	add	sp, #132	; 0x84
 800f54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f552:	f04f 35ff 	mov.w	r5, #4294967295
 800f556:	e767      	b.n	800f428 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f558:	2400b980 	.word	0x2400b980
 800f55c:	0801da28 	.word	0x0801da28

0800f560 <_ZN8touchgfx4RectaNERKS0_>:
 800f560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f564:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f568:	888c      	ldrh	r4, [r1, #4]
 800f56a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f56e:	443c      	add	r4, r7
 800f570:	b2a4      	uxth	r4, r4
 800f572:	fa0f f884 	sxth.w	r8, r4
 800f576:	45c1      	cmp	r9, r8
 800f578:	da2f      	bge.n	800f5da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f57a:	8882      	ldrh	r2, [r0, #4]
 800f57c:	444a      	add	r2, r9
 800f57e:	b292      	uxth	r2, r2
 800f580:	fa0f fe82 	sxth.w	lr, r2
 800f584:	4577      	cmp	r7, lr
 800f586:	da28      	bge.n	800f5da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f588:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f58c:	88cb      	ldrh	r3, [r1, #6]
 800f58e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f592:	442b      	add	r3, r5
 800f594:	b21b      	sxth	r3, r3
 800f596:	429e      	cmp	r6, r3
 800f598:	da1f      	bge.n	800f5da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f59a:	88c3      	ldrh	r3, [r0, #6]
 800f59c:	4433      	add	r3, r6
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	fa0f fc83 	sxth.w	ip, r3
 800f5a4:	4565      	cmp	r5, ip
 800f5a6:	da18      	bge.n	800f5da <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f5a8:	454f      	cmp	r7, r9
 800f5aa:	bfb8      	it	lt
 800f5ac:	464f      	movlt	r7, r9
 800f5ae:	42b5      	cmp	r5, r6
 800f5b0:	bfb8      	it	lt
 800f5b2:	4635      	movlt	r5, r6
 800f5b4:	45f0      	cmp	r8, lr
 800f5b6:	bfd8      	it	le
 800f5b8:	4622      	movle	r2, r4
 800f5ba:	1bd2      	subs	r2, r2, r7
 800f5bc:	8082      	strh	r2, [r0, #4]
 800f5be:	884a      	ldrh	r2, [r1, #2]
 800f5c0:	88c9      	ldrh	r1, [r1, #6]
 800f5c2:	8007      	strh	r7, [r0, #0]
 800f5c4:	440a      	add	r2, r1
 800f5c6:	8045      	strh	r5, [r0, #2]
 800f5c8:	b292      	uxth	r2, r2
 800f5ca:	b211      	sxth	r1, r2
 800f5cc:	458c      	cmp	ip, r1
 800f5ce:	bfa8      	it	ge
 800f5d0:	4613      	movge	r3, r2
 800f5d2:	1b5b      	subs	r3, r3, r5
 800f5d4:	80c3      	strh	r3, [r0, #6]
 800f5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5da:	2300      	movs	r3, #0
 800f5dc:	8003      	strh	r3, [r0, #0]
 800f5de:	8043      	strh	r3, [r0, #2]
 800f5e0:	8083      	strh	r3, [r0, #4]
 800f5e2:	80c3      	strh	r3, [r0, #6]
 800f5e4:	e7f7      	b.n	800f5d6 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f5e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	dd06      	ble.n	800f5fc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f5ee:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	bfcc      	ite	gt
 800f5f6:	2000      	movgt	r0, #0
 800f5f8:	2001      	movle	r0, #1
 800f5fa:	4770      	bx	lr
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	4770      	bx	lr

0800f600 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f604:	2300      	movs	r3, #0
 800f606:	4604      	mov	r4, r0
 800f608:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f60a:	8003      	strh	r3, [r0, #0]
 800f60c:	8043      	strh	r3, [r0, #2]
 800f60e:	8083      	strh	r3, [r0, #4]
 800f610:	80c3      	strh	r3, [r0, #6]
 800f612:	2d00      	cmp	r5, #0
 800f614:	d040      	beq.n	800f698 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f616:	1d28      	adds	r0, r5, #4
 800f618:	f7ff ffe5 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f61c:	b988      	cbnz	r0, 800f642 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f61e:	4620      	mov	r0, r4
 800f620:	f7ff ffe1 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f624:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f628:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f62c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f630:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f634:	b138      	cbz	r0, 800f646 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f636:	8022      	strh	r2, [r4, #0]
 800f638:	8063      	strh	r3, [r4, #2]
 800f63a:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f63e:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f642:	69ad      	ldr	r5, [r5, #24]
 800f644:	e7e5      	b.n	800f612 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f646:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f64a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f64e:	4290      	cmp	r0, r2
 800f650:	4607      	mov	r7, r0
 800f652:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f656:	460e      	mov	r6, r1
 800f658:	bfa8      	it	ge
 800f65a:	4617      	movge	r7, r2
 800f65c:	4299      	cmp	r1, r3
 800f65e:	4472      	add	r2, lr
 800f660:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f664:	bfa8      	it	ge
 800f666:	461e      	movge	r6, r3
 800f668:	4440      	add	r0, r8
 800f66a:	4471      	add	r1, lr
 800f66c:	4463      	add	r3, ip
 800f66e:	b200      	sxth	r0, r0
 800f670:	8027      	strh	r7, [r4, #0]
 800f672:	b212      	sxth	r2, r2
 800f674:	8066      	strh	r6, [r4, #2]
 800f676:	b209      	sxth	r1, r1
 800f678:	b21b      	sxth	r3, r3
 800f67a:	4290      	cmp	r0, r2
 800f67c:	bfac      	ite	ge
 800f67e:	ebc7 0200 	rsbge	r2, r7, r0
 800f682:	ebc7 0202 	rsblt	r2, r7, r2
 800f686:	4299      	cmp	r1, r3
 800f688:	bfac      	ite	ge
 800f68a:	ebc6 0301 	rsbge	r3, r6, r1
 800f68e:	ebc6 0303 	rsblt	r3, r6, r3
 800f692:	80a2      	strh	r2, [r4, #4]
 800f694:	80e3      	strh	r3, [r4, #6]
 800f696:	e7d4      	b.n	800f642 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f698:	4620      	mov	r0, r4
 800f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f69e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f69e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f6a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f6a6:	b383      	cbz	r3, 800f70a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f6a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f6aa:	b374      	cbz	r4, 800f70a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f6ac:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f6b0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f6b4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f6b8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f6bc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f6c0:	b303      	cbz	r3, 800f704 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f6c2:	4668      	mov	r0, sp
 800f6c4:	1d21      	adds	r1, r4, #4
 800f6c6:	f8ad 5000 	strh.w	r5, [sp]
 800f6ca:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f6ce:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f6d2:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f6d6:	f7ff ff43 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 800f6da:	4668      	mov	r0, sp
 800f6dc:	f7ff ff83 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f6e0:	b980      	cbnz	r0, 800f704 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f6e2:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6e6:	4669      	mov	r1, sp
 800f6e8:	88a2      	ldrh	r2, [r4, #4]
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	88e2      	ldrh	r2, [r4, #6]
 800f6f0:	f8ad 3000 	strh.w	r3, [sp]
 800f6f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f6f8:	1a9b      	subs	r3, r3, r2
 800f6fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	4798      	blx	r3
 800f704:	69a4      	ldr	r4, [r4, #24]
 800f706:	2c00      	cmp	r4, #0
 800f708:	d1d8      	bne.n	800f6bc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f70a:	b002      	add	sp, #8
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f710 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f710:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f712:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800f716:	460d      	mov	r5, r1
 800f718:	4616      	mov	r6, r2
 800f71a:	b323      	cbz	r3, 800f766 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f71c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f71e:	b314      	cbz	r4, 800f766 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f720:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800f724:	b1eb      	cbz	r3, 800f762 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f726:	6828      	ldr	r0, [r5, #0]
 800f728:	466b      	mov	r3, sp
 800f72a:	6869      	ldr	r1, [r5, #4]
 800f72c:	c303      	stmia	r3!, {r0, r1}
 800f72e:	4668      	mov	r0, sp
 800f730:	1d21      	adds	r1, r4, #4
 800f732:	f7ff ff15 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 800f736:	4668      	mov	r0, sp
 800f738:	f7ff ff55 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f73c:	b988      	cbnz	r0, 800f762 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f73e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f742:	4669      	mov	r1, sp
 800f744:	88a2      	ldrh	r2, [r4, #4]
 800f746:	4620      	mov	r0, r4
 800f748:	1a9b      	subs	r3, r3, r2
 800f74a:	88e2      	ldrh	r2, [r4, #6]
 800f74c:	f8ad 3000 	strh.w	r3, [sp]
 800f750:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f754:	1a9b      	subs	r3, r3, r2
 800f756:	4632      	mov	r2, r6
 800f758:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f760:	4798      	blx	r3
 800f762:	69a4      	ldr	r4, [r4, #24]
 800f764:	e7db      	b.n	800f71e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f766:	b002      	add	sp, #8
 800f768:	bd70      	pop	{r4, r5, r6, pc}

0800f76a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800f76a:	4770      	bx	lr

0800f76c <_ZN8touchgfx3HAL10FlushCacheEv>:
 800f76c:	4770      	bx	lr

0800f76e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f76e:	6803      	ldr	r3, [r0, #0]
 800f770:	b513      	push	{r0, r1, r4, lr}
 800f772:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800f776:	2300      	movs	r3, #0
 800f778:	e9cd 3300 	strd	r3, r3, [sp]
 800f77c:	466b      	mov	r3, sp
 800f77e:	47a0      	blx	r4
 800f780:	b002      	add	sp, #8
 800f782:	bd10      	pop	{r4, pc}

0800f784 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f784:	2301      	movs	r3, #1
 800f786:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f78a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f78e:	4770      	bx	lr

0800f790 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f790:	2301      	movs	r3, #1
 800f792:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800f796:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800f79a:	4770      	bx	lr

0800f79c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f79c:	6843      	ldr	r3, [r0, #4]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	725a      	strb	r2, [r3, #9]
 800f7a2:	6840      	ldr	r0, [r0, #4]
 800f7a4:	6803      	ldr	r3, [r0, #0]
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	4718      	bx	r3

0800f7aa <_ZN8touchgfx3HAL8flushDMAEv>:
 800f7aa:	6840      	ldr	r0, [r0, #4]
 800f7ac:	6803      	ldr	r3, [r0, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	4718      	bx	r3

0800f7b2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f7b2:	b530      	push	{r4, r5, lr}
 800f7b4:	b08b      	sub	sp, #44	; 0x2c
 800f7b6:	6804      	ldr	r4, [r0, #0]
 800f7b8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800f7bc:	9509      	str	r5, [sp, #36]	; 0x24
 800f7be:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800f7c2:	9508      	str	r5, [sp, #32]
 800f7c4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800f7c8:	9507      	str	r5, [sp, #28]
 800f7ca:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800f7ce:	9506      	str	r5, [sp, #24]
 800f7d0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800f7d4:	9505      	str	r5, [sp, #20]
 800f7d6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800f7da:	9504      	str	r5, [sp, #16]
 800f7dc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800f7e0:	9503      	str	r5, [sp, #12]
 800f7e2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800f7e6:	9502      	str	r5, [sp, #8]
 800f7e8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800f7ec:	e9cd 3500 	strd	r3, r5, [sp]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	47a0      	blx	r4
 800f7f8:	b00b      	add	sp, #44	; 0x2c
 800f7fa:	bd30      	pop	{r4, r5, pc}

0800f7fc <_ZN8touchgfx3HAL10beginFrameEv>:
 800f7fc:	4b04      	ldr	r3, [pc, #16]	; (800f810 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	b123      	cbz	r3, 800f80c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f802:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800f806:	f080 0001 	eor.w	r0, r0, #1
 800f80a:	4770      	bx	lr
 800f80c:	2001      	movs	r0, #1
 800f80e:	4770      	bx	lr
 800f810:	2400b97e 	.word	0x2400b97e

0800f814 <_ZN8touchgfx3HAL8endFrameEv>:
 800f814:	b510      	push	{r4, lr}
 800f816:	4604      	mov	r4, r0
 800f818:	6840      	ldr	r0, [r0, #4]
 800f81a:	6803      	ldr	r3, [r0, #0]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	4798      	blx	r3
 800f820:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800f824:	b113      	cbz	r3, 800f82c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f826:	2301      	movs	r3, #1
 800f828:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800f82c:	bd10      	pop	{r4, pc}

0800f82e <_ZN8touchgfx3HAL10initializeEv>:
 800f82e:	b510      	push	{r4, lr}
 800f830:	4604      	mov	r4, r0
 800f832:	f7f1 f821 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f836:	6860      	ldr	r0, [r4, #4]
 800f838:	6803      	ldr	r3, [r0, #0]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	4798      	blx	r3
 800f83e:	68e0      	ldr	r0, [r4, #12]
 800f840:	6803      	ldr	r3, [r0, #0]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	4798      	blx	r3
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	4620      	mov	r0, r4
 800f84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f850:	4718      	bx	r3

0800f852 <_ZN8touchgfx3HAL9taskEntryEv>:
 800f852:	b508      	push	{r3, lr}
 800f854:	6803      	ldr	r3, [r0, #0]
 800f856:	4604      	mov	r4, r0
 800f858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f85c:	4798      	blx	r3
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f862:	4620      	mov	r0, r4
 800f864:	4798      	blx	r3
 800f866:	f7f1 f863 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f86e:	e7f8      	b.n	800f862 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800f870 <_ZN8touchgfx3HAL4tickEv>:
 800f870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f872:	6803      	ldr	r3, [r0, #0]
 800f874:	4604      	mov	r4, r0
 800f876:	4d5b      	ldr	r5, [pc, #364]	; (800f9e4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800f878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f87c:	4798      	blx	r3
 800f87e:	2800      	cmp	r0, #0
 800f880:	f000 8095 	beq.w	800f9ae <_ZN8touchgfx3HAL4tickEv+0x13e>
 800f884:	2001      	movs	r0, #1
 800f886:	2600      	movs	r6, #0
 800f888:	f7f0 fe1c 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f88c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800f890:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800f894:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f898:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f89c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800f8a0:	b133      	cbz	r3, 800f8b0 <_ZN8touchgfx3HAL4tickEv+0x40>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f8aa:	4798      	blx	r3
 800f8ac:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800f8b0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800f8b4:	2601      	movs	r6, #1
 800f8b6:	6862      	ldr	r2, [r4, #4]
 800f8b8:	f083 0301 	eor.w	r3, r3, #1
 800f8bc:	702e      	strb	r6, [r5, #0]
 800f8be:	7253      	strb	r3, [r2, #9]
 800f8c0:	f001 ffc2 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 800f8c4:	6803      	ldr	r3, [r0, #0]
 800f8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c8:	4798      	blx	r3
 800f8ca:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f8ce:	b90b      	cbnz	r3, 800f8d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 800f8d0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800f8d4:	f001 ffb8 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 800f8d8:	6803      	ldr	r3, [r0, #0]
 800f8da:	695b      	ldr	r3, [r3, #20]
 800f8dc:	4798      	blx	r3
 800f8de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8e0:	6803      	ldr	r3, [r0, #0]
 800f8e2:	691b      	ldr	r3, [r3, #16]
 800f8e4:	4798      	blx	r3
 800f8e6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800f8ea:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800f8f6:	b10a      	cbz	r2, 800f8fc <_ZN8touchgfx3HAL4tickEv+0x8c>
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1eb      	bne.n	800f8d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 800f8fc:	4a3a      	ldr	r2, [pc, #232]	; (800f9e8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800f8fe:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800f902:	7813      	ldrb	r3, [r2, #0]
 800f904:	3301      	adds	r3, #1
 800f906:	b25b      	sxtb	r3, r3
 800f908:	4299      	cmp	r1, r3
 800f90a:	7013      	strb	r3, [r2, #0]
 800f90c:	dc10      	bgt.n	800f930 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f90e:	2300      	movs	r3, #0
 800f910:	68e0      	ldr	r0, [r4, #12]
 800f912:	a902      	add	r1, sp, #8
 800f914:	7013      	strb	r3, [r2, #0]
 800f916:	aa03      	add	r2, sp, #12
 800f918:	6803      	ldr	r3, [r0, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	4798      	blx	r3
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	2800      	cmp	r0, #0
 800f922:	d050      	beq.n	800f9c6 <_ZN8touchgfx3HAL4tickEv+0x156>
 800f924:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f928:	4620      	mov	r0, r4
 800f92a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f92e:	4798      	blx	r3
 800f930:	2300      	movs	r3, #0
 800f932:	6960      	ldr	r0, [r4, #20]
 800f934:	f88d 3007 	strb.w	r3, [sp, #7]
 800f938:	b158      	cbz	r0, 800f952 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f93a:	6803      	ldr	r3, [r0, #0]
 800f93c:	f10d 0107 	add.w	r1, sp, #7
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	4798      	blx	r3
 800f944:	b128      	cbz	r0, 800f952 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f948:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f94c:	6803      	ldr	r3, [r0, #0]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	4798      	blx	r3
 800f952:	f104 001c 	add.w	r0, r4, #28
 800f956:	f00c fbe7 	bl	801c128 <_ZN8touchgfx8Gestures4tickEv>
 800f95a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800f95e:	b30b      	cbz	r3, 800f9a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 800f960:	6920      	ldr	r0, [r4, #16]
 800f962:	6803      	ldr	r3, [r0, #0]
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	4798      	blx	r3
 800f968:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f96a:	4606      	mov	r6, r0
 800f96c:	b903      	cbnz	r3, 800f970 <_ZN8touchgfx3HAL4tickEv+0x100>
 800f96e:	6720      	str	r0, [r4, #112]	; 0x70
 800f970:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f972:	4a1e      	ldr	r2, [pc, #120]	; (800f9ec <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f974:	1af3      	subs	r3, r6, r3
 800f976:	4293      	cmp	r3, r2
 800f978:	d914      	bls.n	800f9a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 800f97a:	6920      	ldr	r0, [r4, #16]
 800f97c:	6803      	ldr	r3, [r0, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	4798      	blx	r3
 800f982:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f984:	2264      	movs	r2, #100	; 0x64
 800f986:	1af3      	subs	r3, r6, r3
 800f988:	fbb3 f3f2 	udiv	r3, r3, r2
 800f98c:	fbb0 f0f3 	udiv	r0, r0, r3
 800f990:	2800      	cmp	r0, #0
 800f992:	dc1d      	bgt.n	800f9d0 <_ZN8touchgfx3HAL4tickEv+0x160>
 800f994:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800f998:	6920      	ldr	r0, [r4, #16]
 800f99a:	2100      	movs	r1, #0
 800f99c:	6803      	ldr	r3, [r0, #0]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	4798      	blx	r3
 800f9a2:	6726      	str	r6, [r4, #112]	; 0x70
 800f9a4:	f001 ff50 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 800f9a8:	6803      	ldr	r3, [r0, #0]
 800f9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ac:	4798      	blx	r3
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f9b6:	4798      	blx	r3
 800f9b8:	2001      	movs	r0, #1
 800f9ba:	f7f0 fdc1 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	702b      	strb	r3, [r5, #0]
 800f9c2:	b004      	add	sp, #16
 800f9c4:	bd70      	pop	{r4, r5, r6, pc}
 800f9c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4798      	blx	r3
 800f9ce:	e7af      	b.n	800f930 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f9d0:	2863      	cmp	r0, #99	; 0x63
 800f9d2:	bfcb      	itete	gt
 800f9d4:	2300      	movgt	r3, #0
 800f9d6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800f9da:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800f9de:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800f9e2:	e7d9      	b.n	800f998 <_ZN8touchgfx3HAL4tickEv+0x128>
 800f9e4:	2400b984 	.word	0x2400b984
 800f9e8:	2400b985 	.word	0x2400b985
 800f9ec:	05f5e100 	.word	0x05f5e100

0800f9f0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f9f0:	f7f0 bf76 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f9f4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f9f4:	6581      	str	r1, [r0, #88]	; 0x58
 800f9f6:	301c      	adds	r0, #28
 800f9f8:	f00c bb94 	b.w	801c124 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f9fc <_ZN8touchgfx3HAL5touchEll>:
 800f9fc:	b530      	push	{r4, r5, lr}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	4604      	mov	r4, r0
 800fa02:	a804      	add	r0, sp, #16
 800fa04:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800fa08:	f001 fc9a 	bl	8011340 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800fa0c:	9b04      	ldr	r3, [sp, #16]
 800fa0e:	a906      	add	r1, sp, #24
 800fa10:	a803      	add	r0, sp, #12
 800fa12:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fa16:	9b05      	ldr	r3, [sp, #20]
 800fa18:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800fa1c:	f001 fce2 	bl	80113e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800fa20:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800fa24:	f104 001c 	add.w	r0, r4, #28
 800fa28:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800fa2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fa30:	b189      	cbz	r1, 800fa56 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800fa32:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	4613      	mov	r3, r2
 800fa3a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800fa3e:	462a      	mov	r2, r5
 800fa40:	f00c fb80 	bl	801c144 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800fa44:	b128      	cbz	r0, 800fa52 <_ZN8touchgfx3HAL5touchEll+0x56>
 800fa46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800fa4a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800fa4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fa50:	6623      	str	r3, [r4, #96]	; 0x60
 800fa52:	b007      	add	sp, #28
 800fa54:	bd30      	pop	{r4, r5, pc}
 800fa56:	f00c fbb5 	bl	801c1c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fa60:	e7f1      	b.n	800fa46 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800fa62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800fa62:	b510      	push	{r4, lr}
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d046      	beq.n	800faf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fa68:	ea81 0002 	eor.w	r0, r1, r2
 800fa6c:	07c4      	lsls	r4, r0, #31
 800fa6e:	d508      	bpl.n	800fa82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800fa70:	440b      	add	r3, r1
 800fa72:	3a01      	subs	r2, #1
 800fa74:	428b      	cmp	r3, r1
 800fa76:	d93e      	bls.n	800faf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fa78:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fa7c:	f801 0b01 	strb.w	r0, [r1], #1
 800fa80:	e7f8      	b.n	800fa74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800fa82:	07d0      	lsls	r0, r2, #31
 800fa84:	bf42      	ittt	mi
 800fa86:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800fa8a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800fa8e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d911      	bls.n	800faba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fa96:	ea81 0402 	eor.w	r4, r1, r2
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	07a4      	lsls	r4, r4, #30
 800fa9e:	d022      	beq.n	800fae6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800faa0:	f023 0401 	bic.w	r4, r3, #1
 800faa4:	440c      	add	r4, r1
 800faa6:	428c      	cmp	r4, r1
 800faa8:	4602      	mov	r2, r0
 800faaa:	d904      	bls.n	800fab6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800faac:	8812      	ldrh	r2, [r2, #0]
 800faae:	3002      	adds	r0, #2
 800fab0:	f821 2b02 	strh.w	r2, [r1], #2
 800fab4:	e7f7      	b.n	800faa6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	f023 0003 	bic.w	r0, r3, #3
 800fabe:	4408      	add	r0, r1
 800fac0:	4288      	cmp	r0, r1
 800fac2:	4614      	mov	r4, r2
 800fac4:	d904      	bls.n	800fad0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800fac6:	6824      	ldr	r4, [r4, #0]
 800fac8:	3204      	adds	r2, #4
 800faca:	f841 4b04 	str.w	r4, [r1], #4
 800face:	e7f7      	b.n	800fac0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800fad0:	f003 0303 	and.w	r3, r3, #3
 800fad4:	3a01      	subs	r2, #1
 800fad6:	440b      	add	r3, r1
 800fad8:	428b      	cmp	r3, r1
 800fada:	d90c      	bls.n	800faf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fadc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fae0:	f801 0b01 	strb.w	r0, [r1], #1
 800fae4:	e7f8      	b.n	800fad8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800fae6:	0790      	lsls	r0, r2, #30
 800fae8:	d0e7      	beq.n	800faba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800faea:	f832 0b02 	ldrh.w	r0, [r2], #2
 800faee:	3b02      	subs	r3, #2
 800faf0:	f821 0b02 	strh.w	r0, [r1], #2
 800faf4:	e7e1      	b.n	800faba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800faf6:	2001      	movs	r0, #1
 800faf8:	bd10      	pop	{r4, pc}

0800fafa <_ZN8touchgfx3HAL7noTouchEv>:
 800fafa:	b510      	push	{r4, lr}
 800fafc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800fb00:	4604      	mov	r4, r0
 800fb02:	b153      	cbz	r3, 800fb1a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800fb04:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800fb08:	2101      	movs	r1, #1
 800fb0a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800fb0e:	301c      	adds	r0, #28
 800fb10:	f00c fb58 	bl	801c1c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fb14:	2300      	movs	r3, #0
 800fb16:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800fb1a:	bd10      	pop	{r4, pc}

0800fb1c <_ZN8touchgfx8Drawable5setXYEss>:
 800fb1c:	b570      	push	{r4, r5, r6, lr}
 800fb1e:	6803      	ldr	r3, [r0, #0]
 800fb20:	4604      	mov	r4, r0
 800fb22:	4615      	mov	r5, r2
 800fb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb26:	4798      	blx	r3
 800fb28:	6823      	ldr	r3, [r4, #0]
 800fb2a:	4629      	mov	r1, r5
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb34:	4718      	bx	r3
	...

0800fb38 <_ZN8touchgfx3HAL3lcdEv>:
 800fb38:	4b04      	ldr	r3, [pc, #16]	; (800fb4c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fb40:	b10a      	cbz	r2, 800fb46 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800fb42:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fb44:	b900      	cbnz	r0, 800fb48 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800fb46:	6898      	ldr	r0, [r3, #8]
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	2400b980 	.word	0x2400b980

0800fb50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800fb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb54:	b085      	sub	sp, #20
 800fb56:	4604      	mov	r4, r0
 800fb58:	2000      	movs	r0, #0
 800fb5a:	4699      	mov	r9, r3
 800fb5c:	ad04      	add	r5, sp, #16
 800fb5e:	460f      	mov	r7, r1
 800fb60:	4690      	mov	r8, r2
 800fb62:	f845 0d04 	str.w	r0, [r5, #-4]!
 800fb66:	69a0      	ldr	r0, [r4, #24]
 800fb68:	6806      	ldr	r6, [r0, #0]
 800fb6a:	9501      	str	r5, [sp, #4]
 800fb6c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800fb70:	9500      	str	r5, [sp, #0]
 800fb72:	6835      	ldr	r5, [r6, #0]
 800fb74:	47a8      	blx	r5
 800fb76:	4d10      	ldr	r5, [pc, #64]	; (800fbb8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800fb78:	4606      	mov	r6, r0
 800fb7a:	f8a5 9000 	strh.w	r9, [r5]
 800fb7e:	f7ff ffdb 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 800fb82:	6803      	ldr	r3, [r0, #0]
 800fb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb86:	4798      	blx	r3
 800fb88:	b128      	cbz	r0, 800fb96 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800fb8a:	2801      	cmp	r0, #1
 800fb8c:	d00b      	beq.n	800fba6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800fb8e:	4630      	mov	r0, r6
 800fb90:	b005      	add	sp, #20
 800fb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb96:	882b      	ldrh	r3, [r5, #0]
 800fb98:	fb08 7203 	mla	r2, r8, r3, r7
 800fb9c:	9b03      	ldr	r3, [sp, #12]
 800fb9e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800fba2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fba4:	e7f3      	b.n	800fb8e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fba6:	882a      	ldrh	r2, [r5, #0]
 800fba8:	9b03      	ldr	r3, [sp, #12]
 800fbaa:	fb08 7202 	mla	r2, r8, r2, r7
 800fbae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fbb2:	1a9a      	subs	r2, r3, r2
 800fbb4:	63e2      	str	r2, [r4, #60]	; 0x3c
 800fbb6:	e7ea      	b.n	800fb8e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fbb8:	2400b97a 	.word	0x2400b97a

0800fbbc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800fbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbbe:	b08b      	sub	sp, #44	; 0x2c
 800fbc0:	4617      	mov	r7, r2
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	460e      	mov	r6, r1
 800fbc6:	461d      	mov	r5, r3
 800fbc8:	f7ff ffb6 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 800fbcc:	6803      	ldr	r3, [r0, #0]
 800fbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd0:	4798      	blx	r3
 800fbd2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800fbd6:	9007      	str	r0, [sp, #28]
 800fbd8:	4631      	mov	r1, r6
 800fbda:	6822      	ldr	r2, [r4, #0]
 800fbdc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fbe0:	4b0c      	ldr	r3, [pc, #48]	; (800fc14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	9306      	str	r3, [sp, #24]
 800fbe8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800fbec:	9305      	str	r3, [sp, #20]
 800fbee:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800fbf2:	9304      	str	r3, [sp, #16]
 800fbf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fbf8:	9303      	str	r3, [sp, #12]
 800fbfa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fbfe:	9302      	str	r3, [sp, #8]
 800fc00:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fc04:	e9cd 5300 	strd	r5, r3, [sp]
 800fc08:	463b      	mov	r3, r7
 800fc0a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	47a8      	blx	r5
 800fc10:	b00b      	add	sp, #44	; 0x2c
 800fc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc14:	2400b97a 	.word	0x2400b97a

0800fc18 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800fc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc1c:	4698      	mov	r8, r3
 800fc1e:	6803      	ldr	r3, [r0, #0]
 800fc20:	b08b      	sub	sp, #44	; 0x2c
 800fc22:	4617      	mov	r7, r2
 800fc24:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800fc26:	460e      	mov	r6, r1
 800fc28:	4b13      	ldr	r3, [pc, #76]	; (800fc78 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	f8b3 9000 	ldrh.w	r9, [r3]
 800fc30:	f7ff ff82 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 800fc34:	6803      	ldr	r3, [r0, #0]
 800fc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc38:	4798      	blx	r3
 800fc3a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800fc3e:	2200      	movs	r2, #0
 800fc40:	4631      	mov	r1, r6
 800fc42:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fc46:	2302      	movs	r3, #2
 800fc48:	4620      	mov	r0, r4
 800fc4a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800fc4e:	2301      	movs	r3, #1
 800fc50:	9305      	str	r3, [sp, #20]
 800fc52:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800fc56:	9304      	str	r3, [sp, #16]
 800fc58:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800fc5c:	9303      	str	r3, [sp, #12]
 800fc5e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fc62:	9302      	str	r3, [sp, #8]
 800fc64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800fc68:	e9cd 8300 	strd	r8, r3, [sp]
 800fc6c:	463b      	mov	r3, r7
 800fc6e:	47a8      	blx	r5
 800fc70:	b00b      	add	sp, #44	; 0x2c
 800fc72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc76:	bf00      	nop
 800fc78:	2400b97a 	.word	0x2400b97a

0800fc7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800fc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4698      	mov	r8, r3
 800fc82:	6803      	ldr	r3, [r0, #0]
 800fc84:	b087      	sub	sp, #28
 800fc86:	460e      	mov	r6, r1
 800fc88:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800fc8a:	4617      	mov	r7, r2
 800fc8c:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800fc8e:	4604      	mov	r4, r0
 800fc90:	f8b3 9000 	ldrh.w	r9, [r3]
 800fc94:	f7ff ff50 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 800fc98:	6803      	ldr	r3, [r0, #0]
 800fc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc9c:	4798      	blx	r3
 800fc9e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800fca2:	463a      	mov	r2, r7
 800fca4:	4631      	mov	r1, r6
 800fca6:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcaa:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800fcae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	9302      	str	r3, [sp, #8]
 800fcb6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4643      	mov	r3, r8
 800fcc4:	47a8      	blx	r5
 800fcc6:	b007      	add	sp, #28
 800fcc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fccc:	2400b97a 	.word	0x2400b97a

0800fcd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	b08f      	sub	sp, #60	; 0x3c
 800fcd8:	4610      	mov	r0, r2
 800fcda:	460d      	mov	r5, r1
 800fcdc:	4691      	mov	r9, r2
 800fcde:	461e      	mov	r6, r3
 800fce0:	f004 f8b8 	bl	8013e54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f000 809d 	beq.w	800fe24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	4620      	mov	r0, r4
 800fcee:	f8df b198 	ldr.w	fp, [pc, #408]	; 800fe88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800fcf2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf8:	4798      	blx	r3
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800fe8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800fd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd04:	4798      	blx	r3
 800fd06:	f8bb 3000 	ldrh.w	r3, [fp]
 800fd0a:	4f5c      	ldr	r7, [pc, #368]	; (800fe7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	f8ba 3000 	ldrh.w	r3, [sl]
 800fd12:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800fd16:	4640      	mov	r0, r8
 800fd18:	9302      	str	r3, [sp, #8]
 800fd1a:	883b      	ldrh	r3, [r7, #0]
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	4b58      	ldr	r3, [pc, #352]	; (800fe80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fd20:	881a      	ldrh	r2, [r3, #0]
 800fd22:	9305      	str	r3, [sp, #20]
 800fd24:	9204      	str	r2, [sp, #16]
 800fd26:	f004 f9d9 	bl	80140dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fd2a:	8038      	strh	r0, [r7, #0]
 800fd2c:	4640      	mov	r0, r8
 800fd2e:	f004 fa09 	bl	8014144 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd32:	9b05      	ldr	r3, [sp, #20]
 800fd34:	b280      	uxth	r0, r0
 800fd36:	8018      	strh	r0, [r3, #0]
 800fd38:	4b52      	ldr	r3, [pc, #328]	; (800fe84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d174      	bne.n	800fe2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800fd40:	883b      	ldrh	r3, [r7, #0]
 800fd42:	f8aa 0000 	strh.w	r0, [sl]
 800fd46:	f8ab 3000 	strh.w	r3, [fp]
 800fd4a:	4648      	mov	r0, r9
 800fd4c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800fd50:	f004 f880 	bl	8013e54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fd54:	2200      	movs	r2, #0
 800fd56:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800fd62:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800fd66:	f7ff fed9 	bl	800fb1c <_ZN8touchgfx8Drawable5setXYEss>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800fd70:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800fd74:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	dd5c      	ble.n	800fe36 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fd7c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dd58      	ble.n	800fe36 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fd84:	462a      	mov	r2, r5
 800fd86:	ab0a      	add	r3, sp, #40	; 0x28
 800fd88:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fd8c:	6851      	ldr	r1, [r2, #4]
 800fd8e:	c303      	stmia	r3!, {r0, r1}
 800fd90:	4631      	mov	r1, r6
 800fd92:	a80a      	add	r0, sp, #40	; 0x28
 800fd94:	f7ff fbe4 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 800fd98:	4b38      	ldr	r3, [pc, #224]	; (800fe7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fda0:	4b37      	ldr	r3, [pc, #220]	; (800fe80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fda2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800fda6:	aa0a      	add	r2, sp, #40	; 0x28
 800fda8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fdac:	910c      	str	r1, [sp, #48]	; 0x30
 800fdae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800fdb2:	ab08      	add	r3, sp, #32
 800fdb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdb8:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	a90c      	add	r1, sp, #48	; 0x30
 800fdc0:	f7ff fbce 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 800fdc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d13c      	bne.n	800fe44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800fdd0:	2600      	movs	r6, #0
 800fdd2:	696b      	ldr	r3, [r5, #20]
 800fdd4:	a908      	add	r1, sp, #32
 800fdd6:	682a      	ldr	r2, [r5, #0]
 800fdd8:	4628      	mov	r0, r5
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	616e      	str	r6, [r5, #20]
 800fdde:	6892      	ldr	r2, [r2, #8]
 800fde0:	4790      	blx	r2
 800fde2:	9b05      	ldr	r3, [sp, #20]
 800fde4:	4652      	mov	r2, sl
 800fde6:	4649      	mov	r1, r9
 800fde8:	616b      	str	r3, [r5, #20]
 800fdea:	4628      	mov	r0, r5
 800fdec:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800fdf0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800fdf4:	f7ff fe92 	bl	800fb1c <_ZN8touchgfx8Drawable5setXYEss>
 800fdf8:	9a01      	ldr	r2, [sp, #4]
 800fdfa:	4b23      	ldr	r3, [pc, #140]	; (800fe88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	801a      	strh	r2, [r3, #0]
 800fe00:	9a02      	ldr	r2, [sp, #8]
 800fe02:	4b22      	ldr	r3, [pc, #136]	; (800fe8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800fe04:	801a      	strh	r2, [r3, #0]
 800fe06:	9a03      	ldr	r2, [sp, #12]
 800fe08:	4b1c      	ldr	r3, [pc, #112]	; (800fe7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fe0a:	801a      	strh	r2, [r3, #0]
 800fe0c:	4b1c      	ldr	r3, [pc, #112]	; (800fe80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fe0e:	9a04      	ldr	r2, [sp, #16]
 800fe10:	801a      	strh	r2, [r3, #0]
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe1a:	4798      	blx	r3
 800fe1c:	6823      	ldr	r3, [r4, #0]
 800fe1e:	4620      	mov	r0, r4
 800fe20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe22:	4798      	blx	r3
 800fe24:	b00f      	add	sp, #60	; 0x3c
 800fe26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2a:	883b      	ldrh	r3, [r7, #0]
 800fe2c:	f8ab 0000 	strh.w	r0, [fp]
 800fe30:	f8aa 3000 	strh.w	r3, [sl]
 800fe34:	e789      	b.n	800fd4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800fe36:	462a      	mov	r2, r5
 800fe38:	ab0a      	add	r3, sp, #40	; 0x28
 800fe3a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fe3e:	6851      	ldr	r1, [r2, #4]
 800fe40:	c303      	stmia	r3!, {r0, r1}
 800fe42:	e7a9      	b.n	800fd98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800fe44:	a807      	add	r0, sp, #28
 800fe46:	f004 fa81 	bl	801434c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800fe4e:	6803      	ldr	r3, [r0, #0]
 800fe50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe52:	4798      	blx	r3
 800fe54:	4286      	cmp	r6, r0
 800fe56:	d1b8      	bne.n	800fdca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800fe58:	f7ff fe6e 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 800fe5c:	6803      	ldr	r3, [r0, #0]
 800fe5e:	4606      	mov	r6, r0
 800fe60:	a807      	add	r0, sp, #28
 800fe62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe64:	9305      	str	r3, [sp, #20]
 800fe66:	f004 fa71 	bl	801434c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fe6a:	9b05      	ldr	r3, [sp, #20]
 800fe6c:	4601      	mov	r1, r0
 800fe6e:	4630      	mov	r0, r6
 800fe70:	4798      	blx	r3
 800fe72:	f080 0001 	eor.w	r0, r0, #1
 800fe76:	b2c0      	uxtb	r0, r0
 800fe78:	e7a8      	b.n	800fdcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800fe7a:	bf00      	nop
 800fe7c:	2400b974 	.word	0x2400b974
 800fe80:	2400b976 	.word	0x2400b976
 800fe84:	2400b978 	.word	0x2400b978
 800fe88:	2400b97a 	.word	0x2400b97a
 800fe8c:	2400b97c 	.word	0x2400b97c

0800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800fe90:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800fe92:	b510      	push	{r4, lr}
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	4604      	mov	r4, r0
 800fe98:	b13b      	cbz	r3, 800feaa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fe9a:	6803      	ldr	r3, [r0, #0]
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9e:	4798      	blx	r3
 800fea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fea2:	4283      	cmp	r3, r0
 800fea4:	d101      	bne.n	800feaa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fea6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800feac:	e7fc      	b.n	800fea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800feae:	bf00      	nop
 800feb0:	2400b97e 	.word	0x2400b97e

0800feb4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800feb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb8:	461d      	mov	r5, r3
 800feba:	b08a      	sub	sp, #40	; 0x28
 800febc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fec0:	4690      	mov	r8, r2
 800fec2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800fec6:	2400      	movs	r4, #0
 800fec8:	4607      	mov	r7, r0
 800feca:	fb06 8505 	mla	r5, r6, r5, r8
 800fece:	9404      	str	r4, [sp, #16]
 800fed0:	f88d 4020 	strb.w	r4, [sp, #32]
 800fed4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fed8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fedc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fee0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fee4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fee8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800feec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fef0:	f7ff ffce 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fef4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f8ad 601e 	strh.w	r6, [sp, #30]
 800fefe:	a901      	add	r1, sp, #4
 800ff00:	9505      	str	r5, [sp, #20]
 800ff02:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ff06:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800ff0a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ff0e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ff12:	6803      	ldr	r3, [r0, #0]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	4798      	blx	r3
 800ff18:	b00a      	add	sp, #40	; 0x28
 800ff1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff1e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800ff1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff22:	b08b      	sub	sp, #44	; 0x2c
 800ff24:	2400      	movs	r4, #0
 800ff26:	4691      	mov	r9, r2
 800ff28:	461d      	mov	r5, r3
 800ff2a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800ff2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff32:	4688      	mov	r8, r1
 800ff34:	4607      	mov	r7, r0
 800ff36:	9404      	str	r4, [sp, #16]
 800ff38:	fb06 9505 	mla	r5, r6, r5, r9
 800ff3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff40:	f7ff ffa6 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ff44:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ff48:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff52:	a901      	add	r1, sp, #4
 800ff54:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ff58:	9505      	str	r5, [sp, #20]
 800ff5a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ff5e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ff62:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ff66:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff6a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ff6e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ff72:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ff76:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ff7a:	6803      	ldr	r3, [r0, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	4798      	blx	r3
 800ff80:	b00b      	add	sp, #44	; 0x2c
 800ff82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ff88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	b08a      	sub	sp, #40	; 0x28
 800ff8e:	4698      	mov	r8, r3
 800ff90:	2300      	movs	r3, #0
 800ff92:	4606      	mov	r6, r0
 800ff94:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800ff98:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800ff9c:	2d0b      	cmp	r5, #11
 800ff9e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800ffa2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800ffa6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800ffaa:	9304      	str	r3, [sp, #16]
 800ffac:	d137      	bne.n	801001e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800ffae:	2380      	movs	r3, #128	; 0x80
 800ffb0:	f88d 0020 	strb.w	r0, [sp, #32]
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	9203      	str	r2, [sp, #12]
 800ffb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ffbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ffc0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ffc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ffc8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ffcc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ffd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ffd4:	f7ff ff5c 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ffd8:	2c0b      	cmp	r4, #11
 800ffda:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ffde:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ffe2:	bf94      	ite	ls
 800ffe4:	4b19      	ldrls	r3, [pc, #100]	; (801004c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ffe6:	2100      	movhi	r1, #0
 800ffe8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ffec:	bf98      	it	ls
 800ffee:	5d19      	ldrbls	r1, [r3, r4]
 800fff0:	fb02 8307 	mla	r3, r2, r7, r8
 800fff4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800fff8:	10c9      	asrs	r1, r1, #3
 800fffa:	fb01 0003 	mla	r0, r1, r3, r0
 800fffe:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010002:	a901      	add	r1, sp, #4
 8010004:	9005      	str	r0, [sp, #20]
 8010006:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801000a:	2300      	movs	r3, #0
 801000c:	6870      	ldr	r0, [r6, #4]
 801000e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010012:	6803      	ldr	r3, [r0, #0]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	4798      	blx	r3
 8010018:	b00a      	add	sp, #40	; 0x28
 801001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001e:	2d02      	cmp	r5, #2
 8010020:	d109      	bne.n	8010036 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010022:	28ff      	cmp	r0, #255	; 0xff
 8010024:	d105      	bne.n	8010032 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010026:	f1bc 0f00 	cmp.w	ip, #0
 801002a:	bf14      	ite	ne
 801002c:	2340      	movne	r3, #64	; 0x40
 801002e:	2320      	moveq	r3, #32
 8010030:	e7be      	b.n	800ffb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010032:	2340      	movs	r3, #64	; 0x40
 8010034:	e7bc      	b.n	800ffb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010036:	28ff      	cmp	r0, #255	; 0xff
 8010038:	d105      	bne.n	8010046 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801003a:	f1bc 0f00 	cmp.w	ip, #0
 801003e:	bf14      	ite	ne
 8010040:	2304      	movne	r3, #4
 8010042:	2301      	moveq	r3, #1
 8010044:	e7b4      	b.n	800ffb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010046:	2304      	movs	r3, #4
 8010048:	e7b2      	b.n	800ffb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801004a:	bf00      	nop
 801004c:	0801ef80 	.word	0x0801ef80

08010050 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	b08b      	sub	sp, #44	; 0x2c
 8010056:	461d      	mov	r5, r3
 8010058:	2400      	movs	r4, #0
 801005a:	4688      	mov	r8, r1
 801005c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8010060:	4693      	mov	fp, r2
 8010062:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8010066:	4607      	mov	r7, r0
 8010068:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801006c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8010070:	9404      	str	r4, [sp, #16]
 8010072:	bf14      	ite	ne
 8010074:	2308      	movne	r3, #8
 8010076:	2302      	moveq	r3, #2
 8010078:	fb05 b50a 	mla	r5, r5, sl, fp
 801007c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010080:	f7ff ff06 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010084:	2e0b      	cmp	r6, #11
 8010086:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801008a:	a901      	add	r1, sp, #4
 801008c:	bf98      	it	ls
 801008e:	4b13      	ldrls	r3, [pc, #76]	; (80100dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010090:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010094:	bf98      	it	ls
 8010096:	5d9c      	ldrbls	r4, [r3, r6]
 8010098:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801009c:	10e4      	asrs	r4, r4, #3
 801009e:	f8cd 8010 	str.w	r8, [sp, #16]
 80100a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80100a6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80100aa:	fb04 0405 	mla	r4, r4, r5, r0
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80100b4:	2300      	movs	r3, #0
 80100b6:	9405      	str	r4, [sp, #20]
 80100b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80100bc:	f88d 9020 	strb.w	r9, [sp, #32]
 80100c0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80100c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80100c8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80100cc:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80100d0:	6803      	ldr	r3, [r0, #0]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	4798      	blx	r3
 80100d6:	b00b      	add	sp, #44	; 0x2c
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	0801ef80 	.word	0x0801ef80

080100e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80100e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e4:	461e      	mov	r6, r3
 80100e6:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80100e8:	460f      	mov	r7, r1
 80100ea:	4690      	mov	r8, r2
 80100ec:	881d      	ldrh	r5, [r3, #0]
 80100ee:	f7ff fd23 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 80100f2:	6803      	ldr	r3, [r0, #0]
 80100f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f6:	4798      	blx	r3
 80100f8:	280b      	cmp	r0, #11
 80100fa:	bf96      	itet	ls
 80100fc:	4b05      	ldrls	r3, [pc, #20]	; (8010114 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80100fe:	2400      	movhi	r4, #0
 8010100:	5c1c      	ldrbls	r4, [r3, r0]
 8010102:	fb08 7005 	mla	r0, r8, r5, r7
 8010106:	10e4      	asrs	r4, r4, #3
 8010108:	fb04 6000 	mla	r0, r4, r0, r6
 801010c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010110:	2400b97a 	.word	0x2400b97a
 8010114:	0801ef80 	.word	0x0801ef80

08010118 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801011a:	b08b      	sub	sp, #44	; 0x2c
 801011c:	461f      	mov	r7, r3
 801011e:	4604      	mov	r4, r0
 8010120:	4616      	mov	r6, r2
 8010122:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010126:	2500      	movs	r5, #0
 8010128:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801012c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010130:	9504      	str	r5, [sp, #16]
 8010132:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010136:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801013a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801013e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010142:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010146:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801014a:	f88d 3020 	strb.w	r3, [sp, #32]
 801014e:	f7ff fe9f 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010152:	463a      	mov	r2, r7
 8010154:	4631      	mov	r1, r6
 8010156:	4603      	mov	r3, r0
 8010158:	4620      	mov	r0, r4
 801015a:	f7ff ffc1 	bl	80100e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801015e:	4b0e      	ldr	r3, [pc, #56]	; (8010198 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010160:	9005      	str	r0, [sp, #20]
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010168:	f7ff fce6 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 801016c:	6803      	ldr	r3, [r0, #0]
 801016e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010170:	4798      	blx	r3
 8010172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010174:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8010178:	a901      	add	r1, sp, #4
 801017a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801017e:	9304      	str	r3, [sp, #16]
 8010180:	6860      	ldr	r0, [r4, #4]
 8010182:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010186:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801018a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801018e:	6803      	ldr	r3, [r0, #0]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	4798      	blx	r3
 8010194:	b00b      	add	sp, #44	; 0x2c
 8010196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010198:	2400b97a 	.word	0x2400b97a

0801019c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801019c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019e:	b08d      	sub	sp, #52	; 0x34
 80101a0:	2501      	movs	r5, #1
 80101a2:	4604      	mov	r4, r0
 80101a4:	466b      	mov	r3, sp
 80101a6:	9503      	str	r5, [sp, #12]
 80101a8:	e883 0006 	stmia.w	r3, {r1, r2}
 80101ac:	2300      	movs	r3, #0
 80101ae:	f8bd 6000 	ldrh.w	r6, [sp]
 80101b2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80101b6:	9306      	str	r3, [sp, #24]
 80101b8:	6803      	ldr	r3, [r0, #0]
 80101ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101bc:	4798      	blx	r3
 80101be:	463a      	mov	r2, r7
 80101c0:	4631      	mov	r1, r6
 80101c2:	4603      	mov	r3, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7ff ff8b 	bl	80100e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80101ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101cc:	9004      	str	r0, [sp, #16]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80101d4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80101d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80101dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80101e0:	4b0e      	ldr	r3, [pc, #56]	; (801021c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80101e8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80101ec:	f7ff fca4 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 80101f0:	6803      	ldr	r3, [r0, #0]
 80101f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f4:	4798      	blx	r3
 80101f6:	23ff      	movs	r3, #255	; 0xff
 80101f8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80101fc:	a903      	add	r1, sp, #12
 80101fe:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010202:	6860      	ldr	r0, [r4, #4]
 8010204:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010208:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801020c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010210:	6803      	ldr	r3, [r0, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	4798      	blx	r3
 8010216:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010218:	b00d      	add	sp, #52	; 0x34
 801021a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801021c:	2400b97a 	.word	0x2400b97a

08010220 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	b08c      	sub	sp, #48	; 0x30
 8010226:	461e      	mov	r6, r3
 8010228:	2300      	movs	r3, #0
 801022a:	4604      	mov	r4, r0
 801022c:	466d      	mov	r5, sp
 801022e:	9306      	str	r3, [sp, #24]
 8010230:	6803      	ldr	r3, [r0, #0]
 8010232:	e885 0006 	stmia.w	r5, {r1, r2}
 8010236:	2501      	movs	r5, #1
 8010238:	f8bd 7000 	ldrh.w	r7, [sp]
 801023c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010240:	9503      	str	r5, [sp, #12]
 8010242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010244:	4798      	blx	r3
 8010246:	4642      	mov	r2, r8
 8010248:	4639      	mov	r1, r7
 801024a:	4603      	mov	r3, r0
 801024c:	4620      	mov	r0, r4
 801024e:	f7ff ff47 	bl	80100e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010252:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010256:	9004      	str	r0, [sp, #16]
 8010258:	f8ad 3020 	strh.w	r3, [sp, #32]
 801025c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010260:	9607      	str	r6, [sp, #28]
 8010262:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801026e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010270:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010274:	f7ff fc60 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 8010278:	6803      	ldr	r3, [r0, #0]
 801027a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801027c:	4798      	blx	r3
 801027e:	23ff      	movs	r3, #255	; 0xff
 8010280:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010284:	a903      	add	r1, sp, #12
 8010286:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801028a:	6860      	ldr	r0, [r4, #4]
 801028c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010290:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010294:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010298:	6803      	ldr	r3, [r0, #0]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	4798      	blx	r3
 801029e:	4630      	mov	r0, r6
 80102a0:	b00c      	add	sp, #48	; 0x30
 80102a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a6:	bf00      	nop
 80102a8:	2400b97a 	.word	0x2400b97a

080102ac <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ae:	b085      	sub	sp, #20
 80102b0:	4605      	mov	r5, r0
 80102b2:	ac02      	add	r4, sp, #8
 80102b4:	e884 0006 	stmia.w	r4, {r1, r2}
 80102b8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80102bc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80102c0:	f7ff fde6 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80102c4:	4631      	mov	r1, r6
 80102c6:	4603      	mov	r3, r0
 80102c8:	463a      	mov	r2, r7
 80102ca:	4628      	mov	r0, r5
 80102cc:	f7ff ff08 	bl	80100e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80102d0:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80102d2:	682b      	ldr	r3, [r5, #0]
 80102d4:	8812      	ldrh	r2, [r2, #0]
 80102d6:	9200      	str	r2, [sp, #0]
 80102d8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80102da:	4603      	mov	r3, r0
 80102dc:	4628      	mov	r0, r5
 80102de:	e894 0006 	ldmia.w	r4, {r1, r2}
 80102e2:	47b0      	blx	r6
 80102e4:	b005      	add	sp, #20
 80102e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e8:	2400b97a 	.word	0x2400b97a

080102ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80102ec:	b570      	push	{r4, r5, r6, lr}
 80102ee:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80102f2:	4604      	mov	r4, r0
 80102f4:	b19b      	cbz	r3, 801031e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80102f6:	2002      	movs	r0, #2
 80102f8:	f7f0 f962 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80102fc:	2300      	movs	r3, #0
 80102fe:	4620      	mov	r0, r4
 8010300:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010304:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801030e:	f7ff fdbf 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010312:	4601      	mov	r1, r0
 8010314:	4620      	mov	r0, r4
 8010316:	462b      	mov	r3, r5
 8010318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801031c:	4718      	bx	r3
 801031e:	bd70      	pop	{r4, r5, r6, pc}

08010320 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8010326:	4604      	mov	r4, r0
 8010328:	460d      	mov	r5, r1
 801032a:	428b      	cmp	r3, r1
 801032c:	d006      	beq.n	801033c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801032e:	6803      	ldr	r3, [r0, #0]
 8010330:	b929      	cbnz	r1, 801033e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010332:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010336:	4798      	blx	r3
 8010338:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801033c:	bd38      	pop	{r3, r4, r5, pc}
 801033e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010342:	e7f8      	b.n	8010336 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010344 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010344:	4b0d      	ldr	r3, [pc, #52]	; (801037c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010346:	b510      	push	{r4, lr}
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	4604      	mov	r4, r0
 801034c:	b95b      	cbnz	r3, 8010366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801034e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010352:	2b02      	cmp	r3, #2
 8010354:	d007      	beq.n	8010366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010356:	6840      	ldr	r0, [r0, #4]
 8010358:	f000 f916 	bl	8010588 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801035c:	b118      	cbz	r0, 8010366 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801035e:	6862      	ldr	r2, [r4, #4]
 8010360:	7a53      	ldrb	r3, [r2, #9]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0fc      	beq.n	8010360 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010366:	f7f0 fab1 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801036a:	4620      	mov	r0, r4
 801036c:	2100      	movs	r1, #0
 801036e:	f7ff ffd7 	bl	8010320 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff fd8c 	bl	800fe90 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010378:	bd10      	pop	{r4, pc}
 801037a:	bf00      	nop
 801037c:	2400b97e 	.word	0x2400b97e

08010380 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8010380:	4770      	bx	lr

08010382 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8010382:	2000      	movs	r0, #0
 8010384:	4770      	bx	lr

08010386 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010386:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801038a:	1a13      	subs	r3, r2, r0
 801038c:	4258      	negs	r0, r3
 801038e:	4158      	adcs	r0, r3
 8010390:	4770      	bx	lr

08010392 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010392:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010396:	1a9b      	subs	r3, r3, r2
 8010398:	2b00      	cmp	r3, #0
 801039a:	bfdc      	itt	le
 801039c:	6882      	ldrle	r2, [r0, #8]
 801039e:	189b      	addle	r3, r3, r2
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	bfcc      	ite	gt
 80103a4:	2000      	movgt	r0, #0
 80103a6:	2001      	movle	r0, #1
 80103a8:	4770      	bx	lr

080103aa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80103aa:	6902      	ldr	r2, [r0, #16]
 80103ac:	6843      	ldr	r3, [r0, #4]
 80103ae:	2024      	movs	r0, #36	; 0x24
 80103b0:	fb00 3002 	mla	r0, r0, r2, r3
 80103b4:	4770      	bx	lr

080103b6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80103b6:	6803      	ldr	r3, [r0, #0]
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	4718      	bx	r3

080103bc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80103bc:	2301      	movs	r3, #1
 80103be:	b570      	push	{r4, r5, r6, lr}
 80103c0:	7203      	strb	r3, [r0, #8]
 80103c2:	4604      	mov	r4, r0
 80103c4:	6840      	ldr	r0, [r0, #4]
 80103c6:	6803      	ldr	r3, [r0, #0]
 80103c8:	699b      	ldr	r3, [r3, #24]
 80103ca:	4798      	blx	r3
 80103cc:	6803      	ldr	r3, [r0, #0]
 80103ce:	4605      	mov	r5, r0
 80103d0:	2b40      	cmp	r3, #64	; 0x40
 80103d2:	d00c      	beq.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80103d4:	d810      	bhi.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80103d6:	2b04      	cmp	r3, #4
 80103d8:	d01d      	beq.n	8010416 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80103da:	d804      	bhi.n	80103e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d006      	beq.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80103e0:	2b02      	cmp	r3, #2
 80103e2:	d02c      	beq.n	801043e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80103e4:	bd70      	pop	{r4, r5, r6, pc}
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	d01d      	beq.n	8010426 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80103ea:	2b20      	cmp	r3, #32
 80103ec:	d1fa      	bne.n	80103e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80103ee:	6823      	ldr	r3, [r4, #0]
 80103f0:	4620      	mov	r0, r4
 80103f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103f4:	4798      	blx	r3
 80103f6:	e013      	b.n	8010420 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80103f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103fc:	d0f7      	beq.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80103fe:	d804      	bhi.n	801040a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010400:	2b80      	cmp	r3, #128	; 0x80
 8010402:	d0f4      	beq.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010408:	e7f0      	b.n	80103ec <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801040a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801040e:	d0ee      	beq.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010414:	e7e5      	b.n	80103e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	7f01      	ldrb	r1, [r0, #28]
 801041a:	4620      	mov	r0, r4
 801041c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801041e:	4798      	blx	r3
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010424:	e006      	b.n	8010434 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	7f01      	ldrb	r1, [r0, #28]
 801042a:	4620      	mov	r0, r4
 801042c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801042e:	4798      	blx	r3
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010434:	4629      	mov	r1, r5
 8010436:	4620      	mov	r0, r4
 8010438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801043c:	4718      	bx	r3
 801043e:	6823      	ldr	r3, [r4, #0]
 8010440:	4620      	mov	r0, r4
 8010442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010444:	4798      	blx	r3
 8010446:	e7f3      	b.n	8010430 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010448 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010448:	4770      	bx	lr

0801044a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801044a:	4770      	bx	lr

0801044c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801044c:	4770      	bx	lr

0801044e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801044e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010452:	b510      	push	{r4, lr}
 8010454:	1ad2      	subs	r2, r2, r3
 8010456:	2a00      	cmp	r2, #0
 8010458:	bfdc      	itt	le
 801045a:	6884      	ldrle	r4, [r0, #8]
 801045c:	1912      	addle	r2, r2, r4
 801045e:	2a01      	cmp	r2, #1
 8010460:	dd16      	ble.n	8010490 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010462:	6842      	ldr	r2, [r0, #4]
 8010464:	2424      	movs	r4, #36	; 0x24
 8010466:	fb04 2303 	mla	r3, r4, r3, r2
 801046a:	f101 0220 	add.w	r2, r1, #32
 801046e:	f851 4b04 	ldr.w	r4, [r1], #4
 8010472:	4291      	cmp	r1, r2
 8010474:	f843 4b04 	str.w	r4, [r3], #4
 8010478:	d1f9      	bne.n	801046e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801047a:	780a      	ldrb	r2, [r1, #0]
 801047c:	701a      	strb	r2, [r3, #0]
 801047e:	68c3      	ldr	r3, [r0, #12]
 8010480:	6882      	ldr	r2, [r0, #8]
 8010482:	f3bf 8f5b 	dmb	ish
 8010486:	3301      	adds	r3, #1
 8010488:	429a      	cmp	r2, r3
 801048a:	bfd8      	it	le
 801048c:	1a9b      	suble	r3, r3, r2
 801048e:	60c3      	str	r3, [r0, #12]
 8010490:	bd10      	pop	{r4, pc}

08010492 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010492:	6903      	ldr	r3, [r0, #16]
 8010494:	6882      	ldr	r2, [r0, #8]
 8010496:	f3bf 8f5b 	dmb	ish
 801049a:	3301      	adds	r3, #1
 801049c:	429a      	cmp	r2, r3
 801049e:	bfd8      	it	le
 80104a0:	1a9b      	suble	r3, r3, r2
 80104a2:	6103      	str	r3, [r0, #16]
 80104a4:	4770      	bx	lr
	...

080104a8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	4604      	mov	r4, r0
 80104ac:	460e      	mov	r6, r1
 80104ae:	6860      	ldr	r0, [r4, #4]
 80104b0:	6803      	ldr	r3, [r0, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	4798      	blx	r3
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d1f9      	bne.n	80104ae <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80104ba:	4d0d      	ldr	r5, [pc, #52]	; (80104f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80104bc:	6828      	ldr	r0, [r5, #0]
 80104be:	6803      	ldr	r3, [r0, #0]
 80104c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c2:	4798      	blx	r3
 80104c4:	f7f0 fa14 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80104c8:	6828      	ldr	r0, [r5, #0]
 80104ca:	2101      	movs	r1, #1
 80104cc:	f7ff ff28 	bl	8010320 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80104d0:	6860      	ldr	r0, [r4, #4]
 80104d2:	4631      	mov	r1, r6
 80104d4:	6803      	ldr	r3, [r0, #0]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	4798      	blx	r3
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	4620      	mov	r0, r4
 80104de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e0:	4798      	blx	r3
 80104e2:	6828      	ldr	r0, [r5, #0]
 80104e4:	6803      	ldr	r3, [r0, #0]
 80104e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ec:	4718      	bx	r3
 80104ee:	bf00      	nop
 80104f0:	2400b980 	.word	0x2400b980

080104f4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80104f4:	b508      	push	{r3, lr}
 80104f6:	f7f0 f9e9 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80104fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80104fe:	f7f0 b9ef 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010502 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010502:	b510      	push	{r4, lr}
 8010504:	4604      	mov	r4, r0
 8010506:	2114      	movs	r1, #20
 8010508:	f00b fec3 	bl	801c292 <_ZdlPvj>
 801050c:	4620      	mov	r0, r4
 801050e:	bd10      	pop	{r4, pc}

08010510 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010510:	b510      	push	{r4, lr}
 8010512:	4604      	mov	r4, r0
 8010514:	6840      	ldr	r0, [r0, #4]
 8010516:	6803      	ldr	r3, [r0, #0]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4798      	blx	r3
 801051c:	b948      	cbnz	r0, 8010532 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801051e:	7a63      	ldrb	r3, [r4, #9]
 8010520:	b13b      	cbz	r3, 8010532 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010522:	7a23      	ldrb	r3, [r4, #8]
 8010524:	b92b      	cbnz	r3, 8010532 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010526:	6823      	ldr	r3, [r4, #0]
 8010528:	4620      	mov	r0, r4
 801052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010530:	4718      	bx	r3
 8010532:	bd10      	pop	{r4, pc}

08010534 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010534:	b570      	push	{r4, r5, r6, lr}
 8010536:	4604      	mov	r4, r0
 8010538:	6840      	ldr	r0, [r0, #4]
 801053a:	6803      	ldr	r3, [r0, #0]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4798      	blx	r3
 8010540:	4605      	mov	r5, r0
 8010542:	b930      	cbnz	r0, 8010552 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010544:	7a23      	ldrb	r3, [r4, #8]
 8010546:	b123      	cbz	r3, 8010552 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010548:	6860      	ldr	r0, [r4, #4]
 801054a:	6803      	ldr	r3, [r0, #0]
 801054c:	695b      	ldr	r3, [r3, #20]
 801054e:	4798      	blx	r3
 8010550:	7225      	strb	r5, [r4, #8]
 8010552:	6860      	ldr	r0, [r4, #4]
 8010554:	6803      	ldr	r3, [r0, #0]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4798      	blx	r3
 801055a:	b928      	cbnz	r0, 8010568 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	4620      	mov	r0, r4
 8010560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010566:	4718      	bx	r3
 8010568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801056c:	f7f0 b9ca 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010570 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010570:	b510      	push	{r4, lr}
 8010572:	6082      	str	r2, [r0, #8]
 8010574:	2200      	movs	r2, #0
 8010576:	4c03      	ldr	r4, [pc, #12]	; (8010584 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010578:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801057c:	e9c0 4100 	strd	r4, r1, [r0]
 8010580:	bd10      	pop	{r4, pc}
 8010582:	bf00      	nop
 8010584:	0801f0bc 	.word	0x0801f0bc

08010588 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010588:	6840      	ldr	r0, [r0, #4]
 801058a:	6803      	ldr	r3, [r0, #0]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	4718      	bx	r3

08010590 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010590:	2300      	movs	r3, #0
 8010592:	8083      	strh	r3, [r0, #4]
 8010594:	80c3      	strh	r3, [r0, #6]
 8010596:	8003      	strh	r3, [r0, #0]
 8010598:	8043      	strh	r3, [r0, #2]
 801059a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801059e:	2bff      	cmp	r3, #255	; 0xff
 80105a0:	bf01      	itttt	eq
 80105a2:	890b      	ldrheq	r3, [r1, #8]
 80105a4:	8083      	strheq	r3, [r0, #4]
 80105a6:	894b      	ldrheq	r3, [r1, #10]
 80105a8:	80c3      	strheq	r3, [r0, #6]
 80105aa:	4770      	bx	lr

080105ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80105ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105ae:	4604      	mov	r4, r0
 80105b0:	466b      	mov	r3, sp
 80105b2:	6808      	ldr	r0, [r1, #0]
 80105b4:	6849      	ldr	r1, [r1, #4]
 80105b6:	c303      	stmia	r3!, {r0, r1}
 80105b8:	6823      	ldr	r3, [r4, #0]
 80105ba:	4669      	mov	r1, sp
 80105bc:	4620      	mov	r0, r4
 80105be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c0:	4798      	blx	r3
 80105c2:	4b08      	ldr	r3, [pc, #32]	; (80105e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80105ca:	b10a      	cbz	r2, 80105d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80105cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80105ce:	b900      	cbnz	r0, 80105d2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80105d0:	6898      	ldr	r0, [r3, #8]
 80105d2:	6803      	ldr	r3, [r0, #0]
 80105d4:	4669      	mov	r1, sp
 80105d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80105d8:	6a1d      	ldr	r5, [r3, #32]
 80105da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80105de:	47a8      	blx	r5
 80105e0:	b003      	add	sp, #12
 80105e2:	bd30      	pop	{r4, r5, pc}
 80105e4:	2400b980 	.word	0x2400b980

080105e8 <_ZN8touchgfx3BoxD1Ev>:
 80105e8:	4770      	bx	lr

080105ea <_ZN8touchgfx3BoxD0Ev>:
 80105ea:	b510      	push	{r4, lr}
 80105ec:	4604      	mov	r4, r0
 80105ee:	212c      	movs	r1, #44	; 0x2c
 80105f0:	f00b fe4f 	bl	801c292 <_ZdlPvj>
 80105f4:	4620      	mov	r0, r4
 80105f6:	bd10      	pop	{r4, pc}

080105f8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80105f8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80105fc:	b12a      	cbz	r2, 801060a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80105fe:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8010602:	b112      	cbz	r2, 801060a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010604:	6803      	ldr	r3, [r0, #0]
 8010606:	695b      	ldr	r3, [r3, #20]
 8010608:	4718      	bx	r3
 801060a:	4770      	bx	lr

0801060c <_ZN8touchgfx5ImageD1Ev>:
 801060c:	4770      	bx	lr

0801060e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801060e:	b570      	push	{r4, r5, r6, lr}
 8010610:	880b      	ldrh	r3, [r1, #0]
 8010612:	460d      	mov	r5, r1
 8010614:	4604      	mov	r4, r0
 8010616:	84c3      	strh	r3, [r0, #38]	; 0x26
 8010618:	4608      	mov	r0, r1
 801061a:	f003 fd5f 	bl	80140dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801061e:	4606      	mov	r6, r0
 8010620:	4628      	mov	r0, r5
 8010622:	f003 fd8f 	bl	8014144 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	4605      	mov	r5, r0
 801062a:	4631      	mov	r1, r6
 801062c:	4620      	mov	r0, r4
 801062e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010630:	4798      	blx	r3
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	4629      	mov	r1, r5
 8010636:	4620      	mov	r0, r4
 8010638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801063a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801063e:	4718      	bx	r3

08010640 <_ZN8touchgfx5ImageD0Ev>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	212c      	movs	r1, #44	; 0x2c
 8010646:	f00b fe24 	bl	801c292 <_ZdlPvj>
 801064a:	4620      	mov	r0, r4
 801064c:	bd10      	pop	{r4, pc}

0801064e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801064e:	b510      	push	{r4, lr}
 8010650:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010654:	4604      	mov	r4, r0
 8010656:	2bff      	cmp	r3, #255	; 0xff
 8010658:	d006      	beq.n	8010668 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801065a:	2300      	movs	r3, #0
 801065c:	8003      	strh	r3, [r0, #0]
 801065e:	8043      	strh	r3, [r0, #2]
 8010660:	8083      	strh	r3, [r0, #4]
 8010662:	80c3      	strh	r3, [r0, #6]
 8010664:	4620      	mov	r0, r4
 8010666:	bd10      	pop	{r4, pc}
 8010668:	3126      	adds	r1, #38	; 0x26
 801066a:	f003 fd9f 	bl	80141ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801066e:	e7f9      	b.n	8010664 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010670 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010670:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8010674:	b12a      	cbz	r2, 8010682 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8010676:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801067a:	b112      	cbz	r2, 8010682 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801067c:	6803      	ldr	r3, [r0, #0]
 801067e:	695b      	ldr	r3, [r3, #20]
 8010680:	4718      	bx	r3
 8010682:	4770      	bx	lr

08010684 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010688:	4604      	mov	r4, r0
 801068a:	b088      	sub	sp, #32
 801068c:	2500      	movs	r5, #0
 801068e:	460f      	mov	r7, r1
 8010690:	f854 3b26 	ldr.w	r3, [r4], #38
 8010694:	a904      	add	r1, sp, #16
 8010696:	4606      	mov	r6, r0
 8010698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801069e:	4798      	blx	r3
 80106a0:	4620      	mov	r0, r4
 80106a2:	f003 fd1b 	bl	80140dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80106a6:	4680      	mov	r8, r0
 80106a8:	4620      	mov	r0, r4
 80106aa:	f003 fd4b 	bl	8014144 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106ae:	9506      	str	r5, [sp, #24]
 80106b0:	ad06      	add	r5, sp, #24
 80106b2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80106b6:	4639      	mov	r1, r7
 80106b8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80106bc:	4628      	mov	r0, r5
 80106be:	f7fe ff4f 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 80106c2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	dd19      	ble.n	80106fe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80106ca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	dd15      	ble.n	80106fe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80106d2:	4b0c      	ldr	r3, [pc, #48]	; (8010704 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80106da:	b10a      	cbz	r2, 80106e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80106dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80106de:	b900      	cbnz	r0, 80106e2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80106e0:	6898      	ldr	r0, [r3, #8]
 80106e2:	2701      	movs	r7, #1
 80106e4:	6801      	ldr	r1, [r0, #0]
 80106e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80106ea:	9702      	str	r7, [sp, #8]
 80106ec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80106f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80106f4:	e9cd 5600 	strd	r5, r6, [sp]
 80106f8:	688d      	ldr	r5, [r1, #8]
 80106fa:	4621      	mov	r1, r4
 80106fc:	47a8      	blx	r5
 80106fe:	b008      	add	sp, #32
 8010700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010704:	2400b980 	.word	0x2400b980

08010708 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010708:	b510      	push	{r4, lr}
 801070a:	6803      	ldr	r3, [r0, #0]
 801070c:	460c      	mov	r4, r1
 801070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010710:	4798      	blx	r3
 8010712:	1b03      	subs	r3, r0, r4
 8010714:	4258      	negs	r0, r3
 8010716:	4158      	adcs	r0, r3
 8010718:	bd10      	pop	{r4, pc}
	...

0801071c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801071c:	4b01      	ldr	r3, [pc, #4]	; (8010724 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801071e:	6019      	str	r1, [r3, #0]
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	2400b988 	.word	0x2400b988

08010728 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	4696      	mov	lr, r2
 801072e:	b097      	sub	sp, #92	; 0x5c
 8010730:	4605      	mov	r5, r0
 8010732:	4614      	mov	r4, r2
 8010734:	460e      	mov	r6, r1
 8010736:	461f      	mov	r7, r3
 8010738:	f10d 0c1c 	add.w	ip, sp, #28
 801073c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010740:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8010744:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010748:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801074c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010750:	f8de 3000 	ldr.w	r3, [lr]
 8010754:	f104 0e14 	add.w	lr, r4, #20
 8010758:	f8cc 3000 	str.w	r3, [ip]
 801075c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010760:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010768:	f8de 3000 	ldr.w	r3, [lr]
 801076c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010770:	f8cc 3000 	str.w	r3, [ip]
 8010774:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010778:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801077c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010780:	f8de 3000 	ldr.w	r3, [lr]
 8010784:	4631      	mov	r1, r6
 8010786:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010788:	4628      	mov	r0, r5
 801078a:	f8cc 3000 	str.w	r3, [ip]
 801078e:	682b      	ldr	r3, [r5, #0]
 8010790:	9201      	str	r2, [sp, #4]
 8010792:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010794:	f8cd 8008 	str.w	r8, [sp, #8]
 8010798:	9200      	str	r2, [sp, #0]
 801079a:	aa07      	add	r2, sp, #28
 801079c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80107a0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80107a4:	463b      	mov	r3, r7
 80107a6:	47d8      	blx	fp
 80107a8:	46a6      	mov	lr, r4
 80107aa:	f10d 0c1c 	add.w	ip, sp, #28
 80107ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107b6:	f8de 3000 	ldr.w	r3, [lr]
 80107ba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80107be:	343c      	adds	r4, #60	; 0x3c
 80107c0:	f8cc 3000 	str.w	r3, [ip]
 80107c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80107c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107d0:	f8de 3000 	ldr.w	r3, [lr]
 80107d4:	f8cc 3000 	str.w	r3, [ip]
 80107d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80107dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	4631      	mov	r1, r6
 80107e6:	4628      	mov	r0, r5
 80107e8:	f8cc 3000 	str.w	r3, [ip]
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80107f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80107f8:	9201      	str	r2, [sp, #4]
 80107fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80107fc:	9200      	str	r2, [sp, #0]
 80107fe:	aa07      	add	r2, sp, #28
 8010800:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8010802:	463b      	mov	r3, r7
 8010804:	47a0      	blx	r4
 8010806:	b017      	add	sp, #92	; 0x5c
 8010808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801080c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801080c:	2000      	movs	r0, #0
 801080e:	4770      	bx	lr

08010810 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	b08d      	sub	sp, #52	; 0x34
 8010816:	4688      	mov	r8, r1
 8010818:	f8d3 c000 	ldr.w	ip, [r3]
 801081c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801081e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010822:	680f      	ldr	r7, [r1, #0]
 8010824:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010828:	eba7 070c 	sub.w	r7, r7, ip
 801082c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010830:	edd3 6a07 	vldr	s13, [r3, #28]
 8010834:	42bc      	cmp	r4, r7
 8010836:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010838:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801083c:	bfa8      	it	ge
 801083e:	463c      	movge	r4, r7
 8010840:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010844:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010848:	ee07 4a90 	vmov	s15, r4
 801084c:	eb09 0e0c 	add.w	lr, r9, ip
 8010850:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010854:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010858:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801085c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8010860:	4571      	cmp	r1, lr
 8010862:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010866:	ee65 4a24 	vmul.f32	s9, s10, s9
 801086a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801086e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010872:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8010876:	ee32 1a05 	vadd.f32	s2, s4, s10
 801087a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801087e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8010882:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010886:	ee22 2a07 	vmul.f32	s4, s4, s14
 801088a:	f340 808c 	ble.w	80109a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801088e:	eba1 060e 	sub.w	r6, r1, lr
 8010892:	fb96 f5f4 	sdiv	r5, r6, r4
 8010896:	ee07 5a10 	vmov	s14, r5
 801089a:	2d00      	cmp	r5, #0
 801089c:	fb04 6615 	mls	r6, r4, r5, r6
 80108a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80108a4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80108a8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80108ac:	eea7 1a05 	vfma.f32	s2, s14, s10
 80108b0:	dd12      	ble.n	80108d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80108b2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80108b6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80108ba:	ee31 2a45 	vsub.f32	s4, s2, s10
 80108be:	eef5 6a40 	vcmp.f32	s13, #0.0
 80108c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c6:	bf14      	ite	ne
 80108c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80108cc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80108d0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80108d4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80108d8:	fb05 f204 	mul.w	r2, r5, r4
 80108dc:	1abf      	subs	r7, r7, r2
 80108de:	4494      	add	ip, r2
 80108e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80108e4:	4411      	add	r1, r2
 80108e6:	eb09 020c 	add.w	r2, r9, ip
 80108ea:	b209      	sxth	r1, r1
 80108ec:	443a      	add	r2, r7
 80108ee:	428a      	cmp	r2, r1
 80108f0:	bfc4      	itt	gt
 80108f2:	eba1 0209 	subgt.w	r2, r1, r9
 80108f6:	eba2 070c 	subgt.w	r7, r2, ip
 80108fa:	2f00      	cmp	r7, #0
 80108fc:	dd50      	ble.n	80109a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80108fe:	fb97 f1f4 	sdiv	r1, r7, r4
 8010902:	fb04 7211 	mls	r2, r4, r1, r7
 8010906:	b90a      	cbnz	r2, 801090c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010908:	3901      	subs	r1, #1
 801090a:	4622      	mov	r2, r4
 801090c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010910:	6840      	ldr	r0, [r0, #4]
 8010912:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8010916:	44b6      	add	lr, r6
 8010918:	f8d0 a000 	ldr.w	sl, [r0]
 801091c:	2900      	cmp	r1, #0
 801091e:	bfcc      	ite	gt
 8010920:	46a1      	movgt	r9, r4
 8010922:	4691      	movle	r9, r2
 8010924:	900b      	str	r0, [sp, #44]	; 0x2c
 8010926:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010928:	fb04 e505 	mla	r5, r4, r5, lr
 801092c:	eef0 6a42 	vmov.f32	s13, s4
 8010930:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010934:	9008      	str	r0, [sp, #32]
 8010936:	eeb0 7a61 	vmov.f32	s14, s3
 801093a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801093c:	695b      	ldr	r3, [r3, #20]
 801093e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010942:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8010946:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801094a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801094c:	445b      	add	r3, fp
 801094e:	9307      	str	r3, [sp, #28]
 8010950:	ee16 3a90 	vmov	r3, s13
 8010954:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8010958:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801095c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8010960:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8010964:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010968:	ee17 7a90 	vmov	r7, s15
 801096c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8010970:	fb97 f7f4 	sdiv	r7, r7, r4
 8010974:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010978:	ee17 ca90 	vmov	ip, s15
 801097c:	fb9c fcf4 	sdiv	ip, ip, r4
 8010980:	fb0c 3306 	mla	r3, ip, r6, r3
 8010984:	9302      	str	r3, [sp, #8]
 8010986:	ee17 3a10 	vmov	r3, s14
 801098a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801098e:	fb07 3706 	mla	r7, r7, r6, r3
 8010992:	eba9 0306 	sub.w	r3, r9, r6
 8010996:	e9cd 4700 	strd	r4, r7, [sp]
 801099a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801099e:	47a0      	blx	r4
 80109a0:	b00d      	add	sp, #52	; 0x34
 80109a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a6:	2500      	movs	r5, #0
 80109a8:	462e      	mov	r6, r5
 80109aa:	e799      	b.n	80108e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080109ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80109ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	b0db      	sub	sp, #364	; 0x16c
 80109b2:	461d      	mov	r5, r3
 80109b4:	4614      	mov	r4, r2
 80109b6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80109ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80109bc:	4629      	mov	r1, r5
 80109be:	930a      	str	r3, [sp, #40]	; 0x28
 80109c0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80109c4:	9009      	str	r0, [sp, #36]	; 0x24
 80109c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80109c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80109cc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80109d0:	9310      	str	r3, [sp, #64]	; 0x40
 80109d2:	6803      	ldr	r3, [r0, #0]
 80109d4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80109d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80109da:	47b8      	blx	r7
 80109dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109de:	6058      	str	r0, [r3, #4]
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f000 83a1 	beq.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80109e6:	682b      	ldr	r3, [r5, #0]
 80109e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80109ec:	ed94 7a02 	vldr	s14, [r4, #8]
 80109f0:	9314      	str	r3, [sp, #80]	; 0x50
 80109f2:	686b      	ldr	r3, [r5, #4]
 80109f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109f8:	9315      	str	r3, [sp, #84]	; 0x54
 80109fa:	4bc1      	ldr	r3, [pc, #772]	; (8010d00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80109fc:	7819      	ldrb	r1, [r3, #0]
 80109fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010a02:	2900      	cmp	r1, #0
 8010a04:	bf16      	itet	ne
 8010a06:	4619      	movne	r1, r3
 8010a08:	4611      	moveq	r1, r2
 8010a0a:	4613      	movne	r3, r2
 8010a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a10:	9116      	str	r1, [sp, #88]	; 0x58
 8010a12:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8010a16:	f240 8387 	bls.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a1a:	ed94 7a07 	vldr	s14, [r4, #28]
 8010a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a26:	f240 837f 	bls.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a2a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a36:	f240 8377 	bls.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a3a:	6822      	ldr	r2, [r4, #0]
 8010a3c:	4bb1      	ldr	r3, [pc, #708]	; (8010d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	f2c0 8372 	blt.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a44:	49b0      	ldr	r1, [pc, #704]	; (8010d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8010a46:	6963      	ldr	r3, [r4, #20]
 8010a48:	428a      	cmp	r2, r1
 8010a4a:	f300 836d 	bgt.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a4e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010a52:	48ae      	ldr	r0, [pc, #696]	; (8010d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8010a54:	33ff      	adds	r3, #255	; 0xff
 8010a56:	4283      	cmp	r3, r0
 8010a58:	f200 8366 	bhi.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010a5e:	4dac      	ldr	r5, [pc, #688]	; (8010d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8010a60:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010a64:	33ff      	adds	r3, #255	; 0xff
 8010a66:	42ab      	cmp	r3, r5
 8010a68:	f200 835e 	bhi.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a6c:	6862      	ldr	r2, [r4, #4]
 8010a6e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8010a72:	33ff      	adds	r3, #255	; 0xff
 8010a74:	4283      	cmp	r3, r0
 8010a76:	f200 8357 	bhi.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a7a:	69a1      	ldr	r1, [r4, #24]
 8010a7c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8010a80:	33ff      	adds	r3, #255	; 0xff
 8010a82:	4283      	cmp	r3, r0
 8010a84:	f200 8350 	bhi.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010a8a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8010a8e:	30ff      	adds	r0, #255	; 0xff
 8010a90:	42a8      	cmp	r0, r5
 8010a92:	f200 8349 	bhi.w	8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010a96:	428a      	cmp	r2, r1
 8010a98:	f280 8110 	bge.w	8010cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	f300 8119 	bgt.w	8010cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8010aa2:	4299      	cmp	r1, r3
 8010aa4:	f280 811d 	bge.w	8010ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8010aa8:	2502      	movs	r5, #2
 8010aaa:	2701      	movs	r7, #1
 8010aac:	46a9      	mov	r9, r5
 8010aae:	46b8      	mov	r8, r7
 8010ab0:	f04f 0a00 	mov.w	sl, #0
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	a849      	add	r0, sp, #292	; 0x124
 8010ab8:	f002 ff98 	bl	80139ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010abc:	4622      	mov	r2, r4
 8010abe:	4653      	mov	r3, sl
 8010ac0:	a949      	add	r1, sp, #292	; 0x124
 8010ac2:	f8cd 9000 	str.w	r9, [sp]
 8010ac6:	a819      	add	r0, sp, #100	; 0x64
 8010ac8:	f003 f8c0 	bl	8013c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010acc:	4622      	mov	r2, r4
 8010ace:	4653      	mov	r3, sl
 8010ad0:	a949      	add	r1, sp, #292	; 0x124
 8010ad2:	f8cd 8000 	str.w	r8, [sp]
 8010ad6:	a829      	add	r0, sp, #164	; 0xa4
 8010ad8:	f003 f8b8 	bl	8013c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010adc:	4643      	mov	r3, r8
 8010ade:	4622      	mov	r2, r4
 8010ae0:	a949      	add	r1, sp, #292	; 0x124
 8010ae2:	f8cd 9000 	str.w	r9, [sp]
 8010ae6:	a839      	add	r0, sp, #228	; 0xe4
 8010ae8:	f003 f8b0 	bl	8013c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010aec:	42af      	cmp	r7, r5
 8010aee:	af12      	add	r7, sp, #72	; 0x48
 8010af0:	bfb7      	itett	lt
 8010af2:	2300      	movlt	r3, #0
 8010af4:	2301      	movge	r3, #1
 8010af6:	ad29      	addlt	r5, sp, #164	; 0xa4
 8010af8:	ac19      	addlt	r4, sp, #100	; 0x64
 8010afa:	bfb1      	iteee	lt
 8010afc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010afe:	ad19      	addge	r5, sp, #100	; 0x64
 8010b00:	930e      	strge	r3, [sp, #56]	; 0x38
 8010b02:	ac29      	addge	r4, sp, #164	; 0xa4
 8010b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b0a:	e887 0003 	stmia.w	r7, {r0, r1}
 8010b0e:	b928      	cbnz	r0, 8010b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010b10:	4b80      	ldr	r3, [pc, #512]	; (8010d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	6803      	ldr	r3, [r0, #0]
 8010b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b18:	4798      	blx	r3
 8010b1a:	6038      	str	r0, [r7, #0]
 8010b1c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010b1e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010b22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b26:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010b28:	930c      	str	r3, [sp, #48]	; 0x30
 8010b2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b2c:	6963      	ldr	r3, [r4, #20]
 8010b2e:	440b      	add	r3, r1
 8010b30:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010b34:	4408      	add	r0, r1
 8010b36:	b200      	sxth	r0, r0
 8010b38:	4283      	cmp	r3, r0
 8010b3a:	900d      	str	r0, [sp, #52]	; 0x34
 8010b3c:	f280 80dd 	bge.w	8010cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010b40:	428b      	cmp	r3, r1
 8010b42:	da08      	bge.n	8010b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	dd06      	ble.n	8010b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010b48:	1acb      	subs	r3, r1, r3
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	f2c0 80e4 	blt.w	8010d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f300 80e2 	bgt.w	8010d1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8010b56:	6967      	ldr	r7, [r4, #20]
 8010b58:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b5e:	443b      	add	r3, r7
 8010b60:	461f      	mov	r7, r3
 8010b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b64:	1bdf      	subs	r7, r3, r7
 8010b66:	4297      	cmp	r7, r2
 8010b68:	bfa8      	it	ge
 8010b6a:	4617      	movge	r7, r2
 8010b6c:	2f00      	cmp	r7, #0
 8010b6e:	f340 8166 	ble.w	8010e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8010b72:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010b74:	6829      	ldr	r1, [r5, #0]
 8010b76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010b7a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010b7e:	4411      	add	r1, r2
 8010b80:	6820      	ldr	r0, [r4, #0]
 8010b82:	4299      	cmp	r1, r3
 8010b84:	dd1a      	ble.n	8010bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010b86:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010b8a:	4402      	add	r2, r0
 8010b8c:	440b      	add	r3, r1
 8010b8e:	b21b      	sxth	r3, r3
 8010b90:	429a      	cmp	r2, r3
 8010b92:	dc13      	bgt.n	8010bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b96:	a912      	add	r1, sp, #72	; 0x48
 8010b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	9206      	str	r2, [sp, #24]
 8010ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ba2:	9500      	str	r5, [sp, #0]
 8010ba4:	9205      	str	r2, [sp, #20]
 8010ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ba8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010bac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010bae:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010bb2:	aa49      	add	r2, sp, #292	; 0x124
 8010bb4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010bb8:	4623      	mov	r3, r4
 8010bba:	47c8      	blx	r9
 8010bbc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010bc0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010bc4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010bcc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010bd0:	68a1      	ldr	r1, [r4, #8]
 8010bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bd6:	ed94 6a08 	vldr	s12, [r4, #32]
 8010bda:	edd4 6a07 	vldr	s13, [r4, #28]
 8010bde:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010be2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010be6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010bea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010bee:	edc4 6a07 	vstr	s13, [r4, #28]
 8010bf2:	441a      	add	r2, r3
 8010bf4:	6963      	ldr	r3, [r4, #20]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	6022      	str	r2, [r4, #0]
 8010bfa:	6163      	str	r3, [r4, #20]
 8010bfc:	69a3      	ldr	r3, [r4, #24]
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	61a3      	str	r3, [r4, #24]
 8010c02:	6923      	ldr	r3, [r4, #16]
 8010c04:	440b      	add	r3, r1
 8010c06:	68e1      	ldr	r1, [r4, #12]
 8010c08:	428b      	cmp	r3, r1
 8010c0a:	6123      	str	r3, [r4, #16]
 8010c0c:	db15      	blt.n	8010c3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8010c0e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010c12:	3201      	adds	r2, #1
 8010c14:	1a5b      	subs	r3, r3, r1
 8010c16:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010c1a:	6022      	str	r2, [r4, #0]
 8010c1c:	6123      	str	r3, [r4, #16]
 8010c1e:	edc4 6a07 	vstr	s13, [r4, #28]
 8010c22:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010c26:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010c2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010c2e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c36:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010c3a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010c3e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010c42:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c4a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010c4e:	68a9      	ldr	r1, [r5, #8]
 8010c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c54:	ed95 6a08 	vldr	s12, [r5, #32]
 8010c58:	edd5 6a07 	vldr	s13, [r5, #28]
 8010c5c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010c60:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010c64:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c6c:	edc5 6a07 	vstr	s13, [r5, #28]
 8010c70:	441a      	add	r2, r3
 8010c72:	696b      	ldr	r3, [r5, #20]
 8010c74:	3301      	adds	r3, #1
 8010c76:	602a      	str	r2, [r5, #0]
 8010c78:	616b      	str	r3, [r5, #20]
 8010c7a:	69ab      	ldr	r3, [r5, #24]
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	61ab      	str	r3, [r5, #24]
 8010c80:	692b      	ldr	r3, [r5, #16]
 8010c82:	440b      	add	r3, r1
 8010c84:	68e9      	ldr	r1, [r5, #12]
 8010c86:	428b      	cmp	r3, r1
 8010c88:	612b      	str	r3, [r5, #16]
 8010c8a:	db15      	blt.n	8010cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8010c8c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010c90:	3201      	adds	r2, #1
 8010c92:	1a5b      	subs	r3, r3, r1
 8010c94:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010c98:	602a      	str	r2, [r5, #0]
 8010c9a:	612b      	str	r3, [r5, #16]
 8010c9c:	edc5 6a07 	vstr	s13, [r5, #28]
 8010ca0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010ca4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010ca8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010cac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cb4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010cb8:	3f01      	subs	r7, #1
 8010cba:	e757      	b.n	8010b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	dc13      	bgt.n	8010ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	da14      	bge.n	8010cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8010cc4:	2502      	movs	r5, #2
 8010cc6:	2703      	movs	r7, #3
 8010cc8:	f04f 0800 	mov.w	r8, #0
 8010ccc:	46a9      	mov	r9, r5
 8010cce:	f04f 0a01 	mov.w	sl, #1
 8010cd2:	e6ef      	b.n	8010ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010cd4:	2501      	movs	r5, #1
 8010cd6:	2700      	movs	r7, #0
 8010cd8:	46a9      	mov	r9, r5
 8010cda:	46b8      	mov	r8, r7
 8010cdc:	f04f 0a02 	mov.w	sl, #2
 8010ce0:	e6e8      	b.n	8010ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010ce2:	2501      	movs	r5, #1
 8010ce4:	2702      	movs	r7, #2
 8010ce6:	e6e1      	b.n	8010aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8010ce8:	2500      	movs	r5, #0
 8010cea:	2701      	movs	r7, #1
 8010cec:	e7f4      	b.n	8010cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010cee:	2702      	movs	r7, #2
 8010cf0:	2503      	movs	r5, #3
 8010cf2:	f04f 0900 	mov.w	r9, #0
 8010cf6:	46b8      	mov	r8, r7
 8010cf8:	e7e9      	b.n	8010cce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	e728      	b.n	8010b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8010cfe:	bf00      	nop
 8010d00:	2400b978 	.word	0x2400b978
 8010d04:	fffd8f01 	.word	0xfffd8f01
 8010d08:	00027100 	.word	0x00027100
 8010d0c:	0004e1ff 	.word	0x0004e1ff
 8010d10:	0004e1fe 	.word	0x0004e1fe
 8010d14:	2400b980 	.word	0x2400b980
 8010d18:	4613      	mov	r3, r2
 8010d1a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010d1c:	469e      	mov	lr, r3
 8010d1e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010d20:	469c      	mov	ip, r3
 8010d22:	9111      	str	r1, [sp, #68]	; 0x44
 8010d24:	f04f 0900 	mov.w	r9, #0
 8010d28:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8010d2c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8010d30:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8010d34:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8010d38:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8010d3c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010d40:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8010d44:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8010d48:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8010d4c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8010d50:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8010d54:	f1bc 0f00 	cmp.w	ip, #0
 8010d58:	d147      	bne.n	8010dea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8010d5a:	eb03 0c07 	add.w	ip, r3, r7
 8010d5e:	1ad7      	subs	r7, r2, r3
 8010d60:	f1b9 0f00 	cmp.w	r9, #0
 8010d64:	d009      	beq.n	8010d7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8010d66:	9029      	str	r0, [sp, #164]	; 0xa4
 8010d68:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8010d6c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8010d70:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8010d74:	912d      	str	r1, [sp, #180]	; 0xb4
 8010d76:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8010d7a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010d7c:	f04f 0800 	mov.w	r8, #0
 8010d80:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010d84:	9111      	str	r1, [sp, #68]	; 0x44
 8010d86:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8010d8a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010d8e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010d92:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010d96:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010d9a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010d9e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010da2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8010da6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8010daa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010dae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010db2:	f1be 0f00 	cmp.w	lr, #0
 8010db6:	d031      	beq.n	8010e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8010db8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010dba:	4450      	add	r0, sl
 8010dbc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010dc0:	4431      	add	r1, r6
 8010dc2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010dc6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010dca:	4549      	cmp	r1, r9
 8010dcc:	db08      	blt.n	8010de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010dce:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010dd2:	3001      	adds	r0, #1
 8010dd4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010dd8:	eba1 0109 	sub.w	r1, r1, r9
 8010ddc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010de0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010de4:	f04f 0801 	mov.w	r8, #1
 8010de8:	e7e3      	b.n	8010db2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8010dea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010dec:	4450      	add	r0, sl
 8010dee:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010df2:	4431      	add	r1, r6
 8010df4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010df8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010dfc:	4541      	cmp	r1, r8
 8010dfe:	db08      	blt.n	8010e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8010e00:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010e04:	3001      	adds	r0, #1
 8010e06:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010e0a:	eba1 0108 	sub.w	r1, r1, r8
 8010e0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e16:	f04f 0901 	mov.w	r9, #1
 8010e1a:	e79b      	b.n	8010d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8010e1c:	449c      	add	ip, r3
 8010e1e:	1aff      	subs	r7, r7, r3
 8010e20:	f1b8 0f00 	cmp.w	r8, #0
 8010e24:	d009      	beq.n	8010e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8010e26:	9019      	str	r0, [sp, #100]	; 0x64
 8010e28:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8010e2c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8010e30:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8010e34:	911d      	str	r1, [sp, #116]	; 0x74
 8010e36:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8010e3a:	1ad2      	subs	r2, r2, r3
 8010e3c:	e68b      	b.n	8010b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e40:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	f000 80d1 	beq.w	8010fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8010e48:	ad19      	add	r5, sp, #100	; 0x64
 8010e4a:	ac39      	add	r4, sp, #228	; 0xe4
 8010e4c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010e4e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010e52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e56:	930c      	str	r3, [sp, #48]	; 0x30
 8010e58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e5a:	6963      	ldr	r3, [r4, #20]
 8010e5c:	440b      	add	r3, r1
 8010e5e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010e62:	4408      	add	r0, r1
 8010e64:	b200      	sxth	r0, r0
 8010e66:	4283      	cmp	r3, r0
 8010e68:	900d      	str	r0, [sp, #52]	; 0x34
 8010e6a:	f280 80c1 	bge.w	8010ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010e6e:	428b      	cmp	r3, r1
 8010e70:	da08      	bge.n	8010e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	dd06      	ble.n	8010e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010e76:	1acb      	subs	r3, r1, r3
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f2c0 80bb 	blt.w	8010ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f300 80b9 	bgt.w	8010ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8010e84:	6967      	ldr	r7, [r4, #20]
 8010e86:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e8c:	443b      	add	r3, r7
 8010e8e:	461f      	mov	r7, r3
 8010e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e92:	1bdf      	subs	r7, r3, r7
 8010e94:	4297      	cmp	r7, r2
 8010e96:	bfa8      	it	ge
 8010e98:	4617      	movge	r7, r2
 8010e9a:	2f00      	cmp	r7, #0
 8010e9c:	f340 813c 	ble.w	8011118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010ea0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010ea2:	6829      	ldr	r1, [r5, #0]
 8010ea4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010ea8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010eac:	4411      	add	r1, r2
 8010eae:	6820      	ldr	r0, [r4, #0]
 8010eb0:	4299      	cmp	r1, r3
 8010eb2:	dd1a      	ble.n	8010eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010eb4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010eb8:	4402      	add	r2, r0
 8010eba:	440b      	add	r3, r1
 8010ebc:	b21b      	sxth	r3, r3
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	dc13      	bgt.n	8010eea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010ec2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ec4:	a912      	add	r1, sp, #72	; 0x48
 8010ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	9206      	str	r2, [sp, #24]
 8010ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ed0:	9500      	str	r5, [sp, #0]
 8010ed2:	9205      	str	r2, [sp, #20]
 8010ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ed6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010eda:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010edc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010ee0:	aa49      	add	r2, sp, #292	; 0x124
 8010ee2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010ee6:	4623      	mov	r3, r4
 8010ee8:	47c8      	blx	r9
 8010eea:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010eee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010ef2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010efa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010efe:	68a1      	ldr	r1, [r4, #8]
 8010f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f04:	ed94 6a08 	vldr	s12, [r4, #32]
 8010f08:	edd4 6a07 	vldr	s13, [r4, #28]
 8010f0c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010f10:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f14:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010f18:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010f1c:	edc4 6a07 	vstr	s13, [r4, #28]
 8010f20:	441a      	add	r2, r3
 8010f22:	6963      	ldr	r3, [r4, #20]
 8010f24:	3301      	adds	r3, #1
 8010f26:	6022      	str	r2, [r4, #0]
 8010f28:	6163      	str	r3, [r4, #20]
 8010f2a:	69a3      	ldr	r3, [r4, #24]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	61a3      	str	r3, [r4, #24]
 8010f30:	6923      	ldr	r3, [r4, #16]
 8010f32:	440b      	add	r3, r1
 8010f34:	68e1      	ldr	r1, [r4, #12]
 8010f36:	428b      	cmp	r3, r1
 8010f38:	6123      	str	r3, [r4, #16]
 8010f3a:	db15      	blt.n	8010f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8010f3c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010f40:	3201      	adds	r2, #1
 8010f42:	1a5b      	subs	r3, r3, r1
 8010f44:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010f48:	6022      	str	r2, [r4, #0]
 8010f4a:	6123      	str	r3, [r4, #16]
 8010f4c:	edc4 6a07 	vstr	s13, [r4, #28]
 8010f50:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010f54:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010f58:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010f5c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f64:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010f68:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010f6c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010f70:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f78:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010f7c:	68a9      	ldr	r1, [r5, #8]
 8010f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f82:	ed95 6a08 	vldr	s12, [r5, #32]
 8010f86:	edd5 6a07 	vldr	s13, [r5, #28]
 8010f8a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010f8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f92:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010f96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f9a:	edc5 6a07 	vstr	s13, [r5, #28]
 8010f9e:	441a      	add	r2, r3
 8010fa0:	696b      	ldr	r3, [r5, #20]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	602a      	str	r2, [r5, #0]
 8010fa6:	616b      	str	r3, [r5, #20]
 8010fa8:	69ab      	ldr	r3, [r5, #24]
 8010faa:	3b01      	subs	r3, #1
 8010fac:	61ab      	str	r3, [r5, #24]
 8010fae:	692b      	ldr	r3, [r5, #16]
 8010fb0:	440b      	add	r3, r1
 8010fb2:	68e9      	ldr	r1, [r5, #12]
 8010fb4:	428b      	cmp	r3, r1
 8010fb6:	612b      	str	r3, [r5, #16]
 8010fb8:	db15      	blt.n	8010fe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8010fba:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010fbe:	3201      	adds	r2, #1
 8010fc0:	1a5b      	subs	r3, r3, r1
 8010fc2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010fc6:	602a      	str	r2, [r5, #0]
 8010fc8:	612b      	str	r3, [r5, #16]
 8010fca:	edc5 6a07 	vstr	s13, [r5, #28]
 8010fce:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010fd2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010fd6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010fda:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fe2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010fe6:	3f01      	subs	r7, #1
 8010fe8:	e757      	b.n	8010e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8010fea:	ad39      	add	r5, sp, #228	; 0xe4
 8010fec:	ac19      	add	r4, sp, #100	; 0x64
 8010fee:	e72d      	b.n	8010e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	e744      	b.n	8010e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8010ff8:	469e      	mov	lr, r3
 8010ffa:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8010ffe:	461f      	mov	r7, r3
 8011000:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011004:	f04f 0900 	mov.w	r9, #0
 8011008:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801100c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011010:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8011014:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8011018:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801101c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801101e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8011022:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8011026:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801102a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801102e:	960e      	str	r6, [sp, #56]	; 0x38
 8011030:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8011034:	2f00      	cmp	r7, #0
 8011036:	d146      	bne.n	80110c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011038:	449c      	add	ip, r3
 801103a:	1ad7      	subs	r7, r2, r3
 801103c:	f1b9 0f00 	cmp.w	r9, #0
 8011040:	d009      	beq.n	8011056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011042:	9039      	str	r0, [sp, #228]	; 0xe4
 8011044:	913d      	str	r1, [sp, #244]	; 0xf4
 8011046:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801104a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801104e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8011052:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8011056:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011058:	f04f 0800 	mov.w	r8, #0
 801105c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011060:	910e      	str	r1, [sp, #56]	; 0x38
 8011062:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011066:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801106a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801106e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011072:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011076:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801107a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801107e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011082:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011086:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801108a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801108e:	f1be 0f00 	cmp.w	lr, #0
 8011092:	d030      	beq.n	80110f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011094:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011096:	4450      	add	r0, sl
 8011098:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801109c:	4431      	add	r1, r6
 801109e:	ee37 7a04 	vadd.f32	s14, s14, s8
 80110a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80110a6:	4549      	cmp	r1, r9
 80110a8:	db08      	blt.n	80110bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80110aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80110ae:	3001      	adds	r0, #1
 80110b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80110b4:	eba1 0109 	sub.w	r1, r1, r9
 80110b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80110bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80110c0:	f04f 0801 	mov.w	r8, #1
 80110c4:	e7e3      	b.n	801108e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80110c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80110c8:	4450      	add	r0, sl
 80110ca:	ee37 7a24 	vadd.f32	s14, s14, s9
 80110ce:	4431      	add	r1, r6
 80110d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80110d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80110d8:	4541      	cmp	r1, r8
 80110da:	db08      	blt.n	80110ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80110dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80110e0:	3001      	adds	r0, #1
 80110e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80110e6:	eba1 0108 	sub.w	r1, r1, r8
 80110ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80110ee:	3f01      	subs	r7, #1
 80110f0:	f04f 0901 	mov.w	r9, #1
 80110f4:	e79e      	b.n	8011034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80110f6:	449c      	add	ip, r3
 80110f8:	1aff      	subs	r7, r7, r3
 80110fa:	f1b8 0f00 	cmp.w	r8, #0
 80110fe:	d009      	beq.n	8011114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011100:	9019      	str	r0, [sp, #100]	; 0x64
 8011102:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011106:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801110a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801110e:	911d      	str	r1, [sp, #116]	; 0x74
 8011110:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011114:	1ad2      	subs	r2, r2, r3
 8011116:	e6b5      	b.n	8010e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	b923      	cbnz	r3, 8011128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801111e:	4b04      	ldr	r3, [pc, #16]	; (8011130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	6803      	ldr	r3, [r0, #0]
 8011124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011126:	4798      	blx	r3
 8011128:	b05b      	add	sp, #364	; 0x16c
 801112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	bf00      	nop
 8011130:	2400b980 	.word	0x2400b980

08011134 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011134:	2b03      	cmp	r3, #3
 8011136:	d818      	bhi.n	801116a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011138:	e8df f003 	tbb	[pc, r3]
 801113c:	130d0602 	.word	0x130d0602
 8011140:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011144:	1850      	adds	r0, r2, r1
 8011146:	4770      	bx	lr
 8011148:	8803      	ldrh	r3, [r0, #0]
 801114a:	8880      	ldrh	r0, [r0, #4]
 801114c:	4418      	add	r0, r3
 801114e:	b200      	sxth	r0, r0
 8011150:	1a80      	subs	r0, r0, r2
 8011152:	3801      	subs	r0, #1
 8011154:	4770      	bx	lr
 8011156:	8803      	ldrh	r3, [r0, #0]
 8011158:	8880      	ldrh	r0, [r0, #4]
 801115a:	4418      	add	r0, r3
 801115c:	b200      	sxth	r0, r0
 801115e:	1a40      	subs	r0, r0, r1
 8011160:	e7f7      	b.n	8011152 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011162:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011166:	4410      	add	r0, r2
 8011168:	4770      	bx	lr
 801116a:	2000      	movs	r0, #0
 801116c:	4770      	bx	lr

0801116e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801116e:	2b03      	cmp	r3, #3
 8011170:	d817      	bhi.n	80111a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011172:	e8df f003 	tbb	[pc, r3]
 8011176:	0602      	.short	0x0602
 8011178:	1009      	.short	0x1009
 801117a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801117e:	1850      	adds	r0, r2, r1
 8011180:	4770      	bx	lr
 8011182:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011186:	e7fa      	b.n	801117e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011188:	8843      	ldrh	r3, [r0, #2]
 801118a:	88c0      	ldrh	r0, [r0, #6]
 801118c:	4418      	add	r0, r3
 801118e:	b200      	sxth	r0, r0
 8011190:	1a80      	subs	r0, r0, r2
 8011192:	3801      	subs	r0, #1
 8011194:	4770      	bx	lr
 8011196:	8843      	ldrh	r3, [r0, #2]
 8011198:	88c0      	ldrh	r0, [r0, #6]
 801119a:	4418      	add	r0, r3
 801119c:	b200      	sxth	r0, r0
 801119e:	1a40      	subs	r0, r0, r1
 80111a0:	e7f7      	b.n	8011192 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80111a2:	2000      	movs	r0, #0
 80111a4:	4770      	bx	lr
	...

080111a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80111a8:	4b01      	ldr	r3, [pc, #4]	; (80111b0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	4770      	bx	lr
 80111b0:	2400b988 	.word	0x2400b988

080111b4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80111b4:	4603      	mov	r3, r0
 80111b6:	b1c8      	cbz	r0, 80111ec <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80111b8:	0c02      	lsrs	r2, r0, #16
 80111ba:	0412      	lsls	r2, r2, #16
 80111bc:	b9a2      	cbnz	r2, 80111e8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80111be:	0403      	lsls	r3, r0, #16
 80111c0:	2010      	movs	r0, #16
 80111c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80111c6:	bf04      	itt	eq
 80111c8:	021b      	lsleq	r3, r3, #8
 80111ca:	3008      	addeq	r0, #8
 80111cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80111d0:	bf04      	itt	eq
 80111d2:	011b      	lsleq	r3, r3, #4
 80111d4:	3004      	addeq	r0, #4
 80111d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80111da:	bf04      	itt	eq
 80111dc:	009b      	lsleq	r3, r3, #2
 80111de:	3002      	addeq	r0, #2
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	db04      	blt.n	80111ee <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80111e4:	3001      	adds	r0, #1
 80111e6:	4770      	bx	lr
 80111e8:	2000      	movs	r0, #0
 80111ea:	e7ea      	b.n	80111c2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80111ec:	2020      	movs	r0, #32
 80111ee:	4770      	bx	lr

080111f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	b087      	sub	sp, #28
 80111f6:	4681      	mov	r9, r0
 80111f8:	4698      	mov	r8, r3
 80111fa:	4610      	mov	r0, r2
 80111fc:	460d      	mov	r5, r1
 80111fe:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8011202:	b981      	cbnz	r1, 8011226 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8011204:	b14b      	cbz	r3, 801121a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8011206:	460b      	mov	r3, r1
 8011208:	464a      	mov	r2, r9
 801120a:	4641      	mov	r1, r8
 801120c:	e9cd 4700 	strd	r4, r7, [sp]
 8011210:	f7ff ffee 	bl	80111f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011214:	b007      	add	sp, #28
 8011216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121a:	f04f 33ff 	mov.w	r3, #4294967295
 801121e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011222:	603b      	str	r3, [r7, #0]
 8011224:	e7f6      	b.n	8011214 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011226:	fa32 fa01 	lsrs.w	sl, r2, r1
 801122a:	d107      	bne.n	801123c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801122c:	fb09 f602 	mul.w	r6, r9, r2
 8011230:	fbb6 f0f4 	udiv	r0, r6, r4
 8011234:	fb04 6610 	mls	r6, r4, r0, r6
 8011238:	603e      	str	r6, [r7, #0]
 801123a:	e7eb      	b.n	8011214 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801123c:	2601      	movs	r6, #1
 801123e:	fa09 fb01 	lsl.w	fp, r9, r1
 8011242:	408e      	lsls	r6, r1
 8011244:	fbbb f3f4 	udiv	r3, fp, r4
 8011248:	3e01      	subs	r6, #1
 801124a:	9302      	str	r3, [sp, #8]
 801124c:	fb0a f303 	mul.w	r3, sl, r3
 8011250:	4016      	ands	r6, r2
 8011252:	9303      	str	r3, [sp, #12]
 8011254:	4630      	mov	r0, r6
 8011256:	f7ff ffad 	bl	80111b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801125a:	464a      	mov	r2, r9
 801125c:	460b      	mov	r3, r1
 801125e:	4601      	mov	r1, r0
 8011260:	4630      	mov	r0, r6
 8011262:	e9cd 4700 	strd	r4, r7, [sp]
 8011266:	f7ff ffc3 	bl	80111f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801126a:	9b02      	ldr	r3, [sp, #8]
 801126c:	4606      	mov	r6, r0
 801126e:	eb05 0108 	add.w	r1, r5, r8
 8011272:	fb04 bb13 	mls	fp, r4, r3, fp
 8011276:	4658      	mov	r0, fp
 8011278:	f7ff ff9c 	bl	80111b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801127c:	ab05      	add	r3, sp, #20
 801127e:	465a      	mov	r2, fp
 8011280:	e9cd 4300 	strd	r4, r3, [sp]
 8011284:	4603      	mov	r3, r0
 8011286:	4650      	mov	r0, sl
 8011288:	f7ff ffb2 	bl	80111f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801128c:	6839      	ldr	r1, [r7, #0]
 801128e:	9a05      	ldr	r2, [sp, #20]
 8011290:	9b03      	ldr	r3, [sp, #12]
 8011292:	4411      	add	r1, r2
 8011294:	fbb1 f2f4 	udiv	r2, r1, r4
 8011298:	18d3      	adds	r3, r2, r3
 801129a:	fb04 1412 	mls	r4, r4, r2, r1
 801129e:	441e      	add	r6, r3
 80112a0:	603c      	str	r4, [r7, #0]
 80112a2:	4430      	add	r0, r6
 80112a4:	e7b6      	b.n	8011214 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80112a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112aa:	b085      	sub	sp, #20
 80112ac:	f1b0 0900 	subs.w	r9, r0, #0
 80112b0:	461d      	mov	r5, r3
 80112b2:	4617      	mov	r7, r2
 80112b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80112b6:	bfbb      	ittet	lt
 80112b8:	f1c9 0900 	rsblt	r9, r9, #0
 80112bc:	f04f 36ff 	movlt.w	r6, #4294967295
 80112c0:	2601      	movge	r6, #1
 80112c2:	6823      	ldrlt	r3, [r4, #0]
 80112c4:	bfbc      	itt	lt
 80112c6:	425b      	neglt	r3, r3
 80112c8:	6023      	strlt	r3, [r4, #0]
 80112ca:	2a00      	cmp	r2, #0
 80112cc:	da04      	bge.n	80112d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	4257      	negs	r7, r2
 80112d2:	4276      	negs	r6, r6
 80112d4:	425b      	negs	r3, r3
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	2d00      	cmp	r5, #0
 80112da:	4638      	mov	r0, r7
 80112dc:	bfba      	itte	lt
 80112de:	426d      	neglt	r5, r5
 80112e0:	f04f 38ff 	movlt.w	r8, #4294967295
 80112e4:	f04f 0801 	movge.w	r8, #1
 80112e8:	f7ff ff64 	bl	80111b4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80112ec:	ab03      	add	r3, sp, #12
 80112ee:	463a      	mov	r2, r7
 80112f0:	e9cd 5300 	strd	r5, r3, [sp]
 80112f4:	4603      	mov	r3, r0
 80112f6:	4648      	mov	r0, r9
 80112f8:	f7ff ff7a 	bl	80111f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	9a03      	ldr	r2, [sp, #12]
 8011300:	4546      	cmp	r6, r8
 8011302:	441a      	add	r2, r3
 8011304:	fb92 f3f5 	sdiv	r3, r2, r5
 8011308:	4418      	add	r0, r3
 801130a:	fb05 2313 	mls	r3, r5, r3, r2
 801130e:	bf18      	it	ne
 8011310:	4240      	negne	r0, r0
 8011312:	1c72      	adds	r2, r6, #1
 8011314:	6023      	str	r3, [r4, #0]
 8011316:	d105      	bne.n	8011324 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011318:	2b00      	cmp	r3, #0
 801131a:	f1c3 0200 	rsb	r2, r3, #0
 801131e:	db0b      	blt.n	8011338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011320:	6022      	str	r2, [r4, #0]
 8011322:	e006      	b.n	8011332 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011324:	2e01      	cmp	r6, #1
 8011326:	d104      	bne.n	8011332 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011328:	2b00      	cmp	r3, #0
 801132a:	da02      	bge.n	8011332 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801132c:	442b      	add	r3, r5
 801132e:	3801      	subs	r0, #1
 8011330:	6023      	str	r3, [r4, #0]
 8011332:	b005      	add	sp, #20
 8011334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011338:	3801      	subs	r0, #1
 801133a:	1b52      	subs	r2, r2, r5
 801133c:	e7f0      	b.n	8011320 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08011340 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011340:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011344:	4c1c      	ldr	r4, [pc, #112]	; (80113b8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011346:	4605      	mov	r5, r0
 8011348:	6807      	ldr	r7, [r0, #0]
 801134a:	69a3      	ldr	r3, [r4, #24]
 801134c:	b92b      	cbnz	r3, 801135a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801134e:	6840      	ldr	r0, [r0, #4]
 8011350:	e9c5 7000 	strd	r7, r0, [r5]
 8011354:	b004      	add	sp, #16
 8011356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801135a:	f04f 0802 	mov.w	r8, #2
 801135e:	68a2      	ldr	r2, [r4, #8]
 8011360:	ae04      	add	r6, sp, #16
 8011362:	6820      	ldr	r0, [r4, #0]
 8011364:	fb93 f1f8 	sdiv	r1, r3, r8
 8011368:	440a      	add	r2, r1
 801136a:	69e1      	ldr	r1, [r4, #28]
 801136c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011370:	463a      	mov	r2, r7
 8011372:	9600      	str	r6, [sp, #0]
 8011374:	f7ff ff97 	bl	80112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011378:	69a3      	ldr	r3, [r4, #24]
 801137a:	4607      	mov	r7, r0
 801137c:	686a      	ldr	r2, [r5, #4]
 801137e:	6a21      	ldr	r1, [r4, #32]
 8011380:	9600      	str	r6, [sp, #0]
 8011382:	6860      	ldr	r0, [r4, #4]
 8011384:	f7ff ff8f 	bl	80112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011388:	69a3      	ldr	r3, [r4, #24]
 801138a:	6962      	ldr	r2, [r4, #20]
 801138c:	4407      	add	r7, r0
 801138e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011390:	9600      	str	r6, [sp, #0]
 8011392:	68e0      	ldr	r0, [r4, #12]
 8011394:	fb93 f8f8 	sdiv	r8, r3, r8
 8011398:	4442      	add	r2, r8
 801139a:	9203      	str	r2, [sp, #12]
 801139c:	682a      	ldr	r2, [r5, #0]
 801139e:	f7ff ff82 	bl	80112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80113a2:	4680      	mov	r8, r0
 80113a4:	9600      	str	r6, [sp, #0]
 80113a6:	69a3      	ldr	r3, [r4, #24]
 80113a8:	686a      	ldr	r2, [r5, #4]
 80113aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80113ac:	6920      	ldr	r0, [r4, #16]
 80113ae:	f7ff ff7a 	bl	80112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80113b2:	4440      	add	r0, r8
 80113b4:	e7cc      	b.n	8011350 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80113b6:	bf00      	nop
 80113b8:	2400b98c 	.word	0x2400b98c

080113bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80113bc:	4b07      	ldr	r3, [pc, #28]	; (80113dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d109      	bne.n	80113d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80113c4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80113c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80113cc:	8003      	strh	r3, [r0, #0]
 80113ce:	4b04      	ldr	r3, [pc, #16]	; (80113e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80113d0:	881b      	ldrh	r3, [r3, #0]
 80113d2:	3b01      	subs	r3, #1
 80113d4:	1a9b      	subs	r3, r3, r2
 80113d6:	800b      	strh	r3, [r1, #0]
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	2400b978 	.word	0x2400b978
 80113e0:	2400b974 	.word	0x2400b974

080113e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80113e4:	4b07      	ldr	r3, [pc, #28]	; (8011404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80113e6:	b510      	push	{r4, lr}
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d108      	bne.n	8011400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80113ee:	4b06      	ldr	r3, [pc, #24]	; (8011408 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80113f0:	880c      	ldrh	r4, [r1, #0]
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	1b1b      	subs	r3, r3, r4
 80113fc:	8003      	strh	r3, [r0, #0]
 80113fe:	800a      	strh	r2, [r1, #0]
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop
 8011404:	2400b978 	.word	0x2400b978
 8011408:	2400b974 	.word	0x2400b974

0801140c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801140c:	4b0a      	ldr	r3, [pc, #40]	; (8011438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801140e:	b510      	push	{r4, lr}
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	2b01      	cmp	r3, #1
 8011414:	d10e      	bne.n	8011434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011416:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801141a:	8843      	ldrh	r3, [r0, #2]
 801141c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011420:	18ca      	adds	r2, r1, r3
 8011422:	4b06      	ldr	r3, [pc, #24]	; (801143c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011424:	8044      	strh	r4, [r0, #2]
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	1a9b      	subs	r3, r3, r2
 801142a:	8003      	strh	r3, [r0, #0]
 801142c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011430:	8081      	strh	r1, [r0, #4]
 8011432:	80c3      	strh	r3, [r0, #6]
 8011434:	bd10      	pop	{r4, pc}
 8011436:	bf00      	nop
 8011438:	2400b978 	.word	0x2400b978
 801143c:	2400b974 	.word	0x2400b974

08011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011440:	4b08      	ldr	r3, [pc, #32]	; (8011464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d10c      	bne.n	8011462 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011448:	8803      	ldrh	r3, [r0, #0]
 801144a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801144e:	8842      	ldrh	r2, [r0, #2]
 8011450:	8002      	strh	r2, [r0, #0]
 8011452:	185a      	adds	r2, r3, r1
 8011454:	4b04      	ldr	r3, [pc, #16]	; (8011468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	1a9b      	subs	r3, r3, r2
 801145a:	8043      	strh	r3, [r0, #2]
 801145c:	88c3      	ldrh	r3, [r0, #6]
 801145e:	80c1      	strh	r1, [r0, #6]
 8011460:	8083      	strh	r3, [r0, #4]
 8011462:	4770      	bx	lr
 8011464:	2400b978 	.word	0x2400b978
 8011468:	2400b974 	.word	0x2400b974

0801146c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801146c:	4b07      	ldr	r3, [pc, #28]	; (801148c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801146e:	b510      	push	{r4, lr}
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	2b01      	cmp	r3, #1
 8011474:	d108      	bne.n	8011488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011476:	f9b1 3000 	ldrsh.w	r3, [r1]
 801147a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801147e:	8003      	strh	r3, [r0, #0]
 8011480:	8893      	ldrh	r3, [r2, #4]
 8011482:	3b01      	subs	r3, #1
 8011484:	1b1b      	subs	r3, r3, r4
 8011486:	800b      	strh	r3, [r1, #0]
 8011488:	bd10      	pop	{r4, pc}
 801148a:	bf00      	nop
 801148c:	2400b978 	.word	0x2400b978

08011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011490:	4b0a      	ldr	r3, [pc, #40]	; (80114bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011492:	460a      	mov	r2, r1
 8011494:	b510      	push	{r4, lr}
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d10d      	bne.n	80114b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801149c:	8881      	ldrh	r1, [r0, #4]
 801149e:	8803      	ldrh	r3, [r0, #0]
 80114a0:	440b      	add	r3, r1
 80114a2:	4601      	mov	r1, r0
 80114a4:	3b01      	subs	r3, #1
 80114a6:	f821 3b02 	strh.w	r3, [r1], #2
 80114aa:	f7ff ffdf 	bl	801146c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80114ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80114b2:	88c2      	ldrh	r2, [r0, #6]
 80114b4:	80c3      	strh	r3, [r0, #6]
 80114b6:	8082      	strh	r2, [r0, #4]
 80114b8:	bd10      	pop	{r4, pc}
 80114ba:	bf00      	nop
 80114bc:	2400b978 	.word	0x2400b978

080114c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	2300      	movs	r3, #0
 80114c4:	4c0a      	ldr	r4, [pc, #40]	; (80114f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80114c6:	4605      	mov	r5, r0
 80114c8:	460e      	mov	r6, r1
 80114ca:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80114ce:	6820      	ldr	r0, [r4, #0]
 80114d0:	b110      	cbz	r0, 80114d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 80114d2:	6803      	ldr	r3, [r0, #0]
 80114d4:	695b      	ldr	r3, [r3, #20]
 80114d6:	4798      	blx	r3
 80114d8:	6026      	str	r6, [r4, #0]
 80114da:	4630      	mov	r0, r6
 80114dc:	6833      	ldr	r3, [r6, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	4798      	blx	r3
 80114e2:	682b      	ldr	r3, [r5, #0]
 80114e4:	4628      	mov	r0, r5
 80114e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114ec:	4718      	bx	r3
 80114ee:	bf00      	nop
 80114f0:	2400b9bc 	.word	0x2400b9bc

080114f4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80114f4:	4b06      	ldr	r3, [pc, #24]	; (8011510 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80114f6:	2100      	movs	r1, #0
 80114f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80114fc:	4b05      	ldr	r3, [pc, #20]	; (8011514 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80114fe:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8011502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011506:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801150a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801150e:	4770      	bx	lr
 8011510:	2400b974 	.word	0x2400b974
 8011514:	2400b976 	.word	0x2400b976

08011518 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011518:	4b03      	ldr	r3, [pc, #12]	; (8011528 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801151a:	6818      	ldr	r0, [r3, #0]
 801151c:	b110      	cbz	r0, 8011524 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801151e:	6803      	ldr	r3, [r0, #0]
 8011520:	699b      	ldr	r3, [r3, #24]
 8011522:	4718      	bx	r3
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop
 8011528:	2400b9bc 	.word	0x2400b9bc

0801152c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801152c:	4770      	bx	lr
	...

08011530 <_ZN8touchgfx11Application4drawEv>:
 8011530:	4b09      	ldr	r3, [pc, #36]	; (8011558 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011532:	b507      	push	{r0, r1, r2, lr}
 8011534:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011538:	2100      	movs	r1, #0
 801153a:	4b08      	ldr	r3, [pc, #32]	; (801155c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801153c:	9100      	str	r1, [sp, #0]
 801153e:	4669      	mov	r1, sp
 8011540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011544:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011548:	f8ad 3006 	strh.w	r3, [sp, #6]
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011550:	4798      	blx	r3
 8011552:	b003      	add	sp, #12
 8011554:	f85d fb04 	ldr.w	pc, [sp], #4
 8011558:	2400b974 	.word	0x2400b974
 801155c:	2400b976 	.word	0x2400b976

08011560 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8011560:	4b03      	ldr	r3, [pc, #12]	; (8011570 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8011562:	6818      	ldr	r0, [r3, #0]
 8011564:	b110      	cbz	r0, 801156c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011566:	6803      	ldr	r3, [r0, #0]
 8011568:	69db      	ldr	r3, [r3, #28]
 801156a:	4718      	bx	r3
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	2400b9bc 	.word	0x2400b9bc

08011574 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011574:	4b03      	ldr	r3, [pc, #12]	; (8011584 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011576:	6818      	ldr	r0, [r3, #0]
 8011578:	b110      	cbz	r0, 8011580 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801157a:	6803      	ldr	r3, [r0, #0]
 801157c:	6a1b      	ldr	r3, [r3, #32]
 801157e:	4718      	bx	r3
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop
 8011584:	2400b9bc 	.word	0x2400b9bc

08011588 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011588:	2300      	movs	r3, #0
 801158a:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801158e:	4770      	bx	lr

08011590 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011590:	4b03      	ldr	r3, [pc, #12]	; (80115a0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8011592:	6818      	ldr	r0, [r3, #0]
 8011594:	b110      	cbz	r0, 801159c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8011596:	6803      	ldr	r3, [r0, #0]
 8011598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801159a:	4718      	bx	r3
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	2400b9bc 	.word	0x2400b9bc

080115a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4d32      	ldr	r5, [pc, #200]	; (8011670 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 80115a8:	4604      	mov	r4, r0
 80115aa:	6828      	ldr	r0, [r5, #0]
 80115ac:	b140      	cbz	r0, 80115c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80115ae:	7a03      	ldrb	r3, [r0, #8]
 80115b0:	b933      	cbnz	r3, 80115c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80115b2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80115b6:	6803      	ldr	r3, [r0, #0]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115be:	4718      	bx	r3
 80115c0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80115c4:	b97b      	cbnz	r3, 80115e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80115c6:	b170      	cbz	r0, 80115e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80115c8:	7a03      	ldrb	r3, [r0, #8]
 80115ca:	b163      	cbz	r3, 80115e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80115cc:	4b29      	ldr	r3, [pc, #164]	; (8011674 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80115ce:	6818      	ldr	r0, [r3, #0]
 80115d0:	b110      	cbz	r0, 80115d8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80115d2:	6803      	ldr	r3, [r0, #0]
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	4798      	blx	r3
 80115d8:	6828      	ldr	r0, [r5, #0]
 80115da:	6803      	ldr	r3, [r0, #0]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	4798      	blx	r3
 80115e0:	2301      	movs	r3, #1
 80115e2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80115e6:	2500      	movs	r5, #0
 80115e8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80115ec:	42a8      	cmp	r0, r5
 80115ee:	dd0c      	ble.n	801160a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 80115f0:	1963      	adds	r3, r4, r5
 80115f2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80115f6:	b132      	cbz	r2, 8011606 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 80115f8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80115fc:	4413      	add	r3, r2
 80115fe:	6858      	ldr	r0, [r3, #4]
 8011600:	6803      	ldr	r3, [r0, #0]
 8011602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011604:	4798      	blx	r3
 8011606:	3501      	adds	r5, #1
 8011608:	e7ee      	b.n	80115e8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801160a:	2300      	movs	r3, #0
 801160c:	461a      	mov	r2, r3
 801160e:	4298      	cmp	r0, r3
 8011610:	d015      	beq.n	801163e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8011612:	18e1      	adds	r1, r4, r3
 8011614:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8011618:	b16d      	cbz	r5, 8011636 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801161a:	429a      	cmp	r2, r3
 801161c:	d00a      	beq.n	8011634 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801161e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8011622:	4431      	add	r1, r6
 8011624:	684e      	ldr	r6, [r1, #4]
 8011626:	b291      	uxth	r1, r2
 8011628:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801162c:	604e      	str	r6, [r1, #4]
 801162e:	18a1      	adds	r1, r4, r2
 8011630:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8011634:	3201      	adds	r2, #1
 8011636:	3301      	adds	r3, #1
 8011638:	e7e9      	b.n	801160e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801163a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801163e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8011642:	4295      	cmp	r5, r2
 8011644:	dd0d      	ble.n	8011662 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8011646:	1e6b      	subs	r3, r5, #1
 8011648:	b29b      	uxth	r3, r3
 801164a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801164e:	4618      	mov	r0, r3
 8011650:	3104      	adds	r1, #4
 8011652:	4285      	cmp	r5, r0
 8011654:	ddf1      	ble.n	801163a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8011656:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801165a:	3001      	adds	r0, #1
 801165c:	f841 6c04 	str.w	r6, [r1, #-4]
 8011660:	e7f7      	b.n	8011652 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8011662:	4b04      	ldr	r3, [pc, #16]	; (8011674 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8011664:	6818      	ldr	r0, [r3, #0]
 8011666:	b110      	cbz	r0, 801166e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8011668:	6803      	ldr	r3, [r0, #0]
 801166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166c:	e7a5      	b.n	80115ba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801166e:	bd70      	pop	{r4, r5, r6, pc}
 8011670:	2400b9c0 	.word	0x2400b9c0
 8011674:	2400b9bc 	.word	0x2400b9bc

08011678 <_ZN8touchgfx11ApplicationD1Ev>:
 8011678:	4770      	bx	lr

0801167a <_ZN8touchgfx11ApplicationD0Ev>:
 801167a:	b510      	push	{r4, lr}
 801167c:	4604      	mov	r4, r0
 801167e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8011682:	f00a fe06 	bl	801c292 <_ZdlPvj>
 8011686:	4620      	mov	r0, r4
 8011688:	bd10      	pop	{r4, pc}

0801168a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801168a:	b510      	push	{r4, lr}
 801168c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011690:	888a      	ldrh	r2, [r1, #4]
 8011692:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011696:	4422      	add	r2, r4
 8011698:	b212      	sxth	r2, r2
 801169a:	4293      	cmp	r3, r2
 801169c:	da15      	bge.n	80116ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801169e:	8882      	ldrh	r2, [r0, #4]
 80116a0:	4413      	add	r3, r2
 80116a2:	b21b      	sxth	r3, r3
 80116a4:	429c      	cmp	r4, r3
 80116a6:	da10      	bge.n	80116ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116a8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80116ac:	88c9      	ldrh	r1, [r1, #6]
 80116ae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80116b2:	4419      	add	r1, r3
 80116b4:	b209      	sxth	r1, r1
 80116b6:	428a      	cmp	r2, r1
 80116b8:	da07      	bge.n	80116ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116ba:	88c0      	ldrh	r0, [r0, #6]
 80116bc:	4410      	add	r0, r2
 80116be:	b200      	sxth	r0, r0
 80116c0:	4283      	cmp	r3, r0
 80116c2:	bfac      	ite	ge
 80116c4:	2000      	movge	r0, #0
 80116c6:	2001      	movlt	r0, #1
 80116c8:	bd10      	pop	{r4, pc}
 80116ca:	2000      	movs	r0, #0
 80116cc:	e7fc      	b.n	80116c8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080116ce <_ZN8touchgfx4Rect10restrictToEss>:
 80116ce:	f9b0 3000 	ldrsh.w	r3, [r0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	b510      	push	{r4, lr}
 80116d6:	da04      	bge.n	80116e2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80116d8:	8884      	ldrh	r4, [r0, #4]
 80116da:	4423      	add	r3, r4
 80116dc:	8083      	strh	r3, [r0, #4]
 80116de:	2300      	movs	r3, #0
 80116e0:	8003      	strh	r3, [r0, #0]
 80116e2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80116e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80116ea:	1b09      	subs	r1, r1, r4
 80116ec:	428b      	cmp	r3, r1
 80116ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80116f2:	bfc8      	it	gt
 80116f4:	8081      	strhgt	r1, [r0, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	da04      	bge.n	8011704 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80116fa:	88c1      	ldrh	r1, [r0, #6]
 80116fc:	440b      	add	r3, r1
 80116fe:	80c3      	strh	r3, [r0, #6]
 8011700:	2300      	movs	r3, #0
 8011702:	8043      	strh	r3, [r0, #2]
 8011704:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011708:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801170c:	1a52      	subs	r2, r2, r1
 801170e:	4293      	cmp	r3, r2
 8011710:	bfc8      	it	gt
 8011712:	80c2      	strhgt	r2, [r0, #6]
 8011714:	bd10      	pop	{r4, pc}
	...

08011718 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011718:	4b10      	ldr	r3, [pc, #64]	; (801175c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801171a:	b510      	push	{r4, lr}
 801171c:	460c      	mov	r4, r1
 801171e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011722:	4b0f      	ldr	r3, [pc, #60]	; (8011760 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011724:	4620      	mov	r0, r4
 8011726:	f9b3 1000 	ldrsh.w	r1, [r3]
 801172a:	f7ff ffd0 	bl	80116ce <_ZN8touchgfx4Rect10restrictToEss>
 801172e:	4b0d      	ldr	r3, [pc, #52]	; (8011764 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	b190      	cbz	r0, 801175a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011734:	6803      	ldr	r3, [r0, #0]
 8011736:	4621      	mov	r1, r4
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	4798      	blx	r3
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801173e:	6818      	ldr	r0, [r3, #0]
 8011740:	b118      	cbz	r0, 801174a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011742:	6803      	ldr	r3, [r0, #0]
 8011744:	4621      	mov	r1, r4
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	4798      	blx	r3
 801174a:	4b08      	ldr	r3, [pc, #32]	; (801176c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801174c:	4621      	mov	r1, r4
 801174e:	6818      	ldr	r0, [r3, #0]
 8011750:	6803      	ldr	r3, [r0, #0]
 8011752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011756:	69db      	ldr	r3, [r3, #28]
 8011758:	4718      	bx	r3
 801175a:	bd10      	pop	{r4, pc}
 801175c:	2400b976 	.word	0x2400b976
 8011760:	2400b974 	.word	0x2400b974
 8011764:	2400b9bc 	.word	0x2400b9bc
 8011768:	2400b9b8 	.word	0x2400b9b8
 801176c:	2400b980 	.word	0x2400b980

08011770 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	4606      	mov	r6, r0
 8011774:	4608      	mov	r0, r1
 8011776:	460f      	mov	r7, r1
 8011778:	f7fd ff35 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801177c:	b9e8      	cbnz	r0, 80117ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801177e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011782:	f9b6 4000 	ldrsh.w	r4, [r6]
 8011786:	42a5      	cmp	r5, r4
 8011788:	db17      	blt.n	80117ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801178a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801178e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011792:	429a      	cmp	r2, r3
 8011794:	db11      	blt.n	80117ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011796:	88b9      	ldrh	r1, [r7, #4]
 8011798:	440d      	add	r5, r1
 801179a:	88b1      	ldrh	r1, [r6, #4]
 801179c:	440c      	add	r4, r1
 801179e:	b22d      	sxth	r5, r5
 80117a0:	b224      	sxth	r4, r4
 80117a2:	42a5      	cmp	r5, r4
 80117a4:	dc09      	bgt.n	80117ba <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80117a6:	88f8      	ldrh	r0, [r7, #6]
 80117a8:	4410      	add	r0, r2
 80117aa:	88f2      	ldrh	r2, [r6, #6]
 80117ac:	4413      	add	r3, r2
 80117ae:	b200      	sxth	r0, r0
 80117b0:	b21b      	sxth	r3, r3
 80117b2:	4298      	cmp	r0, r3
 80117b4:	bfcc      	ite	gt
 80117b6:	2000      	movgt	r0, #0
 80117b8:	2001      	movle	r0, #1
 80117ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	4604      	mov	r4, r0
 80117c0:	4608      	mov	r0, r1
 80117c2:	460d      	mov	r5, r1
 80117c4:	f7fd ff0f 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80117c8:	b978      	cbnz	r0, 80117ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80117ca:	4620      	mov	r0, r4
 80117cc:	f7fd ff0b 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80117d0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80117d4:	b150      	cbz	r0, 80117ec <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80117d6:	8026      	strh	r6, [r4, #0]
 80117d8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80117dc:	8063      	strh	r3, [r4, #2]
 80117de:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80117e2:	80a3      	strh	r3, [r4, #4]
 80117e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80117e8:	80e3      	strh	r3, [r4, #6]
 80117ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 80117f0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80117f4:	42b1      	cmp	r1, r6
 80117f6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80117fa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80117fe:	460f      	mov	r7, r1
 8011800:	88ed      	ldrh	r5, [r5, #6]
 8011802:	bfa8      	it	ge
 8011804:	4637      	movge	r7, r6
 8011806:	4293      	cmp	r3, r2
 8011808:	4618      	mov	r0, r3
 801180a:	4466      	add	r6, ip
 801180c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011810:	bfa8      	it	ge
 8011812:	4610      	movge	r0, r2
 8011814:	442a      	add	r2, r5
 8011816:	88e5      	ldrh	r5, [r4, #6]
 8011818:	4461      	add	r1, ip
 801181a:	b236      	sxth	r6, r6
 801181c:	8027      	strh	r7, [r4, #0]
 801181e:	442b      	add	r3, r5
 8011820:	b209      	sxth	r1, r1
 8011822:	b212      	sxth	r2, r2
 8011824:	8060      	strh	r0, [r4, #2]
 8011826:	b21b      	sxth	r3, r3
 8011828:	428e      	cmp	r6, r1
 801182a:	bfac      	ite	ge
 801182c:	ebc7 0106 	rsbge	r1, r7, r6
 8011830:	ebc7 0101 	rsblt	r1, r7, r1
 8011834:	429a      	cmp	r2, r3
 8011836:	bfac      	ite	ge
 8011838:	ebc0 0202 	rsbge	r2, r0, r2
 801183c:	ebc0 0203 	rsblt	r2, r0, r3
 8011840:	80a1      	strh	r1, [r4, #4]
 8011842:	80e2      	strh	r2, [r4, #6]
 8011844:	e7d1      	b.n	80117ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08011848 <_ZN8touchgfx11Application11getInstanceEv>:
 8011848:	4b01      	ldr	r3, [pc, #4]	; (8011850 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801184a:	6818      	ldr	r0, [r3, #0]
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	2400b9cc 	.word	0x2400b9cc

08011854 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8011854:	2300      	movs	r3, #0
 8011856:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801185a:	30a8      	adds	r0, #168	; 0xa8
 801185c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8011860:	f802 3b01 	strb.w	r3, [r2], #1
 8011864:	4282      	cmp	r2, r0
 8011866:	d1fb      	bne.n	8011860 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8011868:	4770      	bx	lr

0801186a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801186a:	4603      	mov	r3, r0
 801186c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8011870:	2200      	movs	r2, #0
 8011872:	801a      	strh	r2, [r3, #0]
 8011874:	3308      	adds	r3, #8
 8011876:	f823 2c06 	strh.w	r2, [r3, #-6]
 801187a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801187e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8011882:	428b      	cmp	r3, r1
 8011884:	d1f5      	bne.n	8011872 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8011886:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801188a:	4770      	bx	lr

0801188c <_ZN8touchgfx11ApplicationC1Ev>:
 801188c:	b570      	push	{r4, r5, r6, lr}
 801188e:	4b19      	ldr	r3, [pc, #100]	; (80118f4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8011890:	2500      	movs	r5, #0
 8011892:	4604      	mov	r4, r0
 8011894:	30a8      	adds	r0, #168	; 0xa8
 8011896:	f840 3ca8 	str.w	r3, [r0, #-168]
 801189a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801189e:	f7ff ffe4 	bl	801186a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80118a2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80118a6:	f7ff ffe0 	bl	801186a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80118aa:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80118ae:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80118b2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80118b6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80118ba:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80118be:	490e      	ldr	r1, [pc, #56]	; (80118f8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80118c0:	480e      	ldr	r0, [pc, #56]	; (80118fc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80118c2:	f00a fbdd 	bl	801c080 <CRC_Lock>
 80118c6:	4e0e      	ldr	r6, [pc, #56]	; (8011900 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80118c8:	4b0e      	ldr	r3, [pc, #56]	; (8011904 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80118ca:	b158      	cbz	r0, 80118e4 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80118cc:	801d      	strh	r5, [r3, #0]
 80118ce:	2300      	movs	r3, #0
 80118d0:	4a0d      	ldr	r2, [pc, #52]	; (8011908 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80118d2:	4620      	mov	r0, r4
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	4a0d      	ldr	r2, [pc, #52]	; (801190c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80118d8:	6033      	str	r3, [r6, #0]
 80118da:	6013      	str	r3, [r2, #0]
 80118dc:	f7ff ffba 	bl	8011854 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80118e0:	4620      	mov	r0, r4
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80118e8:	2002      	movs	r0, #2
 80118ea:	801a      	strh	r2, [r3, #0]
 80118ec:	6030      	str	r0, [r6, #0]
 80118ee:	f001 fa1d 	bl	8012d2c <_ZN8touchgfx6Screen4drawEv>
 80118f2:	e7ec      	b.n	80118ce <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80118f4:	0801f20c 	.word	0x0801f20c
 80118f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80118fc:	f407a5c2 	.word	0xf407a5c2
 8011900:	2400b9bc 	.word	0x2400b9bc
 8011904:	24000054 	.word	0x24000054
 8011908:	2400b9cc 	.word	0x2400b9cc
 801190c:	2400b9c0 	.word	0x2400b9c0

08011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8011910:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8011914:	3b01      	subs	r3, #1
 8011916:	b29b      	uxth	r3, r3
 8011918:	428b      	cmp	r3, r1
 801191a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801191e:	b510      	push	{r4, lr}
 8011920:	d908      	bls.n	8011934 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8011922:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011926:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801192a:	681a      	ldr	r2, [r3, #0]
 801192c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8011930:	685a      	ldr	r2, [r3, #4]
 8011932:	6062      	str	r2, [r4, #4]
 8011934:	bd10      	pop	{r4, pc}
	...

08011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	b08f      	sub	sp, #60	; 0x3c
 801193e:	4b94      	ldr	r3, [pc, #592]	; (8011b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8011940:	4683      	mov	fp, r0
 8011942:	ac0a      	add	r4, sp, #40	; 0x28
 8011944:	e884 0006 	stmia.w	r4, {r1, r2}
 8011948:	f9b3 2000 	ldrsh.w	r2, [r3]
 801194c:	4620      	mov	r0, r4
 801194e:	4b91      	ldr	r3, [pc, #580]	; (8011b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8011950:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011954:	f7ff febb 	bl	80116ce <_ZN8touchgfx4Rect10restrictToEss>
 8011958:	4620      	mov	r0, r4
 801195a:	f7fd fe44 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801195e:	2800      	cmp	r0, #0
 8011960:	d16a      	bne.n	8011a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011962:	9403      	str	r4, [sp, #12]
 8011964:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8011968:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801196c:	2400      	movs	r4, #0
 801196e:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8011972:	9301      	str	r3, [sp, #4]
 8011974:	36a0      	adds	r6, #160	; 0xa0
 8011976:	42a5      	cmp	r5, r4
 8011978:	d00d      	beq.n	8011996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801197a:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801197e:	9803      	ldr	r0, [sp, #12]
 8011980:	f7ff fef6 	bl	8011770 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011984:	b128      	cbz	r0, 8011992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8011986:	1e69      	subs	r1, r5, #1
 8011988:	9801      	ldr	r0, [sp, #4]
 801198a:	1b09      	subs	r1, r1, r4
 801198c:	b289      	uxth	r1, r1
 801198e:	f7ff ffbf 	bl	8011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011992:	3401      	adds	r4, #1
 8011994:	e7ef      	b.n	8011976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8011996:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801199a:	1e7b      	subs	r3, r7, #1
 801199c:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80119a0:	9704      	str	r7, [sp, #16]
 80119a2:	9302      	str	r3, [sp, #8]
 80119a4:	2400      	movs	r4, #0
 80119a6:	4655      	mov	r5, sl
 80119a8:	9705      	str	r7, [sp, #20]
 80119aa:	4626      	mov	r6, r4
 80119ac:	9b05      	ldr	r3, [sp, #20]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d078      	beq.n	8011aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80119b2:	9903      	ldr	r1, [sp, #12]
 80119b4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80119b8:	f7ff fe67 	bl	801168a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80119bc:	b360      	cbz	r0, 8011a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80119be:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80119c2:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80119c6:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80119ca:	45e6      	cmp	lr, ip
 80119cc:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80119d0:	db35      	blt.n	8011a3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80119d2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80119d6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80119da:	4472      	add	r2, lr
 80119dc:	4463      	add	r3, ip
 80119de:	b212      	sxth	r2, r2
 80119e0:	b21b      	sxth	r3, r3
 80119e2:	429a      	cmp	r2, r3
 80119e4:	dc2b      	bgt.n	8011a3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80119e6:	fa1f f288 	uxth.w	r2, r8
 80119ea:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80119ee:	45c1      	cmp	r9, r8
 80119f0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80119f4:	4413      	add	r3, r2
 80119f6:	fa1f fc89 	uxth.w	ip, r9
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	fa0f fe83 	sxth.w	lr, r3
 8011a00:	db0f      	blt.n	8011a22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8011a02:	eba3 030c 	sub.w	r3, r3, ip
 8011a06:	1ac9      	subs	r1, r1, r3
 8011a08:	b209      	sxth	r1, r1
 8011a0a:	2900      	cmp	r1, #0
 8011a0c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011a10:	dd12      	ble.n	8011a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011a12:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8011a16:	4604      	mov	r4, r0
 8011a18:	9b05      	ldr	r3, [sp, #20]
 8011a1a:	3d08      	subs	r5, #8
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	9305      	str	r3, [sp, #20]
 8011a20:	e7c4      	b.n	80119ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8011a22:	4461      	add	r1, ip
 8011a24:	b209      	sxth	r1, r1
 8011a26:	4571      	cmp	r1, lr
 8011a28:	dc3a      	bgt.n	8011aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a2a:	eba2 020c 	sub.w	r2, r2, ip
 8011a2e:	b212      	sxth	r2, r2
 8011a30:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8011a34:	2a00      	cmp	r2, #0
 8011a36:	dcee      	bgt.n	8011a16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011a38:	b00f      	add	sp, #60	; 0x3c
 8011a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3e:	45c1      	cmp	r9, r8
 8011a40:	db2e      	blt.n	8011aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a42:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011a46:	4499      	add	r9, r3
 8011a48:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8011a4c:	4498      	add	r8, r3
 8011a4e:	fa0f f989 	sxth.w	r9, r9
 8011a52:	fa0f f888 	sxth.w	r8, r8
 8011a56:	45c1      	cmp	r9, r8
 8011a58:	dc22      	bgt.n	8011aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a5a:	fa1f f28c 	uxth.w	r2, ip
 8011a5e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8011a62:	45e6      	cmp	lr, ip
 8011a64:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8011a68:	4413      	add	r3, r2
 8011a6a:	fa1f f88e 	uxth.w	r8, lr
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	fa0f f983 	sxth.w	r9, r3
 8011a74:	db0a      	blt.n	8011a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8011a76:	eba3 0308 	sub.w	r3, r3, r8
 8011a7a:	1ac9      	subs	r1, r1, r3
 8011a7c:	b209      	sxth	r1, r1
 8011a7e:	2900      	cmp	r1, #0
 8011a80:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8011a84:	ddd8      	ble.n	8011a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011a86:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8011a8a:	e7c4      	b.n	8011a16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011a8c:	4441      	add	r1, r8
 8011a8e:	b209      	sxth	r1, r1
 8011a90:	4549      	cmp	r1, r9
 8011a92:	dc05      	bgt.n	8011aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a94:	eba2 0208 	sub.w	r2, r2, r8
 8011a98:	b212      	sxth	r2, r2
 8011a9a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011a9e:	e7c9      	b.n	8011a34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	e7b9      	b.n	8011a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011aa4:	2c00      	cmp	r4, #0
 8011aa6:	f47f af7d 	bne.w	80119a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8011aaa:	2e00      	cmp	r6, #0
 8011aac:	f000 81e1 	beq.w	8011e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011ab0:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8011ab4:	4655      	mov	r5, sl
 8011ab6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8011aba:	b2b9      	uxth	r1, r7
 8011abc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011ac0:	b2b3      	uxth	r3, r6
 8011ac2:	9105      	str	r1, [sp, #20]
 8011ac4:	9805      	ldr	r0, [sp, #20]
 8011ac6:	441a      	add	r2, r3
 8011ac8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011acc:	b292      	uxth	r2, r2
 8011ace:	4401      	add	r1, r0
 8011ad0:	fa0f f882 	sxth.w	r8, r2
 8011ad4:	b289      	uxth	r1, r1
 8011ad6:	9106      	str	r1, [sp, #24]
 8011ad8:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8011adc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8011ae0:	9b04      	ldr	r3, [sp, #16]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d058      	beq.n	8011b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8011ae6:	9903      	ldr	r1, [sp, #12]
 8011ae8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8011aec:	f7ff fdcd 	bl	801168a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011af0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011af4:	b1d8      	cbz	r0, 8011b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011af6:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8011afa:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8011afe:	4576      	cmp	r6, lr
 8011b00:	dc26      	bgt.n	8011b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8011b02:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8011b06:	44f4      	add	ip, lr
 8011b08:	fa0f fc8c 	sxth.w	ip, ip
 8011b0c:	45e0      	cmp	r8, ip
 8011b0e:	db1f      	blt.n	8011b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8011b10:	428f      	cmp	r7, r1
 8011b12:	fa1f fc81 	uxth.w	ip, r1
 8011b16:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8011b1a:	dc0f      	bgt.n	8011b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8011b1c:	9806      	ldr	r0, [sp, #24]
 8011b1e:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8011b22:	eba0 0c0c 	sub.w	ip, r0, ip
 8011b26:	eba1 010c 	sub.w	r1, r1, ip
 8011b2a:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8011b2e:	4620      	mov	r0, r4
 8011b30:	9904      	ldr	r1, [sp, #16]
 8011b32:	3d08      	subs	r5, #8
 8011b34:	4604      	mov	r4, r0
 8011b36:	3901      	subs	r1, #1
 8011b38:	9104      	str	r1, [sp, #16]
 8011b3a:	e7cf      	b.n	8011adc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8011b3c:	4461      	add	r1, ip
 8011b3e:	b209      	sxth	r1, r1
 8011b40:	4549      	cmp	r1, r9
 8011b42:	dcf5      	bgt.n	8011b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011b44:	9905      	ldr	r1, [sp, #20]
 8011b46:	eba1 0c0c 	sub.w	ip, r1, ip
 8011b4a:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8011b4e:	e7ee      	b.n	8011b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011b50:	428f      	cmp	r7, r1
 8011b52:	dced      	bgt.n	8011b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011b54:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8011b58:	4461      	add	r1, ip
 8011b5a:	b209      	sxth	r1, r1
 8011b5c:	4589      	cmp	r9, r1
 8011b5e:	dbe7      	blt.n	8011b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011b60:	4576      	cmp	r6, lr
 8011b62:	fa1f fc8e 	uxth.w	ip, lr
 8011b66:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8011b6a:	dc08      	bgt.n	8011b7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8011b6c:	eba2 0c0c 	sub.w	ip, r2, ip
 8011b70:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8011b74:	eba1 010c 	sub.w	r1, r1, ip
 8011b78:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8011b7c:	e7d7      	b.n	8011b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011b7e:	4461      	add	r1, ip
 8011b80:	b209      	sxth	r1, r1
 8011b82:	4588      	cmp	r8, r1
 8011b84:	dbd4      	blt.n	8011b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8011b86:	eba3 0c0c 	sub.w	ip, r3, ip
 8011b8a:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8011b8e:	e7ce      	b.n	8011b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8011b90:	2400b976 	.word	0x2400b976
 8011b94:	2400b974 	.word	0x2400b974
 8011b98:	2c00      	cmp	r4, #0
 8011b9a:	f000 816a 	beq.w	8011e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011b9e:	9b02      	ldr	r3, [sp, #8]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	f000 8166 	beq.w	8011e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8011ba6:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8011baa:	9803      	ldr	r0, [sp, #12]
 8011bac:	4621      	mov	r1, r4
 8011bae:	f7ff fddf 	bl	8011770 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011bb2:	b120      	cbz	r0, 8011bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8011bb4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011bb8:	9801      	ldr	r0, [sp, #4]
 8011bba:	f7ff fea9 	bl	8011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011bbe:	9903      	ldr	r1, [sp, #12]
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f7ff fd62 	bl	801168a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	f000 809b 	beq.w	8011d02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8011bcc:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8011bd0:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8011bd4:	b281      	uxth	r1, r0
 8011bd6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8011bda:	9309      	str	r3, [sp, #36]	; 0x24
 8011bdc:	eb01 0c03 	add.w	ip, r1, r3
 8011be0:	b2ab      	uxth	r3, r5
 8011be2:	4285      	cmp	r5, r0
 8011be4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8011be8:	fa1f f98c 	uxth.w	r9, ip
 8011bec:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8011bf0:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8011bf4:	eb03 040c 	add.w	r4, r3, ip
 8011bf8:	b2a4      	uxth	r4, r4
 8011bfa:	9405      	str	r4, [sp, #20]
 8011bfc:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8011c00:	9404      	str	r4, [sp, #16]
 8011c02:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8011c06:	f340 809a 	ble.w	8011d3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8011c0a:	1a5b      	subs	r3, r3, r1
 8011c0c:	4596      	cmp	lr, r2
 8011c0e:	fa0f f589 	sxth.w	r5, r9
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	b21e      	sxth	r6, r3
 8011c16:	dd2e      	ble.n	8011c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8011c18:	9f02      	ldr	r7, [sp, #8]
 8011c1a:	fa1f fe8e 	uxth.w	lr, lr
 8011c1e:	b292      	uxth	r2, r2
 8011c20:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8011c24:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8011c28:	9f04      	ldr	r7, [sp, #16]
 8011c2a:	ebae 0102 	sub.w	r1, lr, r2
 8011c2e:	4486      	add	lr, r0
 8011c30:	1b7f      	subs	r7, r7, r5
 8011c32:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8011c36:	b289      	uxth	r1, r1
 8011c38:	442a      	add	r2, r5
 8011c3a:	fa0f fe8e 	sxth.w	lr, lr
 8011c3e:	b20c      	sxth	r4, r1
 8011c40:	b212      	sxth	r2, r2
 8011c42:	4367      	muls	r7, r4
 8011c44:	ebae 0202 	sub.w	r2, lr, r2
 8011c48:	4372      	muls	r2, r6
 8011c4a:	4297      	cmp	r7, r2
 8011c4c:	db09      	blt.n	8011c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8011c4e:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8011c52:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8011c56:	449c      	add	ip, r3
 8011c58:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011c5c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011c60:	e680      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011c62:	4401      	add	r1, r0
 8011c64:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8011c68:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8011c6c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011c70:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011c74:	e676      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011c76:	9f04      	ldr	r7, [sp, #16]
 8011c78:	42bd      	cmp	r5, r7
 8011c7a:	da27      	bge.n	8011ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8011c7c:	9902      	ldr	r1, [sp, #8]
 8011c7e:	1b7f      	subs	r7, r7, r5
 8011c80:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8011c84:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8011c88:	eb04 010e 	add.w	r1, r4, lr
 8011c8c:	fa1f f881 	uxth.w	r8, r1
 8011c90:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8011c94:	4411      	add	r1, r2
 8011c96:	fa0f f988 	sxth.w	r9, r8
 8011c9a:	eba2 020e 	sub.w	r2, r2, lr
 8011c9e:	eba1 0108 	sub.w	r1, r1, r8
 8011ca2:	4372      	muls	r2, r6
 8011ca4:	b289      	uxth	r1, r1
 8011ca6:	fa0f f881 	sxth.w	r8, r1
 8011caa:	fb08 f707 	mul.w	r7, r8, r7
 8011cae:	42ba      	cmp	r2, r7
 8011cb0:	dc06      	bgt.n	8011cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8011cb2:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8011cb6:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8011cba:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8011cbe:	e7ca      	b.n	8011c56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8011cc0:	4421      	add	r1, r4
 8011cc2:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8011cc6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011cca:	e64b      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011ccc:	9d05      	ldr	r5, [sp, #20]
 8011cce:	2c06      	cmp	r4, #6
 8011cd0:	eba9 0505 	sub.w	r5, r9, r5
 8011cd4:	b2ad      	uxth	r5, r5
 8011cd6:	fa0f fe85 	sxth.w	lr, r5
 8011cda:	d818      	bhi.n	8011d0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8011cdc:	9b04      	ldr	r3, [sp, #16]
 8011cde:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8011ce2:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8011ce6:	1c63      	adds	r3, r4, #1
 8011ce8:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8011cec:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8011cf0:	9b01      	ldr	r3, [sp, #4]
 8011cf2:	9d01      	ldr	r5, [sp, #4]
 8011cf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011cf8:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8011cfc:	805a      	strh	r2, [r3, #2]
 8011cfe:	809e      	strh	r6, [r3, #4]
 8011d00:	80d9      	strh	r1, [r3, #6]
 8011d02:	9b02      	ldr	r3, [sp, #8]
 8011d04:	f1aa 0a08 	sub.w	sl, sl, #8
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	9302      	str	r3, [sp, #8]
 8011d0c:	e747      	b.n	8011b9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8011d0e:	9a02      	ldr	r2, [sp, #8]
 8011d10:	45b6      	cmp	lr, r6
 8011d12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011d16:	db0d      	blt.n	8011d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8011d18:	449c      	add	ip, r3
 8011d1a:	445a      	add	r2, fp
 8011d1c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8011d20:	fa1f fc8c 	uxth.w	ip, ip
 8011d24:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8011d28:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011d2c:	448c      	add	ip, r1
 8011d2e:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8011d32:	e617      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d34:	445a      	add	r2, fp
 8011d36:	44ac      	add	ip, r5
 8011d38:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8011d3c:	e78e      	b.n	8011c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011d3e:	fa1f f18e 	uxth.w	r1, lr
 8011d42:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8011d46:	b293      	uxth	r3, r2
 8011d48:	4596      	cmp	lr, r2
 8011d4a:	eb01 0806 	add.w	r8, r1, r6
 8011d4e:	9306      	str	r3, [sp, #24]
 8011d50:	fa1f f888 	uxth.w	r8, r8
 8011d54:	9f06      	ldr	r7, [sp, #24]
 8011d56:	fa0f f388 	sxth.w	r3, r8
 8011d5a:	9307      	str	r3, [sp, #28]
 8011d5c:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8011d60:	443b      	add	r3, r7
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	9308      	str	r3, [sp, #32]
 8011d66:	da25      	bge.n	8011db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8011d68:	9905      	ldr	r1, [sp, #20]
 8011d6a:	eba3 0308 	sub.w	r3, r3, r8
 8011d6e:	eba2 020e 	sub.w	r2, r2, lr
 8011d72:	1b40      	subs	r0, r0, r5
 8011d74:	eba9 0401 	sub.w	r4, r9, r1
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	b2a4      	uxth	r4, r4
 8011d7c:	b219      	sxth	r1, r3
 8011d7e:	fa0f f984 	sxth.w	r9, r4
 8011d82:	4348      	muls	r0, r1
 8011d84:	fb09 f202 	mul.w	r2, r9, r2
 8011d88:	4282      	cmp	r2, r0
 8011d8a:	9a02      	ldr	r2, [sp, #8]
 8011d8c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011d90:	445a      	add	r2, fp
 8011d92:	dc06      	bgt.n	8011da2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8011d94:	9b07      	ldr	r3, [sp, #28]
 8011d96:	44a4      	add	ip, r4
 8011d98:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8011d9c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8011da0:	e75c      	b.n	8011c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011da2:	9904      	ldr	r1, [sp, #16]
 8011da4:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8011da8:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8011dac:	4433      	add	r3, r6
 8011dae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011db2:	e5d7      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011db4:	9f06      	ldr	r7, [sp, #24]
 8011db6:	9b04      	ldr	r3, [sp, #16]
 8011db8:	1bc9      	subs	r1, r1, r7
 8011dba:	fa0f f789 	sxth.w	r7, r9
 8011dbe:	b289      	uxth	r1, r1
 8011dc0:	429f      	cmp	r7, r3
 8011dc2:	fa0f fe81 	sxth.w	lr, r1
 8011dc6:	dd22      	ble.n	8011e0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8011dc8:	9a05      	ldr	r2, [sp, #20]
 8011dca:	1b40      	subs	r0, r0, r5
 8011dcc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011dd0:	eba9 0202 	sub.w	r2, r9, r2
 8011dd4:	9d07      	ldr	r5, [sp, #28]
 8011dd6:	fb0e f000 	mul.w	r0, lr, r0
 8011dda:	b292      	uxth	r2, r2
 8011ddc:	eba5 0a03 	sub.w	sl, r5, r3
 8011de0:	9b02      	ldr	r3, [sp, #8]
 8011de2:	b214      	sxth	r4, r2
 8011de4:	00db      	lsls	r3, r3, #3
 8011de6:	fb04 fa0a 	mul.w	sl, r4, sl
 8011dea:	445b      	add	r3, fp
 8011dec:	4550      	cmp	r0, sl
 8011dee:	db03      	blt.n	8011df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8011df0:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8011df4:	4494      	add	ip, r2
 8011df6:	e731      	b.n	8011c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8011df8:	9a04      	ldr	r2, [sp, #16]
 8011dfa:	4431      	add	r1, r6
 8011dfc:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8011e00:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8011e04:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8011e08:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011e0c:	e75b      	b.n	8011cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8011e0e:	9b08      	ldr	r3, [sp, #32]
 8011e10:	2c06      	cmp	r4, #6
 8011e12:	eba3 0308 	sub.w	r3, r3, r8
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	b21d      	sxth	r5, r3
 8011e1a:	d813      	bhi.n	8011e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8011e1c:	9b07      	ldr	r3, [sp, #28]
 8011e1e:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8011e22:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8011e26:	1c63      	adds	r3, r4, #1
 8011e28:	9901      	ldr	r1, [sp, #4]
 8011e2a:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8011e2e:	9b01      	ldr	r3, [sp, #4]
 8011e30:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8011e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e38:	805a      	strh	r2, [r3, #2]
 8011e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e3c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8011e40:	809a      	strh	r2, [r3, #4]
 8011e42:	e75e      	b.n	8011d02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8011e44:	9802      	ldr	r0, [sp, #8]
 8011e46:	4575      	cmp	r5, lr
 8011e48:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8011e4c:	db0d      	blt.n	8011e6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8011e4e:	4431      	add	r1, r6
 8011e50:	9b06      	ldr	r3, [sp, #24]
 8011e52:	4458      	add	r0, fp
 8011e54:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011e58:	b289      	uxth	r1, r1
 8011e5a:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8011e5e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011e62:	4419      	add	r1, r3
 8011e64:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8011e68:	e57c      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011e6a:	4458      	add	r0, fp
 8011e6c:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8011e70:	e79c      	b.n	8011dac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8011e72:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 8011e76:	2e07      	cmp	r6, #7
 8011e78:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8011e7c:	d812      	bhi.n	8011ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8011e7e:	1c75      	adds	r5, r6, #1
 8011e80:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8011e84:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8011e88:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8011e8c:	9d01      	ldr	r5, [sp, #4]
 8011e8e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8011e92:	442c      	add	r4, r5
 8011e94:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8011e98:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8011e9c:	8061      	strh	r1, [r4, #2]
 8011e9e:	80a2      	strh	r2, [r4, #4]
 8011ea0:	80e3      	strh	r3, [r4, #6]
 8011ea2:	e5c9      	b.n	8011a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011ea4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8011ea8:	3e01      	subs	r6, #1
 8011eaa:	445c      	add	r4, fp
 8011eac:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	9305      	str	r3, [sp, #20]
 8011eb8:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8011ebc:	1e72      	subs	r2, r6, #1
 8011ebe:	9302      	str	r3, [sp, #8]
 8011ec0:	4691      	mov	r9, r2
 8011ec2:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 8011ec6:	9304      	str	r3, [sp, #16]
 8011ec8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8011ecc:	f1b9 3fff 	cmp.w	r9, #4294967295
 8011ed0:	6818      	ldr	r0, [r3, #0]
 8011ed2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011ed6:	9207      	str	r2, [sp, #28]
 8011ed8:	bf16      	itet	ne
 8011eda:	9905      	ldrne	r1, [sp, #20]
 8011edc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8011ee0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8011ee4:	9306      	str	r3, [sp, #24]
 8011ee6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8011eea:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8011eee:	fb18 f801 	smulbb	r8, r8, r1
 8011ef2:	6859      	ldr	r1, [r3, #4]
 8011ef4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011ef8:	4671      	mov	r1, lr
 8011efa:	a80c      	add	r0, sp, #48	; 0x30
 8011efc:	f7ff fc5e 	bl	80117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011f00:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8011f04:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8011f08:	f04f 0c08 	mov.w	ip, #8
 8011f0c:	9b04      	ldr	r3, [sp, #16]
 8011f0e:	9a02      	ldr	r2, [sp, #8]
 8011f10:	fb10 f001 	smulbb	r0, r0, r1
 8011f14:	fb02 8803 	mla	r8, r2, r3, r8
 8011f18:	eba0 0108 	sub.w	r1, r0, r8
 8011f1c:	fb90 f0fc 	sdiv	r0, r0, ip
 8011f20:	4288      	cmp	r0, r1
 8011f22:	dc20      	bgt.n	8011f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8011f24:	4551      	cmp	r1, sl
 8011f26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011f2a:	da03      	bge.n	8011f34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8011f2c:	b1d9      	cbz	r1, 8011f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8011f2e:	468a      	mov	sl, r1
 8011f30:	464f      	mov	r7, r9
 8011f32:	4635      	mov	r5, r6
 8011f34:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f38:	f119 0f02 	cmn.w	r9, #2
 8011f3c:	d1c6      	bne.n	8011ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011f3e:	4616      	mov	r6, r2
 8011f40:	3201      	adds	r2, #1
 8011f42:	f1a4 0408 	sub.w	r4, r4, #8
 8011f46:	d1b7      	bne.n	8011eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8011f48:	9b01      	ldr	r3, [sp, #4]
 8011f4a:	b2ac      	uxth	r4, r5
 8011f4c:	00ed      	lsls	r5, r5, #3
 8011f4e:	1958      	adds	r0, r3, r5
 8011f50:	1c7b      	adds	r3, r7, #1
 8011f52:	d10b      	bne.n	8011f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8011f54:	4601      	mov	r1, r0
 8011f56:	9803      	ldr	r0, [sp, #12]
 8011f58:	f7ff fc30 	bl	80117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011f5c:	4621      	mov	r1, r4
 8011f5e:	9801      	ldr	r0, [sp, #4]
 8011f60:	f7ff fcd6 	bl	8011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011f64:	e4fe      	b.n	8011964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011f66:	464f      	mov	r7, r9
 8011f68:	4635      	mov	r5, r6
 8011f6a:	e7ed      	b.n	8011f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8011f6c:	9b01      	ldr	r3, [sp, #4]
 8011f6e:	00ff      	lsls	r7, r7, #3
 8011f70:	445d      	add	r5, fp
 8011f72:	19d9      	adds	r1, r3, r7
 8011f74:	445f      	add	r7, fp
 8011f76:	f7ff fc21 	bl	80117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	cb03      	ldmia	r3!, {r0, r1}
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8011f84:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8011f88:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8011f8c:	6869      	ldr	r1, [r5, #4]
 8011f8e:	c303      	stmia	r3!, {r0, r1}
 8011f90:	e7e4      	b.n	8011f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8011f92:	bf00      	nop

08011f94 <_ZN8touchgfx11Application10invalidateEv>:
 8011f94:	4b09      	ldr	r3, [pc, #36]	; (8011fbc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8011f96:	b082      	sub	sp, #8
 8011f98:	2100      	movs	r1, #0
 8011f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f9e:	4b08      	ldr	r3, [pc, #32]	; (8011fc0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8011fa0:	9100      	str	r1, [sp, #0]
 8011fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fa6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011faa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011fae:	ab02      	add	r3, sp, #8
 8011fb0:	e913 0006 	ldmdb	r3, {r1, r2}
 8011fb4:	b002      	add	sp, #8
 8011fb6:	f7ff bcbf 	b.w	8011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011fba:	bf00      	nop
 8011fbc:	2400b974 	.word	0x2400b974
 8011fc0:	2400b976 	.word	0x2400b976

08011fc4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8011fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc8:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8011fcc:	b09b      	sub	sp, #108	; 0x6c
 8011fce:	4604      	mov	r4, r0
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f7fd fb08 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	b940      	cbnz	r0, 8011fec <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8011fda:	4620      	mov	r0, r4
 8011fdc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011fe0:	f7ff fcaa 	bl	8011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011fe4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8011fe8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8011fec:	4bc8      	ldr	r3, [pc, #800]	; (8012310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d03e      	beq.n	8012072 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8011ff4:	4dc7      	ldr	r5, [pc, #796]	; (8012314 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	f7fd faf5 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d137      	bne.n	8012072 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012002:	4628      	mov	r0, r5
 8012004:	f7ff fa02 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012008:	6829      	ldr	r1, [r5, #0]
 801200a:	686a      	ldr	r2, [r5, #4]
 801200c:	4620      	mov	r0, r4
 801200e:	f7ff fc93 	bl	8011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012012:	802e      	strh	r6, [r5, #0]
 8012014:	806e      	strh	r6, [r5, #2]
 8012016:	80ae      	strh	r6, [r5, #4]
 8012018:	80ee      	strh	r6, [r5, #6]
 801201a:	ae09      	add	r6, sp, #36	; 0x24
 801201c:	4630      	mov	r0, r6
 801201e:	f7ff fc24 	bl	801186a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012022:	4abd      	ldr	r2, [pc, #756]	; (8012318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012024:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8012028:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801202c:	8815      	ldrh	r5, [r2, #0]
 801202e:	9202      	str	r2, [sp, #8]
 8012030:	462b      	mov	r3, r5
 8012032:	429f      	cmp	r7, r3
 8012034:	d924      	bls.n	8012080 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8012036:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801203a:	2907      	cmp	r1, #7
 801203c:	d816      	bhi.n	801206c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801203e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012042:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8012046:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801204a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801204e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012052:	1c4a      	adds	r2, r1, #1
 8012054:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8012058:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801205c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8012060:	f8a2 9002 	strh.w	r9, [r2, #2]
 8012064:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012068:	f8a2 c006 	strh.w	ip, [r2, #6]
 801206c:	3301      	adds	r3, #1
 801206e:	b29b      	uxth	r3, r3
 8012070:	e7df      	b.n	8012032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8012072:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1cf      	bne.n	801201a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801207a:	b01b      	add	sp, #108	; 0x6c
 801207c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012080:	462f      	mov	r7, r5
 8012082:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8012086:	42bb      	cmp	r3, r7
 8012088:	d90b      	bls.n	80120a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801208a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801208e:	3701      	adds	r7, #1
 8012090:	4620      	mov	r0, r4
 8012092:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8012096:	b2bf      	uxth	r7, r7
 8012098:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801209c:	f7ff fc4c 	bl	8011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80120a0:	e7ef      	b.n	8012082 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80120a2:	4a9e      	ldr	r2, [pc, #632]	; (801231c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80120a4:	6813      	ldr	r3, [r2, #0]
 80120a6:	4690      	mov	r8, r2
 80120a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	f040 80e4 	bne.w	801227a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80120b2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80120b6:	4629      	mov	r1, r5
 80120b8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80120bc:	2500      	movs	r5, #0
 80120be:	33aa      	adds	r3, #170	; 0xaa
 80120c0:	428f      	cmp	r7, r1
 80120c2:	f103 0308 	add.w	r3, r3, #8
 80120c6:	dd0a      	ble.n	80120de <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80120c8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80120cc:	3101      	adds	r1, #1
 80120ce:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80120d2:	4402      	add	r2, r0
 80120d4:	b212      	sxth	r2, r2
 80120d6:	4295      	cmp	r5, r2
 80120d8:	bfb8      	it	lt
 80120da:	4615      	movlt	r5, r2
 80120dc:	e7f0      	b.n	80120c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80120de:	4b90      	ldr	r3, [pc, #576]	; (8012320 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80120e0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801231c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80120e4:	881b      	ldrh	r3, [r3, #0]
 80120e6:	46d8      	mov	r8, fp
 80120e8:	2b0f      	cmp	r3, #15
 80120ea:	bf8c      	ite	hi
 80120ec:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80120f0:	f04f 0a01 	movls.w	sl, #1
 80120f4:	2300      	movs	r3, #0
 80120f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80120fa:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80120fe:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012102:	4438      	add	r0, r7
 8012104:	b207      	sxth	r7, r0
 8012106:	f8db 0000 	ldr.w	r0, [fp]
 801210a:	42bd      	cmp	r5, r7
 801210c:	6803      	ldr	r3, [r0, #0]
 801210e:	f340 8084 	ble.w	801221a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012116:	4798      	blx	r3
 8012118:	eb07 030a 	add.w	r3, r7, sl
 801211c:	4298      	cmp	r0, r3
 801211e:	da07      	bge.n	8012130 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012120:	4285      	cmp	r5, r0
 8012122:	dd05      	ble.n	8012130 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012124:	4287      	cmp	r7, r0
 8012126:	dd6d      	ble.n	8012204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012128:	2f00      	cmp	r7, #0
 801212a:	dd6b      	ble.n	8012204 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801212c:	4628      	mov	r0, r5
 801212e:	e004      	b.n	801213a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8012130:	4287      	cmp	r7, r0
 8012132:	dcfb      	bgt.n	801212c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8012134:	42a8      	cmp	r0, r5
 8012136:	bfa8      	it	ge
 8012138:	4628      	movge	r0, r5
 801213a:	4b7a      	ldr	r3, [pc, #488]	; (8012324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801213c:	1bc0      	subs	r0, r0, r7
 801213e:	2200      	movs	r2, #0
 8012140:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012148:	f8ad 2014 	strh.w	r2, [sp, #20]
 801214c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012150:	9b02      	ldr	r3, [sp, #8]
 8012152:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012156:	881f      	ldrh	r7, [r3, #0]
 8012158:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801215c:	42bb      	cmp	r3, r7
 801215e:	d9cc      	bls.n	80120fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012160:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012164:	ab07      	add	r3, sp, #28
 8012166:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801216a:	6851      	ldr	r1, [r2, #4]
 801216c:	c303      	stmia	r3!, {r0, r1}
 801216e:	a905      	add	r1, sp, #20
 8012170:	a807      	add	r0, sp, #28
 8012172:	f7ff fa8a 	bl	801168a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012176:	2800      	cmp	r0, #0
 8012178:	d04c      	beq.n	8012214 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801217a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801217e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012182:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8012186:	4686      	mov	lr, r0
 8012188:	4290      	cmp	r0, r2
 801218a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801218e:	4448      	add	r0, r9
 8012190:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8012194:	bfb8      	it	lt
 8012196:	4696      	movlt	lr, r2
 8012198:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801219c:	444a      	add	r2, r9
 801219e:	b280      	uxth	r0, r0
 80121a0:	4299      	cmp	r1, r3
 80121a2:	468c      	mov	ip, r1
 80121a4:	b292      	uxth	r2, r2
 80121a6:	9303      	str	r3, [sp, #12]
 80121a8:	bfb8      	it	lt
 80121aa:	469c      	movlt	ip, r3
 80121ac:	b203      	sxth	r3, r0
 80121ae:	fa0f f982 	sxth.w	r9, r2
 80121b2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80121b6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80121ba:	454b      	cmp	r3, r9
 80121bc:	bfb8      	it	lt
 80121be:	4602      	movlt	r2, r0
 80121c0:	9b03      	ldr	r3, [sp, #12]
 80121c2:	eba2 020e 	sub.w	r2, r2, lr
 80121c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80121ca:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80121ce:	4411      	add	r1, r2
 80121d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80121d4:	4413      	add	r3, r2
 80121d6:	b289      	uxth	r1, r1
 80121d8:	b29b      	uxth	r3, r3
 80121da:	b208      	sxth	r0, r1
 80121dc:	b21a      	sxth	r2, r3
 80121de:	4290      	cmp	r0, r2
 80121e0:	bfb8      	it	lt
 80121e2:	460b      	movlt	r3, r1
 80121e4:	eba3 030c 	sub.w	r3, r3, ip
 80121e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80121ec:	a807      	add	r0, sp, #28
 80121ee:	f7fd f9fa 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80121f2:	b920      	cbnz	r0, 80121fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80121f4:	6823      	ldr	r3, [r4, #0]
 80121f6:	a907      	add	r1, sp, #28
 80121f8:	4620      	mov	r0, r4
 80121fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121fc:	4798      	blx	r3
 80121fe:	3701      	adds	r7, #1
 8012200:	b2bf      	uxth	r7, r7
 8012202:	e7a9      	b.n	8012158 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012204:	f8d8 0000 	ldr.w	r0, [r8]
 8012208:	2101      	movs	r1, #1
 801220a:	6803      	ldr	r3, [r0, #0]
 801220c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012210:	4798      	blx	r3
 8012212:	e772      	b.n	80120fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012214:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012218:	e7e8      	b.n	80121ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221c:	4798      	blx	r3
 801221e:	4b42      	ldr	r3, [pc, #264]	; (8012328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f43f af29 	beq.w	801207a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012228:	2300      	movs	r3, #0
 801222a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801222e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8012232:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8012236:	9b02      	ldr	r3, [sp, #8]
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	429d      	cmp	r5, r3
 801223c:	f67f af1d 	bls.w	801207a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012240:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8012244:	2907      	cmp	r1, #7
 8012246:	d815      	bhi.n	8012274 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8012248:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801224c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8012250:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012254:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012258:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801225c:	1c4a      	adds	r2, r1, #1
 801225e:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8012262:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012266:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801226a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801226e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8012272:	80d7      	strh	r7, [r2, #6]
 8012274:	3301      	adds	r3, #1
 8012276:	b29b      	uxth	r3, r3
 8012278:	e7df      	b.n	801223a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801227a:	2b02      	cmp	r3, #2
 801227c:	f040 8135 	bne.w	80124ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8012280:	4b2a      	ldr	r3, [pc, #168]	; (801232c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8012282:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	2b01      	cmp	r3, #1
 801228a:	f000 809c 	beq.w	80123c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801228e:	9b02      	ldr	r3, [sp, #8]
 8012290:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8012294:	f8b3 b000 	ldrh.w	fp, [r3]
 8012298:	f10b 0b01 	add.w	fp, fp, #1
 801229c:	fa1f fb8b 	uxth.w	fp, fp
 80122a0:	2a00      	cmp	r2, #0
 80122a2:	d0bc      	beq.n	801221e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80122a4:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80122a8:	4659      	mov	r1, fp
 80122aa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80122ae:	f04f 0800 	mov.w	r8, #0
 80122b2:	441d      	add	r5, r3
 80122b4:	b22d      	sxth	r5, r5
 80122b6:	b28b      	uxth	r3, r1
 80122b8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80122bc:	429a      	cmp	r2, r3
 80122be:	f240 80c0 	bls.w	8012442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80122c2:	4427      	add	r7, r4
 80122c4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80122c8:	4608      	mov	r0, r1
 80122ca:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80122ce:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80122d2:	4563      	cmp	r3, ip
 80122d4:	f340 80a2 	ble.w	801241c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80122d8:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80122dc:	4465      	add	r5, ip
 80122de:	b22d      	sxth	r5, r5
 80122e0:	429d      	cmp	r5, r3
 80122e2:	bfa8      	it	ge
 80122e4:	461d      	movge	r5, r3
 80122e6:	3101      	adds	r1, #1
 80122e8:	4680      	mov	r8, r0
 80122ea:	e7e4      	b.n	80122b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80122ec:	d10b      	bne.n	8012306 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80122ee:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80122f2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80122f6:	458c      	cmp	ip, r1
 80122f8:	bfb4      	ite	lt
 80122fa:	469c      	movlt	ip, r3
 80122fc:	46bc      	movge	ip, r7
 80122fe:	4572      	cmp	r2, lr
 8012300:	bfb8      	it	lt
 8012302:	4672      	movlt	r2, lr
 8012304:	e087      	b.n	8012416 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012306:	428a      	cmp	r2, r1
 8012308:	46bc      	mov	ip, r7
 801230a:	bfb8      	it	lt
 801230c:	460a      	movlt	r2, r1
 801230e:	e082      	b.n	8012416 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012310:	2400b9b8 	.word	0x2400b9b8
 8012314:	2400b9c4 	.word	0x2400b9c4
 8012318:	24000054 	.word	0x24000054
 801231c:	2400b980 	.word	0x2400b980
 8012320:	2400b976 	.word	0x2400b976
 8012324:	2400b974 	.word	0x2400b974
 8012328:	2400b97e 	.word	0x2400b97e
 801232c:	2400b978 	.word	0x2400b978
 8012330:	1961      	adds	r1, r4, r5
 8012332:	ab07      	add	r3, sp, #28
 8012334:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8012338:	6849      	ldr	r1, [r1, #4]
 801233a:	c303      	stmia	r3!, {r0, r1}
 801233c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012340:	a807      	add	r0, sp, #28
 8012342:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012346:	2b13      	cmp	r3, #19
 8012348:	440b      	add	r3, r1
 801234a:	bfd8      	it	le
 801234c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012350:	1a9b      	subs	r3, r3, r2
 8012352:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012356:	f8ad 3020 	strh.w	r3, [sp, #32]
 801235a:	f7ff f871 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801235e:	a807      	add	r0, sp, #28
 8012360:	f7fd f941 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012364:	bb78      	cbnz	r0, 80123c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8012366:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801236a:	4425      	add	r5, r4
 801236c:	f8d8 0000 	ldr.w	r0, [r8]
 8012370:	f1bc 0f14 	cmp.w	ip, #20
 8012374:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012378:	f8d0 e000 	ldr.w	lr, [r0]
 801237c:	bfa8      	it	ge
 801237e:	f04f 0c14 	movge.w	ip, #20
 8012382:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012386:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801238a:	fa1f fc8c 	uxth.w	ip, ip
 801238e:	f8cd c000 	str.w	ip, [sp]
 8012392:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8012396:	47d0      	blx	sl
 8012398:	4682      	mov	sl, r0
 801239a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801239e:	a807      	add	r0, sp, #28
 80123a0:	f7ff f834 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	4620      	mov	r0, r4
 80123a8:	a907      	add	r1, sp, #28
 80123aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ac:	4798      	blx	r3
 80123ae:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80123b2:	eba0 000a 	sub.w	r0, r0, sl
 80123b6:	b200      	sxth	r0, r0
 80123b8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80123bc:	b918      	cbnz	r0, 80123c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80123be:	b2b9      	uxth	r1, r7
 80123c0:	4648      	mov	r0, r9
 80123c2:	f7ff faa5 	bl	8011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80123c6:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80123ca:	f1bb 0f00 	cmp.w	fp, #0
 80123ce:	f43f af26 	beq.w	801221e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80123d2:	9b02      	ldr	r3, [sp, #8]
 80123d4:	2700      	movs	r7, #0
 80123d6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	3301      	adds	r3, #1
 80123de:	b29b      	uxth	r3, r3
 80123e0:	b299      	uxth	r1, r3
 80123e2:	00fd      	lsls	r5, r7, #3
 80123e4:	458b      	cmp	fp, r1
 80123e6:	d9a3      	bls.n	8012330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80123e8:	4425      	add	r5, r4
 80123ea:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80123ee:	469c      	mov	ip, r3
 80123f0:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80123f4:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80123f8:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80123fc:	4408      	add	r0, r1
 80123fe:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8012402:	4471      	add	r1, lr
 8012404:	b200      	sxth	r0, r0
 8012406:	b209      	sxth	r1, r1
 8012408:	4288      	cmp	r0, r1
 801240a:	f6bf af6f 	bge.w	80122ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801240e:	4586      	cmp	lr, r0
 8012410:	4672      	mov	r2, lr
 8012412:	bfb8      	it	lt
 8012414:	4602      	movlt	r2, r0
 8012416:	3301      	adds	r3, #1
 8012418:	4667      	mov	r7, ip
 801241a:	e7e1      	b.n	80123e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801241c:	d10c      	bne.n	8012438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801241e:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8012422:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8012426:	4287      	cmp	r7, r0
 8012428:	bfb4      	ite	lt
 801242a:	4608      	movlt	r0, r1
 801242c:	4640      	movge	r0, r8
 801242e:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8012432:	443b      	add	r3, r7
 8012434:	b21b      	sxth	r3, r3
 8012436:	e753      	b.n	80122e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8012438:	4565      	cmp	r5, ip
 801243a:	4640      	mov	r0, r8
 801243c:	bfa8      	it	ge
 801243e:	4665      	movge	r5, ip
 8012440:	e751      	b.n	80122e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8012442:	eb09 0007 	add.w	r0, r9, r7
 8012446:	4427      	add	r7, r4
 8012448:	9203      	str	r2, [sp, #12]
 801244a:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801244e:	f1ba 0f13 	cmp.w	sl, #19
 8012452:	bfde      	ittt	le
 8012454:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8012458:	4455      	addle	r5, sl
 801245a:	b22d      	sxthle	r5, r5
 801245c:	f7fd f8c3 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012460:	9a03      	ldr	r2, [sp, #12]
 8012462:	2800      	cmp	r0, #0
 8012464:	f47f af1c 	bne.w	80122a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8012468:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801246c:	fa1f fa8a 	uxth.w	sl, sl
 8012470:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012474:	1aad      	subs	r5, r5, r2
 8012476:	4829      	ldr	r0, [pc, #164]	; (801251c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8012478:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801247c:	2d14      	cmp	r5, #20
 801247e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8012482:	6800      	ldr	r0, [r0, #0]
 8012484:	bfa8      	it	ge
 8012486:	2514      	movge	r5, #20
 8012488:	f8ad 101c 	strh.w	r1, [sp, #28]
 801248c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012490:	b289      	uxth	r1, r1
 8012492:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012496:	b2ad      	uxth	r5, r5
 8012498:	f8d0 c000 	ldr.w	ip, [r0]
 801249c:	b292      	uxth	r2, r2
 801249e:	4555      	cmp	r5, sl
 80124a0:	bf94      	ite	ls
 80124a2:	9500      	strls	r5, [sp, #0]
 80124a4:	f8cd a000 	strhi.w	sl, [sp]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80124ae:	47a8      	blx	r5
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80124b6:	a907      	add	r1, sp, #28
 80124b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ba:	4620      	mov	r0, r4
 80124bc:	4798      	blx	r3
 80124be:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80124c2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80124c6:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80124ca:	1a5b      	subs	r3, r3, r1
 80124cc:	440a      	add	r2, r1
 80124ce:	b21b      	sxth	r3, r3
 80124d0:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 80124d4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80124d8:	2b00      	cmp	r3, #0
 80124da:	f47f aed8 	bne.w	801228e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80124de:	fa1f f188 	uxth.w	r1, r8
 80124e2:	4648      	mov	r0, r9
 80124e4:	f7ff fa14 	bl	8011910 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80124e8:	e6d1      	b.n	801228e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80124ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80124ee:	42ab      	cmp	r3, r5
 80124f0:	f67f ae95 	bls.w	801221e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80124f4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80124f8:	ab07      	add	r3, sp, #28
 80124fa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80124fe:	6851      	ldr	r1, [r2, #4]
 8012500:	c303      	stmia	r3!, {r0, r1}
 8012502:	a807      	add	r0, sp, #28
 8012504:	f7fd f86f 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012508:	b920      	cbnz	r0, 8012514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801250a:	6823      	ldr	r3, [r4, #0]
 801250c:	a907      	add	r1, sp, #28
 801250e:	4620      	mov	r0, r4
 8012510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012512:	4798      	blx	r3
 8012514:	3501      	adds	r5, #1
 8012516:	b2ad      	uxth	r5, r5
 8012518:	e7e7      	b.n	80124ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801251a:	bf00      	nop
 801251c:	2400b980 	.word	0x2400b980

08012520 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012520:	4b03      	ldr	r3, [pc, #12]	; (8012530 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012522:	2200      	movs	r2, #0
 8012524:	801a      	strh	r2, [r3, #0]
 8012526:	805a      	strh	r2, [r3, #2]
 8012528:	809a      	strh	r2, [r3, #4]
 801252a:	80da      	strh	r2, [r3, #6]
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	2400b9c4 	.word	0x2400b9c4

08012534 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012538:	b09d      	sub	sp, #116	; 0x74
 801253a:	4606      	mov	r6, r0
 801253c:	4614      	mov	r4, r2
 801253e:	468a      	mov	sl, r1
 8012540:	a803      	add	r0, sp, #12
 8012542:	461d      	mov	r5, r3
 8012544:	f000 fd6c 	bl	8013020 <_ZN8touchgfx12TextProviderC1Ev>
 8012548:	6833      	ldr	r3, [r6, #0]
 801254a:	4630      	mov	r0, r6
 801254c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8012550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012552:	4798      	blx	r3
 8012554:	6833      	ldr	r3, [r6, #0]
 8012556:	4607      	mov	r7, r0
 8012558:	4630      	mov	r0, r6
 801255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801255c:	4798      	blx	r3
 801255e:	462a      	mov	r2, r5
 8012560:	2500      	movs	r5, #0
 8012562:	4621      	mov	r1, r4
 8012564:	9000      	str	r0, [sp, #0]
 8012566:	463b      	mov	r3, r7
 8012568:	462c      	mov	r4, r5
 801256a:	46a9      	mov	r9, r5
 801256c:	46a8      	mov	r8, r5
 801256e:	a803      	add	r0, sp, #12
 8012570:	f000 fda9 	bl	80130c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012574:	2300      	movs	r3, #0
 8012576:	9302      	str	r3, [sp, #8]
 8012578:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801257c:	429c      	cmp	r4, r3
 801257e:	d002      	beq.n	8012586 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8012580:	455c      	cmp	r4, fp
 8012582:	bf18      	it	ne
 8012584:	4625      	movne	r5, r4
 8012586:	ab02      	add	r3, sp, #8
 8012588:	4632      	mov	r2, r6
 801258a:	4651      	mov	r1, sl
 801258c:	a803      	add	r0, sp, #12
 801258e:	f001 f88f 	bl	80136b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012592:	4604      	mov	r4, r0
 8012594:	b108      	cbz	r0, 801259a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8012596:	280a      	cmp	r0, #10
 8012598:	d10a      	bne.n	80125b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801259a:	45c1      	cmp	r9, r8
 801259c:	bf38      	it	cc
 801259e:	46c1      	movcc	r9, r8
 80125a0:	f04f 0800 	mov.w	r8, #0
 80125a4:	2c00      	cmp	r4, #0
 80125a6:	d1e5      	bne.n	8012574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80125a8:	4648      	mov	r0, r9
 80125aa:	b01d      	add	sp, #116	; 0x74
 80125ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b0:	9a02      	ldr	r2, [sp, #8]
 80125b2:	2a00      	cmp	r2, #0
 80125b4:	d0de      	beq.n	8012574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80125b6:	7b57      	ldrb	r7, [r2, #13]
 80125b8:	4629      	mov	r1, r5
 80125ba:	6833      	ldr	r3, [r6, #0]
 80125bc:	007f      	lsls	r7, r7, #1
 80125be:	8894      	ldrh	r4, [r2, #4]
 80125c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125c2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80125c6:	7a97      	ldrb	r7, [r2, #10]
 80125c8:	4307      	orrs	r7, r0
 80125ca:	4630      	mov	r0, r6
 80125cc:	4798      	blx	r3
 80125ce:	4438      	add	r0, r7
 80125d0:	4480      	add	r8, r0
 80125d2:	fa1f f888 	uxth.w	r8, r8
 80125d6:	e7e5      	b.n	80125a4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080125d8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80125d8:	b508      	push	{r3, lr}
 80125da:	6803      	ldr	r3, [r0, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	4798      	blx	r3
 80125e0:	b128      	cbz	r0, 80125ee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80125e2:	7b43      	ldrb	r3, [r0, #13]
 80125e4:	7a80      	ldrb	r0, [r0, #10]
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125ec:	4318      	orrs	r0, r3
 80125ee:	bd08      	pop	{r3, pc}

080125f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80125f0:	b40e      	push	{r1, r2, r3}
 80125f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f4:	b09e      	sub	sp, #120	; 0x78
 80125f6:	4605      	mov	r5, r0
 80125f8:	ab23      	add	r3, sp, #140	; 0x8c
 80125fa:	a805      	add	r0, sp, #20
 80125fc:	f853 4b04 	ldr.w	r4, [r3], #4
 8012600:	9303      	str	r3, [sp, #12]
 8012602:	f000 fd0d 	bl	8013020 <_ZN8touchgfx12TextProviderC1Ev>
 8012606:	682b      	ldr	r3, [r5, #0]
 8012608:	4628      	mov	r0, r5
 801260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801260c:	4798      	blx	r3
 801260e:	682b      	ldr	r3, [r5, #0]
 8012610:	4606      	mov	r6, r0
 8012612:	4628      	mov	r0, r5
 8012614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012616:	4798      	blx	r3
 8012618:	4633      	mov	r3, r6
 801261a:	4621      	mov	r1, r4
 801261c:	ae1e      	add	r6, sp, #120	; 0x78
 801261e:	2400      	movs	r4, #0
 8012620:	9000      	str	r0, [sp, #0]
 8012622:	9a03      	ldr	r2, [sp, #12]
 8012624:	a805      	add	r0, sp, #20
 8012626:	f000 fd4e 	bl	80130c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801262a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801262e:	462a      	mov	r2, r5
 8012630:	4633      	mov	r3, r6
 8012632:	4621      	mov	r1, r4
 8012634:	a805      	add	r0, sp, #20
 8012636:	f001 f83b 	bl	80136b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801263a:	b300      	cbz	r0, 801267e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801263c:	280a      	cmp	r0, #10
 801263e:	d01a      	beq.n	8012676 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012640:	9f04      	ldr	r7, [sp, #16]
 8012642:	b1c7      	cbz	r7, 8012676 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012644:	7b78      	ldrb	r0, [r7, #13]
 8012646:	7a3b      	ldrb	r3, [r7, #8]
 8012648:	00c1      	lsls	r1, r0, #3
 801264a:	88aa      	ldrh	r2, [r5, #4]
 801264c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012650:	4319      	orrs	r1, r3
 8012652:	0643      	lsls	r3, r0, #25
 8012654:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012658:	bf48      	it	mi
 801265a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801265e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012662:	bf48      	it	mi
 8012664:	b219      	sxthmi	r1, r3
 8012666:	79fb      	ldrb	r3, [r7, #7]
 8012668:	4303      	orrs	r3, r0
 801266a:	4413      	add	r3, r2
 801266c:	1a5b      	subs	r3, r3, r1
 801266e:	b29b      	uxth	r3, r3
 8012670:	42a3      	cmp	r3, r4
 8012672:	bfc8      	it	gt
 8012674:	b21c      	sxthgt	r4, r3
 8012676:	4633      	mov	r3, r6
 8012678:	462a      	mov	r2, r5
 801267a:	2100      	movs	r1, #0
 801267c:	e7da      	b.n	8012634 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801267e:	b2a0      	uxth	r0, r4
 8012680:	b01e      	add	sp, #120	; 0x78
 8012682:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012686:	b003      	add	sp, #12
 8012688:	4770      	bx	lr

0801268a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801268a:	b40e      	push	{r1, r2, r3}
 801268c:	b570      	push	{r4, r5, r6, lr}
 801268e:	b09d      	sub	sp, #116	; 0x74
 8012690:	4604      	mov	r4, r0
 8012692:	ab21      	add	r3, sp, #132	; 0x84
 8012694:	a803      	add	r0, sp, #12
 8012696:	f853 5b04 	ldr.w	r5, [r3], #4
 801269a:	9302      	str	r3, [sp, #8]
 801269c:	f000 fcc0 	bl	8013020 <_ZN8touchgfx12TextProviderC1Ev>
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	4620      	mov	r0, r4
 80126a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126a6:	4798      	blx	r3
 80126a8:	6823      	ldr	r3, [r4, #0]
 80126aa:	4606      	mov	r6, r0
 80126ac:	4620      	mov	r0, r4
 80126ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126b0:	2401      	movs	r4, #1
 80126b2:	4798      	blx	r3
 80126b4:	4633      	mov	r3, r6
 80126b6:	9000      	str	r0, [sp, #0]
 80126b8:	4629      	mov	r1, r5
 80126ba:	9a02      	ldr	r2, [sp, #8]
 80126bc:	a803      	add	r0, sp, #12
 80126be:	f000 fd02 	bl	80130c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80126c2:	a803      	add	r0, sp, #12
 80126c4:	f001 f874 	bl	80137b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80126c8:	b2a3      	uxth	r3, r4
 80126ca:	b138      	cbz	r0, 80126dc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80126cc:	280a      	cmp	r0, #10
 80126ce:	a803      	add	r0, sp, #12
 80126d0:	bf04      	itt	eq
 80126d2:	3301      	addeq	r3, #1
 80126d4:	b21c      	sxtheq	r4, r3
 80126d6:	f001 f86b 	bl	80137b0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80126da:	e7f5      	b.n	80126c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80126dc:	4618      	mov	r0, r3
 80126de:	b01d      	add	sp, #116	; 0x74
 80126e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e4:	b003      	add	sp, #12
 80126e6:	4770      	bx	lr

080126e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80126e8:	b40e      	push	{r1, r2, r3}
 80126ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ec:	b09e      	sub	sp, #120	; 0x78
 80126ee:	4604      	mov	r4, r0
 80126f0:	ab23      	add	r3, sp, #140	; 0x8c
 80126f2:	a805      	add	r0, sp, #20
 80126f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80126f8:	9303      	str	r3, [sp, #12]
 80126fa:	f000 fc91 	bl	8013020 <_ZN8touchgfx12TextProviderC1Ev>
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	4620      	mov	r0, r4
 8012702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012704:	4798      	blx	r3
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	4606      	mov	r6, r0
 801270a:	4620      	mov	r0, r4
 801270c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801270e:	4798      	blx	r3
 8012710:	4633      	mov	r3, r6
 8012712:	4629      	mov	r1, r5
 8012714:	9000      	str	r0, [sp, #0]
 8012716:	9a03      	ldr	r2, [sp, #12]
 8012718:	a805      	add	r0, sp, #20
 801271a:	f000 fcd4 	bl	80130c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801271e:	ad1e      	add	r5, sp, #120	; 0x78
 8012720:	2100      	movs	r1, #0
 8012722:	26ff      	movs	r6, #255	; 0xff
 8012724:	4622      	mov	r2, r4
 8012726:	a805      	add	r0, sp, #20
 8012728:	f845 1d68 	str.w	r1, [r5, #-104]!
 801272c:	462b      	mov	r3, r5
 801272e:	f000 ffbf 	bl	80136b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012732:	b1d8      	cbz	r0, 801276c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8012734:	280a      	cmp	r0, #10
 8012736:	d012      	beq.n	801275e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8012738:	9804      	ldr	r0, [sp, #16]
 801273a:	b180      	cbz	r0, 801275e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801273c:	7b47      	ldrb	r7, [r0, #13]
 801273e:	7922      	ldrb	r2, [r4, #4]
 8012740:	00fb      	lsls	r3, r7, #3
 8012742:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012746:	7a03      	ldrb	r3, [r0, #8]
 8012748:	430b      	orrs	r3, r1
 801274a:	0679      	lsls	r1, r7, #25
 801274c:	bf44      	itt	mi
 801274e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012752:	b21b      	sxthmi	r3, r3
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	b2db      	uxtb	r3, r3
 8012758:	429e      	cmp	r6, r3
 801275a:	bf28      	it	cs
 801275c:	461e      	movcs	r6, r3
 801275e:	462b      	mov	r3, r5
 8012760:	4622      	mov	r2, r4
 8012762:	2100      	movs	r1, #0
 8012764:	a805      	add	r0, sp, #20
 8012766:	f000 ffa3 	bl	80136b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801276a:	e7e2      	b.n	8012732 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801276c:	4630      	mov	r0, r6
 801276e:	b01e      	add	sp, #120	; 0x78
 8012770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012774:	b003      	add	sp, #12
 8012776:	4770      	bx	lr

08012778 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8012778:	b513      	push	{r0, r1, r4, lr}
 801277a:	6803      	ldr	r3, [r0, #0]
 801277c:	2400      	movs	r4, #0
 801277e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012782:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012786:	f8ad 1004 	strh.w	r1, [sp, #4]
 801278a:	4669      	mov	r1, sp
 801278c:	691b      	ldr	r3, [r3, #16]
 801278e:	9400      	str	r4, [sp, #0]
 8012790:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012794:	4798      	blx	r3
 8012796:	b002      	add	sp, #8
 8012798:	bd10      	pop	{r4, pc}

0801279a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801279a:	b538      	push	{r3, r4, r5, lr}
 801279c:	680b      	ldr	r3, [r1, #0]
 801279e:	460c      	mov	r4, r1
 80127a0:	4605      	mov	r5, r0
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	4798      	blx	r3
 80127a6:	6823      	ldr	r3, [r4, #0]
 80127a8:	4620      	mov	r0, r4
 80127aa:	4629      	mov	r1, r5
 80127ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ae:	4798      	blx	r3
 80127b0:	4628      	mov	r0, r5
 80127b2:	bd38      	pop	{r3, r4, r5, pc}

080127b4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80127b4:	b410      	push	{r4}
 80127b6:	880a      	ldrh	r2, [r1, #0]
 80127b8:	8884      	ldrh	r4, [r0, #4]
 80127ba:	4422      	add	r2, r4
 80127bc:	800a      	strh	r2, [r1, #0]
 80127be:	884a      	ldrh	r2, [r1, #2]
 80127c0:	88c4      	ldrh	r4, [r0, #6]
 80127c2:	4422      	add	r2, r4
 80127c4:	804a      	strh	r2, [r1, #2]
 80127c6:	6940      	ldr	r0, [r0, #20]
 80127c8:	b120      	cbz	r0, 80127d4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d2:	4718      	bx	r3
 80127d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127d8:	4770      	bx	lr

080127da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80127da:	b570      	push	{r4, r5, r6, lr}
 80127dc:	8882      	ldrh	r2, [r0, #4]
 80127de:	460c      	mov	r4, r1
 80127e0:	880b      	ldrh	r3, [r1, #0]
 80127e2:	4605      	mov	r5, r0
 80127e4:	4413      	add	r3, r2
 80127e6:	800b      	strh	r3, [r1, #0]
 80127e8:	884b      	ldrh	r3, [r1, #2]
 80127ea:	88c2      	ldrh	r2, [r0, #6]
 80127ec:	4413      	add	r3, r2
 80127ee:	804b      	strh	r3, [r1, #2]
 80127f0:	1d01      	adds	r1, r0, #4
 80127f2:	4620      	mov	r0, r4
 80127f4:	f7fc feb4 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 80127f8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	dd0b      	ble.n	8012818 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012800:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012804:	2b00      	cmp	r3, #0
 8012806:	dd07      	ble.n	8012818 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012808:	6968      	ldr	r0, [r5, #20]
 801280a:	b128      	cbz	r0, 8012818 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801280c:	6803      	ldr	r3, [r0, #0]
 801280e:	4621      	mov	r1, r4
 8012810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012816:	4718      	bx	r3
 8012818:	bd70      	pop	{r4, r5, r6, pc}
	...

0801281c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	8882      	ldrh	r2, [r0, #4]
 8012820:	460c      	mov	r4, r1
 8012822:	880b      	ldrh	r3, [r1, #0]
 8012824:	4605      	mov	r5, r0
 8012826:	4413      	add	r3, r2
 8012828:	800b      	strh	r3, [r1, #0]
 801282a:	884b      	ldrh	r3, [r1, #2]
 801282c:	88c2      	ldrh	r2, [r0, #6]
 801282e:	4413      	add	r3, r2
 8012830:	804b      	strh	r3, [r1, #2]
 8012832:	1d01      	adds	r1, r0, #4
 8012834:	4620      	mov	r0, r4
 8012836:	f7fc fe93 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 801283a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dd18      	ble.n	8012874 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8012842:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012846:	2b00      	cmp	r3, #0
 8012848:	dd14      	ble.n	8012874 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801284a:	6968      	ldr	r0, [r5, #20]
 801284c:	b128      	cbz	r0, 801285a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801284e:	6803      	ldr	r3, [r0, #0]
 8012850:	4621      	mov	r1, r4
 8012852:	691b      	ldr	r3, [r3, #16]
 8012854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012858:	4718      	bx	r3
 801285a:	4b07      	ldr	r3, [pc, #28]	; (8012878 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	3304      	adds	r3, #4
 8012860:	429d      	cmp	r5, r3
 8012862:	d107      	bne.n	8012874 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8012864:	f7fe fff0 	bl	8011848 <_ZN8touchgfx11Application11getInstanceEv>
 8012868:	6821      	ldr	r1, [r4, #0]
 801286a:	6862      	ldr	r2, [r4, #4]
 801286c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012870:	f7ff b862 	b.w	8011938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012874:	bd70      	pop	{r4, r5, r6, pc}
 8012876:	bf00      	nop
 8012878:	2400b9bc 	.word	0x2400b9bc

0801287c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	4604      	mov	r4, r0
 8012880:	4616      	mov	r6, r2
 8012882:	460d      	mov	r5, r1
 8012884:	b901      	cbnz	r1, 8012888 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8012886:	b192      	cbz	r2, 80128ae <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	4620      	mov	r0, r4
 801288c:	699b      	ldr	r3, [r3, #24]
 801288e:	4798      	blx	r3
 8012890:	88e2      	ldrh	r2, [r4, #6]
 8012892:	88a1      	ldrh	r1, [r4, #4]
 8012894:	4620      	mov	r0, r4
 8012896:	4432      	add	r2, r6
 8012898:	4429      	add	r1, r5
 801289a:	b212      	sxth	r2, r2
 801289c:	b209      	sxth	r1, r1
 801289e:	f7fd f93d 	bl	800fb1c <_ZN8touchgfx8Drawable5setXYEss>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	4620      	mov	r0, r4
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128ac:	4718      	bx	r3
 80128ae:	bd70      	pop	{r4, r5, r6, pc}

080128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80128b0:	b510      	push	{r4, lr}
 80128b2:	2300      	movs	r3, #0
 80128b4:	4604      	mov	r4, r0
 80128b6:	4608      	mov	r0, r1
 80128b8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80128bc:	8023      	strh	r3, [r4, #0]
 80128be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80128c2:	8063      	strh	r3, [r4, #2]
 80128c4:	6803      	ldr	r3, [r0, #0]
 80128c6:	80a1      	strh	r1, [r4, #4]
 80128c8:	4621      	mov	r1, r4
 80128ca:	80e2      	strh	r2, [r4, #6]
 80128cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ce:	4798      	blx	r3
 80128d0:	4620      	mov	r0, r4
 80128d2:	bd10      	pop	{r4, pc}

080128d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80128d4:	b530      	push	{r4, r5, lr}
 80128d6:	8083      	strh	r3, [r0, #4]
 80128d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80128dc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80128e0:	7183      	strb	r3, [r0, #6]
 80128e2:	79c3      	ldrb	r3, [r0, #7]
 80128e4:	6101      	str	r1, [r0, #16]
 80128e6:	f365 0306 	bfi	r3, r5, #0, #7
 80128ea:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80128ee:	8282      	strh	r2, [r0, #20]
 80128f0:	f365 13c7 	bfi	r3, r5, #7, #1
 80128f4:	71c3      	strb	r3, [r0, #7]
 80128f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80128fa:	7203      	strb	r3, [r0, #8]
 80128fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012900:	7243      	strb	r3, [r0, #9]
 8012902:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012906:	8143      	strh	r3, [r0, #10]
 8012908:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801290c:	8183      	strh	r3, [r0, #12]
 801290e:	4b01      	ldr	r3, [pc, #4]	; (8012914 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8012910:	6003      	str	r3, [r0, #0]
 8012912:	bd30      	pop	{r4, r5, pc}
 8012914:	0801f2c0 	.word	0x0801f2c0

08012918 <_ZNK8touchgfx9ConstFont4findEt>:
 8012918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801291a:	6904      	ldr	r4, [r0, #16]
 801291c:	b3bc      	cbz	r4, 801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801291e:	88a3      	ldrh	r3, [r4, #4]
 8012920:	8a82      	ldrh	r2, [r0, #20]
 8012922:	1acb      	subs	r3, r1, r3
 8012924:	f102 32ff 	add.w	r2, r2, #4294967295
 8012928:	d431      	bmi.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801292a:	4293      	cmp	r3, r2
 801292c:	dd0c      	ble.n	8012948 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801292e:	230e      	movs	r3, #14
 8012930:	fb03 4302 	mla	r3, r3, r2, r4
 8012934:	889b      	ldrh	r3, [r3, #4]
 8012936:	1a5b      	subs	r3, r3, r1
 8012938:	1ad3      	subs	r3, r2, r3
 801293a:	429a      	cmp	r2, r3
 801293c:	db27      	blt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801293e:	2b00      	cmp	r3, #0
 8012940:	bfbc      	itt	lt
 8012942:	2302      	movlt	r3, #2
 8012944:	fb92 f3f3 	sdivlt	r3, r2, r3
 8012948:	2500      	movs	r5, #0
 801294a:	260e      	movs	r6, #14
 801294c:	4295      	cmp	r5, r2
 801294e:	dc1e      	bgt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012950:	fb06 4003 	mla	r0, r6, r3, r4
 8012954:	8887      	ldrh	r7, [r0, #4]
 8012956:	42b9      	cmp	r1, r7
 8012958:	d01a      	beq.n	8012990 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801295a:	d20d      	bcs.n	8012978 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801295c:	1e5a      	subs	r2, r3, #1
 801295e:	4295      	cmp	r5, r2
 8012960:	dc15      	bgt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012962:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8012966:	1a5b      	subs	r3, r3, r1
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	429a      	cmp	r2, r3
 801296c:	db0f      	blt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801296e:	429d      	cmp	r5, r3
 8012970:	ddec      	ble.n	801294c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012972:	1953      	adds	r3, r2, r5
 8012974:	105b      	asrs	r3, r3, #1
 8012976:	e7e9      	b.n	801294c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012978:	1c5d      	adds	r5, r3, #1
 801297a:	42aa      	cmp	r2, r5
 801297c:	db07      	blt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801297e:	8a43      	ldrh	r3, [r0, #18]
 8012980:	1acb      	subs	r3, r1, r3
 8012982:	442b      	add	r3, r5
 8012984:	429d      	cmp	r5, r3
 8012986:	dc02      	bgt.n	801298e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012988:	429a      	cmp	r2, r3
 801298a:	dadf      	bge.n	801294c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801298c:	e7f1      	b.n	8012972 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801298e:	2000      	movs	r0, #0
 8012990:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012992 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012994:	4604      	mov	r4, r0
 8012996:	4617      	mov	r7, r2
 8012998:	461e      	mov	r6, r3
 801299a:	b911      	cbnz	r1, 80129a2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801299c:	2500      	movs	r5, #0
 801299e:	4628      	mov	r0, r5
 80129a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129a2:	290a      	cmp	r1, #10
 80129a4:	d0fa      	beq.n	801299c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80129a6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80129aa:	4291      	cmp	r1, r2
 80129ac:	d0f6      	beq.n	801299c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80129ae:	f242 020b 	movw	r2, #8203	; 0x200b
 80129b2:	4291      	cmp	r1, r2
 80129b4:	d0f2      	beq.n	801299c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80129b6:	f7ff ffaf 	bl	8012918 <_ZNK8touchgfx9ConstFont4findEt>
 80129ba:	4605      	mov	r5, r0
 80129bc:	b950      	cbnz	r0, 80129d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	4620      	mov	r0, r4
 80129c2:	691b      	ldr	r3, [r3, #16]
 80129c4:	4798      	blx	r3
 80129c6:	4601      	mov	r1, r0
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7ff ffa5 	bl	8012918 <_ZNK8touchgfx9ConstFont4findEt>
 80129ce:	4605      	mov	r5, r0
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d0e3      	beq.n	801299c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80129d4:	6823      	ldr	r3, [r4, #0]
 80129d6:	4629      	mov	r1, r5
 80129d8:	4620      	mov	r0, r4
 80129da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129dc:	4798      	blx	r3
 80129de:	6038      	str	r0, [r7, #0]
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	4620      	mov	r0, r4
 80129e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129e6:	4798      	blx	r3
 80129e8:	7030      	strb	r0, [r6, #0]
 80129ea:	e7d8      	b.n	801299e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080129ec <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80129ec:	2000      	movs	r0, #0
 80129ee:	4770      	bx	lr

080129f0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80129f0:	2001      	movs	r0, #1
 80129f2:	4770      	bx	lr

080129f4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80129f4:	2002      	movs	r0, #2
 80129f6:	4770      	bx	lr

080129f8 <_ZN8touchgfx6ScreenD1Ev>:
 80129f8:	4770      	bx	lr

080129fa <_ZN8touchgfx12GestureEventD1Ev>:
 80129fa:	4770      	bx	lr

080129fc <_ZN8touchgfx9DragEventD1Ev>:
 80129fc:	4770      	bx	lr

080129fe <_ZN8touchgfx10ClickEventD1Ev>:
 80129fe:	4770      	bx	lr

08012a00 <_ZN8touchgfx10ClickEventD0Ev>:
 8012a00:	b510      	push	{r4, lr}
 8012a02:	4604      	mov	r4, r0
 8012a04:	210c      	movs	r1, #12
 8012a06:	f009 fc44 	bl	801c292 <_ZdlPvj>
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	bd10      	pop	{r4, pc}

08012a0e <_ZN8touchgfx9DragEventD0Ev>:
 8012a0e:	b510      	push	{r4, lr}
 8012a10:	4604      	mov	r4, r0
 8012a12:	2110      	movs	r1, #16
 8012a14:	f009 fc3d 	bl	801c292 <_ZdlPvj>
 8012a18:	4620      	mov	r0, r4
 8012a1a:	bd10      	pop	{r4, pc}

08012a1c <_ZN8touchgfx12GestureEventD0Ev>:
 8012a1c:	b510      	push	{r4, lr}
 8012a1e:	4604      	mov	r4, r0
 8012a20:	210c      	movs	r1, #12
 8012a22:	f009 fc36 	bl	801c292 <_ZdlPvj>
 8012a26:	4620      	mov	r0, r4
 8012a28:	bd10      	pop	{r4, pc}

08012a2a <_ZN8touchgfx6ScreenD0Ev>:
 8012a2a:	b510      	push	{r4, lr}
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	213c      	movs	r1, #60	; 0x3c
 8012a30:	f009 fc2f 	bl	801c292 <_ZdlPvj>
 8012a34:	4620      	mov	r0, r4
 8012a36:	bd10      	pop	{r4, pc}

08012a38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8012a38:	b530      	push	{r4, r5, lr}
 8012a3a:	460d      	mov	r5, r1
 8012a3c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012a3e:	b087      	sub	sp, #28
 8012a40:	4604      	mov	r4, r0
 8012a42:	b301      	cbz	r1, 8012a86 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8012a44:	a801      	add	r0, sp, #4
 8012a46:	f7ff ff33 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012a4a:	892a      	ldrh	r2, [r5, #8]
 8012a4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012a50:	7928      	ldrb	r0, [r5, #4]
 8012a52:	1ad2      	subs	r2, r2, r3
 8012a54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012a56:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012a5a:	441a      	add	r2, r3
 8012a5c:	896b      	ldrh	r3, [r5, #10]
 8012a5e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012a62:	f88d 0010 	strb.w	r0, [sp, #16]
 8012a66:	1b5b      	subs	r3, r3, r5
 8012a68:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8012a6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012a6c:	442b      	add	r3, r5
 8012a6e:	4d07      	ldr	r5, [pc, #28]	; (8012a8c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012a70:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012a74:	a903      	add	r1, sp, #12
 8012a76:	9503      	str	r5, [sp, #12]
 8012a78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012a7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012a80:	6803      	ldr	r3, [r0, #0]
 8012a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a84:	4798      	blx	r3
 8012a86:	b007      	add	sp, #28
 8012a88:	bd30      	pop	{r4, r5, pc}
 8012a8a:	bf00      	nop
 8012a8c:	0801f340 	.word	0x0801f340

08012a90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8012a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012a96:	b08a      	sub	sp, #40	; 0x28
 8012a98:	4604      	mov	r4, r0
 8012a9a:	460d      	mov	r5, r1
 8012a9c:	b113      	cbz	r3, 8012aa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8012a9e:	790b      	ldrb	r3, [r1, #4]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d044      	beq.n	8012b2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012aa4:	f104 0804 	add.w	r8, r4, #4
 8012aa8:	a803      	add	r0, sp, #12
 8012aaa:	4641      	mov	r1, r8
 8012aac:	f7ff ff00 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ab0:	792b      	ldrb	r3, [r5, #4]
 8012ab2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8012ab6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8012aba:	b983      	cbnz	r3, 8012ade <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8012abc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8012ac0:	892a      	ldrh	r2, [r5, #8]
 8012ac2:	88e9      	ldrh	r1, [r5, #6]
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	1b92      	subs	r2, r2, r6
 8012ac8:	9301      	str	r3, [sp, #4]
 8012aca:	1bc9      	subs	r1, r1, r7
 8012acc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8012ad0:	b212      	sxth	r2, r2
 8012ad2:	9300      	str	r3, [sp, #0]
 8012ad4:	b209      	sxth	r1, r1
 8012ad6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012ada:	f7fc fc5f 	bl	800f39c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8012ade:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012ae0:	b329      	cbz	r1, 8012b2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012ae2:	a805      	add	r0, sp, #20
 8012ae4:	f7ff fee4 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ae8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012aec:	792b      	ldrb	r3, [r5, #4]
 8012aee:	a907      	add	r1, sp, #28
 8012af0:	1abf      	subs	r7, r7, r2
 8012af2:	88ea      	ldrh	r2, [r5, #6]
 8012af4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012af6:	4417      	add	r7, r2
 8012af8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8012afa:	f88d 3020 	strb.w	r3, [sp, #32]
 8012afe:	4417      	add	r7, r2
 8012b00:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8012b04:	1ab6      	subs	r6, r6, r2
 8012b06:	892a      	ldrh	r2, [r5, #8]
 8012b08:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8012b0c:	4416      	add	r6, r2
 8012b0e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012b10:	4416      	add	r6, r2
 8012b12:	4a08      	ldr	r2, [pc, #32]	; (8012b34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8012b14:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8012b18:	2600      	movs	r6, #0
 8012b1a:	9207      	str	r2, [sp, #28]
 8012b1c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8012b20:	6803      	ldr	r3, [r0, #0]
 8012b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b24:	4798      	blx	r3
 8012b26:	792b      	ldrb	r3, [r5, #4]
 8012b28:	b10b      	cbz	r3, 8012b2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012b2a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012b2e:	b00a      	add	sp, #40	; 0x28
 8012b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b34:	0801f318 	.word	0x0801f318

08012b38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8012b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b3c:	460c      	mov	r4, r1
 8012b3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012b40:	b088      	sub	sp, #32
 8012b42:	4605      	mov	r5, r0
 8012b44:	2900      	cmp	r1, #0
 8012b46:	d06d      	beq.n	8012c24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8012b48:	4668      	mov	r0, sp
 8012b4a:	f7ff feb1 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b4e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8012b50:	88e3      	ldrh	r3, [r4, #6]
 8012b52:	f9bd 8000 	ldrsh.w	r8, [sp]
 8012b56:	440b      	add	r3, r1
 8012b58:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8012b5c:	b21b      	sxth	r3, r3
 8012b5e:	4543      	cmp	r3, r8
 8012b60:	db31      	blt.n	8012bc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012b62:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8012b66:	44c4      	add	ip, r8
 8012b68:	fa0f fc8c 	sxth.w	ip, ip
 8012b6c:	4563      	cmp	r3, ip
 8012b6e:	da2a      	bge.n	8012bc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012b70:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8012b72:	8926      	ldrh	r6, [r4, #8]
 8012b74:	4416      	add	r6, r2
 8012b76:	b236      	sxth	r6, r6
 8012b78:	42be      	cmp	r6, r7
 8012b7a:	db24      	blt.n	8012bc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012b7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012b80:	4438      	add	r0, r7
 8012b82:	b200      	sxth	r0, r0
 8012b84:	4286      	cmp	r6, r0
 8012b86:	da1e      	bge.n	8012bc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012b88:	8963      	ldrh	r3, [r4, #10]
 8012b8a:	4419      	add	r1, r3
 8012b8c:	b209      	sxth	r1, r1
 8012b8e:	4541      	cmp	r1, r8
 8012b90:	db08      	blt.n	8012ba4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012b92:	4561      	cmp	r1, ip
 8012b94:	da06      	bge.n	8012ba4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012b96:	89a3      	ldrh	r3, [r4, #12]
 8012b98:	441a      	add	r2, r3
 8012b9a:	b212      	sxth	r2, r2
 8012b9c:	42ba      	cmp	r2, r7
 8012b9e:	db01      	blt.n	8012ba4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012ba0:	4282      	cmp	r2, r0
 8012ba2:	db10      	blt.n	8012bc6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012ba4:	4b21      	ldr	r3, [pc, #132]	; (8012c2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8012ba6:	a904      	add	r1, sp, #16
 8012ba8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012baa:	9304      	str	r3, [sp, #16]
 8012bac:	2302      	movs	r3, #2
 8012bae:	f88d 3014 	strb.w	r3, [sp, #20]
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012bb8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012bbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012bc0:	6803      	ldr	r3, [r0, #0]
 8012bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc4:	4798      	blx	r3
 8012bc6:	1d29      	adds	r1, r5, #4
 8012bc8:	a802      	add	r0, sp, #8
 8012bca:	f7ff fe71 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012bce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012bd2:	88e0      	ldrh	r0, [r4, #6]
 8012bd4:	eba3 0808 	sub.w	r8, r3, r8
 8012bd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012bdc:	7921      	ldrb	r1, [r4, #4]
 8012bde:	fa1f f888 	uxth.w	r8, r8
 8012be2:	1bdf      	subs	r7, r3, r7
 8012be4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8012be8:	b2bb      	uxth	r3, r7
 8012bea:	4440      	add	r0, r8
 8012bec:	8922      	ldrh	r2, [r4, #8]
 8012bee:	8967      	ldrh	r7, [r4, #10]
 8012bf0:	4460      	add	r0, ip
 8012bf2:	89a4      	ldrh	r4, [r4, #12]
 8012bf4:	441a      	add	r2, r3
 8012bf6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8012bf8:	44b8      	add	r8, r7
 8012bfa:	4423      	add	r3, r4
 8012bfc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8012c00:	4432      	add	r2, r6
 8012c02:	44e0      	add	r8, ip
 8012c04:	4433      	add	r3, r6
 8012c06:	4c0a      	ldr	r4, [pc, #40]	; (8012c30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8012c08:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012c0a:	f88d 1014 	strb.w	r1, [sp, #20]
 8012c0e:	a904      	add	r1, sp, #16
 8012c10:	9404      	str	r4, [sp, #16]
 8012c12:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012c16:	f8ad 801a 	strh.w	r8, [sp, #26]
 8012c1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c1e:	6803      	ldr	r3, [r0, #0]
 8012c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c22:	4798      	blx	r3
 8012c24:	b008      	add	sp, #32
 8012c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c2a:	bf00      	nop
 8012c2c:	0801f318 	.word	0x0801f318
 8012c30:	0801f32c 	.word	0x0801f32c

08012c34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8012c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c36:	4604      	mov	r4, r0
 8012c38:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8012c3c:	3201      	adds	r2, #1
 8012c3e:	d112      	bne.n	8012c66 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8012c40:	2500      	movs	r5, #0
 8012c42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012c46:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012c4a:	6803      	ldr	r3, [r0, #0]
 8012c4c:	9500      	str	r5, [sp, #0]
 8012c4e:	466d      	mov	r5, sp
 8012c50:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012c54:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012c58:	4629      	mov	r1, r5
 8012c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c5c:	4798      	blx	r3
 8012c5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012c62:	e884 0003 	stmia.w	r4, {r0, r1}
 8012c66:	4620      	mov	r0, r4
 8012c68:	b003      	add	sp, #12
 8012c6a:	bd30      	pop	{r4, r5, pc}

08012c6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8012c6c:	b513      	push	{r0, r1, r4, lr}
 8012c6e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012c72:	4604      	mov	r4, r0
 8012c74:	3301      	adds	r3, #1
 8012c76:	d109      	bne.n	8012c8c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8012c78:	4601      	mov	r1, r0
 8012c7a:	4668      	mov	r0, sp
 8012c7c:	f7ff fe18 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012c80:	f8bd 3000 	ldrh.w	r3, [sp]
 8012c84:	8423      	strh	r3, [r4, #32]
 8012c86:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012c8a:	8463      	strh	r3, [r4, #34]	; 0x22
 8012c8c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8012c90:	b002      	add	sp, #8
 8012c92:	bd10      	pop	{r4, pc}

08012c94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8012c94:	b513      	push	{r0, r1, r4, lr}
 8012c96:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	d109      	bne.n	8012cb4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8012ca0:	4601      	mov	r1, r0
 8012ca2:	4668      	mov	r0, sp
 8012ca4:	f7ff fe04 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ca8:	f8bd 3000 	ldrh.w	r3, [sp]
 8012cac:	8423      	strh	r3, [r4, #32]
 8012cae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012cb2:	8463      	strh	r3, [r4, #34]	; 0x22
 8012cb4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012cb8:	b002      	add	sp, #8
 8012cba:	bd10      	pop	{r4, pc}

08012cbc <_ZN8touchgfx6ScreenC1Ev>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	4b17      	ldr	r3, [pc, #92]	; (8012d1c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	4a17      	ldr	r2, [pc, #92]	; (8012d20 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	f845 3b04 	str.w	r3, [r5], #4
 8012cca:	2300      	movs	r3, #0
 8012ccc:	6042      	str	r2, [r0, #4]
 8012cce:	4604      	mov	r4, r0
 8012cd0:	8103      	strh	r3, [r0, #8]
 8012cd2:	8143      	strh	r3, [r0, #10]
 8012cd4:	8183      	strh	r3, [r0, #12]
 8012cd6:	81c3      	strh	r3, [r0, #14]
 8012cd8:	8203      	strh	r3, [r0, #16]
 8012cda:	8243      	strh	r3, [r0, #18]
 8012cdc:	8283      	strh	r3, [r0, #20]
 8012cde:	82c3      	strh	r3, [r0, #22]
 8012ce0:	6203      	str	r3, [r0, #32]
 8012ce2:	8483      	strh	r3, [r0, #36]	; 0x24
 8012ce4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012ce6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012cea:	6343      	str	r3, [r0, #52]	; 0x34
 8012cec:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8012cf0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8012cf4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8012cf8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8012cfc:	4b09      	ldr	r3, [pc, #36]	; (8012d24 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8012cfe:	4628      	mov	r0, r5
 8012d00:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8012d06:	4a08      	ldr	r2, [pc, #32]	; (8012d28 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8012d08:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012d0c:	4798      	blx	r3
 8012d0e:	6863      	ldr	r3, [r4, #4]
 8012d10:	4628      	mov	r0, r5
 8012d12:	4631      	mov	r1, r6
 8012d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d16:	4798      	blx	r3
 8012d18:	4620      	mov	r0, r4
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}
 8012d1c:	0801f354 	.word	0x0801f354
 8012d20:	0801eef8 	.word	0x0801eef8
 8012d24:	2400b976 	.word	0x2400b976
 8012d28:	2400b974 	.word	0x2400b974

08012d2c <_ZN8touchgfx6Screen4drawEv>:
 8012d2c:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8012d2e:	b507      	push	{r0, r1, r2, lr}
 8012d30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012d34:	2100      	movs	r1, #0
 8012d36:	4b08      	ldr	r3, [pc, #32]	; (8012d58 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8012d38:	9100      	str	r1, [sp, #0]
 8012d3a:	4669      	mov	r1, sp
 8012d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d40:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012d44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d48:	6803      	ldr	r3, [r0, #0]
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	4798      	blx	r3
 8012d4e:	b003      	add	sp, #12
 8012d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d54:	2400b974 	.word	0x2400b974
 8012d58:	2400b976 	.word	0x2400b976

08012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8012d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012d64:	b089      	sub	sp, #36	; 0x24
 8012d66:	4680      	mov	r8, r0
 8012d68:	460c      	mov	r4, r1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	4615      	mov	r5, r2
 8012d6e:	dd0e      	ble.n	8012d8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012d70:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	dd0a      	ble.n	8012d8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012d78:	4628      	mov	r0, r5
 8012d7a:	f7ff ff5b 	bl	8012c34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012d7e:	4621      	mov	r1, r4
 8012d80:	f7fe fc83 	bl	801168a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012d84:	69eb      	ldr	r3, [r5, #28]
 8012d86:	b928      	cbnz	r0, 8012d94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8012d88:	461d      	mov	r5, r3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1f4      	bne.n	8012d78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8012d8e:	b009      	add	sp, #36	; 0x24
 8012d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d94:	ae04      	add	r6, sp, #16
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f000 80b5 	beq.w	8012f06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012d9c:	682b      	ldr	r3, [r5, #0]
 8012d9e:	4629      	mov	r1, r5
 8012da0:	a802      	add	r0, sp, #8
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	4798      	blx	r3
 8012da6:	4628      	mov	r0, r5
 8012da8:	f7ff ff60 	bl	8012c6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012dac:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8012db0:	4407      	add	r7, r0
 8012db2:	4628      	mov	r0, r5
 8012db4:	f7ff ff6e 	bl	8012c94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012db8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012dbc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012dc0:	b23f      	sxth	r7, r7
 8012dc2:	4418      	add	r0, r3
 8012dc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012dc8:	4621      	mov	r1, r4
 8012dca:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012dce:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012dd8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8012ddc:	f7fc fbc0 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 8012de0:	4628      	mov	r0, r5
 8012de2:	f7ff ff27 	bl	8012c34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012de6:	ab06      	add	r3, sp, #24
 8012de8:	4602      	mov	r2, r0
 8012dea:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012dee:	e883 0003 	stmia.w	r3, {r0, r1}
 8012df2:	4611      	mov	r1, r2
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fc fbb3 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 8012dfa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012dfe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012e02:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8012e06:	4299      	cmp	r1, r3
 8012e08:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8012e0c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8012e10:	d10b      	bne.n	8012e2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e12:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e16:	4552      	cmp	r2, sl
 8012e18:	d107      	bne.n	8012e2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e1a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012e1e:	455a      	cmp	r2, fp
 8012e20:	d103      	bne.n	8012e2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012e22:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012e26:	454a      	cmp	r2, r9
 8012e28:	d06d      	beq.n	8012f06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012e2a:	f1bb 0f00 	cmp.w	fp, #0
 8012e2e:	dd65      	ble.n	8012efc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012e30:	f1b9 0f00 	cmp.w	r9, #0
 8012e34:	dd62      	ble.n	8012efc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012e36:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012e3a:	fa1f f08a 	uxth.w	r0, sl
 8012e3e:	4552      	cmp	r2, sl
 8012e40:	9000      	str	r0, [sp, #0]
 8012e42:	da12      	bge.n	8012e6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	9b00      	ldr	r3, [sp, #0]
 8012e48:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012e4c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012e50:	1a9a      	subs	r2, r3, r2
 8012e52:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012e56:	4631      	mov	r1, r6
 8012e58:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012e5c:	4640      	mov	r0, r8
 8012e5e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012e62:	69ea      	ldr	r2, [r5, #28]
 8012e64:	f7ff ff7a 	bl	8012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012e68:	9b01      	ldr	r3, [sp, #4]
 8012e6a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012e6e:	b29f      	uxth	r7, r3
 8012e70:	429a      	cmp	r2, r3
 8012e72:	da0d      	bge.n	8012e90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8012e74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012e78:	1aba      	subs	r2, r7, r2
 8012e7a:	f8ad a012 	strh.w	sl, [sp, #18]
 8012e7e:	4631      	mov	r1, r6
 8012e80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012e84:	4640      	mov	r0, r8
 8012e86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012e8a:	69ea      	ldr	r2, [r5, #28]
 8012e8c:	f7ff ff66 	bl	8012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012e90:	8822      	ldrh	r2, [r4, #0]
 8012e92:	445f      	add	r7, fp
 8012e94:	88a3      	ldrh	r3, [r4, #4]
 8012e96:	b2bf      	uxth	r7, r7
 8012e98:	4413      	add	r3, r2
 8012e9a:	b23a      	sxth	r2, r7
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	b219      	sxth	r1, r3
 8012ea0:	4291      	cmp	r1, r2
 8012ea2:	dd0d      	ble.n	8012ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8012ea4:	1bdb      	subs	r3, r3, r7
 8012ea6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012eaa:	f8ad a012 	strh.w	sl, [sp, #18]
 8012eae:	4631      	mov	r1, r6
 8012eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012eb4:	4640      	mov	r0, r8
 8012eb6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012eba:	69ea      	ldr	r2, [r5, #28]
 8012ebc:	f7ff ff4e 	bl	8012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012ec0:	88e2      	ldrh	r2, [r4, #6]
 8012ec2:	8863      	ldrh	r3, [r4, #2]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	9a00      	ldr	r2, [sp, #0]
 8012ec8:	444a      	add	r2, r9
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	fa1f f982 	uxth.w	r9, r2
 8012ed0:	b219      	sxth	r1, r3
 8012ed2:	fa0f f289 	sxth.w	r2, r9
 8012ed6:	428a      	cmp	r2, r1
 8012ed8:	da15      	bge.n	8012f06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012eda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012ede:	eba3 0309 	sub.w	r3, r3, r9
 8012ee2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012ee6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012eea:	4631      	mov	r1, r6
 8012eec:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012ef0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012ef4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ef8:	69ea      	ldr	r2, [r5, #28]
 8012efa:	e001      	b.n	8012f00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8012efc:	69ea      	ldr	r2, [r5, #28]
 8012efe:	4621      	mov	r1, r4
 8012f00:	4640      	mov	r0, r8
 8012f02:	f7ff ff2b 	bl	8012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012f06:	4628      	mov	r0, r5
 8012f08:	f7ff fe94 	bl	8012c34 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012f0c:	6861      	ldr	r1, [r4, #4]
 8012f0e:	4602      	mov	r2, r0
 8012f10:	4633      	mov	r3, r6
 8012f12:	6820      	ldr	r0, [r4, #0]
 8012f14:	c303      	stmia	r3!, {r0, r1}
 8012f16:	4611      	mov	r1, r2
 8012f18:	4630      	mov	r0, r6
 8012f1a:	f7fc fb21 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 8012f1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f77f af33 	ble.w	8012d8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012f28:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	f77f af2e 	ble.w	8012d8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012f32:	4628      	mov	r0, r5
 8012f34:	f7ff fe9a 	bl	8012c6c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012f38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012f3c:	1a18      	subs	r0, r3, r0
 8012f3e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012f42:	4628      	mov	r0, r5
 8012f44:	f7ff fea6 	bl	8012c94 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012f48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012f4c:	4631      	mov	r1, r6
 8012f4e:	1a18      	subs	r0, r3, r0
 8012f50:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012f54:	4628      	mov	r0, r5
 8012f56:	682b      	ldr	r3, [r5, #0]
 8012f58:	689b      	ldr	r3, [r3, #8]
 8012f5a:	4798      	blx	r3
 8012f5c:	e717      	b.n	8012d8e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08012f5e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8012f5e:	b570      	push	{r4, r5, r6, lr}
 8012f60:	1d06      	adds	r6, r0, #4
 8012f62:	b086      	sub	sp, #24
 8012f64:	460c      	mov	r4, r1
 8012f66:	2300      	movs	r3, #0
 8012f68:	4631      	mov	r1, r6
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	a802      	add	r0, sp, #8
 8012f6e:	9301      	str	r3, [sp, #4]
 8012f70:	f7ff fc9e 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012f74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012f78:	8822      	ldrh	r2, [r4, #0]
 8012f7a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8012f7e:	1ad2      	subs	r2, r2, r3
 8012f80:	8863      	ldrh	r3, [r4, #2]
 8012f82:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012f86:	1a5b      	subs	r3, r3, r1
 8012f88:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012f8c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012f90:	aa01      	add	r2, sp, #4
 8012f92:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012f96:	4630      	mov	r0, r6
 8012f98:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012f9c:	a904      	add	r1, sp, #16
 8012f9e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012fa2:	f7fc fbb5 	bl	800f710 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8012fa6:	9a01      	ldr	r2, [sp, #4]
 8012fa8:	b11a      	cbz	r2, 8012fb2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8012faa:	4621      	mov	r1, r4
 8012fac:	4628      	mov	r0, r5
 8012fae:	f7ff fed5 	bl	8012d5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012fb2:	b006      	add	sp, #24
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}

08012fb6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	b530      	push	{r4, r5, lr}
 8012fba:	4604      	mov	r4, r0
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8012fc2:	460d      	mov	r5, r1
 8012fc4:	466b      	mov	r3, sp
 8012fc6:	6851      	ldr	r1, [r2, #4]
 8012fc8:	c303      	stmia	r3!, {r0, r1}
 8012fca:	4629      	mov	r1, r5
 8012fcc:	4668      	mov	r0, sp
 8012fce:	f7fc fac7 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 8012fd2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012fd6:	b12b      	cbz	r3, 8012fe4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8012fd8:	4669      	mov	r1, sp
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f7ff ffbf 	bl	8012f5e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8012fe0:	b005      	add	sp, #20
 8012fe2:	bd30      	pop	{r4, r5, pc}
 8012fe4:	3404      	adds	r4, #4
 8012fe6:	a802      	add	r0, sp, #8
 8012fe8:	4621      	mov	r1, r4
 8012fea:	f7ff fc61 	bl	80128b0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012fee:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ff2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8012ff6:	4669      	mov	r1, sp
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	1a9b      	subs	r3, r3, r2
 8012ffc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013000:	f8ad 3000 	strh.w	r3, [sp]
 8013004:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013008:	1a9b      	subs	r3, r3, r2
 801300a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801300e:	f7fc fb46 	bl	800f69e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8013012:	e7e5      	b.n	8012fe0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08013014 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013014:	460b      	mov	r3, r1
 8013016:	680a      	ldr	r2, [r1, #0]
 8013018:	1d01      	adds	r1, r0, #4
 801301a:	6992      	ldr	r2, [r2, #24]
 801301c:	4618      	mov	r0, r3
 801301e:	4710      	bx	r2

08013020 <_ZN8touchgfx12TextProviderC1Ev>:
 8013020:	b538      	push	{r3, r4, r5, lr}
 8013022:	2500      	movs	r5, #0
 8013024:	2302      	movs	r3, #2
 8013026:	4604      	mov	r4, r0
 8013028:	220e      	movs	r2, #14
 801302a:	7403      	strb	r3, [r0, #16]
 801302c:	4629      	mov	r1, r5
 801302e:	6145      	str	r5, [r0, #20]
 8013030:	7605      	strb	r5, [r0, #24]
 8013032:	83c5      	strh	r5, [r0, #30]
 8013034:	8405      	strh	r5, [r0, #32]
 8013036:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013038:	8705      	strh	r5, [r0, #56]	; 0x38
 801303a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801303c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8013040:	e9c0 5500 	strd	r5, r5, [r0]
 8013044:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8013048:	304c      	adds	r0, #76	; 0x4c
 801304a:	f009 fae7 	bl	801c61c <memset>
 801304e:	2301      	movs	r3, #1
 8013050:	4620      	mov	r0, r4
 8013052:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8013056:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801305a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801305e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8013062:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8013066:	f7f0 f9b1 	bl	80033cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801306a:	4620      	mov	r0, r4
 801306c:	bd38      	pop	{r3, r4, r5, pc}

0801306e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801306e:	b530      	push	{r4, r5, lr}
 8013070:	2500      	movs	r5, #0
 8013072:	2401      	movs	r4, #1
 8013074:	6843      	ldr	r3, [r0, #4]
 8013076:	b913      	cbnz	r3, 801307e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013078:	6803      	ldr	r3, [r0, #0]
 801307a:	b313      	cbz	r3, 80130c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801307c:	6043      	str	r3, [r0, #4]
 801307e:	7e03      	ldrb	r3, [r0, #24]
 8013080:	b143      	cbz	r3, 8013094 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8013082:	6943      	ldr	r3, [r0, #20]
 8013084:	b12b      	cbz	r3, 8013092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013086:	881a      	ldrh	r2, [r3, #0]
 8013088:	b11a      	cbz	r2, 8013092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801308a:	1c9a      	adds	r2, r3, #2
 801308c:	6142      	str	r2, [r0, #20]
 801308e:	8818      	ldrh	r0, [r3, #0]
 8013090:	bd30      	pop	{r4, r5, pc}
 8013092:	7605      	strb	r5, [r0, #24]
 8013094:	6843      	ldr	r3, [r0, #4]
 8013096:	8819      	ldrh	r1, [r3, #0]
 8013098:	b199      	cbz	r1, 80130c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801309a:	1c9a      	adds	r2, r3, #2
 801309c:	2902      	cmp	r1, #2
 801309e:	6042      	str	r2, [r0, #4]
 80130a0:	d1f5      	bne.n	801308e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80130a2:	7c03      	ldrb	r3, [r0, #16]
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d8e5      	bhi.n	8013074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80130a8:	1c5a      	adds	r2, r3, #1
 80130aa:	3302      	adds	r3, #2
 80130ac:	7402      	strb	r2, [r0, #16]
 80130ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80130b2:	6143      	str	r3, [r0, #20]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d0dd      	beq.n	8013074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80130b8:	881b      	ldrh	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d0da      	beq.n	8013074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80130be:	7604      	strb	r4, [r0, #24]
 80130c0:	e7d8      	b.n	8013074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80130c2:	2000      	movs	r0, #0
 80130c4:	e7e4      	b.n	8013090 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080130c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80130c6:	6001      	str	r1, [r0, #0]
 80130c8:	2100      	movs	r1, #0
 80130ca:	b430      	push	{r4, r5}
 80130cc:	6041      	str	r1, [r0, #4]
 80130ce:	6815      	ldr	r5, [r2, #0]
 80130d0:	6085      	str	r5, [r0, #8]
 80130d2:	6852      	ldr	r2, [r2, #4]
 80130d4:	6443      	str	r3, [r0, #68]	; 0x44
 80130d6:	9b02      	ldr	r3, [sp, #8]
 80130d8:	60c2      	str	r2, [r0, #12]
 80130da:	7401      	strb	r1, [r0, #16]
 80130dc:	6141      	str	r1, [r0, #20]
 80130de:	7601      	strb	r1, [r0, #24]
 80130e0:	8701      	strh	r1, [r0, #56]	; 0x38
 80130e2:	8401      	strh	r1, [r0, #32]
 80130e4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80130e8:	6483      	str	r3, [r0, #72]	; 0x48
 80130ea:	bc30      	pop	{r4, r5}
 80130ec:	f7f0 b96e 	b.w	80033cc <_ZN8touchgfx12TextProvider18initializeInternalEv>

080130f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80130f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130f2:	4605      	mov	r5, r0
 80130f4:	4608      	mov	r0, r1
 80130f6:	b1f1      	cbz	r1, 8013136 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80130f8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80130fc:	460b      	mov	r3, r1
 80130fe:	f101 0708 	add.w	r7, r1, #8
 8013102:	4622      	mov	r2, r4
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	3308      	adds	r3, #8
 8013108:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801310c:	4626      	mov	r6, r4
 801310e:	42bb      	cmp	r3, r7
 8013110:	c603      	stmia	r6!, {r0, r1}
 8013112:	4634      	mov	r4, r6
 8013114:	d1f6      	bne.n	8013104 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	6030      	str	r0, [r6, #0]
 801311a:	4610      	mov	r0, r2
 801311c:	889b      	ldrh	r3, [r3, #4]
 801311e:	80b3      	strh	r3, [r6, #4]
 8013120:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8013124:	015b      	lsls	r3, r3, #5
 8013126:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801312a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801312e:	430b      	orrs	r3, r1
 8013130:	425b      	negs	r3, r3
 8013132:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013138 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	460c      	mov	r4, r1
 801313c:	6811      	ldr	r1, [r2, #0]
 801313e:	4610      	mov	r0, r2
 8013140:	68cd      	ldr	r5, [r1, #12]
 8013142:	4619      	mov	r1, r3
 8013144:	47a8      	blx	r5
 8013146:	2800      	cmp	r0, #0
 8013148:	bf08      	it	eq
 801314a:	4620      	moveq	r0, r4
 801314c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013150 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8013150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013152:	4604      	mov	r4, r0
 8013154:	4615      	mov	r5, r2
 8013156:	4608      	mov	r0, r1
 8013158:	b93a      	cbnz	r2, 801316a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801315a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801315e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8013162:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8013166:	4628      	mov	r0, r5
 8013168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801316a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801316e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8013172:	8893      	ldrh	r3, [r2, #4]
 8013174:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8013178:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801317c:	79ee      	ldrb	r6, [r5, #7]
 801317e:	4316      	orrs	r6, r2
 8013180:	19da      	adds	r2, r3, r7
 8013182:	b291      	uxth	r1, r2
 8013184:	b2b7      	uxth	r7, r6
 8013186:	291d      	cmp	r1, #29
 8013188:	d87b      	bhi.n	8013282 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801318a:	2201      	movs	r2, #1
 801318c:	10f6      	asrs	r6, r6, #3
 801318e:	408a      	lsls	r2, r1
 8013190:	4974      	ldr	r1, [pc, #464]	; (8013364 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8013192:	420a      	tst	r2, r1
 8013194:	d12e      	bne.n	80131f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8013196:	f412 7f60 	tst.w	r2, #896	; 0x380
 801319a:	d072      	beq.n	8013282 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801319c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80131a0:	462b      	mov	r3, r5
 80131a2:	f105 0e08 	add.w	lr, r5, #8
 80131a6:	4615      	mov	r5, r2
 80131a8:	6818      	ldr	r0, [r3, #0]
 80131aa:	3308      	adds	r3, #8
 80131ac:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80131b0:	4694      	mov	ip, r2
 80131b2:	4573      	cmp	r3, lr
 80131b4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80131b8:	4662      	mov	r2, ip
 80131ba:	d1f5      	bne.n	80131a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80131bc:	6818      	ldr	r0, [r3, #0]
 80131be:	f8cc 0000 	str.w	r0, [ip]
 80131c2:	889b      	ldrh	r3, [r3, #4]
 80131c4:	f8ac 3004 	strh.w	r3, [ip, #4]
 80131c8:	b2b3      	uxth	r3, r6
 80131ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80131ce:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80131d2:	1aca      	subs	r2, r1, r3
 80131d4:	1bcf      	subs	r7, r1, r7
 80131d6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80131da:	b292      	uxth	r2, r2
 80131dc:	1afb      	subs	r3, r7, r3
 80131de:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80131e2:	10d2      	asrs	r2, r2, #3
 80131e4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80131e8:	4302      	orrs	r2, r0
 80131ea:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80131ee:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80131f2:	e7b8      	b.n	8013166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80131f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80131f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80131fa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80131fc:	f640 6333 	movw	r3, #3635	; 0xe33
 8013200:	4299      	cmp	r1, r3
 8013202:	d110      	bne.n	8013226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8013204:	6803      	ldr	r3, [r0, #0]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	4798      	blx	r3
 801320a:	7b41      	ldrb	r1, [r0, #13]
 801320c:	00cb      	lsls	r3, r1, #3
 801320e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013212:	7a03      	ldrb	r3, [r0, #8]
 8013214:	0648      	lsls	r0, r1, #25
 8013216:	ea43 0302 	orr.w	r3, r3, r2
 801321a:	bf44      	itt	mi
 801321c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013220:	b21b      	sxthmi	r3, r3
 8013222:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013226:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801322a:	462a      	mov	r2, r5
 801322c:	f105 0c08 	add.w	ip, r5, #8
 8013230:	443b      	add	r3, r7
 8013232:	4433      	add	r3, r6
 8013234:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013238:	b29b      	uxth	r3, r3
 801323a:	4635      	mov	r5, r6
 801323c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013240:	6810      	ldr	r0, [r2, #0]
 8013242:	3208      	adds	r2, #8
 8013244:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013248:	4637      	mov	r7, r6
 801324a:	4562      	cmp	r2, ip
 801324c:	c703      	stmia	r7!, {r0, r1}
 801324e:	463e      	mov	r6, r7
 8013250:	d1f6      	bne.n	8013240 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8013252:	6810      	ldr	r0, [r2, #0]
 8013254:	6038      	str	r0, [r7, #0]
 8013256:	8892      	ldrh	r2, [r2, #4]
 8013258:	80ba      	strh	r2, [r7, #4]
 801325a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801325e:	10db      	asrs	r3, r3, #3
 8013260:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013264:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801326c:	4313      	orrs	r3, r2
 801326e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8013272:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013276:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801327a:	1a9b      	subs	r3, r3, r2
 801327c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8013280:	e771      	b.n	8013166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013282:	f023 0204 	bic.w	r2, r3, #4
 8013286:	f640 611b 	movw	r1, #3611	; 0xe1b
 801328a:	428a      	cmp	r2, r1
 801328c:	d003      	beq.n	8013296 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801328e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8013292:	4293      	cmp	r3, r2
 8013294:	d120      	bne.n	80132d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8013296:	3b01      	subs	r3, #1
 8013298:	4602      	mov	r2, r0
 801329a:	4629      	mov	r1, r5
 801329c:	4620      	mov	r0, r4
 801329e:	b29b      	uxth	r3, r3
 80132a0:	f7ff ff4a 	bl	8013138 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80132a4:	7b41      	ldrb	r1, [r0, #13]
 80132a6:	00cb      	lsls	r3, r1, #3
 80132a8:	0649      	lsls	r1, r1, #25
 80132aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80132ae:	7a03      	ldrb	r3, [r0, #8]
 80132b0:	ea43 0302 	orr.w	r3, r3, r2
 80132b4:	bf44      	itt	mi
 80132b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80132ba:	b21b      	sxthmi	r3, r3
 80132bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80132c0:	7b6b      	ldrb	r3, [r5, #13]
 80132c2:	7aaa      	ldrb	r2, [r5, #10]
 80132c4:	005b      	lsls	r3, r3, #1
 80132c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132ca:	4313      	orrs	r3, r2
 80132cc:	115a      	asrs	r2, r3, #5
 80132ce:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80132d2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80132d6:	e035      	b.n	8013344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80132d8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80132dc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80132e0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80132e4:	7a2a      	ldrb	r2, [r5, #8]
 80132e6:	ea42 0201 	orr.w	r2, r2, r1
 80132ea:	f640 6109 	movw	r1, #3593	; 0xe09
 80132ee:	bf1c      	itt	ne
 80132f0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80132f4:	b212      	sxthne	r2, r2
 80132f6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80132fa:	f023 0210 	bic.w	r2, r3, #16
 80132fe:	428a      	cmp	r2, r1
 8013300:	d003      	beq.n	801330a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8013302:	f640 6213 	movw	r2, #3603	; 0xe13
 8013306:	4293      	cmp	r3, r2
 8013308:	d129      	bne.n	801335e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801330a:	7b6e      	ldrb	r6, [r5, #13]
 801330c:	4629      	mov	r1, r5
 801330e:	0076      	lsls	r6, r6, #1
 8013310:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013314:	7aae      	ldrb	r6, [r5, #10]
 8013316:	4316      	orrs	r6, r2
 8013318:	f640 6213 	movw	r2, #3603	; 0xe13
 801331c:	4293      	cmp	r3, r2
 801331e:	4602      	mov	r2, r0
 8013320:	4620      	mov	r0, r4
 8013322:	bf16      	itet	ne
 8013324:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013328:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801332c:	b29b      	uxthne	r3, r3
 801332e:	f7ff ff03 	bl	8013138 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013332:	7b43      	ldrb	r3, [r0, #13]
 8013334:	7a82      	ldrb	r2, [r0, #10]
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801333c:	4313      	orrs	r3, r2
 801333e:	1af6      	subs	r6, r6, r3
 8013340:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8013344:	7b69      	ldrb	r1, [r5, #13]
 8013346:	00cb      	lsls	r3, r1, #3
 8013348:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801334c:	7a2b      	ldrb	r3, [r5, #8]
 801334e:	4313      	orrs	r3, r2
 8013350:	064a      	lsls	r2, r1, #25
 8013352:	bf44      	itt	mi
 8013354:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013358:	b21b      	sxthmi	r3, r3
 801335a:	1bdb      	subs	r3, r3, r7
 801335c:	e747      	b.n	80131ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801335e:	2300      	movs	r3, #0
 8013360:	e7b7      	b.n	80132d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8013362:	bf00      	nop
 8013364:	3fc00079 	.word	0x3fc00079

08013368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8013368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801336c:	4604      	mov	r4, r0
 801336e:	b942      	cbnz	r2, 8013382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8013370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013374:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8013378:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801337c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013380:	e047      	b.n	8013412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013382:	7b51      	ldrb	r1, [r2, #13]
 8013384:	8893      	ldrh	r3, [r2, #4]
 8013386:	010d      	lsls	r5, r1, #4
 8013388:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801338c:	79d5      	ldrb	r5, [r2, #7]
 801338e:	4305      	orrs	r5, r0
 8013390:	2d04      	cmp	r5, #4
 8013392:	bfcc      	ite	gt
 8013394:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8013398:	f04f 0e01 	movle.w	lr, #1
 801339c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80133a0:	f200 80ab 	bhi.w	80134fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80133a4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80133a8:	4283      	cmp	r3, r0
 80133aa:	d216      	bcs.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80133ac:	f240 605b 	movw	r0, #1627	; 0x65b
 80133b0:	4283      	cmp	r3, r0
 80133b2:	d859      	bhi.n	8013468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80133b4:	f240 6057 	movw	r0, #1623	; 0x657
 80133b8:	4283      	cmp	r3, r0
 80133ba:	d20e      	bcs.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80133bc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80133c0:	d24a      	bcs.n	8013458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80133c2:	f240 604e 	movw	r0, #1614	; 0x64e
 80133c6:	4283      	cmp	r3, r0
 80133c8:	d207      	bcs.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80133ca:	f240 601a 	movw	r0, #1562	; 0x61a
 80133ce:	4283      	cmp	r3, r0
 80133d0:	d02a      	beq.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80133d2:	d821      	bhi.n	8013418 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80133d4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80133d8:	d35b      	bcc.n	8013492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80133da:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80133de:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80133e2:	f040 80d0 	bne.w	8013586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80133e6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80133ea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80133ee:	f040 80ca 	bne.w	8013586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80133f2:	00cb      	lsls	r3, r1, #3
 80133f4:	0649      	lsls	r1, r1, #25
 80133f6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80133fa:	7a13      	ldrb	r3, [r2, #8]
 80133fc:	ea43 0300 	orr.w	r3, r3, r0
 8013400:	bf44      	itt	mi
 8013402:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013406:	b21b      	sxthmi	r3, r3
 8013408:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801340c:	1b5d      	subs	r5, r3, r5
 801340e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013412:	4610      	mov	r0, r2
 8013414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013418:	f240 604b 	movw	r0, #1611	; 0x64b
 801341c:	4283      	cmp	r3, r0
 801341e:	d338      	bcc.n	8013492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013420:	f240 604c 	movw	r0, #1612	; 0x64c
 8013424:	4283      	cmp	r3, r0
 8013426:	d9d8      	bls.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013428:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801342c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8013430:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013434:	f040 80f3 	bne.w	801361e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013438:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801343c:	f040 80ef 	bne.w	801361e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013440:	00cb      	lsls	r3, r1, #3
 8013442:	064e      	lsls	r6, r1, #25
 8013444:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8013448:	7a13      	ldrb	r3, [r2, #8]
 801344a:	ea43 0300 	orr.w	r3, r3, r0
 801344e:	bf44      	itt	mi
 8013450:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013454:	b21b      	sxthmi	r3, r3
 8013456:	e7d9      	b.n	801340c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8013458:	f240 6054 	movw	r0, #1620	; 0x654
 801345c:	4283      	cmp	r3, r0
 801345e:	d8e3      	bhi.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013460:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013464:	d9e0      	bls.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013466:	e7b8      	b.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013468:	f240 6074 	movw	r0, #1652	; 0x674
 801346c:	4283      	cmp	r3, r0
 801346e:	d0b4      	beq.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013470:	d82d      	bhi.n	80134ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8013472:	f240 605e 	movw	r0, #1630	; 0x65e
 8013476:	4283      	cmp	r3, r0
 8013478:	d804      	bhi.n	8013484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801347a:	f240 605d 	movw	r0, #1629	; 0x65d
 801347e:	4283      	cmp	r3, r0
 8013480:	d3d2      	bcc.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013482:	e7aa      	b.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013484:	f240 605f 	movw	r0, #1631	; 0x65f
 8013488:	4283      	cmp	r3, r0
 801348a:	d0cd      	beq.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801348c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8013490:	d0a3      	beq.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013492:	00cb      	lsls	r3, r1, #3
 8013494:	0649      	lsls	r1, r1, #25
 8013496:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801349a:	7a13      	ldrb	r3, [r2, #8]
 801349c:	ea43 0300 	orr.w	r3, r3, r0
 80134a0:	bf44      	itt	mi
 80134a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80134a6:	b21b      	sxthmi	r3, r3
 80134a8:	1b5d      	subs	r5, r3, r5
 80134aa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80134ae:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80134b2:	7b53      	ldrb	r3, [r2, #13]
 80134b4:	015b      	lsls	r3, r3, #5
 80134b6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80134ba:	7993      	ldrb	r3, [r2, #6]
 80134bc:	430b      	orrs	r3, r1
 80134be:	2105      	movs	r1, #5
 80134c0:	005b      	lsls	r3, r3, #1
 80134c2:	fb93 f3f1 	sdiv	r3, r3, r1
 80134c6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80134ca:	440b      	add	r3, r1
 80134cc:	e756      	b.n	801337c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80134ce:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80134d2:	4283      	cmp	r3, r0
 80134d4:	d809      	bhi.n	80134ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80134d6:	f240 60df 	movw	r0, #1759	; 0x6df
 80134da:	4283      	cmp	r3, r0
 80134dc:	f4bf af7d 	bcs.w	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134e0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80134e4:	2b05      	cmp	r3, #5
 80134e6:	d8d4      	bhi.n	8013492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80134e8:	e777      	b.n	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80134ea:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80134ee:	4283      	cmp	r3, r0
 80134f0:	d09a      	beq.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80134f2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80134f6:	4283      	cmp	r3, r0
 80134f8:	e7ca      	b.n	8013490 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80134fa:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80134fe:	d22b      	bcs.n	8013558 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8013500:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8013504:	4283      	cmp	r3, r0
 8013506:	d28f      	bcs.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013508:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801350c:	4283      	cmp	r3, r0
 801350e:	d816      	bhi.n	801353e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013510:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013514:	4283      	cmp	r3, r0
 8013516:	f4bf af60 	bcs.w	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801351a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801351e:	4283      	cmp	r3, r0
 8013520:	d80a      	bhi.n	8013538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013522:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013526:	4283      	cmp	r3, r0
 8013528:	f4bf af57 	bcs.w	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801352c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013530:	4283      	cmp	r3, r0
 8013532:	f43f af79 	beq.w	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013536:	e7ac      	b.n	8013492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013538:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801353c:	e7f8      	b.n	8013530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801353e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8013542:	4283      	cmp	r3, r0
 8013544:	d802      	bhi.n	801354c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8013546:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801354a:	e798      	b.n	801347e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801354c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8013550:	4283      	cmp	r3, r0
 8013552:	f47f af42 	bne.w	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013556:	e767      	b.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013558:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801355c:	4283      	cmp	r3, r0
 801355e:	f43f af63 	beq.w	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013562:	d802      	bhi.n	801356a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8013564:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8013568:	e7f2      	b.n	8013550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801356a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801356e:	4283      	cmp	r3, r0
 8013570:	d805      	bhi.n	801357e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8013572:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8013576:	4283      	cmp	r3, r0
 8013578:	f4ff af2f 	bcc.w	80133da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801357c:	e754      	b.n	8013428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801357e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8013582:	4283      	cmp	r3, r0
 8013584:	e7af      	b.n	80134e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8013586:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801358a:	4617      	mov	r7, r2
 801358c:	f102 0808 	add.w	r8, r2, #8
 8013590:	4666      	mov	r6, ip
 8013592:	6838      	ldr	r0, [r7, #0]
 8013594:	3708      	adds	r7, #8
 8013596:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801359a:	46e6      	mov	lr, ip
 801359c:	4547      	cmp	r7, r8
 801359e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80135a2:	46f4      	mov	ip, lr
 80135a4:	d1f5      	bne.n	8013592 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80135a6:	6838      	ldr	r0, [r7, #0]
 80135a8:	f8ce 0000 	str.w	r0, [lr]
 80135ac:	88b9      	ldrh	r1, [r7, #4]
 80135ae:	f8ae 1004 	strh.w	r1, [lr, #4]
 80135b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80135b6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80135ba:	d009      	beq.n	80135d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80135bc:	7b51      	ldrb	r1, [r2, #13]
 80135be:	7992      	ldrb	r2, [r2, #6]
 80135c0:	0149      	lsls	r1, r1, #5
 80135c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80135c6:	4311      	orrs	r1, r2
 80135c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80135cc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80135d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80135d4:	b2ad      	uxth	r5, r5
 80135d6:	d00d      	beq.n	80135f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80135d8:	442b      	add	r3, r5
 80135da:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80135de:	b29b      	uxth	r3, r3
 80135e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80135e4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80135e8:	10db      	asrs	r3, r3, #3
 80135ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135ee:	4313      	orrs	r3, r2
 80135f0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80135f4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80135f8:	00cb      	lsls	r3, r1, #3
 80135fa:	064f      	lsls	r7, r1, #25
 80135fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013600:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8013604:	ea43 0302 	orr.w	r3, r3, r2
 8013608:	bf44      	itt	mi
 801360a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801360e:	b21b      	sxthmi	r3, r3
 8013610:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013614:	1b5b      	subs	r3, r3, r5
 8013616:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801361a:	4632      	mov	r2, r6
 801361c:	e6f9      	b.n	8013412 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801361e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013622:	4617      	mov	r7, r2
 8013624:	f102 0908 	add.w	r9, r2, #8
 8013628:	4666      	mov	r6, ip
 801362a:	6838      	ldr	r0, [r7, #0]
 801362c:	3708      	adds	r7, #8
 801362e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013632:	46e0      	mov	r8, ip
 8013634:	454f      	cmp	r7, r9
 8013636:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801363a:	46c4      	mov	ip, r8
 801363c:	d1f5      	bne.n	801362a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801363e:	6838      	ldr	r0, [r7, #0]
 8013640:	f8c8 0000 	str.w	r0, [r8]
 8013644:	88b9      	ldrh	r1, [r7, #4]
 8013646:	f8a8 1004 	strh.w	r1, [r8, #4]
 801364a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801364e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013652:	d009      	beq.n	8013668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8013654:	7b51      	ldrb	r1, [r2, #13]
 8013656:	7992      	ldrb	r2, [r2, #6]
 8013658:	0149      	lsls	r1, r1, #5
 801365a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801365e:	4311      	orrs	r1, r2
 8013660:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013664:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013668:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801366c:	d00e      	beq.n	801368c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801366e:	eba3 030e 	sub.w	r3, r3, lr
 8013672:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013676:	b29b      	uxth	r3, r3
 8013678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801367c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013680:	10db      	asrs	r3, r3, #3
 8013682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013686:	4313      	orrs	r3, r2
 8013688:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801368c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013690:	00cb      	lsls	r3, r1, #3
 8013692:	0648      	lsls	r0, r1, #25
 8013694:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013698:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801369c:	ea43 0302 	orr.w	r3, r3, r2
 80136a0:	bf44      	itt	mi
 80136a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80136a6:	b21b      	sxthmi	r3, r3
 80136a8:	1b5d      	subs	r5, r3, r5
 80136aa:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80136ae:	e7b4      	b.n	801361a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080136b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80136b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b4:	461e      	mov	r6, r3
 80136b6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80136b8:	4604      	mov	r4, r0
 80136ba:	4617      	mov	r7, r2
 80136bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80136c0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80136c4:	f7ef fe30 	bl	8003328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80136c8:	4605      	mov	r5, r0
 80136ca:	b918      	cbnz	r0, 80136d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80136cc:	6030      	str	r0, [r6, #0]
 80136ce:	4628      	mov	r0, r5
 80136d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	4601      	mov	r1, r0
 80136d8:	4638      	mov	r0, r7
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	4798      	blx	r3
 80136de:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80136e2:	4602      	mov	r2, r0
 80136e4:	6030      	str	r0, [r6, #0]
 80136e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80136ea:	d213      	bcs.n	8013714 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80136ec:	4643      	mov	r3, r8
 80136ee:	4639      	mov	r1, r7
 80136f0:	4620      	mov	r0, r4
 80136f2:	f7ff fe39 	bl	8013368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80136f6:	6030      	str	r0, [r6, #0]
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	b143      	cbz	r3, 801370e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80136fc:	7b5a      	ldrb	r2, [r3, #13]
 80136fe:	7a9b      	ldrb	r3, [r3, #10]
 8013700:	0052      	lsls	r2, r2, #1
 8013702:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013706:	4313      	orrs	r3, r2
 8013708:	bf0c      	ite	eq
 801370a:	2301      	moveq	r3, #1
 801370c:	2300      	movne	r3, #0
 801370e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013712:	e7dc      	b.n	80136ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013714:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013718:	b29b      	uxth	r3, r3
 801371a:	2b7f      	cmp	r3, #127	; 0x7f
 801371c:	d804      	bhi.n	8013728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801371e:	4639      	mov	r1, r7
 8013720:	4620      	mov	r0, r4
 8013722:	f7ff fd15 	bl	8013150 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013726:	e7e6      	b.n	80136f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013728:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801372c:	2b00      	cmp	r3, #0
 801372e:	d0e3      	beq.n	80136f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013730:	f640 1302 	movw	r3, #2306	; 0x902
 8013734:	429d      	cmp	r5, r3
 8013736:	d1df      	bne.n	80136f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013738:	4601      	mov	r1, r0
 801373a:	4620      	mov	r0, r4
 801373c:	f7ff fcd8 	bl	80130f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013740:	e7d9      	b.n	80136f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08013742 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013742:	b510      	push	{r4, lr}
 8013744:	4604      	mov	r4, r0
 8013746:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801374a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801374c:	b1e1      	cbz	r1, 8013788 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801374e:	2b0a      	cmp	r3, #10
 8013750:	d02d      	beq.n	80137ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013752:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8013754:	3901      	subs	r1, #1
 8013756:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801375a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801375c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8013760:	1c51      	adds	r1, r2, #1
 8013762:	b289      	uxth	r1, r1
 8013764:	2901      	cmp	r1, #1
 8013766:	bf8a      	itet	hi
 8013768:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801376c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801376e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8013770:	1c5a      	adds	r2, r3, #1
 8013772:	8722      	strh	r2, [r4, #56]	; 0x38
 8013774:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013776:	4413      	add	r3, r2
 8013778:	b29b      	uxth	r3, r3
 801377a:	2b09      	cmp	r3, #9
 801377c:	bf88      	it	hi
 801377e:	3b0a      	subhi	r3, #10
 8013780:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013784:	8458      	strh	r0, [r3, #34]	; 0x22
 8013786:	e7de      	b.n	8013746 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8013788:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801378a:	2b0a      	cmp	r3, #10
 801378c:	d00f      	beq.n	80137ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801378e:	4620      	mov	r0, r4
 8013790:	f7ff fc6d 	bl	801306e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8013794:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	8722      	strh	r2, [r4, #56]	; 0x38
 801379a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801379c:	4413      	add	r3, r2
 801379e:	b29b      	uxth	r3, r3
 80137a0:	2b09      	cmp	r3, #9
 80137a2:	bf88      	it	hi
 80137a4:	3b0a      	subhi	r3, #10
 80137a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80137aa:	8458      	strh	r0, [r3, #34]	; 0x22
 80137ac:	e7ec      	b.n	8013788 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80137ae:	bd10      	pop	{r4, pc}

080137b0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80137b0:	b538      	push	{r3, r4, r5, lr}
 80137b2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80137b4:	4604      	mov	r4, r0
 80137b6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80137ba:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80137bc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80137be:	3a01      	subs	r2, #1
 80137c0:	8702      	strh	r2, [r0, #56]	; 0x38
 80137c2:	1c5a      	adds	r2, r3, #1
 80137c4:	b292      	uxth	r2, r2
 80137c6:	2a09      	cmp	r2, #9
 80137c8:	bf8a      	itet	hi
 80137ca:	3b09      	subhi	r3, #9
 80137cc:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80137ce:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80137d0:	f7ff ffb7 	bl	8013742 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80137d4:	8c23      	ldrh	r3, [r4, #32]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	bf9c      	itt	ls
 80137da:	3301      	addls	r3, #1
 80137dc:	8423      	strhls	r3, [r4, #32]
 80137de:	8be3      	ldrh	r3, [r4, #30]
 80137e0:	b90b      	cbnz	r3, 80137e6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80137e2:	2302      	movs	r3, #2
 80137e4:	83e3      	strh	r3, [r4, #30]
 80137e6:	8be3      	ldrh	r3, [r4, #30]
 80137e8:	4628      	mov	r0, r5
 80137ea:	3b01      	subs	r3, #1
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	83e3      	strh	r3, [r4, #30]
 80137f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80137f4:	8365      	strh	r5, [r4, #26]
 80137f6:	bd38      	pop	{r3, r4, r5, pc}

080137f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80137f8:	428a      	cmp	r2, r1
 80137fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137fe:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8013800:	d932      	bls.n	8013868 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8013802:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8013804:	1a54      	subs	r4, r2, r1
 8013806:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801380a:	19ee      	adds	r6, r5, r7
 801380c:	fa1f fe84 	uxth.w	lr, r4
 8013810:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8013814:	3e01      	subs	r6, #1
 8013816:	b2b4      	uxth	r4, r6
 8013818:	eba4 090e 	sub.w	r9, r4, lr
 801381c:	fa1f f989 	uxth.w	r9, r9
 8013820:	2c09      	cmp	r4, #9
 8013822:	4626      	mov	r6, r4
 8013824:	bf88      	it	hi
 8013826:	f1a4 060a 	subhi.w	r6, r4, #10
 801382a:	f1bc 0f00 	cmp.w	ip, #0
 801382e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013832:	bf08      	it	eq
 8013834:	f04f 0c02 	moveq.w	ip, #2
 8013838:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801383c:	b2a4      	uxth	r4, r4
 801383e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013842:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8013846:	454c      	cmp	r4, r9
 8013848:	fa1f fc8c 	uxth.w	ip, ip
 801384c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8013850:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8013854:	d1e4      	bne.n	8013820 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8013856:	eba5 050e 	sub.w	r5, r5, lr
 801385a:	eb0e 0408 	add.w	r4, lr, r8
 801385e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8013862:	8705      	strh	r5, [r0, #56]	; 0x38
 8013864:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8013868:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801386a:	250a      	movs	r5, #10
 801386c:	1a64      	subs	r4, r4, r1
 801386e:	4439      	add	r1, r7
 8013870:	b289      	uxth	r1, r1
 8013872:	8704      	strh	r4, [r0, #56]	; 0x38
 8013874:	2909      	cmp	r1, #9
 8013876:	bf88      	it	hi
 8013878:	390a      	subhi	r1, #10
 801387a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801387c:	b18a      	cbz	r2, 80138a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801387e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8013880:	3a01      	subs	r2, #1
 8013882:	3101      	adds	r1, #1
 8013884:	b292      	uxth	r2, r2
 8013886:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801388a:	8701      	strh	r1, [r0, #56]	; 0x38
 801388c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801388e:	b901      	cbnz	r1, 8013892 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8013890:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013892:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8013894:	3901      	subs	r1, #1
 8013896:	b289      	uxth	r1, r1
 8013898:	86c1      	strh	r1, [r0, #54]	; 0x36
 801389a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801389e:	844c      	strh	r4, [r1, #34]	; 0x22
 80138a0:	e7ec      	b.n	801387c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80138a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138a6:	f7ff bf4c 	b.w	8013742 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080138aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80138aa:	b570      	push	{r4, r5, r6, lr}
 80138ac:	2500      	movs	r5, #0
 80138ae:	4295      	cmp	r5, r2
 80138b0:	d011      	beq.n	80138d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80138b2:	8bc4      	ldrh	r4, [r0, #30]
 80138b4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80138b8:	4414      	add	r4, r2
 80138ba:	3c01      	subs	r4, #1
 80138bc:	1b64      	subs	r4, r4, r5
 80138be:	b2a4      	uxth	r4, r4
 80138c0:	2c01      	cmp	r4, #1
 80138c2:	bf88      	it	hi
 80138c4:	3c02      	subhi	r4, #2
 80138c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80138ca:	8b64      	ldrh	r4, [r4, #26]
 80138cc:	42b4      	cmp	r4, r6
 80138ce:	d117      	bne.n	8013900 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80138d0:	3501      	adds	r5, #1
 80138d2:	b2ad      	uxth	r5, r5
 80138d4:	e7eb      	b.n	80138ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80138d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80138da:	2400      	movs	r4, #0
 80138dc:	4413      	add	r3, r2
 80138de:	b2a2      	uxth	r2, r4
 80138e0:	429a      	cmp	r2, r3
 80138e2:	da0f      	bge.n	8013904 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80138e4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80138e6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80138ea:	3401      	adds	r4, #1
 80138ec:	4432      	add	r2, r6
 80138ee:	b292      	uxth	r2, r2
 80138f0:	2a09      	cmp	r2, #9
 80138f2:	bf88      	it	hi
 80138f4:	3a0a      	subhi	r2, #10
 80138f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80138fa:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80138fc:	42aa      	cmp	r2, r5
 80138fe:	d0ee      	beq.n	80138de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8013900:	2000      	movs	r0, #0
 8013902:	bd70      	pop	{r4, r5, r6, pc}
 8013904:	2001      	movs	r0, #1
 8013906:	e7fc      	b.n	8013902 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08013908 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390c:	4605      	mov	r5, r0
 801390e:	4616      	mov	r6, r2
 8013910:	1c8c      	adds	r4, r1, #2
 8013912:	8809      	ldrh	r1, [r1, #0]
 8013914:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013918:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801391c:	42b3      	cmp	r3, r6
 801391e:	d124      	bne.n	801396a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8013920:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013924:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013928:	f001 070f 	and.w	r7, r1, #15
 801392c:	4652      	mov	r2, sl
 801392e:	f8cd 8000 	str.w	r8, [sp]
 8013932:	464b      	mov	r3, r9
 8013934:	4621      	mov	r1, r4
 8013936:	4628      	mov	r0, r5
 8013938:	f7ff ffb7 	bl	80138aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801393c:	4683      	mov	fp, r0
 801393e:	b168      	cbz	r0, 801395c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8013940:	eb0a 0109 	add.w	r1, sl, r9
 8013944:	463a      	mov	r2, r7
 8013946:	4628      	mov	r0, r5
 8013948:	4441      	add	r1, r8
 801394a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801394e:	4649      	mov	r1, r9
 8013950:	f7ff ff52 	bl	80137f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8013954:	4658      	mov	r0, fp
 8013956:	b003      	add	sp, #12
 8013958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395c:	eb07 010a 	add.w	r1, r7, sl
 8013960:	4449      	add	r1, r9
 8013962:	4441      	add	r1, r8
 8013964:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8013968:	e7d2      	b.n	8013910 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801396a:	f04f 0b00 	mov.w	fp, #0
 801396e:	e7f1      	b.n	8013954 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08013970 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	8810      	ldrh	r0, [r2, #0]
 8013974:	4298      	cmp	r0, r3
 8013976:	d817      	bhi.n	80139a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013978:	1e48      	subs	r0, r1, #1
 801397a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801397e:	4298      	cmp	r0, r3
 8013980:	d312      	bcc.n	80139a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013982:	2400      	movs	r4, #0
 8013984:	428c      	cmp	r4, r1
 8013986:	d20f      	bcs.n	80139a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013988:	1860      	adds	r0, r4, r1
 801398a:	1040      	asrs	r0, r0, #1
 801398c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8013990:	0085      	lsls	r5, r0, #2
 8013992:	42b3      	cmp	r3, r6
 8013994:	d902      	bls.n	801399c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8013996:	3001      	adds	r0, #1
 8013998:	b284      	uxth	r4, r0
 801399a:	e7f3      	b.n	8013984 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801399c:	d201      	bcs.n	80139a2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801399e:	b281      	uxth	r1, r0
 80139a0:	e7f0      	b.n	8013984 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80139a2:	442a      	add	r2, r5
 80139a4:	8850      	ldrh	r0, [r2, #2]
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	2000      	movs	r0, #0
 80139aa:	e7fc      	b.n	80139a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080139ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80139ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80139b2:	4604      	mov	r4, r0
 80139b4:	260b      	movs	r6, #11
 80139b6:	886f      	ldrh	r7, [r5, #2]
 80139b8:	087f      	lsrs	r7, r7, #1
 80139ba:	3e01      	subs	r6, #1
 80139bc:	d013      	beq.n	80139e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80139be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80139c0:	462a      	mov	r2, r5
 80139c2:	4639      	mov	r1, r7
 80139c4:	4620      	mov	r0, r4
 80139c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139ca:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80139ce:	4643      	mov	r3, r8
 80139d0:	f7ff ffce 	bl	8013970 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80139d4:	b138      	cbz	r0, 80139e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80139d6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80139da:	4642      	mov	r2, r8
 80139dc:	4620      	mov	r0, r4
 80139de:	f7ff ff93 	bl	8013908 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d1e9      	bne.n	80139ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80139e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080139ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80139ec:	b570      	push	{r4, r5, r6, lr}
 80139ee:	694a      	ldr	r2, [r1, #20]
 80139f0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80139f2:	684b      	ldr	r3, [r1, #4]
 80139f4:	1b54      	subs	r4, r2, r5
 80139f6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80139f8:	f000 8106 	beq.w	8013c08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80139fc:	1b9b      	subs	r3, r3, r6
 80139fe:	d003      	beq.n	8013a08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013a00:	4363      	muls	r3, r4
 8013a02:	2210      	movs	r2, #16
 8013a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a08:	680c      	ldr	r4, [r1, #0]
 8013a0a:	698a      	ldr	r2, [r1, #24]
 8013a0c:	1b65      	subs	r5, r4, r5
 8013a0e:	f000 80fd 	beq.w	8013c0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8013a12:	1b92      	subs	r2, r2, r6
 8013a14:	d003      	beq.n	8013a1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013a16:	436a      	muls	r2, r5
 8013a18:	2410      	movs	r4, #16
 8013a1a:	fb92 f2f4 	sdiv	r2, r2, r4
 8013a1e:	1a9b      	subs	r3, r3, r2
 8013a20:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8013c48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8013a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a28:	460a      	mov	r2, r1
 8013a2a:	ee07 3a90 	vmov	s15, r3
 8013a2e:	f100 040c 	add.w	r4, r0, #12
 8013a32:	4603      	mov	r3, r0
 8013a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a38:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013a3c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8013a40:	eeb1 6a43 	vneg.f32	s12, s6
 8013a44:	edd2 7a02 	vldr	s15, [r2, #8]
 8013a48:	3214      	adds	r2, #20
 8013a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013a4e:	ece3 6a01 	vstmia	r3!, {s13}
 8013a52:	429c      	cmp	r4, r3
 8013a54:	ed52 7a02 	vldr	s15, [r2, #-8]
 8013a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a5c:	edc3 7a02 	vstr	s15, [r3, #8]
 8013a60:	ed52 7a01 	vldr	s15, [r2, #-4]
 8013a64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a68:	edc3 7a05 	vstr	s15, [r3, #20]
 8013a6c:	d1ea      	bne.n	8013a44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8013a6e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013a70:	698b      	ldr	r3, [r1, #24]
 8013a72:	edd0 4a02 	vldr	s9, [r0, #8]
 8013a76:	1a9b      	subs	r3, r3, r2
 8013a78:	edd0 3a00 	vldr	s7, [r0]
 8013a7c:	edd0 6a01 	vldr	s13, [r0, #4]
 8013a80:	ee07 3a90 	vmov	s15, r3
 8013a84:	684b      	ldr	r3, [r1, #4]
 8013a86:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013a8a:	ed90 5a05 	vldr	s10, [r0, #20]
 8013a8e:	1a9b      	subs	r3, r3, r2
 8013a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a94:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8013a98:	ed90 2a03 	vldr	s4, [r0, #12]
 8013a9c:	ee07 3a10 	vmov	s14, r3
 8013aa0:	edd0 5a04 	vldr	s11, [r0, #16]
 8013aa4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013aa8:	ed90 1a07 	vldr	s2, [r0, #28]
 8013aac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ab0:	edd0 2a06 	vldr	s5, [r0, #24]
 8013ab4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8013ab8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8013abc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013ac0:	ee32 5a45 	vsub.f32	s10, s4, s10
 8013ac4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013ac8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013acc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8013ad0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013ad2:	694a      	ldr	r2, [r1, #20]
 8013ad4:	1b13      	subs	r3, r2, r4
 8013ad6:	ee07 3a10 	vmov	s14, r3
 8013ada:	680b      	ldr	r3, [r1, #0]
 8013adc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ae0:	1b1b      	subs	r3, r3, r4
 8013ae2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013ae6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8013aea:	ee07 3a10 	vmov	s14, r3
 8013aee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013af2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013af6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013afa:	ee64 4a86 	vmul.f32	s9, s9, s12
 8013afe:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8013b02:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013b04:	698b      	ldr	r3, [r1, #24]
 8013b06:	1a9b      	subs	r3, r3, r2
 8013b08:	ee06 3a90 	vmov	s13, r3
 8013b0c:	684b      	ldr	r3, [r1, #4]
 8013b0e:	1a9b      	subs	r3, r3, r2
 8013b10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b14:	ee07 3a10 	vmov	s14, r3
 8013b18:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013b1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b20:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8013b24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b28:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013b2c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8013b30:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8013b34:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013b36:	694a      	ldr	r2, [r1, #20]
 8013b38:	1b13      	subs	r3, r2, r4
 8013b3a:	ee07 3a10 	vmov	s14, r3
 8013b3e:	680b      	ldr	r3, [r1, #0]
 8013b40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b44:	1b1b      	subs	r3, r3, r4
 8013b46:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b4a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8013b4e:	ee07 3a10 	vmov	s14, r3
 8013b52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b56:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b5a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013b5e:	edd0 5a08 	vldr	s11, [r0, #32]
 8013b62:	ee31 1a65 	vsub.f32	s2, s2, s11
 8013b66:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8013b6a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013b6e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8013b72:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013b74:	698b      	ldr	r3, [r1, #24]
 8013b76:	1a9b      	subs	r3, r3, r2
 8013b78:	ee07 3a10 	vmov	s14, r3
 8013b7c:	684b      	ldr	r3, [r1, #4]
 8013b7e:	1a9b      	subs	r3, r3, r2
 8013b80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b84:	ee01 3a90 	vmov	s3, r3
 8013b88:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013b8c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013b90:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8013b94:	ee61 1a84 	vmul.f32	s3, s3, s8
 8013b98:	eea1 7a21 	vfma.f32	s14, s2, s3
 8013b9c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013ba0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013ba4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013ba6:	694a      	ldr	r2, [r1, #20]
 8013ba8:	1b13      	subs	r3, r2, r4
 8013baa:	ee03 3a10 	vmov	s6, r3
 8013bae:	680b      	ldr	r3, [r1, #0]
 8013bb0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013bb4:	1b1b      	subs	r3, r3, r4
 8013bb6:	ee23 3a04 	vmul.f32	s6, s6, s8
 8013bba:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8013bbe:	ee03 3a10 	vmov	s6, r3
 8013bc2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013bc6:	ee23 4a04 	vmul.f32	s8, s6, s8
 8013bca:	eee1 5a04 	vfma.f32	s11, s2, s8
 8013bce:	ee25 6a86 	vmul.f32	s12, s11, s12
 8013bd2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8013bd6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8013bda:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8013bde:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8013be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be6:	dd13      	ble.n	8013c10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8013be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013bec:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8013bf0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013bf2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8013bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfe:	dd15      	ble.n	8013c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8013c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c04:	6403      	str	r3, [r0, #64]	; 0x40
 8013c06:	bd70      	pop	{r4, r5, r6, pc}
 8013c08:	4623      	mov	r3, r4
 8013c0a:	e6fd      	b.n	8013a08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013c0c:	462a      	mov	r2, r5
 8013c0e:	e706      	b.n	8013a1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013c10:	d502      	bpl.n	8013c18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8013c12:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013c16:	e7e9      	b.n	8013bec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8013c18:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8013c1c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8013c20:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c28:	dade      	bge.n	8013be8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8013c2a:	e7f2      	b.n	8013c12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8013c2c:	d502      	bpl.n	8013c34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8013c2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013c32:	e7e7      	b.n	8013c04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8013c34:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8013c38:	eee3 4a86 	vfma.f32	s9, s7, s12
 8013c3c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8013c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c44:	dadc      	bge.n	8013c00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8013c46:	e7f2      	b.n	8013c2e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8013c48:	3d800000 	.word	0x3d800000

08013c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8013c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c50:	2714      	movs	r7, #20
 8013c52:	435f      	muls	r7, r3
 8013c54:	eb02 0c07 	add.w	ip, r2, r7
 8013c58:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013c5c:	f115 0e0f 	adds.w	lr, r5, #15
 8013c60:	f100 80a2 	bmi.w	8013da8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8013c64:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8013c68:	9c08      	ldr	r4, [sp, #32]
 8013c6a:	2614      	movs	r6, #20
 8013c6c:	f8c0 e014 	str.w	lr, [r0, #20]
 8013c70:	4366      	muls	r6, r4
 8013c72:	eb02 0806 	add.w	r8, r2, r6
 8013c76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013c7a:	f115 040f 	adds.w	r4, r5, #15
 8013c7e:	f100 809f 	bmi.w	8013dc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8013c82:	1124      	asrs	r4, r4, #4
 8013c84:	eba4 040e 	sub.w	r4, r4, lr
 8013c88:	6184      	str	r4, [r0, #24]
 8013c8a:	2c00      	cmp	r4, #0
 8013c8c:	f000 808a 	beq.w	8013da4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8013c90:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8013c94:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013c98:	5995      	ldr	r5, [r2, r6]
 8013c9a:	eba4 0809 	sub.w	r8, r4, r9
 8013c9e:	59d4      	ldr	r4, [r2, r7]
 8013ca0:	eba5 0a04 	sub.w	sl, r5, r4
 8013ca4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8013ca8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8013cac:	fb0e fe05 	mul.w	lr, lr, r5
 8013cb0:	fb0a ee19 	mls	lr, sl, r9, lr
 8013cb4:	fb08 e404 	mla	r4, r8, r4, lr
 8013cb8:	3c01      	subs	r4, #1
 8013cba:	19a4      	adds	r4, r4, r6
 8013cbc:	f100 808c 	bmi.w	8013dd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8013cc0:	fb94 fef6 	sdiv	lr, r4, r6
 8013cc4:	fb06 441e 	mls	r4, r6, lr, r4
 8013cc8:	f8c0 e000 	str.w	lr, [r0]
 8013ccc:	6104      	str	r4, [r0, #16]
 8013cce:	2d00      	cmp	r5, #0
 8013cd0:	f2c0 8095 	blt.w	8013dfe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8013cd4:	fb95 f4f6 	sdiv	r4, r5, r6
 8013cd8:	fb06 5514 	mls	r5, r6, r4, r5
 8013cdc:	6044      	str	r4, [r0, #4]
 8013cde:	6085      	str	r5, [r0, #8]
 8013ce0:	60c6      	str	r6, [r0, #12]
 8013ce2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013ce6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013cea:	6945      	ldr	r5, [r0, #20]
 8013cec:	59d2      	ldr	r2, [r2, r7]
 8013cee:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8013cf2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8013e20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8013cf6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013cfa:	ee07 4a10 	vmov	s14, r4
 8013cfe:	6804      	ldr	r4, [r0, #0]
 8013d00:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8013d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d08:	ee07 2a90 	vmov	s15, r2
 8013d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d18:	edd3 6a00 	vldr	s13, [r3]
 8013d1c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013d20:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8013d24:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013d28:	edc0 6a07 	vstr	s13, [r0, #28]
 8013d2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8013d30:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8013d34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d38:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013d3c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013d40:	ed80 6a08 	vstr	s12, [r0, #32]
 8013d44:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8013d46:	6242      	str	r2, [r0, #36]	; 0x24
 8013d48:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8013d4c:	ed93 6a03 	vldr	s12, [r3, #12]
 8013d50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013d54:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013d58:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013d5c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8013d60:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013d64:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8013d68:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013d6c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8013d70:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013d72:	6302      	str	r2, [r0, #48]	; 0x30
 8013d74:	ed93 6a06 	vldr	s12, [r3, #24]
 8013d78:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8013d7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013d80:	eeb0 7a46 	vmov.f32	s14, s12
 8013d84:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8013d88:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013d8c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013d90:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013d94:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8013d98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013d9c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8013da0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013da2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da8:	2410      	movs	r4, #16
 8013daa:	f1c5 0501 	rsb	r5, r5, #1
 8013dae:	fb9e fef4 	sdiv	lr, lr, r4
 8013db2:	f015 050f 	ands.w	r5, r5, #15
 8013db6:	bf18      	it	ne
 8013db8:	2501      	movne	r5, #1
 8013dba:	ebae 0e05 	sub.w	lr, lr, r5
 8013dbe:	e753      	b.n	8013c68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8013dc0:	f04f 0910 	mov.w	r9, #16
 8013dc4:	f1c5 0501 	rsb	r5, r5, #1
 8013dc8:	fb94 f4f9 	sdiv	r4, r4, r9
 8013dcc:	f015 050f 	ands.w	r5, r5, #15
 8013dd0:	bf18      	it	ne
 8013dd2:	2501      	movne	r5, #1
 8013dd4:	1b64      	subs	r4, r4, r5
 8013dd6:	e755      	b.n	8013c84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8013dd8:	4264      	negs	r4, r4
 8013dda:	fb94 fef6 	sdiv	lr, r4, r6
 8013dde:	f1ce 0800 	rsb	r8, lr, #0
 8013de2:	fb06 441e 	mls	r4, r6, lr, r4
 8013de6:	f8c0 8000 	str.w	r8, [r0]
 8013dea:	6104      	str	r4, [r0, #16]
 8013dec:	2c00      	cmp	r4, #0
 8013dee:	f43f af6e 	beq.w	8013cce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8013df2:	ea6f 0e0e 	mvn.w	lr, lr
 8013df6:	1b34      	subs	r4, r6, r4
 8013df8:	f8c0 e000 	str.w	lr, [r0]
 8013dfc:	e766      	b.n	8013ccc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8013dfe:	426d      	negs	r5, r5
 8013e00:	fb95 f4f6 	sdiv	r4, r5, r6
 8013e04:	f1c4 0e00 	rsb	lr, r4, #0
 8013e08:	fb06 5514 	mls	r5, r6, r4, r5
 8013e0c:	f8c0 e004 	str.w	lr, [r0, #4]
 8013e10:	6085      	str	r5, [r0, #8]
 8013e12:	2d00      	cmp	r5, #0
 8013e14:	f43f af64 	beq.w	8013ce0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8013e18:	43e4      	mvns	r4, r4
 8013e1a:	1b75      	subs	r5, r6, r5
 8013e1c:	6044      	str	r4, [r0, #4]
 8013e1e:	e75e      	b.n	8013cde <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8013e20:	3d800000 	.word	0x3d800000

08013e24 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013e24:	4b01      	ldr	r3, [pc, #4]	; (8013e2c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013e26:	6018      	str	r0, [r3, #0]
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	2400b9e0 	.word	0x2400b9e0

08013e30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013e30:	4b06      	ldr	r3, [pc, #24]	; (8013e4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013e32:	881a      	ldrh	r2, [r3, #0]
 8013e34:	4282      	cmp	r2, r0
 8013e36:	d807      	bhi.n	8013e48 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013e38:	4b05      	ldr	r3, [pc, #20]	; (8013e50 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	4413      	add	r3, r2
 8013e3e:	4298      	cmp	r0, r3
 8013e40:	bfac      	ite	ge
 8013e42:	2000      	movge	r0, #0
 8013e44:	2001      	movlt	r0, #1
 8013e46:	4770      	bx	lr
 8013e48:	2000      	movs	r0, #0
 8013e4a:	4770      	bx	lr
 8013e4c:	2400ba00 	.word	0x2400ba00
 8013e50:	2400ba04 	.word	0x2400ba04

08013e54 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013e54:	b508      	push	{r3, lr}
 8013e56:	4601      	mov	r1, r0
 8013e58:	f7ff ffea 	bl	8013e30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013e5c:	b118      	cbz	r0, 8013e66 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8013e5e:	4b02      	ldr	r3, [pc, #8]	; (8013e68 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013e66:	bd08      	pop	{r3, pc}
 8013e68:	2400b9e4 	.word	0x2400b9e4

08013e6c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4604      	mov	r4, r0
 8013e70:	f7ff ffde 	bl	8013e30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013e74:	b188      	cbz	r0, 8013e9a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8013e76:	4b09      	ldr	r3, [pc, #36]	; (8013e9c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8013e78:	881a      	ldrh	r2, [r3, #0]
 8013e7a:	4b09      	ldr	r3, [pc, #36]	; (8013ea0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8013e7c:	1aa4      	subs	r4, r4, r2
 8013e7e:	220e      	movs	r2, #14
 8013e80:	681d      	ldr	r5, [r3, #0]
 8013e82:	4362      	muls	r2, r4
 8013e84:	18ac      	adds	r4, r5, r2
 8013e86:	7b23      	ldrb	r3, [r4, #12]
 8013e88:	f013 0320 	ands.w	r3, r3, #32
 8013e8c:	bf17      	itett	ne
 8013e8e:	680b      	ldrne	r3, [r1, #0]
 8013e90:	4618      	moveq	r0, r3
 8013e92:	50ab      	strne	r3, [r5, r2]
 8013e94:	684b      	ldrne	r3, [r1, #4]
 8013e96:	bf18      	it	ne
 8013e98:	6063      	strne	r3, [r4, #4]
 8013e9a:	bd38      	pop	{r3, r4, r5, pc}
 8013e9c:	2400ba00 	.word	0x2400ba00
 8013ea0:	2400b9e8 	.word	0x2400b9e8

08013ea4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8013ea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea8:	4606      	mov	r6, r0
 8013eaa:	460c      	mov	r4, r1
 8013eac:	f7ff ffc0 	bl	8013e30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013eb0:	b918      	cbnz	r0, 8013eba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	b002      	add	sp, #8
 8013eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eba:	4608      	mov	r0, r1
 8013ebc:	f7fb fb93 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	d1f6      	bne.n	8013eb2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013ec4:	4b3f      	ldr	r3, [pc, #252]	; (8013fc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8013ec6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8013fc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8013eca:	881d      	ldrh	r5, [r3, #0]
 8013ecc:	f8d9 a000 	ldr.w	sl, [r9]
 8013ed0:	46c8      	mov	r8, r9
 8013ed2:	1b73      	subs	r3, r6, r5
 8013ed4:	250e      	movs	r5, #14
 8013ed6:	435d      	muls	r5, r3
 8013ed8:	eb0a 0705 	add.w	r7, sl, r5
 8013edc:	7b3b      	ldrb	r3, [r7, #12]
 8013ede:	f013 0f20 	tst.w	r3, #32
 8013ee2:	d0e6      	beq.n	8013eb2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013ee4:	4621      	mov	r1, r4
 8013ee6:	4638      	mov	r0, r7
 8013ee8:	f7fd fc42 	bl	8011770 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d1e1      	bne.n	8013eb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013ef0:	4639      	mov	r1, r7
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f7fd fc3c 	bl	8011770 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013ef8:	b108      	cbz	r0, 8013efe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8013efa:	4621      	mov	r1, r4
 8013efc:	e020      	b.n	8013f40 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8013efe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013f02:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d11e      	bne.n	8013f48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f0a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d118      	bne.n	8013f48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f16:	6820      	ldr	r0, [r4, #0]
 8013f18:	466b      	mov	r3, sp
 8013f1a:	6861      	ldr	r1, [r4, #4]
 8013f1c:	c303      	stmia	r3!, {r0, r1}
 8013f1e:	4639      	mov	r1, r7
 8013f20:	4668      	mov	r0, sp
 8013f22:	f7fd fc4b 	bl	80117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f26:	f8d9 3000 	ldr.w	r3, [r9]
 8013f2a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f2e:	442b      	add	r3, r5
 8013f30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013f34:	4413      	add	r3, r2
 8013f36:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	dc04      	bgt.n	8013f48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013f3e:	4669      	mov	r1, sp
 8013f40:	4630      	mov	r0, r6
 8013f42:	f7ff ff93 	bl	8013e6c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8013f46:	e7b5      	b.n	8013eb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013f48:	f8d8 3000 	ldr.w	r3, [r8]
 8013f4c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013f50:	442b      	add	r3, r5
 8013f52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013f56:	4291      	cmp	r1, r2
 8013f58:	d119      	bne.n	8013f8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013f5a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013f5e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8013f62:	4291      	cmp	r1, r2
 8013f64:	d113      	bne.n	8013f8e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013f66:	6820      	ldr	r0, [r4, #0]
 8013f68:	466a      	mov	r2, sp
 8013f6a:	6861      	ldr	r1, [r4, #4]
 8013f6c:	c203      	stmia	r2!, {r0, r1}
 8013f6e:	4619      	mov	r1, r3
 8013f70:	4668      	mov	r0, sp
 8013f72:	f7fd fc23 	bl	80117bc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f76:	f8d8 3000 	ldr.w	r3, [r8]
 8013f7a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013f7e:	442b      	add	r3, r5
 8013f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f84:	4413      	add	r3, r2
 8013f86:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	ddd7      	ble.n	8013f3e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8013f8e:	4620      	mov	r0, r4
 8013f90:	f7fb fb29 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f94:	b990      	cbnz	r0, 8013fbc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8013f96:	88a7      	ldrh	r7, [r4, #4]
 8013f98:	88e3      	ldrh	r3, [r4, #6]
 8013f9a:	fb17 f703 	smulbb	r7, r7, r3
 8013f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8013fa2:	441d      	add	r5, r3
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	f7fb fb1e 	bl	800f5e6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013faa:	b948      	cbnz	r0, 8013fc0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8013fac:	88ab      	ldrh	r3, [r5, #4]
 8013fae:	88ea      	ldrh	r2, [r5, #6]
 8013fb0:	fb13 f302 	smulbb	r3, r3, r2
 8013fb4:	42bb      	cmp	r3, r7
 8013fb6:	f6bf af7c 	bge.w	8013eb2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013fba:	e79e      	b.n	8013efa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8013fbc:	2700      	movs	r7, #0
 8013fbe:	e7ee      	b.n	8013f9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	e7f7      	b.n	8013fb4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8013fc4:	2400ba00 	.word	0x2400ba00
 8013fc8:	2400b9e8 	.word	0x2400b9e8

08013fcc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8013fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fce:	4c24      	ldr	r4, [pc, #144]	; (8014060 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8013fd0:	6823      	ldr	r3, [r4, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d042      	beq.n	801405c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8013fd6:	4a23      	ldr	r2, [pc, #140]	; (8014064 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8013fd8:	4d23      	ldr	r5, [pc, #140]	; (8014068 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8013fda:	8811      	ldrh	r1, [r2, #0]
 8013fdc:	f8b5 c000 	ldrh.w	ip, [r5]
 8013fe0:	4822      	ldr	r0, [pc, #136]	; (801406c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8013fe2:	4461      	add	r1, ip
 8013fe4:	1c4a      	adds	r2, r1, #1
 8013fe6:	008f      	lsls	r7, r1, #2
 8013fe8:	f022 0201 	bic.w	r2, r2, #1
 8013fec:	19de      	adds	r6, r3, r7
 8013fee:	0412      	lsls	r2, r2, #16
 8013ff0:	6006      	str	r6, [r0, #0]
 8013ff2:	4e1f      	ldr	r6, [pc, #124]	; (8014070 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8013ff4:	0c12      	lsrs	r2, r2, #16
 8013ff6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8013ffa:	19da      	adds	r2, r3, r7
 8013ffc:	6032      	str	r2, [r6, #0]
 8013ffe:	220e      	movs	r2, #14
 8014000:	fb02 f20c 	mul.w	r2, r2, ip
 8014004:	3203      	adds	r2, #3
 8014006:	f022 0203 	bic.w	r2, r2, #3
 801400a:	443a      	add	r2, r7
 801400c:	4f19      	ldr	r7, [pc, #100]	; (8014074 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801400e:	4413      	add	r3, r2
 8014010:	603b      	str	r3, [r7, #0]
 8014012:	2300      	movs	r3, #0
 8014014:	4f18      	ldr	r7, [pc, #96]	; (8014078 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8014016:	469c      	mov	ip, r3
 8014018:	803b      	strh	r3, [r7, #0]
 801401a:	4f18      	ldr	r7, [pc, #96]	; (801407c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801401c:	683f      	ldr	r7, [r7, #0]
 801401e:	1aba      	subs	r2, r7, r2
 8014020:	4f17      	ldr	r7, [pc, #92]	; (8014080 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8014022:	603a      	str	r2, [r7, #0]
 8014024:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014028:	4a16      	ldr	r2, [pc, #88]	; (8014084 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801402a:	8013      	strh	r3, [r2, #0]
 801402c:	428b      	cmp	r3, r1
 801402e:	d10d      	bne.n	801404c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8014030:	882d      	ldrh	r5, [r5, #0]
 8014032:	2300      	movs	r3, #0
 8014034:	6830      	ldr	r0, [r6, #0]
 8014036:	240e      	movs	r4, #14
 8014038:	429d      	cmp	r5, r3
 801403a:	d90f      	bls.n	801405c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801403c:	fb04 0203 	mla	r2, r4, r3, r0
 8014040:	3301      	adds	r3, #1
 8014042:	7b11      	ldrb	r1, [r2, #12]
 8014044:	f36f 1145 	bfc	r1, #5, #1
 8014048:	7311      	strb	r1, [r2, #12]
 801404a:	e7f5      	b.n	8014038 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801404c:	6822      	ldr	r2, [r4, #0]
 801404e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8014052:	6802      	ldr	r2, [r0, #0]
 8014054:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8014058:	3301      	adds	r3, #1
 801405a:	e7e7      	b.n	801402c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801405e:	bf00      	nop
 8014060:	2400b9e4 	.word	0x2400b9e4
 8014064:	2400ba00 	.word	0x2400ba00
 8014068:	2400ba04 	.word	0x2400ba04
 801406c:	2400b9f8 	.word	0x2400b9f8
 8014070:	2400b9e8 	.word	0x2400b9e8
 8014074:	2400b9f0 	.word	0x2400b9f0
 8014078:	2400ba02 	.word	0x2400ba02
 801407c:	2400b9ec 	.word	0x2400b9ec
 8014080:	2400b9fc 	.word	0x2400b9fc
 8014084:	2400b9f4 	.word	0x2400b9f4

08014088 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8014088:	4b06      	ldr	r3, [pc, #24]	; (80140a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	b943      	cbnz	r3, 80140a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801408e:	b139      	cbz	r1, 80140a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8014090:	4b05      	ldr	r3, [pc, #20]	; (80140a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8014092:	801a      	strh	r2, [r3, #0]
 8014094:	4b05      	ldr	r3, [pc, #20]	; (80140ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8014096:	6019      	str	r1, [r3, #0]
 8014098:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801409a:	6018      	str	r0, [r3, #0]
 801409c:	f7ff bf96 	b.w	8013fcc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	2400b9f0 	.word	0x2400b9f0
 80140a8:	2400ba04 	.word	0x2400ba04
 80140ac:	2400b9ec 	.word	0x2400b9ec
 80140b0:	2400b9e4 	.word	0x2400b9e4

080140b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80140b4:	b470      	push	{r4, r5, r6}
 80140b6:	4c07      	ldr	r4, [pc, #28]	; (80140d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80140b8:	4605      	mov	r5, r0
 80140ba:	4610      	mov	r0, r2
 80140bc:	9a03      	ldr	r2, [sp, #12]
 80140be:	6826      	ldr	r6, [r4, #0]
 80140c0:	b936      	cbnz	r6, 80140d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80140c2:	6025      	str	r5, [r4, #0]
 80140c4:	4c04      	ldr	r4, [pc, #16]	; (80140d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80140c6:	8021      	strh	r1, [r4, #0]
 80140c8:	4619      	mov	r1, r3
 80140ca:	bc70      	pop	{r4, r5, r6}
 80140cc:	f7ff bfdc 	b.w	8014088 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80140d0:	bc70      	pop	{r4, r5, r6}
 80140d2:	4770      	bx	lr
 80140d4:	2400ba08 	.word	0x2400ba08
 80140d8:	2400ba00 	.word	0x2400ba00

080140dc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80140dc:	4a12      	ldr	r2, [pc, #72]	; (8014128 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80140de:	8803      	ldrh	r3, [r0, #0]
 80140e0:	8812      	ldrh	r2, [r2, #0]
 80140e2:	4293      	cmp	r3, r2
 80140e4:	d207      	bcs.n	80140f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80140e6:	4a11      	ldr	r2, [pc, #68]	; (801412c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80140e8:	2114      	movs	r1, #20
 80140ea:	6812      	ldr	r2, [r2, #0]
 80140ec:	fb01 2303 	mla	r3, r1, r3, r2
 80140f0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80140f4:	4770      	bx	lr
 80140f6:	490e      	ldr	r1, [pc, #56]	; (8014130 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80140f8:	8809      	ldrh	r1, [r1, #0]
 80140fa:	4411      	add	r1, r2
 80140fc:	428b      	cmp	r3, r1
 80140fe:	da04      	bge.n	801410a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8014100:	1a9b      	subs	r3, r3, r2
 8014102:	4a0c      	ldr	r2, [pc, #48]	; (8014134 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8014104:	210e      	movs	r1, #14
 8014106:	6812      	ldr	r2, [r2, #0]
 8014108:	e7f0      	b.n	80140ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801410a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801410e:	4293      	cmp	r3, r2
 8014110:	d108      	bne.n	8014124 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8014112:	4b09      	ldr	r3, [pc, #36]	; (8014138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	b91b      	cbnz	r3, 8014120 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8014118:	4b08      	ldr	r3, [pc, #32]	; (801413c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801411a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801411e:	4770      	bx	lr
 8014120:	4b07      	ldr	r3, [pc, #28]	; (8014140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8014122:	e7fa      	b.n	801411a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8014124:	2000      	movs	r0, #0
 8014126:	4770      	bx	lr
 8014128:	2400ba00 	.word	0x2400ba00
 801412c:	2400ba08 	.word	0x2400ba08
 8014130:	2400ba04 	.word	0x2400ba04
 8014134:	2400b9e8 	.word	0x2400b9e8
 8014138:	2400b978 	.word	0x2400b978
 801413c:	2400b97a 	.word	0x2400b97a
 8014140:	2400b97c 	.word	0x2400b97c

08014144 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8014144:	4a12      	ldr	r2, [pc, #72]	; (8014190 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8014146:	8803      	ldrh	r3, [r0, #0]
 8014148:	8812      	ldrh	r2, [r2, #0]
 801414a:	4293      	cmp	r3, r2
 801414c:	d207      	bcs.n	801415e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801414e:	4a11      	ldr	r2, [pc, #68]	; (8014194 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8014150:	2114      	movs	r1, #20
 8014152:	6812      	ldr	r2, [r2, #0]
 8014154:	fb01 2303 	mla	r3, r1, r3, r2
 8014158:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801415c:	4770      	bx	lr
 801415e:	490e      	ldr	r1, [pc, #56]	; (8014198 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8014160:	8809      	ldrh	r1, [r1, #0]
 8014162:	4411      	add	r1, r2
 8014164:	428b      	cmp	r3, r1
 8014166:	da04      	bge.n	8014172 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8014168:	1a9b      	subs	r3, r3, r2
 801416a:	4a0c      	ldr	r2, [pc, #48]	; (801419c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801416c:	210e      	movs	r1, #14
 801416e:	6812      	ldr	r2, [r2, #0]
 8014170:	e7f0      	b.n	8014154 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8014172:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014176:	4293      	cmp	r3, r2
 8014178:	d108      	bne.n	801418c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801417a:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	b91b      	cbnz	r3, 8014188 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8014180:	4b08      	ldr	r3, [pc, #32]	; (80141a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8014182:	f9b3 0000 	ldrsh.w	r0, [r3]
 8014186:	4770      	bx	lr
 8014188:	4b07      	ldr	r3, [pc, #28]	; (80141a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801418a:	e7fa      	b.n	8014182 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801418c:	2000      	movs	r0, #0
 801418e:	4770      	bx	lr
 8014190:	2400ba00 	.word	0x2400ba00
 8014194:	2400ba08 	.word	0x2400ba08
 8014198:	2400ba04 	.word	0x2400ba04
 801419c:	2400b9e8 	.word	0x2400b9e8
 80141a0:	2400b978 	.word	0x2400b978
 80141a4:	2400b97c 	.word	0x2400b97c
 80141a8:	2400b97a 	.word	0x2400b97a

080141ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80141ac:	4a1f      	ldr	r2, [pc, #124]	; (801422c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80141ae:	b510      	push	{r4, lr}
 80141b0:	880b      	ldrh	r3, [r1, #0]
 80141b2:	8812      	ldrh	r2, [r2, #0]
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d213      	bcs.n	80141e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80141b8:	4a1d      	ldr	r2, [pc, #116]	; (8014230 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80141ba:	2114      	movs	r1, #20
 80141bc:	6812      	ldr	r2, [r2, #0]
 80141be:	fb01 2303 	mla	r3, r1, r3, r2
 80141c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80141c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80141ca:	8a1a      	ldrh	r2, [r3, #16]
 80141cc:	8a5b      	ldrh	r3, [r3, #18]
 80141ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80141d2:	8004      	strh	r4, [r0, #0]
 80141d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141d8:	8041      	strh	r1, [r0, #2]
 80141da:	8082      	strh	r2, [r0, #4]
 80141dc:	80c3      	strh	r3, [r0, #6]
 80141de:	e00e      	b.n	80141fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80141e0:	4914      	ldr	r1, [pc, #80]	; (8014234 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80141e2:	8809      	ldrh	r1, [r1, #0]
 80141e4:	4411      	add	r1, r2
 80141e6:	428b      	cmp	r3, r1
 80141e8:	da0a      	bge.n	8014200 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80141ea:	1a9b      	subs	r3, r3, r2
 80141ec:	4a12      	ldr	r2, [pc, #72]	; (8014238 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80141ee:	210e      	movs	r1, #14
 80141f0:	6812      	ldr	r2, [r2, #0]
 80141f2:	fb01 2303 	mla	r3, r1, r3, r2
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	6002      	str	r2, [r0, #0]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	6042      	str	r2, [r0, #4]
 80141fe:	bd10      	pop	{r4, pc}
 8014200:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014204:	4293      	cmp	r3, r2
 8014206:	d10b      	bne.n	8014220 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8014208:	4b0c      	ldr	r3, [pc, #48]	; (801423c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801420a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801420e:	4b0c      	ldr	r3, [pc, #48]	; (8014240 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8014210:	8081      	strh	r1, [r0, #4]
 8014212:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014216:	2300      	movs	r3, #0
 8014218:	80c2      	strh	r2, [r0, #6]
 801421a:	8003      	strh	r3, [r0, #0]
 801421c:	8043      	strh	r3, [r0, #2]
 801421e:	e7ee      	b.n	80141fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8014220:	2300      	movs	r3, #0
 8014222:	8003      	strh	r3, [r0, #0]
 8014224:	8043      	strh	r3, [r0, #2]
 8014226:	8083      	strh	r3, [r0, #4]
 8014228:	e7d8      	b.n	80141dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801422a:	bf00      	nop
 801422c:	2400ba00 	.word	0x2400ba00
 8014230:	2400ba08 	.word	0x2400ba08
 8014234:	2400ba04 	.word	0x2400ba04
 8014238:	2400b9e8 	.word	0x2400b9e8
 801423c:	2400b974 	.word	0x2400b974
 8014240:	2400b976 	.word	0x2400b976

08014244 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8014244:	4a12      	ldr	r2, [pc, #72]	; (8014290 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8014246:	8803      	ldrh	r3, [r0, #0]
 8014248:	8811      	ldrh	r1, [r2, #0]
 801424a:	428b      	cmp	r3, r1
 801424c:	d20b      	bcs.n	8014266 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801424e:	4a11      	ldr	r2, [pc, #68]	; (8014294 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014250:	6812      	ldr	r2, [r2, #0]
 8014252:	b112      	cbz	r2, 801425a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8014254:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014258:	b9c0      	cbnz	r0, 801428c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801425a:	4a0f      	ldr	r2, [pc, #60]	; (8014298 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801425c:	6811      	ldr	r1, [r2, #0]
 801425e:	2214      	movs	r2, #20
 8014260:	4353      	muls	r3, r2
 8014262:	58c8      	ldr	r0, [r1, r3]
 8014264:	4770      	bx	lr
 8014266:	4a0d      	ldr	r2, [pc, #52]	; (801429c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8014268:	8812      	ldrh	r2, [r2, #0]
 801426a:	440a      	add	r2, r1
 801426c:	4293      	cmp	r3, r2
 801426e:	da04      	bge.n	801427a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8014270:	4a08      	ldr	r2, [pc, #32]	; (8014294 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014272:	6812      	ldr	r2, [r2, #0]
 8014274:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014278:	4770      	bx	lr
 801427a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801427e:	4293      	cmp	r3, r2
 8014280:	d103      	bne.n	801428a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8014282:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8014288:	4770      	bx	lr
 801428a:	2000      	movs	r0, #0
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	2400ba00 	.word	0x2400ba00
 8014294:	2400b9e4 	.word	0x2400b9e4
 8014298:	2400ba08 	.word	0x2400ba08
 801429c:	2400ba04 	.word	0x2400ba04
 80142a0:	2400b980 	.word	0x2400b980

080142a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80142a4:	4b24      	ldr	r3, [pc, #144]	; (8014338 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80142a6:	8802      	ldrh	r2, [r0, #0]
 80142a8:	8818      	ldrh	r0, [r3, #0]
 80142aa:	4282      	cmp	r2, r0
 80142ac:	d221      	bcs.n	80142f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80142ae:	4b23      	ldr	r3, [pc, #140]	; (801433c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80142b0:	6819      	ldr	r1, [r3, #0]
 80142b2:	2314      	movs	r3, #20
 80142b4:	fb03 1302 	mla	r3, r3, r2, r1
 80142b8:	6858      	ldr	r0, [r3, #4]
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d03a      	beq.n	8014334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80142be:	4920      	ldr	r1, [pc, #128]	; (8014340 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80142c0:	6809      	ldr	r1, [r1, #0]
 80142c2:	2900      	cmp	r1, #0
 80142c4:	d036      	beq.n	8014334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80142c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80142ca:	2900      	cmp	r1, #0
 80142cc:	d032      	beq.n	8014334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80142ce:	891a      	ldrh	r2, [r3, #8]
 80142d0:	8958      	ldrh	r0, [r3, #10]
 80142d2:	4350      	muls	r0, r2
 80142d4:	7c5a      	ldrb	r2, [r3, #17]
 80142d6:	7cdb      	ldrb	r3, [r3, #19]
 80142d8:	0952      	lsrs	r2, r2, #5
 80142da:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80142de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80142e2:	2b0b      	cmp	r3, #11
 80142e4:	bf18      	it	ne
 80142e6:	0040      	lslne	r0, r0, #1
 80142e8:	3003      	adds	r0, #3
 80142ea:	f020 0003 	bic.w	r0, r0, #3
 80142ee:	4408      	add	r0, r1
 80142f0:	4770      	bx	lr
 80142f2:	4b14      	ldr	r3, [pc, #80]	; (8014344 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80142f4:	881b      	ldrh	r3, [r3, #0]
 80142f6:	4403      	add	r3, r0
 80142f8:	429a      	cmp	r2, r3
 80142fa:	da1a      	bge.n	8014332 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80142fc:	4b12      	ldr	r3, [pc, #72]	; (8014348 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80142fe:	1a10      	subs	r0, r2, r0
 8014300:	210e      	movs	r1, #14
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	fb01 3000 	mla	r0, r1, r0, r3
 8014308:	7b03      	ldrb	r3, [r0, #12]
 801430a:	f003 031f 	and.w	r3, r3, #31
 801430e:	2b0b      	cmp	r3, #11
 8014310:	d10b      	bne.n	801432a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8014312:	8903      	ldrh	r3, [r0, #8]
 8014314:	8940      	ldrh	r0, [r0, #10]
 8014316:	4358      	muls	r0, r3
 8014318:	4b09      	ldr	r3, [pc, #36]	; (8014340 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801431a:	3003      	adds	r0, #3
 801431c:	6819      	ldr	r1, [r3, #0]
 801431e:	f020 0303 	bic.w	r3, r0, #3
 8014322:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8014326:	4418      	add	r0, r3
 8014328:	4770      	bx	lr
 801432a:	2b0d      	cmp	r3, #13
 801432c:	d101      	bne.n	8014332 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801432e:	300d      	adds	r0, #13
 8014330:	4770      	bx	lr
 8014332:	2000      	movs	r0, #0
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	2400ba00 	.word	0x2400ba00
 801433c:	2400ba08 	.word	0x2400ba08
 8014340:	2400b9e4 	.word	0x2400b9e4
 8014344:	2400ba04 	.word	0x2400ba04
 8014348:	2400b9e8 	.word	0x2400b9e8

0801434c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801434c:	4a17      	ldr	r2, [pc, #92]	; (80143ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801434e:	b510      	push	{r4, lr}
 8014350:	8803      	ldrh	r3, [r0, #0]
 8014352:	8812      	ldrh	r2, [r2, #0]
 8014354:	4293      	cmp	r3, r2
 8014356:	d20c      	bcs.n	8014372 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8014358:	4a15      	ldr	r2, [pc, #84]	; (80143b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801435a:	2114      	movs	r1, #20
 801435c:	6812      	ldr	r2, [r2, #0]
 801435e:	fb01 2303 	mla	r3, r1, r3, r2
 8014362:	7c58      	ldrb	r0, [r3, #17]
 8014364:	0942      	lsrs	r2, r0, #5
 8014366:	7cd8      	ldrb	r0, [r3, #19]
 8014368:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801436c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8014370:	bd10      	pop	{r4, pc}
 8014372:	4910      	ldr	r1, [pc, #64]	; (80143b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8014374:	8809      	ldrh	r1, [r1, #0]
 8014376:	4411      	add	r1, r2
 8014378:	428b      	cmp	r3, r1
 801437a:	da09      	bge.n	8014390 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801437c:	1a9b      	subs	r3, r3, r2
 801437e:	4a0e      	ldr	r2, [pc, #56]	; (80143b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8014380:	210e      	movs	r1, #14
 8014382:	6812      	ldr	r2, [r2, #0]
 8014384:	fb01 2303 	mla	r3, r1, r3, r2
 8014388:	7b18      	ldrb	r0, [r3, #12]
 801438a:	f000 001f 	and.w	r0, r0, #31
 801438e:	e7ef      	b.n	8014370 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8014390:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014394:	4293      	cmp	r3, r2
 8014396:	d106      	bne.n	80143a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8014398:	f7fb fbce 	bl	800fb38 <_ZN8touchgfx3HAL3lcdEv>
 801439c:	6803      	ldr	r3, [r0, #0]
 801439e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a4:	4718      	bx	r3
 80143a6:	2000      	movs	r0, #0
 80143a8:	e7e2      	b.n	8014370 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80143aa:	bf00      	nop
 80143ac:	2400ba00 	.word	0x2400ba00
 80143b0:	2400ba08 	.word	0x2400ba08
 80143b4:	2400ba04 	.word	0x2400ba04
 80143b8:	2400b9e8 	.word	0x2400b9e8

080143bc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80143bc:	2018      	movs	r0, #24
 80143be:	4770      	bx	lr

080143c0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80143c0:	2001      	movs	r0, #1
 80143c2:	4770      	bx	lr

080143c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80143c4:	4b02      	ldr	r3, [pc, #8]	; (80143d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80143c6:	8818      	ldrh	r0, [r3, #0]
 80143c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80143cc:	b280      	uxth	r0, r0
 80143ce:	4770      	bx	lr
 80143d0:	2400b97a 	.word	0x2400b97a

080143d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80143d4:	2bff      	cmp	r3, #255	; 0xff
 80143d6:	d040      	beq.n	801445a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80143d8:	2a2c      	cmp	r2, #44	; 0x2c
 80143da:	d02a      	beq.n	8014432 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80143dc:	d80f      	bhi.n	80143fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80143de:	2a08      	cmp	r2, #8
 80143e0:	d037      	beq.n	8014452 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80143e2:	d805      	bhi.n	80143f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80143e4:	2a04      	cmp	r2, #4
 80143e6:	d032      	beq.n	801444e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80143e8:	2a05      	cmp	r2, #5
 80143ea:	d02e      	beq.n	801444a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80143ec:	2000      	movs	r0, #0
 80143ee:	4770      	bx	lr
 80143f0:	2a0a      	cmp	r2, #10
 80143f2:	d02e      	beq.n	8014452 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80143f4:	d301      	bcc.n	80143fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80143f6:	2a0b      	cmp	r2, #11
 80143f8:	d1f8      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80143fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80143fc:	4770      	bx	lr
 80143fe:	2a30      	cmp	r2, #48	; 0x30
 8014400:	d029      	beq.n	8014456 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014402:	d808      	bhi.n	8014416 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8014404:	2a2e      	cmp	r2, #46	; 0x2e
 8014406:	684b      	ldr	r3, [r1, #4]
 8014408:	d01a      	beq.n	8014440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801440a:	d90b      	bls.n	8014424 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1ec      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014412:	6a00      	ldr	r0, [r0, #32]
 8014414:	4770      	bx	lr
 8014416:	2a32      	cmp	r2, #50	; 0x32
 8014418:	d01d      	beq.n	8014456 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801441a:	d301      	bcc.n	8014420 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801441c:	2a33      	cmp	r2, #51	; 0x33
 801441e:	d1e5      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014420:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014422:	4770      	bx	lr
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d0f3      	beq.n	8014412 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801442a:	2b01      	cmp	r3, #1
 801442c:	d1de      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801442e:	6900      	ldr	r0, [r0, #16]
 8014430:	4770      	bx	lr
 8014432:	684b      	ldr	r3, [r1, #4]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b133      	cbz	r3, 8014446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8014438:	2b01      	cmp	r3, #1
 801443a:	d1d7      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801443c:	6880      	ldr	r0, [r0, #8]
 801443e:	4770      	bx	lr
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d1d2      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014446:	6980      	ldr	r0, [r0, #24]
 8014448:	4770      	bx	lr
 801444a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801444c:	4770      	bx	lr
 801444e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014450:	4770      	bx	lr
 8014452:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014454:	4770      	bx	lr
 8014456:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014458:	4770      	bx	lr
 801445a:	2a2c      	cmp	r2, #44	; 0x2c
 801445c:	d02a      	beq.n	80144b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801445e:	d80f      	bhi.n	8014480 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8014460:	2a08      	cmp	r2, #8
 8014462:	d035      	beq.n	80144d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8014464:	d805      	bhi.n	8014472 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014466:	2a04      	cmp	r2, #4
 8014468:	d030      	beq.n	80144cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801446a:	2a05      	cmp	r2, #5
 801446c:	d1be      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801446e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014470:	4770      	bx	lr
 8014472:	2a0a      	cmp	r2, #10
 8014474:	d02c      	beq.n	80144d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8014476:	d301      	bcc.n	801447c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8014478:	2a0b      	cmp	r2, #11
 801447a:	d1b7      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801447c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801447e:	4770      	bx	lr
 8014480:	2a30      	cmp	r2, #48	; 0x30
 8014482:	d027      	beq.n	80144d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8014484:	d808      	bhi.n	8014498 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8014486:	2a2e      	cmp	r2, #46	; 0x2e
 8014488:	684b      	ldr	r3, [r1, #4]
 801448a:	d01a      	beq.n	80144c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801448c:	d90b      	bls.n	80144a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1ab      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014494:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014496:	4770      	bx	lr
 8014498:	2a32      	cmp	r2, #50	; 0x32
 801449a:	d01b      	beq.n	80144d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801449c:	d301      	bcc.n	80144a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801449e:	2a33      	cmp	r2, #51	; 0x33
 80144a0:	d1a4      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144a2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80144a4:	4770      	bx	lr
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d0f3      	beq.n	8014494 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d19d      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144b0:	6940      	ldr	r0, [r0, #20]
 80144b2:	4770      	bx	lr
 80144b4:	684b      	ldr	r3, [r1, #4]
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	b133      	cbz	r3, 80144c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d196      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144be:	68c0      	ldr	r0, [r0, #12]
 80144c0:	4770      	bx	lr
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d191      	bne.n	80143ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80144c8:	69c0      	ldr	r0, [r0, #28]
 80144ca:	4770      	bx	lr
 80144cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80144ce:	4770      	bx	lr
 80144d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80144d2:	4770      	bx	lr
 80144d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80144d6:	4770      	bx	lr

080144d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80144d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144dc:	b085      	sub	sp, #20
 80144de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80144e0:	9203      	str	r2, [sp, #12]
 80144e2:	6870      	ldr	r0, [r6, #4]
 80144e4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80144e8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80144ec:	9101      	str	r1, [sp, #4]
 80144ee:	fa1f f885 	uxth.w	r8, r5
 80144f2:	43ed      	mvns	r5, r5
 80144f4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80144f8:	b2ed      	uxtb	r5, r5
 80144fa:	fb00 2404 	mla	r4, r0, r4, r2
 80144fe:	6832      	ldr	r2, [r6, #0]
 8014500:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014504:	4414      	add	r4, r2
 8014506:	f8dc 2000 	ldr.w	r2, [ip]
 801450a:	9202      	str	r2, [sp, #8]
 801450c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014510:	f102 0e04 	add.w	lr, r2, #4
 8014514:	9a01      	ldr	r2, [sp, #4]
 8014516:	2a00      	cmp	r2, #0
 8014518:	dc03      	bgt.n	8014522 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801451a:	9a03      	ldr	r2, [sp, #12]
 801451c:	2a00      	cmp	r2, #0
 801451e:	f340 8116 	ble.w	801474e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8014522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014524:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014528:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801452c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801452e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014532:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014536:	2b00      	cmp	r3, #0
 8014538:	dd0e      	ble.n	8014558 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801453a:	1406      	asrs	r6, r0, #16
 801453c:	d405      	bmi.n	801454a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801453e:	4556      	cmp	r6, sl
 8014540:	da03      	bge.n	801454a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014542:	1416      	asrs	r6, r2, #16
 8014544:	d401      	bmi.n	801454a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014546:	454e      	cmp	r6, r9
 8014548:	db07      	blt.n	801455a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801454a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801454c:	3b01      	subs	r3, #1
 801454e:	3403      	adds	r4, #3
 8014550:	4430      	add	r0, r6
 8014552:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014554:	4432      	add	r2, r6
 8014556:	e7ee      	b.n	8014536 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8014558:	d063      	beq.n	8014622 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801455a:	1e5e      	subs	r6, r3, #1
 801455c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801455e:	fb07 0706 	mla	r7, r7, r6, r0
 8014562:	143f      	asrs	r7, r7, #16
 8014564:	d454      	bmi.n	8014610 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014566:	4557      	cmp	r7, sl
 8014568:	da52      	bge.n	8014610 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801456a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801456c:	fb07 2606 	mla	r6, r7, r6, r2
 8014570:	1436      	asrs	r6, r6, #16
 8014572:	d44d      	bmi.n	8014610 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014574:	454e      	cmp	r6, r9
 8014576:	da4b      	bge.n	8014610 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014578:	1ce6      	adds	r6, r4, #3
 801457a:	4699      	mov	r9, r3
 801457c:	f1b9 0f00 	cmp.w	r9, #0
 8014580:	f106 0603 	add.w	r6, r6, #3
 8014584:	dd48      	ble.n	8014618 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8014586:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801458a:	1417      	asrs	r7, r2, #16
 801458c:	9902      	ldr	r1, [sp, #8]
 801458e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014592:	f109 39ff 	add.w	r9, r9, #4294967295
 8014596:	fb0b 1707 	mla	r7, fp, r7, r1
 801459a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801459e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80145a0:	f817 700a 	ldrb.w	r7, [r7, sl]
 80145a4:	fb1b fb05 	smulbb	fp, fp, r5
 80145a8:	4408      	add	r0, r1
 80145aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80145b0:	440a      	add	r2, r1
 80145b2:	eb0e 0a07 	add.w	sl, lr, r7
 80145b6:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80145ba:	fb07 b708 	mla	r7, r7, r8, fp
 80145be:	b2bf      	uxth	r7, r7
 80145c0:	f107 0b01 	add.w	fp, r7, #1
 80145c4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80145c8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80145cc:	fb1b fb05 	smulbb	fp, fp, r5
 80145d0:	123f      	asrs	r7, r7, #8
 80145d2:	f806 7c06 	strb.w	r7, [r6, #-6]
 80145d6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80145da:	fb07 b708 	mla	r7, r7, r8, fp
 80145de:	b2bf      	uxth	r7, r7
 80145e0:	f107 0b01 	add.w	fp, r7, #1
 80145e4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80145e8:	123f      	asrs	r7, r7, #8
 80145ea:	f806 7c05 	strb.w	r7, [r6, #-5]
 80145ee:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80145f2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80145f6:	fb1a fa05 	smulbb	sl, sl, r5
 80145fa:	fb07 a708 	mla	r7, r7, r8, sl
 80145fe:	b2bf      	uxth	r7, r7
 8014600:	f107 0a01 	add.w	sl, r7, #1
 8014604:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014608:	123f      	asrs	r7, r7, #8
 801460a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801460e:	e7b5      	b.n	801457c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8014610:	2700      	movs	r7, #0
 8014612:	1bde      	subs	r6, r3, r7
 8014614:	2e00      	cmp	r6, #0
 8014616:	dc42      	bgt.n	801469e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8014618:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801461c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014620:	441c      	add	r4, r3
 8014622:	9b01      	ldr	r3, [sp, #4]
 8014624:	2b00      	cmp	r3, #0
 8014626:	f340 8092 	ble.w	801474e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801462a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801462e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014630:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014638:	eef0 6a62 	vmov.f32	s13, s5
 801463c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014640:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014644:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014648:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801464c:	eef0 6a43 	vmov.f32	s13, s6
 8014650:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014654:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8014658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801465c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014660:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801466c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014670:	ee12 2a90 	vmov	r2, s5
 8014674:	eef0 2a47 	vmov.f32	s5, s14
 8014678:	fb92 f3f3 	sdiv	r3, r2, r3
 801467c:	ee13 2a10 	vmov	r2, s6
 8014680:	9311      	str	r3, [sp, #68]	; 0x44
 8014682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014684:	eeb0 3a67 	vmov.f32	s6, s15
 8014688:	fb92 f3f3 	sdiv	r3, r2, r3
 801468c:	9312      	str	r3, [sp, #72]	; 0x48
 801468e:	9b01      	ldr	r3, [sp, #4]
 8014690:	9a03      	ldr	r2, [sp, #12]
 8014692:	3b01      	subs	r3, #1
 8014694:	9301      	str	r3, [sp, #4]
 8014696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014698:	bf08      	it	eq
 801469a:	4613      	moveq	r3, r2
 801469c:	e73a      	b.n	8014514 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801469e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80146a2:	d44e      	bmi.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80146a4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80146a8:	4556      	cmp	r6, sl
 80146aa:	dd4a      	ble.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80146ac:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80146b0:	d447      	bmi.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80146b2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80146b6:	4559      	cmp	r1, fp
 80146b8:	dd43      	ble.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80146ba:	fa0f f986 	sxth.w	r9, r6
 80146be:	9902      	ldr	r1, [sp, #8]
 80146c0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80146c4:	fb0b 1909 	mla	r9, fp, r9, r1
 80146c8:	f814 b006 	ldrb.w	fp, [r4, r6]
 80146cc:	f819 900a 	ldrb.w	r9, [r9, sl]
 80146d0:	fb1b fb05 	smulbb	fp, fp, r5
 80146d4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80146d8:	eb0e 0a09 	add.w	sl, lr, r9
 80146dc:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80146e0:	fb09 b908 	mla	r9, r9, r8, fp
 80146e4:	fa1f f989 	uxth.w	r9, r9
 80146e8:	f109 0b01 	add.w	fp, r9, #1
 80146ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80146f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80146f4:	f804 9006 	strb.w	r9, [r4, r6]
 80146f8:	4426      	add	r6, r4
 80146fa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80146fe:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014702:	fb1b fb05 	smulbb	fp, fp, r5
 8014706:	fb09 b908 	mla	r9, r9, r8, fp
 801470a:	fa1f f989 	uxth.w	r9, r9
 801470e:	f109 0b01 	add.w	fp, r9, #1
 8014712:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014716:	ea4f 2929 	mov.w	r9, r9, asr #8
 801471a:	f886 9001 	strb.w	r9, [r6, #1]
 801471e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014722:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014726:	fb1a fa05 	smulbb	sl, sl, r5
 801472a:	fb09 a908 	mla	r9, r9, r8, sl
 801472e:	fa1f f989 	uxth.w	r9, r9
 8014732:	f109 0a01 	add.w	sl, r9, #1
 8014736:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801473a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801473e:	f886 9002 	strb.w	r9, [r6, #2]
 8014742:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014744:	3701      	adds	r7, #1
 8014746:	4408      	add	r0, r1
 8014748:	9912      	ldr	r1, [sp, #72]	; 0x48
 801474a:	440a      	add	r2, r1
 801474c:	e761      	b.n	8014612 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801474e:	b005      	add	sp, #20
 8014750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014754 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014758:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801475a:	4693      	mov	fp, r2
 801475c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801475e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014762:	6868      	ldr	r0, [r5, #4]
 8014764:	6877      	ldr	r7, [r6, #4]
 8014766:	9100      	str	r1, [sp, #0]
 8014768:	3704      	adds	r7, #4
 801476a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801476e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8014772:	fb00 2404 	mla	r4, r0, r4, r2
 8014776:	682a      	ldr	r2, [r5, #0]
 8014778:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801477c:	4414      	add	r4, r2
 801477e:	6832      	ldr	r2, [r6, #0]
 8014780:	9201      	str	r2, [sp, #4]
 8014782:	9a00      	ldr	r2, [sp, #0]
 8014784:	2a00      	cmp	r2, #0
 8014786:	dc03      	bgt.n	8014790 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014788:	f1bb 0f00 	cmp.w	fp, #0
 801478c:	f340 80bc 	ble.w	8014908 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014792:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8014796:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801479a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801479c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80147a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dd0c      	ble.n	80147c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80147a8:	1405      	asrs	r5, r0, #16
 80147aa:	d405      	bmi.n	80147b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80147ac:	4555      	cmp	r5, sl
 80147ae:	da03      	bge.n	80147b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80147b0:	1415      	asrs	r5, r2, #16
 80147b2:	d401      	bmi.n	80147b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80147b4:	454d      	cmp	r5, r9
 80147b6:	db05      	blt.n	80147c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80147b8:	4440      	add	r0, r8
 80147ba:	4472      	add	r2, lr
 80147bc:	3b01      	subs	r3, #1
 80147be:	3403      	adds	r4, #3
 80147c0:	e7f0      	b.n	80147a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80147c2:	d03f      	beq.n	8014844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80147c4:	1e5d      	subs	r5, r3, #1
 80147c6:	fb08 0c05 	mla	ip, r8, r5, r0
 80147ca:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80147ce:	d42e      	bmi.n	801482e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80147d0:	45d4      	cmp	ip, sl
 80147d2:	da2c      	bge.n	801482e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80147d4:	fb0e 2505 	mla	r5, lr, r5, r2
 80147d8:	142d      	asrs	r5, r5, #16
 80147da:	d428      	bmi.n	801482e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80147dc:	454d      	cmp	r5, r9
 80147de:	da26      	bge.n	801482e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80147e0:	1ce5      	adds	r5, r4, #3
 80147e2:	469c      	mov	ip, r3
 80147e4:	f1bc 0f00 	cmp.w	ip, #0
 80147e8:	f105 0503 	add.w	r5, r5, #3
 80147ec:	dd25      	ble.n	801483a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80147ee:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80147f2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80147f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147fa:	4472      	add	r2, lr
 80147fc:	468a      	mov	sl, r1
 80147fe:	9901      	ldr	r1, [sp, #4]
 8014800:	fb0a 1909 	mla	r9, sl, r9, r1
 8014804:	1401      	asrs	r1, r0, #16
 8014806:	4440      	add	r0, r8
 8014808:	f819 9001 	ldrb.w	r9, [r9, r1]
 801480c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014810:	eb07 0a09 	add.w	sl, r7, r9
 8014814:	f817 9009 	ldrb.w	r9, [r7, r9]
 8014818:	f805 9c06 	strb.w	r9, [r5, #-6]
 801481c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014820:	f805 9c05 	strb.w	r9, [r5, #-5]
 8014824:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014828:	f805 9c04 	strb.w	r9, [r5, #-4]
 801482c:	e7da      	b.n	80147e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801482e:	2500      	movs	r5, #0
 8014830:	eba3 0c05 	sub.w	ip, r3, r5
 8014834:	f1bc 0f00 	cmp.w	ip, #0
 8014838:	dc3b      	bgt.n	80148b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801483a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801483e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014842:	441c      	add	r4, r3
 8014844:	9b00      	ldr	r3, [sp, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	dd5e      	ble.n	8014908 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801484a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801484e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014850:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014854:	eeb0 6a62 	vmov.f32	s12, s5
 8014858:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801485c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014860:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014864:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014868:	eeb0 6a43 	vmov.f32	s12, s6
 801486c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014870:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014874:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014878:	ee61 7a27 	vmul.f32	s15, s2, s15
 801487c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014880:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014884:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014888:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801488c:	ee12 2a90 	vmov	r2, s5
 8014890:	eef0 2a47 	vmov.f32	s5, s14
 8014894:	fb92 f8f3 	sdiv	r8, r2, r3
 8014898:	ee13 2a10 	vmov	r2, s6
 801489c:	eeb0 3a67 	vmov.f32	s6, s15
 80148a0:	fb92 fef3 	sdiv	lr, r2, r3
 80148a4:	9b00      	ldr	r3, [sp, #0]
 80148a6:	3b01      	subs	r3, #1
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148ac:	bf08      	it	eq
 80148ae:	465b      	moveq	r3, fp
 80148b0:	e767      	b.n	8014782 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80148b2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80148b6:	d423      	bmi.n	8014900 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80148b8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80148bc:	45cc      	cmp	ip, r9
 80148be:	dd1f      	ble.n	8014900 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80148c0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80148c4:	d41c      	bmi.n	8014900 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80148c6:	68f1      	ldr	r1, [r6, #12]
 80148c8:	4551      	cmp	r1, sl
 80148ca:	dd19      	ble.n	8014900 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80148cc:	fa0f fc8c 	sxth.w	ip, ip
 80148d0:	9901      	ldr	r1, [sp, #4]
 80148d2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80148d6:	f81c c009 	ldrb.w	ip, [ip, r9]
 80148da:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80148de:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80148e2:	eb07 090c 	add.w	r9, r7, ip
 80148e6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80148ea:	f804 a00c 	strb.w	sl, [r4, ip]
 80148ee:	44a4      	add	ip, r4
 80148f0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80148f4:	f88c a001 	strb.w	sl, [ip, #1]
 80148f8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80148fc:	f88c 9002 	strb.w	r9, [ip, #2]
 8014900:	4440      	add	r0, r8
 8014902:	4472      	add	r2, lr
 8014904:	3501      	adds	r5, #1
 8014906:	e793      	b.n	8014830 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014908:	b003      	add	sp, #12
 801490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801490e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801490e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014912:	b085      	sub	sp, #20
 8014914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014918:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801491a:	9202      	str	r2, [sp, #8]
 801491c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014920:	6860      	ldr	r0, [r4, #4]
 8014922:	9203      	str	r2, [sp, #12]
 8014924:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014928:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801492c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014930:	fb00 2505 	mla	r5, r0, r5, r2
 8014934:	6822      	ldr	r2, [r4, #0]
 8014936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801493a:	4415      	add	r5, r2
 801493c:	f8dc 2000 	ldr.w	r2, [ip]
 8014940:	9200      	str	r2, [sp, #0]
 8014942:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014946:	3204      	adds	r2, #4
 8014948:	9201      	str	r2, [sp, #4]
 801494a:	2900      	cmp	r1, #0
 801494c:	dc03      	bgt.n	8014956 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801494e:	9a02      	ldr	r2, [sp, #8]
 8014950:	2a00      	cmp	r2, #0
 8014952:	f340 8127 	ble.w	8014ba4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014958:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801495c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014960:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014962:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014966:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801496a:	2b00      	cmp	r3, #0
 801496c:	dd0d      	ble.n	801498a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801496e:	1422      	asrs	r2, r4, #16
 8014970:	d405      	bmi.n	801497e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014972:	4542      	cmp	r2, r8
 8014974:	da03      	bge.n	801497e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014976:	1402      	asrs	r2, r0, #16
 8014978:	d401      	bmi.n	801497e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801497a:	42ba      	cmp	r2, r7
 801497c:	db06      	blt.n	801498c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801497e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014980:	4474      	add	r4, lr
 8014982:	3b01      	subs	r3, #1
 8014984:	3503      	adds	r5, #3
 8014986:	4410      	add	r0, r2
 8014988:	e7ef      	b.n	801496a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801498a:	d075      	beq.n	8014a78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801498c:	1e5a      	subs	r2, r3, #1
 801498e:	fb0e 4602 	mla	r6, lr, r2, r4
 8014992:	1436      	asrs	r6, r6, #16
 8014994:	d465      	bmi.n	8014a62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014996:	4546      	cmp	r6, r8
 8014998:	da63      	bge.n	8014a62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801499a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801499c:	fb06 0202 	mla	r2, r6, r2, r0
 80149a0:	1412      	asrs	r2, r2, #16
 80149a2:	d45e      	bmi.n	8014a62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80149a4:	42ba      	cmp	r2, r7
 80149a6:	da5c      	bge.n	8014a62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80149a8:	1cef      	adds	r7, r5, #3
 80149aa:	4699      	mov	r9, r3
 80149ac:	f1b9 0f00 	cmp.w	r9, #0
 80149b0:	dd5d      	ble.n	8014a6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80149b2:	1402      	asrs	r2, r0, #16
 80149b4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80149b8:	1426      	asrs	r6, r4, #16
 80149ba:	4692      	mov	sl, r2
 80149bc:	9a00      	ldr	r2, [sp, #0]
 80149be:	fb08 220a 	mla	r2, r8, sl, r2
 80149c2:	5d92      	ldrb	r2, [r2, r6]
 80149c4:	9e01      	ldr	r6, [sp, #4]
 80149c6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80149ca:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80149ce:	d041      	beq.n	8014a54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80149d0:	9a03      	ldr	r2, [sp, #12]
 80149d2:	fa5f fb86 	uxtb.w	fp, r6
 80149d6:	fb02 f808 	mul.w	r8, r2, r8
 80149da:	f108 0201 	add.w	r2, r8, #1
 80149de:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80149e2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80149e6:	1212      	asrs	r2, r2, #8
 80149e8:	fa1f fa82 	uxth.w	sl, r2
 80149ec:	43d2      	mvns	r2, r2
 80149ee:	fb1b fb0a 	smulbb	fp, fp, sl
 80149f2:	b2d2      	uxtb	r2, r2
 80149f4:	fb08 b802 	mla	r8, r8, r2, fp
 80149f8:	fa1f f888 	uxth.w	r8, r8
 80149fc:	f108 0b01 	add.w	fp, r8, #1
 8014a00:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014a04:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014a08:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014a0c:	fb1b fb0a 	smulbb	fp, fp, sl
 8014a10:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014a14:	fb16 fa0a 	smulbb	sl, r6, sl
 8014a18:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014a1c:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014a20:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014a24:	fb06 aa02 	mla	sl, r6, r2, sl
 8014a28:	fb08 b802 	mla	r8, r8, r2, fp
 8014a2c:	fa1f fa8a 	uxth.w	sl, sl
 8014a30:	fa1f f888 	uxth.w	r8, r8
 8014a34:	f10a 0601 	add.w	r6, sl, #1
 8014a38:	f108 0b01 	add.w	fp, r8, #1
 8014a3c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014a40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014a44:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014a48:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014a4c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014a50:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a56:	4474      	add	r4, lr
 8014a58:	3703      	adds	r7, #3
 8014a5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8014a5e:	4410      	add	r0, r2
 8014a60:	e7a4      	b.n	80149ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014a62:	f04f 0800 	mov.w	r8, #0
 8014a66:	eba3 0208 	sub.w	r2, r3, r8
 8014a6a:	2a00      	cmp	r2, #0
 8014a6c:	dc3b      	bgt.n	8014ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8014a6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014a72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a76:	441d      	add	r5, r3
 8014a78:	2900      	cmp	r1, #0
 8014a7a:	f340 8093 	ble.w	8014ba4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014a7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014a88:	3901      	subs	r1, #1
 8014a8a:	eeb0 6a62 	vmov.f32	s12, s5
 8014a8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014a92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014a96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a9a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014a9e:	eeb0 6a43 	vmov.f32	s12, s6
 8014aa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014aa6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014aaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014aae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014ab2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014ab6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014aba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014abe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014ac2:	ee12 2a90 	vmov	r2, s5
 8014ac6:	eef0 2a47 	vmov.f32	s5, s14
 8014aca:	fb92 fef3 	sdiv	lr, r2, r3
 8014ace:	ee13 2a10 	vmov	r2, s6
 8014ad2:	eeb0 3a67 	vmov.f32	s6, s15
 8014ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ada:	9a02      	ldr	r2, [sp, #8]
 8014adc:	9312      	str	r3, [sp, #72]	; 0x48
 8014ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ae0:	bf08      	it	eq
 8014ae2:	4613      	moveq	r3, r2
 8014ae4:	e731      	b.n	801494a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014ae6:	1427      	asrs	r7, r4, #16
 8014ae8:	d456      	bmi.n	8014b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014aea:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014aee:	42be      	cmp	r6, r7
 8014af0:	dd52      	ble.n	8014b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014af2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014af6:	d44f      	bmi.n	8014b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014af8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014afc:	454a      	cmp	r2, r9
 8014afe:	dd4b      	ble.n	8014b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b00:	9a00      	ldr	r2, [sp, #0]
 8014b02:	b236      	sxth	r6, r6
 8014b04:	fb09 2606 	mla	r6, r9, r6, r2
 8014b08:	5df2      	ldrb	r2, [r6, r7]
 8014b0a:	9e01      	ldr	r6, [sp, #4]
 8014b0c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8014b10:	0e3a      	lsrs	r2, r7, #24
 8014b12:	d041      	beq.n	8014b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014b14:	9e03      	ldr	r6, [sp, #12]
 8014b16:	fa5f fb87 	uxtb.w	fp, r7
 8014b1a:	4372      	muls	r2, r6
 8014b1c:	1c56      	adds	r6, r2, #1
 8014b1e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014b22:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014b26:	1212      	asrs	r2, r2, #8
 8014b28:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014b2c:	fa1f fa82 	uxth.w	sl, r2
 8014b30:	43d2      	mvns	r2, r2
 8014b32:	fb1b fb0a 	smulbb	fp, fp, sl
 8014b36:	b2d2      	uxtb	r2, r2
 8014b38:	fb09 b902 	mla	r9, r9, r2, fp
 8014b3c:	fa1f f989 	uxth.w	r9, r9
 8014b40:	f109 0b01 	add.w	fp, r9, #1
 8014b44:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b48:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014b4c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014b50:	fb1b fb0a 	smulbb	fp, fp, sl
 8014b54:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b58:	fb17 fa0a 	smulbb	sl, r7, sl
 8014b5c:	f805 9006 	strb.w	r9, [r5, r6]
 8014b60:	442e      	add	r6, r5
 8014b62:	78b7      	ldrb	r7, [r6, #2]
 8014b64:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014b68:	fb07 aa02 	mla	sl, r7, r2, sl
 8014b6c:	fb09 b902 	mla	r9, r9, r2, fp
 8014b70:	fa1f fa8a 	uxth.w	sl, sl
 8014b74:	fa1f f989 	uxth.w	r9, r9
 8014b78:	f10a 0701 	add.w	r7, sl, #1
 8014b7c:	f109 0b01 	add.w	fp, r9, #1
 8014b80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014b84:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b88:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014b8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b90:	f886 a002 	strb.w	sl, [r6, #2]
 8014b94:	f886 9001 	strb.w	r9, [r6, #1]
 8014b98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b9a:	4474      	add	r4, lr
 8014b9c:	f108 0801 	add.w	r8, r8, #1
 8014ba0:	4410      	add	r0, r2
 8014ba2:	e760      	b.n	8014a66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014ba4:	b005      	add	sp, #20
 8014ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014baa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bae:	b085      	sub	sp, #20
 8014bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014bb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014bb6:	9203      	str	r2, [sp, #12]
 8014bb8:	6868      	ldr	r0, [r5, #4]
 8014bba:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014bbe:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014bc2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014bc6:	fb00 2404 	mla	r4, r0, r4, r2
 8014bca:	682a      	ldr	r2, [r5, #0]
 8014bcc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014bd0:	4414      	add	r4, r2
 8014bd2:	f8dc 2000 	ldr.w	r2, [ip]
 8014bd6:	9201      	str	r2, [sp, #4]
 8014bd8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014bdc:	3204      	adds	r2, #4
 8014bde:	9202      	str	r2, [sp, #8]
 8014be0:	2900      	cmp	r1, #0
 8014be2:	dc03      	bgt.n	8014bec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014be4:	9a03      	ldr	r2, [sp, #12]
 8014be6:	2a00      	cmp	r2, #0
 8014be8:	f340 8137 	ble.w	8014e5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014bec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014bf2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014bf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bf8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014bfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	dd0d      	ble.n	8014c20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c04:	1405      	asrs	r5, r0, #16
 8014c06:	d405      	bmi.n	8014c14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c08:	4545      	cmp	r5, r8
 8014c0a:	da03      	bge.n	8014c14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c0c:	1415      	asrs	r5, r2, #16
 8014c0e:	d401      	bmi.n	8014c14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014c10:	42bd      	cmp	r5, r7
 8014c12:	db06      	blt.n	8014c22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014c14:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014c16:	4470      	add	r0, lr
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	3403      	adds	r4, #3
 8014c1c:	442a      	add	r2, r5
 8014c1e:	e7ef      	b.n	8014c00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014c20:	d070      	beq.n	8014d04 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014c22:	1e5d      	subs	r5, r3, #1
 8014c24:	fb0e 0605 	mla	r6, lr, r5, r0
 8014c28:	1436      	asrs	r6, r6, #16
 8014c2a:	d462      	bmi.n	8014cf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c2c:	4546      	cmp	r6, r8
 8014c2e:	da60      	bge.n	8014cf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c30:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014c32:	fb06 2505 	mla	r5, r6, r5, r2
 8014c36:	142d      	asrs	r5, r5, #16
 8014c38:	d45b      	bmi.n	8014cf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c3a:	42bd      	cmp	r5, r7
 8014c3c:	da59      	bge.n	8014cf2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014c3e:	1ce5      	adds	r5, r4, #3
 8014c40:	469a      	mov	sl, r3
 8014c42:	f1ba 0f00 	cmp.w	sl, #0
 8014c46:	dd58      	ble.n	8014cfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014c48:	1416      	asrs	r6, r2, #16
 8014c4a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014c4e:	1407      	asrs	r7, r0, #16
 8014c50:	46b1      	mov	r9, r6
 8014c52:	9e01      	ldr	r6, [sp, #4]
 8014c54:	fb08 6609 	mla	r6, r8, r9, r6
 8014c58:	5df6      	ldrb	r6, [r6, r7]
 8014c5a:	9f02      	ldr	r7, [sp, #8]
 8014c5c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8014c60:	0e37      	lsrs	r7, r6, #24
 8014c62:	2fff      	cmp	r7, #255	; 0xff
 8014c64:	f000 80f0 	beq.w	8014e48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8014c68:	fa5f f887 	uxtb.w	r8, r7
 8014c6c:	b3d7      	cbz	r7, 8014ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014c6e:	fa1f f788 	uxth.w	r7, r8
 8014c72:	ea6f 0808 	mvn.w	r8, r8
 8014c76:	fa5f fb86 	uxtb.w	fp, r6
 8014c7a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8014c7e:	fa5f f888 	uxtb.w	r8, r8
 8014c82:	fb1b fb07 	smulbb	fp, fp, r7
 8014c86:	fb09 b908 	mla	r9, r9, r8, fp
 8014c8a:	fa1f f989 	uxth.w	r9, r9
 8014c8e:	f109 0b01 	add.w	fp, r9, #1
 8014c92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014c96:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014c9a:	fb1b fb08 	smulbb	fp, fp, r8
 8014c9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014ca2:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014ca6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014caa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014cae:	fb09 b907 	mla	r9, r9, r7, fp
 8014cb2:	fa1f f989 	uxth.w	r9, r9
 8014cb6:	f109 0b01 	add.w	fp, r9, #1
 8014cba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014cbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014cc2:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014cc6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014cca:	fb19 f808 	smulbb	r8, r9, r8
 8014cce:	fb06 8607 	mla	r6, r6, r7, r8
 8014cd2:	b2b6      	uxth	r6, r6
 8014cd4:	f106 0801 	add.w	r8, r6, #1
 8014cd8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014cdc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014ce0:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014ce4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014ce6:	4470      	add	r0, lr
 8014ce8:	3503      	adds	r5, #3
 8014cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cee:	4432      	add	r2, r6
 8014cf0:	e7a7      	b.n	8014c42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014cf2:	2600      	movs	r6, #0
 8014cf4:	1b9d      	subs	r5, r3, r6
 8014cf6:	2d00      	cmp	r5, #0
 8014cf8:	dc3b      	bgt.n	8014d72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014cfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014cfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d02:	441c      	add	r4, r3
 8014d04:	2900      	cmp	r1, #0
 8014d06:	f340 80a8 	ble.w	8014e5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014d0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d14:	3901      	subs	r1, #1
 8014d16:	eeb0 6a62 	vmov.f32	s12, s5
 8014d1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d26:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014d2a:	eeb0 6a43 	vmov.f32	s12, s6
 8014d2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014d36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d4e:	ee12 2a90 	vmov	r2, s5
 8014d52:	eef0 2a47 	vmov.f32	s5, s14
 8014d56:	fb92 fef3 	sdiv	lr, r2, r3
 8014d5a:	ee13 2a10 	vmov	r2, s6
 8014d5e:	eeb0 3a67 	vmov.f32	s6, s15
 8014d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d66:	9a03      	ldr	r2, [sp, #12]
 8014d68:	9312      	str	r3, [sp, #72]	; 0x48
 8014d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d6c:	bf08      	it	eq
 8014d6e:	4613      	moveq	r3, r2
 8014d70:	e736      	b.n	8014be0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014d72:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014d76:	d457      	bmi.n	8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014d78:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8014d7c:	4547      	cmp	r7, r8
 8014d7e:	dd53      	ble.n	8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014d80:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014d84:	d450      	bmi.n	8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014d86:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014d8a:	454d      	cmp	r5, r9
 8014d8c:	dd4c      	ble.n	8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014d8e:	9d01      	ldr	r5, [sp, #4]
 8014d90:	b23f      	sxth	r7, r7
 8014d92:	fb09 5707 	mla	r7, r9, r7, r5
 8014d96:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014d9a:	9f02      	ldr	r7, [sp, #8]
 8014d9c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8014da0:	0e2f      	lsrs	r7, r5, #24
 8014da2:	2fff      	cmp	r7, #255	; 0xff
 8014da4:	d045      	beq.n	8014e32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014da6:	fa5f f987 	uxtb.w	r9, r7
 8014daa:	b3ef      	cbz	r7, 8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014dac:	fa1f f889 	uxth.w	r8, r9
 8014db0:	ea6f 0909 	mvn.w	r9, r9
 8014db4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014db8:	fa5f fb85 	uxtb.w	fp, r5
 8014dbc:	f814 a007 	ldrb.w	sl, [r4, r7]
 8014dc0:	fa5f f989 	uxtb.w	r9, r9
 8014dc4:	fb1b fb08 	smulbb	fp, fp, r8
 8014dc8:	fb0a ba09 	mla	sl, sl, r9, fp
 8014dcc:	fa1f fa8a 	uxth.w	sl, sl
 8014dd0:	f10a 0b01 	add.w	fp, sl, #1
 8014dd4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014dd8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014ddc:	f804 a007 	strb.w	sl, [r4, r7]
 8014de0:	4427      	add	r7, r4
 8014de2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014de6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014dea:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014dee:	fb1b fb09 	smulbb	fp, fp, r9
 8014df2:	fb0a ba08 	mla	sl, sl, r8, fp
 8014df6:	fa1f fa8a 	uxth.w	sl, sl
 8014dfa:	f10a 0b01 	add.w	fp, sl, #1
 8014dfe:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014e02:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014e06:	f887 a001 	strb.w	sl, [r7, #1]
 8014e0a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014e0e:	fb1a f909 	smulbb	r9, sl, r9
 8014e12:	fb05 9508 	mla	r5, r5, r8, r9
 8014e16:	b2ad      	uxth	r5, r5
 8014e18:	f105 0901 	add.w	r9, r5, #1
 8014e1c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8014e20:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e24:	f887 9002 	strb.w	r9, [r7, #2]
 8014e28:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014e2a:	4470      	add	r0, lr
 8014e2c:	3601      	adds	r6, #1
 8014e2e:	442a      	add	r2, r5
 8014e30:	e760      	b.n	8014cf4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014e32:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014e36:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8014e3a:	55e5      	strb	r5, [r4, r7]
 8014e3c:	4427      	add	r7, r4
 8014e3e:	0c2d      	lsrs	r5, r5, #16
 8014e40:	f887 8001 	strb.w	r8, [r7, #1]
 8014e44:	70bd      	strb	r5, [r7, #2]
 8014e46:	e7ef      	b.n	8014e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014e48:	0a37      	lsrs	r7, r6, #8
 8014e4a:	f805 6c03 	strb.w	r6, [r5, #-3]
 8014e4e:	0c36      	lsrs	r6, r6, #16
 8014e50:	f805 7c02 	strb.w	r7, [r5, #-2]
 8014e54:	f805 6c01 	strb.w	r6, [r5, #-1]
 8014e58:	e744      	b.n	8014ce4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014e5a:	b005      	add	sp, #20
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e60 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014e66:	9201      	str	r2, [sp, #4]
 8014e68:	6870      	ldr	r0, [r6, #4]
 8014e6a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014e6e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014e72:	fa1f fe85 	uxth.w	lr, r5
 8014e76:	43ed      	mvns	r5, r5
 8014e78:	f8dc 8000 	ldr.w	r8, [ip]
 8014e7c:	b2ed      	uxtb	r5, r5
 8014e7e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014e82:	fb00 2404 	mla	r4, r0, r4, r2
 8014e86:	6832      	ldr	r2, [r6, #0]
 8014e88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014e8c:	4414      	add	r4, r2
 8014e8e:	2900      	cmp	r1, #0
 8014e90:	dc03      	bgt.n	8014e9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8014e92:	9a01      	ldr	r2, [sp, #4]
 8014e94:	2a00      	cmp	r2, #0
 8014e96:	f340 810d 	ble.w	80150b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e9c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014ea0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ea6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014eaa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	dd0e      	ble.n	8014ed0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014eb2:	1406      	asrs	r6, r0, #16
 8014eb4:	d405      	bmi.n	8014ec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014eb6:	4556      	cmp	r6, sl
 8014eb8:	da03      	bge.n	8014ec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014eba:	1416      	asrs	r6, r2, #16
 8014ebc:	d401      	bmi.n	8014ec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014ebe:	454e      	cmp	r6, r9
 8014ec0:	db07      	blt.n	8014ed2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014ec2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	3403      	adds	r4, #3
 8014ec8:	4430      	add	r0, r6
 8014eca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014ecc:	4432      	add	r2, r6
 8014ece:	e7ee      	b.n	8014eae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8014ed0:	d060      	beq.n	8014f94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8014ed2:	1e5e      	subs	r6, r3, #1
 8014ed4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014ed6:	fb07 0706 	mla	r7, r7, r6, r0
 8014eda:	143f      	asrs	r7, r7, #16
 8014edc:	d451      	bmi.n	8014f82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014ede:	4557      	cmp	r7, sl
 8014ee0:	da4f      	bge.n	8014f82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014ee2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014ee4:	fb07 2606 	mla	r6, r7, r6, r2
 8014ee8:	1436      	asrs	r6, r6, #16
 8014eea:	d44a      	bmi.n	8014f82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014eec:	454e      	cmp	r6, r9
 8014eee:	da48      	bge.n	8014f82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014ef0:	1ce6      	adds	r6, r4, #3
 8014ef2:	4699      	mov	r9, r3
 8014ef4:	f1b9 0f00 	cmp.w	r9, #0
 8014ef8:	f106 0603 	add.w	r6, r6, #3
 8014efc:	dd45      	ble.n	8014f8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8014efe:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014f02:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014f06:	1417      	asrs	r7, r2, #16
 8014f08:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f0c:	fb0b a707 	mla	r7, fp, r7, sl
 8014f10:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014f14:	fb1b fb05 	smulbb	fp, fp, r5
 8014f18:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014f1c:	eb08 0a07 	add.w	sl, r8, r7
 8014f20:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014f24:	fb07 b70e 	mla	r7, r7, lr, fp
 8014f28:	b2bf      	uxth	r7, r7
 8014f2a:	f107 0b01 	add.w	fp, r7, #1
 8014f2e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014f32:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014f36:	fb1b fb05 	smulbb	fp, fp, r5
 8014f3a:	123f      	asrs	r7, r7, #8
 8014f3c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014f40:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014f44:	fb07 b70e 	mla	r7, r7, lr, fp
 8014f48:	b2bf      	uxth	r7, r7
 8014f4a:	f107 0b01 	add.w	fp, r7, #1
 8014f4e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014f52:	123f      	asrs	r7, r7, #8
 8014f54:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014f58:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014f5c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014f60:	fb1a fa05 	smulbb	sl, sl, r5
 8014f64:	fb07 a70e 	mla	r7, r7, lr, sl
 8014f68:	b2bf      	uxth	r7, r7
 8014f6a:	f107 0a01 	add.w	sl, r7, #1
 8014f6e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014f72:	123f      	asrs	r7, r7, #8
 8014f74:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014f78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014f7a:	4438      	add	r0, r7
 8014f7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014f7e:	443a      	add	r2, r7
 8014f80:	e7b8      	b.n	8014ef4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014f82:	2700      	movs	r7, #0
 8014f84:	1bde      	subs	r6, r3, r7
 8014f86:	2e00      	cmp	r6, #0
 8014f88:	dc3f      	bgt.n	801500a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014f8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014f92:	441c      	add	r4, r3
 8014f94:	2900      	cmp	r1, #0
 8014f96:	f340 808d 	ble.w	80150b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fa0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014fa4:	3901      	subs	r1, #1
 8014fa6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014faa:	eef0 6a62 	vmov.f32	s13, s5
 8014fae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014fb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014fb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014fba:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014fbe:	eef0 6a43 	vmov.f32	s13, s6
 8014fc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014fc6:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8014fca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014fce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014fd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014fd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014fda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014fde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014fe2:	ee12 2a90 	vmov	r2, s5
 8014fe6:	eef0 2a47 	vmov.f32	s5, s14
 8014fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fee:	ee13 2a10 	vmov	r2, s6
 8014ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ff6:	eeb0 3a67 	vmov.f32	s6, s15
 8014ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ffe:	9a01      	ldr	r2, [sp, #4]
 8015000:	9310      	str	r3, [sp, #64]	; 0x40
 8015002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015004:	bf08      	it	eq
 8015006:	4613      	moveq	r3, r2
 8015008:	e741      	b.n	8014e8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801500a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801500e:	d44b      	bmi.n	80150a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015010:	f8dc b008 	ldr.w	fp, [ip, #8]
 8015014:	45cb      	cmp	fp, r9
 8015016:	dd47      	ble.n	80150a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015018:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801501c:	d444      	bmi.n	80150a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801501e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8015022:	4556      	cmp	r6, sl
 8015024:	dd40      	ble.n	80150a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015026:	fa0f f68b 	sxth.w	r6, fp
 801502a:	fb0a 9906 	mla	r9, sl, r6, r9
 801502e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015032:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015036:	f814 b006 	ldrb.w	fp, [r4, r6]
 801503a:	fb1b fb05 	smulbb	fp, fp, r5
 801503e:	eb08 0a09 	add.w	sl, r8, r9
 8015042:	f818 9009 	ldrb.w	r9, [r8, r9]
 8015046:	fb09 b90e 	mla	r9, r9, lr, fp
 801504a:	fa1f f989 	uxth.w	r9, r9
 801504e:	f109 0b01 	add.w	fp, r9, #1
 8015052:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015056:	ea4f 2929 	mov.w	r9, r9, asr #8
 801505a:	f804 9006 	strb.w	r9, [r4, r6]
 801505e:	4426      	add	r6, r4
 8015060:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015064:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015068:	fb1b fb05 	smulbb	fp, fp, r5
 801506c:	fb09 b90e 	mla	r9, r9, lr, fp
 8015070:	fa1f f989 	uxth.w	r9, r9
 8015074:	f109 0b01 	add.w	fp, r9, #1
 8015078:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801507c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015080:	f886 9001 	strb.w	r9, [r6, #1]
 8015084:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015088:	f896 a002 	ldrb.w	sl, [r6, #2]
 801508c:	fb1a fa05 	smulbb	sl, sl, r5
 8015090:	fb09 a90e 	mla	r9, r9, lr, sl
 8015094:	fa1f f989 	uxth.w	r9, r9
 8015098:	f109 0a01 	add.w	sl, r9, #1
 801509c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80150a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80150a4:	f886 9002 	strb.w	r9, [r6, #2]
 80150a8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80150aa:	3701      	adds	r7, #1
 80150ac:	4430      	add	r0, r6
 80150ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80150b0:	4432      	add	r2, r6
 80150b2:	e767      	b.n	8014f84 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80150b4:	b003      	add	sp, #12
 80150b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80150ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150be:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80150c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150c4:	9201      	str	r2, [sp, #4]
 80150c6:	6868      	ldr	r0, [r5, #4]
 80150c8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80150ca:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80150ce:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80150d2:	fb00 2404 	mla	r4, r0, r4, r2
 80150d6:	682a      	ldr	r2, [r5, #0]
 80150d8:	f8d7 8000 	ldr.w	r8, [r7]
 80150dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80150e0:	4414      	add	r4, r2
 80150e2:	2900      	cmp	r1, #0
 80150e4:	dc03      	bgt.n	80150ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80150e6:	9a01      	ldr	r2, [sp, #4]
 80150e8:	2a00      	cmp	r2, #0
 80150ea:	f340 80af 	ble.w	801524c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80150ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150f0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80150f4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80150f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150fa:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80150fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015102:	2b00      	cmp	r3, #0
 8015104:	dd0c      	ble.n	8015120 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8015106:	1405      	asrs	r5, r0, #16
 8015108:	d405      	bmi.n	8015116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801510a:	4555      	cmp	r5, sl
 801510c:	da03      	bge.n	8015116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801510e:	1415      	asrs	r5, r2, #16
 8015110:	d401      	bmi.n	8015116 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015112:	454d      	cmp	r5, r9
 8015114:	db05      	blt.n	8015122 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015116:	4470      	add	r0, lr
 8015118:	4462      	add	r2, ip
 801511a:	3b01      	subs	r3, #1
 801511c:	3403      	adds	r4, #3
 801511e:	e7f0      	b.n	8015102 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015120:	d038      	beq.n	8015194 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015122:	1e5d      	subs	r5, r3, #1
 8015124:	fb0e 0605 	mla	r6, lr, r5, r0
 8015128:	1436      	asrs	r6, r6, #16
 801512a:	d42a      	bmi.n	8015182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801512c:	4556      	cmp	r6, sl
 801512e:	da28      	bge.n	8015182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015130:	fb0c 2505 	mla	r5, ip, r5, r2
 8015134:	142d      	asrs	r5, r5, #16
 8015136:	d424      	bmi.n	8015182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015138:	454d      	cmp	r5, r9
 801513a:	da22      	bge.n	8015182 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801513c:	1ce6      	adds	r6, r4, #3
 801513e:	4699      	mov	r9, r3
 8015140:	f1b9 0f00 	cmp.w	r9, #0
 8015144:	f106 0603 	add.w	r6, r6, #3
 8015148:	dd1f      	ble.n	801518a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801514a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801514e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015152:	1415      	asrs	r5, r2, #16
 8015154:	4470      	add	r0, lr
 8015156:	4462      	add	r2, ip
 8015158:	f109 39ff 	add.w	r9, r9, #4294967295
 801515c:	fb0b a505 	mla	r5, fp, r5, sl
 8015160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015164:	eb08 0a05 	add.w	sl, r8, r5
 8015168:	f818 5005 	ldrb.w	r5, [r8, r5]
 801516c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8015170:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8015174:	f806 5c05 	strb.w	r5, [r6, #-5]
 8015178:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801517c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8015180:	e7de      	b.n	8015140 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8015182:	2600      	movs	r6, #0
 8015184:	1b9d      	subs	r5, r3, r6
 8015186:	2d00      	cmp	r5, #0
 8015188:	dc38      	bgt.n	80151fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801518a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801518e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015192:	441c      	add	r4, r3
 8015194:	2900      	cmp	r1, #0
 8015196:	dd59      	ble.n	801524c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8015198:	ee30 0a04 	vadd.f32	s0, s0, s8
 801519c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801519e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80151a2:	3901      	subs	r1, #1
 80151a4:	eeb0 6a62 	vmov.f32	s12, s5
 80151a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80151ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80151b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80151b4:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80151b8:	eeb0 6a43 	vmov.f32	s12, s6
 80151bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80151c0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80151c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80151c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80151cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80151d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80151d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80151d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80151dc:	ee12 2a90 	vmov	r2, s5
 80151e0:	eef0 2a47 	vmov.f32	s5, s14
 80151e4:	fb92 fef3 	sdiv	lr, r2, r3
 80151e8:	ee13 2a10 	vmov	r2, s6
 80151ec:	eeb0 3a67 	vmov.f32	s6, s15
 80151f0:	fb92 fcf3 	sdiv	ip, r2, r3
 80151f4:	9a01      	ldr	r2, [sp, #4]
 80151f6:	bf08      	it	eq
 80151f8:	4613      	moveq	r3, r2
 80151fa:	e772      	b.n	80150e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80151fc:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015200:	d420      	bmi.n	8015244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015202:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8015206:	45cb      	cmp	fp, r9
 8015208:	dd1c      	ble.n	8015244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801520a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801520e:	d419      	bmi.n	8015244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015210:	68fd      	ldr	r5, [r7, #12]
 8015212:	4555      	cmp	r5, sl
 8015214:	dd16      	ble.n	8015244 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015216:	fa0f f58b 	sxth.w	r5, fp
 801521a:	fb0a 9505 	mla	r5, sl, r5, r9
 801521e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015222:	f818 9005 	ldrb.w	r9, [r8, r5]
 8015226:	eb08 0b05 	add.w	fp, r8, r5
 801522a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801522e:	f804 9005 	strb.w	r9, [r4, r5]
 8015232:	4425      	add	r5, r4
 8015234:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8015238:	f885 9001 	strb.w	r9, [r5, #1]
 801523c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8015240:	f885 9002 	strb.w	r9, [r5, #2]
 8015244:	4470      	add	r0, lr
 8015246:	4462      	add	r2, ip
 8015248:	3601      	adds	r6, #1
 801524a:	e79b      	b.n	8015184 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801524c:	b003      	add	sp, #12
 801524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015256:	b085      	sub	sp, #20
 8015258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801525c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801525e:	9202      	str	r2, [sp, #8]
 8015260:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015264:	6860      	ldr	r0, [r4, #4]
 8015266:	9203      	str	r2, [sp, #12]
 8015268:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801526c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015270:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8015274:	fb00 2505 	mla	r5, r0, r5, r2
 8015278:	6822      	ldr	r2, [r4, #0]
 801527a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801527e:	4415      	add	r5, r2
 8015280:	f8dc 2000 	ldr.w	r2, [ip]
 8015284:	9201      	str	r2, [sp, #4]
 8015286:	2900      	cmp	r1, #0
 8015288:	dc03      	bgt.n	8015292 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801528a:	9a02      	ldr	r2, [sp, #8]
 801528c:	2a00      	cmp	r2, #0
 801528e:	f340 8122 	ble.w	80154d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8015292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015294:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015298:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801529c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801529e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80152a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	dd0d      	ble.n	80152c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80152aa:	1422      	asrs	r2, r4, #16
 80152ac:	d405      	bmi.n	80152ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80152ae:	4542      	cmp	r2, r8
 80152b0:	da03      	bge.n	80152ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80152b2:	1402      	asrs	r2, r0, #16
 80152b4:	d401      	bmi.n	80152ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80152b6:	42ba      	cmp	r2, r7
 80152b8:	db06      	blt.n	80152c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80152ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152bc:	4474      	add	r4, lr
 80152be:	3b01      	subs	r3, #1
 80152c0:	3503      	adds	r5, #3
 80152c2:	4410      	add	r0, r2
 80152c4:	e7ef      	b.n	80152a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80152c6:	d072      	beq.n	80153ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80152c8:	1e5a      	subs	r2, r3, #1
 80152ca:	fb0e 4602 	mla	r6, lr, r2, r4
 80152ce:	1436      	asrs	r6, r6, #16
 80152d0:	d462      	bmi.n	8015398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80152d2:	4546      	cmp	r6, r8
 80152d4:	da60      	bge.n	8015398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80152d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80152d8:	fb06 0202 	mla	r2, r6, r2, r0
 80152dc:	1412      	asrs	r2, r2, #16
 80152de:	d45b      	bmi.n	8015398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80152e0:	42ba      	cmp	r2, r7
 80152e2:	da59      	bge.n	8015398 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80152e4:	1cef      	adds	r7, r5, #3
 80152e6:	4699      	mov	r9, r3
 80152e8:	f1b9 0f00 	cmp.w	r9, #0
 80152ec:	dd5a      	ble.n	80153a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80152ee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80152f2:	1426      	asrs	r6, r4, #16
 80152f4:	1402      	asrs	r2, r0, #16
 80152f6:	fb08 6202 	mla	r2, r8, r2, r6
 80152fa:	9e01      	ldr	r6, [sp, #4]
 80152fc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015300:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015304:	d041      	beq.n	801538a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015306:	9a03      	ldr	r2, [sp, #12]
 8015308:	fa5f fb86 	uxtb.w	fp, r6
 801530c:	fb02 f808 	mul.w	r8, r2, r8
 8015310:	f108 0201 	add.w	r2, r8, #1
 8015314:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015318:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801531c:	1212      	asrs	r2, r2, #8
 801531e:	fa1f fa82 	uxth.w	sl, r2
 8015322:	43d2      	mvns	r2, r2
 8015324:	fb1b fb0a 	smulbb	fp, fp, sl
 8015328:	b2d2      	uxtb	r2, r2
 801532a:	fb08 b802 	mla	r8, r8, r2, fp
 801532e:	fa1f f888 	uxth.w	r8, r8
 8015332:	f108 0b01 	add.w	fp, r8, #1
 8015336:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801533a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801533e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015342:	fb1b fb0a 	smulbb	fp, fp, sl
 8015346:	ea4f 2828 	mov.w	r8, r8, asr #8
 801534a:	fb16 fa0a 	smulbb	sl, r6, sl
 801534e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015352:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015356:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801535a:	fb06 aa02 	mla	sl, r6, r2, sl
 801535e:	fb08 b802 	mla	r8, r8, r2, fp
 8015362:	fa1f fa8a 	uxth.w	sl, sl
 8015366:	fa1f f888 	uxth.w	r8, r8
 801536a:	f10a 0601 	add.w	r6, sl, #1
 801536e:	f108 0b01 	add.w	fp, r8, #1
 8015372:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015376:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801537a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801537e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015382:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015386:	f807 8c02 	strb.w	r8, [r7, #-2]
 801538a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801538c:	4474      	add	r4, lr
 801538e:	3703      	adds	r7, #3
 8015390:	f109 39ff 	add.w	r9, r9, #4294967295
 8015394:	4410      	add	r0, r2
 8015396:	e7a7      	b.n	80152e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015398:	f04f 0800 	mov.w	r8, #0
 801539c:	eba3 0208 	sub.w	r2, r3, r8
 80153a0:	2a00      	cmp	r2, #0
 80153a2:	dc3b      	bgt.n	801541c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80153a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80153a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80153ac:	441d      	add	r5, r3
 80153ae:	2900      	cmp	r1, #0
 80153b0:	f340 8091 	ble.w	80154d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80153b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80153b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80153be:	3901      	subs	r1, #1
 80153c0:	eeb0 6a62 	vmov.f32	s12, s5
 80153c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80153c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80153cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80153d4:	eeb0 6a43 	vmov.f32	s12, s6
 80153d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80153e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80153e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80153e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80153ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80153f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80153f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80153f8:	ee12 2a90 	vmov	r2, s5
 80153fc:	eef0 2a47 	vmov.f32	s5, s14
 8015400:	fb92 fef3 	sdiv	lr, r2, r3
 8015404:	ee13 2a10 	vmov	r2, s6
 8015408:	eeb0 3a67 	vmov.f32	s6, s15
 801540c:	fb92 f3f3 	sdiv	r3, r2, r3
 8015410:	9a02      	ldr	r2, [sp, #8]
 8015412:	9312      	str	r3, [sp, #72]	; 0x48
 8015414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015416:	bf08      	it	eq
 8015418:	4613      	moveq	r3, r2
 801541a:	e734      	b.n	8015286 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801541c:	1427      	asrs	r7, r4, #16
 801541e:	d454      	bmi.n	80154ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015420:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015424:	42be      	cmp	r6, r7
 8015426:	dd50      	ble.n	80154ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015428:	ea5f 4920 	movs.w	r9, r0, asr #16
 801542c:	d44d      	bmi.n	80154ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801542e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015432:	454a      	cmp	r2, r9
 8015434:	dd49      	ble.n	80154ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015436:	b236      	sxth	r6, r6
 8015438:	9a01      	ldr	r2, [sp, #4]
 801543a:	fb09 7606 	mla	r6, r9, r6, r7
 801543e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8015442:	0e3a      	lsrs	r2, r7, #24
 8015444:	d041      	beq.n	80154ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015446:	9e03      	ldr	r6, [sp, #12]
 8015448:	fa5f fb87 	uxtb.w	fp, r7
 801544c:	4372      	muls	r2, r6
 801544e:	1c56      	adds	r6, r2, #1
 8015450:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015454:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8015458:	1212      	asrs	r2, r2, #8
 801545a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801545e:	fa1f fa82 	uxth.w	sl, r2
 8015462:	43d2      	mvns	r2, r2
 8015464:	fb1b fb0a 	smulbb	fp, fp, sl
 8015468:	b2d2      	uxtb	r2, r2
 801546a:	fb09 b902 	mla	r9, r9, r2, fp
 801546e:	fa1f f989 	uxth.w	r9, r9
 8015472:	f109 0b01 	add.w	fp, r9, #1
 8015476:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801547a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801547e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015482:	fb1b fb0a 	smulbb	fp, fp, sl
 8015486:	ea4f 2929 	mov.w	r9, r9, asr #8
 801548a:	fb17 fa0a 	smulbb	sl, r7, sl
 801548e:	f805 9006 	strb.w	r9, [r5, r6]
 8015492:	442e      	add	r6, r5
 8015494:	78b7      	ldrb	r7, [r6, #2]
 8015496:	f896 9001 	ldrb.w	r9, [r6, #1]
 801549a:	fb07 aa02 	mla	sl, r7, r2, sl
 801549e:	fb09 b902 	mla	r9, r9, r2, fp
 80154a2:	fa1f fa8a 	uxth.w	sl, sl
 80154a6:	fa1f f989 	uxth.w	r9, r9
 80154aa:	f10a 0701 	add.w	r7, sl, #1
 80154ae:	f109 0b01 	add.w	fp, r9, #1
 80154b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80154b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80154ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80154be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80154c2:	f886 a002 	strb.w	sl, [r6, #2]
 80154c6:	f886 9001 	strb.w	r9, [r6, #1]
 80154ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154cc:	4474      	add	r4, lr
 80154ce:	f108 0801 	add.w	r8, r8, #1
 80154d2:	4410      	add	r0, r2
 80154d4:	e762      	b.n	801539c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80154d6:	b005      	add	sp, #20
 80154d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80154dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80154e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154e6:	9201      	str	r2, [sp, #4]
 80154e8:	6860      	ldr	r0, [r4, #4]
 80154ea:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80154ee:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80154f2:	fb00 2505 	mla	r5, r0, r5, r2
 80154f6:	6822      	ldr	r2, [r4, #0]
 80154f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154fc:	4415      	add	r5, r2
 80154fe:	f8dc 2000 	ldr.w	r2, [ip]
 8015502:	9200      	str	r2, [sp, #0]
 8015504:	2900      	cmp	r1, #0
 8015506:	dc03      	bgt.n	8015510 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015508:	9a01      	ldr	r2, [sp, #4]
 801550a:	2a00      	cmp	r2, #0
 801550c:	f340 812b 	ble.w	8015766 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015512:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015516:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801551a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801551c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015520:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015524:	2b00      	cmp	r3, #0
 8015526:	dd0e      	ble.n	8015546 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015528:	1422      	asrs	r2, r4, #16
 801552a:	d405      	bmi.n	8015538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801552c:	4572      	cmp	r2, lr
 801552e:	da03      	bge.n	8015538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015530:	1402      	asrs	r2, r0, #16
 8015532:	d401      	bmi.n	8015538 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015534:	42ba      	cmp	r2, r7
 8015536:	db07      	blt.n	8015548 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801553a:	3b01      	subs	r3, #1
 801553c:	3503      	adds	r5, #3
 801553e:	4414      	add	r4, r2
 8015540:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015542:	4410      	add	r0, r2
 8015544:	e7ee      	b.n	8015524 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015546:	d06f      	beq.n	8015628 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015548:	1e5a      	subs	r2, r3, #1
 801554a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801554c:	fb06 4602 	mla	r6, r6, r2, r4
 8015550:	1436      	asrs	r6, r6, #16
 8015552:	d45e      	bmi.n	8015612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8015554:	4576      	cmp	r6, lr
 8015556:	da5c      	bge.n	8015612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8015558:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801555a:	fb06 0202 	mla	r2, r6, r2, r0
 801555e:	1412      	asrs	r2, r2, #16
 8015560:	d457      	bmi.n	8015612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8015562:	42ba      	cmp	r2, r7
 8015564:	da55      	bge.n	8015612 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8015566:	1cee      	adds	r6, r5, #3
 8015568:	469a      	mov	sl, r3
 801556a:	f1ba 0f00 	cmp.w	sl, #0
 801556e:	dd56      	ble.n	801561e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015570:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015574:	1427      	asrs	r7, r4, #16
 8015576:	1402      	asrs	r2, r0, #16
 8015578:	fb0e 7202 	mla	r2, lr, r2, r7
 801557c:	9f00      	ldr	r7, [sp, #0]
 801557e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8015582:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8015586:	d03c      	beq.n	8015602 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015588:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801558c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015590:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015594:	fa5f f28e 	uxtb.w	r2, lr
 8015598:	b2ff      	uxtb	r7, r7
 801559a:	f000 80dd 	beq.w	8015758 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801559e:	fa1f f882 	uxth.w	r8, r2
 80155a2:	43d2      	mvns	r2, r2
 80155a4:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80155a8:	fb17 f708 	smulbb	r7, r7, r8
 80155ac:	b2d2      	uxtb	r2, r2
 80155ae:	fb19 f908 	smulbb	r9, r9, r8
 80155b2:	fb0e 7702 	mla	r7, lr, r2, r7
 80155b6:	fb1b f808 	smulbb	r8, fp, r8
 80155ba:	b2bf      	uxth	r7, r7
 80155bc:	f107 0e01 	add.w	lr, r7, #1
 80155c0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80155c4:	123f      	asrs	r7, r7, #8
 80155c6:	f806 7c03 	strb.w	r7, [r6, #-3]
 80155ca:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80155ce:	fb07 9902 	mla	r9, r7, r2, r9
 80155d2:	fa1f f989 	uxth.w	r9, r9
 80155d6:	f109 0701 	add.w	r7, r9, #1
 80155da:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80155de:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80155e2:	fb07 8802 	mla	r8, r7, r2, r8
 80155e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80155ea:	fa1f f888 	uxth.w	r8, r8
 80155ee:	f806 9c02 	strb.w	r9, [r6, #-2]
 80155f2:	f108 0201 	add.w	r2, r8, #1
 80155f6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80155fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80155fe:	f806 8c01 	strb.w	r8, [r6, #-1]
 8015602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015604:	3603      	adds	r6, #3
 8015606:	f10a 3aff 	add.w	sl, sl, #4294967295
 801560a:	4414      	add	r4, r2
 801560c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801560e:	4410      	add	r0, r2
 8015610:	e7ab      	b.n	801556a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8015612:	f04f 0e00 	mov.w	lr, #0
 8015616:	eba3 020e 	sub.w	r2, r3, lr
 801561a:	2a00      	cmp	r2, #0
 801561c:	dc3d      	bgt.n	801569a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801561e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015626:	441d      	add	r5, r3
 8015628:	2900      	cmp	r1, #0
 801562a:	f340 809c 	ble.w	8015766 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801562e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015638:	3901      	subs	r1, #1
 801563a:	eeb0 6a62 	vmov.f32	s12, s5
 801563e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015642:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015646:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801564a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801564e:	eeb0 6a43 	vmov.f32	s12, s6
 8015652:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015656:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801565a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801565e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015662:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015666:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801566a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801566e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015672:	ee12 2a90 	vmov	r2, s5
 8015676:	eef0 2a47 	vmov.f32	s5, s14
 801567a:	fb92 f3f3 	sdiv	r3, r2, r3
 801567e:	ee13 2a10 	vmov	r2, s6
 8015682:	930f      	str	r3, [sp, #60]	; 0x3c
 8015684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015686:	eeb0 3a67 	vmov.f32	s6, s15
 801568a:	fb92 f3f3 	sdiv	r3, r2, r3
 801568e:	9a01      	ldr	r2, [sp, #4]
 8015690:	9310      	str	r3, [sp, #64]	; 0x40
 8015692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015694:	bf08      	it	eq
 8015696:	4613      	moveq	r3, r2
 8015698:	e734      	b.n	8015504 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801569a:	1427      	asrs	r7, r4, #16
 801569c:	d44d      	bmi.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801569e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80156a2:	42be      	cmp	r6, r7
 80156a4:	dd49      	ble.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80156a6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80156aa:	d446      	bmi.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80156ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80156b0:	4542      	cmp	r2, r8
 80156b2:	dd42      	ble.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80156b4:	b236      	sxth	r6, r6
 80156b6:	9a00      	ldr	r2, [sp, #0]
 80156b8:	fb08 7606 	mla	r6, r8, r6, r7
 80156bc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80156c0:	0e3a      	lsrs	r2, r7, #24
 80156c2:	d03a      	beq.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80156c4:	2aff      	cmp	r2, #255	; 0xff
 80156c6:	b2d6      	uxtb	r6, r2
 80156c8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80156cc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80156d0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80156d4:	b2ff      	uxtb	r7, r7
 80156d6:	d037      	beq.n	8015748 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80156d8:	fa1f f986 	uxth.w	r9, r6
 80156dc:	4472      	add	r2, lr
 80156de:	43f6      	mvns	r6, r6
 80156e0:	f815 8002 	ldrb.w	r8, [r5, r2]
 80156e4:	fb17 f709 	smulbb	r7, r7, r9
 80156e8:	fb1a fa09 	smulbb	sl, sl, r9
 80156ec:	b2f6      	uxtb	r6, r6
 80156ee:	fb1b f909 	smulbb	r9, fp, r9
 80156f2:	fb08 7706 	mla	r7, r8, r6, r7
 80156f6:	b2bf      	uxth	r7, r7
 80156f8:	f107 0801 	add.w	r8, r7, #1
 80156fc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8015700:	123f      	asrs	r7, r7, #8
 8015702:	54af      	strb	r7, [r5, r2]
 8015704:	442a      	add	r2, r5
 8015706:	7857      	ldrb	r7, [r2, #1]
 8015708:	fb07 aa06 	mla	sl, r7, r6, sl
 801570c:	fa1f fa8a 	uxth.w	sl, sl
 8015710:	f10a 0701 	add.w	r7, sl, #1
 8015714:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015718:	7897      	ldrb	r7, [r2, #2]
 801571a:	fb07 9906 	mla	r9, r7, r6, r9
 801571e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015722:	fa1f f989 	uxth.w	r9, r9
 8015726:	f882 a001 	strb.w	sl, [r2, #1]
 801572a:	f109 0601 	add.w	r6, r9, #1
 801572e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8015732:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015736:	f882 9002 	strb.w	r9, [r2, #2]
 801573a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801573c:	f10e 0e01 	add.w	lr, lr, #1
 8015740:	4414      	add	r4, r2
 8015742:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015744:	4410      	add	r0, r2
 8015746:	e766      	b.n	8015616 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015748:	4472      	add	r2, lr
 801574a:	54af      	strb	r7, [r5, r2]
 801574c:	442a      	add	r2, r5
 801574e:	f882 a001 	strb.w	sl, [r2, #1]
 8015752:	f882 b002 	strb.w	fp, [r2, #2]
 8015756:	e7f0      	b.n	801573a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015758:	f806 7c03 	strb.w	r7, [r6, #-3]
 801575c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8015760:	f806 bc01 	strb.w	fp, [r6, #-1]
 8015764:	e74d      	b.n	8015602 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015766:	b003      	add	sp, #12
 8015768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801576c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015770:	b087      	sub	sp, #28
 8015772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015776:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015778:	9204      	str	r2, [sp, #16]
 801577a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801577e:	6860      	ldr	r0, [r4, #4]
 8015780:	9205      	str	r2, [sp, #20]
 8015782:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8015786:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801578a:	9101      	str	r1, [sp, #4]
 801578c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8015790:	fb00 2505 	mla	r5, r0, r5, r2
 8015794:	6822      	ldr	r2, [r4, #0]
 8015796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801579a:	4415      	add	r5, r2
 801579c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80157a0:	3201      	adds	r2, #1
 80157a2:	f022 0201 	bic.w	r2, r2, #1
 80157a6:	9202      	str	r2, [sp, #8]
 80157a8:	f8dc 2000 	ldr.w	r2, [ip]
 80157ac:	9203      	str	r2, [sp, #12]
 80157ae:	9a01      	ldr	r2, [sp, #4]
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	dc03      	bgt.n	80157bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80157b4:	9a04      	ldr	r2, [sp, #16]
 80157b6:	2a00      	cmp	r2, #0
 80157b8:	f340 8135 	ble.w	8015a26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80157bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80157be:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80157c2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80157c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157c8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80157cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	dd0d      	ble.n	80157f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80157d4:	1422      	asrs	r2, r4, #16
 80157d6:	d405      	bmi.n	80157e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80157d8:	4542      	cmp	r2, r8
 80157da:	da03      	bge.n	80157e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80157dc:	1402      	asrs	r2, r0, #16
 80157de:	d401      	bmi.n	80157e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80157e0:	42ba      	cmp	r2, r7
 80157e2:	db06      	blt.n	80157f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80157e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80157e6:	4474      	add	r4, lr
 80157e8:	3b01      	subs	r3, #1
 80157ea:	3503      	adds	r5, #3
 80157ec:	4410      	add	r0, r2
 80157ee:	e7ef      	b.n	80157d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80157f0:	d077      	beq.n	80158e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80157f2:	1e5a      	subs	r2, r3, #1
 80157f4:	fb0e 4602 	mla	r6, lr, r2, r4
 80157f8:	1436      	asrs	r6, r6, #16
 80157fa:	d469      	bmi.n	80158d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80157fc:	4546      	cmp	r6, r8
 80157fe:	da67      	bge.n	80158d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015800:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015802:	fb06 0202 	mla	r2, r6, r2, r0
 8015806:	1412      	asrs	r2, r2, #16
 8015808:	d462      	bmi.n	80158d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801580a:	42ba      	cmp	r2, r7
 801580c:	da60      	bge.n	80158d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801580e:	1cee      	adds	r6, r5, #3
 8015810:	4699      	mov	r9, r3
 8015812:	f1b9 0f00 	cmp.w	r9, #0
 8015816:	dd5f      	ble.n	80158d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015818:	1422      	asrs	r2, r4, #16
 801581a:	9902      	ldr	r1, [sp, #8]
 801581c:	1407      	asrs	r7, r0, #16
 801581e:	fb01 2707 	mla	r7, r1, r7, r2
 8015822:	9903      	ldr	r1, [sp, #12]
 8015824:	087a      	lsrs	r2, r7, #1
 8015826:	5c8a      	ldrb	r2, [r1, r2]
 8015828:	07f9      	lsls	r1, r7, #31
 801582a:	bf54      	ite	pl
 801582c:	f002 020f 	andpl.w	r2, r2, #15
 8015830:	1112      	asrmi	r2, r2, #4
 8015832:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015836:	b2d2      	uxtb	r2, r2
 8015838:	2a00      	cmp	r2, #0
 801583a:	d042      	beq.n	80158c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801583c:	497b      	ldr	r1, [pc, #492]	; (8015a2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801583e:	680f      	ldr	r7, [r1, #0]
 8015840:	9905      	ldr	r1, [sp, #20]
 8015842:	fa5f fb87 	uxtb.w	fp, r7
 8015846:	434a      	muls	r2, r1
 8015848:	f102 0801 	add.w	r8, r2, #1
 801584c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8015850:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8015854:	1212      	asrs	r2, r2, #8
 8015856:	fa1f fa82 	uxth.w	sl, r2
 801585a:	43d2      	mvns	r2, r2
 801585c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015860:	b2d2      	uxtb	r2, r2
 8015862:	fb08 b802 	mla	r8, r8, r2, fp
 8015866:	fa1f f888 	uxth.w	r8, r8
 801586a:	f108 0b01 	add.w	fp, r8, #1
 801586e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015872:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015876:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801587a:	fb1b fb0a 	smulbb	fp, fp, sl
 801587e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015882:	fb17 fa0a 	smulbb	sl, r7, sl
 8015886:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801588a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801588e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8015892:	fb07 aa02 	mla	sl, r7, r2, sl
 8015896:	fb08 b802 	mla	r8, r8, r2, fp
 801589a:	fa1f fa8a 	uxth.w	sl, sl
 801589e:	fa1f f888 	uxth.w	r8, r8
 80158a2:	f10a 0701 	add.w	r7, sl, #1
 80158a6:	f108 0b01 	add.w	fp, r8, #1
 80158aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80158ae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80158b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80158b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80158ba:	f806 ac01 	strb.w	sl, [r6, #-1]
 80158be:	f806 8c02 	strb.w	r8, [r6, #-2]
 80158c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158c4:	4474      	add	r4, lr
 80158c6:	3603      	adds	r6, #3
 80158c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80158cc:	4410      	add	r0, r2
 80158ce:	e7a0      	b.n	8015812 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80158d0:	2700      	movs	r7, #0
 80158d2:	1bda      	subs	r2, r3, r7
 80158d4:	2a00      	cmp	r2, #0
 80158d6:	dc3e      	bgt.n	8015956 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80158d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80158dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158e0:	441d      	add	r5, r3
 80158e2:	9b01      	ldr	r3, [sp, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	f340 809e 	ble.w	8015a26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80158ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80158ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80158f4:	eeb0 6a62 	vmov.f32	s12, s5
 80158f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80158fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015904:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015908:	eeb0 6a43 	vmov.f32	s12, s6
 801590c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015910:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015914:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015918:	ee61 7a27 	vmul.f32	s15, s2, s15
 801591c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015920:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015924:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015928:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801592c:	ee12 2a90 	vmov	r2, s5
 8015930:	eef0 2a47 	vmov.f32	s5, s14
 8015934:	fb92 fef3 	sdiv	lr, r2, r3
 8015938:	ee13 2a10 	vmov	r2, s6
 801593c:	eeb0 3a67 	vmov.f32	s6, s15
 8015940:	fb92 f3f3 	sdiv	r3, r2, r3
 8015944:	9314      	str	r3, [sp, #80]	; 0x50
 8015946:	9b01      	ldr	r3, [sp, #4]
 8015948:	9a04      	ldr	r2, [sp, #16]
 801594a:	3b01      	subs	r3, #1
 801594c:	9301      	str	r3, [sp, #4]
 801594e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015950:	bf08      	it	eq
 8015952:	4613      	moveq	r3, r2
 8015954:	e72b      	b.n	80157ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8015956:	1426      	asrs	r6, r4, #16
 8015958:	d460      	bmi.n	8015a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801595a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801595e:	42b2      	cmp	r2, r6
 8015960:	dd5c      	ble.n	8015a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015962:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015966:	d459      	bmi.n	8015a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015968:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801596c:	4542      	cmp	r2, r8
 801596e:	dd55      	ble.n	8015a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015970:	9a02      	ldr	r2, [sp, #8]
 8015972:	9903      	ldr	r1, [sp, #12]
 8015974:	fb08 6602 	mla	r6, r8, r2, r6
 8015978:	0872      	lsrs	r2, r6, #1
 801597a:	07f6      	lsls	r6, r6, #31
 801597c:	5c8a      	ldrb	r2, [r1, r2]
 801597e:	bf54      	ite	pl
 8015980:	f002 020f 	andpl.w	r2, r2, #15
 8015984:	1112      	asrmi	r2, r2, #4
 8015986:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801598a:	b2d2      	uxtb	r2, r2
 801598c:	2a00      	cmp	r2, #0
 801598e:	d045      	beq.n	8015a1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015990:	4926      	ldr	r1, [pc, #152]	; (8015a2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8015992:	f8d1 8000 	ldr.w	r8, [r1]
 8015996:	9905      	ldr	r1, [sp, #20]
 8015998:	fa5f fb88 	uxtb.w	fp, r8
 801599c:	434a      	muls	r2, r1
 801599e:	1c56      	adds	r6, r2, #1
 80159a0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80159a4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80159a8:	1212      	asrs	r2, r2, #8
 80159aa:	f815 9006 	ldrb.w	r9, [r5, r6]
 80159ae:	fa1f fa82 	uxth.w	sl, r2
 80159b2:	43d2      	mvns	r2, r2
 80159b4:	fb1b fb0a 	smulbb	fp, fp, sl
 80159b8:	b2d2      	uxtb	r2, r2
 80159ba:	fb09 b902 	mla	r9, r9, r2, fp
 80159be:	fa1f f989 	uxth.w	r9, r9
 80159c2:	f109 0b01 	add.w	fp, r9, #1
 80159c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80159ca:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80159ce:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80159d2:	fb1b fb0a 	smulbb	fp, fp, sl
 80159d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80159da:	fb18 fa0a 	smulbb	sl, r8, sl
 80159de:	f805 9006 	strb.w	r9, [r5, r6]
 80159e2:	442e      	add	r6, r5
 80159e4:	f896 8002 	ldrb.w	r8, [r6, #2]
 80159e8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80159ec:	fb08 aa02 	mla	sl, r8, r2, sl
 80159f0:	fb09 b902 	mla	r9, r9, r2, fp
 80159f4:	fa1f fa8a 	uxth.w	sl, sl
 80159f8:	fa1f f989 	uxth.w	r9, r9
 80159fc:	f10a 0801 	add.w	r8, sl, #1
 8015a00:	f109 0b01 	add.w	fp, r9, #1
 8015a04:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015a08:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015a0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015a10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015a14:	f886 a002 	strb.w	sl, [r6, #2]
 8015a18:	f886 9001 	strb.w	r9, [r6, #1]
 8015a1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a1e:	4474      	add	r4, lr
 8015a20:	3701      	adds	r7, #1
 8015a22:	4410      	add	r0, r2
 8015a24:	e755      	b.n	80158d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8015a26:	b007      	add	sp, #28
 8015a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a2c:	2400b988 	.word	0x2400b988

08015a30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	b085      	sub	sp, #20
 8015a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a3c:	9203      	str	r2, [sp, #12]
 8015a3e:	6860      	ldr	r0, [r4, #4]
 8015a40:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015a44:	9100      	str	r1, [sp, #0]
 8015a46:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8015a4a:	fb00 2606 	mla	r6, r0, r6, r2
 8015a4e:	6822      	ldr	r2, [r4, #0]
 8015a50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015a54:	4416      	add	r6, r2
 8015a56:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015a5a:	3201      	adds	r2, #1
 8015a5c:	f022 0201 	bic.w	r2, r2, #1
 8015a60:	9201      	str	r2, [sp, #4]
 8015a62:	f8dc 2000 	ldr.w	r2, [ip]
 8015a66:	9202      	str	r2, [sp, #8]
 8015a68:	9a00      	ldr	r2, [sp, #0]
 8015a6a:	2a00      	cmp	r2, #0
 8015a6c:	dc03      	bgt.n	8015a76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8015a6e:	9a03      	ldr	r2, [sp, #12]
 8015a70:	2a00      	cmp	r2, #0
 8015a72:	f340 8140 	ble.w	8015cf6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a78:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015a7c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8015a80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015a82:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015a86:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	dd0e      	ble.n	8015aac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015a8e:	142a      	asrs	r2, r5, #16
 8015a90:	d405      	bmi.n	8015a9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015a92:	4572      	cmp	r2, lr
 8015a94:	da03      	bge.n	8015a9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015a96:	1422      	asrs	r2, r4, #16
 8015a98:	d401      	bmi.n	8015a9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015a9a:	42ba      	cmp	r2, r7
 8015a9c:	db07      	blt.n	8015aae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015aa0:	3b01      	subs	r3, #1
 8015aa2:	3603      	adds	r6, #3
 8015aa4:	4415      	add	r5, r2
 8015aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015aa8:	4414      	add	r4, r2
 8015aaa:	e7ee      	b.n	8015a8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015aac:	d072      	beq.n	8015b94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015aae:	1e5a      	subs	r2, r3, #1
 8015ab0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015ab2:	fb00 5002 	mla	r0, r0, r2, r5
 8015ab6:	1400      	asrs	r0, r0, #16
 8015ab8:	d463      	bmi.n	8015b82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015aba:	4570      	cmp	r0, lr
 8015abc:	da61      	bge.n	8015b82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015abe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015ac0:	fb00 4202 	mla	r2, r0, r2, r4
 8015ac4:	1412      	asrs	r2, r2, #16
 8015ac6:	d45c      	bmi.n	8015b82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015ac8:	42ba      	cmp	r2, r7
 8015aca:	da5a      	bge.n	8015b82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015acc:	1cf0      	adds	r0, r6, #3
 8015ace:	469a      	mov	sl, r3
 8015ad0:	f1ba 0f00 	cmp.w	sl, #0
 8015ad4:	dd59      	ble.n	8015b8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015ad6:	142a      	asrs	r2, r5, #16
 8015ad8:	9901      	ldr	r1, [sp, #4]
 8015ada:	1427      	asrs	r7, r4, #16
 8015adc:	fb01 2707 	mla	r7, r1, r7, r2
 8015ae0:	9902      	ldr	r1, [sp, #8]
 8015ae2:	087a      	lsrs	r2, r7, #1
 8015ae4:	5c8a      	ldrb	r2, [r1, r2]
 8015ae6:	07f9      	lsls	r1, r7, #31
 8015ae8:	bf54      	ite	pl
 8015aea:	f002 020f 	andpl.w	r2, r2, #15
 8015aee:	1112      	asrmi	r2, r2, #4
 8015af0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015af4:	b2d2      	uxtb	r2, r2
 8015af6:	2a00      	cmp	r2, #0
 8015af8:	d03b      	beq.n	8015b72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015afa:	4980      	ldr	r1, [pc, #512]	; (8015cfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015afc:	2aff      	cmp	r2, #255	; 0xff
 8015afe:	680f      	ldr	r7, [r1, #0]
 8015b00:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015b04:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015b08:	b2ff      	uxtb	r7, r7
 8015b0a:	f000 80ed 	beq.w	8015ce8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8015b0e:	fa1f f882 	uxth.w	r8, r2
 8015b12:	43d2      	mvns	r2, r2
 8015b14:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8015b18:	fb17 f708 	smulbb	r7, r7, r8
 8015b1c:	b2d2      	uxtb	r2, r2
 8015b1e:	fb19 f908 	smulbb	r9, r9, r8
 8015b22:	fb0e 7702 	mla	r7, lr, r2, r7
 8015b26:	fb1b f808 	smulbb	r8, fp, r8
 8015b2a:	b2bf      	uxth	r7, r7
 8015b2c:	f107 0e01 	add.w	lr, r7, #1
 8015b30:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015b34:	123f      	asrs	r7, r7, #8
 8015b36:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015b3a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8015b3e:	fb07 9902 	mla	r9, r7, r2, r9
 8015b42:	fa1f f989 	uxth.w	r9, r9
 8015b46:	f109 0701 	add.w	r7, r9, #1
 8015b4a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8015b4e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015b52:	fb07 8802 	mla	r8, r7, r2, r8
 8015b56:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015b5a:	fa1f f888 	uxth.w	r8, r8
 8015b5e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015b62:	f108 0201 	add.w	r2, r8, #1
 8015b66:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015b6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015b6e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8015b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b74:	3003      	adds	r0, #3
 8015b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015b7a:	4415      	add	r5, r2
 8015b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b7e:	4414      	add	r4, r2
 8015b80:	e7a6      	b.n	8015ad0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015b82:	2700      	movs	r7, #0
 8015b84:	1bda      	subs	r2, r3, r7
 8015b86:	2a00      	cmp	r2, #0
 8015b88:	dc40      	bgt.n	8015c0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015b8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b92:	441e      	add	r6, r3
 8015b94:	9b00      	ldr	r3, [sp, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f340 80ad 	ble.w	8015cf6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015b9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ba2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ba6:	eeb0 6a62 	vmov.f32	s12, s5
 8015baa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015bae:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015bb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015bb6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015bba:	eeb0 6a43 	vmov.f32	s12, s6
 8015bbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015bc2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015bc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015bca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015bce:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015bd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015bd6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015bda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015bde:	ee12 2a90 	vmov	r2, s5
 8015be2:	eef0 2a47 	vmov.f32	s5, s14
 8015be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bea:	ee13 2a10 	vmov	r2, s6
 8015bee:	9311      	str	r3, [sp, #68]	; 0x44
 8015bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015bf2:	eeb0 3a67 	vmov.f32	s6, s15
 8015bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8015bfa:	9312      	str	r3, [sp, #72]	; 0x48
 8015bfc:	9b00      	ldr	r3, [sp, #0]
 8015bfe:	9a03      	ldr	r2, [sp, #12]
 8015c00:	3b01      	subs	r3, #1
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c06:	bf08      	it	eq
 8015c08:	4613      	moveq	r3, r2
 8015c0a:	e72d      	b.n	8015a68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015c0c:	1428      	asrs	r0, r5, #16
 8015c0e:	d45c      	bmi.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c10:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015c14:	4282      	cmp	r2, r0
 8015c16:	dd58      	ble.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c18:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015c1c:	d455      	bmi.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c1e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015c22:	4572      	cmp	r2, lr
 8015c24:	dd51      	ble.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c26:	9a01      	ldr	r2, [sp, #4]
 8015c28:	9902      	ldr	r1, [sp, #8]
 8015c2a:	fb0e 0002 	mla	r0, lr, r2, r0
 8015c2e:	0842      	lsrs	r2, r0, #1
 8015c30:	07c0      	lsls	r0, r0, #31
 8015c32:	5c8a      	ldrb	r2, [r1, r2]
 8015c34:	bf54      	ite	pl
 8015c36:	f002 020f 	andpl.w	r2, r2, #15
 8015c3a:	1112      	asrmi	r2, r2, #4
 8015c3c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015c40:	b2d2      	uxtb	r2, r2
 8015c42:	2a00      	cmp	r2, #0
 8015c44:	d041      	beq.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015c46:	492d      	ldr	r1, [pc, #180]	; (8015cfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015c48:	2aff      	cmp	r2, #255	; 0xff
 8015c4a:	6808      	ldr	r0, [r1, #0]
 8015c4c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8015c50:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015c54:	fa5f fe80 	uxtb.w	lr, r0
 8015c58:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8015c5c:	d03b      	beq.n	8015cd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8015c5e:	fa1f f982 	uxth.w	r9, r2
 8015c62:	4438      	add	r0, r7
 8015c64:	43d2      	mvns	r2, r2
 8015c66:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015c6a:	fb1e fe09 	smulbb	lr, lr, r9
 8015c6e:	fb1a fa09 	smulbb	sl, sl, r9
 8015c72:	b2d2      	uxtb	r2, r2
 8015c74:	fb1b f909 	smulbb	r9, fp, r9
 8015c78:	fb08 ee02 	mla	lr, r8, r2, lr
 8015c7c:	fa1f fe8e 	uxth.w	lr, lr
 8015c80:	f10e 0801 	add.w	r8, lr, #1
 8015c84:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015c88:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015c8c:	f806 e000 	strb.w	lr, [r6, r0]
 8015c90:	4430      	add	r0, r6
 8015c92:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015c96:	fb0e aa02 	mla	sl, lr, r2, sl
 8015c9a:	fa1f fa8a 	uxth.w	sl, sl
 8015c9e:	f10a 0e01 	add.w	lr, sl, #1
 8015ca2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015ca6:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015caa:	fb0e 9902 	mla	r9, lr, r2, r9
 8015cae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015cb2:	fa1f f989 	uxth.w	r9, r9
 8015cb6:	f880 a001 	strb.w	sl, [r0, #1]
 8015cba:	f109 0201 	add.w	r2, r9, #1
 8015cbe:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8015cc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015cc6:	f880 9002 	strb.w	r9, [r0, #2]
 8015cca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ccc:	3701      	adds	r7, #1
 8015cce:	4415      	add	r5, r2
 8015cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015cd2:	4414      	add	r4, r2
 8015cd4:	e756      	b.n	8015b84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015cd6:	4438      	add	r0, r7
 8015cd8:	f806 e000 	strb.w	lr, [r6, r0]
 8015cdc:	4430      	add	r0, r6
 8015cde:	f880 a001 	strb.w	sl, [r0, #1]
 8015ce2:	f880 b002 	strb.w	fp, [r0, #2]
 8015ce6:	e7f0      	b.n	8015cca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015ce8:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015cec:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015cf0:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015cf4:	e73d      	b.n	8015b72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015cf6:	b005      	add	sp, #20
 8015cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cfc:	2400b988 	.word	0x2400b988

08015d00 <_ZN8touchgfx8LCD24bppD1Ev>:
 8015d00:	4770      	bx	lr

08015d02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015d02:	4770      	bx	lr

08015d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015d04:	4770      	bx	lr

08015d06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015d06:	4770      	bx	lr

08015d08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015d08:	4770      	bx	lr

08015d0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015d0a:	4770      	bx	lr

08015d0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015d0c:	4770      	bx	lr

08015d0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015d0e:	4770      	bx	lr

08015d10 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015d10:	4770      	bx	lr

08015d12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015d12:	4770      	bx	lr

08015d14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015d14:	4770      	bx	lr

08015d16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015d16:	4770      	bx	lr

08015d18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015d18:	4770      	bx	lr

08015d1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015d1a:	4770      	bx	lr

08015d1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015d1c:	4770      	bx	lr

08015d1e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015d1e:	4770      	bx	lr

08015d20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015d20:	4770      	bx	lr

08015d22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015d22:	4770      	bx	lr

08015d24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015d24:	4770      	bx	lr

08015d26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015d26:	4770      	bx	lr

08015d28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015d28:	4770      	bx	lr
	...

08015d2c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d2e:	4606      	mov	r6, r0
 8015d30:	b087      	sub	sp, #28
 8015d32:	4615      	mov	r5, r2
 8015d34:	461f      	mov	r7, r3
 8015d36:	b353      	cbz	r3, 8015d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015d38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	dd26      	ble.n	8015d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015d40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	dd22      	ble.n	8015d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015d48:	6808      	ldr	r0, [r1, #0]
 8015d4a:	aa04      	add	r2, sp, #16
 8015d4c:	6849      	ldr	r1, [r1, #4]
 8015d4e:	4c1b      	ldr	r4, [pc, #108]	; (8015dbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015d50:	c203      	stmia	r2!, {r0, r1}
 8015d52:	a804      	add	r0, sp, #16
 8015d54:	f7fb fb74 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015d58:	6820      	ldr	r0, [r4, #0]
 8015d5a:	6803      	ldr	r3, [r0, #0]
 8015d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d5e:	4798      	blx	r3
 8015d60:	2fff      	cmp	r7, #255	; 0xff
 8015d62:	d016      	beq.n	8015d92 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015d64:	f010 0f08 	tst.w	r0, #8
 8015d68:	6820      	ldr	r0, [r4, #0]
 8015d6a:	d015      	beq.n	8015d98 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015d6c:	2400      	movs	r4, #0
 8015d6e:	6801      	ldr	r1, [r0, #0]
 8015d70:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015d74:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015d78:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015d7c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015d80:	9401      	str	r4, [sp, #4]
 8015d82:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015d86:	9400      	str	r4, [sp, #0]
 8015d88:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	47a0      	blx	r4
 8015d8e:	b007      	add	sp, #28
 8015d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d92:	f010 0f02 	tst.w	r0, #2
 8015d96:	e7e7      	b.n	8015d68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015d98:	6803      	ldr	r3, [r0, #0]
 8015d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d9c:	4798      	blx	r3
 8015d9e:	4b08      	ldr	r3, [pc, #32]	; (8015dc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015da0:	4601      	mov	r1, r0
 8015da2:	4630      	mov	r0, r6
 8015da4:	881a      	ldrh	r2, [r3, #0]
 8015da6:	6833      	ldr	r3, [r6, #0]
 8015da8:	e9cd 5700 	strd	r5, r7, [sp]
 8015dac:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015dae:	ab04      	add	r3, sp, #16
 8015db0:	47a8      	blx	r5
 8015db2:	6820      	ldr	r0, [r4, #0]
 8015db4:	6803      	ldr	r3, [r0, #0]
 8015db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015db8:	4798      	blx	r3
 8015dba:	e7e8      	b.n	8015d8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015dbc:	2400b980 	.word	0x2400b980
 8015dc0:	2400b97a 	.word	0x2400b97a

08015dc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dc8:	b08b      	sub	sp, #44	; 0x2c
 8015dca:	460d      	mov	r5, r1
 8015dcc:	4616      	mov	r6, r2
 8015dce:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015dd2:	f1b8 0f00 	cmp.w	r8, #0
 8015dd6:	d047      	beq.n	8015e68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015dd8:	6810      	ldr	r0, [r2, #0]
 8015dda:	ac06      	add	r4, sp, #24
 8015ddc:	6851      	ldr	r1, [r2, #4]
 8015dde:	4f51      	ldr	r7, [pc, #324]	; (8015f24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015de0:	c403      	stmia	r4!, {r0, r1}
 8015de2:	6818      	ldr	r0, [r3, #0]
 8015de4:	ac08      	add	r4, sp, #32
 8015de6:	6859      	ldr	r1, [r3, #4]
 8015de8:	c403      	stmia	r4!, {r0, r1}
 8015dea:	a806      	add	r0, sp, #24
 8015dec:	f7fb fb28 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015df0:	4631      	mov	r1, r6
 8015df2:	a808      	add	r0, sp, #32
 8015df4:	f7fb fb4c 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015df8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015dfc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015e00:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015e04:	6838      	ldr	r0, [r7, #0]
 8015e06:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015e0a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8015e0e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015e12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015e16:	440d      	add	r5, r1
 8015e18:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015e1c:	440a      	add	r2, r1
 8015e1e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015e22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015e26:	4413      	add	r3, r2
 8015e28:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015e2c:	6803      	ldr	r3, [r0, #0]
 8015e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e30:	4798      	blx	r3
 8015e32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015e36:	d01a      	beq.n	8015e6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8015e38:	f010 0f04 	tst.w	r0, #4
 8015e3c:	6838      	ldr	r0, [r7, #0]
 8015e3e:	d019      	beq.n	8015e74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8015e40:	2100      	movs	r1, #0
 8015e42:	6807      	ldr	r7, [r0, #0]
 8015e44:	b2a4      	uxth	r4, r4
 8015e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e4a:	b2b6      	uxth	r6, r6
 8015e4c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015e50:	9401      	str	r4, [sp, #4]
 8015e52:	9600      	str	r6, [sp, #0]
 8015e54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015e58:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8015e5c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015e60:	9102      	str	r1, [sp, #8]
 8015e62:	4629      	mov	r1, r5
 8015e64:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8015e66:	47a0      	blx	r4
 8015e68:	b00b      	add	sp, #44	; 0x2c
 8015e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e6e:	f010 0f01 	tst.w	r0, #1
 8015e72:	e7e3      	b.n	8015e3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8015e74:	6803      	ldr	r3, [r0, #0]
 8015e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e78:	4798      	blx	r3
 8015e7a:	4a2b      	ldr	r2, [pc, #172]	; (8015f28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8015e7c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8015e80:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015e84:	8813      	ldrh	r3, [r2, #0]
 8015e86:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8015e8a:	fb03 f404 	mul.w	r4, r3, r4
 8015e8e:	fb03 c101 	mla	r1, r3, r1, ip
 8015e92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015e9a:	4408      	add	r0, r1
 8015e9c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015ea0:	4404      	add	r4, r0
 8015ea2:	d02e      	beq.n	8015f02 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015ea4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015ea8:	1b9b      	subs	r3, r3, r6
 8015eaa:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8015eae:	1b96      	subs	r6, r2, r6
 8015eb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eb4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015eb8:	42a0      	cmp	r0, r4
 8015eba:	d22d      	bcs.n	8015f18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015ebc:	eb00 0e01 	add.w	lr, r0, r1
 8015ec0:	4570      	cmp	r0, lr
 8015ec2:	d210      	bcs.n	8015ee6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8015ec4:	f890 9000 	ldrb.w	r9, [r0]
 8015ec8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8015ecc:	fb19 f90c 	smulbb	r9, r9, ip
 8015ed0:	fb02 9208 	mla	r2, r2, r8, r9
 8015ed4:	b292      	uxth	r2, r2
 8015ed6:	f102 0901 	add.w	r9, r2, #1
 8015eda:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8015ede:	1212      	asrs	r2, r2, #8
 8015ee0:	f800 2b01 	strb.w	r2, [r0], #1
 8015ee4:	e7ec      	b.n	8015ec0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8015ee6:	4418      	add	r0, r3
 8015ee8:	4435      	add	r5, r6
 8015eea:	e7e5      	b.n	8015eb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8015eec:	8813      	ldrh	r3, [r2, #0]
 8015eee:	1b9b      	subs	r3, r3, r6
 8015ef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ef4:	4418      	add	r0, r3
 8015ef6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015efa:	1b9b      	subs	r3, r3, r6
 8015efc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f00:	441d      	add	r5, r3
 8015f02:	42a0      	cmp	r0, r4
 8015f04:	d208      	bcs.n	8015f18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015f06:	eb00 0c01 	add.w	ip, r0, r1
 8015f0a:	4560      	cmp	r0, ip
 8015f0c:	d2ee      	bcs.n	8015eec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8015f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015f12:	f800 3b01 	strb.w	r3, [r0], #1
 8015f16:	e7f8      	b.n	8015f0a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8015f18:	6838      	ldr	r0, [r7, #0]
 8015f1a:	6803      	ldr	r3, [r0, #0]
 8015f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f1e:	4798      	blx	r3
 8015f20:	e7a2      	b.n	8015e68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015f22:	bf00      	nop
 8015f24:	2400b980 	.word	0x2400b980
 8015f28:	2400b97a 	.word	0x2400b97a

08015f2c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8015f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f2e:	2300      	movs	r3, #0
 8015f30:	b085      	sub	sp, #20
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	4b41      	ldr	r3, [pc, #260]	; (801603c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d136      	bne.n	8015faa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8015f3c:	4a40      	ldr	r2, [pc, #256]	; (8016040 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f42:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d131      	bne.n	8015fae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8015f4a:	4b3e      	ldr	r3, [pc, #248]	; (8016044 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8015f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f50:	ac02      	add	r4, sp, #8
 8015f52:	6808      	ldr	r0, [r1, #0]
 8015f54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f58:	ab02      	add	r3, sp, #8
 8015f5a:	6849      	ldr	r1, [r1, #4]
 8015f5c:	4d3a      	ldr	r5, [pc, #232]	; (8016048 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8015f5e:	c303      	stmia	r3!, {r0, r1}
 8015f60:	4669      	mov	r1, sp
 8015f62:	4620      	mov	r0, r4
 8015f64:	f7fb fa94 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f68:	4668      	mov	r0, sp
 8015f6a:	f7fb fa69 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015f72:	f8bd 2000 	ldrh.w	r2, [sp]
 8015f76:	462e      	mov	r6, r5
 8015f78:	6828      	ldr	r0, [r5, #0]
 8015f7a:	4413      	add	r3, r2
 8015f7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015f80:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015f84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f88:	4413      	add	r3, r2
 8015f8a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015f8e:	6803      	ldr	r3, [r0, #0]
 8015f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f92:	4798      	blx	r3
 8015f94:	f010 0f01 	tst.w	r0, #1
 8015f98:	d00b      	beq.n	8015fb2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8015f9a:	6828      	ldr	r0, [r5, #0]
 8015f9c:	6803      	ldr	r3, [r0, #0]
 8015f9e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fa4:	4798      	blx	r3
 8015fa6:	b005      	add	sp, #20
 8015fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015faa:	4a26      	ldr	r2, [pc, #152]	; (8016044 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8015fac:	e7c7      	b.n	8015f3e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8015fae:	4b24      	ldr	r3, [pc, #144]	; (8016040 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015fb0:	e7cc      	b.n	8015f4c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8015fb2:	6830      	ldr	r0, [r6, #0]
 8015fb4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8015fb8:	6803      	ldr	r3, [r0, #0]
 8015fba:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8015fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fc0:	4798      	blx	r3
 8015fc2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8015fc6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015fca:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8015fce:	fb14 3402 	smlabb	r4, r4, r2, r3
 8015fd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015fd6:	4404      	add	r4, r0
 8015fd8:	6830      	ldr	r0, [r6, #0]
 8015fda:	6803      	ldr	r3, [r0, #0]
 8015fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fde:	4798      	blx	r3
 8015fe0:	4917      	ldr	r1, [pc, #92]	; (8016040 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015fe2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8015fe6:	880b      	ldrh	r3, [r1, #0]
 8015fe8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8015fec:	fb03 c202 	mla	r2, r3, r2, ip
 8015ff0:	437b      	muls	r3, r7
 8015ff2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8015ff6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ffe:	4410      	add	r0, r2
 8016000:	18c2      	adds	r2, r0, r3
 8016002:	4290      	cmp	r0, r2
 8016004:	d214      	bcs.n	8016030 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8016006:	eb00 0c07 	add.w	ip, r0, r7
 801600a:	4560      	cmp	r0, ip
 801600c:	d204      	bcs.n	8016018 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801600e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016012:	f800 3b01 	strb.w	r3, [r0], #1
 8016016:	e7f8      	b.n	801600a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8016018:	880b      	ldrh	r3, [r1, #0]
 801601a:	1b5b      	subs	r3, r3, r5
 801601c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016020:	4418      	add	r0, r3
 8016022:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016026:	1b5b      	subs	r3, r3, r5
 8016028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801602c:	441c      	add	r4, r3
 801602e:	e7e8      	b.n	8016002 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8016030:	6830      	ldr	r0, [r6, #0]
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016036:	4798      	blx	r3
 8016038:	e7b5      	b.n	8015fa6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801603a:	bf00      	nop
 801603c:	2400b978 	.word	0x2400b978
 8016040:	2400b97a 	.word	0x2400b97a
 8016044:	2400b97c 	.word	0x2400b97c
 8016048:	2400b980 	.word	0x2400b980

0801604c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016050:	b089      	sub	sp, #36	; 0x24
 8016052:	4607      	mov	r7, r0
 8016054:	4689      	mov	r9, r1
 8016056:	4692      	mov	sl, r2
 8016058:	ac08      	add	r4, sp, #32
 801605a:	461e      	mov	r6, r3
 801605c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8016060:	4620      	mov	r0, r4
 8016062:	f7fe f8ef 	bl	8014244 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	4605      	mov	r5, r0
 801606a:	4620      	mov	r0, r4
 801606c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016070:	f7fe f834 	bl	80140dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016074:	4683      	mov	fp, r0
 8016076:	4620      	mov	r0, r4
 8016078:	f7fe f864 	bl	8014144 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801607c:	4653      	mov	r3, sl
 801607e:	464a      	mov	r2, r9
 8016080:	4639      	mov	r1, r7
 8016082:	9500      	str	r5, [sp, #0]
 8016084:	e9cd b001 	strd	fp, r0, [sp, #4]
 8016088:	a806      	add	r0, sp, #24
 801608a:	47c0      	blx	r8
 801608c:	a906      	add	r1, sp, #24
 801608e:	4630      	mov	r0, r6
 8016090:	f7fd ff08 	bl	8013ea4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8016094:	4628      	mov	r0, r5
 8016096:	b009      	add	sp, #36	; 0x24
 8016098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801609c <_ZN8touchgfx8LCD24bppD0Ev>:
 801609c:	b510      	push	{r4, lr}
 801609e:	4604      	mov	r4, r0
 80160a0:	2158      	movs	r1, #88	; 0x58
 80160a2:	f006 f8f6 	bl	801c292 <_ZdlPvj>
 80160a6:	4620      	mov	r0, r4
 80160a8:	bd10      	pop	{r4, pc}

080160aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80160aa:	b510      	push	{r4, lr}
 80160ac:	4604      	mov	r4, r0
 80160ae:	2104      	movs	r1, #4
 80160b0:	f006 f8ef 	bl	801c292 <_ZdlPvj>
 80160b4:	4620      	mov	r0, r4
 80160b6:	bd10      	pop	{r4, pc}

080160b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80160b8:	b510      	push	{r4, lr}
 80160ba:	4604      	mov	r4, r0
 80160bc:	2104      	movs	r1, #4
 80160be:	f006 f8e8 	bl	801c292 <_ZdlPvj>
 80160c2:	4620      	mov	r0, r4
 80160c4:	bd10      	pop	{r4, pc}

080160c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80160c6:	b510      	push	{r4, lr}
 80160c8:	4604      	mov	r4, r0
 80160ca:	2104      	movs	r1, #4
 80160cc:	f006 f8e1 	bl	801c292 <_ZdlPvj>
 80160d0:	4620      	mov	r0, r4
 80160d2:	bd10      	pop	{r4, pc}

080160d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80160d4:	b510      	push	{r4, lr}
 80160d6:	4604      	mov	r4, r0
 80160d8:	2104      	movs	r1, #4
 80160da:	f006 f8da 	bl	801c292 <_ZdlPvj>
 80160de:	4620      	mov	r0, r4
 80160e0:	bd10      	pop	{r4, pc}

080160e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80160e2:	b510      	push	{r4, lr}
 80160e4:	4604      	mov	r4, r0
 80160e6:	2104      	movs	r1, #4
 80160e8:	f006 f8d3 	bl	801c292 <_ZdlPvj>
 80160ec:	4620      	mov	r0, r4
 80160ee:	bd10      	pop	{r4, pc}

080160f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80160f0:	b510      	push	{r4, lr}
 80160f2:	4604      	mov	r4, r0
 80160f4:	2104      	movs	r1, #4
 80160f6:	f006 f8cc 	bl	801c292 <_ZdlPvj>
 80160fa:	4620      	mov	r0, r4
 80160fc:	bd10      	pop	{r4, pc}

080160fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80160fe:	b510      	push	{r4, lr}
 8016100:	4604      	mov	r4, r0
 8016102:	2104      	movs	r1, #4
 8016104:	f006 f8c5 	bl	801c292 <_ZdlPvj>
 8016108:	4620      	mov	r0, r4
 801610a:	bd10      	pop	{r4, pc}

0801610c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801610c:	b510      	push	{r4, lr}
 801610e:	4604      	mov	r4, r0
 8016110:	2104      	movs	r1, #4
 8016112:	f006 f8be 	bl	801c292 <_ZdlPvj>
 8016116:	4620      	mov	r0, r4
 8016118:	bd10      	pop	{r4, pc}

0801611a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801611a:	b510      	push	{r4, lr}
 801611c:	4604      	mov	r4, r0
 801611e:	2104      	movs	r1, #4
 8016120:	f006 f8b7 	bl	801c292 <_ZdlPvj>
 8016124:	4620      	mov	r0, r4
 8016126:	bd10      	pop	{r4, pc}

08016128 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8016128:	b510      	push	{r4, lr}
 801612a:	4604      	mov	r4, r0
 801612c:	2104      	movs	r1, #4
 801612e:	f006 f8b0 	bl	801c292 <_ZdlPvj>
 8016132:	4620      	mov	r0, r4
 8016134:	bd10      	pop	{r4, pc}

08016136 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016136:	b510      	push	{r4, lr}
 8016138:	4604      	mov	r4, r0
 801613a:	2104      	movs	r1, #4
 801613c:	f006 f8a9 	bl	801c292 <_ZdlPvj>
 8016140:	4620      	mov	r0, r4
 8016142:	bd10      	pop	{r4, pc}

08016144 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8016144:	b510      	push	{r4, lr}
 8016146:	4604      	mov	r4, r0
 8016148:	2104      	movs	r1, #4
 801614a:	f006 f8a2 	bl	801c292 <_ZdlPvj>
 801614e:	4620      	mov	r0, r4
 8016150:	bd10      	pop	{r4, pc}

08016152 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8016152:	b510      	push	{r4, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	2104      	movs	r1, #4
 8016158:	f006 f89b 	bl	801c292 <_ZdlPvj>
 801615c:	4620      	mov	r0, r4
 801615e:	bd10      	pop	{r4, pc}

08016160 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8016160:	b510      	push	{r4, lr}
 8016162:	4604      	mov	r4, r0
 8016164:	2104      	movs	r1, #4
 8016166:	f006 f894 	bl	801c292 <_ZdlPvj>
 801616a:	4620      	mov	r0, r4
 801616c:	bd10      	pop	{r4, pc}

0801616e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801616e:	b510      	push	{r4, lr}
 8016170:	4604      	mov	r4, r0
 8016172:	2104      	movs	r1, #4
 8016174:	f006 f88d 	bl	801c292 <_ZdlPvj>
 8016178:	4620      	mov	r0, r4
 801617a:	bd10      	pop	{r4, pc}

0801617c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801617c:	b510      	push	{r4, lr}
 801617e:	4604      	mov	r4, r0
 8016180:	2104      	movs	r1, #4
 8016182:	f006 f886 	bl	801c292 <_ZdlPvj>
 8016186:	4620      	mov	r0, r4
 8016188:	bd10      	pop	{r4, pc}

0801618a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801618a:	b510      	push	{r4, lr}
 801618c:	4604      	mov	r4, r0
 801618e:	2104      	movs	r1, #4
 8016190:	f006 f87f 	bl	801c292 <_ZdlPvj>
 8016194:	4620      	mov	r0, r4
 8016196:	bd10      	pop	{r4, pc}

08016198 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8016198:	b510      	push	{r4, lr}
 801619a:	4604      	mov	r4, r0
 801619c:	2104      	movs	r1, #4
 801619e:	f006 f878 	bl	801c292 <_ZdlPvj>
 80161a2:	4620      	mov	r0, r4
 80161a4:	bd10      	pop	{r4, pc}

080161a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80161a6:	b510      	push	{r4, lr}
 80161a8:	4604      	mov	r4, r0
 80161aa:	2104      	movs	r1, #4
 80161ac:	f006 f871 	bl	801c292 <_ZdlPvj>
 80161b0:	4620      	mov	r0, r4
 80161b2:	bd10      	pop	{r4, pc}

080161b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80161b4:	b510      	push	{r4, lr}
 80161b6:	4604      	mov	r4, r0
 80161b8:	2104      	movs	r1, #4
 80161ba:	f006 f86a 	bl	801c292 <_ZdlPvj>
 80161be:	4620      	mov	r0, r4
 80161c0:	bd10      	pop	{r4, pc}

080161c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80161c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80161ca:	9c06      	ldr	r4, [sp, #24]
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d06e      	beq.n	80162ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80161d0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80161d4:	2d00      	cmp	r5, #0
 80161d6:	dd6a      	ble.n	80162ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80161d8:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80161dc:	f1bc 0f00 	cmp.w	ip, #0
 80161e0:	dd65      	ble.n	80162ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80161e2:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80161e6:	28ff      	cmp	r0, #255	; 0xff
 80161e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161ec:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80161f0:	fb02 3306 	mla	r3, r2, r6, r3
 80161f4:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80161f8:	b2e4      	uxtb	r4, r4
 80161fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161fe:	4419      	add	r1, r3
 8016200:	fb02 f30c 	mul.w	r3, r2, ip
 8016204:	eba2 0205 	sub.w	r2, r2, r5
 8016208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801620c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016214:	440b      	add	r3, r1
 8016216:	d03e      	beq.n	8016296 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8016218:	fa1f fc80 	uxth.w	ip, r0
 801621c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8016220:	fb06 f60c 	mul.w	r6, r6, ip
 8016224:	b280      	uxth	r0, r0
 8016226:	fb07 f70c 	mul.w	r7, r7, ip
 801622a:	fb04 f40c 	mul.w	r4, r4, ip
 801622e:	4299      	cmp	r1, r3
 8016230:	d23d      	bcs.n	80162ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016232:	eb01 0c05 	add.w	ip, r1, r5
 8016236:	458c      	cmp	ip, r1
 8016238:	f101 0e03 	add.w	lr, r1, #3
 801623c:	d928      	bls.n	8016290 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801623e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8016242:	fb11 f100 	smulbb	r1, r1, r0
 8016246:	4421      	add	r1, r4
 8016248:	b289      	uxth	r1, r1
 801624a:	f101 0801 	add.w	r8, r1, #1
 801624e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016252:	1209      	asrs	r1, r1, #8
 8016254:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8016258:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801625c:	fb11 f100 	smulbb	r1, r1, r0
 8016260:	4439      	add	r1, r7
 8016262:	b289      	uxth	r1, r1
 8016264:	f101 0801 	add.w	r8, r1, #1
 8016268:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801626c:	1209      	asrs	r1, r1, #8
 801626e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8016272:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8016276:	fb11 f100 	smulbb	r1, r1, r0
 801627a:	4431      	add	r1, r6
 801627c:	b289      	uxth	r1, r1
 801627e:	f101 0801 	add.w	r8, r1, #1
 8016282:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016286:	1209      	asrs	r1, r1, #8
 8016288:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801628c:	4671      	mov	r1, lr
 801628e:	e7d2      	b.n	8016236 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8016290:	4411      	add	r1, r2
 8016292:	e7cc      	b.n	801622e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8016294:	4411      	add	r1, r2
 8016296:	4299      	cmp	r1, r3
 8016298:	d209      	bcs.n	80162ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801629a:	1948      	adds	r0, r1, r5
 801629c:	4281      	cmp	r1, r0
 801629e:	d2f9      	bcs.n	8016294 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80162a0:	700c      	strb	r4, [r1, #0]
 80162a2:	3103      	adds	r1, #3
 80162a4:	f801 7c02 	strb.w	r7, [r1, #-2]
 80162a8:	f801 6c01 	strb.w	r6, [r1, #-1]
 80162ac:	e7f6      	b.n	801629c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80162ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080162b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80162b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b8:	b093      	sub	sp, #76	; 0x4c
 80162ba:	4699      	mov	r9, r3
 80162bc:	4617      	mov	r7, r2
 80162be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80162c2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 80162c6:	4604      	mov	r4, r0
 80162c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80162cc:	a80c      	add	r0, sp, #48	; 0x30
 80162ce:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 80162d2:	460d      	mov	r5, r1
 80162d4:	4649      	mov	r1, r9
 80162d6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80162da:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80162de:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 80162e2:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 80162e6:	f7f9 f93b 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 80162ea:	4639      	mov	r1, r7
 80162ec:	a80c      	add	r0, sp, #48	; 0x30
 80162ee:	f7f9 f937 	bl	800f560 <_ZN8touchgfx4RectaNERKS0_>
 80162f2:	4b78      	ldr	r3, [pc, #480]	; (80164d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80162f4:	8818      	ldrh	r0, [r3, #0]
 80162f6:	4b78      	ldr	r3, [pc, #480]	; (80164d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 80162f8:	b202      	sxth	r2, r0
 80162fa:	8819      	ldrh	r1, [r3, #0]
 80162fc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016300:	b20f      	sxth	r7, r1
 8016302:	2b00      	cmp	r3, #0
 8016304:	da07      	bge.n	8016316 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8016306:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801630a:	4463      	add	r3, ip
 801630c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8016310:	2300      	movs	r3, #0
 8016312:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8016316:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801631a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801631e:	1ad2      	subs	r2, r2, r3
 8016320:	4594      	cmp	ip, r2
 8016322:	bfc4      	itt	gt
 8016324:	1ac2      	subgt	r2, r0, r3
 8016326:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801632a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801632e:	2a00      	cmp	r2, #0
 8016330:	da07      	bge.n	8016342 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8016332:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8016336:	4462      	add	r2, ip
 8016338:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801633c:	2200      	movs	r2, #0
 801633e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016342:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016346:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801634a:	1abf      	subs	r7, r7, r2
 801634c:	45bc      	cmp	ip, r7
 801634e:	f8df c190 	ldr.w	ip, [pc, #400]	; 80164e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8016352:	bfc8      	it	gt
 8016354:	1a8f      	subgt	r7, r1, r2
 8016356:	f89c c000 	ldrb.w	ip, [ip]
 801635a:	bfc8      	it	gt
 801635c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8016360:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8016364:	f1bc 0f00 	cmp.w	ip, #0
 8016368:	d176      	bne.n	8016458 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801636a:	4287      	cmp	r7, r0
 801636c:	bf14      	ite	ne
 801636e:	2100      	movne	r1, #0
 8016370:	2101      	moveq	r1, #1
 8016372:	2f00      	cmp	r7, #0
 8016374:	9107      	str	r1, [sp, #28]
 8016376:	dd73      	ble.n	8016460 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8016378:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801637c:	2900      	cmp	r1, #0
 801637e:	9104      	str	r1, [sp, #16]
 8016380:	dd6e      	ble.n	8016460 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8016382:	f8b9 1000 	ldrh.w	r1, [r9]
 8016386:	a80e      	add	r0, sp, #56	; 0x38
 8016388:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801638c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016390:	1a5b      	subs	r3, r3, r1
 8016392:	a910      	add	r1, sp, #64	; 0x40
 8016394:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8016398:	b21b      	sxth	r3, r3
 801639a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801639e:	f8df a144 	ldr.w	sl, [pc, #324]	; 80164e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80163a2:	9305      	str	r3, [sp, #20]
 80163a4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80163a8:	1ad2      	subs	r2, r2, r3
 80163aa:	b213      	sxth	r3, r2
 80163ac:	9306      	str	r3, [sp, #24]
 80163ae:	9b05      	ldr	r3, [sp, #20]
 80163b0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80163b4:	9b06      	ldr	r3, [sp, #24]
 80163b6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80163ba:	9b04      	ldr	r3, [sp, #16]
 80163bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80163c0:	2300      	movs	r3, #0
 80163c2:	9310      	str	r3, [sp, #64]	; 0x40
 80163c4:	f7fb f864 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80163c8:	4640      	mov	r0, r8
 80163ca:	f7fb f839 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80163ce:	a810      	add	r0, sp, #64	; 0x40
 80163d0:	f7fb f836 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80163d4:	4b41      	ldr	r3, [pc, #260]	; (80164dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80163d6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80163da:	4628      	mov	r0, r5
 80163dc:	881b      	ldrh	r3, [r3, #0]
 80163de:	9308      	str	r3, [sp, #32]
 80163e0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80163e4:	b21b      	sxth	r3, r3
 80163e6:	9303      	str	r3, [sp, #12]
 80163e8:	682b      	ldr	r3, [r5, #0]
 80163ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163ec:	4798      	blx	r3
 80163ee:	9a03      	ldr	r2, [sp, #12]
 80163f0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80163f4:	4681      	mov	r9, r0
 80163f6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80163fa:	fb13 f302 	smulbb	r3, r3, r2
 80163fe:	2203      	movs	r2, #3
 8016400:	f8da 0000 	ldr.w	r0, [sl]
 8016404:	fb15 3302 	smlabb	r3, r5, r2, r3
 8016408:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801640a:	920b      	str	r2, [sp, #44]	; 0x2c
 801640c:	441d      	add	r5, r3
 801640e:	6803      	ldr	r3, [r0, #0]
 8016410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016412:	4798      	blx	r3
 8016414:	9009      	str	r0, [sp, #36]	; 0x24
 8016416:	f8da 0000 	ldr.w	r0, [sl]
 801641a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801641e:	6803      	ldr	r3, [r0, #0]
 8016420:	910a      	str	r1, [sp, #40]	; 0x28
 8016422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016424:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8016428:	4798      	blx	r3
 801642a:	f010 0f01 	tst.w	r0, #1
 801642e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016432:	d01e      	beq.n	8016472 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8016434:	f8da 0000 	ldr.w	r0, [sl]
 8016438:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801643c:	6803      	ldr	r3, [r0, #0]
 801643e:	9200      	str	r2, [sp, #0]
 8016440:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8016442:	462b      	mov	r3, r5
 8016444:	e898 0006 	ldmia.w	r8, {r1, r2}
 8016448:	47b0      	blx	r6
 801644a:	9b05      	ldr	r3, [sp, #20]
 801644c:	80a7      	strh	r7, [r4, #4]
 801644e:	8023      	strh	r3, [r4, #0]
 8016450:	9b06      	ldr	r3, [sp, #24]
 8016452:	8063      	strh	r3, [r4, #2]
 8016454:	9b04      	ldr	r3, [sp, #16]
 8016456:	e007      	b.n	8016468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8016458:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801645c:	4288      	cmp	r0, r1
 801645e:	e785      	b.n	801636c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8016460:	2300      	movs	r3, #0
 8016462:	8023      	strh	r3, [r4, #0]
 8016464:	8063      	strh	r3, [r4, #2]
 8016466:	80a3      	strh	r3, [r4, #4]
 8016468:	4620      	mov	r0, r4
 801646a:	80e3      	strh	r3, [r4, #6]
 801646c:	b013      	add	sp, #76	; 0x4c
 801646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016472:	fb09 f606 	mul.w	r6, r9, r6
 8016476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016478:	fb11 6602 	smlabb	r6, r1, r2, r6
 801647c:	9a07      	ldr	r2, [sp, #28]
 801647e:	4433      	add	r3, r6
 8016480:	461e      	mov	r6, r3
 8016482:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8016486:	b16a      	cbz	r2, 80164a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8016488:	9a08      	ldr	r2, [sp, #32]
 801648a:	4593      	cmp	fp, r2
 801648c:	d10a      	bne.n	80164a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801648e:	f8da 0000 	ldr.w	r0, [sl]
 8016492:	fb09 f303 	mul.w	r3, r9, r3
 8016496:	4629      	mov	r1, r5
 8016498:	6802      	ldr	r2, [r0, #0]
 801649a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801649e:	4632      	mov	r2, r6
 80164a0:	47d0      	blx	sl
 80164a2:	e7d2      	b.n	801644a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80164a4:	9a03      	ldr	r2, [sp, #12]
 80164a6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80164e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80164aa:	fb02 5803 	mla	r8, r2, r3, r5
 80164ae:	4545      	cmp	r5, r8
 80164b0:	d2cb      	bcs.n	801644a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80164b2:	f8db 0000 	ldr.w	r0, [fp]
 80164b6:	4629      	mov	r1, r5
 80164b8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80164bc:	6802      	ldr	r2, [r0, #0]
 80164be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164c2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80164c6:	4632      	mov	r2, r6
 80164c8:	47d0      	blx	sl
 80164ca:	9b03      	ldr	r3, [sp, #12]
 80164cc:	444e      	add	r6, r9
 80164ce:	441d      	add	r5, r3
 80164d0:	e7ed      	b.n	80164ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80164d2:	bf00      	nop
 80164d4:	2400b974 	.word	0x2400b974
 80164d8:	2400b976 	.word	0x2400b976
 80164dc:	2400b97a 	.word	0x2400b97a
 80164e0:	2400b978 	.word	0x2400b978
 80164e4:	2400b980 	.word	0x2400b980

080164e8 <_ZN8touchgfx8LCD24bppC1Ev>:
 80164e8:	2200      	movs	r2, #0
 80164ea:	490c      	ldr	r1, [pc, #48]	; (801651c <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 80164ec:	6042      	str	r2, [r0, #4]
 80164ee:	6001      	str	r1, [r0, #0]
 80164f0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80164f4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80164f8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80164fc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8016500:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8016504:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8016508:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801650c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8016510:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8016514:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8016518:	4770      	bx	lr
 801651a:	bf00      	nop
 801651c:	0801f518 	.word	0x0801f518

08016520 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8016520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016524:	b091      	sub	sp, #68	; 0x44
 8016526:	4607      	mov	r7, r0
 8016528:	4688      	mov	r8, r1
 801652a:	6810      	ldr	r0, [r2, #0]
 801652c:	6851      	ldr	r1, [r2, #4]
 801652e:	ac0c      	add	r4, sp, #48	; 0x30
 8016530:	4616      	mov	r6, r2
 8016532:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8016536:	4d64      	ldr	r5, [pc, #400]	; (80166c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8016538:	f8df a190 	ldr.w	sl, [pc, #400]	; 80166cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801653c:	c403      	stmia	r4!, {r0, r1}
 801653e:	6818      	ldr	r0, [r3, #0]
 8016540:	ac0e      	add	r4, sp, #56	; 0x38
 8016542:	6859      	ldr	r1, [r3, #4]
 8016544:	c403      	stmia	r4!, {r0, r1}
 8016546:	a80c      	add	r0, sp, #48	; 0x30
 8016548:	f7fa ff7a 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801654c:	4631      	mov	r1, r6
 801654e:	a80e      	add	r0, sp, #56	; 0x38
 8016550:	f7fa ff9e 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016554:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8016558:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801655c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016560:	6828      	ldr	r0, [r5, #0]
 8016562:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016566:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801656a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801656e:	440f      	add	r7, r1
 8016570:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8016574:	440a      	add	r2, r1
 8016576:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801657a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801657e:	4413      	add	r3, r2
 8016580:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016584:	6803      	ldr	r3, [r0, #0]
 8016586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016588:	4798      	blx	r3
 801658a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801658e:	6828      	ldr	r0, [r5, #0]
 8016590:	d01f      	beq.n	80165d2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8016592:	2201      	movs	r2, #1
 8016594:	2500      	movs	r5, #0
 8016596:	6801      	ldr	r1, [r0, #0]
 8016598:	b2a4      	uxth	r4, r4
 801659a:	b2b6      	uxth	r6, r6
 801659c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80165a0:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80165a4:	250b      	movs	r5, #11
 80165a6:	9507      	str	r5, [sp, #28]
 80165a8:	f8ba 5000 	ldrh.w	r5, [sl]
 80165ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80165b0:	9602      	str	r6, [sp, #8]
 80165b2:	9401      	str	r4, [sp, #4]
 80165b4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80165b8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80165bc:	9203      	str	r2, [sp, #12]
 80165be:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80165c2:	9200      	str	r2, [sp, #0]
 80165c4:	4642      	mov	r2, r8
 80165c6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80165c8:	4639      	mov	r1, r7
 80165ca:	47a0      	blx	r4
 80165cc:	b011      	add	sp, #68	; 0x44
 80165ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d2:	6803      	ldr	r3, [r0, #0]
 80165d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165d6:	4798      	blx	r3
 80165d8:	f8ba 5000 	ldrh.w	r5, [sl]
 80165dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80165e0:	f04f 0e04 	mov.w	lr, #4
 80165e4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80165e8:	436e      	muls	r6, r5
 80165ea:	fb05 2303 	mla	r3, r5, r3, r2
 80165ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80165f2:	1b2d      	subs	r5, r5, r4
 80165f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165fc:	4418      	add	r0, r3
 80165fe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8016602:	1982      	adds	r2, r0, r6
 8016604:	1b1b      	subs	r3, r3, r4
 8016606:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801660a:	930b      	str	r3, [sp, #44]	; 0x2c
 801660c:	4290      	cmp	r0, r2
 801660e:	d254      	bcs.n	80166ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8016610:	eb00 0a04 	add.w	sl, r0, r4
 8016614:	4550      	cmp	r0, sl
 8016616:	d24c      	bcs.n	80166b2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8016618:	f817 1b01 	ldrb.w	r1, [r7], #1
 801661c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8016620:	eb08 0c01 	add.w	ip, r8, r1
 8016624:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8016628:	b173      	cbz	r3, 8016648 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801662a:	2bff      	cmp	r3, #255	; 0xff
 801662c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8016630:	d10c      	bne.n	801664c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8016632:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016636:	d109      	bne.n	801664c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8016638:	f880 b000 	strb.w	fp, [r0]
 801663c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016640:	7043      	strb	r3, [r0, #1]
 8016642:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8016646:	7083      	strb	r3, [r0, #2]
 8016648:	3003      	adds	r0, #3
 801664a:	e7e3      	b.n	8016614 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801664c:	fb09 f103 	mul.w	r1, r9, r3
 8016650:	1c4b      	adds	r3, r1, #1
 8016652:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8016656:	7801      	ldrb	r1, [r0, #0]
 8016658:	121b      	asrs	r3, r3, #8
 801665a:	b29e      	uxth	r6, r3
 801665c:	43db      	mvns	r3, r3
 801665e:	fb1b fb06 	smulbb	fp, fp, r6
 8016662:	b2db      	uxtb	r3, r3
 8016664:	fb01 b103 	mla	r1, r1, r3, fp
 8016668:	b289      	uxth	r1, r1
 801666a:	f101 0b01 	add.w	fp, r1, #1
 801666e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016672:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016676:	fb1b fb03 	smulbb	fp, fp, r3
 801667a:	1209      	asrs	r1, r1, #8
 801667c:	7001      	strb	r1, [r0, #0]
 801667e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8016682:	fb01 b106 	mla	r1, r1, r6, fp
 8016686:	b289      	uxth	r1, r1
 8016688:	f101 0b01 	add.w	fp, r1, #1
 801668c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8016690:	1209      	asrs	r1, r1, #8
 8016692:	7041      	strb	r1, [r0, #1]
 8016694:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8016698:	f890 c002 	ldrb.w	ip, [r0, #2]
 801669c:	fb1c f303 	smulbb	r3, ip, r3
 80166a0:	fb01 3606 	mla	r6, r1, r6, r3
 80166a4:	b2b6      	uxth	r6, r6
 80166a6:	1c73      	adds	r3, r6, #1
 80166a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80166ac:	1236      	asrs	r6, r6, #8
 80166ae:	7086      	strb	r6, [r0, #2]
 80166b0:	e7ca      	b.n	8016648 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80166b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166b4:	4428      	add	r0, r5
 80166b6:	441f      	add	r7, r3
 80166b8:	e7a8      	b.n	801660c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80166ba:	4b03      	ldr	r3, [pc, #12]	; (80166c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80166bc:	6818      	ldr	r0, [r3, #0]
 80166be:	6803      	ldr	r3, [r0, #0]
 80166c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166c2:	4798      	blx	r3
 80166c4:	e782      	b.n	80165cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80166c6:	bf00      	nop
 80166c8:	2400b980 	.word	0x2400b980
 80166cc:	2400b97a 	.word	0x2400b97a

080166d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80166d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d4:	b091      	sub	sp, #68	; 0x44
 80166d6:	4680      	mov	r8, r0
 80166d8:	460e      	mov	r6, r1
 80166da:	6810      	ldr	r0, [r2, #0]
 80166dc:	6851      	ldr	r1, [r2, #4]
 80166de:	ad0c      	add	r5, sp, #48	; 0x30
 80166e0:	4614      	mov	r4, r2
 80166e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80166e6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8016880 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80166ea:	f8df a198 	ldr.w	sl, [pc, #408]	; 8016884 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80166ee:	c503      	stmia	r5!, {r0, r1}
 80166f0:	6818      	ldr	r0, [r3, #0]
 80166f2:	ad0e      	add	r5, sp, #56	; 0x38
 80166f4:	6859      	ldr	r1, [r3, #4]
 80166f6:	c503      	stmia	r5!, {r0, r1}
 80166f8:	a80c      	add	r0, sp, #48	; 0x30
 80166fa:	f7fa fea1 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80166fe:	4621      	mov	r1, r4
 8016700:	a80e      	add	r0, sp, #56	; 0x38
 8016702:	f7fa fec5 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016706:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801670a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801670e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016712:	f8d9 0000 	ldr.w	r0, [r9]
 8016716:	fb11 2103 	smlabb	r1, r1, r3, r2
 801671a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801671e:	eb08 0401 	add.w	r4, r8, r1
 8016722:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8016726:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801672a:	440a      	add	r2, r1
 801672c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8016730:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016734:	4413      	add	r3, r2
 8016736:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801673a:	6803      	ldr	r3, [r0, #0]
 801673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801673e:	4798      	blx	r3
 8016740:	f010 0f80 	tst.w	r0, #128	; 0x80
 8016744:	f8d9 0000 	ldr.w	r0, [r9]
 8016748:	d022      	beq.n	8016790 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801674a:	2200      	movs	r2, #0
 801674c:	f04f 0c01 	mov.w	ip, #1
 8016750:	6801      	ldr	r1, [r0, #0]
 8016752:	b2ad      	uxth	r5, r5
 8016754:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016758:	e9cd c208 	strd	ip, r2, [sp, #32]
 801675c:	f04f 0c0b 	mov.w	ip, #11
 8016760:	f8cd c01c 	str.w	ip, [sp, #28]
 8016764:	f8ba c000 	ldrh.w	ip, [sl]
 8016768:	9704      	str	r7, [sp, #16]
 801676a:	9502      	str	r5, [sp, #8]
 801676c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8016770:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8016774:	9203      	str	r2, [sp, #12]
 8016776:	fa1f f288 	uxth.w	r2, r8
 801677a:	9201      	str	r2, [sp, #4]
 801677c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016780:	9200      	str	r2, [sp, #0]
 8016782:	4632      	mov	r2, r6
 8016784:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8016786:	4621      	mov	r1, r4
 8016788:	47a8      	blx	r5
 801678a:	b011      	add	sp, #68	; 0x44
 801678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016790:	6803      	ldr	r3, [r0, #0]
 8016792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016794:	4798      	blx	r3
 8016796:	f8ba 2000 	ldrh.w	r2, [sl]
 801679a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801679e:	f04f 0e03 	mov.w	lr, #3
 80167a2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80167a6:	4355      	muls	r5, r2
 80167a8:	fa1f fc87 	uxth.w	ip, r7
 80167ac:	fb02 1303 	mla	r3, r2, r3, r1
 80167b0:	eba2 0208 	sub.w	r2, r2, r8
 80167b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80167b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80167bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80167c0:	4418      	add	r0, r3
 80167c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80167c4:	1943      	adds	r3, r0, r5
 80167c6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80167ca:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80167ce:	eba2 0208 	sub.w	r2, r2, r8
 80167d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80167d6:	b2ad      	uxth	r5, r5
 80167d8:	4298      	cmp	r0, r3
 80167da:	d24a      	bcs.n	8016872 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80167dc:	eb00 0908 	add.w	r9, r0, r8
 80167e0:	4621      	mov	r1, r4
 80167e2:	4548      	cmp	r0, r9
 80167e4:	460c      	mov	r4, r1
 80167e6:	d240      	bcs.n	801686a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80167e8:	f04f 0a04 	mov.w	sl, #4
 80167ec:	7824      	ldrb	r4, [r4, #0]
 80167ee:	2fff      	cmp	r7, #255	; 0xff
 80167f0:	f101 0101 	add.w	r1, r1, #1
 80167f4:	fb1e a404 	smlabb	r4, lr, r4, sl
 80167f8:	eb06 0a04 	add.w	sl, r6, r4
 80167fc:	f816 b004 	ldrb.w	fp, [r6, r4]
 8016800:	d02b      	beq.n	801685a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8016802:	7804      	ldrb	r4, [r0, #0]
 8016804:	fb14 f405 	smulbb	r4, r4, r5
 8016808:	fb0b 440c 	mla	r4, fp, ip, r4
 801680c:	b2a4      	uxth	r4, r4
 801680e:	f104 0b01 	add.w	fp, r4, #1
 8016812:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016816:	f890 b001 	ldrb.w	fp, [r0, #1]
 801681a:	fb1b fb05 	smulbb	fp, fp, r5
 801681e:	1224      	asrs	r4, r4, #8
 8016820:	7004      	strb	r4, [r0, #0]
 8016822:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016826:	fb04 b40c 	mla	r4, r4, ip, fp
 801682a:	b2a4      	uxth	r4, r4
 801682c:	f104 0b01 	add.w	fp, r4, #1
 8016830:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8016834:	1224      	asrs	r4, r4, #8
 8016836:	7044      	strb	r4, [r0, #1]
 8016838:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801683c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8016840:	fb1a fa05 	smulbb	sl, sl, r5
 8016844:	fb04 a40c 	mla	r4, r4, ip, sl
 8016848:	b2a4      	uxth	r4, r4
 801684a:	f104 0a01 	add.w	sl, r4, #1
 801684e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8016852:	1224      	asrs	r4, r4, #8
 8016854:	7084      	strb	r4, [r0, #2]
 8016856:	3003      	adds	r0, #3
 8016858:	e7c3      	b.n	80167e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801685a:	f880 b000 	strb.w	fp, [r0]
 801685e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8016862:	7044      	strb	r4, [r0, #1]
 8016864:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8016868:	e7f4      	b.n	8016854 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801686a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801686c:	4420      	add	r0, r4
 801686e:	188c      	adds	r4, r1, r2
 8016870:	e7b2      	b.n	80167d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8016872:	4b03      	ldr	r3, [pc, #12]	; (8016880 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8016874:	6818      	ldr	r0, [r3, #0]
 8016876:	6803      	ldr	r3, [r0, #0]
 8016878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801687a:	4798      	blx	r3
 801687c:	e785      	b.n	801678a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801687e:	bf00      	nop
 8016880:	2400b980 	.word	0x2400b980
 8016884:	2400b97a 	.word	0x2400b97a

08016888 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8016888:	b430      	push	{r4, r5}
 801688a:	780d      	ldrb	r5, [r1, #0]
 801688c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016890:	b11d      	cbz	r5, 801689a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8016892:	2d01      	cmp	r5, #1
 8016894:	d005      	beq.n	80168a2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8016896:	bc30      	pop	{r4, r5}
 8016898:	4770      	bx	lr
 801689a:	9402      	str	r4, [sp, #8]
 801689c:	bc30      	pop	{r4, r5}
 801689e:	f7ff be3f 	b.w	8016520 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80168a2:	9402      	str	r4, [sp, #8]
 80168a4:	bc30      	pop	{r4, r5}
 80168a6:	f7ff bf13 	b.w	80166d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

080168ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80168ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168b0:	4605      	mov	r5, r0
 80168b2:	b08f      	sub	sp, #60	; 0x3c
 80168b4:	460c      	mov	r4, r1
 80168b6:	461f      	mov	r7, r3
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d052      	beq.n	8016962 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80168bc:	6808      	ldr	r0, [r1, #0]
 80168be:	ab0a      	add	r3, sp, #40	; 0x28
 80168c0:	6849      	ldr	r1, [r1, #4]
 80168c2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8016a8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80168c6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8016a90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80168ca:	c303      	stmia	r3!, {r0, r1}
 80168cc:	6810      	ldr	r0, [r2, #0]
 80168ce:	ab0c      	add	r3, sp, #48	; 0x30
 80168d0:	6851      	ldr	r1, [r2, #4]
 80168d2:	c303      	stmia	r3!, {r0, r1}
 80168d4:	a80a      	add	r0, sp, #40	; 0x28
 80168d6:	f7fa fdb3 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80168da:	4621      	mov	r1, r4
 80168dc:	a80c      	add	r0, sp, #48	; 0x30
 80168de:	f7fa fdd7 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80168e2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80168e6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80168ea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80168ee:	f8d8 0000 	ldr.w	r0, [r8]
 80168f2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80168f6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80168fa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 80168fe:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8016902:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8016906:	440a      	add	r2, r1
 8016908:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801690c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8016910:	4413      	add	r3, r2
 8016912:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016916:	6803      	ldr	r3, [r0, #0]
 8016918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801691a:	4798      	blx	r3
 801691c:	2fff      	cmp	r7, #255	; 0xff
 801691e:	d023      	beq.n	8016968 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8016920:	f010 0f04 	tst.w	r0, #4
 8016924:	f8d8 0000 	ldr.w	r0, [r8]
 8016928:	d021      	beq.n	801696e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801692a:	2100      	movs	r1, #0
 801692c:	f04f 0e01 	mov.w	lr, #1
 8016930:	f8d0 c000 	ldr.w	ip, [r0]
 8016934:	b2a4      	uxth	r4, r4
 8016936:	9106      	str	r1, [sp, #24]
 8016938:	b2b6      	uxth	r6, r6
 801693a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801693e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8016942:	e9cd e107 	strd	lr, r1, [sp, #28]
 8016946:	f8b9 e000 	ldrh.w	lr, [r9]
 801694a:	9703      	str	r7, [sp, #12]
 801694c:	9401      	str	r4, [sp, #4]
 801694e:	9600      	str	r6, [sp, #0]
 8016950:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8016954:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016958:	9102      	str	r1, [sp, #8]
 801695a:	4629      	mov	r1, r5
 801695c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8016960:	47a0      	blx	r4
 8016962:	b00f      	add	sp, #60	; 0x3c
 8016964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016968:	f010 0f01 	tst.w	r0, #1
 801696c:	e7da      	b.n	8016924 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801696e:	6803      	ldr	r3, [r0, #0]
 8016970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016972:	4798      	blx	r3
 8016974:	f8b9 1000 	ldrh.w	r1, [r9]
 8016978:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801697c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8016980:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8016984:	434c      	muls	r4, r1
 8016986:	2fff      	cmp	r7, #255	; 0xff
 8016988:	fb01 2303 	mla	r3, r1, r3, r2
 801698c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016990:	eba1 0106 	sub.w	r1, r1, r6
 8016994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801699c:	4418      	add	r0, r3
 801699e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80169a2:	eba3 0606 	sub.w	r6, r3, r6
 80169a6:	4404      	add	r4, r0
 80169a8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80169ac:	d04a      	beq.n	8016a44 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80169ae:	43fa      	mvns	r2, r7
 80169b0:	b2bb      	uxth	r3, r7
 80169b2:	b2d7      	uxtb	r7, r2
 80169b4:	42a0      	cmp	r0, r4
 80169b6:	d263      	bcs.n	8016a80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80169b8:	eb00 0e0c 	add.w	lr, r0, ip
 80169bc:	4586      	cmp	lr, r0
 80169be:	f100 0803 	add.w	r8, r0, #3
 80169c2:	d93a      	bls.n	8016a3a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80169c4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80169c8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80169cc:	00d0      	lsls	r0, r2, #3
 80169ce:	fb19 f907 	smulbb	r9, r9, r7
 80169d2:	b2c0      	uxtb	r0, r0
 80169d4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80169d8:	fb00 9003 	mla	r0, r0, r3, r9
 80169dc:	b280      	uxth	r0, r0
 80169de:	f100 0901 	add.w	r9, r0, #1
 80169e2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80169e6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80169ea:	fb19 f907 	smulbb	r9, r9, r7
 80169ee:	1200      	asrs	r0, r0, #8
 80169f0:	f808 0c03 	strb.w	r0, [r8, #-3]
 80169f4:	10d0      	asrs	r0, r2, #3
 80169f6:	1212      	asrs	r2, r2, #8
 80169f8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80169fc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8016a00:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8016a04:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016a08:	fb00 9003 	mla	r0, r0, r3, r9
 8016a0c:	b280      	uxth	r0, r0
 8016a0e:	f100 0901 	add.w	r9, r0, #1
 8016a12:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8016a16:	1200      	asrs	r0, r0, #8
 8016a18:	f808 0c02 	strb.w	r0, [r8, #-2]
 8016a1c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8016a20:	fb10 f007 	smulbb	r0, r0, r7
 8016a24:	fb02 0203 	mla	r2, r2, r3, r0
 8016a28:	b292      	uxth	r2, r2
 8016a2a:	1c50      	adds	r0, r2, #1
 8016a2c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016a30:	4640      	mov	r0, r8
 8016a32:	1212      	asrs	r2, r2, #8
 8016a34:	f808 2c01 	strb.w	r2, [r8, #-1]
 8016a38:	e7c0      	b.n	80169bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8016a3a:	4408      	add	r0, r1
 8016a3c:	4435      	add	r5, r6
 8016a3e:	e7b9      	b.n	80169b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8016a40:	4408      	add	r0, r1
 8016a42:	4435      	add	r5, r6
 8016a44:	42a0      	cmp	r0, r4
 8016a46:	d21b      	bcs.n	8016a80 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8016a48:	eb00 070c 	add.w	r7, r0, ip
 8016a4c:	42b8      	cmp	r0, r7
 8016a4e:	d2f7      	bcs.n	8016a40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8016a50:	f835 3b02 	ldrh.w	r3, [r5], #2
 8016a54:	3003      	adds	r0, #3
 8016a56:	00da      	lsls	r2, r3, #3
 8016a58:	b2d2      	uxtb	r2, r2
 8016a5a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8016a5e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8016a62:	10da      	asrs	r2, r3, #3
 8016a64:	121b      	asrs	r3, r3, #8
 8016a66:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016a6a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016a6e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8016a72:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8016a76:	f800 2c02 	strb.w	r2, [r0, #-2]
 8016a7a:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016a7e:	e7e5      	b.n	8016a4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8016a80:	4b02      	ldr	r3, [pc, #8]	; (8016a8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8016a82:	6818      	ldr	r0, [r3, #0]
 8016a84:	6803      	ldr	r3, [r0, #0]
 8016a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a88:	4798      	blx	r3
 8016a8a:	e76a      	b.n	8016962 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8016a8c:	2400b980 	.word	0x2400b980
 8016a90:	2400b97a 	.word	0x2400b97a

08016a94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8016a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a98:	b08a      	sub	sp, #40	; 0x28
 8016a9a:	460d      	mov	r5, r1
 8016a9c:	4604      	mov	r4, r0
 8016a9e:	461e      	mov	r6, r3
 8016aa0:	6808      	ldr	r0, [r1, #0]
 8016aa2:	ab06      	add	r3, sp, #24
 8016aa4:	6849      	ldr	r1, [r1, #4]
 8016aa6:	4f5d      	ldr	r7, [pc, #372]	; (8016c1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8016aa8:	c303      	stmia	r3!, {r0, r1}
 8016aaa:	6810      	ldr	r0, [r2, #0]
 8016aac:	ab08      	add	r3, sp, #32
 8016aae:	6851      	ldr	r1, [r2, #4]
 8016ab0:	c303      	stmia	r3!, {r0, r1}
 8016ab2:	a806      	add	r0, sp, #24
 8016ab4:	f7fa fcc4 	bl	8011440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016ab8:	4629      	mov	r1, r5
 8016aba:	a808      	add	r0, sp, #32
 8016abc:	f7fa fce8 	bl	8011490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016ac0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016ac4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016ac8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016acc:	6838      	ldr	r0, [r7, #0]
 8016ace:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016ad2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8016ad6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8016ada:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016ade:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016ae2:	440a      	add	r2, r1
 8016ae4:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016ae8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016aec:	4413      	add	r3, r2
 8016aee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016af2:	6803      	ldr	r3, [r0, #0]
 8016af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016af6:	4798      	blx	r3
 8016af8:	2eff      	cmp	r6, #255	; 0xff
 8016afa:	d119      	bne.n	8016b30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8016afc:	f010 0f20 	tst.w	r0, #32
 8016b00:	6838      	ldr	r0, [r7, #0]
 8016b02:	d018      	beq.n	8016b36 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8016b04:	b2ad      	uxth	r5, r5
 8016b06:	2700      	movs	r7, #0
 8016b08:	6801      	ldr	r1, [r0, #0]
 8016b0a:	9501      	str	r5, [sp, #4]
 8016b0c:	fa1f f588 	uxth.w	r5, r8
 8016b10:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8016b14:	9500      	str	r5, [sp, #0]
 8016b16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016b1a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016b1e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8016b22:	9602      	str	r6, [sp, #8]
 8016b24:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8016b26:	4621      	mov	r1, r4
 8016b28:	47a8      	blx	r5
 8016b2a:	b00a      	add	sp, #40	; 0x28
 8016b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b34:	e7e4      	b.n	8016b00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8016b36:	6803      	ldr	r3, [r0, #0]
 8016b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b3a:	4798      	blx	r3
 8016b3c:	4b38      	ldr	r3, [pc, #224]	; (8016c20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8016b3e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016b42:	f8b3 c000 	ldrh.w	ip, [r3]
 8016b46:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016b4a:	fb0c f505 	mul.w	r5, ip, r5
 8016b4e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8016b52:	fb0c 2303 	mla	r3, ip, r3, r2
 8016b56:	ebac 0c08 	sub.w	ip, ip, r8
 8016b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b5e:	ebae 0e08 	sub.w	lr, lr, r8
 8016b62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b66:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016b6a:	4418      	add	r0, r3
 8016b6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8016b70:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8016b74:	4405      	add	r5, r0
 8016b76:	42a8      	cmp	r0, r5
 8016b78:	d24a      	bcs.n	8016c10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016b7a:	eb00 0803 	add.w	r8, r0, r3
 8016b7e:	4540      	cmp	r0, r8
 8016b80:	d243      	bcs.n	8016c0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8016b82:	78e2      	ldrb	r2, [r4, #3]
 8016b84:	b15a      	cbz	r2, 8016b9e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8016b86:	2aff      	cmp	r2, #255	; 0xff
 8016b88:	f894 9000 	ldrb.w	r9, [r4]
 8016b8c:	d10a      	bne.n	8016ba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016b8e:	2eff      	cmp	r6, #255	; 0xff
 8016b90:	d108      	bne.n	8016ba4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016b92:	f880 9000 	strb.w	r9, [r0]
 8016b96:	7862      	ldrb	r2, [r4, #1]
 8016b98:	7042      	strb	r2, [r0, #1]
 8016b9a:	78a2      	ldrb	r2, [r4, #2]
 8016b9c:	7082      	strb	r2, [r0, #2]
 8016b9e:	3003      	adds	r0, #3
 8016ba0:	3404      	adds	r4, #4
 8016ba2:	e7ec      	b.n	8016b7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8016ba4:	4372      	muls	r2, r6
 8016ba6:	1c51      	adds	r1, r2, #1
 8016ba8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016bac:	1209      	asrs	r1, r1, #8
 8016bae:	fa1f fa81 	uxth.w	sl, r1
 8016bb2:	43c9      	mvns	r1, r1
 8016bb4:	fb19 f90a 	smulbb	r9, r9, sl
 8016bb8:	b2ca      	uxtb	r2, r1
 8016bba:	7801      	ldrb	r1, [r0, #0]
 8016bbc:	fb01 9902 	mla	r9, r1, r2, r9
 8016bc0:	fa1f f989 	uxth.w	r9, r9
 8016bc4:	f109 0101 	add.w	r1, r9, #1
 8016bc8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016bcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bd0:	f880 9000 	strb.w	r9, [r0]
 8016bd4:	f890 9001 	ldrb.w	r9, [r0, #1]
 8016bd8:	7861      	ldrb	r1, [r4, #1]
 8016bda:	fb19 f902 	smulbb	r9, r9, r2
 8016bde:	fb01 910a 	mla	r1, r1, sl, r9
 8016be2:	b289      	uxth	r1, r1
 8016be4:	f101 0901 	add.w	r9, r1, #1
 8016be8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8016bec:	1209      	asrs	r1, r1, #8
 8016bee:	7041      	strb	r1, [r0, #1]
 8016bf0:	7881      	ldrb	r1, [r0, #2]
 8016bf2:	f894 9002 	ldrb.w	r9, [r4, #2]
 8016bf6:	fb11 f202 	smulbb	r2, r1, r2
 8016bfa:	fb09 220a 	mla	r2, r9, sl, r2
 8016bfe:	b292      	uxth	r2, r2
 8016c00:	1c51      	adds	r1, r2, #1
 8016c02:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8016c06:	1212      	asrs	r2, r2, #8
 8016c08:	e7c8      	b.n	8016b9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8016c0a:	4460      	add	r0, ip
 8016c0c:	4474      	add	r4, lr
 8016c0e:	e7b2      	b.n	8016b76 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8016c10:	6838      	ldr	r0, [r7, #0]
 8016c12:	6803      	ldr	r3, [r0, #0]
 8016c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c16:	4798      	blx	r3
 8016c18:	e787      	b.n	8016b2a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8016c1a:	bf00      	nop
 8016c1c:	2400b980 	.word	0x2400b980
 8016c20:	2400b97a 	.word	0x2400b97a

08016c24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8016c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c28:	b085      	sub	sp, #20
 8016c2a:	4606      	mov	r6, r0
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	4691      	mov	r9, r2
 8016c30:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8016c34:	4698      	mov	r8, r3
 8016c36:	b31d      	cbz	r5, 8016c80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016c38:	4608      	mov	r0, r1
 8016c3a:	f7fd fa4f 	bl	80140dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c3e:	4607      	mov	r7, r0
 8016c40:	4620      	mov	r0, r4
 8016c42:	f7fd fa7f 	bl	8014144 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016c46:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016c50:	f8ad 800a 	strh.w	r8, [sp, #10]
 8016c54:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016c58:	f7fd fb78 	bl	801434c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016c5c:	280b      	cmp	r0, #11
 8016c5e:	d80f      	bhi.n	8016c80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016c60:	e8df f000 	tbb	[pc, r0]
 8016c64:	0e062920 	.word	0x0e062920
 8016c68:	0e0e0e0e 	.word	0x0e0e0e0e
 8016c6c:	110e0e0e 	.word	0x110e0e0e
 8016c70:	4620      	mov	r0, r4
 8016c72:	f7fd fae7 	bl	8014244 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016c76:	462b      	mov	r3, r5
 8016c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c7a:	a902      	add	r1, sp, #8
 8016c7c:	f7ff ff0a 	bl	8016a94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016c80:	b005      	add	sp, #20
 8016c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c86:	4620      	mov	r0, r4
 8016c88:	f7fd fadc 	bl	8014244 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016c8c:	4606      	mov	r6, r0
 8016c8e:	4620      	mov	r0, r4
 8016c90:	f7fd fb08 	bl	80142a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016c94:	9500      	str	r5, [sp, #0]
 8016c96:	4601      	mov	r1, r0
 8016c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c9a:	aa02      	add	r2, sp, #8
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	f7ff fdf3 	bl	8016888 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8016ca2:	e7ed      	b.n	8016c80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	f7fd facd 	bl	8014244 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016caa:	462b      	mov	r3, r5
 8016cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016cae:	a902      	add	r1, sp, #8
 8016cb0:	f7ff fdfc 	bl	80168ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016cb4:	e7e4      	b.n	8016c80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016cb6:	6833      	ldr	r3, [r6, #0]
 8016cb8:	4620      	mov	r0, r4
 8016cba:	68df      	ldr	r7, [r3, #12]
 8016cbc:	f7fd fac2 	bl	8014244 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4601      	mov	r1, r0
 8016cc4:	aa02      	add	r2, sp, #8
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	e9cd 5300 	strd	r5, r3, [sp]
 8016ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cce:	47b8      	blx	r7
 8016cd0:	e7d6      	b.n	8016c80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08016cd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8016cd2:	b4f0      	push	{r4, r5, r6, r7}
 8016cd4:	4616      	mov	r6, r2
 8016cd6:	461c      	mov	r4, r3
 8016cd8:	460d      	mov	r5, r1
 8016cda:	9a04      	ldr	r2, [sp, #16]
 8016cdc:	2e01      	cmp	r6, #1
 8016cde:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016ce2:	d00e      	beq.n	8016d02 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8016ce4:	d303      	bcc.n	8016cee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8016ce6:	2e02      	cmp	r6, #2
 8016ce8:	d006      	beq.n	8016cf8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8016cea:	bcf0      	pop	{r4, r5, r6, r7}
 8016cec:	4770      	bx	lr
 8016cee:	4621      	mov	r1, r4
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	bcf0      	pop	{r4, r5, r6, r7}
 8016cf4:	f7ff bdda 	b.w	80168ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	bcf0      	pop	{r4, r5, r6, r7}
 8016cfe:	f7ff bec9 	b.w	8016a94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016d02:	6805      	ldr	r5, [r0, #0]
 8016d04:	2600      	movs	r6, #0
 8016d06:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8016d0a:	68ed      	ldr	r5, [r5, #12]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	4622      	mov	r2, r4
 8016d10:	46ac      	mov	ip, r5
 8016d12:	bcf0      	pop	{r4, r5, r6, r7}
 8016d14:	4760      	bx	ip
	...

08016d18 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8016d18:	b160      	cbz	r0, 8016d34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8016d1a:	2903      	cmp	r1, #3
 8016d1c:	d818      	bhi.n	8016d50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8016d1e:	e8df f001 	tbb	[pc, r1]
 8016d22:	1902      	.short	0x1902
 8016d24:	1b06      	.short	0x1b06
 8016d26:	4b0e      	ldr	r3, [pc, #56]	; (8016d60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016d28:	8818      	ldrh	r0, [r3, #0]
 8016d2a:	4240      	negs	r0, r0
 8016d2c:	4770      	bx	lr
 8016d2e:	4b0c      	ldr	r3, [pc, #48]	; (8016d60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8016d30:	8818      	ldrh	r0, [r3, #0]
 8016d32:	4770      	bx	lr
 8016d34:	2903      	cmp	r1, #3
 8016d36:	d80b      	bhi.n	8016d50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8016d38:	a301      	add	r3, pc, #4	; (adr r3, 8016d40 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8016d3a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8016d3e:	bf00      	nop
 8016d40:	08016d55 	.word	0x08016d55
 8016d44:	08016d2f 	.word	0x08016d2f
 8016d48:	08016d59 	.word	0x08016d59
 8016d4c:	08016d27 	.word	0x08016d27
 8016d50:	2000      	movs	r0, #0
 8016d52:	4770      	bx	lr
 8016d54:	2001      	movs	r0, #1
 8016d56:	4770      	bx	lr
 8016d58:	f04f 30ff 	mov.w	r0, #4294967295
 8016d5c:	4770      	bx	lr
 8016d5e:	bf00      	nop
 8016d60:	2400b97a 	.word	0x2400b97a

08016d64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8016d64:	b160      	cbz	r0, 8016d80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8016d66:	2903      	cmp	r1, #3
 8016d68:	d818      	bhi.n	8016d9c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016d6a:	e8df f001 	tbb	[pc, r1]
 8016d6e:	0219      	.short	0x0219
 8016d70:	051b      	.short	0x051b
 8016d72:	4b0e      	ldr	r3, [pc, #56]	; (8016dac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016d74:	8818      	ldrh	r0, [r3, #0]
 8016d76:	4770      	bx	lr
 8016d78:	4b0c      	ldr	r3, [pc, #48]	; (8016dac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016d7a:	8818      	ldrh	r0, [r3, #0]
 8016d7c:	4240      	negs	r0, r0
 8016d7e:	4770      	bx	lr
 8016d80:	2903      	cmp	r1, #3
 8016d82:	d80b      	bhi.n	8016d9c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016d84:	a301      	add	r3, pc, #4	; (adr r3, 8016d8c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8016d86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8016d8a:	bf00      	nop
 8016d8c:	08016d73 	.word	0x08016d73
 8016d90:	08016da5 	.word	0x08016da5
 8016d94:	08016d79 	.word	0x08016d79
 8016d98:	08016da1 	.word	0x08016da1
 8016d9c:	2000      	movs	r0, #0
 8016d9e:	4770      	bx	lr
 8016da0:	2001      	movs	r0, #1
 8016da2:	4770      	bx	lr
 8016da4:	f04f 30ff 	mov.w	r0, #4294967295
 8016da8:	4770      	bx	lr
 8016daa:	bf00      	nop
 8016dac:	2400b97a 	.word	0x2400b97a

08016db0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db4:	b097      	sub	sp, #92	; 0x5c
 8016db6:	910b      	str	r1, [sp, #44]	; 0x2c
 8016db8:	a912      	add	r1, sp, #72	; 0x48
 8016dba:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8016dbe:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8016dc2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8016dc6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8016dca:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8016dce:	e881 000c 	stmia.w	r1, {r2, r3}
 8016dd2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8016dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8016dd8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016ddc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8016de0:	9311      	str	r3, [sp, #68]	; 0x44
 8016de2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8016de6:	798d      	ldrb	r5, [r1, #6]
 8016de8:	930c      	str	r3, [sp, #48]	; 0x30
 8016dea:	7b4b      	ldrb	r3, [r1, #13]
 8016dec:	0158      	lsls	r0, r3, #5
 8016dee:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016df2:	4328      	orrs	r0, r5
 8016df4:	9009      	str	r0, [sp, #36]	; 0x24
 8016df6:	f000 817c 	beq.w	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016dfa:	011b      	lsls	r3, r3, #4
 8016dfc:	79c8      	ldrb	r0, [r1, #7]
 8016dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e02:	4303      	orrs	r3, r0
 8016e04:	930e      	str	r3, [sp, #56]	; 0x38
 8016e06:	f000 8174 	beq.w	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016e0a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	2f00      	cmp	r7, #0
 8016e12:	f000 8116 	beq.w	8017042 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8016e16:	1aff      	subs	r7, r7, r3
 8016e18:	b2bf      	uxth	r7, r7
 8016e1a:	043b      	lsls	r3, r7, #16
 8016e1c:	d502      	bpl.n	8016e24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016e1e:	1bf6      	subs	r6, r6, r7
 8016e20:	2700      	movs	r7, #0
 8016e22:	b236      	sxth	r6, r6
 8016e24:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016e28:	a812      	add	r0, sp, #72	; 0x48
 8016e2a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8016e2e:	428e      	cmp	r6, r1
 8016e30:	b28b      	uxth	r3, r1
 8016e32:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8016e36:	bfbf      	itttt	lt
 8016e38:	18ff      	addlt	r7, r7, r3
 8016e3a:	1bbe      	sublt	r6, r7, r6
 8016e3c:	b2b7      	uxthlt	r7, r6
 8016e3e:	460e      	movlt	r6, r1
 8016e40:	8891      	ldrh	r1, [r2, #4]
 8016e42:	440b      	add	r3, r1
 8016e44:	4631      	mov	r1, r6
 8016e46:	b21b      	sxth	r3, r3
 8016e48:	9310      	str	r3, [sp, #64]	; 0x40
 8016e4a:	88d3      	ldrh	r3, [r2, #6]
 8016e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e4e:	449a      	add	sl, r3
 8016e50:	fa0f f38a 	sxth.w	r3, sl
 8016e54:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8016e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e5a:	4bb5      	ldr	r3, [pc, #724]	; (8017130 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8016e5c:	f893 b000 	ldrb.w	fp, [r3]
 8016e60:	f10b 3cff 	add.w	ip, fp, #4294967295
 8016e64:	f1dc 0300 	rsbs	r3, ip, #0
 8016e68:	eb43 030c 	adc.w	r3, r3, ip
 8016e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8016e6e:	464b      	mov	r3, r9
 8016e70:	f7fa f960 	bl	8011134 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016e74:	4631      	mov	r1, r6
 8016e76:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8016e7a:	464b      	mov	r3, r9
 8016e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e7e:	a812      	add	r0, sp, #72	; 0x48
 8016e80:	f7fa f975 	bl	801116e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016e84:	a916      	add	r1, sp, #88	; 0x58
 8016e86:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8016e8a:	a815      	add	r0, sp, #84	; 0x54
 8016e8c:	f7fa fa96 	bl	80113bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8016e90:	f1b9 0f00 	cmp.w	r9, #0
 8016e94:	f040 80d8 	bne.w	8017048 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8016e98:	f1bb 0f01 	cmp.w	fp, #1
 8016e9c:	f040 80dc 	bne.w	8017058 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8016ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ea2:	b153      	cbz	r3, 8016eba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016ea4:	2508      	movs	r5, #8
 8016ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ea8:	fb95 f3f8 	sdiv	r3, r5, r8
 8016eac:	1e5d      	subs	r5, r3, #1
 8016eae:	4415      	add	r5, r2
 8016eb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8016eb4:	fb15 f503 	smulbb	r5, r5, r3
 8016eb8:	b2ad      	uxth	r5, r5
 8016eba:	b907      	cbnz	r7, 8016ebe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8016ebc:	b16c      	cbz	r4, 8016eda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8016ebe:	fb04 7305 	mla	r3, r4, r5, r7
 8016ec2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016ec4:	ebaa 0a04 	sub.w	sl, sl, r4
 8016ec8:	fb08 f303 	mul.w	r3, r8, r3
 8016ecc:	fa1f fa8a 	uxth.w	sl, sl
 8016ed0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016ed4:	f003 0407 	and.w	r4, r3, #7
 8016ed8:	9226      	str	r2, [sp, #152]	; 0x98
 8016eda:	4649      	mov	r1, r9
 8016edc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016ede:	f7ff ff1b 	bl	8016d18 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8016ee2:	4683      	mov	fp, r0
 8016ee4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016ee6:	f7ff ff3d 	bl	8016d64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eee:	4681      	mov	r9, r0
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	459a      	cmp	sl, r3
 8016ef4:	bfa8      	it	ge
 8016ef6:	469a      	movge	sl, r3
 8016ef8:	f1ba 0f00 	cmp.w	sl, #0
 8016efc:	f340 80f9 	ble.w	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016f00:	1bf6      	subs	r6, r6, r7
 8016f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f04:	1b9e      	subs	r6, r3, r6
 8016f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f08:	429e      	cmp	r6, r3
 8016f0a:	bfd4      	ite	le
 8016f0c:	ebc7 0706 	rsble	r7, r7, r6
 8016f10:	ebc7 0703 	rsbgt	r7, r7, r3
 8016f14:	2f00      	cmp	r7, #0
 8016f16:	f340 80ec 	ble.w	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016f1a:	1bed      	subs	r5, r5, r7
 8016f1c:	fb08 f305 	mul.w	r3, r8, r5
 8016f20:	930d      	str	r3, [sp, #52]	; 0x34
 8016f22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f24:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8016f28:	930e      	str	r3, [sp, #56]	; 0x38
 8016f2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	9310      	str	r3, [sp, #64]	; 0x40
 8016f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	f040 80de 	bne.w	80170fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8016f40:	4b7c      	ldr	r3, [pc, #496]	; (8017134 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8016f42:	6818      	ldr	r0, [r3, #0]
 8016f44:	6803      	ldr	r3, [r0, #0]
 8016f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f48:	4798      	blx	r3
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	4a7a      	ldr	r2, [pc, #488]	; (8017138 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8016f4e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8016f52:	fb07 9b1b 	mls	fp, r7, fp, r9
 8016f56:	fa03 f308 	lsl.w	r3, r3, r8
 8016f5a:	8811      	ldrh	r1, [r2, #0]
 8016f5c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016f60:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8016f64:	3b01      	subs	r3, #1
 8016f66:	fb06 bb07 	mla	fp, r6, r7, fp
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f6e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016f72:	fb01 2303 	mla	r3, r1, r3, r2
 8016f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f7a:	18c3      	adds	r3, r0, r3
 8016f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8016f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016f80:	781a      	ldrb	r2, [r3, #0]
 8016f82:	4122      	asrs	r2, r4
 8016f84:	b2d2      	uxtb	r2, r2
 8016f86:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016f8a:	f0c0 80d7 	bcc.w	801713c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8016f8e:	46be      	mov	lr, r7
 8016f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016f92:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016f96:	f0c0 80ba 	bcc.w	801710e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8016f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f9c:	4013      	ands	r3, r2
 8016f9e:	d041      	beq.n	8017024 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8016fa0:	20ff      	movs	r0, #255	; 0xff
 8016fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016fa4:	fb90 f5f5 	sdiv	r5, r0, r5
 8016fa8:	436b      	muls	r3, r5
 8016faa:	2bfe      	cmp	r3, #254	; 0xfe
 8016fac:	dd03      	ble.n	8016fb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8016fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016fb0:	4285      	cmp	r5, r0
 8016fb2:	f000 80a5 	beq.w	8017100 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8016fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016fba:	fb15 f303 	smulbb	r3, r5, r3
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	1c5d      	adds	r5, r3, #1
 8016fc2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016fc6:	780d      	ldrb	r5, [r1, #0]
 8016fc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016fcc:	fa1f fc83 	uxth.w	ip, r3
 8016fd0:	43db      	mvns	r3, r3
 8016fd2:	fb10 f90c 	smulbb	r9, r0, ip
 8016fd6:	b2db      	uxtb	r3, r3
 8016fd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016fda:	fb05 9503 	mla	r5, r5, r3, r9
 8016fde:	b2ad      	uxth	r5, r5
 8016fe0:	f105 0901 	add.w	r9, r5, #1
 8016fe4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016fe8:	fb10 f90c 	smulbb	r9, r0, ip
 8016fec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016fee:	122d      	asrs	r5, r5, #8
 8016ff0:	fb10 fc0c 	smulbb	ip, r0, ip
 8016ff4:	700d      	strb	r5, [r1, #0]
 8016ff6:	784d      	ldrb	r5, [r1, #1]
 8016ff8:	fb05 9503 	mla	r5, r5, r3, r9
 8016ffc:	b2ad      	uxth	r5, r5
 8016ffe:	f105 0901 	add.w	r9, r5, #1
 8017002:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017006:	122d      	asrs	r5, r5, #8
 8017008:	704d      	strb	r5, [r1, #1]
 801700a:	788d      	ldrb	r5, [r1, #2]
 801700c:	fb05 cc03 	mla	ip, r5, r3, ip
 8017010:	fa1f fc8c 	uxth.w	ip, ip
 8017014:	f10c 0301 	add.w	r3, ip, #1
 8017018:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801701c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017020:	f881 c002 	strb.w	ip, [r1, #2]
 8017024:	4444      	add	r4, r8
 8017026:	4431      	add	r1, r6
 8017028:	b2a4      	uxth	r4, r4
 801702a:	2c07      	cmp	r4, #7
 801702c:	bf89      	itett	hi
 801702e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8017030:	fa42 f208 	asrls.w	r2, r2, r8
 8017034:	2400      	movhi	r4, #0
 8017036:	785a      	ldrbhi	r2, [r3, #1]
 8017038:	bf8a      	itet	hi
 801703a:	3301      	addhi	r3, #1
 801703c:	b2d2      	uxtbls	r2, r2
 801703e:	9326      	strhi	r3, [sp, #152]	; 0x98
 8017040:	e7a7      	b.n	8016f92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8017042:	441e      	add	r6, r3
 8017044:	b236      	sxth	r6, r6
 8017046:	e6ed      	b.n	8016e24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017048:	f1b9 0f01 	cmp.w	r9, #1
 801704c:	f47f af28 	bne.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017050:	f1bb 0f01 	cmp.w	fp, #1
 8017054:	f47f af24 	bne.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017058:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8017134 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801705c:	f8db 0000 	ldr.w	r0, [fp]
 8017060:	6803      	ldr	r3, [r0, #0]
 8017062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017064:	4798      	blx	r3
 8017066:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801706a:	465a      	mov	r2, fp
 801706c:	d006      	beq.n	801707c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801706e:	f1b8 0f04 	cmp.w	r8, #4
 8017072:	d141      	bne.n	80170f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8017074:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017076:	3300      	adds	r3, #0
 8017078:	bf18      	it	ne
 801707a:	2301      	movne	r3, #1
 801707c:	0580      	lsls	r0, r0, #22
 801707e:	d566      	bpl.n	801714e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017080:	f1b8 0f08 	cmp.w	r8, #8
 8017084:	d163      	bne.n	801714e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017086:	2b00      	cmp	r3, #0
 8017088:	bf0c      	ite	eq
 801708a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801708e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8017092:	2f00      	cmp	r7, #0
 8017094:	f47f af04 	bne.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017098:	2c00      	cmp	r4, #0
 801709a:	f47f af01 	bne.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80170a2:	18f3      	adds	r3, r6, r3
 80170a4:	4283      	cmp	r3, r0
 80170a6:	f73f aefb 	bgt.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170ae:	4403      	add	r3, r0
 80170b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80170b2:	4283      	cmp	r3, r0
 80170b4:	f73f aef4 	bgt.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80170b8:	f1b8 0f08 	cmp.w	r8, #8
 80170bc:	6810      	ldr	r0, [r2, #0]
 80170be:	f04f 0600 	mov.w	r6, #0
 80170c2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80170c6:	bf18      	it	ne
 80170c8:	3501      	addne	r5, #1
 80170ca:	6804      	ldr	r4, [r0, #0]
 80170cc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80170d0:	bf18      	it	ne
 80170d2:	f025 0501 	bicne.w	r5, r5, #1
 80170d6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80170da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170dc:	bf18      	it	ne
 80170de:	b2ad      	uxthne	r5, r5
 80170e0:	9104      	str	r1, [sp, #16]
 80170e2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80170e4:	e9cd 5a00 	strd	r5, sl, [sp]
 80170e8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80170ec:	9926      	ldr	r1, [sp, #152]	; 0x98
 80170ee:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80170f0:	47a0      	blx	r4
 80170f2:	b017      	add	sp, #92	; 0x5c
 80170f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f8:	2300      	movs	r3, #0
 80170fa:	e7bf      	b.n	801707c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80170fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80170fe:	e724      	b.n	8016f4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8017100:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017102:	700b      	strb	r3, [r1, #0]
 8017104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017106:	704b      	strb	r3, [r1, #1]
 8017108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801710a:	708b      	strb	r3, [r1, #2]
 801710c:	e78a      	b.n	8017024 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801710e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017110:	b153      	cbz	r3, 8017128 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8017112:	441c      	add	r4, r3
 8017114:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017116:	b2a4      	uxth	r4, r4
 8017118:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801711c:	f004 0407 	and.w	r4, r4, #7
 8017120:	781a      	ldrb	r2, [r3, #0]
 8017122:	9326      	str	r3, [sp, #152]	; 0x98
 8017124:	4122      	asrs	r2, r4
 8017126:	b2d2      	uxtb	r2, r2
 8017128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801712a:	445b      	add	r3, fp
 801712c:	9309      	str	r3, [sp, #36]	; 0x24
 801712e:	e72a      	b.n	8016f86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8017130:	2400b978 	.word	0x2400b978
 8017134:	2400b980 	.word	0x2400b980
 8017138:	2400b97a 	.word	0x2400b97a
 801713c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801713e:	2b00      	cmp	r3, #0
 8017140:	d1d7      	bne.n	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017142:	4b06      	ldr	r3, [pc, #24]	; (801715c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8017144:	6818      	ldr	r0, [r3, #0]
 8017146:	6803      	ldr	r3, [r0, #0]
 8017148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801714a:	4798      	blx	r3
 801714c:	e7d1      	b.n	80170f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801714e:	2b00      	cmp	r3, #0
 8017150:	f43f aea6 	beq.w	8016ea0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017158:	e79b      	b.n	8017092 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801715a:	bf00      	nop
 801715c:	2400b980 	.word	0x2400b980

08017160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8017160:	b538      	push	{r3, r4, r5, lr}
 8017162:	4c15      	ldr	r4, [pc, #84]	; (80171b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8017164:	4605      	mov	r5, r0
 8017166:	7823      	ldrb	r3, [r4, #0]
 8017168:	f3bf 8f5b 	dmb	ish
 801716c:	07da      	lsls	r2, r3, #31
 801716e:	d40b      	bmi.n	8017188 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8017170:	4620      	mov	r0, r4
 8017172:	f005 f890 	bl	801c296 <__cxa_guard_acquire>
 8017176:	b138      	cbz	r0, 8017188 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8017178:	4620      	mov	r0, r4
 801717a:	f005 f898 	bl	801c2ae <__cxa_guard_release>
 801717e:	4a0f      	ldr	r2, [pc, #60]	; (80171bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8017180:	490f      	ldr	r1, [pc, #60]	; (80171c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8017182:	4810      	ldr	r0, [pc, #64]	; (80171c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8017184:	f005 f880 	bl	801c288 <__aeabi_atexit>
 8017188:	4c0f      	ldr	r4, [pc, #60]	; (80171c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801718a:	7823      	ldrb	r3, [r4, #0]
 801718c:	f3bf 8f5b 	dmb	ish
 8017190:	07db      	lsls	r3, r3, #31
 8017192:	d40b      	bmi.n	80171ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8017194:	4620      	mov	r0, r4
 8017196:	f005 f87e 	bl	801c296 <__cxa_guard_acquire>
 801719a:	b138      	cbz	r0, 80171ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801719c:	4620      	mov	r0, r4
 801719e:	f005 f886 	bl	801c2ae <__cxa_guard_release>
 80171a2:	4a06      	ldr	r2, [pc, #24]	; (80171bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80171a4:	4909      	ldr	r1, [pc, #36]	; (80171cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80171a6:	480a      	ldr	r0, [pc, #40]	; (80171d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80171a8:	f005 f86e 	bl	801c288 <__aeabi_atexit>
 80171ac:	4b05      	ldr	r3, [pc, #20]	; (80171c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80171ae:	612b      	str	r3, [r5, #16]
 80171b0:	4b07      	ldr	r3, [pc, #28]	; (80171d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80171b2:	616b      	str	r3, [r5, #20]
 80171b4:	bd38      	pop	{r3, r4, r5, pc}
 80171b6:	bf00      	nop
 80171b8:	2400ba4c 	.word	0x2400ba4c
 80171bc:	24000000 	.word	0x24000000
 80171c0:	08015d25 	.word	0x08015d25
 80171c4:	24000098 	.word	0x24000098
 80171c8:	2400ba50 	.word	0x2400ba50
 80171cc:	08015d23 	.word	0x08015d23
 80171d0:	2400009c 	.word	0x2400009c

080171d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	4c15      	ldr	r4, [pc, #84]	; (801722c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80171d8:	4605      	mov	r5, r0
 80171da:	7823      	ldrb	r3, [r4, #0]
 80171dc:	f3bf 8f5b 	dmb	ish
 80171e0:	07da      	lsls	r2, r3, #31
 80171e2:	d40b      	bmi.n	80171fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80171e4:	4620      	mov	r0, r4
 80171e6:	f005 f856 	bl	801c296 <__cxa_guard_acquire>
 80171ea:	b138      	cbz	r0, 80171fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80171ec:	4620      	mov	r0, r4
 80171ee:	f005 f85e 	bl	801c2ae <__cxa_guard_release>
 80171f2:	4a0f      	ldr	r2, [pc, #60]	; (8017230 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80171f4:	490f      	ldr	r1, [pc, #60]	; (8017234 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80171f6:	4810      	ldr	r0, [pc, #64]	; (8017238 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80171f8:	f005 f846 	bl	801c288 <__aeabi_atexit>
 80171fc:	4c0f      	ldr	r4, [pc, #60]	; (801723c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80171fe:	7823      	ldrb	r3, [r4, #0]
 8017200:	f3bf 8f5b 	dmb	ish
 8017204:	07db      	lsls	r3, r3, #31
 8017206:	d40b      	bmi.n	8017220 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017208:	4620      	mov	r0, r4
 801720a:	f005 f844 	bl	801c296 <__cxa_guard_acquire>
 801720e:	b138      	cbz	r0, 8017220 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017210:	4620      	mov	r0, r4
 8017212:	f005 f84c 	bl	801c2ae <__cxa_guard_release>
 8017216:	4a06      	ldr	r2, [pc, #24]	; (8017230 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017218:	4909      	ldr	r1, [pc, #36]	; (8017240 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801721a:	480a      	ldr	r0, [pc, #40]	; (8017244 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801721c:	f005 f834 	bl	801c288 <__aeabi_atexit>
 8017220:	4b05      	ldr	r3, [pc, #20]	; (8017238 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017222:	60ab      	str	r3, [r5, #8]
 8017224:	4b07      	ldr	r3, [pc, #28]	; (8017244 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8017226:	60eb      	str	r3, [r5, #12]
 8017228:	bd38      	pop	{r3, r4, r5, pc}
 801722a:	bf00      	nop
 801722c:	2400ba2c 	.word	0x2400ba2c
 8017230:	24000000 	.word	0x24000000
 8017234:	08015d29 	.word	0x08015d29
 8017238:	24000078 	.word	0x24000078
 801723c:	2400ba30 	.word	0x2400ba30
 8017240:	08015d27 	.word	0x08015d27
 8017244:	2400007c 	.word	0x2400007c

08017248 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8017248:	b510      	push	{r4, lr}
 801724a:	4604      	mov	r4, r0
 801724c:	f7ff ff88 	bl	8017160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8017250:	4620      	mov	r0, r4
 8017252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017256:	f7ff bfbd 	b.w	80171d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801725c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801725c:	b538      	push	{r3, r4, r5, lr}
 801725e:	4c15      	ldr	r4, [pc, #84]	; (80172b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8017260:	4605      	mov	r5, r0
 8017262:	7823      	ldrb	r3, [r4, #0]
 8017264:	f3bf 8f5b 	dmb	ish
 8017268:	07da      	lsls	r2, r3, #31
 801726a:	d40b      	bmi.n	8017284 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801726c:	4620      	mov	r0, r4
 801726e:	f005 f812 	bl	801c296 <__cxa_guard_acquire>
 8017272:	b138      	cbz	r0, 8017284 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8017274:	4620      	mov	r0, r4
 8017276:	f005 f81a 	bl	801c2ae <__cxa_guard_release>
 801727a:	4a0f      	ldr	r2, [pc, #60]	; (80172b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801727c:	490f      	ldr	r1, [pc, #60]	; (80172bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801727e:	4810      	ldr	r0, [pc, #64]	; (80172c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8017280:	f005 f802 	bl	801c288 <__aeabi_atexit>
 8017284:	4c0f      	ldr	r4, [pc, #60]	; (80172c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8017286:	7823      	ldrb	r3, [r4, #0]
 8017288:	f3bf 8f5b 	dmb	ish
 801728c:	07db      	lsls	r3, r3, #31
 801728e:	d40b      	bmi.n	80172a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8017290:	4620      	mov	r0, r4
 8017292:	f005 f800 	bl	801c296 <__cxa_guard_acquire>
 8017296:	b138      	cbz	r0, 80172a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8017298:	4620      	mov	r0, r4
 801729a:	f005 f808 	bl	801c2ae <__cxa_guard_release>
 801729e:	4a06      	ldr	r2, [pc, #24]	; (80172b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80172a0:	4909      	ldr	r1, [pc, #36]	; (80172c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80172a2:	480a      	ldr	r0, [pc, #40]	; (80172cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80172a4:	f004 fff0 	bl	801c288 <__aeabi_atexit>
 80172a8:	4b05      	ldr	r3, [pc, #20]	; (80172c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80172aa:	622b      	str	r3, [r5, #32]
 80172ac:	4b07      	ldr	r3, [pc, #28]	; (80172cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80172ae:	626b      	str	r3, [r5, #36]	; 0x24
 80172b0:	bd38      	pop	{r3, r4, r5, pc}
 80172b2:	bf00      	nop
 80172b4:	2400ba54 	.word	0x2400ba54
 80172b8:	24000000 	.word	0x24000000
 80172bc:	08015d1d 	.word	0x08015d1d
 80172c0:	240000a0 	.word	0x240000a0
 80172c4:	2400ba58 	.word	0x2400ba58
 80172c8:	08015d1b 	.word	0x08015d1b
 80172cc:	240000a4 	.word	0x240000a4

080172d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80172d0:	b538      	push	{r3, r4, r5, lr}
 80172d2:	4c15      	ldr	r4, [pc, #84]	; (8017328 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80172d4:	4605      	mov	r5, r0
 80172d6:	7823      	ldrb	r3, [r4, #0]
 80172d8:	f3bf 8f5b 	dmb	ish
 80172dc:	07da      	lsls	r2, r3, #31
 80172de:	d40b      	bmi.n	80172f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80172e0:	4620      	mov	r0, r4
 80172e2:	f004 ffd8 	bl	801c296 <__cxa_guard_acquire>
 80172e6:	b138      	cbz	r0, 80172f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80172e8:	4620      	mov	r0, r4
 80172ea:	f004 ffe0 	bl	801c2ae <__cxa_guard_release>
 80172ee:	4a0f      	ldr	r2, [pc, #60]	; (801732c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80172f0:	490f      	ldr	r1, [pc, #60]	; (8017330 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80172f2:	4810      	ldr	r0, [pc, #64]	; (8017334 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80172f4:	f004 ffc8 	bl	801c288 <__aeabi_atexit>
 80172f8:	4c0f      	ldr	r4, [pc, #60]	; (8017338 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80172fa:	7823      	ldrb	r3, [r4, #0]
 80172fc:	f3bf 8f5b 	dmb	ish
 8017300:	07db      	lsls	r3, r3, #31
 8017302:	d40b      	bmi.n	801731c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017304:	4620      	mov	r0, r4
 8017306:	f004 ffc6 	bl	801c296 <__cxa_guard_acquire>
 801730a:	b138      	cbz	r0, 801731c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801730c:	4620      	mov	r0, r4
 801730e:	f004 ffce 	bl	801c2ae <__cxa_guard_release>
 8017312:	4a06      	ldr	r2, [pc, #24]	; (801732c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017314:	4909      	ldr	r1, [pc, #36]	; (801733c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8017316:	480a      	ldr	r0, [pc, #40]	; (8017340 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017318:	f004 ffb6 	bl	801c288 <__aeabi_atexit>
 801731c:	4b05      	ldr	r3, [pc, #20]	; (8017334 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801731e:	61ab      	str	r3, [r5, #24]
 8017320:	4b07      	ldr	r3, [pc, #28]	; (8017340 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017322:	61eb      	str	r3, [r5, #28]
 8017324:	bd38      	pop	{r3, r4, r5, pc}
 8017326:	bf00      	nop
 8017328:	2400ba34 	.word	0x2400ba34
 801732c:	24000000 	.word	0x24000000
 8017330:	08015d21 	.word	0x08015d21
 8017334:	24000080 	.word	0x24000080
 8017338:	2400ba38 	.word	0x2400ba38
 801733c:	08015d1f 	.word	0x08015d1f
 8017340:	24000084 	.word	0x24000084

08017344 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8017344:	b510      	push	{r4, lr}
 8017346:	4604      	mov	r4, r0
 8017348:	f7ff ff88 	bl	801725c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801734c:	4620      	mov	r0, r4
 801734e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017352:	f7ff bfbd 	b.w	80172d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08017358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8017358:	b538      	push	{r3, r4, r5, lr}
 801735a:	4c15      	ldr	r4, [pc, #84]	; (80173b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801735c:	4605      	mov	r5, r0
 801735e:	7823      	ldrb	r3, [r4, #0]
 8017360:	f3bf 8f5b 	dmb	ish
 8017364:	07da      	lsls	r2, r3, #31
 8017366:	d40b      	bmi.n	8017380 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8017368:	4620      	mov	r0, r4
 801736a:	f004 ff94 	bl	801c296 <__cxa_guard_acquire>
 801736e:	b138      	cbz	r0, 8017380 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8017370:	4620      	mov	r0, r4
 8017372:	f004 ff9c 	bl	801c2ae <__cxa_guard_release>
 8017376:	4a0f      	ldr	r2, [pc, #60]	; (80173b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8017378:	490f      	ldr	r1, [pc, #60]	; (80173b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801737a:	4810      	ldr	r0, [pc, #64]	; (80173bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801737c:	f004 ff84 	bl	801c288 <__aeabi_atexit>
 8017380:	4c0f      	ldr	r4, [pc, #60]	; (80173c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8017382:	7823      	ldrb	r3, [r4, #0]
 8017384:	f3bf 8f5b 	dmb	ish
 8017388:	07db      	lsls	r3, r3, #31
 801738a:	d40b      	bmi.n	80173a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801738c:	4620      	mov	r0, r4
 801738e:	f004 ff82 	bl	801c296 <__cxa_guard_acquire>
 8017392:	b138      	cbz	r0, 80173a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8017394:	4620      	mov	r0, r4
 8017396:	f004 ff8a 	bl	801c2ae <__cxa_guard_release>
 801739a:	4a06      	ldr	r2, [pc, #24]	; (80173b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801739c:	4909      	ldr	r1, [pc, #36]	; (80173c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801739e:	480a      	ldr	r0, [pc, #40]	; (80173c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80173a0:	f004 ff72 	bl	801c288 <__aeabi_atexit>
 80173a4:	4b05      	ldr	r3, [pc, #20]	; (80173bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80173a6:	632b      	str	r3, [r5, #48]	; 0x30
 80173a8:	4b07      	ldr	r3, [pc, #28]	; (80173c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80173aa:	636b      	str	r3, [r5, #52]	; 0x34
 80173ac:	bd38      	pop	{r3, r4, r5, pc}
 80173ae:	bf00      	nop
 80173b0:	2400ba3c 	.word	0x2400ba3c
 80173b4:	24000000 	.word	0x24000000
 80173b8:	08015d15 	.word	0x08015d15
 80173bc:	24000088 	.word	0x24000088
 80173c0:	2400ba40 	.word	0x2400ba40
 80173c4:	08015d13 	.word	0x08015d13
 80173c8:	2400008c 	.word	0x2400008c

080173cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4c15      	ldr	r4, [pc, #84]	; (8017424 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80173d0:	4605      	mov	r5, r0
 80173d2:	7823      	ldrb	r3, [r4, #0]
 80173d4:	f3bf 8f5b 	dmb	ish
 80173d8:	07da      	lsls	r2, r3, #31
 80173da:	d40b      	bmi.n	80173f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80173dc:	4620      	mov	r0, r4
 80173de:	f004 ff5a 	bl	801c296 <__cxa_guard_acquire>
 80173e2:	b138      	cbz	r0, 80173f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80173e4:	4620      	mov	r0, r4
 80173e6:	f004 ff62 	bl	801c2ae <__cxa_guard_release>
 80173ea:	4a0f      	ldr	r2, [pc, #60]	; (8017428 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80173ec:	490f      	ldr	r1, [pc, #60]	; (801742c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80173ee:	4810      	ldr	r0, [pc, #64]	; (8017430 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80173f0:	f004 ff4a 	bl	801c288 <__aeabi_atexit>
 80173f4:	4c0f      	ldr	r4, [pc, #60]	; (8017434 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80173f6:	7823      	ldrb	r3, [r4, #0]
 80173f8:	f3bf 8f5b 	dmb	ish
 80173fc:	07db      	lsls	r3, r3, #31
 80173fe:	d40b      	bmi.n	8017418 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8017400:	4620      	mov	r0, r4
 8017402:	f004 ff48 	bl	801c296 <__cxa_guard_acquire>
 8017406:	b138      	cbz	r0, 8017418 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8017408:	4620      	mov	r0, r4
 801740a:	f004 ff50 	bl	801c2ae <__cxa_guard_release>
 801740e:	4a06      	ldr	r2, [pc, #24]	; (8017428 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8017410:	4909      	ldr	r1, [pc, #36]	; (8017438 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8017412:	480a      	ldr	r0, [pc, #40]	; (801743c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8017414:	f004 ff38 	bl	801c288 <__aeabi_atexit>
 8017418:	4b05      	ldr	r3, [pc, #20]	; (8017430 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801741a:	62ab      	str	r3, [r5, #40]	; 0x28
 801741c:	4b07      	ldr	r3, [pc, #28]	; (801743c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801741e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017420:	bd38      	pop	{r3, r4, r5, pc}
 8017422:	bf00      	nop
 8017424:	2400ba14 	.word	0x2400ba14
 8017428:	24000000 	.word	0x24000000
 801742c:	08015d19 	.word	0x08015d19
 8017430:	24000060 	.word	0x24000060
 8017434:	2400ba18 	.word	0x2400ba18
 8017438:	08015d17 	.word	0x08015d17
 801743c:	24000064 	.word	0x24000064

08017440 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8017440:	b510      	push	{r4, lr}
 8017442:	4604      	mov	r4, r0
 8017444:	f7ff ff88 	bl	8017358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8017448:	4620      	mov	r0, r4
 801744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801744e:	f7ff bfbd 	b.w	80173cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08017454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8017454:	b538      	push	{r3, r4, r5, lr}
 8017456:	4c15      	ldr	r4, [pc, #84]	; (80174ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8017458:	4605      	mov	r5, r0
 801745a:	7823      	ldrb	r3, [r4, #0]
 801745c:	f3bf 8f5b 	dmb	ish
 8017460:	07da      	lsls	r2, r3, #31
 8017462:	d40b      	bmi.n	801747c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8017464:	4620      	mov	r0, r4
 8017466:	f004 ff16 	bl	801c296 <__cxa_guard_acquire>
 801746a:	b138      	cbz	r0, 801747c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801746c:	4620      	mov	r0, r4
 801746e:	f004 ff1e 	bl	801c2ae <__cxa_guard_release>
 8017472:	4a0f      	ldr	r2, [pc, #60]	; (80174b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8017474:	490f      	ldr	r1, [pc, #60]	; (80174b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8017476:	4810      	ldr	r0, [pc, #64]	; (80174b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8017478:	f004 ff06 	bl	801c288 <__aeabi_atexit>
 801747c:	4c0f      	ldr	r4, [pc, #60]	; (80174bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801747e:	7823      	ldrb	r3, [r4, #0]
 8017480:	f3bf 8f5b 	dmb	ish
 8017484:	07db      	lsls	r3, r3, #31
 8017486:	d40b      	bmi.n	80174a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017488:	4620      	mov	r0, r4
 801748a:	f004 ff04 	bl	801c296 <__cxa_guard_acquire>
 801748e:	b138      	cbz	r0, 80174a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017490:	4620      	mov	r0, r4
 8017492:	f004 ff0c 	bl	801c2ae <__cxa_guard_release>
 8017496:	4a06      	ldr	r2, [pc, #24]	; (80174b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8017498:	4909      	ldr	r1, [pc, #36]	; (80174c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801749a:	480a      	ldr	r0, [pc, #40]	; (80174c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801749c:	f004 fef4 	bl	801c288 <__aeabi_atexit>
 80174a0:	4b05      	ldr	r3, [pc, #20]	; (80174b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80174a2:	642b      	str	r3, [r5, #64]	; 0x40
 80174a4:	4b07      	ldr	r3, [pc, #28]	; (80174c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80174a6:	646b      	str	r3, [r5, #68]	; 0x44
 80174a8:	bd38      	pop	{r3, r4, r5, pc}
 80174aa:	bf00      	nop
 80174ac:	2400ba44 	.word	0x2400ba44
 80174b0:	24000000 	.word	0x24000000
 80174b4:	08015d0d 	.word	0x08015d0d
 80174b8:	24000090 	.word	0x24000090
 80174bc:	2400ba48 	.word	0x2400ba48
 80174c0:	08015d0b 	.word	0x08015d0b
 80174c4:	24000094 	.word	0x24000094

080174c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80174c8:	b538      	push	{r3, r4, r5, lr}
 80174ca:	4c15      	ldr	r4, [pc, #84]	; (8017520 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80174cc:	4605      	mov	r5, r0
 80174ce:	7823      	ldrb	r3, [r4, #0]
 80174d0:	f3bf 8f5b 	dmb	ish
 80174d4:	07da      	lsls	r2, r3, #31
 80174d6:	d40b      	bmi.n	80174f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80174d8:	4620      	mov	r0, r4
 80174da:	f004 fedc 	bl	801c296 <__cxa_guard_acquire>
 80174de:	b138      	cbz	r0, 80174f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80174e0:	4620      	mov	r0, r4
 80174e2:	f004 fee4 	bl	801c2ae <__cxa_guard_release>
 80174e6:	4a0f      	ldr	r2, [pc, #60]	; (8017524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80174e8:	490f      	ldr	r1, [pc, #60]	; (8017528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80174ea:	4810      	ldr	r0, [pc, #64]	; (801752c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80174ec:	f004 fecc 	bl	801c288 <__aeabi_atexit>
 80174f0:	4c0f      	ldr	r4, [pc, #60]	; (8017530 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80174f2:	7823      	ldrb	r3, [r4, #0]
 80174f4:	f3bf 8f5b 	dmb	ish
 80174f8:	07db      	lsls	r3, r3, #31
 80174fa:	d40b      	bmi.n	8017514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80174fc:	4620      	mov	r0, r4
 80174fe:	f004 feca 	bl	801c296 <__cxa_guard_acquire>
 8017502:	b138      	cbz	r0, 8017514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017504:	4620      	mov	r0, r4
 8017506:	f004 fed2 	bl	801c2ae <__cxa_guard_release>
 801750a:	4a06      	ldr	r2, [pc, #24]	; (8017524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801750c:	4909      	ldr	r1, [pc, #36]	; (8017534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801750e:	480a      	ldr	r0, [pc, #40]	; (8017538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017510:	f004 feba 	bl	801c288 <__aeabi_atexit>
 8017514:	4b05      	ldr	r3, [pc, #20]	; (801752c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017516:	63ab      	str	r3, [r5, #56]	; 0x38
 8017518:	4b07      	ldr	r3, [pc, #28]	; (8017538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801751a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801751c:	bd38      	pop	{r3, r4, r5, pc}
 801751e:	bf00      	nop
 8017520:	2400ba24 	.word	0x2400ba24
 8017524:	24000000 	.word	0x24000000
 8017528:	08015d11 	.word	0x08015d11
 801752c:	24000070 	.word	0x24000070
 8017530:	2400ba28 	.word	0x2400ba28
 8017534:	08015d0f 	.word	0x08015d0f
 8017538:	24000074 	.word	0x24000074

0801753c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801753c:	b510      	push	{r4, lr}
 801753e:	4604      	mov	r4, r0
 8017540:	f7ff ff88 	bl	8017454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8017544:	4620      	mov	r0, r4
 8017546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801754a:	f7ff bfbd 	b.w	80174c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08017550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	4c15      	ldr	r4, [pc, #84]	; (80175a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8017554:	4605      	mov	r5, r0
 8017556:	7823      	ldrb	r3, [r4, #0]
 8017558:	f3bf 8f5b 	dmb	ish
 801755c:	07da      	lsls	r2, r3, #31
 801755e:	d40b      	bmi.n	8017578 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017560:	4620      	mov	r0, r4
 8017562:	f004 fe98 	bl	801c296 <__cxa_guard_acquire>
 8017566:	b138      	cbz	r0, 8017578 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8017568:	4620      	mov	r0, r4
 801756a:	f004 fea0 	bl	801c2ae <__cxa_guard_release>
 801756e:	4a0f      	ldr	r2, [pc, #60]	; (80175ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017570:	490f      	ldr	r1, [pc, #60]	; (80175b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8017572:	4810      	ldr	r0, [pc, #64]	; (80175b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017574:	f004 fe88 	bl	801c288 <__aeabi_atexit>
 8017578:	4c0f      	ldr	r4, [pc, #60]	; (80175b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801757a:	7823      	ldrb	r3, [r4, #0]
 801757c:	f3bf 8f5b 	dmb	ish
 8017580:	07db      	lsls	r3, r3, #31
 8017582:	d40b      	bmi.n	801759c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017584:	4620      	mov	r0, r4
 8017586:	f004 fe86 	bl	801c296 <__cxa_guard_acquire>
 801758a:	b138      	cbz	r0, 801759c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801758c:	4620      	mov	r0, r4
 801758e:	f004 fe8e 	bl	801c2ae <__cxa_guard_release>
 8017592:	4a06      	ldr	r2, [pc, #24]	; (80175ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8017594:	4909      	ldr	r1, [pc, #36]	; (80175bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8017596:	480a      	ldr	r0, [pc, #40]	; (80175c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017598:	f004 fe76 	bl	801c288 <__aeabi_atexit>
 801759c:	4b05      	ldr	r3, [pc, #20]	; (80175b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801759e:	652b      	str	r3, [r5, #80]	; 0x50
 80175a0:	4b07      	ldr	r3, [pc, #28]	; (80175c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80175a2:	656b      	str	r3, [r5, #84]	; 0x54
 80175a4:	bd38      	pop	{r3, r4, r5, pc}
 80175a6:	bf00      	nop
 80175a8:	2400ba1c 	.word	0x2400ba1c
 80175ac:	24000000 	.word	0x24000000
 80175b0:	08015d05 	.word	0x08015d05
 80175b4:	24000068 	.word	0x24000068
 80175b8:	2400ba20 	.word	0x2400ba20
 80175bc:	08015d03 	.word	0x08015d03
 80175c0:	2400006c 	.word	0x2400006c

080175c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80175c4:	b538      	push	{r3, r4, r5, lr}
 80175c6:	4c15      	ldr	r4, [pc, #84]	; (801761c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80175c8:	4605      	mov	r5, r0
 80175ca:	7823      	ldrb	r3, [r4, #0]
 80175cc:	f3bf 8f5b 	dmb	ish
 80175d0:	07da      	lsls	r2, r3, #31
 80175d2:	d40b      	bmi.n	80175ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80175d4:	4620      	mov	r0, r4
 80175d6:	f004 fe5e 	bl	801c296 <__cxa_guard_acquire>
 80175da:	b138      	cbz	r0, 80175ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80175dc:	4620      	mov	r0, r4
 80175de:	f004 fe66 	bl	801c2ae <__cxa_guard_release>
 80175e2:	4a0f      	ldr	r2, [pc, #60]	; (8017620 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80175e4:	490f      	ldr	r1, [pc, #60]	; (8017624 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80175e6:	4810      	ldr	r0, [pc, #64]	; (8017628 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80175e8:	f004 fe4e 	bl	801c288 <__aeabi_atexit>
 80175ec:	4c0f      	ldr	r4, [pc, #60]	; (801762c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80175ee:	7823      	ldrb	r3, [r4, #0]
 80175f0:	f3bf 8f5b 	dmb	ish
 80175f4:	07db      	lsls	r3, r3, #31
 80175f6:	d40b      	bmi.n	8017610 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80175f8:	4620      	mov	r0, r4
 80175fa:	f004 fe4c 	bl	801c296 <__cxa_guard_acquire>
 80175fe:	b138      	cbz	r0, 8017610 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017600:	4620      	mov	r0, r4
 8017602:	f004 fe54 	bl	801c2ae <__cxa_guard_release>
 8017606:	4a06      	ldr	r2, [pc, #24]	; (8017620 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017608:	4909      	ldr	r1, [pc, #36]	; (8017630 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801760a:	480a      	ldr	r0, [pc, #40]	; (8017634 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801760c:	f004 fe3c 	bl	801c288 <__aeabi_atexit>
 8017610:	4b05      	ldr	r3, [pc, #20]	; (8017628 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017612:	64ab      	str	r3, [r5, #72]	; 0x48
 8017614:	4b07      	ldr	r3, [pc, #28]	; (8017634 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017616:	64eb      	str	r3, [r5, #76]	; 0x4c
 8017618:	bd38      	pop	{r3, r4, r5, pc}
 801761a:	bf00      	nop
 801761c:	2400ba0c 	.word	0x2400ba0c
 8017620:	24000000 	.word	0x24000000
 8017624:	08015d09 	.word	0x08015d09
 8017628:	24000058 	.word	0x24000058
 801762c:	2400ba10 	.word	0x2400ba10
 8017630:	08015d07 	.word	0x08015d07
 8017634:	2400005c 	.word	0x2400005c

08017638 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8017638:	b510      	push	{r4, lr}
 801763a:	4604      	mov	r4, r0
 801763c:	f7ff ff88 	bl	8017550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8017640:	4620      	mov	r0, r4
 8017642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017646:	f7ff bfbd 	b.w	80175c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801764a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801764a:	b510      	push	{r4, lr}
 801764c:	4604      	mov	r4, r0
 801764e:	f7ff fff3 	bl	8017638 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff ff72 	bl	801753c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8017658:	4620      	mov	r0, r4
 801765a:	f7ff fe73 	bl	8017344 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801765e:	4620      	mov	r0, r4
 8017660:	f7ff fdf2 	bl	8017248 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8017664:	4620      	mov	r0, r4
 8017666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801766a:	f7ff bee9 	b.w	8017440 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801766e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801766e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017672:	b087      	sub	sp, #28
 8017674:	788d      	ldrb	r5, [r1, #2]
 8017676:	f891 9000 	ldrb.w	r9, [r1]
 801767a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801767e:	9501      	str	r5, [sp, #4]
 8017680:	784d      	ldrb	r5, [r1, #1]
 8017682:	9203      	str	r2, [sp, #12]
 8017684:	9502      	str	r5, [sp, #8]
 8017686:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801768a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801768e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017692:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8017696:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801769a:	fb06 0708 	mla	r7, r6, r8, r0
 801769e:	2e00      	cmp	r6, #0
 80176a0:	eb02 0a07 	add.w	sl, r2, r7
 80176a4:	ea4f 2205 	mov.w	r2, r5, lsl #8
 80176a8:	9d01      	ldr	r5, [sp, #4]
 80176aa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80176ae:	ea45 0509 	orr.w	r5, r5, r9
 80176b2:	9505      	str	r5, [sp, #20]
 80176b4:	f2c0 80b2 	blt.w	801781c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80176b8:	45b3      	cmp	fp, r6
 80176ba:	f340 80af 	ble.w	801781c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80176be:	2800      	cmp	r0, #0
 80176c0:	f2c0 80aa 	blt.w	8017818 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80176c4:	4580      	cmp	r8, r0
 80176c6:	f340 80a7 	ble.w	8017818 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80176ca:	9a03      	ldr	r2, [sp, #12]
 80176cc:	5dd7      	ldrb	r7, [r2, r7]
 80176ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80176d2:	441f      	add	r7, r3
 80176d4:	1c42      	adds	r2, r0, #1
 80176d6:	f100 80a4 	bmi.w	8017822 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80176da:	4590      	cmp	r8, r2
 80176dc:	f340 80a1 	ble.w	8017822 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80176e0:	2c00      	cmp	r4, #0
 80176e2:	f000 809e 	beq.w	8017822 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80176e6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80176ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176ee:	441d      	add	r5, r3
 80176f0:	3601      	adds	r6, #1
 80176f2:	f100 809a 	bmi.w	801782a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80176f6:	45b3      	cmp	fp, r6
 80176f8:	f340 8097 	ble.w	801782a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80176fc:	f1bc 0f00 	cmp.w	ip, #0
 8017700:	f000 8093 	beq.w	801782a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8017704:	2800      	cmp	r0, #0
 8017706:	f2c0 808e 	blt.w	8017826 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801770a:	4580      	cmp	r8, r0
 801770c:	f340 808b 	ble.w	8017826 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8017710:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8017714:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017718:	441e      	add	r6, r3
 801771a:	3001      	adds	r0, #1
 801771c:	f100 8088 	bmi.w	8017830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017720:	4580      	cmp	r8, r0
 8017722:	f340 8085 	ble.w	8017830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8017726:	2c00      	cmp	r4, #0
 8017728:	f000 8082 	beq.w	8017830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801772c:	44d0      	add	r8, sl
 801772e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017732:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017736:	4413      	add	r3, r2
 8017738:	b2a4      	uxth	r4, r4
 801773a:	f895 a000 	ldrb.w	sl, [r5]
 801773e:	fa1f fc8c 	uxth.w	ip, ip
 8017742:	fb04 fb0c 	mul.w	fp, r4, ip
 8017746:	0124      	lsls	r4, r4, #4
 8017748:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801774c:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8017750:	eba4 040b 	sub.w	r4, r4, fp
 8017754:	fa1f f08c 	uxth.w	r0, ip
 8017758:	b2a2      	uxth	r2, r4
 801775a:	783c      	ldrb	r4, [r7, #0]
 801775c:	eba8 0800 	sub.w	r8, r8, r0
 8017760:	fa1f fc8e 	uxth.w	ip, lr
 8017764:	fb02 fa0a 	mul.w	sl, r2, sl
 8017768:	ea6f 0e0e 	mvn.w	lr, lr
 801776c:	fa1f f888 	uxth.w	r8, r8
 8017770:	fa5f fe8e 	uxtb.w	lr, lr
 8017774:	fb08 aa04 	mla	sl, r8, r4, sl
 8017778:	7834      	ldrb	r4, [r6, #0]
 801777a:	fb19 f90e 	smulbb	r9, r9, lr
 801777e:	fb00 aa04 	mla	sl, r0, r4, sl
 8017782:	781c      	ldrb	r4, [r3, #0]
 8017784:	fb0b a404 	mla	r4, fp, r4, sl
 8017788:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801778c:	fb04 990c 	mla	r9, r4, ip, r9
 8017790:	fa1f f989 	uxth.w	r9, r9
 8017794:	f109 0401 	add.w	r4, r9, #1
 8017798:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801779c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80177a0:	f881 9000 	strb.w	r9, [r1]
 80177a4:	f895 9001 	ldrb.w	r9, [r5, #1]
 80177a8:	787c      	ldrb	r4, [r7, #1]
 80177aa:	fb02 f909 	mul.w	r9, r2, r9
 80177ae:	fb08 9904 	mla	r9, r8, r4, r9
 80177b2:	7874      	ldrb	r4, [r6, #1]
 80177b4:	fb00 9904 	mla	r9, r0, r4, r9
 80177b8:	785c      	ldrb	r4, [r3, #1]
 80177ba:	fb0b 9404 	mla	r4, fp, r4, r9
 80177be:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80177c2:	9c02      	ldr	r4, [sp, #8]
 80177c4:	fb14 f90e 	smulbb	r9, r4, lr
 80177c8:	fb0a 940c 	mla	r4, sl, ip, r9
 80177cc:	b2a4      	uxth	r4, r4
 80177ce:	f104 0901 	add.w	r9, r4, #1
 80177d2:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80177d6:	1224      	asrs	r4, r4, #8
 80177d8:	704c      	strb	r4, [r1, #1]
 80177da:	78ad      	ldrb	r5, [r5, #2]
 80177dc:	78bc      	ldrb	r4, [r7, #2]
 80177de:	436a      	muls	r2, r5
 80177e0:	789b      	ldrb	r3, [r3, #2]
 80177e2:	fb08 2204 	mla	r2, r8, r4, r2
 80177e6:	78b4      	ldrb	r4, [r6, #2]
 80177e8:	fb00 2004 	mla	r0, r0, r4, r2
 80177ec:	fb0b 0b03 	mla	fp, fp, r3, r0
 80177f0:	9b01      	ldr	r3, [sp, #4]
 80177f2:	fb13 fe0e 	smulbb	lr, r3, lr
 80177f6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80177fa:	fb0b ec0c 	mla	ip, fp, ip, lr
 80177fe:	fa1f fc8c 	uxth.w	ip, ip
 8017802:	f10c 0e01 	add.w	lr, ip, #1
 8017806:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801780a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801780e:	f881 c002 	strb.w	ip, [r1, #2]
 8017812:	b007      	add	sp, #28
 8017814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017818:	af05      	add	r7, sp, #20
 801781a:	e75b      	b.n	80176d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801781c:	ad05      	add	r5, sp, #20
 801781e:	462f      	mov	r7, r5
 8017820:	e766      	b.n	80176f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8017822:	ad05      	add	r5, sp, #20
 8017824:	e764      	b.n	80176f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8017826:	ae05      	add	r6, sp, #20
 8017828:	e777      	b.n	801771a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801782a:	ab05      	add	r3, sp, #20
 801782c:	461e      	mov	r6, r3
 801782e:	e783      	b.n	8017738 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8017830:	ab05      	add	r3, sp, #20
 8017832:	e781      	b.n	8017738 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08017834 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017838:	b093      	sub	sp, #76	; 0x4c
 801783a:	9210      	str	r2, [sp, #64]	; 0x40
 801783c:	9309      	str	r3, [sp, #36]	; 0x24
 801783e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017840:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8017844:	9011      	str	r0, [sp, #68]	; 0x44
 8017846:	930e      	str	r3, [sp, #56]	; 0x38
 8017848:	6850      	ldr	r0, [r2, #4]
 801784a:	910d      	str	r1, [sp, #52]	; 0x34
 801784c:	6812      	ldr	r2, [r2, #0]
 801784e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8017852:	fb00 1303 	mla	r3, r0, r3, r1
 8017856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801785a:	18d3      	adds	r3, r2, r3
 801785c:	930a      	str	r3, [sp, #40]	; 0x28
 801785e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	930c      	str	r3, [sp, #48]	; 0x30
 8017864:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017866:	685c      	ldr	r4, [r3, #4]
 8017868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801786a:	3404      	adds	r4, #4
 801786c:	43db      	mvns	r3, r3
 801786e:	b2db      	uxtb	r3, r3
 8017870:	930b      	str	r3, [sp, #44]	; 0x2c
 8017872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017874:	2b00      	cmp	r3, #0
 8017876:	dc03      	bgt.n	8017880 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801787a:	2b00      	cmp	r3, #0
 801787c:	f340 8250 	ble.w	8017d20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8017880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017882:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017886:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801788a:	1e48      	subs	r0, r1, #1
 801788c:	1e55      	subs	r5, r2, #1
 801788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017890:	2b00      	cmp	r3, #0
 8017892:	f340 80ee 	ble.w	8017a72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8017896:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017898:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801789a:	1436      	asrs	r6, r6, #16
 801789c:	ea4f 4323 	mov.w	r3, r3, asr #16
 80178a0:	d406      	bmi.n	80178b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80178a2:	4286      	cmp	r6, r0
 80178a4:	da04      	bge.n	80178b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	db02      	blt.n	80178b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80178aa:	42ab      	cmp	r3, r5
 80178ac:	f2c0 80e2 	blt.w	8017a74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80178b0:	3601      	adds	r6, #1
 80178b2:	f100 80cf 	bmi.w	8017a54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80178b6:	42b1      	cmp	r1, r6
 80178b8:	f2c0 80cc 	blt.w	8017a54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80178bc:	3301      	adds	r3, #1
 80178be:	f100 80c9 	bmi.w	8017a54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80178c2:	429a      	cmp	r2, r3
 80178c4:	f2c0 80c6 	blt.w	8017a54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80178c8:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80178cc:	f1bb 0f00 	cmp.w	fp, #0
 80178d0:	f340 80f1 	ble.w	8017ab6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80178d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80178d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80178d8:	9824      	ldr	r0, [sp, #144]	; 0x90
 80178da:	141d      	asrs	r5, r3, #16
 80178dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80178de:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80178e2:	68c7      	ldr	r7, [r0, #12]
 80178e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80178e6:	1418      	asrs	r0, r3, #16
 80178e8:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80178ec:	6892      	ldr	r2, [r2, #8]
 80178ee:	f100 8137 	bmi.w	8017b60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80178f2:	f102 3cff 	add.w	ip, r2, #4294967295
 80178f6:	4560      	cmp	r0, ip
 80178f8:	f280 8132 	bge.w	8017b60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80178fc:	2d00      	cmp	r5, #0
 80178fe:	f2c0 812f 	blt.w	8017b60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8017902:	f107 3cff 	add.w	ip, r7, #4294967295
 8017906:	4565      	cmp	r5, ip
 8017908:	f280 812a 	bge.w	8017b60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801790c:	b212      	sxth	r2, r2
 801790e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017910:	fb05 0002 	mla	r0, r5, r2, r0
 8017914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017916:	f817 c000 	ldrb.w	ip, [r7, r0]
 801791a:	4405      	add	r5, r0
 801791c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017920:	eb04 0e0c 	add.w	lr, r4, ip
 8017924:	f1b8 0f00 	cmp.w	r8, #0
 8017928:	f000 810c 	beq.w	8017b44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801792c:	786f      	ldrb	r7, [r5, #1]
 801792e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017932:	4427      	add	r7, r4
 8017934:	2900      	cmp	r1, #0
 8017936:	f000 810d 	beq.w	8017b54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801793a:	18a8      	adds	r0, r5, r2
 801793c:	5caa      	ldrb	r2, [r5, r2]
 801793e:	7840      	ldrb	r0, [r0, #1]
 8017940:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017948:	4422      	add	r2, r4
 801794a:	4420      	add	r0, r4
 801794c:	fa1f f388 	uxth.w	r3, r8
 8017950:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8017954:	b289      	uxth	r1, r1
 8017956:	f897 c000 	ldrb.w	ip, [r7]
 801795a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801795e:	fb03 f901 	mul.w	r9, r3, r1
 8017962:	011b      	lsls	r3, r3, #4
 8017964:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017968:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801796c:	eba3 0309 	sub.w	r3, r3, r9
 8017970:	b289      	uxth	r1, r1
 8017972:	b29b      	uxth	r3, r3
 8017974:	eba8 0801 	sub.w	r8, r8, r1
 8017978:	fb03 fc0c 	mul.w	ip, r3, ip
 801797c:	fa1f f888 	uxth.w	r8, r8
 8017980:	930f      	str	r3, [sp, #60]	; 0x3c
 8017982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017984:	fb08 cc0a 	mla	ip, r8, sl, ip
 8017988:	f892 a000 	ldrb.w	sl, [r2]
 801798c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8017990:	f890 a000 	ldrb.w	sl, [r0]
 8017994:	fb09 cc0a 	mla	ip, r9, sl, ip
 8017998:	f896 a000 	ldrb.w	sl, [r6]
 801799c:	fb1a fa03 	smulbb	sl, sl, r3
 80179a0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80179a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179a6:	fb0c ac05 	mla	ip, ip, r5, sl
 80179aa:	fa1f fc8c 	uxth.w	ip, ip
 80179ae:	f10c 0a01 	add.w	sl, ip, #1
 80179b2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80179b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80179ba:	f886 a000 	strb.w	sl, [r6]
 80179be:	f897 c001 	ldrb.w	ip, [r7, #1]
 80179c2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80179c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80179ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179cc:	fb08 cc0a 	mla	ip, r8, sl, ip
 80179d0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80179d4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80179d8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80179dc:	fb09 cc0a 	mla	ip, r9, sl, ip
 80179e0:	f896 a001 	ldrb.w	sl, [r6, #1]
 80179e4:	fb1a fa03 	smulbb	sl, sl, r3
 80179e8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80179ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179ee:	fb0c ac05 	mla	ip, ip, r5, sl
 80179f2:	fa1f fc8c 	uxth.w	ip, ip
 80179f6:	f10c 0a01 	add.w	sl, ip, #1
 80179fa:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80179fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017a02:	f886 c001 	strb.w	ip, [r6, #1]
 8017a06:	78bf      	ldrb	r7, [r7, #2]
 8017a08:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017a0c:	437b      	muls	r3, r7
 8017a0e:	fb08 330c 	mla	r3, r8, ip, r3
 8017a12:	f892 c002 	ldrb.w	ip, [r2, #2]
 8017a16:	7882      	ldrb	r2, [r0, #2]
 8017a18:	fb01 310c 	mla	r1, r1, ip, r3
 8017a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a1e:	fb09 1902 	mla	r9, r9, r2, r1
 8017a22:	78b1      	ldrb	r1, [r6, #2]
 8017a24:	fb11 f103 	smulbb	r1, r1, r3
 8017a28:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8017a2c:	fb09 1505 	mla	r5, r9, r5, r1
 8017a30:	b2ad      	uxth	r5, r5
 8017a32:	1c6b      	adds	r3, r5, #1
 8017a34:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8017a38:	122d      	asrs	r5, r5, #8
 8017a3a:	70b5      	strb	r5, [r6, #2]
 8017a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a3e:	3603      	adds	r6, #3
 8017a40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a46:	4413      	add	r3, r2
 8017a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a4a:	931d      	str	r3, [sp, #116]	; 0x74
 8017a4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017a4e:	4413      	add	r3, r2
 8017a50:	931e      	str	r3, [sp, #120]	; 0x78
 8017a52:	e73b      	b.n	80178cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a56:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8017a58:	4433      	add	r3, r6
 8017a5a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8017a5c:	931d      	str	r3, [sp, #116]	; 0x74
 8017a5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017a60:	4433      	add	r3, r6
 8017a62:	931e      	str	r3, [sp, #120]	; 0x78
 8017a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a66:	3b01      	subs	r3, #1
 8017a68:	9309      	str	r3, [sp, #36]	; 0x24
 8017a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a6c:	3303      	adds	r3, #3
 8017a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8017a70:	e70d      	b.n	801788e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017a72:	d028      	beq.n	8017ac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8017a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a76:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8017a78:	3b01      	subs	r3, #1
 8017a7a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017a7c:	fb00 5003 	mla	r0, r0, r3, r5
 8017a80:	1400      	asrs	r0, r0, #16
 8017a82:	f53f af21 	bmi.w	80178c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017a86:	3901      	subs	r1, #1
 8017a88:	4288      	cmp	r0, r1
 8017a8a:	f6bf af1d 	bge.w	80178c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017a8e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017a90:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017a92:	fb01 0303 	mla	r3, r1, r3, r0
 8017a96:	141b      	asrs	r3, r3, #16
 8017a98:	f53f af16 	bmi.w	80178c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017a9c:	3a01      	subs	r2, #1
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	f6bf af12 	bge.w	80178c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aa6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017aaa:	1cdf      	adds	r7, r3, #3
 8017aac:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017ab0:	f1b9 0f00 	cmp.w	r9, #0
 8017ab4:	dc73      	bgt.n	8017b9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8017ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017aba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017abe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ac2:	441a      	add	r2, r3
 8017ac4:	920a      	str	r2, [sp, #40]	; 0x28
 8017ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	f340 8129 	ble.w	8017d20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8017ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017ad4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017ad8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017adc:	eef0 6a62 	vmov.f32	s13, s5
 8017ae0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017ae4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017ae8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017aec:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8017af0:	eef0 6a43 	vmov.f32	s13, s6
 8017af4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017af8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8017afc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b14:	ee12 2a90 	vmov	r2, s5
 8017b18:	eef0 2a47 	vmov.f32	s5, s14
 8017b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b20:	ee13 2a10 	vmov	r2, s6
 8017b24:	931f      	str	r3, [sp, #124]	; 0x7c
 8017b26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b28:	eeb0 3a67 	vmov.f32	s6, s15
 8017b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017b30:	9320      	str	r3, [sp, #128]	; 0x80
 8017b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017b36:	3b01      	subs	r3, #1
 8017b38:	930d      	str	r3, [sp, #52]	; 0x34
 8017b3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017b3c:	bf08      	it	eq
 8017b3e:	4613      	moveq	r3, r2
 8017b40:	9309      	str	r3, [sp, #36]	; 0x24
 8017b42:	e696      	b.n	8017872 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017b44:	b149      	cbz	r1, 8017b5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8017b46:	5caa      	ldrb	r2, [r5, r2]
 8017b48:	4670      	mov	r0, lr
 8017b4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b4e:	4422      	add	r2, r4
 8017b50:	4677      	mov	r7, lr
 8017b52:	e6fb      	b.n	801794c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017b54:	4670      	mov	r0, lr
 8017b56:	4672      	mov	r2, lr
 8017b58:	e6f8      	b.n	801794c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017b5a:	4670      	mov	r0, lr
 8017b5c:	4672      	mov	r2, lr
 8017b5e:	e7f7      	b.n	8017b50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017b60:	f110 0c01 	adds.w	ip, r0, #1
 8017b64:	f53f af6a 	bmi.w	8017a3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017b68:	4562      	cmp	r2, ip
 8017b6a:	f6ff af67 	blt.w	8017a3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017b6e:	f115 0c01 	adds.w	ip, r5, #1
 8017b72:	f53f af63 	bmi.w	8017a3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017b76:	4567      	cmp	r7, ip
 8017b78:	f6ff af60 	blt.w	8017a3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b7e:	b23f      	sxth	r7, r7
 8017b80:	b212      	sxth	r2, r2
 8017b82:	9002      	str	r0, [sp, #8]
 8017b84:	9701      	str	r7, [sp, #4]
 8017b86:	9200      	str	r2, [sp, #0]
 8017b88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b8c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8017b90:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8017b94:	4623      	mov	r3, r4
 8017b96:	4631      	mov	r1, r6
 8017b98:	f7ff fd69 	bl	801766e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8017b9c:	e74e      	b.n	8017a3c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8017b9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017ba0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017ba2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017ba6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017ba8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017baa:	1400      	asrs	r0, r0, #16
 8017bac:	142d      	asrs	r5, r5, #16
 8017bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bb0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017bb4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017bb8:	fb02 5000 	mla	r0, r2, r0, r5
 8017bbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017bbe:	f815 e000 	ldrb.w	lr, [r5, r0]
 8017bc2:	eb05 0c00 	add.w	ip, r5, r0
 8017bc6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017bca:	eb04 060e 	add.w	r6, r4, lr
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	f000 8097 	beq.w	8017d02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8017bd4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8017bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bdc:	4425      	add	r5, r4
 8017bde:	2900      	cmp	r1, #0
 8017be0:	f000 8098 	beq.w	8017d14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8017be4:	eb0c 0002 	add.w	r0, ip, r2
 8017be8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017bec:	7840      	ldrb	r0, [r0, #1]
 8017bee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017bf2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017bf6:	4422      	add	r2, r4
 8017bf8:	4420      	add	r0, r4
 8017bfa:	b29b      	uxth	r3, r3
 8017bfc:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8017c00:	b289      	uxth	r1, r1
 8017c02:	f895 e000 	ldrb.w	lr, [r5]
 8017c06:	3703      	adds	r7, #3
 8017c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c0c:	fb03 f801 	mul.w	r8, r3, r1
 8017c10:	011b      	lsls	r3, r3, #4
 8017c12:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8017c16:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017c1a:	eba3 0308 	sub.w	r3, r3, r8
 8017c1e:	b289      	uxth	r1, r1
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	ebac 0c01 	sub.w	ip, ip, r1
 8017c26:	fb03 fe0e 	mul.w	lr, r3, lr
 8017c2a:	fa1f fc8c 	uxth.w	ip, ip
 8017c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c32:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017c36:	f892 b000 	ldrb.w	fp, [r2]
 8017c3a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017c3e:	f890 b000 	ldrb.w	fp, [r0]
 8017c42:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017c46:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8017c4a:	fb1b fb03 	smulbb	fp, fp, r3
 8017c4e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c54:	fb0e be0a 	mla	lr, lr, sl, fp
 8017c58:	fa1f fe8e 	uxth.w	lr, lr
 8017c5c:	f10e 0b01 	add.w	fp, lr, #1
 8017c60:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017c64:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017c68:	f807 ec06 	strb.w	lr, [r7, #-6]
 8017c6c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017c70:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017c74:	fb03 fe0e 	mul.w	lr, r3, lr
 8017c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c7a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017c7e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8017c82:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017c86:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017c8a:	fb08 ee0b 	mla	lr, r8, fp, lr
 8017c8e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8017c92:	fb1b fb03 	smulbb	fp, fp, r3
 8017c96:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c9c:	fb0e be0a 	mla	lr, lr, sl, fp
 8017ca0:	fa1f fe8e 	uxth.w	lr, lr
 8017ca4:	f10e 0b01 	add.w	fp, lr, #1
 8017ca8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8017cac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017cb0:	f807 ec05 	strb.w	lr, [r7, #-5]
 8017cb4:	78ad      	ldrb	r5, [r5, #2]
 8017cb6:	78b6      	ldrb	r6, [r6, #2]
 8017cb8:	436b      	muls	r3, r5
 8017cba:	7895      	ldrb	r5, [r2, #2]
 8017cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017cbe:	fb0c 3306 	mla	r3, ip, r6, r3
 8017cc2:	fb01 3305 	mla	r3, r1, r5, r3
 8017cc6:	7885      	ldrb	r5, [r0, #2]
 8017cc8:	fb08 3805 	mla	r8, r8, r5, r3
 8017ccc:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8017cd0:	fb13 f302 	smulbb	r3, r3, r2
 8017cd4:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017cd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017cda:	fb08 380a 	mla	r8, r8, sl, r3
 8017cde:	fa1f f888 	uxth.w	r8, r8
 8017ce2:	f108 0301 	add.w	r3, r8, #1
 8017ce6:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8017cea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cec:	4413      	add	r3, r2
 8017cee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017cf0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017cf4:	931d      	str	r3, [sp, #116]	; 0x74
 8017cf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017cf8:	f807 8c04 	strb.w	r8, [r7, #-4]
 8017cfc:	4413      	add	r3, r2
 8017cfe:	931e      	str	r3, [sp, #120]	; 0x78
 8017d00:	e6d6      	b.n	8017ab0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8017d02:	b151      	cbz	r1, 8017d1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017d04:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d08:	4630      	mov	r0, r6
 8017d0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d0e:	4422      	add	r2, r4
 8017d10:	4635      	mov	r5, r6
 8017d12:	e772      	b.n	8017bfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017d14:	4630      	mov	r0, r6
 8017d16:	4632      	mov	r2, r6
 8017d18:	e76f      	b.n	8017bfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	4632      	mov	r2, r6
 8017d1e:	e7f7      	b.n	8017d10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8017d20:	b013      	add	sp, #76	; 0x4c
 8017d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017d26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d2a:	784c      	ldrb	r4, [r1, #1]
 8017d2c:	f891 a002 	ldrb.w	sl, [r1, #2]
 8017d30:	0224      	lsls	r4, r4, #8
 8017d32:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017d36:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8017d3a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017d3e:	f891 a000 	ldrb.w	sl, [r1]
 8017d42:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8017d46:	ea44 040a 	orr.w	r4, r4, sl
 8017d4a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8017d4e:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8017d52:	9401      	str	r4, [sp, #4]
 8017d54:	fb05 c70e 	mla	r7, r5, lr, ip
 8017d58:	2d00      	cmp	r5, #0
 8017d5a:	eb02 0807 	add.w	r8, r2, r7
 8017d5e:	db72      	blt.n	8017e46 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8017d60:	45a9      	cmp	r9, r5
 8017d62:	dd70      	ble.n	8017e46 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8017d64:	f1bc 0f00 	cmp.w	ip, #0
 8017d68:	db6b      	blt.n	8017e42 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017d6a:	45e6      	cmp	lr, ip
 8017d6c:	dd69      	ble.n	8017e42 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8017d6e:	5dd7      	ldrb	r7, [r2, r7]
 8017d70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017d74:	441f      	add	r7, r3
 8017d76:	f11c 0201 	adds.w	r2, ip, #1
 8017d7a:	d467      	bmi.n	8017e4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017d7c:	4596      	cmp	lr, r2
 8017d7e:	dd65      	ble.n	8017e4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d063      	beq.n	8017e4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8017d84:	f898 4001 	ldrb.w	r4, [r8, #1]
 8017d88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017d8c:	441c      	add	r4, r3
 8017d8e:	3501      	adds	r5, #1
 8017d90:	d460      	bmi.n	8017e54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017d92:	45a9      	cmp	r9, r5
 8017d94:	dd5e      	ble.n	8017e54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017d96:	2e00      	cmp	r6, #0
 8017d98:	d05c      	beq.n	8017e54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017d9a:	f1bc 0f00 	cmp.w	ip, #0
 8017d9e:	db57      	blt.n	8017e50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8017da0:	45e6      	cmp	lr, ip
 8017da2:	dd55      	ble.n	8017e50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8017da4:	f818 500e 	ldrb.w	r5, [r8, lr]
 8017da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017dac:	441d      	add	r5, r3
 8017dae:	f11c 0201 	adds.w	r2, ip, #1
 8017db2:	d452      	bmi.n	8017e5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017db4:	4596      	cmp	lr, r2
 8017db6:	dd50      	ble.n	8017e5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017db8:	2800      	cmp	r0, #0
 8017dba:	d04e      	beq.n	8017e5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017dbc:	44c6      	add	lr, r8
 8017dbe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017dc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017dc6:	4413      	add	r3, r2
 8017dc8:	b280      	uxth	r0, r0
 8017dca:	f897 8000 	ldrb.w	r8, [r7]
 8017dce:	b2b2      	uxth	r2, r6
 8017dd0:	fb00 f602 	mul.w	r6, r0, r2
 8017dd4:	0100      	lsls	r0, r0, #4
 8017dd6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8017dda:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8017dde:	1b80      	subs	r0, r0, r6
 8017de0:	fa1f fc82 	uxth.w	ip, r2
 8017de4:	b282      	uxth	r2, r0
 8017de6:	7820      	ldrb	r0, [r4, #0]
 8017de8:	ebae 0e0c 	sub.w	lr, lr, ip
 8017dec:	4350      	muls	r0, r2
 8017dee:	fa1f fe8e 	uxth.w	lr, lr
 8017df2:	fb0e 0808 	mla	r8, lr, r8, r0
 8017df6:	7828      	ldrb	r0, [r5, #0]
 8017df8:	fb0c 8800 	mla	r8, ip, r0, r8
 8017dfc:	7818      	ldrb	r0, [r3, #0]
 8017dfe:	fb06 8000 	mla	r0, r6, r0, r8
 8017e02:	1200      	asrs	r0, r0, #8
 8017e04:	7008      	strb	r0, [r1, #0]
 8017e06:	7860      	ldrb	r0, [r4, #1]
 8017e08:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017e0c:	4350      	muls	r0, r2
 8017e0e:	fb0e 0808 	mla	r8, lr, r8, r0
 8017e12:	7868      	ldrb	r0, [r5, #1]
 8017e14:	fb0c 8800 	mla	r8, ip, r0, r8
 8017e18:	7858      	ldrb	r0, [r3, #1]
 8017e1a:	fb06 8000 	mla	r0, r6, r0, r8
 8017e1e:	1200      	asrs	r0, r0, #8
 8017e20:	7048      	strb	r0, [r1, #1]
 8017e22:	78a0      	ldrb	r0, [r4, #2]
 8017e24:	78bf      	ldrb	r7, [r7, #2]
 8017e26:	4350      	muls	r0, r2
 8017e28:	78aa      	ldrb	r2, [r5, #2]
 8017e2a:	fb0e 0007 	mla	r0, lr, r7, r0
 8017e2e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8017e32:	789a      	ldrb	r2, [r3, #2]
 8017e34:	fb06 c202 	mla	r2, r6, r2, ip
 8017e38:	1212      	asrs	r2, r2, #8
 8017e3a:	708a      	strb	r2, [r1, #2]
 8017e3c:	b002      	add	sp, #8
 8017e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e42:	af01      	add	r7, sp, #4
 8017e44:	e797      	b.n	8017d76 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8017e46:	ac01      	add	r4, sp, #4
 8017e48:	4627      	mov	r7, r4
 8017e4a:	e7a0      	b.n	8017d8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017e4c:	ac01      	add	r4, sp, #4
 8017e4e:	e79e      	b.n	8017d8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8017e50:	ad01      	add	r5, sp, #4
 8017e52:	e7ac      	b.n	8017dae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8017e54:	ab01      	add	r3, sp, #4
 8017e56:	461d      	mov	r5, r3
 8017e58:	e7b6      	b.n	8017dc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8017e5a:	ab01      	add	r3, sp, #4
 8017e5c:	e7b4      	b.n	8017dc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08017e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e62:	b08d      	sub	sp, #52	; 0x34
 8017e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e68:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8017e6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017e6e:	900b      	str	r0, [sp, #44]	; 0x2c
 8017e70:	9306      	str	r3, [sp, #24]
 8017e72:	6850      	ldr	r0, [r2, #4]
 8017e74:	6812      	ldr	r2, [r2, #0]
 8017e76:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017e78:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8017e7c:	fb00 1303 	mla	r3, r0, r3, r1
 8017e80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017e84:	18d3      	adds	r3, r2, r3
 8017e86:	9307      	str	r3, [sp, #28]
 8017e88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	9308      	str	r3, [sp, #32]
 8017e8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017e90:	685d      	ldr	r5, [r3, #4]
 8017e92:	3504      	adds	r5, #4
 8017e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	dc03      	bgt.n	8017ea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	f340 81e6 	ble.w	801826e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8017ea2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017ea4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017ea8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017eac:	1e48      	subs	r0, r1, #1
 8017eae:	1e56      	subs	r6, r2, #1
 8017eb0:	9b06      	ldr	r3, [sp, #24]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f340 80bd 	ble.w	8018032 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017eb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017eba:	1427      	asrs	r7, r4, #16
 8017ebc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017ec0:	d406      	bmi.n	8017ed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017ec2:	4287      	cmp	r7, r0
 8017ec4:	da04      	bge.n	8017ed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	db02      	blt.n	8017ed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017eca:	42b3      	cmp	r3, r6
 8017ecc:	f2c0 80b2 	blt.w	8018034 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8017ed0:	3701      	adds	r7, #1
 8017ed2:	f100 80a1 	bmi.w	8018018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017ed6:	42b9      	cmp	r1, r7
 8017ed8:	f2c0 809e 	blt.w	8018018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017edc:	3301      	adds	r3, #1
 8017ede:	f100 809b 	bmi.w	8018018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	f2c0 8098 	blt.w	8018018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017ee8:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8017eec:	f1bb 0f00 	cmp.w	fp, #0
 8017ef0:	f340 80bf 	ble.w	8018072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017ef4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017ef6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017ef8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017efa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017efe:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017f02:	1420      	asrs	r0, r4, #16
 8017f04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017f06:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017f0a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8017f0e:	6892      	ldr	r2, [r2, #8]
 8017f10:	f100 8103 	bmi.w	801811a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f14:	f102 3eff 	add.w	lr, r2, #4294967295
 8017f18:	4570      	cmp	r0, lr
 8017f1a:	f280 80fe 	bge.w	801811a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f1e:	2f00      	cmp	r7, #0
 8017f20:	f2c0 80fb 	blt.w	801811a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f24:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017f28:	4577      	cmp	r7, lr
 8017f2a:	f280 80f6 	bge.w	801811a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017f2e:	b212      	sxth	r2, r2
 8017f30:	fb07 0002 	mla	r0, r7, r2, r0
 8017f34:	9f08      	ldr	r7, [sp, #32]
 8017f36:	f817 8000 	ldrb.w	r8, [r7, r0]
 8017f3a:	eb07 0e00 	add.w	lr, r7, r0
 8017f3e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f42:	eb05 0c08 	add.w	ip, r5, r8
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	f000 80d8 	beq.w	80180fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017f4c:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8017f50:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017f54:	442f      	add	r7, r5
 8017f56:	2900      	cmp	r1, #0
 8017f58:	f000 80d9 	beq.w	801810e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017f5c:	eb0e 0002 	add.w	r0, lr, r2
 8017f60:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017f64:	7840      	ldrb	r0, [r0, #1]
 8017f66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017f6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017f6e:	442a      	add	r2, r5
 8017f70:	4428      	add	r0, r5
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	f815 a008 	ldrb.w	sl, [r5, r8]
 8017f78:	b289      	uxth	r1, r1
 8017f7a:	f897 8000 	ldrb.w	r8, [r7]
 8017f7e:	fb03 f901 	mul.w	r9, r3, r1
 8017f82:	011b      	lsls	r3, r3, #4
 8017f84:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017f88:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017f8c:	eba3 0309 	sub.w	r3, r3, r9
 8017f90:	b289      	uxth	r1, r1
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	ebae 0e01 	sub.w	lr, lr, r1
 8017f98:	fb03 f808 	mul.w	r8, r3, r8
 8017f9c:	fa1f fe8e 	uxth.w	lr, lr
 8017fa0:	fb0e 880a 	mla	r8, lr, sl, r8
 8017fa4:	f892 a000 	ldrb.w	sl, [r2]
 8017fa8:	fb01 880a 	mla	r8, r1, sl, r8
 8017fac:	f890 a000 	ldrb.w	sl, [r0]
 8017fb0:	fb09 880a 	mla	r8, r9, sl, r8
 8017fb4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017fb8:	f886 8000 	strb.w	r8, [r6]
 8017fbc:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017fc0:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017fc4:	fb03 f808 	mul.w	r8, r3, r8
 8017fc8:	fb0e 880a 	mla	r8, lr, sl, r8
 8017fcc:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017fd0:	fb01 880a 	mla	r8, r1, sl, r8
 8017fd4:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017fd8:	fb09 880a 	mla	r8, r9, sl, r8
 8017fdc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017fe0:	f886 8001 	strb.w	r8, [r6, #1]
 8017fe4:	78bf      	ldrb	r7, [r7, #2]
 8017fe6:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017fea:	437b      	muls	r3, r7
 8017fec:	7892      	ldrb	r2, [r2, #2]
 8017fee:	fb0e 330c 	mla	r3, lr, ip, r3
 8017ff2:	fb01 3102 	mla	r1, r1, r2, r3
 8017ff6:	7882      	ldrb	r2, [r0, #2]
 8017ff8:	fb09 1902 	mla	r9, r9, r2, r1
 8017ffc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018000:	f886 9002 	strb.w	r9, [r6, #2]
 8018004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018006:	3603      	adds	r6, #3
 8018008:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801800a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801800e:	441c      	add	r4, r3
 8018010:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018012:	4413      	add	r3, r2
 8018014:	9318      	str	r3, [sp, #96]	; 0x60
 8018016:	e769      	b.n	8017eec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801801a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801801c:	441c      	add	r4, r3
 801801e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018020:	443b      	add	r3, r7
 8018022:	9318      	str	r3, [sp, #96]	; 0x60
 8018024:	9b06      	ldr	r3, [sp, #24]
 8018026:	3b01      	subs	r3, #1
 8018028:	9306      	str	r3, [sp, #24]
 801802a:	9b07      	ldr	r3, [sp, #28]
 801802c:	3303      	adds	r3, #3
 801802e:	9307      	str	r3, [sp, #28]
 8018030:	e73e      	b.n	8017eb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018032:	d026      	beq.n	8018082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8018034:	9b06      	ldr	r3, [sp, #24]
 8018036:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018038:	3b01      	subs	r3, #1
 801803a:	fb00 4003 	mla	r0, r0, r3, r4
 801803e:	1400      	asrs	r0, r0, #16
 8018040:	f53f af52 	bmi.w	8017ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018044:	3901      	subs	r1, #1
 8018046:	4288      	cmp	r0, r1
 8018048:	f6bf af4e 	bge.w	8017ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801804c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801804e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018050:	fb01 0303 	mla	r3, r1, r3, r0
 8018054:	141b      	asrs	r3, r3, #16
 8018056:	f53f af47 	bmi.w	8017ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801805a:	3a01      	subs	r2, #1
 801805c:	4293      	cmp	r3, r2
 801805e:	f6bf af43 	bge.w	8017ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018062:	9b07      	ldr	r3, [sp, #28]
 8018064:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018068:	f103 0803 	add.w	r8, r3, #3
 801806c:	f1ba 0f00 	cmp.w	sl, #0
 8018070:	dc71      	bgt.n	8018156 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8018072:	9b06      	ldr	r3, [sp, #24]
 8018074:	9a07      	ldr	r2, [sp, #28]
 8018076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801807a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801807e:	441a      	add	r2, r3
 8018080:	9207      	str	r2, [sp, #28]
 8018082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018084:	2b00      	cmp	r3, #0
 8018086:	f340 80f2 	ble.w	801826e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801808a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801808e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018090:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018094:	eeb0 6a62 	vmov.f32	s12, s5
 8018098:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801809c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80180a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80180a4:	ee16 4a10 	vmov	r4, s12
 80180a8:	eeb0 6a43 	vmov.f32	s12, s6
 80180ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80180b0:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 80180b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80180b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80180bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80180c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80180c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80180c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80180cc:	ee12 2a90 	vmov	r2, s5
 80180d0:	eef0 2a47 	vmov.f32	s5, s14
 80180d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80180d8:	ee13 2a10 	vmov	r2, s6
 80180dc:	9319      	str	r3, [sp, #100]	; 0x64
 80180de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80180e0:	eeb0 3a67 	vmov.f32	s6, s15
 80180e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80180e8:	931a      	str	r3, [sp, #104]	; 0x68
 80180ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180ee:	3b01      	subs	r3, #1
 80180f0:	9309      	str	r3, [sp, #36]	; 0x24
 80180f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80180f4:	bf08      	it	eq
 80180f6:	4613      	moveq	r3, r2
 80180f8:	9306      	str	r3, [sp, #24]
 80180fa:	e6cb      	b.n	8017e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80180fc:	b151      	cbz	r1, 8018114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80180fe:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018102:	4660      	mov	r0, ip
 8018104:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018108:	442a      	add	r2, r5
 801810a:	4667      	mov	r7, ip
 801810c:	e731      	b.n	8017f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801810e:	4660      	mov	r0, ip
 8018110:	4662      	mov	r2, ip
 8018112:	e72e      	b.n	8017f72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018114:	4660      	mov	r0, ip
 8018116:	4662      	mov	r2, ip
 8018118:	e7f7      	b.n	801810a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801811a:	f110 0e01 	adds.w	lr, r0, #1
 801811e:	f53f af71 	bmi.w	8018004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018122:	4572      	cmp	r2, lr
 8018124:	f6ff af6e 	blt.w	8018004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018128:	f117 0e01 	adds.w	lr, r7, #1
 801812c:	f53f af6a 	bmi.w	8018004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018130:	45f4      	cmp	ip, lr
 8018132:	f6ff af67 	blt.w	8018004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018136:	b212      	sxth	r2, r2
 8018138:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801813c:	fa0f f38c 	sxth.w	r3, ip
 8018140:	9200      	str	r2, [sp, #0]
 8018142:	4631      	mov	r1, r6
 8018144:	9a08      	ldr	r2, [sp, #32]
 8018146:	9301      	str	r3, [sp, #4]
 8018148:	462b      	mov	r3, r5
 801814a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801814e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018150:	f7ff fde9 	bl	8017d26 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8018154:	e756      	b.n	8018004 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018156:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018158:	1426      	asrs	r6, r4, #16
 801815a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801815c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8018160:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018164:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018166:	1400      	asrs	r0, r0, #16
 8018168:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801816c:	fb02 6000 	mla	r0, r2, r0, r6
 8018170:	9e08      	ldr	r6, [sp, #32]
 8018172:	f816 e000 	ldrb.w	lr, [r6, r0]
 8018176:	eb06 0c00 	add.w	ip, r6, r0
 801817a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801817e:	eb05 070e 	add.w	r7, r5, lr
 8018182:	2b00      	cmp	r3, #0
 8018184:	d064      	beq.n	8018250 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8018186:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801818a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801818e:	442e      	add	r6, r5
 8018190:	2900      	cmp	r1, #0
 8018192:	d066      	beq.n	8018262 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8018194:	eb0c 0002 	add.w	r0, ip, r2
 8018198:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801819c:	7840      	ldrb	r0, [r0, #1]
 801819e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80181a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80181a6:	442a      	add	r2, r5
 80181a8:	4428      	add	r0, r5
 80181aa:	b29b      	uxth	r3, r3
 80181ac:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80181b0:	b289      	uxth	r1, r1
 80181b2:	f896 e000 	ldrb.w	lr, [r6]
 80181b6:	f108 0803 	add.w	r8, r8, #3
 80181ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181be:	fb03 f901 	mul.w	r9, r3, r1
 80181c2:	011b      	lsls	r3, r3, #4
 80181c4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80181c8:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80181cc:	eba3 0309 	sub.w	r3, r3, r9
 80181d0:	b289      	uxth	r1, r1
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	ebac 0c01 	sub.w	ip, ip, r1
 80181d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80181dc:	fa1f fc8c 	uxth.w	ip, ip
 80181e0:	fb0c ee0b 	mla	lr, ip, fp, lr
 80181e4:	f892 b000 	ldrb.w	fp, [r2]
 80181e8:	fb01 ee0b 	mla	lr, r1, fp, lr
 80181ec:	f890 b000 	ldrb.w	fp, [r0]
 80181f0:	fb09 ee0b 	mla	lr, r9, fp, lr
 80181f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80181f8:	f808 ec06 	strb.w	lr, [r8, #-6]
 80181fc:	f896 e001 	ldrb.w	lr, [r6, #1]
 8018200:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018204:	fb03 fe0e 	mul.w	lr, r3, lr
 8018208:	fb0c ee0b 	mla	lr, ip, fp, lr
 801820c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018210:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018214:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018218:	fb09 ee0b 	mla	lr, r9, fp, lr
 801821c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018220:	f808 ec05 	strb.w	lr, [r8, #-5]
 8018224:	78b6      	ldrb	r6, [r6, #2]
 8018226:	78bf      	ldrb	r7, [r7, #2]
 8018228:	4373      	muls	r3, r6
 801822a:	7896      	ldrb	r6, [r2, #2]
 801822c:	7882      	ldrb	r2, [r0, #2]
 801822e:	fb0c 3307 	mla	r3, ip, r7, r3
 8018232:	fb01 3306 	mla	r3, r1, r6, r3
 8018236:	fb09 3902 	mla	r9, r9, r2, r3
 801823a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801823c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801823e:	441c      	add	r4, r3
 8018240:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018242:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018246:	4413      	add	r3, r2
 8018248:	f808 9c04 	strb.w	r9, [r8, #-4]
 801824c:	9318      	str	r3, [sp, #96]	; 0x60
 801824e:	e70d      	b.n	801806c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018250:	b151      	cbz	r1, 8018268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8018252:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018256:	4638      	mov	r0, r7
 8018258:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801825c:	442a      	add	r2, r5
 801825e:	463e      	mov	r6, r7
 8018260:	e7a3      	b.n	80181aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018262:	4638      	mov	r0, r7
 8018264:	463a      	mov	r2, r7
 8018266:	e7a0      	b.n	80181aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018268:	4638      	mov	r0, r7
 801826a:	463a      	mov	r2, r7
 801826c:	e7f7      	b.n	801825e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801826e:	b00d      	add	sp, #52	; 0x34
 8018270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018274 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8018274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018278:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801827c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8018280:	2d00      	cmp	r5, #0
 8018282:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8018286:	fb05 700c 	mla	r0, r5, ip, r7
 801828a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801828e:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8018292:	eb02 0800 	add.w	r8, r2, r0
 8018296:	f2c0 8118 	blt.w	80184ca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801829a:	45a9      	cmp	r9, r5
 801829c:	f340 8115 	ble.w	80184ca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80182a0:	2f00      	cmp	r7, #0
 80182a2:	f2c0 8110 	blt.w	80184c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80182a6:	45bc      	cmp	ip, r7
 80182a8:	f340 810d 	ble.w	80184c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80182ac:	5c12      	ldrb	r2, [r2, r0]
 80182ae:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80182b2:	1c7a      	adds	r2, r7, #1
 80182b4:	f100 810c 	bmi.w	80184d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80182b8:	4594      	cmp	ip, r2
 80182ba:	f340 8109 	ble.w	80184d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80182be:	2c00      	cmp	r4, #0
 80182c0:	f000 8108 	beq.w	80184d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 80182c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80182c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80182cc:	3501      	adds	r5, #1
 80182ce:	f100 8105 	bmi.w	80184dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 80182d2:	45a9      	cmp	r9, r5
 80182d4:	f340 8102 	ble.w	80184dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 80182d8:	f1be 0f00 	cmp.w	lr, #0
 80182dc:	f000 8101 	beq.w	80184e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 80182e0:	2f00      	cmp	r7, #0
 80182e2:	f2c0 80f9 	blt.w	80184d8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80182e6:	45bc      	cmp	ip, r7
 80182e8:	f340 80f6 	ble.w	80184d8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80182ec:	f818 200c 	ldrb.w	r2, [r8, ip]
 80182f0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80182f4:	3701      	adds	r7, #1
 80182f6:	f100 80f7 	bmi.w	80184e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 80182fa:	45bc      	cmp	ip, r7
 80182fc:	f340 80f4 	ble.w	80184e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8018300:	2c00      	cmp	r4, #0
 8018302:	f000 80f3 	beq.w	80184ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8018306:	44c4      	add	ip, r8
 8018308:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801830c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018310:	fa1f fc84 	uxth.w	ip, r4
 8018314:	fa1f f48e 	uxth.w	r4, lr
 8018318:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801831c:	fb04 fe0c 	mul.w	lr, r4, ip
 8018320:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8018324:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8018328:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801832c:	ebac 070e 	sub.w	r7, ip, lr
 8018330:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8018334:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018338:	b2a4      	uxth	r4, r4
 801833a:	b2bf      	uxth	r7, r7
 801833c:	1b1b      	subs	r3, r3, r4
 801833e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8018342:	fb07 fc0a 	mul.w	ip, r7, sl
 8018346:	b29b      	uxth	r3, r3
 8018348:	fb03 cc0b 	mla	ip, r3, fp, ip
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	fb04 cc09 	mla	ip, r4, r9, ip
 8018352:	fb0e cc08 	mla	ip, lr, r8, ip
 8018356:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801835a:	9301      	str	r3, [sp, #4]
 801835c:	2b00      	cmp	r3, #0
 801835e:	f000 80af 	beq.w	80184c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8018362:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018366:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801836a:	fb0b fc0c 	mul.w	ip, fp, ip
 801836e:	fb0b f606 	mul.w	r6, fp, r6
 8018372:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8018376:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801837a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801837e:	44dc      	add	ip, fp
 8018380:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8018384:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018388:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801838c:	fb0a fb0b 	mul.w	fp, sl, fp
 8018390:	fb0a fa00 	mul.w	sl, sl, r0
 8018394:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8018398:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801839c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80183a0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80183a4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80183a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80183ac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80183b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183b4:	0a36      	lsrs	r6, r6, #8
 80183b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80183ba:	44dc      	add	ip, fp
 80183bc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80183c0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80183c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80183c8:	fb09 fb0b 	mul.w	fp, r9, fp
 80183cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80183d0:	fb09 f905 	mul.w	r9, r9, r5
 80183d4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80183d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183dc:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80183e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80183e4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80183e8:	fb0c fc07 	mul.w	ip, ip, r7
 80183ec:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80183f0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80183f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80183f8:	4458      	add	r0, fp
 80183fa:	fb08 f505 	mul.w	r5, r8, r5
 80183fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018402:	fb08 f802 	mul.w	r8, r8, r2
 8018406:	0a00      	lsrs	r0, r0, #8
 8018408:	0a2a      	lsrs	r2, r5, #8
 801840a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801840e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018412:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018416:	4415      	add	r5, r2
 8018418:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801841c:	0a2d      	lsrs	r5, r5, #8
 801841e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018422:	9a00      	ldr	r2, [sp, #0]
 8018424:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018428:	fb03 cc02 	mla	ip, r3, r2, ip
 801842c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018430:	9b01      	ldr	r3, [sp, #4]
 8018432:	fb05 c50e 	mla	r5, r5, lr, ip
 8018436:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801843a:	fb00 5004 	mla	r0, r0, r4, r5
 801843e:	0a00      	lsrs	r0, r0, #8
 8018440:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8018444:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8018448:	4378      	muls	r0, r7
 801844a:	fb02 0006 	mla	r0, r2, r6, r0
 801844e:	fb0e 0e08 	mla	lr, lr, r8, r0
 8018452:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8018456:	fb04 e000 	mla	r0, r4, r0, lr
 801845a:	0a00      	lsrs	r0, r0, #8
 801845c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018460:	4328      	orrs	r0, r5
 8018462:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018466:	b2ad      	uxth	r5, r5
 8018468:	b2c4      	uxtb	r4, r0
 801846a:	436b      	muls	r3, r5
 801846c:	fb14 f405 	smulbb	r4, r4, r5
 8018470:	1c5a      	adds	r2, r3, #1
 8018472:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018476:	780b      	ldrb	r3, [r1, #0]
 8018478:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801847c:	b2d2      	uxtb	r2, r2
 801847e:	fb03 4302 	mla	r3, r3, r2, r4
 8018482:	b29b      	uxth	r3, r3
 8018484:	1c5c      	adds	r4, r3, #1
 8018486:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801848a:	784c      	ldrb	r4, [r1, #1]
 801848c:	fb14 f402 	smulbb	r4, r4, r2
 8018490:	121b      	asrs	r3, r3, #8
 8018492:	700b      	strb	r3, [r1, #0]
 8018494:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8018498:	fb03 4305 	mla	r3, r3, r5, r4
 801849c:	b29b      	uxth	r3, r3
 801849e:	1c5c      	adds	r4, r3, #1
 80184a0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80184a4:	0c04      	lsrs	r4, r0, #16
 80184a6:	7888      	ldrb	r0, [r1, #2]
 80184a8:	121b      	asrs	r3, r3, #8
 80184aa:	fb10 f002 	smulbb	r0, r0, r2
 80184ae:	704b      	strb	r3, [r1, #1]
 80184b0:	fb04 0005 	mla	r0, r4, r5, r0
 80184b4:	b280      	uxth	r0, r0
 80184b6:	1c43      	adds	r3, r0, #1
 80184b8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80184bc:	1200      	asrs	r0, r0, #8
 80184be:	7088      	strb	r0, [r1, #2]
 80184c0:	b003      	add	sp, #12
 80184c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184c6:	2600      	movs	r6, #0
 80184c8:	e6f3      	b.n	80182b2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80184ca:	2000      	movs	r0, #0
 80184cc:	4606      	mov	r6, r0
 80184ce:	e6fd      	b.n	80182cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80184d0:	2000      	movs	r0, #0
 80184d2:	e6fb      	b.n	80182cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80184d4:	4620      	mov	r0, r4
 80184d6:	e6f9      	b.n	80182cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80184d8:	2500      	movs	r5, #0
 80184da:	e70b      	b.n	80182f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 80184dc:	2200      	movs	r2, #0
 80184de:	4615      	mov	r5, r2
 80184e0:	e716      	b.n	8018310 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80184e2:	4672      	mov	r2, lr
 80184e4:	4675      	mov	r5, lr
 80184e6:	e713      	b.n	8018310 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80184e8:	2200      	movs	r2, #0
 80184ea:	e711      	b.n	8018310 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80184ec:	4622      	mov	r2, r4
 80184ee:	e70f      	b.n	8018310 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080184f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f4:	b09f      	sub	sp, #124	; 0x7c
 80184f6:	921b      	str	r2, [sp, #108]	; 0x6c
 80184f8:	9309      	str	r3, [sp, #36]	; 0x24
 80184fa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80184fc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018500:	901d      	str	r0, [sp, #116]	; 0x74
 8018502:	931c      	str	r3, [sp, #112]	; 0x70
 8018504:	6850      	ldr	r0, [r2, #4]
 8018506:	9119      	str	r1, [sp, #100]	; 0x64
 8018508:	6812      	ldr	r2, [r2, #0]
 801850a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801850c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018510:	fb00 1303 	mla	r3, r0, r3, r1
 8018514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018518:	18d3      	adds	r3, r2, r3
 801851a:	930c      	str	r3, [sp, #48]	; 0x30
 801851c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	9312      	str	r3, [sp, #72]	; 0x48
 8018522:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018524:	685e      	ldr	r6, [r3, #4]
 8018526:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801852a:	3604      	adds	r6, #4
 801852c:	930d      	str	r3, [sp, #52]	; 0x34
 801852e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018530:	2b00      	cmp	r3, #0
 8018532:	dc03      	bgt.n	801853c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018536:	2b00      	cmp	r3, #0
 8018538:	f340 8378 	ble.w	8018c2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801853c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801853e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018542:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018546:	1e48      	subs	r0, r1, #1
 8018548:	1e57      	subs	r7, r2, #1
 801854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854c:	2b00      	cmp	r3, #0
 801854e:	f340 818c 	ble.w	801886a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8018552:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8018554:	142b      	asrs	r3, r5, #16
 8018556:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801855a:	d406      	bmi.n	801856a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801855c:	4584      	cmp	ip, r0
 801855e:	da04      	bge.n	801856a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018560:	2b00      	cmp	r3, #0
 8018562:	db02      	blt.n	801856a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018564:	42bb      	cmp	r3, r7
 8018566:	f2c0 8181 	blt.w	801886c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801856a:	f11c 0c01 	adds.w	ip, ip, #1
 801856e:	f100 816f 	bmi.w	8018850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8018572:	4561      	cmp	r1, ip
 8018574:	f2c0 816c 	blt.w	8018850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8018578:	3301      	adds	r3, #1
 801857a:	f100 8169 	bmi.w	8018850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801857e:	429a      	cmp	r2, r3
 8018580:	f2c0 8166 	blt.w	8018850 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8018584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018586:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018588:	931a      	str	r3, [sp, #104]	; 0x68
 801858a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801858c:	2b00      	cmp	r3, #0
 801858e:	f340 818c 	ble.w	80188aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8018592:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018594:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018598:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801859c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80185a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80185a2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80185a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80185a8:	141b      	asrs	r3, r3, #16
 80185aa:	f100 81d0 	bmi.w	801894e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80185ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80185b2:	4543      	cmp	r3, r8
 80185b4:	f280 81cb 	bge.w	801894e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80185b8:	f1bc 0f00 	cmp.w	ip, #0
 80185bc:	f2c0 81c7 	blt.w	801894e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80185c0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80185c4:	45c4      	cmp	ip, r8
 80185c6:	f280 81c2 	bge.w	801894e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80185ca:	b200      	sxth	r0, r0
 80185cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80185ce:	fb0c 3300 	mla	r3, ip, r0, r3
 80185d2:	eb04 0803 	add.w	r8, r4, r3
 80185d6:	5ce3      	ldrb	r3, [r4, r3]
 80185d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80185dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80185e0:	2a00      	cmp	r2, #0
 80185e2:	f000 81a9 	beq.w	8018938 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80185e6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80185ea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80185ee:	940e      	str	r4, [sp, #56]	; 0x38
 80185f0:	0e24      	lsrs	r4, r4, #24
 80185f2:	9415      	str	r4, [sp, #84]	; 0x54
 80185f4:	b179      	cbz	r1, 8018616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80185f6:	eb08 0c00 	add.w	ip, r8, r0
 80185fa:	f818 0000 	ldrb.w	r0, [r8, r0]
 80185fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018602:	900a      	str	r0, [sp, #40]	; 0x28
 8018604:	0e00      	lsrs	r0, r0, #24
 8018606:	9013      	str	r0, [sp, #76]	; 0x4c
 8018608:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801860c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018610:	900f      	str	r0, [sp, #60]	; 0x3c
 8018612:	0e00      	lsrs	r0, r0, #24
 8018614:	9016      	str	r0, [sp, #88]	; 0x58
 8018616:	b292      	uxth	r2, r2
 8018618:	9815      	ldr	r0, [sp, #84]	; 0x54
 801861a:	b289      	uxth	r1, r1
 801861c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801861e:	fb02 f901 	mul.w	r9, r2, r1
 8018622:	0112      	lsls	r2, r2, #4
 8018624:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018628:	eba2 0809 	sub.w	r8, r2, r9
 801862c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018630:	b289      	uxth	r1, r1
 8018632:	fa1f f888 	uxth.w	r8, r8
 8018636:	1a52      	subs	r2, r2, r1
 8018638:	fb08 f000 	mul.w	r0, r8, r0
 801863c:	b292      	uxth	r2, r2
 801863e:	fb02 000e 	mla	r0, r2, lr, r0
 8018642:	fb01 0004 	mla	r0, r1, r4, r0
 8018646:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018648:	fb09 0004 	mla	r0, r9, r4, r0
 801864c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018650:	2800      	cmp	r0, #0
 8018652:	f000 80f2 	beq.w	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018656:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801865a:	d01b      	beq.n	8018694 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801865c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018660:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018664:	fb0e fa0a 	mul.w	sl, lr, sl
 8018668:	fb0e fe03 	mul.w	lr, lr, r3
 801866c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018670:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018674:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018678:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801867c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8018680:	4453      	add	r3, sl
 8018682:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018686:	0a1b      	lsrs	r3, r3, #8
 8018688:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801868c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018690:	ea43 030c 	orr.w	r3, r3, ip
 8018694:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018696:	2cff      	cmp	r4, #255	; 0xff
 8018698:	d021      	beq.n	80186de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801869a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801869c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80186a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80186a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80186a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80186a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80186ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80186ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80186b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80186b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80186ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80186c2:	44de      	add	lr, fp
 80186c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80186c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80186cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80186d8:	ea4e 040a 	orr.w	r4, lr, sl
 80186dc:	940e      	str	r4, [sp, #56]	; 0x38
 80186de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80186e0:	2cff      	cmp	r4, #255	; 0xff
 80186e2:	d021      	beq.n	8018728 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80186e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80186e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80186ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80186ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80186f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80186f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80186f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80186f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80186fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018700:	fb04 fa0a 	mul.w	sl, r4, sl
 8018704:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018708:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801870c:	44de      	add	lr, fp
 801870e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018712:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018716:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801871a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801871e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018722:	ea4e 040a 	orr.w	r4, lr, sl
 8018726:	940a      	str	r4, [sp, #40]	; 0x28
 8018728:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801872a:	2cff      	cmp	r4, #255	; 0xff
 801872c:	d021      	beq.n	8018772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801872e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018730:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018734:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018736:	fb04 fb0b 	mul.w	fp, r4, fp
 801873a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801873c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018740:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8018742:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018746:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801874a:	fb04 fa0a 	mul.w	sl, r4, sl
 801874e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018752:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018756:	44de      	add	lr, fp
 8018758:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801875c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018764:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018768:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801876c:	ea4e 040a 	orr.w	r4, lr, sl
 8018770:	940f      	str	r4, [sp, #60]	; 0x3c
 8018772:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018774:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018778:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801877c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018780:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018782:	fb08 fc0c 	mul.w	ip, r8, ip
 8018786:	fb02 cc0e 	mla	ip, r2, lr, ip
 801878a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801878e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018790:	fb01 cc0e 	mla	ip, r1, lr, ip
 8018794:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018798:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801879a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801879e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80187a2:	fb08 f80e 	mul.w	r8, r8, lr
 80187a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80187aa:	fb02 8303 	mla	r3, r2, r3, r8
 80187ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80187b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80187b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187ba:	fb01 330a 	mla	r3, r1, sl, r3
 80187be:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80187c2:	fb09 3901 	mla	r9, r9, r1, r3
 80187c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80187ca:	4343      	muls	r3, r0
 80187cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80187d0:	1c58      	adds	r0, r3, #1
 80187d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80187d6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80187da:	ea4c 0c09 	orr.w	ip, ip, r9
 80187de:	783b      	ldrb	r3, [r7, #0]
 80187e0:	fa5f f28c 	uxtb.w	r2, ip
 80187e4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80187e8:	fb12 f201 	smulbb	r2, r2, r1
 80187ec:	b2c0      	uxtb	r0, r0
 80187ee:	fb03 2300 	mla	r3, r3, r0, r2
 80187f2:	b29b      	uxth	r3, r3
 80187f4:	1c5a      	adds	r2, r3, #1
 80187f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80187fa:	787a      	ldrb	r2, [r7, #1]
 80187fc:	fb12 f200 	smulbb	r2, r2, r0
 8018800:	121b      	asrs	r3, r3, #8
 8018802:	703b      	strb	r3, [r7, #0]
 8018804:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018808:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801880c:	fb03 2301 	mla	r3, r3, r1, r2
 8018810:	b29b      	uxth	r3, r3
 8018812:	1c5a      	adds	r2, r3, #1
 8018814:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018818:	121b      	asrs	r3, r3, #8
 801881a:	707b      	strb	r3, [r7, #1]
 801881c:	78bb      	ldrb	r3, [r7, #2]
 801881e:	fb13 f000 	smulbb	r0, r3, r0
 8018822:	fb0c 0c01 	mla	ip, ip, r1, r0
 8018826:	fa1f fc8c 	uxth.w	ip, ip
 801882a:	f10c 0301 	add.w	r3, ip, #1
 801882e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8018832:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018836:	f887 c002 	strb.w	ip, [r7, #2]
 801883a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801883c:	3703      	adds	r7, #3
 801883e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018840:	441a      	add	r2, r3
 8018842:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018844:	441d      	add	r5, r3
 8018846:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018848:	9229      	str	r2, [sp, #164]	; 0xa4
 801884a:	3b01      	subs	r3, #1
 801884c:	931a      	str	r3, [sp, #104]	; 0x68
 801884e:	e69c      	b.n	801858a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018850:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018852:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8018854:	441c      	add	r4, r3
 8018856:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018858:	441d      	add	r5, r3
 801885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801885c:	9429      	str	r4, [sp, #164]	; 0xa4
 801885e:	3b01      	subs	r3, #1
 8018860:	9309      	str	r3, [sp, #36]	; 0x24
 8018862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018864:	3303      	adds	r3, #3
 8018866:	930c      	str	r3, [sp, #48]	; 0x30
 8018868:	e66f      	b.n	801854a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801886a:	d026      	beq.n	80188ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801886c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801886e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8018870:	3b01      	subs	r3, #1
 8018872:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8018874:	fb00 4003 	mla	r0, r0, r3, r4
 8018878:	1400      	asrs	r0, r0, #16
 801887a:	f53f ae83 	bmi.w	8018584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801887e:	3901      	subs	r1, #1
 8018880:	4288      	cmp	r0, r1
 8018882:	f6bf ae7f 	bge.w	8018584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018886:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018888:	fb01 5303 	mla	r3, r1, r3, r5
 801888c:	141b      	asrs	r3, r3, #16
 801888e:	f53f ae79 	bmi.w	8018584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018892:	3a01      	subs	r2, #1
 8018894:	4293      	cmp	r3, r2
 8018896:	f6bf ae75 	bge.w	8018584 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801889a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801889c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80188a0:	f103 0e03 	add.w	lr, r3, #3
 80188a4:	f1bb 0f00 	cmp.w	fp, #0
 80188a8:	dc71      	bgt.n	801898e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80188aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80188b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80188b6:	4423      	add	r3, r4
 80188b8:	930c      	str	r3, [sp, #48]	; 0x30
 80188ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80188bc:	2b00      	cmp	r3, #0
 80188be:	f340 81b5 	ble.w	8018c2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80188c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80188c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80188cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80188d0:	eef0 6a62 	vmov.f32	s13, s5
 80188d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80188d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80188dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80188e0:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80188e4:	eef0 6a43 	vmov.f32	s13, s6
 80188e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80188ec:	ee16 5a90 	vmov	r5, s13
 80188f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80188f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80188f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80188fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018904:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018908:	ee12 2a90 	vmov	r2, s5
 801890c:	eef0 2a47 	vmov.f32	s5, s14
 8018910:	fb92 f3f3 	sdiv	r3, r2, r3
 8018914:	ee13 2a10 	vmov	r2, s6
 8018918:	932b      	str	r3, [sp, #172]	; 0xac
 801891a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801891c:	eeb0 3a67 	vmov.f32	s6, s15
 8018920:	fb92 f3f3 	sdiv	r3, r2, r3
 8018924:	932c      	str	r3, [sp, #176]	; 0xb0
 8018926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018928:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801892a:	3b01      	subs	r3, #1
 801892c:	9319      	str	r3, [sp, #100]	; 0x64
 801892e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018930:	bf08      	it	eq
 8018932:	4613      	moveq	r3, r2
 8018934:	9309      	str	r3, [sp, #36]	; 0x24
 8018936:	e5fa      	b.n	801852e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018938:	2900      	cmp	r1, #0
 801893a:	f43f ae6c 	beq.w	8018616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801893e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8018942:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018946:	900a      	str	r0, [sp, #40]	; 0x28
 8018948:	0e00      	lsrs	r0, r0, #24
 801894a:	9013      	str	r0, [sp, #76]	; 0x4c
 801894c:	e663      	b.n	8018616 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801894e:	f113 0801 	adds.w	r8, r3, #1
 8018952:	f53f af72 	bmi.w	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018956:	4540      	cmp	r0, r8
 8018958:	f6ff af6f 	blt.w	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801895c:	f11c 0801 	adds.w	r8, ip, #1
 8018960:	f53f af6b 	bmi.w	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018964:	45c6      	cmp	lr, r8
 8018966:	f6ff af68 	blt.w	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801896a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801896c:	b200      	sxth	r0, r0
 801896e:	9302      	str	r3, [sp, #8]
 8018970:	fa0f f38e 	sxth.w	r3, lr
 8018974:	9000      	str	r0, [sp, #0]
 8018976:	9301      	str	r3, [sp, #4]
 8018978:	4633      	mov	r3, r6
 801897a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801897c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8018980:	e9cd c203 	strd	ip, r2, [sp, #12]
 8018984:	4639      	mov	r1, r7
 8018986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018988:	f7ff fc74 	bl	8018274 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801898c:	e755      	b.n	801883a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801898e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018990:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018994:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8018996:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801899a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801899c:	1427      	asrs	r7, r4, #16
 801899e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80189a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80189a4:	142b      	asrs	r3, r5, #16
 80189a6:	fb01 7303 	mla	r3, r1, r3, r7
 80189aa:	18e7      	adds	r7, r4, r3
 80189ac:	5ce3      	ldrb	r3, [r4, r3]
 80189ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80189b2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80189b6:	2a00      	cmp	r2, #0
 80189b8:	f000 812e 	beq.w	8018c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80189bc:	f897 8001 	ldrb.w	r8, [r7, #1]
 80189c0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80189c4:	9410      	str	r4, [sp, #64]	; 0x40
 80189c6:	0e24      	lsrs	r4, r4, #24
 80189c8:	9417      	str	r4, [sp, #92]	; 0x5c
 80189ca:	b170      	cbz	r0, 80189ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80189cc:	eb07 0801 	add.w	r8, r7, r1
 80189d0:	5c79      	ldrb	r1, [r7, r1]
 80189d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80189d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80189d8:	0e09      	lsrs	r1, r1, #24
 80189da:	9114      	str	r1, [sp, #80]	; 0x50
 80189dc:	f898 1001 	ldrb.w	r1, [r8, #1]
 80189e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80189e4:	9111      	str	r1, [sp, #68]	; 0x44
 80189e6:	0e09      	lsrs	r1, r1, #24
 80189e8:	9118      	str	r1, [sp, #96]	; 0x60
 80189ea:	b292      	uxth	r2, r2
 80189ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80189ee:	b280      	uxth	r0, r0
 80189f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80189f2:	fb02 f900 	mul.w	r9, r2, r0
 80189f6:	0112      	lsls	r2, r2, #4
 80189f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80189fc:	eba2 0809 	sub.w	r8, r2, r9
 8018a00:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018a04:	b280      	uxth	r0, r0
 8018a06:	fa1f f888 	uxth.w	r8, r8
 8018a0a:	1a12      	subs	r2, r2, r0
 8018a0c:	fb08 f101 	mul.w	r1, r8, r1
 8018a10:	b292      	uxth	r2, r2
 8018a12:	fb02 110c 	mla	r1, r2, ip, r1
 8018a16:	fb00 1104 	mla	r1, r0, r4, r1
 8018a1a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018a1c:	fb09 1104 	mla	r1, r9, r4, r1
 8018a20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018a24:	2900      	cmp	r1, #0
 8018a26:	f000 80ec 	beq.w	8018c02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8018a2a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018a2e:	d019      	beq.n	8018a64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8018a30:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018a34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a38:	fb0c fa0a 	mul.w	sl, ip, sl
 8018a3c:	fb0c fc03 	mul.w	ip, ip, r3
 8018a40:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018a44:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018a48:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8018a4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018a50:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018a54:	4453      	add	r3, sl
 8018a56:	0a3f      	lsrs	r7, r7, #8
 8018a58:	0a1b      	lsrs	r3, r3, #8
 8018a5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018a5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018a62:	433b      	orrs	r3, r7
 8018a64:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018a66:	2cff      	cmp	r4, #255	; 0xff
 8018a68:	d020      	beq.n	8018aac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8018a6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018a6c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018a70:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018a72:	4367      	muls	r7, r4
 8018a74:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018a76:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018a7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018a7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018a80:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018a84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a88:	fb04 fa0a 	mul.w	sl, r4, sl
 8018a8c:	44bc      	add	ip, r7
 8018a8e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018a92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018a9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018aa2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018aa6:	ea4c 040a 	orr.w	r4, ip, sl
 8018aaa:	9410      	str	r4, [sp, #64]	; 0x40
 8018aac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018aae:	2cff      	cmp	r4, #255	; 0xff
 8018ab0:	d020      	beq.n	8018af4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8018ab2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018ab4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018ab8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018aba:	4367      	muls	r7, r4
 8018abc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018abe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018ac2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018ac6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018ac8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018acc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ad0:	fb04 fa0a 	mul.w	sl, r4, sl
 8018ad4:	44bc      	add	ip, r7
 8018ad6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018ada:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018ade:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018ae2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018ae6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018aea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018aee:	ea4c 040a 	orr.w	r4, ip, sl
 8018af2:	940b      	str	r4, [sp, #44]	; 0x2c
 8018af4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018af6:	2cff      	cmp	r4, #255	; 0xff
 8018af8:	d020      	beq.n	8018b3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8018afa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018afc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018b00:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018b02:	4367      	muls	r7, r4
 8018b04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018b06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018b0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018b0e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018b10:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018b14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b18:	fb04 fa0a 	mul.w	sl, r4, sl
 8018b1c:	44bc      	add	ip, r7
 8018b1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018b22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018b26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018b2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018b2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018b32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018b36:	ea4c 040a 	orr.w	r4, ip, sl
 8018b3a:	9411      	str	r4, [sp, #68]	; 0x44
 8018b3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b3e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018b46:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018b4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018b4c:	fb08 f707 	mul.w	r7, r8, r7
 8018b50:	fb02 770c 	mla	r7, r2, ip, r7
 8018b54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018b58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018b5a:	fb00 770c 	mla	r7, r0, ip, r7
 8018b5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018b62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018b64:	fb09 770c 	mla	r7, r9, ip, r7
 8018b68:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018b6c:	fb08 f80c 	mul.w	r8, r8, ip
 8018b70:	0a3f      	lsrs	r7, r7, #8
 8018b72:	fb02 8303 	mla	r3, r2, r3, r8
 8018b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018b7c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8018b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018b82:	fb00 330a 	mla	r3, r0, sl, r3
 8018b86:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018b8c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018b96:	434b      	muls	r3, r1
 8018b98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018b9c:	1c59      	adds	r1, r3, #1
 8018b9e:	ea47 070c 	orr.w	r7, r7, ip
 8018ba2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018ba6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018baa:	b2fa      	uxtb	r2, r7
 8018bac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8018bb0:	fb12 f200 	smulbb	r2, r2, r0
 8018bb4:	b2c9      	uxtb	r1, r1
 8018bb6:	fb03 2301 	mla	r3, r3, r1, r2
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	1c5a      	adds	r2, r3, #1
 8018bbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018bc2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018bc6:	fb12 f201 	smulbb	r2, r2, r1
 8018bca:	121b      	asrs	r3, r3, #8
 8018bcc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018bd0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018bd4:	0c3f      	lsrs	r7, r7, #16
 8018bd6:	fb03 2300 	mla	r3, r3, r0, r2
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	1c5a      	adds	r2, r3, #1
 8018bde:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018be2:	121b      	asrs	r3, r3, #8
 8018be4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018be8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018bec:	fb13 f101 	smulbb	r1, r3, r1
 8018bf0:	fb07 1700 	mla	r7, r7, r0, r1
 8018bf4:	b2bf      	uxth	r7, r7
 8018bf6:	1c7b      	adds	r3, r7, #1
 8018bf8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018bfc:	123f      	asrs	r7, r7, #8
 8018bfe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018c02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018c04:	f10e 0e03 	add.w	lr, lr, #3
 8018c08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018c0e:	441a      	add	r2, r3
 8018c10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018c12:	9229      	str	r2, [sp, #164]	; 0xa4
 8018c14:	441d      	add	r5, r3
 8018c16:	e645      	b.n	80188a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	f43f aee6 	beq.w	80189ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018c1e:	5c79      	ldrb	r1, [r7, r1]
 8018c20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018c24:	910b      	str	r1, [sp, #44]	; 0x2c
 8018c26:	0e09      	lsrs	r1, r1, #24
 8018c28:	9114      	str	r1, [sp, #80]	; 0x50
 8018c2a:	e6de      	b.n	80189ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8018c2c:	b01f      	add	sp, #124	; 0x7c
 8018c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8018c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c36:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8018c3a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8018c3e:	2d00      	cmp	r5, #0
 8018c40:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8018c44:	fb05 700e 	mla	r0, r5, lr, r7
 8018c48:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018c4c:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8018c50:	eb02 0800 	add.w	r8, r2, r0
 8018c54:	f2c0 8105 	blt.w	8018e62 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018c58:	45a9      	cmp	r9, r5
 8018c5a:	f340 8102 	ble.w	8018e62 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8018c5e:	2f00      	cmp	r7, #0
 8018c60:	f2c0 80fd 	blt.w	8018e5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8018c64:	45be      	cmp	lr, r7
 8018c66:	f340 80fa 	ble.w	8018e5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8018c6a:	5c12      	ldrb	r2, [r2, r0]
 8018c6c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018c70:	1c7a      	adds	r2, r7, #1
 8018c72:	f100 80f9 	bmi.w	8018e68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8018c76:	4596      	cmp	lr, r2
 8018c78:	f340 80f6 	ble.w	8018e68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8018c7c:	2c00      	cmp	r4, #0
 8018c7e:	f000 80f5 	beq.w	8018e6c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8018c82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018c86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018c8a:	3501      	adds	r5, #1
 8018c8c:	f100 80f2 	bmi.w	8018e74 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8018c90:	45a9      	cmp	r9, r5
 8018c92:	f340 80ef 	ble.w	8018e74 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8018c96:	f1bc 0f00 	cmp.w	ip, #0
 8018c9a:	f000 80ee 	beq.w	8018e7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8018c9e:	2f00      	cmp	r7, #0
 8018ca0:	f2c0 80e6 	blt.w	8018e70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018ca4:	45be      	cmp	lr, r7
 8018ca6:	f340 80e3 	ble.w	8018e70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018caa:	f818 200e 	ldrb.w	r2, [r8, lr]
 8018cae:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018cb2:	3701      	adds	r7, #1
 8018cb4:	f100 80e4 	bmi.w	8018e80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8018cb8:	45be      	cmp	lr, r7
 8018cba:	f340 80e1 	ble.w	8018e80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8018cbe:	2c00      	cmp	r4, #0
 8018cc0:	f000 80e0 	beq.w	8018e84 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8018cc4:	44c6      	add	lr, r8
 8018cc6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018cce:	b2a3      	uxth	r3, r4
 8018cd0:	fa1f fc8c 	uxth.w	ip, ip
 8018cd4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8018cd8:	fb0c fe03 	mul.w	lr, ip, r3
 8018cdc:	011b      	lsls	r3, r3, #4
 8018cde:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8018ce2:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8018ce6:	eba3 070e 	sub.w	r7, r3, lr
 8018cea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018cee:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018cf2:	fa1f f48c 	uxth.w	r4, ip
 8018cf6:	b2bf      	uxth	r7, r7
 8018cf8:	1b1b      	subs	r3, r3, r4
 8018cfa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8018cfe:	fb07 fc0a 	mul.w	ip, r7, sl
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	fb03 cc0b 	mla	ip, r3, fp, ip
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	fb04 cc09 	mla	ip, r4, r9, ip
 8018d0e:	fb0e cc08 	mla	ip, lr, r8, ip
 8018d12:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018d16:	9301      	str	r3, [sp, #4]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	f000 809d 	beq.w	8018e58 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8018d1e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018d22:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018d26:	fb0b fc0c 	mul.w	ip, fp, ip
 8018d2a:	fb0b f606 	mul.w	r6, fp, r6
 8018d2e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8018d32:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018d36:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8018d3a:	44dc      	add	ip, fp
 8018d3c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8018d40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018d44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d48:	fb0a fb0b 	mul.w	fp, sl, fp
 8018d4c:	fb0a fa00 	mul.w	sl, sl, r0
 8018d50:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8018d54:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8018d58:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8018d5c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8018d60:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8018d64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018d68:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8018d6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018d70:	0a36      	lsrs	r6, r6, #8
 8018d72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d76:	44dc      	add	ip, fp
 8018d78:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8018d7c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8018d80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018d84:	fb09 fb0b 	mul.w	fp, r9, fp
 8018d88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018d8c:	fb09 f905 	mul.w	r9, r9, r5
 8018d90:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8018d94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018d98:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8018d9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018da0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018da4:	fb0c fc07 	mul.w	ip, ip, r7
 8018da8:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8018dac:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8018db0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018db4:	4458      	add	r0, fp
 8018db6:	fb08 f505 	mul.w	r5, r8, r5
 8018dba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018dbe:	fb08 f802 	mul.w	r8, r8, r2
 8018dc2:	0a00      	lsrs	r0, r0, #8
 8018dc4:	0a2a      	lsrs	r2, r5, #8
 8018dc6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8018dca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018dce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018dd2:	4415      	add	r5, r2
 8018dd4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8018dd8:	0a2d      	lsrs	r5, r5, #8
 8018dda:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018dde:	9a00      	ldr	r2, [sp, #0]
 8018de0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018de4:	fb03 cc02 	mla	ip, r3, r2, ip
 8018de8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018dec:	9b01      	ldr	r3, [sp, #4]
 8018dee:	fb05 c50e 	mla	r5, r5, lr, ip
 8018df2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018df6:	43db      	mvns	r3, r3
 8018df8:	fb00 5004 	mla	r0, r0, r4, r5
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	0a00      	lsrs	r0, r0, #8
 8018e00:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8018e04:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8018e08:	4378      	muls	r0, r7
 8018e0a:	fb02 0006 	mla	r0, r2, r6, r0
 8018e0e:	780a      	ldrb	r2, [r1, #0]
 8018e10:	fb0e 0e08 	mla	lr, lr, r8, r0
 8018e14:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8018e18:	fb04 e000 	mla	r0, r4, r0, lr
 8018e1c:	fb02 f403 	mul.w	r4, r2, r3
 8018e20:	0a00      	lsrs	r0, r0, #8
 8018e22:	1c62      	adds	r2, r4, #1
 8018e24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018e28:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018e2c:	4328      	orrs	r0, r5
 8018e2e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018e32:	700a      	strb	r2, [r1, #0]
 8018e34:	784a      	ldrb	r2, [r1, #1]
 8018e36:	435a      	muls	r2, r3
 8018e38:	1c54      	adds	r4, r2, #1
 8018e3a:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018e3e:	0a02      	lsrs	r2, r0, #8
 8018e40:	0c00      	lsrs	r0, r0, #16
 8018e42:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018e46:	704a      	strb	r2, [r1, #1]
 8018e48:	788a      	ldrb	r2, [r1, #2]
 8018e4a:	4353      	muls	r3, r2
 8018e4c:	1c5a      	adds	r2, r3, #1
 8018e4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018e52:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018e56:	7088      	strb	r0, [r1, #2]
 8018e58:	b003      	add	sp, #12
 8018e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5e:	2600      	movs	r6, #0
 8018e60:	e706      	b.n	8018c70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8018e62:	2000      	movs	r0, #0
 8018e64:	4606      	mov	r6, r0
 8018e66:	e710      	b.n	8018c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018e68:	2000      	movs	r0, #0
 8018e6a:	e70e      	b.n	8018c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	e70c      	b.n	8018c8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8018e70:	2500      	movs	r5, #0
 8018e72:	e71e      	b.n	8018cb2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8018e74:	2200      	movs	r2, #0
 8018e76:	4615      	mov	r5, r2
 8018e78:	e729      	b.n	8018cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018e7a:	4662      	mov	r2, ip
 8018e7c:	4665      	mov	r5, ip
 8018e7e:	e726      	b.n	8018cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018e80:	2200      	movs	r2, #0
 8018e82:	e724      	b.n	8018cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8018e84:	4622      	mov	r2, r4
 8018e86:	e722      	b.n	8018cce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08018e88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e8c:	b09b      	sub	sp, #108	; 0x6c
 8018e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e92:	9218      	str	r2, [sp, #96]	; 0x60
 8018e94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018e96:	9019      	str	r0, [sp, #100]	; 0x64
 8018e98:	9116      	str	r1, [sp, #88]	; 0x58
 8018e9a:	6850      	ldr	r0, [r2, #4]
 8018e9c:	9307      	str	r3, [sp, #28]
 8018e9e:	6812      	ldr	r2, [r2, #0]
 8018ea0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8018ea2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8018ea6:	fb00 1303 	mla	r3, r0, r3, r1
 8018eaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018eae:	18d3      	adds	r3, r2, r3
 8018eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8018eb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8018eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018eba:	685e      	ldr	r6, [r3, #4]
 8018ebc:	3604      	adds	r6, #4
 8018ebe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	dc03      	bgt.n	8018ecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018ec4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f340 834f 	ble.w	801956a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8018ecc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018ece:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018ed2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018ed6:	1e48      	subs	r0, r1, #1
 8018ed8:	1e57      	subs	r7, r2, #1
 8018eda:	9b07      	ldr	r3, [sp, #28]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f340 8178 	ble.w	80191d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018ee2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8018ee4:	142b      	asrs	r3, r5, #16
 8018ee6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018eea:	d406      	bmi.n	8018efa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018eec:	4584      	cmp	ip, r0
 8018eee:	da04      	bge.n	8018efa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	db02      	blt.n	8018efa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018ef4:	42bb      	cmp	r3, r7
 8018ef6:	f2c0 816d 	blt.w	80191d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018efa:	f11c 0c01 	adds.w	ip, ip, #1
 8018efe:	f100 815b 	bmi.w	80191b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f02:	4561      	cmp	r1, ip
 8018f04:	f2c0 8158 	blt.w	80191b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f08:	3301      	adds	r3, #1
 8018f0a:	f100 8155 	bmi.w	80191b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	f2c0 8152 	blt.w	80191b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018f14:	9b07      	ldr	r3, [sp, #28]
 8018f16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018f18:	9317      	str	r3, [sp, #92]	; 0x5c
 8018f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	f340 8178 	ble.w	8019212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018f22:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f24:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018f28:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018f2c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018f30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f32:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8018f36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018f38:	141b      	asrs	r3, r3, #16
 8018f3a:	f100 81ba 	bmi.w	80192b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018f3e:	f101 38ff 	add.w	r8, r1, #4294967295
 8018f42:	4543      	cmp	r3, r8
 8018f44:	f280 81b5 	bge.w	80192b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018f48:	f1bc 0f00 	cmp.w	ip, #0
 8018f4c:	f2c0 81b1 	blt.w	80192b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018f50:	f10e 38ff 	add.w	r8, lr, #4294967295
 8018f54:	45c4      	cmp	ip, r8
 8018f56:	f280 81ac 	bge.w	80192b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8018f5a:	b209      	sxth	r1, r1
 8018f5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018f5e:	fb0c 3301 	mla	r3, ip, r1, r3
 8018f62:	eb04 0803 	add.w	r8, r4, r3
 8018f66:	5ce3      	ldrb	r3, [r4, r3]
 8018f68:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018f6c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018f70:	2a00      	cmp	r2, #0
 8018f72:	f000 8193 	beq.w	801929c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8018f76:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018f7a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8018f7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018f80:	0e24      	lsrs	r4, r4, #24
 8018f82:	9412      	str	r4, [sp, #72]	; 0x48
 8018f84:	b178      	cbz	r0, 8018fa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018f86:	eb08 0c01 	add.w	ip, r8, r1
 8018f8a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018f8e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018f92:	9108      	str	r1, [sp, #32]
 8018f94:	0e09      	lsrs	r1, r1, #24
 8018f96:	9110      	str	r1, [sp, #64]	; 0x40
 8018f98:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018f9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018fa0:	910c      	str	r1, [sp, #48]	; 0x30
 8018fa2:	0e09      	lsrs	r1, r1, #24
 8018fa4:	9113      	str	r1, [sp, #76]	; 0x4c
 8018fa6:	b292      	uxth	r2, r2
 8018fa8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018faa:	b280      	uxth	r0, r0
 8018fac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018fae:	fb02 f900 	mul.w	r9, r2, r0
 8018fb2:	0112      	lsls	r2, r2, #4
 8018fb4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018fb8:	eba2 0809 	sub.w	r8, r2, r9
 8018fbc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8018fc0:	b280      	uxth	r0, r0
 8018fc2:	fa1f f888 	uxth.w	r8, r8
 8018fc6:	1a12      	subs	r2, r2, r0
 8018fc8:	fb08 f101 	mul.w	r1, r8, r1
 8018fcc:	b292      	uxth	r2, r2
 8018fce:	fb02 110e 	mla	r1, r2, lr, r1
 8018fd2:	fb00 1104 	mla	r1, r0, r4, r1
 8018fd6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018fd8:	fb09 1104 	mla	r1, r9, r4, r1
 8018fdc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018fe0:	2900      	cmp	r1, #0
 8018fe2:	f000 80de 	beq.w	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018fe6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018fea:	d01b      	beq.n	8019024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8018fec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ff4:	fb0e fa0a 	mul.w	sl, lr, sl
 8018ff8:	fb0e fe03 	mul.w	lr, lr, r3
 8018ffc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019000:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019004:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019008:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801900c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019010:	4453      	add	r3, sl
 8019012:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019016:	0a1b      	lsrs	r3, r3, #8
 8019018:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801901c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019020:	ea43 030c 	orr.w	r3, r3, ip
 8019024:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019026:	2cff      	cmp	r4, #255	; 0xff
 8019028:	d021      	beq.n	801906e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801902a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801902c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019030:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019032:	fb04 fb0b 	mul.w	fp, r4, fp
 8019036:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019038:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801903c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801903e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019042:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019046:	fb04 fa0a 	mul.w	sl, r4, sl
 801904a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801904e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019052:	44de      	add	lr, fp
 8019054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801905c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019060:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019064:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019068:	ea4e 040a 	orr.w	r4, lr, sl
 801906c:	940b      	str	r4, [sp, #44]	; 0x2c
 801906e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019070:	2cff      	cmp	r4, #255	; 0xff
 8019072:	d021      	beq.n	80190b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8019074:	9c08      	ldr	r4, [sp, #32]
 8019076:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801907a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801907c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019080:	9c08      	ldr	r4, [sp, #32]
 8019082:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019086:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019088:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801908c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019090:	fb04 fa0a 	mul.w	sl, r4, sl
 8019094:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019098:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801909c:	44de      	add	lr, fp
 801909e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80190a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80190a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190b2:	ea4e 040a 	orr.w	r4, lr, sl
 80190b6:	9408      	str	r4, [sp, #32]
 80190b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80190ba:	2cff      	cmp	r4, #255	; 0xff
 80190bc:	d021      	beq.n	8019102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80190be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80190c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80190c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80190c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80190ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80190cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80190d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80190d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80190d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80190da:	fb04 fa0a 	mul.w	sl, r4, sl
 80190de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80190e6:	44de      	add	lr, fp
 80190e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80190ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80190f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80190f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190fc:	ea4e 040a 	orr.w	r4, lr, sl
 8019100:	940c      	str	r4, [sp, #48]	; 0x30
 8019102:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019104:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801910c:	43c9      	mvns	r1, r1
 801910e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019112:	9c08      	ldr	r4, [sp, #32]
 8019114:	b2c9      	uxtb	r1, r1
 8019116:	fb08 fc0c 	mul.w	ip, r8, ip
 801911a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801911e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019122:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019124:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019128:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801912c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801912e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019132:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019136:	fb08 f80e 	mul.w	r8, r8, lr
 801913a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801913e:	fb02 8303 	mla	r3, r2, r3, r8
 8019142:	9a08      	ldr	r2, [sp, #32]
 8019144:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019148:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801914c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801914e:	fb00 330a 	mla	r3, r0, sl, r3
 8019152:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8019156:	fb09 3900 	mla	r9, r9, r0, r3
 801915a:	783b      	ldrb	r3, [r7, #0]
 801915c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019160:	fb03 f201 	mul.w	r2, r3, r1
 8019164:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019168:	1c53      	adds	r3, r2, #1
 801916a:	ea4c 0c09 	orr.w	ip, ip, r9
 801916e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019172:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019176:	703b      	strb	r3, [r7, #0]
 8019178:	787b      	ldrb	r3, [r7, #1]
 801917a:	434b      	muls	r3, r1
 801917c:	1c5a      	adds	r2, r3, #1
 801917e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019182:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8019186:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801918a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801918e:	707b      	strb	r3, [r7, #1]
 8019190:	78bb      	ldrb	r3, [r7, #2]
 8019192:	4359      	muls	r1, r3
 8019194:	1c4b      	adds	r3, r1, #1
 8019196:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801919a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801919e:	f887 c002 	strb.w	ip, [r7, #2]
 80191a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80191a4:	3703      	adds	r7, #3
 80191a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80191a8:	441a      	add	r2, r3
 80191aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80191ac:	441d      	add	r5, r3
 80191ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80191b0:	9225      	str	r2, [sp, #148]	; 0x94
 80191b2:	3b01      	subs	r3, #1
 80191b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80191b6:	e6b0      	b.n	8018f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80191b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80191ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80191bc:	441c      	add	r4, r3
 80191be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80191c0:	441d      	add	r5, r3
 80191c2:	9b07      	ldr	r3, [sp, #28]
 80191c4:	9425      	str	r4, [sp, #148]	; 0x94
 80191c6:	3b01      	subs	r3, #1
 80191c8:	9307      	str	r3, [sp, #28]
 80191ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191cc:	3303      	adds	r3, #3
 80191ce:	930a      	str	r3, [sp, #40]	; 0x28
 80191d0:	e683      	b.n	8018eda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80191d2:	d026      	beq.n	8019222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80191d4:	9b07      	ldr	r3, [sp, #28]
 80191d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80191d8:	3b01      	subs	r3, #1
 80191da:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80191dc:	fb00 4003 	mla	r0, r0, r3, r4
 80191e0:	1400      	asrs	r0, r0, #16
 80191e2:	f53f ae97 	bmi.w	8018f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80191e6:	3901      	subs	r1, #1
 80191e8:	4288      	cmp	r0, r1
 80191ea:	f6bf ae93 	bge.w	8018f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80191ee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80191f0:	fb01 5303 	mla	r3, r1, r3, r5
 80191f4:	141b      	asrs	r3, r3, #16
 80191f6:	f53f ae8d 	bmi.w	8018f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80191fa:	3a01      	subs	r2, #1
 80191fc:	4293      	cmp	r3, r2
 80191fe:	f6bf ae89 	bge.w	8018f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019204:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019208:	f103 0e03 	add.w	lr, r3, #3
 801920c:	f1bb 0f00 	cmp.w	fp, #0
 8019210:	dc6d      	bgt.n	80192ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8019212:	9b07      	ldr	r3, [sp, #28]
 8019214:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801921a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801921e:	4423      	add	r3, r4
 8019220:	930a      	str	r3, [sp, #40]	; 0x28
 8019222:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019224:	2b00      	cmp	r3, #0
 8019226:	f340 81a0 	ble.w	801956a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801922a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801922e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019230:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019234:	eeb0 6a62 	vmov.f32	s12, s5
 8019238:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801923c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019244:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8019248:	eeb0 6a43 	vmov.f32	s12, s6
 801924c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019250:	ee16 5a10 	vmov	r5, s12
 8019254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019258:	ee61 7a27 	vmul.f32	s15, s2, s15
 801925c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019260:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019264:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801926c:	ee12 2a90 	vmov	r2, s5
 8019270:	eef0 2a47 	vmov.f32	s5, s14
 8019274:	fb92 f3f3 	sdiv	r3, r2, r3
 8019278:	ee13 2a10 	vmov	r2, s6
 801927c:	9327      	str	r3, [sp, #156]	; 0x9c
 801927e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019280:	eeb0 3a67 	vmov.f32	s6, s15
 8019284:	fb92 f3f3 	sdiv	r3, r2, r3
 8019288:	9328      	str	r3, [sp, #160]	; 0xa0
 801928a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801928c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801928e:	3b01      	subs	r3, #1
 8019290:	9316      	str	r3, [sp, #88]	; 0x58
 8019292:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019294:	bf08      	it	eq
 8019296:	4613      	moveq	r3, r2
 8019298:	9307      	str	r3, [sp, #28]
 801929a:	e610      	b.n	8018ebe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801929c:	2800      	cmp	r0, #0
 801929e:	f43f ae82 	beq.w	8018fa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80192a2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80192a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80192aa:	9108      	str	r1, [sp, #32]
 80192ac:	0e09      	lsrs	r1, r1, #24
 80192ae:	9110      	str	r1, [sp, #64]	; 0x40
 80192b0:	e679      	b.n	8018fa6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80192b2:	f113 0801 	adds.w	r8, r3, #1
 80192b6:	f53f af74 	bmi.w	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80192ba:	4541      	cmp	r1, r8
 80192bc:	f6ff af71 	blt.w	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80192c0:	f11c 0801 	adds.w	r8, ip, #1
 80192c4:	f53f af6d 	bmi.w	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80192c8:	45c6      	cmp	lr, r8
 80192ca:	f6ff af6a 	blt.w	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80192ce:	b209      	sxth	r1, r1
 80192d0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80192d4:	fa0f f38e 	sxth.w	r3, lr
 80192d8:	9100      	str	r1, [sp, #0]
 80192da:	4639      	mov	r1, r7
 80192dc:	9301      	str	r3, [sp, #4]
 80192de:	4633      	mov	r3, r6
 80192e0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80192e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80192e8:	f7ff fca3 	bl	8018c32 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80192ec:	e759      	b.n	80191a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80192ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80192f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80192f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80192f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80192fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80192fc:	1427      	asrs	r7, r4, #16
 80192fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019300:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019304:	142b      	asrs	r3, r5, #16
 8019306:	fb01 7303 	mla	r3, r1, r3, r7
 801930a:	18e7      	adds	r7, r4, r3
 801930c:	5ce3      	ldrb	r3, [r4, r3]
 801930e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019312:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019316:	2a00      	cmp	r2, #0
 8019318:	f000 811d 	beq.w	8019556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801931c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019320:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8019324:	940d      	str	r4, [sp, #52]	; 0x34
 8019326:	0e24      	lsrs	r4, r4, #24
 8019328:	9414      	str	r4, [sp, #80]	; 0x50
 801932a:	b170      	cbz	r0, 801934a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801932c:	eb07 0801 	add.w	r8, r7, r1
 8019330:	5c79      	ldrb	r1, [r7, r1]
 8019332:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019336:	9109      	str	r1, [sp, #36]	; 0x24
 8019338:	0e09      	lsrs	r1, r1, #24
 801933a:	9111      	str	r1, [sp, #68]	; 0x44
 801933c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019340:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019344:	910e      	str	r1, [sp, #56]	; 0x38
 8019346:	0e09      	lsrs	r1, r1, #24
 8019348:	9115      	str	r1, [sp, #84]	; 0x54
 801934a:	b292      	uxth	r2, r2
 801934c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801934e:	b280      	uxth	r0, r0
 8019350:	fb02 f900 	mul.w	r9, r2, r0
 8019354:	0112      	lsls	r2, r2, #4
 8019356:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801935a:	eba2 0809 	sub.w	r8, r2, r9
 801935e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019364:	b280      	uxth	r0, r0
 8019366:	fa1f f888 	uxth.w	r8, r8
 801936a:	1a09      	subs	r1, r1, r0
 801936c:	fb08 f202 	mul.w	r2, r8, r2
 8019370:	b289      	uxth	r1, r1
 8019372:	fb01 220c 	mla	r2, r1, ip, r2
 8019376:	fb00 2204 	mla	r2, r0, r4, r2
 801937a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801937c:	fb09 2204 	mla	r2, r9, r4, r2
 8019380:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019384:	2a00      	cmp	r2, #0
 8019386:	f000 80db 	beq.w	8019540 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801938a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801938e:	d019      	beq.n	80193c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8019390:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019394:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019398:	fb0c fa0a 	mul.w	sl, ip, sl
 801939c:	fb0c fc03 	mul.w	ip, ip, r3
 80193a0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80193a4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80193a8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80193ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80193b0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80193b4:	4453      	add	r3, sl
 80193b6:	0a3f      	lsrs	r7, r7, #8
 80193b8:	0a1b      	lsrs	r3, r3, #8
 80193ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80193be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80193c2:	433b      	orrs	r3, r7
 80193c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80193c6:	2cff      	cmp	r4, #255	; 0xff
 80193c8:	d020      	beq.n	801940c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 80193ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80193cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80193d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80193d2:	4367      	muls	r7, r4
 80193d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80193d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80193da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80193de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80193e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80193e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80193ec:	44bc      	add	ip, r7
 80193ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80193f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80193f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80193fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80193fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019402:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019406:	ea4c 040a 	orr.w	r4, ip, sl
 801940a:	940d      	str	r4, [sp, #52]	; 0x34
 801940c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801940e:	2cff      	cmp	r4, #255	; 0xff
 8019410:	d020      	beq.n	8019454 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8019412:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019414:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019418:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801941a:	4367      	muls	r7, r4
 801941c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801941e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019422:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019426:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019428:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801942c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019430:	fb04 fa0a 	mul.w	sl, r4, sl
 8019434:	44bc      	add	ip, r7
 8019436:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801943a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801943e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019442:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019446:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801944a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801944e:	ea4c 040a 	orr.w	r4, ip, sl
 8019452:	9409      	str	r4, [sp, #36]	; 0x24
 8019454:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019456:	2cff      	cmp	r4, #255	; 0xff
 8019458:	d020      	beq.n	801949c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801945a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801945c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019460:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019462:	4367      	muls	r7, r4
 8019464:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019466:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801946a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801946e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019470:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019474:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019478:	fb04 fa0a 	mul.w	sl, r4, sl
 801947c:	44bc      	add	ip, r7
 801947e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019486:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801948a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801948e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019492:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019496:	ea4c 040a 	orr.w	r4, ip, sl
 801949a:	940e      	str	r4, [sp, #56]	; 0x38
 801949c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801949e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80194a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80194a6:	43d2      	mvns	r2, r2
 80194a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80194ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80194ae:	b2d2      	uxtb	r2, r2
 80194b0:	fb08 f707 	mul.w	r7, r8, r7
 80194b4:	fb01 770c 	mla	r7, r1, ip, r7
 80194b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80194bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80194be:	fb00 770c 	mla	r7, r0, ip, r7
 80194c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80194c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80194c8:	fb09 770c 	mla	r7, r9, ip, r7
 80194cc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80194d0:	fb08 f80c 	mul.w	r8, r8, ip
 80194d4:	0a3f      	lsrs	r7, r7, #8
 80194d6:	fb01 8303 	mla	r3, r1, r3, r8
 80194da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80194dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80194e0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80194e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80194e6:	fb00 330a 	mla	r3, r0, sl, r3
 80194ea:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80194ee:	fb09 3c0c 	mla	ip, r9, ip, r3
 80194f2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80194f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80194fa:	fb03 f102 	mul.w	r1, r3, r2
 80194fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019502:	1c4b      	adds	r3, r1, #1
 8019504:	ea47 070c 	orr.w	r7, r7, ip
 8019508:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801950c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019510:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019514:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8019518:	4353      	muls	r3, r2
 801951a:	1c59      	adds	r1, r3, #1
 801951c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019520:	0a3b      	lsrs	r3, r7, #8
 8019522:	0c3f      	lsrs	r7, r7, #16
 8019524:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019528:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801952c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019530:	435a      	muls	r2, r3
 8019532:	1c53      	adds	r3, r2, #1
 8019534:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019538:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801953c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019540:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019542:	f10e 0e03 	add.w	lr, lr, #3
 8019546:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019548:	f10b 3bff 	add.w	fp, fp, #4294967295
 801954c:	441a      	add	r2, r3
 801954e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019550:	9225      	str	r2, [sp, #148]	; 0x94
 8019552:	441d      	add	r5, r3
 8019554:	e65a      	b.n	801920c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019556:	2800      	cmp	r0, #0
 8019558:	f43f aef7 	beq.w	801934a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801955c:	5c79      	ldrb	r1, [r7, r1]
 801955e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019562:	9109      	str	r1, [sp, #36]	; 0x24
 8019564:	0e09      	lsrs	r1, r1, #24
 8019566:	9111      	str	r1, [sp, #68]	; 0x44
 8019568:	e6ef      	b.n	801934a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801956a:	b01b      	add	sp, #108	; 0x6c
 801956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019570 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8019570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019574:	b08d      	sub	sp, #52	; 0x34
 8019576:	468b      	mov	fp, r1
 8019578:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801957c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8019580:	fb0c 5703 	mla	r7, ip, r3, r5
 8019584:	f1bc 0f00 	cmp.w	ip, #0
 8019588:	910b      	str	r1, [sp, #44]	; 0x2c
 801958a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801958e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019592:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8019596:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801959a:	eb02 0607 	add.w	r6, r2, r7
 801959e:	f89b 4000 	ldrb.w	r4, [fp]
 80195a2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80195a6:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80195aa:	f2c0 80c1 	blt.w	8019730 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80195ae:	45e6      	cmp	lr, ip
 80195b0:	f340 80be 	ble.w	8019730 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80195b4:	2d00      	cmp	r5, #0
 80195b6:	f2c0 80b7 	blt.w	8019728 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80195ba:	42ab      	cmp	r3, r5
 80195bc:	f340 80b4 	ble.w	8019728 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80195c0:	5dd2      	ldrb	r2, [r2, r7]
 80195c2:	9205      	str	r2, [sp, #20]
 80195c4:	7872      	ldrb	r2, [r6, #1]
 80195c6:	9206      	str	r2, [sp, #24]
 80195c8:	78b2      	ldrb	r2, [r6, #2]
 80195ca:	9207      	str	r2, [sp, #28]
 80195cc:	1c6a      	adds	r2, r5, #1
 80195ce:	f100 80b6 	bmi.w	801973e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80195d2:	4293      	cmp	r3, r2
 80195d4:	f340 80b3 	ble.w	801973e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80195d8:	f1b8 0f00 	cmp.w	r8, #0
 80195dc:	f000 80af 	beq.w	801973e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80195e0:	78f2      	ldrb	r2, [r6, #3]
 80195e2:	9201      	str	r2, [sp, #4]
 80195e4:	7932      	ldrb	r2, [r6, #4]
 80195e6:	9202      	str	r2, [sp, #8]
 80195e8:	7972      	ldrb	r2, [r6, #5]
 80195ea:	9203      	str	r2, [sp, #12]
 80195ec:	f11c 0c01 	adds.w	ip, ip, #1
 80195f0:	f100 80ad 	bmi.w	801974e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80195f4:	45e6      	cmp	lr, ip
 80195f6:	f340 80aa 	ble.w	801974e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80195fa:	f1ba 0f00 	cmp.w	sl, #0
 80195fe:	f000 80a6 	beq.w	801974e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8019602:	2d00      	cmp	r5, #0
 8019604:	f2c0 809f 	blt.w	8019746 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8019608:	42ab      	cmp	r3, r5
 801960a:	f340 809c 	ble.w	8019746 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801960e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019612:	f816 9002 	ldrb.w	r9, [r6, r2]
 8019616:	2203      	movs	r2, #3
 8019618:	fb03 6c02 	mla	ip, r3, r2, r6
 801961c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8019620:	f89c e002 	ldrb.w	lr, [ip, #2]
 8019624:	9704      	str	r7, [sp, #16]
 8019626:	3501      	adds	r5, #1
 8019628:	f100 8098 	bmi.w	801975c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801962c:	42ab      	cmp	r3, r5
 801962e:	f340 8095 	ble.w	801975c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8019632:	f1b8 0f00 	cmp.w	r8, #0
 8019636:	f000 8091 	beq.w	801975c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801963a:	f04f 0c03 	mov.w	ip, #3
 801963e:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8019642:	5cb5      	ldrb	r5, [r6, r2]
 8019644:	fb03 620c 	mla	r2, r3, ip, r6
 8019648:	fb03 630c 	mla	r3, r3, ip, r6
 801964c:	7912      	ldrb	r2, [r2, #4]
 801964e:	795e      	ldrb	r6, [r3, #5]
 8019650:	fa1f f388 	uxth.w	r3, r8
 8019654:	fa1f fc8a 	uxth.w	ip, sl
 8019658:	fb03 f70c 	mul.w	r7, r3, ip
 801965c:	011b      	lsls	r3, r3, #4
 801965e:	9708      	str	r7, [sp, #32]
 8019660:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8019664:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8019668:	1bdb      	subs	r3, r3, r7
 801966a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801966e:	fa1f fc8c 	uxth.w	ip, ip
 8019672:	b29b      	uxth	r3, r3
 8019674:	9709      	str	r7, [sp, #36]	; 0x24
 8019676:	ebaa 0a0c 	sub.w	sl, sl, ip
 801967a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801967c:	930a      	str	r3, [sp, #40]	; 0x28
 801967e:	fa1f fa8a 	uxth.w	sl, sl
 8019682:	ea6f 0807 	mvn.w	r8, r7
 8019686:	9f01      	ldr	r7, [sp, #4]
 8019688:	435f      	muls	r7, r3
 801968a:	9b05      	ldr	r3, [sp, #20]
 801968c:	fa5f f888 	uxtb.w	r8, r8
 8019690:	fb0a 7703 	mla	r7, sl, r3, r7
 8019694:	9b08      	ldr	r3, [sp, #32]
 8019696:	fb14 f408 	smulbb	r4, r4, r8
 801969a:	fb0c 7709 	mla	r7, ip, r9, r7
 801969e:	fb10 f008 	smulbb	r0, r0, r8
 80196a2:	fb11 f108 	smulbb	r1, r1, r8
 80196a6:	fb03 7705 	mla	r7, r3, r5, r7
 80196aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ac:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80196b0:	fb07 4703 	mla	r7, r7, r3, r4
 80196b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196b6:	b2bf      	uxth	r7, r7
 80196b8:	1c7c      	adds	r4, r7, #1
 80196ba:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 80196be:	1224      	asrs	r4, r4, #8
 80196c0:	f88b 4000 	strb.w	r4, [fp]
 80196c4:	9c02      	ldr	r4, [sp, #8]
 80196c6:	435c      	muls	r4, r3
 80196c8:	9b06      	ldr	r3, [sp, #24]
 80196ca:	fb0a 4403 	mla	r4, sl, r3, r4
 80196ce:	9b04      	ldr	r3, [sp, #16]
 80196d0:	fb0c 4403 	mla	r4, ip, r3, r4
 80196d4:	9b08      	ldr	r3, [sp, #32]
 80196d6:	fb03 4402 	mla	r4, r3, r2, r4
 80196da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80196e2:	fb04 0403 	mla	r4, r4, r3, r0
 80196e6:	9b03      	ldr	r3, [sp, #12]
 80196e8:	435a      	muls	r2, r3
 80196ea:	b2a4      	uxth	r4, r4
 80196ec:	4613      	mov	r3, r2
 80196ee:	9a07      	ldr	r2, [sp, #28]
 80196f0:	1c60      	adds	r0, r4, #1
 80196f2:	fb0a 3a02 	mla	sl, sl, r2, r3
 80196f6:	9b08      	ldr	r3, [sp, #32]
 80196f8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80196fc:	fb0c ac0e 	mla	ip, ip, lr, sl
 8019700:	1224      	asrs	r4, r4, #8
 8019702:	fb03 c606 	mla	r6, r3, r6, ip
 8019706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019708:	f88b 4001 	strb.w	r4, [fp, #1]
 801970c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019710:	fb06 1103 	mla	r1, r6, r3, r1
 8019714:	b289      	uxth	r1, r1
 8019716:	1c4e      	adds	r6, r1, #1
 8019718:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801971c:	1209      	asrs	r1, r1, #8
 801971e:	f88b 1002 	strb.w	r1, [fp, #2]
 8019722:	b00d      	add	sp, #52	; 0x34
 8019724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019728:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801972c:	9405      	str	r4, [sp, #20]
 801972e:	e74d      	b.n	80195cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8019730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019734:	9401      	str	r4, [sp, #4]
 8019736:	9405      	str	r4, [sp, #20]
 8019738:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801973c:	e756      	b.n	80195ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801973e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019742:	9401      	str	r4, [sp, #4]
 8019744:	e752      	b.n	80195ec <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8019746:	468e      	mov	lr, r1
 8019748:	9004      	str	r0, [sp, #16]
 801974a:	46a1      	mov	r9, r4
 801974c:	e76b      	b.n	8019626 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801974e:	460e      	mov	r6, r1
 8019750:	4602      	mov	r2, r0
 8019752:	4625      	mov	r5, r4
 8019754:	468e      	mov	lr, r1
 8019756:	9004      	str	r0, [sp, #16]
 8019758:	46a1      	mov	r9, r4
 801975a:	e779      	b.n	8019650 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801975c:	460e      	mov	r6, r1
 801975e:	4602      	mov	r2, r0
 8019760:	4625      	mov	r5, r4
 8019762:	e775      	b.n	8019650 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08019764 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019768:	b09f      	sub	sp, #124	; 0x7c
 801976a:	920e      	str	r2, [sp, #56]	; 0x38
 801976c:	9307      	str	r3, [sp, #28]
 801976e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019770:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019774:	901d      	str	r0, [sp, #116]	; 0x74
 8019776:	930c      	str	r3, [sp, #48]	; 0x30
 8019778:	6850      	ldr	r0, [r2, #4]
 801977a:	910b      	str	r1, [sp, #44]	; 0x2c
 801977c:	6812      	ldr	r2, [r2, #0]
 801977e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019782:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8019786:	fb00 1303 	mla	r3, r0, r3, r1
 801978a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801978e:	18d3      	adds	r3, r2, r3
 8019790:	9308      	str	r3, [sp, #32]
 8019792:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	930a      	str	r3, [sp, #40]	; 0x28
 8019798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801979a:	43db      	mvns	r3, r3
 801979c:	b2db      	uxtb	r3, r3
 801979e:	9309      	str	r3, [sp, #36]	; 0x24
 80197a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	dc03      	bgt.n	80197ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80197a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	f340 81f5 	ble.w	8019b98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80197ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80197b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80197b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80197b8:	1e48      	subs	r0, r1, #1
 80197ba:	1e54      	subs	r4, r2, #1
 80197bc:	9b07      	ldr	r3, [sp, #28]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f340 80d5 	ble.w	801996e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80197c4:	ea5f 452a 	movs.w	r5, sl, asr #16
 80197c8:	ea4f 4328 	mov.w	r3, r8, asr #16
 80197cc:	d406      	bmi.n	80197dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80197ce:	4285      	cmp	r5, r0
 80197d0:	da04      	bge.n	80197dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	db02      	blt.n	80197dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80197d6:	42a3      	cmp	r3, r4
 80197d8:	f2c0 80ca 	blt.w	8019970 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80197dc:	3501      	adds	r5, #1
 80197de:	f100 80bb 	bmi.w	8019958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80197e2:	42a9      	cmp	r1, r5
 80197e4:	f2c0 80b8 	blt.w	8019958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80197e8:	3301      	adds	r3, #1
 80197ea:	f100 80b5 	bmi.w	8019958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80197ee:	429a      	cmp	r2, r3
 80197f0:	f2c0 80b2 	blt.w	8019958 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80197f4:	9b07      	ldr	r3, [sp, #28]
 80197f6:	9d08      	ldr	r5, [sp, #32]
 80197f8:	930d      	str	r3, [sp, #52]	; 0x34
 80197fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	f340 80d6 	ble.w	80199ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8019802:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8019804:	ea4f 4428 	mov.w	r4, r8, asr #16
 8019808:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801980a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801980e:	68c6      	ldr	r6, [r0, #12]
 8019810:	ea5f 402a 	movs.w	r0, sl, asr #16
 8019814:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8019818:	689b      	ldr	r3, [r3, #8]
 801981a:	f100 810f 	bmi.w	8019a3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801981e:	1e5f      	subs	r7, r3, #1
 8019820:	42b8      	cmp	r0, r7
 8019822:	f280 810b 	bge.w	8019a3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019826:	2c00      	cmp	r4, #0
 8019828:	f2c0 8108 	blt.w	8019a3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801982c:	1e77      	subs	r7, r6, #1
 801982e:	42bc      	cmp	r4, r7
 8019830:	f280 8104 	bge.w	8019a3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8019834:	b21b      	sxth	r3, r3
 8019836:	fb04 0003 	mla	r0, r4, r3, r0
 801983a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801983c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019840:	1826      	adds	r6, r4, r0
 8019842:	5c24      	ldrb	r4, [r4, r0]
 8019844:	78b7      	ldrb	r7, [r6, #2]
 8019846:	7870      	ldrb	r0, [r6, #1]
 8019848:	970f      	str	r7, [sp, #60]	; 0x3c
 801984a:	7977      	ldrb	r7, [r6, #5]
 801984c:	f896 e003 	ldrb.w	lr, [r6, #3]
 8019850:	f896 c004 	ldrb.w	ip, [r6, #4]
 8019854:	9710      	str	r7, [sp, #64]	; 0x40
 8019856:	b1c9      	cbz	r1, 801988c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019858:	f04f 0b03 	mov.w	fp, #3
 801985c:	f06f 0904 	mvn.w	r9, #4
 8019860:	3605      	adds	r6, #5
 8019862:	fb13 930b 	smlabb	r3, r3, fp, r9
 8019866:	eb06 0b03 	add.w	fp, r6, r3
 801986a:	5cf3      	ldrb	r3, [r6, r3]
 801986c:	9311      	str	r3, [sp, #68]	; 0x44
 801986e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8019872:	9313      	str	r3, [sp, #76]	; 0x4c
 8019874:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019878:	9315      	str	r3, [sp, #84]	; 0x54
 801987a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801987e:	9312      	str	r3, [sp, #72]	; 0x48
 8019880:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8019884:	9314      	str	r3, [sp, #80]	; 0x50
 8019886:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801988a:	9316      	str	r3, [sp, #88]	; 0x58
 801988c:	b292      	uxth	r2, r2
 801988e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8019890:	b289      	uxth	r1, r1
 8019892:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019896:	fb02 f601 	mul.w	r6, r2, r1
 801989a:	0112      	lsls	r2, r2, #4
 801989c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80198a0:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80198a4:	1b92      	subs	r2, r2, r6
 80198a6:	b289      	uxth	r1, r1
 80198a8:	b292      	uxth	r2, r2
 80198aa:	eba9 0901 	sub.w	r9, r9, r1
 80198ae:	fb02 fe0e 	mul.w	lr, r2, lr
 80198b2:	fa1f f989 	uxth.w	r9, r9
 80198b6:	fb02 fc0c 	mul.w	ip, r2, ip
 80198ba:	fb09 e404 	mla	r4, r9, r4, lr
 80198be:	f895 e000 	ldrb.w	lr, [r5]
 80198c2:	fb09 c000 	mla	r0, r9, r0, ip
 80198c6:	fb01 4407 	mla	r4, r1, r7, r4
 80198ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80198cc:	fb06 4407 	mla	r4, r6, r7, r4
 80198d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80198d2:	fb1e fe07 	smulbb	lr, lr, r7
 80198d6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80198da:	fb04 e403 	mla	r4, r4, r3, lr
 80198de:	b2a4      	uxth	r4, r4
 80198e0:	f104 0e01 	add.w	lr, r4, #1
 80198e4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80198e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80198ea:	fb01 0004 	mla	r0, r1, r4, r0
 80198ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80198f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80198f4:	fb06 0004 	mla	r0, r6, r4, r0
 80198f8:	786c      	ldrb	r4, [r5, #1]
 80198fa:	f885 e000 	strb.w	lr, [r5]
 80198fe:	fb14 f407 	smulbb	r4, r4, r7
 8019902:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019906:	fb00 4003 	mla	r0, r0, r3, r4
 801990a:	b280      	uxth	r0, r0
 801990c:	1c44      	adds	r4, r0, #1
 801990e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8019912:	1200      	asrs	r0, r0, #8
 8019914:	7068      	strb	r0, [r5, #1]
 8019916:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019918:	4342      	muls	r2, r0
 801991a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801991c:	fb09 2200 	mla	r2, r9, r0, r2
 8019920:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019922:	fb01 2100 	mla	r1, r1, r0, r2
 8019926:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019928:	fb06 1602 	mla	r6, r6, r2, r1
 801992c:	78a9      	ldrb	r1, [r5, #2]
 801992e:	fb11 f107 	smulbb	r1, r1, r7
 8019932:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019936:	fb06 1303 	mla	r3, r6, r3, r1
 801993a:	b29b      	uxth	r3, r3
 801993c:	1c5e      	adds	r6, r3, #1
 801993e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8019942:	121b      	asrs	r3, r3, #8
 8019944:	70ab      	strb	r3, [r5, #2]
 8019946:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019948:	3503      	adds	r5, #3
 801994a:	449a      	add	sl, r3
 801994c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801994e:	4498      	add	r8, r3
 8019950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019952:	3b01      	subs	r3, #1
 8019954:	930d      	str	r3, [sp, #52]	; 0x34
 8019956:	e750      	b.n	80197fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019958:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801995a:	449a      	add	sl, r3
 801995c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801995e:	4498      	add	r8, r3
 8019960:	9b07      	ldr	r3, [sp, #28]
 8019962:	3b01      	subs	r3, #1
 8019964:	9307      	str	r3, [sp, #28]
 8019966:	9b08      	ldr	r3, [sp, #32]
 8019968:	3303      	adds	r3, #3
 801996a:	9308      	str	r3, [sp, #32]
 801996c:	e726      	b.n	80197bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801996e:	d026      	beq.n	80199be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8019970:	9b07      	ldr	r3, [sp, #28]
 8019972:	982b      	ldr	r0, [sp, #172]	; 0xac
 8019974:	3b01      	subs	r3, #1
 8019976:	fb00 a003 	mla	r0, r0, r3, sl
 801997a:	1400      	asrs	r0, r0, #16
 801997c:	f53f af3a 	bmi.w	80197f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019980:	3901      	subs	r1, #1
 8019982:	4288      	cmp	r0, r1
 8019984:	f6bf af36 	bge.w	80197f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019988:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801998a:	fb01 8303 	mla	r3, r1, r3, r8
 801998e:	141b      	asrs	r3, r3, #16
 8019990:	f53f af30 	bmi.w	80197f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019994:	3a01      	subs	r2, #1
 8019996:	4293      	cmp	r3, r2
 8019998:	f6bf af2c 	bge.w	80197f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801999c:	9b08      	ldr	r3, [sp, #32]
 801999e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80199a2:	1cdd      	adds	r5, r3, #3
 80199a4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80199a8:	f1bc 0f00 	cmp.w	ip, #0
 80199ac:	dc5f      	bgt.n	8019a6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80199ae:	9b07      	ldr	r3, [sp, #28]
 80199b0:	9a08      	ldr	r2, [sp, #32]
 80199b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199ba:	441a      	add	r2, r3
 80199bc:	9208      	str	r2, [sp, #32]
 80199be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	f340 80e9 	ble.w	8019b98 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80199c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80199ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80199cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199d4:	eef0 6a62 	vmov.f32	s13, s5
 80199d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80199dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80199e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199e4:	ee16 aa90 	vmov	sl, s13
 80199e8:	eef0 6a43 	vmov.f32	s13, s6
 80199ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80199f0:	ee16 8a90 	vmov	r8, s13
 80199f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80199f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80199fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a0c:	ee12 2a90 	vmov	r2, s5
 8019a10:	eef0 2a47 	vmov.f32	s5, s14
 8019a14:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a18:	ee13 2a10 	vmov	r2, s6
 8019a1c:	932b      	str	r3, [sp, #172]	; 0xac
 8019a1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a20:	eeb0 3a67 	vmov.f32	s6, s15
 8019a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a28:	932c      	str	r3, [sp, #176]	; 0xb0
 8019a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019a2e:	3b01      	subs	r3, #1
 8019a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a34:	bf08      	it	eq
 8019a36:	4613      	moveq	r3, r2
 8019a38:	9307      	str	r3, [sp, #28]
 8019a3a:	e6b1      	b.n	80197a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019a3c:	1c47      	adds	r7, r0, #1
 8019a3e:	d482      	bmi.n	8019946 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019a40:	42bb      	cmp	r3, r7
 8019a42:	db80      	blt.n	8019946 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019a44:	1c67      	adds	r7, r4, #1
 8019a46:	f53f af7e 	bmi.w	8019946 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019a4a:	42be      	cmp	r6, r7
 8019a4c:	f6ff af7b 	blt.w	8019946 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019a50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019a52:	b236      	sxth	r6, r6
 8019a54:	9001      	str	r0, [sp, #4]
 8019a56:	b21b      	sxth	r3, r3
 8019a58:	9600      	str	r6, [sp, #0]
 8019a5a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019a5c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8019a60:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8019a64:	4629      	mov	r1, r5
 8019a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a68:	f7ff fd82 	bl	8019570 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8019a6c:	e76b      	b.n	8019946 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8019a6e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8019a70:	ea4f 402a 	mov.w	r0, sl, asr #16
 8019a74:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8019a78:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8019a7c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8019a80:	ea4f 4128 	mov.w	r1, r8, asr #16
 8019a84:	fb07 0101 	mla	r1, r7, r1, r0
 8019a88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019a8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a8e:	1844      	adds	r4, r0, r1
 8019a90:	5c40      	ldrb	r0, [r0, r1]
 8019a92:	78a6      	ldrb	r6, [r4, #2]
 8019a94:	7861      	ldrb	r1, [r4, #1]
 8019a96:	960f      	str	r6, [sp, #60]	; 0x3c
 8019a98:	78e6      	ldrb	r6, [r4, #3]
 8019a9a:	910d      	str	r1, [sp, #52]	; 0x34
 8019a9c:	9610      	str	r6, [sp, #64]	; 0x40
 8019a9e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8019aa2:	f894 b005 	ldrb.w	fp, [r4, #5]
 8019aa6:	b192      	cbz	r2, 8019ace <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8019aa8:	f06f 0604 	mvn.w	r6, #4
 8019aac:	2103      	movs	r1, #3
 8019aae:	3405      	adds	r4, #5
 8019ab0:	fb17 6701 	smlabb	r7, r7, r1, r6
 8019ab4:	19e6      	adds	r6, r4, r7
 8019ab6:	5de4      	ldrb	r4, [r4, r7]
 8019ab8:	9417      	str	r4, [sp, #92]	; 0x5c
 8019aba:	7874      	ldrb	r4, [r6, #1]
 8019abc:	9419      	str	r4, [sp, #100]	; 0x64
 8019abe:	78b4      	ldrb	r4, [r6, #2]
 8019ac0:	941b      	str	r4, [sp, #108]	; 0x6c
 8019ac2:	78f4      	ldrb	r4, [r6, #3]
 8019ac4:	9418      	str	r4, [sp, #96]	; 0x60
 8019ac6:	7934      	ldrb	r4, [r6, #4]
 8019ac8:	941a      	str	r4, [sp, #104]	; 0x68
 8019aca:	7974      	ldrb	r4, [r6, #5]
 8019acc:	941c      	str	r4, [sp, #112]	; 0x70
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019ad2:	b292      	uxth	r2, r2
 8019ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ad6:	3503      	adds	r5, #3
 8019ad8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019adc:	fb03 f402 	mul.w	r4, r3, r2
 8019ae0:	011b      	lsls	r3, r3, #4
 8019ae2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019ae6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8019aea:	1b1b      	subs	r3, r3, r4
 8019aec:	b292      	uxth	r2, r2
 8019aee:	b29b      	uxth	r3, r3
 8019af0:	1ab6      	subs	r6, r6, r2
 8019af2:	435f      	muls	r7, r3
 8019af4:	b2b6      	uxth	r6, r6
 8019af6:	fb03 f909 	mul.w	r9, r3, r9
 8019afa:	fb03 fb0b 	mul.w	fp, r3, fp
 8019afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b00:	fb06 7000 	mla	r0, r6, r0, r7
 8019b04:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019b06:	fb06 bb03 	mla	fp, r6, r3, fp
 8019b0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b0c:	fb02 0007 	mla	r0, r2, r7, r0
 8019b10:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019b12:	fb02 bb03 	mla	fp, r2, r3, fp
 8019b16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b18:	fb04 0007 	mla	r0, r4, r7, r0
 8019b1c:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8019b20:	fb17 f701 	smulbb	r7, r7, r1
 8019b24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019b28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019b2a:	fb00 700e 	mla	r0, r0, lr, r7
 8019b2e:	fb06 9101 	mla	r1, r6, r1, r9
 8019b32:	b280      	uxth	r0, r0
 8019b34:	1c47      	adds	r7, r0, #1
 8019b36:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019b3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019b3c:	1200      	asrs	r0, r0, #8
 8019b3e:	f805 0c06 	strb.w	r0, [r5, #-6]
 8019b42:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019b44:	fb02 1100 	mla	r1, r2, r0, r1
 8019b48:	981a      	ldr	r0, [sp, #104]	; 0x68
 8019b4a:	fb04 1100 	mla	r1, r4, r0, r1
 8019b4e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8019b52:	fb04 b403 	mla	r4, r4, r3, fp
 8019b56:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8019b5a:	fb10 f007 	smulbb	r0, r0, r7
 8019b5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019b62:	fb13 f307 	smulbb	r3, r3, r7
 8019b66:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019b6a:	fb01 010e 	mla	r1, r1, lr, r0
 8019b6e:	fb04 340e 	mla	r4, r4, lr, r3
 8019b72:	b289      	uxth	r1, r1
 8019b74:	b2a4      	uxth	r4, r4
 8019b76:	1c48      	adds	r0, r1, #1
 8019b78:	1c63      	adds	r3, r4, #1
 8019b7a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8019b7e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8019b82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b84:	1209      	asrs	r1, r1, #8
 8019b86:	1224      	asrs	r4, r4, #8
 8019b88:	449a      	add	sl, r3
 8019b8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019b8c:	f805 1c05 	strb.w	r1, [r5, #-5]
 8019b90:	f805 4c04 	strb.w	r4, [r5, #-4]
 8019b94:	4498      	add	r8, r3
 8019b96:	e707      	b.n	80199a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019b98:	b01f      	add	sp, #124	; 0x7c
 8019b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8019b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba2:	b087      	sub	sp, #28
 8019ba4:	780d      	ldrb	r5, [r1, #0]
 8019ba6:	784c      	ldrb	r4, [r1, #1]
 8019ba8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8019bac:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8019bb0:	9004      	str	r0, [sp, #16]
 8019bb2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019bb6:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8019bba:	9005      	str	r0, [sp, #20]
 8019bbc:	fb06 bc03 	mla	ip, r6, r3, fp
 8019bc0:	2e00      	cmp	r6, #0
 8019bc2:	7888      	ldrb	r0, [r1, #2]
 8019bc4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019bc8:	eb02 090c 	add.w	r9, r2, ip
 8019bcc:	f2c0 8084 	blt.w	8019cd8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019bd0:	42b7      	cmp	r7, r6
 8019bd2:	f340 8081 	ble.w	8019cd8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019bd6:	f1bb 0f00 	cmp.w	fp, #0
 8019bda:	db79      	blt.n	8019cd0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8019bdc:	455b      	cmp	r3, fp
 8019bde:	dd77      	ble.n	8019cd0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8019be0:	f812 200c 	ldrb.w	r2, [r2, ip]
 8019be4:	9201      	str	r2, [sp, #4]
 8019be6:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019bea:	9202      	str	r2, [sp, #8]
 8019bec:	f899 2002 	ldrb.w	r2, [r9, #2]
 8019bf0:	9203      	str	r2, [sp, #12]
 8019bf2:	f11b 0201 	adds.w	r2, fp, #1
 8019bf6:	d476      	bmi.n	8019ce6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	dd74      	ble.n	8019ce6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019bfc:	9a04      	ldr	r2, [sp, #16]
 8019bfe:	2a00      	cmp	r2, #0
 8019c00:	d071      	beq.n	8019ce6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019c02:	f899 8003 	ldrb.w	r8, [r9, #3]
 8019c06:	f899 c004 	ldrb.w	ip, [r9, #4]
 8019c0a:	f899 a005 	ldrb.w	sl, [r9, #5]
 8019c0e:	3601      	adds	r6, #1
 8019c10:	d471      	bmi.n	8019cf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c12:	42b7      	cmp	r7, r6
 8019c14:	dd6f      	ble.n	8019cf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c16:	9a05      	ldr	r2, [sp, #20]
 8019c18:	2a00      	cmp	r2, #0
 8019c1a:	d06c      	beq.n	8019cf6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019c1c:	f1bb 0f00 	cmp.w	fp, #0
 8019c20:	db65      	blt.n	8019cee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019c22:	455b      	cmp	r3, fp
 8019c24:	dd63      	ble.n	8019cee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019c26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019c2a:	f819 e002 	ldrb.w	lr, [r9, r2]
 8019c2e:	2203      	movs	r2, #3
 8019c30:	fb03 9602 	mla	r6, r3, r2, r9
 8019c34:	7877      	ldrb	r7, [r6, #1]
 8019c36:	78b6      	ldrb	r6, [r6, #2]
 8019c38:	f11b 0b01 	adds.w	fp, fp, #1
 8019c3c:	d40c      	bmi.n	8019c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019c3e:	455b      	cmp	r3, fp
 8019c40:	dd0a      	ble.n	8019c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019c42:	9a04      	ldr	r2, [sp, #16]
 8019c44:	b142      	cbz	r2, 8019c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8019c46:	2203      	movs	r2, #3
 8019c48:	fb13 2002 	smlabb	r0, r3, r2, r2
 8019c4c:	f819 5000 	ldrb.w	r5, [r9, r0]
 8019c50:	fb03 9002 	mla	r0, r3, r2, r9
 8019c54:	7904      	ldrb	r4, [r0, #4]
 8019c56:	7940      	ldrb	r0, [r0, #5]
 8019c58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019c5c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019c60:	fb03 fb02 	mul.w	fp, r3, r2
 8019c64:	011b      	lsls	r3, r3, #4
 8019c66:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8019c6a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8019c6e:	eba3 030b 	sub.w	r3, r3, fp
 8019c72:	b292      	uxth	r2, r2
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	eba9 0902 	sub.w	r9, r9, r2
 8019c7a:	9304      	str	r3, [sp, #16]
 8019c7c:	fa1f f989 	uxth.w	r9, r9
 8019c80:	fb03 f808 	mul.w	r8, r3, r8
 8019c84:	9b01      	ldr	r3, [sp, #4]
 8019c86:	fb09 8803 	mla	r8, r9, r3, r8
 8019c8a:	9b04      	ldr	r3, [sp, #16]
 8019c8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8019c90:	9b02      	ldr	r3, [sp, #8]
 8019c92:	fb02 880e 	mla	r8, r2, lr, r8
 8019c96:	fb09 cc03 	mla	ip, r9, r3, ip
 8019c9a:	9b04      	ldr	r3, [sp, #16]
 8019c9c:	fb0b 8805 	mla	r8, fp, r5, r8
 8019ca0:	fb02 c707 	mla	r7, r2, r7, ip
 8019ca4:	fb03 f30a 	mul.w	r3, r3, sl
 8019ca8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019cac:	fb0b 7404 	mla	r4, fp, r4, r7
 8019cb0:	f881 8000 	strb.w	r8, [r1]
 8019cb4:	1224      	asrs	r4, r4, #8
 8019cb6:	704c      	strb	r4, [r1, #1]
 8019cb8:	9c03      	ldr	r4, [sp, #12]
 8019cba:	fb09 3904 	mla	r9, r9, r4, r3
 8019cbe:	fb02 9206 	mla	r2, r2, r6, r9
 8019cc2:	fb0b 2000 	mla	r0, fp, r0, r2
 8019cc6:	1200      	asrs	r0, r0, #8
 8019cc8:	7088      	strb	r0, [r1, #2]
 8019cca:	b007      	add	sp, #28
 8019ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cd0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019cd4:	9501      	str	r5, [sp, #4]
 8019cd6:	e78c      	b.n	8019bf2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8019cd8:	4682      	mov	sl, r0
 8019cda:	46a4      	mov	ip, r4
 8019cdc:	46a8      	mov	r8, r5
 8019cde:	9501      	str	r5, [sp, #4]
 8019ce0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019ce4:	e793      	b.n	8019c0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019ce6:	4682      	mov	sl, r0
 8019ce8:	46a4      	mov	ip, r4
 8019cea:	46a8      	mov	r8, r5
 8019cec:	e78f      	b.n	8019c0e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019cee:	4606      	mov	r6, r0
 8019cf0:	4627      	mov	r7, r4
 8019cf2:	46ae      	mov	lr, r5
 8019cf4:	e7a0      	b.n	8019c38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8019cf6:	4606      	mov	r6, r0
 8019cf8:	4627      	mov	r7, r4
 8019cfa:	46ae      	mov	lr, r5
 8019cfc:	e7ac      	b.n	8019c58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08019cfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d02:	b09b      	sub	sp, #108	; 0x6c
 8019d04:	920b      	str	r2, [sp, #44]	; 0x2c
 8019d06:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019d08:	9019      	str	r0, [sp, #100]	; 0x64
 8019d0a:	9109      	str	r1, [sp, #36]	; 0x24
 8019d0c:	6850      	ldr	r0, [r2, #4]
 8019d0e:	9306      	str	r3, [sp, #24]
 8019d10:	6812      	ldr	r2, [r2, #0]
 8019d12:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019d16:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8019d1a:	fb00 1303 	mla	r3, r0, r3, r1
 8019d1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d22:	18d3      	adds	r3, r2, r3
 8019d24:	9307      	str	r3, [sp, #28]
 8019d26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	9308      	str	r3, [sp, #32]
 8019d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	dc03      	bgt.n	8019d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	f340 81ab 	ble.w	801a090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019d3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019d40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019d44:	1e48      	subs	r0, r1, #1
 8019d46:	1e55      	subs	r5, r2, #1
 8019d48:	9b06      	ldr	r3, [sp, #24]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	f340 80b1 	ble.w	8019eb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019d50:	ea5f 462b 	movs.w	r6, fp, asr #16
 8019d54:	ea4f 4324 	mov.w	r3, r4, asr #16
 8019d58:	d406      	bmi.n	8019d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019d5a:	4286      	cmp	r6, r0
 8019d5c:	da04      	bge.n	8019d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	db02      	blt.n	8019d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019d62:	42ab      	cmp	r3, r5
 8019d64:	f2c0 80a6 	blt.w	8019eb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8019d68:	3601      	adds	r6, #1
 8019d6a:	f100 8097 	bmi.w	8019e9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019d6e:	42b1      	cmp	r1, r6
 8019d70:	f2c0 8094 	blt.w	8019e9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019d74:	3301      	adds	r3, #1
 8019d76:	f100 8091 	bmi.w	8019e9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	f2c0 808e 	blt.w	8019e9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8019d80:	9b06      	ldr	r3, [sp, #24]
 8019d82:	9e07      	ldr	r6, [sp, #28]
 8019d84:	930a      	str	r3, [sp, #40]	; 0x28
 8019d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f340 80b0 	ble.w	8019eee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019d8e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019d90:	1425      	asrs	r5, r4, #16
 8019d92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019d94:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019d98:	68c7      	ldr	r7, [r0, #12]
 8019d9a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8019d9e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019da2:	689b      	ldr	r3, [r3, #8]
 8019da4:	f100 80ea 	bmi.w	8019f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019da8:	f103 3cff 	add.w	ip, r3, #4294967295
 8019dac:	4560      	cmp	r0, ip
 8019dae:	f280 80e5 	bge.w	8019f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019db2:	2d00      	cmp	r5, #0
 8019db4:	f2c0 80e2 	blt.w	8019f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8019dbc:	4565      	cmp	r5, ip
 8019dbe:	f280 80dd 	bge.w	8019f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019dc2:	b21b      	sxth	r3, r3
 8019dc4:	fb05 0003 	mla	r0, r5, r3, r0
 8019dc8:	9d08      	ldr	r5, [sp, #32]
 8019dca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019dce:	182f      	adds	r7, r5, r0
 8019dd0:	5c2d      	ldrb	r5, [r5, r0]
 8019dd2:	7878      	ldrb	r0, [r7, #1]
 8019dd4:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019dd8:	900c      	str	r0, [sp, #48]	; 0x30
 8019dda:	f897 9003 	ldrb.w	r9, [r7, #3]
 8019dde:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019de2:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019de6:	b1c9      	cbz	r1, 8019e1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019de8:	f04f 0c03 	mov.w	ip, #3
 8019dec:	f06f 0004 	mvn.w	r0, #4
 8019df0:	3705      	adds	r7, #5
 8019df2:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019df6:	eb07 0c03 	add.w	ip, r7, r3
 8019dfa:	5cfb      	ldrb	r3, [r7, r3]
 8019dfc:	930d      	str	r3, [sp, #52]	; 0x34
 8019dfe:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019e02:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e04:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019e08:	9311      	str	r3, [sp, #68]	; 0x44
 8019e0a:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8019e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8019e10:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019e14:	9310      	str	r3, [sp, #64]	; 0x40
 8019e16:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019e1a:	9312      	str	r3, [sp, #72]	; 0x48
 8019e1c:	b292      	uxth	r2, r2
 8019e1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019e20:	b289      	uxth	r1, r1
 8019e22:	fb02 f301 	mul.w	r3, r2, r1
 8019e26:	0112      	lsls	r2, r2, #4
 8019e28:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8019e2c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8019e30:	1ad2      	subs	r2, r2, r3
 8019e32:	b289      	uxth	r1, r1
 8019e34:	b292      	uxth	r2, r2
 8019e36:	1a7f      	subs	r7, r7, r1
 8019e38:	fb02 f909 	mul.w	r9, r2, r9
 8019e3c:	b2bf      	uxth	r7, r7
 8019e3e:	fb02 f808 	mul.w	r8, r2, r8
 8019e42:	fb02 fa0a 	mul.w	sl, r2, sl
 8019e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e48:	fb07 9905 	mla	r9, r7, r5, r9
 8019e4c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019e4e:	fb07 8800 	mla	r8, r7, r0, r8
 8019e52:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019e54:	fb07 aa0e 	mla	sl, r7, lr, sl
 8019e58:	fb01 9905 	mla	r9, r1, r5, r9
 8019e5c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019e5e:	fb01 8800 	mla	r8, r1, r0, r8
 8019e62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019e64:	fb01 a102 	mla	r1, r1, r2, sl
 8019e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e6a:	fb03 9905 	mla	r9, r3, r5, r9
 8019e6e:	fb03 8800 	mla	r8, r3, r0, r8
 8019e72:	fb03 1302 	mla	r3, r3, r2, r1
 8019e76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e7a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019e7e:	121b      	asrs	r3, r3, #8
 8019e80:	f886 9000 	strb.w	r9, [r6]
 8019e84:	f886 8001 	strb.w	r8, [r6, #1]
 8019e88:	70b3      	strb	r3, [r6, #2]
 8019e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e8c:	3603      	adds	r6, #3
 8019e8e:	449b      	add	fp, r3
 8019e90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019e92:	441c      	add	r4, r3
 8019e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e96:	3b01      	subs	r3, #1
 8019e98:	930a      	str	r3, [sp, #40]	; 0x28
 8019e9a:	e774      	b.n	8019d86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8019e9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e9e:	449b      	add	fp, r3
 8019ea0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ea2:	441c      	add	r4, r3
 8019ea4:	9b06      	ldr	r3, [sp, #24]
 8019ea6:	3b01      	subs	r3, #1
 8019ea8:	9306      	str	r3, [sp, #24]
 8019eaa:	9b07      	ldr	r3, [sp, #28]
 8019eac:	3303      	adds	r3, #3
 8019eae:	9307      	str	r3, [sp, #28]
 8019eb0:	e74a      	b.n	8019d48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019eb2:	d024      	beq.n	8019efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019eb4:	9b06      	ldr	r3, [sp, #24]
 8019eb6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019eb8:	3b01      	subs	r3, #1
 8019eba:	fb00 b003 	mla	r0, r0, r3, fp
 8019ebe:	1400      	asrs	r0, r0, #16
 8019ec0:	f53f af5e 	bmi.w	8019d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019ec4:	3901      	subs	r1, #1
 8019ec6:	4288      	cmp	r0, r1
 8019ec8:	f6bf af5a 	bge.w	8019d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019ecc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019ece:	fb01 4303 	mla	r3, r1, r3, r4
 8019ed2:	141b      	asrs	r3, r3, #16
 8019ed4:	f53f af54 	bmi.w	8019d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019ed8:	3a01      	subs	r2, #1
 8019eda:	4293      	cmp	r3, r2
 8019edc:	f6bf af50 	bge.w	8019d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019ee0:	9b07      	ldr	r3, [sp, #28]
 8019ee2:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019ee6:	1cde      	adds	r6, r3, #3
 8019ee8:	f1be 0f00 	cmp.w	lr, #0
 8019eec:	dc5f      	bgt.n	8019fae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019eee:	9b06      	ldr	r3, [sp, #24]
 8019ef0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019ef4:	9b07      	ldr	r3, [sp, #28]
 8019ef6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019efa:	4423      	add	r3, r4
 8019efc:	9307      	str	r3, [sp, #28]
 8019efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	f340 80c5 	ble.w	801a090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f14:	eef0 6a62 	vmov.f32	s13, s5
 8019f18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f24:	ee16 ba90 	vmov	fp, s13
 8019f28:	eef0 6a43 	vmov.f32	s13, s6
 8019f2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f30:	ee16 4a90 	vmov	r4, s13
 8019f34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f4c:	ee12 2a90 	vmov	r2, s5
 8019f50:	eef0 2a47 	vmov.f32	s5, s14
 8019f54:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f58:	ee13 2a10 	vmov	r2, s6
 8019f5c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f60:	eeb0 3a67 	vmov.f32	s6, s15
 8019f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f68:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019f6e:	3b01      	subs	r3, #1
 8019f70:	9309      	str	r3, [sp, #36]	; 0x24
 8019f72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f74:	bf08      	it	eq
 8019f76:	4613      	moveq	r3, r2
 8019f78:	9306      	str	r3, [sp, #24]
 8019f7a:	e6d7      	b.n	8019d2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019f7c:	f110 0c01 	adds.w	ip, r0, #1
 8019f80:	d483      	bmi.n	8019e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019f82:	4563      	cmp	r3, ip
 8019f84:	db81      	blt.n	8019e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019f86:	f115 0c01 	adds.w	ip, r5, #1
 8019f8a:	f53f af7e 	bmi.w	8019e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019f8e:	4567      	cmp	r7, ip
 8019f90:	f6ff af7b 	blt.w	8019e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019f94:	b23f      	sxth	r7, r7
 8019f96:	b21b      	sxth	r3, r3
 8019f98:	9700      	str	r7, [sp, #0]
 8019f9a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8019f9e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019fa2:	9a08      	ldr	r2, [sp, #32]
 8019fa4:	4631      	mov	r1, r6
 8019fa6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019fa8:	f7ff fdf9 	bl	8019b9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8019fac:	e76d      	b.n	8019e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019fae:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8019fb0:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019fb4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019fb8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019fbc:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8019fc0:	1421      	asrs	r1, r4, #16
 8019fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8019fc4:	fb0c 0101 	mla	r1, ip, r1, r0
 8019fc8:	9808      	ldr	r0, [sp, #32]
 8019fca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019fce:	1845      	adds	r5, r0, r1
 8019fd0:	5c40      	ldrb	r0, [r0, r1]
 8019fd2:	796f      	ldrb	r7, [r5, #5]
 8019fd4:	7869      	ldrb	r1, [r5, #1]
 8019fd6:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019fda:	f895 a003 	ldrb.w	sl, [r5, #3]
 8019fde:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019fe2:	970c      	str	r7, [sp, #48]	; 0x30
 8019fe4:	b1a2      	cbz	r2, 801a010 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8019fe6:	2703      	movs	r7, #3
 8019fe8:	f06f 0304 	mvn.w	r3, #4
 8019fec:	3505      	adds	r5, #5
 8019fee:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019ff2:	eb05 070c 	add.w	r7, r5, ip
 8019ff6:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019ffa:	9513      	str	r5, [sp, #76]	; 0x4c
 8019ffc:	787d      	ldrb	r5, [r7, #1]
 8019ffe:	9515      	str	r5, [sp, #84]	; 0x54
 801a000:	78bd      	ldrb	r5, [r7, #2]
 801a002:	9517      	str	r5, [sp, #92]	; 0x5c
 801a004:	78fd      	ldrb	r5, [r7, #3]
 801a006:	9514      	str	r5, [sp, #80]	; 0x50
 801a008:	793d      	ldrb	r5, [r7, #4]
 801a00a:	9516      	str	r5, [sp, #88]	; 0x58
 801a00c:	797d      	ldrb	r5, [r7, #5]
 801a00e:	9518      	str	r5, [sp, #96]	; 0x60
 801a010:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a014:	b292      	uxth	r2, r2
 801a016:	3603      	adds	r6, #3
 801a018:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a01c:	fb03 f502 	mul.w	r5, r3, r2
 801a020:	011b      	lsls	r3, r3, #4
 801a022:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801a026:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801a02a:	1b5b      	subs	r3, r3, r5
 801a02c:	b292      	uxth	r2, r2
 801a02e:	b29b      	uxth	r3, r3
 801a030:	1abf      	subs	r7, r7, r2
 801a032:	fb03 f909 	mul.w	r9, r3, r9
 801a036:	b2bf      	uxth	r7, r7
 801a038:	fb03 fa0a 	mul.w	sl, r3, sl
 801a03c:	fb07 9901 	mla	r9, r7, r1, r9
 801a040:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a042:	fb07 aa00 	mla	sl, r7, r0, sl
 801a046:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a048:	fb02 9901 	mla	r9, r2, r1, r9
 801a04c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a04e:	fb02 aa00 	mla	sl, r2, r0, sl
 801a052:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a054:	fb05 9901 	mla	r9, r5, r1, r9
 801a058:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a05a:	fb05 aa00 	mla	sl, r5, r0, sl
 801a05e:	434b      	muls	r3, r1
 801a060:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a062:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a066:	fb07 3308 	mla	r3, r7, r8, r3
 801a06a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a06e:	f806 ac06 	strb.w	sl, [r6, #-6]
 801a072:	fb02 3201 	mla	r2, r2, r1, r3
 801a076:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a078:	f806 9c05 	strb.w	r9, [r6, #-5]
 801a07c:	fb05 2503 	mla	r5, r5, r3, r2
 801a080:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a082:	122d      	asrs	r5, r5, #8
 801a084:	449b      	add	fp, r3
 801a086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a088:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a08c:	441c      	add	r4, r3
 801a08e:	e72b      	b.n	8019ee8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801a090:	b01b      	add	sp, #108	; 0x6c
 801a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a096 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801a096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09a:	b087      	sub	sp, #28
 801a09c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801a0a0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801a0a4:	fb05 7003 	mla	r0, r5, r3, r7
 801a0a8:	2d00      	cmp	r5, #0
 801a0aa:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801a0ae:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801a0b2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801a0b6:	f2c0 811f 	blt.w	801a2f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801a0ba:	45a8      	cmp	r8, r5
 801a0bc:	f340 811c 	ble.w	801a2f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801a0c0:	2f00      	cmp	r7, #0
 801a0c2:	f2c0 8117 	blt.w	801a2f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801a0c6:	42bb      	cmp	r3, r7
 801a0c8:	f340 8114 	ble.w	801a2f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801a0cc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801a0d0:	1c7a      	adds	r2, r7, #1
 801a0d2:	f100 8114 	bmi.w	801a2fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801a0d6:	4293      	cmp	r3, r2
 801a0d8:	f340 8111 	ble.w	801a2fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801a0dc:	2c00      	cmp	r4, #0
 801a0de:	f000 8110 	beq.w	801a302 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801a0e2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a0e6:	3501      	adds	r5, #1
 801a0e8:	f100 810f 	bmi.w	801a30a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801a0ec:	45a8      	cmp	r8, r5
 801a0ee:	f340 810c 	ble.w	801a30a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801a0f2:	f1be 0f00 	cmp.w	lr, #0
 801a0f6:	f000 810b 	beq.w	801a310 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801a0fa:	2f00      	cmp	r7, #0
 801a0fc:	f2c0 8103 	blt.w	801a306 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801a100:	42bb      	cmp	r3, r7
 801a102:	f340 8100 	ble.w	801a306 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801a106:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801a10a:	3701      	adds	r7, #1
 801a10c:	f100 8103 	bmi.w	801a316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801a110:	42bb      	cmp	r3, r7
 801a112:	f340 8100 	ble.w	801a316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801a116:	2c00      	cmp	r4, #0
 801a118:	f000 80ff 	beq.w	801a31a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801a11c:	3301      	adds	r3, #1
 801a11e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a122:	fa1f fc84 	uxth.w	ip, r4
 801a126:	fa1f fe8e 	uxth.w	lr, lr
 801a12a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a12e:	fb0c f90e 	mul.w	r9, ip, lr
 801a132:	0e13      	lsrs	r3, r2, #24
 801a134:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a138:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801a13c:	9302      	str	r3, [sp, #8]
 801a13e:	ebac 0709 	sub.w	r7, ip, r9
 801a142:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801a146:	fa1f f48e 	uxth.w	r4, lr
 801a14a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801a14e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a152:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801a156:	fb0a fe0e 	mul.w	lr, sl, lr
 801a15a:	1b1b      	subs	r3, r3, r4
 801a15c:	fb0a f606 	mul.w	r6, sl, r6
 801a160:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801a164:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a168:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a172:	b2bf      	uxth	r7, r7
 801a174:	9301      	str	r3, [sp, #4]
 801a176:	44e6      	add	lr, ip
 801a178:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a17c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a180:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a184:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801a188:	9303      	str	r3, [sp, #12]
 801a18a:	0a33      	lsrs	r3, r6, #8
 801a18c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801a190:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a194:	9304      	str	r3, [sp, #16]
 801a196:	fb0b f606 	mul.w	r6, fp, r6
 801a19a:	fb0b f000 	mul.w	r0, fp, r0
 801a19e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801a1a2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a1a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1aa:	44b6      	add	lr, r6
 801a1ac:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801a1b0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801a1b4:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801a1b8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a1bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a1c0:	fb08 f606 	mul.w	r6, r8, r6
 801a1c4:	0a03      	lsrs	r3, r0, #8
 801a1c6:	fb08 f505 	mul.w	r5, r8, r5
 801a1ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a1ce:	0a30      	lsrs	r0, r6, #8
 801a1d0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a1d4:	9305      	str	r3, [sp, #20]
 801a1d6:	0e13      	lsrs	r3, r2, #24
 801a1d8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a1dc:	fb0e fe07 	mul.w	lr, lr, r7
 801a1e0:	4430      	add	r0, r6
 801a1e2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801a1e6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a1ea:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801a1ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a1f2:	0a00      	lsrs	r0, r0, #8
 801a1f4:	435e      	muls	r6, r3
 801a1f6:	0a2d      	lsrs	r5, r5, #8
 801a1f8:	435a      	muls	r2, r3
 801a1fa:	9b03      	ldr	r3, [sp, #12]
 801a1fc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801a200:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a204:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a20c:	44b4      	add	ip, r6
 801a20e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801a212:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a216:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801a21a:	9e01      	ldr	r6, [sp, #4]
 801a21c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a220:	fb03 ee06 	mla	lr, r3, r6, lr
 801a224:	9b04      	ldr	r3, [sp, #16]
 801a226:	0a12      	lsrs	r2, r2, #8
 801a228:	fb0c ee09 	mla	lr, ip, r9, lr
 801a22c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801a230:	9b05      	ldr	r3, [sp, #20]
 801a232:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a236:	fb00 ee04 	mla	lr, r0, r4, lr
 801a23a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a23e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801a242:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801a246:	9b01      	ldr	r3, [sp, #4]
 801a248:	fb07 fe0e 	mul.w	lr, r7, lr
 801a24c:	fb07 f70b 	mul.w	r7, r7, fp
 801a250:	fb03 ee06 	mla	lr, r3, r6, lr
 801a254:	fb03 730a 	mla	r3, r3, sl, r7
 801a258:	fb09 e202 	mla	r2, r9, r2, lr
 801a25c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801a260:	fb04 2e0e 	mla	lr, r4, lr, r2
 801a264:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801a268:	fb04 3408 	mla	r4, r4, r8, r3
 801a26c:	9b02      	ldr	r3, [sp, #8]
 801a26e:	b292      	uxth	r2, r2
 801a270:	fb09 4903 	mla	r9, r9, r3, r4
 801a274:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a278:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a27c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a280:	fb09 f902 	mul.w	r9, r9, r2
 801a284:	ea40 0e0e 	orr.w	lr, r0, lr
 801a288:	f109 0301 	add.w	r3, r9, #1
 801a28c:	fa5f f08e 	uxtb.w	r0, lr
 801a290:	fb10 f002 	smulbb	r0, r0, r2
 801a294:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801a298:	780b      	ldrb	r3, [r1, #0]
 801a29a:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801a29e:	fa5f f989 	uxtb.w	r9, r9
 801a2a2:	fb03 0309 	mla	r3, r3, r9, r0
 801a2a6:	b29b      	uxth	r3, r3
 801a2a8:	1c58      	adds	r0, r3, #1
 801a2aa:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a2ae:	7848      	ldrb	r0, [r1, #1]
 801a2b0:	fb10 f009 	smulbb	r0, r0, r9
 801a2b4:	121b      	asrs	r3, r3, #8
 801a2b6:	700b      	strb	r3, [r1, #0]
 801a2b8:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801a2bc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a2c0:	fb03 0302 	mla	r3, r3, r2, r0
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	1c58      	adds	r0, r3, #1
 801a2c8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a2cc:	121b      	asrs	r3, r3, #8
 801a2ce:	704b      	strb	r3, [r1, #1]
 801a2d0:	788b      	ldrb	r3, [r1, #2]
 801a2d2:	fb13 f909 	smulbb	r9, r3, r9
 801a2d6:	fb0e 9e02 	mla	lr, lr, r2, r9
 801a2da:	fa1f fe8e 	uxth.w	lr, lr
 801a2de:	f10e 0301 	add.w	r3, lr, #1
 801a2e2:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801a2e6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a2ea:	f881 e002 	strb.w	lr, [r1, #2]
 801a2ee:	b007      	add	sp, #28
 801a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2f4:	2600      	movs	r6, #0
 801a2f6:	e6eb      	b.n	801a0d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	4606      	mov	r6, r0
 801a2fc:	e6f3      	b.n	801a0e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a2fe:	2000      	movs	r0, #0
 801a300:	e6f1      	b.n	801a0e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a302:	4620      	mov	r0, r4
 801a304:	e6ef      	b.n	801a0e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801a306:	2500      	movs	r5, #0
 801a308:	e6ff      	b.n	801a10a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801a30a:	2200      	movs	r2, #0
 801a30c:	4615      	mov	r5, r2
 801a30e:	e708      	b.n	801a122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a310:	4672      	mov	r2, lr
 801a312:	4675      	mov	r5, lr
 801a314:	e705      	b.n	801a122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a316:	2200      	movs	r2, #0
 801a318:	e703      	b.n	801a122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801a31a:	4622      	mov	r2, r4
 801a31c:	e701      	b.n	801a122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801a31e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a31e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a322:	b09d      	sub	sp, #116	; 0x74
 801a324:	9219      	str	r2, [sp, #100]	; 0x64
 801a326:	9307      	str	r3, [sp, #28]
 801a328:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a32a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801a32e:	901b      	str	r0, [sp, #108]	; 0x6c
 801a330:	931a      	str	r3, [sp, #104]	; 0x68
 801a332:	6850      	ldr	r0, [r2, #4]
 801a334:	9117      	str	r1, [sp, #92]	; 0x5c
 801a336:	6812      	ldr	r2, [r2, #0]
 801a338:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801a33c:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801a340:	fb00 1303 	mla	r3, r0, r3, r1
 801a344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a348:	18d3      	adds	r3, r2, r3
 801a34a:	930a      	str	r3, [sp, #40]	; 0x28
 801a34c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	9310      	str	r3, [sp, #64]	; 0x40
 801a352:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a356:	930b      	str	r3, [sp, #44]	; 0x2c
 801a358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	dc03      	bgt.n	801a366 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a35e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a360:	2b00      	cmp	r3, #0
 801a362:	f340 8368 	ble.w	801aa36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a366:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a368:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a36c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a370:	1e48      	subs	r0, r1, #1
 801a372:	1e57      	subs	r7, r2, #1
 801a374:	9b07      	ldr	r3, [sp, #28]
 801a376:	2b00      	cmp	r3, #0
 801a378:	f340 8187 	ble.w	801a68a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801a37c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a380:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a384:	d406      	bmi.n	801a394 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a386:	4584      	cmp	ip, r0
 801a388:	da04      	bge.n	801a394 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	db02      	blt.n	801a394 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a38e:	42bb      	cmp	r3, r7
 801a390:	f2c0 817c 	blt.w	801a68c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a394:	f11c 0c01 	adds.w	ip, ip, #1
 801a398:	f100 816c 	bmi.w	801a674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a39c:	4561      	cmp	r1, ip
 801a39e:	f2c0 8169 	blt.w	801a674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	f100 8166 	bmi.w	801a674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a3a8:	429a      	cmp	r2, r3
 801a3aa:	f2c0 8163 	blt.w	801a674 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801a3ae:	9b07      	ldr	r3, [sp, #28]
 801a3b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a3b2:	9318      	str	r3, [sp, #96]	; 0x60
 801a3b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	f340 8186 	ble.w	801a6c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801a3bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a3be:	142a      	asrs	r2, r5, #16
 801a3c0:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a3c4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a3c8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a3cc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a3d0:	f100 81cb 	bmi.w	801a76a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a3d4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a3d8:	4542      	cmp	r2, r8
 801a3da:	f280 81c6 	bge.w	801a76a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a3de:	2800      	cmp	r0, #0
 801a3e0:	f2c0 81c3 	blt.w	801a76a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a3e4:	f103 38ff 	add.w	r8, r3, #4294967295
 801a3e8:	4540      	cmp	r0, r8
 801a3ea:	f280 81be 	bge.w	801a76a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801a3ee:	fa0f f38e 	sxth.w	r3, lr
 801a3f2:	fb00 2203 	mla	r2, r0, r3, r2
 801a3f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a3f8:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801a3fc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801a400:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a404:	2900      	cmp	r1, #0
 801a406:	f000 81a6 	beq.w	801a756 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801a40a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a40e:	900c      	str	r0, [sp, #48]	; 0x30
 801a410:	0e00      	lsrs	r0, r0, #24
 801a412:	9013      	str	r0, [sp, #76]	; 0x4c
 801a414:	f1bc 0f00 	cmp.w	ip, #0
 801a418:	d00f      	beq.n	801a43a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a41a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a41e:	3b01      	subs	r3, #1
 801a420:	009b      	lsls	r3, r3, #2
 801a422:	3304      	adds	r3, #4
 801a424:	eb08 0003 	add.w	r0, r8, r3
 801a428:	f858 3003 	ldr.w	r3, [r8, r3]
 801a42c:	9308      	str	r3, [sp, #32]
 801a42e:	0e1b      	lsrs	r3, r3, #24
 801a430:	9311      	str	r3, [sp, #68]	; 0x44
 801a432:	6843      	ldr	r3, [r0, #4]
 801a434:	930d      	str	r3, [sp, #52]	; 0x34
 801a436:	0e1b      	lsrs	r3, r3, #24
 801a438:	9314      	str	r3, [sp, #80]	; 0x50
 801a43a:	b289      	uxth	r1, r1
 801a43c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a43e:	fa1f fc8c 	uxth.w	ip, ip
 801a442:	0108      	lsls	r0, r1, #4
 801a444:	fb01 f90c 	mul.w	r9, r1, ip
 801a448:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a44c:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801a450:	eba0 0809 	sub.w	r8, r0, r9
 801a454:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a456:	fa1f f18c 	uxth.w	r1, ip
 801a45a:	fa1f f888 	uxth.w	r8, r8
 801a45e:	1a5b      	subs	r3, r3, r1
 801a460:	fb08 f000 	mul.w	r0, r8, r0
 801a464:	b29b      	uxth	r3, r3
 801a466:	fb03 000e 	mla	r0, r3, lr, r0
 801a46a:	fb01 0004 	mla	r0, r1, r4, r0
 801a46e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a470:	fb09 0004 	mla	r0, r9, r4, r0
 801a474:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a478:	2800      	cmp	r0, #0
 801a47a:	f000 80f2 	beq.w	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a47e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a482:	d01b      	beq.n	801a4bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801a484:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a488:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a48c:	fb0e fa0a 	mul.w	sl, lr, sl
 801a490:	fb0e fe02 	mul.w	lr, lr, r2
 801a494:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a498:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a49c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a4a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a4a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a4a8:	4452      	add	r2, sl
 801a4aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4ae:	0a12      	lsrs	r2, r2, #8
 801a4b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a4b4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a4b8:	ea42 020c 	orr.w	r2, r2, ip
 801a4bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a4be:	2cff      	cmp	r4, #255	; 0xff
 801a4c0:	d021      	beq.n	801a506 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801a4c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a4c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a4c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a4ca:	fb04 fb0b 	mul.w	fp, r4, fp
 801a4ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a4d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a4d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a4d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a4da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a4de:	fb04 fa0a 	mul.w	sl, r4, sl
 801a4e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a4ea:	44de      	add	lr, fp
 801a4ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a4f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a4f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a4fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a500:	ea4e 040a 	orr.w	r4, lr, sl
 801a504:	940c      	str	r4, [sp, #48]	; 0x30
 801a506:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a508:	2cff      	cmp	r4, #255	; 0xff
 801a50a:	d021      	beq.n	801a550 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801a50c:	9c08      	ldr	r4, [sp, #32]
 801a50e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a512:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a514:	fb04 fb0b 	mul.w	fp, r4, fp
 801a518:	9c08      	ldr	r4, [sp, #32]
 801a51a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a51e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a520:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a524:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a528:	fb04 fa0a 	mul.w	sl, r4, sl
 801a52c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a530:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a534:	44de      	add	lr, fp
 801a536:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a53a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a53e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a542:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a546:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a54a:	ea4e 040a 	orr.w	r4, lr, sl
 801a54e:	9408      	str	r4, [sp, #32]
 801a550:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a552:	2cff      	cmp	r4, #255	; 0xff
 801a554:	d021      	beq.n	801a59a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a556:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a558:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a55c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a55e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a562:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a564:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a568:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a56a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a56e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a572:	fb04 fa0a 	mul.w	sl, r4, sl
 801a576:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a57a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a57e:	44de      	add	lr, fp
 801a580:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a584:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a588:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a58c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a590:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a594:	ea4e 040a 	orr.w	r4, lr, sl
 801a598:	940d      	str	r4, [sp, #52]	; 0x34
 801a59a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a59c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a5a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a5a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a5a8:	9c08      	ldr	r4, [sp, #32]
 801a5aa:	fb08 fc0c 	mul.w	ip, r8, ip
 801a5ae:	fb03 cc0e 	mla	ip, r3, lr, ip
 801a5b2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a5b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a5b8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a5bc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a5c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a5c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a5c6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a5ca:	fb08 f80e 	mul.w	r8, r8, lr
 801a5ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a5d2:	fb03 8202 	mla	r2, r3, r2, r8
 801a5d6:	9b08      	ldr	r3, [sp, #32]
 801a5d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a5dc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801a5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5e2:	fb01 220a 	mla	r2, r1, sl, r2
 801a5e6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5ec:	fb09 2901 	mla	r9, r9, r1, r2
 801a5f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a5f2:	4343      	muls	r3, r0
 801a5f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a5f8:	1c58      	adds	r0, r3, #1
 801a5fa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a5fe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a602:	783b      	ldrb	r3, [r7, #0]
 801a604:	ea4c 0c09 	orr.w	ip, ip, r9
 801a608:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a60c:	fa5f f28c 	uxtb.w	r2, ip
 801a610:	b2c0      	uxtb	r0, r0
 801a612:	fb12 f201 	smulbb	r2, r2, r1
 801a616:	fb03 2300 	mla	r3, r3, r0, r2
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	1c5a      	adds	r2, r3, #1
 801a61e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a622:	787a      	ldrb	r2, [r7, #1]
 801a624:	fb12 f200 	smulbb	r2, r2, r0
 801a628:	121b      	asrs	r3, r3, #8
 801a62a:	703b      	strb	r3, [r7, #0]
 801a62c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a630:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a634:	fb03 2301 	mla	r3, r3, r1, r2
 801a638:	b29b      	uxth	r3, r3
 801a63a:	1c5a      	adds	r2, r3, #1
 801a63c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a640:	121b      	asrs	r3, r3, #8
 801a642:	707b      	strb	r3, [r7, #1]
 801a644:	78bb      	ldrb	r3, [r7, #2]
 801a646:	fb13 f000 	smulbb	r0, r3, r0
 801a64a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a64e:	fa1f fc8c 	uxth.w	ip, ip
 801a652:	f10c 0301 	add.w	r3, ip, #1
 801a656:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a65a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a65e:	f887 c002 	strb.w	ip, [r7, #2]
 801a662:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a664:	3703      	adds	r7, #3
 801a666:	441d      	add	r5, r3
 801a668:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a66a:	441e      	add	r6, r3
 801a66c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a66e:	3b01      	subs	r3, #1
 801a670:	9318      	str	r3, [sp, #96]	; 0x60
 801a672:	e69f      	b.n	801a3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a674:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a676:	441d      	add	r5, r3
 801a678:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a67a:	441e      	add	r6, r3
 801a67c:	9b07      	ldr	r3, [sp, #28]
 801a67e:	3b01      	subs	r3, #1
 801a680:	9307      	str	r3, [sp, #28]
 801a682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a684:	3303      	adds	r3, #3
 801a686:	930a      	str	r3, [sp, #40]	; 0x28
 801a688:	e674      	b.n	801a374 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a68a:	d025      	beq.n	801a6d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801a68c:	9b07      	ldr	r3, [sp, #28]
 801a68e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801a690:	3b01      	subs	r3, #1
 801a692:	fb00 5003 	mla	r0, r0, r3, r5
 801a696:	1400      	asrs	r0, r0, #16
 801a698:	f53f ae89 	bmi.w	801a3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a69c:	3901      	subs	r1, #1
 801a69e:	4288      	cmp	r0, r1
 801a6a0:	f6bf ae85 	bge.w	801a3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a6a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a6a6:	fb01 6303 	mla	r3, r1, r3, r6
 801a6aa:	141b      	asrs	r3, r3, #16
 801a6ac:	f53f ae7f 	bmi.w	801a3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a6b0:	3a01      	subs	r2, #1
 801a6b2:	4293      	cmp	r3, r2
 801a6b4:	f6bf ae7b 	bge.w	801a3ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a6be:	f103 0e03 	add.w	lr, r3, #3
 801a6c2:	f1bb 0f00 	cmp.w	fp, #0
 801a6c6:	dc6e      	bgt.n	801a7a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801a6c8:	9b07      	ldr	r3, [sp, #28]
 801a6ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a6d4:	4423      	add	r3, r4
 801a6d6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	f340 81ab 	ble.w	801aa36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801a6e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a6e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6ee:	eef0 6a62 	vmov.f32	s13, s5
 801a6f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a6f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6fe:	ee16 5a90 	vmov	r5, s13
 801a702:	eef0 6a43 	vmov.f32	s13, s6
 801a706:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a70a:	ee16 6a90 	vmov	r6, s13
 801a70e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a712:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a716:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a71a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a71e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a722:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a726:	ee12 2a90 	vmov	r2, s5
 801a72a:	eef0 2a47 	vmov.f32	s5, s14
 801a72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a732:	ee13 2a10 	vmov	r2, s6
 801a736:	9329      	str	r3, [sp, #164]	; 0xa4
 801a738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a73a:	eeb0 3a67 	vmov.f32	s6, s15
 801a73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a742:	932a      	str	r3, [sp, #168]	; 0xa8
 801a744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a746:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a748:	3b01      	subs	r3, #1
 801a74a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a74c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a74e:	bf08      	it	eq
 801a750:	4613      	moveq	r3, r2
 801a752:	9307      	str	r3, [sp, #28]
 801a754:	e600      	b.n	801a358 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a756:	f1bc 0f00 	cmp.w	ip, #0
 801a75a:	f43f ae6e 	beq.w	801a43a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a75e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a762:	9308      	str	r3, [sp, #32]
 801a764:	0e1b      	lsrs	r3, r3, #24
 801a766:	9311      	str	r3, [sp, #68]	; 0x44
 801a768:	e667      	b.n	801a43a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a76a:	f112 0801 	adds.w	r8, r2, #1
 801a76e:	f53f af78 	bmi.w	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a772:	45c6      	cmp	lr, r8
 801a774:	f6ff af75 	blt.w	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a778:	f110 0801 	adds.w	r8, r0, #1
 801a77c:	f53f af71 	bmi.w	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a780:	4543      	cmp	r3, r8
 801a782:	f6ff af6e 	blt.w	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a786:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801a788:	b21b      	sxth	r3, r3
 801a78a:	9201      	str	r2, [sp, #4]
 801a78c:	9300      	str	r3, [sp, #0]
 801a78e:	fa0f f38e 	sxth.w	r3, lr
 801a792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a798:	e9cd c404 	strd	ip, r4, [sp, #16]
 801a79c:	4639      	mov	r1, r7
 801a79e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a7a0:	f7ff fc79 	bl	801a096 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801a7a4:	e75d      	b.n	801a662 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801a7a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a7a8:	142f      	asrs	r7, r5, #16
 801a7aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a7ac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a7b0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801a7b4:	1433      	asrs	r3, r6, #16
 801a7b6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a7ba:	fb02 7303 	mla	r3, r2, r3, r7
 801a7be:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801a7c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a7c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a7ca:	2900      	cmp	r1, #0
 801a7cc:	f000 812a 	beq.w	801aa24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a7d0:	687c      	ldr	r4, [r7, #4]
 801a7d2:	940e      	str	r4, [sp, #56]	; 0x38
 801a7d4:	0e24      	lsrs	r4, r4, #24
 801a7d6:	9415      	str	r4, [sp, #84]	; 0x54
 801a7d8:	b178      	cbz	r0, 801a7fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a7da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801a7de:	3a01      	subs	r2, #1
 801a7e0:	0092      	lsls	r2, r2, #2
 801a7e2:	3204      	adds	r2, #4
 801a7e4:	eb07 0802 	add.w	r8, r7, r2
 801a7e8:	58ba      	ldr	r2, [r7, r2]
 801a7ea:	9209      	str	r2, [sp, #36]	; 0x24
 801a7ec:	0e12      	lsrs	r2, r2, #24
 801a7ee:	9212      	str	r2, [sp, #72]	; 0x48
 801a7f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a7f4:	920f      	str	r2, [sp, #60]	; 0x3c
 801a7f6:	0e12      	lsrs	r2, r2, #24
 801a7f8:	9216      	str	r2, [sp, #88]	; 0x58
 801a7fa:	b289      	uxth	r1, r1
 801a7fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a7fe:	b280      	uxth	r0, r0
 801a800:	fb01 f900 	mul.w	r9, r1, r0
 801a804:	0109      	lsls	r1, r1, #4
 801a806:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a80a:	eba1 0809 	sub.w	r8, r1, r9
 801a80e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801a812:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a814:	b280      	uxth	r0, r0
 801a816:	fa1f f888 	uxth.w	r8, r8
 801a81a:	1a12      	subs	r2, r2, r0
 801a81c:	fb08 f101 	mul.w	r1, r8, r1
 801a820:	b292      	uxth	r2, r2
 801a822:	fb02 110c 	mla	r1, r2, ip, r1
 801a826:	fb00 1104 	mla	r1, r0, r4, r1
 801a82a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a82c:	fb09 1104 	mla	r1, r9, r4, r1
 801a830:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a834:	2900      	cmp	r1, #0
 801a836:	f000 80ec 	beq.w	801aa12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801a83a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a83e:	d019      	beq.n	801a874 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801a840:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a848:	fb0c fa0a 	mul.w	sl, ip, sl
 801a84c:	fb0c fc03 	mul.w	ip, ip, r3
 801a850:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a854:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a858:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a85c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a860:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a864:	4453      	add	r3, sl
 801a866:	0a3f      	lsrs	r7, r7, #8
 801a868:	0a1b      	lsrs	r3, r3, #8
 801a86a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a86e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a872:	433b      	orrs	r3, r7
 801a874:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a876:	2cff      	cmp	r4, #255	; 0xff
 801a878:	d020      	beq.n	801a8bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801a87a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a87c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a880:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a882:	4367      	muls	r7, r4
 801a884:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a886:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a88a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a88e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a890:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a894:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a898:	fb04 fa0a 	mul.w	sl, r4, sl
 801a89c:	44bc      	add	ip, r7
 801a89e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a8a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a8aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a8b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8b6:	ea4c 040a 	orr.w	r4, ip, sl
 801a8ba:	940e      	str	r4, [sp, #56]	; 0x38
 801a8bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8be:	2cff      	cmp	r4, #255	; 0xff
 801a8c0:	d020      	beq.n	801a904 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801a8c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a8c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a8c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8ca:	4367      	muls	r7, r4
 801a8cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a8ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a8d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a8dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8e4:	44bc      	add	ip, r7
 801a8e6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a8ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a8f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a8f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a8fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a8fe:	ea4c 040a 	orr.w	r4, ip, sl
 801a902:	9409      	str	r4, [sp, #36]	; 0x24
 801a904:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a906:	2cff      	cmp	r4, #255	; 0xff
 801a908:	d020      	beq.n	801a94c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801a90a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a90c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a910:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a912:	4367      	muls	r7, r4
 801a914:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a916:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a91a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a91e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a920:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a924:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a928:	fb04 fa0a 	mul.w	sl, r4, sl
 801a92c:	44bc      	add	ip, r7
 801a92e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a932:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a936:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a93a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a93e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a942:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a946:	ea4c 040a 	orr.w	r4, ip, sl
 801a94a:	940f      	str	r4, [sp, #60]	; 0x3c
 801a94c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a94e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a952:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a956:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a95a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a95c:	fb08 f707 	mul.w	r7, r8, r7
 801a960:	fb02 770c 	mla	r7, r2, ip, r7
 801a964:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a968:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a96a:	fb00 770c 	mla	r7, r0, ip, r7
 801a96e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a972:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a974:	fb09 770c 	mla	r7, r9, ip, r7
 801a978:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a97c:	fb08 f80c 	mul.w	r8, r8, ip
 801a980:	0a3f      	lsrs	r7, r7, #8
 801a982:	fb02 8303 	mla	r3, r2, r3, r8
 801a986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a988:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a98c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a992:	fb00 330a 	mla	r3, r0, sl, r3
 801a996:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a99a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a99c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a9a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a9a6:	434b      	muls	r3, r1
 801a9a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a9ac:	1c59      	adds	r1, r3, #1
 801a9ae:	ea47 070c 	orr.w	r7, r7, ip
 801a9b2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a9b6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a9ba:	b2fa      	uxtb	r2, r7
 801a9bc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a9c0:	fb12 f200 	smulbb	r2, r2, r0
 801a9c4:	b2c9      	uxtb	r1, r1
 801a9c6:	fb03 2301 	mla	r3, r3, r1, r2
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	1c5a      	adds	r2, r3, #1
 801a9ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a9d2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a9d6:	fb12 f201 	smulbb	r2, r2, r1
 801a9da:	121b      	asrs	r3, r3, #8
 801a9dc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a9e0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a9e4:	0c3f      	lsrs	r7, r7, #16
 801a9e6:	fb03 2300 	mla	r3, r3, r0, r2
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	1c5a      	adds	r2, r3, #1
 801a9ee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a9f2:	121b      	asrs	r3, r3, #8
 801a9f4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a9f8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a9fc:	fb13 f101 	smulbb	r1, r3, r1
 801aa00:	fb07 1700 	mla	r7, r7, r0, r1
 801aa04:	b2bf      	uxth	r7, r7
 801aa06:	1c79      	adds	r1, r7, #1
 801aa08:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801aa0c:	123f      	asrs	r7, r7, #8
 801aa0e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801aa12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aa14:	f10e 0e03 	add.w	lr, lr, #3
 801aa18:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa1c:	441d      	add	r5, r3
 801aa1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aa20:	441e      	add	r6, r3
 801aa22:	e64e      	b.n	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801aa24:	2800      	cmp	r0, #0
 801aa26:	f43f aee8 	beq.w	801a7fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801aa2a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801aa2e:	9209      	str	r2, [sp, #36]	; 0x24
 801aa30:	0e12      	lsrs	r2, r2, #24
 801aa32:	9212      	str	r2, [sp, #72]	; 0x48
 801aa34:	e6e1      	b.n	801a7fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801aa36:	b01d      	add	sp, #116	; 0x74
 801aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa40:	b087      	sub	sp, #28
 801aa42:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801aa46:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801aa4a:	fb05 7003 	mla	r0, r5, r3, r7
 801aa4e:	2d00      	cmp	r5, #0
 801aa50:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801aa54:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801aa58:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801aa5c:	f2c0 810a 	blt.w	801ac74 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801aa60:	45a8      	cmp	r8, r5
 801aa62:	f340 8107 	ble.w	801ac74 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801aa66:	2f00      	cmp	r7, #0
 801aa68:	f2c0 8102 	blt.w	801ac70 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801aa6c:	42bb      	cmp	r3, r7
 801aa6e:	f340 80ff 	ble.w	801ac70 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801aa72:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801aa76:	1c7a      	adds	r2, r7, #1
 801aa78:	f100 80ff 	bmi.w	801ac7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	f340 80fc 	ble.w	801ac7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801aa82:	2c00      	cmp	r4, #0
 801aa84:	f000 80fb 	beq.w	801ac7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801aa88:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801aa8c:	3501      	adds	r5, #1
 801aa8e:	f100 80fa 	bmi.w	801ac86 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801aa92:	45a8      	cmp	r8, r5
 801aa94:	f340 80f7 	ble.w	801ac86 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801aa98:	f1be 0f00 	cmp.w	lr, #0
 801aa9c:	f000 80f6 	beq.w	801ac8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801aaa0:	2f00      	cmp	r7, #0
 801aaa2:	f2c0 80ee 	blt.w	801ac82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801aaa6:	42bb      	cmp	r3, r7
 801aaa8:	f340 80eb 	ble.w	801ac82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801aaac:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801aab0:	3701      	adds	r7, #1
 801aab2:	f100 80ee 	bmi.w	801ac92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801aab6:	42bb      	cmp	r3, r7
 801aab8:	f340 80eb 	ble.w	801ac92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801aabc:	2c00      	cmp	r4, #0
 801aabe:	f000 80ea 	beq.w	801ac96 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801aac2:	3301      	adds	r3, #1
 801aac4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801aac8:	fa1f fc84 	uxth.w	ip, r4
 801aacc:	fa1f fe8e 	uxth.w	lr, lr
 801aad0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801aad4:	fb0c f90e 	mul.w	r9, ip, lr
 801aad8:	0e13      	lsrs	r3, r2, #24
 801aada:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801aade:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801aae2:	9302      	str	r3, [sp, #8]
 801aae4:	ebac 0709 	sub.w	r7, ip, r9
 801aae8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801aaec:	fa1f f48e 	uxth.w	r4, lr
 801aaf0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801aaf4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801aaf8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801aafc:	fb0a fe0e 	mul.w	lr, sl, lr
 801ab00:	1b1b      	subs	r3, r3, r4
 801ab02:	fb0a f606 	mul.w	r6, sl, r6
 801ab06:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ab0a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ab0e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ab12:	b29b      	uxth	r3, r3
 801ab14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab18:	b2bf      	uxth	r7, r7
 801ab1a:	9301      	str	r3, [sp, #4]
 801ab1c:	44e6      	add	lr, ip
 801ab1e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ab22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab26:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ab2a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ab2e:	9303      	str	r3, [sp, #12]
 801ab30:	0a33      	lsrs	r3, r6, #8
 801ab32:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ab36:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ab3a:	9304      	str	r3, [sp, #16]
 801ab3c:	fb0b f606 	mul.w	r6, fp, r6
 801ab40:	fb0b f000 	mul.w	r0, fp, r0
 801ab44:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ab48:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ab4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab50:	44b6      	add	lr, r6
 801ab52:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801ab56:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ab5a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801ab5e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ab62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab66:	fb08 f606 	mul.w	r6, r8, r6
 801ab6a:	0a03      	lsrs	r3, r0, #8
 801ab6c:	fb08 f505 	mul.w	r5, r8, r5
 801ab70:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ab74:	0a30      	lsrs	r0, r6, #8
 801ab76:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ab7a:	9305      	str	r3, [sp, #20]
 801ab7c:	0e13      	lsrs	r3, r2, #24
 801ab7e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ab82:	fb0e fe07 	mul.w	lr, lr, r7
 801ab86:	4430      	add	r0, r6
 801ab88:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801ab8c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ab90:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801ab94:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ab98:	0a00      	lsrs	r0, r0, #8
 801ab9a:	435e      	muls	r6, r3
 801ab9c:	0a2d      	lsrs	r5, r5, #8
 801ab9e:	435a      	muls	r2, r3
 801aba0:	9b03      	ldr	r3, [sp, #12]
 801aba2:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801aba6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801abaa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801abae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801abb2:	44b4      	add	ip, r6
 801abb4:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801abb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801abbc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801abc0:	9e01      	ldr	r6, [sp, #4]
 801abc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801abc6:	fb03 ee06 	mla	lr, r3, r6, lr
 801abca:	9b04      	ldr	r3, [sp, #16]
 801abcc:	0a12      	lsrs	r2, r2, #8
 801abce:	fb0c ee09 	mla	lr, ip, r9, lr
 801abd2:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801abd6:	9b05      	ldr	r3, [sp, #20]
 801abd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801abdc:	fb00 ee04 	mla	lr, r0, r4, lr
 801abe0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801abe4:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801abe8:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801abec:	9b01      	ldr	r3, [sp, #4]
 801abee:	fb07 fe0e 	mul.w	lr, r7, lr
 801abf2:	fb07 f70b 	mul.w	r7, r7, fp
 801abf6:	fb03 ee06 	mla	lr, r3, r6, lr
 801abfa:	fb03 730a 	mla	r3, r3, sl, r7
 801abfe:	fb09 e202 	mla	r2, r9, r2, lr
 801ac02:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801ac06:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ac0a:	fb04 3408 	mla	r4, r4, r8, r3
 801ac0e:	9b02      	ldr	r3, [sp, #8]
 801ac10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ac14:	fb09 4903 	mla	r9, r9, r3, r4
 801ac18:	780b      	ldrb	r3, [r1, #0]
 801ac1a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ac1e:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ac22:	ea40 0e0e 	orr.w	lr, r0, lr
 801ac26:	fa5f f989 	uxtb.w	r9, r9
 801ac2a:	fb03 f209 	mul.w	r2, r3, r9
 801ac2e:	1c53      	adds	r3, r2, #1
 801ac30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ac34:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ac38:	700b      	strb	r3, [r1, #0]
 801ac3a:	784b      	ldrb	r3, [r1, #1]
 801ac3c:	fb03 f309 	mul.w	r3, r3, r9
 801ac40:	1c5a      	adds	r2, r3, #1
 801ac42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ac46:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ac4a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ac4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ac52:	704b      	strb	r3, [r1, #1]
 801ac54:	788b      	ldrb	r3, [r1, #2]
 801ac56:	fb03 f909 	mul.w	r9, r3, r9
 801ac5a:	f109 0301 	add.w	r3, r9, #1
 801ac5e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ac62:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801ac66:	f881 e002 	strb.w	lr, [r1, #2]
 801ac6a:	b007      	add	sp, #28
 801ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac70:	2600      	movs	r6, #0
 801ac72:	e700      	b.n	801aa76 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801ac74:	2000      	movs	r0, #0
 801ac76:	4606      	mov	r6, r0
 801ac78:	e708      	b.n	801aa8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ac7a:	2000      	movs	r0, #0
 801ac7c:	e706      	b.n	801aa8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ac7e:	4620      	mov	r0, r4
 801ac80:	e704      	b.n	801aa8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ac82:	2500      	movs	r5, #0
 801ac84:	e714      	b.n	801aab0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801ac86:	2200      	movs	r2, #0
 801ac88:	4615      	mov	r5, r2
 801ac8a:	e71d      	b.n	801aac8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ac8c:	4672      	mov	r2, lr
 801ac8e:	4675      	mov	r5, lr
 801ac90:	e71a      	b.n	801aac8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ac92:	2200      	movs	r2, #0
 801ac94:	e718      	b.n	801aac8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ac96:	4622      	mov	r2, r4
 801ac98:	e716      	b.n	801aac8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801ac9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac9e:	b099      	sub	sp, #100	; 0x64
 801aca0:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801aca4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801aca6:	9017      	str	r0, [sp, #92]	; 0x5c
 801aca8:	9306      	str	r3, [sp, #24]
 801acaa:	6850      	ldr	r0, [r2, #4]
 801acac:	6812      	ldr	r2, [r2, #0]
 801acae:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801acb2:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801acb6:	fb00 1303 	mla	r3, r0, r3, r1
 801acba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acbe:	18d3      	adds	r3, r2, r3
 801acc0:	9309      	str	r3, [sp, #36]	; 0x24
 801acc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	930e      	str	r3, [sp, #56]	; 0x38
 801acc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801acca:	2b00      	cmp	r3, #0
 801accc:	dc03      	bgt.n	801acd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801acce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	f340 8360 	ble.w	801b396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801acd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801acd8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801acdc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ace0:	1e48      	subs	r0, r1, #1
 801ace2:	1e57      	subs	r7, r2, #1
 801ace4:	9b06      	ldr	r3, [sp, #24]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	f340 817b 	ble.w	801afe2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801acec:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801acf0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801acf4:	d406      	bmi.n	801ad04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acf6:	4584      	cmp	ip, r0
 801acf8:	da04      	bge.n	801ad04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	db02      	blt.n	801ad04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acfe:	42bb      	cmp	r3, r7
 801ad00:	f2c0 8170 	blt.w	801afe4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ad04:	f11c 0c01 	adds.w	ip, ip, #1
 801ad08:	f100 8160 	bmi.w	801afcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad0c:	4561      	cmp	r1, ip
 801ad0e:	f2c0 815d 	blt.w	801afcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad12:	3301      	adds	r3, #1
 801ad14:	f100 815a 	bmi.w	801afcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	f2c0 8157 	blt.w	801afcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ad1e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ad22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ad24:	f1b8 0f00 	cmp.w	r8, #0
 801ad28:	f340 8179 	ble.w	801b01e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ad2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ad2e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ad32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad34:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ad38:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ad3c:	142a      	asrs	r2, r5, #16
 801ad3e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ad42:	689b      	ldr	r3, [r3, #8]
 801ad44:	f100 81be 	bmi.w	801b0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ad48:	f103 39ff 	add.w	r9, r3, #4294967295
 801ad4c:	454a      	cmp	r2, r9
 801ad4e:	f280 81b9 	bge.w	801b0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ad52:	f1bc 0f00 	cmp.w	ip, #0
 801ad56:	f2c0 81b5 	blt.w	801b0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ad5a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ad5e:	45cc      	cmp	ip, r9
 801ad60:	f280 81b0 	bge.w	801b0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ad64:	b21b      	sxth	r3, r3
 801ad66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad68:	fb0c 2203 	mla	r2, ip, r3, r2
 801ad6c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ad70:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ad74:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ad78:	2900      	cmp	r1, #0
 801ad7a:	f000 8197 	beq.w	801b0ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ad7e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ad82:	940a      	str	r4, [sp, #40]	; 0x28
 801ad84:	0e24      	lsrs	r4, r4, #24
 801ad86:	9411      	str	r4, [sp, #68]	; 0x44
 801ad88:	b180      	cbz	r0, 801adac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ad8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	009b      	lsls	r3, r3, #2
 801ad92:	3304      	adds	r3, #4
 801ad94:	eb09 0c03 	add.w	ip, r9, r3
 801ad98:	f859 3003 	ldr.w	r3, [r9, r3]
 801ad9c:	9307      	str	r3, [sp, #28]
 801ad9e:	0e1b      	lsrs	r3, r3, #24
 801ada0:	930f      	str	r3, [sp, #60]	; 0x3c
 801ada2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ada6:	930b      	str	r3, [sp, #44]	; 0x2c
 801ada8:	0e1b      	lsrs	r3, r3, #24
 801adaa:	9312      	str	r3, [sp, #72]	; 0x48
 801adac:	b289      	uxth	r1, r1
 801adae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801adb0:	b280      	uxth	r0, r0
 801adb2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801adb4:	fb01 fa00 	mul.w	sl, r1, r0
 801adb8:	0109      	lsls	r1, r1, #4
 801adba:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801adbe:	eba1 090a 	sub.w	r9, r1, sl
 801adc2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801adc6:	b280      	uxth	r0, r0
 801adc8:	fa1f f989 	uxth.w	r9, r9
 801adcc:	1a09      	subs	r1, r1, r0
 801adce:	fb09 f303 	mul.w	r3, r9, r3
 801add2:	b289      	uxth	r1, r1
 801add4:	fb01 330e 	mla	r3, r1, lr, r3
 801add8:	fb00 3304 	mla	r3, r0, r4, r3
 801addc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801adde:	fb0a 3304 	mla	r3, sl, r4, r3
 801ade2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	f000 80e8 	beq.w	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801adec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801adf0:	d01b      	beq.n	801ae2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801adf2:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801adf6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801adfa:	fb0e fb0b 	mul.w	fp, lr, fp
 801adfe:	fb0e fe02 	mul.w	lr, lr, r2
 801ae02:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ae06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ae0a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ae0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ae12:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ae16:	445a      	add	r2, fp
 801ae18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae1c:	0a12      	lsrs	r2, r2, #8
 801ae1e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ae22:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ae26:	ea42 020c 	orr.w	r2, r2, ip
 801ae2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae2c:	2cff      	cmp	r4, #255	; 0xff
 801ae2e:	d021      	beq.n	801ae74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ae30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ae32:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ae36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae38:	fb04 fc0c 	mul.w	ip, r4, ip
 801ae3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ae3e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ae42:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ae46:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ae48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ae4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ae50:	fb04 fb0b 	mul.w	fp, r4, fp
 801ae54:	44e6      	add	lr, ip
 801ae56:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801ae5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ae5e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ae62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ae66:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ae6a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ae6e:	ea4e 040b 	orr.w	r4, lr, fp
 801ae72:	940a      	str	r4, [sp, #40]	; 0x28
 801ae74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae76:	2cff      	cmp	r4, #255	; 0xff
 801ae78:	d021      	beq.n	801aebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ae7a:	9c07      	ldr	r4, [sp, #28]
 801ae7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ae80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae82:	fb04 fc0c 	mul.w	ip, r4, ip
 801ae86:	9c07      	ldr	r4, [sp, #28]
 801ae88:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ae8c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801ae90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ae92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ae96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ae9a:	fb04 fb0b 	mul.w	fp, r4, fp
 801ae9e:	44e6      	add	lr, ip
 801aea0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801aea4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aea8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801aeac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aeb0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801aeb4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801aeb8:	ea4e 040b 	orr.w	r4, lr, fp
 801aebc:	9407      	str	r4, [sp, #28]
 801aebe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aec0:	2cff      	cmp	r4, #255	; 0xff
 801aec2:	d021      	beq.n	801af08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801aec4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aec6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801aeca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aecc:	fb04 fc0c 	mul.w	ip, r4, ip
 801aed0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aed2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801aed6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801aeda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aedc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801aee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aee4:	fb04 fb0b 	mul.w	fp, r4, fp
 801aee8:	44e6      	add	lr, ip
 801aeea:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801aeee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aef2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801aef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aefa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801aefe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801af02:	ea4e 040b 	orr.w	r4, lr, fp
 801af06:	940b      	str	r4, [sp, #44]	; 0x2c
 801af08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801af0a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801af0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801af12:	2bff      	cmp	r3, #255	; 0xff
 801af14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801af18:	9c07      	ldr	r4, [sp, #28]
 801af1a:	fb09 fc0c 	mul.w	ip, r9, ip
 801af1e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801af22:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801af26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af28:	fb00 cc0e 	mla	ip, r0, lr, ip
 801af2c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801af30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801af32:	fb0a cc0e 	mla	ip, sl, lr, ip
 801af36:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801af3a:	fb09 f90e 	mul.w	r9, r9, lr
 801af3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af42:	fb01 9202 	mla	r2, r1, r2, r9
 801af46:	9907      	ldr	r1, [sp, #28]
 801af48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af4c:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801af50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801af52:	fb00 220b 	mla	r2, r0, fp, r2
 801af56:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801af5a:	fb0a 2a00 	mla	sl, sl, r0, r2
 801af5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801af66:	ea4c 0c0a 	orr.w	ip, ip, sl
 801af6a:	fa5f f08c 	uxtb.w	r0, ip
 801af6e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801af72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801af76:	f000 80a2 	beq.w	801b0be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801af7a:	43db      	mvns	r3, r3
 801af7c:	783a      	ldrb	r2, [r7, #0]
 801af7e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801af82:	b2db      	uxtb	r3, r3
 801af84:	fb02 fe03 	mul.w	lr, r2, r3
 801af88:	fb0a fa03 	mul.w	sl, sl, r3
 801af8c:	f10e 0201 	add.w	r2, lr, #1
 801af90:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801af94:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801af98:	703a      	strb	r2, [r7, #0]
 801af9a:	787a      	ldrb	r2, [r7, #1]
 801af9c:	fb02 f003 	mul.w	r0, r2, r3
 801afa0:	f10a 0301 	add.w	r3, sl, #1
 801afa4:	1c42      	adds	r2, r0, #1
 801afa6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801afaa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801afae:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801afb2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801afb6:	707a      	strb	r2, [r7, #1]
 801afb8:	f887 c002 	strb.w	ip, [r7, #2]
 801afbc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801afbe:	3703      	adds	r7, #3
 801afc0:	f108 38ff 	add.w	r8, r8, #4294967295
 801afc4:	441d      	add	r5, r3
 801afc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801afc8:	441e      	add	r6, r3
 801afca:	e6ab      	b.n	801ad24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801afcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801afce:	441d      	add	r5, r3
 801afd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801afd2:	441e      	add	r6, r3
 801afd4:	9b06      	ldr	r3, [sp, #24]
 801afd6:	3b01      	subs	r3, #1
 801afd8:	9306      	str	r3, [sp, #24]
 801afda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afdc:	3303      	adds	r3, #3
 801afde:	9309      	str	r3, [sp, #36]	; 0x24
 801afe0:	e680      	b.n	801ace4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801afe2:	d024      	beq.n	801b02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801afe4:	9b06      	ldr	r3, [sp, #24]
 801afe6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801afe8:	3b01      	subs	r3, #1
 801afea:	fb00 5003 	mla	r0, r0, r3, r5
 801afee:	1400      	asrs	r0, r0, #16
 801aff0:	f53f ae95 	bmi.w	801ad1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801aff4:	3901      	subs	r1, #1
 801aff6:	4288      	cmp	r0, r1
 801aff8:	f6bf ae91 	bge.w	801ad1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801affc:	9926      	ldr	r1, [sp, #152]	; 0x98
 801affe:	fb01 6303 	mla	r3, r1, r3, r6
 801b002:	141b      	asrs	r3, r3, #16
 801b004:	f53f ae8b 	bmi.w	801ad1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b008:	3a01      	subs	r2, #1
 801b00a:	4293      	cmp	r3, r2
 801b00c:	f6bf ae87 	bge.w	801ad1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b012:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b016:	1cdf      	adds	r7, r3, #3
 801b018:	f1bb 0f00 	cmp.w	fp, #0
 801b01c:	dc6e      	bgt.n	801b0fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801b01e:	9b06      	ldr	r3, [sp, #24]
 801b020:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b026:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b02a:	4423      	add	r3, r4
 801b02c:	9309      	str	r3, [sp, #36]	; 0x24
 801b02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b030:	2b00      	cmp	r3, #0
 801b032:	f340 81b0 	ble.w	801b396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801b036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b03a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b03c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b044:	eef0 6a62 	vmov.f32	s13, s5
 801b048:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b04c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b050:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b054:	ee16 5a90 	vmov	r5, s13
 801b058:	eef0 6a43 	vmov.f32	s13, s6
 801b05c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b060:	ee16 6a90 	vmov	r6, s13
 801b064:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b068:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b06c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b070:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b074:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b078:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b07c:	ee12 2a90 	vmov	r2, s5
 801b080:	eef0 2a47 	vmov.f32	s5, s14
 801b084:	fb92 f3f3 	sdiv	r3, r2, r3
 801b088:	ee13 2a10 	vmov	r2, s6
 801b08c:	9325      	str	r3, [sp, #148]	; 0x94
 801b08e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b090:	eeb0 3a67 	vmov.f32	s6, s15
 801b094:	fb92 f3f3 	sdiv	r3, r2, r3
 801b098:	9326      	str	r3, [sp, #152]	; 0x98
 801b09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b09c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b09e:	3b01      	subs	r3, #1
 801b0a0:	9315      	str	r3, [sp, #84]	; 0x54
 801b0a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b0a4:	bf08      	it	eq
 801b0a6:	4613      	moveq	r3, r2
 801b0a8:	9306      	str	r3, [sp, #24]
 801b0aa:	e60d      	b.n	801acc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	f43f ae7d 	beq.w	801adac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801b0b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b0b6:	9307      	str	r3, [sp, #28]
 801b0b8:	0e1b      	lsrs	r3, r3, #24
 801b0ba:	930f      	str	r3, [sp, #60]	; 0x3c
 801b0bc:	e676      	b.n	801adac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801b0be:	7038      	strb	r0, [r7, #0]
 801b0c0:	7079      	strb	r1, [r7, #1]
 801b0c2:	e779      	b.n	801afb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b0c4:	f112 0901 	adds.w	r9, r2, #1
 801b0c8:	f53f af78 	bmi.w	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b0cc:	454b      	cmp	r3, r9
 801b0ce:	f6ff af75 	blt.w	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b0d2:	f11c 0901 	adds.w	r9, ip, #1
 801b0d6:	f53f af71 	bmi.w	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b0da:	45ce      	cmp	lr, r9
 801b0dc:	f6ff af6e 	blt.w	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b0e0:	b21b      	sxth	r3, r3
 801b0e2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801b0e6:	fa0f f28e 	sxth.w	r2, lr
 801b0ea:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801b0ee:	9200      	str	r2, [sp, #0]
 801b0f0:	4639      	mov	r1, r7
 801b0f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b0f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b0f6:	f7ff fca1 	bl	801aa3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801b0fa:	e75f      	b.n	801afbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801b0fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b0fe:	1429      	asrs	r1, r5, #16
 801b100:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b102:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b106:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801b10a:	1433      	asrs	r3, r6, #16
 801b10c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b110:	fb0c 1303 	mla	r3, ip, r3, r1
 801b114:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b116:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b11a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b11e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b122:	2a00      	cmp	r2, #0
 801b124:	f000 8129 	beq.w	801b37a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801b128:	684c      	ldr	r4, [r1, #4]
 801b12a:	940c      	str	r4, [sp, #48]	; 0x30
 801b12c:	0e24      	lsrs	r4, r4, #24
 801b12e:	9413      	str	r4, [sp, #76]	; 0x4c
 801b130:	b198      	cbz	r0, 801b15a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b132:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801b136:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b13a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801b13e:	f10c 0c04 	add.w	ip, ip, #4
 801b142:	eb01 080c 	add.w	r8, r1, ip
 801b146:	f851 100c 	ldr.w	r1, [r1, ip]
 801b14a:	9108      	str	r1, [sp, #32]
 801b14c:	0e09      	lsrs	r1, r1, #24
 801b14e:	9110      	str	r1, [sp, #64]	; 0x40
 801b150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b154:	910d      	str	r1, [sp, #52]	; 0x34
 801b156:	0e09      	lsrs	r1, r1, #24
 801b158:	9114      	str	r1, [sp, #80]	; 0x50
 801b15a:	b292      	uxth	r2, r2
 801b15c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b15e:	b280      	uxth	r0, r0
 801b160:	fb02 f900 	mul.w	r9, r2, r0
 801b164:	0112      	lsls	r2, r2, #4
 801b166:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b16a:	eba2 0809 	sub.w	r8, r2, r9
 801b16e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801b172:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b174:	b280      	uxth	r0, r0
 801b176:	fa1f f888 	uxth.w	r8, r8
 801b17a:	1a09      	subs	r1, r1, r0
 801b17c:	fb08 f202 	mul.w	r2, r8, r2
 801b180:	b289      	uxth	r1, r1
 801b182:	fb01 220e 	mla	r2, r1, lr, r2
 801b186:	fb00 2204 	mla	r2, r0, r4, r2
 801b18a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b18c:	fb09 2204 	mla	r2, r9, r4, r2
 801b190:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b194:	2a00      	cmp	r2, #0
 801b196:	f000 80e8 	beq.w	801b36a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801b19a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b19e:	d01b      	beq.n	801b1d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801b1a0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b1a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b1a8:	fb0e fa0a 	mul.w	sl, lr, sl
 801b1ac:	fb0e fe03 	mul.w	lr, lr, r3
 801b1b0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b1b4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b1b8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b1bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b1c0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b1c4:	4453      	add	r3, sl
 801b1c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b1ca:	0a1b      	lsrs	r3, r3, #8
 801b1cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b1d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b1d4:	ea43 030c 	orr.w	r3, r3, ip
 801b1d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1da:	2cff      	cmp	r4, #255	; 0xff
 801b1dc:	d021      	beq.n	801b222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801b1de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b1e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b1e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1e6:	fb04 fc0c 	mul.w	ip, r4, ip
 801b1ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b1ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b1f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b1f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b1fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b1fe:	fb04 fa0a 	mul.w	sl, r4, sl
 801b202:	44e6      	add	lr, ip
 801b204:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b208:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b20c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b210:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b214:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b218:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b21c:	ea4e 040a 	orr.w	r4, lr, sl
 801b220:	940c      	str	r4, [sp, #48]	; 0x30
 801b222:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b224:	2cff      	cmp	r4, #255	; 0xff
 801b226:	d021      	beq.n	801b26c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801b228:	9c08      	ldr	r4, [sp, #32]
 801b22a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b22e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b230:	fb04 fc0c 	mul.w	ip, r4, ip
 801b234:	9c08      	ldr	r4, [sp, #32]
 801b236:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b23a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b23c:	fb04 fa0e 	mul.w	sl, r4, lr
 801b240:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b244:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b248:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b24c:	44e6      	add	lr, ip
 801b24e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b252:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b256:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b25a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b25e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b262:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b266:	ea4e 040a 	orr.w	r4, lr, sl
 801b26a:	9408      	str	r4, [sp, #32]
 801b26c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b26e:	2cff      	cmp	r4, #255	; 0xff
 801b270:	d021      	beq.n	801b2b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801b272:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b274:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b278:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b27a:	fb04 fc0c 	mul.w	ip, r4, ip
 801b27e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b280:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b284:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b288:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b28a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b28e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b292:	fb04 fa0a 	mul.w	sl, r4, sl
 801b296:	44e6      	add	lr, ip
 801b298:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b29c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b2a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b2a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b2a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b2ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b2b0:	ea4e 040a 	orr.w	r4, lr, sl
 801b2b4:	940d      	str	r4, [sp, #52]	; 0x34
 801b2b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b2b8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b2bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b2c0:	2aff      	cmp	r2, #255	; 0xff
 801b2c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b2c6:	9c08      	ldr	r4, [sp, #32]
 801b2c8:	fb08 fc0c 	mul.w	ip, r8, ip
 801b2cc:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b2d0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b2d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b2d6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b2da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b2de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b2e0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b2e4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b2e8:	fb08 f80e 	mul.w	r8, r8, lr
 801b2ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b2f0:	fb01 8303 	mla	r3, r1, r3, r8
 801b2f4:	9908      	ldr	r1, [sp, #32]
 801b2f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b2fa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b2fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b300:	fb00 330a 	mla	r3, r0, sl, r3
 801b304:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801b308:	fb09 3e0e 	mla	lr, r9, lr, r3
 801b30c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b310:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b314:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b318:	fa5f f08c 	uxtb.w	r0, ip
 801b31c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801b320:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b324:	d032      	beq.n	801b38c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801b326:	43d2      	mvns	r2, r2
 801b328:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801b32c:	b2d2      	uxtb	r2, r2
 801b32e:	fb0e fe02 	mul.w	lr, lr, r2
 801b332:	f10e 0301 	add.w	r3, lr, #1
 801b336:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801b33a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b33e:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801b342:	4350      	muls	r0, r2
 801b344:	f807 3c03 	strb.w	r3, [r7, #-3]
 801b348:	1c43      	adds	r3, r0, #1
 801b34a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b34e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b352:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801b356:	4353      	muls	r3, r2
 801b358:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b35c:	1c5a      	adds	r2, r3, #1
 801b35e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b362:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801b366:	f807 cc01 	strb.w	ip, [r7, #-1]
 801b36a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b36c:	3703      	adds	r7, #3
 801b36e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b372:	441d      	add	r5, r3
 801b374:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b376:	441e      	add	r6, r3
 801b378:	e64e      	b.n	801b018 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801b37a:	2800      	cmp	r0, #0
 801b37c:	f43f aeed 	beq.w	801b15a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b380:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b384:	9108      	str	r1, [sp, #32]
 801b386:	0e09      	lsrs	r1, r1, #24
 801b388:	9110      	str	r1, [sp, #64]	; 0x40
 801b38a:	e6e6      	b.n	801b15a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801b38c:	f807 0c03 	strb.w	r0, [r7, #-3]
 801b390:	f807 1c02 	strb.w	r1, [r7, #-2]
 801b394:	e7e7      	b.n	801b366 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801b396:	b019      	add	sp, #100	; 0x64
 801b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b39c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3a0:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801b3a4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b3a8:	2c00      	cmp	r4, #0
 801b3aa:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801b3ae:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801b3b2:	fb00 4e03 	mla	lr, r0, r3, r4
 801b3b6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801b3ba:	f2c0 80b8 	blt.w	801b52e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b3be:	45a1      	cmp	r9, r4
 801b3c0:	f340 80b5 	ble.w	801b52e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b3c4:	2800      	cmp	r0, #0
 801b3c6:	f2c0 80b2 	blt.w	801b52e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b3ca:	4580      	cmp	r8, r0
 801b3cc:	f340 80af 	ble.w	801b52e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801b3d0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801b3d4:	f01e 0f01 	tst.w	lr, #1
 801b3d8:	5d56      	ldrb	r6, [r2, r5]
 801b3da:	bf0c      	ite	eq
 801b3dc:	f006 060f 	andeq.w	r6, r6, #15
 801b3e0:	1136      	asrne	r6, r6, #4
 801b3e2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b3e6:	b2f6      	uxtb	r6, r6
 801b3e8:	f114 0a01 	adds.w	sl, r4, #1
 801b3ec:	f100 80a1 	bmi.w	801b532 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b3f0:	45d1      	cmp	r9, sl
 801b3f2:	f340 809e 	ble.w	801b532 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b3f6:	2800      	cmp	r0, #0
 801b3f8:	f2c0 809b 	blt.w	801b532 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b3fc:	4580      	cmp	r8, r0
 801b3fe:	f340 8098 	ble.w	801b532 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801b402:	2f00      	cmp	r7, #0
 801b404:	f000 8097 	beq.w	801b536 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801b408:	f10e 0b01 	add.w	fp, lr, #1
 801b40c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801b410:	f01b 0f01 	tst.w	fp, #1
 801b414:	5d55      	ldrb	r5, [r2, r5]
 801b416:	bf0c      	ite	eq
 801b418:	f005 050f 	andeq.w	r5, r5, #15
 801b41c:	112d      	asrne	r5, r5, #4
 801b41e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801b422:	b2ed      	uxtb	r5, r5
 801b424:	f1bc 0f00 	cmp.w	ip, #0
 801b428:	f000 8089 	beq.w	801b53e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801b42c:	2c00      	cmp	r4, #0
 801b42e:	f100 0001 	add.w	r0, r0, #1
 801b432:	f2c0 8082 	blt.w	801b53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b436:	45a1      	cmp	r9, r4
 801b438:	dd7f      	ble.n	801b53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b43a:	2800      	cmp	r0, #0
 801b43c:	db7d      	blt.n	801b53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b43e:	4580      	cmp	r8, r0
 801b440:	dd7b      	ble.n	801b53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801b442:	eb03 0b0e 	add.w	fp, r3, lr
 801b446:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801b44a:	f01b 0f01 	tst.w	fp, #1
 801b44e:	5d14      	ldrb	r4, [r2, r4]
 801b450:	bf0c      	ite	eq
 801b452:	f004 040f 	andeq.w	r4, r4, #15
 801b456:	1124      	asrne	r4, r4, #4
 801b458:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b45c:	b2e4      	uxtb	r4, r4
 801b45e:	f1ba 0f00 	cmp.w	sl, #0
 801b462:	db6f      	blt.n	801b544 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b464:	45d1      	cmp	r9, sl
 801b466:	dd6d      	ble.n	801b544 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b468:	2800      	cmp	r0, #0
 801b46a:	db6b      	blt.n	801b544 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b46c:	4580      	cmp	r8, r0
 801b46e:	dd69      	ble.n	801b544 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801b470:	2f00      	cmp	r7, #0
 801b472:	d069      	beq.n	801b548 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801b474:	3301      	adds	r3, #1
 801b476:	449e      	add	lr, r3
 801b478:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b47c:	f01e 0f01 	tst.w	lr, #1
 801b480:	5cd0      	ldrb	r0, [r2, r3]
 801b482:	bf0c      	ite	eq
 801b484:	f000 000f 	andeq.w	r0, r0, #15
 801b488:	1100      	asrne	r0, r0, #4
 801b48a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b48e:	b2c3      	uxtb	r3, r0
 801b490:	b2ba      	uxth	r2, r7
 801b492:	fa1f fc8c 	uxth.w	ip, ip
 801b496:	fb02 f00c 	mul.w	r0, r2, ip
 801b49a:	0112      	lsls	r2, r2, #4
 801b49c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801b4a0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b4a4:	1a12      	subs	r2, r2, r0
 801b4a6:	fa1f fc8c 	uxth.w	ip, ip
 801b4aa:	b292      	uxth	r2, r2
 801b4ac:	eba7 070c 	sub.w	r7, r7, ip
 801b4b0:	436a      	muls	r2, r5
 801b4b2:	b2bf      	uxth	r7, r7
 801b4b4:	fb06 2207 	mla	r2, r6, r7, r2
 801b4b8:	fb0c 2404 	mla	r4, ip, r4, r2
 801b4bc:	fb00 4303 	mla	r3, r0, r3, r4
 801b4c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b4c4:	b38b      	cbz	r3, 801b52a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801b4c6:	4a21      	ldr	r2, [pc, #132]	; (801b54c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801b4c8:	6814      	ldr	r4, [r2, #0]
 801b4ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801b4ce:	b2e5      	uxtb	r5, r4
 801b4d0:	4353      	muls	r3, r2
 801b4d2:	1c5a      	adds	r2, r3, #1
 801b4d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b4d8:	1212      	asrs	r2, r2, #8
 801b4da:	b290      	uxth	r0, r2
 801b4dc:	43d2      	mvns	r2, r2
 801b4de:	fb15 f500 	smulbb	r5, r5, r0
 801b4e2:	b2d3      	uxtb	r3, r2
 801b4e4:	780a      	ldrb	r2, [r1, #0]
 801b4e6:	fb02 5203 	mla	r2, r2, r3, r5
 801b4ea:	b292      	uxth	r2, r2
 801b4ec:	1c55      	adds	r5, r2, #1
 801b4ee:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b4f2:	784d      	ldrb	r5, [r1, #1]
 801b4f4:	fb15 f503 	smulbb	r5, r5, r3
 801b4f8:	1212      	asrs	r2, r2, #8
 801b4fa:	700a      	strb	r2, [r1, #0]
 801b4fc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801b500:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b504:	fb02 5200 	mla	r2, r2, r0, r5
 801b508:	b292      	uxth	r2, r2
 801b50a:	1c55      	adds	r5, r2, #1
 801b50c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801b510:	1212      	asrs	r2, r2, #8
 801b512:	704a      	strb	r2, [r1, #1]
 801b514:	788a      	ldrb	r2, [r1, #2]
 801b516:	fb12 f303 	smulbb	r3, r2, r3
 801b51a:	fb04 3300 	mla	r3, r4, r0, r3
 801b51e:	b29b      	uxth	r3, r3
 801b520:	1c5a      	adds	r2, r3, #1
 801b522:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b526:	121b      	asrs	r3, r3, #8
 801b528:	708b      	strb	r3, [r1, #2]
 801b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52e:	2600      	movs	r6, #0
 801b530:	e75a      	b.n	801b3e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801b532:	2500      	movs	r5, #0
 801b534:	e776      	b.n	801b424 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801b536:	463d      	mov	r5, r7
 801b538:	e774      	b.n	801b424 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801b53a:	2400      	movs	r4, #0
 801b53c:	e78f      	b.n	801b45e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801b53e:	4663      	mov	r3, ip
 801b540:	4664      	mov	r4, ip
 801b542:	e7a5      	b.n	801b490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b544:	2300      	movs	r3, #0
 801b546:	e7a3      	b.n	801b490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b548:	463b      	mov	r3, r7
 801b54a:	e7a1      	b.n	801b490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801b54c:	2400b988 	.word	0x2400b988

0801b550 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b554:	b097      	sub	sp, #92	; 0x5c
 801b556:	9214      	str	r2, [sp, #80]	; 0x50
 801b558:	9309      	str	r3, [sp, #36]	; 0x24
 801b55a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801b55c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b560:	9015      	str	r0, [sp, #84]	; 0x54
 801b562:	910c      	str	r1, [sp, #48]	; 0x30
 801b564:	6850      	ldr	r0, [r2, #4]
 801b566:	930e      	str	r3, [sp, #56]	; 0x38
 801b568:	6812      	ldr	r2, [r2, #0]
 801b56a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801b56e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801b572:	fb00 1303 	mla	r3, r0, r3, r1
 801b576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b57a:	eb02 0a03 	add.w	sl, r2, r3
 801b57e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b580:	689b      	ldr	r3, [r3, #8]
 801b582:	3301      	adds	r3, #1
 801b584:	f023 0301 	bic.w	r3, r3, #1
 801b588:	930f      	str	r3, [sp, #60]	; 0x3c
 801b58a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b58c:	681f      	ldr	r7, [r3, #0]
 801b58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b590:	2b00      	cmp	r3, #0
 801b592:	dc03      	bgt.n	801b59c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b594:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b596:	2b00      	cmp	r3, #0
 801b598:	f340 8247 	ble.w	801ba2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801b59c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b59e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b5a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b5a6:	1e48      	subs	r0, r1, #1
 801b5a8:	f102 3cff 	add.w	ip, r2, #4294967295
 801b5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	f340 80e5 	ble.w	801b77e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b5b4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801b5b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b5bc:	d406      	bmi.n	801b5cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b5be:	4586      	cmp	lr, r0
 801b5c0:	da04      	bge.n	801b5cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	db02      	blt.n	801b5cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b5c6:	4563      	cmp	r3, ip
 801b5c8:	f2c0 80da 	blt.w	801b780 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b5cc:	f11e 0e01 	adds.w	lr, lr, #1
 801b5d0:	f100 80cb 	bmi.w	801b76a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b5d4:	4571      	cmp	r1, lr
 801b5d6:	f2c0 80c8 	blt.w	801b76a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b5da:	3301      	adds	r3, #1
 801b5dc:	f100 80c5 	bmi.w	801b76a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b5e0:	429a      	cmp	r2, r3
 801b5e2:	f2c0 80c2 	blt.w	801b76a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5e8:	46d0      	mov	r8, sl
 801b5ea:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b5ee:	930d      	str	r3, [sp, #52]	; 0x34
 801b5f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	f340 80e3 	ble.w	801b7be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801b5f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5fa:	1430      	asrs	r0, r6, #16
 801b5fc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801b600:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b604:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b608:	142b      	asrs	r3, r5, #16
 801b60a:	f100 812e 	bmi.w	801b86a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b60e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801b612:	455b      	cmp	r3, fp
 801b614:	f280 8129 	bge.w	801b86a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b618:	2800      	cmp	r0, #0
 801b61a:	f2c0 8126 	blt.w	801b86a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b61e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801b622:	4558      	cmp	r0, fp
 801b624:	f280 8121 	bge.w	801b86a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b628:	fb00 3309 	mla	r3, r0, r9, r3
 801b62c:	0858      	lsrs	r0, r3, #1
 801b62e:	07dc      	lsls	r4, r3, #31
 801b630:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b634:	bf54      	ite	pl
 801b636:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b63a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b63e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b642:	fa5f fc8c 	uxtb.w	ip, ip
 801b646:	2a00      	cmp	r2, #0
 801b648:	f000 80fe 	beq.w	801b848 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801b64c:	1c58      	adds	r0, r3, #1
 801b64e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b652:	07c0      	lsls	r0, r0, #31
 801b654:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b658:	bf54      	ite	pl
 801b65a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b65e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b662:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b666:	fa5f f08e 	uxtb.w	r0, lr
 801b66a:	9010      	str	r0, [sp, #64]	; 0x40
 801b66c:	b1d9      	cbz	r1, 801b6a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b66e:	444b      	add	r3, r9
 801b670:	0858      	lsrs	r0, r3, #1
 801b672:	07dc      	lsls	r4, r3, #31
 801b674:	f103 0301 	add.w	r3, r3, #1
 801b678:	5c38      	ldrb	r0, [r7, r0]
 801b67a:	bf54      	ite	pl
 801b67c:	f000 000f 	andpl.w	r0, r0, #15
 801b680:	1100      	asrmi	r0, r0, #4
 801b682:	07dc      	lsls	r4, r3, #31
 801b684:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b688:	b2c0      	uxtb	r0, r0
 801b68a:	900a      	str	r0, [sp, #40]	; 0x28
 801b68c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801b690:	f817 e000 	ldrb.w	lr, [r7, r0]
 801b694:	bf54      	ite	pl
 801b696:	f00e 030f 	andpl.w	r3, lr, #15
 801b69a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801b69e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b6a2:	b2db      	uxtb	r3, r3
 801b6a4:	9311      	str	r3, [sp, #68]	; 0x44
 801b6a6:	b292      	uxth	r2, r2
 801b6a8:	b289      	uxth	r1, r1
 801b6aa:	0113      	lsls	r3, r2, #4
 801b6ac:	fb02 f001 	mul.w	r0, r2, r1
 801b6b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6b2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b6b6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801b6ba:	1a1b      	subs	r3, r3, r0
 801b6bc:	b289      	uxth	r1, r1
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	ebae 0e01 	sub.w	lr, lr, r1
 801b6c4:	4353      	muls	r3, r2
 801b6c6:	fa1f fe8e 	uxth.w	lr, lr
 801b6ca:	fb0c 320e 	mla	r2, ip, lr, r3
 801b6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6d0:	fb01 2203 	mla	r2, r1, r3, r2
 801b6d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b6d6:	fb00 2203 	mla	r2, r0, r3, r2
 801b6da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b6de:	2a00      	cmp	r2, #0
 801b6e0:	d039      	beq.n	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b6e2:	4bc7      	ldr	r3, [pc, #796]	; (801ba00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b6e4:	6819      	ldr	r1, [r3, #0]
 801b6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6e8:	fa5f fc81 	uxtb.w	ip, r1
 801b6ec:	435a      	muls	r2, r3
 801b6ee:	1c53      	adds	r3, r2, #1
 801b6f0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b6f4:	1212      	asrs	r2, r2, #8
 801b6f6:	b290      	uxth	r0, r2
 801b6f8:	43d2      	mvns	r2, r2
 801b6fa:	fb1c fc00 	smulbb	ip, ip, r0
 801b6fe:	b2d3      	uxtb	r3, r2
 801b700:	f898 2000 	ldrb.w	r2, [r8]
 801b704:	fb02 c203 	mla	r2, r2, r3, ip
 801b708:	b292      	uxth	r2, r2
 801b70a:	f102 0c01 	add.w	ip, r2, #1
 801b70e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b712:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b716:	fb1c fc03 	smulbb	ip, ip, r3
 801b71a:	1212      	asrs	r2, r2, #8
 801b71c:	f888 2000 	strb.w	r2, [r8]
 801b720:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801b724:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801b728:	fb02 c200 	mla	r2, r2, r0, ip
 801b72c:	b292      	uxth	r2, r2
 801b72e:	f102 0c01 	add.w	ip, r2, #1
 801b732:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b736:	1212      	asrs	r2, r2, #8
 801b738:	f888 2001 	strb.w	r2, [r8, #1]
 801b73c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b740:	fb12 f303 	smulbb	r3, r2, r3
 801b744:	fb01 3300 	mla	r3, r1, r0, r3
 801b748:	b29b      	uxth	r3, r3
 801b74a:	1c5a      	adds	r2, r3, #1
 801b74c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b750:	121b      	asrs	r3, r3, #8
 801b752:	f888 3002 	strb.w	r3, [r8, #2]
 801b756:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b758:	f108 0803 	add.w	r8, r8, #3
 801b75c:	441d      	add	r5, r3
 801b75e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b760:	441e      	add	r6, r3
 801b762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b764:	3b01      	subs	r3, #1
 801b766:	930d      	str	r3, [sp, #52]	; 0x34
 801b768:	e742      	b.n	801b5f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b76a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b76c:	f10a 0a03 	add.w	sl, sl, #3
 801b770:	441d      	add	r5, r3
 801b772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b774:	441e      	add	r6, r3
 801b776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b778:	3b01      	subs	r3, #1
 801b77a:	9309      	str	r3, [sp, #36]	; 0x24
 801b77c:	e716      	b.n	801b5ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b77e:	d024      	beq.n	801b7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b782:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801b784:	3b01      	subs	r3, #1
 801b786:	fb00 5003 	mla	r0, r0, r3, r5
 801b78a:	1400      	asrs	r0, r0, #16
 801b78c:	f53f af2b 	bmi.w	801b5e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b790:	3901      	subs	r1, #1
 801b792:	4288      	cmp	r0, r1
 801b794:	f6bf af27 	bge.w	801b5e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b798:	9924      	ldr	r1, [sp, #144]	; 0x90
 801b79a:	fb01 6303 	mla	r3, r1, r3, r6
 801b79e:	141b      	asrs	r3, r3, #16
 801b7a0:	f53f af21 	bmi.w	801b5e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7a4:	3a01      	subs	r2, #1
 801b7a6:	4293      	cmp	r3, r2
 801b7a8:	f6bf af1d 	bge.w	801b5e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b7ac:	f10a 0e03 	add.w	lr, sl, #3
 801b7b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b7b4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b7b8:	f1b8 0f00 	cmp.w	r8, #0
 801b7bc:	dc76      	bgt.n	801b8ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7c8:	44a2      	add	sl, r4
 801b7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	f340 812c 	ble.w	801ba2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801b7d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b7d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b7d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7e0:	eef0 6a62 	vmov.f32	s13, s5
 801b7e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b7e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b7ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7f0:	ee16 5a90 	vmov	r5, s13
 801b7f4:	eef0 6a43 	vmov.f32	s13, s6
 801b7f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7fc:	ee16 6a90 	vmov	r6, s13
 801b800:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b804:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b808:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b80c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b810:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b814:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b818:	ee12 2a90 	vmov	r2, s5
 801b81c:	eef0 2a47 	vmov.f32	s5, s14
 801b820:	fb92 f3f3 	sdiv	r3, r2, r3
 801b824:	ee13 2a10 	vmov	r2, s6
 801b828:	9323      	str	r3, [sp, #140]	; 0x8c
 801b82a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b82c:	eeb0 3a67 	vmov.f32	s6, s15
 801b830:	fb92 f3f3 	sdiv	r3, r2, r3
 801b834:	9324      	str	r3, [sp, #144]	; 0x90
 801b836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b83a:	3b01      	subs	r3, #1
 801b83c:	930c      	str	r3, [sp, #48]	; 0x30
 801b83e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b840:	bf08      	it	eq
 801b842:	4613      	moveq	r3, r2
 801b844:	9309      	str	r3, [sp, #36]	; 0x24
 801b846:	e6a2      	b.n	801b58e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b848:	2900      	cmp	r1, #0
 801b84a:	f43f af2c 	beq.w	801b6a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b84e:	eb09 0003 	add.w	r0, r9, r3
 801b852:	0843      	lsrs	r3, r0, #1
 801b854:	07c0      	lsls	r0, r0, #31
 801b856:	5cfb      	ldrb	r3, [r7, r3]
 801b858:	bf54      	ite	pl
 801b85a:	f003 030f 	andpl.w	r3, r3, #15
 801b85e:	111b      	asrmi	r3, r3, #4
 801b860:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b864:	b2db      	uxtb	r3, r3
 801b866:	930a      	str	r3, [sp, #40]	; 0x28
 801b868:	e71d      	b.n	801b6a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b86a:	f113 0b01 	adds.w	fp, r3, #1
 801b86e:	f53f af72 	bmi.w	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b872:	45dc      	cmp	ip, fp
 801b874:	f6ff af6f 	blt.w	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b878:	f110 0b01 	adds.w	fp, r0, #1
 801b87c:	f53f af6b 	bmi.w	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b880:	45de      	cmp	lr, fp
 801b882:	f6ff af68 	blt.w	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b886:	9302      	str	r3, [sp, #8]
 801b888:	fa0f f38e 	sxth.w	r3, lr
 801b88c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b88e:	9301      	str	r3, [sp, #4]
 801b890:	fa0f f38c 	sxth.w	r3, ip
 801b894:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b898:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b89c:	9300      	str	r3, [sp, #0]
 801b89e:	463a      	mov	r2, r7
 801b8a0:	464b      	mov	r3, r9
 801b8a2:	4641      	mov	r1, r8
 801b8a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b8a6:	f7ff fd79 	bl	801b39c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801b8aa:	e754      	b.n	801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b8ac:	142a      	asrs	r2, r5, #16
 801b8ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b8b2:	1433      	asrs	r3, r6, #16
 801b8b4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b8b8:	fb09 2303 	mla	r3, r9, r3, r2
 801b8bc:	085a      	lsrs	r2, r3, #1
 801b8be:	07dc      	lsls	r4, r3, #31
 801b8c0:	5cba      	ldrb	r2, [r7, r2]
 801b8c2:	bf54      	ite	pl
 801b8c4:	f002 020f 	andpl.w	r2, r2, #15
 801b8c8:	1112      	asrmi	r2, r2, #4
 801b8ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b8ce:	b2d2      	uxtb	r2, r2
 801b8d0:	2900      	cmp	r1, #0
 801b8d2:	f000 8097 	beq.w	801ba04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801b8d6:	f103 0b01 	add.w	fp, r3, #1
 801b8da:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801b8de:	f01b 0f01 	tst.w	fp, #1
 801b8e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b8e6:	bf0c      	ite	eq
 801b8e8:	f00c 0c0f 	andeq.w	ip, ip, #15
 801b8ec:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801b8f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b8f4:	fa5f f48c 	uxtb.w	r4, ip
 801b8f8:	9412      	str	r4, [sp, #72]	; 0x48
 801b8fa:	b300      	cbz	r0, 801b93e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801b8fc:	444b      	add	r3, r9
 801b8fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b902:	07dc      	lsls	r4, r3, #31
 801b904:	f103 0301 	add.w	r3, r3, #1
 801b908:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b90c:	bf54      	ite	pl
 801b90e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b912:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b916:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b91a:	fa5f f48c 	uxtb.w	r4, ip
 801b91e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b922:	940b      	str	r4, [sp, #44]	; 0x2c
 801b924:	07dc      	lsls	r4, r3, #31
 801b926:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801b92a:	bf54      	ite	pl
 801b92c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b930:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b934:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b938:	fa5f f38c 	uxtb.w	r3, ip
 801b93c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b93e:	b289      	uxth	r1, r1
 801b940:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b942:	b280      	uxth	r0, r0
 801b944:	fb01 f300 	mul.w	r3, r1, r0
 801b948:	0109      	lsls	r1, r1, #4
 801b94a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801b94e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801b952:	1ac9      	subs	r1, r1, r3
 801b954:	b280      	uxth	r0, r0
 801b956:	b289      	uxth	r1, r1
 801b958:	ebac 0c00 	sub.w	ip, ip, r0
 801b95c:	4361      	muls	r1, r4
 801b95e:	fa1f fc8c 	uxth.w	ip, ip
 801b962:	fb02 120c 	mla	r2, r2, ip, r1
 801b966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b968:	fb00 2001 	mla	r0, r0, r1, r2
 801b96c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b96e:	fb03 0302 	mla	r3, r3, r2, r0
 801b972:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b976:	2b00      	cmp	r3, #0
 801b978:	d039      	beq.n	801b9ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b97a:	4a21      	ldr	r2, [pc, #132]	; (801ba00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801b97c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b980:	6810      	ldr	r0, [r2, #0]
 801b982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b984:	fa5f fc80 	uxtb.w	ip, r0
 801b988:	4353      	muls	r3, r2
 801b98a:	1c5a      	adds	r2, r3, #1
 801b98c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b990:	121b      	asrs	r3, r3, #8
 801b992:	b29a      	uxth	r2, r3
 801b994:	43db      	mvns	r3, r3
 801b996:	fb1c fc02 	smulbb	ip, ip, r2
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	fb01 c103 	mla	r1, r1, r3, ip
 801b9a0:	b289      	uxth	r1, r1
 801b9a2:	f101 0c01 	add.w	ip, r1, #1
 801b9a6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b9aa:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801b9ae:	fb1c fc03 	smulbb	ip, ip, r3
 801b9b2:	1209      	asrs	r1, r1, #8
 801b9b4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b9b8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801b9bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801b9c0:	fb01 c102 	mla	r1, r1, r2, ip
 801b9c4:	b289      	uxth	r1, r1
 801b9c6:	f101 0c01 	add.w	ip, r1, #1
 801b9ca:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801b9ce:	1209      	asrs	r1, r1, #8
 801b9d0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b9d4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b9d8:	fb11 f303 	smulbb	r3, r1, r3
 801b9dc:	fb00 3002 	mla	r0, r0, r2, r3
 801b9e0:	b280      	uxth	r0, r0
 801b9e2:	1c42      	adds	r2, r0, #1
 801b9e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b9e8:	1200      	asrs	r0, r0, #8
 801b9ea:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801b9ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b9f0:	f10e 0e03 	add.w	lr, lr, #3
 801b9f4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b9f8:	441d      	add	r5, r3
 801b9fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b9fc:	441e      	add	r6, r3
 801b9fe:	e6db      	b.n	801b7b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ba00:	2400b988 	.word	0x2400b988
 801ba04:	2800      	cmp	r0, #0
 801ba06:	d09a      	beq.n	801b93e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ba08:	444b      	add	r3, r9
 801ba0a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ba0e:	07db      	lsls	r3, r3, #31
 801ba10:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ba14:	bf54      	ite	pl
 801ba16:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ba1a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ba1e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ba22:	fa5f f38c 	uxtb.w	r3, ip
 801ba26:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba28:	e789      	b.n	801b93e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ba2a:	b017      	add	sp, #92	; 0x5c
 801ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba34:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801ba38:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ba3c:	2d00      	cmp	r5, #0
 801ba3e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ba42:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801ba46:	fb04 5e03 	mla	lr, r4, r3, r5
 801ba4a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801ba4e:	f2c0 80b1 	blt.w	801bbb4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ba52:	45a9      	cmp	r9, r5
 801ba54:	f340 80ae 	ble.w	801bbb4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ba58:	2c00      	cmp	r4, #0
 801ba5a:	f2c0 80ab 	blt.w	801bbb4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ba5e:	45a0      	cmp	r8, r4
 801ba60:	f340 80a8 	ble.w	801bbb4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ba64:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801ba68:	f01e 0f01 	tst.w	lr, #1
 801ba6c:	5d97      	ldrb	r7, [r2, r6]
 801ba6e:	bf0c      	ite	eq
 801ba70:	f007 070f 	andeq.w	r7, r7, #15
 801ba74:	113f      	asrne	r7, r7, #4
 801ba76:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801ba7a:	b2ff      	uxtb	r7, r7
 801ba7c:	f115 0a01 	adds.w	sl, r5, #1
 801ba80:	f100 809a 	bmi.w	801bbb8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ba84:	45d1      	cmp	r9, sl
 801ba86:	f340 8097 	ble.w	801bbb8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ba8a:	2c00      	cmp	r4, #0
 801ba8c:	f2c0 8094 	blt.w	801bbb8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ba90:	45a0      	cmp	r8, r4
 801ba92:	f340 8091 	ble.w	801bbb8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ba96:	2800      	cmp	r0, #0
 801ba98:	f000 8090 	beq.w	801bbbc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801ba9c:	f10e 0b01 	add.w	fp, lr, #1
 801baa0:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801baa4:	f01b 0f01 	tst.w	fp, #1
 801baa8:	5d96      	ldrb	r6, [r2, r6]
 801baaa:	bf0c      	ite	eq
 801baac:	f006 060f 	andeq.w	r6, r6, #15
 801bab0:	1136      	asrne	r6, r6, #4
 801bab2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801bab6:	b2f6      	uxtb	r6, r6
 801bab8:	f1bc 0f00 	cmp.w	ip, #0
 801babc:	f000 8082 	beq.w	801bbc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801bac0:	2d00      	cmp	r5, #0
 801bac2:	f104 0401 	add.w	r4, r4, #1
 801bac6:	db7b      	blt.n	801bbc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bac8:	45a9      	cmp	r9, r5
 801baca:	dd79      	ble.n	801bbc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bacc:	2c00      	cmp	r4, #0
 801bace:	db77      	blt.n	801bbc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bad0:	45a0      	cmp	r8, r4
 801bad2:	dd75      	ble.n	801bbc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801bad4:	eb03 0b0e 	add.w	fp, r3, lr
 801bad8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801badc:	f01b 0f01 	tst.w	fp, #1
 801bae0:	5d55      	ldrb	r5, [r2, r5]
 801bae2:	bf0c      	ite	eq
 801bae4:	f005 050f 	andeq.w	r5, r5, #15
 801bae8:	112d      	asrne	r5, r5, #4
 801baea:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801baee:	b2ed      	uxtb	r5, r5
 801baf0:	f1ba 0f00 	cmp.w	sl, #0
 801baf4:	db69      	blt.n	801bbca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801baf6:	45d1      	cmp	r9, sl
 801baf8:	dd67      	ble.n	801bbca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bafa:	2c00      	cmp	r4, #0
 801bafc:	db65      	blt.n	801bbca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bafe:	45a0      	cmp	r8, r4
 801bb00:	dd63      	ble.n	801bbca <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801bb02:	2800      	cmp	r0, #0
 801bb04:	d063      	beq.n	801bbce <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801bb06:	3301      	adds	r3, #1
 801bb08:	449e      	add	lr, r3
 801bb0a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801bb0e:	f01e 0f01 	tst.w	lr, #1
 801bb12:	5cd4      	ldrb	r4, [r2, r3]
 801bb14:	bf0c      	ite	eq
 801bb16:	f004 040f 	andeq.w	r4, r4, #15
 801bb1a:	1124      	asrne	r4, r4, #4
 801bb1c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801bb20:	b2e3      	uxtb	r3, r4
 801bb22:	b282      	uxth	r2, r0
 801bb24:	fa1f fc8c 	uxth.w	ip, ip
 801bb28:	fb02 f40c 	mul.w	r4, r2, ip
 801bb2c:	0112      	lsls	r2, r2, #4
 801bb2e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801bb32:	fa1f f08c 	uxth.w	r0, ip
 801bb36:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801bb3a:	1b12      	subs	r2, r2, r4
 801bb3c:	ebac 0c00 	sub.w	ip, ip, r0
 801bb40:	b292      	uxth	r2, r2
 801bb42:	fa1f fc8c 	uxth.w	ip, ip
 801bb46:	4372      	muls	r2, r6
 801bb48:	fb07 220c 	mla	r2, r7, ip, r2
 801bb4c:	fb00 2005 	mla	r0, r0, r5, r2
 801bb50:	fb04 0303 	mla	r3, r4, r3, r0
 801bb54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bb58:	b353      	cbz	r3, 801bbb0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801bb5a:	4a1e      	ldr	r2, [pc, #120]	; (801bbd4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801bb5c:	7808      	ldrb	r0, [r1, #0]
 801bb5e:	6814      	ldr	r4, [r2, #0]
 801bb60:	b29a      	uxth	r2, r3
 801bb62:	43db      	mvns	r3, r3
 801bb64:	b2e5      	uxtb	r5, r4
 801bb66:	b2db      	uxtb	r3, r3
 801bb68:	fb15 f502 	smulbb	r5, r5, r2
 801bb6c:	fb00 5003 	mla	r0, r0, r3, r5
 801bb70:	b280      	uxth	r0, r0
 801bb72:	1c45      	adds	r5, r0, #1
 801bb74:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bb78:	784d      	ldrb	r5, [r1, #1]
 801bb7a:	fb15 f503 	smulbb	r5, r5, r3
 801bb7e:	1200      	asrs	r0, r0, #8
 801bb80:	7008      	strb	r0, [r1, #0]
 801bb82:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801bb86:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801bb8a:	fb00 5002 	mla	r0, r0, r2, r5
 801bb8e:	b280      	uxth	r0, r0
 801bb90:	1c45      	adds	r5, r0, #1
 801bb92:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801bb96:	1200      	asrs	r0, r0, #8
 801bb98:	7048      	strb	r0, [r1, #1]
 801bb9a:	7888      	ldrb	r0, [r1, #2]
 801bb9c:	fb10 f303 	smulbb	r3, r0, r3
 801bba0:	fb04 3202 	mla	r2, r4, r2, r3
 801bba4:	b292      	uxth	r2, r2
 801bba6:	1c53      	adds	r3, r2, #1
 801bba8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801bbac:	1212      	asrs	r2, r2, #8
 801bbae:	708a      	strb	r2, [r1, #2]
 801bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb4:	2700      	movs	r7, #0
 801bbb6:	e761      	b.n	801ba7c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801bbb8:	2600      	movs	r6, #0
 801bbba:	e77d      	b.n	801bab8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801bbbc:	4606      	mov	r6, r0
 801bbbe:	e77b      	b.n	801bab8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801bbc0:	2500      	movs	r5, #0
 801bbc2:	e795      	b.n	801baf0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801bbc4:	4663      	mov	r3, ip
 801bbc6:	4665      	mov	r5, ip
 801bbc8:	e7ab      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bbca:	2300      	movs	r3, #0
 801bbcc:	e7a9      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	e7a7      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801bbd2:	bf00      	nop
 801bbd4:	2400b988 	.word	0x2400b988

0801bbd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbdc:	b093      	sub	sp, #76	; 0x4c
 801bbde:	461c      	mov	r4, r3
 801bbe0:	920c      	str	r2, [sp, #48]	; 0x30
 801bbe2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bbe4:	9011      	str	r0, [sp, #68]	; 0x44
 801bbe6:	9107      	str	r1, [sp, #28]
 801bbe8:	6850      	ldr	r0, [r2, #4]
 801bbea:	6812      	ldr	r2, [r2, #0]
 801bbec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801bbf0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801bbf4:	fb00 1303 	mla	r3, r0, r3, r1
 801bbf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbfc:	eb02 0b03 	add.w	fp, r2, r3
 801bc00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc02:	689b      	ldr	r3, [r3, #8]
 801bc04:	3301      	adds	r3, #1
 801bc06:	f023 0301 	bic.w	r3, r3, #1
 801bc0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc0e:	f8d3 8000 	ldr.w	r8, [r3]
 801bc12:	9b07      	ldr	r3, [sp, #28]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	dc03      	bgt.n	801bc20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	f340 822b 	ble.w	801c076 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801bc20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bc26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bc2a:	1e48      	subs	r0, r1, #1
 801bc2c:	1e57      	subs	r7, r2, #1
 801bc2e:	2c00      	cmp	r4, #0
 801bc30:	f340 80d7 	ble.w	801bde2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801bc34:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bc38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bc3c:	d406      	bmi.n	801bc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bc3e:	4584      	cmp	ip, r0
 801bc40:	da04      	bge.n	801bc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	db02      	blt.n	801bc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bc46:	42bb      	cmp	r3, r7
 801bc48:	f2c0 80cc 	blt.w	801bde4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801bc4c:	f11c 0c01 	adds.w	ip, ip, #1
 801bc50:	f100 80bf 	bmi.w	801bdd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bc54:	4561      	cmp	r1, ip
 801bc56:	f2c0 80bc 	blt.w	801bdd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	f100 80b9 	bmi.w	801bdd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bc60:	429a      	cmp	r2, r3
 801bc62:	f2c0 80b6 	blt.w	801bdd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801bc66:	46a2      	mov	sl, r4
 801bc68:	465f      	mov	r7, fp
 801bc6a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bc6e:	f1ba 0f00 	cmp.w	sl, #0
 801bc72:	f340 80d4 	ble.w	801be1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801bc76:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801bc7a:	1430      	asrs	r0, r6, #16
 801bc7c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801bc80:	9308      	str	r3, [sp, #32]
 801bc82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc84:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801bc88:	142b      	asrs	r3, r5, #16
 801bc8a:	f100 8124 	bmi.w	801bed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bc8e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801bc92:	4293      	cmp	r3, r2
 801bc94:	f280 811f 	bge.w	801bed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bc98:	2800      	cmp	r0, #0
 801bc9a:	f2c0 811c 	blt.w	801bed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bc9e:	f10e 32ff 	add.w	r2, lr, #4294967295
 801bca2:	4290      	cmp	r0, r2
 801bca4:	f280 8117 	bge.w	801bed6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801bca8:	fb00 3309 	mla	r3, r0, r9, r3
 801bcac:	0858      	lsrs	r0, r3, #1
 801bcae:	07da      	lsls	r2, r3, #31
 801bcb0:	9a08      	ldr	r2, [sp, #32]
 801bcb2:	f818 c000 	ldrb.w	ip, [r8, r0]
 801bcb6:	bf54      	ite	pl
 801bcb8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801bcbc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801bcc0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801bcc4:	fa5f fc8c 	uxtb.w	ip, ip
 801bcc8:	2a00      	cmp	r2, #0
 801bcca:	f000 80ed 	beq.w	801bea8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801bcce:	1c58      	adds	r0, r3, #1
 801bcd0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801bcd4:	07c0      	lsls	r0, r0, #31
 801bcd6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801bcda:	bf54      	ite	pl
 801bcdc:	f00e 0e0f 	andpl.w	lr, lr, #15
 801bce0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801bce4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801bce8:	fa5f fe8e 	uxtb.w	lr, lr
 801bcec:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801bcf0:	b1c9      	cbz	r1, 801bd26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bcf2:	444b      	add	r3, r9
 801bcf4:	0858      	lsrs	r0, r3, #1
 801bcf6:	07da      	lsls	r2, r3, #31
 801bcf8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801bcfc:	bf54      	ite	pl
 801bcfe:	f000 000f 	andpl.w	r0, r0, #15
 801bd02:	1100      	asrmi	r0, r0, #4
 801bd04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801bd08:	b2c0      	uxtb	r0, r0
 801bd0a:	900a      	str	r0, [sp, #40]	; 0x28
 801bd0c:	1c58      	adds	r0, r3, #1
 801bd0e:	0843      	lsrs	r3, r0, #1
 801bd10:	07c2      	lsls	r2, r0, #31
 801bd12:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bd16:	bf54      	ite	pl
 801bd18:	f003 030f 	andpl.w	r3, r3, #15
 801bd1c:	111b      	asrmi	r3, r3, #4
 801bd1e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	930e      	str	r3, [sp, #56]	; 0x38
 801bd26:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bd2a:	b289      	uxth	r1, r1
 801bd2c:	fb02 f301 	mul.w	r3, r2, r1
 801bd30:	0112      	lsls	r2, r2, #4
 801bd32:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bd36:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bd3a:	1ad2      	subs	r2, r2, r3
 801bd3c:	b289      	uxth	r1, r1
 801bd3e:	b292      	uxth	r2, r2
 801bd40:	1a40      	subs	r0, r0, r1
 801bd42:	fa1f fe80 	uxth.w	lr, r0
 801bd46:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bd48:	4342      	muls	r2, r0
 801bd4a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801bd4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd50:	fb01 c102 	mla	r1, r1, r2, ip
 801bd54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd56:	fb03 1302 	mla	r3, r3, r2, r1
 801bd5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bd5e:	b383      	cbz	r3, 801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bd60:	4ac6      	ldr	r2, [pc, #792]	; (801c07c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801bd62:	2bff      	cmp	r3, #255	; 0xff
 801bd64:	6812      	ldr	r2, [r2, #0]
 801bd66:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801bd6a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801bd6e:	b2d2      	uxtb	r2, r2
 801bd70:	f000 80ac 	beq.w	801becc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801bd74:	b299      	uxth	r1, r3
 801bd76:	43db      	mvns	r3, r3
 801bd78:	f897 c000 	ldrb.w	ip, [r7]
 801bd7c:	fb12 f201 	smulbb	r2, r2, r1
 801bd80:	b2db      	uxtb	r3, r3
 801bd82:	fb10 f001 	smulbb	r0, r0, r1
 801bd86:	fb0c 2203 	mla	r2, ip, r3, r2
 801bd8a:	fb1e f101 	smulbb	r1, lr, r1
 801bd8e:	b292      	uxth	r2, r2
 801bd90:	f102 0c01 	add.w	ip, r2, #1
 801bd94:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bd98:	1212      	asrs	r2, r2, #8
 801bd9a:	703a      	strb	r2, [r7, #0]
 801bd9c:	787a      	ldrb	r2, [r7, #1]
 801bd9e:	fb02 0003 	mla	r0, r2, r3, r0
 801bda2:	b280      	uxth	r0, r0
 801bda4:	1c42      	adds	r2, r0, #1
 801bda6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bdaa:	78ba      	ldrb	r2, [r7, #2]
 801bdac:	fb02 1303 	mla	r3, r2, r3, r1
 801bdb0:	1200      	asrs	r0, r0, #8
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	7078      	strb	r0, [r7, #1]
 801bdb6:	f103 0e01 	add.w	lr, r3, #1
 801bdba:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bdbe:	121b      	asrs	r3, r3, #8
 801bdc0:	70bb      	strb	r3, [r7, #2]
 801bdc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bdc4:	3703      	adds	r7, #3
 801bdc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bdca:	441d      	add	r5, r3
 801bdcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bdce:	441e      	add	r6, r3
 801bdd0:	e74d      	b.n	801bc6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bdd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bdd4:	3c01      	subs	r4, #1
 801bdd6:	f10b 0b03 	add.w	fp, fp, #3
 801bdda:	441d      	add	r5, r3
 801bddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bdde:	441e      	add	r6, r3
 801bde0:	e725      	b.n	801bc2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bde2:	d021      	beq.n	801be28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801bde4:	1e63      	subs	r3, r4, #1
 801bde6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801bde8:	fb00 5003 	mla	r0, r0, r3, r5
 801bdec:	1400      	asrs	r0, r0, #16
 801bdee:	f53f af3a 	bmi.w	801bc66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801bdf2:	3901      	subs	r1, #1
 801bdf4:	4288      	cmp	r0, r1
 801bdf6:	f6bf af36 	bge.w	801bc66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801bdfa:	9920      	ldr	r1, [sp, #128]	; 0x80
 801bdfc:	fb01 6303 	mla	r3, r1, r3, r6
 801be00:	141b      	asrs	r3, r3, #16
 801be02:	f53f af30 	bmi.w	801bc66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be06:	3a01      	subs	r2, #1
 801be08:	4293      	cmp	r3, r2
 801be0a:	f6bf af2c 	bge.w	801bc66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be0e:	f10b 0c03 	add.w	ip, fp, #3
 801be12:	46a6      	mov	lr, r4
 801be14:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801be18:	f1be 0f00 	cmp.w	lr, #0
 801be1c:	dc79      	bgt.n	801bf12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801be1e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801be22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be26:	44a3      	add	fp, r4
 801be28:	9b07      	ldr	r3, [sp, #28]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	f340 8123 	ble.w	801c076 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801be30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801be36:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be3e:	eef0 6a62 	vmov.f32	s13, s5
 801be42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be4e:	ee16 5a90 	vmov	r5, s13
 801be52:	eef0 6a43 	vmov.f32	s13, s6
 801be56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be5a:	ee16 6a90 	vmov	r6, s13
 801be5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be76:	ee12 2a90 	vmov	r2, s5
 801be7a:	eef0 2a47 	vmov.f32	s5, s14
 801be7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801be82:	ee13 2a10 	vmov	r2, s6
 801be86:	931f      	str	r3, [sp, #124]	; 0x7c
 801be88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801be8a:	eeb0 3a67 	vmov.f32	s6, s15
 801be8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801be92:	9320      	str	r3, [sp, #128]	; 0x80
 801be94:	9b07      	ldr	r3, [sp, #28]
 801be96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be98:	3b01      	subs	r3, #1
 801be9a:	9307      	str	r3, [sp, #28]
 801be9c:	bf08      	it	eq
 801be9e:	4614      	moveq	r4, r2
 801bea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bea2:	bf18      	it	ne
 801bea4:	461c      	movne	r4, r3
 801bea6:	e6b4      	b.n	801bc12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bea8:	2900      	cmp	r1, #0
 801beaa:	f43f af3c 	beq.w	801bd26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801beae:	eb09 0003 	add.w	r0, r9, r3
 801beb2:	0843      	lsrs	r3, r0, #1
 801beb4:	07c0      	lsls	r0, r0, #31
 801beb6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801beba:	bf54      	ite	pl
 801bebc:	f003 030f 	andpl.w	r3, r3, #15
 801bec0:	111b      	asrmi	r3, r3, #4
 801bec2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	930a      	str	r3, [sp, #40]	; 0x28
 801beca:	e72c      	b.n	801bd26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801becc:	703a      	strb	r2, [r7, #0]
 801bece:	7078      	strb	r0, [r7, #1]
 801bed0:	f887 e002 	strb.w	lr, [r7, #2]
 801bed4:	e775      	b.n	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bed6:	1c5a      	adds	r2, r3, #1
 801bed8:	f53f af73 	bmi.w	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bedc:	4594      	cmp	ip, r2
 801bede:	f6ff af70 	blt.w	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bee2:	1c42      	adds	r2, r0, #1
 801bee4:	f53f af6d 	bmi.w	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bee8:	4596      	cmp	lr, r2
 801beea:	f6ff af6a 	blt.w	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801beee:	9302      	str	r3, [sp, #8]
 801bef0:	fa0f f38e 	sxth.w	r3, lr
 801bef4:	9a08      	ldr	r2, [sp, #32]
 801bef6:	9301      	str	r3, [sp, #4]
 801bef8:	fa0f f38c 	sxth.w	r3, ip
 801befc:	9105      	str	r1, [sp, #20]
 801befe:	4639      	mov	r1, r7
 801bf00:	9300      	str	r3, [sp, #0]
 801bf02:	464b      	mov	r3, r9
 801bf04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bf08:	4642      	mov	r2, r8
 801bf0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bf0c:	f7ff fd90 	bl	801ba30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801bf10:	e757      	b.n	801bdc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bf12:	142a      	asrs	r2, r5, #16
 801bf14:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bf18:	1433      	asrs	r3, r6, #16
 801bf1a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801bf1e:	fb09 2303 	mla	r3, r9, r3, r2
 801bf22:	085a      	lsrs	r2, r3, #1
 801bf24:	07d9      	lsls	r1, r3, #31
 801bf26:	f818 2002 	ldrb.w	r2, [r8, r2]
 801bf2a:	bf54      	ite	pl
 801bf2c:	f002 020f 	andpl.w	r2, r2, #15
 801bf30:	1112      	asrmi	r2, r2, #4
 801bf32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bf36:	b2d2      	uxtb	r2, r2
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	f000 8085 	beq.w	801c048 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bf3e:	f103 0a01 	add.w	sl, r3, #1
 801bf42:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801bf46:	f01a 0f01 	tst.w	sl, #1
 801bf4a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bf4e:	bf0c      	ite	eq
 801bf50:	f001 010f 	andeq.w	r1, r1, #15
 801bf54:	1109      	asrne	r1, r1, #4
 801bf56:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bf5a:	b2c9      	uxtb	r1, r1
 801bf5c:	910f      	str	r1, [sp, #60]	; 0x3c
 801bf5e:	b1df      	cbz	r7, 801bf98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801bf60:	444b      	add	r3, r9
 801bf62:	0859      	lsrs	r1, r3, #1
 801bf64:	f013 0f01 	tst.w	r3, #1
 801bf68:	f103 0301 	add.w	r3, r3, #1
 801bf6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bf70:	bf0c      	ite	eq
 801bf72:	f001 010f 	andeq.w	r1, r1, #15
 801bf76:	1109      	asrne	r1, r1, #4
 801bf78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bf7c:	b2c9      	uxtb	r1, r1
 801bf7e:	910b      	str	r1, [sp, #44]	; 0x2c
 801bf80:	0859      	lsrs	r1, r3, #1
 801bf82:	07db      	lsls	r3, r3, #31
 801bf84:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bf88:	bf54      	ite	pl
 801bf8a:	f001 010f 	andpl.w	r1, r1, #15
 801bf8e:	1109      	asrmi	r1, r1, #4
 801bf90:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801bf94:	b2c9      	uxtb	r1, r1
 801bf96:	9110      	str	r1, [sp, #64]	; 0x40
 801bf98:	b280      	uxth	r0, r0
 801bf9a:	b2bf      	uxth	r7, r7
 801bf9c:	fb00 f307 	mul.w	r3, r0, r7
 801bfa0:	0100      	lsls	r0, r0, #4
 801bfa2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801bfa6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801bfaa:	1ac0      	subs	r0, r0, r3
 801bfac:	b2bf      	uxth	r7, r7
 801bfae:	b280      	uxth	r0, r0
 801bfb0:	1bc9      	subs	r1, r1, r7
 801bfb2:	fa1f fa81 	uxth.w	sl, r1
 801bfb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bfb8:	4348      	muls	r0, r1
 801bfba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bfbc:	fb02 020a 	mla	r2, r2, sl, r0
 801bfc0:	fb07 2701 	mla	r7, r7, r1, r2
 801bfc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bfc6:	fb03 7302 	mla	r3, r3, r2, r7
 801bfca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bfce:	b393      	cbz	r3, 801c036 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801bfd0:	4a2a      	ldr	r2, [pc, #168]	; (801c07c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801bfd2:	2bff      	cmp	r3, #255	; 0xff
 801bfd4:	6811      	ldr	r1, [r2, #0]
 801bfd6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801bfda:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801bfde:	b2c9      	uxtb	r1, r1
 801bfe0:	d042      	beq.n	801c068 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801bfe2:	b298      	uxth	r0, r3
 801bfe4:	43db      	mvns	r3, r3
 801bfe6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801bfea:	fb11 f100 	smulbb	r1, r1, r0
 801bfee:	b2db      	uxtb	r3, r3
 801bff0:	fb17 f700 	smulbb	r7, r7, r0
 801bff4:	fb02 1103 	mla	r1, r2, r3, r1
 801bff8:	fb1a f000 	smulbb	r0, sl, r0
 801bffc:	b289      	uxth	r1, r1
 801bffe:	1c4a      	adds	r2, r1, #1
 801c000:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c004:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801c008:	fb02 7703 	mla	r7, r2, r3, r7
 801c00c:	1209      	asrs	r1, r1, #8
 801c00e:	b2bf      	uxth	r7, r7
 801c010:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801c014:	1c7a      	adds	r2, r7, #1
 801c016:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c01a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801c01e:	fb02 0303 	mla	r3, r2, r3, r0
 801c022:	123f      	asrs	r7, r7, #8
 801c024:	b29b      	uxth	r3, r3
 801c026:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801c02a:	1c5a      	adds	r2, r3, #1
 801c02c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c030:	121b      	asrs	r3, r3, #8
 801c032:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801c036:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c038:	f10c 0c03 	add.w	ip, ip, #3
 801c03c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c040:	441d      	add	r5, r3
 801c042:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c044:	441e      	add	r6, r3
 801c046:	e6e7      	b.n	801be18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801c048:	2f00      	cmp	r7, #0
 801c04a:	d0a5      	beq.n	801bf98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c04c:	444b      	add	r3, r9
 801c04e:	0859      	lsrs	r1, r3, #1
 801c050:	07db      	lsls	r3, r3, #31
 801c052:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c056:	bf54      	ite	pl
 801c058:	f001 010f 	andpl.w	r1, r1, #15
 801c05c:	1109      	asrmi	r1, r1, #4
 801c05e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c062:	b2c9      	uxtb	r1, r1
 801c064:	910b      	str	r1, [sp, #44]	; 0x2c
 801c066:	e797      	b.n	801bf98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801c068:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801c06c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801c070:	f80c ac01 	strb.w	sl, [ip, #-1]
 801c074:	e7df      	b.n	801c036 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c076:	b013      	add	sp, #76	; 0x4c
 801c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c07c:	2400b988 	.word	0x2400b988

0801c080 <CRC_Lock>:
 801c080:	4a20      	ldr	r2, [pc, #128]	; (801c104 <CRC_Lock+0x84>)
 801c082:	b530      	push	{r4, r5, lr}
 801c084:	6813      	ldr	r3, [r2, #0]
 801c086:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801c08a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801c08e:	f023 0301 	bic.w	r3, r3, #1
 801c092:	6013      	str	r3, [r2, #0]
 801c094:	4b1c      	ldr	r3, [pc, #112]	; (801c108 <CRC_Lock+0x88>)
 801c096:	681a      	ldr	r2, [r3, #0]
 801c098:	4022      	ands	r2, r4
 801c09a:	42aa      	cmp	r2, r5
 801c09c:	d005      	beq.n	801c0aa <CRC_Lock+0x2a>
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	f24c 2270 	movw	r2, #49776	; 0xc270
 801c0a4:	4023      	ands	r3, r4
 801c0a6:	4293      	cmp	r3, r2
 801c0a8:	d124      	bne.n	801c0f4 <CRC_Lock+0x74>
 801c0aa:	4b18      	ldr	r3, [pc, #96]	; (801c10c <CRC_Lock+0x8c>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	bb0b      	cbnz	r3, 801c0f4 <CRC_Lock+0x74>
 801c0b0:	4b17      	ldr	r3, [pc, #92]	; (801c110 <CRC_Lock+0x90>)
 801c0b2:	681a      	ldr	r2, [r3, #0]
 801c0b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c0b8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c0bc:	d00d      	beq.n	801c0da <CRC_Lock+0x5a>
 801c0be:	681a      	ldr	r2, [r3, #0]
 801c0c0:	f240 4483 	movw	r4, #1155	; 0x483
 801c0c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c0c8:	42a2      	cmp	r2, r4
 801c0ca:	d006      	beq.n	801c0da <CRC_Lock+0x5a>
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f240 4285 	movw	r2, #1157	; 0x485
 801c0d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c0d6:	4293      	cmp	r3, r2
 801c0d8:	d10c      	bne.n	801c0f4 <CRC_Lock+0x74>
 801c0da:	4b0e      	ldr	r3, [pc, #56]	; (801c114 <CRC_Lock+0x94>)
 801c0dc:	2201      	movs	r2, #1
 801c0de:	601a      	str	r2, [r3, #0]
 801c0e0:	681a      	ldr	r2, [r3, #0]
 801c0e2:	2a00      	cmp	r2, #0
 801c0e4:	d1fc      	bne.n	801c0e0 <CRC_Lock+0x60>
 801c0e6:	4b0c      	ldr	r3, [pc, #48]	; (801c118 <CRC_Lock+0x98>)
 801c0e8:	6018      	str	r0, [r3, #0]
 801c0ea:	6818      	ldr	r0, [r3, #0]
 801c0ec:	1a43      	subs	r3, r0, r1
 801c0ee:	4258      	negs	r0, r3
 801c0f0:	4158      	adcs	r0, r3
 801c0f2:	bd30      	pop	{r4, r5, pc}
 801c0f4:	4b09      	ldr	r3, [pc, #36]	; (801c11c <CRC_Lock+0x9c>)
 801c0f6:	2201      	movs	r2, #1
 801c0f8:	601a      	str	r2, [r3, #0]
 801c0fa:	681a      	ldr	r2, [r3, #0]
 801c0fc:	2a00      	cmp	r2, #0
 801c0fe:	d1fc      	bne.n	801c0fa <CRC_Lock+0x7a>
 801c100:	4b07      	ldr	r3, [pc, #28]	; (801c120 <CRC_Lock+0xa0>)
 801c102:	e7f1      	b.n	801c0e8 <CRC_Lock+0x68>
 801c104:	e0002000 	.word	0xe0002000
 801c108:	e000ed00 	.word	0xe000ed00
 801c10c:	e0042000 	.word	0xe0042000
 801c110:	5c001000 	.word	0x5c001000
 801c114:	58024c08 	.word	0x58024c08
 801c118:	58024c00 	.word	0x58024c00
 801c11c:	40023008 	.word	0x40023008
 801c120:	40023000 	.word	0x40023000

0801c124 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801c124:	6101      	str	r1, [r0, #16]
 801c126:	4770      	bx	lr

0801c128 <_ZN8touchgfx8Gestures4tickEv>:
 801c128:	7b83      	ldrb	r3, [r0, #14]
 801c12a:	b14b      	cbz	r3, 801c140 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801c12c:	8903      	ldrh	r3, [r0, #8]
 801c12e:	3301      	adds	r3, #1
 801c130:	b29b      	uxth	r3, r3
 801c132:	2b07      	cmp	r3, #7
 801c134:	8103      	strh	r3, [r0, #8]
 801c136:	bf81      	itttt	hi
 801c138:	2300      	movhi	r3, #0
 801c13a:	8143      	strhhi	r3, [r0, #10]
 801c13c:	8183      	strhhi	r3, [r0, #12]
 801c13e:	7383      	strbhi	r3, [r0, #14]
 801c140:	4770      	bx	lr
	...

0801c144 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801c144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c148:	4698      	mov	r8, r3
 801c14a:	8883      	ldrh	r3, [r0, #4]
 801c14c:	4604      	mov	r4, r0
 801c14e:	4617      	mov	r7, r2
 801c150:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c154:	eba8 0303 	sub.w	r3, r8, r3
 801c158:	4a19      	ldr	r2, [pc, #100]	; (801c1c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801c15a:	460e      	mov	r6, r1
 801c15c:	b21b      	sxth	r3, r3
 801c15e:	88c1      	ldrh	r1, [r0, #6]
 801c160:	9200      	str	r2, [sp, #0]
 801c162:	2000      	movs	r0, #0
 801c164:	2b00      	cmp	r3, #0
 801c166:	8aa2      	ldrh	r2, [r4, #20]
 801c168:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801c16c:	bfb8      	it	lt
 801c16e:	425b      	neglt	r3, r3
 801c170:	f88d 0004 	strb.w	r0, [sp, #4]
 801c174:	f8ad 1008 	strh.w	r1, [sp, #8]
 801c178:	b21b      	sxth	r3, r3
 801c17a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c17e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c182:	4293      	cmp	r3, r2
 801c184:	dc07      	bgt.n	801c196 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801c186:	1a69      	subs	r1, r5, r1
 801c188:	b209      	sxth	r1, r1
 801c18a:	2900      	cmp	r1, #0
 801c18c:	bfb8      	it	lt
 801c18e:	4249      	neglt	r1, r1
 801c190:	b209      	sxth	r1, r1
 801c192:	428a      	cmp	r2, r1
 801c194:	da10      	bge.n	801c1b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801c196:	6920      	ldr	r0, [r4, #16]
 801c198:	4669      	mov	r1, sp
 801c19a:	eba8 0606 	sub.w	r6, r8, r6
 801c19e:	1bef      	subs	r7, r5, r7
 801c1a0:	6803      	ldr	r3, [r0, #0]
 801c1a2:	685b      	ldr	r3, [r3, #4]
 801c1a4:	4798      	blx	r3
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	2001      	movs	r0, #1
 801c1aa:	8166      	strh	r6, [r4, #10]
 801c1ac:	8123      	strh	r3, [r4, #8]
 801c1ae:	81a7      	strh	r7, [r4, #12]
 801c1b0:	f8a4 8004 	strh.w	r8, [r4, #4]
 801c1b4:	80e5      	strh	r5, [r4, #6]
 801c1b6:	73a0      	strb	r0, [r4, #14]
 801c1b8:	b004      	add	sp, #16
 801c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1be:	bf00      	nop
 801c1c0:	0801f32c 	.word	0x0801f32c

0801c1c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1c6:	461e      	mov	r6, r3
 801c1c8:	1e4b      	subs	r3, r1, #1
 801c1ca:	b085      	sub	sp, #20
 801c1cc:	4604      	mov	r4, r0
 801c1ce:	2b01      	cmp	r3, #1
 801c1d0:	460d      	mov	r5, r1
 801c1d2:	4617      	mov	r7, r2
 801c1d4:	d84b      	bhi.n	801c26e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801c1d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c1da:	1cd3      	adds	r3, r2, #3
 801c1dc:	b29b      	uxth	r3, r3
 801c1de:	2b06      	cmp	r3, #6
 801c1e0:	d916      	bls.n	801c210 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801c1e2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c284 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c1e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c1ea:	f8cd c004 	str.w	ip, [sp, #4]
 801c1ee:	f04f 0c00 	mov.w	ip, #0
 801c1f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c1f6:	6900      	ldr	r0, [r0, #16]
 801c1f8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c1fc:	a901      	add	r1, sp, #4
 801c1fe:	f88d c008 	strb.w	ip, [sp, #8]
 801c202:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c206:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c20a:	6803      	ldr	r3, [r0, #0]
 801c20c:	689b      	ldr	r3, [r3, #8]
 801c20e:	4798      	blx	r3
 801c210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c214:	1cd3      	adds	r3, r2, #3
 801c216:	b29b      	uxth	r3, r3
 801c218:	2b06      	cmp	r3, #6
 801c21a:	d916      	bls.n	801c24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c21c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c284 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c220:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c224:	f8cd c004 	str.w	ip, [sp, #4]
 801c228:	f04f 0c01 	mov.w	ip, #1
 801c22c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c230:	6920      	ldr	r0, [r4, #16]
 801c232:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c236:	a901      	add	r1, sp, #4
 801c238:	f88d c008 	strb.w	ip, [sp, #8]
 801c23c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c240:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c244:	6803      	ldr	r3, [r0, #0]
 801c246:	689b      	ldr	r3, [r3, #8]
 801c248:	4798      	blx	r3
 801c24a:	4b0d      	ldr	r3, [pc, #52]	; (801c280 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c24c:	a901      	add	r1, sp, #4
 801c24e:	6920      	ldr	r0, [r4, #16]
 801c250:	9301      	str	r3, [sp, #4]
 801c252:	2300      	movs	r3, #0
 801c254:	f88d 5008 	strb.w	r5, [sp, #8]
 801c258:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c25c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c260:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c264:	6803      	ldr	r3, [r0, #0]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	4798      	blx	r3
 801c26a:	b005      	add	sp, #20
 801c26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c26e:	2900      	cmp	r1, #0
 801c270:	d1eb      	bne.n	801c24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c272:	80a2      	strh	r2, [r4, #4]
 801c274:	80c6      	strh	r6, [r0, #6]
 801c276:	60a1      	str	r1, [r4, #8]
 801c278:	81a1      	strh	r1, [r4, #12]
 801c27a:	73a1      	strb	r1, [r4, #14]
 801c27c:	e7e5      	b.n	801c24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c27e:	bf00      	nop
 801c280:	0801f318 	.word	0x0801f318
 801c284:	0801f340 	.word	0x0801f340

0801c288 <__aeabi_atexit>:
 801c288:	460b      	mov	r3, r1
 801c28a:	4601      	mov	r1, r0
 801c28c:	4618      	mov	r0, r3
 801c28e:	f000 b853 	b.w	801c338 <__cxa_atexit>

0801c292 <_ZdlPvj>:
 801c292:	f000 b812 	b.w	801c2ba <_ZdlPv>

0801c296 <__cxa_guard_acquire>:
 801c296:	6803      	ldr	r3, [r0, #0]
 801c298:	07db      	lsls	r3, r3, #31
 801c29a:	d406      	bmi.n	801c2aa <__cxa_guard_acquire+0x14>
 801c29c:	7843      	ldrb	r3, [r0, #1]
 801c29e:	b103      	cbz	r3, 801c2a2 <__cxa_guard_acquire+0xc>
 801c2a0:	deff      	udf	#255	; 0xff
 801c2a2:	2301      	movs	r3, #1
 801c2a4:	7043      	strb	r3, [r0, #1]
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	4770      	bx	lr
 801c2aa:	2000      	movs	r0, #0
 801c2ac:	4770      	bx	lr

0801c2ae <__cxa_guard_release>:
 801c2ae:	2301      	movs	r3, #1
 801c2b0:	6003      	str	r3, [r0, #0]
 801c2b2:	4770      	bx	lr

0801c2b4 <__cxa_pure_virtual>:
 801c2b4:	b508      	push	{r3, lr}
 801c2b6:	f000 f80f 	bl	801c2d8 <_ZSt9terminatev>

0801c2ba <_ZdlPv>:
 801c2ba:	f000 b989 	b.w	801c5d0 <free>

0801c2be <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c2be:	b508      	push	{r3, lr}
 801c2c0:	4780      	blx	r0
 801c2c2:	f000 f80e 	bl	801c2e2 <abort>
	...

0801c2c8 <_ZSt13get_terminatev>:
 801c2c8:	4b02      	ldr	r3, [pc, #8]	; (801c2d4 <_ZSt13get_terminatev+0xc>)
 801c2ca:	6818      	ldr	r0, [r3, #0]
 801c2cc:	f3bf 8f5b 	dmb	ish
 801c2d0:	4770      	bx	lr
 801c2d2:	bf00      	nop
 801c2d4:	240000a8 	.word	0x240000a8

0801c2d8 <_ZSt9terminatev>:
 801c2d8:	b508      	push	{r3, lr}
 801c2da:	f7ff fff5 	bl	801c2c8 <_ZSt13get_terminatev>
 801c2de:	f7ff ffee 	bl	801c2be <_ZN10__cxxabiv111__terminateEPFvvE>

0801c2e2 <abort>:
 801c2e2:	b508      	push	{r3, lr}
 801c2e4:	2006      	movs	r0, #6
 801c2e6:	f000 fe11 	bl	801cf0c <raise>
 801c2ea:	2001      	movs	r0, #1
 801c2ec:	f7e6 fbca 	bl	8002a84 <_exit>

0801c2f0 <__assert_func>:
 801c2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2f2:	4614      	mov	r4, r2
 801c2f4:	461a      	mov	r2, r3
 801c2f6:	4b09      	ldr	r3, [pc, #36]	; (801c31c <__assert_func+0x2c>)
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	4605      	mov	r5, r0
 801c2fc:	68d8      	ldr	r0, [r3, #12]
 801c2fe:	b14c      	cbz	r4, 801c314 <__assert_func+0x24>
 801c300:	4b07      	ldr	r3, [pc, #28]	; (801c320 <__assert_func+0x30>)
 801c302:	9100      	str	r1, [sp, #0]
 801c304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c308:	4906      	ldr	r1, [pc, #24]	; (801c324 <__assert_func+0x34>)
 801c30a:	462b      	mov	r3, r5
 801c30c:	f000 f8fe 	bl	801c50c <fiprintf>
 801c310:	f7ff ffe7 	bl	801c2e2 <abort>
 801c314:	4b04      	ldr	r3, [pc, #16]	; (801c328 <__assert_func+0x38>)
 801c316:	461c      	mov	r4, r3
 801c318:	e7f3      	b.n	801c302 <__assert_func+0x12>
 801c31a:	bf00      	nop
 801c31c:	240000ac 	.word	0x240000ac
 801c320:	0801f568 	.word	0x0801f568
 801c324:	0801f575 	.word	0x0801f575
 801c328:	0801f5a3 	.word	0x0801f5a3

0801c32c <atexit>:
 801c32c:	2300      	movs	r3, #0
 801c32e:	4601      	mov	r1, r0
 801c330:	461a      	mov	r2, r3
 801c332:	4618      	mov	r0, r3
 801c334:	f000 bfd4 	b.w	801d2e0 <__register_exitproc>

0801c338 <__cxa_atexit>:
 801c338:	b510      	push	{r4, lr}
 801c33a:	4c05      	ldr	r4, [pc, #20]	; (801c350 <__cxa_atexit+0x18>)
 801c33c:	4613      	mov	r3, r2
 801c33e:	b12c      	cbz	r4, 801c34c <__cxa_atexit+0x14>
 801c340:	460a      	mov	r2, r1
 801c342:	4601      	mov	r1, r0
 801c344:	2002      	movs	r0, #2
 801c346:	f000 ffcb 	bl	801d2e0 <__register_exitproc>
 801c34a:	bd10      	pop	{r4, pc}
 801c34c:	4620      	mov	r0, r4
 801c34e:	e7fc      	b.n	801c34a <__cxa_atexit+0x12>
 801c350:	0801d2e1 	.word	0x0801d2e1

0801c354 <__errno>:
 801c354:	4b01      	ldr	r3, [pc, #4]	; (801c35c <__errno+0x8>)
 801c356:	6818      	ldr	r0, [r3, #0]
 801c358:	4770      	bx	lr
 801c35a:	bf00      	nop
 801c35c:	240000ac 	.word	0x240000ac

0801c360 <std>:
 801c360:	2300      	movs	r3, #0
 801c362:	b510      	push	{r4, lr}
 801c364:	4604      	mov	r4, r0
 801c366:	e9c0 3300 	strd	r3, r3, [r0]
 801c36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c36e:	6083      	str	r3, [r0, #8]
 801c370:	8181      	strh	r1, [r0, #12]
 801c372:	6643      	str	r3, [r0, #100]	; 0x64
 801c374:	81c2      	strh	r2, [r0, #14]
 801c376:	6183      	str	r3, [r0, #24]
 801c378:	4619      	mov	r1, r3
 801c37a:	2208      	movs	r2, #8
 801c37c:	305c      	adds	r0, #92	; 0x5c
 801c37e:	f000 f94d 	bl	801c61c <memset>
 801c382:	4b05      	ldr	r3, [pc, #20]	; (801c398 <std+0x38>)
 801c384:	6263      	str	r3, [r4, #36]	; 0x24
 801c386:	4b05      	ldr	r3, [pc, #20]	; (801c39c <std+0x3c>)
 801c388:	62a3      	str	r3, [r4, #40]	; 0x28
 801c38a:	4b05      	ldr	r3, [pc, #20]	; (801c3a0 <std+0x40>)
 801c38c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c38e:	4b05      	ldr	r3, [pc, #20]	; (801c3a4 <std+0x44>)
 801c390:	6224      	str	r4, [r4, #32]
 801c392:	6323      	str	r3, [r4, #48]	; 0x30
 801c394:	bd10      	pop	{r4, pc}
 801c396:	bf00      	nop
 801c398:	0801cf85 	.word	0x0801cf85
 801c39c:	0801cfa7 	.word	0x0801cfa7
 801c3a0:	0801cfdf 	.word	0x0801cfdf
 801c3a4:	0801d003 	.word	0x0801d003

0801c3a8 <_cleanup_r>:
 801c3a8:	4901      	ldr	r1, [pc, #4]	; (801c3b0 <_cleanup_r+0x8>)
 801c3aa:	f000 b8c1 	b.w	801c530 <_fwalk_reent>
 801c3ae:	bf00      	nop
 801c3b0:	0801d4d1 	.word	0x0801d4d1

0801c3b4 <__sfmoreglue>:
 801c3b4:	b570      	push	{r4, r5, r6, lr}
 801c3b6:	2268      	movs	r2, #104	; 0x68
 801c3b8:	1e4d      	subs	r5, r1, #1
 801c3ba:	4355      	muls	r5, r2
 801c3bc:	460e      	mov	r6, r1
 801c3be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c3c2:	f000 f99f 	bl	801c704 <_malloc_r>
 801c3c6:	4604      	mov	r4, r0
 801c3c8:	b140      	cbz	r0, 801c3dc <__sfmoreglue+0x28>
 801c3ca:	2100      	movs	r1, #0
 801c3cc:	e9c0 1600 	strd	r1, r6, [r0]
 801c3d0:	300c      	adds	r0, #12
 801c3d2:	60a0      	str	r0, [r4, #8]
 801c3d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c3d8:	f000 f920 	bl	801c61c <memset>
 801c3dc:	4620      	mov	r0, r4
 801c3de:	bd70      	pop	{r4, r5, r6, pc}

0801c3e0 <__sfp_lock_acquire>:
 801c3e0:	4801      	ldr	r0, [pc, #4]	; (801c3e8 <__sfp_lock_acquire+0x8>)
 801c3e2:	f000 b8ea 	b.w	801c5ba <__retarget_lock_acquire_recursive>
 801c3e6:	bf00      	nop
 801c3e8:	2400ba5e 	.word	0x2400ba5e

0801c3ec <__sfp_lock_release>:
 801c3ec:	4801      	ldr	r0, [pc, #4]	; (801c3f4 <__sfp_lock_release+0x8>)
 801c3ee:	f000 b8e6 	b.w	801c5be <__retarget_lock_release_recursive>
 801c3f2:	bf00      	nop
 801c3f4:	2400ba5e 	.word	0x2400ba5e

0801c3f8 <__sinit_lock_acquire>:
 801c3f8:	4801      	ldr	r0, [pc, #4]	; (801c400 <__sinit_lock_acquire+0x8>)
 801c3fa:	f000 b8de 	b.w	801c5ba <__retarget_lock_acquire_recursive>
 801c3fe:	bf00      	nop
 801c400:	2400ba5f 	.word	0x2400ba5f

0801c404 <__sinit_lock_release>:
 801c404:	4801      	ldr	r0, [pc, #4]	; (801c40c <__sinit_lock_release+0x8>)
 801c406:	f000 b8da 	b.w	801c5be <__retarget_lock_release_recursive>
 801c40a:	bf00      	nop
 801c40c:	2400ba5f 	.word	0x2400ba5f

0801c410 <__sinit>:
 801c410:	b510      	push	{r4, lr}
 801c412:	4604      	mov	r4, r0
 801c414:	f7ff fff0 	bl	801c3f8 <__sinit_lock_acquire>
 801c418:	69a3      	ldr	r3, [r4, #24]
 801c41a:	b11b      	cbz	r3, 801c424 <__sinit+0x14>
 801c41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c420:	f7ff bff0 	b.w	801c404 <__sinit_lock_release>
 801c424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c428:	6523      	str	r3, [r4, #80]	; 0x50
 801c42a:	4b13      	ldr	r3, [pc, #76]	; (801c478 <__sinit+0x68>)
 801c42c:	4a13      	ldr	r2, [pc, #76]	; (801c47c <__sinit+0x6c>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	62a2      	str	r2, [r4, #40]	; 0x28
 801c432:	42a3      	cmp	r3, r4
 801c434:	bf04      	itt	eq
 801c436:	2301      	moveq	r3, #1
 801c438:	61a3      	streq	r3, [r4, #24]
 801c43a:	4620      	mov	r0, r4
 801c43c:	f000 f820 	bl	801c480 <__sfp>
 801c440:	6060      	str	r0, [r4, #4]
 801c442:	4620      	mov	r0, r4
 801c444:	f000 f81c 	bl	801c480 <__sfp>
 801c448:	60a0      	str	r0, [r4, #8]
 801c44a:	4620      	mov	r0, r4
 801c44c:	f000 f818 	bl	801c480 <__sfp>
 801c450:	2200      	movs	r2, #0
 801c452:	60e0      	str	r0, [r4, #12]
 801c454:	2104      	movs	r1, #4
 801c456:	6860      	ldr	r0, [r4, #4]
 801c458:	f7ff ff82 	bl	801c360 <std>
 801c45c:	68a0      	ldr	r0, [r4, #8]
 801c45e:	2201      	movs	r2, #1
 801c460:	2109      	movs	r1, #9
 801c462:	f7ff ff7d 	bl	801c360 <std>
 801c466:	68e0      	ldr	r0, [r4, #12]
 801c468:	2202      	movs	r2, #2
 801c46a:	2112      	movs	r1, #18
 801c46c:	f7ff ff78 	bl	801c360 <std>
 801c470:	2301      	movs	r3, #1
 801c472:	61a3      	str	r3, [r4, #24]
 801c474:	e7d2      	b.n	801c41c <__sinit+0xc>
 801c476:	bf00      	nop
 801c478:	0801f604 	.word	0x0801f604
 801c47c:	0801c3a9 	.word	0x0801c3a9

0801c480 <__sfp>:
 801c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c482:	4607      	mov	r7, r0
 801c484:	f7ff ffac 	bl	801c3e0 <__sfp_lock_acquire>
 801c488:	4b1e      	ldr	r3, [pc, #120]	; (801c504 <__sfp+0x84>)
 801c48a:	681e      	ldr	r6, [r3, #0]
 801c48c:	69b3      	ldr	r3, [r6, #24]
 801c48e:	b913      	cbnz	r3, 801c496 <__sfp+0x16>
 801c490:	4630      	mov	r0, r6
 801c492:	f7ff ffbd 	bl	801c410 <__sinit>
 801c496:	3648      	adds	r6, #72	; 0x48
 801c498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c49c:	3b01      	subs	r3, #1
 801c49e:	d503      	bpl.n	801c4a8 <__sfp+0x28>
 801c4a0:	6833      	ldr	r3, [r6, #0]
 801c4a2:	b30b      	cbz	r3, 801c4e8 <__sfp+0x68>
 801c4a4:	6836      	ldr	r6, [r6, #0]
 801c4a6:	e7f7      	b.n	801c498 <__sfp+0x18>
 801c4a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c4ac:	b9d5      	cbnz	r5, 801c4e4 <__sfp+0x64>
 801c4ae:	4b16      	ldr	r3, [pc, #88]	; (801c508 <__sfp+0x88>)
 801c4b0:	60e3      	str	r3, [r4, #12]
 801c4b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c4b6:	6665      	str	r5, [r4, #100]	; 0x64
 801c4b8:	f000 f87e 	bl	801c5b8 <__retarget_lock_init_recursive>
 801c4bc:	f7ff ff96 	bl	801c3ec <__sfp_lock_release>
 801c4c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c4c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c4c8:	6025      	str	r5, [r4, #0]
 801c4ca:	61a5      	str	r5, [r4, #24]
 801c4cc:	2208      	movs	r2, #8
 801c4ce:	4629      	mov	r1, r5
 801c4d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c4d4:	f000 f8a2 	bl	801c61c <memset>
 801c4d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c4dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4e4:	3468      	adds	r4, #104	; 0x68
 801c4e6:	e7d9      	b.n	801c49c <__sfp+0x1c>
 801c4e8:	2104      	movs	r1, #4
 801c4ea:	4638      	mov	r0, r7
 801c4ec:	f7ff ff62 	bl	801c3b4 <__sfmoreglue>
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	6030      	str	r0, [r6, #0]
 801c4f4:	2800      	cmp	r0, #0
 801c4f6:	d1d5      	bne.n	801c4a4 <__sfp+0x24>
 801c4f8:	f7ff ff78 	bl	801c3ec <__sfp_lock_release>
 801c4fc:	230c      	movs	r3, #12
 801c4fe:	603b      	str	r3, [r7, #0]
 801c500:	e7ee      	b.n	801c4e0 <__sfp+0x60>
 801c502:	bf00      	nop
 801c504:	0801f604 	.word	0x0801f604
 801c508:	ffff0001 	.word	0xffff0001

0801c50c <fiprintf>:
 801c50c:	b40e      	push	{r1, r2, r3}
 801c50e:	b503      	push	{r0, r1, lr}
 801c510:	4601      	mov	r1, r0
 801c512:	ab03      	add	r3, sp, #12
 801c514:	4805      	ldr	r0, [pc, #20]	; (801c52c <fiprintf+0x20>)
 801c516:	f853 2b04 	ldr.w	r2, [r3], #4
 801c51a:	6800      	ldr	r0, [r0, #0]
 801c51c:	9301      	str	r3, [sp, #4]
 801c51e:	f000 f98f 	bl	801c840 <_vfiprintf_r>
 801c522:	b002      	add	sp, #8
 801c524:	f85d eb04 	ldr.w	lr, [sp], #4
 801c528:	b003      	add	sp, #12
 801c52a:	4770      	bx	lr
 801c52c:	240000ac 	.word	0x240000ac

0801c530 <_fwalk_reent>:
 801c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c534:	4606      	mov	r6, r0
 801c536:	4688      	mov	r8, r1
 801c538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c53c:	2700      	movs	r7, #0
 801c53e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c542:	f1b9 0901 	subs.w	r9, r9, #1
 801c546:	d505      	bpl.n	801c554 <_fwalk_reent+0x24>
 801c548:	6824      	ldr	r4, [r4, #0]
 801c54a:	2c00      	cmp	r4, #0
 801c54c:	d1f7      	bne.n	801c53e <_fwalk_reent+0xe>
 801c54e:	4638      	mov	r0, r7
 801c550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c554:	89ab      	ldrh	r3, [r5, #12]
 801c556:	2b01      	cmp	r3, #1
 801c558:	d907      	bls.n	801c56a <_fwalk_reent+0x3a>
 801c55a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c55e:	3301      	adds	r3, #1
 801c560:	d003      	beq.n	801c56a <_fwalk_reent+0x3a>
 801c562:	4629      	mov	r1, r5
 801c564:	4630      	mov	r0, r6
 801c566:	47c0      	blx	r8
 801c568:	4307      	orrs	r7, r0
 801c56a:	3568      	adds	r5, #104	; 0x68
 801c56c:	e7e9      	b.n	801c542 <_fwalk_reent+0x12>
	...

0801c570 <__libc_init_array>:
 801c570:	b570      	push	{r4, r5, r6, lr}
 801c572:	4d0d      	ldr	r5, [pc, #52]	; (801c5a8 <__libc_init_array+0x38>)
 801c574:	4c0d      	ldr	r4, [pc, #52]	; (801c5ac <__libc_init_array+0x3c>)
 801c576:	1b64      	subs	r4, r4, r5
 801c578:	10a4      	asrs	r4, r4, #2
 801c57a:	2600      	movs	r6, #0
 801c57c:	42a6      	cmp	r6, r4
 801c57e:	d109      	bne.n	801c594 <__libc_init_array+0x24>
 801c580:	4d0b      	ldr	r5, [pc, #44]	; (801c5b0 <__libc_init_array+0x40>)
 801c582:	4c0c      	ldr	r4, [pc, #48]	; (801c5b4 <__libc_init_array+0x44>)
 801c584:	f001 fa44 	bl	801da10 <_init>
 801c588:	1b64      	subs	r4, r4, r5
 801c58a:	10a4      	asrs	r4, r4, #2
 801c58c:	2600      	movs	r6, #0
 801c58e:	42a6      	cmp	r6, r4
 801c590:	d105      	bne.n	801c59e <__libc_init_array+0x2e>
 801c592:	bd70      	pop	{r4, r5, r6, pc}
 801c594:	f855 3b04 	ldr.w	r3, [r5], #4
 801c598:	4798      	blx	r3
 801c59a:	3601      	adds	r6, #1
 801c59c:	e7ee      	b.n	801c57c <__libc_init_array+0xc>
 801c59e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c5a2:	4798      	blx	r3
 801c5a4:	3601      	adds	r6, #1
 801c5a6:	e7f2      	b.n	801c58e <__libc_init_array+0x1e>
 801c5a8:	0801f6cc 	.word	0x0801f6cc
 801c5ac:	0801f6cc 	.word	0x0801f6cc
 801c5b0:	0801f6cc 	.word	0x0801f6cc
 801c5b4:	0801f6e0 	.word	0x0801f6e0

0801c5b8 <__retarget_lock_init_recursive>:
 801c5b8:	4770      	bx	lr

0801c5ba <__retarget_lock_acquire_recursive>:
 801c5ba:	4770      	bx	lr

0801c5bc <__retarget_lock_release>:
 801c5bc:	4770      	bx	lr

0801c5be <__retarget_lock_release_recursive>:
 801c5be:	4770      	bx	lr

0801c5c0 <malloc>:
 801c5c0:	4b02      	ldr	r3, [pc, #8]	; (801c5cc <malloc+0xc>)
 801c5c2:	4601      	mov	r1, r0
 801c5c4:	6818      	ldr	r0, [r3, #0]
 801c5c6:	f000 b89d 	b.w	801c704 <_malloc_r>
 801c5ca:	bf00      	nop
 801c5cc:	240000ac 	.word	0x240000ac

0801c5d0 <free>:
 801c5d0:	4b02      	ldr	r3, [pc, #8]	; (801c5dc <free+0xc>)
 801c5d2:	4601      	mov	r1, r0
 801c5d4:	6818      	ldr	r0, [r3, #0]
 801c5d6:	f000 b829 	b.w	801c62c <_free_r>
 801c5da:	bf00      	nop
 801c5dc:	240000ac 	.word	0x240000ac

0801c5e0 <memcmp>:
 801c5e0:	b510      	push	{r4, lr}
 801c5e2:	3901      	subs	r1, #1
 801c5e4:	4402      	add	r2, r0
 801c5e6:	4290      	cmp	r0, r2
 801c5e8:	d101      	bne.n	801c5ee <memcmp+0xe>
 801c5ea:	2000      	movs	r0, #0
 801c5ec:	e005      	b.n	801c5fa <memcmp+0x1a>
 801c5ee:	7803      	ldrb	r3, [r0, #0]
 801c5f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c5f4:	42a3      	cmp	r3, r4
 801c5f6:	d001      	beq.n	801c5fc <memcmp+0x1c>
 801c5f8:	1b18      	subs	r0, r3, r4
 801c5fa:	bd10      	pop	{r4, pc}
 801c5fc:	3001      	adds	r0, #1
 801c5fe:	e7f2      	b.n	801c5e6 <memcmp+0x6>

0801c600 <memcpy>:
 801c600:	440a      	add	r2, r1
 801c602:	4291      	cmp	r1, r2
 801c604:	f100 33ff 	add.w	r3, r0, #4294967295
 801c608:	d100      	bne.n	801c60c <memcpy+0xc>
 801c60a:	4770      	bx	lr
 801c60c:	b510      	push	{r4, lr}
 801c60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c612:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c616:	4291      	cmp	r1, r2
 801c618:	d1f9      	bne.n	801c60e <memcpy+0xe>
 801c61a:	bd10      	pop	{r4, pc}

0801c61c <memset>:
 801c61c:	4402      	add	r2, r0
 801c61e:	4603      	mov	r3, r0
 801c620:	4293      	cmp	r3, r2
 801c622:	d100      	bne.n	801c626 <memset+0xa>
 801c624:	4770      	bx	lr
 801c626:	f803 1b01 	strb.w	r1, [r3], #1
 801c62a:	e7f9      	b.n	801c620 <memset+0x4>

0801c62c <_free_r>:
 801c62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c62e:	2900      	cmp	r1, #0
 801c630:	d044      	beq.n	801c6bc <_free_r+0x90>
 801c632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c636:	9001      	str	r0, [sp, #4]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	f1a1 0404 	sub.w	r4, r1, #4
 801c63e:	bfb8      	it	lt
 801c640:	18e4      	addlt	r4, r4, r3
 801c642:	f001 f813 	bl	801d66c <__malloc_lock>
 801c646:	4a1e      	ldr	r2, [pc, #120]	; (801c6c0 <_free_r+0x94>)
 801c648:	9801      	ldr	r0, [sp, #4]
 801c64a:	6813      	ldr	r3, [r2, #0]
 801c64c:	b933      	cbnz	r3, 801c65c <_free_r+0x30>
 801c64e:	6063      	str	r3, [r4, #4]
 801c650:	6014      	str	r4, [r2, #0]
 801c652:	b003      	add	sp, #12
 801c654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c658:	f001 b80e 	b.w	801d678 <__malloc_unlock>
 801c65c:	42a3      	cmp	r3, r4
 801c65e:	d908      	bls.n	801c672 <_free_r+0x46>
 801c660:	6825      	ldr	r5, [r4, #0]
 801c662:	1961      	adds	r1, r4, r5
 801c664:	428b      	cmp	r3, r1
 801c666:	bf01      	itttt	eq
 801c668:	6819      	ldreq	r1, [r3, #0]
 801c66a:	685b      	ldreq	r3, [r3, #4]
 801c66c:	1949      	addeq	r1, r1, r5
 801c66e:	6021      	streq	r1, [r4, #0]
 801c670:	e7ed      	b.n	801c64e <_free_r+0x22>
 801c672:	461a      	mov	r2, r3
 801c674:	685b      	ldr	r3, [r3, #4]
 801c676:	b10b      	cbz	r3, 801c67c <_free_r+0x50>
 801c678:	42a3      	cmp	r3, r4
 801c67a:	d9fa      	bls.n	801c672 <_free_r+0x46>
 801c67c:	6811      	ldr	r1, [r2, #0]
 801c67e:	1855      	adds	r5, r2, r1
 801c680:	42a5      	cmp	r5, r4
 801c682:	d10b      	bne.n	801c69c <_free_r+0x70>
 801c684:	6824      	ldr	r4, [r4, #0]
 801c686:	4421      	add	r1, r4
 801c688:	1854      	adds	r4, r2, r1
 801c68a:	42a3      	cmp	r3, r4
 801c68c:	6011      	str	r1, [r2, #0]
 801c68e:	d1e0      	bne.n	801c652 <_free_r+0x26>
 801c690:	681c      	ldr	r4, [r3, #0]
 801c692:	685b      	ldr	r3, [r3, #4]
 801c694:	6053      	str	r3, [r2, #4]
 801c696:	4421      	add	r1, r4
 801c698:	6011      	str	r1, [r2, #0]
 801c69a:	e7da      	b.n	801c652 <_free_r+0x26>
 801c69c:	d902      	bls.n	801c6a4 <_free_r+0x78>
 801c69e:	230c      	movs	r3, #12
 801c6a0:	6003      	str	r3, [r0, #0]
 801c6a2:	e7d6      	b.n	801c652 <_free_r+0x26>
 801c6a4:	6825      	ldr	r5, [r4, #0]
 801c6a6:	1961      	adds	r1, r4, r5
 801c6a8:	428b      	cmp	r3, r1
 801c6aa:	bf04      	itt	eq
 801c6ac:	6819      	ldreq	r1, [r3, #0]
 801c6ae:	685b      	ldreq	r3, [r3, #4]
 801c6b0:	6063      	str	r3, [r4, #4]
 801c6b2:	bf04      	itt	eq
 801c6b4:	1949      	addeq	r1, r1, r5
 801c6b6:	6021      	streq	r1, [r4, #0]
 801c6b8:	6054      	str	r4, [r2, #4]
 801c6ba:	e7ca      	b.n	801c652 <_free_r+0x26>
 801c6bc:	b003      	add	sp, #12
 801c6be:	bd30      	pop	{r4, r5, pc}
 801c6c0:	2400ba60 	.word	0x2400ba60

0801c6c4 <sbrk_aligned>:
 801c6c4:	b570      	push	{r4, r5, r6, lr}
 801c6c6:	4e0e      	ldr	r6, [pc, #56]	; (801c700 <sbrk_aligned+0x3c>)
 801c6c8:	460c      	mov	r4, r1
 801c6ca:	6831      	ldr	r1, [r6, #0]
 801c6cc:	4605      	mov	r5, r0
 801c6ce:	b911      	cbnz	r1, 801c6d6 <sbrk_aligned+0x12>
 801c6d0:	f000 fbe4 	bl	801ce9c <_sbrk_r>
 801c6d4:	6030      	str	r0, [r6, #0]
 801c6d6:	4621      	mov	r1, r4
 801c6d8:	4628      	mov	r0, r5
 801c6da:	f000 fbdf 	bl	801ce9c <_sbrk_r>
 801c6de:	1c43      	adds	r3, r0, #1
 801c6e0:	d00a      	beq.n	801c6f8 <sbrk_aligned+0x34>
 801c6e2:	1cc4      	adds	r4, r0, #3
 801c6e4:	f024 0403 	bic.w	r4, r4, #3
 801c6e8:	42a0      	cmp	r0, r4
 801c6ea:	d007      	beq.n	801c6fc <sbrk_aligned+0x38>
 801c6ec:	1a21      	subs	r1, r4, r0
 801c6ee:	4628      	mov	r0, r5
 801c6f0:	f000 fbd4 	bl	801ce9c <_sbrk_r>
 801c6f4:	3001      	adds	r0, #1
 801c6f6:	d101      	bne.n	801c6fc <sbrk_aligned+0x38>
 801c6f8:	f04f 34ff 	mov.w	r4, #4294967295
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	bd70      	pop	{r4, r5, r6, pc}
 801c700:	2400ba64 	.word	0x2400ba64

0801c704 <_malloc_r>:
 801c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c708:	1ccd      	adds	r5, r1, #3
 801c70a:	f025 0503 	bic.w	r5, r5, #3
 801c70e:	3508      	adds	r5, #8
 801c710:	2d0c      	cmp	r5, #12
 801c712:	bf38      	it	cc
 801c714:	250c      	movcc	r5, #12
 801c716:	2d00      	cmp	r5, #0
 801c718:	4607      	mov	r7, r0
 801c71a:	db01      	blt.n	801c720 <_malloc_r+0x1c>
 801c71c:	42a9      	cmp	r1, r5
 801c71e:	d905      	bls.n	801c72c <_malloc_r+0x28>
 801c720:	230c      	movs	r3, #12
 801c722:	603b      	str	r3, [r7, #0]
 801c724:	2600      	movs	r6, #0
 801c726:	4630      	mov	r0, r6
 801c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c72c:	4e2e      	ldr	r6, [pc, #184]	; (801c7e8 <_malloc_r+0xe4>)
 801c72e:	f000 ff9d 	bl	801d66c <__malloc_lock>
 801c732:	6833      	ldr	r3, [r6, #0]
 801c734:	461c      	mov	r4, r3
 801c736:	bb34      	cbnz	r4, 801c786 <_malloc_r+0x82>
 801c738:	4629      	mov	r1, r5
 801c73a:	4638      	mov	r0, r7
 801c73c:	f7ff ffc2 	bl	801c6c4 <sbrk_aligned>
 801c740:	1c43      	adds	r3, r0, #1
 801c742:	4604      	mov	r4, r0
 801c744:	d14d      	bne.n	801c7e2 <_malloc_r+0xde>
 801c746:	6834      	ldr	r4, [r6, #0]
 801c748:	4626      	mov	r6, r4
 801c74a:	2e00      	cmp	r6, #0
 801c74c:	d140      	bne.n	801c7d0 <_malloc_r+0xcc>
 801c74e:	6823      	ldr	r3, [r4, #0]
 801c750:	4631      	mov	r1, r6
 801c752:	4638      	mov	r0, r7
 801c754:	eb04 0803 	add.w	r8, r4, r3
 801c758:	f000 fba0 	bl	801ce9c <_sbrk_r>
 801c75c:	4580      	cmp	r8, r0
 801c75e:	d13a      	bne.n	801c7d6 <_malloc_r+0xd2>
 801c760:	6821      	ldr	r1, [r4, #0]
 801c762:	3503      	adds	r5, #3
 801c764:	1a6d      	subs	r5, r5, r1
 801c766:	f025 0503 	bic.w	r5, r5, #3
 801c76a:	3508      	adds	r5, #8
 801c76c:	2d0c      	cmp	r5, #12
 801c76e:	bf38      	it	cc
 801c770:	250c      	movcc	r5, #12
 801c772:	4629      	mov	r1, r5
 801c774:	4638      	mov	r0, r7
 801c776:	f7ff ffa5 	bl	801c6c4 <sbrk_aligned>
 801c77a:	3001      	adds	r0, #1
 801c77c:	d02b      	beq.n	801c7d6 <_malloc_r+0xd2>
 801c77e:	6823      	ldr	r3, [r4, #0]
 801c780:	442b      	add	r3, r5
 801c782:	6023      	str	r3, [r4, #0]
 801c784:	e00e      	b.n	801c7a4 <_malloc_r+0xa0>
 801c786:	6822      	ldr	r2, [r4, #0]
 801c788:	1b52      	subs	r2, r2, r5
 801c78a:	d41e      	bmi.n	801c7ca <_malloc_r+0xc6>
 801c78c:	2a0b      	cmp	r2, #11
 801c78e:	d916      	bls.n	801c7be <_malloc_r+0xba>
 801c790:	1961      	adds	r1, r4, r5
 801c792:	42a3      	cmp	r3, r4
 801c794:	6025      	str	r5, [r4, #0]
 801c796:	bf18      	it	ne
 801c798:	6059      	strne	r1, [r3, #4]
 801c79a:	6863      	ldr	r3, [r4, #4]
 801c79c:	bf08      	it	eq
 801c79e:	6031      	streq	r1, [r6, #0]
 801c7a0:	5162      	str	r2, [r4, r5]
 801c7a2:	604b      	str	r3, [r1, #4]
 801c7a4:	4638      	mov	r0, r7
 801c7a6:	f104 060b 	add.w	r6, r4, #11
 801c7aa:	f000 ff65 	bl	801d678 <__malloc_unlock>
 801c7ae:	f026 0607 	bic.w	r6, r6, #7
 801c7b2:	1d23      	adds	r3, r4, #4
 801c7b4:	1af2      	subs	r2, r6, r3
 801c7b6:	d0b6      	beq.n	801c726 <_malloc_r+0x22>
 801c7b8:	1b9b      	subs	r3, r3, r6
 801c7ba:	50a3      	str	r3, [r4, r2]
 801c7bc:	e7b3      	b.n	801c726 <_malloc_r+0x22>
 801c7be:	6862      	ldr	r2, [r4, #4]
 801c7c0:	42a3      	cmp	r3, r4
 801c7c2:	bf0c      	ite	eq
 801c7c4:	6032      	streq	r2, [r6, #0]
 801c7c6:	605a      	strne	r2, [r3, #4]
 801c7c8:	e7ec      	b.n	801c7a4 <_malloc_r+0xa0>
 801c7ca:	4623      	mov	r3, r4
 801c7cc:	6864      	ldr	r4, [r4, #4]
 801c7ce:	e7b2      	b.n	801c736 <_malloc_r+0x32>
 801c7d0:	4634      	mov	r4, r6
 801c7d2:	6876      	ldr	r6, [r6, #4]
 801c7d4:	e7b9      	b.n	801c74a <_malloc_r+0x46>
 801c7d6:	230c      	movs	r3, #12
 801c7d8:	603b      	str	r3, [r7, #0]
 801c7da:	4638      	mov	r0, r7
 801c7dc:	f000 ff4c 	bl	801d678 <__malloc_unlock>
 801c7e0:	e7a1      	b.n	801c726 <_malloc_r+0x22>
 801c7e2:	6025      	str	r5, [r4, #0]
 801c7e4:	e7de      	b.n	801c7a4 <_malloc_r+0xa0>
 801c7e6:	bf00      	nop
 801c7e8:	2400ba60 	.word	0x2400ba60

0801c7ec <__sfputc_r>:
 801c7ec:	6893      	ldr	r3, [r2, #8]
 801c7ee:	3b01      	subs	r3, #1
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	b410      	push	{r4}
 801c7f4:	6093      	str	r3, [r2, #8]
 801c7f6:	da08      	bge.n	801c80a <__sfputc_r+0x1e>
 801c7f8:	6994      	ldr	r4, [r2, #24]
 801c7fa:	42a3      	cmp	r3, r4
 801c7fc:	db01      	blt.n	801c802 <__sfputc_r+0x16>
 801c7fe:	290a      	cmp	r1, #10
 801c800:	d103      	bne.n	801c80a <__sfputc_r+0x1e>
 801c802:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c806:	f000 bc99 	b.w	801d13c <__swbuf_r>
 801c80a:	6813      	ldr	r3, [r2, #0]
 801c80c:	1c58      	adds	r0, r3, #1
 801c80e:	6010      	str	r0, [r2, #0]
 801c810:	7019      	strb	r1, [r3, #0]
 801c812:	4608      	mov	r0, r1
 801c814:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c818:	4770      	bx	lr

0801c81a <__sfputs_r>:
 801c81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c81c:	4606      	mov	r6, r0
 801c81e:	460f      	mov	r7, r1
 801c820:	4614      	mov	r4, r2
 801c822:	18d5      	adds	r5, r2, r3
 801c824:	42ac      	cmp	r4, r5
 801c826:	d101      	bne.n	801c82c <__sfputs_r+0x12>
 801c828:	2000      	movs	r0, #0
 801c82a:	e007      	b.n	801c83c <__sfputs_r+0x22>
 801c82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c830:	463a      	mov	r2, r7
 801c832:	4630      	mov	r0, r6
 801c834:	f7ff ffda 	bl	801c7ec <__sfputc_r>
 801c838:	1c43      	adds	r3, r0, #1
 801c83a:	d1f3      	bne.n	801c824 <__sfputs_r+0xa>
 801c83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c840 <_vfiprintf_r>:
 801c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c844:	460d      	mov	r5, r1
 801c846:	b09d      	sub	sp, #116	; 0x74
 801c848:	4614      	mov	r4, r2
 801c84a:	4698      	mov	r8, r3
 801c84c:	4606      	mov	r6, r0
 801c84e:	b118      	cbz	r0, 801c858 <_vfiprintf_r+0x18>
 801c850:	6983      	ldr	r3, [r0, #24]
 801c852:	b90b      	cbnz	r3, 801c858 <_vfiprintf_r+0x18>
 801c854:	f7ff fddc 	bl	801c410 <__sinit>
 801c858:	4b89      	ldr	r3, [pc, #548]	; (801ca80 <_vfiprintf_r+0x240>)
 801c85a:	429d      	cmp	r5, r3
 801c85c:	d11b      	bne.n	801c896 <_vfiprintf_r+0x56>
 801c85e:	6875      	ldr	r5, [r6, #4]
 801c860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c862:	07d9      	lsls	r1, r3, #31
 801c864:	d405      	bmi.n	801c872 <_vfiprintf_r+0x32>
 801c866:	89ab      	ldrh	r3, [r5, #12]
 801c868:	059a      	lsls	r2, r3, #22
 801c86a:	d402      	bmi.n	801c872 <_vfiprintf_r+0x32>
 801c86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c86e:	f7ff fea4 	bl	801c5ba <__retarget_lock_acquire_recursive>
 801c872:	89ab      	ldrh	r3, [r5, #12]
 801c874:	071b      	lsls	r3, r3, #28
 801c876:	d501      	bpl.n	801c87c <_vfiprintf_r+0x3c>
 801c878:	692b      	ldr	r3, [r5, #16]
 801c87a:	b9eb      	cbnz	r3, 801c8b8 <_vfiprintf_r+0x78>
 801c87c:	4629      	mov	r1, r5
 801c87e:	4630      	mov	r0, r6
 801c880:	f000 fcc0 	bl	801d204 <__swsetup_r>
 801c884:	b1c0      	cbz	r0, 801c8b8 <_vfiprintf_r+0x78>
 801c886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c888:	07dc      	lsls	r4, r3, #31
 801c88a:	d50e      	bpl.n	801c8aa <_vfiprintf_r+0x6a>
 801c88c:	f04f 30ff 	mov.w	r0, #4294967295
 801c890:	b01d      	add	sp, #116	; 0x74
 801c892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c896:	4b7b      	ldr	r3, [pc, #492]	; (801ca84 <_vfiprintf_r+0x244>)
 801c898:	429d      	cmp	r5, r3
 801c89a:	d101      	bne.n	801c8a0 <_vfiprintf_r+0x60>
 801c89c:	68b5      	ldr	r5, [r6, #8]
 801c89e:	e7df      	b.n	801c860 <_vfiprintf_r+0x20>
 801c8a0:	4b79      	ldr	r3, [pc, #484]	; (801ca88 <_vfiprintf_r+0x248>)
 801c8a2:	429d      	cmp	r5, r3
 801c8a4:	bf08      	it	eq
 801c8a6:	68f5      	ldreq	r5, [r6, #12]
 801c8a8:	e7da      	b.n	801c860 <_vfiprintf_r+0x20>
 801c8aa:	89ab      	ldrh	r3, [r5, #12]
 801c8ac:	0598      	lsls	r0, r3, #22
 801c8ae:	d4ed      	bmi.n	801c88c <_vfiprintf_r+0x4c>
 801c8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8b2:	f7ff fe84 	bl	801c5be <__retarget_lock_release_recursive>
 801c8b6:	e7e9      	b.n	801c88c <_vfiprintf_r+0x4c>
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	9309      	str	r3, [sp, #36]	; 0x24
 801c8bc:	2320      	movs	r3, #32
 801c8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c8c6:	2330      	movs	r3, #48	; 0x30
 801c8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ca8c <_vfiprintf_r+0x24c>
 801c8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c8d0:	f04f 0901 	mov.w	r9, #1
 801c8d4:	4623      	mov	r3, r4
 801c8d6:	469a      	mov	sl, r3
 801c8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8dc:	b10a      	cbz	r2, 801c8e2 <_vfiprintf_r+0xa2>
 801c8de:	2a25      	cmp	r2, #37	; 0x25
 801c8e0:	d1f9      	bne.n	801c8d6 <_vfiprintf_r+0x96>
 801c8e2:	ebba 0b04 	subs.w	fp, sl, r4
 801c8e6:	d00b      	beq.n	801c900 <_vfiprintf_r+0xc0>
 801c8e8:	465b      	mov	r3, fp
 801c8ea:	4622      	mov	r2, r4
 801c8ec:	4629      	mov	r1, r5
 801c8ee:	4630      	mov	r0, r6
 801c8f0:	f7ff ff93 	bl	801c81a <__sfputs_r>
 801c8f4:	3001      	adds	r0, #1
 801c8f6:	f000 80aa 	beq.w	801ca4e <_vfiprintf_r+0x20e>
 801c8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c8fc:	445a      	add	r2, fp
 801c8fe:	9209      	str	r2, [sp, #36]	; 0x24
 801c900:	f89a 3000 	ldrb.w	r3, [sl]
 801c904:	2b00      	cmp	r3, #0
 801c906:	f000 80a2 	beq.w	801ca4e <_vfiprintf_r+0x20e>
 801c90a:	2300      	movs	r3, #0
 801c90c:	f04f 32ff 	mov.w	r2, #4294967295
 801c910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c914:	f10a 0a01 	add.w	sl, sl, #1
 801c918:	9304      	str	r3, [sp, #16]
 801c91a:	9307      	str	r3, [sp, #28]
 801c91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c920:	931a      	str	r3, [sp, #104]	; 0x68
 801c922:	4654      	mov	r4, sl
 801c924:	2205      	movs	r2, #5
 801c926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c92a:	4858      	ldr	r0, [pc, #352]	; (801ca8c <_vfiprintf_r+0x24c>)
 801c92c:	f7e3 fcf8 	bl	8000320 <memchr>
 801c930:	9a04      	ldr	r2, [sp, #16]
 801c932:	b9d8      	cbnz	r0, 801c96c <_vfiprintf_r+0x12c>
 801c934:	06d1      	lsls	r1, r2, #27
 801c936:	bf44      	itt	mi
 801c938:	2320      	movmi	r3, #32
 801c93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c93e:	0713      	lsls	r3, r2, #28
 801c940:	bf44      	itt	mi
 801c942:	232b      	movmi	r3, #43	; 0x2b
 801c944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c948:	f89a 3000 	ldrb.w	r3, [sl]
 801c94c:	2b2a      	cmp	r3, #42	; 0x2a
 801c94e:	d015      	beq.n	801c97c <_vfiprintf_r+0x13c>
 801c950:	9a07      	ldr	r2, [sp, #28]
 801c952:	4654      	mov	r4, sl
 801c954:	2000      	movs	r0, #0
 801c956:	f04f 0c0a 	mov.w	ip, #10
 801c95a:	4621      	mov	r1, r4
 801c95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c960:	3b30      	subs	r3, #48	; 0x30
 801c962:	2b09      	cmp	r3, #9
 801c964:	d94e      	bls.n	801ca04 <_vfiprintf_r+0x1c4>
 801c966:	b1b0      	cbz	r0, 801c996 <_vfiprintf_r+0x156>
 801c968:	9207      	str	r2, [sp, #28]
 801c96a:	e014      	b.n	801c996 <_vfiprintf_r+0x156>
 801c96c:	eba0 0308 	sub.w	r3, r0, r8
 801c970:	fa09 f303 	lsl.w	r3, r9, r3
 801c974:	4313      	orrs	r3, r2
 801c976:	9304      	str	r3, [sp, #16]
 801c978:	46a2      	mov	sl, r4
 801c97a:	e7d2      	b.n	801c922 <_vfiprintf_r+0xe2>
 801c97c:	9b03      	ldr	r3, [sp, #12]
 801c97e:	1d19      	adds	r1, r3, #4
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	9103      	str	r1, [sp, #12]
 801c984:	2b00      	cmp	r3, #0
 801c986:	bfbb      	ittet	lt
 801c988:	425b      	neglt	r3, r3
 801c98a:	f042 0202 	orrlt.w	r2, r2, #2
 801c98e:	9307      	strge	r3, [sp, #28]
 801c990:	9307      	strlt	r3, [sp, #28]
 801c992:	bfb8      	it	lt
 801c994:	9204      	strlt	r2, [sp, #16]
 801c996:	7823      	ldrb	r3, [r4, #0]
 801c998:	2b2e      	cmp	r3, #46	; 0x2e
 801c99a:	d10c      	bne.n	801c9b6 <_vfiprintf_r+0x176>
 801c99c:	7863      	ldrb	r3, [r4, #1]
 801c99e:	2b2a      	cmp	r3, #42	; 0x2a
 801c9a0:	d135      	bne.n	801ca0e <_vfiprintf_r+0x1ce>
 801c9a2:	9b03      	ldr	r3, [sp, #12]
 801c9a4:	1d1a      	adds	r2, r3, #4
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	9203      	str	r2, [sp, #12]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	bfb8      	it	lt
 801c9ae:	f04f 33ff 	movlt.w	r3, #4294967295
 801c9b2:	3402      	adds	r4, #2
 801c9b4:	9305      	str	r3, [sp, #20]
 801c9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ca9c <_vfiprintf_r+0x25c>
 801c9ba:	7821      	ldrb	r1, [r4, #0]
 801c9bc:	2203      	movs	r2, #3
 801c9be:	4650      	mov	r0, sl
 801c9c0:	f7e3 fcae 	bl	8000320 <memchr>
 801c9c4:	b140      	cbz	r0, 801c9d8 <_vfiprintf_r+0x198>
 801c9c6:	2340      	movs	r3, #64	; 0x40
 801c9c8:	eba0 000a 	sub.w	r0, r0, sl
 801c9cc:	fa03 f000 	lsl.w	r0, r3, r0
 801c9d0:	9b04      	ldr	r3, [sp, #16]
 801c9d2:	4303      	orrs	r3, r0
 801c9d4:	3401      	adds	r4, #1
 801c9d6:	9304      	str	r3, [sp, #16]
 801c9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9dc:	482c      	ldr	r0, [pc, #176]	; (801ca90 <_vfiprintf_r+0x250>)
 801c9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c9e2:	2206      	movs	r2, #6
 801c9e4:	f7e3 fc9c 	bl	8000320 <memchr>
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	d03f      	beq.n	801ca6c <_vfiprintf_r+0x22c>
 801c9ec:	4b29      	ldr	r3, [pc, #164]	; (801ca94 <_vfiprintf_r+0x254>)
 801c9ee:	bb1b      	cbnz	r3, 801ca38 <_vfiprintf_r+0x1f8>
 801c9f0:	9b03      	ldr	r3, [sp, #12]
 801c9f2:	3307      	adds	r3, #7
 801c9f4:	f023 0307 	bic.w	r3, r3, #7
 801c9f8:	3308      	adds	r3, #8
 801c9fa:	9303      	str	r3, [sp, #12]
 801c9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9fe:	443b      	add	r3, r7
 801ca00:	9309      	str	r3, [sp, #36]	; 0x24
 801ca02:	e767      	b.n	801c8d4 <_vfiprintf_r+0x94>
 801ca04:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca08:	460c      	mov	r4, r1
 801ca0a:	2001      	movs	r0, #1
 801ca0c:	e7a5      	b.n	801c95a <_vfiprintf_r+0x11a>
 801ca0e:	2300      	movs	r3, #0
 801ca10:	3401      	adds	r4, #1
 801ca12:	9305      	str	r3, [sp, #20]
 801ca14:	4619      	mov	r1, r3
 801ca16:	f04f 0c0a 	mov.w	ip, #10
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca20:	3a30      	subs	r2, #48	; 0x30
 801ca22:	2a09      	cmp	r2, #9
 801ca24:	d903      	bls.n	801ca2e <_vfiprintf_r+0x1ee>
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d0c5      	beq.n	801c9b6 <_vfiprintf_r+0x176>
 801ca2a:	9105      	str	r1, [sp, #20]
 801ca2c:	e7c3      	b.n	801c9b6 <_vfiprintf_r+0x176>
 801ca2e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca32:	4604      	mov	r4, r0
 801ca34:	2301      	movs	r3, #1
 801ca36:	e7f0      	b.n	801ca1a <_vfiprintf_r+0x1da>
 801ca38:	ab03      	add	r3, sp, #12
 801ca3a:	9300      	str	r3, [sp, #0]
 801ca3c:	462a      	mov	r2, r5
 801ca3e:	4b16      	ldr	r3, [pc, #88]	; (801ca98 <_vfiprintf_r+0x258>)
 801ca40:	a904      	add	r1, sp, #16
 801ca42:	4630      	mov	r0, r6
 801ca44:	f3af 8000 	nop.w
 801ca48:	4607      	mov	r7, r0
 801ca4a:	1c78      	adds	r0, r7, #1
 801ca4c:	d1d6      	bne.n	801c9fc <_vfiprintf_r+0x1bc>
 801ca4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca50:	07d9      	lsls	r1, r3, #31
 801ca52:	d405      	bmi.n	801ca60 <_vfiprintf_r+0x220>
 801ca54:	89ab      	ldrh	r3, [r5, #12]
 801ca56:	059a      	lsls	r2, r3, #22
 801ca58:	d402      	bmi.n	801ca60 <_vfiprintf_r+0x220>
 801ca5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca5c:	f7ff fdaf 	bl	801c5be <__retarget_lock_release_recursive>
 801ca60:	89ab      	ldrh	r3, [r5, #12]
 801ca62:	065b      	lsls	r3, r3, #25
 801ca64:	f53f af12 	bmi.w	801c88c <_vfiprintf_r+0x4c>
 801ca68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ca6a:	e711      	b.n	801c890 <_vfiprintf_r+0x50>
 801ca6c:	ab03      	add	r3, sp, #12
 801ca6e:	9300      	str	r3, [sp, #0]
 801ca70:	462a      	mov	r2, r5
 801ca72:	4b09      	ldr	r3, [pc, #36]	; (801ca98 <_vfiprintf_r+0x258>)
 801ca74:	a904      	add	r1, sp, #16
 801ca76:	4630      	mov	r0, r6
 801ca78:	f000 f880 	bl	801cb7c <_printf_i>
 801ca7c:	e7e4      	b.n	801ca48 <_vfiprintf_r+0x208>
 801ca7e:	bf00      	nop
 801ca80:	0801f5c4 	.word	0x0801f5c4
 801ca84:	0801f5e4 	.word	0x0801f5e4
 801ca88:	0801f5a4 	.word	0x0801f5a4
 801ca8c:	0801f608 	.word	0x0801f608
 801ca90:	0801f612 	.word	0x0801f612
 801ca94:	00000000 	.word	0x00000000
 801ca98:	0801c81b 	.word	0x0801c81b
 801ca9c:	0801f60e 	.word	0x0801f60e

0801caa0 <_printf_common>:
 801caa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801caa4:	4616      	mov	r6, r2
 801caa6:	4699      	mov	r9, r3
 801caa8:	688a      	ldr	r2, [r1, #8]
 801caaa:	690b      	ldr	r3, [r1, #16]
 801caac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cab0:	4293      	cmp	r3, r2
 801cab2:	bfb8      	it	lt
 801cab4:	4613      	movlt	r3, r2
 801cab6:	6033      	str	r3, [r6, #0]
 801cab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cabc:	4607      	mov	r7, r0
 801cabe:	460c      	mov	r4, r1
 801cac0:	b10a      	cbz	r2, 801cac6 <_printf_common+0x26>
 801cac2:	3301      	adds	r3, #1
 801cac4:	6033      	str	r3, [r6, #0]
 801cac6:	6823      	ldr	r3, [r4, #0]
 801cac8:	0699      	lsls	r1, r3, #26
 801caca:	bf42      	ittt	mi
 801cacc:	6833      	ldrmi	r3, [r6, #0]
 801cace:	3302      	addmi	r3, #2
 801cad0:	6033      	strmi	r3, [r6, #0]
 801cad2:	6825      	ldr	r5, [r4, #0]
 801cad4:	f015 0506 	ands.w	r5, r5, #6
 801cad8:	d106      	bne.n	801cae8 <_printf_common+0x48>
 801cada:	f104 0a19 	add.w	sl, r4, #25
 801cade:	68e3      	ldr	r3, [r4, #12]
 801cae0:	6832      	ldr	r2, [r6, #0]
 801cae2:	1a9b      	subs	r3, r3, r2
 801cae4:	42ab      	cmp	r3, r5
 801cae6:	dc26      	bgt.n	801cb36 <_printf_common+0x96>
 801cae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801caec:	1e13      	subs	r3, r2, #0
 801caee:	6822      	ldr	r2, [r4, #0]
 801caf0:	bf18      	it	ne
 801caf2:	2301      	movne	r3, #1
 801caf4:	0692      	lsls	r2, r2, #26
 801caf6:	d42b      	bmi.n	801cb50 <_printf_common+0xb0>
 801caf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cafc:	4649      	mov	r1, r9
 801cafe:	4638      	mov	r0, r7
 801cb00:	47c0      	blx	r8
 801cb02:	3001      	adds	r0, #1
 801cb04:	d01e      	beq.n	801cb44 <_printf_common+0xa4>
 801cb06:	6823      	ldr	r3, [r4, #0]
 801cb08:	68e5      	ldr	r5, [r4, #12]
 801cb0a:	6832      	ldr	r2, [r6, #0]
 801cb0c:	f003 0306 	and.w	r3, r3, #6
 801cb10:	2b04      	cmp	r3, #4
 801cb12:	bf08      	it	eq
 801cb14:	1aad      	subeq	r5, r5, r2
 801cb16:	68a3      	ldr	r3, [r4, #8]
 801cb18:	6922      	ldr	r2, [r4, #16]
 801cb1a:	bf0c      	ite	eq
 801cb1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cb20:	2500      	movne	r5, #0
 801cb22:	4293      	cmp	r3, r2
 801cb24:	bfc4      	itt	gt
 801cb26:	1a9b      	subgt	r3, r3, r2
 801cb28:	18ed      	addgt	r5, r5, r3
 801cb2a:	2600      	movs	r6, #0
 801cb2c:	341a      	adds	r4, #26
 801cb2e:	42b5      	cmp	r5, r6
 801cb30:	d11a      	bne.n	801cb68 <_printf_common+0xc8>
 801cb32:	2000      	movs	r0, #0
 801cb34:	e008      	b.n	801cb48 <_printf_common+0xa8>
 801cb36:	2301      	movs	r3, #1
 801cb38:	4652      	mov	r2, sl
 801cb3a:	4649      	mov	r1, r9
 801cb3c:	4638      	mov	r0, r7
 801cb3e:	47c0      	blx	r8
 801cb40:	3001      	adds	r0, #1
 801cb42:	d103      	bne.n	801cb4c <_printf_common+0xac>
 801cb44:	f04f 30ff 	mov.w	r0, #4294967295
 801cb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb4c:	3501      	adds	r5, #1
 801cb4e:	e7c6      	b.n	801cade <_printf_common+0x3e>
 801cb50:	18e1      	adds	r1, r4, r3
 801cb52:	1c5a      	adds	r2, r3, #1
 801cb54:	2030      	movs	r0, #48	; 0x30
 801cb56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cb5a:	4422      	add	r2, r4
 801cb5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cb60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cb64:	3302      	adds	r3, #2
 801cb66:	e7c7      	b.n	801caf8 <_printf_common+0x58>
 801cb68:	2301      	movs	r3, #1
 801cb6a:	4622      	mov	r2, r4
 801cb6c:	4649      	mov	r1, r9
 801cb6e:	4638      	mov	r0, r7
 801cb70:	47c0      	blx	r8
 801cb72:	3001      	adds	r0, #1
 801cb74:	d0e6      	beq.n	801cb44 <_printf_common+0xa4>
 801cb76:	3601      	adds	r6, #1
 801cb78:	e7d9      	b.n	801cb2e <_printf_common+0x8e>
	...

0801cb7c <_printf_i>:
 801cb7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cb80:	7e0f      	ldrb	r7, [r1, #24]
 801cb82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cb84:	2f78      	cmp	r7, #120	; 0x78
 801cb86:	4691      	mov	r9, r2
 801cb88:	4680      	mov	r8, r0
 801cb8a:	460c      	mov	r4, r1
 801cb8c:	469a      	mov	sl, r3
 801cb8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cb92:	d807      	bhi.n	801cba4 <_printf_i+0x28>
 801cb94:	2f62      	cmp	r7, #98	; 0x62
 801cb96:	d80a      	bhi.n	801cbae <_printf_i+0x32>
 801cb98:	2f00      	cmp	r7, #0
 801cb9a:	f000 80d8 	beq.w	801cd4e <_printf_i+0x1d2>
 801cb9e:	2f58      	cmp	r7, #88	; 0x58
 801cba0:	f000 80a3 	beq.w	801ccea <_printf_i+0x16e>
 801cba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cbac:	e03a      	b.n	801cc24 <_printf_i+0xa8>
 801cbae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cbb2:	2b15      	cmp	r3, #21
 801cbb4:	d8f6      	bhi.n	801cba4 <_printf_i+0x28>
 801cbb6:	a101      	add	r1, pc, #4	; (adr r1, 801cbbc <_printf_i+0x40>)
 801cbb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cbbc:	0801cc15 	.word	0x0801cc15
 801cbc0:	0801cc29 	.word	0x0801cc29
 801cbc4:	0801cba5 	.word	0x0801cba5
 801cbc8:	0801cba5 	.word	0x0801cba5
 801cbcc:	0801cba5 	.word	0x0801cba5
 801cbd0:	0801cba5 	.word	0x0801cba5
 801cbd4:	0801cc29 	.word	0x0801cc29
 801cbd8:	0801cba5 	.word	0x0801cba5
 801cbdc:	0801cba5 	.word	0x0801cba5
 801cbe0:	0801cba5 	.word	0x0801cba5
 801cbe4:	0801cba5 	.word	0x0801cba5
 801cbe8:	0801cd35 	.word	0x0801cd35
 801cbec:	0801cc59 	.word	0x0801cc59
 801cbf0:	0801cd17 	.word	0x0801cd17
 801cbf4:	0801cba5 	.word	0x0801cba5
 801cbf8:	0801cba5 	.word	0x0801cba5
 801cbfc:	0801cd57 	.word	0x0801cd57
 801cc00:	0801cba5 	.word	0x0801cba5
 801cc04:	0801cc59 	.word	0x0801cc59
 801cc08:	0801cba5 	.word	0x0801cba5
 801cc0c:	0801cba5 	.word	0x0801cba5
 801cc10:	0801cd1f 	.word	0x0801cd1f
 801cc14:	682b      	ldr	r3, [r5, #0]
 801cc16:	1d1a      	adds	r2, r3, #4
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	602a      	str	r2, [r5, #0]
 801cc1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cc20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cc24:	2301      	movs	r3, #1
 801cc26:	e0a3      	b.n	801cd70 <_printf_i+0x1f4>
 801cc28:	6820      	ldr	r0, [r4, #0]
 801cc2a:	6829      	ldr	r1, [r5, #0]
 801cc2c:	0606      	lsls	r6, r0, #24
 801cc2e:	f101 0304 	add.w	r3, r1, #4
 801cc32:	d50a      	bpl.n	801cc4a <_printf_i+0xce>
 801cc34:	680e      	ldr	r6, [r1, #0]
 801cc36:	602b      	str	r3, [r5, #0]
 801cc38:	2e00      	cmp	r6, #0
 801cc3a:	da03      	bge.n	801cc44 <_printf_i+0xc8>
 801cc3c:	232d      	movs	r3, #45	; 0x2d
 801cc3e:	4276      	negs	r6, r6
 801cc40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc44:	485e      	ldr	r0, [pc, #376]	; (801cdc0 <_printf_i+0x244>)
 801cc46:	230a      	movs	r3, #10
 801cc48:	e019      	b.n	801cc7e <_printf_i+0x102>
 801cc4a:	680e      	ldr	r6, [r1, #0]
 801cc4c:	602b      	str	r3, [r5, #0]
 801cc4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cc52:	bf18      	it	ne
 801cc54:	b236      	sxthne	r6, r6
 801cc56:	e7ef      	b.n	801cc38 <_printf_i+0xbc>
 801cc58:	682b      	ldr	r3, [r5, #0]
 801cc5a:	6820      	ldr	r0, [r4, #0]
 801cc5c:	1d19      	adds	r1, r3, #4
 801cc5e:	6029      	str	r1, [r5, #0]
 801cc60:	0601      	lsls	r1, r0, #24
 801cc62:	d501      	bpl.n	801cc68 <_printf_i+0xec>
 801cc64:	681e      	ldr	r6, [r3, #0]
 801cc66:	e002      	b.n	801cc6e <_printf_i+0xf2>
 801cc68:	0646      	lsls	r6, r0, #25
 801cc6a:	d5fb      	bpl.n	801cc64 <_printf_i+0xe8>
 801cc6c:	881e      	ldrh	r6, [r3, #0]
 801cc6e:	4854      	ldr	r0, [pc, #336]	; (801cdc0 <_printf_i+0x244>)
 801cc70:	2f6f      	cmp	r7, #111	; 0x6f
 801cc72:	bf0c      	ite	eq
 801cc74:	2308      	moveq	r3, #8
 801cc76:	230a      	movne	r3, #10
 801cc78:	2100      	movs	r1, #0
 801cc7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cc7e:	6865      	ldr	r5, [r4, #4]
 801cc80:	60a5      	str	r5, [r4, #8]
 801cc82:	2d00      	cmp	r5, #0
 801cc84:	bfa2      	ittt	ge
 801cc86:	6821      	ldrge	r1, [r4, #0]
 801cc88:	f021 0104 	bicge.w	r1, r1, #4
 801cc8c:	6021      	strge	r1, [r4, #0]
 801cc8e:	b90e      	cbnz	r6, 801cc94 <_printf_i+0x118>
 801cc90:	2d00      	cmp	r5, #0
 801cc92:	d04d      	beq.n	801cd30 <_printf_i+0x1b4>
 801cc94:	4615      	mov	r5, r2
 801cc96:	fbb6 f1f3 	udiv	r1, r6, r3
 801cc9a:	fb03 6711 	mls	r7, r3, r1, r6
 801cc9e:	5dc7      	ldrb	r7, [r0, r7]
 801cca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cca4:	4637      	mov	r7, r6
 801cca6:	42bb      	cmp	r3, r7
 801cca8:	460e      	mov	r6, r1
 801ccaa:	d9f4      	bls.n	801cc96 <_printf_i+0x11a>
 801ccac:	2b08      	cmp	r3, #8
 801ccae:	d10b      	bne.n	801ccc8 <_printf_i+0x14c>
 801ccb0:	6823      	ldr	r3, [r4, #0]
 801ccb2:	07de      	lsls	r6, r3, #31
 801ccb4:	d508      	bpl.n	801ccc8 <_printf_i+0x14c>
 801ccb6:	6923      	ldr	r3, [r4, #16]
 801ccb8:	6861      	ldr	r1, [r4, #4]
 801ccba:	4299      	cmp	r1, r3
 801ccbc:	bfde      	ittt	le
 801ccbe:	2330      	movle	r3, #48	; 0x30
 801ccc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ccc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ccc8:	1b52      	subs	r2, r2, r5
 801ccca:	6122      	str	r2, [r4, #16]
 801cccc:	f8cd a000 	str.w	sl, [sp]
 801ccd0:	464b      	mov	r3, r9
 801ccd2:	aa03      	add	r2, sp, #12
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	4640      	mov	r0, r8
 801ccd8:	f7ff fee2 	bl	801caa0 <_printf_common>
 801ccdc:	3001      	adds	r0, #1
 801ccde:	d14c      	bne.n	801cd7a <_printf_i+0x1fe>
 801cce0:	f04f 30ff 	mov.w	r0, #4294967295
 801cce4:	b004      	add	sp, #16
 801cce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccea:	4835      	ldr	r0, [pc, #212]	; (801cdc0 <_printf_i+0x244>)
 801ccec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ccf0:	6829      	ldr	r1, [r5, #0]
 801ccf2:	6823      	ldr	r3, [r4, #0]
 801ccf4:	f851 6b04 	ldr.w	r6, [r1], #4
 801ccf8:	6029      	str	r1, [r5, #0]
 801ccfa:	061d      	lsls	r5, r3, #24
 801ccfc:	d514      	bpl.n	801cd28 <_printf_i+0x1ac>
 801ccfe:	07df      	lsls	r7, r3, #31
 801cd00:	bf44      	itt	mi
 801cd02:	f043 0320 	orrmi.w	r3, r3, #32
 801cd06:	6023      	strmi	r3, [r4, #0]
 801cd08:	b91e      	cbnz	r6, 801cd12 <_printf_i+0x196>
 801cd0a:	6823      	ldr	r3, [r4, #0]
 801cd0c:	f023 0320 	bic.w	r3, r3, #32
 801cd10:	6023      	str	r3, [r4, #0]
 801cd12:	2310      	movs	r3, #16
 801cd14:	e7b0      	b.n	801cc78 <_printf_i+0xfc>
 801cd16:	6823      	ldr	r3, [r4, #0]
 801cd18:	f043 0320 	orr.w	r3, r3, #32
 801cd1c:	6023      	str	r3, [r4, #0]
 801cd1e:	2378      	movs	r3, #120	; 0x78
 801cd20:	4828      	ldr	r0, [pc, #160]	; (801cdc4 <_printf_i+0x248>)
 801cd22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801cd26:	e7e3      	b.n	801ccf0 <_printf_i+0x174>
 801cd28:	0659      	lsls	r1, r3, #25
 801cd2a:	bf48      	it	mi
 801cd2c:	b2b6      	uxthmi	r6, r6
 801cd2e:	e7e6      	b.n	801ccfe <_printf_i+0x182>
 801cd30:	4615      	mov	r5, r2
 801cd32:	e7bb      	b.n	801ccac <_printf_i+0x130>
 801cd34:	682b      	ldr	r3, [r5, #0]
 801cd36:	6826      	ldr	r6, [r4, #0]
 801cd38:	6961      	ldr	r1, [r4, #20]
 801cd3a:	1d18      	adds	r0, r3, #4
 801cd3c:	6028      	str	r0, [r5, #0]
 801cd3e:	0635      	lsls	r5, r6, #24
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	d501      	bpl.n	801cd48 <_printf_i+0x1cc>
 801cd44:	6019      	str	r1, [r3, #0]
 801cd46:	e002      	b.n	801cd4e <_printf_i+0x1d2>
 801cd48:	0670      	lsls	r0, r6, #25
 801cd4a:	d5fb      	bpl.n	801cd44 <_printf_i+0x1c8>
 801cd4c:	8019      	strh	r1, [r3, #0]
 801cd4e:	2300      	movs	r3, #0
 801cd50:	6123      	str	r3, [r4, #16]
 801cd52:	4615      	mov	r5, r2
 801cd54:	e7ba      	b.n	801cccc <_printf_i+0x150>
 801cd56:	682b      	ldr	r3, [r5, #0]
 801cd58:	1d1a      	adds	r2, r3, #4
 801cd5a:	602a      	str	r2, [r5, #0]
 801cd5c:	681d      	ldr	r5, [r3, #0]
 801cd5e:	6862      	ldr	r2, [r4, #4]
 801cd60:	2100      	movs	r1, #0
 801cd62:	4628      	mov	r0, r5
 801cd64:	f7e3 fadc 	bl	8000320 <memchr>
 801cd68:	b108      	cbz	r0, 801cd6e <_printf_i+0x1f2>
 801cd6a:	1b40      	subs	r0, r0, r5
 801cd6c:	6060      	str	r0, [r4, #4]
 801cd6e:	6863      	ldr	r3, [r4, #4]
 801cd70:	6123      	str	r3, [r4, #16]
 801cd72:	2300      	movs	r3, #0
 801cd74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd78:	e7a8      	b.n	801cccc <_printf_i+0x150>
 801cd7a:	6923      	ldr	r3, [r4, #16]
 801cd7c:	462a      	mov	r2, r5
 801cd7e:	4649      	mov	r1, r9
 801cd80:	4640      	mov	r0, r8
 801cd82:	47d0      	blx	sl
 801cd84:	3001      	adds	r0, #1
 801cd86:	d0ab      	beq.n	801cce0 <_printf_i+0x164>
 801cd88:	6823      	ldr	r3, [r4, #0]
 801cd8a:	079b      	lsls	r3, r3, #30
 801cd8c:	d413      	bmi.n	801cdb6 <_printf_i+0x23a>
 801cd8e:	68e0      	ldr	r0, [r4, #12]
 801cd90:	9b03      	ldr	r3, [sp, #12]
 801cd92:	4298      	cmp	r0, r3
 801cd94:	bfb8      	it	lt
 801cd96:	4618      	movlt	r0, r3
 801cd98:	e7a4      	b.n	801cce4 <_printf_i+0x168>
 801cd9a:	2301      	movs	r3, #1
 801cd9c:	4632      	mov	r2, r6
 801cd9e:	4649      	mov	r1, r9
 801cda0:	4640      	mov	r0, r8
 801cda2:	47d0      	blx	sl
 801cda4:	3001      	adds	r0, #1
 801cda6:	d09b      	beq.n	801cce0 <_printf_i+0x164>
 801cda8:	3501      	adds	r5, #1
 801cdaa:	68e3      	ldr	r3, [r4, #12]
 801cdac:	9903      	ldr	r1, [sp, #12]
 801cdae:	1a5b      	subs	r3, r3, r1
 801cdb0:	42ab      	cmp	r3, r5
 801cdb2:	dcf2      	bgt.n	801cd9a <_printf_i+0x21e>
 801cdb4:	e7eb      	b.n	801cd8e <_printf_i+0x212>
 801cdb6:	2500      	movs	r5, #0
 801cdb8:	f104 0619 	add.w	r6, r4, #25
 801cdbc:	e7f5      	b.n	801cdaa <_printf_i+0x22e>
 801cdbe:	bf00      	nop
 801cdc0:	0801f619 	.word	0x0801f619
 801cdc4:	0801f62a 	.word	0x0801f62a

0801cdc8 <cleanup_glue>:
 801cdc8:	b538      	push	{r3, r4, r5, lr}
 801cdca:	460c      	mov	r4, r1
 801cdcc:	6809      	ldr	r1, [r1, #0]
 801cdce:	4605      	mov	r5, r0
 801cdd0:	b109      	cbz	r1, 801cdd6 <cleanup_glue+0xe>
 801cdd2:	f7ff fff9 	bl	801cdc8 <cleanup_glue>
 801cdd6:	4621      	mov	r1, r4
 801cdd8:	4628      	mov	r0, r5
 801cdda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cdde:	f7ff bc25 	b.w	801c62c <_free_r>
	...

0801cde4 <_reclaim_reent>:
 801cde4:	4b2c      	ldr	r3, [pc, #176]	; (801ce98 <_reclaim_reent+0xb4>)
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	4283      	cmp	r3, r0
 801cdea:	b570      	push	{r4, r5, r6, lr}
 801cdec:	4604      	mov	r4, r0
 801cdee:	d051      	beq.n	801ce94 <_reclaim_reent+0xb0>
 801cdf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cdf2:	b143      	cbz	r3, 801ce06 <_reclaim_reent+0x22>
 801cdf4:	68db      	ldr	r3, [r3, #12]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d14a      	bne.n	801ce90 <_reclaim_reent+0xac>
 801cdfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cdfc:	6819      	ldr	r1, [r3, #0]
 801cdfe:	b111      	cbz	r1, 801ce06 <_reclaim_reent+0x22>
 801ce00:	4620      	mov	r0, r4
 801ce02:	f7ff fc13 	bl	801c62c <_free_r>
 801ce06:	6961      	ldr	r1, [r4, #20]
 801ce08:	b111      	cbz	r1, 801ce10 <_reclaim_reent+0x2c>
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	f7ff fc0e 	bl	801c62c <_free_r>
 801ce10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ce12:	b111      	cbz	r1, 801ce1a <_reclaim_reent+0x36>
 801ce14:	4620      	mov	r0, r4
 801ce16:	f7ff fc09 	bl	801c62c <_free_r>
 801ce1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ce1c:	b111      	cbz	r1, 801ce24 <_reclaim_reent+0x40>
 801ce1e:	4620      	mov	r0, r4
 801ce20:	f7ff fc04 	bl	801c62c <_free_r>
 801ce24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ce26:	b111      	cbz	r1, 801ce2e <_reclaim_reent+0x4a>
 801ce28:	4620      	mov	r0, r4
 801ce2a:	f7ff fbff 	bl	801c62c <_free_r>
 801ce2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ce30:	b111      	cbz	r1, 801ce38 <_reclaim_reent+0x54>
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ff fbfa 	bl	801c62c <_free_r>
 801ce38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ce3a:	b111      	cbz	r1, 801ce42 <_reclaim_reent+0x5e>
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	f7ff fbf5 	bl	801c62c <_free_r>
 801ce42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ce44:	b111      	cbz	r1, 801ce4c <_reclaim_reent+0x68>
 801ce46:	4620      	mov	r0, r4
 801ce48:	f7ff fbf0 	bl	801c62c <_free_r>
 801ce4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce4e:	b111      	cbz	r1, 801ce56 <_reclaim_reent+0x72>
 801ce50:	4620      	mov	r0, r4
 801ce52:	f7ff fbeb 	bl	801c62c <_free_r>
 801ce56:	69a3      	ldr	r3, [r4, #24]
 801ce58:	b1e3      	cbz	r3, 801ce94 <_reclaim_reent+0xb0>
 801ce5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ce5c:	4620      	mov	r0, r4
 801ce5e:	4798      	blx	r3
 801ce60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ce62:	b1b9      	cbz	r1, 801ce94 <_reclaim_reent+0xb0>
 801ce64:	4620      	mov	r0, r4
 801ce66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce6a:	f7ff bfad 	b.w	801cdc8 <cleanup_glue>
 801ce6e:	5949      	ldr	r1, [r1, r5]
 801ce70:	b941      	cbnz	r1, 801ce84 <_reclaim_reent+0xa0>
 801ce72:	3504      	adds	r5, #4
 801ce74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce76:	2d80      	cmp	r5, #128	; 0x80
 801ce78:	68d9      	ldr	r1, [r3, #12]
 801ce7a:	d1f8      	bne.n	801ce6e <_reclaim_reent+0x8a>
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f7ff fbd5 	bl	801c62c <_free_r>
 801ce82:	e7ba      	b.n	801cdfa <_reclaim_reent+0x16>
 801ce84:	680e      	ldr	r6, [r1, #0]
 801ce86:	4620      	mov	r0, r4
 801ce88:	f7ff fbd0 	bl	801c62c <_free_r>
 801ce8c:	4631      	mov	r1, r6
 801ce8e:	e7ef      	b.n	801ce70 <_reclaim_reent+0x8c>
 801ce90:	2500      	movs	r5, #0
 801ce92:	e7ef      	b.n	801ce74 <_reclaim_reent+0x90>
 801ce94:	bd70      	pop	{r4, r5, r6, pc}
 801ce96:	bf00      	nop
 801ce98:	240000ac 	.word	0x240000ac

0801ce9c <_sbrk_r>:
 801ce9c:	b538      	push	{r3, r4, r5, lr}
 801ce9e:	4d06      	ldr	r5, [pc, #24]	; (801ceb8 <_sbrk_r+0x1c>)
 801cea0:	2300      	movs	r3, #0
 801cea2:	4604      	mov	r4, r0
 801cea4:	4608      	mov	r0, r1
 801cea6:	602b      	str	r3, [r5, #0]
 801cea8:	f7e5 fe1c 	bl	8002ae4 <_sbrk>
 801ceac:	1c43      	adds	r3, r0, #1
 801ceae:	d102      	bne.n	801ceb6 <_sbrk_r+0x1a>
 801ceb0:	682b      	ldr	r3, [r5, #0]
 801ceb2:	b103      	cbz	r3, 801ceb6 <_sbrk_r+0x1a>
 801ceb4:	6023      	str	r3, [r4, #0]
 801ceb6:	bd38      	pop	{r3, r4, r5, pc}
 801ceb8:	2400bb70 	.word	0x2400bb70

0801cebc <_raise_r>:
 801cebc:	291f      	cmp	r1, #31
 801cebe:	b538      	push	{r3, r4, r5, lr}
 801cec0:	4604      	mov	r4, r0
 801cec2:	460d      	mov	r5, r1
 801cec4:	d904      	bls.n	801ced0 <_raise_r+0x14>
 801cec6:	2316      	movs	r3, #22
 801cec8:	6003      	str	r3, [r0, #0]
 801ceca:	f04f 30ff 	mov.w	r0, #4294967295
 801cece:	bd38      	pop	{r3, r4, r5, pc}
 801ced0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ced2:	b112      	cbz	r2, 801ceda <_raise_r+0x1e>
 801ced4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ced8:	b94b      	cbnz	r3, 801ceee <_raise_r+0x32>
 801ceda:	4620      	mov	r0, r4
 801cedc:	f000 f830 	bl	801cf40 <_getpid_r>
 801cee0:	462a      	mov	r2, r5
 801cee2:	4601      	mov	r1, r0
 801cee4:	4620      	mov	r0, r4
 801cee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ceea:	f000 b817 	b.w	801cf1c <_kill_r>
 801ceee:	2b01      	cmp	r3, #1
 801cef0:	d00a      	beq.n	801cf08 <_raise_r+0x4c>
 801cef2:	1c59      	adds	r1, r3, #1
 801cef4:	d103      	bne.n	801cefe <_raise_r+0x42>
 801cef6:	2316      	movs	r3, #22
 801cef8:	6003      	str	r3, [r0, #0]
 801cefa:	2001      	movs	r0, #1
 801cefc:	e7e7      	b.n	801cece <_raise_r+0x12>
 801cefe:	2400      	movs	r4, #0
 801cf00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cf04:	4628      	mov	r0, r5
 801cf06:	4798      	blx	r3
 801cf08:	2000      	movs	r0, #0
 801cf0a:	e7e0      	b.n	801cece <_raise_r+0x12>

0801cf0c <raise>:
 801cf0c:	4b02      	ldr	r3, [pc, #8]	; (801cf18 <raise+0xc>)
 801cf0e:	4601      	mov	r1, r0
 801cf10:	6818      	ldr	r0, [r3, #0]
 801cf12:	f7ff bfd3 	b.w	801cebc <_raise_r>
 801cf16:	bf00      	nop
 801cf18:	240000ac 	.word	0x240000ac

0801cf1c <_kill_r>:
 801cf1c:	b538      	push	{r3, r4, r5, lr}
 801cf1e:	4d07      	ldr	r5, [pc, #28]	; (801cf3c <_kill_r+0x20>)
 801cf20:	2300      	movs	r3, #0
 801cf22:	4604      	mov	r4, r0
 801cf24:	4608      	mov	r0, r1
 801cf26:	4611      	mov	r1, r2
 801cf28:	602b      	str	r3, [r5, #0]
 801cf2a:	f7e5 fda3 	bl	8002a74 <_kill>
 801cf2e:	1c43      	adds	r3, r0, #1
 801cf30:	d102      	bne.n	801cf38 <_kill_r+0x1c>
 801cf32:	682b      	ldr	r3, [r5, #0]
 801cf34:	b103      	cbz	r3, 801cf38 <_kill_r+0x1c>
 801cf36:	6023      	str	r3, [r4, #0]
 801cf38:	bd38      	pop	{r3, r4, r5, pc}
 801cf3a:	bf00      	nop
 801cf3c:	2400bb70 	.word	0x2400bb70

0801cf40 <_getpid_r>:
 801cf40:	f7e5 bd96 	b.w	8002a70 <_getpid>

0801cf44 <siprintf>:
 801cf44:	b40e      	push	{r1, r2, r3}
 801cf46:	b500      	push	{lr}
 801cf48:	b09c      	sub	sp, #112	; 0x70
 801cf4a:	ab1d      	add	r3, sp, #116	; 0x74
 801cf4c:	9002      	str	r0, [sp, #8]
 801cf4e:	9006      	str	r0, [sp, #24]
 801cf50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cf54:	4809      	ldr	r0, [pc, #36]	; (801cf7c <siprintf+0x38>)
 801cf56:	9107      	str	r1, [sp, #28]
 801cf58:	9104      	str	r1, [sp, #16]
 801cf5a:	4909      	ldr	r1, [pc, #36]	; (801cf80 <siprintf+0x3c>)
 801cf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf60:	9105      	str	r1, [sp, #20]
 801cf62:	6800      	ldr	r0, [r0, #0]
 801cf64:	9301      	str	r3, [sp, #4]
 801cf66:	a902      	add	r1, sp, #8
 801cf68:	f000 fc16 	bl	801d798 <_svfiprintf_r>
 801cf6c:	9b02      	ldr	r3, [sp, #8]
 801cf6e:	2200      	movs	r2, #0
 801cf70:	701a      	strb	r2, [r3, #0]
 801cf72:	b01c      	add	sp, #112	; 0x70
 801cf74:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf78:	b003      	add	sp, #12
 801cf7a:	4770      	bx	lr
 801cf7c:	240000ac 	.word	0x240000ac
 801cf80:	ffff0208 	.word	0xffff0208

0801cf84 <__sread>:
 801cf84:	b510      	push	{r4, lr}
 801cf86:	460c      	mov	r4, r1
 801cf88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf8c:	f000 fd04 	bl	801d998 <_read_r>
 801cf90:	2800      	cmp	r0, #0
 801cf92:	bfab      	itete	ge
 801cf94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cf96:	89a3      	ldrhlt	r3, [r4, #12]
 801cf98:	181b      	addge	r3, r3, r0
 801cf9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cf9e:	bfac      	ite	ge
 801cfa0:	6563      	strge	r3, [r4, #84]	; 0x54
 801cfa2:	81a3      	strhlt	r3, [r4, #12]
 801cfa4:	bd10      	pop	{r4, pc}

0801cfa6 <__swrite>:
 801cfa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfaa:	461f      	mov	r7, r3
 801cfac:	898b      	ldrh	r3, [r1, #12]
 801cfae:	05db      	lsls	r3, r3, #23
 801cfb0:	4605      	mov	r5, r0
 801cfb2:	460c      	mov	r4, r1
 801cfb4:	4616      	mov	r6, r2
 801cfb6:	d505      	bpl.n	801cfc4 <__swrite+0x1e>
 801cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfbc:	2302      	movs	r3, #2
 801cfbe:	2200      	movs	r2, #0
 801cfc0:	f000 fac2 	bl	801d548 <_lseek_r>
 801cfc4:	89a3      	ldrh	r3, [r4, #12]
 801cfc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cfca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cfce:	81a3      	strh	r3, [r4, #12]
 801cfd0:	4632      	mov	r2, r6
 801cfd2:	463b      	mov	r3, r7
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfda:	f000 b901 	b.w	801d1e0 <_write_r>

0801cfde <__sseek>:
 801cfde:	b510      	push	{r4, lr}
 801cfe0:	460c      	mov	r4, r1
 801cfe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfe6:	f000 faaf 	bl	801d548 <_lseek_r>
 801cfea:	1c43      	adds	r3, r0, #1
 801cfec:	89a3      	ldrh	r3, [r4, #12]
 801cfee:	bf15      	itete	ne
 801cff0:	6560      	strne	r0, [r4, #84]	; 0x54
 801cff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cffa:	81a3      	strheq	r3, [r4, #12]
 801cffc:	bf18      	it	ne
 801cffe:	81a3      	strhne	r3, [r4, #12]
 801d000:	bd10      	pop	{r4, pc}

0801d002 <__sclose>:
 801d002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d006:	f000 b9cd 	b.w	801d3a4 <_close_r>

0801d00a <strncmp>:
 801d00a:	b510      	push	{r4, lr}
 801d00c:	b17a      	cbz	r2, 801d02e <strncmp+0x24>
 801d00e:	4603      	mov	r3, r0
 801d010:	3901      	subs	r1, #1
 801d012:	1884      	adds	r4, r0, r2
 801d014:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d018:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d01c:	4290      	cmp	r0, r2
 801d01e:	d101      	bne.n	801d024 <strncmp+0x1a>
 801d020:	42a3      	cmp	r3, r4
 801d022:	d101      	bne.n	801d028 <strncmp+0x1e>
 801d024:	1a80      	subs	r0, r0, r2
 801d026:	bd10      	pop	{r4, pc}
 801d028:	2800      	cmp	r0, #0
 801d02a:	d1f3      	bne.n	801d014 <strncmp+0xa>
 801d02c:	e7fa      	b.n	801d024 <strncmp+0x1a>
 801d02e:	4610      	mov	r0, r2
 801d030:	e7f9      	b.n	801d026 <strncmp+0x1c>

0801d032 <strncpy>:
 801d032:	b510      	push	{r4, lr}
 801d034:	3901      	subs	r1, #1
 801d036:	4603      	mov	r3, r0
 801d038:	b132      	cbz	r2, 801d048 <strncpy+0x16>
 801d03a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d03e:	f803 4b01 	strb.w	r4, [r3], #1
 801d042:	3a01      	subs	r2, #1
 801d044:	2c00      	cmp	r4, #0
 801d046:	d1f7      	bne.n	801d038 <strncpy+0x6>
 801d048:	441a      	add	r2, r3
 801d04a:	2100      	movs	r1, #0
 801d04c:	4293      	cmp	r3, r2
 801d04e:	d100      	bne.n	801d052 <strncpy+0x20>
 801d050:	bd10      	pop	{r4, pc}
 801d052:	f803 1b01 	strb.w	r1, [r3], #1
 801d056:	e7f9      	b.n	801d04c <strncpy+0x1a>

0801d058 <strstr>:
 801d058:	780a      	ldrb	r2, [r1, #0]
 801d05a:	b570      	push	{r4, r5, r6, lr}
 801d05c:	b96a      	cbnz	r2, 801d07a <strstr+0x22>
 801d05e:	bd70      	pop	{r4, r5, r6, pc}
 801d060:	429a      	cmp	r2, r3
 801d062:	d109      	bne.n	801d078 <strstr+0x20>
 801d064:	460c      	mov	r4, r1
 801d066:	4605      	mov	r5, r0
 801d068:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d0f6      	beq.n	801d05e <strstr+0x6>
 801d070:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d074:	429e      	cmp	r6, r3
 801d076:	d0f7      	beq.n	801d068 <strstr+0x10>
 801d078:	3001      	adds	r0, #1
 801d07a:	7803      	ldrb	r3, [r0, #0]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d1ef      	bne.n	801d060 <strstr+0x8>
 801d080:	4618      	mov	r0, r3
 801d082:	e7ec      	b.n	801d05e <strstr+0x6>

0801d084 <strtok>:
 801d084:	4b16      	ldr	r3, [pc, #88]	; (801d0e0 <strtok+0x5c>)
 801d086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d088:	681e      	ldr	r6, [r3, #0]
 801d08a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801d08c:	4605      	mov	r5, r0
 801d08e:	b9fc      	cbnz	r4, 801d0d0 <strtok+0x4c>
 801d090:	2050      	movs	r0, #80	; 0x50
 801d092:	9101      	str	r1, [sp, #4]
 801d094:	f7ff fa94 	bl	801c5c0 <malloc>
 801d098:	9901      	ldr	r1, [sp, #4]
 801d09a:	65b0      	str	r0, [r6, #88]	; 0x58
 801d09c:	4602      	mov	r2, r0
 801d09e:	b920      	cbnz	r0, 801d0aa <strtok+0x26>
 801d0a0:	4b10      	ldr	r3, [pc, #64]	; (801d0e4 <strtok+0x60>)
 801d0a2:	4811      	ldr	r0, [pc, #68]	; (801d0e8 <strtok+0x64>)
 801d0a4:	2157      	movs	r1, #87	; 0x57
 801d0a6:	f7ff f923 	bl	801c2f0 <__assert_func>
 801d0aa:	e9c0 4400 	strd	r4, r4, [r0]
 801d0ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d0b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d0b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801d0ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801d0be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801d0c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801d0c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801d0ca:	6184      	str	r4, [r0, #24]
 801d0cc:	7704      	strb	r4, [r0, #28]
 801d0ce:	6244      	str	r4, [r0, #36]	; 0x24
 801d0d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	4628      	mov	r0, r5
 801d0d6:	b002      	add	sp, #8
 801d0d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0dc:	f000 b806 	b.w	801d0ec <__strtok_r>
 801d0e0:	240000ac 	.word	0x240000ac
 801d0e4:	0801f640 	.word	0x0801f640
 801d0e8:	0801f657 	.word	0x0801f657

0801d0ec <__strtok_r>:
 801d0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ee:	b908      	cbnz	r0, 801d0f4 <__strtok_r+0x8>
 801d0f0:	6810      	ldr	r0, [r2, #0]
 801d0f2:	b188      	cbz	r0, 801d118 <__strtok_r+0x2c>
 801d0f4:	4604      	mov	r4, r0
 801d0f6:	4620      	mov	r0, r4
 801d0f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d0fc:	460f      	mov	r7, r1
 801d0fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d102:	b91e      	cbnz	r6, 801d10c <__strtok_r+0x20>
 801d104:	b965      	cbnz	r5, 801d120 <__strtok_r+0x34>
 801d106:	6015      	str	r5, [r2, #0]
 801d108:	4628      	mov	r0, r5
 801d10a:	e005      	b.n	801d118 <__strtok_r+0x2c>
 801d10c:	42b5      	cmp	r5, r6
 801d10e:	d1f6      	bne.n	801d0fe <__strtok_r+0x12>
 801d110:	2b00      	cmp	r3, #0
 801d112:	d1f0      	bne.n	801d0f6 <__strtok_r+0xa>
 801d114:	6014      	str	r4, [r2, #0]
 801d116:	7003      	strb	r3, [r0, #0]
 801d118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d11a:	461c      	mov	r4, r3
 801d11c:	e00c      	b.n	801d138 <__strtok_r+0x4c>
 801d11e:	b915      	cbnz	r5, 801d126 <__strtok_r+0x3a>
 801d120:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d124:	460e      	mov	r6, r1
 801d126:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d12a:	42ab      	cmp	r3, r5
 801d12c:	d1f7      	bne.n	801d11e <__strtok_r+0x32>
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d0f3      	beq.n	801d11a <__strtok_r+0x2e>
 801d132:	2300      	movs	r3, #0
 801d134:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d138:	6014      	str	r4, [r2, #0]
 801d13a:	e7ed      	b.n	801d118 <__strtok_r+0x2c>

0801d13c <__swbuf_r>:
 801d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d13e:	460e      	mov	r6, r1
 801d140:	4614      	mov	r4, r2
 801d142:	4605      	mov	r5, r0
 801d144:	b118      	cbz	r0, 801d14e <__swbuf_r+0x12>
 801d146:	6983      	ldr	r3, [r0, #24]
 801d148:	b90b      	cbnz	r3, 801d14e <__swbuf_r+0x12>
 801d14a:	f7ff f961 	bl	801c410 <__sinit>
 801d14e:	4b21      	ldr	r3, [pc, #132]	; (801d1d4 <__swbuf_r+0x98>)
 801d150:	429c      	cmp	r4, r3
 801d152:	d12b      	bne.n	801d1ac <__swbuf_r+0x70>
 801d154:	686c      	ldr	r4, [r5, #4]
 801d156:	69a3      	ldr	r3, [r4, #24]
 801d158:	60a3      	str	r3, [r4, #8]
 801d15a:	89a3      	ldrh	r3, [r4, #12]
 801d15c:	071a      	lsls	r2, r3, #28
 801d15e:	d52f      	bpl.n	801d1c0 <__swbuf_r+0x84>
 801d160:	6923      	ldr	r3, [r4, #16]
 801d162:	b36b      	cbz	r3, 801d1c0 <__swbuf_r+0x84>
 801d164:	6923      	ldr	r3, [r4, #16]
 801d166:	6820      	ldr	r0, [r4, #0]
 801d168:	1ac0      	subs	r0, r0, r3
 801d16a:	6963      	ldr	r3, [r4, #20]
 801d16c:	b2f6      	uxtb	r6, r6
 801d16e:	4283      	cmp	r3, r0
 801d170:	4637      	mov	r7, r6
 801d172:	dc04      	bgt.n	801d17e <__swbuf_r+0x42>
 801d174:	4621      	mov	r1, r4
 801d176:	4628      	mov	r0, r5
 801d178:	f000 f9aa 	bl	801d4d0 <_fflush_r>
 801d17c:	bb30      	cbnz	r0, 801d1cc <__swbuf_r+0x90>
 801d17e:	68a3      	ldr	r3, [r4, #8]
 801d180:	3b01      	subs	r3, #1
 801d182:	60a3      	str	r3, [r4, #8]
 801d184:	6823      	ldr	r3, [r4, #0]
 801d186:	1c5a      	adds	r2, r3, #1
 801d188:	6022      	str	r2, [r4, #0]
 801d18a:	701e      	strb	r6, [r3, #0]
 801d18c:	6963      	ldr	r3, [r4, #20]
 801d18e:	3001      	adds	r0, #1
 801d190:	4283      	cmp	r3, r0
 801d192:	d004      	beq.n	801d19e <__swbuf_r+0x62>
 801d194:	89a3      	ldrh	r3, [r4, #12]
 801d196:	07db      	lsls	r3, r3, #31
 801d198:	d506      	bpl.n	801d1a8 <__swbuf_r+0x6c>
 801d19a:	2e0a      	cmp	r6, #10
 801d19c:	d104      	bne.n	801d1a8 <__swbuf_r+0x6c>
 801d19e:	4621      	mov	r1, r4
 801d1a0:	4628      	mov	r0, r5
 801d1a2:	f000 f995 	bl	801d4d0 <_fflush_r>
 801d1a6:	b988      	cbnz	r0, 801d1cc <__swbuf_r+0x90>
 801d1a8:	4638      	mov	r0, r7
 801d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ac:	4b0a      	ldr	r3, [pc, #40]	; (801d1d8 <__swbuf_r+0x9c>)
 801d1ae:	429c      	cmp	r4, r3
 801d1b0:	d101      	bne.n	801d1b6 <__swbuf_r+0x7a>
 801d1b2:	68ac      	ldr	r4, [r5, #8]
 801d1b4:	e7cf      	b.n	801d156 <__swbuf_r+0x1a>
 801d1b6:	4b09      	ldr	r3, [pc, #36]	; (801d1dc <__swbuf_r+0xa0>)
 801d1b8:	429c      	cmp	r4, r3
 801d1ba:	bf08      	it	eq
 801d1bc:	68ec      	ldreq	r4, [r5, #12]
 801d1be:	e7ca      	b.n	801d156 <__swbuf_r+0x1a>
 801d1c0:	4621      	mov	r1, r4
 801d1c2:	4628      	mov	r0, r5
 801d1c4:	f000 f81e 	bl	801d204 <__swsetup_r>
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d0cb      	beq.n	801d164 <__swbuf_r+0x28>
 801d1cc:	f04f 37ff 	mov.w	r7, #4294967295
 801d1d0:	e7ea      	b.n	801d1a8 <__swbuf_r+0x6c>
 801d1d2:	bf00      	nop
 801d1d4:	0801f5c4 	.word	0x0801f5c4
 801d1d8:	0801f5e4 	.word	0x0801f5e4
 801d1dc:	0801f5a4 	.word	0x0801f5a4

0801d1e0 <_write_r>:
 801d1e0:	b538      	push	{r3, r4, r5, lr}
 801d1e2:	4d07      	ldr	r5, [pc, #28]	; (801d200 <_write_r+0x20>)
 801d1e4:	4604      	mov	r4, r0
 801d1e6:	4608      	mov	r0, r1
 801d1e8:	4611      	mov	r1, r2
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	602a      	str	r2, [r5, #0]
 801d1ee:	461a      	mov	r2, r3
 801d1f0:	f7e5 fc5e 	bl	8002ab0 <_write>
 801d1f4:	1c43      	adds	r3, r0, #1
 801d1f6:	d102      	bne.n	801d1fe <_write_r+0x1e>
 801d1f8:	682b      	ldr	r3, [r5, #0]
 801d1fa:	b103      	cbz	r3, 801d1fe <_write_r+0x1e>
 801d1fc:	6023      	str	r3, [r4, #0]
 801d1fe:	bd38      	pop	{r3, r4, r5, pc}
 801d200:	2400bb70 	.word	0x2400bb70

0801d204 <__swsetup_r>:
 801d204:	4b32      	ldr	r3, [pc, #200]	; (801d2d0 <__swsetup_r+0xcc>)
 801d206:	b570      	push	{r4, r5, r6, lr}
 801d208:	681d      	ldr	r5, [r3, #0]
 801d20a:	4606      	mov	r6, r0
 801d20c:	460c      	mov	r4, r1
 801d20e:	b125      	cbz	r5, 801d21a <__swsetup_r+0x16>
 801d210:	69ab      	ldr	r3, [r5, #24]
 801d212:	b913      	cbnz	r3, 801d21a <__swsetup_r+0x16>
 801d214:	4628      	mov	r0, r5
 801d216:	f7ff f8fb 	bl	801c410 <__sinit>
 801d21a:	4b2e      	ldr	r3, [pc, #184]	; (801d2d4 <__swsetup_r+0xd0>)
 801d21c:	429c      	cmp	r4, r3
 801d21e:	d10f      	bne.n	801d240 <__swsetup_r+0x3c>
 801d220:	686c      	ldr	r4, [r5, #4]
 801d222:	89a3      	ldrh	r3, [r4, #12]
 801d224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d228:	0719      	lsls	r1, r3, #28
 801d22a:	d42c      	bmi.n	801d286 <__swsetup_r+0x82>
 801d22c:	06dd      	lsls	r5, r3, #27
 801d22e:	d411      	bmi.n	801d254 <__swsetup_r+0x50>
 801d230:	2309      	movs	r3, #9
 801d232:	6033      	str	r3, [r6, #0]
 801d234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d238:	81a3      	strh	r3, [r4, #12]
 801d23a:	f04f 30ff 	mov.w	r0, #4294967295
 801d23e:	e03e      	b.n	801d2be <__swsetup_r+0xba>
 801d240:	4b25      	ldr	r3, [pc, #148]	; (801d2d8 <__swsetup_r+0xd4>)
 801d242:	429c      	cmp	r4, r3
 801d244:	d101      	bne.n	801d24a <__swsetup_r+0x46>
 801d246:	68ac      	ldr	r4, [r5, #8]
 801d248:	e7eb      	b.n	801d222 <__swsetup_r+0x1e>
 801d24a:	4b24      	ldr	r3, [pc, #144]	; (801d2dc <__swsetup_r+0xd8>)
 801d24c:	429c      	cmp	r4, r3
 801d24e:	bf08      	it	eq
 801d250:	68ec      	ldreq	r4, [r5, #12]
 801d252:	e7e6      	b.n	801d222 <__swsetup_r+0x1e>
 801d254:	0758      	lsls	r0, r3, #29
 801d256:	d512      	bpl.n	801d27e <__swsetup_r+0x7a>
 801d258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d25a:	b141      	cbz	r1, 801d26e <__swsetup_r+0x6a>
 801d25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d260:	4299      	cmp	r1, r3
 801d262:	d002      	beq.n	801d26a <__swsetup_r+0x66>
 801d264:	4630      	mov	r0, r6
 801d266:	f7ff f9e1 	bl	801c62c <_free_r>
 801d26a:	2300      	movs	r3, #0
 801d26c:	6363      	str	r3, [r4, #52]	; 0x34
 801d26e:	89a3      	ldrh	r3, [r4, #12]
 801d270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d274:	81a3      	strh	r3, [r4, #12]
 801d276:	2300      	movs	r3, #0
 801d278:	6063      	str	r3, [r4, #4]
 801d27a:	6923      	ldr	r3, [r4, #16]
 801d27c:	6023      	str	r3, [r4, #0]
 801d27e:	89a3      	ldrh	r3, [r4, #12]
 801d280:	f043 0308 	orr.w	r3, r3, #8
 801d284:	81a3      	strh	r3, [r4, #12]
 801d286:	6923      	ldr	r3, [r4, #16]
 801d288:	b94b      	cbnz	r3, 801d29e <__swsetup_r+0x9a>
 801d28a:	89a3      	ldrh	r3, [r4, #12]
 801d28c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d294:	d003      	beq.n	801d29e <__swsetup_r+0x9a>
 801d296:	4621      	mov	r1, r4
 801d298:	4630      	mov	r0, r6
 801d29a:	f000 f98d 	bl	801d5b8 <__smakebuf_r>
 801d29e:	89a0      	ldrh	r0, [r4, #12]
 801d2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d2a4:	f010 0301 	ands.w	r3, r0, #1
 801d2a8:	d00a      	beq.n	801d2c0 <__swsetup_r+0xbc>
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	60a3      	str	r3, [r4, #8]
 801d2ae:	6963      	ldr	r3, [r4, #20]
 801d2b0:	425b      	negs	r3, r3
 801d2b2:	61a3      	str	r3, [r4, #24]
 801d2b4:	6923      	ldr	r3, [r4, #16]
 801d2b6:	b943      	cbnz	r3, 801d2ca <__swsetup_r+0xc6>
 801d2b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d2bc:	d1ba      	bne.n	801d234 <__swsetup_r+0x30>
 801d2be:	bd70      	pop	{r4, r5, r6, pc}
 801d2c0:	0781      	lsls	r1, r0, #30
 801d2c2:	bf58      	it	pl
 801d2c4:	6963      	ldrpl	r3, [r4, #20]
 801d2c6:	60a3      	str	r3, [r4, #8]
 801d2c8:	e7f4      	b.n	801d2b4 <__swsetup_r+0xb0>
 801d2ca:	2000      	movs	r0, #0
 801d2cc:	e7f7      	b.n	801d2be <__swsetup_r+0xba>
 801d2ce:	bf00      	nop
 801d2d0:	240000ac 	.word	0x240000ac
 801d2d4:	0801f5c4 	.word	0x0801f5c4
 801d2d8:	0801f5e4 	.word	0x0801f5e4
 801d2dc:	0801f5a4 	.word	0x0801f5a4

0801d2e0 <__register_exitproc>:
 801d2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d3a0 <__register_exitproc+0xc0>
 801d2e8:	4606      	mov	r6, r0
 801d2ea:	f8d8 0000 	ldr.w	r0, [r8]
 801d2ee:	461f      	mov	r7, r3
 801d2f0:	460d      	mov	r5, r1
 801d2f2:	4691      	mov	r9, r2
 801d2f4:	f7ff f961 	bl	801c5ba <__retarget_lock_acquire_recursive>
 801d2f8:	4b25      	ldr	r3, [pc, #148]	; (801d390 <__register_exitproc+0xb0>)
 801d2fa:	681c      	ldr	r4, [r3, #0]
 801d2fc:	b934      	cbnz	r4, 801d30c <__register_exitproc+0x2c>
 801d2fe:	4c25      	ldr	r4, [pc, #148]	; (801d394 <__register_exitproc+0xb4>)
 801d300:	601c      	str	r4, [r3, #0]
 801d302:	4b25      	ldr	r3, [pc, #148]	; (801d398 <__register_exitproc+0xb8>)
 801d304:	b113      	cbz	r3, 801d30c <__register_exitproc+0x2c>
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d30c:	6863      	ldr	r3, [r4, #4]
 801d30e:	2b1f      	cmp	r3, #31
 801d310:	dd07      	ble.n	801d322 <__register_exitproc+0x42>
 801d312:	f8d8 0000 	ldr.w	r0, [r8]
 801d316:	f7ff f952 	bl	801c5be <__retarget_lock_release_recursive>
 801d31a:	f04f 30ff 	mov.w	r0, #4294967295
 801d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d322:	b34e      	cbz	r6, 801d378 <__register_exitproc+0x98>
 801d324:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d328:	b988      	cbnz	r0, 801d34e <__register_exitproc+0x6e>
 801d32a:	4b1c      	ldr	r3, [pc, #112]	; (801d39c <__register_exitproc+0xbc>)
 801d32c:	b923      	cbnz	r3, 801d338 <__register_exitproc+0x58>
 801d32e:	f8d8 0000 	ldr.w	r0, [r8]
 801d332:	f7ff f943 	bl	801c5bc <__retarget_lock_release>
 801d336:	e7f0      	b.n	801d31a <__register_exitproc+0x3a>
 801d338:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d33c:	f7ff f940 	bl	801c5c0 <malloc>
 801d340:	2800      	cmp	r0, #0
 801d342:	d0f4      	beq.n	801d32e <__register_exitproc+0x4e>
 801d344:	2300      	movs	r3, #0
 801d346:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d34a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d34e:	6863      	ldr	r3, [r4, #4]
 801d350:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d354:	2201      	movs	r2, #1
 801d356:	409a      	lsls	r2, r3
 801d358:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d35c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d360:	4313      	orrs	r3, r2
 801d362:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d366:	2e02      	cmp	r6, #2
 801d368:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d36c:	bf02      	ittt	eq
 801d36e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d372:	4313      	orreq	r3, r2
 801d374:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d378:	6863      	ldr	r3, [r4, #4]
 801d37a:	f8d8 0000 	ldr.w	r0, [r8]
 801d37e:	1c5a      	adds	r2, r3, #1
 801d380:	3302      	adds	r3, #2
 801d382:	6062      	str	r2, [r4, #4]
 801d384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d388:	f7ff f919 	bl	801c5be <__retarget_lock_release_recursive>
 801d38c:	2000      	movs	r0, #0
 801d38e:	e7c6      	b.n	801d31e <__register_exitproc+0x3e>
 801d390:	2400bc00 	.word	0x2400bc00
 801d394:	2400bb74 	.word	0x2400bb74
 801d398:	0801f63c 	.word	0x0801f63c
 801d39c:	0801c5c1 	.word	0x0801c5c1
 801d3a0:	24000110 	.word	0x24000110

0801d3a4 <_close_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4d06      	ldr	r5, [pc, #24]	; (801d3c0 <_close_r+0x1c>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	602b      	str	r3, [r5, #0]
 801d3b0:	f7e5 fb8c 	bl	8002acc <_close>
 801d3b4:	1c43      	adds	r3, r0, #1
 801d3b6:	d102      	bne.n	801d3be <_close_r+0x1a>
 801d3b8:	682b      	ldr	r3, [r5, #0]
 801d3ba:	b103      	cbz	r3, 801d3be <_close_r+0x1a>
 801d3bc:	6023      	str	r3, [r4, #0]
 801d3be:	bd38      	pop	{r3, r4, r5, pc}
 801d3c0:	2400bb70 	.word	0x2400bb70

0801d3c4 <__sflush_r>:
 801d3c4:	898a      	ldrh	r2, [r1, #12]
 801d3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ca:	4605      	mov	r5, r0
 801d3cc:	0710      	lsls	r0, r2, #28
 801d3ce:	460c      	mov	r4, r1
 801d3d0:	d458      	bmi.n	801d484 <__sflush_r+0xc0>
 801d3d2:	684b      	ldr	r3, [r1, #4]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	dc05      	bgt.n	801d3e4 <__sflush_r+0x20>
 801d3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	dc02      	bgt.n	801d3e4 <__sflush_r+0x20>
 801d3de:	2000      	movs	r0, #0
 801d3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d3e6:	2e00      	cmp	r6, #0
 801d3e8:	d0f9      	beq.n	801d3de <__sflush_r+0x1a>
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d3f0:	682f      	ldr	r7, [r5, #0]
 801d3f2:	602b      	str	r3, [r5, #0]
 801d3f4:	d032      	beq.n	801d45c <__sflush_r+0x98>
 801d3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d3f8:	89a3      	ldrh	r3, [r4, #12]
 801d3fa:	075a      	lsls	r2, r3, #29
 801d3fc:	d505      	bpl.n	801d40a <__sflush_r+0x46>
 801d3fe:	6863      	ldr	r3, [r4, #4]
 801d400:	1ac0      	subs	r0, r0, r3
 801d402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d404:	b10b      	cbz	r3, 801d40a <__sflush_r+0x46>
 801d406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d408:	1ac0      	subs	r0, r0, r3
 801d40a:	2300      	movs	r3, #0
 801d40c:	4602      	mov	r2, r0
 801d40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d410:	6a21      	ldr	r1, [r4, #32]
 801d412:	4628      	mov	r0, r5
 801d414:	47b0      	blx	r6
 801d416:	1c43      	adds	r3, r0, #1
 801d418:	89a3      	ldrh	r3, [r4, #12]
 801d41a:	d106      	bne.n	801d42a <__sflush_r+0x66>
 801d41c:	6829      	ldr	r1, [r5, #0]
 801d41e:	291d      	cmp	r1, #29
 801d420:	d82c      	bhi.n	801d47c <__sflush_r+0xb8>
 801d422:	4a2a      	ldr	r2, [pc, #168]	; (801d4cc <__sflush_r+0x108>)
 801d424:	40ca      	lsrs	r2, r1
 801d426:	07d6      	lsls	r6, r2, #31
 801d428:	d528      	bpl.n	801d47c <__sflush_r+0xb8>
 801d42a:	2200      	movs	r2, #0
 801d42c:	6062      	str	r2, [r4, #4]
 801d42e:	04d9      	lsls	r1, r3, #19
 801d430:	6922      	ldr	r2, [r4, #16]
 801d432:	6022      	str	r2, [r4, #0]
 801d434:	d504      	bpl.n	801d440 <__sflush_r+0x7c>
 801d436:	1c42      	adds	r2, r0, #1
 801d438:	d101      	bne.n	801d43e <__sflush_r+0x7a>
 801d43a:	682b      	ldr	r3, [r5, #0]
 801d43c:	b903      	cbnz	r3, 801d440 <__sflush_r+0x7c>
 801d43e:	6560      	str	r0, [r4, #84]	; 0x54
 801d440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d442:	602f      	str	r7, [r5, #0]
 801d444:	2900      	cmp	r1, #0
 801d446:	d0ca      	beq.n	801d3de <__sflush_r+0x1a>
 801d448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d44c:	4299      	cmp	r1, r3
 801d44e:	d002      	beq.n	801d456 <__sflush_r+0x92>
 801d450:	4628      	mov	r0, r5
 801d452:	f7ff f8eb 	bl	801c62c <_free_r>
 801d456:	2000      	movs	r0, #0
 801d458:	6360      	str	r0, [r4, #52]	; 0x34
 801d45a:	e7c1      	b.n	801d3e0 <__sflush_r+0x1c>
 801d45c:	6a21      	ldr	r1, [r4, #32]
 801d45e:	2301      	movs	r3, #1
 801d460:	4628      	mov	r0, r5
 801d462:	47b0      	blx	r6
 801d464:	1c41      	adds	r1, r0, #1
 801d466:	d1c7      	bne.n	801d3f8 <__sflush_r+0x34>
 801d468:	682b      	ldr	r3, [r5, #0]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d0c4      	beq.n	801d3f8 <__sflush_r+0x34>
 801d46e:	2b1d      	cmp	r3, #29
 801d470:	d001      	beq.n	801d476 <__sflush_r+0xb2>
 801d472:	2b16      	cmp	r3, #22
 801d474:	d101      	bne.n	801d47a <__sflush_r+0xb6>
 801d476:	602f      	str	r7, [r5, #0]
 801d478:	e7b1      	b.n	801d3de <__sflush_r+0x1a>
 801d47a:	89a3      	ldrh	r3, [r4, #12]
 801d47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d480:	81a3      	strh	r3, [r4, #12]
 801d482:	e7ad      	b.n	801d3e0 <__sflush_r+0x1c>
 801d484:	690f      	ldr	r7, [r1, #16]
 801d486:	2f00      	cmp	r7, #0
 801d488:	d0a9      	beq.n	801d3de <__sflush_r+0x1a>
 801d48a:	0793      	lsls	r3, r2, #30
 801d48c:	680e      	ldr	r6, [r1, #0]
 801d48e:	bf08      	it	eq
 801d490:	694b      	ldreq	r3, [r1, #20]
 801d492:	600f      	str	r7, [r1, #0]
 801d494:	bf18      	it	ne
 801d496:	2300      	movne	r3, #0
 801d498:	eba6 0807 	sub.w	r8, r6, r7
 801d49c:	608b      	str	r3, [r1, #8]
 801d49e:	f1b8 0f00 	cmp.w	r8, #0
 801d4a2:	dd9c      	ble.n	801d3de <__sflush_r+0x1a>
 801d4a4:	6a21      	ldr	r1, [r4, #32]
 801d4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d4a8:	4643      	mov	r3, r8
 801d4aa:	463a      	mov	r2, r7
 801d4ac:	4628      	mov	r0, r5
 801d4ae:	47b0      	blx	r6
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	dc06      	bgt.n	801d4c2 <__sflush_r+0xfe>
 801d4b4:	89a3      	ldrh	r3, [r4, #12]
 801d4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4ba:	81a3      	strh	r3, [r4, #12]
 801d4bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d4c0:	e78e      	b.n	801d3e0 <__sflush_r+0x1c>
 801d4c2:	4407      	add	r7, r0
 801d4c4:	eba8 0800 	sub.w	r8, r8, r0
 801d4c8:	e7e9      	b.n	801d49e <__sflush_r+0xda>
 801d4ca:	bf00      	nop
 801d4cc:	20400001 	.word	0x20400001

0801d4d0 <_fflush_r>:
 801d4d0:	b538      	push	{r3, r4, r5, lr}
 801d4d2:	690b      	ldr	r3, [r1, #16]
 801d4d4:	4605      	mov	r5, r0
 801d4d6:	460c      	mov	r4, r1
 801d4d8:	b913      	cbnz	r3, 801d4e0 <_fflush_r+0x10>
 801d4da:	2500      	movs	r5, #0
 801d4dc:	4628      	mov	r0, r5
 801d4de:	bd38      	pop	{r3, r4, r5, pc}
 801d4e0:	b118      	cbz	r0, 801d4ea <_fflush_r+0x1a>
 801d4e2:	6983      	ldr	r3, [r0, #24]
 801d4e4:	b90b      	cbnz	r3, 801d4ea <_fflush_r+0x1a>
 801d4e6:	f7fe ff93 	bl	801c410 <__sinit>
 801d4ea:	4b14      	ldr	r3, [pc, #80]	; (801d53c <_fflush_r+0x6c>)
 801d4ec:	429c      	cmp	r4, r3
 801d4ee:	d11b      	bne.n	801d528 <_fflush_r+0x58>
 801d4f0:	686c      	ldr	r4, [r5, #4]
 801d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d0ef      	beq.n	801d4da <_fflush_r+0xa>
 801d4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d4fc:	07d0      	lsls	r0, r2, #31
 801d4fe:	d404      	bmi.n	801d50a <_fflush_r+0x3a>
 801d500:	0599      	lsls	r1, r3, #22
 801d502:	d402      	bmi.n	801d50a <_fflush_r+0x3a>
 801d504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d506:	f7ff f858 	bl	801c5ba <__retarget_lock_acquire_recursive>
 801d50a:	4628      	mov	r0, r5
 801d50c:	4621      	mov	r1, r4
 801d50e:	f7ff ff59 	bl	801d3c4 <__sflush_r>
 801d512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d514:	07da      	lsls	r2, r3, #31
 801d516:	4605      	mov	r5, r0
 801d518:	d4e0      	bmi.n	801d4dc <_fflush_r+0xc>
 801d51a:	89a3      	ldrh	r3, [r4, #12]
 801d51c:	059b      	lsls	r3, r3, #22
 801d51e:	d4dd      	bmi.n	801d4dc <_fflush_r+0xc>
 801d520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d522:	f7ff f84c 	bl	801c5be <__retarget_lock_release_recursive>
 801d526:	e7d9      	b.n	801d4dc <_fflush_r+0xc>
 801d528:	4b05      	ldr	r3, [pc, #20]	; (801d540 <_fflush_r+0x70>)
 801d52a:	429c      	cmp	r4, r3
 801d52c:	d101      	bne.n	801d532 <_fflush_r+0x62>
 801d52e:	68ac      	ldr	r4, [r5, #8]
 801d530:	e7df      	b.n	801d4f2 <_fflush_r+0x22>
 801d532:	4b04      	ldr	r3, [pc, #16]	; (801d544 <_fflush_r+0x74>)
 801d534:	429c      	cmp	r4, r3
 801d536:	bf08      	it	eq
 801d538:	68ec      	ldreq	r4, [r5, #12]
 801d53a:	e7da      	b.n	801d4f2 <_fflush_r+0x22>
 801d53c:	0801f5c4 	.word	0x0801f5c4
 801d540:	0801f5e4 	.word	0x0801f5e4
 801d544:	0801f5a4 	.word	0x0801f5a4

0801d548 <_lseek_r>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4d07      	ldr	r5, [pc, #28]	; (801d568 <_lseek_r+0x20>)
 801d54c:	4604      	mov	r4, r0
 801d54e:	4608      	mov	r0, r1
 801d550:	4611      	mov	r1, r2
 801d552:	2200      	movs	r2, #0
 801d554:	602a      	str	r2, [r5, #0]
 801d556:	461a      	mov	r2, r3
 801d558:	f7e5 fac2 	bl	8002ae0 <_lseek>
 801d55c:	1c43      	adds	r3, r0, #1
 801d55e:	d102      	bne.n	801d566 <_lseek_r+0x1e>
 801d560:	682b      	ldr	r3, [r5, #0]
 801d562:	b103      	cbz	r3, 801d566 <_lseek_r+0x1e>
 801d564:	6023      	str	r3, [r4, #0]
 801d566:	bd38      	pop	{r3, r4, r5, pc}
 801d568:	2400bb70 	.word	0x2400bb70

0801d56c <__swhatbuf_r>:
 801d56c:	b570      	push	{r4, r5, r6, lr}
 801d56e:	460e      	mov	r6, r1
 801d570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d574:	2900      	cmp	r1, #0
 801d576:	b096      	sub	sp, #88	; 0x58
 801d578:	4614      	mov	r4, r2
 801d57a:	461d      	mov	r5, r3
 801d57c:	da08      	bge.n	801d590 <__swhatbuf_r+0x24>
 801d57e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d582:	2200      	movs	r2, #0
 801d584:	602a      	str	r2, [r5, #0]
 801d586:	061a      	lsls	r2, r3, #24
 801d588:	d410      	bmi.n	801d5ac <__swhatbuf_r+0x40>
 801d58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d58e:	e00e      	b.n	801d5ae <__swhatbuf_r+0x42>
 801d590:	466a      	mov	r2, sp
 801d592:	f000 fa13 	bl	801d9bc <_fstat_r>
 801d596:	2800      	cmp	r0, #0
 801d598:	dbf1      	blt.n	801d57e <__swhatbuf_r+0x12>
 801d59a:	9a01      	ldr	r2, [sp, #4]
 801d59c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d5a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d5a4:	425a      	negs	r2, r3
 801d5a6:	415a      	adcs	r2, r3
 801d5a8:	602a      	str	r2, [r5, #0]
 801d5aa:	e7ee      	b.n	801d58a <__swhatbuf_r+0x1e>
 801d5ac:	2340      	movs	r3, #64	; 0x40
 801d5ae:	2000      	movs	r0, #0
 801d5b0:	6023      	str	r3, [r4, #0]
 801d5b2:	b016      	add	sp, #88	; 0x58
 801d5b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d5b8 <__smakebuf_r>:
 801d5b8:	898b      	ldrh	r3, [r1, #12]
 801d5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d5bc:	079d      	lsls	r5, r3, #30
 801d5be:	4606      	mov	r6, r0
 801d5c0:	460c      	mov	r4, r1
 801d5c2:	d507      	bpl.n	801d5d4 <__smakebuf_r+0x1c>
 801d5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d5c8:	6023      	str	r3, [r4, #0]
 801d5ca:	6123      	str	r3, [r4, #16]
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	6163      	str	r3, [r4, #20]
 801d5d0:	b002      	add	sp, #8
 801d5d2:	bd70      	pop	{r4, r5, r6, pc}
 801d5d4:	ab01      	add	r3, sp, #4
 801d5d6:	466a      	mov	r2, sp
 801d5d8:	f7ff ffc8 	bl	801d56c <__swhatbuf_r>
 801d5dc:	9900      	ldr	r1, [sp, #0]
 801d5de:	4605      	mov	r5, r0
 801d5e0:	4630      	mov	r0, r6
 801d5e2:	f7ff f88f 	bl	801c704 <_malloc_r>
 801d5e6:	b948      	cbnz	r0, 801d5fc <__smakebuf_r+0x44>
 801d5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5ec:	059a      	lsls	r2, r3, #22
 801d5ee:	d4ef      	bmi.n	801d5d0 <__smakebuf_r+0x18>
 801d5f0:	f023 0303 	bic.w	r3, r3, #3
 801d5f4:	f043 0302 	orr.w	r3, r3, #2
 801d5f8:	81a3      	strh	r3, [r4, #12]
 801d5fa:	e7e3      	b.n	801d5c4 <__smakebuf_r+0xc>
 801d5fc:	4b0d      	ldr	r3, [pc, #52]	; (801d634 <__smakebuf_r+0x7c>)
 801d5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 801d600:	89a3      	ldrh	r3, [r4, #12]
 801d602:	6020      	str	r0, [r4, #0]
 801d604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d608:	81a3      	strh	r3, [r4, #12]
 801d60a:	9b00      	ldr	r3, [sp, #0]
 801d60c:	6163      	str	r3, [r4, #20]
 801d60e:	9b01      	ldr	r3, [sp, #4]
 801d610:	6120      	str	r0, [r4, #16]
 801d612:	b15b      	cbz	r3, 801d62c <__smakebuf_r+0x74>
 801d614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d618:	4630      	mov	r0, r6
 801d61a:	f000 f9e1 	bl	801d9e0 <_isatty_r>
 801d61e:	b128      	cbz	r0, 801d62c <__smakebuf_r+0x74>
 801d620:	89a3      	ldrh	r3, [r4, #12]
 801d622:	f023 0303 	bic.w	r3, r3, #3
 801d626:	f043 0301 	orr.w	r3, r3, #1
 801d62a:	81a3      	strh	r3, [r4, #12]
 801d62c:	89a0      	ldrh	r0, [r4, #12]
 801d62e:	4305      	orrs	r5, r0
 801d630:	81a5      	strh	r5, [r4, #12]
 801d632:	e7cd      	b.n	801d5d0 <__smakebuf_r+0x18>
 801d634:	0801c3a9 	.word	0x0801c3a9

0801d638 <memmove>:
 801d638:	4288      	cmp	r0, r1
 801d63a:	b510      	push	{r4, lr}
 801d63c:	eb01 0402 	add.w	r4, r1, r2
 801d640:	d902      	bls.n	801d648 <memmove+0x10>
 801d642:	4284      	cmp	r4, r0
 801d644:	4623      	mov	r3, r4
 801d646:	d807      	bhi.n	801d658 <memmove+0x20>
 801d648:	1e43      	subs	r3, r0, #1
 801d64a:	42a1      	cmp	r1, r4
 801d64c:	d008      	beq.n	801d660 <memmove+0x28>
 801d64e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d652:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d656:	e7f8      	b.n	801d64a <memmove+0x12>
 801d658:	4402      	add	r2, r0
 801d65a:	4601      	mov	r1, r0
 801d65c:	428a      	cmp	r2, r1
 801d65e:	d100      	bne.n	801d662 <memmove+0x2a>
 801d660:	bd10      	pop	{r4, pc}
 801d662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d66a:	e7f7      	b.n	801d65c <memmove+0x24>

0801d66c <__malloc_lock>:
 801d66c:	4801      	ldr	r0, [pc, #4]	; (801d674 <__malloc_lock+0x8>)
 801d66e:	f7fe bfa4 	b.w	801c5ba <__retarget_lock_acquire_recursive>
 801d672:	bf00      	nop
 801d674:	2400ba5d 	.word	0x2400ba5d

0801d678 <__malloc_unlock>:
 801d678:	4801      	ldr	r0, [pc, #4]	; (801d680 <__malloc_unlock+0x8>)
 801d67a:	f7fe bfa0 	b.w	801c5be <__retarget_lock_release_recursive>
 801d67e:	bf00      	nop
 801d680:	2400ba5d 	.word	0x2400ba5d

0801d684 <_realloc_r>:
 801d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d688:	4680      	mov	r8, r0
 801d68a:	4614      	mov	r4, r2
 801d68c:	460e      	mov	r6, r1
 801d68e:	b921      	cbnz	r1, 801d69a <_realloc_r+0x16>
 801d690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d694:	4611      	mov	r1, r2
 801d696:	f7ff b835 	b.w	801c704 <_malloc_r>
 801d69a:	b92a      	cbnz	r2, 801d6a8 <_realloc_r+0x24>
 801d69c:	f7fe ffc6 	bl	801c62c <_free_r>
 801d6a0:	4625      	mov	r5, r4
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6a8:	f000 f9aa 	bl	801da00 <_malloc_usable_size_r>
 801d6ac:	4284      	cmp	r4, r0
 801d6ae:	4607      	mov	r7, r0
 801d6b0:	d802      	bhi.n	801d6b8 <_realloc_r+0x34>
 801d6b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d6b6:	d812      	bhi.n	801d6de <_realloc_r+0x5a>
 801d6b8:	4621      	mov	r1, r4
 801d6ba:	4640      	mov	r0, r8
 801d6bc:	f7ff f822 	bl	801c704 <_malloc_r>
 801d6c0:	4605      	mov	r5, r0
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	d0ed      	beq.n	801d6a2 <_realloc_r+0x1e>
 801d6c6:	42bc      	cmp	r4, r7
 801d6c8:	4622      	mov	r2, r4
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	bf28      	it	cs
 801d6ce:	463a      	movcs	r2, r7
 801d6d0:	f7fe ff96 	bl	801c600 <memcpy>
 801d6d4:	4631      	mov	r1, r6
 801d6d6:	4640      	mov	r0, r8
 801d6d8:	f7fe ffa8 	bl	801c62c <_free_r>
 801d6dc:	e7e1      	b.n	801d6a2 <_realloc_r+0x1e>
 801d6de:	4635      	mov	r5, r6
 801d6e0:	e7df      	b.n	801d6a2 <_realloc_r+0x1e>

0801d6e2 <__ssputs_r>:
 801d6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6e6:	688e      	ldr	r6, [r1, #8]
 801d6e8:	429e      	cmp	r6, r3
 801d6ea:	4682      	mov	sl, r0
 801d6ec:	460c      	mov	r4, r1
 801d6ee:	4690      	mov	r8, r2
 801d6f0:	461f      	mov	r7, r3
 801d6f2:	d838      	bhi.n	801d766 <__ssputs_r+0x84>
 801d6f4:	898a      	ldrh	r2, [r1, #12]
 801d6f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d6fa:	d032      	beq.n	801d762 <__ssputs_r+0x80>
 801d6fc:	6825      	ldr	r5, [r4, #0]
 801d6fe:	6909      	ldr	r1, [r1, #16]
 801d700:	eba5 0901 	sub.w	r9, r5, r1
 801d704:	6965      	ldr	r5, [r4, #20]
 801d706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d70a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d70e:	3301      	adds	r3, #1
 801d710:	444b      	add	r3, r9
 801d712:	106d      	asrs	r5, r5, #1
 801d714:	429d      	cmp	r5, r3
 801d716:	bf38      	it	cc
 801d718:	461d      	movcc	r5, r3
 801d71a:	0553      	lsls	r3, r2, #21
 801d71c:	d531      	bpl.n	801d782 <__ssputs_r+0xa0>
 801d71e:	4629      	mov	r1, r5
 801d720:	f7fe fff0 	bl	801c704 <_malloc_r>
 801d724:	4606      	mov	r6, r0
 801d726:	b950      	cbnz	r0, 801d73e <__ssputs_r+0x5c>
 801d728:	230c      	movs	r3, #12
 801d72a:	f8ca 3000 	str.w	r3, [sl]
 801d72e:	89a3      	ldrh	r3, [r4, #12]
 801d730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d734:	81a3      	strh	r3, [r4, #12]
 801d736:	f04f 30ff 	mov.w	r0, #4294967295
 801d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d73e:	6921      	ldr	r1, [r4, #16]
 801d740:	464a      	mov	r2, r9
 801d742:	f7fe ff5d 	bl	801c600 <memcpy>
 801d746:	89a3      	ldrh	r3, [r4, #12]
 801d748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d750:	81a3      	strh	r3, [r4, #12]
 801d752:	6126      	str	r6, [r4, #16]
 801d754:	6165      	str	r5, [r4, #20]
 801d756:	444e      	add	r6, r9
 801d758:	eba5 0509 	sub.w	r5, r5, r9
 801d75c:	6026      	str	r6, [r4, #0]
 801d75e:	60a5      	str	r5, [r4, #8]
 801d760:	463e      	mov	r6, r7
 801d762:	42be      	cmp	r6, r7
 801d764:	d900      	bls.n	801d768 <__ssputs_r+0x86>
 801d766:	463e      	mov	r6, r7
 801d768:	6820      	ldr	r0, [r4, #0]
 801d76a:	4632      	mov	r2, r6
 801d76c:	4641      	mov	r1, r8
 801d76e:	f7ff ff63 	bl	801d638 <memmove>
 801d772:	68a3      	ldr	r3, [r4, #8]
 801d774:	1b9b      	subs	r3, r3, r6
 801d776:	60a3      	str	r3, [r4, #8]
 801d778:	6823      	ldr	r3, [r4, #0]
 801d77a:	4433      	add	r3, r6
 801d77c:	6023      	str	r3, [r4, #0]
 801d77e:	2000      	movs	r0, #0
 801d780:	e7db      	b.n	801d73a <__ssputs_r+0x58>
 801d782:	462a      	mov	r2, r5
 801d784:	f7ff ff7e 	bl	801d684 <_realloc_r>
 801d788:	4606      	mov	r6, r0
 801d78a:	2800      	cmp	r0, #0
 801d78c:	d1e1      	bne.n	801d752 <__ssputs_r+0x70>
 801d78e:	6921      	ldr	r1, [r4, #16]
 801d790:	4650      	mov	r0, sl
 801d792:	f7fe ff4b 	bl	801c62c <_free_r>
 801d796:	e7c7      	b.n	801d728 <__ssputs_r+0x46>

0801d798 <_svfiprintf_r>:
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	4698      	mov	r8, r3
 801d79e:	898b      	ldrh	r3, [r1, #12]
 801d7a0:	061b      	lsls	r3, r3, #24
 801d7a2:	b09d      	sub	sp, #116	; 0x74
 801d7a4:	4607      	mov	r7, r0
 801d7a6:	460d      	mov	r5, r1
 801d7a8:	4614      	mov	r4, r2
 801d7aa:	d50e      	bpl.n	801d7ca <_svfiprintf_r+0x32>
 801d7ac:	690b      	ldr	r3, [r1, #16]
 801d7ae:	b963      	cbnz	r3, 801d7ca <_svfiprintf_r+0x32>
 801d7b0:	2140      	movs	r1, #64	; 0x40
 801d7b2:	f7fe ffa7 	bl	801c704 <_malloc_r>
 801d7b6:	6028      	str	r0, [r5, #0]
 801d7b8:	6128      	str	r0, [r5, #16]
 801d7ba:	b920      	cbnz	r0, 801d7c6 <_svfiprintf_r+0x2e>
 801d7bc:	230c      	movs	r3, #12
 801d7be:	603b      	str	r3, [r7, #0]
 801d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7c4:	e0d1      	b.n	801d96a <_svfiprintf_r+0x1d2>
 801d7c6:	2340      	movs	r3, #64	; 0x40
 801d7c8:	616b      	str	r3, [r5, #20]
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	9309      	str	r3, [sp, #36]	; 0x24
 801d7ce:	2320      	movs	r3, #32
 801d7d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7d8:	2330      	movs	r3, #48	; 0x30
 801d7da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d984 <_svfiprintf_r+0x1ec>
 801d7de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d7e2:	f04f 0901 	mov.w	r9, #1
 801d7e6:	4623      	mov	r3, r4
 801d7e8:	469a      	mov	sl, r3
 801d7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7ee:	b10a      	cbz	r2, 801d7f4 <_svfiprintf_r+0x5c>
 801d7f0:	2a25      	cmp	r2, #37	; 0x25
 801d7f2:	d1f9      	bne.n	801d7e8 <_svfiprintf_r+0x50>
 801d7f4:	ebba 0b04 	subs.w	fp, sl, r4
 801d7f8:	d00b      	beq.n	801d812 <_svfiprintf_r+0x7a>
 801d7fa:	465b      	mov	r3, fp
 801d7fc:	4622      	mov	r2, r4
 801d7fe:	4629      	mov	r1, r5
 801d800:	4638      	mov	r0, r7
 801d802:	f7ff ff6e 	bl	801d6e2 <__ssputs_r>
 801d806:	3001      	adds	r0, #1
 801d808:	f000 80aa 	beq.w	801d960 <_svfiprintf_r+0x1c8>
 801d80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d80e:	445a      	add	r2, fp
 801d810:	9209      	str	r2, [sp, #36]	; 0x24
 801d812:	f89a 3000 	ldrb.w	r3, [sl]
 801d816:	2b00      	cmp	r3, #0
 801d818:	f000 80a2 	beq.w	801d960 <_svfiprintf_r+0x1c8>
 801d81c:	2300      	movs	r3, #0
 801d81e:	f04f 32ff 	mov.w	r2, #4294967295
 801d822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d826:	f10a 0a01 	add.w	sl, sl, #1
 801d82a:	9304      	str	r3, [sp, #16]
 801d82c:	9307      	str	r3, [sp, #28]
 801d82e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d832:	931a      	str	r3, [sp, #104]	; 0x68
 801d834:	4654      	mov	r4, sl
 801d836:	2205      	movs	r2, #5
 801d838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d83c:	4851      	ldr	r0, [pc, #324]	; (801d984 <_svfiprintf_r+0x1ec>)
 801d83e:	f7e2 fd6f 	bl	8000320 <memchr>
 801d842:	9a04      	ldr	r2, [sp, #16]
 801d844:	b9d8      	cbnz	r0, 801d87e <_svfiprintf_r+0xe6>
 801d846:	06d0      	lsls	r0, r2, #27
 801d848:	bf44      	itt	mi
 801d84a:	2320      	movmi	r3, #32
 801d84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d850:	0711      	lsls	r1, r2, #28
 801d852:	bf44      	itt	mi
 801d854:	232b      	movmi	r3, #43	; 0x2b
 801d856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d85a:	f89a 3000 	ldrb.w	r3, [sl]
 801d85e:	2b2a      	cmp	r3, #42	; 0x2a
 801d860:	d015      	beq.n	801d88e <_svfiprintf_r+0xf6>
 801d862:	9a07      	ldr	r2, [sp, #28]
 801d864:	4654      	mov	r4, sl
 801d866:	2000      	movs	r0, #0
 801d868:	f04f 0c0a 	mov.w	ip, #10
 801d86c:	4621      	mov	r1, r4
 801d86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d872:	3b30      	subs	r3, #48	; 0x30
 801d874:	2b09      	cmp	r3, #9
 801d876:	d94e      	bls.n	801d916 <_svfiprintf_r+0x17e>
 801d878:	b1b0      	cbz	r0, 801d8a8 <_svfiprintf_r+0x110>
 801d87a:	9207      	str	r2, [sp, #28]
 801d87c:	e014      	b.n	801d8a8 <_svfiprintf_r+0x110>
 801d87e:	eba0 0308 	sub.w	r3, r0, r8
 801d882:	fa09 f303 	lsl.w	r3, r9, r3
 801d886:	4313      	orrs	r3, r2
 801d888:	9304      	str	r3, [sp, #16]
 801d88a:	46a2      	mov	sl, r4
 801d88c:	e7d2      	b.n	801d834 <_svfiprintf_r+0x9c>
 801d88e:	9b03      	ldr	r3, [sp, #12]
 801d890:	1d19      	adds	r1, r3, #4
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	9103      	str	r1, [sp, #12]
 801d896:	2b00      	cmp	r3, #0
 801d898:	bfbb      	ittet	lt
 801d89a:	425b      	neglt	r3, r3
 801d89c:	f042 0202 	orrlt.w	r2, r2, #2
 801d8a0:	9307      	strge	r3, [sp, #28]
 801d8a2:	9307      	strlt	r3, [sp, #28]
 801d8a4:	bfb8      	it	lt
 801d8a6:	9204      	strlt	r2, [sp, #16]
 801d8a8:	7823      	ldrb	r3, [r4, #0]
 801d8aa:	2b2e      	cmp	r3, #46	; 0x2e
 801d8ac:	d10c      	bne.n	801d8c8 <_svfiprintf_r+0x130>
 801d8ae:	7863      	ldrb	r3, [r4, #1]
 801d8b0:	2b2a      	cmp	r3, #42	; 0x2a
 801d8b2:	d135      	bne.n	801d920 <_svfiprintf_r+0x188>
 801d8b4:	9b03      	ldr	r3, [sp, #12]
 801d8b6:	1d1a      	adds	r2, r3, #4
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	9203      	str	r2, [sp, #12]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	bfb8      	it	lt
 801d8c0:	f04f 33ff 	movlt.w	r3, #4294967295
 801d8c4:	3402      	adds	r4, #2
 801d8c6:	9305      	str	r3, [sp, #20]
 801d8c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d994 <_svfiprintf_r+0x1fc>
 801d8cc:	7821      	ldrb	r1, [r4, #0]
 801d8ce:	2203      	movs	r2, #3
 801d8d0:	4650      	mov	r0, sl
 801d8d2:	f7e2 fd25 	bl	8000320 <memchr>
 801d8d6:	b140      	cbz	r0, 801d8ea <_svfiprintf_r+0x152>
 801d8d8:	2340      	movs	r3, #64	; 0x40
 801d8da:	eba0 000a 	sub.w	r0, r0, sl
 801d8de:	fa03 f000 	lsl.w	r0, r3, r0
 801d8e2:	9b04      	ldr	r3, [sp, #16]
 801d8e4:	4303      	orrs	r3, r0
 801d8e6:	3401      	adds	r4, #1
 801d8e8:	9304      	str	r3, [sp, #16]
 801d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ee:	4826      	ldr	r0, [pc, #152]	; (801d988 <_svfiprintf_r+0x1f0>)
 801d8f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d8f4:	2206      	movs	r2, #6
 801d8f6:	f7e2 fd13 	bl	8000320 <memchr>
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	d038      	beq.n	801d970 <_svfiprintf_r+0x1d8>
 801d8fe:	4b23      	ldr	r3, [pc, #140]	; (801d98c <_svfiprintf_r+0x1f4>)
 801d900:	bb1b      	cbnz	r3, 801d94a <_svfiprintf_r+0x1b2>
 801d902:	9b03      	ldr	r3, [sp, #12]
 801d904:	3307      	adds	r3, #7
 801d906:	f023 0307 	bic.w	r3, r3, #7
 801d90a:	3308      	adds	r3, #8
 801d90c:	9303      	str	r3, [sp, #12]
 801d90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d910:	4433      	add	r3, r6
 801d912:	9309      	str	r3, [sp, #36]	; 0x24
 801d914:	e767      	b.n	801d7e6 <_svfiprintf_r+0x4e>
 801d916:	fb0c 3202 	mla	r2, ip, r2, r3
 801d91a:	460c      	mov	r4, r1
 801d91c:	2001      	movs	r0, #1
 801d91e:	e7a5      	b.n	801d86c <_svfiprintf_r+0xd4>
 801d920:	2300      	movs	r3, #0
 801d922:	3401      	adds	r4, #1
 801d924:	9305      	str	r3, [sp, #20]
 801d926:	4619      	mov	r1, r3
 801d928:	f04f 0c0a 	mov.w	ip, #10
 801d92c:	4620      	mov	r0, r4
 801d92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d932:	3a30      	subs	r2, #48	; 0x30
 801d934:	2a09      	cmp	r2, #9
 801d936:	d903      	bls.n	801d940 <_svfiprintf_r+0x1a8>
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d0c5      	beq.n	801d8c8 <_svfiprintf_r+0x130>
 801d93c:	9105      	str	r1, [sp, #20]
 801d93e:	e7c3      	b.n	801d8c8 <_svfiprintf_r+0x130>
 801d940:	fb0c 2101 	mla	r1, ip, r1, r2
 801d944:	4604      	mov	r4, r0
 801d946:	2301      	movs	r3, #1
 801d948:	e7f0      	b.n	801d92c <_svfiprintf_r+0x194>
 801d94a:	ab03      	add	r3, sp, #12
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	462a      	mov	r2, r5
 801d950:	4b0f      	ldr	r3, [pc, #60]	; (801d990 <_svfiprintf_r+0x1f8>)
 801d952:	a904      	add	r1, sp, #16
 801d954:	4638      	mov	r0, r7
 801d956:	f3af 8000 	nop.w
 801d95a:	1c42      	adds	r2, r0, #1
 801d95c:	4606      	mov	r6, r0
 801d95e:	d1d6      	bne.n	801d90e <_svfiprintf_r+0x176>
 801d960:	89ab      	ldrh	r3, [r5, #12]
 801d962:	065b      	lsls	r3, r3, #25
 801d964:	f53f af2c 	bmi.w	801d7c0 <_svfiprintf_r+0x28>
 801d968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d96a:	b01d      	add	sp, #116	; 0x74
 801d96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d970:	ab03      	add	r3, sp, #12
 801d972:	9300      	str	r3, [sp, #0]
 801d974:	462a      	mov	r2, r5
 801d976:	4b06      	ldr	r3, [pc, #24]	; (801d990 <_svfiprintf_r+0x1f8>)
 801d978:	a904      	add	r1, sp, #16
 801d97a:	4638      	mov	r0, r7
 801d97c:	f7ff f8fe 	bl	801cb7c <_printf_i>
 801d980:	e7eb      	b.n	801d95a <_svfiprintf_r+0x1c2>
 801d982:	bf00      	nop
 801d984:	0801f608 	.word	0x0801f608
 801d988:	0801f612 	.word	0x0801f612
 801d98c:	00000000 	.word	0x00000000
 801d990:	0801d6e3 	.word	0x0801d6e3
 801d994:	0801f60e 	.word	0x0801f60e

0801d998 <_read_r>:
 801d998:	b538      	push	{r3, r4, r5, lr}
 801d99a:	4d07      	ldr	r5, [pc, #28]	; (801d9b8 <_read_r+0x20>)
 801d99c:	4604      	mov	r4, r0
 801d99e:	4608      	mov	r0, r1
 801d9a0:	4611      	mov	r1, r2
 801d9a2:	2200      	movs	r2, #0
 801d9a4:	602a      	str	r2, [r5, #0]
 801d9a6:	461a      	mov	r2, r3
 801d9a8:	f7e5 f872 	bl	8002a90 <_read>
 801d9ac:	1c43      	adds	r3, r0, #1
 801d9ae:	d102      	bne.n	801d9b6 <_read_r+0x1e>
 801d9b0:	682b      	ldr	r3, [r5, #0]
 801d9b2:	b103      	cbz	r3, 801d9b6 <_read_r+0x1e>
 801d9b4:	6023      	str	r3, [r4, #0]
 801d9b6:	bd38      	pop	{r3, r4, r5, pc}
 801d9b8:	2400bb70 	.word	0x2400bb70

0801d9bc <_fstat_r>:
 801d9bc:	b538      	push	{r3, r4, r5, lr}
 801d9be:	4d07      	ldr	r5, [pc, #28]	; (801d9dc <_fstat_r+0x20>)
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	4608      	mov	r0, r1
 801d9c6:	4611      	mov	r1, r2
 801d9c8:	602b      	str	r3, [r5, #0]
 801d9ca:	f7e5 f882 	bl	8002ad2 <_fstat>
 801d9ce:	1c43      	adds	r3, r0, #1
 801d9d0:	d102      	bne.n	801d9d8 <_fstat_r+0x1c>
 801d9d2:	682b      	ldr	r3, [r5, #0]
 801d9d4:	b103      	cbz	r3, 801d9d8 <_fstat_r+0x1c>
 801d9d6:	6023      	str	r3, [r4, #0]
 801d9d8:	bd38      	pop	{r3, r4, r5, pc}
 801d9da:	bf00      	nop
 801d9dc:	2400bb70 	.word	0x2400bb70

0801d9e0 <_isatty_r>:
 801d9e0:	b538      	push	{r3, r4, r5, lr}
 801d9e2:	4d06      	ldr	r5, [pc, #24]	; (801d9fc <_isatty_r+0x1c>)
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	4604      	mov	r4, r0
 801d9e8:	4608      	mov	r0, r1
 801d9ea:	602b      	str	r3, [r5, #0]
 801d9ec:	f7e5 f876 	bl	8002adc <_isatty>
 801d9f0:	1c43      	adds	r3, r0, #1
 801d9f2:	d102      	bne.n	801d9fa <_isatty_r+0x1a>
 801d9f4:	682b      	ldr	r3, [r5, #0]
 801d9f6:	b103      	cbz	r3, 801d9fa <_isatty_r+0x1a>
 801d9f8:	6023      	str	r3, [r4, #0]
 801d9fa:	bd38      	pop	{r3, r4, r5, pc}
 801d9fc:	2400bb70 	.word	0x2400bb70

0801da00 <_malloc_usable_size_r>:
 801da00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da04:	1f18      	subs	r0, r3, #4
 801da06:	2b00      	cmp	r3, #0
 801da08:	bfbc      	itt	lt
 801da0a:	580b      	ldrlt	r3, [r1, r0]
 801da0c:	18c0      	addlt	r0, r0, r3
 801da0e:	4770      	bx	lr

0801da10 <_init>:
 801da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da12:	bf00      	nop
 801da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da16:	bc08      	pop	{r3}
 801da18:	469e      	mov	lr, r3
 801da1a:	4770      	bx	lr

0801da1c <_fini>:
 801da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da1e:	bf00      	nop
 801da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da22:	bc08      	pop	{r3}
 801da24:	469e      	mov	lr, r3
 801da26:	4770      	bx	lr
