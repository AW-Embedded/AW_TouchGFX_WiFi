
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ba4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000191c  08018e54  08018e54  00028e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801a770  0801a770  0002a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801a788  0801a788  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801a788  0801a788  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801a788  0801a788  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801a788  0801a788  0002a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801a79c  0801a79c  0002a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  0801a7a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000af80  24000110  0801a8b4  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b090  0801a8b4  0003b090  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0004dfe9  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0009d185  00000000  00000000  000edbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00010df1  00000000  00000000  0018ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003110  00000000  00000000  0019bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016df19  00000000  00000000  0019ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003238  00000000  00000000  0030cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0002d0a6  00000000  00000000  0030fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003da61  00000000  00000000  0033ce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0037a8b7  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000091ec  00000000  00000000  0037a988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018e3c 	.word	0x08018e3c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08018e3c 	.word	0x08018e3c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f004 fad9 	bl	8004970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f017 fd61 	bl	8017e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f001 fc5d 	bl	8001c80 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0801a7a4 	.word	0x0801a7a4
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 80003d8:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 80003dc:	2400b090 	.word	0x2400b090

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80003e2:	4770      	bx	lr

080003e4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003e4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80003e6:	f000 ff51 	bl	800128c <touchgfx_init>
}
 80003ea:	bd08      	pop	{r3, pc}

080003ec <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80003ec:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80003ee:	f000 ffc7 	bl	8001380 <touchgfx_taskEntry>
}
 80003f2:	bd08      	pop	{r3, pc}

080003f4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <_ZN20STM32TouchControllerD1Ev+0xc>)
 80003f6:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 80003f8:	4a02      	ldr	r2, [pc, #8]	; (8000404 <_ZN20STM32TouchControllerD1Ev+0x10>)
 80003fa:	6002      	str	r2, [r0, #0]
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	08018eb4 	.word	0x08018eb4
 8000404:	08018e9c 	.word	0x08018e9c

08000408 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000408:	b500      	push	{lr}
 800040a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800040c:	2308      	movs	r3, #8
 800040e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000410:	2000      	movs	r0, #0
 8000412:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <_ZN20STM32TouchController4initEv+0x24>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <_ZN20STM32TouchController4initEv+0x28>)
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000420:	4669      	mov	r1, sp
 8000422:	f004 f9b1 	bl	8004788 <BSP_TS_Init>
}
 8000426:	b005      	add	sp, #20
 8000428:	f85d fb04 	ldr.w	pc, [sp], #4
 800042c:	2400ae06 	.word	0x2400ae06
 8000430:	2400ae08 	.word	0x2400ae08

08000434 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	b085      	sub	sp, #20
 8000438:	460d      	mov	r5, r1
 800043a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800043c:	2000      	movs	r0, #0
 800043e:	9001      	str	r0, [sp, #4]
 8000440:	9002      	str	r0, [sp, #8]
 8000442:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000444:	a901      	add	r1, sp, #4
 8000446:	f004 fa0f 	bl	8004868 <BSP_TS_GetState>
 800044a:	b140      	cbz	r0, 800045e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000450:	f383 8811 	msr	BASEPRI, r3
 8000454:	f3bf 8f6f 	isb	sy
 8000458:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800045c:	e7fe      	b.n	800045c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	b913      	cbnz	r3, 8000468 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000462:	2000      	movs	r0, #0
}
 8000464:	b005      	add	sp, #20
 8000466:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800046c:	9b03      	ldr	r3, [sp, #12]
 800046e:	6023      	str	r3, [r4, #0]
        return true;
 8000470:	2001      	movs	r0, #1
 8000472:	e7f7      	b.n	8000464 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

08000474 <_ZN20STM32TouchControllerD0Ev>:
 8000474:	b510      	push	{r4, lr}
 8000476:	4604      	mov	r4, r0
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <_ZN20STM32TouchControllerD0Ev+0x18>)
 800047a:	6003      	str	r3, [r0, #0]
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 800047e:	6003      	str	r3, [r0, #0]
 8000480:	2104      	movs	r1, #4
 8000482:	f017 fb90 	bl	8017ba6 <_ZdlPvj>
 8000486:	4620      	mov	r0, r4
 8000488:	bd10      	pop	{r4, pc}
 800048a:	bf00      	nop
 800048c:	08018eb4 	.word	0x08018eb4
 8000490:	08018e9c 	.word	0x08018e9c

08000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000494:	b508      	push	{r3, lr}
    switch (id)
 8000496:	2803      	cmp	r0, #3
 8000498:	d80e      	bhi.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 800049a:	e8df f000 	tbb	[pc, r0]
 800049e:	0e02      	.short	0x0e02
 80004a0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004a4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	0952      	lsrs	r2, r2, #5
 80004ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b2:	4815      	ldr	r0, [pc, #84]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004b4:	f004 ff38 	bl	8005328 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004b8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004bc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	0952      	lsrs	r2, r2, #5
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004cc:	f004 ff2c 	bl	8005328 <HAL_GPIO_WritePin>
        break;
 80004d0:	e7f2      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 80004e4:	f004 ff20 	bl	8005328 <HAL_GPIO_WritePin>
        break;
 80004e8:	e7e6      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f004 ff14 	bl	8005328 <HAL_GPIO_WritePin>
}
 8000500:	e7da      	b.n	80004b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000502:	bf00      	nop
 8000504:	2400012c 	.word	0x2400012c
 8000508:	58021c00 	.word	0x58021c00
 800050c:	58022000 	.word	0x58022000

08000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000510:	b508      	push	{r3, lr}
    switch (id)
 8000512:	2803      	cmp	r0, #3
 8000514:	d80e      	bhi.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000516:	e8df f000 	tbb	[pc, r0]
 800051a:	0e02      	.short	0x0e02
 800051c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000520:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000524:	b103      	cbz	r3, 8000528 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000526:	2001      	movs	r0, #1
 8000528:	4602      	mov	r2, r0
 800052a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052e:	4816      	ldr	r0, [pc, #88]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000530:	f004 fefa 	bl	8005328 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000534:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000538:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800053c:	b903      	cbnz	r3, 8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800053e:	2000      	movs	r0, #0
 8000540:	4602      	mov	r2, r0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000548:	f004 feee 	bl	8005328 <HAL_GPIO_WritePin>
        break;
 800054c:	e7f2      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b133      	cbz	r3, 8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800055e:	f004 fee3 	bl	8005328 <HAL_GPIO_WritePin>
        break;
 8000562:	e7e7      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000564:	2200      	movs	r2, #0
 8000566:	e7f7      	b.n	8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800056a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056e:	b133      	cbz	r3, 800057e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f004 fed6 	bl	8005328 <HAL_GPIO_WritePin>
}
 800057c:	e7da      	b.n	8000534 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	2200      	movs	r2, #0
 8000580:	e7f7      	b.n	8000572 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 8000582:	bf00      	nop
 8000584:	2400012c 	.word	0x2400012c
 8000588:	58021c00 	.word	0x58021c00
 800058c:	58022000 	.word	0x58022000

08000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8000590:	b508      	push	{r3, lr}
    switch (id)
 8000592:	2803      	cmp	r0, #3
 8000594:	d808      	bhi.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 8000596:	e8df f000 	tbb	[pc, r0]
 800059a:	0802      	.short	0x0802
 800059c:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005a4:	f004 fec6 	bl	8005334 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005a8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005b0:	f004 fec0 	bl	8005334 <HAL_GPIO_TogglePin>
        break;
 80005b4:	e7f8      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005bc:	f004 feba 	bl	8005334 <HAL_GPIO_TogglePin>
        break;
 80005c0:	e7f2      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005c8:	f004 feb4 	bl	8005334 <HAL_GPIO_TogglePin>
}
 80005cc:	e7ec      	b.n	80005a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005ce:	bf00      	nop
 80005d0:	58021c00 	.word	0x58021c00
 80005d4:	58022000 	.word	0x58022000

080005d8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 80005d8:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80005dc:	2301      	movs	r3, #1
 80005de:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80005e2:	4770      	bx	lr

080005e4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80005e4:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 80005e6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80005ea:	b123      	cbz	r3, 80005f6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 80005ec:	6840      	ldr	r0, [r0, #4]
 80005ee:	6803      	ldr	r3, [r0, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 80005f4:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	e7fc      	b.n	80005f4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

080005fa <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80005fa:	2000      	movs	r0, #0
 80005fc:	4770      	bx	lr
	...

08000600 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000600:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000602:	3900      	subs	r1, #0
 8000604:	bf18      	it	ne
 8000606:	2101      	movne	r1, #1
 8000608:	4b01      	ldr	r3, [pc, #4]	; (8000610 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800060a:	7019      	strb	r1, [r3, #0]
    }
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2400ae0b 	.word	0x2400ae0b

08000614 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000614:	2000      	movs	r0, #0
 8000616:	4770      	bx	lr

08000618 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000618:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800061a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800061c:	b10b      	cbz	r3, 8000622 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800061e:	4608      	mov	r0, r1
 8000620:	4798      	blx	r3
        }
    }
 8000622:	bd08      	pop	{r3, pc}

08000624 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000624:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000628:	4770      	bx	lr

0800062a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800062a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800062c:	6840      	ldr	r0, [r0, #4]
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4798      	blx	r3
    }
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000638:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800063c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000640:	429a      	cmp	r2, r3
 8000642:	d00c      	beq.n	800065e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b9ab      	cbnz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800064a:	4a0c      	ldr	r2, [pc, #48]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800064c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000650:	8818      	ldrh	r0, [r3, #0]
 8000652:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000654:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b143      	cbz	r3, 8000676 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000666:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800066a:	8818      	ldrh	r0, [r3, #0]
 800066c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800066e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
        }
    }
 8000676:	4770      	bx	lr
 8000678:	2400ae04 	.word	0x2400ae04
 800067c:	2400ae02 	.word	0x2400ae02
 8000680:	2400ae00 	.word	0x2400ae00

08000684 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <_ZN11TouchGFXHALD1Ev+0x10>)
 8000686:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <_ZN11TouchGFXHALD1Ev+0x14>)
 800068a:	6002      	str	r2, [r0, #0]
    {
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <_ZN11TouchGFXHALD1Ev+0x18>)
 800068e:	6002      	str	r2, [r0, #0]
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	08019044 	.word	0x08019044
 8000698:	08019644 	.word	0x08019644
 800069c:	0801a0c4 	.word	0x0801a0c4

080006a0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006a0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006a2:	f000 fffd 	bl	80016a0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006a6:	bd08      	pop	{r3, pc}

080006a8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006a8:	b508      	push	{r3, lr}
 80006aa:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006ac:	6803      	ldr	r3, [r0, #0]
 80006ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006b2:	4798      	blx	r3
    enableInterrupts();
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006b8:	4620      	mov	r0, r4
 80006ba:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006bc:	f000 f920 	bl	8000900 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006c4:	4620      	mov	r0, r4
 80006c6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006ce:	f004 fe2b 	bl	8005328 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006d2:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4628      	mov	r0, r5
 80006da:	f004 fe25 	bl	8005328 <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 80006de:	20c8      	movs	r0, #200	; 0xc8
 80006e0:	f004 f9c4 	bl	8004a6c <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2102      	movs	r1, #2
 80006e8:	4628      	mov	r0, r5
 80006ea:	f004 fe1d 	bl	8005328 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80006ee:	f000 f907 	bl	8000900 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f6:	4620      	mov	r0, r4
 80006f8:	4798      	blx	r3
    for (;;)
 80006fa:	e7f8      	b.n	80006ee <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 80006fc:	58022800 	.word	0x58022800
 8000700:	58020000 	.word	0x58020000

08000704 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000704:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000706:	f000 ff57 	bl	80015b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800070a:	bd08      	pop	{r3, pc}

0800070c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800070c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800070e:	f000 ff59 	bl	80015c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000712:	bd08      	pop	{r3, pc}

08000714 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000714:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000716:	f000 ffeb 	bl	80016f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000722:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000726:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800072a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800072e:	e000      	b.n	8000732 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000730:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000732:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000736:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800073a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800073e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000742:	4907      	ldr	r1, [pc, #28]	; (8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000744:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000748:	4613      	mov	r3, r2
 800074a:	3a01      	subs	r2, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f2      	bne.n	8000736 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000750:	1e43      	subs	r3, r0, #1
 8000752:	2800      	cmp	r0, #0
 8000754:	d1ec      	bne.n	8000730 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800075a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800075e:	bd10      	pop	{r4, pc}
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000764:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000766:	f000 fee5 	bl	8001534 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800076a:	bd08      	pop	{r3, pc}

0800076c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800076c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800076e:	f000 feeb 	bl	8001548 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000772:	bd08      	pop	{r3, pc}

08000774 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000774:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000776:	f000 fef1 	bl	800155c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800077a:	bd08      	pop	{r3, pc}

0800077c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800077c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800077e:	f000 ff01 	bl	8001584 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000782:	bd08      	pop	{r3, pc}

08000784 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000784:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000786:	b161      	cbz	r1, 80007a2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000788:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800078a:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800078c:	3a00      	subs	r2, #0
 800078e:	bf18      	it	ne
 8000790:	2201      	movne	r2, #1
 8000792:	4907      	ldr	r1, [pc, #28]	; (80007b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 8000794:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800079c:	4619      	mov	r1, r3
 800079e:	4790      	blx	r2
    }
 80007a0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007a6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007ac:	f017 fa2a 	bl	8017c04 <__assert_func>
 80007b0:	2400ae0a 	.word	0x2400ae0a
 80007b4:	08018ec4 	.word	0x08018ec4
 80007b8:	08018efc 	.word	0x08018efc
 80007bc:	08018f4c 	.word	0x08018f4c

080007c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007c0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	428b      	cmp	r3, r1
 80007c8:	d808      	bhi.n	80007dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d804      	bhi.n	80007dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80007d4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80007d8:	801a      	strh	r2, [r3, #0]
    }
 80007da:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80007e0:	219e      	movs	r1, #158	; 0x9e
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80007e4:	f017 fa0e 	bl	8017c04 <__assert_func>
 80007e8:	2400ae00 	.word	0x2400ae00
 80007ec:	2400ae02 	.word	0x2400ae02
 80007f0:	2400ae06 	.word	0x2400ae06
 80007f4:	2400ae08 	.word	0x2400ae08
 80007f8:	08018f94 	.word	0x08018f94
 80007fc:	08018ff8 	.word	0x08018ff8
 8000800:	08018f4c 	.word	0x08018f4c

08000804 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000804:	b510      	push	{r4, lr}
 8000806:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000808:	f00b f9fa 	bl	800bc00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000812:	4620      	mov	r0, r4
 8000814:	4798      	blx	r3
    }
 8000816:	bd10      	pop	{r4, pc}

08000818 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000818:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800081a:	f00a fc3d 	bl	800b098 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800081e:	bd08      	pop	{r3, pc}

08000820 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000820:	b510      	push	{r4, lr}
 8000822:	4604      	mov	r4, r0
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000826:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_ZN11TouchGFXHALD0Ev+0x20>)
 800082a:	6003      	str	r3, [r0, #0]
    {
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <_ZN11TouchGFXHALD0Ev+0x24>)
 800082e:	6003      	str	r3, [r0, #0]
 8000830:	217c      	movs	r1, #124	; 0x7c
 8000832:	f017 f9b8 	bl	8017ba6 <_ZdlPvj>
 8000836:	4620      	mov	r0, r4
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	08019044 	.word	0x08019044
 8000840:	08019644 	.word	0x08019644
 8000844:	0801a0c4 	.word	0x0801a0c4

08000848 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000848:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800084a:	2200      	movs	r2, #0
 800084c:	2101      	movs	r1, #1
 800084e:	4608      	mov	r0, r1
 8000850:	f007 ff14 	bl	800867c <osSemaphoreNew>
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000856:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000858:	b140      	cbz	r0, 800086c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800085a:	2200      	movs	r2, #0
 800085c:	2104      	movs	r1, #4
 800085e:	2001      	movs	r0, #1
 8000860:	f007 ffcb 	bl	80087fa <osMessageQueueNew>
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000866:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000868:	b130      	cbz	r0, 8000878 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800086a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000870:	2128      	movs	r1, #40	; 0x28
 8000872:	4808      	ldr	r0, [pc, #32]	; (8000894 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000874:	f017 f9c6 	bl	8017c04 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800087c:	212c      	movs	r1, #44	; 0x2c
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000880:	f017 f9c0 	bl	8017c04 <__assert_func>
 8000884:	24000140 	.word	0x24000140
 8000888:	2400013c 	.word	0x2400013c
 800088c:	08019114 	.word	0x08019114
 8000890:	08019160 	.word	0x08019160
 8000894:	08019190 	.word	0x08019190
 8000898:	080191f0 	.word	0x080191f0

0800089c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800089c:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800089e:	f04f 31ff 	mov.w	r1, #4294967295
 80008a2:	4b02      	ldr	r3, [pc, #8]	; (80008ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f007 ff45 	bl	8008734 <osSemaphoreAcquire>
}
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	24000140 	.word	0x24000140

080008b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008b0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008b2:	4b02      	ldr	r3, [pc, #8]	; (80008bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f007 ff71 	bl	800879c <osSemaphoreRelease>
}
 80008ba:	bd08      	pop	{r3, pc}
 80008bc:	24000140 	.word	0x24000140

080008c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008c0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	f007 ff34 	bl	8008734 <osSemaphoreAcquire>
}
 80008cc:	bd08      	pop	{r3, pc}
 80008ce:	bf00      	nop
 80008d0:	24000140 	.word	0x24000140

080008d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80008d4:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008d6:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f007 ff5f 	bl	800879c <osSemaphoreRelease>
}
 80008de:	bd08      	pop	{r3, pc}
 80008e0:	24000140 	.word	0x24000140

080008e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80008e4:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80008e6:	2300      	movs	r3, #0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4903      	ldr	r1, [pc, #12]	; (80008f8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	f007 ffcf 	bl	8008892 <osMessageQueuePut>
}
 80008f4:	bd08      	pop	{r3, pc}
 80008f6:	bf00      	nop
 80008f8:	24000004 	.word	0x24000004
 80008fc:	2400013c 	.word	0x2400013c

08000900 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000900:	b510      	push	{r4, lr}
 8000902:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000904:	4c07      	ldr	r4, [pc, #28]	; (8000924 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000906:	2300      	movs	r3, #0
 8000908:	461a      	mov	r2, r3
 800090a:	a901      	add	r1, sp, #4
 800090c:	6820      	ldr	r0, [r4, #0]
 800090e:	f008 f800 	bl	8008912 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	2200      	movs	r2, #0
 8000918:	a901      	add	r1, sp, #4
 800091a:	6820      	ldr	r0, [r4, #0]
 800091c:	f007 fff9 	bl	8008912 <osMessageQueueGet>
}
 8000920:	b002      	add	sp, #8
 8000922:	bd10      	pop	{r4, pc}
 8000924:	2400013c 	.word	0x2400013c

08000928 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000928:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800092a:	6803      	ldr	r3, [r0, #0]
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4798      	blx	r3
    }
 8000930:	bd08      	pop	{r3, pc}

08000932 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000932:	2001      	movs	r0, #1
 8000934:	4770      	bx	lr

08000936 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000936:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000938:	6803      	ldr	r3, [r0, #0]
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	4798      	blx	r3
    }
 800093e:	bd08      	pop	{r3, pc}

08000940 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000940:	b508      	push	{r3, lr}
        return instance;
 8000942:	4b03      	ldr	r3, [pc, #12]	; (8000950 <DMA2D_XferCpltCallback+0x10>)
 8000944:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000946:	6858      	ldr	r0, [r3, #4]
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800094e:	bd08      	pop	{r3, pc}
 8000950:	2400ae0c 	.word	0x2400ae0c

08000954 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <_ZN8STM32DMAD1Ev+0x24>)
 8000956:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000958:	4a08      	ldr	r2, [pc, #32]	; (800097c <_ZN8STM32DMAD1Ev+0x28>)
 800095a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800095e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000966:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_ZN8STM32DMAD1Ev+0x2c>)
 800096c:	60c2      	str	r2, [r0, #12]
    {
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_ZN8STM32DMAD1Ev+0x30>)
 8000970:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <_ZN8STM32DMAD1Ev+0x34>)
 8000974:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8000976:	4770      	bx	lr
 8000978:	080193d0 	.word	0x080193d0
 800097c:	e000e100 	.word	0xe000e100
 8000980:	0801a1ec 	.word	0x0801a1ec
 8000984:	080193ac 	.word	0x080193ac
 8000988:	0801a19c 	.word	0x0801a19c

0800098c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800098c:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <_ZN8STM32DMA10initializeEv+0x40>)
 8000990:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8000994:	f042 0210 	orr.w	r2, r2, #16
 8000998:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800099c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009a0:	f002 0210 	and.w	r2, r2, #16
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009a8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009aa:	f042 0210 	orr.w	r2, r2, #16
 80009ae:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009b2:	f022 0210 	bic.w	r2, r2, #16
 80009b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <_ZN8STM32DMA10initializeEv+0x48>)
 80009bc:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009c6:	b002      	add	sp, #8
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400
 80009d0:	2400123c 	.word	0x2400123c
 80009d4:	08000941 	.word	0x08000941
 80009d8:	e000e100 	.word	0xe000e100

080009dc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80009dc:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80009e0:	4770      	bx	lr

080009e2 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80009e2:	b510      	push	{r4, lr}
 80009e4:	4604      	mov	r4, r0
}
 80009e6:	f7ff ffb5 	bl	8000954 <_ZN8STM32DMAD1Ev>
 80009ea:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80009ee:	4620      	mov	r0, r4
 80009f0:	f017 f8d9 	bl	8017ba6 <_ZdlPvj>
 80009f4:	4620      	mov	r0, r4
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80009f8:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80009fa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 80009fc:	2b0a      	cmp	r3, #10
 80009fe:	d809      	bhi.n	8000a14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a00:	e8df f003 	tbb	[pc, r3]
 8000a04:	080e1006 	.word	0x080e1006
 8000a08:	10080808 	.word	0x10080808
 8000a0c:	1010      	.short	0x1010
 8000a0e:	10          	.byte	0x10
 8000a0f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a10:	2002      	movs	r0, #2
        break;
 8000a12:	e008      	b.n	8000a26 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a18:	2187      	movs	r1, #135	; 0x87
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a1c:	f017 f8f2 	bl	8017c04 <__assert_func>
    switch (format)
 8000a20:	2000      	movs	r0, #0
 8000a22:	e000      	b.n	8000a26 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a24:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a28:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a2a:	8aca      	ldrh	r2, [r1, #22]
 8000a2c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a30:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a36:	690a      	ldr	r2, [r1, #16]
 8000a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a3a:	8b4a      	ldrh	r2, [r1, #26]
 8000a3c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a40:	eba2 020c 	sub.w	r2, r2, ip
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a46:	680b      	ldr	r3, [r1, #0]
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d008      	beq.n	8000a5e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a4e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a54:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a56:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a5a:	601a      	str	r2, [r3, #0]
    }
}
 8000a5c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a5e:	8b4a      	ldrh	r2, [r1, #26]
 8000a60:	8a8b      	ldrh	r3, [r1, #20]
 8000a62:	1ad2      	subs	r2, r2, r3
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a66:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a68:	8b4a      	ldrh	r2, [r1, #26]
 8000a6a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a6e:	eba2 020c 	sub.w	r2, r2, ip
 8000a72:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000a74:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000a76:	7f08      	ldrb	r0, [r1, #28]
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000a7a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000a7e:	61da      	str	r2, [r3, #28]
 8000a80:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000a82:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a84:	690a      	ldr	r2, [r1, #16]
 8000a86:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a88:	690a      	ldr	r2, [r1, #16]
 8000a8a:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e7e4      	b.n	8000a5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000a92:	bf00      	nop
 8000a94:	08019234 	.word	0x08019234
 8000a98:	08019250 	.word	0x08019250
 8000a9c:	0801929c 	.word	0x0801929c
 8000aa0:	52001000 	.word	0x52001000
 8000aa4:	00030201 	.word	0x00030201
 8000aa8:	00010009 	.word	0x00010009
 8000aac:	00020201 	.word	0x00020201

08000ab0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ab0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ab2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ab4:	2b0b      	cmp	r3, #11
 8000ab6:	d815      	bhi.n	8000ae4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ab8:	e8df f003 	tbb	[pc, r3]
 8000abc:	141a1c06 	.word	0x141a1c06
 8000ac0:	12141414 	.word	0x12141414
 8000ac4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ac8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000aca:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000acc:	2b0b      	cmp	r3, #11
 8000ace:	d820      	bhi.n	8000b12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000ad0:	e8df f003 	tbb	[pc, r3]
 8000ad4:	1f252712 	.word	0x1f252712
 8000ad8:	1d1f1f1f 	.word	0x1d1f1f1f
 8000adc:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000ae0:	2005      	movs	r0, #5
        break;
 8000ae2:	e7f2      	b.n	8000aca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000ae4:	4b75      	ldr	r3, [pc, #468]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000ae6:	4a76      	ldr	r2, [pc, #472]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000ae8:	2166      	movs	r1, #102	; 0x66
 8000aea:	4876      	ldr	r0, [pc, #472]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000aec:	f017 f88a 	bl	8017c04 <__assert_func>
    switch (format)
 8000af0:	2000      	movs	r0, #0
 8000af2:	e7ea      	b.n	8000aca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000af4:	2001      	movs	r0, #1
 8000af6:	e7e8      	b.n	8000aca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2402      	movs	r4, #2
    switch (format)
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d815      	bhi.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000afe:	e8df f003 	tbb	[pc, r3]
 8000b02:	1c12      	.short	0x1c12
 8000b04:	1414141a 	.word	0x1414141a
 8000b08:	1c1c1c14 	.word	0x1c1c1c14
 8000b0c:	1c          	.byte	0x1c
 8000b0d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b0e:	2405      	movs	r4, #5
        break;
 8000b10:	e7f3      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b14:	4a6a      	ldr	r2, [pc, #424]	; (8000cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b16:	2166      	movs	r1, #102	; 0x66
 8000b18:	486a      	ldr	r0, [pc, #424]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1a:	f017 f873 	bl	8017c04 <__assert_func>
    switch (format)
 8000b1e:	2400      	movs	r4, #0
 8000b20:	e7eb      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b22:	2401      	movs	r4, #1
 8000b24:	e7e9      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b26:	2502      	movs	r5, #2
        break;
 8000b28:	e008      	b.n	8000b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b2a:	4b64      	ldr	r3, [pc, #400]	; (8000cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b2c:	4a66      	ldr	r2, [pc, #408]	; (8000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b2e:	2187      	movs	r1, #135	; 0x87
 8000b30:	4864      	ldr	r0, [pc, #400]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b32:	f017 f867 	bl	8017c04 <__assert_func>
    switch (format)
 8000b36:	2500      	movs	r5, #0
 8000b38:	e000      	b.n	8000b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b3a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b3c:	8b4a      	ldrh	r2, [r1, #26]
 8000b3e:	8a8b      	ldrh	r3, [r1, #20]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b46:	8b4a      	ldrh	r2, [r1, #26]
 8000b48:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b4c:	eba2 020c 	sub.w	r2, r2, ip
 8000b50:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b52:	8b0a      	ldrh	r2, [r1, #24]
 8000b54:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b58:	eba2 020c 	sub.w	r2, r2, ip
 8000b5c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b5e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b60:	8aca      	ldrh	r2, [r1, #22]
 8000b62:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b66:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b6c:	690a      	ldr	r2, [r1, #16]
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000b70:	684a      	ldr	r2, [r1, #4]
 8000b72:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000b74:	680b      	ldr	r3, [r1, #0]
 8000b76:	2b80      	cmp	r3, #128	; 0x80
 8000b78:	d036      	beq.n	8000be8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000b7a:	d813      	bhi.n	8000ba4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000b7c:	2b20      	cmp	r3, #32
 8000b7e:	d07c      	beq.n	8000c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b80:	2b40      	cmp	r3, #64	; 0x40
 8000b82:	d07a      	beq.n	8000c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	f040 8085 	bne.w	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000b8a:	7f0b      	ldrb	r3, [r1, #28]
 8000b8c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b90:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b96:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000b98:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9a:	690a      	ldr	r2, [r1, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000b9e:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000ba0:	601a      	str	r2, [r3, #0]
        break;
 8000ba2:	e020      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba8:	d010      	beq.n	8000bcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bae:	d171      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bb0:	7f0b      	ldrb	r3, [r1, #28]
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000bb4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bb8:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bba:	61da      	str	r2, [r3, #28]
 8000bbc:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bbe:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bc2:	690a      	ldr	r2, [r1, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bc6:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bc8:	601a      	str	r2, [r3, #0]
        break;
 8000bca:	e00c      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bcc:	7f0b      	ldrb	r3, [r1, #28]
 8000bce:	4a42      	ldr	r2, [pc, #264]	; (8000cd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000bd0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bd6:	61da      	str	r2, [r3, #28]
 8000bd8:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bda:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bdc:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bde:	690a      	ldr	r2, [r1, #16]
 8000be0:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000be2:	4a3b      	ldr	r2, [pc, #236]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000be8:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bea:	7f0b      	ldrb	r3, [r1, #28]
 8000bec:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bf0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bf6:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf8:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bfa:	6908      	ldr	r0, [r1, #16]
 8000bfc:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000bfe:	1d10      	adds	r0, r2, #4
 8000c00:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c02:	7813      	ldrb	r3, [r2, #0]
 8000c04:	b18b      	cbz	r3, 8000c2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d12c      	bne.n	8000c64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c0a:	7f0b      	ldrb	r3, [r1, #28]
 8000c0c:	2bff      	cmp	r3, #255	; 0xff
 8000c0e:	d027      	beq.n	8000c60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c10:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c12:	482e      	ldr	r0, [pc, #184]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c14:	69c4      	ldr	r4, [r0, #28]
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c18:	4023      	ands	r3, r4
 8000c1a:	8852      	ldrh	r2, [r2, #2]
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	61c3      	str	r3, [r0, #28]
                break;
 8000c28:	e009      	b.n	8000c3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c2a:	4928      	ldr	r1, [pc, #160]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c2c:	69c8      	ldr	r0, [r1, #28]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c30:	4003      	ands	r3, r0
 8000c32:	8852      	ldrh	r2, [r2, #2]
 8000c34:	3a01      	subs	r2, #1
 8000c36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c3a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c3c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c40:	69d3      	ldr	r3, [r2, #28]
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	f013 0f20 	tst.w	r3, #32
 8000c50:	d1fa      	bne.n	8000c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c54:	2210      	movs	r2, #16
 8000c56:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c58:	b159      	cbz	r1, 8000c72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e7c2      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c60:	2100      	movs	r1, #0
 8000c62:	e7d6      	b.n	8000c12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c68:	f240 1101 	movw	r1, #257	; 0x101
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c6e:	f016 ffc9 	bl	8017c04 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c74:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e7b5      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c7a:	7f0b      	ldrb	r3, [r1, #28]
 8000c7c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c80:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c86:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c88:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c8a:	690a      	ldr	r2, [r1, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c90:	601a      	str	r2, [r3, #0]
        break;
 8000c92:	e7a8      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c94:	7f0b      	ldrb	r3, [r1, #28]
 8000c96:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c9a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000ca2:	7f4a      	ldrb	r2, [r1, #29]
 8000ca4:	7f8b      	ldrb	r3, [r1, #30]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d003      	beq.n	8000cb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e799      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb4:	f240 2201 	movw	r2, #513	; 0x201
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	e794      	b.n	8000be6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cbc:	08019234 	.word	0x08019234
 8000cc0:	080192fc 	.word	0x080192fc
 8000cc4:	0801929c 	.word	0x0801929c
 8000cc8:	08019250 	.word	0x08019250
 8000ccc:	52001000 	.word	0x52001000
 8000cd0:	00020201 	.word	0x00020201
 8000cd4:	00020009 	.word	0x00020009
 8000cd8:	0002000a 	.word	0x0002000a
 8000cdc:	ffff00ef 	.word	0xffff00ef
 8000ce0:	08019348 	.word	0x08019348
 8000ce4:	08019364 	.word	0x08019364
 8000ce8:	00010201 	.word	0x00010201

08000cec <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <_ZN8STM32DMAC1Ev+0x38>)
 8000cf2:	f840 3b0c 	str.w	r3, [r0], #12
 8000cf6:	6068      	str	r0, [r5, #4]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	722b      	strb	r3, [r5, #8]
 8000cfc:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000cfe:	462c      	mov	r4, r5
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d02:	f844 3b20 	str.w	r3, [r4], #32
 8000d06:	2260      	movs	r2, #96	; 0x60
 8000d08:	4621      	mov	r1, r4
 8000d0a:	f00b f8bb 	bl	800be84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d0e:	235f      	movs	r3, #95	; 0x5f
 8000d10:	e003      	b.n	8000d1a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60e2      	str	r2, [r4, #12]
 8000d16:	3424      	adds	r4, #36	; 0x24
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	daf9      	bge.n	8000d12 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d1e:	4628      	mov	r0, r5
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
 8000d22:	bf00      	nop
 8000d24:	0801a19c 	.word	0x0801a19c
 8000d28:	080193d0 	.word	0x080193d0

08000d2c <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d2e:	6003      	str	r3, [r0, #0]
    }
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	08019434 	.word	0x08019434

08000d38 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d38:	4770      	bx	lr

08000d3a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d3c:	4770      	bx	lr

08000d3e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d3e:	4770      	bx	lr

08000d40 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d40:	4770      	bx	lr

08000d42 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d42:	4770      	bx	lr

08000d44 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d44:	4b01      	ldr	r3, [pc, #4]	; (8000d4c <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d46:	6003      	str	r3, [r0, #0]
    }
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	08019444 	.word	0x08019444

08000d50 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d50:	4770      	bx	lr

08000d52 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d52:	4770      	bx	lr

08000d54 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d54:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d58:	6808      	ldr	r0, [r1, #0]
 8000d5a:	6849      	ldr	r1, [r1, #4]
 8000d5c:	c303      	stmia	r3!, {r0, r1}
    }
 8000d5e:	4770      	bx	lr

08000d60 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d60:	b510      	push	{r4, lr}
 8000d62:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d64:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d68:	b158      	cbz	r0, 8000d82 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d6a:	6803      	ldr	r3, [r0, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	4798      	blx	r3
 8000d70:	b138      	cbz	r0, 8000d82 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000d72:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000d76:	6803      	ldr	r3, [r0, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000d82:	bd10      	pop	{r4, pc}

08000d84 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000d86:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000d8a:	6002      	str	r2, [r0, #0]
    {
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000d8e:	6002      	str	r2, [r0, #0]
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	08019484 	.word	0x08019484
 8000d98:	0801a33c 	.word	0x0801a33c
 8000d9c:	08019444 	.word	0x08019444

08000da0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000da2:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000da6:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000dac:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000db2:	6002      	str	r2, [r0, #0]
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000db6:	6002      	str	r2, [r0, #0]
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000dba:	6002      	str	r2, [r0, #0]
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	080194e8 	.word	0x080194e8
 8000dc4:	080194d0 	.word	0x080194d0
 8000dc8:	0801946c 	.word	0x0801946c
 8000dcc:	08019484 	.word	0x08019484
 8000dd0:	0801a33c 	.word	0x0801a33c
 8000dd4:	08019444 	.word	0x08019444

08000dd8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <_ZN19FrontendApplicationD1Ev+0x24>)
 8000dda:	6002      	str	r2, [r0, #0]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <_ZN19FrontendApplicationD1Ev+0x28>)
 8000dde:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <_ZN19FrontendApplicationD1Ev+0x34>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <_ZN19FrontendApplicationD1Ev+0x38>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	08019534 	.word	0x08019534
 8000e00:	080194e8 	.word	0x080194e8
 8000e04:	080194d0 	.word	0x080194d0
 8000e08:	0801946c 	.word	0x0801946c
 8000e0c:	08019484 	.word	0x08019484
 8000e10:	0801a33c 	.word	0x0801a33c
 8000e14:	08019444 	.word	0x08019444

08000e18 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e18:	4a02      	ldr	r2, [pc, #8]	; (8000e24 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e1a:	6002      	str	r2, [r0, #0]
    {
 8000e1c:	4a02      	ldr	r2, [pc, #8]	; (8000e28 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e1e:	6002      	str	r2, [r0, #0]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	08019580 	.word	0x08019580
 8000e28:	08019434 	.word	0x08019434

08000e2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e2c:	4a02      	ldr	r2, [pc, #8]	; (8000e38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e2e:	6002      	str	r2, [r0, #0]
    {
 8000e30:	4a02      	ldr	r2, [pc, #8]	; (8000e3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e32:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	080194d0 	.word	0x080194d0
 8000e3c:	0801946c 	.word	0x0801946c

08000e40 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e40:	2001      	movs	r0, #1
 8000e42:	4770      	bx	lr

08000e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e44:	200c      	movs	r0, #12
 8000e46:	4770      	bx	lr

08000e48 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e4c:	0089      	lsls	r1, r1, #2
 8000e4e:	3108      	adds	r1, #8
    }
 8000e50:	4408      	add	r0, r1
 8000e52:	4770      	bx	lr

08000e54 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e58:	0089      	lsls	r1, r1, #2
 8000e5a:	3108      	adds	r1, #8
    }
 8000e5c:	4408      	add	r0, r1
 8000e5e:	4770      	bx	lr

08000e60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e60:	2001      	movs	r0, #1
 8000e62:	4770      	bx	lr

08000e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e64:	2098      	movs	r0, #152	; 0x98
 8000e66:	4770      	bx	lr

08000e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e68:	2398      	movs	r3, #152	; 0x98
 8000e6a:	fb03 f101 	mul.w	r1, r3, r1
 8000e6e:	3108      	adds	r1, #8
    }
 8000e70:	4408      	add	r0, r1
 8000e72:	4770      	bx	lr

08000e74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e74:	2398      	movs	r3, #152	; 0x98
 8000e76:	fb03 f101 	mul.w	r1, r3, r1
 8000e7a:	3108      	adds	r1, #8
    }
 8000e7c:	4408      	add	r0, r1
 8000e7e:	4770      	bx	lr

08000e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e80:	2001      	movs	r0, #1
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e84:	2010      	movs	r0, #16
 8000e86:	4770      	bx	lr

08000e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e88:	0109      	lsls	r1, r1, #4
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e90:	0109      	lsls	r1, r1, #4
 8000e92:	3108      	adds	r1, #8
    }
 8000e94:	4408      	add	r0, r1
 8000e96:	4770      	bx	lr

08000e98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000e98:	b508      	push	{r3, lr}
 8000e9a:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000e9c:	6841      	ldr	r1, [r0, #4]
 8000e9e:	68c2      	ldr	r2, [r0, #12]
 8000ea0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ea4:	f012 0f01 	tst.w	r2, #1
 8000ea8:	d102      	bne.n	8000eb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4798      	blx	r3
    }
 8000eae:	bd08      	pop	{r3, pc}
 8000eb0:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000eb4:	f851 200c 	ldr.w	r2, [r1, ip]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	58d3      	ldr	r3, [r2, r3]
 8000ebc:	e7f6      	b.n	8000eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000ebe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000ebe:	6843      	ldr	r3, [r0, #4]
 8000ec0:	b14b      	cbz	r3, 8000ed6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ec2:	6883      	ldr	r3, [r0, #8]
 8000ec4:	b10b      	cbz	r3, 8000eca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	4770      	bx	lr
 8000eca:	68c3      	ldr	r3, [r0, #12]
 8000ecc:	f013 0f01 	tst.w	r3, #1
 8000ed0:	d003      	beq.n	8000eda <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4770      	bx	lr
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	4770      	bx	lr
 8000eda:	2000      	movs	r0, #0
    }
 8000edc:	4770      	bx	lr
	...

08000ee0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	4604      	mov	r4, r0
    {
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000ee6:	6003      	str	r3, [r0, #0]
    }
 8000ee8:	2104      	movs	r1, #4
 8000eea:	f016 fe5c 	bl	8017ba6 <_ZdlPvj>
 8000eee:	4620      	mov	r0, r4
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08019444 	.word	0x08019444

08000ef8 <_ZN16FrontendHeapBaseD0Ev>:
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4604      	mov	r4, r0
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000efe:	6003      	str	r3, [r0, #0]
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f02:	6003      	str	r3, [r0, #0]
 8000f04:	2114      	movs	r1, #20
 8000f06:	f016 fe4e 	bl	8017ba6 <_ZdlPvj>
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	bf00      	nop
 8000f10:	08019580 	.word	0x08019580
 8000f14:	08019434 	.word	0x08019434

08000f18 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0
    {
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f1e:	6003      	str	r3, [r0, #0]
    }
 8000f20:	2114      	movs	r1, #20
 8000f22:	f016 fe40 	bl	8017ba6 <_ZdlPvj>
 8000f26:	4620      	mov	r0, r4
 8000f28:	bd10      	pop	{r4, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08019434 	.word	0x08019434

08000f30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f36:	6003      	str	r3, [r0, #0]
    {
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f3a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	f016 fe32 	bl	8017ba6 <_ZdlPvj>
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd10      	pop	{r4, pc}
 8000f46:	bf00      	nop
 8000f48:	080194d0 	.word	0x080194d0
 8000f4c:	0801946c 	.word	0x0801946c

08000f50 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4604      	mov	r4, r0
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f56:	6003      	str	r3, [r0, #0]
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f5a:	6003      	str	r3, [r0, #0]
    {
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f5e:	6003      	str	r3, [r0, #0]
 8000f60:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f64:	f016 fe1f 	bl	8017ba6 <_ZdlPvj>
 8000f68:	4620      	mov	r0, r4
 8000f6a:	bd10      	pop	{r4, pc}
 8000f6c:	08019484 	.word	0x08019484
 8000f70:	0801a33c 	.word	0x0801a33c
 8000f74:	08019444 	.word	0x08019444

08000f78 <_ZN23FrontendApplicationBaseD0Ev>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000f7e:	6003      	str	r3, [r0, #0]
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000f82:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000f88:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000f8e:	6003      	str	r3, [r0, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000f92:	6003      	str	r3, [r0, #0]
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000f96:	6003      	str	r3, [r0, #0]
 8000f98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000f9c:	f016 fe03 	bl	8017ba6 <_ZdlPvj>
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	bd10      	pop	{r4, pc}
 8000fa4:	080194e8 	.word	0x080194e8
 8000fa8:	080194d0 	.word	0x080194d0
 8000fac:	0801946c 	.word	0x0801946c
 8000fb0:	08019484 	.word	0x08019484
 8000fb4:	0801a33c 	.word	0x0801a33c
 8000fb8:	08019444 	.word	0x08019444

08000fbc <_ZN19FrontendApplicationD0Ev>:
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <_ZN19FrontendApplicationD0Ev+0x30>)
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <_ZN19FrontendApplicationD0Ev+0x34>)
 8000fc6:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000fca:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8000fd0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN19FrontendApplicationD0Ev+0x40>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN19FrontendApplicationD0Ev+0x44>)
 8000fda:	6003      	str	r3, [r0, #0]
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN19FrontendApplicationD0Ev+0x48>)
 8000fde:	6003      	str	r3, [r0, #0]
 8000fe0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fe4:	f016 fddf 	bl	8017ba6 <_ZdlPvj>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	08019534 	.word	0x08019534
 8000ff0:	080194e8 	.word	0x080194e8
 8000ff4:	080194d0 	.word	0x080194d0
 8000ff8:	0801946c 	.word	0x0801946c
 8000ffc:	08019484 	.word	0x08019484
 8001000:	0801a33c 	.word	0x0801a33c
 8001004:	08019444 	.word	0x08019444

08001008 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001008:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 800100a:	4608      	mov	r0, r1
 800100c:	f001 fa3a 	bl	8002484 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001010:	bd08      	pop	{r3, pc}

08001012 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8001012:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001014:	f001 fa36 	bl	8002484 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001018:	bd08      	pop	{r3, pc}

0800101a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800101a:	b510      	push	{r4, lr}
 800101c:	4604      	mov	r4, r0
    {
        model.tick();
 800101e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8001022:	f001 febc 	bl	8002d9e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001026:	4620      	mov	r0, r4
 8001028:	f00b ff46 	bl	800ceb8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800102c:	bd10      	pop	{r4, pc}
	...

08001030 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001030:	b510      	push	{r4, lr}
 8001032:	4604      	mov	r4, r0
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f009 fd78 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800103c:	4620      	mov	r0, r4
 800103e:	bd10      	pop	{r4, pc}
 8001040:	080195fc 	.word	0x080195fc

08001044 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001044:	b510      	push	{r4, lr}
 8001046:	4604      	mov	r4, r0
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800104a:	6003      	str	r3, [r0, #0]
 800104c:	f009 fd6e 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001050:	2114      	movs	r1, #20
 8001052:	4620      	mov	r0, r4
 8001054:	f016 fda7 	bl	8017ba6 <_ZdlPvj>
 8001058:	4620      	mov	r0, r4
 800105a:	bd10      	pop	{r4, pc}
 800105c:	080195fc 	.word	0x080195fc

08001060 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001066:	6003      	str	r3, [r0, #0]
 8001068:	f009 fd60 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800106c:	4620      	mov	r0, r4
 800106e:	bd10      	pop	{r4, pc}
 8001070:	080195c8 	.word	0x080195c8

08001074 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001074:	b510      	push	{r4, lr}
 8001076:	4604      	mov	r4, r0
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800107a:	6003      	str	r3, [r0, #0]
 800107c:	f009 fd56 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001080:	21a0      	movs	r1, #160	; 0xa0
 8001082:	4620      	mov	r0, r4
 8001084:	f016 fd8f 	bl	8017ba6 <_ZdlPvj>
 8001088:	4620      	mov	r0, r4
 800108a:	bd10      	pop	{r4, pc}
 800108c:	080195c8 	.word	0x080195c8

08001090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001090:	b510      	push	{r4, lr}
 8001092:	4604      	mov	r4, r0
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001096:	6003      	str	r3, [r0, #0]
 8001098:	f009 fd48 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800109c:	4620      	mov	r0, r4
 800109e:	bd10      	pop	{r4, pc}
 80010a0:	08019594 	.word	0x08019594

080010a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010aa:	6003      	str	r3, [r0, #0]
 80010ac:	f009 fd3e 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010b0:	2118      	movs	r1, #24
 80010b2:	4620      	mov	r0, r4
 80010b4:	f016 fd77 	bl	8017ba6 <_ZdlPvj>
 80010b8:	4620      	mov	r0, r4
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	08019594 	.word	0x08019594

080010c0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4604      	mov	r4, r0
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <_ZN12FrontendHeapD1Ev+0x60>)
 80010c6:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <_ZN12FrontendHeapD1Ev+0x64>)
 80010ca:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <_ZN12FrontendHeapD1Ev+0x68>)
 80010d0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <_ZN12FrontendHeapD1Ev+0x6c>)
 80010d6:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_ZN12FrontendHeapD1Ev+0x70>)
 80010dc:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <_ZN12FrontendHeapD1Ev+0x74>)
 80010e2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <_ZN12FrontendHeapD1Ev+0x78>)
 80010e8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZN12FrontendHeapD1Ev+0x7c>)
 80010ee:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_ZN12FrontendHeapD1Ev+0x80>)
 80010f4:	f840 3fcc 	str.w	r3, [r0, #204]!
 80010f8:	f009 fd18 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010fc:	4620      	mov	r0, r4
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_ZN12FrontendHeapD1Ev+0x84>)
 8001100:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001104:	f009 fd12 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001108:	4620      	mov	r0, r4
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <_ZN12FrontendHeapD1Ev+0x88>)
 800110c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001110:	f009 fd0c 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <_ZN12FrontendHeapD1Ev+0x8c>)
 8001116:	6023      	str	r3, [r4, #0]
    {
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <_ZN12FrontendHeapD1Ev+0x90>)
 800111a:	6023      	str	r3, [r4, #0]
 800111c:	4620      	mov	r0, r4
 800111e:	bd10      	pop	{r4, pc}
 8001120:	08019630 	.word	0x08019630
 8001124:	08019534 	.word	0x08019534
 8001128:	080194e8 	.word	0x080194e8
 800112c:	080194d0 	.word	0x080194d0
 8001130:	0801946c 	.word	0x0801946c
 8001134:	08019484 	.word	0x08019484
 8001138:	0801a33c 	.word	0x0801a33c
 800113c:	08019444 	.word	0x08019444
 8001140:	080195fc 	.word	0x080195fc
 8001144:	080195c8 	.word	0x080195c8
 8001148:	08019594 	.word	0x08019594
 800114c:	08019580 	.word	0x08019580
 8001150:	08019434 	.word	0x08019434

08001154 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001154:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001156:	4c17      	ldr	r4, [pc, #92]	; (80011b4 <__tcf_0+0x60>)
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <__tcf_0+0x64>)
 800115a:	6023      	str	r3, [r4, #0]
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <__tcf_0+0x68>)
 800115e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <__tcf_0+0x6c>)
 8001164:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <__tcf_0+0x70>)
 800116a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <__tcf_0+0x74>)
 8001170:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <__tcf_0+0x78>)
 8001176:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <__tcf_0+0x7c>)
 800117c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <__tcf_0+0x80>)
 8001182:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001186:	4620      	mov	r0, r4
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <__tcf_0+0x84>)
 800118a:	f840 3fcc 	str.w	r3, [r0, #204]!
 800118e:	f009 fccd 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001192:	4620      	mov	r0, r4
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <__tcf_0+0x88>)
 8001196:	f840 3f2c 	str.w	r3, [r0, #44]!
 800119a:	f009 fcc7 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800119e:	4620      	mov	r0, r4
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <__tcf_0+0x8c>)
 80011a2:	f840 3f14 	str.w	r3, [r0, #20]!
 80011a6:	f009 fcc1 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <__tcf_0+0x90>)
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <__tcf_0+0x94>)
 80011b0:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011b2:	bd10      	pop	{r4, pc}
 80011b4:	24000148 	.word	0x24000148
 80011b8:	08019630 	.word	0x08019630
 80011bc:	08019534 	.word	0x08019534
 80011c0:	080194e8 	.word	0x080194e8
 80011c4:	080194d0 	.word	0x080194d0
 80011c8:	0801946c 	.word	0x0801946c
 80011cc:	08019484 	.word	0x08019484
 80011d0:	0801a33c 	.word	0x0801a33c
 80011d4:	08019444 	.word	0x08019444
 80011d8:	080195fc 	.word	0x080195fc
 80011dc:	080195c8 	.word	0x080195c8
 80011e0:	08019594 	.word	0x08019594
 80011e4:	08019580 	.word	0x08019580
 80011e8:	08019434 	.word	0x08019434

080011ec <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80011ec:	b510      	push	{r4, lr}
 80011ee:	4604      	mov	r4, r0
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <_ZN12FrontendHeapD0Ev+0x6c>)
 80011f2:	6003      	str	r3, [r0, #0]
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <_ZN12FrontendHeapD0Ev+0x70>)
 80011f6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <_ZN12FrontendHeapD0Ev+0x74>)
 80011fc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <_ZN12FrontendHeapD0Ev+0x78>)
 8001202:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001208:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <_ZN12FrontendHeapD0Ev+0x80>)
 800120e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <_ZN12FrontendHeapD0Ev+0x84>)
 8001214:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <_ZN12FrontendHeapD0Ev+0x88>)
 800121a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <_ZN12FrontendHeapD0Ev+0x8c>)
 8001220:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001224:	f009 fc82 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001228:	4620      	mov	r0, r4
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <_ZN12FrontendHeapD0Ev+0x90>)
 800122c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001230:	f009 fc7c 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001234:	4620      	mov	r0, r4
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <_ZN12FrontendHeapD0Ev+0x94>)
 8001238:	f840 3f14 	str.w	r3, [r0, #20]!
 800123c:	f009 fc76 	bl	800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_ZN12FrontendHeapD0Ev+0x98>)
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001246:	6023      	str	r3, [r4, #0]
 8001248:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800124c:	4620      	mov	r0, r4
 800124e:	f016 fcaa 	bl	8017ba6 <_ZdlPvj>
 8001252:	4620      	mov	r0, r4
 8001254:	bd10      	pop	{r4, pc}
 8001256:	bf00      	nop
 8001258:	08019630 	.word	0x08019630
 800125c:	08019534 	.word	0x08019534
 8001260:	080194e8 	.word	0x080194e8
 8001264:	080194d0 	.word	0x080194d0
 8001268:	0801946c 	.word	0x0801946c
 800126c:	08019484 	.word	0x08019484
 8001270:	0801a33c 	.word	0x0801a33c
 8001274:	08019444 	.word	0x08019444
 8001278:	080195fc 	.word	0x080195fc
 800127c:	080195c8 	.word	0x080195c8
 8001280:	08019594 	.word	0x08019594
 8001284:	08019580 	.word	0x08019580
 8001288:	08019434 	.word	0x08019434

0800128c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001290:	f001 f856 	bl	8002340 <_ZN14BitmapDatabase11getInstanceEv>
 8001294:	4605      	mov	r5, r0
 8001296:	f001 f857 	bl	8002348 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800129a:	4601      	mov	r1, r0
 800129c:	2400      	movs	r4, #0
 800129e:	9400      	str	r4, [sp, #0]
 80012a0:	4623      	mov	r3, r4
 80012a2:	4622      	mov	r2, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f00e fb8f 	bl	800f9c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <touchgfx_init+0xc0>)
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <touchgfx_init+0xc4>)
 80012ae:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f001 fba9 	bl	8002a08 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <touchgfx_init+0xc8>)
 80012b8:	f00e fa3e 	bl	800f738 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <touchgfx_init+0xcc>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f3bf 8f5b 	dmb	ish
 80012c4:	f013 0f01 	tst.w	r3, #1
 80012c8:	d004      	beq.n	80012d4 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <touchgfx_init+0xd0>)
 80012cc:	f7ff f9e8 	bl	80006a0 <_ZN11TouchGFXHAL10initializeEv>
}
 80012d0:	b003      	add	sp, #12
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <touchgfx_init+0xcc>)
 80012d6:	f016 fc68 	bl	8017baa <__cxa_guard_acquire>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d0f5      	beq.n	80012ca <touchgfx_init+0x3e>
          frontendApplication(app)
 80012de:	4c20      	ldr	r4, [pc, #128]	; (8001360 <touchgfx_init+0xd4>)
 80012e0:	4620      	mov	r0, r4
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <touchgfx_init+0xd8>)
 80012e4:	f840 3b14 	str.w	r3, [r0], #20
 80012e8:	6060      	str	r0, [r4, #4]
 80012ea:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80012ee:	60a7      	str	r7, [r4, #8]
 80012f0:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 80012f4:	60e6      	str	r6, [r4, #12]
 80012f6:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 80012fa:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <touchgfx_init+0xdc>)
 80012fe:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <touchgfx_init+0xe0>)
 8001302:	6023      	str	r3, [r4, #0]
 8001304:	f009 fc14 	bl	800ab30 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <touchgfx_init+0xe4>)
 800130a:	6163      	str	r3, [r4, #20]
 800130c:	4638      	mov	r0, r7
 800130e:	f009 fc0f 	bl	800ab30 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <touchgfx_init+0xe8>)
 8001314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001316:	4630      	mov	r0, r6
 8001318:	f009 fc0a 	bl	800ab30 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <touchgfx_init+0xec>)
 800131e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8001322:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001326:	4630      	mov	r0, r6
 8001328:	f001 fd36 	bl	8002d98 <_ZN5ModelC1Ev>
 800132c:	4622      	mov	r2, r4
 800132e:	4631      	mov	r1, r6
 8001330:	4628      	mov	r0, r5
 8001332:	f001 fd27 	bl	8002d84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001336:	4628      	mov	r0, r5
 8001338:	f001 f8a4 	bl	8002484 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <touchgfx_init+0xf0>)
 800133e:	f016 fc7f 	bl	8017c40 <atexit>
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <touchgfx_init+0xcc>)
 8001344:	f016 fc3d 	bl	8017bc2 <__cxa_guard_release>
 8001348:	e7bf      	b.n	80012ca <touchgfx_init+0x3e>
 800134a:	bf00      	nop
 800134c:	2400ae68 	.word	0x2400ae68
 8001350:	240011a4 	.word	0x240011a4
 8001354:	24000008 	.word	0x24000008
 8001358:	24000144 	.word	0x24000144
 800135c:	24001128 	.word	0x24001128
 8001360:	24000148 	.word	0x24000148
 8001364:	08019434 	.word	0x08019434
 8001368:	08019580 	.word	0x08019580
 800136c:	08019630 	.word	0x08019630
 8001370:	08019594 	.word	0x08019594
 8001374:	080195c8 	.word	0x080195c8
 8001378:	080195fc 	.word	0x080195fc
 800137c:	08001155 	.word	0x08001155

08001380 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8001380:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <touchgfx_taskEntry+0xc>)
 8001384:	f7ff f990 	bl	80006a8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001388:	bd08      	pop	{r3, pc}
 800138a:	bf00      	nop
 800138c:	24001128 	.word	0x24001128

08001390 <_Z41__static_initialization_and_destruction_0ii>:
 8001390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	2801      	cmp	r0, #1
 800139a:	d006      	beq.n	80013aa <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800139c:	b91c      	cbnz	r4, 80013a6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	429d      	cmp	r5, r3
 80013a4:	d076      	beq.n	8001494 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d1f4      	bne.n	800139c <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013b2:	4e45      	ldr	r6, [pc, #276]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013b6:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013ba:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013bc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001514 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013c0:	4640      	mov	r0, r8
 80013c2:	f7ff fc93 	bl	8000cec <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013c6:	4f43      	ldr	r7, [pc, #268]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013c8:	4638      	mov	r0, r7
 80013ca:	f010 fd17 	bl	8011dfc <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80013d0:	4a42      	ldr	r2, [pc, #264]	; (80014dc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f8c3 8004 	str.w	r8, [r3, #4]
 80013d8:	609f      	str	r7, [r3, #8]
 80013da:	60de      	str	r6, [r3, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80013e4:	839a      	strh	r2, [r3, #28]
 80013e6:	83da      	strh	r2, [r3, #30]
 80013e8:	841a      	strh	r2, [r3, #32]
 80013ea:	845a      	strh	r2, [r3, #34]	; 0x22
 80013ec:	849a      	strh	r2, [r3, #36]	; 0x24
 80013ee:	84da      	strh	r2, [r3, #38]	; 0x26
 80013f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80013f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80013fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001400:	63da      	str	r2, [r3, #60]	; 0x3c
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
 8001406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800140a:	2101      	movs	r1, #1
 800140c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 8001410:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001414:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001418:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800141a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800141e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8001422:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
 800142c:	65da      	str	r2, [r3, #92]	; 0x5c
 800142e:	661a      	str	r2, [r3, #96]	; 0x60
 8001430:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001434:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001438:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800143c:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 8001440:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001444:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001448:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800144c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001450:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
 8001456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800145a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800145e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001462:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001466:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 800146a:	491d      	ldr	r1, [pc, #116]	; (80014e0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800146c:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800146e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001472:	481c      	ldr	r0, [pc, #112]	; (80014e4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001474:	8001      	strh	r1, [r0, #0]
 8001476:	481c      	ldr	r0, [pc, #112]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001478:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800147a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800147e:	481b      	ldr	r0, [pc, #108]	; (80014ec <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8001480:	8001      	strh	r1, [r0, #0]
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8001484:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001486:	491b      	ldr	r1, [pc, #108]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8001488:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800148c:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8001490:	601a      	str	r2, [r3, #0]
    }
 8001492:	e783      	b.n	800139c <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8001498:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800149c:	601a      	str	r2, [r3, #0]
    {
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80014a0:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014a4:	4a17      	ldr	r2, [pc, #92]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014a6:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014aa:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014b0:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014b4:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014b8:	f7ff fa4c 	bl	8000954 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014c0:	601a      	str	r2, [r3, #0]
    {
 80014c2:	4a02      	ldr	r2, [pc, #8]	; (80014cc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	e76e      	b.n	80013a6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014c8:	24000384 	.word	0x24000384
 80014cc:	08018e9c 	.word	0x08018e9c
 80014d0:	08018eb4 	.word	0x08018eb4
 80014d4:	240011a8 	.word	0x240011a8
 80014d8:	24001128 	.word	0x24001128
 80014dc:	0801a0c4 	.word	0x0801a0c4
 80014e0:	2400ae0c 	.word	0x2400ae0c
 80014e4:	2400ae00 	.word	0x2400ae00
 80014e8:	2400ae06 	.word	0x2400ae06
 80014ec:	2400ae02 	.word	0x2400ae02
 80014f0:	2400ae08 	.word	0x2400ae08
 80014f4:	2400ae04 	.word	0x2400ae04
 80014f8:	08019644 	.word	0x08019644
 80014fc:	08019044 	.word	0x08019044
 8001500:	24000008 	.word	0x24000008
 8001504:	080197c4 	.word	0x080197c4
 8001508:	08019420 	.word	0x08019420
 800150c:	0801a648 	.word	0x0801a648
 8001510:	0801a2e4 	.word	0x0801a2e4
 8001514:	24000388 	.word	0x24000388

08001518 <_GLOBAL__sub_I_touchgfx_init>:
 8001518:	b508      	push	{r3, lr}
 800151a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff ff36 	bl	8001390 <_Z41__static_initialization_and_destruction_0ii>
 8001524:	bd08      	pop	{r3, pc}

08001526 <_GLOBAL__sub_D_touchgfx_init>:
 8001526:	b508      	push	{r3, lr}
 8001528:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ff2f 	bl	8001390 <_Z41__static_initialization_and_destruction_0ii>
 8001532:	bd08      	pop	{r3, pc}

08001534 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001536:	2290      	movs	r2, #144	; 0x90
 8001538:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800153c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800154a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001554:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800155e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800156a:	f3bf 8f6f 	isb	sy
 800156e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001576:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800157a:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100

08001584 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001586:	68d3      	ldr	r3, [r2, #12]
 8001588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158c:	3b01      	subs	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001592:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001594:	6911      	ldr	r1, [r2, #16]
 8001596:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800159a:	3901      	subs	r1, #1
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 800159e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80015a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015aa:	4770      	bx	lr
 80015ac:	50001000 	.word	0x50001000
 80015b0:	24001204 	.word	0x24001204
 80015b4:	24001202 	.word	0x24001202

080015b8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015b8:	4b01      	ldr	r3, [pc, #4]	; (80015c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015ba:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015be:	4770      	bx	lr
 80015c0:	50001000 	.word	0x50001000

080015c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015c4:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015c6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015ca:	2201      	movs	r2, #1
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ce:	4770      	bx	lr
 80015d0:	50001000 	.word	0x50001000

080015d4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015dc:	d025      	beq.n	800162a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80015de:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015e8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80015ec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015f0:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80015f4:	e000      	b.n	80015f8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 80015f6:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015f8:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80015fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001600:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001604:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001608:	4908      	ldr	r1, [pc, #32]	; (800162c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 800160a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800160e:	4613      	mov	r3, r2
 8001610:	3a01      	subs	r2, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f2      	bne.n	80015fc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001616:	1e43      	subs	r3, r0, #1
 8001618:	2800      	cmp	r0, #0
 800161a:	d1ec      	bne.n	80015f6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 800161c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001620:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001638:	d025      	beq.n	8001686 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 800163a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001644:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001648:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800164c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001650:	e000      	b.n	8001654 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001652:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001654:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800165c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001660:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001664:	4908      	ldr	r1, [pc, #32]	; (8001688 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001666:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800166a:	4613      	mov	r3, r2
 800166c:	3a01      	subs	r2, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f2      	bne.n	8001658 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001672:	1e43      	subs	r3, r0, #1
 8001674:	2800      	cmp	r0, #0
 8001676:	d1ec      	bne.n	8001652 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800167c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <_ZN20TouchGFXGeneratedHALD1Ev>:
 800168c:	4a02      	ldr	r2, [pc, #8]	; (8001698 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 800168e:	6002      	str	r2, [r0, #0]
 8001690:	4a02      	ldr	r2, [pc, #8]	; (800169c <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001692:	6002      	str	r2, [r0, #0]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	08019644 	.word	0x08019644
 800169c:	0801a0c4 	.word	0x0801a0c4

080016a0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4604      	mov	r4, r0
    HAL::initialize();
 80016a4:	f009 fd4d 	bl	800b142 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016ac:	f00b fd56 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 80016b0:	4601      	mov	r1, r0
 80016b2:	4620      	mov	r0, r4
 80016b4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016bc:	2300      	movs	r3, #0
 80016be:	4a02      	ldr	r2, [pc, #8]	; (80016c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016c0:	4902      	ldr	r1, [pc, #8]	; (80016cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016c2:	4620      	mov	r0, r4
 80016c4:	47a8      	blx	r5
}
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
 80016c8:	2409fa00 	.word	0x2409fa00
 80016cc:	24040000 	.word	0x24040000

080016d0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 80016d0:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 80016d2:	f009 fd1d 	bl	800b110 <_ZN8touchgfx3HAL10beginFrameEv>
}
 80016d6:	bd08      	pop	{r3, pc}

080016d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80016d8:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 80016da:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80016de:	b113      	cbz	r3, 80016e6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80016e6:	f009 fd1f 	bl	800b128 <_ZN8touchgfx3HAL8endFrameEv>
}
 80016ea:	bd08      	pop	{r3, pc}
 80016ec:	24001200 	.word	0x24001200

080016f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80016f0:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 80016f2:	f009 fcd7 	bl	800b0a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016fe:	d021      	beq.n	8001744 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001708:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800170c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001710:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001714:	e000      	b.n	8001718 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001716:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001718:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800171c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001720:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001724:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800172a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800172e:	4613      	mov	r3, r2
 8001730:	3a01      	subs	r2, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f2      	bne.n	800171c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001736:	1e43      	subs	r3, r0, #1
 8001738:	2800      	cmp	r0, #0
 800173a:	d1ec      	bne.n	8001716 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800173c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001740:	f3bf 8f6f 	isb	sy
}
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800174c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800174e:	f009 fe12 	bl	800b376 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8001752:	bd08      	pop	{r3, pc}

08001754 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001754:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001756:	f009 fc9f 	bl	800b098 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800175a:	bd08      	pop	{r3, pc}

0800175c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8001762:	6003      	str	r3, [r0, #0]
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001766:	6003      	str	r3, [r0, #0]
 8001768:	217c      	movs	r1, #124	; 0x7c
 800176a:	f016 fa1c 	bl	8017ba6 <_ZdlPvj>
 800176e:	4620      	mov	r0, r4
 8001770:	bd10      	pop	{r4, pc}
 8001772:	bf00      	nop
 8001774:	08019644 	.word	0x08019644
 8001778:	0801a0c4 	.word	0x0801a0c4

0800177c <HAL_LTDC_LineEventCallback>:
        return instance;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_LTDC_LineEventCallback+0x54>)
 800177e:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 8001780:	b32b      	cbz	r3, 80017ce <HAL_LTDC_LineEventCallback+0x52>
    {
 8001782:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_LTDC_LineEventCallback+0x58>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_LTDC_LineEventCallback+0x5c>)
 800178a:	8811      	ldrh	r1, [r2, #0]
 800178c:	428b      	cmp	r3, r1
 800178e:	d00a      	beq.n	80017a6 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001790:	f004 fc28 	bl	8005fe4 <HAL_LTDC_ProgramLineEvent>
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_LTDC_LineEventCallback+0x54>)
 8001796:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8001798:	6803      	ldr	r3, [r0, #0]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7fe feb6 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017a4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_LTDC_LineEventCallback+0x60>)
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	f004 fc1b 	bl	8005fe4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017ae:	4c08      	ldr	r4, [pc, #32]	; (80017d0 <HAL_LTDC_LineEventCallback+0x54>)
 80017b0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017b2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017b6:	3301      	adds	r3, #1
 80017b8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017bc:	f7ff f892 	bl	80008e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	f00a fa1d 	bl	800bc00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7fe fe64 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017cc:	e7ea      	b.n	80017a4 <HAL_LTDC_LineEventCallback+0x28>
 80017ce:	4770      	bx	lr
 80017d0:	2400ae0c 	.word	0x2400ae0c
 80017d4:	50001000 	.word	0x50001000
 80017d8:	24001204 	.word	0x24001204
 80017dc:	24001202 	.word	0x24001202

080017e0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80017e0:	b530      	push	{r4, r5, lr}
 80017e2:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80017e4:	2400      	movs	r4, #0
 80017e6:	9400      	str	r4, [sp, #0]
 80017e8:	9401      	str	r4, [sp, #4]
 80017ea:	9402      	str	r4, [sp, #8]
 80017ec:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017ee:	f003 f9b9 	bl	8004b64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017f2:	2501      	movs	r5, #1
 80017f4:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017f8:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80017fc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001800:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001802:	231b      	movs	r3, #27
 8001804:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001808:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800180c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001810:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001814:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001818:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800181c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001820:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001824:	4668      	mov	r0, sp
 8001826:	f003 f9bb 	bl	8004ba0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800182a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800182e:	2319      	movs	r3, #25
 8001830:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001834:	2403      	movs	r4, #3
 8001836:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800183a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800183e:	4668      	mov	r0, sp
 8001840:	f003 f9ae 	bl	8004ba0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001844:	2302      	movs	r3, #2
 8001846:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800184a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800184e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8001850:	2313      	movs	r3, #19
 8001852:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001856:	4668      	mov	r0, sp
 8001858:	f003 f9a2 	bl	8004ba0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800185c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001860:	2311      	movs	r3, #17
 8001862:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001866:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800186a:	4668      	mov	r0, sp
 800186c:	f003 f998 	bl	8004ba0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001870:	2004      	movs	r0, #4
 8001872:	f003 f985 	bl	8004b80 <HAL_MPU_Enable>

}
 8001876:	b005      	add	sp, #20
 8001878:	bd30      	pop	{r4, r5, pc}
	...

0800187c <MX_CRC_Init>:
{
 800187c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <MX_CRC_Init+0x1c>)
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_CRC_Init+0x20>)
 8001882:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001888:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800188a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800188c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800188e:	2301      	movs	r3, #1
 8001890:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001892:	f003 f9b5 	bl	8004c00 <HAL_CRC_Init>
}
 8001896:	bd08      	pop	{r3, pc}
 8001898:	24001218 	.word	0x24001218
 800189c:	40023000 	.word	0x40023000

080018a0 <MX_GPIO_Init>:
{
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	2400      	movs	r4, #0
 80018a8:	9407      	str	r4, [sp, #28]
 80018aa:	9408      	str	r4, [sp, #32]
 80018ac:	9409      	str	r4, [sp, #36]	; 0x24
 80018ae:	940a      	str	r4, [sp, #40]	; 0x28
 80018b0:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <MX_GPIO_Init+0x190>)
 80018b4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018c4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80018c8:	9200      	str	r2, [sp, #0]
 80018ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018cc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018dc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80018f8:	9202      	str	r2, [sp, #8]
 80018fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001904:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001908:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800190c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001910:	9203      	str	r2, [sp, #12]
 8001912:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001914:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001920:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001924:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001928:	9204      	str	r2, [sp, #16]
 800192a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001930:	f042 0208 	orr.w	r2, r2, #8
 8001934:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001938:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800193c:	f002 0208 	and.w	r2, r2, #8
 8001940:	9205      	str	r2, [sp, #20]
 8001942:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	9306      	str	r3, [sp, #24]
 800195a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800195c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001a3c <MX_GPIO_Init+0x19c>
 8001960:	4622      	mov	r2, r4
 8001962:	f640 0104 	movw	r1, #2052	; 0x804
 8001966:	4648      	mov	r0, r9
 8001968:	f003 fcde 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800196c:	4f31      	ldr	r7, [pc, #196]	; (8001a34 <MX_GPIO_Init+0x194>)
 800196e:	4622      	mov	r2, r4
 8001970:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8001974:	4638      	mov	r0, r7
 8001976:	f003 fcd7 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800197a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001a40 <MX_GPIO_Init+0x1a0>
 800197e:	4622      	mov	r2, r4
 8001980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001984:	4640      	mov	r0, r8
 8001986:	f003 fccf 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 800198a:	4e2b      	ldr	r6, [pc, #172]	; (8001a38 <MX_GPIO_Init+0x198>)
 800198c:	4622      	mov	r2, r4
 800198e:	2106      	movs	r1, #6
 8001990:	4630      	mov	r0, r6
 8001992:	f003 fcc9 	bl	8005328 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001996:	f640 0304 	movw	r3, #2052	; 0x804
 800199a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2501      	movs	r5, #1
 800199e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a4:	a907      	add	r1, sp, #28
 80019a6:	4648      	mov	r0, r9
 80019a8:	f003 fb06 	bl	8004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80019ac:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80019b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	f04f 0903 	mov.w	r9, #3
 80019ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019be:	a907      	add	r1, sp, #28
 80019c0:	4638      	mov	r0, r7
 80019c2:	f003 faf9 	bl	8004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80019c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80019d4:	a907      	add	r1, sp, #28
 80019d6:	4640      	mov	r0, r8
 80019d8:	f003 faee 	bl	8004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019dc:	f04f 0804 	mov.w	r8, #4
 80019e0:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ea:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019ec:	a907      	add	r1, sp, #28
 80019ee:	4638      	mov	r0, r7
 80019f0:	f003 fae2 	bl	8004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019f4:	2302      	movs	r3, #2
 80019f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019fe:	a907      	add	r1, sp, #28
 8001a00:	4630      	mov	r0, r6
 8001a02:	f003 fad9 	bl	8004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a06:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a10:	a907      	add	r1, sp, #28
 8001a12:	4630      	mov	r0, r6
 8001a14:	f003 fad0 	bl	8004fb8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a18:	4622      	mov	r2, r4
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2008      	movs	r0, #8
 8001a1e:	f003 f84b 	bl	8004ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a22:	2008      	movs	r0, #8
 8001a24:	f003 f87e 	bl	8004b24 <HAL_NVIC_EnableIRQ>
}
 8001a28:	b00d      	add	sp, #52	; 0x34
 8001a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a2e:	bf00      	nop
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58021c00 	.word	0x58021c00
 8001a38:	58020000 	.word	0x58020000
 8001a3c:	58021800 	.word	0x58021800
 8001a40:	58022000 	.word	0x58022000

08001a44 <MX_DMA2D_Init>:
{
 8001a44:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001a46:	4c0b      	ldr	r4, [pc, #44]	; (8001a74 <MX_DMA2D_Init+0x30>)
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_DMA2D_Init+0x34>)
 8001a4a:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a50:	2202      	movs	r2, #2
 8001a52:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a54:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a56:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a58:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a5c:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001a5e:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a60:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001a62:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a64:	4620      	mov	r0, r4
 8001a66:	f003 f943 	bl	8004cf0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f003 fa21 	bl	8004eb4 <HAL_DMA2D_ConfigLayer>
}
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	2400123c 	.word	0x2400123c
 8001a78:	52001000 	.word	0x52001000

08001a7c <MX_LTDC_Init>:
{
 8001a7c:	b530      	push	{r4, r5, lr}
 8001a7e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a80:	2234      	movs	r2, #52	; 0x34
 8001a82:	2100      	movs	r1, #0
 8001a84:	a801      	add	r0, sp, #4
 8001a86:	f016 fa43 	bl	8017f10 <memset>
  hltdc.Instance = LTDC;
 8001a8a:	4c23      	ldr	r4, [pc, #140]	; (8001b18 <MX_LTDC_Init+0x9c>)
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <MX_LTDC_Init+0xa0>)
 8001a8e:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a90:	2500      	movs	r5, #0
 8001a92:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a94:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a96:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a98:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a9a:	2328      	movs	r3, #40	; 0x28
 8001a9c:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001a9e:	2309      	movs	r3, #9
 8001aa0:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001aa2:	232a      	movs	r3, #42	; 0x2a
 8001aa4:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001aa6:	230b      	movs	r3, #11
 8001aa8:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001aaa:	f240 230a 	movw	r3, #522	; 0x20a
 8001aae:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ab0:	f240 131b 	movw	r3, #283	; 0x11b
 8001ab4:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001ab6:	f240 232a 	movw	r3, #554	; 0x22a
 8001aba:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001abc:	f240 131d 	movw	r3, #285	; 0x11d
 8001ac0:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ac2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ac6:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001aca:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f004 f96a 	bl	8005da8 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001ad4:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001ad6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ada:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001adc:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001ade:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001ae2:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001ae8:	23ff      	movs	r3, #255	; 0xff
 8001aea:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001aec:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001aee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001af2:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001af4:	2005      	movs	r0, #5
 8001af6:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001af8:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001afa:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001afc:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001afe:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b02:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b06:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b0a:	462a      	mov	r2, r5
 8001b0c:	a901      	add	r1, sp, #4
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f004 fa33 	bl	8005f7a <HAL_LTDC_ConfigLayer>
}
 8001b14:	b00f      	add	sp, #60	; 0x3c
 8001b16:	bd30      	pop	{r4, r5, pc}
 8001b18:	240012f0 	.word	0x240012f0
 8001b1c:	50001000 	.word	0x50001000

08001b20 <MX_I2C4_Init>:
{
 8001b20:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001b22:	4c0d      	ldr	r4, [pc, #52]	; (8001b58 <MX_I2C4_Init+0x38>)
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_I2C4_Init+0x3c>)
 8001b26:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_I2C4_Init+0x40>)
 8001b2a:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001b36:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b38:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3a:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f003 fdd2 	bl	80056e8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f003 fff6 	bl	8005b3a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b4e:	4629      	mov	r1, r5
 8001b50:	4620      	mov	r0, r4
 8001b52:	f004 f820 	bl	8005b96 <HAL_I2CEx_ConfigDigitalFilter>
}
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
 8001b58:	240012a4 	.word	0x240012a4
 8001b5c:	58001c00 	.word	0x58001c00
 8001b60:	30808bd0 	.word	0x30808bd0

08001b64 <MX_OCTOSPI1_Init>:
{
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001b68:	4814      	ldr	r0, [pc, #80]	; (8001bbc <MX_OCTOSPI1_Init+0x58>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_OCTOSPI1_Init+0x5c>)
 8001b6c:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b6e:	2501      	movs	r5, #1
 8001b70:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b72:	2400      	movs	r4, #0
 8001b74:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b76:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001b78:	231a      	movs	r3, #26
 8001b7a:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b80:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b82:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001b84:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001b86:	2303      	movs	r3, #3
 8001b88:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001b8a:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b8c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001b8e:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001b90:	2308      	movs	r3, #8
 8001b92:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001b94:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001b96:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001b98:	f004 fea2 	bl	80068e0 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001b9c:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001ba0:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f002 fcd9 	bl	800455c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001baa:	a901      	add	r1, sp, #4
 8001bac:	4620      	mov	r0, r4
 8001bae:	f002 fd4f 	bl	8004650 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f002 fc7a 	bl	80044ac <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd30      	pop	{r4, r5, pc}
 8001bbc:	24001398 	.word	0x24001398
 8001bc0:	52005000 	.word	0x52005000

08001bc4 <esWiFi_Task>:
{
 8001bc4:	b508      	push	{r3, lr}
    osDelay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f006 fd4a 	bl	8008660 <osDelay>
  for(;;)
 8001bcc:	e7fb      	b.n	8001bc6 <esWiFi_Task+0x2>
	...

08001bd0 <SystemClock_Config>:
{
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd4:	224c      	movs	r2, #76	; 0x4c
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	a809      	add	r0, sp, #36	; 0x24
 8001bda:	f016 f999 	bl	8017f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bde:	2220      	movs	r2, #32
 8001be0:	2100      	movs	r1, #0
 8001be2:	a801      	add	r0, sp, #4
 8001be4:	f016 f994 	bl	8017f10 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <SystemClock_Config+0xa8>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	f004 fef8 	bl	80069e8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <SystemClock_Config+0xac>)
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c04:	619a      	str	r2, [r3, #24]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <SystemClock_Config+0xac>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c18:	d0fa      	beq.n	8001c10 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <SystemClock_Config+0xa8>)
 8001c1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001c38:	220c      	movs	r2, #12
 8001c3a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001c3c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c40:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c42:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c44:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c46:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c50:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c52:	a809      	add	r0, sp, #36	; 0x24
 8001c54:	f004 ff12 	bl	8006a7c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	233f      	movs	r3, #63	; 0x3f
 8001c5a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c62:	2308      	movs	r3, #8
 8001c64:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c66:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c68:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001c6a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c6c:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c6e:	a801      	add	r0, sp, #4
 8001c70:	f005 fb10 	bl	8007294 <HAL_RCC_ClockConfig>
}
 8001c74:	b01c      	add	sp, #112	; 0x70
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58024800 	.word	0x58024800

08001c80 <main>:
{
 8001c80:	b508      	push	{r3, lr}
  MPU_Config();
 8001c82:	f7ff fdad 	bl	80017e0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <main+0xfc>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c8e:	d113      	bne.n	8001cb8 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c94:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <main+0xfc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ca4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb4:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <main+0xfc>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cc0:	d127      	bne.n	8001d12 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <main+0xfc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cca:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001cce:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cd2:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001cd6:	e000      	b.n	8001cda <main+0x5a>
    } while(sets-- != 0U);
 8001cd8:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cda:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001cde:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ce2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001ce6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001cea:	4924      	ldr	r1, [pc, #144]	; (8001d7c <main+0xfc>)
 8001cec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	3a01      	subs	r2, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f2      	bne.n	8001cde <main+0x5e>
    } while(sets-- != 0U);
 8001cf8:	1e43      	subs	r3, r0, #1
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d1ec      	bne.n	8001cd8 <main+0x58>
 8001cfe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001d02:	694b      	ldr	r3, [r1, #20]
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	614b      	str	r3, [r1, #20]
 8001d0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d0e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001d12:	f002 fe6b 	bl	80049ec <HAL_Init>
  SystemClock_Config();
 8001d16:	f7ff ff5b 	bl	8001bd0 <SystemClock_Config>
  MX_CRC_Init();
 8001d1a:	f7ff fdaf 	bl	800187c <MX_CRC_Init>
  MX_GPIO_Init();
 8001d1e:	f7ff fdbf 	bl	80018a0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001d22:	f7ff fe8f 	bl	8001a44 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001d26:	f7ff fea9 	bl	8001a7c <MX_LTDC_Init>
  MX_I2C4_Init();
 8001d2a:	f7ff fef9 	bl	8001b20 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001d2e:	f7ff ff19 	bl	8001b64 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8001d32:	f7fe fb57 	bl	80003e4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001d36:	f7fe fb54 	bl	80003e2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001d3a:	f006 fc05 	bl	8008548 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <main+0x100>)
 8001d40:	2101      	movs	r1, #1
 8001d42:	200a      	movs	r0, #10
 8001d44:	f006 fd59 	bl	80087fa <osMessageQueueNew>
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <main+0x104>)
 8001d4a:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <main+0x108>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	200a      	movs	r0, #10
 8001d52:	f006 fd52 	bl	80087fa <osMessageQueueNew>
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <main+0x10c>)
 8001d58:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <main+0x110>)
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	480d      	ldr	r0, [pc, #52]	; (8001d94 <main+0x114>)
 8001d60:	f006 fc20 	bl	80085a4 <osThreadNew>
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <main+0x118>)
 8001d66:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <main+0x11c>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <main+0x120>)
 8001d6e:	f006 fc19 	bl	80085a4 <osThreadNew>
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <main+0x124>)
 8001d74:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001d76:	f006 fbf9 	bl	800856c <osKernelStart>
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <main+0xfa>
 8001d7c:	e000ed00 	.word	0xe000ed00
 8001d80:	08019744 	.word	0x08019744
 8001d84:	24001208 	.word	0x24001208
 8001d88:	08019780 	.word	0x08019780
 8001d8c:	24001210 	.word	0x24001210
 8001d90:	08019798 	.word	0x08019798
 8001d94:	08001bc5 	.word	0x08001bc5
 8001d98:	24001214 	.word	0x24001214
 8001d9c:	0801975c 	.word	0x0801975c
 8001da0:	080003ed 	.word	0x080003ed
 8001da4:	2400120c 	.word	0x2400120c

08001da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001daa:	6802      	ldr	r2, [r0, #0]
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d000      	beq.n	8001db4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001db2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001db4:	f002 fe48 	bl	8004a48 <HAL_IncTick>
}
 8001db8:	e7fb      	b.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001dba:	bf00      	nop
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b500      	push	{lr}
 8001dc6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_MspInit+0x30>)
 8001dca:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8001dd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	210f      	movs	r1, #15
 8001de6:	f06f 0001 	mvn.w	r0, #1
 8001dea:	f002 fe65 	bl	8004ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	b003      	add	sp, #12
 8001df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001df4:	58024400 	.word	0x58024400

08001df8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001df8:	6802      	ldr	r2, [r0, #0]
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_CRC_MspInit+0x2c>)
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d000      	beq.n	8001e02 <HAL_CRC_MspInit+0xa>
 8001e00:	4770      	bx	lr
{
 8001e02:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_CRC_MspInit+0x30>)
 8001e06:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8001e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8001e12:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e1e:	b002      	add	sp, #8
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023000 	.word	0x40023000
 8001e28:	58024400 	.word	0x58024400

08001e2c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001e2c:	6802      	ldr	r2, [r0, #0]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_DMA2D_MspInit+0x40>)
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d000      	beq.n	8001e36 <HAL_DMA2D_MspInit+0xa>
 8001e34:	4770      	bx	lr
{
 8001e36:	b500      	push	{lr}
 8001e38:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_DMA2D_MspInit+0x44>)
 8001e3c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001e40:	f042 0210 	orr.w	r2, r2, #16
 8001e44:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001e48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2105      	movs	r1, #5
 8001e58:	205a      	movs	r0, #90	; 0x5a
 8001e5a:	f002 fe2d 	bl	8004ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e5e:	205a      	movs	r0, #90	; 0x5a
 8001e60:	f002 fe60 	bl	8004b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e64:	b003      	add	sp, #12
 8001e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e6a:	bf00      	nop
 8001e6c:	52001000 	.word	0x52001000
 8001e70:	58024400 	.word	0x58024400

08001e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e74:	b510      	push	{r4, lr}
 8001e76:	b0b6      	sub	sp, #216	; 0xd8
 8001e78:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	9131      	str	r1, [sp, #196]	; 0xc4
 8001e7e:	9132      	str	r1, [sp, #200]	; 0xc8
 8001e80:	9133      	str	r1, [sp, #204]	; 0xcc
 8001e82:	9134      	str	r1, [sp, #208]	; 0xd0
 8001e84:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e86:	22b8      	movs	r2, #184	; 0xb8
 8001e88:	a803      	add	r0, sp, #12
 8001e8a:	f016 f841 	bl	8017f10 <memset>
  if(hi2c->Instance==I2C4)
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_I2C_MspInit+0x8c>)
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e96:	b036      	add	sp, #216	; 0xd8
 8001e98:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9e:	a803      	add	r0, sp, #12
 8001ea0:	f005 fcbe 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	bb40      	cbnz	r0, 8001ef8 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea6:	4c17      	ldr	r4, [pc, #92]	; (8001f04 <HAL_I2C_MspInit+0x90>)
 8001ea8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8001eb4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001ec0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ec4:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec6:	2312      	movs	r3, #18
 8001ec8:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	a931      	add	r1, sp, #196	; 0xc4
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <HAL_I2C_MspInit+0x94>)
 8001eda:	f003 f86d 	bl	8004fb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ede:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8001eea:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	9b02      	ldr	r3, [sp, #8]
}
 8001ef6:	e7ce      	b.n	8001e96 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001ef8:	f7ff ff62 	bl	8001dc0 <Error_Handler>
 8001efc:	e7d3      	b.n	8001ea6 <HAL_I2C_MspInit+0x32>
 8001efe:	bf00      	nop
 8001f00:	58001c00 	.word	0x58001c00
 8001f04:	58024400 	.word	0x58024400
 8001f08:	58020c00 	.word	0x58020c00

08001f0c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8001f0c:	6802      	ldr	r2, [r0, #0]
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_I2C_MspDeInit+0x34>)
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d000      	beq.n	8001f16 <HAL_I2C_MspDeInit+0xa>
 8001f14:	4770      	bx	lr
{
 8001f16:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_I2C_MspDeInit+0x38>)
 8001f1a:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8001f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f22:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001f26:	4c08      	ldr	r4, [pc, #32]	; (8001f48 <HAL_I2C_MspDeInit+0x3c>)
 8001f28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f003 f953 	bl	80051d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f36:	4620      	mov	r0, r4
 8001f38:	f003 f94e 	bl	80051d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	58001c00 	.word	0x58001c00
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020c00 	.word	0x58020c00

08001f4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	b0b8      	sub	sp, #224	; 0xe0
 8001f50:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	2100      	movs	r1, #0
 8001f54:	9133      	str	r1, [sp, #204]	; 0xcc
 8001f56:	9134      	str	r1, [sp, #208]	; 0xd0
 8001f58:	9135      	str	r1, [sp, #212]	; 0xd4
 8001f5a:	9136      	str	r1, [sp, #216]	; 0xd8
 8001f5c:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5e:	22b8      	movs	r2, #184	; 0xb8
 8001f60:	a805      	add	r0, sp, #20
 8001f62:	f015 ffd5 	bl	8017f10 <memset>
  if(hltdc->Instance==LTDC)
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_LTDC_MspInit+0x114>)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d001      	beq.n	8001f72 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f6e:	b038      	add	sp, #224	; 0xe0
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f76:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8001f78:	2318      	movs	r3, #24
 8001f7a:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8001f7c:	23c9      	movs	r3, #201	; 0xc9
 8001f7e:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001f84:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8001f86:	2315      	movs	r3, #21
 8001f88:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001f90:	f241 5356 	movw	r3, #5462	; 0x1556
 8001f94:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	a805      	add	r0, sp, #20
 8001f98:	f005 fc42 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d15c      	bne.n	800205a <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_LTDC_MspInit+0x118>)
 8001fa2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001fa6:	f042 0208 	orr.w	r2, r2, #8
 8001faa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001fae:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001fb2:	f002 0208 	and.w	r2, r2, #8
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fc6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fca:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001fce:	9202      	str	r2, [sp, #8]
 8001fd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001fde:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fe2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001fe6:	9203      	str	r2, [sp, #12]
 8001fe8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002002:	23ff      	movs	r3, #255	; 0xff
 8002004:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2602      	movs	r6, #2
 8002008:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2400      	movs	r4, #0
 800200c:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002010:	250e      	movs	r5, #14
 8002012:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002014:	a933      	add	r1, sp, #204	; 0xcc
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <HAL_LTDC_MspInit+0x11c>)
 8002018:	f002 ffce 	bl	8004fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800201c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002020:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002028:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800202a:	a933      	add	r1, sp, #204	; 0xcc
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <HAL_LTDC_MspInit+0x120>)
 800202e:	f002 ffc3 	bl	8004fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8002032:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002036:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800203e:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002040:	a933      	add	r1, sp, #204	; 0xcc
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <HAL_LTDC_MspInit+0x124>)
 8002044:	f002 ffb8 	bl	8004fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002048:	4622      	mov	r2, r4
 800204a:	2105      	movs	r1, #5
 800204c:	2058      	movs	r0, #88	; 0x58
 800204e:	f002 fd33 	bl	8004ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002052:	2058      	movs	r0, #88	; 0x58
 8002054:	f002 fd66 	bl	8004b24 <HAL_NVIC_EnableIRQ>
}
 8002058:	e789      	b.n	8001f6e <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800205a:	f7ff feb1 	bl	8001dc0 <Error_Handler>
 800205e:	e79f      	b.n	8001fa0 <HAL_LTDC_MspInit+0x54>
 8002060:	50001000 	.word	0x50001000
 8002064:	58024400 	.word	0x58024400
 8002068:	58022800 	.word	0x58022800
 800206c:	58022400 	.word	0x58022400
 8002070:	58022000 	.word	0x58022000

08002074 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002074:	b510      	push	{r4, lr}
 8002076:	b0b0      	sub	sp, #192	; 0xc0
 8002078:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207a:	22b8      	movs	r2, #184	; 0xb8
 800207c:	2100      	movs	r1, #0
 800207e:	a802      	add	r0, sp, #8
 8002080:	f015 ff46 	bl	8017f10 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_OSPI_MspInit+0x8c>)
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800208c:	b030      	add	sp, #192	; 0xc0
 800208e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002094:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8002096:	2318      	movs	r3, #24
 8002098:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800209a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800209e:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80020a0:	2302      	movs	r3, #2
 80020a2:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020a4:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020a6:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80020a8:	2320      	movs	r3, #32
 80020aa:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80020ac:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	f005 fbb6 	bl	8007820 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	bb08      	cbnz	r0, 80020fa <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_OSPI_MspInit+0x90>)
 80020b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020bc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80020c0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80020c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020c8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020d0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80020d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80020dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2105      	movs	r1, #5
 80020ec:	205c      	movs	r0, #92	; 0x5c
 80020ee:	f002 fce3 	bl	8004ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80020f2:	205c      	movs	r0, #92	; 0x5c
 80020f4:	f002 fd16 	bl	8004b24 <HAL_NVIC_EnableIRQ>
}
 80020f8:	e7c8      	b.n	800208c <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80020fa:	f7ff fe61 	bl	8001dc0 <Error_Handler>
 80020fe:	e7da      	b.n	80020b6 <HAL_OSPI_MspInit+0x42>
 8002100:	52005000 	.word	0x52005000
 8002104:	58024400 	.word	0x58024400

08002108 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8002108:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_OSPI_MspDeInit+0x30>)
 800210e:	429a      	cmp	r2, r3
 8002110:	d000      	beq.n	8002114 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8002112:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_OSPI_MspDeInit+0x34>)
 8002116:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800211a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800211e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8002122:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002126:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800212a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 800212e:	205c      	movs	r0, #92	; 0x5c
 8002130:	f002 fd06 	bl	8004b40 <HAL_NVIC_DisableIRQ>
}
 8002134:	e7ed      	b.n	8002112 <HAL_OSPI_MspDeInit+0xa>
 8002136:	bf00      	nop
 8002138:	52005000 	.word	0x52005000
 800213c:	58024400 	.word	0x58024400

08002140 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002140:	280f      	cmp	r0, #15
 8002142:	d901      	bls.n	8002148 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8002146:	4770      	bx	lr
{
 8002148:	b510      	push	{r4, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800214e:	2200      	movs	r2, #0
 8002150:	4601      	mov	r1, r0
 8002152:	2036      	movs	r0, #54	; 0x36
 8002154:	f002 fcb0 	bl	8004ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002158:	2036      	movs	r0, #54	; 0x36
 800215a:	f002 fce3 	bl	8004b24 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_InitTick+0x88>)
 8002160:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_InitTick+0x8c>)
 8002164:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002170:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800217c:	a901      	add	r1, sp, #4
 800217e:	a802      	add	r0, sp, #8
 8002180:	f005 fa18 	bl	80075b4 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002184:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002186:	b9bb      	cbnz	r3, 80021b8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002188:	f005 f9f0 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 800218c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800218e:	4810      	ldr	r0, [pc, #64]	; (80021d0 <HAL_InitTick+0x90>)
 8002190:	fba0 2303 	umull	r2, r3, r0, r3
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <HAL_InitTick+0x94>)
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <HAL_InitTick+0x98>)
 800219c:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800219e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021a4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021ac:	f006 f98c 	bl	80084c8 <HAL_TIM_Base_Init>
 80021b0:	b130      	cbz	r0, 80021c0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
}
 80021b4:	b00a      	add	sp, #40	; 0x28
 80021b6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b8:	f005 f9d8 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 80021bc:	0043      	lsls	r3, r0, #1
 80021be:	e7e6      	b.n	800218e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80021c0:	4804      	ldr	r0, [pc, #16]	; (80021d4 <HAL_InitTick+0x94>)
 80021c2:	f005 ffe5 	bl	8008190 <HAL_TIM_Base_Start_IT>
 80021c6:	e7f5      	b.n	80021b4 <HAL_InitTick+0x74>
 80021c8:	24000048 	.word	0x24000048
 80021cc:	58024400 	.word	0x58024400
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	240013f4 	.word	0x240013f4
 80021d8:	40001000 	.word	0x40001000

080021dc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021dc:	4770      	bx	lr

080021de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler>

080021e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <MemManage_Handler>

080021e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <BusFault_Handler>

080021e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler>

080021e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e6:	4770      	bx	lr

080021e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80021ea:	2004      	movs	r0, #4
 80021ec:	f003 f8ac 	bl	8005348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021f0:	bd08      	pop	{r3, pc}
	...

080021f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f6:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM6_DAC_IRQHandler+0xc>)
 80021f8:	f006 f816 	bl	8008228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021fc:	bd08      	pop	{r3, pc}
 80021fe:	bf00      	nop
 8002200:	240013f4 	.word	0x240013f4

08002204 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <LTDC_IRQHandler+0xc>)
 8002208:	f003 fe4a 	bl	8005ea0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800220c:	bd08      	pop	{r3, pc}
 800220e:	bf00      	nop
 8002210:	240012f0 	.word	0x240012f0

08002214 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002216:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA2D_IRQHandler+0xc>)
 8002218:	f002 fdae 	bl	8004d78 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800221c:	bd08      	pop	{r3, pc}
 800221e:	bf00      	nop
 8002220:	2400123c 	.word	0x2400123c

08002224 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8002224:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8002226:	4802      	ldr	r0, [pc, #8]	; (8002230 <OCTOSPI1_IRQHandler+0xc>)
 8002228:	f004 fa44 	bl	80066b4 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800222c:	bd08      	pop	{r3, pc}
 800222e:	bf00      	nop
 8002230:	24001398 	.word	0x24001398

08002234 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002234:	2001      	movs	r0, #1
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b508      	push	{r3, lr}
	errno = EINVAL;
 800223a:	f015 fd15 	bl	8017c68 <__errno>
 800223e:	2316      	movs	r3, #22
 8002240:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	bd08      	pop	{r3, pc}

08002248 <_exit>:

void _exit (int status)
{
 8002248:	b508      	push	{r3, lr}
	_kill(status, -1);
 800224a:	f04f 31ff 	mov.w	r1, #4294967295
 800224e:	f7ff fff3 	bl	8002238 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002252:	e7fe      	b.n	8002252 <_exit+0xa>

08002254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460c      	mov	r4, r1
 8002258:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	2500      	movs	r5, #0
 800225c:	e006      	b.n	800226c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800225e:	f3af 8000 	nop.w
 8002262:	4621      	mov	r1, r4
 8002264:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800226a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226c:	42b5      	cmp	r5, r6
 800226e:	dbf6      	blt.n	800225e <_read+0xa>
	}

return len;
}
 8002270:	4630      	mov	r0, r6
 8002272:	bd70      	pop	{r4, r5, r6, pc}

08002274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	460c      	mov	r4, r1
 8002278:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2500      	movs	r5, #0
 800227c:	e004      	b.n	8002288 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800227e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002282:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	3501      	adds	r5, #1
 8002288:	42b5      	cmp	r5, r6
 800228a:	dbf8      	blt.n	800227e <_write+0xa>
	}
	return len;
}
 800228c:	4630      	mov	r0, r6
 800228e:	bd70      	pop	{r4, r5, r6, pc}

08002290 <_close>:

int _close(int file)
{
	return -1;
}
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	4770      	bx	lr

08002296 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800229c:	2000      	movs	r0, #0
 800229e:	4770      	bx	lr

080022a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80022a0:	2001      	movs	r0, #1
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80022a4:	2000      	movs	r0, #0
 80022a6:	4770      	bx	lr

080022a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022a8:	b508      	push	{r3, lr}
 80022aa:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <_sbrk+0x34>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	b142      	cbz	r2, 80022c4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <_sbrk+0x34>)
 80022b4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80022b6:	4403      	add	r3, r0
 80022b8:	466a      	mov	r2, sp
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d806      	bhi.n	80022cc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <_sbrk+0x34>)
 80022c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80022c2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80022c4:	4a05      	ldr	r2, [pc, #20]	; (80022dc <_sbrk+0x34>)
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <_sbrk+0x38>)
 80022c8:	6011      	str	r1, [r2, #0]
 80022ca:	e7f2      	b.n	80022b2 <_sbrk+0xa>
		errno = ENOMEM;
 80022cc:	f015 fccc 	bl	8017c68 <__errno>
 80022d0:	230c      	movs	r3, #12
 80022d2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	e7f3      	b.n	80022c2 <_sbrk+0x1a>
 80022da:	bf00      	nop
 80022dc:	24001440 	.word	0x24001440
 80022e0:	2400b090 	.word	0x2400b090

080022e4 <_ZN23ApplicationFontProviderD1Ev>:
 80022e4:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80022e6:	6002      	str	r2, [r0, #0]
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80022ea:	6002      	str	r2, [r0, #0]
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	080197c4 	.word	0x080197c4
 80022f4:	08019420 	.word	0x08019420

080022f8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80022f8:	b508      	push	{r3, lr}
    switch (typography)
 80022fa:	2901      	cmp	r1, #1
 80022fc:	d008      	beq.n	8002310 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 80022fe:	2902      	cmp	r1, #2
 8002300:	d00a      	beq.n	8002318 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8002302:	b109      	cbz	r1, 8002308 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 8002304:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002306:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002308:	f000 fbd6 	bl	8002ab8 <_ZN17TypedTextDatabase8getFontsEv>
 800230c:	6800      	ldr	r0, [r0, #0]
 800230e:	e7fa      	b.n	8002306 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002310:	f000 fbd2 	bl	8002ab8 <_ZN17TypedTextDatabase8getFontsEv>
 8002314:	6840      	ldr	r0, [r0, #4]
 8002316:	e7f6      	b.n	8002306 <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002318:	f000 fbce 	bl	8002ab8 <_ZN17TypedTextDatabase8getFontsEv>
 800231c:	6880      	ldr	r0, [r0, #8]
 800231e:	e7f2      	b.n	8002306 <_ZN23ApplicationFontProvider7getFontEt+0xe>

08002320 <_ZN23ApplicationFontProviderD0Ev>:
 8002320:	b510      	push	{r4, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8002326:	6003      	str	r3, [r0, #0]
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 800232a:	6003      	str	r3, [r0, #0]
 800232c:	2104      	movs	r1, #4
 800232e:	f015 fc3a 	bl	8017ba6 <_ZdlPvj>
 8002332:	4620      	mov	r0, r4
 8002334:	bd10      	pop	{r4, pc}
 8002336:	bf00      	nop
 8002338:	080197c4 	.word	0x080197c4
 800233c:	08019420 	.word	0x08019420

08002340 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002340:	4800      	ldr	r0, [pc, #0]	; (8002344 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002342:	4770      	bx	lr
 8002344:	080197d0 	.word	0x080197d0

08002348 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002348:	2001      	movs	r0, #1
 800234a:	4770      	bx	lr

0800234c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800234c:	b169      	cbz	r1, 800236a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800234e:	b510      	push	{r4, lr}
 8002350:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002356:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	689c      	ldr	r4, [r3, #8]
 800235e:	f10d 0303 	add.w	r3, sp, #3
 8002362:	aa01      	add	r2, sp, #4
 8002364:	47a0      	blx	r4
        return glyph;
    }
 8002366:	b002      	add	sp, #8
 8002368:	bd10      	pop	{r4, pc}
            return 0;
 800236a:	2000      	movs	r0, #0
    }
 800236c:	4770      	bx	lr

0800236e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800236e:	8940      	ldrh	r0, [r0, #10]
 8002370:	4770      	bx	lr

08002372 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002372:	8980      	ldrh	r0, [r0, #12]
 8002374:	4770      	bx	lr

08002376 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002376:	8880      	ldrh	r0, [r0, #4]
 8002378:	4770      	bx	lr

0800237a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800237a:	8883      	ldrh	r3, [r0, #4]
 800237c:	7980      	ldrb	r0, [r0, #6]
 800237e:	4418      	add	r0, r3
    }
 8002380:	b280      	uxth	r0, r0
 8002382:	4770      	bx	lr

08002384 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002384:	79c0      	ldrb	r0, [r0, #7]
    }
 8002386:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800238a:	4770      	bx	lr

0800238c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800238c:	79c0      	ldrb	r0, [r0, #7]
    }
 800238e:	09c0      	lsrs	r0, r0, #7
 8002390:	4770      	bx	lr
	...

08002394 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002394:	4b01      	ldr	r3, [pc, #4]	; (800239c <_ZN8touchgfx10TransitionD1Ev+0x8>)
 8002396:	6003      	str	r3, [r0, #0]
    }
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	08019b18 	.word	0x08019b18

080023a0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 80023a0:	4770      	bx	lr

080023a2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80023a2:	4770      	bx	lr

080023a4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80023a4:	4770      	bx	lr

080023a6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80023a6:	6041      	str	r1, [r0, #4]
    }
 80023a8:	4770      	bx	lr

080023aa <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80023aa:	2301      	movs	r3, #1
 80023ac:	7203      	strb	r3, [r0, #8]
    }
 80023ae:	4770      	bx	lr

080023b0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80023b0:	4a02      	ldr	r2, [pc, #8]	; (80023bc <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 80023b2:	6002      	str	r2, [r0, #0]
    {
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 80023b6:	6002      	str	r2, [r0, #0]
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	08019b3c 	.word	0x08019b3c
 80023c0:	08019b18 	.word	0x08019b18

080023c4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 80023ca:	6003      	str	r3, [r0, #0]
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 80023ce:	6003      	str	r3, [r0, #0]
 80023d0:	210c      	movs	r1, #12
 80023d2:	f015 fbe8 	bl	8017ba6 <_ZdlPvj>
 80023d6:	4620      	mov	r0, r4
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	bf00      	nop
 80023dc:	08019b3c 	.word	0x08019b3c
 80023e0:	08019b18 	.word	0x08019b18

080023e4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80023e4:	b510      	push	{r4, lr}
 80023e6:	4604      	mov	r4, r0
    {
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 80023ea:	6003      	str	r3, [r0, #0]
    }
 80023ec:	210c      	movs	r1, #12
 80023ee:	f015 fbda 	bl	8017ba6 <_ZdlPvj>
 80023f2:	4620      	mov	r0, r4
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	bf00      	nop
 80023f8:	08019b18 	.word	0x08019b18

080023fc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80023fc:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80023fe:	f00a fead 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 8002402:	f00b fa51 	bl	800d8a8 <_ZN8touchgfx11Application10invalidateEv>
    }
 8002406:	bd08      	pop	{r3, pc}

08002408 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002410:	f00a fec6 	bl	800d1a0 <_ZN8touchgfx11ApplicationC1Ev>
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	2100      	movs	r1, #0
 800241a:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 800241e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 8002424:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8002428:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800242c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8002432:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002436:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 800243a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 800243e:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002442:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 8002446:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 800244a:	4d0d      	ldr	r5, [pc, #52]	; (8002480 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 800244c:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800245a:	b10a      	cbz	r2, 8002460 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 800245c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800245e:	b900      	cbnz	r0, 8002462 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 8002460:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002462:	f010 fd7c 	bl	8012f5e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002466:	4620      	mov	r0, r4
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	bf00      	nop
 800246c:	08019484 	.word	0x08019484
 8002470:	2400ae58 	.word	0x2400ae58
 8002474:	080194e8 	.word	0x080194e8
 8002478:	0801946c 	.word	0x0801946c
 800247c:	080194d0 	.word	0x080194d0
 8002480:	2400ae0c 	.word	0x2400ae0c

08002484 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002484:	b410      	push	{r4}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 800248c:	9206      	str	r2, [sp, #24]
 800248e:	2200      	movs	r2, #0
 8002490:	9207      	str	r2, [sp, #28]
 8002492:	46ec      	mov	ip, sp
 8002494:	aa08      	add	r2, sp, #32
 8002496:	e912 0003 	ldmdb	r2, {r0, r1}
 800249a:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 800249e:	4c0c      	ldr	r4, [pc, #48]	; (80024d0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 80024a0:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 80024a4:	9202      	str	r2, [sp, #8]
 80024a6:	9303      	str	r3, [sp, #12]
 80024a8:	aa04      	add	r2, sp, #16
 80024aa:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80024ae:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 80024b2:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 80024b6:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 80024ba:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 80024bc:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80024c0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80024c4:	b009      	add	sp, #36	; 0x24
 80024c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	08002629 	.word	0x08002629
 80024d0:	0801946c 	.word	0x0801946c
 80024d4:	080194d0 	.word	0x080194d0

080024d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80024d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	4607      	mov	r7, r0
 80024de:	4688      	mov	r8, r1
 80024e0:	4615      	mov	r5, r2
 80024e2:	4699      	mov	r9, r3
 80024e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024e8:	6890      	ldr	r0, [r2, #8]
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4798      	blx	r3
 80024f0:	2897      	cmp	r0, #151	; 0x97
 80024f2:	d976      	bls.n	80025e2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024f4:	6868      	ldr	r0, [r5, #4]
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4798      	blx	r3
 80024fc:	280f      	cmp	r0, #15
 80024fe:	d976      	bls.n	80025ee <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002500:	68e8      	ldr	r0, [r5, #12]
 8002502:	6803      	ldr	r3, [r0, #0]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4798      	blx	r3
 8002508:	280b      	cmp	r0, #11
 800250a:	d976      	bls.n	80025fa <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 800250c:	f00a fe26 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 8002510:	f00a fe2a 	bl	800d168 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002514:	f8d9 0000 	ldr.w	r0, [r9]
 8002518:	b110      	cbz	r0, 8002520 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4798      	blx	r3
    if (*currentTrans)
 8002520:	f8d9 0000 	ldr.w	r0, [r9]
 8002524:	b110      	cbz	r0, 800252c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 8002526:	6803      	ldr	r3, [r0, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4798      	blx	r3
    if (*currentScreen)
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	b110      	cbz	r0, 8002536 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 8002530:	6803      	ldr	r3, [r0, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	4798      	blx	r3
    if (*currentPresenter)
 8002536:	f8d8 0000 	ldr.w	r0, [r8]
 800253a:	b110      	cbz	r0, 8002542 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4798      	blx	r3
    if (*currentScreen)
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	b110      	cbz	r0, 800254c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 8002546:	6803      	ldr	r3, [r0, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4798      	blx	r3
    if (*currentPresenter)
 800254c:	f8d8 0000 	ldr.w	r0, [r8]
 8002550:	b110      	cbz	r0, 8002558 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002558:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800255a:	6803      	ldr	r3, [r0, #0]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2100      	movs	r1, #0
 8002560:	4798      	blx	r3
 8002562:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002566:	6003      	str	r3, [r0, #0]
 8002568:	f04f 0b00 	mov.w	fp, #0
 800256c:	f8c0 b004 	str.w	fp, [r0, #4]
 8002570:	f880 b008 	strb.w	fp, [r0, #8]
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002576:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002578:	68a8      	ldr	r0, [r5, #8]
 800257a:	6803      	ldr	r3, [r0, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	4659      	mov	r1, fp
 8002580:	4798      	blx	r3
 8002582:	4606      	mov	r6, r0
 8002584:	f000 fd08 	bl	8002f98 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002588:	6868      	ldr	r0, [r5, #4]
 800258a:	6803      	ldr	r3, [r0, #0]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	4659      	mov	r1, fp
 8002590:	4798      	blx	r3
 8002592:	4605      	mov	r5, r0
 8002594:	4631      	mov	r1, r6
 8002596:	f000 fc87 	bl	8002ea8 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 800259a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800259e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 80025a2:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	d02e      	beq.n	8002606 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80025a8:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80025aa:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80025ae:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80025b2:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 80025b4:	6833      	ldr	r3, [r6, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4630      	mov	r0, r6
 80025ba:	4798      	blx	r3
    newPresenter->activate();
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4628      	mov	r0, r5
 80025c2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80025c4:	4621      	mov	r1, r4
 80025c6:	4630      	mov	r0, r6
 80025c8:	f00c f9ae 	bl	800e928 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	4620      	mov	r0, r4
 80025d2:	4798      	blx	r3
    newTransition->invalidate();
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4620      	mov	r0, r4
 80025da:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80025dc:	4628      	mov	r0, r5
 80025de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025e6:	21a3      	movs	r1, #163	; 0xa3
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025ea:	f015 fb0b 	bl	8017c04 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025f2:	21a4      	movs	r1, #164	; 0xa4
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80025f6:	f015 fb05 	bl	8017c04 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80025fe:	21a5      	movs	r1, #165	; 0xa5
 8002600:	4806      	ldr	r0, [pc, #24]	; (800261c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8002602:	f015 faff 	bl	8017c04 <__assert_func>
    model->bind(newPresenter);
 8002606:	462b      	mov	r3, r5
 8002608:	e7cf      	b.n	80025aa <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 800260a:	bf00      	nop
 800260c:	08019b18 	.word	0x08019b18
 8002610:	08019b3c 	.word	0x08019b3c
 8002614:	080197e4 	.word	0x080197e4
 8002618:	08019874 	.word	0x08019874
 800261c:	08019980 	.word	0x08019980
 8002620:	080199c8 	.word	0x080199c8
 8002624:	08019a6c 	.word	0x08019a6c

08002628 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 8002628:	b500      	push	{lr}
 800262a:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800262c:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8002634:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002638:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 800263e:	f7ff ff4b 	bl	80024d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002642:	b003      	add	sp, #12
 8002644:	f85d fb04 	ldr.w	pc, [sp], #4
 8002648:	2400ae4c 	.word	0x2400ae4c
 800264c:	2400ae48 	.word	0x2400ae48

08002650 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002650:	6a00      	ldr	r0, [r0, #32]
 8002652:	4770      	bx	lr

08002654 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002654:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002656:	4770      	bx	lr

08002658 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 800265a:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800265e:	6002      	str	r2, [r0, #0]
    {
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8002662:	6002      	str	r2, [r0, #0]
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	08019b60 	.word	0x08019b60
 800266c:	0801a3f0 	.word	0x0801a3f0
 8002670:	08019da0 	.word	0x08019da0

08002674 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8002674:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002676:	888b      	ldrh	r3, [r1, #4]
 8002678:	0adb      	lsrs	r3, r3, #11
 800267a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800267e:	680b      	ldr	r3, [r1, #0]
}
 8002680:	4418      	add	r0, r3
 8002682:	4770      	bx	lr

08002684 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8002684:	4694      	mov	ip, r2
 8002686:	b1da      	cbz	r2, 80026c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8002688:	7b13      	ldrb	r3, [r2, #12]
 800268a:	b1db      	cbz	r3, 80026c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800268c:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800268e:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8002692:	0200      	lsls	r0, r0, #8
 8002694:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002698:	f89c c00b 	ldrb.w	ip, [ip, #11]
 800269c:	ea40 000c 	orr.w	r0, r0, ip
 80026a0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b17b      	cbz	r3, 80026c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80026a8:	8810      	ldrh	r0, [r2, #0]
 80026aa:	4288      	cmp	r0, r1
 80026ac:	d005      	beq.n	80026ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 80026ae:	4288      	cmp	r0, r1
 80026b0:	d80c      	bhi.n	80026cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3204      	adds	r2, #4
 80026b8:	e7f5      	b.n	80026a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 80026ba:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80026be:	4770      	bx	lr
        return 0;
 80026c0:	2000      	movs	r0, #0
 80026c2:	4770      	bx	lr
 80026c4:	2000      	movs	r0, #0
 80026c6:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 80026c8:	2000      	movs	r0, #0
 80026ca:	4770      	bx	lr
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	4770      	bx	lr

080026d0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4604      	mov	r4, r0
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80026d6:	6003      	str	r3, [r0, #0]
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80026da:	6003      	str	r3, [r0, #0]
    {
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	2128      	movs	r1, #40	; 0x28
 80026e2:	f015 fa60 	bl	8017ba6 <_ZdlPvj>
 80026e6:	4620      	mov	r0, r4
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	bf00      	nop
 80026ec:	08019b60 	.word	0x08019b60
 80026f0:	0801a3f0 	.word	0x0801a3f0
 80026f4:	08019da0 	.word	0x08019da0

080026f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80026f8:	b530      	push	{r4, r5, lr}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80026fe:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8002702:	9506      	str	r5, [sp, #24]
 8002704:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8002708:	9505      	str	r5, [sp, #20]
 800270a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800270e:	9504      	str	r5, [sp, #16]
 8002710:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002714:	9503      	str	r5, [sp, #12]
 8002716:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800271a:	9502      	str	r5, [sp, #8]
 800271c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8002720:	9501      	str	r5, [sp, #4]
 8002722:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8002726:	9500      	str	r5, [sp, #0]
 8002728:	f00b fd5e 	bl	800e1e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 800272e:	6023      	str	r3, [r4, #0]
 8002730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002732:	61a3      	str	r3, [r4, #24]
 8002734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002736:	61e3      	str	r3, [r4, #28]
 8002738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800273a:	6223      	str	r3, [r4, #32]
 800273c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800273e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002740:	4620      	mov	r0, r4
 8002742:	b009      	add	sp, #36	; 0x24
 8002744:	bd30      	pop	{r4, r5, pc}
 8002746:	bf00      	nop
 8002748:	08019b60 	.word	0x08019b60

0800274c <__tcf_0>:
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <__tcf_0+0x10>)
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__tcf_0+0x14>)
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__tcf_0+0x18>)
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__tcf_0+0x1c>)
 8002758:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800275a:	4770      	bx	lr
 800275c:	24001448 	.word	0x24001448
 8002760:	08019b60 	.word	0x08019b60
 8002764:	0801a3f0 	.word	0x0801a3f0
 8002768:	08019da0 	.word	0x08019da0

0800276c <_Z23getFont_verdana_10_4bppv>:
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x60>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	f3bf 8f5b 	dmb	ish
 8002774:	f013 0f01 	tst.w	r3, #1
 8002778:	d001      	beq.n	800277e <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 800277a:	4815      	ldr	r0, [pc, #84]	; (80027d0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800277c:	4770      	bx	lr
{
 800277e:	b500      	push	{lr}
 8002780:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002782:	4812      	ldr	r0, [pc, #72]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x60>)
 8002784:	f015 fa11 	bl	8017baa <__cxa_guard_acquire>
 8002788:	b918      	cbnz	r0, 8002792 <_Z23getFont_verdana_10_4bppv+0x26>
}
 800278a:	4811      	ldr	r0, [pc, #68]	; (80027d0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800278c:	b00d      	add	sp, #52	; 0x34
 800278e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002792:	2300      	movs	r3, #0
 8002794:	930a      	str	r3, [sp, #40]	; 0x28
 8002796:	9309      	str	r3, [sp, #36]	; 0x24
 8002798:	9308      	str	r3, [sp, #32]
 800279a:	223f      	movs	r2, #63	; 0x3f
 800279c:	9207      	str	r2, [sp, #28]
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <_Z23getFont_verdana_10_4bppv+0x68>)
 80027a0:	9206      	str	r2, [sp, #24]
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80027a4:	9205      	str	r2, [sp, #20]
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	9303      	str	r3, [sp, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	9202      	str	r2, [sp, #8]
 80027ae:	2104      	movs	r1, #4
 80027b0:	9101      	str	r1, [sp, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	230a      	movs	r3, #10
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <_Z23getFont_verdana_10_4bppv+0x70>)
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <_Z23getFont_verdana_10_4bppv+0x64>)
 80027ba:	f7ff ff9d 	bl	80026f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <_Z23getFont_verdana_10_4bppv+0x74>)
 80027c0:	f015 fa3e 	bl	8017c40 <atexit>
 80027c4:	4801      	ldr	r0, [pc, #4]	; (80027cc <_Z23getFont_verdana_10_4bppv+0x60>)
 80027c6:	f015 f9fc 	bl	8017bc2 <__cxa_guard_release>
 80027ca:	e7de      	b.n	800278a <_Z23getFont_verdana_10_4bppv+0x1e>
 80027cc:	24001444 	.word	0x24001444
 80027d0:	24001448 	.word	0x24001448
 80027d4:	0801a770 	.word	0x0801a770
 80027d8:	0801a77c 	.word	0x0801a77c
 80027dc:	90000178 	.word	0x90000178
 80027e0:	0800274d 	.word	0x0800274d

080027e4 <__tcf_0>:
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <__tcf_0+0x10>)
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__tcf_0+0x14>)
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__tcf_0+0x18>)
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <__tcf_0+0x1c>)
 80027f0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80027f2:	4770      	bx	lr
 80027f4:	24001474 	.word	0x24001474
 80027f8:	08019b60 	.word	0x08019b60
 80027fc:	0801a3f0 	.word	0x0801a3f0
 8002800:	08019da0 	.word	0x08019da0

08002804 <_Z23getFont_verdana_20_4bppv>:
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f3bf 8f5b 	dmb	ish
 800280c:	f013 0f01 	tst.w	r3, #1
 8002810:	d001      	beq.n	8002816 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8002812:	4815      	ldr	r0, [pc, #84]	; (8002868 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002814:	4770      	bx	lr
{
 8002816:	b500      	push	{lr}
 8002818:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800281a:	4812      	ldr	r0, [pc, #72]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x60>)
 800281c:	f015 f9c5 	bl	8017baa <__cxa_guard_acquire>
 8002820:	b918      	cbnz	r0, 800282a <_Z23getFont_verdana_20_4bppv+0x26>
}
 8002822:	4811      	ldr	r0, [pc, #68]	; (8002868 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002824:	b00d      	add	sp, #52	; 0x34
 8002826:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800282a:	2300      	movs	r3, #0
 800282c:	930a      	str	r3, [sp, #40]	; 0x28
 800282e:	9309      	str	r3, [sp, #36]	; 0x24
 8002830:	9308      	str	r3, [sp, #32]
 8002832:	223f      	movs	r2, #63	; 0x3f
 8002834:	9207      	str	r2, [sp, #28]
 8002836:	4a0d      	ldr	r2, [pc, #52]	; (800286c <_Z23getFont_verdana_20_4bppv+0x68>)
 8002838:	9206      	str	r2, [sp, #24]
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800283c:	9205      	str	r2, [sp, #20]
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	9202      	str	r2, [sp, #8]
 8002846:	2104      	movs	r1, #4
 8002848:	9101      	str	r1, [sp, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2314      	movs	r3, #20
 800284e:	4909      	ldr	r1, [pc, #36]	; (8002874 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002852:	f7ff ff51 	bl	80026f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <_Z23getFont_verdana_20_4bppv+0x74>)
 8002858:	f015 f9f2 	bl	8017c40 <atexit>
 800285c:	4801      	ldr	r0, [pc, #4]	; (8002864 <_Z23getFont_verdana_20_4bppv+0x60>)
 800285e:	f015 f9b0 	bl	8017bc2 <__cxa_guard_release>
 8002862:	e7de      	b.n	8002822 <_Z23getFont_verdana_20_4bppv+0x1e>
 8002864:	24001470 	.word	0x24001470
 8002868:	24001474 	.word	0x24001474
 800286c:	0801a774 	.word	0x0801a774
 8002870:	0801a780 	.word	0x0801a780
 8002874:	90000188 	.word	0x90000188
 8002878:	080027e5 	.word	0x080027e5

0800287c <__tcf_0>:
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <__tcf_0+0x10>)
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__tcf_0+0x14>)
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__tcf_0+0x18>)
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__tcf_0+0x1c>)
 8002888:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800288a:	4770      	bx	lr
 800288c:	240014a0 	.word	0x240014a0
 8002890:	08019b60 	.word	0x08019b60
 8002894:	0801a3f0 	.word	0x0801a3f0
 8002898:	08019da0 	.word	0x08019da0

0800289c <_Z23getFont_verdana_40_4bppv>:
 800289c:	4b17      	ldr	r3, [pc, #92]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x60>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f3bf 8f5b 	dmb	ish
 80028a4:	f013 0f01 	tst.w	r3, #1
 80028a8:	d001      	beq.n	80028ae <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <_Z23getFont_verdana_40_4bppv+0x64>)
 80028ac:	4770      	bx	lr
{
 80028ae:	b500      	push	{lr}
 80028b0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80028b2:	4812      	ldr	r0, [pc, #72]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x60>)
 80028b4:	f015 f979 	bl	8017baa <__cxa_guard_acquire>
 80028b8:	b918      	cbnz	r0, 80028c2 <_Z23getFont_verdana_40_4bppv+0x26>
}
 80028ba:	4811      	ldr	r0, [pc, #68]	; (8002900 <_Z23getFont_verdana_40_4bppv+0x64>)
 80028bc:	b00d      	add	sp, #52	; 0x34
 80028be:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80028c2:	2300      	movs	r3, #0
 80028c4:	930a      	str	r3, [sp, #40]	; 0x28
 80028c6:	9309      	str	r3, [sp, #36]	; 0x24
 80028c8:	9308      	str	r3, [sp, #32]
 80028ca:	223f      	movs	r2, #63	; 0x3f
 80028cc:	9207      	str	r2, [sp, #28]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <_Z23getFont_verdana_40_4bppv+0x68>)
 80028d0:	9206      	str	r2, [sp, #24]
 80028d2:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80028d4:	9205      	str	r2, [sp, #20]
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	9303      	str	r3, [sp, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	9202      	str	r2, [sp, #8]
 80028de:	2104      	movs	r1, #4
 80028e0:	9101      	str	r1, [sp, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2328      	movs	r3, #40	; 0x28
 80028e6:	4909      	ldr	r1, [pc, #36]	; (800290c <_Z23getFont_verdana_40_4bppv+0x70>)
 80028e8:	4805      	ldr	r0, [pc, #20]	; (8002900 <_Z23getFont_verdana_40_4bppv+0x64>)
 80028ea:	f7ff ff05 	bl	80026f8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80028ee:	4808      	ldr	r0, [pc, #32]	; (8002910 <_Z23getFont_verdana_40_4bppv+0x74>)
 80028f0:	f015 f9a6 	bl	8017c40 <atexit>
 80028f4:	4801      	ldr	r0, [pc, #4]	; (80028fc <_Z23getFont_verdana_40_4bppv+0x60>)
 80028f6:	f015 f964 	bl	8017bc2 <__cxa_guard_release>
 80028fa:	e7de      	b.n	80028ba <_Z23getFont_verdana_40_4bppv+0x1e>
 80028fc:	2400149c 	.word	0x2400149c
 8002900:	240014a0 	.word	0x240014a0
 8002904:	0801a778 	.word	0x0801a778
 8002908:	0801a784 	.word	0x0801a784
 800290c:	90000198 	.word	0x90000198
 8002910:	0800287d 	.word	0x0800287d

08002914 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 8002914:	2000      	movs	r0, #0
 8002916:	4770      	bx	lr

08002918 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr

0800291c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 800291c:	2000      	movs	r0, #0
 800291e:	4770      	bx	lr

08002920 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002920:	b40e      	push	{r1, r2, r3}
 8002922:	b500      	push	{lr}
 8002924:	b082      	sub	sp, #8
 8002926:	ab03      	add	r3, sp, #12
 8002928:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800292c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800292e:	2100      	movs	r1, #0
 8002930:	f00b fa8a 	bl	800de48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002934:	b002      	add	sp, #8
 8002936:	f85d eb04 	ldr.w	lr, [sp], #4
 800293a:	b003      	add	sp, #12
 800293c:	4770      	bx	lr

0800293e <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800293e:	b40c      	push	{r2, r3}
 8002940:	b500      	push	{lr}
 8002942:	b083      	sub	sp, #12
 8002944:	ab04      	add	r3, sp, #16
 8002946:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800294a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800294c:	f00b fa7c 	bl	800de48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002950:	b003      	add	sp, #12
 8002952:	f85d eb04 	ldr.w	lr, [sp], #4
 8002956:	b002      	add	sp, #8
 8002958:	4770      	bx	lr
	...

0800295c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800295c:	b510      	push	{r4, lr}
 800295e:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002960:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002962:	b133      	cbz	r3, 8002972 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002964:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002966:	b143      	cbz	r3, 800297a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8002968:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800296a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800296e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002970:	b94b      	cbnz	r3, 8002986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002972:	4620      	mov	r0, r4
 8002974:	f00c fba6 	bl	800f0c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8002978:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800297e:	21c0      	movs	r1, #192	; 0xc0
 8002980:	481c      	ldr	r0, [pc, #112]	; (80029f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8002982:	f015 f93f 	bl	8017c04 <__assert_func>
        substituteGlyphs();
 8002986:	f00c fc9b 	bl	800f2c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800298a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800298c:	2801      	cmp	r0, #1
 800298e:	d91d      	bls.n	80029cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8002990:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8002992:	1c4b      	adds	r3, r1, #1
 8002994:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002996:	2b09      	cmp	r3, #9
 8002998:	d81e      	bhi.n	80029d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800299a:	461a      	mov	r2, r3
 800299c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80029a0:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80029a4:	f640 123f 	movw	r2, #2367	; 0x93f
 80029a8:	4594      	cmp	ip, r2
 80029aa:	d1e2      	bne.n	8002972 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80029ac:	b1b8      	cbz	r0, 80029de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 80029ae:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80029b2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80029b4:	2b09      	cmp	r3, #9
 80029b6:	d900      	bls.n	80029ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 80029b8:	2300      	movs	r3, #0
 80029ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80029be:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80029c0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80029c4:	f640 133f 	movw	r3, #2367	; 0x93f
 80029c8:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 80029ca:	e7d2      	b.n	8002972 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80029d0:	21c5      	movs	r1, #197	; 0xc5
 80029d2:	4808      	ldr	r0, [pc, #32]	; (80029f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029d4:	f015 f916 	bl	8017c04 <__assert_func>
            return buffer[index < size ? index : index - size];
 80029d8:	f1a3 020a 	sub.w	r2, r3, #10
 80029dc:	e7de      	b.n	800299c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80029de:	4b03      	ldr	r3, [pc, #12]	; (80029ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80029e2:	21c0      	movs	r1, #192	; 0xc0
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80029e6:	f015 f90d 	bl	8017c04 <__assert_func>
 80029ea:	bf00      	nop
 80029ec:	08019bb0 	.word	0x08019bb0
 80029f0:	08019bbc 	.word	0x08019bbc
 80029f4:	08019c68 	.word	0x08019c68
 80029f8:	08019cb4 	.word	0x08019cb4
 80029fc:	08019cc4 	.word	0x08019cc4

08002a00 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8002a00:	b508      	push	{r3, lr}
    fillInputBuffer();
 8002a02:	f00c fb28 	bl	800f056 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8002a06:	bd08      	pop	{r3, pc}

08002a08 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002a08:	bb40      	cbnz	r0, 8002a5c <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 8002a0a:	b538      	push	{r3, r4, r5, lr}
 8002a0c:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002a10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a14:	b1c3      	cbz	r3, 8002a48 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	4419      	add	r1, r3
 8002a1a:	4812      	ldr	r0, [pc, #72]	; (8002a64 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002a1c:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	4419      	add	r1, r3
 8002a22:	4811      	ldr	r0, [pc, #68]	; (8002a68 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002a24:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002a26:	689c      	ldr	r4, [r3, #8]
 8002a28:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 8002a2a:	b164      	cbz	r4, 8002a46 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002a2e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002a30:	f000 f842 	bl	8002ab8 <_ZN17TypedTextDatabase8getFontsEv>
 8002a34:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002a36:	f000 f83d 	bl	8002ab4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002a3c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002a40:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002a44:	8018      	strh	r0, [r3, #0]
    }
}
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002a4a:	490c      	ldr	r1, [pc, #48]	; (8002a7c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002a4c:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002a50:	490b      	ldr	r1, [pc, #44]	; (8002a80 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8002a52:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8002a56:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002a5a:	e7e6      	b.n	8002a2a <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	240014c8 	.word	0x240014c8
 8002a64:	240014cc 	.word	0x240014cc
 8002a68:	240014d0 	.word	0x240014d0
 8002a6c:	240014d4 	.word	0x240014d4
 8002a70:	2400ae5c 	.word	0x2400ae5c
 8002a74:	2400ae64 	.word	0x2400ae64
 8002a78:	2400ae60 	.word	0x2400ae60
 8002a7c:	900001ac 	.word	0x900001ac
 8002a80:	900001a8 	.word	0x900001a8
 8002a84:	900001b4 	.word	0x900001b4

08002a88 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002a88:	2801      	cmp	r0, #1
 8002a8a:	d000      	beq.n	8002a8e <_Z41__static_initialization_and_destruction_0ii+0x6>
 8002a8c:	4770      	bx	lr
 8002a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a92:	4299      	cmp	r1, r3
 8002a94:	d1fa      	bne.n	8002a8c <_Z41__static_initialization_and_destruction_0ii+0x4>
 8002a96:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8002a98:	f7ff feb4 	bl	8002804 <_Z23getFont_verdana_20_4bppv>
};
 8002a9c:	4c04      	ldr	r4, [pc, #16]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002a9e:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002aa0:	f7ff fefc 	bl	800289c <_Z23getFont_verdana_40_4bppv>
};
 8002aa4:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002aa6:	f7ff fe61 	bl	800276c <_Z23getFont_verdana_10_4bppv>
};
 8002aaa:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8002aac:	bd10      	pop	{r4, pc}
 8002aae:	bf00      	nop
 8002ab0:	240014d8 	.word	0x240014d8

08002ab4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8002ab8:	4800      	ldr	r0, [pc, #0]	; (8002abc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002aba:	4770      	bx	lr
 8002abc:	240014d8 	.word	0x240014d8

08002ac0 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8002ac0:	b508      	push	{r3, lr}
 8002ac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff ffde 	bl	8002a88 <_Z41__static_initialization_and_destruction_0ii>
 8002acc:	bd08      	pop	{r3, pc}

08002ace <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8002ace:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8002ad0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002ad4:	b113      	cbz	r3, 8002adc <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4798      	blx	r3
        }
    }
 8002adc:	bd08      	pop	{r3, pc}

08002ade <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002ade:	2000      	movs	r0, #0
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002ae2:	8081      	strh	r1, [r0, #4]
    }
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002ae6:	80c1      	strh	r1, [r0, #6]
    }
 8002ae8:	4770      	bx	lr

08002aea <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002aea:	8101      	strh	r1, [r0, #8]
    }
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002aee:	8141      	strh	r1, [r0, #10]
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002af2:	4770      	bx	lr

08002af4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af4:	4770      	bx	lr

08002af6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af6:	4770      	bx	lr

08002af8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002af8:	4770      	bx	lr

08002afa <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002afa:	4770      	bx	lr

08002afc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002afc:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002afe:	6804      	ldr	r4, [r0, #0]
 8002b00:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8002b02:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002b06:	eba1 010c 	sub.w	r1, r1, ip
 8002b0a:	88c3      	ldrh	r3, [r0, #6]
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	b212      	sxth	r2, r2
 8002b10:	b209      	sxth	r1, r1
 8002b12:	47a0      	blx	r4
    }
 8002b14:	bd10      	pop	{r4, pc}

08002b16 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002b1c:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8002b1e:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002b24:	6010      	str	r0, [r2, #0]
    }
 8002b26:	4770      	bx	lr

08002b28 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002b28:	4770      	bx	lr

08002b2a <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002b2a:	4770      	bx	lr

08002b2c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002b2c:	4770      	bx	lr

08002b2e <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002b2e:	4770      	bx	lr

08002b30 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002b30:	4770      	bx	lr

08002b32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8002b32:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002b36:	b11a      	cbz	r2, 8002b40 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8002b38:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002b3c:	b102      	cbz	r2, 8002b40 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002b3e:	6018      	str	r0, [r3, #0]
        }
    }
 8002b40:	4770      	bx	lr
	...

08002b44 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8002b46:	6002      	str	r2, [r0, #0]
    {
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8002b4a:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8002b4e:	6042      	str	r2, [r0, #4]
    {
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8002b52:	6042      	str	r2, [r0, #4]
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	08019e5c 	.word	0x08019e5c
 8002b5c:	0801a484 	.word	0x0801a484
 8002b60:	0801a028 	.word	0x0801a028
 8002b64:	0801a388 	.word	0x0801a388

08002b68 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8002b68:	b410      	push	{r4}
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8002b6c:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8002b70:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8002b72:	490b      	ldr	r1, [pc, #44]	; (8002ba0 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8002b74:	66c1      	str	r1, [r0, #108]	; 0x6c
 8002b76:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8002b78:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8002b7a:	4c0b      	ldr	r4, [pc, #44]	; (8002ba8 <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8002b7c:	6404      	str	r4, [r0, #64]	; 0x40
 8002b7e:	6401      	str	r1, [r0, #64]	; 0x40
 8002b80:	6402      	str	r2, [r0, #64]	; 0x40
 8002b82:	490a      	ldr	r1, [pc, #40]	; (8002bac <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8002b84:	6001      	str	r1, [r0, #0]
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8002b88:	6001      	str	r1, [r0, #0]
 8002b8a:	490a      	ldr	r1, [pc, #40]	; (8002bb4 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8002b8c:	6041      	str	r1, [r0, #4]
 8002b8e:	6042      	str	r2, [r0, #4]
 8002b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	08019e90 	.word	0x08019e90
 8002b9c:	0801a278 	.word	0x0801a278
 8002ba0:	08019df4 	.word	0x08019df4
 8002ba4:	0801a388 	.word	0x0801a388
 8002ba8:	0801a210 	.word	0x0801a210
 8002bac:	08019e5c 	.word	0x08019e5c
 8002bb0:	0801a484 	.word	0x0801a484
 8002bb4:	0801a028 	.word	0x0801a028

08002bb8 <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8002bb8:	4770      	bx	lr
	...

08002bbc <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8002bc2:	6003      	str	r3, [r0, #0]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8002bc6:	6003      	str	r3, [r0, #0]
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8002bca:	6043      	str	r3, [r0, #4]
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 8002bce:	6043      	str	r3, [r0, #4]
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	f014 ffe8 	bl	8017ba6 <_ZdlPvj>
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	bf00      	nop
 8002bdc:	08019e5c 	.word	0x08019e5c
 8002be0:	0801a484 	.word	0x0801a484
 8002be4:	0801a028 	.word	0x0801a028
 8002be8:	0801a388 	.word	0x0801a388

08002bec <_ZN18mainScreenViewBaseD0Ev>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	4604      	mov	r4, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 8002bf2:	6003      	str	r3, [r0, #0]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 8002bf6:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 8002bfa:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <_ZN18mainScreenViewBaseD0Ev+0x40>)
 8002bfe:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002c00:	490b      	ldr	r1, [pc, #44]	; (8002c30 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 8002c02:	6401      	str	r1, [r0, #64]	; 0x40
 8002c04:	6402      	str	r2, [r0, #64]	; 0x40
 8002c06:	6403      	str	r3, [r0, #64]	; 0x40
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 8002c0a:	6002      	str	r2, [r0, #0]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 8002c0e:	6002      	str	r2, [r0, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <_ZN18mainScreenViewBaseD0Ev+0x50>)
 8002c12:	6042      	str	r2, [r0, #4]
 8002c14:	6043      	str	r3, [r0, #4]
 8002c16:	2198      	movs	r1, #152	; 0x98
 8002c18:	f014 ffc5 	bl	8017ba6 <_ZdlPvj>
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	bd10      	pop	{r4, pc}
 8002c20:	08019e90 	.word	0x08019e90
 8002c24:	0801a278 	.word	0x0801a278
 8002c28:	08019df4 	.word	0x08019df4
 8002c2c:	0801a388 	.word	0x0801a388
 8002c30:	0801a210 	.word	0x0801a210
 8002c34:	08019e5c 	.word	0x08019e5c
 8002c38:	0801a484 	.word	0x0801a484
 8002c3c:	0801a028 	.word	0x0801a028

08002c40 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	b083      	sub	sp, #12
 8002c46:	4607      	mov	r7, r0
        : presenter(0)
 8002c48:	f00b fcc2 	bl	800e5d0 <_ZN8touchgfx6ScreenC1Ev>
 8002c4c:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	2400      	movs	r4, #0
 8002c52:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002c54:	463d      	mov	r5, r7
 8002c56:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8002c58:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002c5c:	f04f 0926 	mov.w	r9, #38	; 0x26
 8002c60:	464a      	mov	r2, r9
 8002c62:	4621      	mov	r1, r4
 8002c64:	4628      	mov	r0, r5
 8002c66:	f015 f953 	bl	8017f10 <memset>
          visible(true)
 8002c6a:	f8df b114 	ldr.w	fp, [pc, #276]	; 8002d80 <_ZN18mainScreenViewBaseC1Ev+0x140>
 8002c6e:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8002c72:	80ac      	strh	r4, [r5, #4]
 8002c74:	80ec      	strh	r4, [r5, #6]
 8002c76:	812c      	strh	r4, [r5, #8]
 8002c78:	816c      	strh	r4, [r5, #10]
 8002c7a:	81ac      	strh	r4, [r5, #12]
 8002c7c:	81ec      	strh	r4, [r5, #14]
 8002c7e:	822c      	strh	r4, [r5, #16]
 8002c80:	826c      	strh	r4, [r5, #18]
 8002c82:	616c      	str	r4, [r5, #20]
 8002c84:	61ac      	str	r4, [r5, #24]
 8002c86:	61ec      	str	r4, [r5, #28]
 8002c88:	842c      	strh	r4, [r5, #32]
 8002c8a:	846c      	strh	r4, [r5, #34]	; 0x22
 8002c8c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8002c90:	f04f 0a01 	mov.w	sl, #1
 8002c94:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9c:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <_ZN18mainScreenViewBaseC1Ev+0x138>)
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca0:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8002ca4:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8002ca8:	62ac      	str	r4, [r5, #40]	; 0x28
 8002caa:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb2:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002cb6:	464a      	mov	r2, r9
 8002cb8:	4621      	mov	r1, r4
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f015 f928 	bl	8017f10 <memset>
 8002cc0:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8002cc4:	80b4      	strh	r4, [r6, #4]
 8002cc6:	80f4      	strh	r4, [r6, #6]
 8002cc8:	8134      	strh	r4, [r6, #8]
 8002cca:	8174      	strh	r4, [r6, #10]
 8002ccc:	81b4      	strh	r4, [r6, #12]
 8002cce:	81f4      	strh	r4, [r6, #14]
 8002cd0:	8234      	strh	r4, [r6, #16]
 8002cd2:	8274      	strh	r4, [r6, #18]
 8002cd4:	6174      	str	r4, [r6, #20]
 8002cd6:	61b4      	str	r4, [r6, #24]
 8002cd8:	61f4      	str	r4, [r6, #28]
 8002cda:	8434      	strh	r4, [r6, #32]
 8002cdc:	8474      	strh	r4, [r6, #34]	; 0x22
 8002cde:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8002ce2:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 8002cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cee:	f8bd 3000 	ldrh.w	r3, [sp]
 8002cf2:	84f3      	strh	r3, [r6, #38]	; 0x26
 8002cf4:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8002cf8:	4669      	mov	r1, sp
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f009 f911 	bl	800bf22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	4798      	blx	r3
        setY(y);
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	4621      	mov	r1, r4
 8002d10:	4628      	mov	r0, r5
 8002d12:	4798      	blx	r3
        setWidth(width);
 8002d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	4798      	blx	r3
        setHeight(height);
 8002d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d28:	4628      	mov	r0, r5
 8002d2a:	4798      	blx	r3
        : color(col)
 8002d2c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8002d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4621      	mov	r1, r4
 8002d38:	4630      	mov	r0, r6
 8002d3a:	4798      	blx	r3
        setY(y);
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	4621      	mov	r1, r4
 8002d42:	4630      	mov	r0, r6
 8002d44:	4798      	blx	r3
 8002d46:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 8002d4a:	a901      	add	r1, sp, #4
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f009 f8e8 	bl	800bf22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002d52:	1d3c      	adds	r4, r7, #4
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f007 fefe 	bl	800ab58 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002d5c:	4631      	mov	r1, r6
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f007 fefa 	bl	800ab58 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d64:	4638      	mov	r0, r7
 8002d66:	b003      	add	sp, #12
 8002d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6c:	08019e5c 	.word	0x08019e5c
 8002d70:	08019e90 	.word	0x08019e90
 8002d74:	08019df4 	.word	0x08019df4
 8002d78:	0801a210 	.word	0x0801a210
 8002d7c:	0801a278 	.word	0x0801a278
 8002d80:	0801a388 	.word	0x0801a388

08002d84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002d88:	f7ff fb3e 	bl	8002408 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8002d8e:	6023      	str	r3, [r4, #0]
{

}
 8002d90:	4620      	mov	r0, r4
 8002d92:	bd10      	pop	{r4, pc}
 8002d94:	08019534 	.word	0x08019534

08002d98 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6002      	str	r2, [r0, #0]
{

}
 8002d9c:	4770      	bx	lr

08002d9e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8002da0:	4770      	bx	lr

08002da2 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8002da2:	4770      	bx	lr

08002da4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8002da4:	4b01      	ldr	r3, [pc, #4]	; (8002dac <_ZN8touchgfx9PresenterD1Ev+0x8>)
 8002da6:	6003      	str	r3, [r0, #0]
    }
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	08019ec4 	.word	0x08019ec4

08002db0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8002db0:	4b01      	ldr	r3, [pc, #4]	; (8002db8 <_ZN13ModelListenerD1Ev+0x8>)
 8002db2:	6003      	str	r3, [r0, #0]
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08019edc 	.word	0x08019edc

08002dbc <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8002dbc:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8002dbe:	f102 0108 	add.w	r1, r2, #8
 8002dc2:	6001      	str	r1, [r0, #0]
 8002dc4:	3220      	adds	r2, #32
 8002dc6:	6042      	str	r2, [r0, #4]
 8002dc8:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8002dca:	6042      	str	r2, [r0, #4]
    {
 8002dcc:	4a03      	ldr	r2, [pc, #12]	; (8002ddc <_ZN19mainScreenPresenterD1Ev+0x20>)
 8002dce:	6002      	str	r2, [r0, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	08019ee4 	.word	0x08019ee4
 8002dd8:	08019edc 	.word	0x08019edc
 8002ddc:	08019ec4 	.word	0x08019ec4

08002de0 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8002de0:	4603      	mov	r3, r0
 8002de2:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8002de4:	f102 0108 	add.w	r1, r2, #8
 8002de8:	f840 1c04 	str.w	r1, [r0, #-4]
 8002dec:	3220      	adds	r2, #32
 8002dee:	f840 2904 	str.w	r2, [r0], #-4
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 8002df4:	6042      	str	r2, [r0, #4]
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 8002df8:	f843 2c04 	str.w	r2, [r3, #-4]
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	08019ee4 	.word	0x08019ee4
 8002e04:	08019edc 	.word	0x08019edc
 8002e08:	08019ec4 	.word	0x08019ec4

08002e0c <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8002e0c:	4770      	bx	lr

08002e0e <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8002e0e:	4770      	bx	lr

08002e10 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
    {
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 8002e16:	6003      	str	r3, [r0, #0]
    }
 8002e18:	2104      	movs	r1, #4
 8002e1a:	f014 fec4 	bl	8017ba6 <_ZdlPvj>
 8002e1e:	4620      	mov	r0, r4
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	bf00      	nop
 8002e24:	08019ec4 	.word	0x08019ec4

08002e28 <_ZN13ModelListenerD0Ev>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <_ZN13ModelListenerD0Ev+0x14>)
 8002e2e:	6003      	str	r3, [r0, #0]
 8002e30:	2108      	movs	r1, #8
 8002e32:	f014 feb8 	bl	8017ba6 <_ZdlPvj>
 8002e36:	4620      	mov	r0, r4
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	08019edc 	.word	0x08019edc

08002e40 <_ZN19mainScreenPresenterD0Ev>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	4604      	mov	r4, r0
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8002e46:	f103 0208 	add.w	r2, r3, #8
 8002e4a:	6002      	str	r2, [r0, #0]
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	6043      	str	r3, [r0, #4]
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8002e52:	6043      	str	r3, [r0, #4]
    {
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8002e56:	6003      	str	r3, [r0, #0]
 8002e58:	2110      	movs	r1, #16
 8002e5a:	f014 fea4 	bl	8017ba6 <_ZdlPvj>
 8002e5e:	4620      	mov	r0, r4
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	bf00      	nop
 8002e64:	08019ee4 	.word	0x08019ee4
 8002e68:	08019edc 	.word	0x08019edc
 8002e6c:	08019ec4 	.word	0x08019ec4

08002e70 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4604      	mov	r4, r0
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8002e76:	f103 0208 	add.w	r2, r3, #8
 8002e7a:	f840 2c04 	str.w	r2, [r0, #-4]
 8002e7e:	3320      	adds	r3, #32
 8002e80:	f844 3904 	str.w	r3, [r4], #-4
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8002e86:	6063      	str	r3, [r4, #4]
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8002e8a:	f840 3c04 	str.w	r3, [r0, #-4]
 8002e8e:	2110      	movs	r1, #16
 8002e90:	4620      	mov	r0, r4
 8002e92:	f014 fe88 	bl	8017ba6 <_ZdlPvj>
 8002e96:	4620      	mov	r0, r4
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08019ee4 	.word	0x08019ee4
 8002ea0:	08019edc 	.word	0x08019edc
 8002ea4:	08019ec4 	.word	0x08019ec4

08002ea8 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8002ea8:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8002eac:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8002eb0:	6042      	str	r2, [r0, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	6082      	str	r2, [r0, #8]
    : view(v)
 8002eb6:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8002eb8:	f102 0408 	add.w	r4, r2, #8
 8002ebc:	6004      	str	r4, [r0, #0]
 8002ebe:	3220      	adds	r2, #32
 8002ec0:	6042      	str	r2, [r0, #4]
 8002ec2:	60c1      	str	r1, [r0, #12]
}
 8002ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	08019ec4 	.word	0x08019ec4
 8002ed0:	08019edc 	.word	0x08019edc
 8002ed4:	08019ee4 	.word	0x08019ee4

08002ed8 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8002ed8:	b410      	push	{r4}
 8002eda:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <_ZN14mainScreenViewD1Ev+0x34>)
 8002edc:	6002      	str	r2, [r0, #0]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <_ZN14mainScreenViewD1Ev+0x38>)
 8002ee0:	6002      	str	r2, [r0, #0]
class Image : public Widget
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <_ZN14mainScreenViewD1Ev+0x3c>)
 8002ee4:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <_ZN14mainScreenViewD1Ev+0x40>)
 8002ee8:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <_ZN14mainScreenViewD1Ev+0x44>)
 8002eec:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 8002eee:	4c0c      	ldr	r4, [pc, #48]	; (8002f20 <_ZN14mainScreenViewD1Ev+0x48>)
 8002ef0:	6404      	str	r4, [r0, #64]	; 0x40
 8002ef2:	6401      	str	r1, [r0, #64]	; 0x40
 8002ef4:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 8002ef6:	490b      	ldr	r1, [pc, #44]	; (8002f24 <_ZN14mainScreenViewD1Ev+0x4c>)
 8002ef8:	6001      	str	r1, [r0, #0]
    {
 8002efa:	490b      	ldr	r1, [pc, #44]	; (8002f28 <_ZN14mainScreenViewD1Ev+0x50>)
 8002efc:	6001      	str	r1, [r0, #0]
 8002efe:	490b      	ldr	r1, [pc, #44]	; (8002f2c <_ZN14mainScreenViewD1Ev+0x54>)
 8002f00:	6041      	str	r1, [r0, #4]
 8002f02:	6042      	str	r2, [r0, #4]
 8002f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	08019f14 	.word	0x08019f14
 8002f10:	08019e90 	.word	0x08019e90
 8002f14:	0801a278 	.word	0x0801a278
 8002f18:	08019df4 	.word	0x08019df4
 8002f1c:	0801a388 	.word	0x0801a388
 8002f20:	0801a210 	.word	0x0801a210
 8002f24:	08019e5c 	.word	0x08019e5c
 8002f28:	0801a484 	.word	0x0801a484
 8002f2c:	0801a028 	.word	0x0801a028

08002f30 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8002f30:	4770      	bx	lr

08002f32 <_ZN14mainScreenView11setupScreenEv>:
{
 8002f32:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 8002f34:	f7ff fe40 	bl	8002bb8 <_ZN18mainScreenViewBase11setupScreenEv>
}
 8002f38:	bd08      	pop	{r3, pc}
	...

08002f3c <_ZN14mainScreenViewD0Ev>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <_ZN14mainScreenViewD0Ev+0x38>)
 8002f42:	6003      	str	r3, [r0, #0]
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <_ZN14mainScreenViewD0Ev+0x3c>)
 8002f46:	6003      	str	r3, [r0, #0]
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <_ZN14mainScreenViewD0Ev+0x40>)
 8002f4a:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f4c:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <_ZN14mainScreenViewD0Ev+0x44>)
 8002f4e:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <_ZN14mainScreenViewD0Ev+0x48>)
 8002f52:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f54:	490c      	ldr	r1, [pc, #48]	; (8002f88 <_ZN14mainScreenViewD0Ev+0x4c>)
 8002f56:	6401      	str	r1, [r0, #64]	; 0x40
 8002f58:	6402      	str	r2, [r0, #64]	; 0x40
 8002f5a:	6403      	str	r3, [r0, #64]	; 0x40
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <_ZN14mainScreenViewD0Ev+0x50>)
 8002f5e:	6002      	str	r2, [r0, #0]
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <_ZN14mainScreenViewD0Ev+0x54>)
 8002f62:	6002      	str	r2, [r0, #0]
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <_ZN14mainScreenViewD0Ev+0x58>)
 8002f66:	6042      	str	r2, [r0, #4]
 8002f68:	6043      	str	r3, [r0, #4]
 8002f6a:	2198      	movs	r1, #152	; 0x98
 8002f6c:	f014 fe1b 	bl	8017ba6 <_ZdlPvj>
 8002f70:	4620      	mov	r0, r4
 8002f72:	bd10      	pop	{r4, pc}
 8002f74:	08019f14 	.word	0x08019f14
 8002f78:	08019e90 	.word	0x08019e90
 8002f7c:	0801a278 	.word	0x0801a278
 8002f80:	08019df4 	.word	0x08019df4
 8002f84:	0801a388 	.word	0x0801a388
 8002f88:	0801a210 	.word	0x0801a210
 8002f8c:	08019e5c 	.word	0x08019e5c
 8002f90:	0801a484 	.word	0x0801a484
 8002f94:	0801a028 	.word	0x0801a028

08002f98 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	f7ff fe50 	bl	8002c40 <_ZN18mainScreenViewBaseC1Ev>
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <_ZN14mainScreenViewC1Ev+0x10>)
 8002fa2:	6023      	str	r3, [r4, #0]
}
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	bd10      	pop	{r4, pc}
 8002fa8:	08019f14 	.word	0x08019f14

08002fac <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002fac:	2301      	movs	r3, #1
 8002fae:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8002fb0:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8002fb6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002fba:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002fbc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002fc0:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	4770      	bx	lr

08002fc6 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8002fc6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8002fce:	2000      	movs	r0, #0
 8002fd0:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002fd8:	e7f9      	b.n	8002fce <FT5336_DeInit+0x8>

08002fda <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fda:	2000      	movs	r0, #0
 8002fdc:	4770      	bx	lr

08002fde <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fde:	2000      	movs	r0, #0
 8002fe0:	4770      	bx	lr

08002fe2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fe2:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fe4:	6904      	ldr	r4, [r0, #16]
 8002fe6:	8900      	ldrh	r0, [r0, #8]
 8002fe8:	47a0      	blx	r4
}
 8002fea:	bd10      	pop	{r4, pc}

08002fec <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fec:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fee:	68c4      	ldr	r4, [r0, #12]
 8002ff0:	8900      	ldrh	r0, [r0, #8]
 8002ff2:	47a0      	blx	r4
}
 8002ff4:	bd10      	pop	{r4, pc}

08002ff6 <FT5336_GestureConfig>:
{
 8002ff6:	b570      	push	{r4, r5, r6, lr}
 8002ff8:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002ffa:	f100 0518 	add.w	r5, r0, #24
 8002ffe:	7809      	ldrb	r1, [r1, #0]
 8003000:	4628      	mov	r0, r5
 8003002:	f000 f91d 	bl	8003240 <ft5336_radian_value>
 8003006:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003008:	7931      	ldrb	r1, [r6, #4]
 800300a:	4628      	mov	r0, r5
 800300c:	f000 f925 	bl	800325a <ft5336_offset_left_right>
 8003010:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003012:	7a31      	ldrb	r1, [r6, #8]
 8003014:	4628      	mov	r0, r5
 8003016:	f000 f92d 	bl	8003274 <ft5336_offset_up_down>
 800301a:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800301c:	7b31      	ldrb	r1, [r6, #12]
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f935 	bl	800328e <ft5336_disatnce_left_right>
 8003024:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003026:	7c31      	ldrb	r1, [r6, #16]
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f93d 	bl	80032a8 <ft5336_distance_up_down>
 800302e:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003030:	7d31      	ldrb	r1, [r6, #20]
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f945 	bl	80032c2 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8003038:	1820      	adds	r0, r4, r0
 800303a:	d100      	bne.n	800303e <FT5336_GestureConfig+0x48>
}
 800303c:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003042:	e7fb      	b.n	800303c <FT5336_GestureConfig+0x46>

08003044 <FT5336_ReadID>:
{
 8003044:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8003046:	3018      	adds	r0, #24
 8003048:	f000 f955 	bl	80032f6 <ft5336_chip_id>
}
 800304c:	bd08      	pop	{r3, pc}

0800304e <FT5336_DetectTouch>:
{
 800304e:	b500      	push	{lr}
 8003050:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003052:	f10d 0107 	add.w	r1, sp, #7
 8003056:	3018      	adds	r0, #24
 8003058:	f000 f8e5 	bl	8003226 <ft5336_td_status>
 800305c:	b938      	cbnz	r0, 800306e <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800305e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d800      	bhi.n	8003068 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8003066:	4618      	mov	r0, r3
}
 8003068:	b003      	add	sp, #12
 800306a:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 800306e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003072:	e7f9      	b.n	8003068 <FT5336_DetectTouch+0x1a>

08003074 <FT5336_GetState>:
{
 8003074:	b530      	push	{r4, r5, lr}
 8003076:	b083      	sub	sp, #12
 8003078:	4605      	mov	r5, r0
 800307a:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800307c:	f7ff ffe7 	bl	800304e <FT5336_DetectTouch>
 8003080:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003082:	2304      	movs	r3, #4
 8003084:	eb0d 0203 	add.w	r2, sp, r3
 8003088:	2103      	movs	r1, #3
 800308a:	f105 0018 	add.w	r0, r5, #24
 800308e:	f000 f8b9 	bl	8003204 <ft5336_read_reg>
 8003092:	b998      	cbnz	r0, 80030bc <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003094:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800309e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80030a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60a3      	str	r3, [r4, #8]
}
 80030b8:	b003      	add	sp, #12
 80030ba:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80030c0:	e7fa      	b.n	80030b8 <FT5336_GetState+0x44>

080030c2 <FT5336_GetMultiTouchState>:
{
 80030c2:	b530      	push	{r4, r5, lr}
 80030c4:	b089      	sub	sp, #36	; 0x24
 80030c6:	4604      	mov	r4, r0
 80030c8:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80030ca:	f7ff ffc0 	bl	800304e <FT5336_DetectTouch>
 80030ce:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80030d0:	231e      	movs	r3, #30
 80030d2:	466a      	mov	r2, sp
 80030d4:	2103      	movs	r1, #3
 80030d6:	f104 0018 	add.w	r0, r4, #24
 80030da:	f000 f893 	bl	8003204 <ft5336_read_reg>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d146      	bne.n	8003170 <FT5336_GetMultiTouchState+0xae>
 80030e2:	4603      	mov	r3, r0
 80030e4:	e040      	b.n	8003168 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80030e6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80030ea:	004a      	lsls	r2, r1, #1
 80030ec:	ac08      	add	r4, sp, #32
 80030ee:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80030f2:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80030f6:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80030fa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80030fe:	f102 0421 	add.w	r4, r2, #33	; 0x21
 8003102:	446c      	add	r4, sp
 8003104:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8003108:	4321      	orrs	r1, r4
 800310a:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 800310e:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003110:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8003114:	4469      	add	r1, sp
 8003116:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800311a:	0224      	lsls	r4, r4, #8
 800311c:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8003120:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8003124:	4469      	add	r1, sp
 8003126:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 800312a:	430c      	orrs	r4, r1
 800312c:	1d99      	adds	r1, r3, #6
 800312e:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003132:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8003136:	f103 0410 	add.w	r4, r3, #16
 800313a:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800313e:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8003142:	4469      	add	r1, sp
 8003144:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8003148:	f103 010a 	add.w	r1, r3, #10
 800314c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003150:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003152:	3225      	adds	r2, #37	; 0x25
 8003154:	446a      	add	r2, sp
 8003156:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800315a:	0909      	lsrs	r1, r1, #4
 800315c:	f103 0214 	add.w	r2, r3, #20
 8003160:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003164:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003166:	3301      	adds	r3, #1
 8003168:	2b04      	cmp	r3, #4
 800316a:	d9bc      	bls.n	80030e6 <FT5336_GetMultiTouchState+0x24>
}
 800316c:	b009      	add	sp, #36	; 0x24
 800316e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003174:	e7fa      	b.n	800316c <FT5336_GetMultiTouchState+0xaa>

08003176 <FT5336_GetGesture>:
{
 8003176:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8003178:	3018      	adds	r0, #24
 800317a:	f000 f84d 	bl	8003218 <ft5336_gest_id>
}
 800317e:	bd08      	pop	{r3, pc}

08003180 <FT5336_EnableIT>:
{
 8003180:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003182:	2101      	movs	r1, #1
 8003184:	3018      	adds	r0, #24
 8003186:	f000 f8a9 	bl	80032dc <ft5336_g_mode>
}
 800318a:	bd08      	pop	{r3, pc}

0800318c <FT5336_DisableIT>:
{
 800318c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800318e:	2100      	movs	r1, #0
 8003190:	3018      	adds	r0, #24
 8003192:	f000 f8a3 	bl	80032dc <ft5336_g_mode>
}
 8003196:	bd08      	pop	{r3, pc}

08003198 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8003198:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800319c:	b95b      	cbnz	r3, 80031b6 <FT5336_Init+0x1e>
{
 800319e:	b510      	push	{r4, lr}
 80031a0:	4604      	mov	r4, r0
    pObj->IO.Init();
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7ff fff0 	bl	800318c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 80031ac:	2201      	movs	r2, #1
 80031ae:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 80031b2:	b910      	cbnz	r0, 80031ba <FT5336_Init+0x22>
}
 80031b4:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 80031b6:	2000      	movs	r0, #0
}
 80031b8:	4770      	bx	lr
    ret = FT5336_ERROR;
 80031ba:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80031be:	e7f9      	b.n	80031b4 <FT5336_Init+0x1c>

080031c0 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 80031c0:	b1a8      	cbz	r0, 80031ee <FT5336_RegisterBusIO+0x2e>
{
 80031c2:	b508      	push	{r3, lr}
 80031c4:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 80031c6:	680a      	ldr	r2, [r1, #0]
 80031c8:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80031ca:	6848      	ldr	r0, [r1, #4]
 80031cc:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80031ce:	8908      	ldrh	r0, [r1, #8]
 80031d0:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80031d2:	68c8      	ldr	r0, [r1, #12]
 80031d4:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80031d6:	6908      	ldr	r0, [r1, #16]
 80031d8:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80031da:	6949      	ldr	r1, [r1, #20]
 80031dc:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80031de:	4907      	ldr	r1, [pc, #28]	; (80031fc <FT5336_RegisterBusIO+0x3c>)
 80031e0:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80031e2:	4907      	ldr	r1, [pc, #28]	; (8003200 <FT5336_RegisterBusIO+0x40>)
 80031e4:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80031e6:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80031e8:	b122      	cbz	r2, 80031f4 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80031ea:	4790      	blx	r2
}
 80031ec:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80031ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80031f2:	4770      	bx	lr
      ret = FT5336_ERROR;
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80031f8:	e7f8      	b.n	80031ec <FT5336_RegisterBusIO+0x2c>
 80031fa:	bf00      	nop
 80031fc:	08002fe3 	.word	0x08002fe3
 8003200:	08002fed 	.word	0x08002fed

08003204 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8003204:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003206:	6844      	ldr	r4, [r0, #4]
 8003208:	6880      	ldr	r0, [r0, #8]
 800320a:	47a0      	blx	r4
}
 800320c:	bd10      	pop	{r4, pc}

0800320e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800320e:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003210:	6804      	ldr	r4, [r0, #0]
 8003212:	6880      	ldr	r0, [r0, #8]
 8003214:	47a0      	blx	r4
}
 8003216:	bd10      	pop	{r4, pc}

08003218 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003218:	b508      	push	{r3, lr}
 800321a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800321c:	2301      	movs	r3, #1
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff fff0 	bl	8003204 <ft5336_read_reg>
}
 8003224:	bd08      	pop	{r3, pc}

08003226 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003226:	b510      	push	{r4, lr}
 8003228:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800322a:	2301      	movs	r3, #1
 800322c:	460a      	mov	r2, r1
 800322e:	2102      	movs	r1, #2
 8003230:	f7ff ffe8 	bl	8003204 <ft5336_read_reg>
  
  if(ret == 0)
 8003234:	b918      	cbnz	r0, 800323e <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003236:	7823      	ldrb	r3, [r4, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800323e:	bd10      	pop	{r4, pc}

08003240 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003240:	b500      	push	{lr}
 8003242:	b083      	sub	sp, #12
 8003244:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003248:	2301      	movs	r3, #1
 800324a:	f10d 0207 	add.w	r2, sp, #7
 800324e:	2191      	movs	r1, #145	; 0x91
 8003250:	f7ff ffdd 	bl	800320e <ft5336_write_reg>
}
 8003254:	b003      	add	sp, #12
 8003256:	f85d fb04 	ldr.w	pc, [sp], #4

0800325a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800325a:	b500      	push	{lr}
 800325c:	b083      	sub	sp, #12
 800325e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003262:	2301      	movs	r3, #1
 8003264:	f10d 0207 	add.w	r2, sp, #7
 8003268:	2192      	movs	r1, #146	; 0x92
 800326a:	f7ff ffd0 	bl	800320e <ft5336_write_reg>
}
 800326e:	b003      	add	sp, #12
 8003270:	f85d fb04 	ldr.w	pc, [sp], #4

08003274 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003274:	b500      	push	{lr}
 8003276:	b083      	sub	sp, #12
 8003278:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800327c:	2301      	movs	r3, #1
 800327e:	f10d 0207 	add.w	r2, sp, #7
 8003282:	2193      	movs	r1, #147	; 0x93
 8003284:	f7ff ffc3 	bl	800320e <ft5336_write_reg>
}
 8003288:	b003      	add	sp, #12
 800328a:	f85d fb04 	ldr.w	pc, [sp], #4

0800328e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800328e:	b500      	push	{lr}
 8003290:	b083      	sub	sp, #12
 8003292:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003296:	2301      	movs	r3, #1
 8003298:	f10d 0207 	add.w	r2, sp, #7
 800329c:	2194      	movs	r1, #148	; 0x94
 800329e:	f7ff ffb6 	bl	800320e <ft5336_write_reg>
}
 80032a2:	b003      	add	sp, #12
 80032a4:	f85d fb04 	ldr.w	pc, [sp], #4

080032a8 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80032a8:	b500      	push	{lr}
 80032aa:	b083      	sub	sp, #12
 80032ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80032b0:	2301      	movs	r3, #1
 80032b2:	f10d 0207 	add.w	r2, sp, #7
 80032b6:	2195      	movs	r1, #149	; 0x95
 80032b8:	f7ff ffa9 	bl	800320e <ft5336_write_reg>
}
 80032bc:	b003      	add	sp, #12
 80032be:	f85d fb04 	ldr.w	pc, [sp], #4

080032c2 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80032c2:	b500      	push	{lr}
 80032c4:	b083      	sub	sp, #12
 80032c6:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80032ca:	2301      	movs	r3, #1
 80032cc:	f10d 0207 	add.w	r2, sp, #7
 80032d0:	2196      	movs	r1, #150	; 0x96
 80032d2:	f7ff ff9c 	bl	800320e <ft5336_write_reg>
}
 80032d6:	b003      	add	sp, #12
 80032d8:	f85d fb04 	ldr.w	pc, [sp], #4

080032dc <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80032dc:	b500      	push	{lr}
 80032de:	b083      	sub	sp, #12
 80032e0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80032e4:	2301      	movs	r3, #1
 80032e6:	f10d 0207 	add.w	r2, sp, #7
 80032ea:	21a4      	movs	r1, #164	; 0xa4
 80032ec:	f7ff ff8f 	bl	800320e <ft5336_write_reg>
}
 80032f0:	b003      	add	sp, #12
 80032f2:	f85d fb04 	ldr.w	pc, [sp], #4

080032f6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80032f6:	b508      	push	{r3, lr}
 80032f8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80032fa:	2301      	movs	r3, #1
 80032fc:	21a8      	movs	r1, #168	; 0xa8
 80032fe:	f7ff ff81 	bl	8003204 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8003302:	bd08      	pop	{r3, pc}

08003304 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8003304:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003308:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800330a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330e:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8003310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003314:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8003316:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800331a:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800331c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003320:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8003322:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003324:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8003326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332a:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800332c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003330:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8003332:	2000      	movs	r0, #0
 8003334:	4770      	bx	lr

08003336 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003336:	b570      	push	{r4, r5, r6, lr}
 8003338:	b09a      	sub	sp, #104	; 0x68
 800333a:	4606      	mov	r6, r0
 800333c:	460c      	mov	r4, r1
 800333e:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003340:	2250      	movs	r2, #80	; 0x50
 8003342:	2100      	movs	r1, #0
 8003344:	a806      	add	r0, sp, #24
 8003346:	f014 fde3 	bl	8017f10 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800334a:	2300      	movs	r3, #0
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	9303      	str	r3, [sp, #12]
 8003352:	9304      	str	r3, [sp, #16]
 8003354:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003356:	429c      	cmp	r4, r3
 8003358:	bf08      	it	eq
 800335a:	2d01      	cmpeq	r5, #1
 800335c:	d061      	beq.n	8003422 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800335e:	2c00      	cmp	r4, #0
 8003360:	d143      	bne.n	80033ea <MX25LM51245G_AutoPollingMemReady+0xb4>
 8003362:	2301      	movs	r3, #1
 8003364:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003366:	2d01      	cmp	r5, #1
 8003368:	d041      	beq.n	80033ee <MX25LM51245G_AutoPollingMemReady+0xb8>
 800336a:	2300      	movs	r3, #0
 800336c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800336e:	2c00      	cmp	r4, #0
 8003370:	d13f      	bne.n	80033f2 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8003372:	2300      	movs	r3, #0
 8003374:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003376:	2c00      	cmp	r4, #0
 8003378:	d13d      	bne.n	80033f6 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800337a:	2305      	movs	r3, #5
 800337c:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800337e:	2c00      	cmp	r4, #0
 8003380:	d13c      	bne.n	80033fc <MX25LM51245G_AutoPollingMemReady+0xc6>
 8003382:	2300      	movs	r3, #0
 8003384:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003386:	2d01      	cmp	r5, #1
 8003388:	d03b      	beq.n	8003402 <MX25LM51245G_AutoPollingMemReady+0xcc>
 800338a:	2300      	movs	r3, #0
 800338c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800338e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003392:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003394:	2c00      	cmp	r4, #0
 8003396:	d137      	bne.n	8003408 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800339e:	2d01      	cmp	r5, #1
 80033a0:	d035      	beq.n	800340e <MX25LM51245G_AutoPollingMemReady+0xd8>
 80033a2:	2300      	movs	r3, #0
 80033a4:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80033a6:	bbac      	cbnz	r4, 8003414 <MX25LM51245G_AutoPollingMemReady+0xde>
 80033a8:	2300      	movs	r3, #0
 80033aa:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80033ac:	2d01      	cmp	r5, #1
 80033ae:	d033      	beq.n	8003418 <MX25LM51245G_AutoPollingMemReady+0xe2>
 80033b0:	2301      	movs	r3, #1
 80033b2:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80033b4:	2d01      	cmp	r5, #1
 80033b6:	d031      	beq.n	800341c <MX25LM51245G_AutoPollingMemReady+0xe6>
 80033b8:	2300      	movs	r3, #0
 80033ba:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80033bc:	2301      	movs	r3, #1
 80033be:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80033c0:	2310      	movs	r3, #16
 80033c2:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80033c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033c8:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	a906      	add	r1, sp, #24
 80033d0:	4630      	mov	r0, r6
 80033d2:	f002 ff9f 	bl	8006314 <HAL_OSPI_Command>
 80033d6:	bb38      	cbnz	r0, 8003428 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	a901      	add	r1, sp, #4
 80033de:	4630      	mov	r0, r6
 80033e0:	f003 f8a9 	bl	8006536 <HAL_OSPI_AutoPolling>
 80033e4:	bb18      	cbnz	r0, 800342e <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80033e6:	b01a      	add	sp, #104	; 0x68
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033ea:	2304      	movs	r3, #4
 80033ec:	e7ba      	b.n	8003364 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033ee:	2308      	movs	r3, #8
 80033f0:	e7bc      	b.n	800336c <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033f2:	2310      	movs	r3, #16
 80033f4:	e7be      	b.n	8003374 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80033f6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80033fa:	e7bf      	b.n	800337c <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80033fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003400:	e7c0      	b.n	8003384 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003406:	e7c1      	b.n	800338c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003408:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800340c:	e7c6      	b.n	800339c <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800340e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003412:	e7c7      	b.n	80033a4 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003414:	2305      	movs	r3, #5
 8003416:	e7c8      	b.n	80033aa <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003418:	2302      	movs	r3, #2
 800341a:	e7ca      	b.n	80033b2 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800341c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003420:	e7cb      	b.n	80033ba <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8003422:	f04f 30ff 	mov.w	r0, #4294967295
 8003426:	e7de      	b.n	80033e6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	e7db      	b.n	80033e6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
 8003432:	e7d8      	b.n	80033e6 <MX25LM51245G_AutoPollingMemReady+0xb0>

08003434 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	b096      	sub	sp, #88	; 0x58
 8003438:	4606      	mov	r6, r0
 800343a:	460c      	mov	r4, r1
 800343c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 800343e:	2250      	movs	r2, #80	; 0x50
 8003440:	2100      	movs	r1, #0
 8003442:	a802      	add	r0, sp, #8
 8003444:	f014 fd64 	bl	8017f10 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800344e:	2c01      	cmp	r4, #1
 8003450:	bf08      	it	eq
 8003452:	429d      	cmpeq	r5, r3
 8003454:	d04e      	beq.n	80034f4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003456:	2301      	movs	r3, #1
 8003458:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800345a:	b104      	cbz	r4, 800345e <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 800345c:	2304      	movs	r3, #4
 800345e:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003460:	b92c      	cbnz	r4, 800346e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8003462:	2300      	movs	r3, #0
 8003464:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003466:	b924      	cbnz	r4, 8003472 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8003468:	bb15      	cbnz	r5, 80034b0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 800346a:	230b      	movs	r3, #11
 800346c:	e003      	b.n	8003476 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800346e:	2310      	movs	r3, #16
 8003470:	e7f8      	b.n	8003464 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003472:	f64e 4313 	movw	r3, #60435	; 0xec13
 8003476:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003478:	b9e4      	cbnz	r4, 80034b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 800347a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003480:	b9dd      	cbnz	r5, 80034ba <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8003482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003486:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003488:	b9d4      	cbnz	r4, 80034c0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800348a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003490:	b9cc      	cbnz	r4, 80034c6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8003492:	2308      	movs	r3, #8
 8003494:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	a902      	add	r1, sp, #8
 800349c:	4630      	mov	r0, r6
 800349e:	f002 ff39 	bl	8006314 <HAL_OSPI_Command>
 80034a2:	bb50      	cbnz	r0, 80034fa <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80034a4:	2302      	movs	r3, #2
 80034a6:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80034a8:	b97c      	cbnz	r4, 80034ca <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 80034aa:	b185      	cbz	r5, 80034ce <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 80034ac:	2312      	movs	r3, #18
 80034ae:	e00e      	b.n	80034ce <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80034b0:	230c      	movs	r3, #12
 80034b2:	e7e0      	b.n	8003476 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80034b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b8:	e7e1      	b.n	800347e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80034ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034be:	e7e2      	b.n	8003486 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80034c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034c4:	e7e3      	b.n	800348e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80034c6:	2306      	movs	r3, #6
 80034c8:	e7e4      	b.n	8003494 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80034ca:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80034ce:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	a902      	add	r1, sp, #8
 80034da:	4630      	mov	r0, r6
 80034dc:	f002 ff1a 	bl	8006314 <HAL_OSPI_Command>
 80034e0:	b970      	cbnz	r0, 8003500 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80034e6:	4669      	mov	r1, sp
 80034e8:	4630      	mov	r0, r6
 80034ea:	f003 f881 	bl	80065f0 <HAL_OSPI_MemoryMapped>
 80034ee:	b950      	cbnz	r0, 8003506 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80034f0:	b016      	add	sp, #88	; 0x58
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	e7fa      	b.n	80034f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
 80034fe:	e7f7      	b.n	80034f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	e7f4      	b.n	80034f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	e7f1      	b.n	80034f0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

0800350c <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800350c:	b510      	push	{r4, lr}
 800350e:	b096      	sub	sp, #88	; 0x58
 8003510:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8003512:	2250      	movs	r2, #80	; 0x50
 8003514:	2100      	movs	r1, #0
 8003516:	a802      	add	r0, sp, #8
 8003518:	f014 fcfa 	bl	8017f10 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8003522:	2301      	movs	r3, #1
 8003524:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8003526:	2304      	movs	r3, #4
 8003528:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800352a:	2308      	movs	r3, #8
 800352c:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 800352e:	2310      	movs	r3, #16
 8003530:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8003532:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003536:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8003538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800353c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 800353e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003542:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003544:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003548:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800354a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800354e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8003550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003554:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003556:	2306      	movs	r3, #6
 8003558:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800355a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800355e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	a902      	add	r1, sp, #8
 8003566:	4620      	mov	r0, r4
 8003568:	f002 fed4 	bl	8006314 <HAL_OSPI_Command>
 800356c:	b9b8      	cbnz	r0, 800359e <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 800356e:	2302      	movs	r3, #2
 8003570:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003572:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003576:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 800357c:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	a902      	add	r1, sp, #8
 8003584:	4620      	mov	r0, r4
 8003586:	f002 fec5 	bl	8006314 <HAL_OSPI_Command>
 800358a:	b958      	cbnz	r0, 80035a4 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003590:	4669      	mov	r1, sp
 8003592:	4620      	mov	r0, r4
 8003594:	f003 f82c 	bl	80065f0 <HAL_OSPI_MemoryMapped>
 8003598:	b938      	cbnz	r0, 80035aa <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800359a:	b016      	add	sp, #88	; 0x58
 800359c:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	e7fa      	b.n	800359a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	e7f7      	b.n	800359a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 80035aa:	f04f 30ff 	mov.w	r0, #4294967295
 80035ae:	e7f4      	b.n	800359a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

080035b0 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	b09a      	sub	sp, #104	; 0x68
 80035b4:	4606      	mov	r6, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 80035ba:	2250      	movs	r2, #80	; 0x50
 80035bc:	2100      	movs	r1, #0
 80035be:	a806      	add	r0, sp, #24
 80035c0:	f014 fca6 	bl	8017f10 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80035c4:	2300      	movs	r3, #0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	9303      	str	r3, [sp, #12]
 80035cc:	9304      	str	r3, [sp, #16]
 80035ce:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80035d0:	429c      	cmp	r4, r3
 80035d2:	bf08      	it	eq
 80035d4:	2d01      	cmpeq	r5, #1
 80035d6:	d076      	beq.n	80036c6 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d155      	bne.n	8003688 <MX25LM51245G_WriteEnable+0xd8>
 80035dc:	2301      	movs	r3, #1
 80035de:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80035e0:	2d01      	cmp	r5, #1
 80035e2:	d053      	beq.n	800368c <MX25LM51245G_WriteEnable+0xdc>
 80035e4:	2300      	movs	r3, #0
 80035e6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d151      	bne.n	8003690 <MX25LM51245G_WriteEnable+0xe0>
 80035ec:	2300      	movs	r3, #0
 80035ee:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80035f0:	2c00      	cmp	r4, #0
 80035f2:	d14f      	bne.n	8003694 <MX25LM51245G_WriteEnable+0xe4>
 80035f4:	2306      	movs	r3, #6
 80035f6:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	a906      	add	r1, sp, #24
 80035fe:	4630      	mov	r0, r6
 8003600:	f002 fe88 	bl	8006314 <HAL_OSPI_Command>
 8003604:	2800      	cmp	r0, #0
 8003606:	d161      	bne.n	80036cc <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003608:	2c00      	cmp	r4, #0
 800360a:	d146      	bne.n	800369a <MX25LM51245G_WriteEnable+0xea>
 800360c:	2305      	movs	r3, #5
 800360e:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003610:	2c00      	cmp	r4, #0
 8003612:	d145      	bne.n	80036a0 <MX25LM51245G_WriteEnable+0xf0>
 8003614:	2300      	movs	r3, #0
 8003616:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003618:	2d01      	cmp	r5, #1
 800361a:	d044      	beq.n	80036a6 <MX25LM51245G_WriteEnable+0xf6>
 800361c:	2300      	movs	r3, #0
 800361e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8003620:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003624:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800362a:	2c00      	cmp	r4, #0
 800362c:	d13e      	bne.n	80036ac <MX25LM51245G_WriteEnable+0xfc>
 800362e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003632:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003634:	2d01      	cmp	r5, #1
 8003636:	d03c      	beq.n	80036b2 <MX25LM51245G_WriteEnable+0x102>
 8003638:	2300      	movs	r3, #0
 800363a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800363c:	2c00      	cmp	r4, #0
 800363e:	d13b      	bne.n	80036b8 <MX25LM51245G_WriteEnable+0x108>
 8003640:	2300      	movs	r3, #0
 8003642:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003644:	2d01      	cmp	r5, #1
 8003646:	d039      	beq.n	80036bc <MX25LM51245G_WriteEnable+0x10c>
 8003648:	2301      	movs	r3, #1
 800364a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800364c:	2d01      	cmp	r5, #1
 800364e:	d037      	beq.n	80036c0 <MX25LM51245G_WriteEnable+0x110>
 8003650:	2300      	movs	r3, #0
 8003652:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	a906      	add	r1, sp, #24
 800365a:	4630      	mov	r0, r6
 800365c:	f002 fe5a 	bl	8006314 <HAL_OSPI_Command>
 8003660:	bbb8      	cbnz	r0, 80036d2 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8003662:	2302      	movs	r3, #2
 8003664:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8003666:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003668:	2300      	movs	r3, #0
 800366a:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800366c:	2310      	movs	r3, #16
 800366e:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003674:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	a901      	add	r1, sp, #4
 800367c:	4630      	mov	r0, r6
 800367e:	f002 ff5a 	bl	8006536 <HAL_OSPI_AutoPolling>
 8003682:	bb48      	cbnz	r0, 80036d8 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003684:	b01a      	add	sp, #104	; 0x68
 8003686:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003688:	2304      	movs	r3, #4
 800368a:	e7a8      	b.n	80035de <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800368c:	2308      	movs	r3, #8
 800368e:	e7aa      	b.n	80035e6 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003690:	2310      	movs	r3, #16
 8003692:	e7ac      	b.n	80035ee <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8003694:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8003698:	e7ad      	b.n	80035f6 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800369a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800369e:	e7b6      	b.n	800360e <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80036a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a4:	e7b7      	b.n	8003616 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80036a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036aa:	e7b8      	b.n	800361e <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80036ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036b0:	e7bf      	b.n	8003632 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80036b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036b6:	e7c0      	b.n	800363a <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80036b8:	2305      	movs	r3, #5
 80036ba:	e7c2      	b.n	8003642 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80036bc:	2302      	movs	r3, #2
 80036be:	e7c4      	b.n	800364a <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80036c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80036c4:	e7c5      	b.n	8003652 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 80036c6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ca:	e7db      	b.n	8003684 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	e7d8      	b.n	8003684 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
 80036d6:	e7d5      	b.n	8003684 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	e7d2      	b.n	8003684 <MX25LM51245G_WriteEnable+0xd4>

080036de <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80036de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e0:	b095      	sub	sp, #84	; 0x54
 80036e2:	4607      	mov	r7, r0
 80036e4:	460c      	mov	r4, r1
 80036e6:	4615      	mov	r5, r2
 80036e8:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80036ea:	2250      	movs	r2, #80	; 0x50
 80036ec:	2100      	movs	r1, #0
 80036ee:	4668      	mov	r0, sp
 80036f0:	f014 fc0e 	bl	8017f10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	bf08      	it	eq
 80036f8:	2d01      	cmpeq	r5, #1
 80036fa:	d04e      	beq.n	800379a <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036fc:	bb24      	cbnz	r4, 8003748 <MX25LM51245G_WriteCfg2Register+0x6a>
 80036fe:	2301      	movs	r3, #1
 8003700:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003702:	2d01      	cmp	r5, #1
 8003704:	d022      	beq.n	800374c <MX25LM51245G_WriteCfg2Register+0x6e>
 8003706:	2300      	movs	r3, #0
 8003708:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800370a:	bb0c      	cbnz	r4, 8003750 <MX25LM51245G_WriteCfg2Register+0x72>
 800370c:	2300      	movs	r3, #0
 800370e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003710:	bb04      	cbnz	r4, 8003754 <MX25LM51245G_WriteCfg2Register+0x76>
 8003712:	2372      	movs	r3, #114	; 0x72
 8003714:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003716:	bb04      	cbnz	r4, 800375a <MX25LM51245G_WriteCfg2Register+0x7c>
 8003718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371c:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800371e:	2d01      	cmp	r5, #1
 8003720:	d01e      	beq.n	8003760 <MX25LM51245G_WriteCfg2Register+0x82>
 8003722:	2300      	movs	r3, #0
 8003724:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003726:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800372a:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 800372c:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800372e:	b9d4      	cbnz	r4, 8003766 <MX25LM51245G_WriteCfg2Register+0x88>
 8003730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003734:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003736:	2d01      	cmp	r5, #1
 8003738:	d018      	beq.n	800376c <MX25LM51245G_WriteCfg2Register+0x8e>
 800373a:	2300      	movs	r3, #0
 800373c:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800373e:	b1d4      	cbz	r4, 8003776 <MX25LM51245G_WriteCfg2Register+0x98>
 8003740:	2d01      	cmp	r5, #1
 8003742:	d016      	beq.n	8003772 <MX25LM51245G_WriteCfg2Register+0x94>
 8003744:	2301      	movs	r3, #1
 8003746:	e017      	b.n	8003778 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003748:	2304      	movs	r3, #4
 800374a:	e7d9      	b.n	8003700 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800374c:	2308      	movs	r3, #8
 800374e:	e7db      	b.n	8003708 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003750:	2310      	movs	r3, #16
 8003752:	e7dc      	b.n	800370e <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003754:	f247 238d 	movw	r3, #29325	; 0x728d
 8003758:	e7dc      	b.n	8003714 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	e7dd      	b.n	800371c <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003764:	e7de      	b.n	8003724 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003766:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800376a:	e7e3      	b.n	8003734 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800376c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003770:	e7e4      	b.n	800373c <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003772:	2302      	movs	r3, #2
 8003774:	e000      	b.n	8003778 <MX25LM51245G_WriteCfg2Register+0x9a>
 8003776:	2301      	movs	r3, #1
 8003778:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4669      	mov	r1, sp
 8003780:	4638      	mov	r0, r7
 8003782:	f002 fdc7 	bl	8006314 <HAL_OSPI_Command>
 8003786:	b958      	cbnz	r0, 80037a0 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	a91a      	add	r1, sp, #104	; 0x68
 800378e:	4638      	mov	r0, r7
 8003790:	f002 fe21 	bl	80063d6 <HAL_OSPI_Transmit>
 8003794:	b938      	cbnz	r0, 80037a6 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003796:	b015      	add	sp, #84	; 0x54
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	e7fa      	b.n	8003796 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	e7f7      	b.n	8003796 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	e7f4      	b.n	8003796 <MX25LM51245G_WriteCfg2Register+0xb8>

080037ac <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ae:	b095      	sub	sp, #84	; 0x54
 80037b0:	4607      	mov	r7, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	4615      	mov	r5, r2
 80037b6:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80037b8:	2250      	movs	r2, #80	; 0x50
 80037ba:	2100      	movs	r1, #0
 80037bc:	4668      	mov	r0, sp
 80037be:	f014 fba7 	bl	8017f10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80037c2:	2c00      	cmp	r4, #0
 80037c4:	bf08      	it	eq
 80037c6:	2d01      	cmpeq	r5, #1
 80037c8:	d05b      	beq.n	8003882 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80037ca:	2c00      	cmp	r4, #0
 80037cc:	d13d      	bne.n	800384a <MX25LM51245G_ReadCfg2Register+0x9e>
 80037ce:	2301      	movs	r3, #1
 80037d0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037d2:	2d01      	cmp	r5, #1
 80037d4:	d03b      	beq.n	800384e <MX25LM51245G_ReadCfg2Register+0xa2>
 80037d6:	2300      	movs	r3, #0
 80037d8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d139      	bne.n	8003852 <MX25LM51245G_ReadCfg2Register+0xa6>
 80037de:	2300      	movs	r3, #0
 80037e0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80037e2:	2c00      	cmp	r4, #0
 80037e4:	d137      	bne.n	8003856 <MX25LM51245G_ReadCfg2Register+0xaa>
 80037e6:	2371      	movs	r3, #113	; 0x71
 80037e8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	d136      	bne.n	800385c <MX25LM51245G_ReadCfg2Register+0xb0>
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f2:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80037f4:	2d01      	cmp	r5, #1
 80037f6:	d034      	beq.n	8003862 <MX25LM51245G_ReadCfg2Register+0xb6>
 80037f8:	2300      	movs	r3, #0
 80037fa:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80037fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003800:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 8003802:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003804:	bb84      	cbnz	r4, 8003868 <MX25LM51245G_ReadCfg2Register+0xbc>
 8003806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800380a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800380c:	2d01      	cmp	r5, #1
 800380e:	d02e      	beq.n	800386e <MX25LM51245G_ReadCfg2Register+0xc2>
 8003810:	2300      	movs	r3, #0
 8003812:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003814:	bb74      	cbnz	r4, 8003874 <MX25LM51245G_ReadCfg2Register+0xc8>
 8003816:	2300      	movs	r3, #0
 8003818:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800381a:	2d01      	cmp	r5, #1
 800381c:	d02c      	beq.n	8003878 <MX25LM51245G_ReadCfg2Register+0xcc>
 800381e:	2301      	movs	r3, #1
 8003820:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003822:	2d01      	cmp	r5, #1
 8003824:	d02a      	beq.n	800387c <MX25LM51245G_ReadCfg2Register+0xd0>
 8003826:	2300      	movs	r3, #0
 8003828:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4669      	mov	r1, sp
 8003830:	4638      	mov	r0, r7
 8003832:	f002 fd6f 	bl	8006314 <HAL_OSPI_Command>
 8003836:	bb38      	cbnz	r0, 8003888 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800383e:	4638      	mov	r0, r7
 8003840:	f002 fe16 	bl	8006470 <HAL_OSPI_Receive>
 8003844:	bb18      	cbnz	r0, 800388e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003846:	b015      	add	sp, #84	; 0x54
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800384a:	2304      	movs	r3, #4
 800384c:	e7c0      	b.n	80037d0 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800384e:	2308      	movs	r3, #8
 8003850:	e7c2      	b.n	80037d8 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003852:	2310      	movs	r3, #16
 8003854:	e7c4      	b.n	80037e0 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003856:	f247 138e 	movw	r3, #29070	; 0x718e
 800385a:	e7c5      	b.n	80037e8 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003860:	e7c7      	b.n	80037f2 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003866:	e7c8      	b.n	80037fa <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003868:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800386c:	e7cd      	b.n	800380a <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800386e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003872:	e7ce      	b.n	8003812 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003874:	2305      	movs	r3, #5
 8003876:	e7cf      	b.n	8003818 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003878:	2302      	movs	r3, #2
 800387a:	e7d1      	b.n	8003820 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800387c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003880:	e7d2      	b.n	8003828 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e7de      	b.n	8003846 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e7db      	b.n	8003846 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800388e:	f04f 30ff 	mov.w	r0, #4294967295
 8003892:	e7d8      	b.n	8003846 <MX25LM51245G_ReadCfg2Register+0x9a>

08003894 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	b094      	sub	sp, #80	; 0x50
 8003898:	4606      	mov	r6, r0
 800389a:	460c      	mov	r4, r1
 800389c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800389e:	2250      	movs	r2, #80	; 0x50
 80038a0:	2100      	movs	r1, #0
 80038a2:	4668      	mov	r0, sp
 80038a4:	f014 fb34 	bl	8017f10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80038a8:	2c00      	cmp	r4, #0
 80038aa:	bf08      	it	eq
 80038ac:	2d01      	cmpeq	r5, #1
 80038ae:	d01e      	beq.n	80038ee <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038b0:	b9a4      	cbnz	r4, 80038dc <MX25LM51245G_ResetEnable+0x48>
 80038b2:	2301      	movs	r3, #1
 80038b4:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038b6:	2d01      	cmp	r5, #1
 80038b8:	d012      	beq.n	80038e0 <MX25LM51245G_ResetEnable+0x4c>
 80038ba:	2300      	movs	r3, #0
 80038bc:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038be:	b98c      	cbnz	r4, 80038e4 <MX25LM51245G_ResetEnable+0x50>
 80038c0:	2300      	movs	r3, #0
 80038c2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80038c4:	b984      	cbnz	r4, 80038e8 <MX25LM51245G_ResetEnable+0x54>
 80038c6:	2366      	movs	r3, #102	; 0x66
 80038c8:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4669      	mov	r1, sp
 80038d0:	4630      	mov	r0, r6
 80038d2:	f002 fd1f 	bl	8006314 <HAL_OSPI_Command>
 80038d6:	b968      	cbnz	r0, 80038f4 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80038d8:	b014      	add	sp, #80	; 0x50
 80038da:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80038dc:	2304      	movs	r3, #4
 80038de:	e7e9      	b.n	80038b4 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038e0:	2308      	movs	r3, #8
 80038e2:	e7eb      	b.n	80038bc <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038e4:	2310      	movs	r3, #16
 80038e6:	e7ec      	b.n	80038c2 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80038e8:	f246 6399 	movw	r3, #26265	; 0x6699
 80038ec:	e7ec      	b.n	80038c8 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	e7f1      	b.n	80038d8 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	e7ee      	b.n	80038d8 <MX25LM51245G_ResetEnable+0x44>

080038fa <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80038fa:	b570      	push	{r4, r5, r6, lr}
 80038fc:	b094      	sub	sp, #80	; 0x50
 80038fe:	4606      	mov	r6, r0
 8003900:	460c      	mov	r4, r1
 8003902:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003904:	2250      	movs	r2, #80	; 0x50
 8003906:	2100      	movs	r1, #0
 8003908:	4668      	mov	r0, sp
 800390a:	f014 fb01 	bl	8017f10 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800390e:	2c00      	cmp	r4, #0
 8003910:	bf08      	it	eq
 8003912:	2d01      	cmpeq	r5, #1
 8003914:	d01e      	beq.n	8003954 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003916:	b9a4      	cbnz	r4, 8003942 <MX25LM51245G_ResetMemory+0x48>
 8003918:	2301      	movs	r3, #1
 800391a:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800391c:	2d01      	cmp	r5, #1
 800391e:	d012      	beq.n	8003946 <MX25LM51245G_ResetMemory+0x4c>
 8003920:	2300      	movs	r3, #0
 8003922:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003924:	b98c      	cbnz	r4, 800394a <MX25LM51245G_ResetMemory+0x50>
 8003926:	2300      	movs	r3, #0
 8003928:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800392a:	b984      	cbnz	r4, 800394e <MX25LM51245G_ResetMemory+0x54>
 800392c:	2399      	movs	r3, #153	; 0x99
 800392e:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4669      	mov	r1, sp
 8003936:	4630      	mov	r0, r6
 8003938:	f002 fcec 	bl	8006314 <HAL_OSPI_Command>
 800393c:	b968      	cbnz	r0, 800395a <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800393e:	b014      	add	sp, #80	; 0x50
 8003940:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003942:	2304      	movs	r3, #4
 8003944:	e7e9      	b.n	800391a <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003946:	2308      	movs	r3, #8
 8003948:	e7eb      	b.n	8003922 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800394a:	2310      	movs	r3, #16
 800394c:	e7ec      	b.n	8003928 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800394e:	f649 1366 	movw	r3, #39270	; 0x9966
 8003952:	e7ec      	b.n	800392e <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	e7f1      	b.n	800393e <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	e7ee      	b.n	800393e <MX25LM51245G_ResetMemory+0x44>

08003960 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003964:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8003966:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 800396a:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8003970:	222c      	movs	r2, #44	; 0x2c
 8003972:	fb02 3101 	mla	r1, r2, r1, r3
 8003976:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003978:	68ca      	ldr	r2, [r1, #12]
 800397a:	eb03 0e02 	add.w	lr, r3, r2
 800397e:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003982:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003984:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003986:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800398a:	690b      	ldr	r3, [r1, #16]
 800398c:	6a08      	ldr	r0, [r1, #32]
 800398e:	1a1e      	subs	r6, r3, r0
 8003990:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003994:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003996:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800399a:	694b      	ldr	r3, [r1, #20]
 800399c:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 80039a0:	f1be 0f00 	cmp.w	lr, #0
 80039a4:	dd08      	ble.n	80039b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	dd09      	ble.n	80039be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039aa:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 80039ac:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80039b0:	2d0f      	cmp	r5, #15
 80039b2:	d83b      	bhi.n	8003a2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039b4:	2400      	movs	r4, #0
 80039b6:	e02b      	b.n	8003a10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 80039b8:	f04f 0e00 	mov.w	lr, #0
 80039bc:	e7f3      	b.n	80039a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 80039be:	2600      	movs	r6, #0
 80039c0:	e7f3      	b.n	80039aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80039c2:	3201      	adds	r2, #1
 80039c4:	2a0f      	cmp	r2, #15
 80039c6:	d822      	bhi.n	8003a0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80039c8:	fb02 f300 	mul.w	r3, r2, r0
 80039cc:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80039d0:	459e      	cmp	lr, r3
 80039d2:	bf8c      	ite	hi
 80039d4:	2100      	movhi	r1, #0
 80039d6:	2101      	movls	r1, #1
 80039d8:	429e      	cmp	r6, r3
 80039da:	bf38      	it	cc
 80039dc:	2100      	movcc	r1, #0
 80039de:	2900      	cmp	r1, #0
 80039e0:	d0ef      	beq.n	80039c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80039e2:	45a9      	cmp	r9, r5
 80039e4:	d0ed      	beq.n	80039c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80039e6:	4914      	ldr	r1, [pc, #80]	; (8003a38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80039e8:	680b      	ldr	r3, [r1, #0]
 80039ea:	f8df a050 	ldr.w	sl, [pc, #80]	; 8003a3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80039ee:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80039f2:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80039f6:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80039fa:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80039fe:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8003a02:	3301      	adds	r3, #1
 8003a04:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a06:	2b7f      	cmp	r3, #127	; 0x7f
 8003a08:	d810      	bhi.n	8003a2c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 8003a0a:	46a9      	mov	r9, r5
 8003a0c:	e7d9      	b.n	80039c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a0e:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a10:	2c0f      	cmp	r4, #15
 8003a12:	d809      	bhi.n	8003a28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003a14:	1c67      	adds	r7, r4, #1
 8003a16:	1c68      	adds	r0, r5, #1
 8003a18:	fb04 0300 	mla	r3, r4, r0, r0
 8003a1c:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 8003a20:	4598      	cmp	r8, r3
 8003a22:	d8f4      	bhi.n	8003a0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a24:	2200      	movs	r2, #0
 8003a26:	e7cd      	b.n	80039c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c1      	b.n	80039b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8003a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a30:	3b9aca00 	.word	0x3b9aca00
 8003a34:	08019f40 	.word	0x08019f40
 8003a38:	24001ee8 	.word	0x24001ee8
 8003a3c:	240014e8 	.word	0x240014e8

08003a40 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	b089      	sub	sp, #36	; 0x24
 8003a46:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a48:	4f4b      	ldr	r7, [pc, #300]	; (8003b78 <I2C_Compute_SCLL_SCLH+0x138>)
 8003a4a:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8003a4e:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003a52:	494a      	ldr	r1, [pc, #296]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003a54:	232c      	movs	r3, #44	; 0x2c
 8003a56:	fb04 f303 	mul.w	r3, r4, r3
 8003a5a:	18ca      	adds	r2, r1, r3
 8003a5c:	58cb      	ldr	r3, [r1, r3]
 8003a5e:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8003a62:	fbb1 f1f3 	udiv	r1, r1, r3
 8003a66:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003a68:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003a6a:	fb08 f303 	mul.w	r3, r8, r3
 8003a6e:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003a70:	6853      	ldr	r3, [r2, #4]
 8003a72:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003a76:	6893      	ldr	r3, [r2, #8]
 8003a78:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8003a7c:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	9307      	str	r3, [sp, #28]
 8003a88:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a8a:	e060      	b.n	8003b4e <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8003a8c:	1af2      	subs	r2, r6, r3
 8003a8e:	e02a      	b.n	8003ae6 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8003a90:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a92:	29ff      	cmp	r1, #255	; 0xff
 8003a94:	d837      	bhi.n	8003b06 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003a96:	1c4d      	adds	r5, r1, #1
 8003a98:	fb01 0200 	mla	r2, r1, r0, r0
 8003a9c:	4442      	add	r2, r8
 8003a9e:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003aa0:	eb0c 0302 	add.w	r3, ip, r2
 8003aa4:	4e35      	ldr	r6, [pc, #212]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003aa6:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003aaa:	fb0b 6b04 	mla	fp, fp, r4, r6
 8003aae:	f8db 6020 	ldr.w	r6, [fp, #32]
 8003ab2:	4433      	add	r3, r6
 8003ab4:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8003ab8:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003aba:	429f      	cmp	r7, r3
 8003abc:	bf8c      	ite	hi
 8003abe:	2600      	movhi	r6, #0
 8003ac0:	2601      	movls	r6, #1
 8003ac2:	4599      	cmp	r9, r3
 8003ac4:	bf38      	it	cc
 8003ac6:	2600      	movcc	r6, #0
 8003ac8:	2e00      	cmp	r6, #0
 8003aca:	d0e1      	beq.n	8003a90 <I2C_Compute_SCLL_SCLH+0x50>
 8003acc:	4e2b      	ldr	r6, [pc, #172]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003ace:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003ad2:	fb0b 6604 	mla	r6, fp, r4, r6
 8003ad6:	69f6      	ldr	r6, [r6, #28]
 8003ad8:	4296      	cmp	r6, r2
 8003ada:	d8d9      	bhi.n	8003a90 <I2C_Compute_SCLL_SCLH+0x50>
 8003adc:	4592      	cmp	sl, r2
 8003ade:	d2d7      	bcs.n	8003a90 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8003ae0:	9e05      	ldr	r6, [sp, #20]
 8003ae2:	1b9a      	subs	r2, r3, r6
 8003ae4:	d4d2      	bmi.n	8003a8c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8003ae6:	9b02      	ldr	r3, [sp, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d2d1      	bcs.n	8003a90 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8003aec:	9b04      	ldr	r3, [sp, #16]
 8003aee:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <I2C_Compute_SCLL_SCLH+0x140>)
 8003af4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003af8:	9e01      	ldr	r6, [sp, #4]
 8003afa:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003afc:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8003afe:	9202      	str	r2, [sp, #8]
              ret = count;
 8003b00:	9b04      	ldr	r3, [sp, #16]
 8003b02:	9307      	str	r3, [sp, #28]
 8003b04:	e7c4      	b.n	8003a90 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b0a:	9b01      	ldr	r3, [sp, #4]
 8003b0c:	2bff      	cmp	r3, #255	; 0xff
 8003b0e:	d81b      	bhi.n	8003b48 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b10:	9906      	ldr	r1, [sp, #24]
 8003b12:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	9203      	str	r2, [sp, #12]
 8003b1c:	fb03 0c00 	mla	ip, r3, r0, r0
 8003b20:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8003b24:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8003b28:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <I2C_Compute_SCLL_SCLH+0x13c>)
 8003b2c:	222c      	movs	r2, #44	; 0x2c
 8003b2e:	fb02 3304 	mla	r3, r2, r4, r3
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4563      	cmp	r3, ip
 8003b36:	d2e6      	bcs.n	8003b06 <I2C_Compute_SCLL_SCLH+0xc6>
 8003b38:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8003b3c:	1a5b      	subs	r3, r3, r1
 8003b3e:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8003b42:	d2e0      	bcs.n	8003b06 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b44:	2100      	movs	r1, #0
 8003b46:	e7a4      	b.n	8003a92 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b48:	9b04      	ldr	r3, [sp, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	9304      	str	r3, [sp, #16]
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <I2C_Compute_SCLL_SCLH+0x144>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	9a04      	ldr	r2, [sp, #16]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d90a      	bls.n	8003b6e <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b58:	9b04      	ldr	r3, [sp, #16]
 8003b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <I2C_Compute_SCLL_SCLH+0x140>)
 8003b60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b64:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	e7cd      	b.n	8003b0a <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8003b6e:	9807      	ldr	r0, [sp, #28]
 8003b70:	b009      	add	sp, #36	; 0x24
 8003b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	3b9aca00 	.word	0x3b9aca00
 8003b7c:	08019f40 	.word	0x08019f40
 8003b80:	240014e8 	.word	0x240014e8
 8003b84:	24001ee8 	.word	0x24001ee8

08003b88 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	2900      	cmpne	r1, #0
 8003b8e:	d134      	bne.n	8003bfa <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8003b90:	2000      	movs	r0, #0
}
 8003b92:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003b94:	3401      	adds	r4, #1
 8003b96:	2c02      	cmp	r4, #2
 8003b98:	d834      	bhi.n	8003c04 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <I2C_GetTiming+0x84>)
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 3304 	mla	r3, r1, r4, r3
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d8f5      	bhi.n	8003b94 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <I2C_GetTiming+0x84>)
 8003baa:	fb01 3304 	mla	r3, r1, r4, r3
 8003bae:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d3ef      	bcc.n	8003b94 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7ff fed2 	bl	8003960 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7ff ff3e 	bl	8003a40 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8003bc4:	287f      	cmp	r0, #127	; 0x7f
 8003bc6:	d81f      	bhi.n	8003c08 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <I2C_GetTiming+0x88>)
 8003bca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003bce:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003bd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003bd6:	6863      	ldr	r3, [r4, #4]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bde:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003be2:	68a1      	ldr	r1, [r4, #8]
 8003be4:	0409      	lsls	r1, r1, #16
 8003be6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003bea:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003bec:	68e1      	ldr	r1, [r4, #12]
 8003bee:	0209      	lsls	r1, r1, #8
 8003bf0:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003bf2:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003bf4:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003bf6:	4318      	orrs	r0, r3
 8003bf8:	e005      	b.n	8003c06 <I2C_GetTiming+0x7e>
{
 8003bfa:	b538      	push	{r3, r4, r5, lr}
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003c00:	2400      	movs	r4, #0
 8003c02:	e7c8      	b.n	8003b96 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8003c04:	2000      	movs	r0, #0
}
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8003c08:	2000      	movs	r0, #0
  return ret;
 8003c0a:	e7fc      	b.n	8003c06 <I2C_GetTiming+0x7e>
 8003c0c:	08019f40 	.word	0x08019f40
 8003c10:	240014e8 	.word	0x240014e8

08003c14 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c18:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003c1a:	4c2a      	ldr	r4, [pc, #168]	; (8003cc4 <I2C4_MspInit+0xb0>)
 8003c1c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003c28:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003c34:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003c40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c50:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c52:	f04f 0912 	mov.w	r9, #18
 8003c56:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c5a:	f04f 0800 	mov.w	r8, #0
 8003c5e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c62:	2702      	movs	r7, #2
 8003c64:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003c66:	2604      	movs	r6, #4
 8003c68:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003c6a:	4d17      	ldr	r5, [pc, #92]	; (8003cc8 <I2C4_MspInit+0xb4>)
 8003c6c:	a903      	add	r1, sp, #12
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f001 f9a2 	bl	8004fb8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c78:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003c7a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c7e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003c82:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003c84:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003c86:	a903      	add	r1, sp, #12
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f001 f995 	bl	8004fb8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003c8e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c96:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8003c9a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	9302      	str	r3, [sp, #8]
 8003ca4:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003ca6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cae:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003cb2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8003cbe:	b009      	add	sp, #36	; 0x24
 8003cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cc4:	58024400 	.word	0x58024400
 8003cc8:	58020c00 	.word	0x58020c00

08003ccc <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cd4:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003cd6:	4c09      	ldr	r4, [pc, #36]	; (8003cfc <I2C4_MspDeInit+0x30>)
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f001 fa7d 	bl	80051d8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ce2:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f001 fa77 	bl	80051d8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003cea:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <I2C4_MspDeInit+0x34>)
 8003cec:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	58020c00 	.word	0x58020c00
 8003d00:	58024400 	.word	0x58024400

08003d04 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003d08:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d0c:	9402      	str	r4, [sp, #8]
 8003d0e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003d12:	9401      	str	r4, [sp, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4601      	mov	r1, r0
 8003d1c:	4804      	ldr	r0, [pc, #16]	; (8003d30 <I2C4_WriteReg+0x2c>)
 8003d1e:	f001 fd5a 	bl	80057d6 <HAL_I2C_Mem_Write>
 8003d22:	b910      	cbnz	r0, 8003d2a <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003d24:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003d26:	b004      	add	sp, #16
 8003d28:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003d2a:	f06f 0007 	mvn.w	r0, #7
 8003d2e:	e7fa      	b.n	8003d26 <I2C4_WriteReg+0x22>
 8003d30:	24001eec 	.word	0x24001eec

08003d34 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003d34:	b510      	push	{r4, lr}
 8003d36:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003d38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d3c:	9402      	str	r4, [sp, #8]
 8003d3e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003d42:	9401      	str	r4, [sp, #4]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	460a      	mov	r2, r1
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <I2C4_ReadReg+0x2c>)
 8003d4e:	f001 fe17 	bl	8005980 <HAL_I2C_Mem_Read>
 8003d52:	b910      	cbnz	r0, 8003d5a <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003d54:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003d56:	b004      	add	sp, #16
 8003d58:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003d5a:	f06f 0007 	mvn.w	r0, #7
 8003d5e:	e7fa      	b.n	8003d56 <I2C4_ReadReg+0x22>
 8003d60:	24001eec 	.word	0x24001eec

08003d64 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <BSP_I2C4_DeInit+0x28>)
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8003d6c:	b10b      	cbz	r3, 8003d72 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	4770      	bx	lr
{
 8003d72:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8003d74:	4c06      	ldr	r4, [pc, #24]	; (8003d90 <BSP_I2C4_DeInit+0x2c>)
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7ff ffa8 	bl	8003ccc <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f001 fd11 	bl	80057a4 <HAL_I2C_DeInit>
 8003d82:	b900      	cbnz	r0, 8003d86 <BSP_I2C4_DeInit+0x22>
}
 8003d84:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8003d86:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003d8a:	e7fb      	b.n	8003d84 <BSP_I2C4_DeInit+0x20>
 8003d8c:	240014e4 	.word	0x240014e4
 8003d90:	24001eec 	.word	0x24001eec

08003d94 <MX_I2C4_Init>:
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8003d98:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003d9e:	2201      	movs	r2, #1
 8003da0:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003da2:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003da4:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003da6:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003da8:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003daa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003dac:	f001 fc9c 	bl	80056e8 <HAL_I2C_Init>
 8003db0:	b108      	cbz	r0, 8003db6 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8003db2:	2001      	movs	r0, #1
}
 8003db4:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003db6:	2100      	movs	r1, #0
 8003db8:	4620      	mov	r0, r4
 8003dba:	f001 febe 	bl	8005b3a <HAL_I2CEx_ConfigAnalogFilter>
 8003dbe:	b108      	cbz	r0, 8003dc4 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	e7f7      	b.n	8003db4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f001 fee5 	bl	8005b96 <HAL_I2CEx_ConfigDigitalFilter>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d0f1      	beq.n	8003db4 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	e7ef      	b.n	8003db4 <MX_I2C4_Init+0x20>

08003dd4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <BSP_I2C4_Init+0x48>)
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <BSP_I2C4_Init+0x4c>)
 8003dd8:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <BSP_I2C4_Init+0x50>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	b10b      	cbz	r3, 8003de4 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8003de0:	2000      	movs	r0, #0
}
 8003de2:	4770      	bx	lr
{
 8003de4:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <BSP_I2C4_Init+0x50>)
 8003dea:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003dec:	480b      	ldr	r0, [pc, #44]	; (8003e1c <BSP_I2C4_Init+0x48>)
 8003dee:	f001 fe9f 	bl	8005b30 <HAL_I2C_GetState>
 8003df2:	b108      	cbz	r0, 8003df8 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8003df4:	2000      	movs	r0, #0
}
 8003df6:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8003df8:	4c08      	ldr	r4, [pc, #32]	; (8003e1c <BSP_I2C4_Init+0x48>)
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7ff ff0a 	bl	8003c14 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003e00:	f003 fbc6 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 8003e04:	4908      	ldr	r1, [pc, #32]	; (8003e28 <BSP_I2C4_Init+0x54>)
 8003e06:	f7ff febf 	bl	8003b88 <I2C_GetTiming>
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ffc1 	bl	8003d94 <MX_I2C4_Init>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0ef      	beq.n	8003df6 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8003e16:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003e1a:	e7ec      	b.n	8003df6 <BSP_I2C4_Init+0x22>
 8003e1c:	24001eec 	.word	0x24001eec
 8003e20:	58001c00 	.word	0x58001c00
 8003e24:	240014e4 	.word	0x240014e4
 8003e28:	000186a0 	.word	0x000186a0

08003e2c <BSP_I2C4_WriteReg>:
{
 8003e2c:	b500      	push	{lr}
 8003e2e:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	2201      	movs	r2, #1
 8003e36:	f7ff ff65 	bl	8003d04 <I2C4_WriteReg>
 8003e3a:	b910      	cbnz	r0, 8003e42 <BSP_I2C4_WriteReg+0x16>
}
 8003e3c:	b003      	add	sp, #12
 8003e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <BSP_I2C4_WriteReg+0x2c>)
 8003e44:	f001 fe77 	bl	8005b36 <HAL_I2C_GetError>
 8003e48:	2804      	cmp	r0, #4
 8003e4a:	d002      	beq.n	8003e52 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e4c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e50:	e7f4      	b.n	8003e3c <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e52:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e56:	e7f1      	b.n	8003e3c <BSP_I2C4_WriteReg+0x10>
 8003e58:	24001eec 	.word	0x24001eec

08003e5c <BSP_I2C4_ReadReg>:
{
 8003e5c:	b500      	push	{lr}
 8003e5e:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	2201      	movs	r2, #1
 8003e66:	f7ff ff65 	bl	8003d34 <I2C4_ReadReg>
 8003e6a:	b910      	cbnz	r0, 8003e72 <BSP_I2C4_ReadReg+0x16>
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003e72:	4805      	ldr	r0, [pc, #20]	; (8003e88 <BSP_I2C4_ReadReg+0x2c>)
 8003e74:	f001 fe5f 	bl	8005b36 <HAL_I2C_GetError>
 8003e78:	2804      	cmp	r0, #4
 8003e7a:	d002      	beq.n	8003e82 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003e7c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003e80:	e7f4      	b.n	8003e6c <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003e82:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8003e86:	e7f1      	b.n	8003e6c <BSP_I2C4_ReadReg+0x10>
 8003e88:	24001eec 	.word	0x24001eec

08003e8c <BSP_GetTick>:
{
 8003e8c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8003e8e:	f000 fde7 	bl	8004a60 <HAL_GetTick>
}
 8003e92:	bd08      	pop	{r3, pc}

08003e94 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e98:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8003e9a:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <OSPI_NOR_MspInit+0x200>)
 8003e9c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8003ea8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003eac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003eb0:	9201      	str	r2, [sp, #4]
 8003eb2:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8003eb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8003ebc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ebe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8003ec4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ec8:	f042 0202 	orr.w	r2, r2, #2
 8003ecc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ed0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ed4:	f002 0202 	and.w	r2, r2, #2
 8003ed8:	9202      	str	r2, [sp, #8]
 8003eda:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8003edc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ee0:	f042 0204 	orr.w	r2, r2, #4
 8003ee4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003ee8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003eec:	f002 0204 	and.w	r2, r2, #4
 8003ef0:	9203      	str	r2, [sp, #12]
 8003ef2:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8003ef4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f00:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f04:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003f08:	9204      	str	r2, [sp, #16]
 8003f0a:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8003f0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f10:	f042 0208 	orr.w	r2, r2, #8
 8003f14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f18:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f1c:	f002 0208 	and.w	r2, r2, #8
 8003f20:	9205      	str	r2, [sp, #20]
 8003f22:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8003f24:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f28:	f042 0220 	orr.w	r2, r2, #32
 8003f2c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f30:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f34:	f002 0220 	and.w	r2, r2, #32
 8003f38:	9206      	str	r2, [sp, #24]
 8003f3a:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8003f3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f40:	f042 0220 	orr.w	r2, r2, #32
 8003f44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f48:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f4c:	f002 0220 	and.w	r2, r2, #32
 8003f50:	9207      	str	r2, [sp, #28]
 8003f52:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8003f54:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f58:	f042 0220 	orr.w	r2, r2, #32
 8003f5c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f60:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f64:	f002 0220 	and.w	r2, r2, #32
 8003f68:	9208      	str	r2, [sp, #32]
 8003f6a:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8003f6c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f70:	f042 0204 	orr.w	r2, r2, #4
 8003f74:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f78:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f7c:	f002 0204 	and.w	r2, r2, #4
 8003f80:	9209      	str	r2, [sp, #36]	; 0x24
 8003f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8003f84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f8c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003f90:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003f94:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003f98:	920a      	str	r2, [sp, #40]	; 0x28
 8003f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8003f9c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003fa8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003fac:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003fb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8003fb4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8003fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8003fcc:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8003fd0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fd4:	f04f 0a02 	mov.w	sl, #2
 8003fd8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8003fe4:	240a      	movs	r4, #10
 8003fe6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8003fe8:	a90d      	add	r1, sp, #52	; 0x34
 8003fea:	482b      	ldr	r0, [pc, #172]	; (8004098 <OSPI_NOR_MspInit+0x204>)
 8003fec:	f000 ffe4 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8003ff4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003ff6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80040ac <OSPI_NOR_MspInit+0x218>
 8003ffa:	a90d      	add	r1, sp, #52	; 0x34
 8003ffc:	4648      	mov	r0, r9
 8003ffe:	f000 ffdb 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8004002:	2304      	movs	r3, #4
 8004004:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800400a:	2509      	movs	r5, #9
 800400c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800400e:	a90d      	add	r1, sp, #52	; 0x34
 8004010:	4822      	ldr	r0, [pc, #136]	; (800409c <OSPI_NOR_MspInit+0x208>)
 8004012:	f000 ffd1 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8004016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800401a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800401c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800401e:	a90d      	add	r1, sp, #52	; 0x34
 8004020:	481f      	ldr	r0, [pc, #124]	; (80040a0 <OSPI_NOR_MspInit+0x20c>)
 8004022:	f000 ffc9 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8004026:	f44f 7800 	mov.w	r8, #512	; 0x200
 800402a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800402e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8004030:	4e1c      	ldr	r6, [pc, #112]	; (80040a4 <OSPI_NOR_MspInit+0x210>)
 8004032:	a90d      	add	r1, sp, #52	; 0x34
 8004034:	4630      	mov	r0, r6
 8004036:	f000 ffbf 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800403a:	2780      	movs	r7, #128	; 0x80
 800403c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800403e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8004040:	a90d      	add	r1, sp, #52	; 0x34
 8004042:	4630      	mov	r0, r6
 8004044:	f000 ffb8 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8004048:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800404c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800404e:	a90d      	add	r1, sp, #52	; 0x34
 8004050:	4630      	mov	r0, r6
 8004052:	f000 ffb1 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8004056:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800405a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800405c:	a90d      	add	r1, sp, #52	; 0x34
 800405e:	4648      	mov	r0, r9
 8004060:	f000 ffaa 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8004064:	2308      	movs	r3, #8
 8004066:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8004068:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800406a:	a90d      	add	r1, sp, #52	; 0x34
 800406c:	480e      	ldr	r0, [pc, #56]	; (80040a8 <OSPI_NOR_MspInit+0x214>)
 800406e:	f000 ffa3 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8004072:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8004076:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8004078:	a90d      	add	r1, sp, #52	; 0x34
 800407a:	4807      	ldr	r0, [pc, #28]	; (8004098 <OSPI_NOR_MspInit+0x204>)
 800407c:	f000 ff9c 	bl	8004fb8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8004080:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8004082:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8004084:	a90d      	add	r1, sp, #52	; 0x34
 8004086:	4806      	ldr	r0, [pc, #24]	; (80040a0 <OSPI_NOR_MspInit+0x20c>)
 8004088:	f000 ff96 	bl	8004fb8 <HAL_GPIO_Init>
}
 800408c:	b013      	add	sp, #76	; 0x4c
 800408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
 8004098:	58021800 	.word	0x58021800
 800409c:	58020400 	.word	0x58020400
 80040a0:	58020c00 	.word	0x58020c00
 80040a4:	58021400 	.word	0x58021400
 80040a8:	58021c00 	.word	0x58021c00
 80040ac:	58020800 	.word	0x58020800

080040b0 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040b4:	4c24      	ldr	r4, [pc, #144]	; (8004148 <OSPI_NOR_ResetMemory+0x98>)
 80040b6:	235c      	movs	r3, #92	; 0x5c
 80040b8:	fb03 4400 	mla	r4, r3, r0, r4
 80040bc:	2200      	movs	r2, #0
 80040be:	4611      	mov	r1, r2
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fbe7 	bl	8003894 <MX25LM51245G_ResetEnable>
 80040c6:	bb60      	cbnz	r0, 8004122 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040c8:	2200      	movs	r2, #0
 80040ca:	4611      	mov	r1, r2
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff fc14 	bl	80038fa <MX25LM51245G_ResetMemory>
 80040d2:	bb48      	cbnz	r0, 8004128 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040d4:	2200      	movs	r2, #0
 80040d6:	2101      	movs	r1, #1
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fbdb 	bl	8003894 <MX25LM51245G_ResetEnable>
 80040de:	bb30      	cbnz	r0, 800412e <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040e0:	2200      	movs	r2, #0
 80040e2:	2101      	movs	r1, #1
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff fc08 	bl	80038fa <MX25LM51245G_ResetMemory>
 80040ea:	bb18      	cbnz	r0, 8004134 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040ec:	2201      	movs	r2, #1
 80040ee:	4611      	mov	r1, r2
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7ff fbcf 	bl	8003894 <MX25LM51245G_ResetEnable>
 80040f6:	bb00      	cbnz	r0, 800413a <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80040f8:	2201      	movs	r2, #1
 80040fa:	4611      	mov	r1, r2
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff fbfc 	bl	80038fa <MX25LM51245G_ResetMemory>
 8004102:	4604      	mov	r4, r0
 8004104:	b9e0      	cbnz	r0, 8004140 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004106:	4811      	ldr	r0, [pc, #68]	; (800414c <OSPI_NOR_ResetMemory+0x9c>)
 8004108:	2301      	movs	r3, #1
 800410a:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800410e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8004112:	2300      	movs	r3, #0
 8004114:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004116:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	f000 fca7 	bl	8004a6c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 800411e:	4620      	mov	r0, r4
 8004120:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004122:	f06f 0404 	mvn.w	r4, #4
 8004126:	e7fa      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004128:	f06f 0404 	mvn.w	r4, #4
 800412c:	e7f7      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800412e:	f06f 0404 	mvn.w	r4, #4
 8004132:	e7f4      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004134:	f06f 0404 	mvn.w	r4, #4
 8004138:	e7f1      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800413a:	f06f 0404 	mvn.w	r4, #4
 800413e:	e7ee      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004140:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8004144:	e7eb      	b.n	800411e <OSPI_NOR_ResetMemory+0x6e>
 8004146:	bf00      	nop
 8004148:	24001f40 	.word	0x24001f40
 800414c:	24001f38 	.word	0x24001f38

08004150 <OSPI_NOR_MspDeInit>:
{
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8004152:	2104      	movs	r1, #4
 8004154:	4820      	ldr	r0, [pc, #128]	; (80041d8 <OSPI_NOR_MspDeInit+0x88>)
 8004156:	f001 f83f 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800415a:	4f20      	ldr	r7, [pc, #128]	; (80041dc <OSPI_NOR_MspDeInit+0x8c>)
 800415c:	2120      	movs	r1, #32
 800415e:	4638      	mov	r0, r7
 8004160:	f001 f83a 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8004164:	4e1e      	ldr	r6, [pc, #120]	; (80041e0 <OSPI_NOR_MspDeInit+0x90>)
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	4630      	mov	r0, r6
 800416a:	f001 f835 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800416e:	4d1d      	ldr	r5, [pc, #116]	; (80041e4 <OSPI_NOR_MspDeInit+0x94>)
 8004170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004174:	4628      	mov	r0, r5
 8004176:	f001 f82f 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800417a:	4c1b      	ldr	r4, [pc, #108]	; (80041e8 <OSPI_NOR_MspDeInit+0x98>)
 800417c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004180:	4620      	mov	r0, r4
 8004182:	f001 f829 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	4620      	mov	r0, r4
 800418a:	f001 f825 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	4620      	mov	r0, r4
 8004192:	f001 f821 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8004196:	2102      	movs	r1, #2
 8004198:	4638      	mov	r0, r7
 800419a:	f001 f81d 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800419e:	2108      	movs	r1, #8
 80041a0:	4812      	ldr	r0, [pc, #72]	; (80041ec <OSPI_NOR_MspDeInit+0x9c>)
 80041a2:	f001 f819 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 80041a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041aa:	4630      	mov	r0, r6
 80041ac:	f001 f814 	bl	80051d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	4628      	mov	r0, r5
 80041b4:	f001 f810 	bl	80051d8 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <OSPI_NOR_MspDeInit+0xa0>)
 80041ba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 80041c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 80041ca:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80041ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80041d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d8:	58020400 	.word	0x58020400
 80041dc:	58020800 	.word	0x58020800
 80041e0:	58021800 	.word	0x58021800
 80041e4:	58020c00 	.word	0x58020c00
 80041e8:	58021400 	.word	0x58021400
 80041ec:	58021c00 	.word	0x58021c00
 80041f0:	58024400 	.word	0x58024400

080041f4 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80041fa:	4d2b      	ldr	r5, [pc, #172]	; (80042a8 <OSPI_NOR_ExitOPIMode+0xb4>)
 80041fc:	235c      	movs	r3, #92	; 0x5c
 80041fe:	fb03 5500 	mla	r5, r3, r0, r5
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <OSPI_NOR_ExitOPIMode+0xb8>)
 8004204:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004208:	789a      	ldrb	r2, [r3, #2]
 800420a:	7859      	ldrb	r1, [r3, #1]
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff f9cf 	bl	80035b0 <MX25LM51245G_WriteEnable>
 8004212:	2800      	cmp	r0, #0
 8004214:	d138      	bne.n	8004288 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 800421c:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8004220:	4922      	ldr	r1, [pc, #136]	; (80042ac <OSPI_NOR_ExitOPIMode+0xb8>)
 8004222:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	788a      	ldrb	r2, [r1, #2]
 800422a:	7849      	ldrb	r1, [r1, #1]
 800422c:	4628      	mov	r0, r5
 800422e:	f7ff fa56 	bl	80036de <MX25LM51245G_WriteCfg2Register>
 8004232:	4606      	mov	r6, r0
 8004234:	bb58      	cbnz	r0, 800428e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004236:	2028      	movs	r0, #40	; 0x28
 8004238:	f000 fc18 	bl	8004a6c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <OSPI_NOR_ExitOPIMode+0xb8>)
 800423e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004242:	789b      	ldrb	r3, [r3, #2]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d014      	beq.n	8004272 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004248:	2200      	movs	r2, #0
 800424a:	4611      	mov	r1, r2
 800424c:	4628      	mov	r0, r5
 800424e:	f7ff f872 	bl	8003336 <MX25LM51245G_AutoPollingMemReady>
 8004252:	b9f8      	cbnz	r0, 8004294 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	461a      	mov	r2, r3
 800425c:	4619      	mov	r1, r3
 800425e:	4628      	mov	r0, r5
 8004260:	f7ff faa4 	bl	80037ac <MX25LM51245G_ReadCfg2Register>
 8004264:	b9c8      	cbnz	r0, 800429a <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8004266:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800426a:	b9cb      	cbnz	r3, 80042a0 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 800426c:	4630      	mov	r0, r6
 800426e:	b004      	add	sp, #16
 8004270:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004272:	2300      	movs	r3, #0
 8004274:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004276:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8004278:	4628      	mov	r0, r5
 800427a:	f002 fb31 	bl	80068e0 <HAL_OSPI_Init>
 800427e:	2800      	cmp	r0, #0
 8004280:	d0e2      	beq.n	8004248 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004282:	f06f 0603 	mvn.w	r6, #3
 8004286:	e7df      	b.n	8004248 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004288:	f06f 0604 	mvn.w	r6, #4
 800428c:	e7ee      	b.n	800426c <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800428e:	f06f 0604 	mvn.w	r6, #4
 8004292:	e7eb      	b.n	800426c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004294:	f06f 0604 	mvn.w	r6, #4
 8004298:	e7e8      	b.n	800426c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800429a:	f06f 0604 	mvn.w	r6, #4
 800429e:	e7e5      	b.n	800426c <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80042a0:	f06f 0604 	mvn.w	r6, #4
  return ret;
 80042a4:	e7e2      	b.n	800426c <OSPI_NOR_ExitOPIMode+0x78>
 80042a6:	bf00      	nop
 80042a8:	24001f40 	.word	0x24001f40
 80042ac:	24001f38 	.word	0x24001f38

080042b0 <OSPI_NOR_EnterSOPIMode>:
{
 80042b0:	b530      	push	{r4, r5, lr}
 80042b2:	b085      	sub	sp, #20
 80042b4:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80042b6:	4c2e      	ldr	r4, [pc, #184]	; (8004370 <OSPI_NOR_EnterSOPIMode+0xc0>)
 80042b8:	235c      	movs	r3, #92	; 0x5c
 80042ba:	fb03 4400 	mla	r4, r3, r0, r4
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042c0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80042c4:	789a      	ldrb	r2, [r3, #2]
 80042c6:	7859      	ldrb	r1, [r3, #1]
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff f971 	bl	80035b0 <MX25LM51245G_WriteEnable>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d139      	bne.n	8004346 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80042d2:	4928      	ldr	r1, [pc, #160]	; (8004374 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80042d8:	2307      	movs	r3, #7
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042e0:	788a      	ldrb	r2, [r1, #2]
 80042e2:	7849      	ldrb	r1, [r1, #1]
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff f9fa 	bl	80036de <MX25LM51245G_WriteCfg2Register>
 80042ea:	bb78      	cbnz	r0, 800434c <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80042ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80042f2:	789a      	ldrb	r2, [r3, #2]
 80042f4:	7859      	ldrb	r1, [r3, #1]
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7ff f95a 	bl	80035b0 <MX25LM51245G_WriteEnable>
 80042fc:	bb48      	cbnz	r0, 8004352 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80042fe:	481d      	ldr	r0, [pc, #116]	; (8004374 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8004300:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8004304:	2301      	movs	r3, #1
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	78aa      	ldrb	r2, [r5, #2]
 800430c:	7869      	ldrb	r1, [r5, #1]
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff f9e5 	bl	80036de <MX25LM51245G_WriteCfg2Register>
 8004314:	bb00      	cbnz	r0, 8004358 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8004316:	2028      	movs	r0, #40	; 0x28
 8004318:	f000 fba8 	bl	8004a6c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800431c:	2200      	movs	r2, #0
 800431e:	2101      	movs	r1, #1
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff f808 	bl	8003336 <MX25LM51245G_AutoPollingMemReady>
 8004326:	b9d0      	cbnz	r0, 800435e <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2300      	movs	r3, #0
 800432e:	461a      	mov	r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	4620      	mov	r0, r4
 8004334:	f7ff fa3a 	bl	80037ac <MX25LM51245G_ReadCfg2Register>
 8004338:	b9a0      	cbnz	r0, 8004364 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800433a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d113      	bne.n	800436a <OSPI_NOR_EnterSOPIMode+0xba>
}
 8004342:	b005      	add	sp, #20
 8004344:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004346:	f06f 0004 	mvn.w	r0, #4
 800434a:	e7fa      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800434c:	f06f 0004 	mvn.w	r0, #4
 8004350:	e7f7      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004352:	f06f 0004 	mvn.w	r0, #4
 8004356:	e7f4      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004358:	f06f 0004 	mvn.w	r0, #4
 800435c:	e7f1      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800435e:	f06f 0004 	mvn.w	r0, #4
 8004362:	e7ee      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004364:	f06f 0004 	mvn.w	r0, #4
 8004368:	e7eb      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800436a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800436e:	e7e8      	b.n	8004342 <OSPI_NOR_EnterSOPIMode+0x92>
 8004370:	24001f40 	.word	0x24001f40
 8004374:	24001f38 	.word	0x24001f38

08004378 <OSPI_NOR_EnterDOPIMode>:
{
 8004378:	b530      	push	{r4, r5, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800437e:	4c35      	ldr	r4, [pc, #212]	; (8004454 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8004380:	235c      	movs	r3, #92	; 0x5c
 8004382:	fb03 4400 	mla	r4, r3, r0, r4
 8004386:	4b34      	ldr	r3, [pc, #208]	; (8004458 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004388:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800438c:	789a      	ldrb	r2, [r3, #2]
 800438e:	7859      	ldrb	r1, [r3, #1]
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff f90d 	bl	80035b0 <MX25LM51245G_WriteEnable>
 8004396:	2800      	cmp	r0, #0
 8004398:	d144      	bne.n	8004424 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800439a:	492f      	ldr	r1, [pc, #188]	; (8004458 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800439c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80043a0:	2307      	movs	r3, #7
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a8:	788a      	ldrb	r2, [r1, #2]
 80043aa:	7849      	ldrb	r1, [r1, #1]
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff f996 	bl	80036de <MX25LM51245G_WriteCfg2Register>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d139      	bne.n	800442a <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80043b6:	4b28      	ldr	r3, [pc, #160]	; (8004458 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80043b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80043bc:	789a      	ldrb	r2, [r3, #2]
 80043be:	7859      	ldrb	r1, [r3, #1]
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff f8f5 	bl	80035b0 <MX25LM51245G_WriteEnable>
 80043c6:	bb98      	cbnz	r0, 8004430 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 80043c8:	4923      	ldr	r1, [pc, #140]	; (8004458 <OSPI_NOR_EnterDOPIMode+0xe0>)
 80043ca:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80043ce:	2302      	movs	r3, #2
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	788a      	ldrb	r2, [r1, #2]
 80043d6:	7849      	ldrb	r1, [r1, #1]
 80043d8:	4620      	mov	r0, r4
 80043da:	f7ff f980 	bl	80036de <MX25LM51245G_WriteCfg2Register>
 80043de:	bb50      	cbnz	r0, 8004436 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80043e0:	2028      	movs	r0, #40	; 0x28
 80043e2:	f000 fb43 	bl	8004a6c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80043e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ea:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80043ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80043f2:	4620      	mov	r0, r4
 80043f4:	f002 fa74 	bl	80068e0 <HAL_OSPI_Init>
 80043f8:	bb00      	cbnz	r0, 800443c <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80043fa:	2201      	movs	r2, #1
 80043fc:	4611      	mov	r1, r2
 80043fe:	4620      	mov	r0, r4
 8004400:	f7fe ff99 	bl	8003336 <MX25LM51245G_AutoPollingMemReady>
 8004404:	b9e8      	cbnz	r0, 8004442 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004406:	ab03      	add	r3, sp, #12
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	2201      	movs	r2, #1
 800440e:	4611      	mov	r1, r2
 8004410:	4620      	mov	r0, r4
 8004412:	f7ff f9cb 	bl	80037ac <MX25LM51245G_ReadCfg2Register>
 8004416:	b9b8      	cbnz	r0, 8004448 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8004418:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d116      	bne.n	800444e <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8004420:	b005      	add	sp, #20
 8004422:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004424:	f06f 0004 	mvn.w	r0, #4
 8004428:	e7fa      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800442a:	f06f 0004 	mvn.w	r0, #4
 800442e:	e7f7      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004430:	f06f 0004 	mvn.w	r0, #4
 8004434:	e7f4      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004436:	f06f 0004 	mvn.w	r0, #4
 800443a:	e7f1      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800443c:	f06f 0003 	mvn.w	r0, #3
 8004440:	e7ee      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004442:	f06f 0004 	mvn.w	r0, #4
 8004446:	e7eb      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004448:	f06f 0004 	mvn.w	r0, #4
 800444c:	e7e8      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800444e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004452:	e7e5      	b.n	8004420 <OSPI_NOR_EnterDOPIMode+0xa8>
 8004454:	24001f40 	.word	0x24001f40
 8004458:	24001f38 	.word	0x24001f38

0800445c <MX_OSPI_NOR_Init>:
{
 800445c:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <MX_OSPI_NOR_Init+0x4c>)
 8004460:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8004462:	2304      	movs	r3, #4
 8004464:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8004466:	2300      	movs	r3, #0
 8004468:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800446a:	680a      	ldr	r2, [r1, #0]
 800446c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800446e:	2202      	movs	r2, #2
 8004470:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004472:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8004474:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8004476:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004478:	684a      	ldr	r2, [r1, #4]
 800447a:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800447c:	688a      	ldr	r2, [r1, #8]
 800447e:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8004480:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004482:	2308      	movs	r3, #8
 8004484:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8004486:	68cb      	ldr	r3, [r1, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d005      	beq.n	8004498 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800448c:	2300      	movs	r3, #0
 800448e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004490:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004492:	f002 fa25 	bl	80068e0 <HAL_OSPI_Init>
}
 8004496:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8004498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800449c:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800449e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044a2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80044a4:	e7f5      	b.n	8004492 <MX_OSPI_NOR_Init+0x36>
 80044a6:	bf00      	nop
 80044a8:	52005000 	.word	0x52005000

080044ac <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80044ac:	bb38      	cbnz	r0, 80044fe <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044b4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044b8:	789b      	ldrb	r3, [r3, #2]
 80044ba:	b983      	cbnz	r3, 80044de <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044c2:	2201      	movs	r2, #1
 80044c4:	7859      	ldrb	r1, [r3, #1]
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80044c8:	205c      	movs	r0, #92	; 0x5c
 80044ca:	fb00 3004 	mla	r0, r0, r4, r3
 80044ce:	f7fe ffb1 	bl	8003434 <MX25LM51245G_EnableMemoryMappedModeSTR>
 80044d2:	b9b8      	cbnz	r0, 8004504 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044d6:	2202      	movs	r2, #2
 80044d8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80044dc:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044e0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044e4:	7859      	ldrb	r1, [r3, #1]
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80044e8:	205c      	movs	r0, #92	; 0x5c
 80044ea:	fb00 3004 	mla	r0, r0, r4, r3
 80044ee:	f7ff f80d 	bl	800350c <MX25LM51245G_EnableMemoryMappedModeDTR>
 80044f2:	b950      	cbnz	r0, 800450a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80044f6:	2202      	movs	r2, #2
 80044f8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80044fc:	e7ee      	b.n	80044dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80044fe:	f06f 0001 	mvn.w	r0, #1
}
 8004502:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004504:	f06f 0004 	mvn.w	r0, #4
 8004508:	e7e8      	b.n	80044dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800450a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800450e:	e7e5      	b.n	80044dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 8004510:	24001f38 	.word	0x24001f38
 8004514:	24001f40 	.word	0x24001f40

08004518 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004518:	b990      	cbnz	r0, 8004540 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 800451a:	b510      	push	{r4, lr}
 800451c:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8004520:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d10e      	bne.n	8004546 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 800452a:	205c      	movs	r0, #92	; 0x5c
 800452c:	fb00 3004 	mla	r0, r0, r4, r3
 8004530:	f002 f98e 	bl	8006850 <HAL_OSPI_Abort>
 8004534:	b950      	cbnz	r0, 800454c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8004538:	2201      	movs	r2, #1
 800453a:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800453e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004540:	f06f 0001 	mvn.w	r0, #1
}
 8004544:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8004546:	f06f 001a 	mvn.w	r0, #26
 800454a:	e7f8      	b.n	800453e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 800454c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004550:	e7f5      	b.n	800453e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8004552:	bf00      	nop
 8004554:	24001f38 	.word	0x24001f38
 8004558:	24001f40 	.word	0x24001f40

0800455c <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800455c:	bb08      	cbnz	r0, 80045a2 <BSP_OSPI_NOR_DeInit+0x46>
{
 800455e:	b510      	push	{r4, lr}
 8004560:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <BSP_OSPI_NOR_DeInit+0x54>)
 8004564:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d013      	beq.n	8004594 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <BSP_OSPI_NOR_DeInit+0x54>)
 800456e:	2200      	movs	r2, #0
 8004570:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8004574:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004578:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800457a:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <BSP_OSPI_NOR_DeInit+0x58>)
 800457e:	225c      	movs	r2, #92	; 0x5c
 8004580:	fb02 3404 	mla	r4, r2, r4, r3
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff fde3 	bl	8004150 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800458a:	4620      	mov	r0, r4
 800458c:	f001 feae 	bl	80062ec <HAL_OSPI_DeInit>
 8004590:	b950      	cbnz	r0, 80045a8 <BSP_OSPI_NOR_DeInit+0x4c>
}
 8004592:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004594:	f7ff ffc0 	bl	8004518 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8004598:	2800      	cmp	r0, #0
 800459a:	d0e7      	beq.n	800456c <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800459c:	f06f 0004 	mvn.w	r0, #4
 80045a0:	e7f7      	b.n	8004592 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 80045a2:	f06f 0001 	mvn.w	r0, #1
}
 80045a6:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 80045a8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80045ac:	e7f1      	b.n	8004592 <BSP_OSPI_NOR_DeInit+0x36>
 80045ae:	bf00      	nop
 80045b0:	24001f38 	.word	0x24001f38
 80045b4:	24001f40 	.word	0x24001f40

080045b8 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d141      	bne.n	8004640 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	460d      	mov	r5, r1
 80045c0:	4616      	mov	r6, r2
 80045c2:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045c6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d03b      	beq.n	8004646 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045d4:	785b      	ldrb	r3, [r3, #1]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d00b      	beq.n	80045f2 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80045da:	2901      	cmp	r1, #1
 80045dc:	d025      	beq.n	800462a <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 80045de:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80045e8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80045ec:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80045ee:	70a6      	strb	r6, [r4, #2]
}
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80045f2:	2901      	cmp	r1, #1
 80045f4:	d105      	bne.n	8004602 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80045f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80045fc:	789b      	ldrb	r3, [r3, #2]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01c      	beq.n	800463c <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fdf6 	bl	80041f4 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8004608:	2800      	cmp	r0, #0
 800460a:	bf08      	it	eq
 800460c:	2d01      	cmpeq	r5, #1
 800460e:	d10f      	bne.n	8004630 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8004612:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	b91b      	cbnz	r3, 8004622 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800461a:	4620      	mov	r0, r4
 800461c:	f7ff feac 	bl	8004378 <OSPI_NOR_EnterDOPIMode>
 8004620:	e006      	b.n	8004630 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff fe44 	bl	80042b0 <OSPI_NOR_EnterSOPIMode>
 8004628:	e002      	b.n	8004630 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800462a:	b922      	cbnz	r2, 8004636 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800462c:	f7ff fe40 	bl	80042b0 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8004630:	2800      	cmp	r0, #0
 8004632:	d1dd      	bne.n	80045f0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8004634:	e7d4      	b.n	80045e0 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8004636:	f7ff fe9f 	bl	8004378 <OSPI_NOR_EnterDOPIMode>
 800463a:	e7f9      	b.n	8004630 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 800463c:	2000      	movs	r0, #0
 800463e:	e7cf      	b.n	80045e0 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8004640:	f06f 0001 	mvn.w	r0, #1
}
 8004644:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8004646:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800464a:	e7d1      	b.n	80045f0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800464c:	24001f38 	.word	0x24001f38

08004650 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004650:	2800      	cmp	r0, #0
 8004652:	d13f      	bne.n	80046d4 <BSP_OSPI_NOR_Init+0x84>
{
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	460d      	mov	r5, r1
 800465a:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <BSP_OSPI_NOR_Init+0x9c>)
 800465e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004662:	b113      	cbz	r3, 800466a <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8004664:	2000      	movs	r0, #0
}
 8004666:	b00e      	add	sp, #56	; 0x38
 8004668:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800466a:	4e21      	ldr	r6, [pc, #132]	; (80046f0 <BSP_OSPI_NOR_Init+0xa0>)
 800466c:	235c      	movs	r3, #92	; 0x5c
 800466e:	fb03 6600 	mla	r6, r3, r0, r6
 8004672:	4630      	mov	r0, r6
 8004674:	f7ff fc0e 	bl	8003e94 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8004678:	a805      	add	r0, sp, #20
 800467a:	f7fe fe43 	bl	8003304 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800467e:	2303      	movs	r3, #3
 8004680:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004682:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004688:	b313      	cbz	r3, 80046d0 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800468a:	fab3 f383 	clz	r3, r3
 800468e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004690:	2300      	movs	r3, #0
 8004692:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8004694:	786b      	ldrb	r3, [r5, #1]
 8004696:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004698:	a901      	add	r1, sp, #4
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff fede 	bl	800445c <MX_OSPI_NOR_Init>
 80046a0:	b9d8      	cbnz	r0, 80046da <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fd04 	bl	80040b0 <OSPI_NOR_ResetMemory>
 80046a8:	b9d0      	cbnz	r0, 80046e0 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <BSP_OSPI_NOR_Init+0x9c>)
 80046ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046b0:	789a      	ldrb	r2, [r3, #2]
 80046b2:	7859      	ldrb	r1, [r3, #1]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f7fe fe3e 	bl	8003336 <MX25LM51245G_AutoPollingMemReady>
 80046ba:	b9a0      	cbnz	r0, 80046e6 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80046bc:	786a      	ldrb	r2, [r5, #1]
 80046be:	7829      	ldrb	r1, [r5, #0]
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7ff ff79 	bl	80045b8 <BSP_OSPI_NOR_ConfigFlash>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d0cd      	beq.n	8004666 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80046ca:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80046ce:	e7ca      	b.n	8004666 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 80046d0:	2320      	movs	r3, #32
 80046d2:	e7dc      	b.n	800468e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80046d4:	f06f 0001 	mvn.w	r0, #1
}
 80046d8:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 80046da:	f06f 0003 	mvn.w	r0, #3
 80046de:	e7c2      	b.n	8004666 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046e0:	f06f 0004 	mvn.w	r0, #4
 80046e4:	e7bf      	b.n	8004666 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80046e6:	f06f 0004 	mvn.w	r0, #4
 80046ea:	e7bc      	b.n	8004666 <BSP_OSPI_NOR_Init+0x16>
 80046ec:	24001f38 	.word	0x24001f38
 80046f0:	24001f40 	.word	0x24001f40

080046f4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80046fe:	2370      	movs	r3, #112	; 0x70
 8004700:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <FT5336_Probe+0x70>)
 8004706:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <FT5336_Probe+0x74>)
 800470a:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <FT5336_Probe+0x78>)
 800470e:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <FT5336_Probe+0x7c>)
 8004712:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8004714:	4b17      	ldr	r3, [pc, #92]	; (8004774 <FT5336_Probe+0x80>)
 8004716:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004718:	a902      	add	r1, sp, #8
 800471a:	4817      	ldr	r0, [pc, #92]	; (8004778 <FT5336_Probe+0x84>)
 800471c:	f7fe fd50 	bl	80031c0 <FT5336_RegisterBusIO>
 8004720:	b998      	cbnz	r0, 800474a <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8004722:	a901      	add	r1, sp, #4
 8004724:	4814      	ldr	r0, [pc, #80]	; (8004778 <FT5336_Probe+0x84>)
 8004726:	f7fe fc8d 	bl	8003044 <FT5336_ReadID>
 800472a:	b988      	cbnz	r0, 8004750 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800472c:	9b01      	ldr	r3, [sp, #4]
 800472e:	2b51      	cmp	r3, #81	; 0x51
 8004730:	d111      	bne.n	8004756 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <FT5336_Probe+0x84>)
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <FT5336_Probe+0x88>)
 8004736:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <FT5336_Probe+0x8c>)
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <FT5336_Probe+0x90>)
 800473e:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4798      	blx	r3
 8004744:	b950      	cbnz	r0, 800475c <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8004746:	b008      	add	sp, #32
 8004748:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800474a:	f06f 0007 	mvn.w	r0, #7
 800474e:	e7fa      	b.n	8004746 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004750:	f06f 0004 	mvn.w	r0, #4
 8004754:	e7f7      	b.n	8004746 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004756:	f06f 0006 	mvn.w	r0, #6
 800475a:	e7f4      	b.n	8004746 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800475c:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004760:	e7f1      	b.n	8004746 <FT5336_Probe+0x52>
 8004762:	bf00      	nop
 8004764:	08003dd5 	.word	0x08003dd5
 8004768:	08003d65 	.word	0x08003d65
 800476c:	08003e5d 	.word	0x08003e5d
 8004770:	08003e2d 	.word	0x08003e2d
 8004774:	08003e8d 	.word	0x08003e8d
 8004778:	24001f9c 	.word	0x24001f9c
 800477c:	24001fc4 	.word	0x24001fc4
 8004780:	2400000c 	.word	0x2400000c
 8004784:	24001fe8 	.word	0x24001fe8

08004788 <BSP_TS_Init>:
{
 8004788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800478c:	2800      	cmp	r0, #0
 800478e:	d150      	bne.n	8004832 <BSP_TS_Init+0xaa>
 8004790:	460c      	mov	r4, r1
 8004792:	4605      	mov	r5, r0
 8004794:	680b      	ldr	r3, [r1, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d04e      	beq.n	8004838 <BSP_TS_Init+0xb0>
 800479a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800479e:	d84e      	bhi.n	800483e <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80047a0:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80047a2:	2a00      	cmp	r2, #0
 80047a4:	d04e      	beq.n	8004844 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80047a6:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80047aa:	d84e      	bhi.n	800484a <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80047ac:	68c9      	ldr	r1, [r1, #12]
 80047ae:	4293      	cmp	r3, r2
 80047b0:	bf28      	it	cs
 80047b2:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80047b4:	4299      	cmp	r1, r3
 80047b6:	d84b      	bhi.n	8004850 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80047b8:	f7ff ff9c 	bl	80046f4 <FT5336_Probe>
 80047bc:	4606      	mov	r6, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d149      	bne.n	8004856 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 80047c2:	6820      	ldr	r0, [r4, #0]
 80047c4:	4925      	ldr	r1, [pc, #148]	; (800485c <BSP_TS_Init+0xd4>)
 80047c6:	016a      	lsls	r2, r5, #5
 80047c8:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 80047cc:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80047d2:	68a2      	ldr	r2, [r4, #8]
 80047d4:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80047d6:	68e2      	ldr	r2, [r4, #12]
 80047d8:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <BSP_TS_Init+0xd8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	a901      	add	r1, sp, #4
 80047e2:	4a20      	ldr	r2, [pc, #128]	; (8004864 <BSP_TS_Init+0xdc>)
 80047e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80047e8:	4798      	blx	r3
 80047ea:	2800      	cmp	r0, #0
 80047ec:	db1e      	blt.n	800482c <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <BSP_TS_Init+0xd4>)
 80047f0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80047f4:	9a02      	ldr	r2, [sp, #8]
 80047f6:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80047f8:	9a03      	ldr	r2, [sp, #12]
 80047fa:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80047fc:	462b      	mov	r3, r5
 80047fe:	b113      	cbz	r3, 8004806 <BSP_TS_Init+0x7e>
}
 8004800:	4630      	mov	r0, r6
 8004802:	b005      	add	sp, #20
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	68e1      	ldr	r1, [r4, #12]
 800480a:	440a      	add	r2, r1
 800480c:	3201      	adds	r2, #1
 800480e:	4913      	ldr	r1, [pc, #76]	; (800485c <BSP_TS_Init+0xd4>)
 8004810:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8004814:	3006      	adds	r0, #6
 8004816:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800481a:	6862      	ldr	r2, [r4, #4]
 800481c:	68e7      	ldr	r7, [r4, #12]
 800481e:	443a      	add	r2, r7
 8004820:	3201      	adds	r2, #1
 8004822:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004826:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004828:	3301      	adds	r3, #1
 800482a:	e7e8      	b.n	80047fe <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800482c:	f06f 0604 	mvn.w	r6, #4
 8004830:	e7e6      	b.n	8004800 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8004832:	f06f 0601 	mvn.w	r6, #1
 8004836:	e7e3      	b.n	8004800 <BSP_TS_Init+0x78>
 8004838:	f06f 0601 	mvn.w	r6, #1
 800483c:	e7e0      	b.n	8004800 <BSP_TS_Init+0x78>
 800483e:	f06f 0601 	mvn.w	r6, #1
 8004842:	e7dd      	b.n	8004800 <BSP_TS_Init+0x78>
 8004844:	f06f 0601 	mvn.w	r6, #1
 8004848:	e7da      	b.n	8004800 <BSP_TS_Init+0x78>
 800484a:	f06f 0601 	mvn.w	r6, #1
 800484e:	e7d7      	b.n	8004800 <BSP_TS_Init+0x78>
 8004850:	f06f 0601 	mvn.w	r6, #1
 8004854:	e7d4      	b.n	8004800 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8004856:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800485a:	e7d1      	b.n	8004800 <BSP_TS_Init+0x78>
 800485c:	24001fc8 	.word	0x24001fc8
 8004860:	24001fe8 	.word	0x24001fe8
 8004864:	24001fc4 	.word	0x24001fc4

08004868 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8004868:	2800      	cmp	r0, #0
 800486a:	d178      	bne.n	800495e <BSP_TS_GetState+0xf6>
{
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	460c      	mov	r4, r1
 8004872:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <BSP_TS_GetState+0xfc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	a901      	add	r1, sp, #4
 800487c:	4a3a      	ldr	r2, [pc, #232]	; (8004968 <BSP_TS_GetState+0x100>)
 800487e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004882:	4798      	blx	r3
 8004884:	2800      	cmp	r0, #0
 8004886:	db66      	blt.n	8004956 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8004888:	9e01      	ldr	r6, [sp, #4]
 800488a:	2e00      	cmp	r6, #0
 800488c:	d059      	beq.n	8004942 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800488e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8004890:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <BSP_TS_GetState+0x104>)
 8004894:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004898:	6899      	ldr	r1, [r3, #8]
 800489a:	f011 0f08 	tst.w	r1, #8
 800489e:	d141      	bne.n	8004924 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 80048a0:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 80048a2:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80048a4:	f011 0f02 	tst.w	r1, #2
 80048a8:	d005      	beq.n	80048b6 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80048aa:	4b30      	ldr	r3, [pc, #192]	; (800496c <BSP_TS_GetState+0x104>)
 80048ac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80048b6:	f011 0f04 	tst.w	r1, #4
 80048ba:	d005      	beq.n	80048c8 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <BSP_TS_GetState+0x104>)
 80048be:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 80048c2:	6952      	ldr	r2, [r2, #20]
 80048c4:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80048c8:	4a28      	ldr	r2, [pc, #160]	; (800496c <BSP_TS_GetState+0x104>)
 80048ca:	0168      	lsls	r0, r5, #5
 80048cc:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 80048d0:	5810      	ldr	r0, [r2, r0]
 80048d2:	fb00 f303 	mul.w	r3, r0, r3
 80048d6:	690a      	ldr	r2, [r1, #16]
 80048d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048dc:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80048de:	684a      	ldr	r2, [r1, #4]
 80048e0:	fb0c f202 	mul.w	r2, ip, r2
 80048e4:	6948      	ldr	r0, [r1, #20]
 80048e6:	fbb2 f2f0 	udiv	r2, r2, r0
 80048ea:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 80048ec:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80048ee:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80048f0:	4283      	cmp	r3, r0
 80048f2:	d91a      	bls.n	800492a <BSP_TS_GetState+0xc2>
 80048f4:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80048f6:	491d      	ldr	r1, [pc, #116]	; (800496c <BSP_TS_GetState+0x104>)
 80048f8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80048fc:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80048fe:	428a      	cmp	r2, r1
 8004900:	d915      	bls.n	800492e <BSP_TS_GetState+0xc6>
 8004902:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004904:	4919      	ldr	r1, [pc, #100]	; (800496c <BSP_TS_GetState+0x104>)
 8004906:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800490a:	68c9      	ldr	r1, [r1, #12]
 800490c:	42b1      	cmp	r1, r6
 800490e:	d301      	bcc.n	8004914 <BSP_TS_GetState+0xac>
 8004910:	4291      	cmp	r1, r2
 8004912:	d20e      	bcs.n	8004932 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <BSP_TS_GetState+0x104>)
 8004916:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800491a:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800491c:	68a3      	ldr	r3, [r4, #8]
 800491e:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 8004920:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004922:	e01a      	b.n	800495a <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 8004924:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 8004926:	4603      	mov	r3, r0
 8004928:	e7bc      	b.n	80048a4 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800492a:	1ac6      	subs	r6, r0, r3
 800492c:	e7e3      	b.n	80048f6 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800492e:	1a8a      	subs	r2, r1, r2
 8004930:	e7e8      	b.n	8004904 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004932:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <BSP_TS_GetState+0x104>)
 8004936:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800493a:	69eb      	ldr	r3, [r5, #28]
 800493c:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800493e:	2000      	movs	r0, #0
 8004940:	e00b      	b.n	800495a <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 8004942:	2000      	movs	r0, #0
 8004944:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <BSP_TS_GetState+0x104>)
 8004948:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800494c:	69ab      	ldr	r3, [r5, #24]
 800494e:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004950:	69eb      	ldr	r3, [r5, #28]
 8004952:	60a3      	str	r3, [r4, #8]
 8004954:	e001      	b.n	800495a <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004956:	f06f 0004 	mvn.w	r0, #4
}
 800495a:	b004      	add	sp, #16
 800495c:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800495e:	f06f 0001 	mvn.w	r0, #1
}
 8004962:	4770      	bx	lr
 8004964:	24001fe8 	.word	0x24001fe8
 8004968:	24001fc4 	.word	0x24001fc4
 800496c:	24001fc8 	.word	0x24001fc8

08004970 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <SystemInit+0x64>)
 8004972:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800497a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <SystemInit+0x68>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	4913      	ldr	r1, [pc, #76]	; (80049dc <SystemInit+0x6c>)
 8004990:	4001      	ands	r1, r0
 8004992:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004994:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004996:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004998:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800499a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80049b0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <SystemInit+0x70>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <SystemInit+0x74>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d203      	bcs.n	80049ca <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <SystemInit+0x78>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049ca:	4b02      	ldr	r3, [pc, #8]	; (80049d4 <SystemInit+0x64>)
 80049cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049d0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80049d2:	4770      	bx	lr
 80049d4:	e000ed00 	.word	0xe000ed00
 80049d8:	58024400 	.word	0x58024400
 80049dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80049e0:	5c001000 	.word	0x5c001000
 80049e4:	ffff0000 	.word	0xffff0000
 80049e8:	51008000 	.word	0x51008000

080049ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ec:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ee:	2003      	movs	r0, #3
 80049f0:	f000 f850 	bl	8004a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80049f4:	f002 fb54 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 80049f8:	490f      	ldr	r1, [pc, #60]	; (8004a38 <HAL_Init+0x4c>)
 80049fa:	698b      	ldr	r3, [r1, #24]
 80049fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004a00:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <HAL_Init+0x50>)
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004a0a:	698b      	ldr	r3, [r1, #24]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	5cd3      	ldrb	r3, [r2, r3]
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	fa20 f303 	lsr.w	r3, r0, r3
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_Init+0x54>)
 8004a1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_Init+0x58>)
 8004a20:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7fd fb8c 	bl	8002140 <HAL_InitTick>
 8004a28:	b110      	cbz	r0, 8004a30 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8004a2a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	4604      	mov	r4, r0
  HAL_MspInit();
 8004a32:	f7fd f9c7 	bl	8001dc4 <HAL_MspInit>
  return HAL_OK;
 8004a36:	e7f9      	b.n	8004a2c <HAL_Init+0x40>
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	08019fc4 	.word	0x08019fc4
 8004a40:	24000040 	.word	0x24000040
 8004a44:	2400003c 	.word	0x2400003c

08004a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_IncTick+0x10>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <HAL_IncTick+0x14>)
 8004a4e:	6811      	ldr	r1, [r2, #0]
 8004a50:	440b      	add	r3, r1
 8004a52:	6013      	str	r3, [r2, #0]
}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	24000044 	.word	0x24000044
 8004a5c:	24001fec 	.word	0x24001fec

08004a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a60:	4b01      	ldr	r3, [pc, #4]	; (8004a68 <HAL_GetTick+0x8>)
 8004a62:	6818      	ldr	r0, [r3, #0]
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	24001fec 	.word	0x24001fec

08004a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7ff fff6 	bl	8004a60 <HAL_GetTick>
 8004a74:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004a7a:	d002      	beq.n	8004a82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <HAL_Delay+0x24>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a82:	f7ff ffed 	bl	8004a60 <HAL_GetTick>
 8004a86:	1b40      	subs	r0, r0, r5
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d3fa      	bcc.n	8004a82 <HAL_Delay+0x16>
  {
  }
}
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}
 8004a8e:	bf00      	nop
 8004a90:	24000044 	.word	0x24000044

08004a94 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4906      	ldr	r1, [pc, #24]	; (8004ab0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004a96:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa0:	0200      	lsls	r0, r0, #8
 8004aa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004aa8:	4a02      	ldr	r2, [pc, #8]	; (8004ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004aaa:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004aac:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00
 8004ab4:	05fa0000 	.word	0x05fa0000

08004ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aba:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <HAL_NVIC_SetPriority+0x60>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac2:	f1c3 0c07 	rsb	ip, r3, #7
 8004ac6:	f1bc 0f04 	cmp.w	ip, #4
 8004aca:	bf28      	it	cs
 8004acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad0:	f103 0e04 	add.w	lr, r3, #4
 8004ad4:	f1be 0f06 	cmp.w	lr, #6
 8004ad8:	d914      	bls.n	8004b04 <HAL_NVIC_SetPriority+0x4c>
 8004ada:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	f04f 3eff 	mov.w	lr, #4294967295
 8004ae0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004ae4:	ea21 010c 	bic.w	r1, r1, ip
 8004ae8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aea:	fa0e f303 	lsl.w	r3, lr, r3
 8004aee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004af4:	2800      	cmp	r0, #0
 8004af6:	db07      	blt.n	8004b08 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af8:	0109      	lsls	r1, r1, #4
 8004afa:	b2c9      	uxtb	r1, r1
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_NVIC_SetPriority+0x64>)
 8004afe:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b00:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b04:	2300      	movs	r3, #0
 8004b06:	e7e9      	b.n	8004adc <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b08:	f000 000f 	and.w	r0, r0, #15
 8004b0c:	0109      	lsls	r1, r1, #4
 8004b0e:	b2c9      	uxtb	r1, r1
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_NVIC_SetPriority+0x68>)
 8004b12:	5419      	strb	r1, [r3, r0]
 8004b14:	e7f4      	b.n	8004b00 <HAL_NVIC_SetPriority+0x48>
 8004b16:	bf00      	nop
 8004b18:	e000ed00 	.word	0xe000ed00
 8004b1c:	e000e400 	.word	0xe000e400
 8004b20:	e000ed14 	.word	0xe000ed14

08004b24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b24:	2800      	cmp	r0, #0
 8004b26:	db07      	blt.n	8004b38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b28:	f000 021f 	and.w	r2, r0, #31
 8004b2c:	0940      	lsrs	r0, r0, #5
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4093      	lsls	r3, r2
 8004b32:	4a02      	ldr	r2, [pc, #8]	; (8004b3c <HAL_NVIC_EnableIRQ+0x18>)
 8004b34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000e100 	.word	0xe000e100

08004b40 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b40:	2800      	cmp	r0, #0
 8004b42:	db0c      	blt.n	8004b5e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b44:	f000 021f 	and.w	r2, r0, #31
 8004b48:	0940      	lsrs	r0, r0, #5
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4093      	lsls	r3, r2
 8004b4e:	3020      	adds	r0, #32
 8004b50:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <HAL_NVIC_DisableIRQ+0x20>)
 8004b52:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b5a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004b64:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <HAL_MPU_Disable+0x18>)
 8004b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b80:	f040 0001 	orr.w	r0, r0, #1
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_MPU_Enable+0x1c>)
 8004b86:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b96:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004ba0:	7842      	ldrb	r2, [r0, #1]
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <HAL_MPU_ConfigRegion+0x5c>)
 8004ba4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004ba8:	7803      	ldrb	r3, [r0, #0]
 8004baa:	b1fb      	cbz	r3, 8004bec <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004bac:	6843      	ldr	r3, [r0, #4]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_MPU_ConfigRegion+0x5c>)
 8004bb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb4:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bb6:	7ac3      	ldrb	r3, [r0, #11]
 8004bb8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bbe:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bc0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bc4:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bc6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bca:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bcc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bd0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bd6:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bdc:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bde:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004be2:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004be4:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004be6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004bea:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <HAL_MPU_ConfigRegion+0x5c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004bf4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d038      	beq.n	8004c76 <HAL_CRC_Init+0x76>
{
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c08:	7f43      	ldrb	r3, [r0, #29]
 8004c0a:	b31b      	cbz	r3, 8004c54 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c10:	7923      	ldrb	r3, [r4, #4]
 8004c12:	bb1b      	cbnz	r3, 8004c5c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <HAL_CRC_Init+0x7c>)
 8004c18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	6893      	ldr	r3, [r2, #8]
 8004c1e:	f023 0318 	bic.w	r3, r3, #24
 8004c22:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c24:	7963      	ldrb	r3, [r4, #5]
 8004c26:	bb13      	cbnz	r3, 8004c6e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	6893      	ldr	r3, [r2, #8]
 8004c34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004c38:	6961      	ldr	r1, [r4, #20]
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c3e:	6822      	ldr	r2, [r4, #0]
 8004c40:	6893      	ldr	r3, [r2, #8]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c46:	69a1      	ldr	r1, [r4, #24]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004c54:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004c56:	f7fd f8cf 	bl	8001df8 <HAL_CRC_MspInit>
 8004c5a:	e7d7      	b.n	8004c0c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c5c:	68e2      	ldr	r2, [r4, #12]
 8004c5e:	68a1      	ldr	r1, [r4, #8]
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f80d 	bl	8004c80 <HAL_CRCEx_Polynomial_Set>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d0dc      	beq.n	8004c24 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	e7f1      	b.n	8004c52 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	611a      	str	r2, [r3, #16]
 8004c74:	e7dc      	b.n	8004c30 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8004c76:	2001      	movs	r0, #1
}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	04c11db7 	.word	0x04c11db7

08004c80 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c80:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c82:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c84:	461c      	mov	r4, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b134      	cbz	r4, 8004c98 <HAL_CRCEx_Polynomial_Set+0x18>
 8004c8a:	f003 0c1f 	and.w	ip, r3, #31
 8004c8e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8004c92:	f01c 0f01 	tst.w	ip, #1
 8004c96:	d0f5      	beq.n	8004c84 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c98:	2a18      	cmp	r2, #24
 8004c9a:	d822      	bhi.n	8004ce2 <HAL_CRCEx_Polynomial_Set+0x62>
 8004c9c:	e8df f002 	tbb	[pc, r2]
 8004ca0:	2121210f 	.word	0x2121210f
 8004ca4:	21212121 	.word	0x21212121
 8004ca8:	2121211d 	.word	0x2121211d
 8004cac:	21212121 	.word	0x21212121
 8004cb0:	21212119 	.word	0x21212119
 8004cb4:	21212121 	.word	0x21212121
 8004cb8:	0d          	.byte	0x0d
 8004cb9:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d815      	bhi.n	8004cea <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cc2:	6801      	ldr	r1, [r0, #0]
 8004cc4:	688b      	ldr	r3, [r1, #8]
 8004cc6:	f023 0318 	bic.w	r3, r3, #24
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	608a      	str	r2, [r1, #8]
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e008      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cd2:	2b07      	cmp	r3, #7
 8004cd4:	d9f3      	bls.n	8004cbe <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e004      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d9ef      	bls.n	8004cbe <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004cde:	2001      	movs	r0, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8004ce2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8004ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ce8:	4770      	bx	lr
        status =   HAL_ERROR;
 8004cea:	2001      	movs	r0, #1
 8004cec:	e7fa      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08004cf0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d037      	beq.n	8004d64 <HAL_DMA2D_Init+0x74>
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004cf8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02c      	beq.n	8004d5a <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d00:	2302      	movs	r3, #2
 8004d02:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	680a      	ldr	r2, [r1, #0]
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <HAL_DMA2D_Init+0x78>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	69e0      	ldr	r0, [r4, #28]
 8004d12:	4302      	orrs	r2, r0
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004d18:	6821      	ldr	r1, [r4, #0]
 8004d1a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_DMA2D_Init+0x7c>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68a2      	ldr	r2, [r4, #8]
 8004d22:	69a0      	ldr	r0, [r4, #24]
 8004d24:	4302      	orrs	r2, r0
 8004d26:	4313      	orrs	r3, r2
 8004d28:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_DMA2D_Init+0x80>)
 8004d30:	400b      	ands	r3, r1
 8004d32:	68e1      	ldr	r1, [r4, #12]
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004d3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d40:	6920      	ldr	r0, [r4, #16]
 8004d42:	6962      	ldr	r2, [r4, #20]
 8004d44:	0552      	lsls	r2, r2, #21
 8004d46:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8004d58:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004d5a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8004d5e:	f7fd f865 	bl	8001e2c <HAL_DMA2D_MspInit>
 8004d62:	e7cd      	b.n	8004d00 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8004d64:	2001      	movs	r0, #1
}
 8004d66:	4770      	bx	lr
 8004d68:	fff8ffbf 	.word	0xfff8ffbf
 8004d6c:	fffffef8 	.word	0xfffffef8
 8004d70:	ffff0000 	.word	0xffff0000

08004d74 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004d74:	4770      	bx	lr

08004d76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d76:	4770      	bx	lr

08004d78 <HAL_DMA2D_IRQHandler>:
{
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d7c:	6803      	ldr	r3, [r0, #0]
 8004d7e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004d80:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d82:	f015 0f01 	tst.w	r5, #1
 8004d86:	d016      	beq.n	8004db6 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004d88:	f416 7f80 	tst.w	r6, #256	; 0x100
 8004d8c:	d013      	beq.n	8004db6 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d94:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d96:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004da4:	2304      	movs	r3, #4
 8004da6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004daa:	2300      	movs	r3, #0
 8004dac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004db0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004db2:	b103      	cbz	r3, 8004db6 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8004db4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004db6:	f015 0f20 	tst.w	r5, #32
 8004dba:	d018      	beq.n	8004dee <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004dbc:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8004dc0:	d015      	beq.n	8004dee <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	6813      	ldr	r3, [r2, #0]
 8004dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dca:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dda:	2304      	movs	r3, #4
 8004ddc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004de0:	2300      	movs	r3, #0
 8004de2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de8:	b10b      	cbz	r3, 8004dee <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8004dea:	4620      	mov	r0, r4
 8004dec:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004dee:	f015 0f08 	tst.w	r5, #8
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004df4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8004df8:	d015      	beq.n	8004e26 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	6813      	ldr	r3, [r2, #0]
 8004dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e02:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	2208      	movs	r2, #8
 8004e08:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e0c:	f043 0304 	orr.w	r3, r3, #4
 8004e10:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e12:	2304      	movs	r3, #4
 8004e14:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8004e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e20:	b10b      	cbz	r3, 8004e26 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8004e22:	4620      	mov	r0, r4
 8004e24:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004e26:	f015 0f04 	tst.w	r5, #4
 8004e2a:	d002      	beq.n	8004e32 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004e2c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8004e30:	d120      	bne.n	8004e74 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e32:	f015 0f02 	tst.w	r5, #2
 8004e36:	d016      	beq.n	8004e66 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e38:	f416 7f00 	tst.w	r6, #512	; 0x200
 8004e3c:	d013      	beq.n	8004e66 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	6813      	ldr	r3, [r2, #0]
 8004e42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e46:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e50:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8004e5e:	6a23      	ldr	r3, [r4, #32]
 8004e60:	b10b      	cbz	r3, 8004e66 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8004e62:	4620      	mov	r0, r4
 8004e64:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e66:	f015 0f10 	tst.w	r5, #16
 8004e6a:	d002      	beq.n	8004e72 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e6c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8004e70:	d10c      	bne.n	8004e8c <HAL_DMA2D_IRQHandler+0x114>
}
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e7c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff ff75 	bl	8004d74 <HAL_DMA2D_LineEventCallback>
 8004e8a:	e7d2      	b.n	8004e32 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e94:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	2210      	movs	r2, #16
 8004e9a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff ff62 	bl	8004d76 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004eb2:	e7de      	b.n	8004e72 <HAL_DMA2D_IRQHandler+0xfa>

08004eb4 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004eb4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d074      	beq.n	8004fa6 <HAL_DMA2D_ConfigLayer+0xf2>
{
 8004ebc:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004eca:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004ece:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ed2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004ed4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ed6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004eda:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8004edc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004ee0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004ee2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee6:	f1a4 0209 	sub.w	r2, r4, #9
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	d921      	bls.n	8004f32 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004eee:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004ef2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004efc:	bb61      	cbnz	r1, 8004f58 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004efe:	6804      	ldr	r4, [r0, #0]
 8004f00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f02:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <HAL_DMA2D_ConfigLayer+0xf8>)
 8004f04:	402a      	ands	r2, r5
 8004f06:	4313      	orrs	r3, r2
 8004f08:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f0a:	6802      	ldr	r2, [r0, #0]
 8004f0c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f14:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004f16:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	3b09      	subs	r3, #9
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d911      	bls.n	8004f44 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f26:	2300      	movs	r3, #0
 8004f28:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8004f2c:	4618      	mov	r0, r3
}
 8004f2e:	bc30      	pop	{r4, r5}
 8004f30:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f32:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f3c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f40:	4313      	orrs	r3, r2
 8004f42:	e7db      	b.n	8004efc <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f4e:	6802      	ldr	r2, [r0, #0]
 8004f50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	6293      	str	r3, [r2, #40]	; 0x28
 8004f56:	e7e3      	b.n	8004f20 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004f58:	2c0b      	cmp	r4, #11
 8004f5a:	d01b      	beq.n	8004f94 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004f5c:	4d14      	ldr	r5, [pc, #80]	; (8004fb0 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f5e:	6804      	ldr	r4, [r0, #0]
 8004f60:	69e2      	ldr	r2, [r4, #28]
 8004f62:	ea22 0205 	bic.w	r2, r2, r5
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f6a:	6802      	ldr	r2, [r0, #0]
 8004f6c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8004f70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004f74:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004f76:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	3b09      	subs	r3, #9
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d8cf      	bhi.n	8004f20 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f80:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004f84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f88:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004f8a:	6802      	ldr	r2, [r0, #0]
 8004f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	6213      	str	r3, [r2, #32]
 8004f92:	e7c5      	b.n	8004f20 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004f94:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004f98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f9e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004fa2:	4d04      	ldr	r5, [pc, #16]	; (8004fb4 <HAL_DMA2D_ConfigLayer+0x100>)
 8004fa4:	e7db      	b.n	8004f5e <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 8004fa6:	2002      	movs	r0, #2
}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	00ccfff0 	.word	0x00ccfff0
 8004fb0:	ff33000f 	.word	0xff33000f
 8004fb4:	ff3f000f 	.word	0xff3f000f

08004fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fba:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8004fbc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fbe:	e06b      	b.n	8005098 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fc2:	005e      	lsls	r6, r3, #1
 8004fc4:	2403      	movs	r4, #3
 8004fc6:	40b4      	lsls	r4, r6
 8004fc8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fcc:	68cc      	ldr	r4, [r1, #12]
 8004fce:	40b4      	lsls	r4, r6
 8004fd0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004fd2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fd6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fda:	684c      	ldr	r4, [r1, #4]
 8004fdc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004fe0:	409c      	lsls	r4, r3
 8004fe2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004fe6:	6044      	str	r4, [r0, #4]
 8004fe8:	e068      	b.n	80050bc <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fea:	08dd      	lsrs	r5, r3, #3
 8004fec:	3508      	adds	r5, #8
 8004fee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ff2:	f003 0407 	and.w	r4, r3, #7
 8004ff6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004ffa:	240f      	movs	r4, #15
 8004ffc:	fa04 f40c 	lsl.w	r4, r4, ip
 8005000:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005004:	690c      	ldr	r4, [r1, #16]
 8005006:	fa04 f40c 	lsl.w	r4, r4, ip
 800500a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800500e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005012:	e06b      	b.n	80050ec <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005014:	2409      	movs	r4, #9
 8005016:	e000      	b.n	800501a <HAL_GPIO_Init+0x62>
 8005018:	2400      	movs	r4, #0
 800501a:	fa04 f40e 	lsl.w	r4, r4, lr
 800501e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005020:	f10c 0c02 	add.w	ip, ip, #2
 8005024:	4d69      	ldr	r5, [pc, #420]	; (80051cc <HAL_GPIO_Init+0x214>)
 8005026:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800502a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800502e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005030:	43d4      	mvns	r4, r2
 8005032:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005036:	684f      	ldr	r7, [r1, #4]
 8005038:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800503c:	d001      	beq.n	8005042 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800503e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005042:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005046:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005048:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800504a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800504e:	684f      	ldr	r7, [r1, #4]
 8005050:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005054:	d001      	beq.n	800505a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8005056:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800505a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800505e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005060:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005064:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005068:	684f      	ldr	r7, [r1, #4]
 800506a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800506e:	d001      	beq.n	8005074 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8005070:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005074:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005078:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800507c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8005080:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005082:	684e      	ldr	r6, [r1, #4]
 8005084:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8005088:	d001      	beq.n	800508e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800508a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800508e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005092:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 8005096:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005098:	680a      	ldr	r2, [r1, #0]
 800509a:	fa32 f403 	lsrs.w	r4, r2, r3
 800509e:	f000 8092 	beq.w	80051c6 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050a2:	f04f 0c01 	mov.w	ip, #1
 80050a6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80050aa:	ea1c 0202 	ands.w	r2, ip, r2
 80050ae:	d0f2      	beq.n	8005096 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b0:	684c      	ldr	r4, [r1, #4]
 80050b2:	f004 0403 	and.w	r4, r4, #3
 80050b6:	3c01      	subs	r4, #1
 80050b8:	2c01      	cmp	r4, #1
 80050ba:	d981      	bls.n	8004fc0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050bc:	684c      	ldr	r4, [r1, #4]
 80050be:	f004 0403 	and.w	r4, r4, #3
 80050c2:	2c03      	cmp	r4, #3
 80050c4:	d00c      	beq.n	80050e0 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80050c6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050c8:	005d      	lsls	r5, r3, #1
 80050ca:	f04f 0c03 	mov.w	ip, #3
 80050ce:	fa0c fc05 	lsl.w	ip, ip, r5
 80050d2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d6:	688c      	ldr	r4, [r1, #8]
 80050d8:	40ac      	lsls	r4, r5
 80050da:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80050de:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e0:	684c      	ldr	r4, [r1, #4]
 80050e2:	f004 0403 	and.w	r4, r4, #3
 80050e6:	2c02      	cmp	r4, #2
 80050e8:	f43f af7f 	beq.w	8004fea <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80050ec:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80050f2:	f04f 0c03 	mov.w	ip, #3
 80050f6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80050fa:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fe:	684c      	ldr	r4, [r1, #4]
 8005100:	f004 0403 	and.w	r4, r4, #3
 8005104:	fa04 f40e 	lsl.w	r4, r4, lr
 8005108:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800510c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800510e:	684c      	ldr	r4, [r1, #4]
 8005110:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005114:	d0bf      	beq.n	8005096 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	4c2e      	ldr	r4, [pc, #184]	; (80051d0 <HAL_GPIO_Init+0x218>)
 8005118:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800511c:	f045 0502 	orr.w	r5, r5, #2
 8005120:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 8005124:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 8005128:	f004 0402 	and.w	r4, r4, #2
 800512c:	9401      	str	r4, [sp, #4]
 800512e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005130:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005134:	f10c 0502 	add.w	r5, ip, #2
 8005138:	4c24      	ldr	r4, [pc, #144]	; (80051cc <HAL_GPIO_Init+0x214>)
 800513a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800513e:	f003 0403 	and.w	r4, r3, #3
 8005142:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005146:	240f      	movs	r4, #15
 8005148:	fa04 f40e 	lsl.w	r4, r4, lr
 800514c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005150:	4c20      	ldr	r4, [pc, #128]	; (80051d4 <HAL_GPIO_Init+0x21c>)
 8005152:	42a0      	cmp	r0, r4
 8005154:	f43f af60 	beq.w	8005018 <HAL_GPIO_Init+0x60>
 8005158:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800515c:	42a0      	cmp	r0, r4
 800515e:	d022      	beq.n	80051a6 <HAL_GPIO_Init+0x1ee>
 8005160:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005164:	42a0      	cmp	r0, r4
 8005166:	d020      	beq.n	80051aa <HAL_GPIO_Init+0x1f2>
 8005168:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800516c:	42a0      	cmp	r0, r4
 800516e:	d01e      	beq.n	80051ae <HAL_GPIO_Init+0x1f6>
 8005170:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005174:	42a0      	cmp	r0, r4
 8005176:	d01c      	beq.n	80051b2 <HAL_GPIO_Init+0x1fa>
 8005178:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800517c:	42a0      	cmp	r0, r4
 800517e:	d01a      	beq.n	80051b6 <HAL_GPIO_Init+0x1fe>
 8005180:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005184:	42a0      	cmp	r0, r4
 8005186:	d018      	beq.n	80051ba <HAL_GPIO_Init+0x202>
 8005188:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800518c:	42a0      	cmp	r0, r4
 800518e:	d016      	beq.n	80051be <HAL_GPIO_Init+0x206>
 8005190:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005194:	42a0      	cmp	r0, r4
 8005196:	d014      	beq.n	80051c2 <HAL_GPIO_Init+0x20a>
 8005198:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800519c:	42a0      	cmp	r0, r4
 800519e:	f43f af39 	beq.w	8005014 <HAL_GPIO_Init+0x5c>
 80051a2:	240a      	movs	r4, #10
 80051a4:	e739      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051a6:	2401      	movs	r4, #1
 80051a8:	e737      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051aa:	2402      	movs	r4, #2
 80051ac:	e735      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051ae:	2403      	movs	r4, #3
 80051b0:	e733      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051b2:	2404      	movs	r4, #4
 80051b4:	e731      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051b6:	2405      	movs	r4, #5
 80051b8:	e72f      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051ba:	2406      	movs	r4, #6
 80051bc:	e72d      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051be:	2407      	movs	r4, #7
 80051c0:	e72b      	b.n	800501a <HAL_GPIO_Init+0x62>
 80051c2:	2408      	movs	r4, #8
 80051c4:	e729      	b.n	800501a <HAL_GPIO_Init+0x62>
  }
}
 80051c6:	b003      	add	sp, #12
 80051c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	58000400 	.word	0x58000400
 80051d0:	58024400 	.word	0x58024400
 80051d4:	58020000 	.word	0x58020000

080051d8 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 80051d8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80051da:	fa31 f203 	lsrs.w	r2, r1, r3
 80051de:	f000 809d 	beq.w	800531c <HAL_GPIO_DeInit+0x144>
{
 80051e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e4:	e02e      	b.n	8005244 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051e6:	2509      	movs	r5, #9
 80051e8:	e000      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80051ea:	2500      	movs	r5, #0
 80051ec:	fa05 fc0c 	lsl.w	ip, r5, ip
 80051f0:	45a4      	cmp	ip, r4
 80051f2:	d072      	beq.n	80052da <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051f4:	6804      	ldr	r4, [r0, #0]
 80051f6:	005d      	lsls	r5, r3, #1
 80051f8:	f04f 0c03 	mov.w	ip, #3
 80051fc:	fa0c fc05 	lsl.w	ip, ip, r5
 8005200:	ea44 040c 	orr.w	r4, r4, ip
 8005204:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005206:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800520a:	f10e 0e08 	add.w	lr, lr, #8
 800520e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8005212:	f003 0507 	and.w	r5, r3, #7
 8005216:	00ae      	lsls	r6, r5, #2
 8005218:	250f      	movs	r5, #15
 800521a:	40b5      	lsls	r5, r6
 800521c:	ea24 0405 	bic.w	r4, r4, r5
 8005220:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005224:	68c4      	ldr	r4, [r0, #12]
 8005226:	ea24 040c 	bic.w	r4, r4, ip
 800522a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800522c:	6844      	ldr	r4, [r0, #4]
 800522e:	ea24 0202 	bic.w	r2, r4, r2
 8005232:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005234:	6882      	ldr	r2, [r0, #8]
 8005236:	ea22 020c 	bic.w	r2, r2, ip
 800523a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800523c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800523e:	fa31 f203 	lsrs.w	r2, r1, r3
 8005242:	d06a      	beq.n	800531a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8005248:	ea12 0e01 	ands.w	lr, r2, r1
 800524c:	d0f6      	beq.n	800523c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800524e:	089e      	lsrs	r6, r3, #2
 8005250:	1cb5      	adds	r5, r6, #2
 8005252:	4c33      	ldr	r4, [pc, #204]	; (8005320 <HAL_GPIO_DeInit+0x148>)
 8005254:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005258:	f003 0c03 	and.w	ip, r3, #3
 800525c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005260:	250f      	movs	r5, #15
 8005262:	fa05 f70c 	lsl.w	r7, r5, ip
 8005266:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005268:	4d2e      	ldr	r5, [pc, #184]	; (8005324 <HAL_GPIO_DeInit+0x14c>)
 800526a:	42a8      	cmp	r0, r5
 800526c:	d0bd      	beq.n	80051ea <HAL_GPIO_DeInit+0x12>
 800526e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005272:	42a8      	cmp	r0, r5
 8005274:	d021      	beq.n	80052ba <HAL_GPIO_DeInit+0xe2>
 8005276:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800527a:	42a8      	cmp	r0, r5
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_DeInit+0xe6>
 800527e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005282:	42a8      	cmp	r0, r5
 8005284:	d01d      	beq.n	80052c2 <HAL_GPIO_DeInit+0xea>
 8005286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800528a:	42a8      	cmp	r0, r5
 800528c:	d01b      	beq.n	80052c6 <HAL_GPIO_DeInit+0xee>
 800528e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005292:	42a8      	cmp	r0, r5
 8005294:	d019      	beq.n	80052ca <HAL_GPIO_DeInit+0xf2>
 8005296:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800529a:	42a8      	cmp	r0, r5
 800529c:	d017      	beq.n	80052ce <HAL_GPIO_DeInit+0xf6>
 800529e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052a2:	42a8      	cmp	r0, r5
 80052a4:	d015      	beq.n	80052d2 <HAL_GPIO_DeInit+0xfa>
 80052a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052aa:	42a8      	cmp	r0, r5
 80052ac:	d013      	beq.n	80052d6 <HAL_GPIO_DeInit+0xfe>
 80052ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052b2:	42a8      	cmp	r0, r5
 80052b4:	d097      	beq.n	80051e6 <HAL_GPIO_DeInit+0xe>
 80052b6:	250a      	movs	r5, #10
 80052b8:	e798      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052ba:	2501      	movs	r5, #1
 80052bc:	e796      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052be:	2502      	movs	r5, #2
 80052c0:	e794      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052c2:	2503      	movs	r5, #3
 80052c4:	e792      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052c6:	2504      	movs	r5, #4
 80052c8:	e790      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052ca:	2505      	movs	r5, #5
 80052cc:	e78e      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052ce:	2506      	movs	r5, #6
 80052d0:	e78c      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052d2:	2507      	movs	r5, #7
 80052d4:	e78a      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
 80052d6:	2508      	movs	r5, #8
 80052d8:	e788      	b.n	80051ec <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80052da:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80052de:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80052e2:	ea25 050e 	bic.w	r5, r5, lr
 80052e6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80052ea:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80052ee:	ea25 050e 	bic.w	r5, r5, lr
 80052f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80052f6:	6865      	ldr	r5, [r4, #4]
 80052f8:	ea25 050e 	bic.w	r5, r5, lr
 80052fc:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	ea25 050e 	bic.w	r5, r5, lr
 8005304:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005306:	f8df c018 	ldr.w	ip, [pc, #24]	; 8005320 <HAL_GPIO_DeInit+0x148>
 800530a:	1cb4      	adds	r4, r6, #2
 800530c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8005310:	ea25 0507 	bic.w	r5, r5, r7
 8005314:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8005318:	e76c      	b.n	80051f4 <HAL_GPIO_DeInit+0x1c>
  }
}
 800531a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	58000400 	.word	0x58000400
 8005324:	58020000 	.word	0x58020000

08005328 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005328:	b10a      	cbz	r2, 800532e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800532a:	6181      	str	r1, [r0, #24]
 800532c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800532e:	0409      	lsls	r1, r1, #16
 8005330:	6181      	str	r1, [r0, #24]
  }
}
 8005332:	4770      	bx	lr

08005334 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005334:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005336:	ea01 0203 	and.w	r2, r1, r3
 800533a:	ea21 0103 	bic.w	r1, r1, r3
 800533e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005342:	6181      	str	r1, [r0, #24]
}
 8005344:	4770      	bx	lr

08005346 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005346:	4770      	bx	lr

08005348 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005348:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	4203      	tst	r3, r0
 8005354:	d100      	bne.n	8005358 <HAL_GPIO_EXTI_IRQHandler+0x10>
}
 8005356:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005360:	f7ff fff1 	bl	8005346 <HAL_GPIO_EXTI_Callback>
}
 8005364:	e7f7      	b.n	8005356 <HAL_GPIO_EXTI_IRQHandler+0xe>

08005366 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005366:	6803      	ldr	r3, [r0, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	f012 0f02 	tst.w	r2, #2
 800536e:	d001      	beq.n	8005374 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005370:	2200      	movs	r2, #0
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005374:	6803      	ldr	r3, [r0, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	f012 0f01 	tst.w	r2, #1
 800537c:	d103      	bne.n	8005386 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	619a      	str	r2, [r3, #24]
  }
}
 8005386:	4770      	bx	lr

08005388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005388:	b410      	push	{r4}
 800538a:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800538c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005394:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005396:	4321      	orrs	r1, r4
 8005398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800539c:	6802      	ldr	r2, [r0, #0]
 800539e:	6853      	ldr	r3, [r2, #4]
 80053a0:	0d64      	lsrs	r4, r4, #21
 80053a2:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80053a6:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80053aa:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80053ae:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80053b2:	f044 0403 	orr.w	r4, r4, #3
 80053b6:	ea23 0404 	bic.w	r4, r3, r4
 80053ba:	4321      	orrs	r1, r4
 80053bc:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <I2C_IsErrorOccurred>:
{
 80053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80053ca:	6803      	ldr	r3, [r0, #0]
 80053cc:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053ce:	f017 0710 	ands.w	r7, r7, #16
 80053d2:	d04e      	beq.n	8005472 <I2C_IsErrorOccurred+0xae>
 80053d4:	460e      	mov	r6, r1
 80053d6:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d8:	2210      	movs	r2, #16
 80053da:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	6998      	ldr	r0, [r3, #24]
 80053e2:	f010 0f20 	tst.w	r0, #32
 80053e6:	d13d      	bne.n	8005464 <I2C_IsErrorOccurred+0xa0>
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	d13b      	bne.n	8005464 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80053ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80053f0:	d0f5      	beq.n	80053de <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7ff fb35 	bl	8004a60 <HAL_GetTick>
 80053f6:	eba0 0008 	sub.w	r0, r0, r8
 80053fa:	42b0      	cmp	r0, r6
 80053fc:	d801      	bhi.n	8005402 <I2C_IsErrorOccurred+0x3e>
 80053fe:	2e00      	cmp	r6, #0
 8005400:	d1ed      	bne.n	80053de <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005402:	6821      	ldr	r1, [r4, #0]
 8005404:	684a      	ldr	r2, [r1, #4]
 8005406:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800540a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800540e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005410:	6988      	ldr	r0, [r1, #24]
 8005412:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005416:	d004      	beq.n	8005422 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005418:	3b20      	subs	r3, #32
 800541a:	bf18      	it	ne
 800541c:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800541e:	b902      	cbnz	r2, 8005422 <I2C_IsErrorOccurred+0x5e>
 8005420:	b9c3      	cbnz	r3, 8005454 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f013 0f20 	tst.w	r3, #32
 800542a:	d1d8      	bne.n	80053de <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800542c:	f7ff fb18 	bl	8004a60 <HAL_GetTick>
 8005430:	eba0 0008 	sub.w	r0, r0, r8
 8005434:	2819      	cmp	r0, #25
 8005436:	d9f4      	bls.n	8005422 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800543a:	f043 0320 	orr.w	r3, r3, #32
 800543e:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005440:	2320      	movs	r3, #32
 8005442:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	2300      	movs	r3, #0
 8005448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800544c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005450:	2501      	movs	r5, #1
 8005452:	e7e6      	b.n	8005422 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005454:	684b      	ldr	r3, [r1, #4]
 8005456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800545a:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800545c:	f7ff fb00 	bl	8004a60 <HAL_GetTick>
 8005460:	4680      	mov	r8, r0
 8005462:	e7de      	b.n	8005422 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005464:	2d00      	cmp	r5, #0
 8005466:	d140      	bne.n	80054ea <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005468:	2220      	movs	r2, #32
 800546a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800546c:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800546e:	2501      	movs	r5, #1
 8005470:	e000      	b.n	8005474 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005478:	f413 7f80 	tst.w	r3, #256	; 0x100
 800547c:	d005      	beq.n	800548a <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800547e:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005486:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005488:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800548a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800548e:	d006      	beq.n	800549e <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8005490:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005494:	6822      	ldr	r2, [r4, #0]
 8005496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800549a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800549c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800549e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80054a2:	d024      	beq.n	80054ee <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80054a4:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ae:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80054b0:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7ff ff57 	bl	8005366 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	6853      	ldr	r3, [r2, #4]
 80054bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80054ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054d0:	431f      	orrs	r7, r3
 80054d2:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	2320      	movs	r3, #32
 80054d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054da:	2300      	movs	r3, #0
 80054dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80054e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054e4:	4628      	mov	r0, r5
 80054e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80054ea:	2704      	movs	r7, #4
 80054ec:	e7c2      	b.n	8005474 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d0f8      	beq.n	80054e4 <I2C_IsErrorOccurred+0x120>
 80054f2:	e7de      	b.n	80054b2 <I2C_IsErrorOccurred+0xee>

080054f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	460d      	mov	r5, r1
 80054fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f013 0f02 	tst.w	r3, #2
 8005504:	d11d      	bne.n	8005542 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005506:	4632      	mov	r2, r6
 8005508:	4629      	mov	r1, r5
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff ff5a 	bl	80053c4 <I2C_IsErrorOccurred>
 8005510:	b9c8      	cbnz	r0, 8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005512:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005516:	d0f1      	beq.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005518:	f7ff faa2 	bl	8004a60 <HAL_GetTick>
 800551c:	1b80      	subs	r0, r0, r6
 800551e:	42a8      	cmp	r0, r5
 8005520:	d801      	bhi.n	8005526 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005522:	2d00      	cmp	r5, #0
 8005524:	d1ea      	bne.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005528:	f043 0320 	orr.w	r3, r3, #32
 800552c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800552e:	2320      	movs	r3, #32
 8005530:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	2300      	movs	r3, #0
 8005536:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800553a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800553e:	2001      	movs	r0, #1
 8005540:	e000      	b.n	8005544 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005542:	2000      	movs	r0, #0
}
 8005544:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005546:	2001      	movs	r0, #1
 8005548:	e7fc      	b.n	8005544 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800554a <I2C_WaitOnFlagUntilTimeout>:
{
 800554a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554e:	4606      	mov	r6, r0
 8005550:	4688      	mov	r8, r1
 8005552:	4617      	mov	r7, r2
 8005554:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005556:	6834      	ldr	r4, [r6, #0]
 8005558:	69a4      	ldr	r4, [r4, #24]
 800555a:	ea38 0304 	bics.w	r3, r8, r4
 800555e:	bf0c      	ite	eq
 8005560:	f04f 0c01 	moveq.w	ip, #1
 8005564:	f04f 0c00 	movne.w	ip, #0
 8005568:	45bc      	cmp	ip, r7
 800556a:	d118      	bne.n	800559e <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800556c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005570:	d0f1      	beq.n	8005556 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005572:	f7ff fa75 	bl	8004a60 <HAL_GetTick>
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	1ac0      	subs	r0, r0, r3
 800557a:	42a8      	cmp	r0, r5
 800557c:	d801      	bhi.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x38>
 800557e:	2d00      	cmp	r5, #0
 8005580:	d1e9      	bne.n	8005556 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005584:	f043 0320 	orr.w	r3, r3, #32
 8005588:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800558a:	2320      	movs	r3, #32
 800558c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	2300      	movs	r3, #0
 8005592:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005596:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800559a:	2001      	movs	r0, #1
 800559c:	e000      	b.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800559e:	2000      	movs	r0, #0
}
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055a4 <I2C_RequestMemoryWrite>:
{
 80055a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	4604      	mov	r4, r0
 80055ac:	4690      	mov	r8, r2
 80055ae:	461d      	mov	r5, r3
 80055b0:	9e08      	ldr	r6, [sp, #32]
 80055b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <I2C_RequestMemoryWrite+0x78>)
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055bc:	b2ea      	uxtb	r2, r5
 80055be:	f7ff fee3 	bl	8005388 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	463a      	mov	r2, r7
 80055c4:	4631      	mov	r1, r6
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff94 	bl	80054f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80055cc:	b9f8      	cbnz	r0, 800560e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ce:	2d01      	cmp	r5, #1
 80055d0:	d10e      	bne.n	80055f0 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	fa5f f288 	uxtb.w	r2, r8
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055da:	9700      	str	r7, [sp, #0]
 80055dc:	4633      	mov	r3, r6
 80055de:	2200      	movs	r2, #0
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff ffb1 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 80055e8:	b9a8      	cbnz	r0, 8005616 <I2C_RequestMemoryWrite+0x72>
}
 80055ea:	b002      	add	sp, #8
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f8:	463a      	mov	r2, r7
 80055fa:	4631      	mov	r1, r6
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ff79 	bl	80054f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005602:	b930      	cbnz	r0, 8005612 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	fa5f f288 	uxtb.w	r2, r8
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
 800560c:	e7e5      	b.n	80055da <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800560e:	2001      	movs	r0, #1
 8005610:	e7eb      	b.n	80055ea <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005612:	2001      	movs	r0, #1
 8005614:	e7e9      	b.n	80055ea <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005616:	2001      	movs	r0, #1
 8005618:	e7e7      	b.n	80055ea <I2C_RequestMemoryWrite+0x46>
 800561a:	bf00      	nop
 800561c:	80002000 	.word	0x80002000

08005620 <I2C_RequestMemoryRead>:
{
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	4604      	mov	r4, r0
 8005628:	4690      	mov	r8, r2
 800562a:	461d      	mov	r5, r3
 800562c:	9e08      	ldr	r6, [sp, #32]
 800562e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <I2C_RequestMemoryRead+0x74>)
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	b2ea      	uxtb	r2, r5
 8005638:	f7ff fea6 	bl	8005388 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800563c:	463a      	mov	r2, r7
 800563e:	4631      	mov	r1, r6
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff ff57 	bl	80054f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005646:	b9f8      	cbnz	r0, 8005688 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005648:	2d01      	cmp	r5, #1
 800564a:	d10e      	bne.n	800566a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	fa5f f288 	uxtb.w	r2, r8
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005654:	9700      	str	r7, [sp, #0]
 8005656:	4633      	mov	r3, r6
 8005658:	2200      	movs	r2, #0
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	4620      	mov	r0, r4
 800565e:	f7ff ff74 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 8005662:	b9a8      	cbnz	r0, 8005690 <I2C_RequestMemoryRead+0x70>
}
 8005664:	b002      	add	sp, #8
 8005666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005670:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005672:	463a      	mov	r2, r7
 8005674:	4631      	mov	r1, r6
 8005676:	4620      	mov	r0, r4
 8005678:	f7ff ff3c 	bl	80054f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800567c:	b930      	cbnz	r0, 800568c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	fa5f f288 	uxtb.w	r2, r8
 8005684:	629a      	str	r2, [r3, #40]	; 0x28
 8005686:	e7e5      	b.n	8005654 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005688:	2001      	movs	r0, #1
 800568a:	e7eb      	b.n	8005664 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800568c:	2001      	movs	r0, #1
 800568e:	e7e9      	b.n	8005664 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005690:	2001      	movs	r0, #1
 8005692:	e7e7      	b.n	8005664 <I2C_RequestMemoryRead+0x44>
 8005694:	80002000 	.word	0x80002000

08005698 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4605      	mov	r5, r0
 800569c:	460c      	mov	r4, r1
 800569e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f013 0f20 	tst.w	r3, #32
 80056a8:	d11a      	bne.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056aa:	4632      	mov	r2, r6
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f7ff fe88 	bl	80053c4 <I2C_IsErrorOccurred>
 80056b4:	b9b0      	cbnz	r0, 80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7ff f9d3 	bl	8004a60 <HAL_GetTick>
 80056ba:	1b80      	subs	r0, r0, r6
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d801      	bhi.n	80056c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d1ed      	bne.n	80056a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80056c6:	f043 0320 	orr.w	r3, r3, #32
 80056ca:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056cc:	2320      	movs	r3, #32
 80056ce:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80056d8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80056dc:	2001      	movs	r0, #1
}
 80056de:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80056e0:	2000      	movs	r0, #0
 80056e2:	e7fc      	b.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80056e4:	2001      	movs	r0, #1
 80056e6:	e7fa      	b.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080056e8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d057      	beq.n	800579c <HAL_I2C_Init+0xb4>
{
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d041      	beq.n	800577c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	2324      	movs	r3, #36	; 0x24
 80056fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005710:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	6893      	ldr	r3, [r2, #8]
 8005716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800571a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d031      	beq.n	8005786 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005722:	68a3      	ldr	r3, [r4, #8]
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800572a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800572c:	68e3      	ldr	r3, [r4, #12]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d02f      	beq.n	8005792 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	6851      	ldr	r1, [r2, #4]
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <HAL_I2C_Init+0xb8>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800573c:	6822      	ldr	r2, [r4, #0]
 800573e:	68d3      	ldr	r3, [r2, #12]
 8005740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005744:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6962      	ldr	r2, [r4, #20]
 800574a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800574c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005754:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005756:	69e3      	ldr	r3, [r4, #28]
 8005758:	6a21      	ldr	r1, [r4, #32]
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	430b      	orrs	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800576a:	2000      	movs	r0, #0
 800576c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	2320      	movs	r3, #32
 8005770:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005776:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800577a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800577c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005780:	f7fc fb78 	bl	8001e74 <HAL_I2C_MspInit>
 8005784:	e7b8      	b.n	80056f8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	6093      	str	r3, [r2, #8]
 8005790:	e7cc      	b.n	800572c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	e7ca      	b.n	8005732 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800579c:	2001      	movs	r0, #1
}
 800579e:	4770      	bx	lr
 80057a0:	02008000 	.word	0x02008000

080057a4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80057a4:	b1a8      	cbz	r0, 80057d2 <HAL_I2C_DeInit+0x2e>
{
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80057aa:	2324      	movs	r3, #36	; 0x24
 80057ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80057b0:	6802      	ldr	r2, [r0, #0]
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80057ba:	f7fc fba7 	bl	8001f0c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057be:	2000      	movs	r0, #0
 80057c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80057cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80057d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057d2:	2001      	movs	r0, #1
}
 80057d4:	4770      	bx	lr

080057d6 <HAL_I2C_Mem_Write>:
{
 80057d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	b083      	sub	sp, #12
 80057dc:	460d      	mov	r5, r1
 80057de:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80057e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80057e8:	b2c9      	uxtb	r1, r1
 80057ea:	2920      	cmp	r1, #32
 80057ec:	f040 80bc 	bne.w	8005968 <HAL_I2C_Mem_Write+0x192>
 80057f0:	4604      	mov	r4, r0
 80057f2:	4690      	mov	r8, r2
 80057f4:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80057f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057f8:	f1ba 0f00 	cmp.w	sl, #0
 80057fc:	bf18      	it	ne
 80057fe:	2b00      	cmpne	r3, #0
 8005800:	d016      	beq.n	8005830 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8005802:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005806:	2b01      	cmp	r3, #1
 8005808:	f000 80b2 	beq.w	8005970 <HAL_I2C_Mem_Write+0x19a>
 800580c:	f04f 0b01 	mov.w	fp, #1
 8005810:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005814:	f7ff f924 	bl	8004a60 <HAL_GetTick>
 8005818:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800581a:	9000      	str	r0, [sp, #0]
 800581c:	2319      	movs	r3, #25
 800581e:	465a      	mov	r2, fp
 8005820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005824:	4620      	mov	r0, r4
 8005826:	f7ff fe90 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 800582a:	b130      	cbz	r0, 800583a <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800582c:	2001      	movs	r0, #1
 800582e:	e09c      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005834:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005836:	2001      	movs	r0, #1
 8005838:	e097      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800583a:	2321      	movs	r3, #33	; 0x21
 800583c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005846:	2300      	movs	r3, #0
 8005848:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800584a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800584c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800584e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005852:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005854:	9601      	str	r6, [sp, #4]
 8005856:	9700      	str	r7, [sp, #0]
 8005858:	464b      	mov	r3, r9
 800585a:	4642      	mov	r2, r8
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff fea0 	bl	80055a4 <I2C_RequestMemoryWrite>
 8005864:	b970      	cbnz	r0, 8005884 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005866:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2bff      	cmp	r3, #255	; 0xff
 800586c:	d90f      	bls.n	800588e <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005872:	2300      	movs	r3, #0
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800587a:	4629      	mov	r1, r5
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff fd83 	bl	8005388 <I2C_TransferConfig>
 8005882:	e021      	b.n	80058c8 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800588a:	4658      	mov	r0, fp
 800588c:	e06d      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800588e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005890:	b292      	uxth	r2, r2
 8005892:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005894:	2300      	movs	r3, #0
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	4629      	mov	r1, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f7ff fd71 	bl	8005388 <I2C_TransferConfig>
 80058a6:	e00f      	b.n	80058c8 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80058a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058aa:	b292      	uxth	r2, r2
 80058ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	4629      	mov	r1, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fd64 	bl	8005388 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80058c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d033      	beq.n	8005930 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c8:	4632      	mov	r2, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff fe11 	bl	80054f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d14e      	bne.n	8005974 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e0:	3301      	adds	r3, #1
 80058e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80058f8:	b292      	uxth	r2, r2
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	d0e0      	beq.n	80058c0 <HAL_I2C_Mem_Write+0xea>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1de      	bne.n	80058c0 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005902:	9600      	str	r6, [sp, #0]
 8005904:	463b      	mov	r3, r7
 8005906:	2200      	movs	r2, #0
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff fe1d 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 8005910:	bb90      	cbnz	r0, 8005978 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d9c6      	bls.n	80058a8 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005926:	4629      	mov	r1, r5
 8005928:	4620      	mov	r0, r4
 800592a:	f7ff fd2d 	bl	8005388 <I2C_TransferConfig>
 800592e:	e7c7      	b.n	80058c0 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005930:	4632      	mov	r2, r6
 8005932:	4639      	mov	r1, r7
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff feaf 	bl	8005698 <I2C_WaitOnSTOPFlagUntilTimeout>
 800593a:	b9f8      	cbnz	r0, 800597c <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	2220      	movs	r2, #32
 8005940:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	684b      	ldr	r3, [r1, #4]
 8005946:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800594a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800594e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005958:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800595c:	2300      	movs	r3, #0
 800595e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005966:	e000      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8005968:	2002      	movs	r0, #2
}
 800596a:	b003      	add	sp, #12
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005970:	2002      	movs	r0, #2
 8005972:	e7fa      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005974:	2001      	movs	r0, #1
 8005976:	e7f8      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8005978:	2001      	movs	r0, #1
 800597a:	e7f6      	b.n	800596a <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800597c:	2001      	movs	r0, #1
 800597e:	e7f4      	b.n	800596a <HAL_I2C_Mem_Write+0x194>

08005980 <HAL_I2C_Mem_Read>:
{
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	b083      	sub	sp, #12
 8005986:	460d      	mov	r5, r1
 8005988:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800598c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800598e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005992:	b2c9      	uxtb	r1, r1
 8005994:	2920      	cmp	r1, #32
 8005996:	f040 80bd 	bne.w	8005b14 <HAL_I2C_Mem_Read+0x194>
 800599a:	4604      	mov	r4, r0
 800599c:	4690      	mov	r8, r2
 800599e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80059a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059a2:	f1ba 0f00 	cmp.w	sl, #0
 80059a6:	bf18      	it	ne
 80059a8:	2b00      	cmpne	r3, #0
 80059aa:	d016      	beq.n	80059da <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80059ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	f000 80b3 	beq.w	8005b1c <HAL_I2C_Mem_Read+0x19c>
 80059b6:	f04f 0b01 	mov.w	fp, #1
 80059ba:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80059be:	f7ff f84f 	bl	8004a60 <HAL_GetTick>
 80059c2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059c4:	9000      	str	r0, [sp, #0]
 80059c6:	2319      	movs	r3, #25
 80059c8:	465a      	mov	r2, fp
 80059ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7ff fdbb 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 80059d4:	b130      	cbz	r0, 80059e4 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80059d6:	2001      	movs	r0, #1
 80059d8:	e09d      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059de:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
 80059e2:	e098      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e4:	2322      	movs	r3, #34	; 0x22
 80059e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80059f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059fc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fe:	9601      	str	r6, [sp, #4]
 8005a00:	9700      	str	r7, [sp, #0]
 8005a02:	464b      	mov	r3, r9
 8005a04:	4642      	mov	r2, r8
 8005a06:	4629      	mov	r1, r5
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f7ff fe09 	bl	8005620 <I2C_RequestMemoryRead>
 8005a0e:	b970      	cbnz	r0, 8005a2e <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2bff      	cmp	r3, #255	; 0xff
 8005a16:	d90f      	bls.n	8005a38 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a1c:	4b43      	ldr	r3, [pc, #268]	; (8005b2c <HAL_I2C_Mem_Read+0x1ac>)
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a24:	4629      	mov	r1, r5
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7ff fcae 	bl	8005388 <I2C_TransferConfig>
 8005a2c:	e021      	b.n	8005a72 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a34:	4658      	mov	r0, fp
 8005a36:	e06e      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005a38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_I2C_Mem_Read+0x1ac>)
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fc9c 	bl	8005388 <I2C_TransferConfig>
 8005a50:	e00f      	b.n	8005a72 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005a52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a54:	b292      	uxth	r2, r2
 8005a56:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	4629      	mov	r1, r5
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff fc8f 	bl	8005388 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d034      	beq.n	8005adc <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a72:	9600      	str	r6, [sp, #0]
 8005a74:	463b      	mov	r3, r7
 8005a76:	2200      	movs	r2, #0
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff fd65 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d14d      	bne.n	8005b20 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a8a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005a92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005a94:	3a01      	subs	r2, #1
 8005a96:	b292      	uxth	r2, r2
 8005a98:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005a9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0de      	beq.n	8005a6a <HAL_I2C_Mem_Read+0xea>
 8005aac:	2a00      	cmp	r2, #0
 8005aae:	d1dc      	bne.n	8005a6a <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ab0:	9600      	str	r6, [sp, #0]
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7ff fd47 	bl	800554a <I2C_WaitOnFlagUntilTimeout>
 8005abc:	bb90      	cbnz	r0, 8005b24 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005abe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2bff      	cmp	r3, #255	; 0xff
 8005ac4:	d9c5      	bls.n	8005a52 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac6:	22ff      	movs	r2, #255	; 0xff
 8005ac8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005aca:	2300      	movs	r3, #0
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7ff fc57 	bl	8005388 <I2C_TransferConfig>
 8005ada:	e7c6      	b.n	8005a6a <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005adc:	4632      	mov	r2, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f7ff fdd9 	bl	8005698 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae6:	b9f8      	cbnz	r0, 8005b28 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	2220      	movs	r2, #32
 8005aec:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005aee:	6821      	ldr	r1, [r4, #0]
 8005af0:	684b      	ldr	r3, [r1, #4]
 8005af2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005af6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005afa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b04:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005b0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005b12:	e000      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8005b14:	2002      	movs	r0, #2
}
 8005b16:	b003      	add	sp, #12
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005b1c:	2002      	movs	r0, #2
 8005b1e:	e7fa      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8005b20:	2001      	movs	r0, #1
 8005b22:	e7f8      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8005b24:	2001      	movs	r0, #1
 8005b26:	e7f6      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8005b28:	2001      	movs	r0, #1
 8005b2a:	e7f4      	b.n	8005b16 <HAL_I2C_Mem_Read+0x196>
 8005b2c:	80002400 	.word	0x80002400

08005b30 <HAL_I2C_GetState>:
  return hi2c->State;
 8005b30:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005b34:	4770      	bx	lr

08005b36 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005b36:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005b38:	4770      	bx	lr

08005b3a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d124      	bne.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d022      	beq.n	8005b92 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b52:	2324      	movs	r3, #36	; 0x24
 8005b54:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b58:	6802      	ldr	r2, [r0, #0]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b62:	6802      	ldr	r2, [r0, #0]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b6a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b6c:	6802      	ldr	r2, [r0, #0]
 8005b6e:	6813      	ldr	r3, [r2, #0]
 8005b70:	4319      	orrs	r1, r3
 8005b72:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b74:	6802      	ldr	r2, [r0, #0]
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	2320      	movs	r3, #32
 8005b80:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	2300      	movs	r3, #0
 8005b86:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2002      	movs	r0, #2
 8005b90:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005b92:	2002      	movs	r0, #2
  }
}
 8005b94:	4770      	bx	lr

08005b96 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d122      	bne.n	8005be6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d020      	beq.n	8005bea <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bae:	2324      	movs	r3, #36	; 0x24
 8005bb0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb4:	6802      	ldr	r2, [r0, #0]
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bbe:	6802      	ldr	r2, [r0, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bc6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bca:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bcc:	6802      	ldr	r2, [r0, #0]
 8005bce:	6813      	ldr	r3, [r2, #0]
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005be2:	4618      	mov	r0, r3
 8005be4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2002      	movs	r0, #2
 8005be8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005bea:	2002      	movs	r0, #2
  }
}
 8005bec:	4770      	bx	lr
	...

08005bf0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005bf2:	684d      	ldr	r5, [r1, #4]
 8005bf4:	6804      	ldr	r4, [r0, #0]
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8005bfc:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bfe:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8005c02:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c06:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005c0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c0e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c12:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c14:	6804      	ldr	r4, [r0, #0]
 8005c16:	68e6      	ldr	r6, [r4, #12]
 8005c18:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c1c:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c1e:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c20:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c24:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c2c:	68cd      	ldr	r5, [r1, #12]
 8005c2e:	6804      	ldr	r4, [r0, #0]
 8005c30:	68e3      	ldr	r3, [r4, #12]
 8005c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c36:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c38:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8005c3c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8005c40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c44:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c48:	688b      	ldr	r3, [r1, #8]
 8005c4a:	6804      	ldr	r4, [r0, #0]
 8005c4c:	68e6      	ldr	r6, [r4, #12]
 8005c4e:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8005c52:	4473      	add	r3, lr
 8005c54:	3301      	adds	r3, #1
 8005c56:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c5a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005c5e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c62:	6803      	ldr	r3, [r0, #0]
 8005c64:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c68:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8005c6c:	f024 0407 	bic.w	r4, r4, #7
 8005c70:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c74:	6803      	ldr	r3, [r0, #0]
 8005c76:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005c7a:	690c      	ldr	r4, [r1, #16]
 8005c7c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c80:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c84:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c88:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c8a:	6804      	ldr	r4, [r0, #0]
 8005c8c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8005c90:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 8005c94:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005c98:	2400      	movs	r4, #0
 8005c9a:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c9e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8005ca2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005ca6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005caa:	6806      	ldr	r6, [r0, #0]
 8005cac:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 8005cb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005cb4:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 8005cb8:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005cbc:	6803      	ldr	r3, [r0, #0]
 8005cbe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cc2:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8005cc6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005cca:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cd4:	694d      	ldr	r5, [r1, #20]
 8005cd6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cda:	6803      	ldr	r3, [r0, #0]
 8005cdc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005ce0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8005ce4:	4d2e      	ldr	r5, [pc, #184]	; (8005da0 <LTDC_SetConfig+0x1b0>)
 8005ce6:	4035      	ands	r5, r6
 8005ce8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cec:	6a0d      	ldr	r5, [r1, #32]
 8005cee:	6803      	ldr	r3, [r0, #0]
 8005cf0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005cf4:	69ce      	ldr	r6, [r1, #28]
 8005cf6:	4335      	orrs	r5, r6
 8005cf8:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005cfc:	6803      	ldr	r3, [r0, #0]
 8005cfe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8005d02:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8005d06:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d0a:	6803      	ldr	r3, [r0, #0]
 8005d0c:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8005d10:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005d12:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	b16b      	cbz	r3, 8005d36 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d039      	beq.n	8005d92 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	bf18      	it	ne
 8005d22:	2b04      	cmpne	r3, #4
 8005d24:	d037      	beq.n	8005d96 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d037      	beq.n	8005d9a <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d2a:	2b07      	cmp	r3, #7
 8005d2c:	d001      	beq.n	8005d32 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005d2e:	2501      	movs	r5, #1
 8005d30:	e002      	b.n	8005d38 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d32:	2502      	movs	r5, #2
 8005d34:	e000      	b.n	8005d38 <LTDC_SetConfig+0x148>
    tmp = 4U;
 8005d36:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d38:	6802      	ldr	r2, [r0, #0]
 8005d3a:	4462      	add	r2, ip
 8005d3c:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005d40:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8005d44:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d48:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005d4a:	fb05 f402 	mul.w	r4, r5, r2
 8005d4e:	684b      	ldr	r3, [r1, #4]
 8005d50:	680a      	ldr	r2, [r1, #0]
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	fb05 f303 	mul.w	r3, r5, r3
 8005d58:	3307      	adds	r3, #7
 8005d5a:	6802      	ldr	r2, [r0, #0]
 8005d5c:	4462      	add	r2, ip
 8005d5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d62:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d66:	6803      	ldr	r3, [r0, #0]
 8005d68:	4463      	add	r3, ip
 8005d6a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8005d6e:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <LTDC_SetConfig+0x1b4>)
 8005d70:	4022      	ands	r2, r4
 8005d72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d76:	6803      	ldr	r3, [r0, #0]
 8005d78:	4463      	add	r3, ip
 8005d7a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005d7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d80:	6803      	ldr	r3, [r0, #0]
 8005d82:	449c      	add	ip, r3
 8005d84:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 8005d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8005d92:	2503      	movs	r5, #3
 8005d94:	e7d0      	b.n	8005d38 <LTDC_SetConfig+0x148>
    tmp = 2U;
 8005d96:	2502      	movs	r5, #2
 8005d98:	e7ce      	b.n	8005d38 <LTDC_SetConfig+0x148>
 8005d9a:	2502      	movs	r5, #2
 8005d9c:	e7cc      	b.n	8005d38 <LTDC_SetConfig+0x148>
 8005d9e:	bf00      	nop
 8005da0:	fffff8f8 	.word	0xfffff8f8
 8005da4:	fffff800 	.word	0xfffff800

08005da8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d072      	beq.n	8005e92 <HAL_LTDC_Init+0xea>
{
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005db0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d067      	beq.n	8005e88 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005db8:	2302      	movs	r3, #2
 8005dba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	6993      	ldr	r3, [r2, #24]
 8005dc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dc6:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	698a      	ldr	r2, [r1, #24]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	68a0      	ldr	r0, [r4, #8]
 8005dd0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd6:	6920      	ldr	r0, [r4, #16]
 8005dd8:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_LTDC_Init+0xf0>)
 8005de4:	401a      	ands	r2, r3
 8005de6:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	6882      	ldr	r2, [r0, #8]
 8005dec:	69a1      	ldr	r1, [r4, #24]
 8005dee:	6965      	ldr	r5, [r4, #20]
 8005df0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005df4:	430a      	orrs	r2, r1
 8005df6:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	68ca      	ldr	r2, [r1, #12]
 8005dfc:	401a      	ands	r2, r3
 8005dfe:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	68c2      	ldr	r2, [r0, #12]
 8005e04:	6a21      	ldr	r1, [r4, #32]
 8005e06:	69e5      	ldr	r5, [r4, #28]
 8005e08:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e10:	6821      	ldr	r1, [r4, #0]
 8005e12:	690a      	ldr	r2, [r1, #16]
 8005e14:	401a      	ands	r2, r3
 8005e16:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	6902      	ldr	r2, [r0, #16]
 8005e1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005e1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e20:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005e24:	430a      	orrs	r2, r1
 8005e26:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	694a      	ldr	r2, [r1, #20]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	694b      	ldr	r3, [r1, #20]
 8005e36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e40:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005e44:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005e48:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e52:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e54:	6821      	ldr	r1, [r4, #0]
 8005e56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005e58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e5c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8005e60:	4303      	orrs	r3, r0
 8005e62:	4313      	orrs	r3, r2
 8005e64:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005e6a:	f043 0306 	orr.w	r3, r3, #6
 8005e6e:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	6993      	ldr	r3, [r2, #24]
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8005e88:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005e8c:	f7fc f85e 	bl	8001f4c <HAL_LTDC_MspInit>
 8005e90:	e792      	b.n	8005db8 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8005e92:	2001      	movs	r0, #1
}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	f000f800 	.word	0xf000f800

08005e9c <HAL_LTDC_ErrorCallback>:
}
 8005e9c:	4770      	bx	lr

08005e9e <HAL_LTDC_ReloadEventCallback>:
}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_LTDC_IRQHandler>:
{
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ea4:	6803      	ldr	r3, [r0, #0]
 8005ea6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005ea8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005eaa:	f015 0f04 	tst.w	r5, #4
 8005eae:	d002      	beq.n	8005eb6 <HAL_LTDC_IRQHandler+0x16>
 8005eb0:	f016 0f04 	tst.w	r6, #4
 8005eb4:	d112      	bne.n	8005edc <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005eb6:	f015 0f02 	tst.w	r5, #2
 8005eba:	d002      	beq.n	8005ec2 <HAL_LTDC_IRQHandler+0x22>
 8005ebc:	f016 0f02 	tst.w	r6, #2
 8005ec0:	d121      	bne.n	8005f06 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ec2:	f015 0f01 	tst.w	r5, #1
 8005ec6:	d002      	beq.n	8005ece <HAL_LTDC_IRQHandler+0x2e>
 8005ec8:	f016 0f01 	tst.w	r6, #1
 8005ecc:	d132      	bne.n	8005f34 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ece:	f015 0f08 	tst.w	r5, #8
 8005ed2:	d002      	beq.n	8005eda <HAL_LTDC_IRQHandler+0x3a>
 8005ed4:	f016 0f08 	tst.w	r6, #8
 8005ed8:	d13d      	bne.n	8005f56 <HAL_LTDC_IRQHandler+0xb6>
}
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ee4:	6803      	ldr	r3, [r0, #0]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005eea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ef6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005efa:	2300      	movs	r3, #0
 8005efc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005f00:	f7ff ffcc 	bl	8005e9c <HAL_LTDC_ErrorCallback>
 8005f04:	e7d7      	b.n	8005eb6 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f0a:	f023 0302 	bic.w	r3, r3, #2
 8005f0e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	2202      	movs	r2, #2
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f16:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f20:	2304      	movs	r3, #4
 8005f22:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f26:	2300      	movs	r3, #0
 8005f28:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7ff ffb5 	bl	8005e9c <HAL_LTDC_ErrorCallback>
 8005f32:	e7c6      	b.n	8005ec2 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	2301      	movs	r3, #1
 8005f42:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f44:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7fb fc14 	bl	800177c <HAL_LTDC_LineEventCallback>
 8005f54:	e7bb      	b.n	8005ece <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005f5a:	f023 0308 	bic.w	r3, r3, #8
 8005f5e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	2208      	movs	r2, #8
 8005f64:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff ff93 	bl	8005e9e <HAL_LTDC_ReloadEventCallback>
}
 8005f78:	e7af      	b.n	8005eda <HAL_LTDC_IRQHandler+0x3a>

08005f7a <HAL_LTDC_ConfigLayer>:
{
 8005f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8005f7c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d02c      	beq.n	8005fde <HAL_LTDC_ConfigLayer+0x64>
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	4616      	mov	r6, r2
 8005f8a:	2701      	movs	r7, #1
 8005f8c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f90:	2302      	movs	r3, #2
 8005f92:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f96:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8005f9a:	fb0c 0c02 	mla	ip, ip, r2, r0
 8005f9e:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8005fa2:	468e      	mov	lr, r1
 8005fa4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005fb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005fbc:	f8de 3000 	ldr.w	r3, [lr]
 8005fc0:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7ff fe11 	bl	8005bf0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fd2:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8005fde:	2002      	movs	r0, #2
 8005fe0:	e7fc      	b.n	8005fdc <HAL_LTDC_ConfigLayer+0x62>
	...

08005fe4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005fe4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d01a      	beq.n	8006022 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8005fec:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ffa:	6804      	ldr	r4, [r0, #0]
 8005ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <HAL_LTDC_ProgramLineEvent+0x44>)
 8006006:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006008:	6801      	ldr	r1, [r0, #0]
 800600a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800600c:	4313      	orrs	r3, r2
 800600e:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8006010:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006014:	2300      	movs	r3, #0
 8006016:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800601a:	4618      	mov	r0, r3
}
 800601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006020:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8006022:	2002      	movs	r0, #2
}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	50001000 	.word	0x50001000

0800602c <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8006030:	f7fe fd16 	bl	8004a60 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006034:	2c00      	cmp	r4, #0
 8006036:	d035      	beq.n	80060a4 <HAL_MDMA_Abort+0x78>
 8006038:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800603a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d006      	beq.n	8006052 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006048:	2300      	movs	r3, #0
 800604a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800604e:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 8006050:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	68d3      	ldr	r3, [r2, #12]
 8006056:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800605a:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	68d3      	ldr	r3, [r2, #12]
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	f012 0f01 	tst.w	r2, #1
 800606e:	d010      	beq.n	8006092 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006070:	f7fe fcf6 	bl	8004a60 <HAL_GetTick>
 8006074:	1b43      	subs	r3, r0, r5
 8006076:	2b05      	cmp	r3, #5
 8006078:	d9f5      	bls.n	8006066 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800607a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800607c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006080:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8006082:	2300      	movs	r3, #0
 8006084:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8006088:	2303      	movs	r3, #3
 800608a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800608e:	2001      	movs	r0, #1
 8006090:	e7de      	b.n	8006050 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8006092:	221f      	movs	r2, #31
 8006094:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 8006096:	2000      	movs	r0, #0
 8006098:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800609c:	2301      	movs	r3, #1
 800609e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060a2:	e7d5      	b.n	8006050 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 80060a4:	2001      	movs	r0, #1
 80060a6:	e7d3      	b.n	8006050 <HAL_MDMA_Abort+0x24>

080060a8 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80060a8:	b190      	cbz	r0, 80060d0 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80060aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d003      	beq.n	80060bc <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80060bc:	2304      	movs	r3, #4
 80060be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80060c2:	6802      	ldr	r2, [r0, #0]
 80060c4:	68d3      	ldr	r3, [r2, #12]
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80060cc:	2000      	movs	r0, #0
 80060ce:	4770      	bx	lr
    return HAL_ERROR;
 80060d0:	2001      	movs	r0, #1
}
 80060d2:	4770      	bx	lr

080060d4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80060d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 80060d6:	6802      	ldr	r2, [r0, #0]
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80060de:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 80060e0:	6883      	ldr	r3, [r0, #8]
 80060e2:	b933      	cbnz	r3, 80060f2 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 80060e4:	6802      	ldr	r2, [r0, #0]
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ec:	684c      	ldr	r4, [r1, #4]
 80060ee:	4323      	orrs	r3, r4
 80060f0:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80060f2:	680b      	ldr	r3, [r1, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d04d      	beq.n	8006194 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d055      	beq.n	80061a8 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80060fc:	6803      	ldr	r3, [r0, #0]
 80060fe:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8006102:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8006106:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800610a:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800610e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8006110:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8006112:	432c      	orrs	r4, r5
 8006114:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8006116:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006118:	b15c      	cbz	r4, 8006132 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800611a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800611c:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006124:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006126:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006128:	432c      	orrs	r4, r5
 800612a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800612c:	432c      	orrs	r4, r5
 800612e:	4323      	orrs	r3, r4
 8006130:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006132:	f8de 3000 	ldr.w	r3, [lr]
 8006136:	f023 031f 	bic.w	r3, r3, #31
 800613a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800613c:	4323      	orrs	r3, r4
 800613e:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006142:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006144:	b12b      	cbz	r3, 8006152 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006146:	680b      	ldr	r3, [r1, #0]
 8006148:	b91b      	cbnz	r3, 8006152 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800614a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800614c:	6804      	ldr	r4, [r0, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006152:	68cb      	ldr	r3, [r1, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d073      	beq.n	8006240 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006158:	69cc      	ldr	r4, [r1, #28]
 800615a:	2c00      	cmp	r4, #0
 800615c:	d048      	beq.n	80061f0 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800615e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8006160:	b365      	cbz	r5, 80061bc <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006162:	6817      	ldr	r7, [r2, #0]
 8006164:	4e48      	ldr	r6, [pc, #288]	; (8006288 <OSPI_ConfigCmd+0x1b4>)
 8006166:	403e      	ands	r6, r7
 8006168:	694f      	ldr	r7, [r1, #20]
 800616a:	433b      	orrs	r3, r7
 800616c:	690f      	ldr	r7, [r1, #16]
 800616e:	433b      	orrs	r3, r7
 8006170:	431c      	orrs	r4, r3
 8006172:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006174:	431c      	orrs	r4, r3
 8006176:	6a0b      	ldr	r3, [r1, #32]
 8006178:	431c      	orrs	r4, r3
 800617a:	432c      	orrs	r4, r5
 800617c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800617e:	432c      	orrs	r4, r5
 8006180:	4334      	orrs	r4, r6
 8006182:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8006184:	688b      	ldr	r3, [r1, #8]
 8006186:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800618a:	6803      	ldr	r3, [r0, #0]
 800618c:	698a      	ldr	r2, [r1, #24]
 800618e:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8006190:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 8006194:	6803      	ldr	r3, [r0, #0]
 8006196:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800619a:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800619e:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80061a2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80061a6:	e7b2      	b.n	800610e <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 80061a8:	6803      	ldr	r3, [r0, #0]
 80061aa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80061ae:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80061b2:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80061b6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80061ba:	e7a8      	b.n	800610e <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80061bc:	6816      	ldr	r6, [r2, #0]
 80061be:	4d33      	ldr	r5, [pc, #204]	; (800628c <OSPI_ConfigCmd+0x1b8>)
 80061c0:	4035      	ands	r5, r6
 80061c2:	694e      	ldr	r6, [r1, #20]
 80061c4:	4333      	orrs	r3, r6
 80061c6:	690e      	ldr	r6, [r1, #16]
 80061c8:	4333      	orrs	r3, r6
 80061ca:	431c      	orrs	r4, r3
 80061cc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80061ce:	431c      	orrs	r4, r3
 80061d0:	6a0b      	ldr	r3, [r1, #32]
 80061d2:	431c      	orrs	r4, r3
 80061d4:	432c      	orrs	r4, r5
 80061d6:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d1d1      	bne.n	8006184 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80061e0:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d1ce      	bne.n	8006184 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e7c9      	b.n	8006184 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80061f0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80061f2:	b184      	cbz	r4, 8006216 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80061f4:	6815      	ldr	r5, [r2, #0]
 80061f6:	4826      	ldr	r0, [pc, #152]	; (8006290 <OSPI_ConfigCmd+0x1bc>)
 80061f8:	4028      	ands	r0, r5
 80061fa:	694d      	ldr	r5, [r1, #20]
 80061fc:	432b      	orrs	r3, r5
 80061fe:	690d      	ldr	r5, [r1, #16]
 8006200:	432b      	orrs	r3, r5
 8006202:	431c      	orrs	r4, r3
 8006204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006206:	431c      	orrs	r4, r3
 8006208:	4304      	orrs	r4, r0
 800620a:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800620c:	688b      	ldr	r3, [r1, #8]
 800620e:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2000      	movs	r0, #0
 8006214:	e7bd      	b.n	8006192 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006216:	6814      	ldr	r4, [r2, #0]
 8006218:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800621c:	694d      	ldr	r5, [r1, #20]
 800621e:	432b      	orrs	r3, r5
 8006220:	690d      	ldr	r5, [r1, #16]
 8006222:	432b      	orrs	r3, r5
 8006224:	4323      	orrs	r3, r4
 8006226:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006228:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622e:	d1ed      	bne.n	800620c <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006230:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006232:	2b08      	cmp	r3, #8
 8006234:	d1ea      	bne.n	800620c <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e7e5      	b.n	800620c <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006240:	69cb      	ldr	r3, [r1, #28]
 8006242:	b1e3      	cbz	r3, 800627e <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006244:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8006246:	b184      	cbz	r4, 800626a <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006248:	6816      	ldr	r6, [r2, #0]
 800624a:	4d12      	ldr	r5, [pc, #72]	; (8006294 <OSPI_ConfigCmd+0x1c0>)
 800624c:	4035      	ands	r5, r6
 800624e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006250:	4333      	orrs	r3, r6
 8006252:	6a0e      	ldr	r6, [r1, #32]
 8006254:	4333      	orrs	r3, r6
 8006256:	4323      	orrs	r3, r4
 8006258:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800625a:	4323      	orrs	r3, r4
 800625c:	432b      	orrs	r3, r5
 800625e:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	698a      	ldr	r2, [r1, #24]
 8006264:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2000      	movs	r0, #0
 8006268:	e793      	b.n	8006192 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800626a:	6814      	ldr	r4, [r2, #0]
 800626c:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8006270:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006272:	432b      	orrs	r3, r5
 8006274:	6a0d      	ldr	r5, [r1, #32]
 8006276:	432b      	orrs	r3, r5
 8006278:	4323      	orrs	r3, r4
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e7f0      	b.n	8006260 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800627e:	2308      	movs	r3, #8
 8006280:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 8006282:	2001      	movs	r0, #1
 8006284:	e785      	b.n	8006192 <OSPI_ConfigCmd+0xbe>
 8006286:	bf00      	nop
 8006288:	f0ffc0c0 	.word	0xf0ffc0c0
 800628c:	ffffc0c0 	.word	0xffffc0c0
 8006290:	f0ffffc0 	.word	0xf0ffffc0
 8006294:	f0ffc0ff 	.word	0xf0ffc0ff

08006298 <OSPI_WaitFlagStateUntilTimeout>:
{
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	4605      	mov	r5, r0
 800629e:	460f      	mov	r7, r1
 80062a0:	4616      	mov	r6, r2
 80062a2:	4699      	mov	r9, r3
 80062a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80062a8:	682c      	ldr	r4, [r5, #0]
 80062aa:	6a24      	ldr	r4, [r4, #32]
 80062ac:	423c      	tst	r4, r7
 80062ae:	bf14      	ite	ne
 80062b0:	f04f 0c01 	movne.w	ip, #1
 80062b4:	f04f 0c00 	moveq.w	ip, #0
 80062b8:	45b4      	cmp	ip, r6
 80062ba:	d014      	beq.n	80062e6 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80062bc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80062c0:	d0f2      	beq.n	80062a8 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c2:	f7fe fbcd 	bl	8004a60 <HAL_GetTick>
 80062c6:	eba0 0009 	sub.w	r0, r0, r9
 80062ca:	4540      	cmp	r0, r8
 80062cc:	d802      	bhi.n	80062d4 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	d1e9      	bne.n	80062a8 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80062d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d8:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80062da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 80062e2:	2001      	movs	r0, #1
 80062e4:	e000      	b.n	80062e8 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 80062e6:	2000      	movs	r0, #0
}
 80062e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062ec <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 80062ec:	b180      	cbz	r0, 8006310 <HAL_OSPI_DeInit+0x24>
{
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 80062f2:	6802      	ldr	r2, [r0, #0]
 80062f4:	6813      	ldr	r3, [r2, #0]
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80062fc:	6802      	ldr	r2, [r0, #0]
 80062fe:	6893      	ldr	r3, [r2, #8]
 8006300:	f023 0302 	bic.w	r3, r3, #2
 8006304:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 8006306:	f7fb feff 	bl	8002108 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800630a:	2000      	movs	r0, #0
 800630c:	6520      	str	r0, [r4, #80]	; 0x50
}
 800630e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8006310:	2001      	movs	r0, #1
}
 8006312:	4770      	bx	lr

08006314 <HAL_OSPI_Command>:
{
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	4604      	mov	r4, r0
 800631c:	4688      	mov	r8, r1
 800631e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8006320:	f7fe fb9e 	bl	8004a60 <HAL_GetTick>
 8006324:	4606      	mov	r6, r0
  state = hospi->State;
 8006326:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006328:	2d02      	cmp	r5, #2
 800632a:	d009      	beq.n	8006340 <HAL_OSPI_Command+0x2c>
 800632c:	2d14      	cmp	r5, #20
 800632e:	d024      	beq.n	800637a <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006330:	2d24      	cmp	r5, #36	; 0x24
 8006332:	d028      	beq.n	8006386 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006334:	2310      	movs	r3, #16
 8006336:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006338:	2001      	movs	r0, #1
}
 800633a:	b002      	add	sp, #8
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006340:	68e3      	ldr	r3, [r4, #12]
 8006342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006346:	d0f1      	beq.n	800632c <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006348:	9700      	str	r7, [sp, #0]
 800634a:	4633      	mov	r3, r6
 800634c:	2200      	movs	r2, #0
 800634e:	2120      	movs	r1, #32
 8006350:	4620      	mov	r0, r4
 8006352:	f7ff ffa1 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006356:	2800      	cmp	r0, #0
 8006358:	d1ef      	bne.n	800633a <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800635a:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800635c:	4641      	mov	r1, r8
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff feb8 	bl	80060d4 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006364:	2800      	cmp	r0, #0
 8006366:	d1e8      	bne.n	800633a <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006368:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800636c:	b193      	cbz	r3, 8006394 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	b9d3      	cbnz	r3, 80063aa <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006374:	2304      	movs	r3, #4
 8006376:	6523      	str	r3, [r4, #80]	; 0x50
 8006378:	e7df      	b.n	800633a <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800637a:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800637e:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006380:	2b01      	cmp	r3, #1
 8006382:	d8d5      	bhi.n	8006330 <HAL_OSPI_Command+0x1c>
 8006384:	e7e0      	b.n	8006348 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8006386:	f8d8 3000 	ldr.w	r3, [r8]
 800638a:	2b03      	cmp	r3, #3
 800638c:	bf18      	it	ne
 800638e:	2b01      	cmpne	r3, #1
 8006390:	d1d0      	bne.n	8006334 <HAL_OSPI_Command+0x20>
 8006392:	e7d9      	b.n	8006348 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006394:	9700      	str	r7, [sp, #0]
 8006396:	4633      	mov	r3, r6
 8006398:	2201      	movs	r2, #1
 800639a:	2102      	movs	r1, #2
 800639c:	4620      	mov	r0, r4
 800639e:	f7ff ff7b 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	2202      	movs	r2, #2
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
 80063a8:	e7c7      	b.n	800633a <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d007      	beq.n	80063be <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d1c3      	bne.n	800633a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80063b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063b4:	2b14      	cmp	r3, #20
 80063b6:	d00b      	beq.n	80063d0 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80063b8:	2324      	movs	r3, #36	; 0x24
 80063ba:	6523      	str	r3, [r4, #80]	; 0x50
 80063bc:	e7bd      	b.n	800633a <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80063be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063c0:	2b24      	cmp	r3, #36	; 0x24
 80063c2:	d002      	beq.n	80063ca <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80063c4:	2314      	movs	r3, #20
 80063c6:	6523      	str	r3, [r4, #80]	; 0x50
 80063c8:	e7b7      	b.n	800633a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063ca:	2304      	movs	r3, #4
 80063cc:	6523      	str	r3, [r4, #80]	; 0x50
 80063ce:	e7b4      	b.n	800633a <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063d0:	2304      	movs	r3, #4
 80063d2:	6523      	str	r3, [r4, #80]	; 0x50
 80063d4:	e7b1      	b.n	800633a <HAL_OSPI_Command+0x26>

080063d6 <HAL_OSPI_Transmit>:
{
 80063d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	4604      	mov	r4, r0
 80063de:	4688      	mov	r8, r1
 80063e0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80063e2:	f7fe fb3d 	bl	8004a60 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80063e6:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 80063e8:	f1b8 0f00 	cmp.w	r8, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_OSPI_Transmit+0x2e>
 80063ee:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80063f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d00a      	beq.n	800640c <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80063f6:	2310      	movs	r3, #16
 80063f8:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	b002      	add	sp, #8
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006404:	2308      	movs	r3, #8
 8006406:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e7f7      	b.n	80063fc <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800640c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640e:	3301      	adds	r3, #1
 8006410:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8006412:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006414:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 8006416:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006420:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006422:	9600      	str	r6, [sp, #0]
 8006424:	462b      	mov	r3, r5
 8006426:	2201      	movs	r2, #1
 8006428:	2104      	movs	r1, #4
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff ff34 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006430:	4603      	mov	r3, r0
 8006432:	b960      	cbnz	r0, 800644e <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006434:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800643c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800643e:	3101      	adds	r1, #1
 8006440:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006442:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006444:	3901      	subs	r1, #1
 8006446:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 8006448:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800644a:	2a00      	cmp	r2, #0
 800644c:	d1e9      	bne.n	8006422 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d4      	bne.n	80063fc <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006452:	9600      	str	r6, [sp, #0]
 8006454:	462b      	mov	r3, r5
 8006456:	2201      	movs	r2, #1
 8006458:	2102      	movs	r1, #2
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff ff1c 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006460:	4603      	mov	r3, r0
 8006462:	2800      	cmp	r0, #0
 8006464:	d1ca      	bne.n	80063fc <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	2202      	movs	r2, #2
 800646a:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800646c:	6522      	str	r2, [r4, #80]	; 0x50
 800646e:	e7c5      	b.n	80063fc <HAL_OSPI_Transmit+0x26>

08006470 <HAL_OSPI_Receive>:
{
 8006470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	4604      	mov	r4, r0
 8006478:	4688      	mov	r8, r1
 800647a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800647c:	f7fe faf0 	bl	8004a60 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006480:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 8006482:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006484:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 8006488:	f1b8 0f00 	cmp.w	r8, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_OSPI_Receive+0x34>
 800648e:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006490:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00a      	beq.n	80064ac <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006496:	2310      	movs	r3, #16
 8006498:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
}
 800649c:	4618      	mov	r0, r3
 800649e:	b002      	add	sp, #8
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80064a4:	2308      	movs	r3, #8
 80064a6:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e7f7      	b.n	800649c <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80064ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80064ae:	3301      	adds	r3, #1
 80064b0:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80064b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80064b4:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80064b6:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064cc:	d007      	beq.n	80064de <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80064d4:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 80064d8:	d02a      	beq.n	8006530 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80064da:	649a      	str	r2, [r3, #72]	; 0x48
 80064dc:	e001      	b.n	80064e2 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80064e2:	9700      	str	r7, [sp, #0]
 80064e4:	4633      	mov	r3, r6
 80064e6:	2201      	movs	r2, #1
 80064e8:	2106      	movs	r1, #6
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff fed4 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80064f0:	4603      	mov	r3, r0
 80064f2:	b960      	cbnz	r0, 800650e <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80064f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064f6:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 80064fa:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 80064fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064fe:	3101      	adds	r1, #1
 8006500:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006502:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006504:	3901      	subs	r1, #1
 8006506:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8006508:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1e9      	bne.n	80064e2 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1c4      	bne.n	800649c <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006512:	9700      	str	r7, [sp, #0]
 8006514:	4633      	mov	r3, r6
 8006516:	2201      	movs	r2, #1
 8006518:	2102      	movs	r1, #2
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff febc 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006520:	4603      	mov	r3, r0
 8006522:	2800      	cmp	r0, #0
 8006524:	d1ba      	bne.n	800649c <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006526:	6821      	ldr	r1, [r4, #0]
 8006528:	2202      	movs	r2, #2
 800652a:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800652c:	6522      	str	r2, [r4, #80]	; 0x50
 800652e:	e7b5      	b.n	800649c <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006530:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8006534:	e7d5      	b.n	80064e2 <HAL_OSPI_Receive+0x72>

08006536 <HAL_OSPI_AutoPolling>:
{
 8006536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800653a:	b083      	sub	sp, #12
 800653c:	4604      	mov	r4, r0
 800653e:	460d      	mov	r5, r1
 8006540:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8006542:	f7fe fa8d 	bl	8004a60 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800654a:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800654e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006550:	2904      	cmp	r1, #4
 8006552:	d005      	beq.n	8006560 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006554:	2310      	movs	r3, #16
 8006556:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006558:	2001      	movs	r0, #1
}
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006560:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006562:	68eb      	ldr	r3, [r5, #12]
 8006564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006568:	d1f4      	bne.n	8006554 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800656a:	f8cd 9000 	str.w	r9, [sp]
 800656e:	4603      	mov	r3, r0
 8006570:	2200      	movs	r2, #0
 8006572:	2120      	movs	r1, #32
 8006574:	4620      	mov	r0, r4
 8006576:	f7ff fe8f 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800657a:	2800      	cmp	r0, #0
 800657c:	d1ed      	bne.n	800655a <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	682a      	ldr	r2, [r5, #0]
 8006582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	686a      	ldr	r2, [r5, #4]
 800658a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	692a      	ldr	r2, [r5, #16]
 8006592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	680b      	ldr	r3, [r1, #0]
 800659a:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800659e:	68aa      	ldr	r2, [r5, #8]
 80065a0:	68e8      	ldr	r0, [r5, #12]
 80065a2:	4302      	orrs	r2, r0
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065aa:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065ac:	68e3      	ldr	r3, [r4, #12]
 80065ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b2:	d007      	beq.n	80065c4 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80065ba:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 80065be:	d013      	beq.n	80065e8 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80065c0:	649f      	str	r7, [r3, #72]	; 0x48
 80065c2:	e001      	b.n	80065c8 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80065c8:	f8cd 9000 	str.w	r9, [sp]
 80065cc:	4643      	mov	r3, r8
 80065ce:	2201      	movs	r2, #1
 80065d0:	2108      	movs	r1, #8
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff fe60 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80065d8:	2800      	cmp	r0, #0
 80065da:	d1be      	bne.n	800655a <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	2208      	movs	r2, #8
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 80065e2:	2302      	movs	r3, #2
 80065e4:	6523      	str	r3, [r4, #80]	; 0x50
 80065e6:	e7b8      	b.n	800655a <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80065e8:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 80065ec:	e7ec      	b.n	80065c8 <HAL_OSPI_AutoPolling+0x92>
	...

080065f0 <HAL_OSPI_MemoryMapped>:
{
 80065f0:	b530      	push	{r4, r5, lr}
 80065f2:	b083      	sub	sp, #12
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7fe fa32 	bl	8004a60 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80065fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d004      	beq.n	800660c <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006602:	2310      	movs	r3, #16
 8006604:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006606:	2001      	movs	r0, #1
}
 8006608:	b003      	add	sp, #12
 800660a:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800660c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	2200      	movs	r2, #0
 8006614:	2120      	movs	r1, #32
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff fe3e 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800661c:	2800      	cmp	r0, #0
 800661e:	d1f3      	bne.n	8006608 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006620:	2388      	movs	r3, #136	; 0x88
 8006622:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	2b08      	cmp	r3, #8
 8006628:	d009      	beq.n	800663e <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	6811      	ldr	r1, [r2, #0]
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <HAL_OSPI_MemoryMapped+0x68>)
 8006630:	400b      	ands	r3, r1
 8006632:	6829      	ldr	r1, [r5, #0]
 8006634:	430b      	orrs	r3, r1
 8006636:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e7e4      	b.n	8006608 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	686a      	ldr	r2, [r5, #4]
 8006642:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	2210      	movs	r2, #16
 800664a:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e7e8      	b.n	800662a <HAL_OSPI_MemoryMapped+0x3a>
 8006658:	cffffff7 	.word	0xcffffff7

0800665c <HAL_OSPI_ErrorCallback>:
}
 800665c:	4770      	bx	lr

0800665e <HAL_OSPI_AbortCpltCallback>:
}
 800665e:	4770      	bx	lr

08006660 <OSPI_DMAAbortCplt>:
{
 8006660:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8006662:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006668:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d116      	bne.n	800669e <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006670:	6803      	ldr	r3, [r0, #0]
 8006672:	6a1a      	ldr	r2, [r3, #32]
 8006674:	f012 0f20 	tst.w	r2, #32
 8006678:	d00c      	beq.n	8006694 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800667a:	2202      	movs	r2, #2
 800667c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800667e:	6802      	ldr	r2, [r0, #0]
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006686:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006688:	6802      	ldr	r2, [r0, #0]
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	f043 0302 	orr.w	r3, r3, #2
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e008      	b.n	80066a6 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8006694:	2302      	movs	r3, #2
 8006696:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006698:	f7ff ffe1 	bl	800665e <HAL_OSPI_AbortCpltCallback>
 800669c:	e003      	b.n	80066a6 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800669e:	2302      	movs	r3, #2
 80066a0:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 80066a2:	f7ff ffdb 	bl	800665c <HAL_OSPI_ErrorCallback>
}
 80066a6:	bd08      	pop	{r3, pc}

080066a8 <HAL_OSPI_FifoThresholdCallback>:
}
 80066a8:	4770      	bx	lr

080066aa <HAL_OSPI_CmdCpltCallback>:
}
 80066aa:	4770      	bx	lr

080066ac <HAL_OSPI_RxCpltCallback>:
}
 80066ac:	4770      	bx	lr

080066ae <HAL_OSPI_TxCpltCallback>:
}
 80066ae:	4770      	bx	lr

080066b0 <HAL_OSPI_StatusMatchCallback>:
}
 80066b0:	4770      	bx	lr

080066b2 <HAL_OSPI_TimeOutCallback>:
}
 80066b2:	4770      	bx	lr

080066b4 <HAL_OSPI_IRQHandler>:
{
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80066b8:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 80066ba:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 80066bc:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 80066be:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80066c0:	f013 0f04 	tst.w	r3, #4
 80066c4:	d027      	beq.n	8006716 <HAL_OSPI_IRQHandler+0x62>
 80066c6:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 80066ca:	d024      	beq.n	8006716 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80066cc:	2818      	cmp	r0, #24
 80066ce:	d00c      	beq.n	80066ea <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066d0:	2828      	cmp	r0, #40	; 0x28
 80066d2:	d015      	beq.n	8006700 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 80066d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066d6:	b923      	cbnz	r3, 80066e2 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066e0:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7ff ffe0 	bl	80066a8 <HAL_OSPI_FifoThresholdCallback>
}
 80066e8:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80066ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 80066f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066f4:	3301      	adds	r3, #1
 80066f6:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 80066f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066fa:	3b01      	subs	r3, #1
 80066fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80066fe:	e7e9      	b.n	80066d4 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006702:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006706:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800670a:	3301      	adds	r3, #1
 800670c:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800670e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006710:	3b01      	subs	r3, #1
 8006712:	64a3      	str	r3, [r4, #72]	; 0x48
 8006714:	e7de      	b.n	80066d4 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006716:	f013 0f02 	tst.w	r3, #2
 800671a:	d044      	beq.n	80067a6 <HAL_OSPI_IRQHandler+0xf2>
 800671c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8006720:	d041      	beq.n	80067a6 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006722:	2828      	cmp	r0, #40	; 0x28
 8006724:	d014      	beq.n	8006750 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006726:	2102      	movs	r1, #2
 8006728:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6813      	ldr	r3, [r2, #0]
 800672e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006732:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006734:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006736:	2818      	cmp	r0, #24
 8006738:	d029      	beq.n	800678e <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800673a:	2808      	cmp	r0, #8
 800673c:	d02b      	beq.n	8006796 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800673e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006742:	d1d1      	bne.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8006744:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006746:	bb53      	cbnz	r3, 800679e <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8006748:	4620      	mov	r0, r4
 800674a:	f7ff ff88 	bl	800665e <HAL_OSPI_AbortCpltCallback>
 800674e:	e7cb      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006752:	b169      	cbz	r1, 8006770 <HAL_OSPI_IRQHandler+0xbc>
 8006754:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8006758:	d00a      	beq.n	8006770 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800675a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800675c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006760:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006764:	3301      	adds	r3, #1
 8006766:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006768:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800676a:	3b01      	subs	r3, #1
 800676c:	64a3      	str	r3, [r4, #72]	; 0x48
 800676e:	e7bb      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 8006770:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1b8      	bne.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006776:	2102      	movs	r1, #2
 8006778:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006782:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8006784:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff ff90 	bl	80066ac <HAL_OSPI_RxCpltCallback>
 800678c:	e7ac      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ff8d 	bl	80066ae <HAL_OSPI_TxCpltCallback>
 8006794:	e7a8      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ff87 	bl	80066aa <HAL_OSPI_CmdCpltCallback>
 800679c:	e7a4      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff ff5c 	bl	800665c <HAL_OSPI_ErrorCallback>
 80067a4:	e7a0      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80067a6:	f013 0f08 	tst.w	r3, #8
 80067aa:	d013      	beq.n	80067d4 <HAL_OSPI_IRQHandler+0x120>
 80067ac:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80067b0:	d010      	beq.n	80067d4 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80067b2:	2308      	movs	r3, #8
 80067b4:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80067be:	d005      	beq.n	80067cc <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80067c6:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 80067c8:	2302      	movs	r3, #2
 80067ca:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff ff6f 	bl	80066b0 <HAL_OSPI_StatusMatchCallback>
 80067d2:	e789      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80067d4:	f013 0f01 	tst.w	r3, #1
 80067d8:	d029      	beq.n	800682e <HAL_OSPI_IRQHandler+0x17a>
 80067da:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80067de:	d026      	beq.n	800682e <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	6813      	ldr	r3, [r2, #0]
 80067e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067ec:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80067ee:	2302      	movs	r3, #2
 80067f0:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	f012 0f04 	tst.w	r2, #4
 80067fa:	d012      	beq.n	8006822 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	f022 0204 	bic.w	r2, r2, #4
 8006802:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8006804:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006806:	4a11      	ldr	r2, [pc, #68]	; (800684c <HAL_OSPI_IRQHandler+0x198>)
 8006808:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800680a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800680c:	f7ff fc4c 	bl	80060a8 <HAL_MDMA_Abort_IT>
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f af69 	beq.w	80066e8 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8006816:	2302      	movs	r3, #2
 8006818:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff ff1e 	bl	800665c <HAL_OSPI_ErrorCallback>
 8006820:	e762      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8006822:	2302      	movs	r3, #2
 8006824:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff ff18 	bl	800665c <HAL_OSPI_ErrorCallback>
 800682c:	e75c      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800682e:	f013 0f10 	tst.w	r3, #16
 8006832:	f43f af59 	beq.w	80066e8 <HAL_OSPI_IRQHandler+0x34>
 8006836:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800683a:	f43f af55 	beq.w	80066e8 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800683e:	2310      	movs	r3, #16
 8006840:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff ff35 	bl	80066b2 <HAL_OSPI_TimeOutCallback>
}
 8006848:	e74e      	b.n	80066e8 <HAL_OSPI_IRQHandler+0x34>
 800684a:	bf00      	nop
 800684c:	08006661 	.word	0x08006661

08006850 <HAL_OSPI_Abort>:
{
 8006850:	b530      	push	{r4, r5, lr}
 8006852:	b083      	sub	sp, #12
 8006854:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006856:	f7fe f903 	bl	8004a60 <HAL_GetTick>
  state = hospi->State;
 800685a:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800685c:	f012 0f0c 	tst.w	r2, #12
 8006860:	d036      	beq.n	80068d0 <HAL_OSPI_Abort+0x80>
 8006862:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	f012 0f04 	tst.w	r2, #4
 800686c:	d108      	bne.n	8006880 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800686e:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	f012 0f20 	tst.w	r2, #32
 8006878:	d10e      	bne.n	8006898 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800687a:	2302      	movs	r3, #2
 800687c:	6523      	str	r3, [r4, #80]	; 0x50
 800687e:	e02a      	b.n	80068d6 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	f022 0204 	bic.w	r2, r2, #4
 8006886:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006888:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800688a:	f7ff fbcf 	bl	800602c <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800688e:	2800      	cmp	r0, #0
 8006890:	d0ee      	beq.n	8006870 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006892:	2304      	movs	r3, #4
 8006894:	6563      	str	r3, [r4, #84]	; 0x54
 8006896:	e7eb      	b.n	8006870 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f042 0202 	orr.w	r2, r2, #2
 800689e:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80068a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	462b      	mov	r3, r5
 80068a6:	2201      	movs	r2, #1
 80068a8:	2102      	movs	r1, #2
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7ff fcf4 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80068b0:	b988      	cbnz	r0, 80068d6 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	2202      	movs	r2, #2
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80068b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	462b      	mov	r3, r5
 80068be:	2200      	movs	r2, #0
 80068c0:	2120      	movs	r1, #32
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fce8 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80068c8:	b928      	cbnz	r0, 80068d6 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 80068ca:	2302      	movs	r3, #2
 80068cc:	6523      	str	r3, [r4, #80]	; 0x50
 80068ce:	e002      	b.n	80068d6 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80068d0:	2310      	movs	r3, #16
 80068d2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80068d4:	2001      	movs	r0, #1
}
 80068d6:	b003      	add	sp, #12
 80068d8:	bd30      	pop	{r4, r5, pc}

080068da <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 80068da:	6581      	str	r1, [r0, #88]	; 0x58
}
 80068dc:	2000      	movs	r0, #0
 80068de:	4770      	bx	lr

080068e0 <HAL_OSPI_Init>:
{
 80068e0:	b530      	push	{r4, r5, lr}
 80068e2:	b083      	sub	sp, #12
 80068e4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80068e6:	f7fe f8bb 	bl	8004a60 <HAL_GetTick>
  if (hospi == NULL)
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	d077      	beq.n	80069de <HAL_OSPI_Init+0xfe>
 80068ee:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80068f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068f6:	b113      	cbz	r3, 80068fe <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80068f8:	2000      	movs	r0, #0
}
 80068fa:	b003      	add	sp, #12
 80068fc:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 80068fe:	4620      	mov	r0, r4
 8006900:	f7fb fbb8 	bl	8002074 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006904:	f241 3188 	movw	r1, #5000	; 0x1388
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff ffe6 	bl	80068da <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800690e:	6820      	ldr	r0, [r4, #0]
 8006910:	6882      	ldr	r2, [r0, #8]
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_OSPI_Init+0x104>)
 8006914:	4013      	ands	r3, r2
 8006916:	68e2      	ldr	r2, [r4, #12]
 8006918:	6921      	ldr	r1, [r4, #16]
 800691a:	3901      	subs	r1, #1
 800691c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006920:	6961      	ldr	r1, [r4, #20]
 8006922:	3901      	subs	r1, #1
 8006924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692a:	430a      	orrs	r2, r1
 800692c:	69e1      	ldr	r1, [r4, #28]
 800692e:	430a      	orrs	r2, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006934:	6822      	ldr	r2, [r4, #0]
 8006936:	68d3      	ldr	r3, [r2, #12]
 8006938:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800693c:	6a21      	ldr	r1, [r4, #32]
 800693e:	430b      	orrs	r3, r1
 8006940:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006942:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800694c:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006952:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006954:	6821      	ldr	r1, [r4, #0]
 8006956:	680b      	ldr	r3, [r1, #0]
 8006958:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	3a01      	subs	r2, #1
 8006960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006964:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	462b      	mov	r3, r5
 800696c:	2200      	movs	r2, #0
 800696e:	2120      	movs	r1, #32
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff fc91 	bl	8006298 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006976:	2800      	cmp	r0, #0
 8006978:	d1bf      	bne.n	80068fa <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800697a:	6821      	ldr	r1, [r4, #0]
 800697c:	68cb      	ldr	r3, [r1, #12]
 800697e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006984:	3a01      	subs	r2, #1
 8006986:	4313      	orrs	r3, r2
 8006988:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	6813      	ldr	r3, [r2, #0]
 800698e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006992:	68a1      	ldr	r1, [r4, #8]
 8006994:	430b      	orrs	r3, r1
 8006996:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006998:	6821      	ldr	r1, [r4, #0]
 800699a:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800699e:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 80069a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80069a4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80069a6:	432a      	orrs	r2, r5
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d006      	beq.n	80069cc <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80069be:	68e3      	ldr	r3, [r4, #12]
 80069c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069c4:	d008      	beq.n	80069d8 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 80069c6:	2302      	movs	r3, #2
 80069c8:	6523      	str	r3, [r4, #80]	; 0x50
 80069ca:	e796      	b.n	80068fa <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	6893      	ldr	r3, [r2, #8]
 80069d0:	f043 0302 	orr.w	r3, r3, #2
 80069d4:	6093      	str	r3, [r2, #8]
 80069d6:	e7f2      	b.n	80069be <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80069d8:	2301      	movs	r3, #1
 80069da:	6523      	str	r3, [r4, #80]	; 0x50
 80069dc:	e78d      	b.n	80068fa <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 80069de:	2001      	movs	r0, #1
 80069e0:	e78b      	b.n	80068fa <HAL_OSPI_Init+0x1a>
 80069e2:	bf00      	nop
 80069e4:	f8e0f8f4 	.word	0xf8e0f8f4

080069e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80069ec:	4b22      	ldr	r3, [pc, #136]	; (8006a78 <HAL_PWREx_ConfigSupply+0x90>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d007      	beq.n	8006a08 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069f8:	4b1f      	ldr	r3, [pc, #124]	; (8006a78 <HAL_PWREx_ConfigSupply+0x90>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d036      	beq.n	8006a72 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a04:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <HAL_PWREx_ConfigSupply+0x90>)
 8006a0a:	68d3      	ldr	r3, [r2, #12]
 8006a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a10:	4303      	orrs	r3, r0
 8006a12:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8006a14:	f7fe f824 	bl	8004a60 <HAL_GetTick>
 8006a18:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <HAL_PWREx_ConfigSupply+0x90>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006a22:	d107      	bne.n	8006a34 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a24:	f7fe f81c 	bl	8004a60 <HAL_GetTick>
 8006a28:	1b43      	subs	r3, r0, r5
 8006a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2e:	d9f4      	bls.n	8006a1a <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8006a30:	2001      	movs	r0, #1
 8006a32:	e7e8      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006a34:	2c2e      	cmp	r4, #46	; 0x2e
 8006a36:	bf18      	it	ne
 8006a38:	2c1e      	cmpne	r4, #30
 8006a3a:	d008      	beq.n	8006a4e <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8006a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a3e:	bf14      	ite	ne
 8006a40:	2300      	movne	r3, #0
 8006a42:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006a44:	2c1d      	cmp	r4, #29
 8006a46:	d002      	beq.n	8006a4e <HAL_PWREx_ConfigSupply+0x66>
 8006a48:	b90b      	cbnz	r3, 8006a4e <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e7db      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8006a4e:	f7fe f807 	bl	8004a60 <HAL_GetTick>
 8006a52:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <HAL_PWREx_ConfigSupply+0x90>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a5c:	d107      	bne.n	8006a6e <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a5e:	f7fd ffff 	bl	8004a60 <HAL_GetTick>
 8006a62:	1b00      	subs	r0, r0, r4
 8006a64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006a68:	d9f4      	bls.n	8006a54 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	e7cb      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e7c9      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8006a72:	2000      	movs	r0, #0
 8006a74:	e7c7      	b.n	8006a06 <HAL_PWREx_ConfigSupply+0x1e>
 8006a76:	bf00      	nop
 8006a78:	58024800 	.word	0x58024800

08006a7c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f000 82f0 	beq.w	8007062 <HAL_RCC_OscConfig+0x5e6>
{
 8006a82:	b538      	push	{r3, r4, r5, lr}
 8006a84:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	6803      	ldr	r3, [r0, #0]
 8006a88:	f013 0f01 	tst.w	r3, #1
 8006a8c:	d029      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a8e:	4aa1      	ldr	r2, [pc, #644]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006a90:	6913      	ldr	r3, [r2, #16]
 8006a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a96:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d019      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x54>
 8006a9c:	2b18      	cmp	r3, #24
 8006a9e:	d013      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d043      	beq.n	8006b30 <HAL_RCC_OscConfig+0xb4>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d158      	bne.n	8006b5e <HAL_RCC_OscConfig+0xe2>
 8006aac:	4b99      	ldr	r3, [pc, #612]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e038      	b.n	8006b3a <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ac8:	f002 0203 	and.w	r2, r2, #3
 8006acc:	2a02      	cmp	r2, #2
 8006ace:	d1e7      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad0:	4b90      	ldr	r3, [pc, #576]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006ad8:	d003      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x66>
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 82c2 	beq.w	8007066 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f013 0f02 	tst.w	r3, #2
 8006ae8:	f000 80a2 	beq.w	8006c30 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aec:	4a89      	ldr	r2, [pc, #548]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006aee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006af0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006af2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006af6:	d074      	beq.n	8006be2 <HAL_RCC_OscConfig+0x166>
 8006af8:	2b18      	cmp	r3, #24
 8006afa:	d06f      	beq.n	8006bdc <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006afc:	68e3      	ldr	r3, [r4, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80c3 	beq.w	8006c8a <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b04:	4983      	ldr	r1, [pc, #524]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b06:	680a      	ldr	r2, [r1, #0]
 8006b08:	f022 0219 	bic.w	r2, r2, #25
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fd ffa6 	bl	8004a60 <HAL_GetTick>
 8006b14:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b16:	4b7f      	ldr	r3, [pc, #508]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f013 0f04 	tst.w	r3, #4
 8006b1e:	f040 80ab 	bne.w	8006c78 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b22:	f7fd ff9d 	bl	8004a60 <HAL_GetTick>
 8006b26:	1b40      	subs	r0, r0, r5
 8006b28:	2802      	cmp	r0, #2
 8006b2a:	d9f4      	bls.n	8006b16 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8006b2c:	2003      	movs	r0, #3
 8006b2e:	e2a1      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b30:	4a78      	ldr	r2, [pc, #480]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b38:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b3a:	6863      	ldr	r3, [r4, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d03e      	beq.n	8006bbe <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8006b40:	f7fd ff8e 	bl	8004a60 <HAL_GetTick>
 8006b44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b46:	4b73      	ldr	r3, [pc, #460]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b4e:	d1c8      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fd ff86 	bl	8004a60 <HAL_GetTick>
 8006b54:	1b40      	subs	r0, r0, r5
 8006b56:	2864      	cmp	r0, #100	; 0x64
 8006b58:	d9f5      	bls.n	8006b46 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8006b5a:	2003      	movs	r0, #3
 8006b5c:	e28a      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b62:	d010      	beq.n	8006b86 <HAL_RCC_OscConfig+0x10a>
 8006b64:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006b68:	d01b      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x126>
 8006b6a:	4b6a      	ldr	r3, [pc, #424]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e7d9      	b.n	8006b3a <HAL_RCC_OscConfig+0xbe>
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	e7cb      	b.n	8006b3a <HAL_RCC_OscConfig+0xbe>
 8006ba2:	4b5c      	ldr	r3, [pc, #368]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e7bd      	b.n	8006b3a <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8006bbe:	f7fd ff4f 	bl	8004a60 <HAL_GetTick>
 8006bc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bc4:	4b53      	ldr	r3, [pc, #332]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006bcc:	d089      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bce:	f7fd ff47 	bl	8004a60 <HAL_GetTick>
 8006bd2:	1b40      	subs	r0, r0, r5
 8006bd4:	2864      	cmp	r0, #100	; 0x64
 8006bd6:	d9f5      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 8006bd8:	2003      	movs	r0, #3
 8006bda:	e24b      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bdc:	f012 0f03 	tst.w	r2, #3
 8006be0:	d18c      	bne.n	8006afc <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be2:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f013 0f04 	tst.w	r3, #4
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x178>
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 823b 	beq.w	800706a <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bf4:	4a47      	ldr	r2, [pc, #284]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	f023 0319 	bic.w	r3, r3, #25
 8006bfc:	68e1      	ldr	r1, [r4, #12]
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8006c02:	f7fd ff2d 	bl	8004a60 <HAL_GetTick>
 8006c06:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c08:	4b42      	ldr	r3, [pc, #264]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f013 0f04 	tst.w	r3, #4
 8006c10:	d106      	bne.n	8006c20 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c12:	f7fd ff25 	bl	8004a60 <HAL_GetTick>
 8006c16:	1b40      	subs	r0, r0, r5
 8006c18:	2802      	cmp	r0, #2
 8006c1a:	d9f5      	bls.n	8006c08 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8006c1c:	2003      	movs	r0, #3
 8006c1e:	e229      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c20:	4a3c      	ldr	r2, [pc, #240]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c22:	6853      	ldr	r3, [r2, #4]
 8006c24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c28:	6921      	ldr	r1, [r4, #16]
 8006c2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c2e:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	f013 0f10 	tst.w	r3, #16
 8006c36:	d051      	beq.n	8006cdc <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c38:	4a36      	ldr	r2, [pc, #216]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c3a:	6913      	ldr	r3, [r2, #16]
 8006c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c40:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d039      	beq.n	8006cba <HAL_RCC_OscConfig+0x23e>
 8006c46:	2b18      	cmp	r3, #24
 8006c48:	d033      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c4a:	69e3      	ldr	r3, [r4, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d06c      	beq.n	8006d2a <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c50:	4a30      	ldr	r2, [pc, #192]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c52:	6813      	ldr	r3, [r2, #0]
 8006c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5a:	f7fd ff01 	bl	8004a60 <HAL_GetTick>
 8006c5e:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c60:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c68:	d156      	bne.n	8006d18 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c6a:	f7fd fef9 	bl	8004a60 <HAL_GetTick>
 8006c6e:	1b40      	subs	r0, r0, r5
 8006c70:	2802      	cmp	r0, #2
 8006c72:	d9f5      	bls.n	8006c60 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 8006c74:	2003      	movs	r0, #3
 8006c76:	e1fd      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c78:	4a26      	ldr	r2, [pc, #152]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c7a:	6853      	ldr	r3, [r2, #4]
 8006c7c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c80:	6921      	ldr	r1, [r4, #16]
 8006c82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c86:	6053      	str	r3, [r2, #4]
 8006c88:	e7d2      	b.n	8006c30 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8006c8a:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c94:	f7fd fee4 	bl	8004a60 <HAL_GetTick>
 8006c98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c9a:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f013 0f04 	tst.w	r3, #4
 8006ca2:	d0c5      	beq.n	8006c30 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca4:	f7fd fedc 	bl	8004a60 <HAL_GetTick>
 8006ca8:	1b40      	subs	r0, r0, r5
 8006caa:	2802      	cmp	r0, #2
 8006cac:	d9f5      	bls.n	8006c9a <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8006cae:	2003      	movs	r0, #3
 8006cb0:	e1e0      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cb2:	f002 0203 	and.w	r2, r2, #3
 8006cb6:	2a01      	cmp	r2, #1
 8006cb8:	d1c7      	bne.n	8006c4a <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCC_OscConfig+0x250>
 8006cc4:	69e3      	ldr	r3, [r4, #28]
 8006cc6:	2b80      	cmp	r3, #128	; 0x80
 8006cc8:	f040 81d1 	bne.w	800706e <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ccc:	4a11      	ldr	r2, [pc, #68]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006cce:	68d3      	ldr	r3, [r2, #12]
 8006cd0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006cd4:	6a21      	ldr	r1, [r4, #32]
 8006cd6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006cda:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	f013 0f08 	tst.w	r3, #8
 8006ce2:	d04a      	beq.n	8006d7a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ce4:	6963      	ldr	r3, [r4, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d033      	beq.n	8006d52 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006cec:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fd feb4 	bl	8004a60 <HAL_GetTick>
 8006cf8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_RCC_OscConfig+0x298>)
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	f013 0f02 	tst.w	r3, #2
 8006d02:	d13a      	bne.n	8006d7a <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d04:	f7fd feac 	bl	8004a60 <HAL_GetTick>
 8006d08:	1b40      	subs	r0, r0, r5
 8006d0a:	2802      	cmp	r0, #2
 8006d0c:	d9f5      	bls.n	8006cfa <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8006d0e:	2003      	movs	r0, #3
 8006d10:	e1b0      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 8006d12:	bf00      	nop
 8006d14:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d18:	4a8c      	ldr	r2, [pc, #560]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d1a:	68d3      	ldr	r3, [r2, #12]
 8006d1c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d20:	6a21      	ldr	r1, [r4, #32]
 8006d22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d26:	60d3      	str	r3, [r2, #12]
 8006d28:	e7d8      	b.n	8006cdc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8006d2a:	4a88      	ldr	r2, [pc, #544]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006d34:	f7fd fe94 	bl	8004a60 <HAL_GetTick>
 8006d38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d3a:	4b84      	ldr	r3, [pc, #528]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d42:	d0cb      	beq.n	8006cdc <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d44:	f7fd fe8c 	bl	8004a60 <HAL_GetTick>
 8006d48:	1b40      	subs	r0, r0, r5
 8006d4a:	2802      	cmp	r0, #2
 8006d4c:	d9f5      	bls.n	8006d3a <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8006d4e:	2003      	movs	r0, #3
 8006d50:	e190      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d52:	4a7e      	ldr	r2, [pc, #504]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d54:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006d56:	f023 0301 	bic.w	r3, r3, #1
 8006d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7fd fe80 	bl	8004a60 <HAL_GetTick>
 8006d60:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d62:	4b7a      	ldr	r3, [pc, #488]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d66:	f013 0f02 	tst.w	r3, #2
 8006d6a:	d006      	beq.n	8006d7a <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d6c:	f7fd fe78 	bl	8004a60 <HAL_GetTick>
 8006d70:	1b40      	subs	r0, r0, r5
 8006d72:	2802      	cmp	r0, #2
 8006d74:	d9f5      	bls.n	8006d62 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 8006d76:	2003      	movs	r0, #3
 8006d78:	e17c      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	f013 0f20 	tst.w	r3, #32
 8006d80:	d029      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d82:	69a3      	ldr	r3, [r4, #24]
 8006d84:	b19b      	cbz	r3, 8006dae <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d86:	4a71      	ldr	r2, [pc, #452]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d90:	f7fd fe66 	bl	8004a60 <HAL_GetTick>
 8006d94:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d96:	4b6d      	ldr	r3, [pc, #436]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006d9e:	d11a      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006da0:	f7fd fe5e 	bl	8004a60 <HAL_GetTick>
 8006da4:	1b40      	subs	r0, r0, r5
 8006da6:	2802      	cmp	r0, #2
 8006da8:	d9f5      	bls.n	8006d96 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 8006daa:	2003      	movs	r0, #3
 8006dac:	e162      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dae:	4a67      	ldr	r2, [pc, #412]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006db0:	6813      	ldr	r3, [r2, #0]
 8006db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db8:	f7fd fe52 	bl	8004a60 <HAL_GetTick>
 8006dbc:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dbe:	4b63      	ldr	r3, [pc, #396]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006dc6:	d006      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dc8:	f7fd fe4a 	bl	8004a60 <HAL_GetTick>
 8006dcc:	1b40      	subs	r0, r0, r5
 8006dce:	2802      	cmp	r0, #2
 8006dd0:	d9f5      	bls.n	8006dbe <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 8006dd2:	2003      	movs	r0, #3
 8006dd4:	e14e      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f013 0f04 	tst.w	r3, #4
 8006ddc:	d122      	bne.n	8006e24 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8146 	beq.w	8007072 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006de6:	4a59      	ldr	r2, [pc, #356]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006de8:	6912      	ldr	r2, [r2, #16]
 8006dea:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006dee:	2a18      	cmp	r2, #24
 8006df0:	f000 810e 	beq.w	8007010 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	f000 8094 	beq.w	8006f22 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfa:	4a54      	ldr	r2, [pc, #336]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006dfc:	6813      	ldr	r3, [r2, #0]
 8006dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e04:	f7fd fe2c 	bl	8004a60 <HAL_GetTick>
 8006e08:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e0a:	4b50      	ldr	r3, [pc, #320]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e12:	f000 80fb 	beq.w	800700c <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fd fe23 	bl	8004a60 <HAL_GetTick>
 8006e1a:	1b00      	subs	r0, r0, r4
 8006e1c:	2802      	cmp	r0, #2
 8006e1e:	d9f4      	bls.n	8006e0a <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 8006e20:	2003      	movs	r0, #3
 8006e22:	e127      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 8006e24:	4a4a      	ldr	r2, [pc, #296]	; (8006f50 <HAL_RCC_OscConfig+0x4d4>)
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006e2e:	f7fd fe17 	bl	8004a60 <HAL_GetTick>
 8006e32:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e34:	4b46      	ldr	r3, [pc, #280]	; (8006f50 <HAL_RCC_OscConfig+0x4d4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e3e:	f7fd fe0f 	bl	8004a60 <HAL_GetTick>
 8006e42:	1b40      	subs	r0, r0, r5
 8006e44:	2864      	cmp	r0, #100	; 0x64
 8006e46:	d9f5      	bls.n	8006e34 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 8006e48:	2003      	movs	r0, #3
 8006e4a:	e113      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d00e      	beq.n	8006e70 <HAL_RCC_OscConfig+0x3f4>
 8006e52:	bb33      	cbnz	r3, 8006ea2 <HAL_RCC_OscConfig+0x426>
 8006e54:	4b3d      	ldr	r3, [pc, #244]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e58:	f022 0201 	bic.w	r2, r2, #1
 8006e5c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e64:	671a      	str	r2, [r3, #112]	; 0x70
 8006e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e68:	f022 0204 	bic.w	r2, r2, #4
 8006e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e6e:	e004      	b.n	8006e7a <HAL_RCC_OscConfig+0x3fe>
 8006e70:	4a36      	ldr	r2, [pc, #216]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006e72:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d03e      	beq.n	8006efe <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 8006e80:	f7fd fdee 	bl	8004a60 <HAL_GetTick>
 8006e84:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e86:	4b31      	ldr	r3, [pc, #196]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	f013 0f02 	tst.w	r3, #2
 8006e8e:	d1a6      	bne.n	8006dde <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fd fde6 	bl	8004a60 <HAL_GetTick>
 8006e94:	1b40      	subs	r0, r0, r5
 8006e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	d9f3      	bls.n	8006e86 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	e0e8      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d00f      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x44a>
 8006ea6:	2b85      	cmp	r3, #133	; 0x85
 8006ea8:	d01b      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x466>
 8006eaa:	4b28      	ldr	r3, [pc, #160]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	671a      	str	r2, [r3, #112]	; 0x70
 8006eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	671a      	str	r2, [r3, #112]	; 0x70
 8006ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec2:	671a      	str	r2, [r3, #112]	; 0x70
 8006ec4:	e7d9      	b.n	8006e7a <HAL_RCC_OscConfig+0x3fe>
 8006ec6:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eca:	f042 0204 	orr.w	r2, r2, #4
 8006ece:	671a      	str	r2, [r3, #112]	; 0x70
 8006ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed6:	671a      	str	r2, [r3, #112]	; 0x70
 8006ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	671a      	str	r2, [r3, #112]	; 0x70
 8006ee0:	e7cb      	b.n	8006e7a <HAL_RCC_OscConfig+0x3fe>
 8006ee2:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ee6:	f042 0204 	orr.w	r2, r2, #4
 8006eea:	671a      	str	r2, [r3, #112]	; 0x70
 8006eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef2:	671a      	str	r2, [r3, #112]	; 0x70
 8006ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	671a      	str	r2, [r3, #112]	; 0x70
 8006efc:	e7bd      	b.n	8006e7a <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8006efe:	f7fd fdaf 	bl	8004a60 <HAL_GetTick>
 8006f02:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f04:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	f013 0f02 	tst.w	r3, #2
 8006f0c:	f43f af67 	beq.w	8006dde <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f10:	f7fd fda6 	bl	8004a60 <HAL_GetTick>
 8006f14:	1b40      	subs	r0, r0, r5
 8006f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f1a:	4298      	cmp	r0, r3
 8006f1c:	d9f2      	bls.n	8006f04 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8006f1e:	2003      	movs	r0, #3
 8006f20:	e0a8      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 8006f22:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f2c:	f7fd fd98 	bl	8004a60 <HAL_GetTick>
 8006f30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_OscConfig+0x4d0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006f3a:	d00b      	beq.n	8006f54 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f3c:	f7fd fd90 	bl	8004a60 <HAL_GetTick>
 8006f40:	1b40      	subs	r0, r0, r5
 8006f42:	2802      	cmp	r0, #2
 8006f44:	d9f5      	bls.n	8006f32 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 8006f46:	2003      	movs	r0, #3
 8006f48:	e094      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f54:	4b4f      	ldr	r3, [pc, #316]	; (8007094 <HAL_RCC_OscConfig+0x618>)
 8006f56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006f58:	4a4f      	ldr	r2, [pc, #316]	; (8007098 <HAL_RCC_OscConfig+0x61c>)
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006f5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f60:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006f64:	430a      	orrs	r2, r1
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
 8006f68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f72:	3901      	subs	r1, #1
 8006f74:	0249      	lsls	r1, r1, #9
 8006f76:	b289      	uxth	r1, r1
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f7c:	3901      	subs	r1, #1
 8006f7e:	0409      	lsls	r1, r1, #16
 8006f80:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006f84:	430a      	orrs	r2, r1
 8006f86:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f88:	3901      	subs	r1, #1
 8006f8a:	0609      	lsls	r1, r1, #24
 8006f8c:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006f90:	430a      	orrs	r2, r1
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f9e:	4a3f      	ldr	r2, [pc, #252]	; (800709c <HAL_RCC_OscConfig+0x620>)
 8006fa0:	400a      	ands	r2, r1
 8006fa2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fa4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006fa8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	f022 020c 	bic.w	r2, r2, #12
 8006fb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	f022 0202 	bic.w	r2, r2, #2
 8006fbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fc8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006fd0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006fd8:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006fe8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fea:	f7fd fd39 	bl	8004a60 <HAL_GetTick>
 8006fee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ff0:	4b28      	ldr	r3, [pc, #160]	; (8007094 <HAL_RCC_OscConfig+0x618>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006ff8:	d106      	bne.n	8007008 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ffa:	f7fd fd31 	bl	8004a60 <HAL_GetTick>
 8006ffe:	1b00      	subs	r0, r0, r4
 8007000:	2802      	cmp	r0, #2
 8007002:	d9f5      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8007004:	2003      	movs	r0, #3
 8007006:	e035      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007008:	2000      	movs	r0, #0
 800700a:	e033      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 800700c:	2000      	movs	r0, #0
 800700e:	e031      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007010:	4920      	ldr	r1, [pc, #128]	; (8007094 <HAL_RCC_OscConfig+0x618>)
 8007012:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007014:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007016:	2b01      	cmp	r3, #1
 8007018:	d02d      	beq.n	8007076 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	f002 0303 	and.w	r3, r2, #3
 800701e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007020:	428b      	cmp	r3, r1
 8007022:	d12a      	bne.n	800707a <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007024:	f3c2 1205 	ubfx	r2, r2, #4, #6
 8007028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d127      	bne.n	800707e <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800702e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007034:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007036:	429a      	cmp	r2, r3
 8007038:	d123      	bne.n	8007082 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800703a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800703e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007040:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d11f      	bne.n	8007086 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007046:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800704a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800704c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800704e:	429a      	cmp	r2, r3
 8007050:	d11b      	bne.n	800708a <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007052:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007058:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800705a:	4298      	cmp	r0, r3
 800705c:	d117      	bne.n	800708e <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800705e:	2000      	movs	r0, #0
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 8007062:	2001      	movs	r0, #1
}
 8007064:	4770      	bx	lr
        return HAL_ERROR;
 8007066:	2001      	movs	r0, #1
 8007068:	e004      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800706a:	2001      	movs	r0, #1
 800706c:	e002      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800706e:	2001      	movs	r0, #1
 8007070:	e000      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 8007072:	2000      	movs	r0, #0
}
 8007074:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8007076:	2001      	movs	r0, #1
 8007078:	e7fc      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 800707a:	2001      	movs	r0, #1
 800707c:	e7fa      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 800707e:	2001      	movs	r0, #1
 8007080:	e7f8      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 8007082:	2001      	movs	r0, #1
 8007084:	e7f6      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 8007086:	2001      	movs	r0, #1
 8007088:	e7f4      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 800708a:	2001      	movs	r0, #1
 800708c:	e7f2      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 800708e:	2001      	movs	r0, #1
 8007090:	e7f0      	b.n	8007074 <HAL_RCC_OscConfig+0x5f8>
 8007092:	bf00      	nop
 8007094:	58024400 	.word	0x58024400
 8007098:	fffffc0c 	.word	0xfffffc0c
 800709c:	ffff0007 	.word	0xffff0007

080070a0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a0:	4b74      	ldr	r3, [pc, #464]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	f000 80de 	beq.w	800726a <HAL_RCC_GetSysClockFreq+0x1ca>
 80070ae:	2b18      	cmp	r3, #24
 80070b0:	d010      	beq.n	80070d4 <HAL_RCC_GetSysClockFreq+0x34>
 80070b2:	b10b      	cbz	r3, 80070b8 <HAL_RCC_GetSysClockFreq+0x18>
 80070b4:	4870      	ldr	r0, [pc, #448]	; (8007278 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80070b6:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b8:	4b6e      	ldr	r3, [pc, #440]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f013 0f20 	tst.w	r3, #32
 80070c0:	f000 80d5 	beq.w	800726e <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070c4:	4b6b      	ldr	r3, [pc, #428]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80070cc:	4b6b      	ldr	r3, [pc, #428]	; (800727c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80070ce:	fa23 f000 	lsr.w	r0, r3, r0
 80070d2:	4770      	bx	lr
{
 80070d4:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d6:	4a67      	ldr	r2, [pc, #412]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80070d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070da:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070de:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80070e0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80070e6:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80070ec:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80070f0:	fb0c f303 	mul.w	r3, ip, r3
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80070fc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8007100:	f000 8093 	beq.w	800722a <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8007104:	2901      	cmp	r1, #1
 8007106:	d065      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x134>
 8007108:	2902      	cmp	r1, #2
 800710a:	f000 8091 	beq.w	8007230 <HAL_RCC_GetSysClockFreq+0x190>
 800710e:	b1e1      	cbz	r1, 800714a <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007110:	ee07 0a10 	vmov	s14, r0
 8007114:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007118:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e0>
 800711c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007120:	4b54      	ldr	r3, [pc, #336]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	ee06 3a90 	vmov	s13, r3
 800712c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007130:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007134:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007144:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007148:	e060      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714a:	6813      	ldr	r3, [r2, #0]
 800714c:	f013 0f20 	tst.w	r3, #32
 8007150:	d023      	beq.n	800719a <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007152:	4611      	mov	r1, r2
 8007154:	6812      	ldr	r2, [r2, #0]
 8007156:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800715a:	4b48      	ldr	r3, [pc, #288]	; (800727c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800715c:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800715e:	ee07 3a10 	vmov	s14, r3
 8007162:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007166:	ee07 0a10 	vmov	s14, r0
 800716a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800716e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007172:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007178:	ee06 3a90 	vmov	s13, r3
 800717c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007180:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007184:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007198:	e038      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719a:	ee07 0a10 	vmov	s14, r0
 800719e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071a2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8007288 <HAL_RCC_GetSysClockFreq+0x1e8>
 80071a6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071aa:	4b32      	ldr	r3, [pc, #200]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee06 3a90 	vmov	s13, r3
 80071b6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071ba:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071d2:	e01b      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d4:	ee07 0a10 	vmov	s14, r0
 80071d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071dc:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8007280 <HAL_RCC_GetSysClockFreq+0x1e0>
 80071e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071e4:	4b23      	ldr	r3, [pc, #140]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	ee06 3a90 	vmov	s13, r3
 80071f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071f4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e4>
 80071f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007208:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800720c:	4b19      	ldr	r3, [pc, #100]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007214:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007222:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007226:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800722a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800722e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007230:	ee07 0a10 	vmov	s14, r0
 8007234:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007238:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800728c <HAL_RCC_GetSysClockFreq+0x1ec>
 800723c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee06 3a90 	vmov	s13, r3
 800724c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007250:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8007284 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007254:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007264:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007268:	e7d0      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800726a:	4809      	ldr	r0, [pc, #36]	; (8007290 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800726c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800726e:	4803      	ldr	r0, [pc, #12]	; (800727c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
 8007278:	003d0900 	.word	0x003d0900
 800727c:	03d09000 	.word	0x03d09000
 8007280:	4a742400 	.word	0x4a742400
 8007284:	39000000 	.word	0x39000000
 8007288:	4c742400 	.word	0x4c742400
 800728c:	4bb71b00 	.word	0x4bb71b00
 8007290:	016e3600 	.word	0x016e3600

08007294 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007294:	2800      	cmp	r0, #0
 8007296:	f000 8132 	beq.w	80074fe <HAL_RCC_ClockConfig+0x26a>
{
 800729a:	b570      	push	{r4, r5, r6, lr}
 800729c:	460d      	mov	r5, r1
 800729e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072a0:	4b9b      	ldr	r3, [pc, #620]	; (8007510 <HAL_RCC_ClockConfig+0x27c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	428b      	cmp	r3, r1
 80072aa:	d20b      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ac:	4a98      	ldr	r2, [pc, #608]	; (8007510 <HAL_RCC_ClockConfig+0x27c>)
 80072ae:	6813      	ldr	r3, [r2, #0]
 80072b0:	f023 030f 	bic.w	r3, r3, #15
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b8:	6813      	ldr	r3, [r2, #0]
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	428b      	cmp	r3, r1
 80072c0:	f040 811f 	bne.w	8007502 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	f013 0f04 	tst.w	r3, #4
 80072ca:	d00c      	beq.n	80072e6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	4b91      	ldr	r3, [pc, #580]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d905      	bls.n	80072e6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072da:	498e      	ldr	r1, [pc, #568]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80072dc:	698b      	ldr	r3, [r1, #24]
 80072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e2:	431a      	orrs	r2, r3
 80072e4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	f013 0f08 	tst.w	r3, #8
 80072ec:	d00c      	beq.n	8007308 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80072ee:	6962      	ldr	r2, [r4, #20]
 80072f0:	4b88      	ldr	r3, [pc, #544]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d905      	bls.n	8007308 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072fc:	4985      	ldr	r1, [pc, #532]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80072fe:	69cb      	ldr	r3, [r1, #28]
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	431a      	orrs	r2, r3
 8007306:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	f013 0f10 	tst.w	r3, #16
 800730e:	d00c      	beq.n	800732a <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007310:	69a2      	ldr	r2, [r4, #24]
 8007312:	4b80      	ldr	r3, [pc, #512]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800731a:	429a      	cmp	r2, r3
 800731c:	d905      	bls.n	800732a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800731e:	497d      	ldr	r1, [pc, #500]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007320:	69cb      	ldr	r3, [r1, #28]
 8007322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007326:	431a      	orrs	r2, r3
 8007328:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f013 0f20 	tst.w	r3, #32
 8007330:	d00c      	beq.n	800734c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007332:	69e2      	ldr	r2, [r4, #28]
 8007334:	4b77      	ldr	r3, [pc, #476]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733c:	429a      	cmp	r2, r3
 800733e:	d905      	bls.n	800734c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007340:	4974      	ldr	r1, [pc, #464]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007342:	6a0b      	ldr	r3, [r1, #32]
 8007344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007348:	431a      	orrs	r2, r3
 800734a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	f013 0f02 	tst.w	r3, #2
 8007352:	d00c      	beq.n	800736e <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007354:	68e2      	ldr	r2, [r4, #12]
 8007356:	4b6f      	ldr	r3, [pc, #444]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	429a      	cmp	r2, r3
 8007360:	d905      	bls.n	800736e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007362:	496c      	ldr	r1, [pc, #432]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007364:	698b      	ldr	r3, [r1, #24]
 8007366:	f023 030f 	bic.w	r3, r3, #15
 800736a:	431a      	orrs	r2, r3
 800736c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f013 0f01 	tst.w	r3, #1
 8007374:	d041      	beq.n	80073fa <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007376:	4a67      	ldr	r2, [pc, #412]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007378:	6993      	ldr	r3, [r2, #24]
 800737a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800737e:	68a1      	ldr	r1, [r4, #8]
 8007380:	430b      	orrs	r3, r1
 8007382:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d00a      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800738a:	2b03      	cmp	r3, #3
 800738c:	d027      	beq.n	80073de <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800738e:	2b01      	cmp	r3, #1
 8007390:	d02c      	beq.n	80073ec <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007392:	4a60      	ldr	r2, [pc, #384]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	f012 0f04 	tst.w	r2, #4
 800739a:	d106      	bne.n	80073aa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800739c:	2001      	movs	r0, #1
 800739e:	e0ad      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80073a6:	f000 80ae 	beq.w	8007506 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073aa:	495a      	ldr	r1, [pc, #360]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80073ac:	690a      	ldr	r2, [r1, #16]
 80073ae:	f022 0207 	bic.w	r2, r2, #7
 80073b2:	4313      	orrs	r3, r2
 80073b4:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80073b6:	f7fd fb53 	bl	8004a60 <HAL_GetTick>
 80073ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073bc:	4b55      	ldr	r3, [pc, #340]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c4:	6862      	ldr	r2, [r4, #4]
 80073c6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80073ca:	d016      	beq.n	80073fa <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fd fb48 	bl	8004a60 <HAL_GetTick>
 80073d0:	1b80      	subs	r0, r0, r6
 80073d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d6:	4298      	cmp	r0, r3
 80073d8:	d9f0      	bls.n	80073bc <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80073da:	2003      	movs	r0, #3
 80073dc:	e08e      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073de:	4a4d      	ldr	r2, [pc, #308]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80073e6:	d1e0      	bne.n	80073aa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073e8:	2001      	movs	r0, #1
 80073ea:	e087      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073ec:	4a49      	ldr	r2, [pc, #292]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80073f4:	d1d9      	bne.n	80073aa <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80073f6:	2001      	movs	r0, #1
 80073f8:	e080      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	f013 0f02 	tst.w	r3, #2
 8007400:	d00c      	beq.n	800741c <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007402:	68e2      	ldr	r2, [r4, #12]
 8007404:	4b43      	ldr	r3, [pc, #268]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	429a      	cmp	r2, r3
 800740e:	d205      	bcs.n	800741c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007410:	4940      	ldr	r1, [pc, #256]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007412:	698b      	ldr	r3, [r1, #24]
 8007414:	f023 030f 	bic.w	r3, r3, #15
 8007418:	431a      	orrs	r2, r3
 800741a:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800741c:	4b3c      	ldr	r3, [pc, #240]	; (8007510 <HAL_RCC_ClockConfig+0x27c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	42ab      	cmp	r3, r5
 8007426:	d90a      	bls.n	800743e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007428:	4a39      	ldr	r2, [pc, #228]	; (8007510 <HAL_RCC_ClockConfig+0x27c>)
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	f023 030f 	bic.w	r3, r3, #15
 8007430:	432b      	orrs	r3, r5
 8007432:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007434:	6813      	ldr	r3, [r2, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	42ab      	cmp	r3, r5
 800743c:	d165      	bne.n	800750a <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	f013 0f04 	tst.w	r3, #4
 8007444:	d00c      	beq.n	8007460 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007446:	6922      	ldr	r2, [r4, #16]
 8007448:	4b32      	ldr	r3, [pc, #200]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007450:	429a      	cmp	r2, r3
 8007452:	d205      	bcs.n	8007460 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007454:	492f      	ldr	r1, [pc, #188]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007456:	698b      	ldr	r3, [r1, #24]
 8007458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745c:	431a      	orrs	r2, r3
 800745e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	f013 0f08 	tst.w	r3, #8
 8007466:	d00c      	beq.n	8007482 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007468:	6962      	ldr	r2, [r4, #20]
 800746a:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007472:	429a      	cmp	r2, r3
 8007474:	d205      	bcs.n	8007482 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007476:	4927      	ldr	r1, [pc, #156]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 8007478:	69cb      	ldr	r3, [r1, #28]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	431a      	orrs	r2, r3
 8007480:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	f013 0f10 	tst.w	r3, #16
 8007488:	d00c      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800748a:	69a2      	ldr	r2, [r4, #24]
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007494:	429a      	cmp	r2, r3
 8007496:	d205      	bcs.n	80074a4 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007498:	491e      	ldr	r1, [pc, #120]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 800749a:	69cb      	ldr	r3, [r1, #28]
 800749c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80074a0:	431a      	orrs	r2, r3
 80074a2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	f013 0f20 	tst.w	r3, #32
 80074aa:	d00c      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80074ac:	69e2      	ldr	r2, [r4, #28]
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d205      	bcs.n	80074c6 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074ba:	4916      	ldr	r1, [pc, #88]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80074bc:	6a0b      	ldr	r3, [r1, #32]
 80074be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c2:	431a      	orrs	r2, r3
 80074c4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80074c6:	f7ff fdeb 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 80074ca:	4912      	ldr	r1, [pc, #72]	; (8007514 <HAL_RCC_ClockConfig+0x280>)
 80074cc:	698b      	ldr	r3, [r1, #24]
 80074ce:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <HAL_RCC_ClockConfig+0x284>)
 80074d4:	5cd3      	ldrb	r3, [r2, r3]
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80074dc:	698b      	ldr	r3, [r1, #24]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	5cd3      	ldrb	r3, [r2, r3]
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	fa20 f303 	lsr.w	r3, r0, r3
 80074ec:	4a0b      	ldr	r2, [pc, #44]	; (800751c <HAL_RCC_ClockConfig+0x288>)
 80074ee:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_ClockConfig+0x28c>)
 80074f2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_RCC_ClockConfig+0x290>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	f7fa fe22 	bl	8002140 <HAL_InitTick>
}
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074fe:	2001      	movs	r0, #1
}
 8007500:	4770      	bx	lr
      return HAL_ERROR;
 8007502:	2001      	movs	r0, #1
 8007504:	e7fa      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8007506:	2001      	movs	r0, #1
 8007508:	e7f8      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800750a:	2001      	movs	r0, #1
 800750c:	e7f6      	b.n	80074fc <HAL_RCC_ClockConfig+0x268>
 800750e:	bf00      	nop
 8007510:	52002000 	.word	0x52002000
 8007514:	58024400 	.word	0x58024400
 8007518:	08019fc4 	.word	0x08019fc4
 800751c:	24000040 	.word	0x24000040
 8007520:	2400003c 	.word	0x2400003c
 8007524:	24000048 	.word	0x24000048

08007528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007528:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800752a:	f7ff fdb9 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800752e:	4a0b      	ldr	r2, [pc, #44]	; (800755c <HAL_RCC_GetHCLKFreq+0x34>)
 8007530:	6993      	ldr	r3, [r2, #24]
 8007532:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007536:	490a      	ldr	r1, [pc, #40]	; (8007560 <HAL_RCC_GetHCLKFreq+0x38>)
 8007538:	5ccb      	ldrb	r3, [r1, r3]
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007542:	6992      	ldr	r2, [r2, #24]
 8007544:	f002 020f 	and.w	r2, r2, #15
 8007548:	5c88      	ldrb	r0, [r1, r2]
 800754a:	f000 001f 	and.w	r0, r0, #31
 800754e:	fa23 f000 	lsr.w	r0, r3, r0
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007554:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007556:	4a04      	ldr	r2, [pc, #16]	; (8007568 <HAL_RCC_GetHCLKFreq+0x40>)
 8007558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800755a:	bd08      	pop	{r3, pc}
 800755c:	58024400 	.word	0x58024400
 8007560:	08019fc4 	.word	0x08019fc4
 8007564:	24000040 	.word	0x24000040
 8007568:	2400003c 	.word	0x2400003c

0800756c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800756c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800756e:	f7ff ffdb 	bl	8007528 <HAL_RCC_GetHCLKFreq>
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800757a:	4a04      	ldr	r2, [pc, #16]	; (800758c <HAL_RCC_GetPCLK1Freq+0x20>)
 800757c:	5cd3      	ldrb	r3, [r2, r3]
 800757e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8007582:	40d8      	lsrs	r0, r3
 8007584:	bd08      	pop	{r3, pc}
 8007586:	bf00      	nop
 8007588:	58024400 	.word	0x58024400
 800758c:	08019fc4 	.word	0x08019fc4

08007590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007590:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007592:	f7ff ffc9 	bl	8007528 <HAL_RCC_GetHCLKFreq>
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800759e:	4a04      	ldr	r2, [pc, #16]	; (80075b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a0:	5cd3      	ldrb	r3, [r2, r3]
 80075a2:	f003 031f 	and.w	r3, r3, #31
#endif
}
 80075a6:	40d8      	lsrs	r0, r3
 80075a8:	bd08      	pop	{r3, pc}
 80075aa:	bf00      	nop
 80075ac:	58024400 	.word	0x58024400
 80075b0:	08019fc4 	.word	0x08019fc4

080075b4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80075b4:	233f      	movs	r3, #63	; 0x3f
 80075b6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075b8:	4b11      	ldr	r3, [pc, #68]	; (8007600 <HAL_RCC_GetClockConfig+0x4c>)
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	f002 0207 	and.w	r2, r2, #7
 80075c0:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80075c8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	f002 020f 	and.w	r2, r2, #15
 80075d0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075d8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075e0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075e8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f0:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075f2:	4b04      	ldr	r3, [pc, #16]	; (8007604 <HAL_RCC_GetClockConfig+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	600b      	str	r3, [r1, #0]
}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400
 8007604:	52002000 	.word	0x52002000

08007608 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007608:	4b40      	ldr	r3, [pc, #256]	; (800770c <RCCEx_PLL2_Config+0x104>)
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	f003 0303 	and.w	r3, r3, #3
 8007610:	2b03      	cmp	r3, #3
 8007612:	d079      	beq.n	8007708 <RCCEx_PLL2_Config+0x100>
{
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	4605      	mov	r5, r0
 8007618:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800761a:	4a3c      	ldr	r2, [pc, #240]	; (800770c <RCCEx_PLL2_Config+0x104>)
 800761c:	6813      	ldr	r3, [r2, #0]
 800761e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007624:	f7fd fa1c 	bl	8004a60 <HAL_GetTick>
 8007628:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800762a:	4b38      	ldr	r3, [pc, #224]	; (800770c <RCCEx_PLL2_Config+0x104>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007632:	d006      	beq.n	8007642 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007634:	f7fd fa14 	bl	8004a60 <HAL_GetTick>
 8007638:	1b03      	subs	r3, r0, r4
 800763a:	2b02      	cmp	r3, #2
 800763c:	d9f5      	bls.n	800762a <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800763e:	2003      	movs	r0, #3

  }


  return status;
}
 8007640:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <RCCEx_PLL2_Config+0x104>)
 8007644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007646:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800764a:	6829      	ldr	r1, [r5, #0]
 800764c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007650:	629a      	str	r2, [r3, #40]	; 0x28
 8007652:	686a      	ldr	r2, [r5, #4]
 8007654:	3a01      	subs	r2, #1
 8007656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800765a:	68a9      	ldr	r1, [r5, #8]
 800765c:	3901      	subs	r1, #1
 800765e:	0249      	lsls	r1, r1, #9
 8007660:	b289      	uxth	r1, r1
 8007662:	430a      	orrs	r2, r1
 8007664:	68e9      	ldr	r1, [r5, #12]
 8007666:	3901      	subs	r1, #1
 8007668:	0409      	lsls	r1, r1, #16
 800766a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800766e:	430a      	orrs	r2, r1
 8007670:	6929      	ldr	r1, [r5, #16]
 8007672:	3901      	subs	r1, #1
 8007674:	0609      	lsls	r1, r1, #24
 8007676:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800767a:	430a      	orrs	r2, r1
 800767c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007680:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007684:	6969      	ldr	r1, [r5, #20]
 8007686:	430a      	orrs	r2, r1
 8007688:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	f022 0220 	bic.w	r2, r2, #32
 8007690:	69a9      	ldr	r1, [r5, #24]
 8007692:	430a      	orrs	r2, r1
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	f022 0210 	bic.w	r2, r2, #16
 800769c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800769e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <RCCEx_PLL2_Config+0x108>)
 80076a2:	400a      	ands	r2, r1
 80076a4:	69e9      	ldr	r1, [r5, #28]
 80076a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80076aa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	f042 0210 	orr.w	r2, r2, #16
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80076b4:	b9c6      	cbnz	r6, 80076e8 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b6:	461a      	mov	r2, r3
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80076c0:	4a12      	ldr	r2, [pc, #72]	; (800770c <RCCEx_PLL2_Config+0x104>)
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80076ca:	f7fd f9c9 	bl	8004a60 <HAL_GetTick>
 80076ce:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076d0:	4b0e      	ldr	r3, [pc, #56]	; (800770c <RCCEx_PLL2_Config+0x104>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80076d8:	d114      	bne.n	8007704 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076da:	f7fd f9c1 	bl	8004a60 <HAL_GetTick>
 80076de:	1b00      	subs	r0, r0, r4
 80076e0:	2802      	cmp	r0, #2
 80076e2:	d9f5      	bls.n	80076d0 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80076e4:	2003      	movs	r0, #3
 80076e6:	e7ab      	b.n	8007640 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e8:	2e01      	cmp	r6, #1
 80076ea:	d005      	beq.n	80076f8 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076ec:	4a07      	ldr	r2, [pc, #28]	; (800770c <RCCEx_PLL2_Config+0x104>)
 80076ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f6:	e7e3      	b.n	80076c0 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <RCCEx_PLL2_Config+0x104>)
 80076fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007702:	e7dd      	b.n	80076c0 <RCCEx_PLL2_Config+0xb8>
  return status;
 8007704:	2000      	movs	r0, #0
 8007706:	e79b      	b.n	8007640 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007708:	2001      	movs	r0, #1
}
 800770a:	4770      	bx	lr
 800770c:	58024400 	.word	0x58024400
 8007710:	ffff0007 	.word	0xffff0007

08007714 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007714:	4b40      	ldr	r3, [pc, #256]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d079      	beq.n	8007814 <RCCEx_PLL3_Config+0x100>
{
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007726:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007730:	f7fd f996 	bl	8004a60 <HAL_GetTick>
 8007734:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007736:	4b38      	ldr	r3, [pc, #224]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800773e:	d006      	beq.n	800774e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007740:	f7fd f98e 	bl	8004a60 <HAL_GetTick>
 8007744:	1b03      	subs	r3, r0, r4
 8007746:	2b02      	cmp	r3, #2
 8007748:	d9f5      	bls.n	8007736 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800774a:	2003      	movs	r0, #3

  }


  return status;
}
 800774c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800774e:	4b32      	ldr	r3, [pc, #200]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 8007750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007752:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007756:	6829      	ldr	r1, [r5, #0]
 8007758:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800775c:	629a      	str	r2, [r3, #40]	; 0x28
 800775e:	686a      	ldr	r2, [r5, #4]
 8007760:	3a01      	subs	r2, #1
 8007762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007766:	68a9      	ldr	r1, [r5, #8]
 8007768:	3901      	subs	r1, #1
 800776a:	0249      	lsls	r1, r1, #9
 800776c:	b289      	uxth	r1, r1
 800776e:	430a      	orrs	r2, r1
 8007770:	68e9      	ldr	r1, [r5, #12]
 8007772:	3901      	subs	r1, #1
 8007774:	0409      	lsls	r1, r1, #16
 8007776:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800777a:	430a      	orrs	r2, r1
 800777c:	6929      	ldr	r1, [r5, #16]
 800777e:	3901      	subs	r1, #1
 8007780:	0609      	lsls	r1, r1, #24
 8007782:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007786:	430a      	orrs	r2, r1
 8007788:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007790:	6969      	ldr	r1, [r5, #20]
 8007792:	430a      	orrs	r2, r1
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800779c:	69a9      	ldr	r1, [r5, #24]
 800779e:	430a      	orrs	r2, r1
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077a8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80077ac:	4a1b      	ldr	r2, [pc, #108]	; (800781c <RCCEx_PLL3_Config+0x108>)
 80077ae:	400a      	ands	r2, r1
 80077b0:	69e9      	ldr	r1, [r5, #28]
 80077b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80077c0:	b9c6      	cbnz	r6, 80077f4 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077c2:	461a      	mov	r2, r3
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80077cc:	4a12      	ldr	r2, [pc, #72]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80077d6:	f7fd f943 	bl	8004a60 <HAL_GetTick>
 80077da:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077dc:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80077e4:	d114      	bne.n	8007810 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077e6:	f7fd f93b 	bl	8004a60 <HAL_GetTick>
 80077ea:	1b00      	subs	r0, r0, r4
 80077ec:	2802      	cmp	r0, #2
 80077ee:	d9f5      	bls.n	80077dc <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80077f0:	2003      	movs	r0, #3
 80077f2:	e7ab      	b.n	800774c <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80077f4:	2e01      	cmp	r6, #1
 80077f6:	d005      	beq.n	8007804 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077f8:	4a07      	ldr	r2, [pc, #28]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 80077fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007802:	e7e3      	b.n	80077cc <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007804:	4a04      	ldr	r2, [pc, #16]	; (8007818 <RCCEx_PLL3_Config+0x104>)
 8007806:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800780c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780e:	e7dd      	b.n	80077cc <RCCEx_PLL3_Config+0xb8>
  return status;
 8007810:	2000      	movs	r0, #0
 8007812:	e79b      	b.n	800774c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007814:	2001      	movs	r0, #1
}
 8007816:	4770      	bx	lr
 8007818:	58024400 	.word	0x58024400
 800781c:	ffff0007 	.word	0xffff0007

08007820 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007824:	6803      	ldr	r3, [r0, #0]
 8007826:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800782a:	d030      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800782c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800782e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007832:	d026      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007834:	d80e      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007836:	b1eb      	cbz	r3, 8007874 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783c:	d107      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800783e:	2102      	movs	r1, #2
 8007840:	3004      	adds	r0, #4
 8007842:	f7ff fee1 	bl	8007608 <RCCEx_PLL2_Config>
 8007846:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007848:	b145      	cbz	r5, 800785c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800784a:	462e      	mov	r6, r5
 800784c:	e021      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800784e:	2601      	movs	r6, #1
 8007850:	4635      	mov	r5, r6
 8007852:	e01e      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007858:	d109      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800785a:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800785c:	4a99      	ldr	r2, [pc, #612]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800785e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007860:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007864:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007866:	430b      	orrs	r3, r1
 8007868:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800786a:	2600      	movs	r6, #0
 800786c:	e011      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800786e:	2601      	movs	r6, #1
 8007870:	4635      	mov	r5, r6
 8007872:	e00e      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007874:	4a93      	ldr	r2, [pc, #588]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007876:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787c:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800787e:	2500      	movs	r5, #0
 8007880:	e7ec      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007882:	2102      	movs	r1, #2
 8007884:	3024      	adds	r0, #36	; 0x24
 8007886:	f7ff ff45 	bl	8007714 <RCCEx_PLL3_Config>
 800788a:	4605      	mov	r5, r0
      break;
 800788c:	e7dc      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800788e:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007890:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007898:	d026      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800789a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800789c:	2b04      	cmp	r3, #4
 800789e:	d81f      	bhi.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80078a0:	e8df f003 	tbb	[pc, r3]
 80078a4:	08171103 	.word	0x08171103
 80078a8:	08          	.byte	0x08
 80078a9:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078aa:	4a86      	ldr	r2, [pc, #536]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80078ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80078ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80078b4:	b9bd      	cbnz	r5, 80078e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078b6:	4a83      	ldr	r2, [pc, #524]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80078b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6513      	str	r3, [r2, #80]	; 0x50
 80078c4:	e010      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078c6:	2100      	movs	r1, #0
 80078c8:	1d20      	adds	r0, r4, #4
 80078ca:	f7ff fe9d 	bl	8007608 <RCCEx_PLL2_Config>
 80078ce:	4605      	mov	r5, r0
      break;
 80078d0:	e7f0      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078d2:	2100      	movs	r1, #0
 80078d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078d8:	f7ff ff1c 	bl	8007714 <RCCEx_PLL3_Config>
 80078dc:	4605      	mov	r5, r0
      break;
 80078de:	e7e9      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80078e0:	2601      	movs	r6, #1
 80078e2:	4635      	mov	r5, r6
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80078e6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 80078ee:	d01d      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 80078f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d039      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80078f6:	d80b      	bhi.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 80078f8:	b38b      	cbz	r3, 800795e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d105      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078fe:	2100      	movs	r1, #0
 8007900:	1d20      	adds	r0, r4, #4
 8007902:	f7ff fe81 	bl	8007608 <RCCEx_PLL2_Config>
 8007906:	4605      	mov	r5, r0
      break;
 8007908:	e008      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800790a:	2601      	movs	r6, #1
 800790c:	4635      	mov	r5, r6
 800790e:	e00d      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007914:	d002      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007916:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800791a:	d11b      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800791c:	bb65      	cbnz	r5, 8007978 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007920:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007922:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007926:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007928:	430b      	orrs	r3, r1
 800792a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007932:	d035      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007934:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793a:	d057      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800793c:	d821      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d04e      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d119      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007948:	2100      	movs	r1, #0
 800794a:	1d20      	adds	r0, r4, #4
 800794c:	f7ff fe5c 	bl	8007608 <RCCEx_PLL2_Config>
 8007950:	4605      	mov	r5, r0
      break;
 8007952:	e01c      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007954:	2bc0      	cmp	r3, #192	; 0xc0
 8007956:	d0e1      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007958:	2601      	movs	r6, #1
 800795a:	4635      	mov	r5, r6
 800795c:	e7e6      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795e:	4a59      	ldr	r2, [pc, #356]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007960:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007966:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007968:	e7d8      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800796a:	2100      	movs	r1, #0
 800796c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007970:	f7ff fed0 	bl	8007714 <RCCEx_PLL3_Config>
 8007974:	4605      	mov	r5, r0
      break;
 8007976:	e7d1      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007978:	462e      	mov	r6, r5
 800797a:	e7d7      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800797c:	2601      	movs	r6, #1
 800797e:	4635      	mov	r5, r6
 8007980:	e00e      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007986:	d002      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007988:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800798c:	d122      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800798e:	2d00      	cmp	r5, #0
 8007990:	d133      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007992:	4a4c      	ldr	r2, [pc, #304]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007994:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007996:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800799a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800799c:	430b      	orrs	r3, r1
 800799e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079a6:	d031      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 80079a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d041      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80079ae:	d829      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80079b0:	b133      	cbz	r3, 80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d123      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b6:	4a43      	ldr	r2, [pc, #268]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079be:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	d13c      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80079c4:	4a3f      	ldr	r2, [pc, #252]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80079c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80079cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079ce:	430b      	orrs	r3, r1
 80079d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079d2:	e01b      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 80079d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079d8:	d0d9      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079da:	2601      	movs	r6, #1
 80079dc:	4635      	mov	r5, r6
 80079de:	e7df      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4a38      	ldr	r2, [pc, #224]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80079ea:	e7d0      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079ec:	2100      	movs	r1, #0
 80079ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079f2:	f7ff fe8f 	bl	8007714 <RCCEx_PLL3_Config>
 80079f6:	4605      	mov	r5, r0
      break;
 80079f8:	e7c9      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80079fa:	462e      	mov	r6, r5
 80079fc:	e7d0      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 80079fe:	2601      	movs	r6, #1
 8007a00:	4635      	mov	r5, r6
 8007a02:	e003      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d0db      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007a08:	2601      	movs	r6, #1
 8007a0a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007a12:	d039      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a14:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1a:	d02d      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007a1c:	d814      	bhi.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007a1e:	b32b      	cbz	r3, 8007a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a24:	d10d      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a26:	2100      	movs	r1, #0
 8007a28:	1d20      	adds	r0, r4, #4
 8007a2a:	f7ff fded 	bl	8007608 <RCCEx_PLL2_Config>
 8007a2e:	4605      	mov	r5, r0
      break;
 8007a30:	e010      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a32:	2102      	movs	r1, #2
 8007a34:	1d20      	adds	r0, r4, #4
 8007a36:	f7ff fde7 	bl	8007608 <RCCEx_PLL2_Config>
 8007a3a:	4605      	mov	r5, r0
      break;
 8007a3c:	e7c0      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007a3e:	462e      	mov	r6, r5
 8007a40:	e7e4      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a42:	2601      	movs	r6, #1
 8007a44:	4635      	mov	r5, r6
 8007a46:	e01f      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a4c:	d002      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a52:	d108      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8007a54:	b9bd      	cbnz	r5, 8007a86 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a56:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a58:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007a60:	430b      	orrs	r3, r1
 8007a62:	6513      	str	r3, [r2, #80]	; 0x50
 8007a64:	e010      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a66:	2601      	movs	r6, #1
 8007a68:	4635      	mov	r5, r6
 8007a6a:	e00d      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6c:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007a6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a74:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a76:	e7ed      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a78:	2100      	movs	r1, #0
 8007a7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a7e:	f7ff fe49 	bl	8007714 <RCCEx_PLL3_Config>
 8007a82:	4605      	mov	r5, r0
      break;
 8007a84:	e7e6      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a86:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007a8e:	d026      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a96:	d037      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007a98:	d816      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a9a:	b13b      	cbz	r3, 8007aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa0:	d10d      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	1d20      	adds	r0, r4, #4
 8007aa6:	f7ff fdaf 	bl	8007608 <RCCEx_PLL2_Config>
 8007aaa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007aac:	bb9d      	cbnz	r5, 8007b16 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aae:	4a05      	ldr	r2, [pc, #20]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007ab0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ab2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007ab6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6513      	str	r3, [r2, #80]	; 0x50
 8007abc:	e00f      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007abe:	2601      	movs	r6, #1
 8007ac0:	4635      	mov	r5, r6
 8007ac2:	e00c      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007acc:	d0ee      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ad2:	d0eb      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ad8:	d0e8      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007ada:	2601      	movs	r6, #1
 8007adc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007ae4:	d025      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ae6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aee:	d04c      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007af0:	d816      	bhi.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d03c      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007afa:	d10e      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007afc:	2101      	movs	r1, #1
 8007afe:	1d20      	adds	r0, r4, #4
 8007b00:	f7ff fd82 	bl	8007608 <RCCEx_PLL2_Config>
 8007b04:	4605      	mov	r5, r0
      break;
 8007b06:	e033      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b08:	2101      	movs	r1, #1
 8007b0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b0e:	f7ff fe01 	bl	8007714 <RCCEx_PLL3_Config>
 8007b12:	4605      	mov	r5, r0
      break;
 8007b14:	e7ca      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007b16:	462e      	mov	r6, r5
 8007b18:	e7e1      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b1a:	2601      	movs	r6, #1
 8007b1c:	4635      	mov	r5, r6
 8007b1e:	e008      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b24:	d024      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b26:	d91d      	bls.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b28:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007b2c:	d020      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b2e:	2601      	movs	r6, #1
 8007b30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007b38:	d009      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 8007b3a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b40:	d02c      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8007b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b46:	d037      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007b48:	b36b      	cbz	r3, 8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007b4a:	2601      	movs	r6, #1
 8007b4c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007b54:	d045      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 8007b56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d86d      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b5c:	e8df f003 	tbb	[pc, r3]
 8007b60:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b68:	d002      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6e:	d109      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 8007b70:	b995      	cbnz	r5, 8007b98 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b72:	4a8c      	ldr	r2, [pc, #560]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b74:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b76:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007b7a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	6593      	str	r3, [r2, #88]	; 0x58
 8007b82:	e7d6      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b84:	2601      	movs	r6, #1
 8007b86:	4635      	mov	r5, r6
 8007b88:	e7d3      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b90:	f7ff fdc0 	bl	8007714 <RCCEx_PLL3_Config>
 8007b94:	4605      	mov	r5, r0
      break;
 8007b96:	e7eb      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007b98:	462e      	mov	r6, r5
 8007b9a:	e7ca      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9c:	4a81      	ldr	r2, [pc, #516]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007b9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ba6:	b96d      	cbnz	r5, 8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba8:	4a7e      	ldr	r2, [pc, #504]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007baa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007bac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007bb0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8007bb6:	e7ca      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb8:	2101      	movs	r1, #1
 8007bba:	1d20      	adds	r0, r4, #4
 8007bbc:	f7ff fd24 	bl	8007608 <RCCEx_PLL2_Config>
 8007bc0:	4605      	mov	r5, r0
      break;
 8007bc2:	e7f0      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007bc4:	462e      	mov	r6, r5
 8007bc6:	e7c2      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc8:	4a76      	ldr	r2, [pc, #472]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007bca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007bd2:	bba5      	cbnz	r5, 8007c3e <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bd4:	4a73      	ldr	r2, [pc, #460]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007bd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007bd8:	f023 0303 	bic.w	r3, r3, #3
 8007bdc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007bde:	430b      	orrs	r3, r1
 8007be0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007be8:	d12b      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f013 0f01 	tst.w	r3, #1
 8007bf0:	f000 80a3 	beq.w	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bf4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007bf8:	2b28      	cmp	r3, #40	; 0x28
 8007bfa:	f200 809c 	bhi.w	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007bfe:	e8df f003 	tbb	[pc, r3]
 8007c02:	9a89      	.short	0x9a89
 8007c04:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c08:	9a849a9a 	.word	0x9a849a9a
 8007c0c:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c10:	9a939a9a 	.word	0x9a939a9a
 8007c14:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c18:	9a899a9a 	.word	0x9a899a9a
 8007c1c:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c20:	9a899a9a 	.word	0x9a899a9a
 8007c24:	9a9a9a9a 	.word	0x9a9a9a9a
 8007c28:	9a9a      	.short	0x9a9a
 8007c2a:	89          	.byte	0x89
 8007c2b:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	1d20      	adds	r0, r4, #4
 8007c30:	f7ff fcea 	bl	8007608 <RCCEx_PLL2_Config>
 8007c34:	4605      	mov	r5, r0
      break;
 8007c36:	e7cc      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 8007c38:	2601      	movs	r6, #1
 8007c3a:	4635      	mov	r5, r6
 8007c3c:	e7d1      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8007c3e:	462e      	mov	r6, r5
 8007c40:	e7cf      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c42:	4a59      	ldr	r2, [pc, #356]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c44:	6813      	ldr	r3, [r2, #0]
 8007c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c4c:	f7fc ff08 	bl	8004a60 <HAL_GetTick>
 8007c50:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c52:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c5a:	d105      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fc ff00 	bl	8004a60 <HAL_GetTick>
 8007c60:	1bc0      	subs	r0, r0, r7
 8007c62:	2864      	cmp	r0, #100	; 0x64
 8007c64:	d9f5      	bls.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 8007c66:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	d14a      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c6c:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007c74:	4053      	eors	r3, r2
 8007c76:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007c7a:	d00c      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c7c:	4b49      	ldr	r3, [pc, #292]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c86:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007c8a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c8e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007c92:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007c94:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c96:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9e:	d015      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 8007ca0:	bb8d      	cbnz	r5, 8007d06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ca2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007ca6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007caa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007cae:	d01e      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007cb0:	4a3c      	ldr	r2, [pc, #240]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cb2:	6913      	ldr	r3, [r2, #16]
 8007cb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cb8:	6113      	str	r3, [r2, #16]
 8007cba:	493a      	ldr	r1, [pc, #232]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cbc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007cbe:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8007cc2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	670b      	str	r3, [r1, #112]	; 0x70
 8007cca:	e78e      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8007ccc:	f7fc fec8 	bl	8004a60 <HAL_GetTick>
 8007cd0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cd2:	4b34      	ldr	r3, [pc, #208]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	f013 0f02 	tst.w	r3, #2
 8007cda:	d1e1      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fc fec0 	bl	8004a60 <HAL_GetTick>
 8007ce0:	1bc0      	subs	r0, r0, r7
 8007ce2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ce6:	4298      	cmp	r0, r3
 8007ce8:	d9f3      	bls.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 8007cea:	2503      	movs	r5, #3
 8007cec:	e7d8      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cee:	482d      	ldr	r0, [pc, #180]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007cf0:	6902      	ldr	r2, [r0, #16]
 8007cf2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007cf6:	492d      	ldr	r1, [pc, #180]	; (8007dac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007cf8:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	6103      	str	r3, [r0, #16]
 8007d00:	e7db      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8007d02:	462e      	mov	r6, r5
 8007d04:	e771      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 8007d06:	462e      	mov	r6, r5
 8007d08:	e76f      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	1d20      	adds	r0, r4, #4
 8007d0e:	f7ff fc7b 	bl	8007608 <RCCEx_PLL2_Config>
 8007d12:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d14:	b9ed      	cbnz	r5, 8007d52 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d16:	4a23      	ldr	r2, [pc, #140]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007d18:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d1a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007d1e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007d22:	430b      	orrs	r3, r1
 8007d24:	6553      	str	r3, [r2, #84]	; 0x54
 8007d26:	e008      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d28:	2101      	movs	r1, #1
 8007d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d2e:	f7ff fcf1 	bl	8007714 <RCCEx_PLL3_Config>
 8007d32:	4605      	mov	r5, r0
      break;
 8007d34:	e7ee      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d36:	2601      	movs	r6, #1
 8007d38:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f013 0f02 	tst.w	r3, #2
 8007d40:	d016      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d827      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8007d48:	e8df f003 	tbb	[pc, r3]
 8007d4c:	0a1f050a 	.word	0x0a1f050a
 8007d50:	0a0a      	.short	0x0a0a
 8007d52:	462e      	mov	r6, r5
 8007d54:	e7f1      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d56:	2101      	movs	r1, #1
 8007d58:	1d20      	adds	r0, r4, #4
 8007d5a:	f7ff fc55 	bl	8007608 <RCCEx_PLL2_Config>
 8007d5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d60:	b9ed      	cbnz	r5, 8007d9e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d62:	4a10      	ldr	r2, [pc, #64]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8007d64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	f013 0f04 	tst.w	r3, #4
 8007d76:	d029      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d78:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	d84a      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8007d80:	e8df f003 	tbb	[pc, r3]
 8007d84:	1b42161b 	.word	0x1b42161b
 8007d88:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d90:	f7ff fcc0 	bl	8007714 <RCCEx_PLL3_Config>
 8007d94:	4605      	mov	r5, r0
      break;
 8007d96:	e7e3      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d98:	2601      	movs	r6, #1
 8007d9a:	4635      	mov	r5, r6
 8007d9c:	e7e8      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d9e:	462e      	mov	r6, r5
 8007da0:	e7e6      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007da2:	bf00      	nop
 8007da4:	58024400 	.word	0x58024400
 8007da8:	58024800 	.word	0x58024800
 8007dac:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007db0:	2101      	movs	r1, #1
 8007db2:	1d20      	adds	r0, r4, #4
 8007db4:	f7ff fc28 	bl	8007608 <RCCEx_PLL2_Config>
 8007db8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007dba:	bb7d      	cbnz	r5, 8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dbc:	4aa9      	ldr	r2, [pc, #676]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007dbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007dc0:	f023 0307 	bic.w	r3, r3, #7
 8007dc4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	f013 0f20 	tst.w	r3, #32
 8007dd2:	d033      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dd4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ddc:	d04c      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8007dde:	d822      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x606>
 8007de0:	b13b      	cbz	r3, 8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de6:	d11b      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007de8:	2100      	movs	r1, #0
 8007dea:	1d20      	adds	r0, r4, #4
 8007dec:	f7ff fc0c 	bl	8007608 <RCCEx_PLL2_Config>
 8007df0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	d147      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df6:	4a9b      	ldr	r2, [pc, #620]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007df8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007dfa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007dfe:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007e02:	430b      	orrs	r3, r1
 8007e04:	6553      	str	r3, [r2, #84]	; 0x54
 8007e06:	e019      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e08:	2101      	movs	r1, #1
 8007e0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e0e:	f7ff fc81 	bl	8007714 <RCCEx_PLL3_Config>
 8007e12:	4605      	mov	r5, r0
      break;
 8007e14:	e7d1      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e16:	2601      	movs	r6, #1
 8007e18:	4635      	mov	r5, r6
 8007e1a:	e7d7      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007e1c:	462e      	mov	r6, r5
 8007e1e:	e7d5      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e20:	2601      	movs	r6, #1
 8007e22:	4635      	mov	r5, r6
 8007e24:	e00a      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2a:	d0e2      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e30:	d0df      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e36:	d0dc      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e38:	2601      	movs	r6, #1
 8007e3a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e42:	d030      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e44:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e4c:	d04b      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8007e4e:	d81f      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8007e50:	b13b      	cbz	r3, 8007e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e56:	d118      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e58:	2100      	movs	r1, #0
 8007e5a:	1d20      	adds	r0, r4, #4
 8007e5c:	f7ff fbd4 	bl	8007608 <RCCEx_PLL2_Config>
 8007e60:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	d146      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e66:	4a7f      	ldr	r2, [pc, #508]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007e68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e6a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007e6e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007e72:	430b      	orrs	r3, r1
 8007e74:	6593      	str	r3, [r2, #88]	; 0x58
 8007e76:	e016      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e78:	2102      	movs	r1, #2
 8007e7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e7e:	f7ff fc49 	bl	8007714 <RCCEx_PLL3_Config>
 8007e82:	4605      	mov	r5, r0
      break;
 8007e84:	e7b5      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007e86:	462e      	mov	r6, r5
 8007e88:	e7d8      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e8a:	2601      	movs	r6, #1
 8007e8c:	4635      	mov	r5, r6
 8007e8e:	e00a      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d0e5      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e9a:	d0e2      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea0:	d0df      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ea2:	2601      	movs	r6, #1
 8007ea4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007eac:	d032      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007eae:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eb6:	f000 80a2 	beq.w	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8007eba:	d820      	bhi.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8007ebc:	b13b      	cbz	r3, 8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec2:	d119      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	1d20      	adds	r0, r4, #4
 8007ec8:	f7ff fb9e 	bl	8007608 <RCCEx_PLL2_Config>
 8007ecc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	f040 809c 	bne.w	800800c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ed4:	4a63      	ldr	r2, [pc, #396]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ed6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ed8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007edc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ee4:	e016      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007eec:	f7ff fc12 	bl	8007714 <RCCEx_PLL3_Config>
 8007ef0:	4605      	mov	r5, r0
      break;
 8007ef2:	e7b6      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ef4:	462e      	mov	r6, r5
 8007ef6:	e7d6      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ef8:	2601      	movs	r6, #1
 8007efa:	4635      	mov	r5, r6
 8007efc:	e00a      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f02:	d0e4      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f08:	d0e1      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f0e:	d0de      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007f10:	2601      	movs	r6, #1
 8007f12:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	f013 0f08 	tst.w	r3, #8
 8007f1a:	d00c      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f24:	d074      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f26:	4a4f      	ldr	r2, [pc, #316]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007f28:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007f2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f2e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007f32:	430b      	orrs	r3, r1
 8007f34:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f013 0f10 	tst.w	r3, #16
 8007f3c:	d00c      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f3e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f46:	d06c      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f48:	4a46      	ldr	r2, [pc, #280]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007f4a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f50:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007f5e:	d00b      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 8007f60:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d073      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6e:	d066      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05f      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8007f74:	2601      	movs	r6, #1
 8007f76:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007f7e:	d00c      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 8007f80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f88:	d07d      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8007f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f8e:	d070      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f94:	d068      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007f96:	2601      	movs	r6, #1
 8007f98:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007fa0:	d008      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007fa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d077      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x878>
 8007fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fac:	f000 8082 	beq.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8007fb0:	2601      	movs	r6, #1
 8007fb2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007fba:	f040 8083 	bne.w	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007fc4:	f000 808b 	beq.w	80080de <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 8007fc8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fd0:	f000 80c9 	beq.w	8008166 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8007fd4:	f240 8080 	bls.w	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8007fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe2:	f040 80be 	bne.w	8008162 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	f040 80c3 	bne.w	8008172 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fec:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007fee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6553      	str	r3, [r2, #84]	; 0x54
 8007ffc:	e06f      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ffe:	2102      	movs	r1, #2
 8008000:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008004:	f7ff fb86 	bl	8007714 <RCCEx_PLL3_Config>
 8008008:	4605      	mov	r5, r0
      break;
 800800a:	e760      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800800c:	462e      	mov	r6, r5
 800800e:	e781      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008010:	2102      	movs	r1, #2
 8008012:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008016:	f7ff fb7d 	bl	8007714 <RCCEx_PLL3_Config>
 800801a:	2800      	cmp	r0, #0
 800801c:	d083      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800801e:	2601      	movs	r6, #1
 8008020:	e781      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008022:	2102      	movs	r1, #2
 8008024:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008028:	f7ff fb74 	bl	8007714 <RCCEx_PLL3_Config>
 800802c:	2800      	cmp	r0, #0
 800802e:	d08b      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 8008030:	2601      	movs	r6, #1
 8008032:	e789      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008034:	2100      	movs	r1, #0
 8008036:	1d20      	adds	r0, r4, #4
 8008038:	f7ff fae6 	bl	8007608 <RCCEx_PLL2_Config>
 800803c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800803e:	b97d      	cbnz	r5, 8008060 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008040:	4a08      	ldr	r2, [pc, #32]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008042:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008044:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008048:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800804c:	430b      	orrs	r3, r1
 800804e:	6593      	str	r3, [r2, #88]	; 0x58
 8008050:	e792      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008052:	2102      	movs	r1, #2
 8008054:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008058:	f7ff fb5c 	bl	8007714 <RCCEx_PLL3_Config>
 800805c:	4605      	mov	r5, r0
      break;
 800805e:	e7ee      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008060:	462e      	mov	r6, r5
 8008062:	e789      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8008064:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4a47      	ldr	r2, [pc, #284]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800806a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800806c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008070:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008072:	b97d      	cbnz	r5, 8008094 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008074:	4a44      	ldr	r2, [pc, #272]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008076:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008078:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800807c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008080:	430b      	orrs	r3, r1
 8008082:	6553      	str	r3, [r2, #84]	; 0x54
 8008084:	e789      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008086:	2101      	movs	r1, #1
 8008088:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800808c:	f7ff fb42 	bl	8007714 <RCCEx_PLL3_Config>
 8008090:	4605      	mov	r5, r0
      break;
 8008092:	e7ee      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008094:	462e      	mov	r6, r5
 8008096:	e780      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008098:	4a3b      	ldr	r2, [pc, #236]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800809a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80080a2:	b96d      	cbnz	r5, 80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080a4:	4a38      	ldr	r2, [pc, #224]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80080ae:	430b      	orrs	r3, r1
 80080b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080b2:	e77f      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080b4:	2102      	movs	r1, #2
 80080b6:	1d20      	adds	r0, r4, #4
 80080b8:	f7ff faa6 	bl	8007608 <RCCEx_PLL2_Config>
 80080bc:	4605      	mov	r5, r0
      break;
 80080be:	e7f0      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
 80080c0:	462e      	mov	r6, r5
 80080c2:	e777      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080c4:	2102      	movs	r1, #2
 80080c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080ca:	f7ff fb23 	bl	8007714 <RCCEx_PLL3_Config>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f af75 	beq.w	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 80080d4:	2601      	movs	r6, #1
 80080d6:	e772      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d084      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80080dc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80080e4:	d006      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080e6:	4a28      	ldr	r2, [pc, #160]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80080fa:	d006      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080fc:	4a22      	ldr	r2, [pc, #136]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80080fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008104:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008106:	430b      	orrs	r3, r1
 8008108:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008110:	d006      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008112:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008114:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008116:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800811a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800811c:	430b      	orrs	r3, r1
 800811e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008126:	d009      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008128:	4b17      	ldr	r3, [pc, #92]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008130:	611a      	str	r2, [r3, #16]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8008138:	430a      	orrs	r2, r1
 800813a:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	db19      	blt.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008148:	d007      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800814a:	4a0f      	ldr	r2, [pc, #60]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800814c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800814e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008152:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008156:	430b      	orrs	r3, r1
 8008158:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800815a:	b106      	cbz	r6, 800815e <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800815c:	2601      	movs	r6, #1
}
 800815e:	4630      	mov	r0, r6
 8008160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008162:	2601      	movs	r6, #1
 8008164:	e7bb      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008166:	4a08      	ldr	r2, [pc, #32]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008168:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800816a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008170:	e739      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008172:	462e      	mov	r6, r5
 8008174:	e7b3      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008176:	4a04      	ldr	r2, [pc, #16]	; (8008188 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008178:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800817a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800817e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008180:	430b      	orrs	r3, r1
 8008182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008184:	e7dd      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400

0800818c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800818c:	4770      	bx	lr
	...

08008190 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008190:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d13a      	bne.n	8008210 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819a:	2302      	movs	r3, #2
 800819c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081a0:	6802      	ldr	r2, [r0, #0]
 80081a2:	68d3      	ldr	r3, [r2, #12]
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081aa:	6803      	ldr	r3, [r0, #0]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <HAL_TIM_Base_Start_IT+0x88>)
 80081ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b2:	bf18      	it	ne
 80081b4:	4293      	cmpne	r3, r2
 80081b6:	d01d      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081b8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80081bc:	4293      	cmp	r3, r2
 80081be:	d019      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d015      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d011      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081d0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00d      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081d8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
 80081e0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d005      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f0:	2000      	movs	r0, #0
 80081f2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081f4:	6899      	ldr	r1, [r3, #8]
 80081f6:	4a09      	ldr	r2, [pc, #36]	; (800821c <HAL_TIM_Base_Start_IT+0x8c>)
 80081f8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	2a06      	cmp	r2, #6
 80081fc:	bf18      	it	ne
 80081fe:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8008202:	d007      	beq.n	8008214 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800820c:	2000      	movs	r0, #0
 800820e:	4770      	bx	lr
    return HAL_ERROR;
 8008210:	2001      	movs	r0, #1
 8008212:	4770      	bx	lr
  return HAL_OK;
 8008214:	2000      	movs	r0, #0
}
 8008216:	4770      	bx	lr
 8008218:	40010000 	.word	0x40010000
 800821c:	00010007 	.word	0x00010007

08008220 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008220:	4770      	bx	lr

08008222 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008222:	4770      	bx	lr

08008224 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008224:	4770      	bx	lr

08008226 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008226:	4770      	bx	lr

08008228 <HAL_TIM_IRQHandler>:
{
 8008228:	b510      	push	{r4, lr}
 800822a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800822c:	6803      	ldr	r3, [r0, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	f012 0f02 	tst.w	r2, #2
 8008234:	d011      	beq.n	800825a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	f012 0f02 	tst.w	r2, #2
 800823c:	d00d      	beq.n	800825a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800823e:	f06f 0202 	mvn.w	r2, #2
 8008242:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008244:	2301      	movs	r3, #1
 8008246:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008248:	6803      	ldr	r3, [r0, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f013 0f03 	tst.w	r3, #3
 8008250:	d079      	beq.n	8008346 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008252:	f7ff ffe6 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	2300      	movs	r3, #0
 8008258:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	f012 0f04 	tst.w	r2, #4
 8008262:	d012      	beq.n	800828a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	f012 0f04 	tst.w	r2, #4
 800826a:	d00e      	beq.n	800828a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800826c:	f06f 0204 	mvn.w	r2, #4
 8008270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008272:	2302      	movs	r3, #2
 8008274:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800827e:	d068      	beq.n	8008352 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008280:	4620      	mov	r0, r4
 8008282:	f7ff ffce 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008286:	2300      	movs	r3, #0
 8008288:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	f012 0f08 	tst.w	r2, #8
 8008292:	d012      	beq.n	80082ba <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	f012 0f08 	tst.w	r2, #8
 800829a:	d00e      	beq.n	80082ba <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800829c:	f06f 0208 	mvn.w	r2, #8
 80082a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a2:	2304      	movs	r3, #4
 80082a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f013 0f03 	tst.w	r3, #3
 80082ae:	d057      	beq.n	8008360 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff ffb6 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b6:	2300      	movs	r3, #0
 80082b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	f012 0f10 	tst.w	r2, #16
 80082c2:	d012      	beq.n	80082ea <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	f012 0f10 	tst.w	r2, #16
 80082ca:	d00e      	beq.n	80082ea <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082cc:	f06f 0210 	mvn.w	r2, #16
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082d2:	2308      	movs	r3, #8
 80082d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80082de:	d046      	beq.n	800836e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80082e0:	4620      	mov	r0, r4
 80082e2:	f7ff ff9e 	bl	8008222 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e6:	2300      	movs	r3, #0
 80082e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	f012 0f01 	tst.w	r2, #1
 80082f2:	d003      	beq.n	80082fc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	f012 0f01 	tst.w	r2, #1
 80082fa:	d13f      	bne.n	800837c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	f012 0f80 	tst.w	r2, #128	; 0x80
 800830c:	d13d      	bne.n	800838a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008316:	d003      	beq.n	8008320 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800831e:	d13b      	bne.n	8008398 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008328:	d003      	beq.n	8008332 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008330:	d139      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	f012 0f20 	tst.w	r2, #32
 800833a:	d003      	beq.n	8008344 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	f012 0f20 	tst.w	r2, #32
 8008342:	d137      	bne.n	80083b4 <HAL_TIM_IRQHandler+0x18c>
}
 8008344:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008346:	f7ff ff6b 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff ff6a 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
 8008350:	e781      	b.n	8008256 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff ff64 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008358:	4620      	mov	r0, r4
 800835a:	f7ff ff63 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
 800835e:	e792      	b.n	8008286 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008360:	4620      	mov	r0, r4
 8008362:	f7ff ff5d 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008366:	4620      	mov	r0, r4
 8008368:	f7ff ff5c 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
 800836c:	e7a3      	b.n	80082b6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	4620      	mov	r0, r4
 8008370:	f7ff ff56 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008374:	4620      	mov	r0, r4
 8008376:	f7ff ff55 	bl	8008224 <HAL_TIM_PWM_PulseFinishedCallback>
 800837a:	e7b4      	b.n	80082e6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800837c:	f06f 0201 	mvn.w	r2, #1
 8008380:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008382:	4620      	mov	r0, r4
 8008384:	f7f9 fd10 	bl	8001da8 <HAL_TIM_PeriodElapsedCallback>
 8008388:	e7b8      	b.n	80082fc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800838a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800838e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f8ca 	bl	800852a <HAL_TIMEx_BreakCallback>
 8008396:	e7ba      	b.n	800830e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008398:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800839c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f8c4 	bl	800852c <HAL_TIMEx_Break2Callback>
 80083a4:	e7bc      	b.n	8008320 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80083ac:	4620      	mov	r0, r4
 80083ae:	f7ff ff3a 	bl	8008226 <HAL_TIM_TriggerCallback>
 80083b2:	e7be      	b.n	8008332 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083b4:	f06f 0220 	mvn.w	r2, #32
 80083b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f8b4 	bl	8008528 <HAL_TIMEx_CommutCallback>
}
 80083c0:	e7c0      	b.n	8008344 <HAL_TIM_IRQHandler+0x11c>
	...

080083c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083c4:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083c6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c8:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <TIM_Base_SetConfig+0xec>)
 80083ca:	4290      	cmp	r0, r2
 80083cc:	bf14      	ite	ne
 80083ce:	f04f 0e00 	movne.w	lr, #0
 80083d2:	f04f 0e01 	moveq.w	lr, #1
 80083d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083da:	bf14      	ite	ne
 80083dc:	4672      	movne	r2, lr
 80083de:	f04e 0201 	orreq.w	r2, lr, #1
 80083e2:	b9aa      	cbnz	r2, 8008410 <TIM_Base_SetConfig+0x4c>
 80083e4:	4c33      	ldr	r4, [pc, #204]	; (80084b4 <TIM_Base_SetConfig+0xf0>)
 80083e6:	42a0      	cmp	r0, r4
 80083e8:	bf14      	ite	ne
 80083ea:	2400      	movne	r4, #0
 80083ec:	2401      	moveq	r4, #1
 80083ee:	4d32      	ldr	r5, [pc, #200]	; (80084b8 <TIM_Base_SetConfig+0xf4>)
 80083f0:	42a8      	cmp	r0, r5
 80083f2:	d00d      	beq.n	8008410 <TIM_Base_SetConfig+0x4c>
 80083f4:	b964      	cbnz	r4, 8008410 <TIM_Base_SetConfig+0x4c>
 80083f6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80083fa:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80083fe:	42a0      	cmp	r0, r4
 8008400:	bf14      	ite	ne
 8008402:	2400      	movne	r4, #0
 8008404:	2401      	moveq	r4, #1
 8008406:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800840a:	42a8      	cmp	r0, r5
 800840c:	d000      	beq.n	8008410 <TIM_Base_SetConfig+0x4c>
 800840e:	b11c      	cbz	r4, 8008418 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008414:	684c      	ldr	r4, [r1, #4]
 8008416:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008418:	bb12      	cbnz	r2, 8008460 <TIM_Base_SetConfig+0x9c>
 800841a:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <TIM_Base_SetConfig+0xf0>)
 800841c:	4290      	cmp	r0, r2
 800841e:	bf14      	ite	ne
 8008420:	2200      	movne	r2, #0
 8008422:	2201      	moveq	r2, #1
 8008424:	4c24      	ldr	r4, [pc, #144]	; (80084b8 <TIM_Base_SetConfig+0xf4>)
 8008426:	42a0      	cmp	r0, r4
 8008428:	d01a      	beq.n	8008460 <TIM_Base_SetConfig+0x9c>
 800842a:	b9ca      	cbnz	r2, 8008460 <TIM_Base_SetConfig+0x9c>
 800842c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008430:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8008434:	4290      	cmp	r0, r2
 8008436:	bf14      	ite	ne
 8008438:	2200      	movne	r2, #0
 800843a:	2201      	moveq	r2, #1
 800843c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008440:	42a0      	cmp	r0, r4
 8008442:	d00d      	beq.n	8008460 <TIM_Base_SetConfig+0x9c>
 8008444:	b962      	cbnz	r2, 8008460 <TIM_Base_SetConfig+0x9c>
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <TIM_Base_SetConfig+0xf8>)
 8008448:	4290      	cmp	r0, r2
 800844a:	bf14      	ite	ne
 800844c:	2200      	movne	r2, #0
 800844e:	2201      	moveq	r2, #1
 8008450:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8008454:	42a0      	cmp	r0, r4
 8008456:	d003      	beq.n	8008460 <TIM_Base_SetConfig+0x9c>
 8008458:	b912      	cbnz	r2, 8008460 <TIM_Base_SetConfig+0x9c>
 800845a:	4a19      	ldr	r2, [pc, #100]	; (80084c0 <TIM_Base_SetConfig+0xfc>)
 800845c:	4290      	cmp	r0, r2
 800845e:	d104      	bne.n	800846a <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008460:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008464:	68cb      	ldr	r3, [r1, #12]
 8008466:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800846a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800846e:	694a      	ldr	r2, [r1, #20]
 8008470:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008472:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008474:	688a      	ldr	r2, [r1, #8]
 8008476:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008478:	680a      	ldr	r2, [r1, #0]
 800847a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800847c:	4a11      	ldr	r2, [pc, #68]	; (80084c4 <TIM_Base_SetConfig+0x100>)
 800847e:	4290      	cmp	r0, r2
 8008480:	bf14      	ite	ne
 8008482:	4673      	movne	r3, lr
 8008484:	f04e 0301 	orreq.w	r3, lr, #1
 8008488:	b963      	cbnz	r3, 80084a4 <TIM_Base_SetConfig+0xe0>
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <TIM_Base_SetConfig+0xf8>)
 800848c:	4298      	cmp	r0, r3
 800848e:	bf14      	ite	ne
 8008490:	2300      	movne	r3, #0
 8008492:	2301      	moveq	r3, #1
 8008494:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008498:	4290      	cmp	r0, r2
 800849a:	d003      	beq.n	80084a4 <TIM_Base_SetConfig+0xe0>
 800849c:	b913      	cbnz	r3, 80084a4 <TIM_Base_SetConfig+0xe0>
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <TIM_Base_SetConfig+0xfc>)
 80084a0:	4298      	cmp	r0, r3
 80084a2:	d101      	bne.n	80084a8 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a4:	690b      	ldr	r3, [r1, #16]
 80084a6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a8:	2301      	movs	r3, #1
 80084aa:	6143      	str	r3, [r0, #20]
}
 80084ac:	bd30      	pop	{r4, r5, pc}
 80084ae:	bf00      	nop
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40014400 	.word	0x40014400
 80084c0:	40014800 	.word	0x40014800
 80084c4:	40010400 	.word	0x40010400

080084c8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80084c8:	b360      	cbz	r0, 8008524 <HAL_TIM_Base_Init+0x5c>
{
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80084ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084d2:	b313      	cbz	r3, 800851a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80084d4:	2302      	movs	r3, #2
 80084d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084da:	4621      	mov	r1, r4
 80084dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80084e0:	f7ff ff70 	bl	80083c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80084ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80084f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80084f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80084fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800850a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800850e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008512:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008516:	2000      	movs	r0, #0
}
 8008518:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800851a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800851e:	f7ff fe35 	bl	800818c <HAL_TIM_Base_MspInit>
 8008522:	e7d7      	b.n	80084d4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008524:	2001      	movs	r0, #1
}
 8008526:	4770      	bx	lr

08008528 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008528:	4770      	bx	lr

0800852a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800852a:	4770      	bx	lr

0800852c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800852c:	4770      	bx	lr

0800852e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800852e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008534:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008536:	f001 ffa5 	bl	800a484 <xTaskGetSchedulerState>
 800853a:	2801      	cmp	r0, #1
 800853c:	d100      	bne.n	8008540 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800853e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8008540:	f000 fc80 	bl	8008e44 <xPortSysTickHandler>
}
 8008544:	e7fb      	b.n	800853e <SysTick_Handler+0x10>
	...

08008548 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008548:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800854c:	b92b      	cbnz	r3, 800855a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800854e:	4b06      	ldr	r3, [pc, #24]	; (8008568 <osKernelInitialize+0x20>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	b928      	cbnz	r0, 8008560 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008554:	2201      	movs	r2, #1
 8008556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008558:	4770      	bx	lr
    stat = osErrorISR;
 800855a:	f06f 0005 	mvn.w	r0, #5
 800855e:	4770      	bx	lr
    } else {
      stat = osError;
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	240022ac 	.word	0x240022ac

0800856c <osKernelStart>:
 800856c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008570:	b973      	cbnz	r3, 8008590 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008572:	4b0a      	ldr	r3, [pc, #40]	; (800859c <osKernelStart+0x30>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10d      	bne.n	8008596 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800857a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800857c:	2400      	movs	r4, #0
 800857e:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <osKernelStart+0x34>)
 8008580:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <osKernelStart+0x30>)
 8008584:	2202      	movs	r2, #2
 8008586:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008588:	f001 fccc 	bl	8009f24 <vTaskStartScheduler>
      stat = osOK;
 800858c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800858e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008590:	f06f 0005 	mvn.w	r0, #5
 8008594:	4770      	bx	lr
      stat = osError;
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
}
 800859a:	4770      	bx	lr
 800859c:	240022ac 	.word	0x240022ac
 80085a0:	e000ed00 	.word	0xe000ed00

080085a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085a8:	2400      	movs	r4, #0
 80085aa:	9405      	str	r4, [sp, #20]
 80085ac:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80085b0:	bb74      	cbnz	r4, 8008610 <osThreadNew+0x6c>
 80085b2:	b368      	cbz	r0, 8008610 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80085b4:	b322      	cbz	r2, 8008600 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 80085b6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80085b8:	6993      	ldr	r3, [r2, #24]
 80085ba:	b903      	cbnz	r3, 80085be <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80085bc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085be:	1e5c      	subs	r4, r3, #1
 80085c0:	2c37      	cmp	r4, #55	; 0x37
 80085c2:	d849      	bhi.n	8008658 <osThreadNew+0xb4>
 80085c4:	6854      	ldr	r4, [r2, #4]
 80085c6:	f014 0f01 	tst.w	r4, #1
 80085ca:	d147      	bne.n	800865c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80085cc:	6956      	ldr	r6, [r2, #20]
 80085ce:	b16e      	cbz	r6, 80085ec <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085d0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d4:	6894      	ldr	r4, [r2, #8]
 80085d6:	b12c      	cbz	r4, 80085e4 <osThreadNew+0x40>
 80085d8:	68d7      	ldr	r7, [r2, #12]
 80085da:	2fbb      	cmp	r7, #187	; 0xbb
 80085dc:	d902      	bls.n	80085e4 <osThreadNew+0x40>
 80085de:	6917      	ldr	r7, [r2, #16]
 80085e0:	b107      	cbz	r7, 80085e4 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085e2:	b9c6      	cbnz	r6, 8008616 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085e4:	b12c      	cbz	r4, 80085f2 <osThreadNew+0x4e>
    mem  = -1;
 80085e6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ea:	e00e      	b.n	800860a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 80085ec:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80085f0:	e7f0      	b.n	80085d4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085f2:	68d4      	ldr	r4, [r2, #12]
 80085f4:	b98c      	cbnz	r4, 800861a <osThreadNew+0x76>
 80085f6:	6914      	ldr	r4, [r2, #16]
 80085f8:	b194      	cbz	r4, 8008620 <osThreadNew+0x7c>
    mem  = -1;
 80085fa:	f04f 34ff 	mov.w	r4, #4294967295
 80085fe:	e004      	b.n	800860a <osThreadNew+0x66>
    name = NULL;
 8008600:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008602:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008604:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008606:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800860a:	2c01      	cmp	r4, #1
 800860c:	d00a      	beq.n	8008624 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800860e:	b1ac      	cbz	r4, 800863c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008610:	9805      	ldr	r0, [sp, #20]
}
 8008612:	b007      	add	sp, #28
 8008614:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008616:	2401      	movs	r4, #1
 8008618:	e7f7      	b.n	800860a <osThreadNew+0x66>
    mem  = -1;
 800861a:	f04f 34ff 	mov.w	r4, #4294967295
 800861e:	e7f4      	b.n	800860a <osThreadNew+0x66>
          mem = 0;
 8008620:	2400      	movs	r4, #0
 8008622:	e7f2      	b.n	800860a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008624:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008626:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008628:	9202      	str	r2, [sp, #8]
 800862a:	9401      	str	r4, [sp, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	460b      	mov	r3, r1
 8008630:	4662      	mov	r2, ip
 8008632:	4629      	mov	r1, r5
 8008634:	f001 fc06 	bl	8009e44 <xTaskCreateStatic>
 8008638:	9005      	str	r0, [sp, #20]
 800863a:	e7e9      	b.n	8008610 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800863c:	aa05      	add	r2, sp, #20
 800863e:	9201      	str	r2, [sp, #4]
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	460b      	mov	r3, r1
 8008644:	fa1f f28c 	uxth.w	r2, ip
 8008648:	4629      	mov	r1, r5
 800864a:	f001 fc36 	bl	8009eba <xTaskCreate>
 800864e:	2801      	cmp	r0, #1
 8008650:	d0de      	beq.n	8008610 <osThreadNew+0x6c>
            hTask = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	9305      	str	r3, [sp, #20]
 8008656:	e7db      	b.n	8008610 <osThreadNew+0x6c>
        return (NULL);
 8008658:	2000      	movs	r0, #0
 800865a:	e7da      	b.n	8008612 <osThreadNew+0x6e>
 800865c:	2000      	movs	r0, #0
 800865e:	e7d8      	b.n	8008612 <osThreadNew+0x6e>

08008660 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008660:	b508      	push	{r3, lr}
 8008662:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008666:	b933      	cbnz	r3, 8008676 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008668:	b908      	cbnz	r0, 800866e <osDelay+0xe>
    stat = osOK;
 800866a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800866c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800866e:	f001 fdc5 	bl	800a1fc <vTaskDelay>
    stat = osOK;
 8008672:	2000      	movs	r0, #0
 8008674:	e7fa      	b.n	800866c <osDelay+0xc>
    stat = osErrorISR;
 8008676:	f06f 0005 	mvn.w	r0, #5
 800867a:	e7f7      	b.n	800866c <osDelay+0xc>

0800867c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008684:	2b00      	cmp	r3, #0
 8008686:	d14d      	bne.n	8008724 <osSemaphoreNew+0xa8>
 8008688:	460e      	mov	r6, r1
 800868a:	4614      	mov	r4, r2
 800868c:	4288      	cmp	r0, r1
 800868e:	bf34      	ite	cc
 8008690:	2300      	movcc	r3, #0
 8008692:	2301      	movcs	r3, #1
 8008694:	2800      	cmp	r0, #0
 8008696:	d049      	beq.n	800872c <osSemaphoreNew+0xb0>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d047      	beq.n	800872c <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800869c:	b14a      	cbz	r2, 80086b2 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800869e:	6895      	ldr	r5, [r2, #8]
 80086a0:	b115      	cbz	r5, 80086a8 <osSemaphoreNew+0x2c>
 80086a2:	68d3      	ldr	r3, [r2, #12]
 80086a4:	2b4f      	cmp	r3, #79	; 0x4f
 80086a6:	d814      	bhi.n	80086d2 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086a8:	2d00      	cmp	r5, #0
 80086aa:	d141      	bne.n	8008730 <osSemaphoreNew+0xb4>
 80086ac:	68e3      	ldr	r3, [r4, #12]
 80086ae:	b10b      	cbz	r3, 80086b4 <osSemaphoreNew+0x38>
 80086b0:	e039      	b.n	8008726 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80086b2:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80086b4:	2801      	cmp	r0, #1
 80086b6:	d00e      	beq.n	80086d6 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80086b8:	bb73      	cbnz	r3, 8008718 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80086ba:	4631      	mov	r1, r6
 80086bc:	f000 fe3b 	bl	8009336 <xQueueCreateCountingSemaphore>
 80086c0:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80086c2:	b385      	cbz	r5, 8008726 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 80086c4:	b104      	cbz	r4, 80086c8 <osSemaphoreNew+0x4c>
          name = attr->name;
 80086c6:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	f001 f9ac 	bl	8009a28 <vQueueAddToRegistry>
 80086d0:	e029      	b.n	8008726 <osSemaphoreNew+0xaa>
        mem = 1;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7ee      	b.n	80086b4 <osSemaphoreNew+0x38>
        if (mem == 1) {
 80086d6:	b9b3      	cbnz	r3, 8008706 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 80086d8:	2203      	movs	r2, #3
 80086da:	2100      	movs	r1, #0
 80086dc:	2001      	movs	r0, #1
 80086de:	f000 fde3 	bl	80092a8 <xQueueGenericCreate>
 80086e2:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	bf18      	it	ne
 80086e8:	2e00      	cmpne	r6, #0
 80086ea:	d0ea      	beq.n	80086c2 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086ec:	2300      	movs	r3, #0
 80086ee:	461a      	mov	r2, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 fe3d 	bl	8009372 <xQueueGenericSend>
 80086f8:	2801      	cmp	r0, #1
 80086fa:	d0e2      	beq.n	80086c2 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 80086fc:	4628      	mov	r0, r5
 80086fe:	f001 f9bd 	bl	8009a7c <vQueueDelete>
            hSemaphore = NULL;
 8008702:	2500      	movs	r5, #0
 8008704:	e00f      	b.n	8008726 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	2203      	movs	r2, #3
 800870a:	9200      	str	r2, [sp, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	4611      	mov	r1, r2
 8008710:	f000 fd77 	bl	8009202 <xQueueGenericCreateStatic>
 8008714:	4605      	mov	r5, r0
 8008716:	e7e5      	b.n	80086e4 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008718:	68a2      	ldr	r2, [r4, #8]
 800871a:	4631      	mov	r1, r6
 800871c:	f000 fde8 	bl	80092f0 <xQueueCreateCountingSemaphoreStatic>
 8008720:	4605      	mov	r5, r0
 8008722:	e7ce      	b.n	80086c2 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 8008724:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008726:	4628      	mov	r0, r5
 8008728:	b002      	add	sp, #8
 800872a:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800872c:	2500      	movs	r5, #0
 800872e:	e7fa      	b.n	8008726 <osSemaphoreNew+0xaa>
 8008730:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8008732:	e7f8      	b.n	8008726 <osSemaphoreNew+0xaa>

08008734 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008734:	b320      	cbz	r0, 8008780 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008736:	b510      	push	{r4, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	460c      	mov	r4, r1
 800873c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008740:	b1b3      	cbz	r3, 8008770 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8008742:	bb01      	cbnz	r1, 8008786 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008744:	2100      	movs	r1, #0
 8008746:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008748:	aa01      	add	r2, sp, #4
 800874a:	f001 f918 	bl	800997e <xQueueReceiveFromISR>
 800874e:	2801      	cmp	r0, #1
 8008750:	d11c      	bne.n	800878c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008752:	9801      	ldr	r0, [sp, #4]
 8008754:	b150      	cbz	r0, 800876c <osSemaphoreAcquire+0x38>
 8008756:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800876a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800876c:	b002      	add	sp, #8
 800876e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008770:	f001 f832 	bl	80097d8 <xQueueSemaphoreTake>
 8008774:	2801      	cmp	r0, #1
 8008776:	d00c      	beq.n	8008792 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8008778:	b16c      	cbz	r4, 8008796 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800877a:	f06f 0001 	mvn.w	r0, #1
 800877e:	e7f5      	b.n	800876c <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8008780:	f06f 0003 	mvn.w	r0, #3
}
 8008784:	4770      	bx	lr
      stat = osErrorParameter;
 8008786:	f06f 0003 	mvn.w	r0, #3
 800878a:	e7ef      	b.n	800876c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800878c:	f06f 0002 	mvn.w	r0, #2
 8008790:	e7ec      	b.n	800876c <osSemaphoreAcquire+0x38>
  stat = osOK;
 8008792:	2000      	movs	r0, #0
 8008794:	e7ea      	b.n	800876c <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8008796:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800879a:	e7e7      	b.n	800876c <osSemaphoreAcquire+0x38>

0800879c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800879c:	b320      	cbz	r0, 80087e8 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800879e:	b500      	push	{lr}
 80087a0:	b083      	sub	sp, #12
 80087a2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80087a6:	b1a3      	cbz	r3, 80087d2 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80087a8:	2300      	movs	r3, #0
 80087aa:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80087ac:	a901      	add	r1, sp, #4
 80087ae:	f000 ff0b 	bl	80095c8 <xQueueGiveFromISR>
 80087b2:	2801      	cmp	r0, #1
 80087b4:	d11b      	bne.n	80087ee <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80087b6:	9801      	ldr	r0, [sp, #4]
 80087b8:	b198      	cbz	r0, 80087e2 <osSemaphoreRelease+0x46>
 80087ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80087ce:	2000      	movs	r0, #0
 80087d0:	e007      	b.n	80087e2 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80087d2:	2300      	movs	r3, #0
 80087d4:	461a      	mov	r2, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	f000 fdcb 	bl	8009372 <xQueueGenericSend>
 80087dc:	2801      	cmp	r0, #1
 80087de:	d109      	bne.n	80087f4 <osSemaphoreRelease+0x58>
  stat = osOK;
 80087e0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80087e2:	b003      	add	sp, #12
 80087e4:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 80087e8:	f06f 0003 	mvn.w	r0, #3
}
 80087ec:	4770      	bx	lr
      stat = osErrorResource;
 80087ee:	f06f 0002 	mvn.w	r0, #2
 80087f2:	e7f6      	b.n	80087e2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80087f4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80087f8:	e7f3      	b.n	80087e2 <osSemaphoreRelease+0x46>

080087fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80087fa:	b570      	push	{r4, r5, r6, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008802:	2b00      	cmp	r3, #0
 8008804:	d13d      	bne.n	8008882 <osMessageQueueNew+0x88>
 8008806:	4614      	mov	r4, r2
 8008808:	1e0b      	subs	r3, r1, #0
 800880a:	bf18      	it	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2800      	cmp	r0, #0
 8008810:	d03b      	beq.n	800888a <osMessageQueueNew+0x90>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d039      	beq.n	800888a <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 8008816:	b36a      	cbz	r2, 8008874 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008818:	6893      	ldr	r3, [r2, #8]
 800881a:	b14b      	cbz	r3, 8008830 <osMessageQueueNew+0x36>
 800881c:	68d2      	ldr	r2, [r2, #12]
 800881e:	2a4f      	cmp	r2, #79	; 0x4f
 8008820:	d906      	bls.n	8008830 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008822:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008824:	b122      	cbz	r2, 8008830 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008826:	fb01 f500 	mul.w	r5, r1, r0
 800882a:	6966      	ldr	r6, [r4, #20]
 800882c:	42ae      	cmp	r6, r5
 800882e:	d21b      	bcs.n	8008868 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008830:	b173      	cbz	r3, 8008850 <osMessageQueueNew+0x56>
    mem = -1;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008836:	bb53      	cbnz	r3, 800888e <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008838:	2200      	movs	r2, #0
 800883a:	f000 fd35 	bl	80092a8 <xQueueGenericCreate>
 800883e:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008840:	b305      	cbz	r5, 8008884 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 8008842:	b104      	cbz	r4, 8008846 <osMessageQueueNew+0x4c>
        name = attr->name;
 8008844:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f001 f8ed 	bl	8009a28 <vQueueAddToRegistry>
 800884e:	e019      	b.n	8008884 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008850:	68e3      	ldr	r3, [r4, #12]
 8008852:	b98b      	cbnz	r3, 8008878 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008854:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008856:	b113      	cbz	r3, 800885e <osMessageQueueNew+0x64>
    mem = -1;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e7eb      	b.n	8008836 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800885e:	6963      	ldr	r3, [r4, #20]
 8008860:	b16b      	cbz	r3, 800887e <osMessageQueueNew+0x84>
    mem = -1;
 8008862:	f04f 33ff 	mov.w	r3, #4294967295
 8008866:	e7e6      	b.n	8008836 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008868:	2500      	movs	r5, #0
 800886a:	9500      	str	r5, [sp, #0]
 800886c:	f000 fcc9 	bl	8009202 <xQueueGenericCreateStatic>
 8008870:	4605      	mov	r5, r0
 8008872:	e7e5      	b.n	8008840 <osMessageQueueNew+0x46>
      mem = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	e7de      	b.n	8008836 <osMessageQueueNew+0x3c>
    mem = -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	e7db      	b.n	8008836 <osMessageQueueNew+0x3c>
          mem = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	e7d9      	b.n	8008836 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 8008882:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008884:	4628      	mov	r0, r5
 8008886:	b002      	add	sp, #8
 8008888:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800888a:	2500      	movs	r5, #0
 800888c:	e7fa      	b.n	8008884 <osMessageQueueNew+0x8a>
 800888e:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8008890:	e7f8      	b.n	8008884 <osMessageQueueNew+0x8a>

08008892 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008892:	b510      	push	{r4, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	461c      	mov	r4, r3
 8008898:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800889c:	b1d3      	cbz	r3, 80088d4 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800889e:	2900      	cmp	r1, #0
 80088a0:	bf18      	it	ne
 80088a2:	2800      	cmpne	r0, #0
 80088a4:	d024      	beq.n	80088f0 <osMessageQueuePut+0x5e>
 80088a6:	bb34      	cbnz	r4, 80088f6 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80088ac:	aa01      	add	r2, sp, #4
 80088ae:	f000 fe24 	bl	80094fa <xQueueGenericSendFromISR>
 80088b2:	2801      	cmp	r0, #1
 80088b4:	d122      	bne.n	80088fc <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80088b6:	9801      	ldr	r0, [sp, #4]
 80088b8:	b150      	cbz	r0, 80088d0 <osMessageQueuePut+0x3e>
 80088ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80088ce:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80088d0:	b002      	add	sp, #8
 80088d2:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088d4:	2900      	cmp	r1, #0
 80088d6:	bf18      	it	ne
 80088d8:	2800      	cmpne	r0, #0
 80088da:	d012      	beq.n	8008902 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088dc:	2300      	movs	r3, #0
 80088de:	4622      	mov	r2, r4
 80088e0:	f000 fd47 	bl	8009372 <xQueueGenericSend>
 80088e4:	2801      	cmp	r0, #1
 80088e6:	d00f      	beq.n	8008908 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 80088e8:	b184      	cbz	r4, 800890c <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 80088ea:	f06f 0001 	mvn.w	r0, #1
 80088ee:	e7ef      	b.n	80088d0 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80088f0:	f06f 0003 	mvn.w	r0, #3
 80088f4:	e7ec      	b.n	80088d0 <osMessageQueuePut+0x3e>
 80088f6:	f06f 0003 	mvn.w	r0, #3
 80088fa:	e7e9      	b.n	80088d0 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 80088fc:	f06f 0002 	mvn.w	r0, #2
 8008900:	e7e6      	b.n	80088d0 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008902:	f06f 0003 	mvn.w	r0, #3
 8008906:	e7e3      	b.n	80088d0 <osMessageQueuePut+0x3e>
  stat = osOK;
 8008908:	2000      	movs	r0, #0
 800890a:	e7e1      	b.n	80088d0 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800890c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008910:	e7de      	b.n	80088d0 <osMessageQueuePut+0x3e>

08008912 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008912:	b510      	push	{r4, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	461c      	mov	r4, r3
 8008918:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800891c:	b1d3      	cbz	r3, 8008954 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800891e:	2900      	cmp	r1, #0
 8008920:	bf18      	it	ne
 8008922:	2800      	cmpne	r0, #0
 8008924:	d023      	beq.n	800896e <osMessageQueueGet+0x5c>
 8008926:	bb2c      	cbnz	r4, 8008974 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800892c:	aa01      	add	r2, sp, #4
 800892e:	f001 f826 	bl	800997e <xQueueReceiveFromISR>
 8008932:	2801      	cmp	r0, #1
 8008934:	d121      	bne.n	800897a <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008936:	9801      	ldr	r0, [sp, #4]
 8008938:	b150      	cbz	r0, 8008950 <osMessageQueueGet+0x3e>
 800893a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800894e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008950:	b002      	add	sp, #8
 8008952:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008954:	2900      	cmp	r1, #0
 8008956:	bf18      	it	ne
 8008958:	2800      	cmpne	r0, #0
 800895a:	d011      	beq.n	8008980 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800895c:	4622      	mov	r2, r4
 800895e:	f000 fe8c 	bl	800967a <xQueueReceive>
 8008962:	2801      	cmp	r0, #1
 8008964:	d00f      	beq.n	8008986 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 8008966:	b184      	cbz	r4, 800898a <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 8008968:	f06f 0001 	mvn.w	r0, #1
 800896c:	e7f0      	b.n	8008950 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800896e:	f06f 0003 	mvn.w	r0, #3
 8008972:	e7ed      	b.n	8008950 <osMessageQueueGet+0x3e>
 8008974:	f06f 0003 	mvn.w	r0, #3
 8008978:	e7ea      	b.n	8008950 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800897a:	f06f 0002 	mvn.w	r0, #2
 800897e:	e7e7      	b.n	8008950 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 8008980:	f06f 0003 	mvn.w	r0, #3
 8008984:	e7e4      	b.n	8008950 <osMessageQueueGet+0x3e>
  stat = osOK;
 8008986:	2000      	movs	r0, #0
 8008988:	e7e2      	b.n	8008950 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800898a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800898e:	e7df      	b.n	8008950 <osMessageQueueGet+0x3e>

08008990 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008990:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <vApplicationGetIdleTaskMemory+0x10>)
 8008992:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008994:	4b03      	ldr	r3, [pc, #12]	; (80089a4 <vApplicationGetIdleTaskMemory+0x14>)
 8008996:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	6013      	str	r3, [r2, #0]
}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	240021f0 	.word	0x240021f0
 80089a4:	24001ff0 	.word	0x24001ff0

080089a8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089a8:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <vApplicationGetTimerTaskMemory+0x10>)
 80089aa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089ac:	4b03      	ldr	r3, [pc, #12]	; (80089bc <vApplicationGetTimerTaskMemory+0x14>)
 80089ae:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b4:	6013      	str	r3, [r2, #0]
}
 80089b6:	4770      	bx	lr
 80089b8:	240026b0 	.word	0x240026b0
 80089bc:	240022b0 	.word	0x240022b0

080089c0 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089c0:	4a12      	ldr	r2, [pc, #72]	; (8008a0c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089c2:	f012 0f07 	tst.w	r2, #7
 80089c6:	d01e      	beq.n	8008a06 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089c8:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089ca:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ce:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 80089d2:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d4:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089d6:	480e      	ldr	r0, [pc, #56]	; (8008a10 <prvHeapInit+0x50>)
 80089d8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089da:	2100      	movs	r1, #0
 80089dc:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089de:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80089e0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089e2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80089e6:	480b      	ldr	r0, [pc, #44]	; (8008a14 <prvHeapInit+0x54>)
 80089e8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80089ea:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ec:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ee:	1a99      	subs	r1, r3, r2
 80089f0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089f2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <prvHeapInit+0x58>)
 80089f6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <prvHeapInit+0x5c>)
 80089fa:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <prvHeapInit+0x60>)
 80089fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0a:	e7e4      	b.n	80089d6 <prvHeapInit+0x16>
 8008a0c:	24002770 	.word	0x24002770
 8008a10:	2400a784 	.word	0x2400a784
 8008a14:	2400276c 	.word	0x2400276c
 8008a18:	2400a778 	.word	0x2400a778
 8008a1c:	2400a774 	.word	0x2400a774
 8008a20:	2400a770 	.word	0x2400a770

08008a24 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <prvInsertBlockIntoFreeList+0x5c>)
 8008a26:	461a      	mov	r2, r3
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	d3fb      	bcc.n	8008a26 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a2e:	6851      	ldr	r1, [r2, #4]
 8008a30:	eb02 0c01 	add.w	ip, r2, r1
 8008a34:	4584      	cmp	ip, r0
 8008a36:	d009      	beq.n	8008a4c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a38:	6841      	ldr	r1, [r0, #4]
 8008a3a:	eb00 0c01 	add.w	ip, r0, r1
 8008a3e:	4563      	cmp	r3, ip
 8008a40:	d009      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a42:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a44:	4290      	cmp	r0, r2
 8008a46:	d019      	beq.n	8008a7c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a48:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8008a4a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a4c:	6840      	ldr	r0, [r0, #4]
 8008a4e:	4401      	add	r1, r0
 8008a50:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008a52:	4610      	mov	r0, r2
 8008a54:	e7f0      	b.n	8008a38 <prvInsertBlockIntoFreeList+0x14>
{
 8008a56:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a58:	4c0a      	ldr	r4, [pc, #40]	; (8008a84 <prvInsertBlockIntoFreeList+0x60>)
 8008a5a:	6824      	ldr	r4, [r4, #0]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d00b      	beq.n	8008a78 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4419      	add	r1, r3
 8008a64:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a66:	6813      	ldr	r3, [r2, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008a6c:	4290      	cmp	r0, r2
 8008a6e:	d000      	beq.n	8008a72 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a70:	6010      	str	r0, [r2, #0]
	}
}
 8008a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a76:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	e7f7      	b.n	8008a6c <prvInsertBlockIntoFreeList+0x48>
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	2400a784 	.word	0x2400a784
 8008a84:	2400276c 	.word	0x2400276c

08008a88 <pvPortMalloc>:
{
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8008a8c:	f001 faa0 	bl	8009fd0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008a90:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <pvPortMalloc+0xe4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	b1a3      	cbz	r3, 8008ac0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a96:	4b36      	ldr	r3, [pc, #216]	; (8008b70 <pvPortMalloc+0xe8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	421d      	tst	r5, r3
 8008a9c:	d14e      	bne.n	8008b3c <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8008a9e:	b135      	cbz	r5, 8008aae <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8008aa0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa2:	f015 0f07 	tst.w	r5, #7
 8008aa6:	d002      	beq.n	8008aae <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aa8:	f025 0507 	bic.w	r5, r5, #7
 8008aac:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	d046      	beq.n	8008b40 <pvPortMalloc+0xb8>
 8008ab2:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <pvPortMalloc+0xec>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	42ab      	cmp	r3, r5
 8008ab8:	d351      	bcc.n	8008b5e <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8008aba:	4a2f      	ldr	r2, [pc, #188]	; (8008b78 <pvPortMalloc+0xf0>)
 8008abc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008abe:	e004      	b.n	8008aca <pvPortMalloc+0x42>
			prvHeapInit();
 8008ac0:	f7ff ff7e 	bl	80089c0 <prvHeapInit>
 8008ac4:	e7e7      	b.n	8008a96 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008ac6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ac8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	42ab      	cmp	r3, r5
 8008ace:	d202      	bcs.n	8008ad6 <pvPortMalloc+0x4e>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1f7      	bne.n	8008ac6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008ad6:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <pvPortMalloc+0xe4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	d041      	beq.n	8008b62 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ade:	6816      	ldr	r6, [r2, #0]
 8008ae0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ae6:	6863      	ldr	r3, [r4, #4]
 8008ae8:	1b5b      	subs	r3, r3, r5
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d910      	bls.n	8008b10 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aee:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af0:	f010 0f07 	tst.w	r0, #7
 8008af4:	d008      	beq.n	8008b08 <pvPortMalloc+0x80>
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	e7fe      	b.n	8008b06 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b08:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b0a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b0c:	f7ff ff8a 	bl	8008a24 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b10:	6862      	ldr	r2, [r4, #4]
 8008b12:	4918      	ldr	r1, [pc, #96]	; (8008b74 <pvPortMalloc+0xec>)
 8008b14:	680b      	ldr	r3, [r1, #0]
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b1a:	4918      	ldr	r1, [pc, #96]	; (8008b7c <pvPortMalloc+0xf4>)
 8008b1c:	6809      	ldr	r1, [r1, #0]
 8008b1e:	428b      	cmp	r3, r1
 8008b20:	d201      	bcs.n	8008b26 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b22:	4916      	ldr	r1, [pc, #88]	; (8008b7c <pvPortMalloc+0xf4>)
 8008b24:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <pvPortMalloc+0xe8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8008b32:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <pvPortMalloc+0xf8>)
 8008b34:	6813      	ldr	r3, [r2, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e002      	b.n	8008b42 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	e000      	b.n	8008b42 <pvPortMalloc+0xba>
 8008b40:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8008b42:	f001 fadf 	bl	800a104 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b46:	f016 0f07 	tst.w	r6, #7
 8008b4a:	d00c      	beq.n	8008b66 <pvPortMalloc+0xde>
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	e7fe      	b.n	8008b5c <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8008b5e:	2600      	movs	r6, #0
 8008b60:	e7ef      	b.n	8008b42 <pvPortMalloc+0xba>
 8008b62:	2600      	movs	r6, #0
 8008b64:	e7ed      	b.n	8008b42 <pvPortMalloc+0xba>
}
 8008b66:	4630      	mov	r0, r6
 8008b68:	bd70      	pop	{r4, r5, r6, pc}
 8008b6a:	bf00      	nop
 8008b6c:	2400276c 	.word	0x2400276c
 8008b70:	2400a770 	.word	0x2400a770
 8008b74:	2400a774 	.word	0x2400a774
 8008b78:	2400a784 	.word	0x2400a784
 8008b7c:	2400a778 	.word	0x2400a778
 8008b80:	2400a77c 	.word	0x2400a77c

08008b84 <vPortFree>:
	if( pv != NULL )
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d034      	beq.n	8008bf2 <vPortFree+0x6e>
{
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008b8c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <vPortFree+0x70>)
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	4213      	tst	r3, r2
 8008b9a:	d108      	bne.n	8008bae <vPortFree+0x2a>
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	e7fe      	b.n	8008bac <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008bb2:	b141      	cbz	r1, 8008bc6 <vPortFree+0x42>
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	e7fe      	b.n	8008bc4 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bc6:	ea23 0302 	bic.w	r3, r3, r2
 8008bca:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008bce:	f001 f9ff 	bl	8009fd0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bd2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008bd6:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <vPortFree+0x74>)
 8008bd8:	6813      	ldr	r3, [r2, #0]
 8008bda:	440b      	add	r3, r1
 8008bdc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7ff ff20 	bl	8008a24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008be4:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <vPortFree+0x78>)
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	3301      	adds	r3, #1
 8008bea:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008bec:	f001 fa8a 	bl	800a104 <xTaskResumeAll>
}
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	4770      	bx	lr
 8008bf4:	2400a770 	.word	0x2400a770
 8008bf8:	2400a774 	.word	0x2400a774
 8008bfc:	2400a780 	.word	0x2400a780

08008c00 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c00:	f100 0308 	add.w	r3, r0, #8
 8008c04:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c06:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c0e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c14:	4770      	bx	lr

08008c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c1a:	4770      	bx	lr

08008c1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c1c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c1e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c20:	689a      	ldr	r2, [r3, #8]
 8008c22:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c24:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c26:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c28:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008c2a:	6803      	ldr	r3, [r0, #0]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	6003      	str	r3, [r0, #0]
}
 8008c30:	4770      	bx	lr

08008c32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c32:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c34:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c36:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008c3a:	d011      	beq.n	8008c60 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c3c:	f100 0308 	add.w	r3, r0, #8
 8008c40:	461c      	mov	r4, r3
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	42aa      	cmp	r2, r5
 8008c48:	d9fa      	bls.n	8008c40 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c4e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c50:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c52:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c54:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	6003      	str	r3, [r0, #0]
}
 8008c5c:	bc30      	pop	{r4, r5}
 8008c5e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c60:	6904      	ldr	r4, [r0, #16]
 8008c62:	e7f2      	b.n	8008c4a <vListInsert+0x18>

08008c64 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c64:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c66:	6841      	ldr	r1, [r0, #4]
 8008c68:	6882      	ldr	r2, [r0, #8]
 8008c6a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c6c:	6841      	ldr	r1, [r0, #4]
 8008c6e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4282      	cmp	r2, r0
 8008c74:	d006      	beq.n	8008c84 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c76:	2200      	movs	r2, #0
 8008c78:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c80:	6818      	ldr	r0, [r3, #0]
}
 8008c82:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c84:	6882      	ldr	r2, [r0, #8]
 8008c86:	605a      	str	r2, [r3, #4]
 8008c88:	e7f5      	b.n	8008c76 <uxListRemove+0x12>
	...

08008c8c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c8c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c92:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <prvTaskExitError+0x3c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9a:	d008      	beq.n	8008cae <prvTaskExitError+0x22>
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	e7fe      	b.n	8008cac <prvTaskExitError+0x20>
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0fc      	beq.n	8008cbe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cc4:	b002      	add	sp, #8
 8008cc6:	4770      	bx	lr
 8008cc8:	2400004c 	.word	0x2400004c

08008ccc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ccc:	4808      	ldr	r0, [pc, #32]	; (8008cf0 <prvPortStartFirstTask+0x24>)
 8008cce:	6800      	ldr	r0, [r0, #0]
 8008cd0:	6800      	ldr	r0, [r0, #0]
 8008cd2:	f380 8808 	msr	MSP, r0
 8008cd6:	f04f 0000 	mov.w	r0, #0
 8008cda:	f380 8814 	msr	CONTROL, r0
 8008cde:	b662      	cpsie	i
 8008ce0:	b661      	cpsie	f
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	df00      	svc	0
 8008cec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cee:	0000      	.short	0x0000
 8008cf0:	e000ed08 	.word	0xe000ed08

08008cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d04 <vPortEnableVFP+0x10>
 8008cf8:	6801      	ldr	r1, [r0, #0]
 8008cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cfe:	6001      	str	r1, [r0, #0]
 8008d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d02:	0000      	.short	0x0000
 8008d04:	e000ed88 	.word	0xe000ed88

08008d08 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d0c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d10:	f021 0101 	bic.w	r1, r1, #1
 8008d14:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <pxPortInitialiseStack+0x28>)
 8008d1a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d1e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d22:	f06f 0302 	mvn.w	r3, #2
 8008d26:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008d2a:	3844      	subs	r0, #68	; 0x44
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	08008c8d 	.word	0x08008c8d
	...

08008d40 <SVC_Handler>:
	__asm volatile (
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <pxCurrentTCBConst2>)
 8008d42:	6819      	ldr	r1, [r3, #0]
 8008d44:	6808      	ldr	r0, [r1, #0]
 8008d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	f380 8809 	msr	PSP, r0
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f380 8811 	msr	BASEPRI, r0
 8008d5a:	4770      	bx	lr
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst2>:
 8008d60:	2400a7d4 	.word	0x2400a7d4

08008d64 <vPortEnterCritical>:
 8008d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008d74:	4a0b      	ldr	r2, [pc, #44]	; (8008da4 <vPortEnterCritical+0x40>)
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d000      	beq.n	8008d82 <vPortEnterCritical+0x1e>
}
 8008d80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008d8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d8e:	d0f7      	beq.n	8008d80 <vPortEnterCritical+0x1c>
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	e7fe      	b.n	8008da0 <vPortEnterCritical+0x3c>
 8008da2:	bf00      	nop
 8008da4:	2400004c 	.word	0x2400004c

08008da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008da8:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <vPortExitCritical+0x28>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	b943      	cbnz	r3, 8008dc0 <vPortExitCritical+0x18>
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	e7fe      	b.n	8008dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	4a03      	ldr	r2, [pc, #12]	; (8008dd0 <vPortExitCritical+0x28>)
 8008dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dc6:	b90b      	cbnz	r3, 8008dcc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dc8:	f383 8811 	msr	BASEPRI, r3
}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	2400004c 	.word	0x2400004c
	...

08008de0 <PendSV_Handler>:
	__asm volatile
 8008de0:	f3ef 8009 	mrs	r0, PSP
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <pxCurrentTCBConst>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f01e 0f10 	tst.w	lr, #16
 8008df0:	bf08      	it	eq
 8008df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	6010      	str	r0, [r2, #0]
 8008dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e04:	f380 8811 	msr	BASEPRI, r0
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f001 fa1a 	bl	800a248 <vTaskSwitchContext>
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f380 8811 	msr	BASEPRI, r0
 8008e1c:	bc09      	pop	{r0, r3}
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6808      	ldr	r0, [r1, #0]
 8008e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e26:	f01e 0f10 	tst.w	lr, #16
 8008e2a:	bf08      	it	eq
 8008e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e30:	f380 8809 	msr	PSP, r0
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst>:
 8008e40:	2400a7d4 	.word	0x2400a7d4

08008e44 <xPortSysTickHandler>:
{
 8008e44:	b508      	push	{r3, lr}
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008e56:	f001 f8c9 	bl	8009fec <xTaskIncrementTick>
 8008e5a:	b128      	cbz	r0, 8008e68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f383 8811 	msr	BASEPRI, r3
}
 8008e6e:	bd08      	pop	{r3, pc}

08008e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008e74:	2300      	movs	r3, #0
 8008e76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <vPortSetupTimerInterrupt+0x20>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4905      	ldr	r1, [pc, #20]	; (8008e94 <vPortSetupTimerInterrupt+0x24>)
 8008e80:	fba1 1303 	umull	r1, r3, r1, r3
 8008e84:	099b      	lsrs	r3, r3, #6
 8008e86:	3b01      	subs	r3, #1
 8008e88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e8a:	2307      	movs	r3, #7
 8008e8c:	6113      	str	r3, [r2, #16]
}
 8008e8e:	4770      	bx	lr
 8008e90:	2400003c 	.word	0x2400003c
 8008e94:	10624dd3 	.word	0x10624dd3

08008e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008ea0:	4b3d      	ldr	r3, [pc, #244]	; (8008f98 <xPortStartScheduler+0x100>)
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d01c      	beq.n	8008ee0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ea6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008eaa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008eae:	4b3b      	ldr	r3, [pc, #236]	; (8008f9c <xPortStartScheduler+0x104>)
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d01e      	beq.n	8008ef2 <xPortStartScheduler+0x5a>
{
 8008eb4:	b530      	push	{r4, r5, lr}
 8008eb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008eb8:	4b39      	ldr	r3, [pc, #228]	; (8008fa0 <xPortStartScheduler+0x108>)
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ec0:	22ff      	movs	r2, #255	; 0xff
 8008ec2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ecc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ed0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ed4:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <xPortStartScheduler+0x10c>)
 8008ed6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ed8:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <xPortStartScheduler+0x110>)
 8008eda:	2207      	movs	r2, #7
 8008edc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ede:	e01b      	b.n	8008f18 <xPortStartScheduler+0x80>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ef0:	e7fe      	b.n	8008ef0 <xPortStartScheduler+0x58>
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f02:	e7fe      	b.n	8008f02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8008f04:	4a28      	ldr	r2, [pc, #160]	; (8008fa8 <xPortStartScheduler+0x110>)
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008f1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f20:	d1f0      	bne.n	8008f04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f22:	4b21      	ldr	r3, [pc, #132]	; (8008fa8 <xPortStartScheduler+0x110>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d008      	beq.n	8008f3c <xPortStartScheduler+0xa4>
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	e7fe      	b.n	8008f3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	4a1a      	ldr	r2, [pc, #104]	; (8008fa8 <xPortStartScheduler+0x110>)
 8008f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <xPortStartScheduler+0x108>)
 8008f4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f50:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008f54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008f64:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008f6c:	f7ff ff80 	bl	8008e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008f70:	2500      	movs	r5, #0
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <xPortStartScheduler+0x114>)
 8008f74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008f76:	f7ff febd 	bl	8008cf4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008f7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f82:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008f86:	f7ff fea1 	bl	8008ccc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008f8a:	f001 f95d 	bl	800a248 <vTaskSwitchContext>
	prvTaskExitError();
 8008f8e:	f7ff fe7d 	bl	8008c8c <prvTaskExitError>
}
 8008f92:	4628      	mov	r0, r5
 8008f94:	b003      	add	sp, #12
 8008f96:	bd30      	pop	{r4, r5, pc}
 8008f98:	410fc271 	.word	0x410fc271
 8008f9c:	410fc270 	.word	0x410fc270
 8008fa0:	e000e400 	.word	0xe000e400
 8008fa4:	2400a78c 	.word	0x2400a78c
 8008fa8:	2400a790 	.word	0x2400a790
 8008fac:	2400004c 	.word	0x2400004c

08008fb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fb4:	2b0f      	cmp	r3, #15
 8008fb6:	d90f      	bls.n	8008fd8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fb8:	4a11      	ldr	r2, [pc, #68]	; (8009000 <vPortValidateInterruptPriority+0x50>)
 8008fba:	5c9b      	ldrb	r3, [r3, r2]
 8008fbc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fbe:	4a11      	ldr	r2, [pc, #68]	; (8009004 <vPortValidateInterruptPriority+0x54>)
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d908      	bls.n	8008fd8 <vPortValidateInterruptPriority+0x28>
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	e7fe      	b.n	8008fd6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fdc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <vPortValidateInterruptPriority+0x58>)
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d908      	bls.n	8008ffe <vPortValidateInterruptPriority+0x4e>
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	e7fe      	b.n	8008ffc <vPortValidateInterruptPriority+0x4c>
	}
 8008ffe:	4770      	bx	lr
 8009000:	e000e3f0 	.word	0xe000e3f0
 8009004:	2400a78c 	.word	0x2400a78c
 8009008:	2400a790 	.word	0x2400a790

0800900c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800900c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800900e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009010:	b118      	cbz	r0, 800901a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800901a:	4770      	bx	lr

0800901c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800901c:	b510      	push	{r4, lr}
 800901e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009020:	f7ff fea0 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009024:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009026:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009028:	429a      	cmp	r2, r3
 800902a:	d004      	beq.n	8009036 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800902c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800902e:	f7ff febb 	bl	8008da8 <vPortExitCritical>

	return xReturn;
}
 8009032:	4620      	mov	r0, r4
 8009034:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009036:	2401      	movs	r4, #1
 8009038:	e7f9      	b.n	800902e <prvIsQueueFull+0x12>

0800903a <prvIsQueueEmpty>:
{
 800903a:	b510      	push	{r4, lr}
 800903c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800903e:	f7ff fe91 	bl	8008d64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009044:	b923      	cbnz	r3, 8009050 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009046:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009048:	f7ff feae 	bl	8008da8 <vPortExitCritical>
}
 800904c:	4620      	mov	r0, r4
 800904e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8009050:	2400      	movs	r4, #0
 8009052:	e7f9      	b.n	8009048 <prvIsQueueEmpty+0xe>

08009054 <prvCopyDataToQueue>:
{
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4604      	mov	r4, r0
 8009058:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800905a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800905c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800905e:	b95a      	cbnz	r2, 8009078 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009060:	6803      	ldr	r3, [r0, #0]
 8009062:	b11b      	cbz	r3, 800906c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009064:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009066:	3601      	adds	r6, #1
 8009068:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800906a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800906c:	6880      	ldr	r0, [r0, #8]
 800906e:	f001 fa65 	bl	800a53c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	e7f6      	b.n	8009066 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009078:	b96d      	cbnz	r5, 8009096 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800907a:	6840      	ldr	r0, [r0, #4]
 800907c:	f00e ff3a 	bl	8017ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009080:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009082:	6863      	ldr	r3, [r4, #4]
 8009084:	4413      	add	r3, r2
 8009086:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009088:	68a2      	ldr	r2, [r4, #8]
 800908a:	4293      	cmp	r3, r2
 800908c:	d319      	bcc.n	80090c2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009092:	4628      	mov	r0, r5
 8009094:	e7e7      	b.n	8009066 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009096:	68c0      	ldr	r0, [r0, #12]
 8009098:	f00e ff2c 	bl	8017ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800909c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800909e:	4251      	negs	r1, r2
 80090a0:	68e3      	ldr	r3, [r4, #12]
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d202      	bcs.n	80090b2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090ac:	68a3      	ldr	r3, [r4, #8]
 80090ae:	440b      	add	r3, r1
 80090b0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80090b2:	2d02      	cmp	r5, #2
 80090b4:	d001      	beq.n	80090ba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80090b6:	2000      	movs	r0, #0
 80090b8:	e7d5      	b.n	8009066 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ba:	b126      	cbz	r6, 80090c6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80090bc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80090be:	2000      	movs	r0, #0
 80090c0:	e7d1      	b.n	8009066 <prvCopyDataToQueue+0x12>
 80090c2:	4628      	mov	r0, r5
 80090c4:	e7cf      	b.n	8009066 <prvCopyDataToQueue+0x12>
 80090c6:	2000      	movs	r0, #0
 80090c8:	e7cd      	b.n	8009066 <prvCopyDataToQueue+0x12>

080090ca <prvCopyDataFromQueue>:
{
 80090ca:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090ce:	b16a      	cbz	r2, 80090ec <prvCopyDataFromQueue+0x22>
{
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090d4:	68d9      	ldr	r1, [r3, #12]
 80090d6:	4411      	add	r1, r2
 80090d8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090da:	689c      	ldr	r4, [r3, #8]
 80090dc:	42a1      	cmp	r1, r4
 80090de:	d301      	bcc.n	80090e4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090e0:	6819      	ldr	r1, [r3, #0]
 80090e2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090e4:	68d9      	ldr	r1, [r3, #12]
 80090e6:	f00e ff05 	bl	8017ef4 <memcpy>
}
 80090ea:	bd10      	pop	{r4, pc}
 80090ec:	4770      	bx	lr

080090ee <prvUnlockQueue>:
{
 80090ee:	b538      	push	{r3, r4, r5, lr}
 80090f0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80090f2:	f7ff fe37 	bl	8008d64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80090f6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80090fa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090fc:	e001      	b.n	8009102 <prvUnlockQueue+0x14>
			--cTxLock;
 80090fe:	3c01      	subs	r4, #1
 8009100:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009102:	2c00      	cmp	r4, #0
 8009104:	dd0a      	ble.n	800911c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009108:	b143      	cbz	r3, 800911c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800910a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800910e:	f001 f91f 	bl	800a350 <xTaskRemoveFromEventList>
 8009112:	2800      	cmp	r0, #0
 8009114:	d0f3      	beq.n	80090fe <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009116:	f001 f9af 	bl	800a478 <vTaskMissedYield>
 800911a:	e7f0      	b.n	80090fe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800911c:	23ff      	movs	r3, #255	; 0xff
 800911e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009122:	f7ff fe41 	bl	8008da8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009126:	f7ff fe1d 	bl	8008d64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800912a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800912e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009130:	e001      	b.n	8009136 <prvUnlockQueue+0x48>
				--cRxLock;
 8009132:	3c01      	subs	r4, #1
 8009134:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009136:	2c00      	cmp	r4, #0
 8009138:	dd0a      	ble.n	8009150 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800913a:	692b      	ldr	r3, [r5, #16]
 800913c:	b143      	cbz	r3, 8009150 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800913e:	f105 0010 	add.w	r0, r5, #16
 8009142:	f001 f905 	bl	800a350 <xTaskRemoveFromEventList>
 8009146:	2800      	cmp	r0, #0
 8009148:	d0f3      	beq.n	8009132 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800914a:	f001 f995 	bl	800a478 <vTaskMissedYield>
 800914e:	e7f0      	b.n	8009132 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009150:	23ff      	movs	r3, #255	; 0xff
 8009152:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009156:	f7ff fe27 	bl	8008da8 <vPortExitCritical>
}
 800915a:	bd38      	pop	{r3, r4, r5, pc}

0800915c <xQueueGenericReset>:
{
 800915c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800915e:	b1e0      	cbz	r0, 800919a <xQueueGenericReset+0x3e>
 8009160:	460d      	mov	r5, r1
 8009162:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009164:	f7ff fdfe 	bl	8008d64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800916c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800916e:	fb01 3002 	mla	r0, r1, r2, r3
 8009172:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009174:	2000      	movs	r0, #0
 8009176:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009178:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800917a:	3a01      	subs	r2, #1
 800917c:	fb02 3301 	mla	r3, r2, r1, r3
 8009180:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009182:	23ff      	movs	r3, #255	; 0xff
 8009184:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009188:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800918c:	b9fd      	cbnz	r5, 80091ce <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	b963      	cbnz	r3, 80091ac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009192:	f7ff fe09 	bl	8008da8 <vPortExitCritical>
}
 8009196:	2001      	movs	r0, #1
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80091aa:	e7fe      	b.n	80091aa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ac:	f104 0010 	add.w	r0, r4, #16
 80091b0:	f001 f8ce 	bl	800a350 <xTaskRemoveFromEventList>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d0ec      	beq.n	8009192 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80091b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	e7e1      	b.n	8009192 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091ce:	f104 0010 	add.w	r0, r4, #16
 80091d2:	f7ff fd15 	bl	8008c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091da:	f7ff fd11 	bl	8008c00 <vListInitialise>
 80091de:	e7d8      	b.n	8009192 <xQueueGenericReset+0x36>

080091e0 <prvInitialiseNewQueue>:
{
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	461d      	mov	r5, r3
 80091e4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091e6:	460b      	mov	r3, r1
 80091e8:	b949      	cbnz	r1, 80091fe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80091ec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091ee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091f0:	2101      	movs	r1, #1
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff ffb2 	bl	800915c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80091f8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091fe:	6022      	str	r2, [r4, #0]
 8009200:	e7f4      	b.n	80091ec <prvInitialiseNewQueue+0xc>

08009202 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009202:	b940      	cbnz	r0, 8009216 <xQueueGenericCreateStatic+0x14>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	e7fe      	b.n	8009214 <xQueueGenericCreateStatic+0x12>
	{
 8009216:	b510      	push	{r4, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800921c:	b183      	cbz	r3, 8009240 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800921e:	1e0b      	subs	r3, r1, #0
 8009220:	bf18      	it	ne
 8009222:	2301      	movne	r3, #1
 8009224:	2a00      	cmp	r2, #0
 8009226:	bf08      	it	eq
 8009228:	f043 0301 	orreq.w	r3, r3, #1
 800922c:	b98b      	cbnz	r3, 8009252 <xQueueGenericCreateStatic+0x50>
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	e7fe      	b.n	800923e <xQueueGenericCreateStatic+0x3c>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009250:	e7fe      	b.n	8009250 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009252:	fab1 f381 	clz	r3, r1
 8009256:	095b      	lsrs	r3, r3, #5
 8009258:	2a00      	cmp	r2, #0
 800925a:	bf18      	it	ne
 800925c:	f043 0301 	orrne.w	r3, r3, #1
 8009260:	b943      	cbnz	r3, 8009274 <xQueueGenericCreateStatic+0x72>
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	e7fe      	b.n	8009272 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009274:	2350      	movs	r3, #80	; 0x50
 8009276:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	2b50      	cmp	r3, #80	; 0x50
 800927c:	d008      	beq.n	8009290 <xQueueGenericCreateStatic+0x8e>
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	e7fe      	b.n	800928e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009290:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009292:	2301      	movs	r3, #1
 8009294:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009298:	9400      	str	r4, [sp, #0]
 800929a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800929e:	f7ff ff9f 	bl	80091e0 <prvInitialiseNewQueue>
	}
 80092a2:	4620      	mov	r0, r4
 80092a4:	b004      	add	sp, #16
 80092a6:	bd10      	pop	{r4, pc}

080092a8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092a8:	b940      	cbnz	r0, 80092bc <xQueueGenericCreate+0x14>
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericCreate+0x12>
	{
 80092bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092be:	b083      	sub	sp, #12
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092ca:	3050      	adds	r0, #80	; 0x50
 80092cc:	f7ff fbdc 	bl	8008a88 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80092d0:	4607      	mov	r7, r0
 80092d2:	b150      	cbz	r0, 80092ea <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092da:	9000      	str	r0, [sp, #0]
 80092dc:	4623      	mov	r3, r4
 80092de:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80092e2:	4629      	mov	r1, r5
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff ff7b 	bl	80091e0 <prvInitialiseNewQueue>
	}
 80092ea:	4638      	mov	r0, r7
 80092ec:	b003      	add	sp, #12
 80092ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092f0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80092f0:	b940      	cbnz	r0, 8009304 <xQueueCreateCountingSemaphoreStatic+0x14>
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	e7fe      	b.n	8009302 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8009304:	b510      	push	{r4, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800930a:	4288      	cmp	r0, r1
 800930c:	d208      	bcs.n	8009320 <xQueueCreateCountingSemaphoreStatic+0x30>
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	e7fe      	b.n	800931e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009320:	2302      	movs	r3, #2
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4613      	mov	r3, r2
 8009326:	2200      	movs	r2, #0
 8009328:	4611      	mov	r1, r2
 800932a:	f7ff ff6a 	bl	8009202 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800932e:	b100      	cbz	r0, 8009332 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009330:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009332:	b002      	add	sp, #8
 8009334:	bd10      	pop	{r4, pc}

08009336 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009336:	b940      	cbnz	r0, 800934a <xQueueCreateCountingSemaphore+0x14>
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	e7fe      	b.n	8009348 <xQueueCreateCountingSemaphore+0x12>
	{
 800934a:	b510      	push	{r4, lr}
 800934c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800934e:	4288      	cmp	r0, r1
 8009350:	d208      	bcs.n	8009364 <xQueueCreateCountingSemaphore+0x2e>
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	e7fe      	b.n	8009362 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009364:	2202      	movs	r2, #2
 8009366:	2100      	movs	r1, #0
 8009368:	f7ff ff9e 	bl	80092a8 <xQueueGenericCreate>
		if( xHandle != NULL )
 800936c:	b100      	cbz	r0, 8009370 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800936e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009370:	bd10      	pop	{r4, pc}

08009372 <xQueueGenericSend>:
{
 8009372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009374:	b085      	sub	sp, #20
 8009376:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009378:	b188      	cbz	r0, 800939e <xQueueGenericSend+0x2c>
 800937a:	460f      	mov	r7, r1
 800937c:	461d      	mov	r5, r3
 800937e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009380:	b1b1      	cbz	r1, 80093b0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009382:	2d02      	cmp	r5, #2
 8009384:	d120      	bne.n	80093c8 <xQueueGenericSend+0x56>
 8009386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009388:	2b01      	cmp	r3, #1
 800938a:	d01d      	beq.n	80093c8 <xQueueGenericSend+0x56>
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	e7fe      	b.n	800939c <xQueueGenericSend+0x2a>
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80093ae:	e7fe      	b.n	80093ae <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0e5      	beq.n	8009382 <xQueueGenericSend+0x10>
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	e7fe      	b.n	80093c6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093c8:	f001 f85c 	bl	800a484 <xTaskGetSchedulerState>
 80093cc:	4606      	mov	r6, r0
 80093ce:	b958      	cbnz	r0, 80093e8 <xQueueGenericSend+0x76>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d048      	beq.n	8009468 <xQueueGenericSend+0xf6>
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	e7fe      	b.n	80093e6 <xQueueGenericSend+0x74>
 80093e8:	2600      	movs	r6, #0
 80093ea:	e03d      	b.n	8009468 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093ec:	462a      	mov	r2, r5
 80093ee:	4639      	mov	r1, r7
 80093f0:	4620      	mov	r0, r4
 80093f2:	f7ff fe2f 	bl	8009054 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f8:	b97b      	cbnz	r3, 800941a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80093fa:	b148      	cbz	r0, 8009410 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80093fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009404:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009410:	f7ff fcca 	bl	8008da8 <vPortExitCritical>
				return pdPASS;
 8009414:	2001      	movs	r0, #1
}
 8009416:	b005      	add	sp, #20
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800941a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800941e:	f000 ff97 	bl	800a350 <xTaskRemoveFromEventList>
 8009422:	2800      	cmp	r0, #0
 8009424:	d0f4      	beq.n	8009410 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009426:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800942a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	e7e9      	b.n	8009410 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800943c:	f7ff fcb4 	bl	8008da8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009440:	2000      	movs	r0, #0
 8009442:	e7e8      	b.n	8009416 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009444:	a802      	add	r0, sp, #8
 8009446:	f000 ffc9 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800944a:	2601      	movs	r6, #1
 800944c:	e019      	b.n	8009482 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800944e:	2300      	movs	r3, #0
 8009450:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009454:	e021      	b.n	800949a <xQueueGenericSend+0x128>
 8009456:	2300      	movs	r3, #0
 8009458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800945c:	e023      	b.n	80094a6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800945e:	4620      	mov	r0, r4
 8009460:	f7ff fe45 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009464:	f000 fe4e 	bl	800a104 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009468:	f7ff fc7c 	bl	8008d64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800946c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800946e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009470:	429a      	cmp	r2, r3
 8009472:	d3bb      	bcc.n	80093ec <xQueueGenericSend+0x7a>
 8009474:	2d02      	cmp	r5, #2
 8009476:	d0b9      	beq.n	80093ec <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0de      	beq.n	800943c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800947e:	2e00      	cmp	r6, #0
 8009480:	d0e0      	beq.n	8009444 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009482:	f7ff fc91 	bl	8008da8 <vPortExitCritical>
		vTaskSuspendAll();
 8009486:	f000 fda3 	bl	8009fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800948a:	f7ff fc6b 	bl	8008d64 <vPortEnterCritical>
 800948e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009492:	b252      	sxtb	r2, r2
 8009494:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009498:	d0d9      	beq.n	800944e <xQueueGenericSend+0xdc>
 800949a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800949e:	b252      	sxtb	r2, r2
 80094a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094a4:	d0d7      	beq.n	8009456 <xQueueGenericSend+0xe4>
 80094a6:	f7ff fc7f 	bl	8008da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094aa:	a901      	add	r1, sp, #4
 80094ac:	a802      	add	r0, sp, #8
 80094ae:	f000 ffa1 	bl	800a3f4 <xTaskCheckForTimeOut>
 80094b2:	b9d8      	cbnz	r0, 80094ec <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff fdb1 	bl	800901c <prvIsQueueFull>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0cf      	beq.n	800945e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094be:	9901      	ldr	r1, [sp, #4]
 80094c0:	f104 0010 	add.w	r0, r4, #16
 80094c4:	f000 ff10 	bl	800a2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7ff fe10 	bl	80090ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094ce:	f000 fe19 	bl	800a104 <xTaskResumeAll>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d1c8      	bne.n	8009468 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80094d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	e7bd      	b.n	8009468 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7ff fdfe 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094f2:	f000 fe07 	bl	800a104 <xTaskResumeAll>
			return errQUEUE_FULL;
 80094f6:	2000      	movs	r0, #0
 80094f8:	e78d      	b.n	8009416 <xQueueGenericSend+0xa4>

080094fa <xQueueGenericSendFromISR>:
{
 80094fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80094fe:	b190      	cbz	r0, 8009526 <xQueueGenericSendFromISR+0x2c>
 8009500:	460f      	mov	r7, r1
 8009502:	4616      	mov	r6, r2
 8009504:	461c      	mov	r4, r3
 8009506:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009508:	b1b1      	cbz	r1, 8009538 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800950a:	2c02      	cmp	r4, #2
 800950c:	d120      	bne.n	8009550 <xQueueGenericSendFromISR+0x56>
 800950e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d01d      	beq.n	8009550 <xQueueGenericSendFromISR+0x56>
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	e7fe      	b.n	8009524 <xQueueGenericSendFromISR+0x2a>
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009536:	e7fe      	b.n	8009536 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009538:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0e5      	beq.n	800950a <xQueueGenericSendFromISR+0x10>
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	e7fe      	b.n	800954e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009550:	f7ff fd2e 	bl	8008fb0 <vPortValidateInterruptPriority>
	__asm volatile
 8009554:	f3ef 8911 	mrs	r9, BASEPRI
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009568:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800956a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800956c:	429a      	cmp	r2, r3
 800956e:	d306      	bcc.n	800957e <xQueueGenericSendFromISR+0x84>
 8009570:	2c02      	cmp	r4, #2
 8009572:	d004      	beq.n	800957e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009574:	2000      	movs	r0, #0
	__asm volatile
 8009576:	f389 8811 	msr	BASEPRI, r9
}
 800957a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800957e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8009582:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009586:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009588:	4622      	mov	r2, r4
 800958a:	4639      	mov	r1, r7
 800958c:	4628      	mov	r0, r5
 800958e:	f7ff fd61 	bl	8009054 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009592:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009596:	d006      	beq.n	80095a6 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009598:	f108 0301 	add.w	r3, r8, #1
 800959c:	b25b      	sxtb	r3, r3
 800959e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80095a2:	2001      	movs	r0, #1
 80095a4:	e7e7      	b.n	8009576 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095a8:	b90b      	cbnz	r3, 80095ae <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80095aa:	2001      	movs	r0, #1
 80095ac:	e7e3      	b.n	8009576 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80095b2:	f000 fecd 	bl	800a350 <xTaskRemoveFromEventList>
 80095b6:	b118      	cbz	r0, 80095c0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80095b8:	b126      	cbz	r6, 80095c4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095ba:	2001      	movs	r0, #1
 80095bc:	6030      	str	r0, [r6, #0]
 80095be:	e7da      	b.n	8009576 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80095c0:	2001      	movs	r0, #1
 80095c2:	e7d8      	b.n	8009576 <xQueueGenericSendFromISR+0x7c>
 80095c4:	2001      	movs	r0, #1
 80095c6:	e7d6      	b.n	8009576 <xQueueGenericSendFromISR+0x7c>

080095c8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80095c8:	b168      	cbz	r0, 80095e6 <xQueueGiveFromISR+0x1e>
{
 80095ca:	b570      	push	{r4, r5, r6, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80095d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80095d2:	b18b      	cbz	r3, 80095f8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	e7fe      	b.n	80095e4 <xQueueGiveFromISR+0x1c>
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80095f6:	e7fe      	b.n	80095f6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095f8:	6803      	ldr	r3, [r0, #0]
 80095fa:	b1eb      	cbz	r3, 8009638 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095fc:	f7ff fcd8 	bl	8008fb0 <vPortValidateInterruptPriority>
	__asm volatile
 8009600:	f3ef 8611 	mrs	r6, BASEPRI
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009614:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009616:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009618:	4293      	cmp	r3, r2
 800961a:	d926      	bls.n	800966a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800961c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8009620:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009622:	3201      	adds	r2, #1
 8009624:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d011      	beq.n	8009650 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800962c:	3301      	adds	r3, #1
 800962e:	b25b      	sxtb	r3, r3
 8009630:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009634:	2001      	movs	r0, #1
 8009636:	e019      	b.n	800966c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009638:	6883      	ldr	r3, [r0, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0de      	beq.n	80095fc <xQueueGiveFromISR+0x34>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	e7fe      	b.n	800964e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009650:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009652:	b90b      	cbnz	r3, 8009658 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8009654:	2001      	movs	r0, #1
 8009656:	e009      	b.n	800966c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009658:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800965c:	f000 fe78 	bl	800a350 <xTaskRemoveFromEventList>
 8009660:	b138      	cbz	r0, 8009672 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8009662:	b144      	cbz	r4, 8009676 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009664:	2001      	movs	r0, #1
 8009666:	6020      	str	r0, [r4, #0]
 8009668:	e000      	b.n	800966c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800966a:	2000      	movs	r0, #0
	__asm volatile
 800966c:	f386 8811 	msr	BASEPRI, r6
}
 8009670:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8009672:	2001      	movs	r0, #1
 8009674:	e7fa      	b.n	800966c <xQueueGiveFromISR+0xa4>
 8009676:	2001      	movs	r0, #1
 8009678:	e7f8      	b.n	800966c <xQueueGiveFromISR+0xa4>

0800967a <xQueueReceive>:
{
 800967a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967c:	b085      	sub	sp, #20
 800967e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009680:	b190      	cbz	r0, 80096a8 <xQueueReceive+0x2e>
 8009682:	460f      	mov	r7, r1
 8009684:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009686:	b1c1      	cbz	r1, 80096ba <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009688:	f000 fefc 	bl	800a484 <xTaskGetSchedulerState>
 800968c:	4606      	mov	r6, r0
 800968e:	bb00      	cbnz	r0, 80096d2 <xQueueReceive+0x58>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d05e      	beq.n	8009754 <xQueueReceive+0xda>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	e7fe      	b.n	80096a6 <xQueueReceive+0x2c>
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80096b8:	e7fe      	b.n	80096b8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0e3      	beq.n	8009688 <xQueueReceive+0xe>
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	e7fe      	b.n	80096d0 <xQueueReceive+0x56>
 80096d2:	2600      	movs	r6, #0
 80096d4:	e03e      	b.n	8009754 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096d6:	4639      	mov	r1, r7
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff fcf6 	bl	80090ca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096de:	3d01      	subs	r5, #1
 80096e0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	b923      	cbnz	r3, 80096f0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80096e6:	f7ff fb5f 	bl	8008da8 <vPortExitCritical>
				return pdPASS;
 80096ea:	2001      	movs	r0, #1
}
 80096ec:	b005      	add	sp, #20
 80096ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f0:	f104 0010 	add.w	r0, r4, #16
 80096f4:	f000 fe2c 	bl	800a350 <xTaskRemoveFromEventList>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d0f4      	beq.n	80096e6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80096fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009704:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	e7e9      	b.n	80096e6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009712:	f7ff fb49 	bl	8008da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009716:	2000      	movs	r0, #0
 8009718:	e7e8      	b.n	80096ec <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800971a:	a802      	add	r0, sp, #8
 800971c:	f000 fe5e 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009720:	2601      	movs	r6, #1
 8009722:	e021      	b.n	8009768 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009724:	2300      	movs	r3, #0
 8009726:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800972a:	e029      	b.n	8009780 <xQueueReceive+0x106>
 800972c:	2300      	movs	r3, #0
 800972e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009732:	e02b      	b.n	800978c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff fcda 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800973a:	f000 fce3 	bl	800a104 <xTaskResumeAll>
 800973e:	e009      	b.n	8009754 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009740:	4620      	mov	r0, r4
 8009742:	f7ff fcd4 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009746:	f000 fcdd 	bl	800a104 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff fc75 	bl	800903a <prvIsQueueEmpty>
 8009750:	2800      	cmp	r0, #0
 8009752:	d13f      	bne.n	80097d4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009754:	f7ff fb06 	bl	8008d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009758:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800975a:	2d00      	cmp	r5, #0
 800975c:	d1bb      	bne.n	80096d6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0d6      	beq.n	8009712 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009764:	2e00      	cmp	r6, #0
 8009766:	d0d8      	beq.n	800971a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009768:	f7ff fb1e 	bl	8008da8 <vPortExitCritical>
		vTaskSuspendAll();
 800976c:	f000 fc30 	bl	8009fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009770:	f7ff faf8 	bl	8008d64 <vPortEnterCritical>
 8009774:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009778:	b25b      	sxtb	r3, r3
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d0d1      	beq.n	8009724 <xQueueReceive+0xaa>
 8009780:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009784:	b25b      	sxtb	r3, r3
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978a:	d0cf      	beq.n	800972c <xQueueReceive+0xb2>
 800978c:	f7ff fb0c 	bl	8008da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009790:	a901      	add	r1, sp, #4
 8009792:	a802      	add	r0, sp, #8
 8009794:	f000 fe2e 	bl	800a3f4 <xTaskCheckForTimeOut>
 8009798:	2800      	cmp	r0, #0
 800979a:	d1d1      	bne.n	8009740 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800979c:	4620      	mov	r0, r4
 800979e:	f7ff fc4c 	bl	800903a <prvIsQueueEmpty>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d0c6      	beq.n	8009734 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097a6:	9901      	ldr	r1, [sp, #4]
 80097a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097ac:	f000 fd9c 	bl	800a2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7ff fc9c 	bl	80090ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097b6:	f000 fca5 	bl	800a104 <xTaskResumeAll>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d1ca      	bne.n	8009754 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80097be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	e7bf      	b.n	8009754 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80097d4:	2000      	movs	r0, #0
 80097d6:	e789      	b.n	80096ec <xQueueReceive+0x72>

080097d8 <xQueueSemaphoreTake>:
{
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80097de:	b158      	cbz	r0, 80097f8 <xQueueSemaphoreTake+0x20>
 80097e0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80097e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80097e4:	b18b      	cbz	r3, 800980a <xQueueSemaphoreTake+0x32>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	e7fe      	b.n	80097f6 <xQueueSemaphoreTake+0x1e>
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009808:	e7fe      	b.n	8009808 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800980a:	f000 fe3b 	bl	800a484 <xTaskGetSchedulerState>
 800980e:	4605      	mov	r5, r0
 8009810:	b950      	cbnz	r0, 8009828 <xQueueSemaphoreTake+0x50>
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	b15b      	cbz	r3, 800982e <xQueueSemaphoreTake+0x56>
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	e7fe      	b.n	8009826 <xQueueSemaphoreTake+0x4e>
 8009828:	2600      	movs	r6, #0
 800982a:	4635      	mov	r5, r6
 800982c:	e055      	b.n	80098da <xQueueSemaphoreTake+0x102>
 800982e:	4606      	mov	r6, r0
 8009830:	e053      	b.n	80098da <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009832:	3b01      	subs	r3, #1
 8009834:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	b13b      	cbz	r3, 800984a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	b94b      	cbnz	r3, 8009852 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800983e:	f7ff fab3 	bl	8008da8 <vPortExitCritical>
				return pdPASS;
 8009842:	2601      	movs	r6, #1
}
 8009844:	4630      	mov	r0, r6
 8009846:	b004      	add	sp, #16
 8009848:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800984a:	f000 ff0f 	bl	800a66c <pvTaskIncrementMutexHeldCount>
 800984e:	60a0      	str	r0, [r4, #8]
 8009850:	e7f3      	b.n	800983a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009852:	f104 0010 	add.w	r0, r4, #16
 8009856:	f000 fd7b 	bl	800a350 <xTaskRemoveFromEventList>
 800985a:	2800      	cmp	r0, #0
 800985c:	d0ef      	beq.n	800983e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800985e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009866:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	e7e4      	b.n	800983e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009874:	b146      	cbz	r6, 8009888 <xQueueSemaphoreTake+0xb0>
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	e7fe      	b.n	8009886 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8009888:	f7ff fa8e 	bl	8008da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800988c:	e7da      	b.n	8009844 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800988e:	a802      	add	r0, sp, #8
 8009890:	f000 fda4 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009894:	2501      	movs	r5, #1
 8009896:	e02a      	b.n	80098ee <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8009898:	2300      	movs	r3, #0
 800989a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800989e:	e032      	b.n	8009906 <xQueueSemaphoreTake+0x12e>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098a6:	e034      	b.n	8009912 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80098a8:	f7ff fa5c 	bl	8008d64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098ac:	68a0      	ldr	r0, [r4, #8]
 80098ae:	f000 fdf9 	bl	800a4a4 <xTaskPriorityInherit>
 80098b2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80098b4:	f7ff fa78 	bl	8008da8 <vPortExitCritical>
 80098b8:	e03b      	b.n	8009932 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80098ba:	4620      	mov	r0, r4
 80098bc:	f7ff fc17 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098c0:	f000 fc20 	bl	800a104 <xTaskResumeAll>
 80098c4:	e009      	b.n	80098da <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80098c6:	4620      	mov	r0, r4
 80098c8:	f7ff fc11 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098cc:	f000 fc1a 	bl	800a104 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d0:	4620      	mov	r0, r4
 80098d2:	f7ff fbb2 	bl	800903a <prvIsQueueEmpty>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d142      	bne.n	8009960 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80098da:	f7ff fa43 	bl	8008d64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1a6      	bne.n	8009832 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c4      	beq.n	8009874 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80098ea:	2d00      	cmp	r5, #0
 80098ec:	d0cf      	beq.n	800988e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80098ee:	f7ff fa5b 	bl	8008da8 <vPortExitCritical>
		vTaskSuspendAll();
 80098f2:	f000 fb6d 	bl	8009fd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098f6:	f7ff fa35 	bl	8008d64 <vPortEnterCritical>
 80098fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d0c8      	beq.n	8009898 <xQueueSemaphoreTake+0xc0>
 8009906:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800990a:	b25b      	sxtb	r3, r3
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d0c6      	beq.n	80098a0 <xQueueSemaphoreTake+0xc8>
 8009912:	f7ff fa49 	bl	8008da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009916:	a901      	add	r1, sp, #4
 8009918:	a802      	add	r0, sp, #8
 800991a:	f000 fd6b 	bl	800a3f4 <xTaskCheckForTimeOut>
 800991e:	2800      	cmp	r0, #0
 8009920:	d1d1      	bne.n	80098c6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff fb89 	bl	800903a <prvIsQueueEmpty>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0c6      	beq.n	80098ba <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0ba      	beq.n	80098a8 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009932:	9901      	ldr	r1, [sp, #4]
 8009934:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009938:	f000 fcd6 	bl	800a2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800993c:	4620      	mov	r0, r4
 800993e:	f7ff fbd6 	bl	80090ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009942:	f000 fbdf 	bl	800a104 <xTaskResumeAll>
 8009946:	2800      	cmp	r0, #0
 8009948:	d1c7      	bne.n	80098da <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800994a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800994e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009952:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	e7bc      	b.n	80098da <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8009960:	b90e      	cbnz	r6, 8009966 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8009962:	2600      	movs	r6, #0
 8009964:	e76e      	b.n	8009844 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8009966:	f7ff f9fd 	bl	8008d64 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800996a:	4620      	mov	r0, r4
 800996c:	f7ff fb4e 	bl	800900c <prvGetDisinheritPriorityAfterTimeout>
 8009970:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009972:	68a0      	ldr	r0, [r4, #8]
 8009974:	f000 fe2a 	bl	800a5cc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009978:	f7ff fa16 	bl	8008da8 <vPortExitCritical>
 800997c:	e7f1      	b.n	8009962 <xQueueSemaphoreTake+0x18a>

0800997e <xQueueReceiveFromISR>:
{
 800997e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009982:	b1b0      	cbz	r0, 80099b2 <xQueueReceiveFromISR+0x34>
 8009984:	460d      	mov	r5, r1
 8009986:	4616      	mov	r6, r2
 8009988:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800998a:	b1d9      	cbz	r1, 80099c4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800998c:	f7ff fb10 	bl	8008fb0 <vPortValidateInterruptPriority>
	__asm volatile
 8009990:	f3ef 8811 	mrs	r8, BASEPRI
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099a4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099a6:	b9cf      	cbnz	r7, 80099dc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80099a8:	2000      	movs	r0, #0
	__asm volatile
 80099aa:	f388 8811 	msr	BASEPRI, r8
}
 80099ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80099c2:	e7fe      	b.n	80099c2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0e0      	beq.n	800998c <xQueueReceiveFromISR+0xe>
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	e7fe      	b.n	80099da <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80099dc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80099e0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099e4:	4629      	mov	r1, r5
 80099e6:	4620      	mov	r0, r4
 80099e8:	f7ff fb6f 	bl	80090ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099ec:	3f01      	subs	r7, #1
 80099ee:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80099f0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80099f4:	d006      	beq.n	8009a04 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099f6:	f109 0301 	add.w	r3, r9, #1
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8009a00:	2001      	movs	r0, #1
 8009a02:	e7d2      	b.n	80099aa <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	b90b      	cbnz	r3, 8009a0c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8009a08:	2001      	movs	r0, #1
 8009a0a:	e7ce      	b.n	80099aa <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a0c:	f104 0010 	add.w	r0, r4, #16
 8009a10:	f000 fc9e 	bl	800a350 <xTaskRemoveFromEventList>
 8009a14:	b118      	cbz	r0, 8009a1e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8009a16:	b126      	cbz	r6, 8009a22 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a18:	2001      	movs	r0, #1
 8009a1a:	6030      	str	r0, [r6, #0]
 8009a1c:	e7c5      	b.n	80099aa <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8009a1e:	2001      	movs	r0, #1
 8009a20:	e7c3      	b.n	80099aa <xQueueReceiveFromISR+0x2c>
 8009a22:	2001      	movs	r0, #1
 8009a24:	e7c1      	b.n	80099aa <xQueueReceiveFromISR+0x2c>
	...

08009a28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2b07      	cmp	r3, #7
 8009a2c:	d80c      	bhi.n	8009a48 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a2e:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <vQueueAddToRegistry+0x24>)
 8009a30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a34:	b10a      	cbz	r2, 8009a3a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a36:	3301      	adds	r3, #1
 8009a38:	e7f7      	b.n	8009a2a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a3a:	4a04      	ldr	r2, [pc, #16]	; (8009a4c <vQueueAddToRegistry+0x24>)
 8009a3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a44:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a46:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	2400a794 	.word	0x2400a794

08009a50 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a50:	2300      	movs	r3, #0
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	d80f      	bhi.n	8009a76 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009a56:	4a08      	ldr	r2, [pc, #32]	; (8009a78 <vQueueUnregisterQueue+0x28>)
 8009a58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a5c:	6852      	ldr	r2, [r2, #4]
 8009a5e:	4282      	cmp	r2, r0
 8009a60:	d001      	beq.n	8009a66 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a62:	3301      	adds	r3, #1
 8009a64:	e7f5      	b.n	8009a52 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009a66:	4a04      	ldr	r2, [pc, #16]	; (8009a78 <vQueueUnregisterQueue+0x28>)
 8009a68:	2100      	movs	r1, #0
 8009a6a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009a6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a72:	6059      	str	r1, [r3, #4]
				break;
 8009a74:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a76:	4770      	bx	lr
 8009a78:	2400a794 	.word	0x2400a794

08009a7c <vQueueDelete>:
	configASSERT( pxQueue );
 8009a7c:	b138      	cbz	r0, 8009a8e <vQueueDelete+0x12>
{
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8009a82:	f7ff ffe5 	bl	8009a50 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a86:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009a8a:	b14b      	cbz	r3, 8009aa0 <vQueueDelete+0x24>
}
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009a9e:	e7fe      	b.n	8009a9e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7ff f86f 	bl	8008b84 <vPortFree>
}
 8009aa6:	e7f1      	b.n	8009a8c <vQueueDelete+0x10>

08009aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460d      	mov	r5, r1
 8009aae:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ab0:	f7ff f958 	bl	8008d64 <vPortEnterCritical>
 8009ab4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ab8:	b25b      	sxtb	r3, r3
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d00d      	beq.n	8009adc <vQueueWaitForMessageRestricted+0x34>
 8009ac0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ac4:	b25b      	sxtb	r3, r3
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d00b      	beq.n	8009ae4 <vQueueWaitForMessageRestricted+0x3c>
 8009acc:	f7ff f96c 	bl	8008da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ad2:	b15b      	cbz	r3, 8009aec <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7ff fb0a 	bl	80090ee <prvUnlockQueue>
	}
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009adc:	2300      	movs	r3, #0
 8009ade:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ae2:	e7ed      	b.n	8009ac0 <vQueueWaitForMessageRestricted+0x18>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aea:	e7ef      	b.n	8009acc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009aec:	4632      	mov	r2, r6
 8009aee:	4629      	mov	r1, r5
 8009af0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009af4:	f000 fc10 	bl	800a318 <vTaskPlaceOnEventListRestricted>
 8009af8:	e7ec      	b.n	8009ad4 <vQueueWaitForMessageRestricted+0x2c>
	...

08009afc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009afc:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <prvResetNextTaskUnblockTime+0x24>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	b923      	cbnz	r3, 8009b0e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b04:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <prvResetNextTaskUnblockTime+0x28>)
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <prvResetNextTaskUnblockTime+0x24>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <prvResetNextTaskUnblockTime+0x28>)
 8009b1a:	601a      	str	r2, [r3, #0]
	}
}
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	2400a7d8 	.word	0x2400a7d8
 8009b24:	2400ac80 	.word	0x2400ac80

08009b28 <prvInitialiseNewTask>:
{
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	460d      	mov	r5, r1
 8009b30:	4617      	mov	r7, r2
 8009b32:	4699      	mov	r9, r3
 8009b34:	9e08      	ldr	r6, [sp, #32]
 8009b36:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b3c:	0092      	lsls	r2, r2, #2
 8009b3e:	21a5      	movs	r1, #165	; 0xa5
 8009b40:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b42:	f00e f9e5 	bl	8017f10 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b48:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009b4c:	443a      	add	r2, r7
 8009b4e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b52:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	d043      	beq.n	8009be2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b5a:	f04f 0c00 	mov.w	ip, #0
 8009b5e:	f1bc 0f0f 	cmp.w	ip, #15
 8009b62:	d80b      	bhi.n	8009b7c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b64:	f815 200c 	ldrb.w	r2, [r5, ip]
 8009b68:	eb04 030c 	add.w	r3, r4, ip
 8009b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009b70:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009b74:	b113      	cbz	r3, 8009b7c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b76:	f10c 0c01 	add.w	ip, ip, #1
 8009b7a:	e7f0      	b.n	8009b5e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b82:	2e37      	cmp	r6, #55	; 0x37
 8009b84:	d900      	bls.n	8009b88 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b86:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009b88:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009b8a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b90:	1d20      	adds	r0, r4, #4
 8009b92:	f7ff f840 	bl	8008c16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b96:	f104 0018 	add.w	r0, r4, #24
 8009b9a:	f7ff f83c 	bl	8008c16 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b9e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba0:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009ba4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ba6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009ba8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bac:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009bb0:	2260      	movs	r2, #96	; 0x60
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8009bb8:	f00e f9aa 	bl	8017f10 <memset>
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <prvInitialiseNewTask+0xc4>)
 8009bbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <prvInitialiseNewTask+0xc8>)
 8009bc2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <prvInitialiseNewTask+0xcc>)
 8009bc6:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bc8:	464a      	mov	r2, r9
 8009bca:	4641      	mov	r1, r8
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f7ff f89b 	bl	8008d08 <pxPortInitialiseStack>
 8009bd2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009bd4:	f1ba 0f00 	cmp.w	sl, #0
 8009bd8:	d001      	beq.n	8009bde <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bda:	f8ca 4000 	str.w	r4, [sl]
}
 8009bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009be2:	2300      	movs	r3, #0
 8009be4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009be8:	e7cb      	b.n	8009b82 <prvInitialiseNewTask+0x5a>
 8009bea:	bf00      	nop
 8009bec:	0801a6f4 	.word	0x0801a6f4
 8009bf0:	0801a714 	.word	0x0801a714
 8009bf4:	0801a6d4 	.word	0x0801a6d4

08009bf8 <prvInitialiseTaskLists>:
{
 8009bf8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	e007      	b.n	8009c0e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009c02:	0093      	lsls	r3, r2, #2
 8009c04:	480e      	ldr	r0, [pc, #56]	; (8009c40 <prvInitialiseTaskLists+0x48>)
 8009c06:	4418      	add	r0, r3
 8009c08:	f7fe fffa 	bl	8008c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	2c37      	cmp	r4, #55	; 0x37
 8009c10:	d9f5      	bls.n	8009bfe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009c12:	4d0c      	ldr	r5, [pc, #48]	; (8009c44 <prvInitialiseTaskLists+0x4c>)
 8009c14:	4628      	mov	r0, r5
 8009c16:	f7fe fff3 	bl	8008c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c1a:	4c0b      	ldr	r4, [pc, #44]	; (8009c48 <prvInitialiseTaskLists+0x50>)
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7fe ffef 	bl	8008c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c22:	480a      	ldr	r0, [pc, #40]	; (8009c4c <prvInitialiseTaskLists+0x54>)
 8009c24:	f7fe ffec 	bl	8008c00 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009c28:	4809      	ldr	r0, [pc, #36]	; (8009c50 <prvInitialiseTaskLists+0x58>)
 8009c2a:	f7fe ffe9 	bl	8008c00 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009c2e:	4809      	ldr	r0, [pc, #36]	; (8009c54 <prvInitialiseTaskLists+0x5c>)
 8009c30:	f7fe ffe6 	bl	8008c00 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c34:	4b08      	ldr	r3, [pc, #32]	; (8009c58 <prvInitialiseTaskLists+0x60>)
 8009c36:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c38:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <prvInitialiseTaskLists+0x64>)
 8009c3a:	601c      	str	r4, [r3, #0]
}
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
 8009c3e:	bf00      	nop
 8009c40:	2400a7e0 	.word	0x2400a7e0
 8009c44:	2400ac54 	.word	0x2400ac54
 8009c48:	2400ac68 	.word	0x2400ac68
 8009c4c:	2400ac8c 	.word	0x2400ac8c
 8009c50:	2400acb8 	.word	0x2400acb8
 8009c54:	2400aca4 	.word	0x2400aca4
 8009c58:	2400a7d8 	.word	0x2400a7d8
 8009c5c:	2400a7dc 	.word	0x2400a7dc

08009c60 <prvAddNewTaskToReadyList>:
{
 8009c60:	b510      	push	{r4, lr}
 8009c62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009c64:	f7ff f87e 	bl	8008d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009c68:	4a22      	ldr	r2, [pc, #136]	; (8009cf4 <prvAddNewTaskToReadyList+0x94>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c70:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <prvAddNewTaskToReadyList+0x98>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	b15b      	cbz	r3, 8009c8e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009c76:	4b21      	ldr	r3, [pc, #132]	; (8009cfc <prvAddNewTaskToReadyList+0x9c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	b96b      	cbnz	r3, 8009c98 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c7c:	4b1e      	ldr	r3, [pc, #120]	; (8009cf8 <prvAddNewTaskToReadyList+0x98>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d807      	bhi.n	8009c98 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009c88:	4b1b      	ldr	r3, [pc, #108]	; (8009cf8 <prvAddNewTaskToReadyList+0x98>)
 8009c8a:	601c      	str	r4, [r3, #0]
 8009c8c:	e004      	b.n	8009c98 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <prvAddNewTaskToReadyList+0x98>)
 8009c90:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c92:	6813      	ldr	r3, [r2, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d029      	beq.n	8009cec <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009c98:	4a19      	ldr	r2, [pc, #100]	; (8009d00 <prvAddNewTaskToReadyList+0xa0>)
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ca0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009ca2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <prvAddNewTaskToReadyList+0xa4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4298      	cmp	r0, r3
 8009caa:	d901      	bls.n	8009cb0 <prvAddNewTaskToReadyList+0x50>
 8009cac:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <prvAddNewTaskToReadyList+0xa4>)
 8009cae:	6018      	str	r0, [r3, #0]
 8009cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009cb4:	1d21      	adds	r1, r4, #4
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <prvAddNewTaskToReadyList+0xa8>)
 8009cb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cbc:	f7fe ffae 	bl	8008c1c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009cc0:	f7ff f872 	bl	8008da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <prvAddNewTaskToReadyList+0x9c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	b17b      	cbz	r3, 8009cea <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cca:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <prvAddNewTaskToReadyList+0x98>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d209      	bcs.n	8009cea <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009cd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	f3bf 8f6f 	isb	sy
}
 8009cea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009cec:	f7ff ff84 	bl	8009bf8 <prvInitialiseTaskLists>
 8009cf0:	e7d2      	b.n	8009c98 <prvAddNewTaskToReadyList+0x38>
 8009cf2:	bf00      	nop
 8009cf4:	2400ac40 	.word	0x2400ac40
 8009cf8:	2400a7d4 	.word	0x2400a7d4
 8009cfc:	2400aca0 	.word	0x2400aca0
 8009d00:	2400ac4c 	.word	0x2400ac4c
 8009d04:	2400ac50 	.word	0x2400ac50
 8009d08:	2400a7e0 	.word	0x2400a7e0

08009d0c <prvDeleteTCB>:
	{
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d10:	3054      	adds	r0, #84	; 0x54
 8009d12:	f00e fce1 	bl	80186d8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d16:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009d1a:	b163      	cbz	r3, 8009d36 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d011      	beq.n	8009d44 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d00e      	beq.n	8009d42 <prvDeleteTCB+0x36>
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	e7fe      	b.n	8009d34 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8009d36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d38:	f7fe ff24 	bl	8008b84 <vPortFree>
				vPortFree( pxTCB );
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7fe ff21 	bl	8008b84 <vPortFree>
	}
 8009d42:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7fe ff1d 	bl	8008b84 <vPortFree>
 8009d4a:	e7fa      	b.n	8009d42 <prvDeleteTCB+0x36>

08009d4c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <prvCheckTasksWaitingTermination+0x40>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	b1d3      	cbz	r3, 8009d88 <prvCheckTasksWaitingTermination+0x3c>
{
 8009d52:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009d54:	f7ff f806 	bl	8008d64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <prvCheckTasksWaitingTermination+0x44>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d5e:	1d20      	adds	r0, r4, #4
 8009d60:	f7fe ff80 	bl	8008c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d64:	4a0b      	ldr	r2, [pc, #44]	; (8009d94 <prvCheckTasksWaitingTermination+0x48>)
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d6c:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <prvCheckTasksWaitingTermination+0x40>)
 8009d6e:	6813      	ldr	r3, [r2, #0]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009d74:	f7ff f818 	bl	8008da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f7ff ffc7 	bl	8009d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d7e:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <prvCheckTasksWaitingTermination+0x40>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e6      	bne.n	8009d54 <prvCheckTasksWaitingTermination+0x8>
}
 8009d86:	bd10      	pop	{r4, pc}
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	2400ac44 	.word	0x2400ac44
 8009d90:	2400acb8 	.word	0x2400acb8
 8009d94:	2400ac40 	.word	0x2400ac40

08009d98 <prvIdleTask>:
{
 8009d98:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009d9a:	f7ff ffd7 	bl	8009d4c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d9e:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <prvIdleTask+0x24>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d9f9      	bls.n	8009d9a <prvIdleTask+0x2>
				taskYIELD();
 8009da6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	e7ee      	b.n	8009d9a <prvIdleTask+0x2>
 8009dbc:	2400a7e0 	.word	0x2400a7e0

08009dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dc6:	4b19      	ldr	r3, [pc, #100]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x6c>)
 8009dc8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dca:	4b19      	ldr	r3, [pc, #100]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	3004      	adds	r0, #4
 8009dd0:	f7fe ff48 	bl	8008c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009dd8:	bf14      	ite	ne
 8009dda:	2300      	movne	r3, #0
 8009ddc:	2301      	moveq	r3, #1
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	bf08      	it	eq
 8009de2:	2300      	moveq	r3, #0
 8009de4:	b96b      	cbnz	r3, 8009e02 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009de6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009de8:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009dee:	42a6      	cmp	r6, r4
 8009df0:	d90e      	bls.n	8009e10 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df2:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <prvAddCurrentTaskToDelayedList+0x74>)
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	4b0e      	ldr	r3, [pc, #56]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8009df8:	6819      	ldr	r1, [r3, #0]
 8009dfa:	3104      	adds	r1, #4
 8009dfc:	f7fe ff19 	bl	8008c32 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e02:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8009e04:	6819      	ldr	r1, [r3, #0]
 8009e06:	3104      	adds	r1, #4
 8009e08:	480b      	ldr	r0, [pc, #44]	; (8009e38 <prvAddCurrentTaskToDelayedList+0x78>)
 8009e0a:	f7fe ff07 	bl	8008c1c <vListInsertEnd>
 8009e0e:	e7f7      	b.n	8009e00 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <prvAddCurrentTaskToDelayedList+0x7c>)
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8009e16:	6819      	ldr	r1, [r3, #0]
 8009e18:	3104      	adds	r1, #4
 8009e1a:	f7fe ff0a 	bl	8008c32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e1e:	4b08      	ldr	r3, [pc, #32]	; (8009e40 <prvAddCurrentTaskToDelayedList+0x80>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	d9ec      	bls.n	8009e00 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 8009e26:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <prvAddCurrentTaskToDelayedList+0x80>)
 8009e28:	601c      	str	r4, [r3, #0]
}
 8009e2a:	e7e9      	b.n	8009e00 <prvAddCurrentTaskToDelayedList+0x40>
 8009e2c:	2400accc 	.word	0x2400accc
 8009e30:	2400a7d4 	.word	0x2400a7d4
 8009e34:	2400a7dc 	.word	0x2400a7dc
 8009e38:	2400aca4 	.word	0x2400aca4
 8009e3c:	2400a7d8 	.word	0x2400a7d8
 8009e40:	2400ac80 	.word	0x2400ac80

08009e44 <xTaskCreateStatic>:
	{
 8009e44:	b530      	push	{r4, r5, lr}
 8009e46:	b087      	sub	sp, #28
 8009e48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009e4a:	b17c      	cbz	r4, 8009e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e4e:	b1b5      	cbz	r5, 8009e7e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e50:	25bc      	movs	r5, #188	; 0xbc
 8009e52:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e54:	9d04      	ldr	r5, [sp, #16]
 8009e56:	2dbc      	cmp	r5, #188	; 0xbc
 8009e58:	d01a      	beq.n	8009e90 <xTaskCreateStatic+0x4c>
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	e7fe      	b.n	8009e6a <xTaskCreateStatic+0x26>
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009e7c:	e7fe      	b.n	8009e7c <xTaskCreateStatic+0x38>
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009e8e:	e7fe      	b.n	8009e8e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e90:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e94:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e96:	2402      	movs	r4, #2
 8009e98:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e9c:	2400      	movs	r4, #0
 8009e9e:	9403      	str	r4, [sp, #12]
 8009ea0:	9502      	str	r5, [sp, #8]
 8009ea2:	ac05      	add	r4, sp, #20
 8009ea4:	9401      	str	r4, [sp, #4]
 8009ea6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ea8:	9400      	str	r4, [sp, #0]
 8009eaa:	f7ff fe3d 	bl	8009b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eb0:	f7ff fed6 	bl	8009c60 <prvAddNewTaskToReadyList>
	}
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	b007      	add	sp, #28
 8009eb8:	bd30      	pop	{r4, r5, pc}

08009eba <xTaskCreate>:
	{
 8009eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	4688      	mov	r8, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ec8:	0090      	lsls	r0, r2, #2
 8009eca:	f7fe fddd 	bl	8008a88 <pvPortMalloc>
			if( pxStack != NULL )
 8009ece:	b300      	cbz	r0, 8009f12 <xTaskCreate+0x58>
 8009ed0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ed2:	20bc      	movs	r0, #188	; 0xbc
 8009ed4:	f7fe fdd8 	bl	8008a88 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009ed8:	4605      	mov	r5, r0
 8009eda:	b1b0      	cbz	r0, 8009f0a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009edc:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009ee0:	b1e5      	cbz	r5, 8009f1c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ee8:	9303      	str	r3, [sp, #12]
 8009eea:	9502      	str	r5, [sp, #8]
 8009eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	4633      	mov	r3, r6
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	4641      	mov	r1, r8
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7ff fe14 	bl	8009b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7ff fead 	bl	8009c60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f06:	2001      	movs	r0, #1
 8009f08:	e005      	b.n	8009f16 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009f0a:	4648      	mov	r0, r9
 8009f0c:	f7fe fe3a 	bl	8008b84 <vPortFree>
 8009f10:	e7e6      	b.n	8009ee0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f12:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009f16:	b005      	add	sp, #20
 8009f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009f20:	e7f9      	b.n	8009f16 <xTaskCreate+0x5c>
	...

08009f24 <vTaskStartScheduler>:
{
 8009f24:	b510      	push	{r4, lr}
 8009f26:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f28:	2400      	movs	r4, #0
 8009f2a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f2c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f2e:	aa07      	add	r2, sp, #28
 8009f30:	a906      	add	r1, sp, #24
 8009f32:	a805      	add	r0, sp, #20
 8009f34:	f7fe fd2c 	bl	8008990 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	9302      	str	r3, [sp, #8]
 8009f3c:	9b06      	ldr	r3, [sp, #24]
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	9400      	str	r4, [sp, #0]
 8009f42:	4623      	mov	r3, r4
 8009f44:	9a07      	ldr	r2, [sp, #28]
 8009f46:	491a      	ldr	r1, [pc, #104]	; (8009fb0 <vTaskStartScheduler+0x8c>)
 8009f48:	481a      	ldr	r0, [pc, #104]	; (8009fb4 <vTaskStartScheduler+0x90>)
 8009f4a:	f7ff ff7b 	bl	8009e44 <xTaskCreateStatic>
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	; (8009fb8 <vTaskStartScheduler+0x94>)
 8009f50:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8009f52:	b140      	cbz	r0, 8009f66 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8009f54:	f000 fc08 	bl	800a768 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009f58:	2801      	cmp	r0, #1
 8009f5a:	d006      	beq.n	8009f6a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f60:	d01d      	beq.n	8009f9e <vTaskStartScheduler+0x7a>
}
 8009f62:	b008      	add	sp, #32
 8009f64:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009f66:	2000      	movs	r0, #0
 8009f68:	e7f6      	b.n	8009f58 <vTaskStartScheduler+0x34>
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <vTaskStartScheduler+0x98>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3354      	adds	r3, #84	; 0x54
 8009f80:	4a0f      	ldr	r2, [pc, #60]	; (8009fc0 <vTaskStartScheduler+0x9c>)
 8009f82:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <vTaskStartScheduler+0xa0>)
 8009f86:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <vTaskStartScheduler+0xa4>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f92:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <vTaskStartScheduler+0xa8>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009f98:	f7fe ff7e 	bl	8008e98 <xPortStartScheduler>
 8009f9c:	e7e1      	b.n	8009f62 <vTaskStartScheduler+0x3e>
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fae:	e7fe      	b.n	8009fae <vTaskStartScheduler+0x8a>
 8009fb0:	08019fd4 	.word	0x08019fd4
 8009fb4:	08009d99 	.word	0x08009d99
 8009fb8:	2400ac7c 	.word	0x2400ac7c
 8009fbc:	2400a7d4 	.word	0x2400a7d4
 8009fc0:	240000a8 	.word	0x240000a8
 8009fc4:	2400ac80 	.word	0x2400ac80
 8009fc8:	2400aca0 	.word	0x2400aca0
 8009fcc:	2400accc 	.word	0x2400accc

08009fd0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009fd0:	4a02      	ldr	r2, [pc, #8]	; (8009fdc <vTaskSuspendAll+0xc>)
 8009fd2:	6813      	ldr	r3, [r2, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	6013      	str	r3, [r2, #0]
}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	2400ac48 	.word	0x2400ac48

08009fe0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009fe0:	4b01      	ldr	r3, [pc, #4]	; (8009fe8 <xTaskGetTickCount+0x8>)
 8009fe2:	6818      	ldr	r0, [r3, #0]
}
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	2400accc 	.word	0x2400accc

08009fec <xTaskIncrementTick>:
{
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fee:	4b3a      	ldr	r3, [pc, #232]	; (800a0d8 <xTaskIncrementTick+0xec>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d169      	bne.n	800a0ca <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ff6:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <xTaskIncrementTick+0xf0>)
 8009ff8:	681d      	ldr	r5, [r3, #0]
 8009ffa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009ffc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ffe:	b9c5      	cbnz	r5, 800a032 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a000:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <xTaskIncrementTick+0xf4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	b143      	cbz	r3, 800a01a <xTaskIncrementTick+0x2e>
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	e7fe      	b.n	800a018 <xTaskIncrementTick+0x2c>
 800a01a:	4a31      	ldr	r2, [pc, #196]	; (800a0e0 <xTaskIncrementTick+0xf4>)
 800a01c:	6811      	ldr	r1, [r2, #0]
 800a01e:	4b31      	ldr	r3, [pc, #196]	; (800a0e4 <xTaskIncrementTick+0xf8>)
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	6010      	str	r0, [r2, #0]
 800a024:	6019      	str	r1, [r3, #0]
 800a026:	4a30      	ldr	r2, [pc, #192]	; (800a0e8 <xTaskIncrementTick+0xfc>)
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	3301      	adds	r3, #1
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	f7ff fd65 	bl	8009afc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a032:	4b2e      	ldr	r3, [pc, #184]	; (800a0ec <xTaskIncrementTick+0x100>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	42ab      	cmp	r3, r5
 800a038:	d93d      	bls.n	800a0b6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800a03a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a03c:	4b2c      	ldr	r3, [pc, #176]	; (800a0f0 <xTaskIncrementTick+0x104>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a046:	009a      	lsls	r2, r3, #2
 800a048:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <xTaskIncrementTick+0x108>)
 800a04a:	589b      	ldr	r3, [r3, r2]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d900      	bls.n	800a052 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800a050:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800a052:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <xTaskIncrementTick+0x10c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d03c      	beq.n	800a0d4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800a05a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800a05c:	e03a      	b.n	800a0d4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800a05e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a060:	4b1f      	ldr	r3, [pc, #124]	; (800a0e0 <xTaskIncrementTick+0xf4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	b343      	cbz	r3, 800a0ba <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a068:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <xTaskIncrementTick+0xf4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a070:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a072:	429d      	cmp	r5, r3
 800a074:	d326      	bcc.n	800a0c4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a076:	1d26      	adds	r6, r4, #4
 800a078:	4630      	mov	r0, r6
 800a07a:	f7fe fdf3 	bl	8008c64 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a07e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a080:	b11b      	cbz	r3, 800a08a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a082:	f104 0018 	add.w	r0, r4, #24
 800a086:	f7fe fded 	bl	8008c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a08a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a08c:	4a1b      	ldr	r2, [pc, #108]	; (800a0fc <xTaskIncrementTick+0x110>)
 800a08e:	6812      	ldr	r2, [r2, #0]
 800a090:	4293      	cmp	r3, r2
 800a092:	d901      	bls.n	800a098 <xTaskIncrementTick+0xac>
 800a094:	4a19      	ldr	r2, [pc, #100]	; (800a0fc <xTaskIncrementTick+0x110>)
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a09c:	009a      	lsls	r2, r3, #2
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4814      	ldr	r0, [pc, #80]	; (800a0f4 <xTaskIncrementTick+0x108>)
 800a0a2:	4410      	add	r0, r2
 800a0a4:	f7fe fdba 	bl	8008c1c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a0aa:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <xTaskIncrementTick+0x104>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d2d4      	bcs.n	800a05e <xTaskIncrementTick+0x72>
 800a0b4:	e7d4      	b.n	800a060 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800a0b6:	2700      	movs	r7, #0
 800a0b8:	e7d2      	b.n	800a060 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <xTaskIncrementTick+0x100>)
 800a0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c0:	601a      	str	r2, [r3, #0]
					break;
 800a0c2:	e7bb      	b.n	800a03c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a0c4:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <xTaskIncrementTick+0x100>)
 800a0c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0c8:	e7b8      	b.n	800a03c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800a0ca:	4a0d      	ldr	r2, [pc, #52]	; (800a100 <xTaskIncrementTick+0x114>)
 800a0cc:	6813      	ldr	r3, [r2, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a0d2:	2700      	movs	r7, #0
}
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d8:	2400ac48 	.word	0x2400ac48
 800a0dc:	2400accc 	.word	0x2400accc
 800a0e0:	2400a7d8 	.word	0x2400a7d8
 800a0e4:	2400a7dc 	.word	0x2400a7dc
 800a0e8:	2400ac84 	.word	0x2400ac84
 800a0ec:	2400ac80 	.word	0x2400ac80
 800a0f0:	2400a7d4 	.word	0x2400a7d4
 800a0f4:	2400a7e0 	.word	0x2400a7e0
 800a0f8:	2400acd0 	.word	0x2400acd0
 800a0fc:	2400ac50 	.word	0x2400ac50
 800a100:	2400ac88 	.word	0x2400ac88

0800a104 <xTaskResumeAll>:
{
 800a104:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a106:	4b35      	ldr	r3, [pc, #212]	; (800a1dc <xTaskResumeAll+0xd8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	b943      	cbnz	r3, 800a11e <xTaskResumeAll+0x1a>
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	e7fe      	b.n	800a11c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a11e:	f7fe fe21 	bl	8008d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <xTaskResumeAll+0xd8>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	3a01      	subs	r2, #1
 800a128:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d14f      	bne.n	800a1d0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a130:	4b2b      	ldr	r3, [pc, #172]	; (800a1e0 <xTaskResumeAll+0xdc>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	b90b      	cbnz	r3, 800a13a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a136:	2400      	movs	r4, #0
 800a138:	e04b      	b.n	800a1d2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a13a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a13c:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <xTaskResumeAll+0xe0>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	b31b      	cbz	r3, 800a18a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a142:	4b28      	ldr	r3, [pc, #160]	; (800a1e4 <xTaskResumeAll+0xe0>)
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a148:	f104 0018 	add.w	r0, r4, #24
 800a14c:	f7fe fd8a 	bl	8008c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a150:	1d25      	adds	r5, r4, #4
 800a152:	4628      	mov	r0, r5
 800a154:	f7fe fd86 	bl	8008c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a158:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a15a:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <xTaskResumeAll+0xe4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4298      	cmp	r0, r3
 800a160:	d901      	bls.n	800a166 <xTaskResumeAll+0x62>
 800a162:	4b21      	ldr	r3, [pc, #132]	; (800a1e8 <xTaskResumeAll+0xe4>)
 800a164:	6018      	str	r0, [r3, #0]
 800a166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a16a:	4629      	mov	r1, r5
 800a16c:	4b1f      	ldr	r3, [pc, #124]	; (800a1ec <xTaskResumeAll+0xe8>)
 800a16e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a172:	f7fe fd53 	bl	8008c1c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a176:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a178:	4b1d      	ldr	r3, [pc, #116]	; (800a1f0 <xTaskResumeAll+0xec>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	429a      	cmp	r2, r3
 800a180:	d3dc      	bcc.n	800a13c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a182:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <xTaskResumeAll+0xf0>)
 800a184:	2201      	movs	r2, #1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	e7d8      	b.n	800a13c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a18a:	b10c      	cbz	r4, 800a190 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a18c:	f7ff fcb6 	bl	8009afc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a190:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <xTaskResumeAll+0xf4>)
 800a192:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a194:	b984      	cbnz	r4, 800a1b8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a196:	4b17      	ldr	r3, [pc, #92]	; (800a1f4 <xTaskResumeAll+0xf0>)
 800a198:	681c      	ldr	r4, [r3, #0]
 800a19a:	b1d4      	cbz	r4, 800a1d2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a19c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a1b0:	2401      	movs	r4, #1
 800a1b2:	e00e      	b.n	800a1d2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1b4:	3c01      	subs	r4, #1
 800a1b6:	d007      	beq.n	800a1c8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a1b8:	f7ff ff18 	bl	8009fec <xTaskIncrementTick>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d0f9      	beq.n	800a1b4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <xTaskResumeAll+0xf0>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	e7f5      	b.n	800a1b4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800a1c8:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <xTaskResumeAll+0xf4>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e7e2      	b.n	800a196 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a1d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a1d2:	f7fe fde9 	bl	8008da8 <vPortExitCritical>
}
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
 800a1da:	bf00      	nop
 800a1dc:	2400ac48 	.word	0x2400ac48
 800a1e0:	2400ac40 	.word	0x2400ac40
 800a1e4:	2400ac8c 	.word	0x2400ac8c
 800a1e8:	2400ac50 	.word	0x2400ac50
 800a1ec:	2400a7e0 	.word	0x2400a7e0
 800a1f0:	2400a7d4 	.word	0x2400a7d4
 800a1f4:	2400acd0 	.word	0x2400acd0
 800a1f8:	2400ac88 	.word	0x2400ac88

0800a1fc <vTaskDelay>:
	{
 800a1fc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1fe:	b1a8      	cbz	r0, 800a22c <vTaskDelay+0x30>
 800a200:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a202:	4b10      	ldr	r3, [pc, #64]	; (800a244 <vTaskDelay+0x48>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	b143      	cbz	r3, 800a21a <vTaskDelay+0x1e>
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	e7fe      	b.n	800a218 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a21a:	f7ff fed9 	bl	8009fd0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a21e:	2100      	movs	r1, #0
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff fdcd 	bl	8009dc0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a226:	f7ff ff6d 	bl	800a104 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a22a:	b948      	cbnz	r0, 800a240 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a22c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a234:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
	}
 800a240:	bd10      	pop	{r4, pc}
 800a242:	bf00      	nop
 800a244:	2400ac48 	.word	0x2400ac48

0800a248 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a248:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <vTaskSwitchContext+0x88>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	b11b      	cbz	r3, 800a256 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a24e:	4b21      	ldr	r3, [pc, #132]	; (800a2d4 <vTaskSwitchContext+0x8c>)
 800a250:	2201      	movs	r2, #1
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a256:	4b1f      	ldr	r3, [pc, #124]	; (800a2d4 <vTaskSwitchContext+0x8c>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	4b1e      	ldr	r3, [pc, #120]	; (800a2d8 <vTaskSwitchContext+0x90>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a264:	008a      	lsls	r2, r1, #2
 800a266:	491d      	ldr	r1, [pc, #116]	; (800a2dc <vTaskSwitchContext+0x94>)
 800a268:	588a      	ldr	r2, [r1, r2]
 800a26a:	b95a      	cbnz	r2, 800a284 <vTaskSwitchContext+0x3c>
 800a26c:	b10b      	cbz	r3, 800a272 <vTaskSwitchContext+0x2a>
 800a26e:	3b01      	subs	r3, #1
 800a270:	e7f6      	b.n	800a260 <vTaskSwitchContext+0x18>
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	e7fe      	b.n	800a282 <vTaskSwitchContext+0x3a>
 800a284:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a288:	0082      	lsls	r2, r0, #2
 800a28a:	440a      	add	r2, r1
 800a28c:	6850      	ldr	r0, [r2, #4]
 800a28e:	6840      	ldr	r0, [r0, #4]
 800a290:	6050      	str	r0, [r2, #4]
 800a292:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a296:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a29a:	3208      	adds	r2, #8
 800a29c:	4411      	add	r1, r2
 800a29e:	4288      	cmp	r0, r1
 800a2a0:	d00f      	beq.n	800a2c2 <vTaskSwitchContext+0x7a>
 800a2a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a2a6:	0091      	lsls	r1, r2, #2
 800a2a8:	4a0c      	ldr	r2, [pc, #48]	; (800a2dc <vTaskSwitchContext+0x94>)
 800a2aa:	440a      	add	r2, r1
 800a2ac:	6852      	ldr	r2, [r2, #4]
 800a2ae:	68d1      	ldr	r1, [r2, #12]
 800a2b0:	4a0b      	ldr	r2, [pc, #44]	; (800a2e0 <vTaskSwitchContext+0x98>)
 800a2b2:	6011      	str	r1, [r2, #0]
 800a2b4:	4908      	ldr	r1, [pc, #32]	; (800a2d8 <vTaskSwitchContext+0x90>)
 800a2b6:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2b8:	6813      	ldr	r3, [r2, #0]
 800a2ba:	3354      	adds	r3, #84	; 0x54
 800a2bc:	4a09      	ldr	r2, [pc, #36]	; (800a2e4 <vTaskSwitchContext+0x9c>)
 800a2be:	6013      	str	r3, [r2, #0]
}
 800a2c0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c2:	6840      	ldr	r0, [r0, #4]
 800a2c4:	4662      	mov	r2, ip
 800a2c6:	0091      	lsls	r1, r2, #2
 800a2c8:	4a04      	ldr	r2, [pc, #16]	; (800a2dc <vTaskSwitchContext+0x94>)
 800a2ca:	440a      	add	r2, r1
 800a2cc:	6050      	str	r0, [r2, #4]
 800a2ce:	e7e8      	b.n	800a2a2 <vTaskSwitchContext+0x5a>
 800a2d0:	2400ac48 	.word	0x2400ac48
 800a2d4:	2400acd0 	.word	0x2400acd0
 800a2d8:	2400ac50 	.word	0x2400ac50
 800a2dc:	2400a7e0 	.word	0x2400a7e0
 800a2e0:	2400a7d4 	.word	0x2400a7d4
 800a2e4:	240000a8 	.word	0x240000a8

0800a2e8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a2e8:	b158      	cbz	r0, 800a302 <vTaskPlaceOnEventList+0x1a>
{
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vTaskPlaceOnEventList+0x2c>)
 800a2f0:	6811      	ldr	r1, [r2, #0]
 800a2f2:	3118      	adds	r1, #24
 800a2f4:	f7fe fc9d 	bl	8008c32 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff fd60 	bl	8009dc0 <prvAddCurrentTaskToDelayedList>
}
 800a300:	bd10      	pop	{r4, pc}
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a312:	e7fe      	b.n	800a312 <vTaskPlaceOnEventList+0x2a>
 800a314:	2400a7d4 	.word	0x2400a7d4

0800a318 <vTaskPlaceOnEventListRestricted>:
	{
 800a318:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a31a:	b170      	cbz	r0, 800a33a <vTaskPlaceOnEventListRestricted+0x22>
 800a31c:	460d      	mov	r5, r1
 800a31e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <vTaskPlaceOnEventListRestricted+0x34>)
 800a322:	6811      	ldr	r1, [r2, #0]
 800a324:	3118      	adds	r1, #24
 800a326:	f7fe fc79 	bl	8008c1c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a32a:	b10c      	cbz	r4, 800a330 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a32c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a330:	4621      	mov	r1, r4
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff fd44 	bl	8009dc0 <prvAddCurrentTaskToDelayedList>
	}
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a34a:	e7fe      	b.n	800a34a <vTaskPlaceOnEventListRestricted+0x32>
 800a34c:	2400a7d4 	.word	0x2400a7d4

0800a350 <xTaskRemoveFromEventList>:
{
 800a350:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a352:	68c3      	ldr	r3, [r0, #12]
 800a354:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a356:	b324      	cbz	r4, 800a3a2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a358:	f104 0518 	add.w	r5, r4, #24
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7fe fc81 	bl	8008c64 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a362:	4b18      	ldr	r3, [pc, #96]	; (800a3c4 <xTaskRemoveFromEventList+0x74>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	bb2b      	cbnz	r3, 800a3b4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a368:	1d25      	adds	r5, r4, #4
 800a36a:	4628      	mov	r0, r5
 800a36c:	f7fe fc7a 	bl	8008c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a372:	4b15      	ldr	r3, [pc, #84]	; (800a3c8 <xTaskRemoveFromEventList+0x78>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4298      	cmp	r0, r3
 800a378:	d901      	bls.n	800a37e <xTaskRemoveFromEventList+0x2e>
 800a37a:	4b13      	ldr	r3, [pc, #76]	; (800a3c8 <xTaskRemoveFromEventList+0x78>)
 800a37c:	6018      	str	r0, [r3, #0]
 800a37e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a382:	4629      	mov	r1, r5
 800a384:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <xTaskRemoveFromEventList+0x7c>)
 800a386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a38a:	f7fe fc47 	bl	8008c1c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a38e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a390:	4b0f      	ldr	r3, [pc, #60]	; (800a3d0 <xTaskRemoveFromEventList+0x80>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	429a      	cmp	r2, r3
 800a398:	d911      	bls.n	800a3be <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a39a:	2001      	movs	r0, #1
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <xTaskRemoveFromEventList+0x84>)
 800a39e:	6018      	str	r0, [r3, #0]
}
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a3b2:	e7fe      	b.n	800a3b2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4808      	ldr	r0, [pc, #32]	; (800a3d8 <xTaskRemoveFromEventList+0x88>)
 800a3b8:	f7fe fc30 	bl	8008c1c <vListInsertEnd>
 800a3bc:	e7e7      	b.n	800a38e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a3be:	2000      	movs	r0, #0
	return xReturn;
 800a3c0:	e7ee      	b.n	800a3a0 <xTaskRemoveFromEventList+0x50>
 800a3c2:	bf00      	nop
 800a3c4:	2400ac48 	.word	0x2400ac48
 800a3c8:	2400ac50 	.word	0x2400ac50
 800a3cc:	2400a7e0 	.word	0x2400a7e0
 800a3d0:	2400a7d4 	.word	0x2400a7d4
 800a3d4:	2400acd0 	.word	0x2400acd0
 800a3d8:	2400ac8c 	.word	0x2400ac8c

0800a3dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <vTaskInternalSetTimeOutState+0x10>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3e2:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <vTaskInternalSetTimeOutState+0x14>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6043      	str	r3, [r0, #4]
}
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2400ac84 	.word	0x2400ac84
 800a3f0:	2400accc 	.word	0x2400accc

0800a3f4 <xTaskCheckForTimeOut>:
{
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a3f6:	b1c8      	cbz	r0, 800a42c <xTaskCheckForTimeOut+0x38>
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a3fc:	b1f9      	cbz	r1, 800a43e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800a3fe:	f7fe fcb1 	bl	8008d64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a402:	4b1b      	ldr	r3, [pc, #108]	; (800a470 <xTaskCheckForTimeOut+0x7c>)
 800a404:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a406:	686b      	ldr	r3, [r5, #4]
 800a408:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a410:	d026      	beq.n	800a460 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a412:	4e18      	ldr	r6, [pc, #96]	; (800a474 <xTaskCheckForTimeOut+0x80>)
 800a414:	6836      	ldr	r6, [r6, #0]
 800a416:	682f      	ldr	r7, [r5, #0]
 800a418:	42b7      	cmp	r7, r6
 800a41a:	d001      	beq.n	800a420 <xTaskCheckForTimeOut+0x2c>
 800a41c:	428b      	cmp	r3, r1
 800a41e:	d924      	bls.n	800a46a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a420:	4282      	cmp	r2, r0
 800a422:	d815      	bhi.n	800a450 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a428:	2401      	movs	r4, #1
 800a42a:	e01a      	b.n	800a462 <xTaskCheckForTimeOut+0x6e>
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a43c:	e7fe      	b.n	800a43c <xTaskCheckForTimeOut+0x48>
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a44e:	e7fe      	b.n	800a44e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800a450:	1a5b      	subs	r3, r3, r1
 800a452:	4413      	add	r3, r2
 800a454:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a456:	4628      	mov	r0, r5
 800a458:	f7ff ffc0 	bl	800a3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a45c:	2400      	movs	r4, #0
 800a45e:	e000      	b.n	800a462 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800a460:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a462:	f7fe fca1 	bl	8008da8 <vPortExitCritical>
}
 800a466:	4620      	mov	r0, r4
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800a46a:	2401      	movs	r4, #1
 800a46c:	e7f9      	b.n	800a462 <xTaskCheckForTimeOut+0x6e>
 800a46e:	bf00      	nop
 800a470:	2400accc 	.word	0x2400accc
 800a474:	2400ac84 	.word	0x2400ac84

0800a478 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a478:	4b01      	ldr	r3, [pc, #4]	; (800a480 <vTaskMissedYield+0x8>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
}
 800a47e:	4770      	bx	lr
 800a480:	2400acd0 	.word	0x2400acd0

0800a484 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <xTaskGetSchedulerState+0x18>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	b133      	cbz	r3, 800a498 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a48a:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <xTaskGetSchedulerState+0x1c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	b10b      	cbz	r3, 800a494 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a490:	2000      	movs	r0, #0
	}
 800a492:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a494:	2002      	movs	r0, #2
 800a496:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a498:	2001      	movs	r0, #1
 800a49a:	4770      	bx	lr
 800a49c:	2400aca0 	.word	0x2400aca0
 800a4a0:	2400ac48 	.word	0x2400ac48

0800a4a4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d03e      	beq.n	800a526 <xTaskPriorityInherit+0x82>
	{
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a4ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a4ae:	4a20      	ldr	r2, [pc, #128]	; (800a530 <xTaskPriorityInherit+0x8c>)
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d22e      	bcs.n	800a516 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4b8:	6982      	ldr	r2, [r0, #24]
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	db05      	blt.n	800a4ca <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4be:	4a1c      	ldr	r2, [pc, #112]	; (800a530 <xTaskPriorityInherit+0x8c>)
 800a4c0:	6812      	ldr	r2, [r2, #0]
 800a4c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4c4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a4c8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4ca:	6961      	ldr	r1, [r4, #20]
 800a4cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4d0:	4a18      	ldr	r2, [pc, #96]	; (800a534 <xTaskPriorityInherit+0x90>)
 800a4d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	d005      	beq.n	800a4e6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4da:	4b15      	ldr	r3, [pc, #84]	; (800a530 <xTaskPriorityInherit+0x8c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a4e2:	2001      	movs	r0, #1
	}
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e6:	1d25      	adds	r5, r4, #4
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f7fe fbbb 	bl	8008c64 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4ee:	4b10      	ldr	r3, [pc, #64]	; (800a530 <xTaskPriorityInherit+0x8c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a4f4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4f6:	4b10      	ldr	r3, [pc, #64]	; (800a538 <xTaskPriorityInherit+0x94>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4298      	cmp	r0, r3
 800a4fc:	d901      	bls.n	800a502 <xTaskPriorityInherit+0x5e>
 800a4fe:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <xTaskPriorityInherit+0x94>)
 800a500:	6018      	str	r0, [r3, #0]
 800a502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a506:	4629      	mov	r1, r5
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <xTaskPriorityInherit+0x90>)
 800a50a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a50e:	f7fe fb85 	bl	8008c1c <vListInsertEnd>
				xReturn = pdTRUE;
 800a512:	2001      	movs	r0, #1
 800a514:	e7e6      	b.n	800a4e4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a516:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a518:	4b05      	ldr	r3, [pc, #20]	; (800a530 <xTaskPriorityInherit+0x8c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	429a      	cmp	r2, r3
 800a520:	d303      	bcc.n	800a52a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800a522:	2000      	movs	r0, #0
 800a524:	e7de      	b.n	800a4e4 <xTaskPriorityInherit+0x40>
 800a526:	2000      	movs	r0, #0
	}
 800a528:	4770      	bx	lr
					xReturn = pdTRUE;
 800a52a:	2001      	movs	r0, #1
		return xReturn;
 800a52c:	e7da      	b.n	800a4e4 <xTaskPriorityInherit+0x40>
 800a52e:	bf00      	nop
 800a530:	2400a7d4 	.word	0x2400a7d4
 800a534:	2400a7e0 	.word	0x2400a7e0
 800a538:	2400ac50 	.word	0x2400ac50

0800a53c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d03b      	beq.n	800a5b8 <xTaskPriorityDisinherit+0x7c>
	{
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a544:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <xTaskPriorityDisinherit+0x84>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4283      	cmp	r3, r0
 800a54a:	d008      	beq.n	800a55e <xTaskPriorityDisinherit+0x22>
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	e7fe      	b.n	800a55c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a55e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a560:	b943      	cbnz	r3, 800a574 <xTaskPriorityDisinherit+0x38>
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	e7fe      	b.n	800a572 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a574:	3b01      	subs	r3, #1
 800a576:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a578:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a57a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a57c:	4291      	cmp	r1, r2
 800a57e:	d01d      	beq.n	800a5bc <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a580:	b10b      	cbz	r3, 800a586 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a582:	2000      	movs	r0, #0
	}
 800a584:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a586:	1d05      	adds	r5, r0, #4
 800a588:	4628      	mov	r0, r5
 800a58a:	f7fe fb6b 	bl	8008c64 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a58e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a590:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a592:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800a596:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <xTaskPriorityDisinherit+0x88>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4298      	cmp	r0, r3
 800a59e:	d901      	bls.n	800a5a4 <xTaskPriorityDisinherit+0x68>
 800a5a0:	4b08      	ldr	r3, [pc, #32]	; (800a5c4 <xTaskPriorityDisinherit+0x88>)
 800a5a2:	6018      	str	r0, [r3, #0]
 800a5a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <xTaskPriorityDisinherit+0x8c>)
 800a5ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5b0:	f7fe fb34 	bl	8008c1c <vListInsertEnd>
					xReturn = pdTRUE;
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	e7e5      	b.n	800a584 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a5b8:	2000      	movs	r0, #0
	}
 800a5ba:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a5bc:	2000      	movs	r0, #0
 800a5be:	e7e1      	b.n	800a584 <xTaskPriorityDisinherit+0x48>
 800a5c0:	2400a7d4 	.word	0x2400a7d4
 800a5c4:	2400ac50 	.word	0x2400ac50
 800a5c8:	2400a7e0 	.word	0x2400a7e0

0800a5cc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d046      	beq.n	800a65e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a5d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5d6:	b943      	cbnz	r3, 800a5ea <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	e7fe      	b.n	800a5e8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a5ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a5ec:	428a      	cmp	r2, r1
 800a5ee:	d200      	bcs.n	800a5f2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a5f0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a5f4:	4291      	cmp	r1, r2
 800a5f6:	d001      	beq.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d000      	beq.n	800a5fe <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a5fe:	4b18      	ldr	r3, [pc, #96]	; (800a660 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	42a3      	cmp	r3, r4
 800a604:	d022      	beq.n	800a64c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800a606:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a608:	69a3      	ldr	r3, [r4, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db02      	blt.n	800a614 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a60e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a612:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a614:	6962      	ldr	r2, [r4, #20]
 800a616:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a61a:	4b12      	ldr	r3, [pc, #72]	; (800a664 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a61c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a620:	428a      	cmp	r2, r1
 800a622:	d1eb      	bne.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a624:	1d25      	adds	r5, r4, #4
 800a626:	4628      	mov	r0, r5
 800a628:	f7fe fb1c 	bl	8008c64 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a62c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a62e:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4298      	cmp	r0, r3
 800a634:	d901      	bls.n	800a63a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800a636:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800a638:	6018      	str	r0, [r3, #0]
 800a63a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a63e:	4629      	mov	r1, r5
 800a640:	4b08      	ldr	r3, [pc, #32]	; (800a664 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a642:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a646:	f7fe fae9 	bl	8008c1c <vListInsertEnd>
	}
 800a64a:	e7d7      	b.n	800a5fc <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800a65c:	e7fe      	b.n	800a65c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800a65e:	4770      	bx	lr
 800a660:	2400a7d4 	.word	0x2400a7d4
 800a664:	2400a7e0 	.word	0x2400a7e0
 800a668:	2400ac50 	.word	0x2400ac50

0800a66c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <pvTaskIncrementMutexHeldCount+0x18>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	b123      	cbz	r3, 800a67c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a672:	4b04      	ldr	r3, [pc, #16]	; (800a684 <pvTaskIncrementMutexHeldCount+0x18>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a678:	3301      	adds	r3, #1
 800a67a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800a67c:	4b01      	ldr	r3, [pc, #4]	; (800a684 <pvTaskIncrementMutexHeldCount+0x18>)
 800a67e:	6818      	ldr	r0, [r3, #0]
	}
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	2400a7d4 	.word	0x2400a7d4

0800a688 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <prvGetNextExpireTime+0x1c>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	6813      	ldr	r3, [r2, #0]
 800a68e:	b92b      	cbnz	r3, 800a69c <prvGetNextExpireTime+0x14>
 800a690:	2301      	movs	r3, #1
 800a692:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a694:	b923      	cbnz	r3, 800a6a0 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a696:	68d3      	ldr	r3, [r2, #12]
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a69c:	2300      	movs	r3, #0
 800a69e:	e7f8      	b.n	800a692 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6a0:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a6a2:	4770      	bx	lr
 800a6a4:	2400acd4 	.word	0x2400acd4

0800a6a8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6a8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6ac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6ae:	4291      	cmp	r1, r2
 800a6b0:	d80c      	bhi.n	800a6cc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	6983      	ldr	r3, [r0, #24]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d301      	bcc.n	800a6be <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6ba:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a6bc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6be:	1d01      	adds	r1, r0, #4
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <prvInsertTimerInActiveList+0x48>)
 800a6c2:	6818      	ldr	r0, [r3, #0]
 800a6c4:	f7fe fab5 	bl	8008c32 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e7f7      	b.n	800a6bc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	bf2c      	ite	cs
 800a6d0:	2200      	movcs	r2, #0
 800a6d2:	2201      	movcc	r2, #1
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	bf38      	it	cc
 800a6d8:	2200      	movcc	r2, #0
 800a6da:	b10a      	cbz	r2, 800a6e0 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800a6dc:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a6de:	e7ed      	b.n	800a6bc <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6e0:	1d01      	adds	r1, r0, #4
 800a6e2:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <prvInsertTimerInActiveList+0x4c>)
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f7fe faa4 	bl	8008c32 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	e7e6      	b.n	800a6bc <prvInsertTimerInActiveList+0x14>
 800a6ee:	bf00      	nop
 800a6f0:	2400acd8 	.word	0x2400acd8
 800a6f4:	2400acd4 	.word	0x2400acd4

0800a6f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6f8:	b530      	push	{r4, r5, lr}
 800a6fa:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6fc:	f7fe fb32 	bl	8008d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a700:	4b11      	ldr	r3, [pc, #68]	; (800a748 <prvCheckForValidListAndQueue+0x50>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b11b      	cbz	r3, 800a70e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a706:	f7fe fb4f 	bl	8008da8 <vPortExitCritical>
}
 800a70a:	b003      	add	sp, #12
 800a70c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a70e:	4d0f      	ldr	r5, [pc, #60]	; (800a74c <prvCheckForValidListAndQueue+0x54>)
 800a710:	4628      	mov	r0, r5
 800a712:	f7fe fa75 	bl	8008c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a716:	4c0e      	ldr	r4, [pc, #56]	; (800a750 <prvCheckForValidListAndQueue+0x58>)
 800a718:	4620      	mov	r0, r4
 800a71a:	f7fe fa71 	bl	8008c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a71e:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <prvCheckForValidListAndQueue+0x5c>)
 800a720:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <prvCheckForValidListAndQueue+0x60>)
 800a724:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a726:	2300      	movs	r3, #0
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <prvCheckForValidListAndQueue+0x64>)
 800a72c:	4a0c      	ldr	r2, [pc, #48]	; (800a760 <prvCheckForValidListAndQueue+0x68>)
 800a72e:	2110      	movs	r1, #16
 800a730:	200a      	movs	r0, #10
 800a732:	f7fe fd66 	bl	8009202 <xQueueGenericCreateStatic>
 800a736:	4b04      	ldr	r3, [pc, #16]	; (800a748 <prvCheckForValidListAndQueue+0x50>)
 800a738:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0e3      	beq.n	800a706 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a73e:	4909      	ldr	r1, [pc, #36]	; (800a764 <prvCheckForValidListAndQueue+0x6c>)
 800a740:	f7ff f972 	bl	8009a28 <vQueueAddToRegistry>
 800a744:	e7df      	b.n	800a706 <prvCheckForValidListAndQueue+0xe>
 800a746:	bf00      	nop
 800a748:	2400adf8 	.word	0x2400adf8
 800a74c:	2400ad7c 	.word	0x2400ad7c
 800a750:	2400ad90 	.word	0x2400ad90
 800a754:	2400acd4 	.word	0x2400acd4
 800a758:	2400acd8 	.word	0x2400acd8
 800a75c:	2400ada8 	.word	0x2400ada8
 800a760:	2400acdc 	.word	0x2400acdc
 800a764:	08019fdc 	.word	0x08019fdc

0800a768 <xTimerCreateTimerTask>:
{
 800a768:	b510      	push	{r4, lr}
 800a76a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a76c:	f7ff ffc4 	bl	800a6f8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a770:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <xTimerCreateTimerTask+0x54>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	b1cb      	cbz	r3, 800a7aa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a776:	2400      	movs	r4, #0
 800a778:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a77a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a77c:	aa07      	add	r2, sp, #28
 800a77e:	a906      	add	r1, sp, #24
 800a780:	a805      	add	r0, sp, #20
 800a782:	f7fe f911 	bl	80089a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a786:	9b05      	ldr	r3, [sp, #20]
 800a788:	9302      	str	r3, [sp, #8]
 800a78a:	9b06      	ldr	r3, [sp, #24]
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	2302      	movs	r3, #2
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	4623      	mov	r3, r4
 800a794:	9a07      	ldr	r2, [sp, #28]
 800a796:	490a      	ldr	r1, [pc, #40]	; (800a7c0 <xTimerCreateTimerTask+0x58>)
 800a798:	480a      	ldr	r0, [pc, #40]	; (800a7c4 <xTimerCreateTimerTask+0x5c>)
 800a79a:	f7ff fb53 	bl	8009e44 <xTaskCreateStatic>
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <xTimerCreateTimerTask+0x60>)
 800a7a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a7a2:	b110      	cbz	r0, 800a7aa <xTimerCreateTimerTask+0x42>
}
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	b008      	add	sp, #32
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a7ba:	e7fe      	b.n	800a7ba <xTimerCreateTimerTask+0x52>
 800a7bc:	2400adf8 	.word	0x2400adf8
 800a7c0:	08019fe4 	.word	0x08019fe4
 800a7c4:	0800aad1 	.word	0x0800aad1
 800a7c8:	2400adfc 	.word	0x2400adfc

0800a7cc <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a7cc:	b1b8      	cbz	r0, 800a7fe <xTimerGenericCommand+0x32>
 800a7ce:	469c      	mov	ip, r3
 800a7d0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a7d2:	4818      	ldr	r0, [pc, #96]	; (800a834 <xTimerGenericCommand+0x68>)
 800a7d4:	6800      	ldr	r0, [r0, #0]
 800a7d6:	b358      	cbz	r0, 800a830 <xTimerGenericCommand+0x64>
{
 800a7d8:	b500      	push	{lr}
 800a7da:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a7dc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7de:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a7e0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a7e2:	2905      	cmp	r1, #5
 800a7e4:	dc1c      	bgt.n	800a820 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a7e6:	f7ff fe4d 	bl	800a484 <xTaskGetSchedulerState>
 800a7ea:	2802      	cmp	r0, #2
 800a7ec:	d010      	beq.n	800a810 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4669      	mov	r1, sp
 800a7f4:	480f      	ldr	r0, [pc, #60]	; (800a834 <xTimerGenericCommand+0x68>)
 800a7f6:	6800      	ldr	r0, [r0, #0]
 800a7f8:	f7fe fdbb 	bl	8009372 <xQueueGenericSend>
 800a7fc:	e015      	b.n	800a82a <xTimerGenericCommand+0x5e>
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a80e:	e7fe      	b.n	800a80e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a810:	2300      	movs	r3, #0
 800a812:	9a06      	ldr	r2, [sp, #24]
 800a814:	4669      	mov	r1, sp
 800a816:	4807      	ldr	r0, [pc, #28]	; (800a834 <xTimerGenericCommand+0x68>)
 800a818:	6800      	ldr	r0, [r0, #0]
 800a81a:	f7fe fdaa 	bl	8009372 <xQueueGenericSend>
 800a81e:	e004      	b.n	800a82a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a820:	2300      	movs	r3, #0
 800a822:	4662      	mov	r2, ip
 800a824:	4669      	mov	r1, sp
 800a826:	f7fe fe68 	bl	80094fa <xQueueGenericSendFromISR>
}
 800a82a:	b005      	add	sp, #20
 800a82c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a830:	2000      	movs	r0, #0
}
 800a832:	4770      	bx	lr
 800a834:	2400adf8 	.word	0x2400adf8

0800a838 <prvSwitchTimerLists>:
{
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a83c:	4b1b      	ldr	r3, [pc, #108]	; (800a8ac <prvSwitchTimerLists+0x74>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	b362      	cbz	r2, 800a89e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a848:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a84a:	1d25      	adds	r5, r4, #4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f7fe fa09 	bl	8008c64 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a852:	6a23      	ldr	r3, [r4, #32]
 800a854:	4620      	mov	r0, r4
 800a856:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a858:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a85c:	f013 0f04 	tst.w	r3, #4
 800a860:	d0ec      	beq.n	800a83c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a862:	69a3      	ldr	r3, [r4, #24]
 800a864:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a866:	429e      	cmp	r6, r3
 800a868:	d207      	bcs.n	800a87a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a86a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a86c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a86e:	4629      	mov	r1, r5
 800a870:	4b0e      	ldr	r3, [pc, #56]	; (800a8ac <prvSwitchTimerLists+0x74>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	f7fe f9dd 	bl	8008c32 <vListInsert>
 800a878:	e7e0      	b.n	800a83c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a87a:	2100      	movs	r1, #0
 800a87c:	9100      	str	r1, [sp, #0]
 800a87e:	460b      	mov	r3, r1
 800a880:	4632      	mov	r2, r6
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff ffa2 	bl	800a7cc <xTimerGenericCommand>
				configASSERT( xResult );
 800a888:	2800      	cmp	r0, #0
 800a88a:	d1d7      	bne.n	800a83c <prvSwitchTimerLists+0x4>
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	e7fe      	b.n	800a89c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a89e:	4a04      	ldr	r2, [pc, #16]	; (800a8b0 <prvSwitchTimerLists+0x78>)
 800a8a0:	6810      	ldr	r0, [r2, #0]
 800a8a2:	4902      	ldr	r1, [pc, #8]	; (800a8ac <prvSwitchTimerLists+0x74>)
 800a8a4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a8a6:	6013      	str	r3, [r2, #0]
}
 800a8a8:	b002      	add	sp, #8
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	2400acd4 	.word	0x2400acd4
 800a8b0:	2400acd8 	.word	0x2400acd8

0800a8b4 <prvSampleTimeNow>:
{
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a8b8:	f7ff fb92 	bl	8009fe0 <xTaskGetTickCount>
 800a8bc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <prvSampleTimeNow+0x28>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	d805      	bhi.n	800a8d2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a8ca:	4b04      	ldr	r3, [pc, #16]	; (800a8dc <prvSampleTimeNow+0x28>)
 800a8cc:	601c      	str	r4, [r3, #0]
}
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a8d2:	f7ff ffb1 	bl	800a838 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	e7f6      	b.n	800a8ca <prvSampleTimeNow+0x16>
 800a8dc:	2400ada4 	.word	0x2400ada4

0800a8e0 <prvProcessExpiredTimer>:
{
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e8:	4917      	ldr	r1, [pc, #92]	; (800a948 <prvProcessExpiredTimer+0x68>)
 800a8ea:	6809      	ldr	r1, [r1, #0]
 800a8ec:	68c9      	ldr	r1, [r1, #12]
 800a8ee:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f0:	1d20      	adds	r0, r4, #4
 800a8f2:	f7fe f9b7 	bl	8008c64 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8f6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800a8fa:	f01c 0f04 	tst.w	ip, #4
 800a8fe:	d108      	bne.n	800a912 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a900:	f02c 0c01 	bic.w	ip, ip, #1
 800a904:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a908:	6a23      	ldr	r3, [r4, #32]
 800a90a:	4620      	mov	r0, r4
 800a90c:	4798      	blx	r3
}
 800a90e:	b002      	add	sp, #8
 800a910:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a912:	69a1      	ldr	r1, [r4, #24]
 800a914:	4633      	mov	r3, r6
 800a916:	462a      	mov	r2, r5
 800a918:	4431      	add	r1, r6
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff fec4 	bl	800a6a8 <prvInsertTimerInActiveList>
 800a920:	2800      	cmp	r0, #0
 800a922:	d0f1      	beq.n	800a908 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a924:	2100      	movs	r1, #0
 800a926:	9100      	str	r1, [sp, #0]
 800a928:	460b      	mov	r3, r1
 800a92a:	4632      	mov	r2, r6
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7ff ff4d 	bl	800a7cc <xTimerGenericCommand>
			configASSERT( xResult );
 800a932:	2800      	cmp	r0, #0
 800a934:	d1e8      	bne.n	800a908 <prvProcessExpiredTimer+0x28>
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	e7fe      	b.n	800a946 <prvProcessExpiredTimer+0x66>
 800a948:	2400acd4 	.word	0x2400acd4

0800a94c <prvProcessTimerOrBlockTask>:
{
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	4606      	mov	r6, r0
 800a952:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a954:	f7ff fb3c 	bl	8009fd0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a958:	a801      	add	r0, sp, #4
 800a95a:	f7ff ffab 	bl	800a8b4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	bb3b      	cbnz	r3, 800a9b2 <prvProcessTimerOrBlockTask+0x66>
 800a962:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a964:	42b0      	cmp	r0, r6
 800a966:	bf28      	it	cs
 800a968:	2c00      	cmpcs	r4, #0
 800a96a:	d019      	beq.n	800a9a0 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800a96c:	b124      	cbz	r4, 800a978 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a96e:	4a13      	ldr	r2, [pc, #76]	; (800a9bc <prvProcessTimerOrBlockTask+0x70>)
 800a970:	6812      	ldr	r2, [r2, #0]
 800a972:	6812      	ldr	r2, [r2, #0]
 800a974:	b9da      	cbnz	r2, 800a9ae <prvProcessTimerOrBlockTask+0x62>
 800a976:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a978:	4622      	mov	r2, r4
 800a97a:	1b71      	subs	r1, r6, r5
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <prvProcessTimerOrBlockTask+0x74>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	f7ff f892 	bl	8009aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a984:	f7ff fbbe 	bl	800a104 <xTaskResumeAll>
 800a988:	b9a8      	cbnz	r0, 800a9b6 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800a98a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a992:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	e00a      	b.n	800a9b6 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800a9a0:	f7ff fbb0 	bl	800a104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff ff9a 	bl	800a8e0 <prvProcessExpiredTimer>
 800a9ac:	e003      	b.n	800a9b6 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ae:	461c      	mov	r4, r3
 800a9b0:	e7e2      	b.n	800a978 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800a9b2:	f7ff fba7 	bl	800a104 <xTaskResumeAll>
}
 800a9b6:	b002      	add	sp, #8
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	bf00      	nop
 800a9bc:	2400acd8 	.word	0x2400acd8
 800a9c0:	2400adf8 	.word	0x2400adf8

0800a9c4 <prvProcessReceivedCommands>:
{
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c8:	e002      	b.n	800a9d0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	da0f      	bge.n	800a9f0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	a904      	add	r1, sp, #16
 800a9d4:	4b3d      	ldr	r3, [pc, #244]	; (800aacc <prvProcessReceivedCommands+0x108>)
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	f7fe fe4f 	bl	800967a <xQueueReceive>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d073      	beq.n	800aac8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9e0:	9b04      	ldr	r3, [sp, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	daf1      	bge.n	800a9ca <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9e6:	9907      	ldr	r1, [sp, #28]
 800a9e8:	9806      	ldr	r0, [sp, #24]
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	4798      	blx	r3
 800a9ee:	e7ec      	b.n	800a9ca <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9f0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9f2:	6963      	ldr	r3, [r4, #20]
 800a9f4:	b113      	cbz	r3, 800a9fc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9f6:	1d20      	adds	r0, r4, #4
 800a9f8:	f7fe f934 	bl	8008c64 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9fc:	a803      	add	r0, sp, #12
 800a9fe:	f7ff ff59 	bl	800a8b4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d8e3      	bhi.n	800a9d0 <prvProcessReceivedCommands+0xc>
 800aa08:	e8df f003 	tbb	[pc, r3]
 800aa0c:	30050505 	.word	0x30050505
 800aa10:	05055037 	.word	0x05055037
 800aa14:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa1a:	f043 0301 	orr.w	r3, r3, #1
 800aa1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	69a1      	ldr	r1, [r4, #24]
 800aa26:	4602      	mov	r2, r0
 800aa28:	4419      	add	r1, r3
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7ff fe3c 	bl	800a6a8 <prvInsertTimerInActiveList>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d0cd      	beq.n	800a9d0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa34:	6a23      	ldr	r3, [r4, #32]
 800aa36:	4620      	mov	r0, r4
 800aa38:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa3a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa3e:	f013 0f04 	tst.w	r3, #4
 800aa42:	d0c5      	beq.n	800a9d0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa44:	69a2      	ldr	r2, [r4, #24]
 800aa46:	2100      	movs	r1, #0
 800aa48:	9100      	str	r1, [sp, #0]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	9805      	ldr	r0, [sp, #20]
 800aa4e:	4402      	add	r2, r0
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7ff febb 	bl	800a7cc <xTimerGenericCommand>
							configASSERT( xResult );
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d1ba      	bne.n	800a9d0 <prvProcessReceivedCommands+0xc>
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	e7fe      	b.n	800aa6a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800aa78:	e7aa      	b.n	800a9d0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa86:	9905      	ldr	r1, [sp, #20]
 800aa88:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa8a:	b131      	cbz	r1, 800aa9a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4401      	add	r1, r0
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff fe08 	bl	800a6a8 <prvInsertTimerInActiveList>
					break;
 800aa98:	e79a      	b.n	800a9d0 <prvProcessReceivedCommands+0xc>
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aaaa:	e7fe      	b.n	800aaaa <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aab0:	f013 0f02 	tst.w	r3, #2
 800aab4:	d004      	beq.n	800aac0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab6:	f023 0301 	bic.w	r3, r3, #1
 800aaba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800aabe:	e787      	b.n	800a9d0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7fe f85f 	bl	8008b84 <vPortFree>
 800aac6:	e783      	b.n	800a9d0 <prvProcessReceivedCommands+0xc>
}
 800aac8:	b008      	add	sp, #32
 800aaca:	bd10      	pop	{r4, pc}
 800aacc:	2400adf8 	.word	0x2400adf8

0800aad0 <prvTimerTask>:
{
 800aad0:	b500      	push	{lr}
 800aad2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aad4:	a801      	add	r0, sp, #4
 800aad6:	f7ff fdd7 	bl	800a688 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aada:	9901      	ldr	r1, [sp, #4]
 800aadc:	f7ff ff36 	bl	800a94c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800aae0:	f7ff ff70 	bl	800a9c4 <prvProcessReceivedCommands>
	for( ;; )
 800aae4:	e7f6      	b.n	800aad4 <prvTimerTask+0x4>

0800aae6 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800aae6:	8880      	ldrh	r0, [r0, #4]
 800aae8:	4770      	bx	lr

0800aaea <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800aaea:	b570      	push	{r4, r5, r6, lr}
 800aaec:	6803      	ldr	r3, [r0, #0]
 800aaee:	460c      	mov	r4, r1
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	4798      	blx	r3
 800aaf8:	4606      	mov	r6, r0
 800aafa:	682b      	ldr	r3, [r5, #0]
 800aafc:	4628      	mov	r0, r5
 800aafe:	1ba4      	subs	r4, r4, r6
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	b2a4      	uxth	r4, r4
 800ab04:	4798      	blx	r3
 800ab06:	fbb4 f0f0 	udiv	r0, r4, r0
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}

0800ab0c <_ZN8touchgfx17AbstractPartition5clearEv>:
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	8083      	strh	r3, [r0, #4]
 800ab10:	4770      	bx	lr

0800ab12 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800ab12:	b510      	push	{r4, lr}
 800ab14:	6803      	ldr	r3, [r0, #0]
 800ab16:	4604      	mov	r4, r0
 800ab18:	8881      	ldrh	r1, [r0, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	4798      	blx	r3
 800ab1e:	88a3      	ldrh	r3, [r4, #4]
 800ab20:	3301      	adds	r3, #1
 800ab22:	80a3      	strh	r3, [r4, #4]
 800ab24:	bd10      	pop	{r4, pc}

0800ab26 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ab26:	6803      	ldr	r3, [r0, #0]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	4718      	bx	r3

0800ab2c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ab2c:	4770      	bx	lr
	...

0800ab30 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ab30:	4a02      	ldr	r2, [pc, #8]	; (800ab3c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ab32:	6002      	str	r2, [r0, #0]
 800ab34:	2200      	movs	r2, #0
 800ab36:	8082      	strh	r2, [r0, #4]
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	08019ff4 	.word	0x08019ff4

0800ab40 <_ZN8touchgfx9Container13getFirstChildEv>:
 800ab40:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800ab42:	4770      	bx	lr

0800ab44 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ab44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab46:	2000      	movs	r0, #0
 800ab48:	b12b      	cbz	r3, 800ab56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab4a:	b920      	cbnz	r0, 800ab56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ab4c:	1a5a      	subs	r2, r3, r1
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	4250      	negs	r0, r2
 800ab52:	4150      	adcs	r0, r2
 800ab54:	e7f8      	b.n	800ab48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ab56:	4770      	bx	lr

0800ab58 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6148      	str	r0, [r1, #20]
 800ab5c:	618b      	str	r3, [r1, #24]
 800ab5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab60:	b913      	cbnz	r3, 800ab68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ab62:	6281      	str	r1, [r0, #40]	; 0x28
 800ab64:	4770      	bx	lr
 800ab66:	4613      	mov	r3, r2
 800ab68:	699a      	ldr	r2, [r3, #24]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d1fb      	bne.n	800ab66 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ab6e:	6199      	str	r1, [r3, #24]
 800ab70:	4770      	bx	lr

0800ab72 <_ZN8touchgfx9Container9removeAllEv>:
 800ab72:	2200      	movs	r2, #0
 800ab74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ab76:	b123      	cbz	r3, 800ab82 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ab78:	6999      	ldr	r1, [r3, #24]
 800ab7a:	6281      	str	r1, [r0, #40]	; 0x28
 800ab7c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ab80:	e7f8      	b.n	800ab74 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ab82:	4770      	bx	lr

0800ab84 <_ZN8touchgfx9Container6unlinkEv>:
 800ab84:	2300      	movs	r3, #0
 800ab86:	6283      	str	r3, [r0, #40]	; 0x28
 800ab88:	4770      	bx	lr

0800ab8a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	8002      	strh	r2, [r0, #0]
 800ab8e:	8042      	strh	r2, [r0, #2]
 800ab90:	8082      	strh	r2, [r0, #4]
 800ab92:	80c2      	strh	r2, [r0, #6]
 800ab94:	4770      	bx	lr

0800ab96 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ab96:	b570      	push	{r4, r5, r6, lr}
 800ab98:	460d      	mov	r5, r1
 800ab9a:	4616      	mov	r6, r2
 800ab9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab9e:	b13c      	cbz	r4, 800abb0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	4620      	mov	r0, r4
 800aba4:	4632      	mov	r2, r6
 800aba6:	4629      	mov	r1, r5
 800aba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abaa:	4798      	blx	r3
 800abac:	69a4      	ldr	r4, [r4, #24]
 800abae:	e7f6      	b.n	800ab9e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800abb0:	bd70      	pop	{r4, r5, r6, pc}

0800abb2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800abb2:	b538      	push	{r3, r4, r5, lr}
 800abb4:	460d      	mov	r5, r1
 800abb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800abb8:	b134      	cbz	r4, 800abc8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	4621      	mov	r1, r4
 800abbe:	4628      	mov	r0, r5
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	4798      	blx	r3
 800abc4:	69a4      	ldr	r4, [r4, #24]
 800abc6:	e7f7      	b.n	800abb8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800abc8:	bd38      	pop	{r3, r4, r5, pc}

0800abca <_ZNK8touchgfx9Container17invalidateContentEv>:
 800abca:	b510      	push	{r4, lr}
 800abcc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800abce:	b12c      	cbz	r4, 800abdc <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	4620      	mov	r0, r4
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	4798      	blx	r3
 800abd8:	69a4      	ldr	r4, [r4, #24]
 800abda:	e7f8      	b.n	800abce <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800abdc:	bd10      	pop	{r4, pc}

0800abde <_ZN8touchgfx9ContainerD1Ev>:
 800abde:	4770      	bx	lr

0800abe0 <_ZN8touchgfx9ContainerD0Ev>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	212c      	movs	r1, #44	; 0x2c
 800abe6:	f00c ffde 	bl	8017ba6 <_ZdlPvj>
 800abea:	4620      	mov	r0, r4
 800abec:	bd10      	pop	{r4, pc}

0800abee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800abee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abf0:	b19b      	cbz	r3, 800ac1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800abf2:	428b      	cmp	r3, r1
 800abf4:	d109      	bne.n	800ac0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800abf6:	699a      	ldr	r2, [r3, #24]
 800abf8:	2100      	movs	r1, #0
 800abfa:	6159      	str	r1, [r3, #20]
 800abfc:	6282      	str	r2, [r0, #40]	; 0x28
 800abfe:	b902      	cbnz	r2, 800ac02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ac00:	4770      	bx	lr
 800ac02:	6199      	str	r1, [r3, #24]
 800ac04:	4770      	bx	lr
 800ac06:	4613      	mov	r3, r2
 800ac08:	b13a      	cbz	r2, 800ac1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	428a      	cmp	r2, r1
 800ac0e:	d1fa      	bne.n	800ac06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ac10:	698a      	ldr	r2, [r1, #24]
 800ac12:	619a      	str	r2, [r3, #24]
 800ac14:	2300      	movs	r3, #0
 800ac16:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ac1a:	4770      	bx	lr

0800ac1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ac1c:	b410      	push	{r4}
 800ac1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ac20:	4604      	mov	r4, r0
 800ac22:	b92b      	cbnz	r3, 800ac30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ac24:	6803      	ldr	r3, [r0, #0]
 800ac26:	4611      	mov	r1, r2
 800ac28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac2e:	4718      	bx	r3
 800ac30:	b941      	cbnz	r1, 800ac44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ac32:	6193      	str	r3, [r2, #24]
 800ac34:	6282      	str	r2, [r0, #40]	; 0x28
 800ac36:	6154      	str	r4, [r2, #20]
 800ac38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d0f9      	beq.n	800ac38 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ac44:	4299      	cmp	r1, r3
 800ac46:	6998      	ldr	r0, [r3, #24]
 800ac48:	d1f9      	bne.n	800ac3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ac4a:	6190      	str	r0, [r2, #24]
 800ac4c:	618a      	str	r2, [r1, #24]
 800ac4e:	e7f2      	b.n	800ac36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ac50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac54:	461f      	mov	r7, r3
 800ac56:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	b103      	cbz	r3, 800ac62 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ac60:	6038      	str	r0, [r7, #0]
 800ac62:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ac64:	b314      	cbz	r4, 800acac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ac66:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ac6a:	b1eb      	cbz	r3, 800aca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac6c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ac70:	428d      	cmp	r5, r1
 800ac72:	db19      	blt.n	800aca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac74:	b289      	uxth	r1, r1
 800ac76:	8923      	ldrh	r3, [r4, #8]
 800ac78:	440b      	add	r3, r1
 800ac7a:	b21b      	sxth	r3, r3
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	da13      	bge.n	800aca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac80:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ac84:	4296      	cmp	r6, r2
 800ac86:	db0f      	blt.n	800aca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac88:	b292      	uxth	r2, r2
 800ac8a:	8963      	ldrh	r3, [r4, #10]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	429e      	cmp	r6, r3
 800ac92:	da09      	bge.n	800aca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	1ab2      	subs	r2, r6, r2
 800ac98:	1a69      	subs	r1, r5, r1
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800aca0:	b212      	sxth	r2, r2
 800aca2:	463b      	mov	r3, r7
 800aca4:	b209      	sxth	r1, r1
 800aca6:	47c0      	blx	r8
 800aca8:	69a4      	ldr	r4, [r4, #24]
 800acaa:	e7db      	b.n	800ac64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800acac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	4c6d      	ldr	r4, [pc, #436]	; (800ae6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800acb6:	b0a1      	sub	sp, #132	; 0x84
 800acb8:	4606      	mov	r6, r0
 800acba:	6824      	ldr	r4, [r4, #0]
 800acbc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800acbe:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800acc2:	2400      	movs	r4, #0
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	802c      	strh	r4, [r5, #0]
 800acc8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800acca:	802c      	strh	r4, [r5, #0]
 800accc:	601c      	str	r4, [r3, #0]
 800acce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800acd2:	f7ff ffbd 	bl	800ac50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800acd6:	f1b9 0f03 	cmp.w	r9, #3
 800acda:	f340 80c1 	ble.w	800ae60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800acde:	4631      	mov	r1, r6
 800ace0:	a80c      	add	r0, sp, #48	; 0x30
 800ace2:	f003 fa6f 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ace6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800acea:	9306      	str	r3, [sp, #24]
 800acec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800acf0:	9307      	str	r3, [sp, #28]
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	f8d3 a000 	ldr.w	sl, [r3]
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	f000 80b3 	beq.w	800ae66 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ad00:	4651      	mov	r1, sl
 800ad02:	a810      	add	r0, sp, #64	; 0x40
 800ad04:	f003 fa5e 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ad08:	2002      	movs	r0, #2
 800ad0a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	9a06      	ldr	r2, [sp, #24]
 800ad12:	fb91 f1f0 	sdiv	r1, r1, r0
 800ad16:	189d      	adds	r5, r3, r2
 800ad18:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800ad1c:	9a07      	ldr	r2, [sp, #28]
 800ad1e:	4419      	add	r1, r3
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	4413      	add	r3, r2
 800ad24:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800ad28:	1a6d      	subs	r5, r5, r1
 800ad2a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ad2e:	fb92 f2f0 	sdiv	r2, r2, r0
 800ad32:	440a      	add	r2, r1
 800ad34:	1a9b      	subs	r3, r3, r2
 800ad36:	435b      	muls	r3, r3
 800ad38:	fb05 3505 	mla	r5, r5, r5, r3
 800ad3c:	4f4c      	ldr	r7, [pc, #304]	; (800ae70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ad3e:	ac10      	add	r4, sp, #64	; 0x40
 800ad40:	f1b9 0f0c 	cmp.w	r9, #12
 800ad44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad50:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ad54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad58:	f04f 0303 	mov.w	r3, #3
 800ad5c:	bfd8      	it	le
 800ad5e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800ad62:	f04f 0400 	mov.w	r4, #0
 800ad66:	f8cd 9000 	str.w	r9, [sp]
 800ad6a:	bfcc      	ite	gt
 800ad6c:	4698      	movgt	r8, r3
 800ad6e:	fb92 f8f3 	sdivle	r8, r2, r3
 800ad72:	1c63      	adds	r3, r4, #1
 800ad74:	aa10      	add	r2, sp, #64	; 0x40
 800ad76:	f004 0401 	and.w	r4, r4, #1
 800ad7a:	f04f 0b00 	mov.w	fp, #0
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	9b00      	ldr	r3, [sp, #0]
 800ad82:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800ad86:	fb93 f3f8 	sdiv	r3, r3, r8
 800ad8a:	3404      	adds	r4, #4
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	9a04      	ldr	r2, [sp, #16]
 800ad92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad96:	fb13 f302 	smulbb	r3, r3, r2
 800ad9a:	9a01      	ldr	r2, [sp, #4]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	1899      	adds	r1, r3, r2
 800ada0:	9305      	str	r3, [sp, #20]
 800ada2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ada6:	b209      	sxth	r1, r1
 800ada8:	4299      	cmp	r1, r3
 800adaa:	db4d      	blt.n	800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adac:	8932      	ldrh	r2, [r6, #8]
 800adae:	4413      	add	r3, r2
 800adb0:	b21b      	sxth	r3, r3
 800adb2:	4299      	cmp	r1, r3
 800adb4:	da48      	bge.n	800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	6827      	ldr	r7, [r4, #0]
 800adba:	fb17 f703 	smulbb	r7, r7, r3
 800adbe:	9b02      	ldr	r3, [sp, #8]
 800adc0:	b2bf      	uxth	r7, r7
 800adc2:	18fa      	adds	r2, r7, r3
 800adc4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800adc8:	b212      	sxth	r2, r2
 800adca:	429a      	cmp	r2, r3
 800adcc:	db3c      	blt.n	800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adce:	8970      	ldrh	r0, [r6, #10]
 800add0:	4403      	add	r3, r0
 800add2:	b21b      	sxth	r3, r3
 800add4:	429a      	cmp	r2, r3
 800add6:	da37      	bge.n	800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800add8:	2300      	movs	r3, #0
 800adda:	4630      	mov	r0, r6
 800addc:	930b      	str	r3, [sp, #44]	; 0x2c
 800adde:	ab0b      	add	r3, sp, #44	; 0x2c
 800ade0:	f7ff ff36 	bl	800ac50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ade4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ade6:	b37a      	cbz	r2, 800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ade8:	4552      	cmp	r2, sl
 800adea:	d02d      	beq.n	800ae48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800adec:	4611      	mov	r1, r2
 800adee:	a80e      	add	r0, sp, #56	; 0x38
 800adf0:	9209      	str	r2, [sp, #36]	; 0x24
 800adf2:	f003 f9e7 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800adf6:	f04f 0e02 	mov.w	lr, #2
 800adfa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800adfe:	9a06      	ldr	r2, [sp, #24]
 800ae00:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800ae0a:	4413      	add	r3, r2
 800ae0c:	9a07      	ldr	r2, [sp, #28]
 800ae0e:	fb91 f1fe 	sdiv	r1, r1, lr
 800ae12:	fb9c fcfe 	sdiv	ip, ip, lr
 800ae16:	4401      	add	r1, r0
 800ae18:	1a58      	subs	r0, r3, r1
 800ae1a:	9b02      	ldr	r3, [sp, #8]
 800ae1c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800ae20:	4413      	add	r3, r2
 800ae22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae24:	448c      	add	ip, r1
 800ae26:	eba3 030c 	sub.w	r3, r3, ip
 800ae2a:	435b      	muls	r3, r3
 800ae2c:	fb00 3300 	mla	r3, r0, r0, r3
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	d208      	bcs.n	800ae46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ae34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae36:	461d      	mov	r5, r3
 800ae38:	9803      	ldr	r0, [sp, #12]
 800ae3a:	6001      	str	r1, [r0, #0]
 800ae3c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ae3e:	9805      	ldr	r0, [sp, #20]
 800ae40:	8008      	strh	r0, [r1, #0]
 800ae42:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ae44:	800f      	strh	r7, [r1, #0]
 800ae46:	4692      	mov	sl, r2
 800ae48:	f10b 0b01 	add.w	fp, fp, #1
 800ae4c:	3408      	adds	r4, #8
 800ae4e:	f1bb 0f04 	cmp.w	fp, #4
 800ae52:	d19d      	bne.n	800ad90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	9c08      	ldr	r4, [sp, #32]
 800ae58:	444b      	add	r3, r9
 800ae5a:	4544      	cmp	r4, r8
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	d188      	bne.n	800ad72 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ae60:	b021      	add	sp, #132	; 0x84
 800ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae66:	f04f 35ff 	mov.w	r5, #4294967295
 800ae6a:	e767      	b.n	800ad3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ae6c:	2400ae0c 	.word	0x2400ae0c
 800ae70:	08018e54 	.word	0x08018e54

0800ae74 <_ZN8touchgfx4RectaNERKS0_>:
 800ae74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae78:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ae7c:	888c      	ldrh	r4, [r1, #4]
 800ae7e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ae82:	443c      	add	r4, r7
 800ae84:	b2a4      	uxth	r4, r4
 800ae86:	fa0f f884 	sxth.w	r8, r4
 800ae8a:	45c1      	cmp	r9, r8
 800ae8c:	da2f      	bge.n	800aeee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae8e:	8882      	ldrh	r2, [r0, #4]
 800ae90:	444a      	add	r2, r9
 800ae92:	b292      	uxth	r2, r2
 800ae94:	fa0f fe82 	sxth.w	lr, r2
 800ae98:	4577      	cmp	r7, lr
 800ae9a:	da28      	bge.n	800aeee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ae9c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800aea0:	88cb      	ldrh	r3, [r1, #6]
 800aea2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800aea6:	442b      	add	r3, r5
 800aea8:	b21b      	sxth	r3, r3
 800aeaa:	429e      	cmp	r6, r3
 800aeac:	da1f      	bge.n	800aeee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aeae:	88c3      	ldrh	r3, [r0, #6]
 800aeb0:	4433      	add	r3, r6
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	fa0f fc83 	sxth.w	ip, r3
 800aeb8:	4565      	cmp	r5, ip
 800aeba:	da18      	bge.n	800aeee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aebc:	454f      	cmp	r7, r9
 800aebe:	bfb8      	it	lt
 800aec0:	464f      	movlt	r7, r9
 800aec2:	42b5      	cmp	r5, r6
 800aec4:	bfb8      	it	lt
 800aec6:	4635      	movlt	r5, r6
 800aec8:	45f0      	cmp	r8, lr
 800aeca:	bfd8      	it	le
 800aecc:	4622      	movle	r2, r4
 800aece:	1bd2      	subs	r2, r2, r7
 800aed0:	8082      	strh	r2, [r0, #4]
 800aed2:	884a      	ldrh	r2, [r1, #2]
 800aed4:	88c9      	ldrh	r1, [r1, #6]
 800aed6:	8007      	strh	r7, [r0, #0]
 800aed8:	440a      	add	r2, r1
 800aeda:	8045      	strh	r5, [r0, #2]
 800aedc:	b292      	uxth	r2, r2
 800aede:	b211      	sxth	r1, r2
 800aee0:	458c      	cmp	ip, r1
 800aee2:	bfa8      	it	ge
 800aee4:	4613      	movge	r3, r2
 800aee6:	1b5b      	subs	r3, r3, r5
 800aee8:	80c3      	strh	r3, [r0, #6]
 800aeea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeee:	2300      	movs	r3, #0
 800aef0:	8003      	strh	r3, [r0, #0]
 800aef2:	8043      	strh	r3, [r0, #2]
 800aef4:	8083      	strh	r3, [r0, #4]
 800aef6:	80c3      	strh	r3, [r0, #6]
 800aef8:	e7f7      	b.n	800aeea <_ZN8touchgfx4RectaNERKS0_+0x76>

0800aefa <_ZNK8touchgfx4Rect7isEmptyEv>:
 800aefa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dd06      	ble.n	800af10 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800af02:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800af06:	2800      	cmp	r0, #0
 800af08:	bfcc      	ite	gt
 800af0a:	2000      	movgt	r0, #0
 800af0c:	2001      	movle	r0, #1
 800af0e:	4770      	bx	lr
 800af10:	2001      	movs	r0, #1
 800af12:	4770      	bx	lr

0800af14 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800af1e:	8003      	strh	r3, [r0, #0]
 800af20:	8043      	strh	r3, [r0, #2]
 800af22:	8083      	strh	r3, [r0, #4]
 800af24:	80c3      	strh	r3, [r0, #6]
 800af26:	2d00      	cmp	r5, #0
 800af28:	d040      	beq.n	800afac <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800af2a:	1d28      	adds	r0, r5, #4
 800af2c:	f7ff ffe5 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800af30:	b988      	cbnz	r0, 800af56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800af32:	4620      	mov	r0, r4
 800af34:	f7ff ffe1 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800af38:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800af3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800af40:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800af44:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800af48:	b138      	cbz	r0, 800af5a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800af4a:	8022      	strh	r2, [r4, #0]
 800af4c:	8063      	strh	r3, [r4, #2]
 800af4e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800af52:	f8a4 c006 	strh.w	ip, [r4, #6]
 800af56:	69ad      	ldr	r5, [r5, #24]
 800af58:	e7e5      	b.n	800af26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800af5a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800af5e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800af62:	4290      	cmp	r0, r2
 800af64:	4607      	mov	r7, r0
 800af66:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800af6a:	460e      	mov	r6, r1
 800af6c:	bfa8      	it	ge
 800af6e:	4617      	movge	r7, r2
 800af70:	4299      	cmp	r1, r3
 800af72:	4472      	add	r2, lr
 800af74:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800af78:	bfa8      	it	ge
 800af7a:	461e      	movge	r6, r3
 800af7c:	4440      	add	r0, r8
 800af7e:	4471      	add	r1, lr
 800af80:	4463      	add	r3, ip
 800af82:	b200      	sxth	r0, r0
 800af84:	8027      	strh	r7, [r4, #0]
 800af86:	b212      	sxth	r2, r2
 800af88:	8066      	strh	r6, [r4, #2]
 800af8a:	b209      	sxth	r1, r1
 800af8c:	b21b      	sxth	r3, r3
 800af8e:	4290      	cmp	r0, r2
 800af90:	bfac      	ite	ge
 800af92:	ebc7 0200 	rsbge	r2, r7, r0
 800af96:	ebc7 0202 	rsblt	r2, r7, r2
 800af9a:	4299      	cmp	r1, r3
 800af9c:	bfac      	ite	ge
 800af9e:	ebc6 0301 	rsbge	r3, r6, r1
 800afa2:	ebc6 0303 	rsblt	r3, r6, r3
 800afa6:	80a2      	strh	r2, [r4, #4]
 800afa8:	80e3      	strh	r3, [r4, #6]
 800afaa:	e7d4      	b.n	800af56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800afac:	4620      	mov	r0, r4
 800afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800afb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800afb6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800afba:	b383      	cbz	r3, 800b01e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800afbc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800afbe:	b374      	cbz	r4, 800b01e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800afc0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800afc4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800afc8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800afcc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800afd0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800afd4:	b303      	cbz	r3, 800b018 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800afd6:	4668      	mov	r0, sp
 800afd8:	1d21      	adds	r1, r4, #4
 800afda:	f8ad 5000 	strh.w	r5, [sp]
 800afde:	f8ad 6002 	strh.w	r6, [sp, #2]
 800afe2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800afe6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800afea:	f7ff ff43 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800afee:	4668      	mov	r0, sp
 800aff0:	f7ff ff83 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800aff4:	b980      	cbnz	r0, 800b018 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800aff6:	f8bd 3000 	ldrh.w	r3, [sp]
 800affa:	4669      	mov	r1, sp
 800affc:	88a2      	ldrh	r2, [r4, #4]
 800affe:	4620      	mov	r0, r4
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	88e2      	ldrh	r2, [r4, #6]
 800b004:	f8ad 3000 	strh.w	r3, [sp]
 800b008:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	4798      	blx	r3
 800b018:	69a4      	ldr	r4, [r4, #24]
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	d1d8      	bne.n	800afd0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800b01e:	b002      	add	sp, #8
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b024 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800b024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b026:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b02a:	460d      	mov	r5, r1
 800b02c:	4616      	mov	r6, r2
 800b02e:	b323      	cbz	r3, 800b07a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b030:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b032:	b314      	cbz	r4, 800b07a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800b034:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b038:	b1eb      	cbz	r3, 800b076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b03a:	6828      	ldr	r0, [r5, #0]
 800b03c:	466b      	mov	r3, sp
 800b03e:	6869      	ldr	r1, [r5, #4]
 800b040:	c303      	stmia	r3!, {r0, r1}
 800b042:	4668      	mov	r0, sp
 800b044:	1d21      	adds	r1, r4, #4
 800b046:	f7ff ff15 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800b04a:	4668      	mov	r0, sp
 800b04c:	f7ff ff55 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800b050:	b988      	cbnz	r0, 800b076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800b052:	f8bd 3000 	ldrh.w	r3, [sp]
 800b056:	4669      	mov	r1, sp
 800b058:	88a2      	ldrh	r2, [r4, #4]
 800b05a:	4620      	mov	r0, r4
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	88e2      	ldrh	r2, [r4, #6]
 800b060:	f8ad 3000 	strh.w	r3, [sp]
 800b064:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800b068:	1a9b      	subs	r3, r3, r2
 800b06a:	4632      	mov	r2, r6
 800b06c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b074:	4798      	blx	r3
 800b076:	69a4      	ldr	r4, [r4, #24]
 800b078:	e7db      	b.n	800b032 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800b07a:	b002      	add	sp, #8
 800b07c:	bd70      	pop	{r4, r5, r6, pc}

0800b07e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800b07e:	4770      	bx	lr

0800b080 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800b080:	4770      	bx	lr

0800b082 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800b082:	6803      	ldr	r3, [r0, #0]
 800b084:	b513      	push	{r0, r1, r4, lr}
 800b086:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800b08a:	2300      	movs	r3, #0
 800b08c:	e9cd 3300 	strd	r3, r3, [sp]
 800b090:	466b      	mov	r3, sp
 800b092:	47a0      	blx	r4
 800b094:	b002      	add	sp, #8
 800b096:	bd10      	pop	{r4, pc}

0800b098 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800b098:	2301      	movs	r3, #1
 800b09a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b09e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b0a2:	4770      	bx	lr

0800b0a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800b0aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800b0ae:	4770      	bx	lr

0800b0b0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800b0b0:	6843      	ldr	r3, [r0, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	725a      	strb	r2, [r3, #9]
 800b0b6:	6840      	ldr	r0, [r0, #4]
 800b0b8:	6803      	ldr	r3, [r0, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	4718      	bx	r3

0800b0be <_ZN8touchgfx3HAL8flushDMAEv>:
 800b0be:	6840      	ldr	r0, [r0, #4]
 800b0c0:	6803      	ldr	r3, [r0, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	4718      	bx	r3

0800b0c6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800b0c6:	b530      	push	{r4, r5, lr}
 800b0c8:	b08b      	sub	sp, #44	; 0x2c
 800b0ca:	6804      	ldr	r4, [r0, #0]
 800b0cc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800b0d0:	9509      	str	r5, [sp, #36]	; 0x24
 800b0d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800b0d6:	9508      	str	r5, [sp, #32]
 800b0d8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800b0dc:	9507      	str	r5, [sp, #28]
 800b0de:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800b0e2:	9506      	str	r5, [sp, #24]
 800b0e4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800b0e8:	9505      	str	r5, [sp, #20]
 800b0ea:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800b0ee:	9504      	str	r5, [sp, #16]
 800b0f0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800b0f4:	9503      	str	r5, [sp, #12]
 800b0f6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800b0fa:	9502      	str	r5, [sp, #8]
 800b0fc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b100:	e9cd 3500 	strd	r3, r5, [sp]
 800b104:	4613      	mov	r3, r2
 800b106:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800b108:	2200      	movs	r2, #0
 800b10a:	47a0      	blx	r4
 800b10c:	b00b      	add	sp, #44	; 0x2c
 800b10e:	bd30      	pop	{r4, r5, pc}

0800b110 <_ZN8touchgfx3HAL10beginFrameEv>:
 800b110:	4b04      	ldr	r3, [pc, #16]	; (800b124 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	b123      	cbz	r3, 800b120 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800b116:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800b11a:	f080 0001 	eor.w	r0, r0, #1
 800b11e:	4770      	bx	lr
 800b120:	2001      	movs	r0, #1
 800b122:	4770      	bx	lr
 800b124:	2400ae0a 	.word	0x2400ae0a

0800b128 <_ZN8touchgfx3HAL8endFrameEv>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	4604      	mov	r4, r0
 800b12c:	6840      	ldr	r0, [r0, #4]
 800b12e:	6803      	ldr	r3, [r0, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	4798      	blx	r3
 800b134:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800b138:	b113      	cbz	r3, 800b140 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800b13a:	2301      	movs	r3, #1
 800b13c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b140:	bd10      	pop	{r4, pc}

0800b142 <_ZN8touchgfx3HAL10initializeEv>:
 800b142:	b510      	push	{r4, lr}
 800b144:	4604      	mov	r4, r0
 800b146:	f7f5 fb7f 	bl	8000848 <_ZN8touchgfx10OSWrappers10initializeEv>
 800b14a:	6860      	ldr	r0, [r4, #4]
 800b14c:	6803      	ldr	r3, [r0, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4798      	blx	r3
 800b152:	68e0      	ldr	r0, [r4, #12]
 800b154:	6803      	ldr	r3, [r0, #0]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	4798      	blx	r3
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	4620      	mov	r0, r4
 800b15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b164:	4718      	bx	r3

0800b166 <_ZN8touchgfx3HAL9taskEntryEv>:
 800b166:	b508      	push	{r3, lr}
 800b168:	6803      	ldr	r3, [r0, #0]
 800b16a:	4604      	mov	r4, r0
 800b16c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b170:	4798      	blx	r3
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b176:	4620      	mov	r0, r4
 800b178:	4798      	blx	r3
 800b17a:	f7f5 fbc1 	bl	8000900 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b182:	e7f8      	b.n	800b176 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800b184 <_ZN8touchgfx3HAL4tickEv>:
 800b184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b186:	6803      	ldr	r3, [r0, #0]
 800b188:	4604      	mov	r4, r0
 800b18a:	4d5b      	ldr	r5, [pc, #364]	; (800b2f8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800b18c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b190:	4798      	blx	r3
 800b192:	2800      	cmp	r0, #0
 800b194:	f000 8095 	beq.w	800b2c2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800b198:	2001      	movs	r0, #1
 800b19a:	2600      	movs	r6, #0
 800b19c:	f7f5 f97a 	bl	8000494 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b1a0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800b1a4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800b1a8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b1ac:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800b1b0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800b1b4:	b133      	cbz	r3, 800b1c4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b1be:	4798      	blx	r3
 800b1c0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800b1c4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800b1c8:	2601      	movs	r6, #1
 800b1ca:	6862      	ldr	r2, [r4, #4]
 800b1cc:	f083 0301 	eor.w	r3, r3, #1
 800b1d0:	702e      	strb	r6, [r5, #0]
 800b1d2:	7253      	strb	r3, [r2, #9]
 800b1d4:	f001 ffc2 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 800b1d8:	6803      	ldr	r3, [r0, #0]
 800b1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1dc:	4798      	blx	r3
 800b1de:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1e2:	b90b      	cbnz	r3, 800b1e8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b1e4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800b1e8:	f001 ffb8 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 800b1ec:	6803      	ldr	r3, [r0, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	4798      	blx	r3
 800b1f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1f4:	6803      	ldr	r3, [r0, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	4798      	blx	r3
 800b1fa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800b1fe:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800b202:	3b01      	subs	r3, #1
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800b20a:	b10a      	cbz	r2, 800b210 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1eb      	bne.n	800b1e8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800b210:	4a3a      	ldr	r2, [pc, #232]	; (800b2fc <_ZN8touchgfx3HAL4tickEv+0x178>)
 800b212:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800b216:	7813      	ldrb	r3, [r2, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	4299      	cmp	r1, r3
 800b21e:	7013      	strb	r3, [r2, #0]
 800b220:	dc10      	bgt.n	800b244 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b222:	2300      	movs	r3, #0
 800b224:	68e0      	ldr	r0, [r4, #12]
 800b226:	a902      	add	r1, sp, #8
 800b228:	7013      	strb	r3, [r2, #0]
 800b22a:	aa03      	add	r2, sp, #12
 800b22c:	6803      	ldr	r3, [r0, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	4798      	blx	r3
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	2800      	cmp	r0, #0
 800b236:	d050      	beq.n	800b2da <_ZN8touchgfx3HAL4tickEv+0x156>
 800b238:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b23c:	4620      	mov	r0, r4
 800b23e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b242:	4798      	blx	r3
 800b244:	2300      	movs	r3, #0
 800b246:	6960      	ldr	r0, [r4, #20]
 800b248:	f88d 3007 	strb.w	r3, [sp, #7]
 800b24c:	b158      	cbz	r0, 800b266 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b24e:	6803      	ldr	r3, [r0, #0]
 800b250:	f10d 0107 	add.w	r1, sp, #7
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	4798      	blx	r3
 800b258:	b128      	cbz	r0, 800b266 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800b25a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b260:	6803      	ldr	r3, [r0, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	4798      	blx	r3
 800b266:	f104 001c 	add.w	r0, r4, #28
 800b26a:	f00c fbe7 	bl	8017a3c <_ZN8touchgfx8Gestures4tickEv>
 800b26e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800b272:	b30b      	cbz	r3, 800b2b8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b274:	6920      	ldr	r0, [r4, #16]
 800b276:	6803      	ldr	r3, [r0, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	4798      	blx	r3
 800b27c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b27e:	4606      	mov	r6, r0
 800b280:	b903      	cbnz	r3, 800b284 <_ZN8touchgfx3HAL4tickEv+0x100>
 800b282:	6720      	str	r0, [r4, #112]	; 0x70
 800b284:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b286:	4a1e      	ldr	r2, [pc, #120]	; (800b300 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800b288:	1af3      	subs	r3, r6, r3
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d914      	bls.n	800b2b8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800b28e:	6920      	ldr	r0, [r4, #16]
 800b290:	6803      	ldr	r3, [r0, #0]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	4798      	blx	r3
 800b296:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b298:	2264      	movs	r2, #100	; 0x64
 800b29a:	1af3      	subs	r3, r6, r3
 800b29c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a0:	fbb0 f0f3 	udiv	r0, r0, r3
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	dc1d      	bgt.n	800b2e4 <_ZN8touchgfx3HAL4tickEv+0x160>
 800b2a8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800b2ac:	6920      	ldr	r0, [r4, #16]
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	6803      	ldr	r3, [r0, #0]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	4798      	blx	r3
 800b2b6:	6726      	str	r6, [r4, #112]	; 0x70
 800b2b8:	f001 ff50 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 800b2bc:	6803      	ldr	r3, [r0, #0]
 800b2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c0:	4798      	blx	r3
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2ca:	4798      	blx	r3
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7f5 f91f 	bl	8000510 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	702b      	strb	r3, [r5, #0]
 800b2d6:	b004      	add	sp, #16
 800b2d8:	bd70      	pop	{r4, r5, r6, pc}
 800b2da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4798      	blx	r3
 800b2e2:	e7af      	b.n	800b244 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800b2e4:	2863      	cmp	r0, #99	; 0x63
 800b2e6:	bfcb      	itete	gt
 800b2e8:	2300      	movgt	r3, #0
 800b2ea:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800b2ee:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800b2f2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800b2f6:	e7d9      	b.n	800b2ac <_ZN8touchgfx3HAL4tickEv+0x128>
 800b2f8:	2400ae10 	.word	0x2400ae10
 800b2fc:	2400ae11 	.word	0x2400ae11
 800b300:	05f5e100 	.word	0x05f5e100

0800b304 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800b304:	f7f5 bad4 	b.w	80008b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b308 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800b308:	6581      	str	r1, [r0, #88]	; 0x58
 800b30a:	301c      	adds	r0, #28
 800b30c:	f00c bb94 	b.w	8017a38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800b310 <_ZN8touchgfx3HAL5touchEll>:
 800b310:	b530      	push	{r4, r5, lr}
 800b312:	b087      	sub	sp, #28
 800b314:	4604      	mov	r4, r0
 800b316:	a804      	add	r0, sp, #16
 800b318:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b31c:	f001 fc9a 	bl	800cc54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	a906      	add	r1, sp, #24
 800b324:	a803      	add	r0, sp, #12
 800b326:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800b330:	f001 fce2 	bl	800ccf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800b334:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800b338:	f104 001c 	add.w	r0, r4, #28
 800b33c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b340:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b344:	b189      	cbz	r1, 800b36a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800b346:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	4613      	mov	r3, r2
 800b34e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b352:	462a      	mov	r2, r5
 800b354:	f00c fb80 	bl	8017a58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800b358:	b128      	cbz	r0, 800b366 <_ZN8touchgfx3HAL5touchEll+0x56>
 800b35a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800b35e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800b360:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800b364:	6623      	str	r3, [r4, #96]	; 0x60
 800b366:	b007      	add	sp, #28
 800b368:	bd30      	pop	{r4, r5, pc}
 800b36a:	f00c fbb5 	bl	8017ad8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b36e:	2301      	movs	r3, #1
 800b370:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b374:	e7f1      	b.n	800b35a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800b376 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800b376:	b510      	push	{r4, lr}
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d046      	beq.n	800b40a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b37c:	ea81 0002 	eor.w	r0, r1, r2
 800b380:	07c4      	lsls	r4, r0, #31
 800b382:	d508      	bpl.n	800b396 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800b384:	440b      	add	r3, r1
 800b386:	3a01      	subs	r2, #1
 800b388:	428b      	cmp	r3, r1
 800b38a:	d93e      	bls.n	800b40a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b38c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b390:	f801 0b01 	strb.w	r0, [r1], #1
 800b394:	e7f8      	b.n	800b388 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800b396:	07d0      	lsls	r0, r2, #31
 800b398:	bf42      	ittt	mi
 800b39a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800b39e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b3a2:	f801 0b01 	strbmi.w	r0, [r1], #1
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d911      	bls.n	800b3ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3aa:	ea81 0402 	eor.w	r4, r1, r2
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	07a4      	lsls	r4, r4, #30
 800b3b2:	d022      	beq.n	800b3fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800b3b4:	f023 0401 	bic.w	r4, r3, #1
 800b3b8:	440c      	add	r4, r1
 800b3ba:	428c      	cmp	r4, r1
 800b3bc:	4602      	mov	r2, r0
 800b3be:	d904      	bls.n	800b3ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800b3c0:	8812      	ldrh	r2, [r2, #0]
 800b3c2:	3002      	adds	r0, #2
 800b3c4:	f821 2b02 	strh.w	r2, [r1], #2
 800b3c8:	e7f7      	b.n	800b3ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	f023 0003 	bic.w	r0, r3, #3
 800b3d2:	4408      	add	r0, r1
 800b3d4:	4288      	cmp	r0, r1
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	d904      	bls.n	800b3e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800b3da:	6824      	ldr	r4, [r4, #0]
 800b3dc:	3204      	adds	r2, #4
 800b3de:	f841 4b04 	str.w	r4, [r1], #4
 800b3e2:	e7f7      	b.n	800b3d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	3a01      	subs	r2, #1
 800b3ea:	440b      	add	r3, r1
 800b3ec:	428b      	cmp	r3, r1
 800b3ee:	d90c      	bls.n	800b40a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800b3f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b3f4:	f801 0b01 	strb.w	r0, [r1], #1
 800b3f8:	e7f8      	b.n	800b3ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800b3fa:	0790      	lsls	r0, r2, #30
 800b3fc:	d0e7      	beq.n	800b3ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b3fe:	f832 0b02 	ldrh.w	r0, [r2], #2
 800b402:	3b02      	subs	r3, #2
 800b404:	f821 0b02 	strh.w	r0, [r1], #2
 800b408:	e7e1      	b.n	800b3ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800b40a:	2001      	movs	r0, #1
 800b40c:	bd10      	pop	{r4, pc}

0800b40e <_ZN8touchgfx3HAL7noTouchEv>:
 800b40e:	b510      	push	{r4, lr}
 800b410:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800b414:	4604      	mov	r4, r0
 800b416:	b153      	cbz	r3, 800b42e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800b418:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800b41c:	2101      	movs	r1, #1
 800b41e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800b422:	301c      	adds	r0, #28
 800b424:	f00c fb58 	bl	8017ad8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800b428:	2300      	movs	r3, #0
 800b42a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b42e:	bd10      	pop	{r4, pc}

0800b430 <_ZN8touchgfx8Drawable5setXYEss>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	6803      	ldr	r3, [r0, #0]
 800b434:	4604      	mov	r4, r0
 800b436:	4615      	mov	r5, r2
 800b438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43a:	4798      	blx	r3
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	4629      	mov	r1, r5
 800b440:	4620      	mov	r0, r4
 800b442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b448:	4718      	bx	r3
	...

0800b44c <_ZN8touchgfx3HAL3lcdEv>:
 800b44c:	4b04      	ldr	r3, [pc, #16]	; (800b460 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b454:	b10a      	cbz	r2, 800b45a <_ZN8touchgfx3HAL3lcdEv+0xe>
 800b456:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b458:	b900      	cbnz	r0, 800b45c <_ZN8touchgfx3HAL3lcdEv+0x10>
 800b45a:	6898      	ldr	r0, [r3, #8]
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	2400ae0c 	.word	0x2400ae0c

0800b464 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800b464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b468:	b085      	sub	sp, #20
 800b46a:	4604      	mov	r4, r0
 800b46c:	2000      	movs	r0, #0
 800b46e:	4699      	mov	r9, r3
 800b470:	ad04      	add	r5, sp, #16
 800b472:	460f      	mov	r7, r1
 800b474:	4690      	mov	r8, r2
 800b476:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b47a:	69a0      	ldr	r0, [r4, #24]
 800b47c:	6806      	ldr	r6, [r0, #0]
 800b47e:	9501      	str	r5, [sp, #4]
 800b480:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b484:	9500      	str	r5, [sp, #0]
 800b486:	6835      	ldr	r5, [r6, #0]
 800b488:	47a8      	blx	r5
 800b48a:	4d10      	ldr	r5, [pc, #64]	; (800b4cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800b48c:	4606      	mov	r6, r0
 800b48e:	f8a5 9000 	strh.w	r9, [r5]
 800b492:	f7ff ffdb 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800b496:	6803      	ldr	r3, [r0, #0]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	4798      	blx	r3
 800b49c:	b128      	cbz	r0, 800b4aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800b49e:	2801      	cmp	r0, #1
 800b4a0:	d00b      	beq.n	800b4ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	b005      	add	sp, #20
 800b4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	882b      	ldrh	r3, [r5, #0]
 800b4ac:	fb08 7203 	mla	r2, r8, r3, r7
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b4b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b4b8:	e7f3      	b.n	800b4a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b4ba:	882a      	ldrh	r2, [r5, #0]
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	fb08 7202 	mla	r2, r8, r2, r7
 800b4c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b4c6:	1a9a      	subs	r2, r3, r2
 800b4c8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b4ca:	e7ea      	b.n	800b4a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800b4cc:	2400ae06 	.word	0x2400ae06

0800b4d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800b4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4d2:	b08b      	sub	sp, #44	; 0x2c
 800b4d4:	4617      	mov	r7, r2
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460e      	mov	r6, r1
 800b4da:	461d      	mov	r5, r3
 800b4dc:	f7ff ffb6 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800b4e0:	6803      	ldr	r3, [r0, #0]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	4798      	blx	r3
 800b4e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b4ea:	9007      	str	r0, [sp, #28]
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b4f4:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	9306      	str	r3, [sp, #24]
 800b4fc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b500:	9305      	str	r3, [sp, #20]
 800b502:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b512:	9302      	str	r3, [sp, #8]
 800b514:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b518:	e9cd 5300 	strd	r5, r3, [sp]
 800b51c:	463b      	mov	r3, r7
 800b51e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800b520:	2200      	movs	r2, #0
 800b522:	47a8      	blx	r5
 800b524:	b00b      	add	sp, #44	; 0x2c
 800b526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b528:	2400ae06 	.word	0x2400ae06

0800b52c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800b52c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b530:	4698      	mov	r8, r3
 800b532:	6803      	ldr	r3, [r0, #0]
 800b534:	b08b      	sub	sp, #44	; 0x2c
 800b536:	4617      	mov	r7, r2
 800b538:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b53a:	460e      	mov	r6, r1
 800b53c:	4b13      	ldr	r3, [pc, #76]	; (800b58c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800b53e:	4604      	mov	r4, r0
 800b540:	f8b3 9000 	ldrh.w	r9, [r3]
 800b544:	f7ff ff82 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800b548:	6803      	ldr	r3, [r0, #0]
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	4798      	blx	r3
 800b54e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b552:	2200      	movs	r2, #0
 800b554:	4631      	mov	r1, r6
 800b556:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b55a:	2302      	movs	r3, #2
 800b55c:	4620      	mov	r0, r4
 800b55e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800b562:	2301      	movs	r3, #1
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b57c:	e9cd 8300 	strd	r8, r3, [sp]
 800b580:	463b      	mov	r3, r7
 800b582:	47a8      	blx	r5
 800b584:	b00b      	add	sp, #44	; 0x2c
 800b586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58a:	bf00      	nop
 800b58c:	2400ae06 	.word	0x2400ae06

0800b590 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800b590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b594:	4698      	mov	r8, r3
 800b596:	6803      	ldr	r3, [r0, #0]
 800b598:	b087      	sub	sp, #28
 800b59a:	460e      	mov	r6, r1
 800b59c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b59e:	4617      	mov	r7, r2
 800b5a0:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	f8b3 9000 	ldrh.w	r9, [r3]
 800b5a8:	f7ff ff50 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800b5ac:	6803      	ldr	r3, [r0, #0]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b0:	4798      	blx	r3
 800b5b2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5be:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800b5c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	4643      	mov	r3, r8
 800b5d8:	47a8      	blx	r5
 800b5da:	b007      	add	sp, #28
 800b5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e0:	2400ae06 	.word	0x2400ae06

0800b5e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	b08f      	sub	sp, #60	; 0x3c
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	4691      	mov	r9, r2
 800b5f2:	461e      	mov	r6, r3
 800b5f4:	f004 f8b8 	bl	800f768 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	f000 809d 	beq.w	800b738 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	4620      	mov	r0, r4
 800b602:	f8df b198 	ldr.w	fp, [pc, #408]	; 800b79c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800b606:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60c:	4798      	blx	r3
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	4620      	mov	r0, r4
 800b612:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800b7a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	4798      	blx	r3
 800b61a:	f8bb 3000 	ldrh.w	r3, [fp]
 800b61e:	4f5c      	ldr	r7, [pc, #368]	; (800b790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	f8ba 3000 	ldrh.w	r3, [sl]
 800b626:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800b62a:	4640      	mov	r0, r8
 800b62c:	9302      	str	r3, [sp, #8]
 800b62e:	883b      	ldrh	r3, [r7, #0]
 800b630:	9303      	str	r3, [sp, #12]
 800b632:	4b58      	ldr	r3, [pc, #352]	; (800b794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b634:	881a      	ldrh	r2, [r3, #0]
 800b636:	9305      	str	r3, [sp, #20]
 800b638:	9204      	str	r2, [sp, #16]
 800b63a:	f004 f9d9 	bl	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b63e:	8038      	strh	r0, [r7, #0]
 800b640:	4640      	mov	r0, r8
 800b642:	f004 fa09 	bl	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	b280      	uxth	r0, r0
 800b64a:	8018      	strh	r0, [r3, #0]
 800b64c:	4b52      	ldr	r3, [pc, #328]	; (800b798 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d174      	bne.n	800b73e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800b654:	883b      	ldrh	r3, [r7, #0]
 800b656:	f8aa 0000 	strh.w	r0, [sl]
 800b65a:	f8ab 3000 	strh.w	r3, [fp]
 800b65e:	4648      	mov	r0, r9
 800b660:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800b664:	f004 f880 	bl	800f768 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b668:	2200      	movs	r2, #0
 800b66a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800b66e:	4611      	mov	r1, r2
 800b670:	4628      	mov	r0, r5
 800b672:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800b676:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800b67a:	f7ff fed9 	bl	800b430 <_ZN8touchgfx8Drawable5setXYEss>
 800b67e:	2301      	movs	r3, #1
 800b680:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800b684:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b688:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dd5c      	ble.n	800b74a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b690:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b694:	2b00      	cmp	r3, #0
 800b696:	dd58      	ble.n	800b74a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800b698:	462a      	mov	r2, r5
 800b69a:	ab0a      	add	r3, sp, #40	; 0x28
 800b69c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b6a0:	6851      	ldr	r1, [r2, #4]
 800b6a2:	c303      	stmia	r3!, {r0, r1}
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	a80a      	add	r0, sp, #40	; 0x28
 800b6a8:	f7ff fbe4 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800b6ac:	4b38      	ldr	r3, [pc, #224]	; (800b790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6b4:	4b37      	ldr	r3, [pc, #220]	; (800b794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b6b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b6ba:	aa0a      	add	r2, sp, #40	; 0x28
 800b6bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6c0:	910c      	str	r1, [sp, #48]	; 0x30
 800b6c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b6c6:	ab08      	add	r3, sp, #32
 800b6c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b6cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	a90c      	add	r1, sp, #48	; 0x30
 800b6d4:	f7ff fbce 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800b6d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d13c      	bne.n	800b758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b6e4:	2600      	movs	r6, #0
 800b6e6:	696b      	ldr	r3, [r5, #20]
 800b6e8:	a908      	add	r1, sp, #32
 800b6ea:	682a      	ldr	r2, [r5, #0]
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	616e      	str	r6, [r5, #20]
 800b6f2:	6892      	ldr	r2, [r2, #8]
 800b6f4:	4790      	blx	r2
 800b6f6:	9b05      	ldr	r3, [sp, #20]
 800b6f8:	4652      	mov	r2, sl
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	616b      	str	r3, [r5, #20]
 800b6fe:	4628      	mov	r0, r5
 800b700:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b704:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b708:	f7ff fe92 	bl	800b430 <_ZN8touchgfx8Drawable5setXYEss>
 800b70c:	9a01      	ldr	r2, [sp, #4]
 800b70e:	4b23      	ldr	r3, [pc, #140]	; (800b79c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800b710:	4620      	mov	r0, r4
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	9a02      	ldr	r2, [sp, #8]
 800b716:	4b22      	ldr	r3, [pc, #136]	; (800b7a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800b718:	801a      	strh	r2, [r3, #0]
 800b71a:	9a03      	ldr	r2, [sp, #12]
 800b71c:	4b1c      	ldr	r3, [pc, #112]	; (800b790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b71e:	801a      	strh	r2, [r3, #0]
 800b720:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b722:	9a04      	ldr	r2, [sp, #16]
 800b724:	801a      	strh	r2, [r3, #0]
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72e:	4798      	blx	r3
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	4620      	mov	r0, r4
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	4798      	blx	r3
 800b738:	b00f      	add	sp, #60	; 0x3c
 800b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73e:	883b      	ldrh	r3, [r7, #0]
 800b740:	f8ab 0000 	strh.w	r0, [fp]
 800b744:	f8aa 3000 	strh.w	r3, [sl]
 800b748:	e789      	b.n	800b65e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800b74a:	462a      	mov	r2, r5
 800b74c:	ab0a      	add	r3, sp, #40	; 0x28
 800b74e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b752:	6851      	ldr	r1, [r2, #4]
 800b754:	c303      	stmia	r3!, {r0, r1}
 800b756:	e7a9      	b.n	800b6ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800b758:	a807      	add	r0, sp, #28
 800b75a:	f004 fa81 	bl	800fc60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b75e:	4606      	mov	r6, r0
 800b760:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b762:	6803      	ldr	r3, [r0, #0]
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	4798      	blx	r3
 800b768:	4286      	cmp	r6, r0
 800b76a:	d1b8      	bne.n	800b6de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800b76c:	f7ff fe6e 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800b770:	6803      	ldr	r3, [r0, #0]
 800b772:	4606      	mov	r6, r0
 800b774:	a807      	add	r0, sp, #28
 800b776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b778:	9305      	str	r3, [sp, #20]
 800b77a:	f004 fa71 	bl	800fc60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b77e:	9b05      	ldr	r3, [sp, #20]
 800b780:	4601      	mov	r1, r0
 800b782:	4630      	mov	r0, r6
 800b784:	4798      	blx	r3
 800b786:	f080 0001 	eor.w	r0, r0, #1
 800b78a:	b2c0      	uxtb	r0, r0
 800b78c:	e7a8      	b.n	800b6e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800b78e:	bf00      	nop
 800b790:	2400ae00 	.word	0x2400ae00
 800b794:	2400ae02 	.word	0x2400ae02
 800b798:	2400ae04 	.word	0x2400ae04
 800b79c:	2400ae06 	.word	0x2400ae06
 800b7a0:	2400ae08 	.word	0x2400ae08

0800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800b7a4:	4b07      	ldr	r3, [pc, #28]	; (800b7c4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800b7a6:	b510      	push	{r4, lr}
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	b13b      	cbz	r3, 800b7be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b7ae:	6803      	ldr	r3, [r0, #0]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	4798      	blx	r3
 800b7b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7b6:	4283      	cmp	r3, r0
 800b7b8:	d101      	bne.n	800b7be <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b7ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b7bc:	bd10      	pop	{r4, pc}
 800b7be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b7c0:	e7fc      	b.n	800b7bc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800b7c2:	bf00      	nop
 800b7c4:	2400ae0a 	.word	0x2400ae0a

0800b7c8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	461d      	mov	r5, r3
 800b7ce:	b08a      	sub	sp, #40	; 0x28
 800b7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d4:	4690      	mov	r8, r2
 800b7d6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b7da:	2400      	movs	r4, #0
 800b7dc:	4607      	mov	r7, r0
 800b7de:	fb06 8505 	mla	r5, r6, r5, r8
 800b7e2:	9404      	str	r4, [sp, #16]
 800b7e4:	f88d 4020 	strb.w	r4, [sp, #32]
 800b7e8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b7ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b7f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b7f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b7f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b7fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b800:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b804:	f7ff ffce 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b808:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b812:	a901      	add	r1, sp, #4
 800b814:	9505      	str	r5, [sp, #20]
 800b816:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b81a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800b81e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b822:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b826:	6803      	ldr	r3, [r0, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	4798      	blx	r3
 800b82c:	b00a      	add	sp, #40	; 0x28
 800b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b832 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800b832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b836:	b08b      	sub	sp, #44	; 0x2c
 800b838:	2400      	movs	r4, #0
 800b83a:	4691      	mov	r9, r2
 800b83c:	461d      	mov	r5, r3
 800b83e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800b842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b846:	4688      	mov	r8, r1
 800b848:	4607      	mov	r7, r0
 800b84a:	9404      	str	r4, [sp, #16]
 800b84c:	fb06 9505 	mla	r5, r6, r5, r9
 800b850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b854:	f7ff ffa6 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b858:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b85c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b866:	a901      	add	r1, sp, #4
 800b868:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b86c:	9505      	str	r5, [sp, #20]
 800b86e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b872:	f8ad 401c 	strh.w	r4, [sp, #28]
 800b876:	f8ad 601e 	strh.w	r6, [sp, #30]
 800b87a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b87e:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b882:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b886:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b88a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b88e:	6803      	ldr	r3, [r0, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	4798      	blx	r3
 800b894:	b00b      	add	sp, #44	; 0x2c
 800b896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b89c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a0:	b08a      	sub	sp, #40	; 0x28
 800b8a2:	4698      	mov	r8, r3
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800b8ac:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800b8b0:	2d0b      	cmp	r5, #11
 800b8b2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800b8b6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800b8ba:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	d137      	bne.n	800b932 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800b8c2:	2380      	movs	r3, #128	; 0x80
 800b8c4:	f88d 0020 	strb.w	r0, [sp, #32]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	9203      	str	r2, [sp, #12]
 800b8cc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b8d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b8d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b8d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b8dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b8e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b8e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b8e8:	f7ff ff5c 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b8ec:	2c0b      	cmp	r4, #11
 800b8ee:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800b8f2:	f8ad 701e 	strh.w	r7, [sp, #30]
 800b8f6:	bf94      	ite	ls
 800b8f8:	4b19      	ldrls	r3, [pc, #100]	; (800b960 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800b8fa:	2100      	movhi	r1, #0
 800b8fc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b900:	bf98      	it	ls
 800b902:	5d19      	ldrbls	r1, [r3, r4]
 800b904:	fb02 8307 	mla	r3, r2, r7, r8
 800b908:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b90c:	10c9      	asrs	r1, r1, #3
 800b90e:	fb01 0003 	mla	r0, r1, r3, r0
 800b912:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800b916:	a901      	add	r1, sp, #4
 800b918:	9005      	str	r0, [sp, #20]
 800b91a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800b91e:	2300      	movs	r3, #0
 800b920:	6870      	ldr	r0, [r6, #4]
 800b922:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b926:	6803      	ldr	r3, [r0, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	4798      	blx	r3
 800b92c:	b00a      	add	sp, #40	; 0x28
 800b92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b932:	2d02      	cmp	r5, #2
 800b934:	d109      	bne.n	800b94a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800b936:	28ff      	cmp	r0, #255	; 0xff
 800b938:	d105      	bne.n	800b946 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800b93a:	f1bc 0f00 	cmp.w	ip, #0
 800b93e:	bf14      	ite	ne
 800b940:	2340      	movne	r3, #64	; 0x40
 800b942:	2320      	moveq	r3, #32
 800b944:	e7be      	b.n	800b8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b946:	2340      	movs	r3, #64	; 0x40
 800b948:	e7bc      	b.n	800b8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b94a:	28ff      	cmp	r0, #255	; 0xff
 800b94c:	d105      	bne.n	800b95a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800b94e:	f1bc 0f00 	cmp.w	ip, #0
 800b952:	bf14      	ite	ne
 800b954:	2304      	movne	r3, #4
 800b956:	2301      	moveq	r3, #1
 800b958:	e7b4      	b.n	800b8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b95a:	2304      	movs	r3, #4
 800b95c:	e7b2      	b.n	800b8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800b95e:	bf00      	nop
 800b960:	0801a0b0 	.word	0x0801a0b0

0800b964 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	b08b      	sub	sp, #44	; 0x2c
 800b96a:	461d      	mov	r5, r3
 800b96c:	2400      	movs	r4, #0
 800b96e:	4688      	mov	r8, r1
 800b970:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800b974:	4693      	mov	fp, r2
 800b976:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800b97a:	4607      	mov	r7, r0
 800b97c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800b980:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800b984:	9404      	str	r4, [sp, #16]
 800b986:	bf14      	ite	ne
 800b988:	2308      	movne	r3, #8
 800b98a:	2302      	moveq	r3, #2
 800b98c:	fb05 b50a 	mla	r5, r5, sl, fp
 800b990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b994:	f7ff ff06 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b998:	2e0b      	cmp	r6, #11
 800b99a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800b99e:	a901      	add	r1, sp, #4
 800b9a0:	bf98      	it	ls
 800b9a2:	4b13      	ldrls	r3, [pc, #76]	; (800b9f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800b9a4:	f8ad a01e 	strh.w	sl, [sp, #30]
 800b9a8:	bf98      	it	ls
 800b9aa:	5d9c      	ldrbls	r4, [r3, r6]
 800b9ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b9b0:	10e4      	asrs	r4, r4, #3
 800b9b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b9ba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800b9be:	fb04 0405 	mla	r4, r4, r5, r0
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9405      	str	r4, [sp, #20]
 800b9cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b9d0:	f88d 9020 	strb.w	r9, [sp, #32]
 800b9d4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800b9d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b9dc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800b9e0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800b9e4:	6803      	ldr	r3, [r0, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	4798      	blx	r3
 800b9ea:	b00b      	add	sp, #44	; 0x2c
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	0801a0b0 	.word	0x0801a0b0

0800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	461e      	mov	r6, r3
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	4690      	mov	r8, r2
 800ba00:	881d      	ldrh	r5, [r3, #0]
 800ba02:	f7ff fd23 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800ba06:	6803      	ldr	r3, [r0, #0]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	4798      	blx	r3
 800ba0c:	280b      	cmp	r0, #11
 800ba0e:	bf96      	itet	ls
 800ba10:	4b05      	ldrls	r3, [pc, #20]	; (800ba28 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ba12:	2400      	movhi	r4, #0
 800ba14:	5c1c      	ldrbls	r4, [r3, r0]
 800ba16:	fb08 7005 	mla	r0, r8, r5, r7
 800ba1a:	10e4      	asrs	r4, r4, #3
 800ba1c:	fb04 6000 	mla	r0, r4, r0, r6
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	2400ae06 	.word	0x2400ae06
 800ba28:	0801a0b0 	.word	0x0801a0b0

0800ba2c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ba2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba2e:	b08b      	sub	sp, #44	; 0x2c
 800ba30:	461f      	mov	r7, r3
 800ba32:	4604      	mov	r4, r0
 800ba34:	4616      	mov	r6, r2
 800ba36:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ba40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ba44:	9504      	str	r5, [sp, #16]
 800ba46:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ba4a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ba4e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ba52:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ba56:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba5a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ba5e:	f88d 3020 	strb.w	r3, [sp, #32]
 800ba62:	f7ff fe9f 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ba66:	463a      	mov	r2, r7
 800ba68:	4631      	mov	r1, r6
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7ff ffc1 	bl	800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ba72:	4b0e      	ldr	r3, [pc, #56]	; (800baac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ba74:	9005      	str	r0, [sp, #20]
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba7c:	f7ff fce6 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800ba80:	6803      	ldr	r3, [r0, #0]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	4798      	blx	r3
 800ba86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba88:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800ba8c:	a901      	add	r1, sp, #4
 800ba8e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	6860      	ldr	r0, [r4, #4]
 800ba96:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800ba9a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800ba9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800baa2:	6803      	ldr	r3, [r0, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	4798      	blx	r3
 800baa8:	b00b      	add	sp, #44	; 0x2c
 800baaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baac:	2400ae06 	.word	0x2400ae06

0800bab0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800bab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab2:	b08d      	sub	sp, #52	; 0x34
 800bab4:	2501      	movs	r5, #1
 800bab6:	4604      	mov	r4, r0
 800bab8:	466b      	mov	r3, sp
 800baba:	9503      	str	r5, [sp, #12]
 800babc:	e883 0006 	stmia.w	r3, {r1, r2}
 800bac0:	2300      	movs	r3, #0
 800bac2:	f8bd 6000 	ldrh.w	r6, [sp]
 800bac6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800baca:	9306      	str	r3, [sp, #24]
 800bacc:	6803      	ldr	r3, [r0, #0]
 800bace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad0:	4798      	blx	r3
 800bad2:	463a      	mov	r2, r7
 800bad4:	4631      	mov	r1, r6
 800bad6:	4603      	mov	r3, r0
 800bad8:	4620      	mov	r0, r4
 800bada:	f7ff ff8b 	bl	800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bade:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bae0:	9004      	str	r0, [sp, #16]
 800bae2:	9307      	str	r3, [sp, #28]
 800bae4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bae8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800baec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800baf0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800baf4:	4b0e      	ldr	r3, [pc, #56]	; (800bb30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bafc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bb00:	f7ff fca4 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800bb04:	6803      	ldr	r3, [r0, #0]
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	4798      	blx	r3
 800bb0a:	23ff      	movs	r3, #255	; 0xff
 800bb0c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bb10:	a903      	add	r1, sp, #12
 800bb12:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bb16:	6860      	ldr	r0, [r4, #4]
 800bb18:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bb1c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bb20:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bb24:	6803      	ldr	r3, [r0, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4798      	blx	r3
 800bb2a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bb2c:	b00d      	add	sp, #52	; 0x34
 800bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb30:	2400ae06 	.word	0x2400ae06

0800bb34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800bb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb38:	b08c      	sub	sp, #48	; 0x30
 800bb3a:	461e      	mov	r6, r3
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	466d      	mov	r5, sp
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	6803      	ldr	r3, [r0, #0]
 800bb46:	e885 0006 	stmia.w	r5, {r1, r2}
 800bb4a:	2501      	movs	r5, #1
 800bb4c:	f8bd 7000 	ldrh.w	r7, [sp]
 800bb50:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800bb54:	9503      	str	r5, [sp, #12]
 800bb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb58:	4798      	blx	r3
 800bb5a:	4642      	mov	r2, r8
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4603      	mov	r3, r0
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7ff ff47 	bl	800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bb66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bb6a:	9004      	str	r0, [sp, #16]
 800bb6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bb70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bb74:	9607      	str	r6, [sp, #28]
 800bb76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800bb7a:	4b10      	ldr	r3, [pc, #64]	; (800bbbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800bb7c:	881b      	ldrh	r3, [r3, #0]
 800bb7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800bb82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb84:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800bb88:	f7ff fc60 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800bb8c:	6803      	ldr	r3, [r0, #0]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	4798      	blx	r3
 800bb92:	23ff      	movs	r3, #255	; 0xff
 800bb94:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800bb98:	a903      	add	r1, sp, #12
 800bb9a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800bb9e:	6860      	ldr	r0, [r4, #4]
 800bba0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bba4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800bba8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bbac:	6803      	ldr	r3, [r0, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	4798      	blx	r3
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	b00c      	add	sp, #48	; 0x30
 800bbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbba:	bf00      	nop
 800bbbc:	2400ae06 	.word	0x2400ae06

0800bbc0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800bbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	ac02      	add	r4, sp, #8
 800bbc8:	e884 0006 	stmia.w	r4, {r1, r2}
 800bbcc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800bbd0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800bbd4:	f7ff fde6 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bbd8:	4631      	mov	r1, r6
 800bbda:	4603      	mov	r3, r0
 800bbdc:	463a      	mov	r2, r7
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f7ff ff08 	bl	800b9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800bbe4:	4a05      	ldr	r2, [pc, #20]	; (800bbfc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	8812      	ldrh	r2, [r2, #0]
 800bbea:	9200      	str	r2, [sp, #0]
 800bbec:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	e894 0006 	ldmia.w	r4, {r1, r2}
 800bbf6:	47b0      	blx	r6
 800bbf8:	b005      	add	sp, #20
 800bbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfc:	2400ae06 	.word	0x2400ae06

0800bc00 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800bc06:	4604      	mov	r4, r0
 800bc08:	b19b      	cbz	r3, 800bc32 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800bc0a:	2002      	movs	r0, #2
 800bc0c:	f7f4 fcc0 	bl	8000590 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800bc10:	2300      	movs	r3, #0
 800bc12:	4620      	mov	r0, r4
 800bc14:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800bc18:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800bc22:	f7ff fdbf 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc26:	4601      	mov	r1, r0
 800bc28:	4620      	mov	r0, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc30:	4718      	bx	r3
 800bc32:	bd70      	pop	{r4, r5, r6, pc}

0800bc34 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	428b      	cmp	r3, r1
 800bc40:	d006      	beq.n	800bc50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800bc42:	6803      	ldr	r3, [r0, #0]
 800bc44:	b929      	cbnz	r1, 800bc52 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800bc46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800bc4a:	4798      	blx	r3
 800bc4c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800bc50:	bd38      	pop	{r3, r4, r5, pc}
 800bc52:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bc56:	e7f8      	b.n	800bc4a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800bc58 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800bc58:	4b0d      	ldr	r3, [pc, #52]	; (800bc90 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	4604      	mov	r4, r0
 800bc60:	b95b      	cbnz	r3, 800bc7a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc62:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d007      	beq.n	800bc7a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc6a:	6840      	ldr	r0, [r0, #4]
 800bc6c:	f000 f916 	bl	800be9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800bc70:	b118      	cbz	r0, 800bc7a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800bc72:	6862      	ldr	r2, [r4, #4]
 800bc74:	7a53      	ldrb	r3, [r2, #9]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0fc      	beq.n	800bc74 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800bc7a:	f7f4 fe0f 	bl	800089c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bc7e:	4620      	mov	r0, r4
 800bc80:	2100      	movs	r1, #0
 800bc82:	f7ff ffd7 	bl	800bc34 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fd8c 	bl	800b7a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	bf00      	nop
 800bc90:	2400ae0a 	.word	0x2400ae0a

0800bc94 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800bc94:	4770      	bx	lr

0800bc96 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800bc96:	2000      	movs	r0, #0
 800bc98:	4770      	bx	lr

0800bc9a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800bc9a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800bc9e:	1a13      	subs	r3, r2, r0
 800bca0:	4258      	negs	r0, r3
 800bca2:	4158      	adcs	r0, r3
 800bca4:	4770      	bx	lr

0800bca6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800bca6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800bcaa:	1a9b      	subs	r3, r3, r2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	bfdc      	itt	le
 800bcb0:	6882      	ldrle	r2, [r0, #8]
 800bcb2:	189b      	addle	r3, r3, r2
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	bfcc      	ite	gt
 800bcb8:	2000      	movgt	r0, #0
 800bcba:	2001      	movle	r0, #1
 800bcbc:	4770      	bx	lr

0800bcbe <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800bcbe:	6902      	ldr	r2, [r0, #16]
 800bcc0:	6843      	ldr	r3, [r0, #4]
 800bcc2:	2024      	movs	r0, #36	; 0x24
 800bcc4:	fb00 3002 	mla	r0, r0, r2, r3
 800bcc8:	4770      	bx	lr

0800bcca <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800bcca:	6803      	ldr	r3, [r0, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	4718      	bx	r3

0800bcd0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	b570      	push	{r4, r5, r6, lr}
 800bcd4:	7203      	strb	r3, [r0, #8]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	6840      	ldr	r0, [r0, #4]
 800bcda:	6803      	ldr	r3, [r0, #0]
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	4798      	blx	r3
 800bce0:	6803      	ldr	r3, [r0, #0]
 800bce2:	4605      	mov	r5, r0
 800bce4:	2b40      	cmp	r3, #64	; 0x40
 800bce6:	d00c      	beq.n	800bd02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bce8:	d810      	bhi.n	800bd0c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d01d      	beq.n	800bd2a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800bcee:	d804      	bhi.n	800bcfa <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d006      	beq.n	800bd02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d02c      	beq.n	800bd52 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	2b08      	cmp	r3, #8
 800bcfc:	d01d      	beq.n	800bd3a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	d1fa      	bne.n	800bcf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	4620      	mov	r0, r4
 800bd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd08:	4798      	blx	r3
 800bd0a:	e013      	b.n	800bd34 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800bd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd10:	d0f7      	beq.n	800bd02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd12:	d804      	bhi.n	800bd1e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800bd14:	2b80      	cmp	r3, #128	; 0x80
 800bd16:	d0f4      	beq.n	800bd02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd1c:	e7f0      	b.n	800bd00 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800bd1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd22:	d0ee      	beq.n	800bd02 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800bd24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd28:	e7e5      	b.n	800bcf6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	7f01      	ldrb	r1, [r0, #28]
 800bd2e:	4620      	mov	r0, r4
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	4798      	blx	r3
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	e006      	b.n	800bd48 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	7f01      	ldrb	r1, [r0, #28]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	4798      	blx	r3
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	4629      	mov	r1, r5
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd50:	4718      	bx	r3
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	4620      	mov	r0, r4
 800bd56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd58:	4798      	blx	r3
 800bd5a:	e7f3      	b.n	800bd44 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800bd5c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800bd5c:	4770      	bx	lr

0800bd5e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800bd5e:	4770      	bx	lr

0800bd60 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800bd60:	4770      	bx	lr

0800bd62 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800bd62:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800bd66:	b510      	push	{r4, lr}
 800bd68:	1ad2      	subs	r2, r2, r3
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	bfdc      	itt	le
 800bd6e:	6884      	ldrle	r4, [r0, #8]
 800bd70:	1912      	addle	r2, r2, r4
 800bd72:	2a01      	cmp	r2, #1
 800bd74:	dd16      	ble.n	800bda4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800bd76:	6842      	ldr	r2, [r0, #4]
 800bd78:	2424      	movs	r4, #36	; 0x24
 800bd7a:	fb04 2303 	mla	r3, r4, r3, r2
 800bd7e:	f101 0220 	add.w	r2, r1, #32
 800bd82:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd86:	4291      	cmp	r1, r2
 800bd88:	f843 4b04 	str.w	r4, [r3], #4
 800bd8c:	d1f9      	bne.n	800bd82 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800bd8e:	780a      	ldrb	r2, [r1, #0]
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	68c3      	ldr	r3, [r0, #12]
 800bd94:	6882      	ldr	r2, [r0, #8]
 800bd96:	f3bf 8f5b 	dmb	ish
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	bfd8      	it	le
 800bda0:	1a9b      	suble	r3, r3, r2
 800bda2:	60c3      	str	r3, [r0, #12]
 800bda4:	bd10      	pop	{r4, pc}

0800bda6 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800bda6:	6903      	ldr	r3, [r0, #16]
 800bda8:	6882      	ldr	r2, [r0, #8]
 800bdaa:	f3bf 8f5b 	dmb	ish
 800bdae:	3301      	adds	r3, #1
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	bfd8      	it	le
 800bdb4:	1a9b      	suble	r3, r3, r2
 800bdb6:	6103      	str	r3, [r0, #16]
 800bdb8:	4770      	bx	lr
	...

0800bdbc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	460e      	mov	r6, r1
 800bdc2:	6860      	ldr	r0, [r4, #4]
 800bdc4:	6803      	ldr	r3, [r0, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	4798      	blx	r3
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d1f9      	bne.n	800bdc2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800bdce:	4d0d      	ldr	r5, [pc, #52]	; (800be04 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800bdd0:	6828      	ldr	r0, [r5, #0]
 800bdd2:	6803      	ldr	r3, [r0, #0]
 800bdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdd6:	4798      	blx	r3
 800bdd8:	f7f4 fd72 	bl	80008c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800bddc:	6828      	ldr	r0, [r5, #0]
 800bdde:	2101      	movs	r1, #1
 800bde0:	f7ff ff28 	bl	800bc34 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bde4:	6860      	ldr	r0, [r4, #4]
 800bde6:	4631      	mov	r1, r6
 800bde8:	6803      	ldr	r3, [r0, #0]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	4798      	blx	r3
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	4798      	blx	r3
 800bdf6:	6828      	ldr	r0, [r5, #0]
 800bdf8:	6803      	ldr	r3, [r0, #0]
 800bdfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be00:	4718      	bx	r3
 800be02:	bf00      	nop
 800be04:	2400ae0c 	.word	0x2400ae0c

0800be08 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800be08:	b508      	push	{r3, lr}
 800be0a:	f7f4 fd47 	bl	800089c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800be0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be12:	f7f4 bd4d 	b.w	80008b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800be16 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800be16:	b510      	push	{r4, lr}
 800be18:	4604      	mov	r4, r0
 800be1a:	2114      	movs	r1, #20
 800be1c:	f00b fec3 	bl	8017ba6 <_ZdlPvj>
 800be20:	4620      	mov	r0, r4
 800be22:	bd10      	pop	{r4, pc}

0800be24 <_ZN8touchgfx13DMA_Interface5startEv>:
 800be24:	b510      	push	{r4, lr}
 800be26:	4604      	mov	r4, r0
 800be28:	6840      	ldr	r0, [r0, #4]
 800be2a:	6803      	ldr	r3, [r0, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4798      	blx	r3
 800be30:	b948      	cbnz	r0, 800be46 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be32:	7a63      	ldrb	r3, [r4, #9]
 800be34:	b13b      	cbz	r3, 800be46 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be36:	7a23      	ldrb	r3, [r4, #8]
 800be38:	b92b      	cbnz	r3, 800be46 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	4620      	mov	r0, r4
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be44:	4718      	bx	r3
 800be46:	bd10      	pop	{r4, pc}

0800be48 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	4604      	mov	r4, r0
 800be4c:	6840      	ldr	r0, [r0, #4]
 800be4e:	6803      	ldr	r3, [r0, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4798      	blx	r3
 800be54:	4605      	mov	r5, r0
 800be56:	b930      	cbnz	r0, 800be66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be58:	7a23      	ldrb	r3, [r4, #8]
 800be5a:	b123      	cbz	r3, 800be66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800be5c:	6860      	ldr	r0, [r4, #4]
 800be5e:	6803      	ldr	r3, [r0, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	4798      	blx	r3
 800be64:	7225      	strb	r5, [r4, #8]
 800be66:	6860      	ldr	r0, [r4, #4]
 800be68:	6803      	ldr	r3, [r0, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4798      	blx	r3
 800be6e:	b928      	cbnz	r0, 800be7c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	4620      	mov	r0, r4
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be7a:	4718      	bx	r3
 800be7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be80:	f7f4 bd28 	b.w	80008d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800be84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800be84:	b510      	push	{r4, lr}
 800be86:	6082      	str	r2, [r0, #8]
 800be88:	2200      	movs	r2, #0
 800be8a:	4c03      	ldr	r4, [pc, #12]	; (800be98 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800be8c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800be90:	e9c0 4100 	strd	r4, r1, [r0]
 800be94:	bd10      	pop	{r4, pc}
 800be96:	bf00      	nop
 800be98:	0801a1ec 	.word	0x0801a1ec

0800be9c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800be9c:	6840      	ldr	r0, [r0, #4]
 800be9e:	6803      	ldr	r3, [r0, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4718      	bx	r3

0800bea4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800bea4:	2300      	movs	r3, #0
 800bea6:	8083      	strh	r3, [r0, #4]
 800bea8:	80c3      	strh	r3, [r0, #6]
 800beaa:	8003      	strh	r3, [r0, #0]
 800beac:	8043      	strh	r3, [r0, #2]
 800beae:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800beb2:	2bff      	cmp	r3, #255	; 0xff
 800beb4:	bf01      	itttt	eq
 800beb6:	890b      	ldrheq	r3, [r1, #8]
 800beb8:	8083      	strheq	r3, [r0, #4]
 800beba:	894b      	ldrheq	r3, [r1, #10]
 800bebc:	80c3      	strheq	r3, [r0, #6]
 800bebe:	4770      	bx	lr

0800bec0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800bec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	466b      	mov	r3, sp
 800bec6:	6808      	ldr	r0, [r1, #0]
 800bec8:	6849      	ldr	r1, [r1, #4]
 800beca:	c303      	stmia	r3!, {r0, r1}
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	4669      	mov	r1, sp
 800bed0:	4620      	mov	r0, r4
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	4798      	blx	r3
 800bed6:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bede:	b10a      	cbz	r2, 800bee4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800bee0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bee2:	b900      	cbnz	r0, 800bee6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800bee4:	6898      	ldr	r0, [r3, #8]
 800bee6:	6803      	ldr	r3, [r0, #0]
 800bee8:	4669      	mov	r1, sp
 800beea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800beec:	6a1d      	ldr	r5, [r3, #32]
 800beee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800bef2:	47a8      	blx	r5
 800bef4:	b003      	add	sp, #12
 800bef6:	bd30      	pop	{r4, r5, pc}
 800bef8:	2400ae0c 	.word	0x2400ae0c

0800befc <_ZN8touchgfx3BoxD1Ev>:
 800befc:	4770      	bx	lr

0800befe <_ZN8touchgfx3BoxD0Ev>:
 800befe:	b510      	push	{r4, lr}
 800bf00:	4604      	mov	r4, r0
 800bf02:	212c      	movs	r1, #44	; 0x2c
 800bf04:	f00b fe4f 	bl	8017ba6 <_ZdlPvj>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	bd10      	pop	{r4, pc}

0800bf0c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800bf0c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800bf10:	b12a      	cbz	r2, 800bf1e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bf12:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bf16:	b112      	cbz	r2, 800bf1e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800bf18:	6803      	ldr	r3, [r0, #0]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	4718      	bx	r3
 800bf1e:	4770      	bx	lr

0800bf20 <_ZN8touchgfx5ImageD1Ev>:
 800bf20:	4770      	bx	lr

0800bf22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800bf22:	b570      	push	{r4, r5, r6, lr}
 800bf24:	880b      	ldrh	r3, [r1, #0]
 800bf26:	460d      	mov	r5, r1
 800bf28:	4604      	mov	r4, r0
 800bf2a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	f003 fd5f 	bl	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bf32:	4606      	mov	r6, r0
 800bf34:	4628      	mov	r0, r5
 800bf36:	f003 fd8f 	bl	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4620      	mov	r0, r4
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	4798      	blx	r3
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf52:	4718      	bx	r3

0800bf54 <_ZN8touchgfx5ImageD0Ev>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	4604      	mov	r4, r0
 800bf58:	212c      	movs	r1, #44	; 0x2c
 800bf5a:	f00b fe24 	bl	8017ba6 <_ZdlPvj>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	bd10      	pop	{r4, pc}

0800bf62 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800bf62:	b510      	push	{r4, lr}
 800bf64:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800bf68:	4604      	mov	r4, r0
 800bf6a:	2bff      	cmp	r3, #255	; 0xff
 800bf6c:	d006      	beq.n	800bf7c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	8003      	strh	r3, [r0, #0]
 800bf72:	8043      	strh	r3, [r0, #2]
 800bf74:	8083      	strh	r3, [r0, #4]
 800bf76:	80c3      	strh	r3, [r0, #6]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	bd10      	pop	{r4, pc}
 800bf7c:	3126      	adds	r1, #38	; 0x26
 800bf7e:	f003 fd9f 	bl	800fac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800bf82:	e7f9      	b.n	800bf78 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800bf84 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800bf84:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800bf88:	b12a      	cbz	r2, 800bf96 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf8a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800bf8e:	b112      	cbz	r2, 800bf96 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800bf90:	6803      	ldr	r3, [r0, #0]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	4718      	bx	r3
 800bf96:	4770      	bx	lr

0800bf98 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800bf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	2500      	movs	r5, #0
 800bfa2:	460f      	mov	r7, r1
 800bfa4:	f854 3b26 	ldr.w	r3, [r4], #38
 800bfa8:	a904      	add	r1, sp, #16
 800bfaa:	4606      	mov	r6, r0
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bfb2:	4798      	blx	r3
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f003 fd1b 	bl	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f003 fd4b 	bl	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bfc2:	9506      	str	r5, [sp, #24]
 800bfc4:	ad06      	add	r5, sp, #24
 800bfc6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800bfca:	4639      	mov	r1, r7
 800bfcc:	f8ad 801c 	strh.w	r8, [sp, #28]
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7fe ff4f 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800bfd6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dd19      	ble.n	800c012 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfde:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dd15      	ble.n	800c012 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bfee:	b10a      	cbz	r2, 800bff4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800bff0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bff2:	b900      	cbnz	r0, 800bff6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800bff4:	6898      	ldr	r0, [r3, #8]
 800bff6:	2701      	movs	r7, #1
 800bff8:	6801      	ldr	r1, [r0, #0]
 800bffa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800bffe:	9702      	str	r7, [sp, #8]
 800c000:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800c004:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c008:	e9cd 5600 	strd	r5, r6, [sp]
 800c00c:	688d      	ldr	r5, [r1, #8]
 800c00e:	4621      	mov	r1, r4
 800c010:	47a8      	blx	r5
 800c012:	b008      	add	sp, #32
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c018:	2400ae0c 	.word	0x2400ae0c

0800c01c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800c01c:	b510      	push	{r4, lr}
 800c01e:	6803      	ldr	r3, [r0, #0]
 800c020:	460c      	mov	r4, r1
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	4798      	blx	r3
 800c026:	1b03      	subs	r3, r0, r4
 800c028:	4258      	negs	r0, r3
 800c02a:	4158      	adcs	r0, r3
 800c02c:	bd10      	pop	{r4, pc}
	...

0800c030 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c030:	4b01      	ldr	r3, [pc, #4]	; (800c038 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c032:	6019      	str	r1, [r3, #0]
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	2400ae14 	.word	0x2400ae14

0800c03c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	4696      	mov	lr, r2
 800c042:	b097      	sub	sp, #92	; 0x5c
 800c044:	4605      	mov	r5, r0
 800c046:	4614      	mov	r4, r2
 800c048:	460e      	mov	r6, r1
 800c04a:	461f      	mov	r7, r3
 800c04c:	f10d 0c1c 	add.w	ip, sp, #28
 800c050:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c054:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c058:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c05c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c064:	f8de 3000 	ldr.w	r3, [lr]
 800c068:	f104 0e14 	add.w	lr, r4, #20
 800c06c:	f8cc 3000 	str.w	r3, [ip]
 800c070:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c074:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c078:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c07c:	f8de 3000 	ldr.w	r3, [lr]
 800c080:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c084:	f8cc 3000 	str.w	r3, [ip]
 800c088:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c08c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c090:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c094:	f8de 3000 	ldr.w	r3, [lr]
 800c098:	4631      	mov	r1, r6
 800c09a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c09c:	4628      	mov	r0, r5
 800c09e:	f8cc 3000 	str.w	r3, [ip]
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	9201      	str	r2, [sp, #4]
 800c0a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0a8:	f8cd 8008 	str.w	r8, [sp, #8]
 800c0ac:	9200      	str	r2, [sp, #0]
 800c0ae:	aa07      	add	r2, sp, #28
 800c0b0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c0b4:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	47d8      	blx	fp
 800c0bc:	46a6      	mov	lr, r4
 800c0be:	f10d 0c1c 	add.w	ip, sp, #28
 800c0c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0ca:	f8de 3000 	ldr.w	r3, [lr]
 800c0ce:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c0d2:	343c      	adds	r4, #60	; 0x3c
 800c0d4:	f8cc 3000 	str.w	r3, [ip]
 800c0d8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c0dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0e4:	f8de 3000 	ldr.w	r3, [lr]
 800c0e8:	f8cc 3000 	str.w	r3, [ip]
 800c0ec:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c0f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f8cc 3000 	str.w	r3, [ip]
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c106:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c108:	f8cd 8008 	str.w	r8, [sp, #8]
 800c10c:	9201      	str	r2, [sp, #4]
 800c10e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c110:	9200      	str	r2, [sp, #0]
 800c112:	aa07      	add	r2, sp, #28
 800c114:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c116:	463b      	mov	r3, r7
 800c118:	47a0      	blx	r4
 800c11a:	b017      	add	sp, #92	; 0x5c
 800c11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c120 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800c120:	2000      	movs	r0, #0
 800c122:	4770      	bx	lr

0800c124 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	b08d      	sub	sp, #52	; 0x34
 800c12a:	4688      	mov	r8, r1
 800c12c:	f8d3 c000 	ldr.w	ip, [r3]
 800c130:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c132:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c136:	680f      	ldr	r7, [r1, #0]
 800c138:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c13c:	eba7 070c 	sub.w	r7, r7, ip
 800c140:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c144:	edd3 6a07 	vldr	s13, [r3, #28]
 800c148:	42bc      	cmp	r4, r7
 800c14a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c14c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c150:	bfa8      	it	ge
 800c152:	463c      	movge	r4, r7
 800c154:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c158:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c15c:	ee07 4a90 	vmov	s15, r4
 800c160:	eb09 0e0c 	add.w	lr, r9, ip
 800c164:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c168:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c16c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c170:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c174:	4571      	cmp	r1, lr
 800c176:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c17a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c17e:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c182:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c186:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c18a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c18e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c192:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c196:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c19a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c19e:	f340 808c 	ble.w	800c2ba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c1a2:	eba1 060e 	sub.w	r6, r1, lr
 800c1a6:	fb96 f5f4 	sdiv	r5, r6, r4
 800c1aa:	ee07 5a10 	vmov	s14, r5
 800c1ae:	2d00      	cmp	r5, #0
 800c1b0:	fb04 6615 	mls	r6, r4, r5, r6
 800c1b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1b8:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c1bc:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c1c0:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c1c4:	dd12      	ble.n	800c1ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c1c6:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c1ca:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c1ce:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c1d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1da:	bf14      	ite	ne
 800c1dc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c1e0:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c1e4:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c1e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c1ec:	fb05 f204 	mul.w	r2, r5, r4
 800c1f0:	1abf      	subs	r7, r7, r2
 800c1f2:	4494      	add	ip, r2
 800c1f4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c1f8:	4411      	add	r1, r2
 800c1fa:	eb09 020c 	add.w	r2, r9, ip
 800c1fe:	b209      	sxth	r1, r1
 800c200:	443a      	add	r2, r7
 800c202:	428a      	cmp	r2, r1
 800c204:	bfc4      	itt	gt
 800c206:	eba1 0209 	subgt.w	r2, r1, r9
 800c20a:	eba2 070c 	subgt.w	r7, r2, ip
 800c20e:	2f00      	cmp	r7, #0
 800c210:	dd50      	ble.n	800c2b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c212:	fb97 f1f4 	sdiv	r1, r7, r4
 800c216:	fb04 7211 	mls	r2, r4, r1, r7
 800c21a:	b90a      	cbnz	r2, 800c220 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c21c:	3901      	subs	r1, #1
 800c21e:	4622      	mov	r2, r4
 800c220:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c224:	6840      	ldr	r0, [r0, #4]
 800c226:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c22a:	44b6      	add	lr, r6
 800c22c:	f8d0 a000 	ldr.w	sl, [r0]
 800c230:	2900      	cmp	r1, #0
 800c232:	bfcc      	ite	gt
 800c234:	46a1      	movgt	r9, r4
 800c236:	4691      	movle	r9, r2
 800c238:	900b      	str	r0, [sp, #44]	; 0x2c
 800c23a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c23c:	fb04 e505 	mla	r5, r4, r5, lr
 800c240:	eef0 6a42 	vmov.f32	s13, s4
 800c244:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c248:	9008      	str	r0, [sp, #32]
 800c24a:	eeb0 7a61 	vmov.f32	s14, s3
 800c24e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c256:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c25a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c25e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c260:	445b      	add	r3, fp
 800c262:	9307      	str	r3, [sp, #28]
 800c264:	ee16 3a90 	vmov	r3, s13
 800c268:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c26c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c270:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c274:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c278:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c27c:	ee17 7a90 	vmov	r7, s15
 800c280:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c284:	fb97 f7f4 	sdiv	r7, r7, r4
 800c288:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c28c:	ee17 ca90 	vmov	ip, s15
 800c290:	fb9c fcf4 	sdiv	ip, ip, r4
 800c294:	fb0c 3306 	mla	r3, ip, r6, r3
 800c298:	9302      	str	r3, [sp, #8]
 800c29a:	ee17 3a10 	vmov	r3, s14
 800c29e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c2a2:	fb07 3706 	mla	r7, r7, r6, r3
 800c2a6:	eba9 0306 	sub.w	r3, r9, r6
 800c2aa:	e9cd 4700 	strd	r4, r7, [sp]
 800c2ae:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c2b2:	47a0      	blx	r4
 800c2b4:	b00d      	add	sp, #52	; 0x34
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	2500      	movs	r5, #0
 800c2bc:	462e      	mov	r6, r5
 800c2be:	e799      	b.n	800c1f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c2c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	b0db      	sub	sp, #364	; 0x16c
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c2ce:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c2d8:	9009      	str	r0, [sp, #36]	; 0x24
 800c2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2dc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c2e0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c2e4:	9310      	str	r3, [sp, #64]	; 0x40
 800c2e6:	6803      	ldr	r3, [r0, #0]
 800c2e8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800c2ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2ee:	47b8      	blx	r7
 800c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f2:	6058      	str	r0, [r3, #4]
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f000 83a1 	beq.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c2fa:	682b      	ldr	r3, [r5, #0]
 800c2fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c300:	ed94 7a02 	vldr	s14, [r4, #8]
 800c304:	9314      	str	r3, [sp, #80]	; 0x50
 800c306:	686b      	ldr	r3, [r5, #4]
 800c308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c30c:	9315      	str	r3, [sp, #84]	; 0x54
 800c30e:	4bc1      	ldr	r3, [pc, #772]	; (800c614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c310:	7819      	ldrb	r1, [r3, #0]
 800c312:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c316:	2900      	cmp	r1, #0
 800c318:	bf16      	itet	ne
 800c31a:	4619      	movne	r1, r3
 800c31c:	4611      	moveq	r1, r2
 800c31e:	4613      	movne	r3, r2
 800c320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c324:	9116      	str	r1, [sp, #88]	; 0x58
 800c326:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c32a:	f240 8387 	bls.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c32e:	ed94 7a07 	vldr	s14, [r4, #28]
 800c332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33a:	f240 837f 	bls.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c33e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34a:	f240 8377 	bls.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c34e:	6822      	ldr	r2, [r4, #0]
 800c350:	4bb1      	ldr	r3, [pc, #708]	; (800c618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c352:	429a      	cmp	r2, r3
 800c354:	f2c0 8372 	blt.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c358:	49b0      	ldr	r1, [pc, #704]	; (800c61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c35a:	6963      	ldr	r3, [r4, #20]
 800c35c:	428a      	cmp	r2, r1
 800c35e:	f300 836d 	bgt.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c362:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c366:	48ae      	ldr	r0, [pc, #696]	; (800c620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c368:	33ff      	adds	r3, #255	; 0xff
 800c36a:	4283      	cmp	r3, r0
 800c36c:	f200 8366 	bhi.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c372:	4dac      	ldr	r5, [pc, #688]	; (800c624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c374:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c378:	33ff      	adds	r3, #255	; 0xff
 800c37a:	42ab      	cmp	r3, r5
 800c37c:	f200 835e 	bhi.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c380:	6862      	ldr	r2, [r4, #4]
 800c382:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c386:	33ff      	adds	r3, #255	; 0xff
 800c388:	4283      	cmp	r3, r0
 800c38a:	f200 8357 	bhi.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c38e:	69a1      	ldr	r1, [r4, #24]
 800c390:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c394:	33ff      	adds	r3, #255	; 0xff
 800c396:	4283      	cmp	r3, r0
 800c398:	f200 8350 	bhi.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c39c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c39e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c3a2:	30ff      	adds	r0, #255	; 0xff
 800c3a4:	42a8      	cmp	r0, r5
 800c3a6:	f200 8349 	bhi.w	800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c3aa:	428a      	cmp	r2, r1
 800c3ac:	f280 8110 	bge.w	800c5d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	f300 8119 	bgt.w	800c5e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c3b6:	4299      	cmp	r1, r3
 800c3b8:	f280 811d 	bge.w	800c5f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800c3bc:	2502      	movs	r5, #2
 800c3be:	2701      	movs	r7, #1
 800c3c0:	46a9      	mov	r9, r5
 800c3c2:	46b8      	mov	r8, r7
 800c3c4:	f04f 0a00 	mov.w	sl, #0
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	a849      	add	r0, sp, #292	; 0x124
 800c3cc:	f002 ff98 	bl	800f300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4653      	mov	r3, sl
 800c3d4:	a949      	add	r1, sp, #292	; 0x124
 800c3d6:	f8cd 9000 	str.w	r9, [sp]
 800c3da:	a819      	add	r0, sp, #100	; 0x64
 800c3dc:	f003 f8c0 	bl	800f560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4653      	mov	r3, sl
 800c3e4:	a949      	add	r1, sp, #292	; 0x124
 800c3e6:	f8cd 8000 	str.w	r8, [sp]
 800c3ea:	a829      	add	r0, sp, #164	; 0xa4
 800c3ec:	f003 f8b8 	bl	800f560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c3f0:	4643      	mov	r3, r8
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	a949      	add	r1, sp, #292	; 0x124
 800c3f6:	f8cd 9000 	str.w	r9, [sp]
 800c3fa:	a839      	add	r0, sp, #228	; 0xe4
 800c3fc:	f003 f8b0 	bl	800f560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c400:	42af      	cmp	r7, r5
 800c402:	af12      	add	r7, sp, #72	; 0x48
 800c404:	bfb7      	itett	lt
 800c406:	2300      	movlt	r3, #0
 800c408:	2301      	movge	r3, #1
 800c40a:	ad29      	addlt	r5, sp, #164	; 0xa4
 800c40c:	ac19      	addlt	r4, sp, #100	; 0x64
 800c40e:	bfb1      	iteee	lt
 800c410:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c412:	ad19      	addge	r5, sp, #100	; 0x64
 800c414:	930e      	strge	r3, [sp, #56]	; 0x38
 800c416:	ac29      	addge	r4, sp, #164	; 0xa4
 800c418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c41a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c41e:	e887 0003 	stmia.w	r7, {r0, r1}
 800c422:	b928      	cbnz	r0, 800c430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800c424:	4b80      	ldr	r3, [pc, #512]	; (800c628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	6803      	ldr	r3, [r0, #0]
 800c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42c:	4798      	blx	r3
 800c42e:	6038      	str	r0, [r7, #0]
 800c430:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c432:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c436:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c43a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c43c:	930c      	str	r3, [sp, #48]	; 0x30
 800c43e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c440:	6963      	ldr	r3, [r4, #20]
 800c442:	440b      	add	r3, r1
 800c444:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c448:	4408      	add	r0, r1
 800c44a:	b200      	sxth	r0, r0
 800c44c:	4283      	cmp	r3, r0
 800c44e:	900d      	str	r0, [sp, #52]	; 0x34
 800c450:	f280 80dd 	bge.w	800c60e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800c454:	428b      	cmp	r3, r1
 800c456:	da08      	bge.n	800c46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c458:	2a00      	cmp	r2, #0
 800c45a:	dd06      	ble.n	800c46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c45c:	1acb      	subs	r3, r1, r3
 800c45e:	429a      	cmp	r2, r3
 800c460:	f2c0 80e4 	blt.w	800c62c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800c464:	2b00      	cmp	r3, #0
 800c466:	f300 80e2 	bgt.w	800c62e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800c46a:	6967      	ldr	r7, [r4, #20]
 800c46c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c472:	443b      	add	r3, r7
 800c474:	461f      	mov	r7, r3
 800c476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c478:	1bdf      	subs	r7, r3, r7
 800c47a:	4297      	cmp	r7, r2
 800c47c:	bfa8      	it	ge
 800c47e:	4617      	movge	r7, r2
 800c480:	2f00      	cmp	r7, #0
 800c482:	f340 8166 	ble.w	800c752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800c486:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c488:	6829      	ldr	r1, [r5, #0]
 800c48a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c48e:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c492:	4411      	add	r1, r2
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	4299      	cmp	r1, r3
 800c498:	dd1a      	ble.n	800c4d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c49a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c49e:	4402      	add	r2, r0
 800c4a0:	440b      	add	r3, r1
 800c4a2:	b21b      	sxth	r3, r3
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	dc13      	bgt.n	800c4d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c4a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4aa:	a912      	add	r1, sp, #72	; 0x48
 800c4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	9206      	str	r2, [sp, #24]
 800c4b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4b6:	9500      	str	r5, [sp, #0]
 800c4b8:	9205      	str	r2, [sp, #20]
 800c4ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4bc:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c4c0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c4c2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c4c6:	aa49      	add	r2, sp, #292	; 0x124
 800c4c8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	47c8      	blx	r9
 800c4d0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c4d4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c4d8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c4dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4e0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c4e4:	68a1      	ldr	r1, [r4, #8]
 800c4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ea:	ed94 6a08 	vldr	s12, [r4, #32]
 800c4ee:	edd4 6a07 	vldr	s13, [r4, #28]
 800c4f2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c4f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c4fa:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c4fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c502:	edc4 6a07 	vstr	s13, [r4, #28]
 800c506:	441a      	add	r2, r3
 800c508:	6963      	ldr	r3, [r4, #20]
 800c50a:	3301      	adds	r3, #1
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	6163      	str	r3, [r4, #20]
 800c510:	69a3      	ldr	r3, [r4, #24]
 800c512:	3b01      	subs	r3, #1
 800c514:	61a3      	str	r3, [r4, #24]
 800c516:	6923      	ldr	r3, [r4, #16]
 800c518:	440b      	add	r3, r1
 800c51a:	68e1      	ldr	r1, [r4, #12]
 800c51c:	428b      	cmp	r3, r1
 800c51e:	6123      	str	r3, [r4, #16]
 800c520:	db15      	blt.n	800c54e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800c522:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c526:	3201      	adds	r2, #1
 800c528:	1a5b      	subs	r3, r3, r1
 800c52a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c52e:	6022      	str	r2, [r4, #0]
 800c530:	6123      	str	r3, [r4, #16]
 800c532:	edc4 6a07 	vstr	s13, [r4, #28]
 800c536:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c53a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c53e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c542:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c54a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c54e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c552:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c556:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c55a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c55e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c562:	68a9      	ldr	r1, [r5, #8]
 800c564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c568:	ed95 6a08 	vldr	s12, [r5, #32]
 800c56c:	edd5 6a07 	vldr	s13, [r5, #28]
 800c570:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c574:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c578:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c57c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c580:	edc5 6a07 	vstr	s13, [r5, #28]
 800c584:	441a      	add	r2, r3
 800c586:	696b      	ldr	r3, [r5, #20]
 800c588:	3301      	adds	r3, #1
 800c58a:	602a      	str	r2, [r5, #0]
 800c58c:	616b      	str	r3, [r5, #20]
 800c58e:	69ab      	ldr	r3, [r5, #24]
 800c590:	3b01      	subs	r3, #1
 800c592:	61ab      	str	r3, [r5, #24]
 800c594:	692b      	ldr	r3, [r5, #16]
 800c596:	440b      	add	r3, r1
 800c598:	68e9      	ldr	r1, [r5, #12]
 800c59a:	428b      	cmp	r3, r1
 800c59c:	612b      	str	r3, [r5, #16]
 800c59e:	db15      	blt.n	800c5cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800c5a0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c5a4:	3201      	adds	r2, #1
 800c5a6:	1a5b      	subs	r3, r3, r1
 800c5a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c5ac:	602a      	str	r2, [r5, #0]
 800c5ae:	612b      	str	r3, [r5, #16]
 800c5b0:	edc5 6a07 	vstr	s13, [r5, #28]
 800c5b4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c5b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c5bc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c5c0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c5c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c5cc:	3f01      	subs	r7, #1
 800c5ce:	e757      	b.n	800c480 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	dc13      	bgt.n	800c5fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	da14      	bge.n	800c602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800c5d8:	2502      	movs	r5, #2
 800c5da:	2703      	movs	r7, #3
 800c5dc:	f04f 0800 	mov.w	r8, #0
 800c5e0:	46a9      	mov	r9, r5
 800c5e2:	f04f 0a01 	mov.w	sl, #1
 800c5e6:	e6ef      	b.n	800c3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5e8:	2501      	movs	r5, #1
 800c5ea:	2700      	movs	r7, #0
 800c5ec:	46a9      	mov	r9, r5
 800c5ee:	46b8      	mov	r8, r7
 800c5f0:	f04f 0a02 	mov.w	sl, #2
 800c5f4:	e6e8      	b.n	800c3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c5f6:	2501      	movs	r5, #1
 800c5f8:	2702      	movs	r7, #2
 800c5fa:	e6e1      	b.n	800c3c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800c5fc:	2500      	movs	r5, #0
 800c5fe:	2701      	movs	r7, #1
 800c600:	e7f4      	b.n	800c5ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800c602:	2702      	movs	r7, #2
 800c604:	2503      	movs	r5, #3
 800c606:	f04f 0900 	mov.w	r9, #0
 800c60a:	46b8      	mov	r8, r7
 800c60c:	e7e9      	b.n	800c5e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800c60e:	4613      	mov	r3, r2
 800c610:	e728      	b.n	800c464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800c612:	bf00      	nop
 800c614:	2400ae04 	.word	0x2400ae04
 800c618:	fffd8f01 	.word	0xfffd8f01
 800c61c:	00027100 	.word	0x00027100
 800c620:	0004e1ff 	.word	0x0004e1ff
 800c624:	0004e1fe 	.word	0x0004e1fe
 800c628:	2400ae0c 	.word	0x2400ae0c
 800c62c:	4613      	mov	r3, r2
 800c62e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c630:	469e      	mov	lr, r3
 800c632:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800c634:	469c      	mov	ip, r3
 800c636:	9111      	str	r1, [sp, #68]	; 0x44
 800c638:	f04f 0900 	mov.w	r9, #0
 800c63c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800c640:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800c644:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800c648:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800c64c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800c650:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c654:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800c658:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800c65c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800c660:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800c664:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800c668:	f1bc 0f00 	cmp.w	ip, #0
 800c66c:	d147      	bne.n	800c6fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800c66e:	eb03 0c07 	add.w	ip, r3, r7
 800c672:	1ad7      	subs	r7, r2, r3
 800c674:	f1b9 0f00 	cmp.w	r9, #0
 800c678:	d009      	beq.n	800c68e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800c67a:	9029      	str	r0, [sp, #164]	; 0xa4
 800c67c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800c680:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c684:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800c688:	912d      	str	r1, [sp, #180]	; 0xb4
 800c68a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800c68e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c690:	f04f 0800 	mov.w	r8, #0
 800c694:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c698:	9111      	str	r1, [sp, #68]	; 0x44
 800c69a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c69e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c6a2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c6a6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c6aa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c6ae:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c6b2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c6b6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c6ba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c6be:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c6c2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c6c6:	f1be 0f00 	cmp.w	lr, #0
 800c6ca:	d031      	beq.n	800c730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800c6cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c6ce:	4450      	add	r0, sl
 800c6d0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c6d4:	4431      	add	r1, r6
 800c6d6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c6da:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c6de:	4549      	cmp	r1, r9
 800c6e0:	db08      	blt.n	800c6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800c6e2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c6ec:	eba1 0109 	sub.w	r1, r1, r9
 800c6f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c6f8:	f04f 0801 	mov.w	r8, #1
 800c6fc:	e7e3      	b.n	800c6c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800c6fe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c700:	4450      	add	r0, sl
 800c702:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c706:	4431      	add	r1, r6
 800c708:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c70c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c710:	4541      	cmp	r1, r8
 800c712:	db08      	blt.n	800c726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800c714:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c718:	3001      	adds	r0, #1
 800c71a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c71e:	eba1 0108 	sub.w	r1, r1, r8
 800c722:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c726:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c72a:	f04f 0901 	mov.w	r9, #1
 800c72e:	e79b      	b.n	800c668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800c730:	449c      	add	ip, r3
 800c732:	1aff      	subs	r7, r7, r3
 800c734:	f1b8 0f00 	cmp.w	r8, #0
 800c738:	d009      	beq.n	800c74e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800c73a:	9019      	str	r0, [sp, #100]	; 0x64
 800c73c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800c740:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800c744:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800c748:	911d      	str	r1, [sp, #116]	; 0x74
 800c74a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	e68b      	b.n	800c46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c754:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80d1 	beq.w	800c8fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800c75c:	ad19      	add	r5, sp, #100	; 0x64
 800c75e:	ac39      	add	r4, sp, #228	; 0xe4
 800c760:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c762:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c76a:	930c      	str	r3, [sp, #48]	; 0x30
 800c76c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c76e:	6963      	ldr	r3, [r4, #20]
 800c770:	440b      	add	r3, r1
 800c772:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c776:	4408      	add	r0, r1
 800c778:	b200      	sxth	r0, r0
 800c77a:	4283      	cmp	r3, r0
 800c77c:	900d      	str	r0, [sp, #52]	; 0x34
 800c77e:	f280 80c1 	bge.w	800c904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800c782:	428b      	cmp	r3, r1
 800c784:	da08      	bge.n	800c798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c786:	2a00      	cmp	r2, #0
 800c788:	dd06      	ble.n	800c798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c78a:	1acb      	subs	r3, r1, r3
 800c78c:	429a      	cmp	r2, r3
 800c78e:	f2c0 80bb 	blt.w	800c908 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800c792:	2b00      	cmp	r3, #0
 800c794:	f300 80b9 	bgt.w	800c90a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800c798:	6967      	ldr	r7, [r4, #20]
 800c79a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7a0:	443b      	add	r3, r7
 800c7a2:	461f      	mov	r7, r3
 800c7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7a6:	1bdf      	subs	r7, r3, r7
 800c7a8:	4297      	cmp	r7, r2
 800c7aa:	bfa8      	it	ge
 800c7ac:	4617      	movge	r7, r2
 800c7ae:	2f00      	cmp	r7, #0
 800c7b0:	f340 813c 	ble.w	800ca2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800c7b4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c7b6:	6829      	ldr	r1, [r5, #0]
 800c7b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c7bc:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c7c0:	4411      	add	r1, r2
 800c7c2:	6820      	ldr	r0, [r4, #0]
 800c7c4:	4299      	cmp	r1, r3
 800c7c6:	dd1a      	ble.n	800c7fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c7c8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c7cc:	4402      	add	r2, r0
 800c7ce:	440b      	add	r3, r1
 800c7d0:	b21b      	sxth	r3, r3
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	dc13      	bgt.n	800c7fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800c7d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7d8:	a912      	add	r1, sp, #72	; 0x48
 800c7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	9206      	str	r2, [sp, #24]
 800c7e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7e4:	9500      	str	r5, [sp, #0]
 800c7e6:	9205      	str	r2, [sp, #20]
 800c7e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7ea:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c7ee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c7f0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c7f4:	aa49      	add	r2, sp, #292	; 0x124
 800c7f6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800c7fa:	4623      	mov	r3, r4
 800c7fc:	47c8      	blx	r9
 800c7fe:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c802:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c806:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c80a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c80e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c812:	68a1      	ldr	r1, [r4, #8]
 800c814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c818:	ed94 6a08 	vldr	s12, [r4, #32]
 800c81c:	edd4 6a07 	vldr	s13, [r4, #28]
 800c820:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c824:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c828:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c82c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c830:	edc4 6a07 	vstr	s13, [r4, #28]
 800c834:	441a      	add	r2, r3
 800c836:	6963      	ldr	r3, [r4, #20]
 800c838:	3301      	adds	r3, #1
 800c83a:	6022      	str	r2, [r4, #0]
 800c83c:	6163      	str	r3, [r4, #20]
 800c83e:	69a3      	ldr	r3, [r4, #24]
 800c840:	3b01      	subs	r3, #1
 800c842:	61a3      	str	r3, [r4, #24]
 800c844:	6923      	ldr	r3, [r4, #16]
 800c846:	440b      	add	r3, r1
 800c848:	68e1      	ldr	r1, [r4, #12]
 800c84a:	428b      	cmp	r3, r1
 800c84c:	6123      	str	r3, [r4, #16]
 800c84e:	db15      	blt.n	800c87c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800c850:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c854:	3201      	adds	r2, #1
 800c856:	1a5b      	subs	r3, r3, r1
 800c858:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	edc4 6a07 	vstr	s13, [r4, #28]
 800c864:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c868:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c86c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c870:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c874:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c878:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c87c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c880:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c884:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c88c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c890:	68a9      	ldr	r1, [r5, #8]
 800c892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c896:	ed95 6a08 	vldr	s12, [r5, #32]
 800c89a:	edd5 6a07 	vldr	s13, [r5, #28]
 800c89e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c8a2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c8a6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c8aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8ae:	edc5 6a07 	vstr	s13, [r5, #28]
 800c8b2:	441a      	add	r2, r3
 800c8b4:	696b      	ldr	r3, [r5, #20]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	602a      	str	r2, [r5, #0]
 800c8ba:	616b      	str	r3, [r5, #20]
 800c8bc:	69ab      	ldr	r3, [r5, #24]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	61ab      	str	r3, [r5, #24]
 800c8c2:	692b      	ldr	r3, [r5, #16]
 800c8c4:	440b      	add	r3, r1
 800c8c6:	68e9      	ldr	r1, [r5, #12]
 800c8c8:	428b      	cmp	r3, r1
 800c8ca:	612b      	str	r3, [r5, #16]
 800c8cc:	db15      	blt.n	800c8fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800c8ce:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c8d2:	3201      	adds	r2, #1
 800c8d4:	1a5b      	subs	r3, r3, r1
 800c8d6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c8da:	602a      	str	r2, [r5, #0]
 800c8dc:	612b      	str	r3, [r5, #16]
 800c8de:	edc5 6a07 	vstr	s13, [r5, #28]
 800c8e2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c8e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c8ea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c8ee:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c8f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8f6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c8fa:	3f01      	subs	r7, #1
 800c8fc:	e757      	b.n	800c7ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800c8fe:	ad39      	add	r5, sp, #228	; 0xe4
 800c900:	ac19      	add	r4, sp, #100	; 0x64
 800c902:	e72d      	b.n	800c760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800c904:	4613      	mov	r3, r2
 800c906:	e744      	b.n	800c792 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800c908:	4613      	mov	r3, r2
 800c90a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800c90c:	469e      	mov	lr, r3
 800c90e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800c912:	461f      	mov	r7, r3
 800c914:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800c918:	f04f 0900 	mov.w	r9, #0
 800c91c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800c920:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800c924:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800c928:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800c92c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800c930:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800c932:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800c936:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800c93a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800c93e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800c942:	960e      	str	r6, [sp, #56]	; 0x38
 800c944:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800c948:	2f00      	cmp	r7, #0
 800c94a:	d146      	bne.n	800c9da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800c94c:	449c      	add	ip, r3
 800c94e:	1ad7      	subs	r7, r2, r3
 800c950:	f1b9 0f00 	cmp.w	r9, #0
 800c954:	d009      	beq.n	800c96a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800c956:	9039      	str	r0, [sp, #228]	; 0xe4
 800c958:	913d      	str	r1, [sp, #244]	; 0xf4
 800c95a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c95e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800c962:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800c966:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800c96a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800c96c:	f04f 0800 	mov.w	r8, #0
 800c970:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800c974:	910e      	str	r1, [sp, #56]	; 0x38
 800c976:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800c97a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c97e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800c982:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800c986:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800c98a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800c98e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c992:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800c996:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800c99a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800c99e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800c9a2:	f1be 0f00 	cmp.w	lr, #0
 800c9a6:	d030      	beq.n	800ca0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800c9a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c9aa:	4450      	add	r0, sl
 800c9ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c9b0:	4431      	add	r1, r6
 800c9b2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c9b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c9ba:	4549      	cmp	r1, r9
 800c9bc:	db08      	blt.n	800c9d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800c9be:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c9c8:	eba1 0109 	sub.w	r1, r1, r9
 800c9cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c9d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c9d4:	f04f 0801 	mov.w	r8, #1
 800c9d8:	e7e3      	b.n	800c9a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800c9da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c9dc:	4450      	add	r0, sl
 800c9de:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c9e2:	4431      	add	r1, r6
 800c9e4:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c9e8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c9ec:	4541      	cmp	r1, r8
 800c9ee:	db08      	blt.n	800ca02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800c9f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c9fa:	eba1 0108 	sub.w	r1, r1, r8
 800c9fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca02:	3f01      	subs	r7, #1
 800ca04:	f04f 0901 	mov.w	r9, #1
 800ca08:	e79e      	b.n	800c948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800ca0a:	449c      	add	ip, r3
 800ca0c:	1aff      	subs	r7, r7, r3
 800ca0e:	f1b8 0f00 	cmp.w	r8, #0
 800ca12:	d009      	beq.n	800ca28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800ca14:	9019      	str	r0, [sp, #100]	; 0x64
 800ca16:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800ca1a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800ca1e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800ca22:	911d      	str	r1, [sp, #116]	; 0x74
 800ca24:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800ca28:	1ad2      	subs	r2, r2, r3
 800ca2a:	e6b5      	b.n	800c798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ca2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	b923      	cbnz	r3, 800ca3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ca32:	4b04      	ldr	r3, [pc, #16]	; (800ca44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ca34:	6818      	ldr	r0, [r3, #0]
 800ca36:	6803      	ldr	r3, [r0, #0]
 800ca38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3a:	4798      	blx	r3
 800ca3c:	b05b      	add	sp, #364	; 0x16c
 800ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca42:	bf00      	nop
 800ca44:	2400ae0c 	.word	0x2400ae0c

0800ca48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d818      	bhi.n	800ca7e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800ca4c:	e8df f003 	tbb	[pc, r3]
 800ca50:	130d0602 	.word	0x130d0602
 800ca54:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ca58:	1850      	adds	r0, r2, r1
 800ca5a:	4770      	bx	lr
 800ca5c:	8803      	ldrh	r3, [r0, #0]
 800ca5e:	8880      	ldrh	r0, [r0, #4]
 800ca60:	4418      	add	r0, r3
 800ca62:	b200      	sxth	r0, r0
 800ca64:	1a80      	subs	r0, r0, r2
 800ca66:	3801      	subs	r0, #1
 800ca68:	4770      	bx	lr
 800ca6a:	8803      	ldrh	r3, [r0, #0]
 800ca6c:	8880      	ldrh	r0, [r0, #4]
 800ca6e:	4418      	add	r0, r3
 800ca70:	b200      	sxth	r0, r0
 800ca72:	1a40      	subs	r0, r0, r1
 800ca74:	e7f7      	b.n	800ca66 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ca76:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ca7a:	4410      	add	r0, r2
 800ca7c:	4770      	bx	lr
 800ca7e:	2000      	movs	r0, #0
 800ca80:	4770      	bx	lr

0800ca82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d817      	bhi.n	800cab6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ca86:	e8df f003 	tbb	[pc, r3]
 800ca8a:	0602      	.short	0x0602
 800ca8c:	1009      	.short	0x1009
 800ca8e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ca92:	1850      	adds	r0, r2, r1
 800ca94:	4770      	bx	lr
 800ca96:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ca9a:	e7fa      	b.n	800ca92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ca9c:	8843      	ldrh	r3, [r0, #2]
 800ca9e:	88c0      	ldrh	r0, [r0, #6]
 800caa0:	4418      	add	r0, r3
 800caa2:	b200      	sxth	r0, r0
 800caa4:	1a80      	subs	r0, r0, r2
 800caa6:	3801      	subs	r0, #1
 800caa8:	4770      	bx	lr
 800caaa:	8843      	ldrh	r3, [r0, #2]
 800caac:	88c0      	ldrh	r0, [r0, #6]
 800caae:	4418      	add	r0, r3
 800cab0:	b200      	sxth	r0, r0
 800cab2:	1a40      	subs	r0, r0, r1
 800cab4:	e7f7      	b.n	800caa6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800cab6:	2000      	movs	r0, #0
 800cab8:	4770      	bx	lr
	...

0800cabc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800cabc:	4b01      	ldr	r3, [pc, #4]	; (800cac4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	4770      	bx	lr
 800cac4:	2400ae14 	.word	0x2400ae14

0800cac8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800cac8:	4603      	mov	r3, r0
 800caca:	b1c8      	cbz	r0, 800cb00 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800cacc:	0c02      	lsrs	r2, r0, #16
 800cace:	0412      	lsls	r2, r2, #16
 800cad0:	b9a2      	cbnz	r2, 800cafc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800cad2:	0403      	lsls	r3, r0, #16
 800cad4:	2010      	movs	r0, #16
 800cad6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cada:	bf04      	itt	eq
 800cadc:	021b      	lsleq	r3, r3, #8
 800cade:	3008      	addeq	r0, #8
 800cae0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cae4:	bf04      	itt	eq
 800cae6:	011b      	lsleq	r3, r3, #4
 800cae8:	3004      	addeq	r0, #4
 800caea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800caee:	bf04      	itt	eq
 800caf0:	009b      	lsleq	r3, r3, #2
 800caf2:	3002      	addeq	r0, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	db04      	blt.n	800cb02 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800caf8:	3001      	adds	r0, #1
 800cafa:	4770      	bx	lr
 800cafc:	2000      	movs	r0, #0
 800cafe:	e7ea      	b.n	800cad6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800cb00:	2020      	movs	r0, #32
 800cb02:	4770      	bx	lr

0800cb04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	b087      	sub	sp, #28
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	4698      	mov	r8, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	460d      	mov	r5, r1
 800cb12:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800cb16:	b981      	cbnz	r1, 800cb3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800cb18:	b14b      	cbz	r3, 800cb2e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	464a      	mov	r2, r9
 800cb1e:	4641      	mov	r1, r8
 800cb20:	e9cd 4700 	strd	r4, r7, [sp]
 800cb24:	f7ff ffee 	bl	800cb04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb28:	b007      	add	sp, #28
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb32:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800cb36:	603b      	str	r3, [r7, #0]
 800cb38:	e7f6      	b.n	800cb28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb3a:	fa32 fa01 	lsrs.w	sl, r2, r1
 800cb3e:	d107      	bne.n	800cb50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800cb40:	fb09 f602 	mul.w	r6, r9, r2
 800cb44:	fbb6 f0f4 	udiv	r0, r6, r4
 800cb48:	fb04 6610 	mls	r6, r4, r0, r6
 800cb4c:	603e      	str	r6, [r7, #0]
 800cb4e:	e7eb      	b.n	800cb28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800cb50:	2601      	movs	r6, #1
 800cb52:	fa09 fb01 	lsl.w	fp, r9, r1
 800cb56:	408e      	lsls	r6, r1
 800cb58:	fbbb f3f4 	udiv	r3, fp, r4
 800cb5c:	3e01      	subs	r6, #1
 800cb5e:	9302      	str	r3, [sp, #8]
 800cb60:	fb0a f303 	mul.w	r3, sl, r3
 800cb64:	4016      	ands	r6, r2
 800cb66:	9303      	str	r3, [sp, #12]
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7ff ffad 	bl	800cac8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb6e:	464a      	mov	r2, r9
 800cb70:	460b      	mov	r3, r1
 800cb72:	4601      	mov	r1, r0
 800cb74:	4630      	mov	r0, r6
 800cb76:	e9cd 4700 	strd	r4, r7, [sp]
 800cb7a:	f7ff ffc3 	bl	800cb04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb7e:	9b02      	ldr	r3, [sp, #8]
 800cb80:	4606      	mov	r6, r0
 800cb82:	eb05 0108 	add.w	r1, r5, r8
 800cb86:	fb04 bb13 	mls	fp, r4, r3, fp
 800cb8a:	4658      	mov	r0, fp
 800cb8c:	f7ff ff9c 	bl	800cac8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb90:	ab05      	add	r3, sp, #20
 800cb92:	465a      	mov	r2, fp
 800cb94:	e9cd 4300 	strd	r4, r3, [sp]
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f7ff ffb2 	bl	800cb04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cba0:	6839      	ldr	r1, [r7, #0]
 800cba2:	9a05      	ldr	r2, [sp, #20]
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	4411      	add	r1, r2
 800cba8:	fbb1 f2f4 	udiv	r2, r1, r4
 800cbac:	18d3      	adds	r3, r2, r3
 800cbae:	fb04 1412 	mls	r4, r4, r2, r1
 800cbb2:	441e      	add	r6, r3
 800cbb4:	603c      	str	r4, [r7, #0]
 800cbb6:	4430      	add	r0, r6
 800cbb8:	e7b6      	b.n	800cb28 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800cbba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800cbba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	f1b0 0900 	subs.w	r9, r0, #0
 800cbc4:	461d      	mov	r5, r3
 800cbc6:	4617      	mov	r7, r2
 800cbc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cbca:	bfbb      	ittet	lt
 800cbcc:	f1c9 0900 	rsblt	r9, r9, #0
 800cbd0:	f04f 36ff 	movlt.w	r6, #4294967295
 800cbd4:	2601      	movge	r6, #1
 800cbd6:	6823      	ldrlt	r3, [r4, #0]
 800cbd8:	bfbc      	itt	lt
 800cbda:	425b      	neglt	r3, r3
 800cbdc:	6023      	strlt	r3, [r4, #0]
 800cbde:	2a00      	cmp	r2, #0
 800cbe0:	da04      	bge.n	800cbec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	4257      	negs	r7, r2
 800cbe6:	4276      	negs	r6, r6
 800cbe8:	425b      	negs	r3, r3
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	4638      	mov	r0, r7
 800cbf0:	bfba      	itte	lt
 800cbf2:	426d      	neglt	r5, r5
 800cbf4:	f04f 38ff 	movlt.w	r8, #4294967295
 800cbf8:	f04f 0801 	movge.w	r8, #1
 800cbfc:	f7ff ff64 	bl	800cac8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cc00:	ab03      	add	r3, sp, #12
 800cc02:	463a      	mov	r2, r7
 800cc04:	e9cd 5300 	strd	r5, r3, [sp]
 800cc08:	4603      	mov	r3, r0
 800cc0a:	4648      	mov	r0, r9
 800cc0c:	f7ff ff7a 	bl	800cb04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	9a03      	ldr	r2, [sp, #12]
 800cc14:	4546      	cmp	r6, r8
 800cc16:	441a      	add	r2, r3
 800cc18:	fb92 f3f5 	sdiv	r3, r2, r5
 800cc1c:	4418      	add	r0, r3
 800cc1e:	fb05 2313 	mls	r3, r5, r3, r2
 800cc22:	bf18      	it	ne
 800cc24:	4240      	negne	r0, r0
 800cc26:	1c72      	adds	r2, r6, #1
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	d105      	bne.n	800cc38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f1c3 0200 	rsb	r2, r3, #0
 800cc32:	db0b      	blt.n	800cc4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800cc34:	6022      	str	r2, [r4, #0]
 800cc36:	e006      	b.n	800cc46 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc38:	2e01      	cmp	r6, #1
 800cc3a:	d104      	bne.n	800cc46 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da02      	bge.n	800cc46 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cc40:	442b      	add	r3, r5
 800cc42:	3801      	subs	r0, #1
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	b005      	add	sp, #20
 800cc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc4c:	3801      	subs	r0, #1
 800cc4e:	1b52      	subs	r2, r2, r5
 800cc50:	e7f0      	b.n	800cc34 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800cc54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800cc54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc58:	4c1c      	ldr	r4, [pc, #112]	; (800cccc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	6807      	ldr	r7, [r0, #0]
 800cc5e:	69a3      	ldr	r3, [r4, #24]
 800cc60:	b92b      	cbnz	r3, 800cc6e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800cc62:	6840      	ldr	r0, [r0, #4]
 800cc64:	e9c5 7000 	strd	r7, r0, [r5]
 800cc68:	b004      	add	sp, #16
 800cc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6e:	f04f 0802 	mov.w	r8, #2
 800cc72:	68a2      	ldr	r2, [r4, #8]
 800cc74:	ae04      	add	r6, sp, #16
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	fb93 f1f8 	sdiv	r1, r3, r8
 800cc7c:	440a      	add	r2, r1
 800cc7e:	69e1      	ldr	r1, [r4, #28]
 800cc80:	f846 2d04 	str.w	r2, [r6, #-4]!
 800cc84:	463a      	mov	r2, r7
 800cc86:	9600      	str	r6, [sp, #0]
 800cc88:	f7ff ff97 	bl	800cbba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc8c:	69a3      	ldr	r3, [r4, #24]
 800cc8e:	4607      	mov	r7, r0
 800cc90:	686a      	ldr	r2, [r5, #4]
 800cc92:	6a21      	ldr	r1, [r4, #32]
 800cc94:	9600      	str	r6, [sp, #0]
 800cc96:	6860      	ldr	r0, [r4, #4]
 800cc98:	f7ff ff8f 	bl	800cbba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc9c:	69a3      	ldr	r3, [r4, #24]
 800cc9e:	6962      	ldr	r2, [r4, #20]
 800cca0:	4407      	add	r7, r0
 800cca2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cca4:	9600      	str	r6, [sp, #0]
 800cca6:	68e0      	ldr	r0, [r4, #12]
 800cca8:	fb93 f8f8 	sdiv	r8, r3, r8
 800ccac:	4442      	add	r2, r8
 800ccae:	9203      	str	r2, [sp, #12]
 800ccb0:	682a      	ldr	r2, [r5, #0]
 800ccb2:	f7ff ff82 	bl	800cbba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	9600      	str	r6, [sp, #0]
 800ccba:	69a3      	ldr	r3, [r4, #24]
 800ccbc:	686a      	ldr	r2, [r5, #4]
 800ccbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ccc0:	6920      	ldr	r0, [r4, #16]
 800ccc2:	f7ff ff7a 	bl	800cbba <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800ccc6:	4440      	add	r0, r8
 800ccc8:	e7cc      	b.n	800cc64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800ccca:	bf00      	nop
 800cccc:	2400ae18 	.word	0x2400ae18

0800ccd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800ccd0:	4b07      	ldr	r3, [pc, #28]	; (800ccf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d109      	bne.n	800ccec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800ccd8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ccdc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cce0:	8003      	strh	r3, [r0, #0]
 800cce2:	4b04      	ldr	r3, [pc, #16]	; (800ccf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	1a9b      	subs	r3, r3, r2
 800ccea:	800b      	strh	r3, [r1, #0]
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	2400ae04 	.word	0x2400ae04
 800ccf4:	2400ae00 	.word	0x2400ae00

0800ccf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ccf8:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d108      	bne.n	800cd14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800cd02:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800cd04:	880c      	ldrh	r4, [r1, #0]
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	1b1b      	subs	r3, r3, r4
 800cd10:	8003      	strh	r3, [r0, #0]
 800cd12:	800a      	strh	r2, [r1, #0]
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	bf00      	nop
 800cd18:	2400ae04 	.word	0x2400ae04
 800cd1c:	2400ae00 	.word	0x2400ae00

0800cd20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800cd22:	b510      	push	{r4, lr}
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d10e      	bne.n	800cd48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800cd2a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cd2e:	8843      	ldrh	r3, [r0, #2]
 800cd30:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd34:	18ca      	adds	r2, r1, r3
 800cd36:	4b06      	ldr	r3, [pc, #24]	; (800cd50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800cd38:	8044      	strh	r4, [r0, #2]
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	1a9b      	subs	r3, r3, r2
 800cd3e:	8003      	strh	r3, [r0, #0]
 800cd40:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd44:	8081      	strh	r1, [r0, #4]
 800cd46:	80c3      	strh	r3, [r0, #6]
 800cd48:	bd10      	pop	{r4, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2400ae04 	.word	0x2400ae04
 800cd50:	2400ae00 	.word	0x2400ae00

0800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800cd54:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d10c      	bne.n	800cd76 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800cd5c:	8803      	ldrh	r3, [r0, #0]
 800cd5e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800cd62:	8842      	ldrh	r2, [r0, #2]
 800cd64:	8002      	strh	r2, [r0, #0]
 800cd66:	185a      	adds	r2, r3, r1
 800cd68:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	8043      	strh	r3, [r0, #2]
 800cd70:	88c3      	ldrh	r3, [r0, #6]
 800cd72:	80c1      	strh	r1, [r0, #6]
 800cd74:	8083      	strh	r3, [r0, #4]
 800cd76:	4770      	bx	lr
 800cd78:	2400ae04 	.word	0x2400ae04
 800cd7c:	2400ae00 	.word	0x2400ae00

0800cd80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800cd80:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800cd82:	b510      	push	{r4, lr}
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d108      	bne.n	800cd9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800cd8a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cd8e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd92:	8003      	strh	r3, [r0, #0]
 800cd94:	8893      	ldrh	r3, [r2, #4]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	1b1b      	subs	r3, r3, r4
 800cd9a:	800b      	strh	r3, [r1, #0]
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	bf00      	nop
 800cda0:	2400ae04 	.word	0x2400ae04

0800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800cda4:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800cda6:	460a      	mov	r2, r1
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d10d      	bne.n	800cdcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800cdb0:	8881      	ldrh	r1, [r0, #4]
 800cdb2:	8803      	ldrh	r3, [r0, #0]
 800cdb4:	440b      	add	r3, r1
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	f821 3b02 	strh.w	r3, [r1], #2
 800cdbe:	f7ff ffdf 	bl	800cd80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800cdc2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cdc6:	88c2      	ldrh	r2, [r0, #6]
 800cdc8:	80c3      	strh	r3, [r0, #6]
 800cdca:	8082      	strh	r2, [r0, #4]
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	bf00      	nop
 800cdd0:	2400ae04 	.word	0x2400ae04

0800cdd4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4c0a      	ldr	r4, [pc, #40]	; (800ce04 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cdda:	4605      	mov	r5, r0
 800cddc:	460e      	mov	r6, r1
 800cdde:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800cde2:	6820      	ldr	r0, [r4, #0]
 800cde4:	b110      	cbz	r0, 800cdec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 800cde6:	6803      	ldr	r3, [r0, #0]
 800cde8:	695b      	ldr	r3, [r3, #20]
 800cdea:	4798      	blx	r3
 800cdec:	6026      	str	r6, [r4, #0]
 800cdee:	4630      	mov	r0, r6
 800cdf0:	6833      	ldr	r3, [r6, #0]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	4798      	blx	r3
 800cdf6:	682b      	ldr	r3, [r5, #0]
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce00:	4718      	bx	r3
 800ce02:	bf00      	nop
 800ce04:	2400ae48 	.word	0x2400ae48

0800ce08 <_ZN8touchgfx11Application13requestRedrawEv>:
 800ce08:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce10:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ce12:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800ce16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce1a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800ce1e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800ce22:	4770      	bx	lr
 800ce24:	2400ae00 	.word	0x2400ae00
 800ce28:	2400ae02 	.word	0x2400ae02

0800ce2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800ce2c:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	b110      	cbz	r0, 800ce38 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800ce32:	6803      	ldr	r3, [r0, #0]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	4718      	bx	r3
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	2400ae48 	.word	0x2400ae48

0800ce40 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ce40:	4770      	bx	lr
	...

0800ce44 <_ZN8touchgfx11Application4drawEv>:
 800ce44:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <_ZN8touchgfx11Application4drawEv+0x28>)
 800ce46:	b507      	push	{r0, r1, r2, lr}
 800ce48:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ce50:	9100      	str	r1, [sp, #0]
 800ce52:	4669      	mov	r1, sp
 800ce54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce58:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ce5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce60:	6803      	ldr	r3, [r0, #0]
 800ce62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce64:	4798      	blx	r3
 800ce66:	b003      	add	sp, #12
 800ce68:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce6c:	2400ae00 	.word	0x2400ae00
 800ce70:	2400ae02 	.word	0x2400ae02

0800ce74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	b110      	cbz	r0, 800ce80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ce7a:	6803      	ldr	r3, [r0, #0]
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	4718      	bx	r3
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	2400ae48 	.word	0x2400ae48

0800ce88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ce88:	4b03      	ldr	r3, [pc, #12]	; (800ce98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ce8a:	6818      	ldr	r0, [r3, #0]
 800ce8c:	b110      	cbz	r0, 800ce94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ce8e:	6803      	ldr	r3, [r0, #0]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	4718      	bx	r3
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	2400ae48 	.word	0x2400ae48

0800ce9c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800cea2:	4770      	bx	lr

0800cea4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800cea4:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	b110      	cbz	r0, 800ceb0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ceaa:	6803      	ldr	r3, [r0, #0]
 800ceac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceae:	4718      	bx	r3
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	2400ae48 	.word	0x2400ae48

0800ceb8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	4d32      	ldr	r5, [pc, #200]	; (800cf84 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 800cebc:	4604      	mov	r4, r0
 800cebe:	6828      	ldr	r0, [r5, #0]
 800cec0:	b140      	cbz	r0, 800ced4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cec2:	7a03      	ldrb	r3, [r0, #8]
 800cec4:	b933      	cbnz	r3, 800ced4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cec6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800ceca:	6803      	ldr	r3, [r0, #0]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ced2:	4718      	bx	r3
 800ced4:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800ced8:	b97b      	cbnz	r3, 800cefa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ceda:	b170      	cbz	r0, 800cefa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cedc:	7a03      	ldrb	r3, [r0, #8]
 800cede:	b163      	cbz	r3, 800cefa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cee0:	4b29      	ldr	r3, [pc, #164]	; (800cf88 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800cee2:	6818      	ldr	r0, [r3, #0]
 800cee4:	b110      	cbz	r0, 800ceec <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800cee6:	6803      	ldr	r3, [r0, #0]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	4798      	blx	r3
 800ceec:	6828      	ldr	r0, [r5, #0]
 800ceee:	6803      	ldr	r3, [r0, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	4798      	blx	r3
 800cef4:	2301      	movs	r3, #1
 800cef6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800cefa:	2500      	movs	r5, #0
 800cefc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800cf00:	42a8      	cmp	r0, r5
 800cf02:	dd0c      	ble.n	800cf1e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800cf04:	1963      	adds	r3, r4, r5
 800cf06:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800cf0a:	b132      	cbz	r2, 800cf1a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800cf0c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800cf10:	4413      	add	r3, r2
 800cf12:	6858      	ldr	r0, [r3, #4]
 800cf14:	6803      	ldr	r3, [r0, #0]
 800cf16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf18:	4798      	blx	r3
 800cf1a:	3501      	adds	r5, #1
 800cf1c:	e7ee      	b.n	800cefc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	461a      	mov	r2, r3
 800cf22:	4298      	cmp	r0, r3
 800cf24:	d015      	beq.n	800cf52 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800cf26:	18e1      	adds	r1, r4, r3
 800cf28:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800cf2c:	b16d      	cbz	r5, 800cf4a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d00a      	beq.n	800cf48 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 800cf32:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800cf36:	4431      	add	r1, r6
 800cf38:	684e      	ldr	r6, [r1, #4]
 800cf3a:	b291      	uxth	r1, r2
 800cf3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800cf40:	604e      	str	r6, [r1, #4]
 800cf42:	18a1      	adds	r1, r4, r2
 800cf44:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800cf48:	3201      	adds	r2, #1
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	e7e9      	b.n	800cf22 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800cf4e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800cf52:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 800cf56:	4295      	cmp	r5, r2
 800cf58:	dd0d      	ble.n	800cf76 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 800cf5a:	1e6b      	subs	r3, r5, #1
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800cf62:	4618      	mov	r0, r3
 800cf64:	3104      	adds	r1, #4
 800cf66:	4285      	cmp	r5, r0
 800cf68:	ddf1      	ble.n	800cf4e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 800cf6a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f841 6c04 	str.w	r6, [r1, #-4]
 800cf74:	e7f7      	b.n	800cf66 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 800cf76:	4b04      	ldr	r3, [pc, #16]	; (800cf88 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	b110      	cbz	r0, 800cf82 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800cf7c:	6803      	ldr	r3, [r0, #0]
 800cf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf80:	e7a5      	b.n	800cece <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cf82:	bd70      	pop	{r4, r5, r6, pc}
 800cf84:	2400ae4c 	.word	0x2400ae4c
 800cf88:	2400ae48 	.word	0x2400ae48

0800cf8c <_ZN8touchgfx11ApplicationD1Ev>:
 800cf8c:	4770      	bx	lr

0800cf8e <_ZN8touchgfx11ApplicationD0Ev>:
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	4604      	mov	r4, r0
 800cf92:	f44f 719c 	mov.w	r1, #312	; 0x138
 800cf96:	f00a fe06 	bl	8017ba6 <_ZdlPvj>
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	bd10      	pop	{r4, pc}

0800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800cf9e:	b510      	push	{r4, lr}
 800cfa0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cfa4:	888a      	ldrh	r2, [r1, #4]
 800cfa6:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cfaa:	4422      	add	r2, r4
 800cfac:	b212      	sxth	r2, r2
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	da15      	bge.n	800cfde <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfb2:	8882      	ldrh	r2, [r0, #4]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	b21b      	sxth	r3, r3
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	da10      	bge.n	800cfde <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfbc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cfc0:	88c9      	ldrh	r1, [r1, #6]
 800cfc2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cfc6:	4419      	add	r1, r3
 800cfc8:	b209      	sxth	r1, r1
 800cfca:	428a      	cmp	r2, r1
 800cfcc:	da07      	bge.n	800cfde <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cfce:	88c0      	ldrh	r0, [r0, #6]
 800cfd0:	4410      	add	r0, r2
 800cfd2:	b200      	sxth	r0, r0
 800cfd4:	4283      	cmp	r3, r0
 800cfd6:	bfac      	ite	ge
 800cfd8:	2000      	movge	r0, #0
 800cfda:	2001      	movlt	r0, #1
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	2000      	movs	r0, #0
 800cfe0:	e7fc      	b.n	800cfdc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cfe2 <_ZN8touchgfx4Rect10restrictToEss>:
 800cfe2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	da04      	bge.n	800cff6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cfec:	8884      	ldrh	r4, [r0, #4]
 800cfee:	4423      	add	r3, r4
 800cff0:	8083      	strh	r3, [r0, #4]
 800cff2:	2300      	movs	r3, #0
 800cff4:	8003      	strh	r3, [r0, #0]
 800cff6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cffa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cffe:	1b09      	subs	r1, r1, r4
 800d000:	428b      	cmp	r3, r1
 800d002:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d006:	bfc8      	it	gt
 800d008:	8081      	strhgt	r1, [r0, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	da04      	bge.n	800d018 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800d00e:	88c1      	ldrh	r1, [r0, #6]
 800d010:	440b      	add	r3, r1
 800d012:	80c3      	strh	r3, [r0, #6]
 800d014:	2300      	movs	r3, #0
 800d016:	8043      	strh	r3, [r0, #2]
 800d018:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800d01c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d020:	1a52      	subs	r2, r2, r1
 800d022:	4293      	cmp	r3, r2
 800d024:	bfc8      	it	gt
 800d026:	80c2      	strhgt	r2, [r0, #6]
 800d028:	bd10      	pop	{r4, pc}
	...

0800d02c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800d02c:	4b10      	ldr	r3, [pc, #64]	; (800d070 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800d02e:	b510      	push	{r4, lr}
 800d030:	460c      	mov	r4, r1
 800d032:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d036:	4b0f      	ldr	r3, [pc, #60]	; (800d074 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800d038:	4620      	mov	r0, r4
 800d03a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d03e:	f7ff ffd0 	bl	800cfe2 <_ZN8touchgfx4Rect10restrictToEss>
 800d042:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	b190      	cbz	r0, 800d06e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800d048:	6803      	ldr	r3, [r0, #0]
 800d04a:	4621      	mov	r1, r4
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	4798      	blx	r3
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	b118      	cbz	r0, 800d05e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800d056:	6803      	ldr	r3, [r0, #0]
 800d058:	4621      	mov	r1, r4
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	4798      	blx	r3
 800d05e:	4b08      	ldr	r3, [pc, #32]	; (800d080 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800d060:	4621      	mov	r1, r4
 800d062:	6818      	ldr	r0, [r3, #0]
 800d064:	6803      	ldr	r3, [r0, #0]
 800d066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	4718      	bx	r3
 800d06e:	bd10      	pop	{r4, pc}
 800d070:	2400ae02 	.word	0x2400ae02
 800d074:	2400ae00 	.word	0x2400ae00
 800d078:	2400ae48 	.word	0x2400ae48
 800d07c:	2400ae44 	.word	0x2400ae44
 800d080:	2400ae0c 	.word	0x2400ae0c

0800d084 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	4606      	mov	r6, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	460f      	mov	r7, r1
 800d08c:	f7fd ff35 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d090:	b9e8      	cbnz	r0, 800d0ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d092:	f9b7 5000 	ldrsh.w	r5, [r7]
 800d096:	f9b6 4000 	ldrsh.w	r4, [r6]
 800d09a:	42a5      	cmp	r5, r4
 800d09c:	db17      	blt.n	800d0ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d09e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d0a2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	db11      	blt.n	800d0ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d0aa:	88b9      	ldrh	r1, [r7, #4]
 800d0ac:	440d      	add	r5, r1
 800d0ae:	88b1      	ldrh	r1, [r6, #4]
 800d0b0:	440c      	add	r4, r1
 800d0b2:	b22d      	sxth	r5, r5
 800d0b4:	b224      	sxth	r4, r4
 800d0b6:	42a5      	cmp	r5, r4
 800d0b8:	dc09      	bgt.n	800d0ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d0ba:	88f8      	ldrh	r0, [r7, #6]
 800d0bc:	4410      	add	r0, r2
 800d0be:	88f2      	ldrh	r2, [r6, #6]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	b200      	sxth	r0, r0
 800d0c4:	b21b      	sxth	r3, r3
 800d0c6:	4298      	cmp	r0, r3
 800d0c8:	bfcc      	ite	gt
 800d0ca:	2000      	movgt	r0, #0
 800d0cc:	2001      	movle	r0, #1
 800d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	f7fd ff0f 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0dc:	b978      	cbnz	r0, 800d0fe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f7fd ff0b 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0e4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800d0e8:	b150      	cbz	r0, 800d100 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800d0ea:	8026      	strh	r6, [r4, #0]
 800d0ec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d0f0:	8063      	strh	r3, [r4, #2]
 800d0f2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800d0f6:	80a3      	strh	r3, [r4, #4]
 800d0f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d0fc:	80e3      	strh	r3, [r4, #6]
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d100:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d104:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800d108:	42b1      	cmp	r1, r6
 800d10a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d10e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800d112:	460f      	mov	r7, r1
 800d114:	88ed      	ldrh	r5, [r5, #6]
 800d116:	bfa8      	it	ge
 800d118:	4637      	movge	r7, r6
 800d11a:	4293      	cmp	r3, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	4466      	add	r6, ip
 800d120:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d124:	bfa8      	it	ge
 800d126:	4610      	movge	r0, r2
 800d128:	442a      	add	r2, r5
 800d12a:	88e5      	ldrh	r5, [r4, #6]
 800d12c:	4461      	add	r1, ip
 800d12e:	b236      	sxth	r6, r6
 800d130:	8027      	strh	r7, [r4, #0]
 800d132:	442b      	add	r3, r5
 800d134:	b209      	sxth	r1, r1
 800d136:	b212      	sxth	r2, r2
 800d138:	8060      	strh	r0, [r4, #2]
 800d13a:	b21b      	sxth	r3, r3
 800d13c:	428e      	cmp	r6, r1
 800d13e:	bfac      	ite	ge
 800d140:	ebc7 0106 	rsbge	r1, r7, r6
 800d144:	ebc7 0101 	rsblt	r1, r7, r1
 800d148:	429a      	cmp	r2, r3
 800d14a:	bfac      	ite	ge
 800d14c:	ebc0 0202 	rsbge	r2, r0, r2
 800d150:	ebc0 0203 	rsblt	r2, r0, r3
 800d154:	80a1      	strh	r1, [r4, #4]
 800d156:	80e2      	strh	r2, [r4, #6]
 800d158:	e7d1      	b.n	800d0fe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800d15c <_ZN8touchgfx11Application11getInstanceEv>:
 800d15c:	4b01      	ldr	r3, [pc, #4]	; (800d164 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	2400ae58 	.word	0x2400ae58

0800d168 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800d168:	2300      	movs	r3, #0
 800d16a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800d16e:	30a8      	adds	r0, #168	; 0xa8
 800d170:	f820 3c24 	strh.w	r3, [r0, #-36]
 800d174:	f802 3b01 	strb.w	r3, [r2], #1
 800d178:	4282      	cmp	r2, r0
 800d17a:	d1fb      	bne.n	800d174 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800d17c:	4770      	bx	lr

0800d17e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d17e:	4603      	mov	r3, r0
 800d180:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800d184:	2200      	movs	r2, #0
 800d186:	801a      	strh	r2, [r3, #0]
 800d188:	3308      	adds	r3, #8
 800d18a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800d18e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800d192:	f823 2c02 	strh.w	r2, [r3, #-2]
 800d196:	428b      	cmp	r3, r1
 800d198:	d1f5      	bne.n	800d186 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d19a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800d19e:	4770      	bx	lr

0800d1a0 <_ZN8touchgfx11ApplicationC1Ev>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	4b19      	ldr	r3, [pc, #100]	; (800d208 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800d1a4:	2500      	movs	r5, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	30a8      	adds	r0, #168	; 0xa8
 800d1aa:	f840 3ca8 	str.w	r3, [r0, #-168]
 800d1ae:	f820 5c24 	strh.w	r5, [r0, #-36]
 800d1b2:	f7ff ffe4 	bl	800d17e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d1b6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800d1ba:	f7ff ffe0 	bl	800d17e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d1be:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800d1c2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800d1c6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800d1ca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800d1ce:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800d1d2:	490e      	ldr	r1, [pc, #56]	; (800d20c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800d1d4:	480e      	ldr	r0, [pc, #56]	; (800d210 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800d1d6:	f00a fbdd 	bl	8017994 <CRC_Lock>
 800d1da:	4e0e      	ldr	r6, [pc, #56]	; (800d214 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d1de:	b158      	cbz	r0, 800d1f8 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800d1e0:	801d      	strh	r5, [r3, #0]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	4a0d      	ldr	r2, [pc, #52]	; (800d21c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	4a0d      	ldr	r2, [pc, #52]	; (800d220 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d1ec:	6033      	str	r3, [r6, #0]
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	f7ff ffba 	bl	800d168 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1fc:	2002      	movs	r0, #2
 800d1fe:	801a      	strh	r2, [r3, #0]
 800d200:	6030      	str	r0, [r6, #0]
 800d202:	f001 fa1d 	bl	800e640 <_ZN8touchgfx6Screen4drawEv>
 800d206:	e7ec      	b.n	800d1e2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800d208:	0801a33c 	.word	0x0801a33c
 800d20c:	b5e8b5cd 	.word	0xb5e8b5cd
 800d210:	f407a5c2 	.word	0xf407a5c2
 800d214:	2400ae48 	.word	0x2400ae48
 800d218:	24000050 	.word	0x24000050
 800d21c:	2400ae58 	.word	0x2400ae58
 800d220:	2400ae4c 	.word	0x2400ae4c

0800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d224:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800d228:	3b01      	subs	r3, #1
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	428b      	cmp	r3, r1
 800d22e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800d232:	b510      	push	{r4, lr}
 800d234:	d908      	bls.n	800d248 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d236:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d23a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	6062      	str	r2, [r4, #4]
 800d248:	bd10      	pop	{r4, pc}
	...

0800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	b08f      	sub	sp, #60	; 0x3c
 800d252:	4b94      	ldr	r3, [pc, #592]	; (800d4a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800d254:	4683      	mov	fp, r0
 800d256:	ac0a      	add	r4, sp, #40	; 0x28
 800d258:	e884 0006 	stmia.w	r4, {r1, r2}
 800d25c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d260:	4620      	mov	r0, r4
 800d262:	4b91      	ldr	r3, [pc, #580]	; (800d4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800d264:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d268:	f7ff febb 	bl	800cfe2 <_ZN8touchgfx4Rect10restrictToEss>
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7fd fe44 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d272:	2800      	cmp	r0, #0
 800d274:	d16a      	bne.n	800d34c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d276:	9403      	str	r4, [sp, #12]
 800d278:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800d27c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d280:	2400      	movs	r4, #0
 800d282:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	36a0      	adds	r6, #160	; 0xa0
 800d28a:	42a5      	cmp	r5, r4
 800d28c:	d00d      	beq.n	800d2aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800d28e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800d292:	9803      	ldr	r0, [sp, #12]
 800d294:	f7ff fef6 	bl	800d084 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d298:	b128      	cbz	r0, 800d2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800d29a:	1e69      	subs	r1, r5, #1
 800d29c:	9801      	ldr	r0, [sp, #4]
 800d29e:	1b09      	subs	r1, r1, r4
 800d2a0:	b289      	uxth	r1, r1
 800d2a2:	f7ff ffbf 	bl	800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	e7ef      	b.n	800d28a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800d2aa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800d2ae:	1e7b      	subs	r3, r7, #1
 800d2b0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800d2b4:	9704      	str	r7, [sp, #16]
 800d2b6:	9302      	str	r3, [sp, #8]
 800d2b8:	2400      	movs	r4, #0
 800d2ba:	4655      	mov	r5, sl
 800d2bc:	9705      	str	r7, [sp, #20]
 800d2be:	4626      	mov	r6, r4
 800d2c0:	9b05      	ldr	r3, [sp, #20]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d078      	beq.n	800d3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800d2c6:	9903      	ldr	r1, [sp, #12]
 800d2c8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d2cc:	f7ff fe67 	bl	800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d2d0:	b360      	cbz	r0, 800d32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d2d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800d2d6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800d2da:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 800d2de:	45e6      	cmp	lr, ip
 800d2e0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800d2e4:	db35      	blt.n	800d352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d2ea:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d2ee:	4472      	add	r2, lr
 800d2f0:	4463      	add	r3, ip
 800d2f2:	b212      	sxth	r2, r2
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	dc2b      	bgt.n	800d352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2fa:	fa1f f288 	uxth.w	r2, r8
 800d2fe:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d302:	45c1      	cmp	r9, r8
 800d304:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d308:	4413      	add	r3, r2
 800d30a:	fa1f fc89 	uxth.w	ip, r9
 800d30e:	b29b      	uxth	r3, r3
 800d310:	fa0f fe83 	sxth.w	lr, r3
 800d314:	db0f      	blt.n	800d336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d316:	eba3 030c 	sub.w	r3, r3, ip
 800d31a:	1ac9      	subs	r1, r1, r3
 800d31c:	b209      	sxth	r1, r1
 800d31e:	2900      	cmp	r1, #0
 800d320:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d324:	dd12      	ble.n	800d34c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d326:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800d32a:	4604      	mov	r4, r0
 800d32c:	9b05      	ldr	r3, [sp, #20]
 800d32e:	3d08      	subs	r5, #8
 800d330:	3b01      	subs	r3, #1
 800d332:	9305      	str	r3, [sp, #20]
 800d334:	e7c4      	b.n	800d2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800d336:	4461      	add	r1, ip
 800d338:	b209      	sxth	r1, r1
 800d33a:	4571      	cmp	r1, lr
 800d33c:	dc3a      	bgt.n	800d3b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d33e:	eba2 020c 	sub.w	r2, r2, ip
 800d342:	b212      	sxth	r2, r2
 800d344:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d348:	2a00      	cmp	r2, #0
 800d34a:	dcee      	bgt.n	800d32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d34c:	b00f      	add	sp, #60	; 0x3c
 800d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d352:	45c1      	cmp	r9, r8
 800d354:	db2e      	blt.n	800d3b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d356:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d35a:	4499      	add	r9, r3
 800d35c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800d360:	4498      	add	r8, r3
 800d362:	fa0f f989 	sxth.w	r9, r9
 800d366:	fa0f f888 	sxth.w	r8, r8
 800d36a:	45c1      	cmp	r9, r8
 800d36c:	dc22      	bgt.n	800d3b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d36e:	fa1f f28c 	uxth.w	r2, ip
 800d372:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800d376:	45e6      	cmp	lr, ip
 800d378:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800d37c:	4413      	add	r3, r2
 800d37e:	fa1f f88e 	uxth.w	r8, lr
 800d382:	b29b      	uxth	r3, r3
 800d384:	fa0f f983 	sxth.w	r9, r3
 800d388:	db0a      	blt.n	800d3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800d38a:	eba3 0308 	sub.w	r3, r3, r8
 800d38e:	1ac9      	subs	r1, r1, r3
 800d390:	b209      	sxth	r1, r1
 800d392:	2900      	cmp	r1, #0
 800d394:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800d398:	ddd8      	ble.n	800d34c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d39a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800d39e:	e7c4      	b.n	800d32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d3a0:	4441      	add	r1, r8
 800d3a2:	b209      	sxth	r1, r1
 800d3a4:	4549      	cmp	r1, r9
 800d3a6:	dc05      	bgt.n	800d3b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d3a8:	eba2 0208 	sub.w	r2, r2, r8
 800d3ac:	b212      	sxth	r2, r2
 800d3ae:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d3b2:	e7c9      	b.n	800d348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	e7b9      	b.n	800d32c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d3b8:	2c00      	cmp	r4, #0
 800d3ba:	f47f af7d 	bne.w	800d2b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	f000 81e1 	beq.w	800d786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d3c4:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800d3c8:	4655      	mov	r5, sl
 800d3ca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800d3ce:	b2b9      	uxth	r1, r7
 800d3d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800d3d4:	b2b3      	uxth	r3, r6
 800d3d6:	9105      	str	r1, [sp, #20]
 800d3d8:	9805      	ldr	r0, [sp, #20]
 800d3da:	441a      	add	r2, r3
 800d3dc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d3e0:	b292      	uxth	r2, r2
 800d3e2:	4401      	add	r1, r0
 800d3e4:	fa0f f882 	sxth.w	r8, r2
 800d3e8:	b289      	uxth	r1, r1
 800d3ea:	9106      	str	r1, [sp, #24]
 800d3ec:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 800d3f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d058      	beq.n	800d4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800d3fa:	9903      	ldr	r1, [sp, #12]
 800d3fc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800d400:	f7ff fdcd 	bl	800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d404:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d408:	b1d8      	cbz	r0, 800d442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d40a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800d40e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800d412:	4576      	cmp	r6, lr
 800d414:	dc26      	bgt.n	800d464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d416:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800d41a:	44f4      	add	ip, lr
 800d41c:	fa0f fc8c 	sxth.w	ip, ip
 800d420:	45e0      	cmp	r8, ip
 800d422:	db1f      	blt.n	800d464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800d424:	428f      	cmp	r7, r1
 800d426:	fa1f fc81 	uxth.w	ip, r1
 800d42a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800d42e:	dc0f      	bgt.n	800d450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800d430:	9806      	ldr	r0, [sp, #24]
 800d432:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800d436:	eba0 0c0c 	sub.w	ip, r0, ip
 800d43a:	eba1 010c 	sub.w	r1, r1, ip
 800d43e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800d442:	4620      	mov	r0, r4
 800d444:	9904      	ldr	r1, [sp, #16]
 800d446:	3d08      	subs	r5, #8
 800d448:	4604      	mov	r4, r0
 800d44a:	3901      	subs	r1, #1
 800d44c:	9104      	str	r1, [sp, #16]
 800d44e:	e7cf      	b.n	800d3f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800d450:	4461      	add	r1, ip
 800d452:	b209      	sxth	r1, r1
 800d454:	4549      	cmp	r1, r9
 800d456:	dcf5      	bgt.n	800d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d458:	9905      	ldr	r1, [sp, #20]
 800d45a:	eba1 0c0c 	sub.w	ip, r1, ip
 800d45e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800d462:	e7ee      	b.n	800d442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d464:	428f      	cmp	r7, r1
 800d466:	dced      	bgt.n	800d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d468:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800d46c:	4461      	add	r1, ip
 800d46e:	b209      	sxth	r1, r1
 800d470:	4589      	cmp	r9, r1
 800d472:	dbe7      	blt.n	800d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d474:	4576      	cmp	r6, lr
 800d476:	fa1f fc8e 	uxth.w	ip, lr
 800d47a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800d47e:	dc08      	bgt.n	800d492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800d480:	eba2 0c0c 	sub.w	ip, r2, ip
 800d484:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800d488:	eba1 010c 	sub.w	r1, r1, ip
 800d48c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800d490:	e7d7      	b.n	800d442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d492:	4461      	add	r1, ip
 800d494:	b209      	sxth	r1, r1
 800d496:	4588      	cmp	r8, r1
 800d498:	dbd4      	blt.n	800d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800d49a:	eba3 0c0c 	sub.w	ip, r3, ip
 800d49e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800d4a2:	e7ce      	b.n	800d442 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800d4a4:	2400ae02 	.word	0x2400ae02
 800d4a8:	2400ae00 	.word	0x2400ae00
 800d4ac:	2c00      	cmp	r4, #0
 800d4ae:	f000 816a 	beq.w	800d786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d4b2:	9b02      	ldr	r3, [sp, #8]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f000 8166 	beq.w	800d786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800d4ba:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800d4be:	9803      	ldr	r0, [sp, #12]
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	f7ff fddf 	bl	800d084 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d4c6:	b120      	cbz	r0, 800d4d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800d4c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d4cc:	9801      	ldr	r0, [sp, #4]
 800d4ce:	f7ff fea9 	bl	800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d4d2:	9903      	ldr	r1, [sp, #12]
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f7ff fd62 	bl	800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f000 809b 	beq.w	800d616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d4e0:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 800d4e4:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 800d4e8:	b281      	uxth	r1, r0
 800d4ea:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 800d4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f0:	eb01 0c03 	add.w	ip, r1, r3
 800d4f4:	b2ab      	uxth	r3, r5
 800d4f6:	4285      	cmp	r5, r0
 800d4f8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800d4fc:	fa1f f98c 	uxth.w	r9, ip
 800d500:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800d504:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 800d508:	eb03 040c 	add.w	r4, r3, ip
 800d50c:	b2a4      	uxth	r4, r4
 800d50e:	9405      	str	r4, [sp, #20]
 800d510:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800d514:	9404      	str	r4, [sp, #16]
 800d516:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 800d51a:	f340 809a 	ble.w	800d652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 800d51e:	1a5b      	subs	r3, r3, r1
 800d520:	4596      	cmp	lr, r2
 800d522:	fa0f f589 	sxth.w	r5, r9
 800d526:	b29b      	uxth	r3, r3
 800d528:	b21e      	sxth	r6, r3
 800d52a:	dd2e      	ble.n	800d58a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 800d52c:	9f02      	ldr	r7, [sp, #8]
 800d52e:	fa1f fe8e 	uxth.w	lr, lr
 800d532:	b292      	uxth	r2, r2
 800d534:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800d538:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d53c:	9f04      	ldr	r7, [sp, #16]
 800d53e:	ebae 0102 	sub.w	r1, lr, r2
 800d542:	4486      	add	lr, r0
 800d544:	1b7f      	subs	r7, r7, r5
 800d546:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 800d54a:	b289      	uxth	r1, r1
 800d54c:	442a      	add	r2, r5
 800d54e:	fa0f fe8e 	sxth.w	lr, lr
 800d552:	b20c      	sxth	r4, r1
 800d554:	b212      	sxth	r2, r2
 800d556:	4367      	muls	r7, r4
 800d558:	ebae 0202 	sub.w	r2, lr, r2
 800d55c:	4372      	muls	r2, r6
 800d55e:	4297      	cmp	r7, r2
 800d560:	db09      	blt.n	800d576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 800d562:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 800d566:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800d56a:	449c      	add	ip, r3
 800d56c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800d570:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d574:	e680      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d576:	4401      	add	r1, r0
 800d578:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800d57c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 800d580:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d584:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d588:	e676      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d58a:	9f04      	ldr	r7, [sp, #16]
 800d58c:	42bd      	cmp	r5, r7
 800d58e:	da27      	bge.n	800d5e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800d590:	9902      	ldr	r1, [sp, #8]
 800d592:	1b7f      	subs	r7, r7, r5
 800d594:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800d598:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800d59c:	eb04 010e 	add.w	r1, r4, lr
 800d5a0:	fa1f f881 	uxth.w	r8, r1
 800d5a4:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 800d5a8:	4411      	add	r1, r2
 800d5aa:	fa0f f988 	sxth.w	r9, r8
 800d5ae:	eba2 020e 	sub.w	r2, r2, lr
 800d5b2:	eba1 0108 	sub.w	r1, r1, r8
 800d5b6:	4372      	muls	r2, r6
 800d5b8:	b289      	uxth	r1, r1
 800d5ba:	fa0f f881 	sxth.w	r8, r1
 800d5be:	fb08 f707 	mul.w	r7, r8, r7
 800d5c2:	42ba      	cmp	r2, r7
 800d5c4:	dc06      	bgt.n	800d5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d5c6:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 800d5ca:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 800d5ce:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 800d5d2:	e7ca      	b.n	800d56a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d5d4:	4421      	add	r1, r4
 800d5d6:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 800d5da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d5de:	e64b      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5e0:	9d05      	ldr	r5, [sp, #20]
 800d5e2:	2c06      	cmp	r4, #6
 800d5e4:	eba9 0505 	sub.w	r5, r9, r5
 800d5e8:	b2ad      	uxth	r5, r5
 800d5ea:	fa0f fe85 	sxth.w	lr, r5
 800d5ee:	d818      	bhi.n	800d622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800d5f0:	9b04      	ldr	r3, [sp, #16]
 800d5f2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 800d5f6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800d5fa:	1c63      	adds	r3, r4, #1
 800d5fc:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 800d600:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d604:	9b01      	ldr	r3, [sp, #4]
 800d606:	9d01      	ldr	r5, [sp, #4]
 800d608:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d60c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 800d610:	805a      	strh	r2, [r3, #2]
 800d612:	809e      	strh	r6, [r3, #4]
 800d614:	80d9      	strh	r1, [r3, #6]
 800d616:	9b02      	ldr	r3, [sp, #8]
 800d618:	f1aa 0a08 	sub.w	sl, sl, #8
 800d61c:	3b01      	subs	r3, #1
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	e747      	b.n	800d4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800d622:	9a02      	ldr	r2, [sp, #8]
 800d624:	45b6      	cmp	lr, r6
 800d626:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d62a:	db0d      	blt.n	800d648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 800d62c:	449c      	add	ip, r3
 800d62e:	445a      	add	r2, fp
 800d630:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800d634:	fa1f fc8c 	uxth.w	ip, ip
 800d638:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 800d63c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800d640:	448c      	add	ip, r1
 800d642:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 800d646:	e617      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d648:	445a      	add	r2, fp
 800d64a:	44ac      	add	ip, r5
 800d64c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 800d650:	e78e      	b.n	800d570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d652:	fa1f f18e 	uxth.w	r1, lr
 800d656:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800d65a:	b293      	uxth	r3, r2
 800d65c:	4596      	cmp	lr, r2
 800d65e:	eb01 0806 	add.w	r8, r1, r6
 800d662:	9306      	str	r3, [sp, #24]
 800d664:	fa1f f888 	uxth.w	r8, r8
 800d668:	9f06      	ldr	r7, [sp, #24]
 800d66a:	fa0f f388 	sxth.w	r3, r8
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 800d674:	443b      	add	r3, r7
 800d676:	b29b      	uxth	r3, r3
 800d678:	9308      	str	r3, [sp, #32]
 800d67a:	da25      	bge.n	800d6c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800d67c:	9905      	ldr	r1, [sp, #20]
 800d67e:	eba3 0308 	sub.w	r3, r3, r8
 800d682:	eba2 020e 	sub.w	r2, r2, lr
 800d686:	1b40      	subs	r0, r0, r5
 800d688:	eba9 0401 	sub.w	r4, r9, r1
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	b2a4      	uxth	r4, r4
 800d690:	b219      	sxth	r1, r3
 800d692:	fa0f f984 	sxth.w	r9, r4
 800d696:	4348      	muls	r0, r1
 800d698:	fb09 f202 	mul.w	r2, r9, r2
 800d69c:	4282      	cmp	r2, r0
 800d69e:	9a02      	ldr	r2, [sp, #8]
 800d6a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d6a4:	445a      	add	r2, fp
 800d6a6:	dc06      	bgt.n	800d6b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800d6a8:	9b07      	ldr	r3, [sp, #28]
 800d6aa:	44a4      	add	ip, r4
 800d6ac:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 800d6b0:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 800d6b4:	e75c      	b.n	800d570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d6b6:	9904      	ldr	r1, [sp, #16]
 800d6b8:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 800d6bc:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 800d6c0:	4433      	add	r3, r6
 800d6c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800d6c6:	e5d7      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d6c8:	9f06      	ldr	r7, [sp, #24]
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	1bc9      	subs	r1, r1, r7
 800d6ce:	fa0f f789 	sxth.w	r7, r9
 800d6d2:	b289      	uxth	r1, r1
 800d6d4:	429f      	cmp	r7, r3
 800d6d6:	fa0f fe81 	sxth.w	lr, r1
 800d6da:	dd22      	ble.n	800d722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 800d6dc:	9a05      	ldr	r2, [sp, #20]
 800d6de:	1b40      	subs	r0, r0, r5
 800d6e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d6e4:	eba9 0202 	sub.w	r2, r9, r2
 800d6e8:	9d07      	ldr	r5, [sp, #28]
 800d6ea:	fb0e f000 	mul.w	r0, lr, r0
 800d6ee:	b292      	uxth	r2, r2
 800d6f0:	eba5 0a03 	sub.w	sl, r5, r3
 800d6f4:	9b02      	ldr	r3, [sp, #8]
 800d6f6:	b214      	sxth	r4, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	fb04 fa0a 	mul.w	sl, r4, sl
 800d6fe:	445b      	add	r3, fp
 800d700:	4550      	cmp	r0, sl
 800d702:	db03      	blt.n	800d70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800d704:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 800d708:	4494      	add	ip, r2
 800d70a:	e731      	b.n	800d570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800d70c:	9a04      	ldr	r2, [sp, #16]
 800d70e:	4431      	add	r1, r6
 800d710:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 800d714:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800d718:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800d71c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800d720:	e75b      	b.n	800d5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 800d722:	9b08      	ldr	r3, [sp, #32]
 800d724:	2c06      	cmp	r4, #6
 800d726:	eba3 0308 	sub.w	r3, r3, r8
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	b21d      	sxth	r5, r3
 800d72e:	d813      	bhi.n	800d758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 800d730:	9b07      	ldr	r3, [sp, #28]
 800d732:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 800d736:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800d73a:	1c63      	adds	r3, r4, #1
 800d73c:	9901      	ldr	r1, [sp, #4]
 800d73e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 800d748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d74c:	805a      	strh	r2, [r3, #2]
 800d74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d750:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d754:	809a      	strh	r2, [r3, #4]
 800d756:	e75e      	b.n	800d616 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800d758:	9802      	ldr	r0, [sp, #8]
 800d75a:	4575      	cmp	r5, lr
 800d75c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800d760:	db0d      	blt.n	800d77e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 800d762:	4431      	add	r1, r6
 800d764:	9b06      	ldr	r3, [sp, #24]
 800d766:	4458      	add	r0, fp
 800d768:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800d76c:	b289      	uxth	r1, r1
 800d76e:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 800d772:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800d776:	4419      	add	r1, r3
 800d778:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800d77c:	e57c      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d77e:	4458      	add	r0, fp
 800d780:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 800d784:	e79c      	b.n	800d6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800d786:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 800d78a:	2e07      	cmp	r6, #7
 800d78c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d790:	d812      	bhi.n	800d7b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 800d792:	1c75      	adds	r5, r6, #1
 800d794:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800d798:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800d79c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 800d7a0:	9d01      	ldr	r5, [sp, #4]
 800d7a2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800d7a6:	442c      	add	r4, r5
 800d7a8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800d7ac:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d7b0:	8061      	strh	r1, [r4, #2]
 800d7b2:	80a2      	strh	r2, [r4, #4]
 800d7b4:	80e3      	strh	r3, [r4, #6]
 800d7b6:	e5c9      	b.n	800d34c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d7b8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	445c      	add	r4, fp
 800d7c0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800d7c4:	f04f 37ff 	mov.w	r7, #4294967295
 800d7c8:	2500      	movs	r5, #0
 800d7ca:	9305      	str	r3, [sp, #20]
 800d7cc:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800d7d0:	1e72      	subs	r2, r6, #1
 800d7d2:	9302      	str	r3, [sp, #8]
 800d7d4:	4691      	mov	r9, r2
 800d7d6:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800d7e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d7ea:	9207      	str	r2, [sp, #28]
 800d7ec:	bf16      	itet	ne
 800d7ee:	9905      	ldrne	r1, [sp, #20]
 800d7f0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d7f4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d7f8:	9306      	str	r3, [sp, #24]
 800d7fa:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d7fe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d802:	fb18 f801 	smulbb	r8, r8, r1
 800d806:	6859      	ldr	r1, [r3, #4]
 800d808:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d80c:	4671      	mov	r1, lr
 800d80e:	a80c      	add	r0, sp, #48	; 0x30
 800d810:	f7ff fc5e 	bl	800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d814:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800d818:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d81c:	f04f 0c08 	mov.w	ip, #8
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	9a02      	ldr	r2, [sp, #8]
 800d824:	fb10 f001 	smulbb	r0, r0, r1
 800d828:	fb02 8803 	mla	r8, r2, r3, r8
 800d82c:	eba0 0108 	sub.w	r1, r0, r8
 800d830:	fb90 f0fc 	sdiv	r0, r0, ip
 800d834:	4288      	cmp	r0, r1
 800d836:	dc20      	bgt.n	800d87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d838:	4551      	cmp	r1, sl
 800d83a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d83e:	da03      	bge.n	800d848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d840:	b1d9      	cbz	r1, 800d87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800d842:	468a      	mov	sl, r1
 800d844:	464f      	mov	r7, r9
 800d846:	4635      	mov	r5, r6
 800d848:	f109 39ff 	add.w	r9, r9, #4294967295
 800d84c:	f119 0f02 	cmn.w	r9, #2
 800d850:	d1c6      	bne.n	800d7e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d852:	4616      	mov	r6, r2
 800d854:	3201      	adds	r2, #1
 800d856:	f1a4 0408 	sub.w	r4, r4, #8
 800d85a:	d1b7      	bne.n	800d7cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	b2ac      	uxth	r4, r5
 800d860:	00ed      	lsls	r5, r5, #3
 800d862:	1958      	adds	r0, r3, r5
 800d864:	1c7b      	adds	r3, r7, #1
 800d866:	d10b      	bne.n	800d880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800d868:	4601      	mov	r1, r0
 800d86a:	9803      	ldr	r0, [sp, #12]
 800d86c:	f7ff fc30 	bl	800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d870:	4621      	mov	r1, r4
 800d872:	9801      	ldr	r0, [sp, #4]
 800d874:	f7ff fcd6 	bl	800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d878:	e4fe      	b.n	800d278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d87a:	464f      	mov	r7, r9
 800d87c:	4635      	mov	r5, r6
 800d87e:	e7ed      	b.n	800d85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d880:	9b01      	ldr	r3, [sp, #4]
 800d882:	00ff      	lsls	r7, r7, #3
 800d884:	445d      	add	r5, fp
 800d886:	19d9      	adds	r1, r3, r7
 800d888:	445f      	add	r7, fp
 800d88a:	f7ff fc21 	bl	800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	cb03      	ldmia	r3!, {r0, r1}
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800d898:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800d89c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 800d8a0:	6869      	ldr	r1, [r5, #4]
 800d8a2:	c303      	stmia	r3!, {r0, r1}
 800d8a4:	e7e4      	b.n	800d870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d8a6:	bf00      	nop

0800d8a8 <_ZN8touchgfx11Application10invalidateEv>:
 800d8a8:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800d8b4:	9100      	str	r1, [sp, #0]
 800d8b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d8be:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d8c2:	ab02      	add	r3, sp, #8
 800d8c4:	e913 0006 	ldmdb	r3, {r1, r2}
 800d8c8:	b002      	add	sp, #8
 800d8ca:	f7ff bcbf 	b.w	800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8ce:	bf00      	nop
 800d8d0:	2400ae00 	.word	0x2400ae00
 800d8d4:	2400ae02 	.word	0x2400ae02

0800d8d8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800d8e0:	b09b      	sub	sp, #108	; 0x6c
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7fd fb08 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	b940      	cbnz	r0, 800d900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d8f4:	f7ff fcaa 	bl	800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d8f8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800d8fc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800d900:	4bc8      	ldr	r3, [pc, #800]	; (800dc24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d03e      	beq.n	800d986 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d908:	4dc7      	ldr	r5, [pc, #796]	; (800dc28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d90a:	4628      	mov	r0, r5
 800d90c:	f7fd faf5 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d910:	4606      	mov	r6, r0
 800d912:	2800      	cmp	r0, #0
 800d914:	d137      	bne.n	800d986 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800d916:	4628      	mov	r0, r5
 800d918:	f7ff fa02 	bl	800cd20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d91c:	6829      	ldr	r1, [r5, #0]
 800d91e:	686a      	ldr	r2, [r5, #4]
 800d920:	4620      	mov	r0, r4
 800d922:	f7ff fc93 	bl	800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d926:	802e      	strh	r6, [r5, #0]
 800d928:	806e      	strh	r6, [r5, #2]
 800d92a:	80ae      	strh	r6, [r5, #4]
 800d92c:	80ee      	strh	r6, [r5, #6]
 800d92e:	ae09      	add	r6, sp, #36	; 0x24
 800d930:	4630      	mov	r0, r6
 800d932:	f7ff fc24 	bl	800d17e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d936:	4abd      	ldr	r2, [pc, #756]	; (800dc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d938:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d93c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800d940:	8815      	ldrh	r5, [r2, #0]
 800d942:	9202      	str	r2, [sp, #8]
 800d944:	462b      	mov	r3, r5
 800d946:	429f      	cmp	r7, r3
 800d948:	d924      	bls.n	800d994 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800d94a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800d94e:	2907      	cmp	r1, #7
 800d950:	d816      	bhi.n	800d980 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800d952:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d956:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800d95a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800d95e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d962:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d966:	1c4a      	adds	r2, r1, #1
 800d968:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800d96c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800d970:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800d974:	f8a2 9002 	strh.w	r9, [r2, #2]
 800d978:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d97c:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d980:	3301      	adds	r3, #1
 800d982:	b29b      	uxth	r3, r3
 800d984:	e7df      	b.n	800d946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800d986:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1cf      	bne.n	800d92e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800d98e:	b01b      	add	sp, #108	; 0x6c
 800d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d994:	462f      	mov	r7, r5
 800d996:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800d99a:	42bb      	cmp	r3, r7
 800d99c:	d90b      	bls.n	800d9b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800d99e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800d9a2:	3701      	adds	r7, #1
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800d9aa:	b2bf      	uxth	r7, r7
 800d9ac:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800d9b0:	f7ff fc4c 	bl	800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800d9b4:	e7ef      	b.n	800d996 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800d9b6:	4a9e      	ldr	r2, [pc, #632]	; (800dc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d9b8:	6813      	ldr	r3, [r2, #0]
 800d9ba:	4690      	mov	r8, r2
 800d9bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	f040 80e4 	bne.w	800db8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d9c6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800d9d0:	2500      	movs	r5, #0
 800d9d2:	33aa      	adds	r3, #170	; 0xaa
 800d9d4:	428f      	cmp	r7, r1
 800d9d6:	f103 0308 	add.w	r3, r3, #8
 800d9da:	dd0a      	ble.n	800d9f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800d9dc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800d9e0:	3101      	adds	r1, #1
 800d9e2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800d9e6:	4402      	add	r2, r0
 800d9e8:	b212      	sxth	r2, r2
 800d9ea:	4295      	cmp	r5, r2
 800d9ec:	bfb8      	it	lt
 800d9ee:	4615      	movlt	r5, r2
 800d9f0:	e7f0      	b.n	800d9d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800d9f2:	4b90      	ldr	r3, [pc, #576]	; (800dc34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d9f4:	f8df b238 	ldr.w	fp, [pc, #568]	; 800dc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800d9f8:	881b      	ldrh	r3, [r3, #0]
 800d9fa:	46d8      	mov	r8, fp
 800d9fc:	2b0f      	cmp	r3, #15
 800d9fe:	bf8c      	ite	hi
 800da00:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800da04:	f04f 0a01 	movls.w	sl, #1
 800da08:	2300      	movs	r3, #0
 800da0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800da0e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800da12:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800da16:	4438      	add	r0, r7
 800da18:	b207      	sxth	r7, r0
 800da1a:	f8db 0000 	ldr.w	r0, [fp]
 800da1e:	42bd      	cmp	r5, r7
 800da20:	6803      	ldr	r3, [r0, #0]
 800da22:	f340 8084 	ble.w	800db2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800da26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da2a:	4798      	blx	r3
 800da2c:	eb07 030a 	add.w	r3, r7, sl
 800da30:	4298      	cmp	r0, r3
 800da32:	da07      	bge.n	800da44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da34:	4285      	cmp	r5, r0
 800da36:	dd05      	ble.n	800da44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800da38:	4287      	cmp	r7, r0
 800da3a:	dd6d      	ble.n	800db18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da3c:	2f00      	cmp	r7, #0
 800da3e:	dd6b      	ble.n	800db18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800da40:	4628      	mov	r0, r5
 800da42:	e004      	b.n	800da4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800da44:	4287      	cmp	r7, r0
 800da46:	dcfb      	bgt.n	800da40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800da48:	42a8      	cmp	r0, r5
 800da4a:	bfa8      	it	ge
 800da4c:	4628      	movge	r0, r5
 800da4e:	4b7a      	ldr	r3, [pc, #488]	; (800dc38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800da50:	1bc0      	subs	r0, r0, r7
 800da52:	2200      	movs	r2, #0
 800da54:	f8ad 7016 	strh.w	r7, [sp, #22]
 800da58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800da60:	f8ad 3018 	strh.w	r3, [sp, #24]
 800da64:	9b02      	ldr	r3, [sp, #8]
 800da66:	f8ad 001a 	strh.w	r0, [sp, #26]
 800da6a:	881f      	ldrh	r7, [r3, #0]
 800da6c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800da70:	42bb      	cmp	r3, r7
 800da72:	d9cc      	bls.n	800da0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800da74:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800da78:	ab07      	add	r3, sp, #28
 800da7a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800da7e:	6851      	ldr	r1, [r2, #4]
 800da80:	c303      	stmia	r3!, {r0, r1}
 800da82:	a905      	add	r1, sp, #20
 800da84:	a807      	add	r0, sp, #28
 800da86:	f7ff fa8a 	bl	800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d04c      	beq.n	800db28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800da8e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800da92:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800da96:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800da9a:	4686      	mov	lr, r0
 800da9c:	4290      	cmp	r0, r2
 800da9e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800daa2:	4448      	add	r0, r9
 800daa4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800daa8:	bfb8      	it	lt
 800daaa:	4696      	movlt	lr, r2
 800daac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800dab0:	444a      	add	r2, r9
 800dab2:	b280      	uxth	r0, r0
 800dab4:	4299      	cmp	r1, r3
 800dab6:	468c      	mov	ip, r1
 800dab8:	b292      	uxth	r2, r2
 800daba:	9303      	str	r3, [sp, #12]
 800dabc:	bfb8      	it	lt
 800dabe:	469c      	movlt	ip, r3
 800dac0:	b203      	sxth	r3, r0
 800dac2:	fa0f f982 	sxth.w	r9, r2
 800dac6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800daca:	f8ad c01e 	strh.w	ip, [sp, #30]
 800dace:	454b      	cmp	r3, r9
 800dad0:	bfb8      	it	lt
 800dad2:	4602      	movlt	r2, r0
 800dad4:	9b03      	ldr	r3, [sp, #12]
 800dad6:	eba2 020e 	sub.w	r2, r2, lr
 800dada:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dade:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800dae2:	4411      	add	r1, r2
 800dae4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dae8:	4413      	add	r3, r2
 800daea:	b289      	uxth	r1, r1
 800daec:	b29b      	uxth	r3, r3
 800daee:	b208      	sxth	r0, r1
 800daf0:	b21a      	sxth	r2, r3
 800daf2:	4290      	cmp	r0, r2
 800daf4:	bfb8      	it	lt
 800daf6:	460b      	movlt	r3, r1
 800daf8:	eba3 030c 	sub.w	r3, r3, ip
 800dafc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800db00:	a807      	add	r0, sp, #28
 800db02:	f7fd f9fa 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800db06:	b920      	cbnz	r0, 800db12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	a907      	add	r1, sp, #28
 800db0c:	4620      	mov	r0, r4
 800db0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db10:	4798      	blx	r3
 800db12:	3701      	adds	r7, #1
 800db14:	b2bf      	uxth	r7, r7
 800db16:	e7a9      	b.n	800da6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800db18:	f8d8 0000 	ldr.w	r0, [r8]
 800db1c:	2101      	movs	r1, #1
 800db1e:	6803      	ldr	r3, [r0, #0]
 800db20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800db24:	4798      	blx	r3
 800db26:	e772      	b.n	800da0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800db28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800db2c:	e7e8      	b.n	800db00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800db2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db30:	4798      	blx	r3
 800db32:	4b42      	ldr	r3, [pc, #264]	; (800dc3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f43f af29 	beq.w	800d98e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800db42:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800db46:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 800db4a:	9b02      	ldr	r3, [sp, #8]
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	429d      	cmp	r5, r3
 800db50:	f67f af1d 	bls.w	800d98e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800db54:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 800db58:	2907      	cmp	r1, #7
 800db5a:	d815      	bhi.n	800db88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800db5c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800db60:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800db64:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800db68:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800db6c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800db70:	1c4a      	adds	r2, r1, #1
 800db72:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 800db76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800db7a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800db7e:	f8a2 e002 	strh.w	lr, [r2, #2]
 800db82:	f8a2 c004 	strh.w	ip, [r2, #4]
 800db86:	80d7      	strh	r7, [r2, #6]
 800db88:	3301      	adds	r3, #1
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	e7df      	b.n	800db4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800db8e:	2b02      	cmp	r3, #2
 800db90:	f040 8135 	bne.w	800ddfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800db94:	4b2a      	ldr	r3, [pc, #168]	; (800dc40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800db96:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	f000 809c 	beq.w	800dcda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dba2:	9b02      	ldr	r3, [sp, #8]
 800dba4:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 800dba8:	f8b3 b000 	ldrh.w	fp, [r3]
 800dbac:	f10b 0b01 	add.w	fp, fp, #1
 800dbb0:	fa1f fb8b 	uxth.w	fp, fp
 800dbb4:	2a00      	cmp	r2, #0
 800dbb6:	d0bc      	beq.n	800db32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800dbb8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800dbbc:	4659      	mov	r1, fp
 800dbbe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800dbc2:	f04f 0800 	mov.w	r8, #0
 800dbc6:	441d      	add	r5, r3
 800dbc8:	b22d      	sxth	r5, r5
 800dbca:	b28b      	uxth	r3, r1
 800dbcc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	f240 80c0 	bls.w	800dd56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800dbd6:	4427      	add	r7, r4
 800dbd8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800dbdc:	4608      	mov	r0, r1
 800dbde:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800dbe2:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 800dbe6:	4563      	cmp	r3, ip
 800dbe8:	f340 80a2 	ble.w	800dd30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800dbec:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 800dbf0:	4465      	add	r5, ip
 800dbf2:	b22d      	sxth	r5, r5
 800dbf4:	429d      	cmp	r5, r3
 800dbf6:	bfa8      	it	ge
 800dbf8:	461d      	movge	r5, r3
 800dbfa:	3101      	adds	r1, #1
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	e7e4      	b.n	800dbca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800dc00:	d10b      	bne.n	800dc1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800dc02:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800dc06:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800dc0a:	458c      	cmp	ip, r1
 800dc0c:	bfb4      	ite	lt
 800dc0e:	469c      	movlt	ip, r3
 800dc10:	46bc      	movge	ip, r7
 800dc12:	4572      	cmp	r2, lr
 800dc14:	bfb8      	it	lt
 800dc16:	4672      	movlt	r2, lr
 800dc18:	e087      	b.n	800dd2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dc1a:	428a      	cmp	r2, r1
 800dc1c:	46bc      	mov	ip, r7
 800dc1e:	bfb8      	it	lt
 800dc20:	460a      	movlt	r2, r1
 800dc22:	e082      	b.n	800dd2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800dc24:	2400ae44 	.word	0x2400ae44
 800dc28:	2400ae50 	.word	0x2400ae50
 800dc2c:	24000050 	.word	0x24000050
 800dc30:	2400ae0c 	.word	0x2400ae0c
 800dc34:	2400ae02 	.word	0x2400ae02
 800dc38:	2400ae00 	.word	0x2400ae00
 800dc3c:	2400ae0a 	.word	0x2400ae0a
 800dc40:	2400ae04 	.word	0x2400ae04
 800dc44:	1961      	adds	r1, r4, r5
 800dc46:	ab07      	add	r3, sp, #28
 800dc48:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800dc4c:	6849      	ldr	r1, [r1, #4]
 800dc4e:	c303      	stmia	r3!, {r0, r1}
 800dc50:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800dc54:	a807      	add	r0, sp, #28
 800dc56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc5a:	2b13      	cmp	r3, #19
 800dc5c:	440b      	add	r3, r1
 800dc5e:	bfd8      	it	le
 800dc60:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800dc64:	1a9b      	subs	r3, r3, r2
 800dc66:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dc6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dc6e:	f7ff f871 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc72:	a807      	add	r0, sp, #28
 800dc74:	f7fd f941 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc78:	bb78      	cbnz	r0, 800dcda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dc7a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800dc7e:	4425      	add	r5, r4
 800dc80:	f8d8 0000 	ldr.w	r0, [r8]
 800dc84:	f1bc 0f14 	cmp.w	ip, #20
 800dc88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dc8c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc90:	bfa8      	it	ge
 800dc92:	f04f 0c14 	movge.w	ip, #20
 800dc96:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dc9a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc9e:	fa1f fc8c 	uxth.w	ip, ip
 800dca2:	f8cd c000 	str.w	ip, [sp]
 800dca6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800dcaa:	47d0      	blx	sl
 800dcac:	4682      	mov	sl, r0
 800dcae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dcb2:	a807      	add	r0, sp, #28
 800dcb4:	f7ff f834 	bl	800cd20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	4620      	mov	r0, r4
 800dcbc:	a907      	add	r1, sp, #28
 800dcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc0:	4798      	blx	r3
 800dcc2:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800dcc6:	eba0 000a 	sub.w	r0, r0, sl
 800dcca:	b200      	sxth	r0, r0
 800dccc:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800dcd0:	b918      	cbnz	r0, 800dcda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800dcd2:	b2b9      	uxth	r1, r7
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	f7ff faa5 	bl	800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dcda:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800dcde:	f1bb 0f00 	cmp.w	fp, #0
 800dce2:	f43f af26 	beq.w	800db32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800dce6:	9b02      	ldr	r3, [sp, #8]
 800dce8:	2700      	movs	r7, #0
 800dcea:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800dcee:	881b      	ldrh	r3, [r3, #0]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	b299      	uxth	r1, r3
 800dcf6:	00fd      	lsls	r5, r7, #3
 800dcf8:	458b      	cmp	fp, r1
 800dcfa:	d9a3      	bls.n	800dc44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800dcfc:	4425      	add	r5, r4
 800dcfe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800dd02:	469c      	mov	ip, r3
 800dd04:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800dd08:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800dd0c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800dd10:	4408      	add	r0, r1
 800dd12:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800dd16:	4471      	add	r1, lr
 800dd18:	b200      	sxth	r0, r0
 800dd1a:	b209      	sxth	r1, r1
 800dd1c:	4288      	cmp	r0, r1
 800dd1e:	f6bf af6f 	bge.w	800dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800dd22:	4586      	cmp	lr, r0
 800dd24:	4672      	mov	r2, lr
 800dd26:	bfb8      	it	lt
 800dd28:	4602      	movlt	r2, r0
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	4667      	mov	r7, ip
 800dd2e:	e7e1      	b.n	800dcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800dd30:	d10c      	bne.n	800dd4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800dd32:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 800dd36:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 800dd3a:	4287      	cmp	r7, r0
 800dd3c:	bfb4      	ite	lt
 800dd3e:	4608      	movlt	r0, r1
 800dd40:	4640      	movge	r0, r8
 800dd42:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 800dd46:	443b      	add	r3, r7
 800dd48:	b21b      	sxth	r3, r3
 800dd4a:	e753      	b.n	800dbf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd4c:	4565      	cmp	r5, ip
 800dd4e:	4640      	mov	r0, r8
 800dd50:	bfa8      	it	ge
 800dd52:	4665      	movge	r5, ip
 800dd54:	e751      	b.n	800dbfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800dd56:	eb09 0007 	add.w	r0, r9, r7
 800dd5a:	4427      	add	r7, r4
 800dd5c:	9203      	str	r2, [sp, #12]
 800dd5e:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 800dd62:	f1ba 0f13 	cmp.w	sl, #19
 800dd66:	bfde      	ittt	le
 800dd68:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 800dd6c:	4455      	addle	r5, sl
 800dd6e:	b22d      	sxthle	r5, r5
 800dd70:	f7fd f8c3 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd74:	9a03      	ldr	r2, [sp, #12]
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f47f af1c 	bne.w	800dbb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800dd7c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 800dd80:	fa1f fa8a 	uxth.w	sl, sl
 800dd84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800dd88:	1aad      	subs	r5, r5, r2
 800dd8a:	4829      	ldr	r0, [pc, #164]	; (800de30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800dd8c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 800dd90:	2d14      	cmp	r5, #20
 800dd92:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800dd96:	6800      	ldr	r0, [r0, #0]
 800dd98:	bfa8      	it	ge
 800dd9a:	2514      	movge	r5, #20
 800dd9c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dda0:	f8ad 201e 	strh.w	r2, [sp, #30]
 800dda4:	b289      	uxth	r1, r1
 800dda6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ddaa:	b2ad      	uxth	r5, r5
 800ddac:	f8d0 c000 	ldr.w	ip, [r0]
 800ddb0:	b292      	uxth	r2, r2
 800ddb2:	4555      	cmp	r5, sl
 800ddb4:	bf94      	ite	ls
 800ddb6:	9500      	strls	r5, [sp, #0]
 800ddb8:	f8cd a000 	strhi.w	sl, [sp]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800ddc2:	47a8      	blx	r5
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ddca:	a907      	add	r1, sp, #28
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4798      	blx	r3
 800ddd2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ddd6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800ddda:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 800ddde:	1a5b      	subs	r3, r3, r1
 800dde0:	440a      	add	r2, r1
 800dde2:	b21b      	sxth	r3, r3
 800dde4:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 800dde8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f47f aed8 	bne.w	800dba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddf2:	fa1f f188 	uxth.w	r1, r8
 800ddf6:	4648      	mov	r0, r9
 800ddf8:	f7ff fa14 	bl	800d224 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ddfc:	e6d1      	b.n	800dba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddfe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800de02:	42ab      	cmp	r3, r5
 800de04:	f67f ae95 	bls.w	800db32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800de08:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800de0c:	ab07      	add	r3, sp, #28
 800de0e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800de12:	6851      	ldr	r1, [r2, #4]
 800de14:	c303      	stmia	r3!, {r0, r1}
 800de16:	a807      	add	r0, sp, #28
 800de18:	f7fd f86f 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800de1c:	b920      	cbnz	r0, 800de28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	a907      	add	r1, sp, #28
 800de22:	4620      	mov	r0, r4
 800de24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de26:	4798      	blx	r3
 800de28:	3501      	adds	r5, #1
 800de2a:	b2ad      	uxth	r5, r5
 800de2c:	e7e7      	b.n	800ddfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800de2e:	bf00      	nop
 800de30:	2400ae0c 	.word	0x2400ae0c

0800de34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800de34:	4b03      	ldr	r3, [pc, #12]	; (800de44 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800de36:	2200      	movs	r2, #0
 800de38:	801a      	strh	r2, [r3, #0]
 800de3a:	805a      	strh	r2, [r3, #2]
 800de3c:	809a      	strh	r2, [r3, #4]
 800de3e:	80da      	strh	r2, [r3, #6]
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	2400ae50 	.word	0x2400ae50

0800de48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	b09d      	sub	sp, #116	; 0x74
 800de4e:	4606      	mov	r6, r0
 800de50:	4614      	mov	r4, r2
 800de52:	468a      	mov	sl, r1
 800de54:	a803      	add	r0, sp, #12
 800de56:	461d      	mov	r5, r3
 800de58:	f000 fd6c 	bl	800e934 <_ZN8touchgfx12TextProviderC1Ev>
 800de5c:	6833      	ldr	r3, [r6, #0]
 800de5e:	4630      	mov	r0, r6
 800de60:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800de64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de66:	4798      	blx	r3
 800de68:	6833      	ldr	r3, [r6, #0]
 800de6a:	4607      	mov	r7, r0
 800de6c:	4630      	mov	r0, r6
 800de6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de70:	4798      	blx	r3
 800de72:	462a      	mov	r2, r5
 800de74:	2500      	movs	r5, #0
 800de76:	4621      	mov	r1, r4
 800de78:	9000      	str	r0, [sp, #0]
 800de7a:	463b      	mov	r3, r7
 800de7c:	462c      	mov	r4, r5
 800de7e:	46a9      	mov	r9, r5
 800de80:	46a8      	mov	r8, r5
 800de82:	a803      	add	r0, sp, #12
 800de84:	f000 fda9 	bl	800e9da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de88:	2300      	movs	r3, #0
 800de8a:	9302      	str	r3, [sp, #8]
 800de8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800de90:	429c      	cmp	r4, r3
 800de92:	d002      	beq.n	800de9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800de94:	455c      	cmp	r4, fp
 800de96:	bf18      	it	ne
 800de98:	4625      	movne	r5, r4
 800de9a:	ab02      	add	r3, sp, #8
 800de9c:	4632      	mov	r2, r6
 800de9e:	4651      	mov	r1, sl
 800dea0:	a803      	add	r0, sp, #12
 800dea2:	f001 f88f 	bl	800efc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dea6:	4604      	mov	r4, r0
 800dea8:	b108      	cbz	r0, 800deae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800deaa:	280a      	cmp	r0, #10
 800deac:	d10a      	bne.n	800dec4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800deae:	45c1      	cmp	r9, r8
 800deb0:	bf38      	it	cc
 800deb2:	46c1      	movcc	r9, r8
 800deb4:	f04f 0800 	mov.w	r8, #0
 800deb8:	2c00      	cmp	r4, #0
 800deba:	d1e5      	bne.n	800de88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800debc:	4648      	mov	r0, r9
 800debe:	b01d      	add	sp, #116	; 0x74
 800dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec4:	9a02      	ldr	r2, [sp, #8]
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	d0de      	beq.n	800de88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800deca:	7b57      	ldrb	r7, [r2, #13]
 800decc:	4629      	mov	r1, r5
 800dece:	6833      	ldr	r3, [r6, #0]
 800ded0:	007f      	lsls	r7, r7, #1
 800ded2:	8894      	ldrh	r4, [r2, #4]
 800ded4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800deda:	7a97      	ldrb	r7, [r2, #10]
 800dedc:	4307      	orrs	r7, r0
 800dede:	4630      	mov	r0, r6
 800dee0:	4798      	blx	r3
 800dee2:	4438      	add	r0, r7
 800dee4:	4480      	add	r8, r0
 800dee6:	fa1f f888 	uxth.w	r8, r8
 800deea:	e7e5      	b.n	800deb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800deec <_ZNK8touchgfx4Font12getCharWidthEt>:
 800deec:	b508      	push	{r3, lr}
 800deee:	6803      	ldr	r3, [r0, #0]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	4798      	blx	r3
 800def4:	b128      	cbz	r0, 800df02 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800def6:	7b43      	ldrb	r3, [r0, #13]
 800def8:	7a80      	ldrb	r0, [r0, #10]
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df00:	4318      	orrs	r0, r3
 800df02:	bd08      	pop	{r3, pc}

0800df04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800df04:	b40e      	push	{r1, r2, r3}
 800df06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df08:	b09e      	sub	sp, #120	; 0x78
 800df0a:	4605      	mov	r5, r0
 800df0c:	ab23      	add	r3, sp, #140	; 0x8c
 800df0e:	a805      	add	r0, sp, #20
 800df10:	f853 4b04 	ldr.w	r4, [r3], #4
 800df14:	9303      	str	r3, [sp, #12]
 800df16:	f000 fd0d 	bl	800e934 <_ZN8touchgfx12TextProviderC1Ev>
 800df1a:	682b      	ldr	r3, [r5, #0]
 800df1c:	4628      	mov	r0, r5
 800df1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df20:	4798      	blx	r3
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	4606      	mov	r6, r0
 800df26:	4628      	mov	r0, r5
 800df28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df2a:	4798      	blx	r3
 800df2c:	4633      	mov	r3, r6
 800df2e:	4621      	mov	r1, r4
 800df30:	ae1e      	add	r6, sp, #120	; 0x78
 800df32:	2400      	movs	r4, #0
 800df34:	9000      	str	r0, [sp, #0]
 800df36:	9a03      	ldr	r2, [sp, #12]
 800df38:	a805      	add	r0, sp, #20
 800df3a:	f000 fd4e 	bl	800e9da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df3e:	f846 4d68 	str.w	r4, [r6, #-104]!
 800df42:	462a      	mov	r2, r5
 800df44:	4633      	mov	r3, r6
 800df46:	4621      	mov	r1, r4
 800df48:	a805      	add	r0, sp, #20
 800df4a:	f001 f83b 	bl	800efc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df4e:	b300      	cbz	r0, 800df92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800df50:	280a      	cmp	r0, #10
 800df52:	d01a      	beq.n	800df8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df54:	9f04      	ldr	r7, [sp, #16]
 800df56:	b1c7      	cbz	r7, 800df8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800df58:	7b78      	ldrb	r0, [r7, #13]
 800df5a:	7a3b      	ldrb	r3, [r7, #8]
 800df5c:	00c1      	lsls	r1, r0, #3
 800df5e:	88aa      	ldrh	r2, [r5, #4]
 800df60:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800df64:	4319      	orrs	r1, r3
 800df66:	0643      	lsls	r3, r0, #25
 800df68:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800df6c:	bf48      	it	mi
 800df6e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800df72:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800df76:	bf48      	it	mi
 800df78:	b219      	sxthmi	r1, r3
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	4303      	orrs	r3, r0
 800df7e:	4413      	add	r3, r2
 800df80:	1a5b      	subs	r3, r3, r1
 800df82:	b29b      	uxth	r3, r3
 800df84:	42a3      	cmp	r3, r4
 800df86:	bfc8      	it	gt
 800df88:	b21c      	sxthgt	r4, r3
 800df8a:	4633      	mov	r3, r6
 800df8c:	462a      	mov	r2, r5
 800df8e:	2100      	movs	r1, #0
 800df90:	e7da      	b.n	800df48 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800df92:	b2a0      	uxth	r0, r4
 800df94:	b01e      	add	sp, #120	; 0x78
 800df96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df9a:	b003      	add	sp, #12
 800df9c:	4770      	bx	lr

0800df9e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800df9e:	b40e      	push	{r1, r2, r3}
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	b09d      	sub	sp, #116	; 0x74
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	ab21      	add	r3, sp, #132	; 0x84
 800dfa8:	a803      	add	r0, sp, #12
 800dfaa:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfae:	9302      	str	r3, [sp, #8]
 800dfb0:	f000 fcc0 	bl	800e934 <_ZN8touchgfx12TextProviderC1Ev>
 800dfb4:	6823      	ldr	r3, [r4, #0]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfba:	4798      	blx	r3
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfc4:	2401      	movs	r4, #1
 800dfc6:	4798      	blx	r3
 800dfc8:	4633      	mov	r3, r6
 800dfca:	9000      	str	r0, [sp, #0]
 800dfcc:	4629      	mov	r1, r5
 800dfce:	9a02      	ldr	r2, [sp, #8]
 800dfd0:	a803      	add	r0, sp, #12
 800dfd2:	f000 fd02 	bl	800e9da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dfd6:	a803      	add	r0, sp, #12
 800dfd8:	f001 f874 	bl	800f0c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfdc:	b2a3      	uxth	r3, r4
 800dfde:	b138      	cbz	r0, 800dff0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800dfe0:	280a      	cmp	r0, #10
 800dfe2:	a803      	add	r0, sp, #12
 800dfe4:	bf04      	itt	eq
 800dfe6:	3301      	addeq	r3, #1
 800dfe8:	b21c      	sxtheq	r4, r3
 800dfea:	f001 f86b 	bl	800f0c4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfee:	e7f5      	b.n	800dfdc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dff0:	4618      	mov	r0, r3
 800dff2:	b01d      	add	sp, #116	; 0x74
 800dff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dff8:	b003      	add	sp, #12
 800dffa:	4770      	bx	lr

0800dffc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dffc:	b40e      	push	{r1, r2, r3}
 800dffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e000:	b09e      	sub	sp, #120	; 0x78
 800e002:	4604      	mov	r4, r0
 800e004:	ab23      	add	r3, sp, #140	; 0x8c
 800e006:	a805      	add	r0, sp, #20
 800e008:	f853 5b04 	ldr.w	r5, [r3], #4
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	f000 fc91 	bl	800e934 <_ZN8touchgfx12TextProviderC1Ev>
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	4620      	mov	r0, r4
 800e016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e018:	4798      	blx	r3
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	4606      	mov	r6, r0
 800e01e:	4620      	mov	r0, r4
 800e020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e022:	4798      	blx	r3
 800e024:	4633      	mov	r3, r6
 800e026:	4629      	mov	r1, r5
 800e028:	9000      	str	r0, [sp, #0]
 800e02a:	9a03      	ldr	r2, [sp, #12]
 800e02c:	a805      	add	r0, sp, #20
 800e02e:	f000 fcd4 	bl	800e9da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e032:	ad1e      	add	r5, sp, #120	; 0x78
 800e034:	2100      	movs	r1, #0
 800e036:	26ff      	movs	r6, #255	; 0xff
 800e038:	4622      	mov	r2, r4
 800e03a:	a805      	add	r0, sp, #20
 800e03c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e040:	462b      	mov	r3, r5
 800e042:	f000 ffbf 	bl	800efc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e046:	b1d8      	cbz	r0, 800e080 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800e048:	280a      	cmp	r0, #10
 800e04a:	d012      	beq.n	800e072 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e04c:	9804      	ldr	r0, [sp, #16]
 800e04e:	b180      	cbz	r0, 800e072 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800e050:	7b47      	ldrb	r7, [r0, #13]
 800e052:	7922      	ldrb	r2, [r4, #4]
 800e054:	00fb      	lsls	r3, r7, #3
 800e056:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800e05a:	7a03      	ldrb	r3, [r0, #8]
 800e05c:	430b      	orrs	r3, r1
 800e05e:	0679      	lsls	r1, r7, #25
 800e060:	bf44      	itt	mi
 800e062:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800e066:	b21b      	sxthmi	r3, r3
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	429e      	cmp	r6, r3
 800e06e:	bf28      	it	cs
 800e070:	461e      	movcs	r6, r3
 800e072:	462b      	mov	r3, r5
 800e074:	4622      	mov	r2, r4
 800e076:	2100      	movs	r1, #0
 800e078:	a805      	add	r0, sp, #20
 800e07a:	f000 ffa3 	bl	800efc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e07e:	e7e2      	b.n	800e046 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800e080:	4630      	mov	r0, r6
 800e082:	b01e      	add	sp, #120	; 0x78
 800e084:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e088:	b003      	add	sp, #12
 800e08a:	4770      	bx	lr

0800e08c <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e08c:	b513      	push	{r0, r1, r4, lr}
 800e08e:	6803      	ldr	r3, [r0, #0]
 800e090:	2400      	movs	r4, #0
 800e092:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e096:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e09a:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e09e:	4669      	mov	r1, sp
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	9400      	str	r4, [sp, #0]
 800e0a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e0a8:	4798      	blx	r3
 800e0aa:	b002      	add	sp, #8
 800e0ac:	bd10      	pop	{r4, pc}

0800e0ae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e0ae:	b538      	push	{r3, r4, r5, lr}
 800e0b0:	680b      	ldr	r3, [r1, #0]
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	4798      	blx	r3
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c2:	4798      	blx	r3
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	bd38      	pop	{r3, r4, r5, pc}

0800e0c8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e0c8:	b410      	push	{r4}
 800e0ca:	880a      	ldrh	r2, [r1, #0]
 800e0cc:	8884      	ldrh	r4, [r0, #4]
 800e0ce:	4422      	add	r2, r4
 800e0d0:	800a      	strh	r2, [r1, #0]
 800e0d2:	884a      	ldrh	r2, [r1, #2]
 800e0d4:	88c4      	ldrh	r4, [r0, #6]
 800e0d6:	4422      	add	r2, r4
 800e0d8:	804a      	strh	r2, [r1, #2]
 800e0da:	6940      	ldr	r0, [r0, #20]
 800e0dc:	b120      	cbz	r0, 800e0e8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e0de:	6803      	ldr	r3, [r0, #0]
 800e0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e6:	4718      	bx	r3
 800e0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ec:	4770      	bx	lr

0800e0ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e0ee:	b570      	push	{r4, r5, r6, lr}
 800e0f0:	8882      	ldrh	r2, [r0, #4]
 800e0f2:	460c      	mov	r4, r1
 800e0f4:	880b      	ldrh	r3, [r1, #0]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	4413      	add	r3, r2
 800e0fa:	800b      	strh	r3, [r1, #0]
 800e0fc:	884b      	ldrh	r3, [r1, #2]
 800e0fe:	88c2      	ldrh	r2, [r0, #6]
 800e100:	4413      	add	r3, r2
 800e102:	804b      	strh	r3, [r1, #2]
 800e104:	1d01      	adds	r1, r0, #4
 800e106:	4620      	mov	r0, r4
 800e108:	f7fc feb4 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e10c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	dd0b      	ble.n	800e12c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e114:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	dd07      	ble.n	800e12c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e11c:	6968      	ldr	r0, [r5, #20]
 800e11e:	b128      	cbz	r0, 800e12c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e120:	6803      	ldr	r3, [r0, #0]
 800e122:	4621      	mov	r1, r4
 800e124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e12a:	4718      	bx	r3
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e130 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	8882      	ldrh	r2, [r0, #4]
 800e134:	460c      	mov	r4, r1
 800e136:	880b      	ldrh	r3, [r1, #0]
 800e138:	4605      	mov	r5, r0
 800e13a:	4413      	add	r3, r2
 800e13c:	800b      	strh	r3, [r1, #0]
 800e13e:	884b      	ldrh	r3, [r1, #2]
 800e140:	88c2      	ldrh	r2, [r0, #6]
 800e142:	4413      	add	r3, r2
 800e144:	804b      	strh	r3, [r1, #2]
 800e146:	1d01      	adds	r1, r0, #4
 800e148:	4620      	mov	r0, r4
 800e14a:	f7fc fe93 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e14e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	dd18      	ble.n	800e188 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e156:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dd14      	ble.n	800e188 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e15e:	6968      	ldr	r0, [r5, #20]
 800e160:	b128      	cbz	r0, 800e16e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	4621      	mov	r1, r4
 800e166:	691b      	ldr	r3, [r3, #16]
 800e168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e16c:	4718      	bx	r3
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3304      	adds	r3, #4
 800e174:	429d      	cmp	r5, r3
 800e176:	d107      	bne.n	800e188 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800e178:	f7fe fff0 	bl	800d15c <_ZN8touchgfx11Application11getInstanceEv>
 800e17c:	6821      	ldr	r1, [r4, #0]
 800e17e:	6862      	ldr	r2, [r4, #4]
 800e180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e184:	f7ff b862 	b.w	800d24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e188:	bd70      	pop	{r4, r5, r6, pc}
 800e18a:	bf00      	nop
 800e18c:	2400ae48 	.word	0x2400ae48

0800e190 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4604      	mov	r4, r0
 800e194:	4616      	mov	r6, r2
 800e196:	460d      	mov	r5, r1
 800e198:	b901      	cbnz	r1, 800e19c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e19a:	b192      	cbz	r2, 800e1c2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	4620      	mov	r0, r4
 800e1a0:	699b      	ldr	r3, [r3, #24]
 800e1a2:	4798      	blx	r3
 800e1a4:	88e2      	ldrh	r2, [r4, #6]
 800e1a6:	88a1      	ldrh	r1, [r4, #4]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4432      	add	r2, r6
 800e1ac:	4429      	add	r1, r5
 800e1ae:	b212      	sxth	r2, r2
 800e1b0:	b209      	sxth	r1, r1
 800e1b2:	f7fd f93d 	bl	800b430 <_ZN8touchgfx8Drawable5setXYEss>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1c0:	4718      	bx	r3
 800e1c2:	bd70      	pop	{r4, r5, r6, pc}

0800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e1c4:	b510      	push	{r4, lr}
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e1d0:	8023      	strh	r3, [r4, #0]
 800e1d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e1d6:	8063      	strh	r3, [r4, #2]
 800e1d8:	6803      	ldr	r3, [r0, #0]
 800e1da:	80a1      	strh	r1, [r4, #4]
 800e1dc:	4621      	mov	r1, r4
 800e1de:	80e2      	strh	r2, [r4, #6]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	4798      	blx	r3
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	bd10      	pop	{r4, pc}

0800e1e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800e1e8:	b530      	push	{r4, r5, lr}
 800e1ea:	8083      	strh	r3, [r0, #4]
 800e1ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e1f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800e1f4:	7183      	strb	r3, [r0, #6]
 800e1f6:	79c3      	ldrb	r3, [r0, #7]
 800e1f8:	6101      	str	r1, [r0, #16]
 800e1fa:	f365 0306 	bfi	r3, r5, #0, #7
 800e1fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e202:	8282      	strh	r2, [r0, #20]
 800e204:	f365 13c7 	bfi	r3, r5, #7, #1
 800e208:	71c3      	strb	r3, [r0, #7]
 800e20a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e20e:	7203      	strb	r3, [r0, #8]
 800e210:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e214:	7243      	strb	r3, [r0, #9]
 800e216:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e21a:	8143      	strh	r3, [r0, #10]
 800e21c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e220:	8183      	strh	r3, [r0, #12]
 800e222:	4b01      	ldr	r3, [pc, #4]	; (800e228 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	bd30      	pop	{r4, r5, pc}
 800e228:	0801a3f0 	.word	0x0801a3f0

0800e22c <_ZNK8touchgfx9ConstFont4findEt>:
 800e22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e22e:	6904      	ldr	r4, [r0, #16]
 800e230:	b3bc      	cbz	r4, 800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e232:	88a3      	ldrh	r3, [r4, #4]
 800e234:	8a82      	ldrh	r2, [r0, #20]
 800e236:	1acb      	subs	r3, r1, r3
 800e238:	f102 32ff 	add.w	r2, r2, #4294967295
 800e23c:	d431      	bmi.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e23e:	4293      	cmp	r3, r2
 800e240:	dd0c      	ble.n	800e25c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e242:	230e      	movs	r3, #14
 800e244:	fb03 4302 	mla	r3, r3, r2, r4
 800e248:	889b      	ldrh	r3, [r3, #4]
 800e24a:	1a5b      	subs	r3, r3, r1
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	429a      	cmp	r2, r3
 800e250:	db27      	blt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfbc      	itt	lt
 800e256:	2302      	movlt	r3, #2
 800e258:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e25c:	2500      	movs	r5, #0
 800e25e:	260e      	movs	r6, #14
 800e260:	4295      	cmp	r5, r2
 800e262:	dc1e      	bgt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e264:	fb06 4003 	mla	r0, r6, r3, r4
 800e268:	8887      	ldrh	r7, [r0, #4]
 800e26a:	42b9      	cmp	r1, r7
 800e26c:	d01a      	beq.n	800e2a4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e26e:	d20d      	bcs.n	800e28c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e270:	1e5a      	subs	r2, r3, #1
 800e272:	4295      	cmp	r5, r2
 800e274:	dc15      	bgt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e276:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e27a:	1a5b      	subs	r3, r3, r1
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	429a      	cmp	r2, r3
 800e280:	db0f      	blt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e282:	429d      	cmp	r5, r3
 800e284:	ddec      	ble.n	800e260 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e286:	1953      	adds	r3, r2, r5
 800e288:	105b      	asrs	r3, r3, #1
 800e28a:	e7e9      	b.n	800e260 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e28c:	1c5d      	adds	r5, r3, #1
 800e28e:	42aa      	cmp	r2, r5
 800e290:	db07      	blt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e292:	8a43      	ldrh	r3, [r0, #18]
 800e294:	1acb      	subs	r3, r1, r3
 800e296:	442b      	add	r3, r5
 800e298:	429d      	cmp	r5, r3
 800e29a:	dc02      	bgt.n	800e2a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e29c:	429a      	cmp	r2, r3
 800e29e:	dadf      	bge.n	800e260 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e2a0:	e7f1      	b.n	800e286 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	4617      	mov	r7, r2
 800e2ac:	461e      	mov	r6, r3
 800e2ae:	b911      	cbnz	r1, 800e2b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e2b0:	2500      	movs	r5, #0
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b6:	290a      	cmp	r1, #10
 800e2b8:	d0fa      	beq.n	800e2b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800e2be:	4291      	cmp	r1, r2
 800e2c0:	d0f6      	beq.n	800e2b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2c2:	f242 020b 	movw	r2, #8203	; 0x200b
 800e2c6:	4291      	cmp	r1, r2
 800e2c8:	d0f2      	beq.n	800e2b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2ca:	f7ff ffaf 	bl	800e22c <_ZNK8touchgfx9ConstFont4findEt>
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	b950      	cbnz	r0, 800e2e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	4798      	blx	r3
 800e2da:	4601      	mov	r1, r0
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f7ff ffa5 	bl	800e22c <_ZNK8touchgfx9ConstFont4findEt>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d0e3      	beq.n	800e2b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2f0:	4798      	blx	r3
 800e2f2:	6038      	str	r0, [r7, #0]
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fa:	4798      	blx	r3
 800e2fc:	7030      	strb	r0, [r6, #0]
 800e2fe:	e7d8      	b.n	800e2b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e300 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e300:	2000      	movs	r0, #0
 800e302:	4770      	bx	lr

0800e304 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e304:	2001      	movs	r0, #1
 800e306:	4770      	bx	lr

0800e308 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e308:	2002      	movs	r0, #2
 800e30a:	4770      	bx	lr

0800e30c <_ZN8touchgfx6ScreenD1Ev>:
 800e30c:	4770      	bx	lr

0800e30e <_ZN8touchgfx12GestureEventD1Ev>:
 800e30e:	4770      	bx	lr

0800e310 <_ZN8touchgfx9DragEventD1Ev>:
 800e310:	4770      	bx	lr

0800e312 <_ZN8touchgfx10ClickEventD1Ev>:
 800e312:	4770      	bx	lr

0800e314 <_ZN8touchgfx10ClickEventD0Ev>:
 800e314:	b510      	push	{r4, lr}
 800e316:	4604      	mov	r4, r0
 800e318:	210c      	movs	r1, #12
 800e31a:	f009 fc44 	bl	8017ba6 <_ZdlPvj>
 800e31e:	4620      	mov	r0, r4
 800e320:	bd10      	pop	{r4, pc}

0800e322 <_ZN8touchgfx9DragEventD0Ev>:
 800e322:	b510      	push	{r4, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	2110      	movs	r1, #16
 800e328:	f009 fc3d 	bl	8017ba6 <_ZdlPvj>
 800e32c:	4620      	mov	r0, r4
 800e32e:	bd10      	pop	{r4, pc}

0800e330 <_ZN8touchgfx12GestureEventD0Ev>:
 800e330:	b510      	push	{r4, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	210c      	movs	r1, #12
 800e336:	f009 fc36 	bl	8017ba6 <_ZdlPvj>
 800e33a:	4620      	mov	r0, r4
 800e33c:	bd10      	pop	{r4, pc}

0800e33e <_ZN8touchgfx6ScreenD0Ev>:
 800e33e:	b510      	push	{r4, lr}
 800e340:	4604      	mov	r4, r0
 800e342:	213c      	movs	r1, #60	; 0x3c
 800e344:	f009 fc2f 	bl	8017ba6 <_ZdlPvj>
 800e348:	4620      	mov	r0, r4
 800e34a:	bd10      	pop	{r4, pc}

0800e34c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e34c:	b530      	push	{r4, r5, lr}
 800e34e:	460d      	mov	r5, r1
 800e350:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e352:	b087      	sub	sp, #28
 800e354:	4604      	mov	r4, r0
 800e356:	b301      	cbz	r1, 800e39a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e358:	a801      	add	r0, sp, #4
 800e35a:	f7ff ff33 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e35e:	892a      	ldrh	r2, [r5, #8]
 800e360:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e364:	7928      	ldrb	r0, [r5, #4]
 800e366:	1ad2      	subs	r2, r2, r3
 800e368:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e36a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e36e:	441a      	add	r2, r3
 800e370:	896b      	ldrh	r3, [r5, #10]
 800e372:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e376:	f88d 0010 	strb.w	r0, [sp, #16]
 800e37a:	1b5b      	subs	r3, r3, r5
 800e37c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800e37e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e380:	442b      	add	r3, r5
 800e382:	4d07      	ldr	r5, [pc, #28]	; (800e3a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e384:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e388:	a903      	add	r1, sp, #12
 800e38a:	9503      	str	r5, [sp, #12]
 800e38c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e390:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e394:	6803      	ldr	r3, [r0, #0]
 800e396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e398:	4798      	blx	r3
 800e39a:	b007      	add	sp, #28
 800e39c:	bd30      	pop	{r4, r5, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801a470 	.word	0x0801a470

0800e3a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e3aa:	b08a      	sub	sp, #40	; 0x28
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	b113      	cbz	r3, 800e3b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e3b2:	790b      	ldrb	r3, [r1, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d044      	beq.n	800e442 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3b8:	f104 0804 	add.w	r8, r4, #4
 800e3bc:	a803      	add	r0, sp, #12
 800e3be:	4641      	mov	r1, r8
 800e3c0:	f7ff ff00 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3c4:	792b      	ldrb	r3, [r5, #4]
 800e3c6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e3ca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e3ce:	b983      	cbnz	r3, 800e3f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e3d0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800e3d4:	892a      	ldrh	r2, [r5, #8]
 800e3d6:	88e9      	ldrh	r1, [r5, #6]
 800e3d8:	4640      	mov	r0, r8
 800e3da:	1b92      	subs	r2, r2, r6
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	1bc9      	subs	r1, r1, r7
 800e3e0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800e3e4:	b212      	sxth	r2, r2
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	b209      	sxth	r1, r1
 800e3ea:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800e3ee:	f7fc fc5f 	bl	800acb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e3f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e3f4:	b329      	cbz	r1, 800e442 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3f6:	a805      	add	r0, sp, #20
 800e3f8:	f7ff fee4 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e400:	792b      	ldrb	r3, [r5, #4]
 800e402:	a907      	add	r1, sp, #28
 800e404:	1abf      	subs	r7, r7, r2
 800e406:	88ea      	ldrh	r2, [r5, #6]
 800e408:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e40a:	4417      	add	r7, r2
 800e40c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800e40e:	f88d 3020 	strb.w	r3, [sp, #32]
 800e412:	4417      	add	r7, r2
 800e414:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e418:	1ab6      	subs	r6, r6, r2
 800e41a:	892a      	ldrh	r2, [r5, #8]
 800e41c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800e420:	4416      	add	r6, r2
 800e422:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e424:	4416      	add	r6, r2
 800e426:	4a08      	ldr	r2, [pc, #32]	; (800e448 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e428:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800e42c:	2600      	movs	r6, #0
 800e42e:	9207      	str	r2, [sp, #28]
 800e430:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800e434:	6803      	ldr	r3, [r0, #0]
 800e436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e438:	4798      	blx	r3
 800e43a:	792b      	ldrb	r3, [r5, #4]
 800e43c:	b10b      	cbz	r3, 800e442 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e43e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800e442:	b00a      	add	sp, #40	; 0x28
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	0801a448 	.word	0x0801a448

0800e44c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e450:	460c      	mov	r4, r1
 800e452:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e454:	b088      	sub	sp, #32
 800e456:	4605      	mov	r5, r0
 800e458:	2900      	cmp	r1, #0
 800e45a:	d06d      	beq.n	800e538 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e45c:	4668      	mov	r0, sp
 800e45e:	f7ff feb1 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e462:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800e464:	88e3      	ldrh	r3, [r4, #6]
 800e466:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e46a:	440b      	add	r3, r1
 800e46c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e470:	b21b      	sxth	r3, r3
 800e472:	4543      	cmp	r3, r8
 800e474:	db31      	blt.n	800e4da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e476:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e47a:	44c4      	add	ip, r8
 800e47c:	fa0f fc8c 	sxth.w	ip, ip
 800e480:	4563      	cmp	r3, ip
 800e482:	da2a      	bge.n	800e4da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e484:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800e486:	8926      	ldrh	r6, [r4, #8]
 800e488:	4416      	add	r6, r2
 800e48a:	b236      	sxth	r6, r6
 800e48c:	42be      	cmp	r6, r7
 800e48e:	db24      	blt.n	800e4da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e490:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e494:	4438      	add	r0, r7
 800e496:	b200      	sxth	r0, r0
 800e498:	4286      	cmp	r6, r0
 800e49a:	da1e      	bge.n	800e4da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e49c:	8963      	ldrh	r3, [r4, #10]
 800e49e:	4419      	add	r1, r3
 800e4a0:	b209      	sxth	r1, r1
 800e4a2:	4541      	cmp	r1, r8
 800e4a4:	db08      	blt.n	800e4b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4a6:	4561      	cmp	r1, ip
 800e4a8:	da06      	bge.n	800e4b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	441a      	add	r2, r3
 800e4ae:	b212      	sxth	r2, r2
 800e4b0:	42ba      	cmp	r2, r7
 800e4b2:	db01      	blt.n	800e4b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4b4:	4282      	cmp	r2, r0
 800e4b6:	db10      	blt.n	800e4da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4b8:	4b21      	ldr	r3, [pc, #132]	; (800e540 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e4ba:	a904      	add	r1, sp, #16
 800e4bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e4be:	9304      	str	r3, [sp, #16]
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	f88d 3014 	strb.w	r3, [sp, #20]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4d4:	6803      	ldr	r3, [r0, #0]
 800e4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d8:	4798      	blx	r3
 800e4da:	1d29      	adds	r1, r5, #4
 800e4dc:	a802      	add	r0, sp, #8
 800e4de:	f7ff fe71 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e4e6:	88e0      	ldrh	r0, [r4, #6]
 800e4e8:	eba3 0808 	sub.w	r8, r3, r8
 800e4ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e4f0:	7921      	ldrb	r1, [r4, #4]
 800e4f2:	fa1f f888 	uxth.w	r8, r8
 800e4f6:	1bdf      	subs	r7, r3, r7
 800e4f8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800e4fc:	b2bb      	uxth	r3, r7
 800e4fe:	4440      	add	r0, r8
 800e500:	8922      	ldrh	r2, [r4, #8]
 800e502:	8967      	ldrh	r7, [r4, #10]
 800e504:	4460      	add	r0, ip
 800e506:	89a4      	ldrh	r4, [r4, #12]
 800e508:	441a      	add	r2, r3
 800e50a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800e50c:	44b8      	add	r8, r7
 800e50e:	4423      	add	r3, r4
 800e510:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e514:	4432      	add	r2, r6
 800e516:	44e0      	add	r8, ip
 800e518:	4433      	add	r3, r6
 800e51a:	4c0a      	ldr	r4, [pc, #40]	; (800e544 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e51c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e51e:	f88d 1014 	strb.w	r1, [sp, #20]
 800e522:	a904      	add	r1, sp, #16
 800e524:	9404      	str	r4, [sp, #16]
 800e526:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e52a:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e52e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e532:	6803      	ldr	r3, [r0, #0]
 800e534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e536:	4798      	blx	r3
 800e538:	b008      	add	sp, #32
 800e53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53e:	bf00      	nop
 800e540:	0801a448 	.word	0x0801a448
 800e544:	0801a45c 	.word	0x0801a45c

0800e548 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e54a:	4604      	mov	r4, r0
 800e54c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e550:	3201      	adds	r2, #1
 800e552:	d112      	bne.n	800e57a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e554:	2500      	movs	r5, #0
 800e556:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e55a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e55e:	6803      	ldr	r3, [r0, #0]
 800e560:	9500      	str	r5, [sp, #0]
 800e562:	466d      	mov	r5, sp
 800e564:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e568:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e56c:	4629      	mov	r1, r5
 800e56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e570:	4798      	blx	r3
 800e572:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e576:	e884 0003 	stmia.w	r4, {r0, r1}
 800e57a:	4620      	mov	r0, r4
 800e57c:	b003      	add	sp, #12
 800e57e:	bd30      	pop	{r4, r5, pc}

0800e580 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e580:	b513      	push	{r0, r1, r4, lr}
 800e582:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e586:	4604      	mov	r4, r0
 800e588:	3301      	adds	r3, #1
 800e58a:	d109      	bne.n	800e5a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e58c:	4601      	mov	r1, r0
 800e58e:	4668      	mov	r0, sp
 800e590:	f7ff fe18 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e594:	f8bd 3000 	ldrh.w	r3, [sp]
 800e598:	8423      	strh	r3, [r4, #32]
 800e59a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e59e:	8463      	strh	r3, [r4, #34]	; 0x22
 800e5a0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e5a8:	b513      	push	{r0, r1, r4, lr}
 800e5aa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	d109      	bne.n	800e5c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e5b4:	4601      	mov	r1, r0
 800e5b6:	4668      	mov	r0, sp
 800e5b8:	f7ff fe04 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5c0:	8423      	strh	r3, [r4, #32]
 800e5c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5c6:	8463      	strh	r3, [r4, #34]	; 0x22
 800e5c8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800e5cc:	b002      	add	sp, #8
 800e5ce:	bd10      	pop	{r4, pc}

0800e5d0 <_ZN8touchgfx6ScreenC1Ev>:
 800e5d0:	b570      	push	{r4, r5, r6, lr}
 800e5d2:	4b17      	ldr	r3, [pc, #92]	; (800e630 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	4a17      	ldr	r2, [pc, #92]	; (800e634 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e5d8:	2101      	movs	r1, #1
 800e5da:	f845 3b04 	str.w	r3, [r5], #4
 800e5de:	2300      	movs	r3, #0
 800e5e0:	6042      	str	r2, [r0, #4]
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	8103      	strh	r3, [r0, #8]
 800e5e6:	8143      	strh	r3, [r0, #10]
 800e5e8:	8183      	strh	r3, [r0, #12]
 800e5ea:	81c3      	strh	r3, [r0, #14]
 800e5ec:	8203      	strh	r3, [r0, #16]
 800e5ee:	8243      	strh	r3, [r0, #18]
 800e5f0:	8283      	strh	r3, [r0, #20]
 800e5f2:	82c3      	strh	r3, [r0, #22]
 800e5f4:	6203      	str	r3, [r0, #32]
 800e5f6:	8483      	strh	r3, [r0, #36]	; 0x24
 800e5f8:	84c3      	strh	r3, [r0, #38]	; 0x26
 800e5fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800e5fe:	6343      	str	r3, [r0, #52]	; 0x34
 800e600:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800e604:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800e608:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e60c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800e610:	4b09      	ldr	r3, [pc, #36]	; (800e638 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e612:	4628      	mov	r0, r5
 800e614:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e618:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e61a:	4a08      	ldr	r2, [pc, #32]	; (800e63c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e61c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e620:	4798      	blx	r3
 800e622:	6863      	ldr	r3, [r4, #4]
 800e624:	4628      	mov	r0, r5
 800e626:	4631      	mov	r1, r6
 800e628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e62a:	4798      	blx	r3
 800e62c:	4620      	mov	r0, r4
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	0801a484 	.word	0x0801a484
 800e634:	0801a028 	.word	0x0801a028
 800e638:	2400ae02 	.word	0x2400ae02
 800e63c:	2400ae00 	.word	0x2400ae00

0800e640 <_ZN8touchgfx6Screen4drawEv>:
 800e640:	4b09      	ldr	r3, [pc, #36]	; (800e668 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e642:	b507      	push	{r0, r1, r2, lr}
 800e644:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e648:	2100      	movs	r1, #0
 800e64a:	4b08      	ldr	r3, [pc, #32]	; (800e66c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e64c:	9100      	str	r1, [sp, #0]
 800e64e:	4669      	mov	r1, sp
 800e650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e654:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e658:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e65c:	6803      	ldr	r3, [r0, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	4798      	blx	r3
 800e662:	b003      	add	sp, #12
 800e664:	f85d fb04 	ldr.w	pc, [sp], #4
 800e668:	2400ae00 	.word	0x2400ae00
 800e66c:	2400ae02 	.word	0x2400ae02

0800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e678:	b089      	sub	sp, #36	; 0x24
 800e67a:	4680      	mov	r8, r0
 800e67c:	460c      	mov	r4, r1
 800e67e:	2b00      	cmp	r3, #0
 800e680:	4615      	mov	r5, r2
 800e682:	dd0e      	ble.n	800e6a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e684:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dd0a      	ble.n	800e6a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e68c:	4628      	mov	r0, r5
 800e68e:	f7ff ff5b 	bl	800e548 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e692:	4621      	mov	r1, r4
 800e694:	f7fe fc83 	bl	800cf9e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e698:	69eb      	ldr	r3, [r5, #28]
 800e69a:	b928      	cbnz	r0, 800e6a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e69c:	461d      	mov	r5, r3
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1f4      	bne.n	800e68c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e6a2:	b009      	add	sp, #36	; 0x24
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a8:	ae04      	add	r6, sp, #16
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 80b5 	beq.w	800e81a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	a802      	add	r0, sp, #8
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	4798      	blx	r3
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f7ff ff60 	bl	800e580 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e6c0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e6c4:	4407      	add	r7, r0
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f7ff ff6e 	bl	800e5a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e6cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e6d0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e6d4:	b23f      	sxth	r7, r7
 800e6d6:	4418      	add	r0, r3
 800e6d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e6dc:	4621      	mov	r1, r4
 800e6de:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e6e2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6ec:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e6f0:	f7fc fbc0 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f7ff ff27 	bl	800e548 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e6fa:	ab06      	add	r3, sp, #24
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e702:	e883 0003 	stmia.w	r3, {r0, r1}
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fc fbb3 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e70e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e712:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e716:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e71a:	4299      	cmp	r1, r3
 800e71c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e720:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e724:	d10b      	bne.n	800e73e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e726:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e72a:	4552      	cmp	r2, sl
 800e72c:	d107      	bne.n	800e73e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e72e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e732:	455a      	cmp	r2, fp
 800e734:	d103      	bne.n	800e73e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e736:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e73a:	454a      	cmp	r2, r9
 800e73c:	d06d      	beq.n	800e81a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e73e:	f1bb 0f00 	cmp.w	fp, #0
 800e742:	dd65      	ble.n	800e810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e744:	f1b9 0f00 	cmp.w	r9, #0
 800e748:	dd62      	ble.n	800e810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e74a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e74e:	fa1f f08a 	uxth.w	r0, sl
 800e752:	4552      	cmp	r2, sl
 800e754:	9000      	str	r0, [sp, #0]
 800e756:	da12      	bge.n	800e77e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e758:	9301      	str	r3, [sp, #4]
 800e75a:	9b00      	ldr	r3, [sp, #0]
 800e75c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e760:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e764:	1a9a      	subs	r2, r3, r2
 800e766:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e76a:	4631      	mov	r1, r6
 800e76c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e770:	4640      	mov	r0, r8
 800e772:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e776:	69ea      	ldr	r2, [r5, #28]
 800e778:	f7ff ff7a 	bl	800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e77c:	9b01      	ldr	r3, [sp, #4]
 800e77e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e782:	b29f      	uxth	r7, r3
 800e784:	429a      	cmp	r2, r3
 800e786:	da0d      	bge.n	800e7a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e788:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e78c:	1aba      	subs	r2, r7, r2
 800e78e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e792:	4631      	mov	r1, r6
 800e794:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e798:	4640      	mov	r0, r8
 800e79a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e79e:	69ea      	ldr	r2, [r5, #28]
 800e7a0:	f7ff ff66 	bl	800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7a4:	8822      	ldrh	r2, [r4, #0]
 800e7a6:	445f      	add	r7, fp
 800e7a8:	88a3      	ldrh	r3, [r4, #4]
 800e7aa:	b2bf      	uxth	r7, r7
 800e7ac:	4413      	add	r3, r2
 800e7ae:	b23a      	sxth	r2, r7
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	b219      	sxth	r1, r3
 800e7b4:	4291      	cmp	r1, r2
 800e7b6:	dd0d      	ble.n	800e7d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e7b8:	1bdb      	subs	r3, r3, r7
 800e7ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7be:	f8ad a012 	strh.w	sl, [sp, #18]
 800e7c2:	4631      	mov	r1, r6
 800e7c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e7ce:	69ea      	ldr	r2, [r5, #28]
 800e7d0:	f7ff ff4e 	bl	800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7d4:	88e2      	ldrh	r2, [r4, #6]
 800e7d6:	8863      	ldrh	r3, [r4, #2]
 800e7d8:	4413      	add	r3, r2
 800e7da:	9a00      	ldr	r2, [sp, #0]
 800e7dc:	444a      	add	r2, r9
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	fa1f f982 	uxth.w	r9, r2
 800e7e4:	b219      	sxth	r1, r3
 800e7e6:	fa0f f289 	sxth.w	r2, r9
 800e7ea:	428a      	cmp	r2, r1
 800e7ec:	da15      	bge.n	800e81a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e7ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e7f2:	eba3 0309 	sub.w	r3, r3, r9
 800e7f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e7fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e7fe:	4631      	mov	r1, r6
 800e800:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e804:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e808:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e80c:	69ea      	ldr	r2, [r5, #28]
 800e80e:	e001      	b.n	800e814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e810:	69ea      	ldr	r2, [r5, #28]
 800e812:	4621      	mov	r1, r4
 800e814:	4640      	mov	r0, r8
 800e816:	f7ff ff2b 	bl	800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e81a:	4628      	mov	r0, r5
 800e81c:	f7ff fe94 	bl	800e548 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e820:	6861      	ldr	r1, [r4, #4]
 800e822:	4602      	mov	r2, r0
 800e824:	4633      	mov	r3, r6
 800e826:	6820      	ldr	r0, [r4, #0]
 800e828:	c303      	stmia	r3!, {r0, r1}
 800e82a:	4611      	mov	r1, r2
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7fc fb21 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e832:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e836:	2b00      	cmp	r3, #0
 800e838:	f77f af33 	ble.w	800e6a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e83c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f77f af2e 	ble.w	800e6a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e846:	4628      	mov	r0, r5
 800e848:	f7ff fe9a 	bl	800e580 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e84c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e850:	1a18      	subs	r0, r3, r0
 800e852:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e856:	4628      	mov	r0, r5
 800e858:	f7ff fea6 	bl	800e5a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e85c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e860:	4631      	mov	r1, r6
 800e862:	1a18      	subs	r0, r3, r0
 800e864:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e868:	4628      	mov	r0, r5
 800e86a:	682b      	ldr	r3, [r5, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	4798      	blx	r3
 800e870:	e717      	b.n	800e6a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e872 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e872:	b570      	push	{r4, r5, r6, lr}
 800e874:	1d06      	adds	r6, r0, #4
 800e876:	b086      	sub	sp, #24
 800e878:	460c      	mov	r4, r1
 800e87a:	2300      	movs	r3, #0
 800e87c:	4631      	mov	r1, r6
 800e87e:	4605      	mov	r5, r0
 800e880:	a802      	add	r0, sp, #8
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	f7ff fc9e 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e888:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e88c:	8822      	ldrh	r2, [r4, #0]
 800e88e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e892:	1ad2      	subs	r2, r2, r3
 800e894:	8863      	ldrh	r3, [r4, #2]
 800e896:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e89a:	1a5b      	subs	r3, r3, r1
 800e89c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e8a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e8a4:	aa01      	add	r2, sp, #4
 800e8a6:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e8b0:	a904      	add	r1, sp, #16
 800e8b2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e8b6:	f7fc fbb5 	bl	800b024 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e8ba:	9a01      	ldr	r2, [sp, #4]
 800e8bc:	b11a      	cbz	r2, 800e8c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f7ff fed5 	bl	800e670 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e8c6:	b006      	add	sp, #24
 800e8c8:	bd70      	pop	{r4, r5, r6, pc}

0800e8ca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	b530      	push	{r4, r5, lr}
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	b085      	sub	sp, #20
 800e8d2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e8d6:	460d      	mov	r5, r1
 800e8d8:	466b      	mov	r3, sp
 800e8da:	6851      	ldr	r1, [r2, #4]
 800e8dc:	c303      	stmia	r3!, {r0, r1}
 800e8de:	4629      	mov	r1, r5
 800e8e0:	4668      	mov	r0, sp
 800e8e2:	f7fc fac7 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 800e8e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e8ea:	b12b      	cbz	r3, 800e8f8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e8ec:	4669      	mov	r1, sp
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f7ff ffbf 	bl	800e872 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e8f4:	b005      	add	sp, #20
 800e8f6:	bd30      	pop	{r4, r5, pc}
 800e8f8:	3404      	adds	r4, #4
 800e8fa:	a802      	add	r0, sp, #8
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f7ff fc61 	bl	800e1c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e902:	f8bd 3000 	ldrh.w	r3, [sp]
 800e906:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e90a:	4669      	mov	r1, sp
 800e90c:	4620      	mov	r0, r4
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e914:	f8ad 3000 	strh.w	r3, [sp]
 800e918:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e91c:	1a9b      	subs	r3, r3, r2
 800e91e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e922:	f7fc fb46 	bl	800afb2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e926:	e7e5      	b.n	800e8f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e928 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e928:	460b      	mov	r3, r1
 800e92a:	680a      	ldr	r2, [r1, #0]
 800e92c:	1d01      	adds	r1, r0, #4
 800e92e:	6992      	ldr	r2, [r2, #24]
 800e930:	4618      	mov	r0, r3
 800e932:	4710      	bx	r2

0800e934 <_ZN8touchgfx12TextProviderC1Ev>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	2500      	movs	r5, #0
 800e938:	2302      	movs	r3, #2
 800e93a:	4604      	mov	r4, r0
 800e93c:	220e      	movs	r2, #14
 800e93e:	7403      	strb	r3, [r0, #16]
 800e940:	4629      	mov	r1, r5
 800e942:	6145      	str	r5, [r0, #20]
 800e944:	7605      	strb	r5, [r0, #24]
 800e946:	83c5      	strh	r5, [r0, #30]
 800e948:	8405      	strh	r5, [r0, #32]
 800e94a:	86c5      	strh	r5, [r0, #54]	; 0x36
 800e94c:	8705      	strh	r5, [r0, #56]	; 0x38
 800e94e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800e950:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800e954:	e9c0 5500 	strd	r5, r5, [r0]
 800e958:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800e95c:	304c      	adds	r0, #76	; 0x4c
 800e95e:	f009 fad7 	bl	8017f10 <memset>
 800e962:	2301      	movs	r3, #1
 800e964:	4620      	mov	r0, r4
 800e966:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800e96a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800e96e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800e972:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800e976:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e97a:	f7f4 f841 	bl	8002a00 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e97e:	4620      	mov	r0, r4
 800e980:	bd38      	pop	{r3, r4, r5, pc}

0800e982 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e982:	b530      	push	{r4, r5, lr}
 800e984:	2500      	movs	r5, #0
 800e986:	2401      	movs	r4, #1
 800e988:	6843      	ldr	r3, [r0, #4]
 800e98a:	b913      	cbnz	r3, 800e992 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e98c:	6803      	ldr	r3, [r0, #0]
 800e98e:	b313      	cbz	r3, 800e9d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e990:	6043      	str	r3, [r0, #4]
 800e992:	7e03      	ldrb	r3, [r0, #24]
 800e994:	b143      	cbz	r3, 800e9a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e996:	6943      	ldr	r3, [r0, #20]
 800e998:	b12b      	cbz	r3, 800e9a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e99a:	881a      	ldrh	r2, [r3, #0]
 800e99c:	b11a      	cbz	r2, 800e9a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e99e:	1c9a      	adds	r2, r3, #2
 800e9a0:	6142      	str	r2, [r0, #20]
 800e9a2:	8818      	ldrh	r0, [r3, #0]
 800e9a4:	bd30      	pop	{r4, r5, pc}
 800e9a6:	7605      	strb	r5, [r0, #24]
 800e9a8:	6843      	ldr	r3, [r0, #4]
 800e9aa:	8819      	ldrh	r1, [r3, #0]
 800e9ac:	b199      	cbz	r1, 800e9d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e9ae:	1c9a      	adds	r2, r3, #2
 800e9b0:	2902      	cmp	r1, #2
 800e9b2:	6042      	str	r2, [r0, #4]
 800e9b4:	d1f5      	bne.n	800e9a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e9b6:	7c03      	ldrb	r3, [r0, #16]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d8e5      	bhi.n	800e988 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	3302      	adds	r3, #2
 800e9c0:	7402      	strb	r2, [r0, #16]
 800e9c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e9c6:	6143      	str	r3, [r0, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0dd      	beq.n	800e988 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d0da      	beq.n	800e988 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9d2:	7604      	strb	r4, [r0, #24]
 800e9d4:	e7d8      	b.n	800e988 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	e7e4      	b.n	800e9a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e9da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e9da:	6001      	str	r1, [r0, #0]
 800e9dc:	2100      	movs	r1, #0
 800e9de:	b430      	push	{r4, r5}
 800e9e0:	6041      	str	r1, [r0, #4]
 800e9e2:	6815      	ldr	r5, [r2, #0]
 800e9e4:	6085      	str	r5, [r0, #8]
 800e9e6:	6852      	ldr	r2, [r2, #4]
 800e9e8:	6443      	str	r3, [r0, #68]	; 0x44
 800e9ea:	9b02      	ldr	r3, [sp, #8]
 800e9ec:	60c2      	str	r2, [r0, #12]
 800e9ee:	7401      	strb	r1, [r0, #16]
 800e9f0:	6141      	str	r1, [r0, #20]
 800e9f2:	7601      	strb	r1, [r0, #24]
 800e9f4:	8701      	strh	r1, [r0, #56]	; 0x38
 800e9f6:	8401      	strh	r1, [r0, #32]
 800e9f8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800e9fc:	6483      	str	r3, [r0, #72]	; 0x48
 800e9fe:	bc30      	pop	{r4, r5}
 800ea00:	f7f3 bffe 	b.w	8002a00 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800ea04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800ea04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea06:	4605      	mov	r5, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	b1f1      	cbz	r1, 800ea4a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800ea0c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800ea10:	460b      	mov	r3, r1
 800ea12:	f101 0708 	add.w	r7, r1, #8
 800ea16:	4622      	mov	r2, r4
 800ea18:	6818      	ldr	r0, [r3, #0]
 800ea1a:	3308      	adds	r3, #8
 800ea1c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ea20:	4626      	mov	r6, r4
 800ea22:	42bb      	cmp	r3, r7
 800ea24:	c603      	stmia	r6!, {r0, r1}
 800ea26:	4634      	mov	r4, r6
 800ea28:	d1f6      	bne.n	800ea18 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800ea2a:	6818      	ldr	r0, [r3, #0]
 800ea2c:	6030      	str	r0, [r6, #0]
 800ea2e:	4610      	mov	r0, r2
 800ea30:	889b      	ldrh	r3, [r3, #4]
 800ea32:	80b3      	strh	r3, [r6, #4]
 800ea34:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800ea38:	015b      	lsls	r3, r3, #5
 800ea3a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ea3e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800ea42:	430b      	orrs	r3, r1
 800ea44:	425b      	negs	r3, r3
 800ea46:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800ea4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	460c      	mov	r4, r1
 800ea50:	6811      	ldr	r1, [r2, #0]
 800ea52:	4610      	mov	r0, r2
 800ea54:	68cd      	ldr	r5, [r1, #12]
 800ea56:	4619      	mov	r1, r3
 800ea58:	47a8      	blx	r5
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	bf08      	it	eq
 800ea5e:	4620      	moveq	r0, r4
 800ea60:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	4615      	mov	r5, r2
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	b93a      	cbnz	r2, 800ea7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800ea6e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ea72:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800ea76:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea7e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800ea82:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800ea86:	8893      	ldrh	r3, [r2, #4]
 800ea88:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800ea8c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ea90:	79ee      	ldrb	r6, [r5, #7]
 800ea92:	4316      	orrs	r6, r2
 800ea94:	19da      	adds	r2, r3, r7
 800ea96:	b291      	uxth	r1, r2
 800ea98:	b2b7      	uxth	r7, r6
 800ea9a:	291d      	cmp	r1, #29
 800ea9c:	d87b      	bhi.n	800eb96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	10f6      	asrs	r6, r6, #3
 800eaa2:	408a      	lsls	r2, r1
 800eaa4:	4974      	ldr	r1, [pc, #464]	; (800ec78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800eaa6:	420a      	tst	r2, r1
 800eaa8:	d12e      	bne.n	800eb08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800eaaa:	f412 7f60 	tst.w	r2, #896	; 0x380
 800eaae:	d072      	beq.n	800eb96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800eab0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800eab4:	462b      	mov	r3, r5
 800eab6:	f105 0e08 	add.w	lr, r5, #8
 800eaba:	4615      	mov	r5, r2
 800eabc:	6818      	ldr	r0, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800eac4:	4694      	mov	ip, r2
 800eac6:	4573      	cmp	r3, lr
 800eac8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800eacc:	4662      	mov	r2, ip
 800eace:	d1f5      	bne.n	800eabc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800ead0:	6818      	ldr	r0, [r3, #0]
 800ead2:	f8cc 0000 	str.w	r0, [ip]
 800ead6:	889b      	ldrh	r3, [r3, #4]
 800ead8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800eadc:	b2b3      	uxth	r3, r6
 800eade:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800eae2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800eae6:	1aca      	subs	r2, r1, r3
 800eae8:	1bcf      	subs	r7, r1, r7
 800eaea:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800eaee:	b292      	uxth	r2, r2
 800eaf0:	1afb      	subs	r3, r7, r3
 800eaf2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800eaf6:	10d2      	asrs	r2, r2, #3
 800eaf8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800eafc:	4302      	orrs	r2, r0
 800eafe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800eb02:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800eb06:	e7b8      	b.n	800ea7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800eb08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800eb0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800eb0e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800eb10:	f640 6333 	movw	r3, #3635	; 0xe33
 800eb14:	4299      	cmp	r1, r3
 800eb16:	d110      	bne.n	800eb3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800eb18:	6803      	ldr	r3, [r0, #0]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	4798      	blx	r3
 800eb1e:	7b41      	ldrb	r1, [r0, #13]
 800eb20:	00cb      	lsls	r3, r1, #3
 800eb22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800eb26:	7a03      	ldrb	r3, [r0, #8]
 800eb28:	0648      	lsls	r0, r1, #25
 800eb2a:	ea43 0302 	orr.w	r3, r3, r2
 800eb2e:	bf44      	itt	mi
 800eb30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800eb34:	b21b      	sxthmi	r3, r3
 800eb36:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb3a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800eb3e:	462a      	mov	r2, r5
 800eb40:	f105 0c08 	add.w	ip, r5, #8
 800eb44:	443b      	add	r3, r7
 800eb46:	4433      	add	r3, r6
 800eb48:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4635      	mov	r5, r6
 800eb50:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800eb54:	6810      	ldr	r0, [r2, #0]
 800eb56:	3208      	adds	r2, #8
 800eb58:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	4562      	cmp	r2, ip
 800eb60:	c703      	stmia	r7!, {r0, r1}
 800eb62:	463e      	mov	r6, r7
 800eb64:	d1f6      	bne.n	800eb54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800eb66:	6810      	ldr	r0, [r2, #0]
 800eb68:	6038      	str	r0, [r7, #0]
 800eb6a:	8892      	ldrh	r2, [r2, #4]
 800eb6c:	80ba      	strh	r2, [r7, #4]
 800eb6e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eb72:	10db      	asrs	r3, r3, #3
 800eb74:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eb78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eb80:	4313      	orrs	r3, r2
 800eb82:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800eb86:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800eb8a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800eb8e:	1a9b      	subs	r3, r3, r2
 800eb90:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800eb94:	e771      	b.n	800ea7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800eb96:	f023 0204 	bic.w	r2, r3, #4
 800eb9a:	f640 611b 	movw	r1, #3611	; 0xe1b
 800eb9e:	428a      	cmp	r2, r1
 800eba0:	d003      	beq.n	800ebaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800eba2:	f640 621d 	movw	r2, #3613	; 0xe1d
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d120      	bne.n	800ebec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	4602      	mov	r2, r0
 800ebae:	4629      	mov	r1, r5
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	f7ff ff4a 	bl	800ea4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ebb8:	7b41      	ldrb	r1, [r0, #13]
 800ebba:	00cb      	lsls	r3, r1, #3
 800ebbc:	0649      	lsls	r1, r1, #25
 800ebbe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ebc2:	7a03      	ldrb	r3, [r0, #8]
 800ebc4:	ea43 0302 	orr.w	r3, r3, r2
 800ebc8:	bf44      	itt	mi
 800ebca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ebce:	b21b      	sxthmi	r3, r3
 800ebd0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ebd4:	7b6b      	ldrb	r3, [r5, #13]
 800ebd6:	7aaa      	ldrb	r2, [r5, #10]
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	115a      	asrs	r2, r3, #5
 800ebe2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800ebe6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ebea:	e035      	b.n	800ec58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800ebec:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800ebf0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800ebf4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800ebf8:	7a2a      	ldrb	r2, [r5, #8]
 800ebfa:	ea42 0201 	orr.w	r2, r2, r1
 800ebfe:	f640 6109 	movw	r1, #3593	; 0xe09
 800ec02:	bf1c      	itt	ne
 800ec04:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800ec08:	b212      	sxthne	r2, r2
 800ec0a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800ec0e:	f023 0210 	bic.w	r2, r3, #16
 800ec12:	428a      	cmp	r2, r1
 800ec14:	d003      	beq.n	800ec1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800ec16:	f640 6213 	movw	r2, #3603	; 0xe13
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d129      	bne.n	800ec72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800ec1e:	7b6e      	ldrb	r6, [r5, #13]
 800ec20:	4629      	mov	r1, r5
 800ec22:	0076      	lsls	r6, r6, #1
 800ec24:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800ec28:	7aae      	ldrb	r6, [r5, #10]
 800ec2a:	4316      	orrs	r6, r2
 800ec2c:	f640 6213 	movw	r2, #3603	; 0xe13
 800ec30:	4293      	cmp	r3, r2
 800ec32:	4602      	mov	r2, r0
 800ec34:	4620      	mov	r0, r4
 800ec36:	bf16      	itet	ne
 800ec38:	f103 33ff 	addne.w	r3, r3, #4294967295
 800ec3c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800ec40:	b29b      	uxthne	r3, r3
 800ec42:	f7ff ff03 	bl	800ea4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ec46:	7b43      	ldrb	r3, [r0, #13]
 800ec48:	7a82      	ldrb	r2, [r0, #10]
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec50:	4313      	orrs	r3, r2
 800ec52:	1af6      	subs	r6, r6, r3
 800ec54:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800ec58:	7b69      	ldrb	r1, [r5, #13]
 800ec5a:	00cb      	lsls	r3, r1, #3
 800ec5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ec60:	7a2b      	ldrb	r3, [r5, #8]
 800ec62:	4313      	orrs	r3, r2
 800ec64:	064a      	lsls	r2, r1, #25
 800ec66:	bf44      	itt	mi
 800ec68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ec6c:	b21b      	sxthmi	r3, r3
 800ec6e:	1bdb      	subs	r3, r3, r7
 800ec70:	e747      	b.n	800eb02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ec72:	2300      	movs	r3, #0
 800ec74:	e7b7      	b.n	800ebe6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 800ec76:	bf00      	nop
 800ec78:	3fc00079 	.word	0x3fc00079

0800ec7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ec7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec80:	4604      	mov	r4, r0
 800ec82:	b942      	cbnz	r2, 800ec96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ec84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec88:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800ec8c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800ec90:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800ec94:	e047      	b.n	800ed26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ec96:	7b51      	ldrb	r1, [r2, #13]
 800ec98:	8893      	ldrh	r3, [r2, #4]
 800ec9a:	010d      	lsls	r5, r1, #4
 800ec9c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800eca0:	79d5      	ldrb	r5, [r2, #7]
 800eca2:	4305      	orrs	r5, r0
 800eca4:	2d04      	cmp	r5, #4
 800eca6:	bfcc      	ite	gt
 800eca8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ecac:	f04f 0e01 	movle.w	lr, #1
 800ecb0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800ecb4:	f200 80ab 	bhi.w	800ee0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800ecb8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800ecbc:	4283      	cmp	r3, r0
 800ecbe:	d216      	bcs.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecc0:	f240 605b 	movw	r0, #1627	; 0x65b
 800ecc4:	4283      	cmp	r3, r0
 800ecc6:	d859      	bhi.n	800ed7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800ecc8:	f240 6057 	movw	r0, #1623	; 0x657
 800eccc:	4283      	cmp	r3, r0
 800ecce:	d20e      	bcs.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecd0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800ecd4:	d24a      	bcs.n	800ed6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800ecd6:	f240 604e 	movw	r0, #1614	; 0x64e
 800ecda:	4283      	cmp	r3, r0
 800ecdc:	d207      	bcs.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecde:	f240 601a 	movw	r0, #1562	; 0x61a
 800ece2:	4283      	cmp	r3, r0
 800ece4:	d02a      	beq.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ece6:	d821      	bhi.n	800ed2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800ece8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800ecec:	d35b      	bcc.n	800eda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ecee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800ecf2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ecf6:	f040 80d0 	bne.w	800ee9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ecfa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800ecfe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ed02:	f040 80ca 	bne.w	800ee9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ed06:	00cb      	lsls	r3, r1, #3
 800ed08:	0649      	lsls	r1, r1, #25
 800ed0a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed0e:	7a13      	ldrb	r3, [r2, #8]
 800ed10:	ea43 0300 	orr.w	r3, r3, r0
 800ed14:	bf44      	itt	mi
 800ed16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed1a:	b21b      	sxthmi	r3, r3
 800ed1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ed20:	1b5d      	subs	r5, r3, r5
 800ed22:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800ed26:	4610      	mov	r0, r2
 800ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2c:	f240 604b 	movw	r0, #1611	; 0x64b
 800ed30:	4283      	cmp	r3, r0
 800ed32:	d338      	bcc.n	800eda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ed34:	f240 604c 	movw	r0, #1612	; 0x64c
 800ed38:	4283      	cmp	r3, r0
 800ed3a:	d9d8      	bls.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed3c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800ed40:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800ed44:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ed48:	f040 80f3 	bne.w	800ef32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed4c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ed50:	f040 80ef 	bne.w	800ef32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ed54:	00cb      	lsls	r3, r1, #3
 800ed56:	064e      	lsls	r6, r1, #25
 800ed58:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800ed5c:	7a13      	ldrb	r3, [r2, #8]
 800ed5e:	ea43 0300 	orr.w	r3, r3, r0
 800ed62:	bf44      	itt	mi
 800ed64:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ed68:	b21b      	sxthmi	r3, r3
 800ed6a:	e7d9      	b.n	800ed20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ed6c:	f240 6054 	movw	r0, #1620	; 0x654
 800ed70:	4283      	cmp	r3, r0
 800ed72:	d8e3      	bhi.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed74:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800ed78:	d9e0      	bls.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed7a:	e7b8      	b.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed7c:	f240 6074 	movw	r0, #1652	; 0x674
 800ed80:	4283      	cmp	r3, r0
 800ed82:	d0b4      	beq.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed84:	d82d      	bhi.n	800ede2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ed86:	f240 605e 	movw	r0, #1630	; 0x65e
 800ed8a:	4283      	cmp	r3, r0
 800ed8c:	d804      	bhi.n	800ed98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ed8e:	f240 605d 	movw	r0, #1629	; 0x65d
 800ed92:	4283      	cmp	r3, r0
 800ed94:	d3d2      	bcc.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed96:	e7aa      	b.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed98:	f240 605f 	movw	r0, #1631	; 0x65f
 800ed9c:	4283      	cmp	r3, r0
 800ed9e:	d0cd      	beq.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eda0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800eda4:	d0a3      	beq.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eda6:	00cb      	lsls	r3, r1, #3
 800eda8:	0649      	lsls	r1, r1, #25
 800edaa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800edae:	7a13      	ldrb	r3, [r2, #8]
 800edb0:	ea43 0300 	orr.w	r3, r3, r0
 800edb4:	bf44      	itt	mi
 800edb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800edba:	b21b      	sxthmi	r3, r3
 800edbc:	1b5d      	subs	r5, r3, r5
 800edbe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800edc2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800edc6:	7b53      	ldrb	r3, [r2, #13]
 800edc8:	015b      	lsls	r3, r3, #5
 800edca:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800edce:	7993      	ldrb	r3, [r2, #6]
 800edd0:	430b      	orrs	r3, r1
 800edd2:	2105      	movs	r1, #5
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	fb93 f3f1 	sdiv	r3, r3, r1
 800edda:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800edde:	440b      	add	r3, r1
 800ede0:	e756      	b.n	800ec90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800ede2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800ede6:	4283      	cmp	r3, r0
 800ede8:	d809      	bhi.n	800edfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800edea:	f240 60df 	movw	r0, #1759	; 0x6df
 800edee:	4283      	cmp	r3, r0
 800edf0:	f4bf af7d 	bcs.w	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edf4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800edf8:	2b05      	cmp	r3, #5
 800edfa:	d8d4      	bhi.n	800eda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800edfc:	e777      	b.n	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edfe:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800ee02:	4283      	cmp	r3, r0
 800ee04:	d09a      	beq.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee06:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800ee0a:	4283      	cmp	r3, r0
 800ee0c:	e7ca      	b.n	800eda4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800ee0e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800ee12:	d22b      	bcs.n	800ee6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ee14:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800ee18:	4283      	cmp	r3, r0
 800ee1a:	d28f      	bcs.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee1c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ee20:	4283      	cmp	r3, r0
 800ee22:	d816      	bhi.n	800ee52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800ee24:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800ee28:	4283      	cmp	r3, r0
 800ee2a:	f4bf af60 	bcs.w	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee2e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800ee32:	4283      	cmp	r3, r0
 800ee34:	d80a      	bhi.n	800ee4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ee36:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800ee3a:	4283      	cmp	r3, r0
 800ee3c:	f4bf af57 	bcs.w	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee40:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800ee44:	4283      	cmp	r3, r0
 800ee46:	f43f af79 	beq.w	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee4a:	e7ac      	b.n	800eda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ee4c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800ee50:	e7f8      	b.n	800ee44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ee52:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800ee56:	4283      	cmp	r3, r0
 800ee58:	d802      	bhi.n	800ee60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ee5a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ee5e:	e798      	b.n	800ed92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ee60:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800ee64:	4283      	cmp	r3, r0
 800ee66:	f47f af42 	bne.w	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee6a:	e767      	b.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee6c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800ee70:	4283      	cmp	r3, r0
 800ee72:	f43f af63 	beq.w	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee76:	d802      	bhi.n	800ee7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ee78:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800ee7c:	e7f2      	b.n	800ee64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ee7e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800ee82:	4283      	cmp	r3, r0
 800ee84:	d805      	bhi.n	800ee92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ee86:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800ee8a:	4283      	cmp	r3, r0
 800ee8c:	f4ff af2f 	bcc.w	800ecee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee90:	e754      	b.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee92:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800ee96:	4283      	cmp	r3, r0
 800ee98:	e7af      	b.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ee9a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ee9e:	4617      	mov	r7, r2
 800eea0:	f102 0808 	add.w	r8, r2, #8
 800eea4:	4666      	mov	r6, ip
 800eea6:	6838      	ldr	r0, [r7, #0]
 800eea8:	3708      	adds	r7, #8
 800eeaa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800eeae:	46e6      	mov	lr, ip
 800eeb0:	4547      	cmp	r7, r8
 800eeb2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800eeb6:	46f4      	mov	ip, lr
 800eeb8:	d1f5      	bne.n	800eea6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800eeba:	6838      	ldr	r0, [r7, #0]
 800eebc:	f8ce 0000 	str.w	r0, [lr]
 800eec0:	88b9      	ldrh	r1, [r7, #4]
 800eec2:	f8ae 1004 	strh.w	r1, [lr, #4]
 800eec6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800eeca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800eece:	d009      	beq.n	800eee4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800eed0:	7b51      	ldrb	r1, [r2, #13]
 800eed2:	7992      	ldrb	r2, [r2, #6]
 800eed4:	0149      	lsls	r1, r1, #5
 800eed6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800eeda:	4311      	orrs	r1, r2
 800eedc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800eee0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800eee4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800eee8:	b2ad      	uxth	r5, r5
 800eeea:	d00d      	beq.n	800ef08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800eeec:	442b      	add	r3, r5
 800eeee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800eef8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eefc:	10db      	asrs	r3, r3, #3
 800eefe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef02:	4313      	orrs	r3, r2
 800ef04:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800ef08:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ef0c:	00cb      	lsls	r3, r1, #3
 800ef0e:	064f      	lsls	r7, r1, #25
 800ef10:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ef14:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800ef18:	ea43 0302 	orr.w	r3, r3, r2
 800ef1c:	bf44      	itt	mi
 800ef1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ef22:	b21b      	sxthmi	r3, r3
 800ef24:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ef28:	1b5b      	subs	r3, r3, r5
 800ef2a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ef2e:	4632      	mov	r2, r6
 800ef30:	e6f9      	b.n	800ed26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ef32:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800ef36:	4617      	mov	r7, r2
 800ef38:	f102 0908 	add.w	r9, r2, #8
 800ef3c:	4666      	mov	r6, ip
 800ef3e:	6838      	ldr	r0, [r7, #0]
 800ef40:	3708      	adds	r7, #8
 800ef42:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ef46:	46e0      	mov	r8, ip
 800ef48:	454f      	cmp	r7, r9
 800ef4a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ef4e:	46c4      	mov	ip, r8
 800ef50:	d1f5      	bne.n	800ef3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ef52:	6838      	ldr	r0, [r7, #0]
 800ef54:	f8c8 0000 	str.w	r0, [r8]
 800ef58:	88b9      	ldrh	r1, [r7, #4]
 800ef5a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ef5e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800ef62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800ef66:	d009      	beq.n	800ef7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800ef68:	7b51      	ldrb	r1, [r2, #13]
 800ef6a:	7992      	ldrb	r2, [r2, #6]
 800ef6c:	0149      	lsls	r1, r1, #5
 800ef6e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ef72:	4311      	orrs	r1, r2
 800ef74:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ef78:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800ef7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ef80:	d00e      	beq.n	800efa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ef82:	eba3 030e 	sub.w	r3, r3, lr
 800ef86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800ef94:	10db      	asrs	r3, r3, #3
 800ef96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800efa0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800efa4:	00cb      	lsls	r3, r1, #3
 800efa6:	0648      	lsls	r0, r1, #25
 800efa8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800efac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800efb0:	ea43 0302 	orr.w	r3, r3, r2
 800efb4:	bf44      	itt	mi
 800efb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800efba:	b21b      	sxthmi	r3, r3
 800efbc:	1b5d      	subs	r5, r3, r5
 800efbe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800efc2:	e7b4      	b.n	800ef2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800efc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	461e      	mov	r6, r3
 800efca:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800efcc:	4604      	mov	r4, r0
 800efce:	4617      	mov	r7, r2
 800efd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800efd4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800efd8:	f7f3 fcc0 	bl	800295c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800efdc:	4605      	mov	r5, r0
 800efde:	b918      	cbnz	r0, 800efe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800efe0:	6030      	str	r0, [r6, #0]
 800efe2:	4628      	mov	r0, r5
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	4601      	mov	r1, r0
 800efec:	4638      	mov	r0, r7
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	4798      	blx	r3
 800eff2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800eff6:	4602      	mov	r2, r0
 800eff8:	6030      	str	r0, [r6, #0]
 800effa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800effe:	d213      	bcs.n	800f028 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f000:	4643      	mov	r3, r8
 800f002:	4639      	mov	r1, r7
 800f004:	4620      	mov	r0, r4
 800f006:	f7ff fe39 	bl	800ec7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f00a:	6030      	str	r0, [r6, #0]
 800f00c:	6833      	ldr	r3, [r6, #0]
 800f00e:	b143      	cbz	r3, 800f022 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f010:	7b5a      	ldrb	r2, [r3, #13]
 800f012:	7a9b      	ldrb	r3, [r3, #10]
 800f014:	0052      	lsls	r2, r2, #1
 800f016:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f01a:	4313      	orrs	r3, r2
 800f01c:	bf0c      	ite	eq
 800f01e:	2301      	moveq	r3, #1
 800f020:	2300      	movne	r3, #0
 800f022:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800f026:	e7dc      	b.n	800efe2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f028:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	2b7f      	cmp	r3, #127	; 0x7f
 800f030:	d804      	bhi.n	800f03c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f032:	4639      	mov	r1, r7
 800f034:	4620      	mov	r0, r4
 800f036:	f7ff fd15 	bl	800ea64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f03a:	e7e6      	b.n	800f00a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f03c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800f040:	2b00      	cmp	r3, #0
 800f042:	d0e3      	beq.n	800f00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f044:	f640 1302 	movw	r3, #2306	; 0x902
 800f048:	429d      	cmp	r5, r3
 800f04a:	d1df      	bne.n	800f00c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f04c:	4601      	mov	r1, r0
 800f04e:	4620      	mov	r0, r4
 800f050:	f7ff fcd8 	bl	800ea04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f054:	e7d9      	b.n	800f00a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f056 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f056:	b510      	push	{r4, lr}
 800f058:	4604      	mov	r4, r0
 800f05a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800f05e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f060:	b1e1      	cbz	r1, 800f09c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f062:	2b0a      	cmp	r3, #10
 800f064:	d02d      	beq.n	800f0c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f066:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800f068:	3901      	subs	r1, #1
 800f06a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f06e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800f070:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800f074:	1c51      	adds	r1, r2, #1
 800f076:	b289      	uxth	r1, r1
 800f078:	2901      	cmp	r1, #1
 800f07a:	bf8a      	itet	hi
 800f07c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f080:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800f082:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	8722      	strh	r2, [r4, #56]	; 0x38
 800f088:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f08a:	4413      	add	r3, r2
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	2b09      	cmp	r3, #9
 800f090:	bf88      	it	hi
 800f092:	3b0a      	subhi	r3, #10
 800f094:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f098:	8458      	strh	r0, [r3, #34]	; 0x22
 800f09a:	e7de      	b.n	800f05a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f09c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f09e:	2b0a      	cmp	r3, #10
 800f0a0:	d00f      	beq.n	800f0c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f7ff fc6d 	bl	800e982 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f0a8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f0aa:	1c5a      	adds	r2, r3, #1
 800f0ac:	8722      	strh	r2, [r4, #56]	; 0x38
 800f0ae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	2b09      	cmp	r3, #9
 800f0b6:	bf88      	it	hi
 800f0b8:	3b0a      	subhi	r3, #10
 800f0ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f0be:	8458      	strh	r0, [r3, #34]	; 0x22
 800f0c0:	e7ec      	b.n	800f09c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800f0c2:	bd10      	pop	{r4, pc}

0800f0c4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f0ce:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800f0d0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800f0d2:	3a01      	subs	r2, #1
 800f0d4:	8702      	strh	r2, [r0, #56]	; 0x38
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	b292      	uxth	r2, r2
 800f0da:	2a09      	cmp	r2, #9
 800f0dc:	bf8a      	itet	hi
 800f0de:	3b09      	subhi	r3, #9
 800f0e0:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800f0e2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800f0e4:	f7ff ffb7 	bl	800f056 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f0e8:	8c23      	ldrh	r3, [r4, #32]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	bf9c      	itt	ls
 800f0ee:	3301      	addls	r3, #1
 800f0f0:	8423      	strhls	r3, [r4, #32]
 800f0f2:	8be3      	ldrh	r3, [r4, #30]
 800f0f4:	b90b      	cbnz	r3, 800f0fa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	83e3      	strh	r3, [r4, #30]
 800f0fa:	8be3      	ldrh	r3, [r4, #30]
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	3b01      	subs	r3, #1
 800f100:	b29b      	uxth	r3, r3
 800f102:	83e3      	strh	r3, [r4, #30]
 800f104:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f108:	8365      	strh	r5, [r4, #26]
 800f10a:	bd38      	pop	{r3, r4, r5, pc}

0800f10c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f10c:	428a      	cmp	r2, r1
 800f10e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f112:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800f114:	d932      	bls.n	800f17c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800f116:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800f118:	1a54      	subs	r4, r2, r1
 800f11a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800f11e:	19ee      	adds	r6, r5, r7
 800f120:	fa1f fe84 	uxth.w	lr, r4
 800f124:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800f128:	3e01      	subs	r6, #1
 800f12a:	b2b4      	uxth	r4, r6
 800f12c:	eba4 090e 	sub.w	r9, r4, lr
 800f130:	fa1f f989 	uxth.w	r9, r9
 800f134:	2c09      	cmp	r4, #9
 800f136:	4626      	mov	r6, r4
 800f138:	bf88      	it	hi
 800f13a:	f1a4 060a 	subhi.w	r6, r4, #10
 800f13e:	f1bc 0f00 	cmp.w	ip, #0
 800f142:	f104 34ff 	add.w	r4, r4, #4294967295
 800f146:	bf08      	it	eq
 800f148:	f04f 0c02 	moveq.w	ip, #2
 800f14c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f150:	b2a4      	uxth	r4, r4
 800f152:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f156:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800f15a:	454c      	cmp	r4, r9
 800f15c:	fa1f fc8c 	uxth.w	ip, ip
 800f160:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f164:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800f168:	d1e4      	bne.n	800f134 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f16a:	eba5 050e 	sub.w	r5, r5, lr
 800f16e:	eb0e 0408 	add.w	r4, lr, r8
 800f172:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800f176:	8705      	strh	r5, [r0, #56]	; 0x38
 800f178:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800f17c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800f17e:	250a      	movs	r5, #10
 800f180:	1a64      	subs	r4, r4, r1
 800f182:	4439      	add	r1, r7
 800f184:	b289      	uxth	r1, r1
 800f186:	8704      	strh	r4, [r0, #56]	; 0x38
 800f188:	2909      	cmp	r1, #9
 800f18a:	bf88      	it	hi
 800f18c:	390a      	subhi	r1, #10
 800f18e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f190:	b18a      	cbz	r2, 800f1b6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800f192:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800f194:	3a01      	subs	r2, #1
 800f196:	3101      	adds	r1, #1
 800f198:	b292      	uxth	r2, r2
 800f19a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f19e:	8701      	strh	r1, [r0, #56]	; 0x38
 800f1a0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f1a2:	b901      	cbnz	r1, 800f1a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800f1a4:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f1a6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800f1a8:	3901      	subs	r1, #1
 800f1aa:	b289      	uxth	r1, r1
 800f1ac:	86c1      	strh	r1, [r0, #54]	; 0x36
 800f1ae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f1b2:	844c      	strh	r4, [r1, #34]	; 0x22
 800f1b4:	e7ec      	b.n	800f190 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800f1b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ba:	f7ff bf4c 	b.w	800f056 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f1be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f1be:	b570      	push	{r4, r5, r6, lr}
 800f1c0:	2500      	movs	r5, #0
 800f1c2:	4295      	cmp	r5, r2
 800f1c4:	d011      	beq.n	800f1ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f1c6:	8bc4      	ldrh	r4, [r0, #30]
 800f1c8:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f1cc:	4414      	add	r4, r2
 800f1ce:	3c01      	subs	r4, #1
 800f1d0:	1b64      	subs	r4, r4, r5
 800f1d2:	b2a4      	uxth	r4, r4
 800f1d4:	2c01      	cmp	r4, #1
 800f1d6:	bf88      	it	hi
 800f1d8:	3c02      	subhi	r4, #2
 800f1da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f1de:	8b64      	ldrh	r4, [r4, #26]
 800f1e0:	42b4      	cmp	r4, r6
 800f1e2:	d117      	bne.n	800f214 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f1e4:	3501      	adds	r5, #1
 800f1e6:	b2ad      	uxth	r5, r5
 800f1e8:	e7eb      	b.n	800f1c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f1ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f1ee:	2400      	movs	r4, #0
 800f1f0:	4413      	add	r3, r2
 800f1f2:	b2a2      	uxth	r2, r4
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	da0f      	bge.n	800f218 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f1f8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800f1fa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f1fe:	3401      	adds	r4, #1
 800f200:	4432      	add	r2, r6
 800f202:	b292      	uxth	r2, r2
 800f204:	2a09      	cmp	r2, #9
 800f206:	bf88      	it	hi
 800f208:	3a0a      	subhi	r2, #10
 800f20a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f20e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f210:	42aa      	cmp	r2, r5
 800f212:	d0ee      	beq.n	800f1f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f214:	2000      	movs	r0, #0
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	2001      	movs	r0, #1
 800f21a:	e7fc      	b.n	800f216 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f21c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	4605      	mov	r5, r0
 800f222:	4616      	mov	r6, r2
 800f224:	1c8c      	adds	r4, r1, #2
 800f226:	8809      	ldrh	r1, [r1, #0]
 800f228:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f22c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f230:	42b3      	cmp	r3, r6
 800f232:	d124      	bne.n	800f27e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f234:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f238:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f23c:	f001 070f 	and.w	r7, r1, #15
 800f240:	4652      	mov	r2, sl
 800f242:	f8cd 8000 	str.w	r8, [sp]
 800f246:	464b      	mov	r3, r9
 800f248:	4621      	mov	r1, r4
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7ff ffb7 	bl	800f1be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f250:	4683      	mov	fp, r0
 800f252:	b168      	cbz	r0, 800f270 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f254:	eb0a 0109 	add.w	r1, sl, r9
 800f258:	463a      	mov	r2, r7
 800f25a:	4628      	mov	r0, r5
 800f25c:	4441      	add	r1, r8
 800f25e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f262:	4649      	mov	r1, r9
 800f264:	f7ff ff52 	bl	800f10c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f268:	4658      	mov	r0, fp
 800f26a:	b003      	add	sp, #12
 800f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f270:	eb07 010a 	add.w	r1, r7, sl
 800f274:	4449      	add	r1, r9
 800f276:	4441      	add	r1, r8
 800f278:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f27c:	e7d2      	b.n	800f224 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f27e:	f04f 0b00 	mov.w	fp, #0
 800f282:	e7f1      	b.n	800f268 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f284 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	8810      	ldrh	r0, [r2, #0]
 800f288:	4298      	cmp	r0, r3
 800f28a:	d817      	bhi.n	800f2bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f28c:	1e48      	subs	r0, r1, #1
 800f28e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f292:	4298      	cmp	r0, r3
 800f294:	d312      	bcc.n	800f2bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f296:	2400      	movs	r4, #0
 800f298:	428c      	cmp	r4, r1
 800f29a:	d20f      	bcs.n	800f2bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f29c:	1860      	adds	r0, r4, r1
 800f29e:	1040      	asrs	r0, r0, #1
 800f2a0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f2a4:	0085      	lsls	r5, r0, #2
 800f2a6:	42b3      	cmp	r3, r6
 800f2a8:	d902      	bls.n	800f2b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	b284      	uxth	r4, r0
 800f2ae:	e7f3      	b.n	800f298 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f2b0:	d201      	bcs.n	800f2b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f2b2:	b281      	uxth	r1, r0
 800f2b4:	e7f0      	b.n	800f298 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f2b6:	442a      	add	r2, r5
 800f2b8:	8850      	ldrh	r0, [r2, #2]
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e7fc      	b.n	800f2ba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f2c0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	260b      	movs	r6, #11
 800f2ca:	886f      	ldrh	r7, [r5, #2]
 800f2cc:	087f      	lsrs	r7, r7, #1
 800f2ce:	3e01      	subs	r6, #1
 800f2d0:	d013      	beq.n	800f2fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f2d4:	462a      	mov	r2, r5
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	4620      	mov	r0, r4
 800f2da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f2de:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800f2e2:	4643      	mov	r3, r8
 800f2e4:	f7ff ffce 	bl	800f284 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f2e8:	b138      	cbz	r0, 800f2fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f2ea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f2ee:	4642      	mov	r2, r8
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7ff ff93 	bl	800f21c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d1e9      	bne.n	800f2ce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	694a      	ldr	r2, [r1, #20]
 800f304:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800f306:	684b      	ldr	r3, [r1, #4]
 800f308:	1b54      	subs	r4, r2, r5
 800f30a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800f30c:	f000 8106 	beq.w	800f51c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f310:	1b9b      	subs	r3, r3, r6
 800f312:	d003      	beq.n	800f31c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f314:	4363      	muls	r3, r4
 800f316:	2210      	movs	r2, #16
 800f318:	fb93 f3f2 	sdiv	r3, r3, r2
 800f31c:	680c      	ldr	r4, [r1, #0]
 800f31e:	698a      	ldr	r2, [r1, #24]
 800f320:	1b65      	subs	r5, r4, r5
 800f322:	f000 80fd 	beq.w	800f520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f326:	1b92      	subs	r2, r2, r6
 800f328:	d003      	beq.n	800f332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f32a:	436a      	muls	r2, r5
 800f32c:	2410      	movs	r4, #16
 800f32e:	fb92 f2f4 	sdiv	r2, r2, r4
 800f332:	1a9b      	subs	r3, r3, r2
 800f334:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800f55c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f33c:	460a      	mov	r2, r1
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	f100 040c 	add.w	r4, r0, #12
 800f346:	4603      	mov	r3, r0
 800f348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f34c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f350:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f354:	eeb1 6a43 	vneg.f32	s12, s6
 800f358:	edd2 7a02 	vldr	s15, [r2, #8]
 800f35c:	3214      	adds	r2, #20
 800f35e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f362:	ece3 6a01 	vstmia	r3!, {s13}
 800f366:	429c      	cmp	r4, r3
 800f368:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f36c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f370:	edc3 7a02 	vstr	s15, [r3, #8]
 800f374:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f378:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f37c:	edc3 7a05 	vstr	s15, [r3, #20]
 800f380:	d1ea      	bne.n	800f358 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f382:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f384:	698b      	ldr	r3, [r1, #24]
 800f386:	edd0 4a02 	vldr	s9, [r0, #8]
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	edd0 3a00 	vldr	s7, [r0]
 800f390:	edd0 6a01 	vldr	s13, [r0, #4]
 800f394:	ee07 3a90 	vmov	s15, r3
 800f398:	684b      	ldr	r3, [r1, #4]
 800f39a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f39e:	ed90 5a05 	vldr	s10, [r0, #20]
 800f3a2:	1a9b      	subs	r3, r3, r2
 800f3a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3a8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f3ac:	ed90 2a03 	vldr	s4, [r0, #12]
 800f3b0:	ee07 3a10 	vmov	s14, r3
 800f3b4:	edd0 5a04 	vldr	s11, [r0, #16]
 800f3b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f3bc:	ed90 1a07 	vldr	s2, [r0, #28]
 800f3c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3c4:	edd0 2a06 	vldr	s5, [r0, #24]
 800f3c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f3cc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f3d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3d4:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f3d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f3dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f3e0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 800f3e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f3e6:	694a      	ldr	r2, [r1, #20]
 800f3e8:	1b13      	subs	r3, r2, r4
 800f3ea:	ee07 3a10 	vmov	s14, r3
 800f3ee:	680b      	ldr	r3, [r1, #0]
 800f3f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3f4:	1b1b      	subs	r3, r3, r4
 800f3f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f3fa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f3fe:	ee07 3a10 	vmov	s14, r3
 800f402:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f406:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f40a:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f40e:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f412:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 800f416:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f418:	698b      	ldr	r3, [r1, #24]
 800f41a:	1a9b      	subs	r3, r3, r2
 800f41c:	ee06 3a90 	vmov	s13, r3
 800f420:	684b      	ldr	r3, [r1, #4]
 800f422:	1a9b      	subs	r3, r3, r2
 800f424:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f428:	ee07 3a10 	vmov	s14, r3
 800f42c:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f434:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f438:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f43c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f440:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f444:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 800f448:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f44a:	694a      	ldr	r2, [r1, #20]
 800f44c:	1b13      	subs	r3, r2, r4
 800f44e:	ee07 3a10 	vmov	s14, r3
 800f452:	680b      	ldr	r3, [r1, #0]
 800f454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f458:	1b1b      	subs	r3, r3, r4
 800f45a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f45e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f462:	ee07 3a10 	vmov	s14, r3
 800f466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f46a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f46e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f472:	edd0 5a08 	vldr	s11, [r0, #32]
 800f476:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f47a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f47e:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f482:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 800f486:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f488:	698b      	ldr	r3, [r1, #24]
 800f48a:	1a9b      	subs	r3, r3, r2
 800f48c:	ee07 3a10 	vmov	s14, r3
 800f490:	684b      	ldr	r3, [r1, #4]
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f498:	ee01 3a90 	vmov	s3, r3
 800f49c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f4a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f4a4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f4a8:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f4ac:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f4b0:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f4b4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f4b8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800f4ba:	694a      	ldr	r2, [r1, #20]
 800f4bc:	1b13      	subs	r3, r2, r4
 800f4be:	ee03 3a10 	vmov	s6, r3
 800f4c2:	680b      	ldr	r3, [r1, #0]
 800f4c4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f4c8:	1b1b      	subs	r3, r3, r4
 800f4ca:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f4ce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f4d2:	ee03 3a10 	vmov	s6, r3
 800f4d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f4da:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f4de:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f4e2:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f4e6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f4ea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 800f4ee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f4f2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	dd13      	ble.n	800f524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f4fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f500:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f504:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f506:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f50a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f512:	dd15      	ble.n	800f540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f518:	6403      	str	r3, [r0, #64]	; 0x40
 800f51a:	bd70      	pop	{r4, r5, r6, pc}
 800f51c:	4623      	mov	r3, r4
 800f51e:	e6fd      	b.n	800f31c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f520:	462a      	mov	r2, r5
 800f522:	e706      	b.n	800f332 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f524:	d502      	bpl.n	800f52c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f526:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f52a:	e7e9      	b.n	800f500 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f52c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f530:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f534:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53c:	dade      	bge.n	800f4fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f53e:	e7f2      	b.n	800f526 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f540:	d502      	bpl.n	800f548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f542:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800f546:	e7e7      	b.n	800f518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f548:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f54c:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f550:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f558:	dadc      	bge.n	800f514 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f55a:	e7f2      	b.n	800f542 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f55c:	3d800000 	.word	0x3d800000

0800f560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f564:	2714      	movs	r7, #20
 800f566:	435f      	muls	r7, r3
 800f568:	eb02 0c07 	add.w	ip, r2, r7
 800f56c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f570:	f115 0e0f 	adds.w	lr, r5, #15
 800f574:	f100 80a2 	bmi.w	800f6bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f578:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f57c:	9c08      	ldr	r4, [sp, #32]
 800f57e:	2614      	movs	r6, #20
 800f580:	f8c0 e014 	str.w	lr, [r0, #20]
 800f584:	4366      	muls	r6, r4
 800f586:	eb02 0806 	add.w	r8, r2, r6
 800f58a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f58e:	f115 040f 	adds.w	r4, r5, #15
 800f592:	f100 809f 	bmi.w	800f6d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f596:	1124      	asrs	r4, r4, #4
 800f598:	eba4 040e 	sub.w	r4, r4, lr
 800f59c:	6184      	str	r4, [r0, #24]
 800f59e:	2c00      	cmp	r4, #0
 800f5a0:	f000 808a 	beq.w	800f6b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f5a4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f5a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f5ac:	5995      	ldr	r5, [r2, r6]
 800f5ae:	eba4 0809 	sub.w	r8, r4, r9
 800f5b2:	59d4      	ldr	r4, [r2, r7]
 800f5b4:	eba5 0a04 	sub.w	sl, r5, r4
 800f5b8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f5bc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f5c0:	fb0e fe05 	mul.w	lr, lr, r5
 800f5c4:	fb0a ee19 	mls	lr, sl, r9, lr
 800f5c8:	fb08 e404 	mla	r4, r8, r4, lr
 800f5cc:	3c01      	subs	r4, #1
 800f5ce:	19a4      	adds	r4, r4, r6
 800f5d0:	f100 808c 	bmi.w	800f6ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f5d4:	fb94 fef6 	sdiv	lr, r4, r6
 800f5d8:	fb06 441e 	mls	r4, r6, lr, r4
 800f5dc:	f8c0 e000 	str.w	lr, [r0]
 800f5e0:	6104      	str	r4, [r0, #16]
 800f5e2:	2d00      	cmp	r5, #0
 800f5e4:	f2c0 8095 	blt.w	800f712 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f5e8:	fb95 f4f6 	sdiv	r4, r5, r6
 800f5ec:	fb06 5514 	mls	r5, r6, r4, r5
 800f5f0:	6044      	str	r4, [r0, #4]
 800f5f2:	6085      	str	r5, [r0, #8]
 800f5f4:	60c6      	str	r6, [r0, #12]
 800f5f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f5fa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f5fe:	6945      	ldr	r5, [r0, #20]
 800f600:	59d2      	ldr	r2, [r2, r7]
 800f602:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f606:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800f734 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f60a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f60e:	ee07 4a10 	vmov	s14, r4
 800f612:	6804      	ldr	r4, [r0, #0]
 800f614:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f61c:	ee07 2a90 	vmov	s15, r2
 800f620:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f628:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f62c:	edd3 6a00 	vldr	s13, [r3]
 800f630:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f634:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800f638:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f63c:	edc0 6a07 	vstr	s13, [r0, #28]
 800f640:	edd0 6a01 	vldr	s13, [r0, #4]
 800f644:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 800f648:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f64c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800f650:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f654:	ed80 6a08 	vstr	s12, [r0, #32]
 800f658:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800f65a:	6242      	str	r2, [r0, #36]	; 0x24
 800f65c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 800f660:	ed93 6a03 	vldr	s12, [r3, #12]
 800f664:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f668:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f66c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f670:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 800f674:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 800f678:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800f67c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f680:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 800f684:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800f686:	6302      	str	r2, [r0, #48]	; 0x30
 800f688:	ed93 6a06 	vldr	s12, [r3, #24]
 800f68c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 800f690:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f694:	eeb0 7a46 	vmov.f32	s14, s12
 800f698:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800f69c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f6a0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 800f6a4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800f6a8:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800f6ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f6b0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 800f6b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f6b6:	63c3      	str	r3, [r0, #60]	; 0x3c
 800f6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6bc:	2410      	movs	r4, #16
 800f6be:	f1c5 0501 	rsb	r5, r5, #1
 800f6c2:	fb9e fef4 	sdiv	lr, lr, r4
 800f6c6:	f015 050f 	ands.w	r5, r5, #15
 800f6ca:	bf18      	it	ne
 800f6cc:	2501      	movne	r5, #1
 800f6ce:	ebae 0e05 	sub.w	lr, lr, r5
 800f6d2:	e753      	b.n	800f57c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f6d4:	f04f 0910 	mov.w	r9, #16
 800f6d8:	f1c5 0501 	rsb	r5, r5, #1
 800f6dc:	fb94 f4f9 	sdiv	r4, r4, r9
 800f6e0:	f015 050f 	ands.w	r5, r5, #15
 800f6e4:	bf18      	it	ne
 800f6e6:	2501      	movne	r5, #1
 800f6e8:	1b64      	subs	r4, r4, r5
 800f6ea:	e755      	b.n	800f598 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f6ec:	4264      	negs	r4, r4
 800f6ee:	fb94 fef6 	sdiv	lr, r4, r6
 800f6f2:	f1ce 0800 	rsb	r8, lr, #0
 800f6f6:	fb06 441e 	mls	r4, r6, lr, r4
 800f6fa:	f8c0 8000 	str.w	r8, [r0]
 800f6fe:	6104      	str	r4, [r0, #16]
 800f700:	2c00      	cmp	r4, #0
 800f702:	f43f af6e 	beq.w	800f5e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f706:	ea6f 0e0e 	mvn.w	lr, lr
 800f70a:	1b34      	subs	r4, r6, r4
 800f70c:	f8c0 e000 	str.w	lr, [r0]
 800f710:	e766      	b.n	800f5e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f712:	426d      	negs	r5, r5
 800f714:	fb95 f4f6 	sdiv	r4, r5, r6
 800f718:	f1c4 0e00 	rsb	lr, r4, #0
 800f71c:	fb06 5514 	mls	r5, r6, r4, r5
 800f720:	f8c0 e004 	str.w	lr, [r0, #4]
 800f724:	6085      	str	r5, [r0, #8]
 800f726:	2d00      	cmp	r5, #0
 800f728:	f43f af64 	beq.w	800f5f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f72c:	43e4      	mvns	r4, r4
 800f72e:	1b75      	subs	r5, r6, r5
 800f730:	6044      	str	r4, [r0, #4]
 800f732:	e75e      	b.n	800f5f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f734:	3d800000 	.word	0x3d800000

0800f738 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800f738:	4b01      	ldr	r3, [pc, #4]	; (800f740 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800f73a:	6018      	str	r0, [r3, #0]
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	2400ae6c 	.word	0x2400ae6c

0800f744 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800f744:	4b06      	ldr	r3, [pc, #24]	; (800f760 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800f746:	881a      	ldrh	r2, [r3, #0]
 800f748:	4282      	cmp	r2, r0
 800f74a:	d807      	bhi.n	800f75c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800f74c:	4b05      	ldr	r3, [pc, #20]	; (800f764 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	4413      	add	r3, r2
 800f752:	4298      	cmp	r0, r3
 800f754:	bfac      	ite	ge
 800f756:	2000      	movge	r0, #0
 800f758:	2001      	movlt	r0, #1
 800f75a:	4770      	bx	lr
 800f75c:	2000      	movs	r0, #0
 800f75e:	4770      	bx	lr
 800f760:	2400ae8c 	.word	0x2400ae8c
 800f764:	2400ae90 	.word	0x2400ae90

0800f768 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800f768:	b508      	push	{r3, lr}
 800f76a:	4601      	mov	r1, r0
 800f76c:	f7ff ffea 	bl	800f744 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f770:	b118      	cbz	r0, 800f77a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800f772:	4b02      	ldr	r3, [pc, #8]	; (800f77c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800f77a:	bd08      	pop	{r3, pc}
 800f77c:	2400ae70 	.word	0x2400ae70

0800f780 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4604      	mov	r4, r0
 800f784:	f7ff ffde 	bl	800f744 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f788:	b188      	cbz	r0, 800f7ae <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 800f78c:	881a      	ldrh	r2, [r3, #0]
 800f78e:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 800f790:	1aa4      	subs	r4, r4, r2
 800f792:	220e      	movs	r2, #14
 800f794:	681d      	ldr	r5, [r3, #0]
 800f796:	4362      	muls	r2, r4
 800f798:	18ac      	adds	r4, r5, r2
 800f79a:	7b23      	ldrb	r3, [r4, #12]
 800f79c:	f013 0320 	ands.w	r3, r3, #32
 800f7a0:	bf17      	itett	ne
 800f7a2:	680b      	ldrne	r3, [r1, #0]
 800f7a4:	4618      	moveq	r0, r3
 800f7a6:	50ab      	strne	r3, [r5, r2]
 800f7a8:	684b      	ldrne	r3, [r1, #4]
 800f7aa:	bf18      	it	ne
 800f7ac:	6063      	strne	r3, [r4, #4]
 800f7ae:	bd38      	pop	{r3, r4, r5, pc}
 800f7b0:	2400ae8c 	.word	0x2400ae8c
 800f7b4:	2400ae74 	.word	0x2400ae74

0800f7b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 800f7b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7bc:	4606      	mov	r6, r0
 800f7be:	460c      	mov	r4, r1
 800f7c0:	f7ff ffc0 	bl	800f744 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800f7c4:	b918      	cbnz	r0, 800f7ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	b002      	add	sp, #8
 800f7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ce:	4608      	mov	r0, r1
 800f7d0:	f7fb fb93 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d1f6      	bne.n	800f7c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7d8:	4b3f      	ldr	r3, [pc, #252]	; (800f8d8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 800f7da:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800f8dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 800f7de:	881d      	ldrh	r5, [r3, #0]
 800f7e0:	f8d9 a000 	ldr.w	sl, [r9]
 800f7e4:	46c8      	mov	r8, r9
 800f7e6:	1b73      	subs	r3, r6, r5
 800f7e8:	250e      	movs	r5, #14
 800f7ea:	435d      	muls	r5, r3
 800f7ec:	eb0a 0705 	add.w	r7, sl, r5
 800f7f0:	7b3b      	ldrb	r3, [r7, #12]
 800f7f2:	f013 0f20 	tst.w	r3, #32
 800f7f6:	d0e6      	beq.n	800f7c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	f7fd fc42 	bl	800d084 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f800:	2800      	cmp	r0, #0
 800f802:	d1e1      	bne.n	800f7c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f804:	4639      	mov	r1, r7
 800f806:	4620      	mov	r0, r4
 800f808:	f7fd fc3c 	bl	800d084 <_ZNK8touchgfx4Rect8includesERKS0_>
 800f80c:	b108      	cbz	r0, 800f812 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 800f80e:	4621      	mov	r1, r4
 800f810:	e020      	b.n	800f854 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 800f812:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f816:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d11e      	bne.n	800f85c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f81e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f826:	429a      	cmp	r2, r3
 800f828:	d118      	bne.n	800f85c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f82a:	6820      	ldr	r0, [r4, #0]
 800f82c:	466b      	mov	r3, sp
 800f82e:	6861      	ldr	r1, [r4, #4]
 800f830:	c303      	stmia	r3!, {r0, r1}
 800f832:	4639      	mov	r1, r7
 800f834:	4668      	mov	r0, sp
 800f836:	f7fd fc4b 	bl	800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f83a:	f8d9 3000 	ldr.w	r3, [r9]
 800f83e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f842:	442b      	add	r3, r5
 800f844:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f848:	4413      	add	r3, r2
 800f84a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800f84e:	4293      	cmp	r3, r2
 800f850:	dc04      	bgt.n	800f85c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 800f852:	4669      	mov	r1, sp
 800f854:	4630      	mov	r0, r6
 800f856:	f7ff ff93 	bl	800f780 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 800f85a:	e7b5      	b.n	800f7c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 800f85c:	f8d8 3000 	ldr.w	r3, [r8]
 800f860:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f864:	442b      	add	r3, r5
 800f866:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f86a:	4291      	cmp	r1, r2
 800f86c:	d119      	bne.n	800f8a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f86e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f872:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f876:	4291      	cmp	r1, r2
 800f878:	d113      	bne.n	800f8a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 800f87a:	6820      	ldr	r0, [r4, #0]
 800f87c:	466a      	mov	r2, sp
 800f87e:	6861      	ldr	r1, [r4, #4]
 800f880:	c203      	stmia	r2!, {r0, r1}
 800f882:	4619      	mov	r1, r3
 800f884:	4668      	mov	r0, sp
 800f886:	f7fd fc23 	bl	800d0d0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f88a:	f8d8 3000 	ldr.w	r3, [r8]
 800f88e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f892:	442b      	add	r3, r5
 800f894:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f898:	4413      	add	r3, r2
 800f89a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	ddd7      	ble.n	800f852 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f7fb fb29 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800f8a8:	b990      	cbnz	r0, 800f8d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 800f8aa:	88a7      	ldrh	r7, [r4, #4]
 800f8ac:	88e3      	ldrh	r3, [r4, #6]
 800f8ae:	fb17 f703 	smulbb	r7, r7, r3
 800f8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b6:	441d      	add	r5, r3
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	f7fb fb1e 	bl	800aefa <_ZNK8touchgfx4Rect7isEmptyEv>
 800f8be:	b948      	cbnz	r0, 800f8d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 800f8c0:	88ab      	ldrh	r3, [r5, #4]
 800f8c2:	88ea      	ldrh	r2, [r5, #6]
 800f8c4:	fb13 f302 	smulbb	r3, r3, r2
 800f8c8:	42bb      	cmp	r3, r7
 800f8ca:	f6bf af7c 	bge.w	800f7c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 800f8ce:	e79e      	b.n	800f80e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 800f8d0:	2700      	movs	r7, #0
 800f8d2:	e7ee      	b.n	800f8b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e7f7      	b.n	800f8c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 800f8d8:	2400ae8c 	.word	0x2400ae8c
 800f8dc:	2400ae74 	.word	0x2400ae74

0800f8e0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	4c24      	ldr	r4, [pc, #144]	; (800f974 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d042      	beq.n	800f970 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f8ea:	4a23      	ldr	r2, [pc, #140]	; (800f978 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800f8ec:	4d23      	ldr	r5, [pc, #140]	; (800f97c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800f8ee:	8811      	ldrh	r1, [r2, #0]
 800f8f0:	f8b5 c000 	ldrh.w	ip, [r5]
 800f8f4:	4822      	ldr	r0, [pc, #136]	; (800f980 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800f8f6:	4461      	add	r1, ip
 800f8f8:	1c4a      	adds	r2, r1, #1
 800f8fa:	008f      	lsls	r7, r1, #2
 800f8fc:	f022 0201 	bic.w	r2, r2, #1
 800f900:	19de      	adds	r6, r3, r7
 800f902:	0412      	lsls	r2, r2, #16
 800f904:	6006      	str	r6, [r0, #0]
 800f906:	4e1f      	ldr	r6, [pc, #124]	; (800f984 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800f908:	0c12      	lsrs	r2, r2, #16
 800f90a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800f90e:	19da      	adds	r2, r3, r7
 800f910:	6032      	str	r2, [r6, #0]
 800f912:	220e      	movs	r2, #14
 800f914:	fb02 f20c 	mul.w	r2, r2, ip
 800f918:	3203      	adds	r2, #3
 800f91a:	f022 0203 	bic.w	r2, r2, #3
 800f91e:	443a      	add	r2, r7
 800f920:	4f19      	ldr	r7, [pc, #100]	; (800f988 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800f922:	4413      	add	r3, r2
 800f924:	603b      	str	r3, [r7, #0]
 800f926:	2300      	movs	r3, #0
 800f928:	4f18      	ldr	r7, [pc, #96]	; (800f98c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800f92a:	469c      	mov	ip, r3
 800f92c:	803b      	strh	r3, [r7, #0]
 800f92e:	4f18      	ldr	r7, [pc, #96]	; (800f990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800f930:	683f      	ldr	r7, [r7, #0]
 800f932:	1aba      	subs	r2, r7, r2
 800f934:	4f17      	ldr	r7, [pc, #92]	; (800f994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800f936:	603a      	str	r2, [r7, #0]
 800f938:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800f93c:	4a16      	ldr	r2, [pc, #88]	; (800f998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800f93e:	8013      	strh	r3, [r2, #0]
 800f940:	428b      	cmp	r3, r1
 800f942:	d10d      	bne.n	800f960 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800f944:	882d      	ldrh	r5, [r5, #0]
 800f946:	2300      	movs	r3, #0
 800f948:	6830      	ldr	r0, [r6, #0]
 800f94a:	240e      	movs	r4, #14
 800f94c:	429d      	cmp	r5, r3
 800f94e:	d90f      	bls.n	800f970 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800f950:	fb04 0203 	mla	r2, r4, r3, r0
 800f954:	3301      	adds	r3, #1
 800f956:	7b11      	ldrb	r1, [r2, #12]
 800f958:	f36f 1145 	bfc	r1, #5, #1
 800f95c:	7311      	strb	r1, [r2, #12]
 800f95e:	e7f5      	b.n	800f94c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800f960:	6822      	ldr	r2, [r4, #0]
 800f962:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800f966:	6802      	ldr	r2, [r0, #0]
 800f968:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800f96c:	3301      	adds	r3, #1
 800f96e:	e7e7      	b.n	800f940 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f972:	bf00      	nop
 800f974:	2400ae70 	.word	0x2400ae70
 800f978:	2400ae8c 	.word	0x2400ae8c
 800f97c:	2400ae90 	.word	0x2400ae90
 800f980:	2400ae84 	.word	0x2400ae84
 800f984:	2400ae74 	.word	0x2400ae74
 800f988:	2400ae7c 	.word	0x2400ae7c
 800f98c:	2400ae8e 	.word	0x2400ae8e
 800f990:	2400ae78 	.word	0x2400ae78
 800f994:	2400ae88 	.word	0x2400ae88
 800f998:	2400ae80 	.word	0x2400ae80

0800f99c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	b943      	cbnz	r3, 800f9b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f9a2:	b139      	cbz	r1, 800f9b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800f9a4:	4b05      	ldr	r3, [pc, #20]	; (800f9bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800f9a6:	801a      	strh	r2, [r3, #0]
 800f9a8:	4b05      	ldr	r3, [pc, #20]	; (800f9c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800f9aa:	6019      	str	r1, [r3, #0]
 800f9ac:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800f9ae:	6018      	str	r0, [r3, #0]
 800f9b0:	f7ff bf96 	b.w	800f8e0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	2400ae7c 	.word	0x2400ae7c
 800f9bc:	2400ae90 	.word	0x2400ae90
 800f9c0:	2400ae78 	.word	0x2400ae78
 800f9c4:	2400ae70 	.word	0x2400ae70

0800f9c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800f9c8:	b470      	push	{r4, r5, r6}
 800f9ca:	4c07      	ldr	r4, [pc, #28]	; (800f9e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800f9cc:	4605      	mov	r5, r0
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	9a03      	ldr	r2, [sp, #12]
 800f9d2:	6826      	ldr	r6, [r4, #0]
 800f9d4:	b936      	cbnz	r6, 800f9e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800f9d6:	6025      	str	r5, [r4, #0]
 800f9d8:	4c04      	ldr	r4, [pc, #16]	; (800f9ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800f9da:	8021      	strh	r1, [r4, #0]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	bc70      	pop	{r4, r5, r6}
 800f9e0:	f7ff bfdc 	b.w	800f99c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800f9e4:	bc70      	pop	{r4, r5, r6}
 800f9e6:	4770      	bx	lr
 800f9e8:	2400ae94 	.word	0x2400ae94
 800f9ec:	2400ae8c 	.word	0x2400ae8c

0800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800f9f0:	4a12      	ldr	r2, [pc, #72]	; (800fa3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800f9f2:	8803      	ldrh	r3, [r0, #0]
 800f9f4:	8812      	ldrh	r2, [r2, #0]
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d207      	bcs.n	800fa0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800f9fa:	4a11      	ldr	r2, [pc, #68]	; (800fa40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800f9fc:	2114      	movs	r1, #20
 800f9fe:	6812      	ldr	r2, [r2, #0]
 800fa00:	fb01 2303 	mla	r3, r1, r3, r2
 800fa04:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800fa08:	4770      	bx	lr
 800fa0a:	490e      	ldr	r1, [pc, #56]	; (800fa44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800fa0c:	8809      	ldrh	r1, [r1, #0]
 800fa0e:	4411      	add	r1, r2
 800fa10:	428b      	cmp	r3, r1
 800fa12:	da04      	bge.n	800fa1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800fa14:	1a9b      	subs	r3, r3, r2
 800fa16:	4a0c      	ldr	r2, [pc, #48]	; (800fa48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800fa18:	210e      	movs	r1, #14
 800fa1a:	6812      	ldr	r2, [r2, #0]
 800fa1c:	e7f0      	b.n	800fa00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800fa1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d108      	bne.n	800fa38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800fa26:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b91b      	cbnz	r3, 800fa34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800fa2c:	4b08      	ldr	r3, [pc, #32]	; (800fa50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800fa2e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa32:	4770      	bx	lr
 800fa34:	4b07      	ldr	r3, [pc, #28]	; (800fa54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800fa36:	e7fa      	b.n	800fa2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800fa38:	2000      	movs	r0, #0
 800fa3a:	4770      	bx	lr
 800fa3c:	2400ae8c 	.word	0x2400ae8c
 800fa40:	2400ae94 	.word	0x2400ae94
 800fa44:	2400ae90 	.word	0x2400ae90
 800fa48:	2400ae74 	.word	0x2400ae74
 800fa4c:	2400ae04 	.word	0x2400ae04
 800fa50:	2400ae06 	.word	0x2400ae06
 800fa54:	2400ae08 	.word	0x2400ae08

0800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800fa58:	4a12      	ldr	r2, [pc, #72]	; (800faa4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800fa5a:	8803      	ldrh	r3, [r0, #0]
 800fa5c:	8812      	ldrh	r2, [r2, #0]
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d207      	bcs.n	800fa72 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800fa62:	4a11      	ldr	r2, [pc, #68]	; (800faa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800fa64:	2114      	movs	r1, #20
 800fa66:	6812      	ldr	r2, [r2, #0]
 800fa68:	fb01 2303 	mla	r3, r1, r3, r2
 800fa6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800fa70:	4770      	bx	lr
 800fa72:	490e      	ldr	r1, [pc, #56]	; (800faac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800fa74:	8809      	ldrh	r1, [r1, #0]
 800fa76:	4411      	add	r1, r2
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	da04      	bge.n	800fa86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800fa7c:	1a9b      	subs	r3, r3, r2
 800fa7e:	4a0c      	ldr	r2, [pc, #48]	; (800fab0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800fa80:	210e      	movs	r1, #14
 800fa82:	6812      	ldr	r2, [r2, #0]
 800fa84:	e7f0      	b.n	800fa68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800fa86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d108      	bne.n	800faa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800fa8e:	4b09      	ldr	r3, [pc, #36]	; (800fab4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	b91b      	cbnz	r3, 800fa9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800fa94:	4b08      	ldr	r3, [pc, #32]	; (800fab8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800fa96:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fa9a:	4770      	bx	lr
 800fa9c:	4b07      	ldr	r3, [pc, #28]	; (800fabc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800fa9e:	e7fa      	b.n	800fa96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800faa0:	2000      	movs	r0, #0
 800faa2:	4770      	bx	lr
 800faa4:	2400ae8c 	.word	0x2400ae8c
 800faa8:	2400ae94 	.word	0x2400ae94
 800faac:	2400ae90 	.word	0x2400ae90
 800fab0:	2400ae74 	.word	0x2400ae74
 800fab4:	2400ae04 	.word	0x2400ae04
 800fab8:	2400ae08 	.word	0x2400ae08
 800fabc:	2400ae06 	.word	0x2400ae06

0800fac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800fac0:	4a1f      	ldr	r2, [pc, #124]	; (800fb40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 800fac2:	b510      	push	{r4, lr}
 800fac4:	880b      	ldrh	r3, [r1, #0]
 800fac6:	8812      	ldrh	r2, [r2, #0]
 800fac8:	4293      	cmp	r3, r2
 800faca:	d213      	bcs.n	800faf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800facc:	4a1d      	ldr	r2, [pc, #116]	; (800fb44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 800face:	2114      	movs	r1, #20
 800fad0:	6812      	ldr	r2, [r2, #0]
 800fad2:	fb01 2303 	mla	r3, r1, r3, r2
 800fad6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800fada:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800fade:	8a1a      	ldrh	r2, [r3, #16]
 800fae0:	8a5b      	ldrh	r3, [r3, #18]
 800fae2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fae6:	8004      	strh	r4, [r0, #0]
 800fae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faec:	8041      	strh	r1, [r0, #2]
 800faee:	8082      	strh	r2, [r0, #4]
 800faf0:	80c3      	strh	r3, [r0, #6]
 800faf2:	e00e      	b.n	800fb12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800faf4:	4914      	ldr	r1, [pc, #80]	; (800fb48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 800faf6:	8809      	ldrh	r1, [r1, #0]
 800faf8:	4411      	add	r1, r2
 800fafa:	428b      	cmp	r3, r1
 800fafc:	da0a      	bge.n	800fb14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 800fafe:	1a9b      	subs	r3, r3, r2
 800fb00:	4a12      	ldr	r2, [pc, #72]	; (800fb4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800fb02:	210e      	movs	r1, #14
 800fb04:	6812      	ldr	r2, [r2, #0]
 800fb06:	fb01 2303 	mla	r3, r1, r3, r2
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	6002      	str	r2, [r0, #0]
 800fb0e:	685a      	ldr	r2, [r3, #4]
 800fb10:	6042      	str	r2, [r0, #4]
 800fb12:	bd10      	pop	{r4, pc}
 800fb14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d10b      	bne.n	800fb34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 800fb1c:	4b0c      	ldr	r3, [pc, #48]	; (800fb50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800fb1e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fb22:	4b0c      	ldr	r3, [pc, #48]	; (800fb54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800fb24:	8081      	strh	r1, [r0, #4]
 800fb26:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	80c2      	strh	r2, [r0, #6]
 800fb2e:	8003      	strh	r3, [r0, #0]
 800fb30:	8043      	strh	r3, [r0, #2]
 800fb32:	e7ee      	b.n	800fb12 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 800fb34:	2300      	movs	r3, #0
 800fb36:	8003      	strh	r3, [r0, #0]
 800fb38:	8043      	strh	r3, [r0, #2]
 800fb3a:	8083      	strh	r3, [r0, #4]
 800fb3c:	e7d8      	b.n	800faf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fb3e:	bf00      	nop
 800fb40:	2400ae8c 	.word	0x2400ae8c
 800fb44:	2400ae94 	.word	0x2400ae94
 800fb48:	2400ae90 	.word	0x2400ae90
 800fb4c:	2400ae74 	.word	0x2400ae74
 800fb50:	2400ae00 	.word	0x2400ae00
 800fb54:	2400ae02 	.word	0x2400ae02

0800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800fb58:	4a12      	ldr	r2, [pc, #72]	; (800fba4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800fb5a:	8803      	ldrh	r3, [r0, #0]
 800fb5c:	8811      	ldrh	r1, [r2, #0]
 800fb5e:	428b      	cmp	r3, r1
 800fb60:	d20b      	bcs.n	800fb7a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800fb62:	4a11      	ldr	r2, [pc, #68]	; (800fba8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb64:	6812      	ldr	r2, [r2, #0]
 800fb66:	b112      	cbz	r2, 800fb6e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800fb68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb6c:	b9c0      	cbnz	r0, 800fba0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800fb6e:	4a0f      	ldr	r2, [pc, #60]	; (800fbac <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800fb70:	6811      	ldr	r1, [r2, #0]
 800fb72:	2214      	movs	r2, #20
 800fb74:	4353      	muls	r3, r2
 800fb76:	58c8      	ldr	r0, [r1, r3]
 800fb78:	4770      	bx	lr
 800fb7a:	4a0d      	ldr	r2, [pc, #52]	; (800fbb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800fb7c:	8812      	ldrh	r2, [r2, #0]
 800fb7e:	440a      	add	r2, r1
 800fb80:	4293      	cmp	r3, r2
 800fb82:	da04      	bge.n	800fb8e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800fb84:	4a08      	ldr	r2, [pc, #32]	; (800fba8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fb86:	6812      	ldr	r2, [r2, #0]
 800fb88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb8c:	4770      	bx	lr
 800fb8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d103      	bne.n	800fb9e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800fb96:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fb9c:	4770      	bx	lr
 800fb9e:	2000      	movs	r0, #0
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	2400ae8c 	.word	0x2400ae8c
 800fba8:	2400ae70 	.word	0x2400ae70
 800fbac:	2400ae94 	.word	0x2400ae94
 800fbb0:	2400ae90 	.word	0x2400ae90
 800fbb4:	2400ae0c 	.word	0x2400ae0c

0800fbb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800fbb8:	4b24      	ldr	r3, [pc, #144]	; (800fc4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800fbba:	8802      	ldrh	r2, [r0, #0]
 800fbbc:	8818      	ldrh	r0, [r3, #0]
 800fbbe:	4282      	cmp	r2, r0
 800fbc0:	d221      	bcs.n	800fc06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800fbc2:	4b23      	ldr	r3, [pc, #140]	; (800fc50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800fbc4:	6819      	ldr	r1, [r3, #0]
 800fbc6:	2314      	movs	r3, #20
 800fbc8:	fb03 1302 	mla	r3, r3, r2, r1
 800fbcc:	6858      	ldr	r0, [r3, #4]
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d03a      	beq.n	800fc48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbd2:	4920      	ldr	r1, [pc, #128]	; (800fc54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fbd4:	6809      	ldr	r1, [r1, #0]
 800fbd6:	2900      	cmp	r1, #0
 800fbd8:	d036      	beq.n	800fc48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	d032      	beq.n	800fc48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fbe2:	891a      	ldrh	r2, [r3, #8]
 800fbe4:	8958      	ldrh	r0, [r3, #10]
 800fbe6:	4350      	muls	r0, r2
 800fbe8:	7c5a      	ldrb	r2, [r3, #17]
 800fbea:	7cdb      	ldrb	r3, [r3, #19]
 800fbec:	0952      	lsrs	r2, r2, #5
 800fbee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fbf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fbf6:	2b0b      	cmp	r3, #11
 800fbf8:	bf18      	it	ne
 800fbfa:	0040      	lslne	r0, r0, #1
 800fbfc:	3003      	adds	r0, #3
 800fbfe:	f020 0003 	bic.w	r0, r0, #3
 800fc02:	4408      	add	r0, r1
 800fc04:	4770      	bx	lr
 800fc06:	4b14      	ldr	r3, [pc, #80]	; (800fc58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	4403      	add	r3, r0
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	da1a      	bge.n	800fc46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fc10:	4b12      	ldr	r3, [pc, #72]	; (800fc5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800fc12:	1a10      	subs	r0, r2, r0
 800fc14:	210e      	movs	r1, #14
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	fb01 3000 	mla	r0, r1, r0, r3
 800fc1c:	7b03      	ldrb	r3, [r0, #12]
 800fc1e:	f003 031f 	and.w	r3, r3, #31
 800fc22:	2b0b      	cmp	r3, #11
 800fc24:	d10b      	bne.n	800fc3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800fc26:	8903      	ldrh	r3, [r0, #8]
 800fc28:	8940      	ldrh	r0, [r0, #10]
 800fc2a:	4358      	muls	r0, r3
 800fc2c:	4b09      	ldr	r3, [pc, #36]	; (800fc54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fc2e:	3003      	adds	r0, #3
 800fc30:	6819      	ldr	r1, [r3, #0]
 800fc32:	f020 0303 	bic.w	r3, r0, #3
 800fc36:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800fc3a:	4418      	add	r0, r3
 800fc3c:	4770      	bx	lr
 800fc3e:	2b0d      	cmp	r3, #13
 800fc40:	d101      	bne.n	800fc46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fc42:	300d      	adds	r0, #13
 800fc44:	4770      	bx	lr
 800fc46:	2000      	movs	r0, #0
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	2400ae8c 	.word	0x2400ae8c
 800fc50:	2400ae94 	.word	0x2400ae94
 800fc54:	2400ae70 	.word	0x2400ae70
 800fc58:	2400ae90 	.word	0x2400ae90
 800fc5c:	2400ae74 	.word	0x2400ae74

0800fc60 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800fc60:	4a17      	ldr	r2, [pc, #92]	; (800fcc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 800fc62:	b510      	push	{r4, lr}
 800fc64:	8803      	ldrh	r3, [r0, #0]
 800fc66:	8812      	ldrh	r2, [r2, #0]
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d20c      	bcs.n	800fc86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 800fc6c:	4a15      	ldr	r2, [pc, #84]	; (800fcc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 800fc6e:	2114      	movs	r1, #20
 800fc70:	6812      	ldr	r2, [r2, #0]
 800fc72:	fb01 2303 	mla	r3, r1, r3, r2
 800fc76:	7c58      	ldrb	r0, [r3, #17]
 800fc78:	0942      	lsrs	r2, r0, #5
 800fc7a:	7cd8      	ldrb	r0, [r3, #19]
 800fc7c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800fc80:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 800fc84:	bd10      	pop	{r4, pc}
 800fc86:	4910      	ldr	r1, [pc, #64]	; (800fcc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 800fc88:	8809      	ldrh	r1, [r1, #0]
 800fc8a:	4411      	add	r1, r2
 800fc8c:	428b      	cmp	r3, r1
 800fc8e:	da09      	bge.n	800fca4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 800fc90:	1a9b      	subs	r3, r3, r2
 800fc92:	4a0e      	ldr	r2, [pc, #56]	; (800fccc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800fc94:	210e      	movs	r1, #14
 800fc96:	6812      	ldr	r2, [r2, #0]
 800fc98:	fb01 2303 	mla	r3, r1, r3, r2
 800fc9c:	7b18      	ldrb	r0, [r3, #12]
 800fc9e:	f000 001f 	and.w	r0, r0, #31
 800fca2:	e7ef      	b.n	800fc84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fca4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d106      	bne.n	800fcba <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 800fcac:	f7fb fbce 	bl	800b44c <_ZN8touchgfx3HAL3lcdEv>
 800fcb0:	6803      	ldr	r3, [r0, #0]
 800fcb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb8:	4718      	bx	r3
 800fcba:	2000      	movs	r0, #0
 800fcbc:	e7e2      	b.n	800fc84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 800fcbe:	bf00      	nop
 800fcc0:	2400ae8c 	.word	0x2400ae8c
 800fcc4:	2400ae94 	.word	0x2400ae94
 800fcc8:	2400ae90 	.word	0x2400ae90
 800fccc:	2400ae74 	.word	0x2400ae74

0800fcd0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 800fcd0:	2018      	movs	r0, #24
 800fcd2:	4770      	bx	lr

0800fcd4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	4770      	bx	lr

0800fcd8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 800fcd8:	4b02      	ldr	r3, [pc, #8]	; (800fce4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 800fcda:	8818      	ldrh	r0, [r3, #0]
 800fcdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fce0:	b280      	uxth	r0, r0
 800fce2:	4770      	bx	lr
 800fce4:	2400ae06 	.word	0x2400ae06

0800fce8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800fce8:	2bff      	cmp	r3, #255	; 0xff
 800fcea:	d040      	beq.n	800fd6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800fcec:	2a2c      	cmp	r2, #44	; 0x2c
 800fcee:	d02a      	beq.n	800fd46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 800fcf0:	d80f      	bhi.n	800fd12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 800fcf2:	2a08      	cmp	r2, #8
 800fcf4:	d037      	beq.n	800fd66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fcf6:	d805      	bhi.n	800fd04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 800fcf8:	2a04      	cmp	r2, #4
 800fcfa:	d032      	beq.n	800fd62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 800fcfc:	2a05      	cmp	r2, #5
 800fcfe:	d02e      	beq.n	800fd5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 800fd00:	2000      	movs	r0, #0
 800fd02:	4770      	bx	lr
 800fd04:	2a0a      	cmp	r2, #10
 800fd06:	d02e      	beq.n	800fd66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fd08:	d301      	bcc.n	800fd0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 800fd0a:	2a0b      	cmp	r2, #11
 800fd0c:	d1f8      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd0e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800fd10:	4770      	bx	lr
 800fd12:	2a30      	cmp	r2, #48	; 0x30
 800fd14:	d029      	beq.n	800fd6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fd16:	d808      	bhi.n	800fd2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 800fd18:	2a2e      	cmp	r2, #46	; 0x2e
 800fd1a:	684b      	ldr	r3, [r1, #4]
 800fd1c:	d01a      	beq.n	800fd54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 800fd1e:	d90b      	bls.n	800fd38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1ec      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd26:	6a00      	ldr	r0, [r0, #32]
 800fd28:	4770      	bx	lr
 800fd2a:	2a32      	cmp	r2, #50	; 0x32
 800fd2c:	d01d      	beq.n	800fd6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800fd2e:	d301      	bcc.n	800fd34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 800fd30:	2a33      	cmp	r2, #51	; 0x33
 800fd32:	d1e5      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd34:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800fd36:	4770      	bx	lr
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d0f3      	beq.n	800fd26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d1de      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd42:	6900      	ldr	r0, [r0, #16]
 800fd44:	4770      	bx	lr
 800fd46:	684b      	ldr	r3, [r1, #4]
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	b133      	cbz	r3, 800fd5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d1d7      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd50:	6880      	ldr	r0, [r0, #8]
 800fd52:	4770      	bx	lr
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1d2      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd5a:	6980      	ldr	r0, [r0, #24]
 800fd5c:	4770      	bx	lr
 800fd5e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800fd60:	4770      	bx	lr
 800fd62:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800fd64:	4770      	bx	lr
 800fd66:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fd68:	4770      	bx	lr
 800fd6a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fd6c:	4770      	bx	lr
 800fd6e:	2a2c      	cmp	r2, #44	; 0x2c
 800fd70:	d02a      	beq.n	800fdc8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 800fd72:	d80f      	bhi.n	800fd94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 800fd74:	2a08      	cmp	r2, #8
 800fd76:	d035      	beq.n	800fde4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd78:	d805      	bhi.n	800fd86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 800fd7a:	2a04      	cmp	r2, #4
 800fd7c:	d030      	beq.n	800fde0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 800fd7e:	2a05      	cmp	r2, #5
 800fd80:	d1be      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd82:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800fd84:	4770      	bx	lr
 800fd86:	2a0a      	cmp	r2, #10
 800fd88:	d02c      	beq.n	800fde4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 800fd8a:	d301      	bcc.n	800fd90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 800fd8c:	2a0b      	cmp	r2, #11
 800fd8e:	d1b7      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fd90:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800fd92:	4770      	bx	lr
 800fd94:	2a30      	cmp	r2, #48	; 0x30
 800fd96:	d027      	beq.n	800fde8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fd98:	d808      	bhi.n	800fdac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 800fd9a:	2a2e      	cmp	r2, #46	; 0x2e
 800fd9c:	684b      	ldr	r3, [r1, #4]
 800fd9e:	d01a      	beq.n	800fdd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 800fda0:	d90b      	bls.n	800fdba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1ab      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fda8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fdaa:	4770      	bx	lr
 800fdac:	2a32      	cmp	r2, #50	; 0x32
 800fdae:	d01b      	beq.n	800fde8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 800fdb0:	d301      	bcc.n	800fdb6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 800fdb2:	2a33      	cmp	r2, #51	; 0x33
 800fdb4:	d1a4      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdb6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800fdb8:	4770      	bx	lr
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d0f3      	beq.n	800fda8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d19d      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdc4:	6940      	ldr	r0, [r0, #20]
 800fdc6:	4770      	bx	lr
 800fdc8:	684b      	ldr	r3, [r1, #4]
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	b133      	cbz	r3, 800fddc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d196      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fdd2:	68c0      	ldr	r0, [r0, #12]
 800fdd4:	4770      	bx	lr
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d191      	bne.n	800fd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 800fddc:	69c0      	ldr	r0, [r0, #28]
 800fdde:	4770      	bx	lr
 800fde0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800fde2:	4770      	bx	lr
 800fde4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800fde6:	4770      	bx	lr
 800fde8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800fdea:	4770      	bx	lr

0800fdec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 800fdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf0:	b085      	sub	sp, #20
 800fdf2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800fdf4:	9203      	str	r2, [sp, #12]
 800fdf6:	6870      	ldr	r0, [r6, #4]
 800fdf8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800fdfc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800fe00:	9101      	str	r1, [sp, #4]
 800fe02:	fa1f f885 	uxth.w	r8, r5
 800fe06:	43ed      	mvns	r5, r5
 800fe08:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 800fe0c:	b2ed      	uxtb	r5, r5
 800fe0e:	fb00 2404 	mla	r4, r0, r4, r2
 800fe12:	6832      	ldr	r2, [r6, #0]
 800fe14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fe18:	4414      	add	r4, r2
 800fe1a:	f8dc 2000 	ldr.w	r2, [ip]
 800fe1e:	9202      	str	r2, [sp, #8]
 800fe20:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800fe24:	f102 0e04 	add.w	lr, r2, #4
 800fe28:	9a01      	ldr	r2, [sp, #4]
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	dc03      	bgt.n	800fe36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 800fe2e:	9a03      	ldr	r2, [sp, #12]
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	f340 8116 	ble.w	8010062 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800fe36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe38:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 800fe3c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 800fe40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fe42:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 800fe46:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	dd0e      	ble.n	800fe6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 800fe4e:	1406      	asrs	r6, r0, #16
 800fe50:	d405      	bmi.n	800fe5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe52:	4556      	cmp	r6, sl
 800fe54:	da03      	bge.n	800fe5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe56:	1416      	asrs	r6, r2, #16
 800fe58:	d401      	bmi.n	800fe5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 800fe5a:	454e      	cmp	r6, r9
 800fe5c:	db07      	blt.n	800fe6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 800fe5e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fe60:	3b01      	subs	r3, #1
 800fe62:	3403      	adds	r4, #3
 800fe64:	4430      	add	r0, r6
 800fe66:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fe68:	4432      	add	r2, r6
 800fe6a:	e7ee      	b.n	800fe4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 800fe6c:	d063      	beq.n	800ff36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 800fe6e:	1e5e      	subs	r6, r3, #1
 800fe70:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fe72:	fb07 0706 	mla	r7, r7, r6, r0
 800fe76:	143f      	asrs	r7, r7, #16
 800fe78:	d454      	bmi.n	800ff24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe7a:	4557      	cmp	r7, sl
 800fe7c:	da52      	bge.n	800ff24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe7e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800fe80:	fb07 2606 	mla	r6, r7, r6, r2
 800fe84:	1436      	asrs	r6, r6, #16
 800fe86:	d44d      	bmi.n	800ff24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe88:	454e      	cmp	r6, r9
 800fe8a:	da4b      	bge.n	800ff24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 800fe8c:	1ce6      	adds	r6, r4, #3
 800fe8e:	4699      	mov	r9, r3
 800fe90:	f1b9 0f00 	cmp.w	r9, #0
 800fe94:	f106 0603 	add.w	r6, r6, #3
 800fe98:	dd48      	ble.n	800ff2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 800fe9a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 800fe9e:	1417      	asrs	r7, r2, #16
 800fea0:	9902      	ldr	r1, [sp, #8]
 800fea2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 800fea6:	f109 39ff 	add.w	r9, r9, #4294967295
 800feaa:	fb0b 1707 	mla	r7, fp, r7, r1
 800feae:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 800feb2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800feb4:	f817 700a 	ldrb.w	r7, [r7, sl]
 800feb8:	fb1b fb05 	smulbb	fp, fp, r5
 800febc:	4408      	add	r0, r1
 800febe:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fec0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800fec4:	440a      	add	r2, r1
 800fec6:	eb0e 0a07 	add.w	sl, lr, r7
 800feca:	f81e 7007 	ldrb.w	r7, [lr, r7]
 800fece:	fb07 b708 	mla	r7, r7, r8, fp
 800fed2:	b2bf      	uxth	r7, r7
 800fed4:	f107 0b01 	add.w	fp, r7, #1
 800fed8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800fedc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 800fee0:	fb1b fb05 	smulbb	fp, fp, r5
 800fee4:	123f      	asrs	r7, r7, #8
 800fee6:	f806 7c06 	strb.w	r7, [r6, #-6]
 800feea:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800feee:	fb07 b708 	mla	r7, r7, r8, fp
 800fef2:	b2bf      	uxth	r7, r7
 800fef4:	f107 0b01 	add.w	fp, r7, #1
 800fef8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 800fefc:	123f      	asrs	r7, r7, #8
 800fefe:	f806 7c05 	strb.w	r7, [r6, #-5]
 800ff02:	f89a 7002 	ldrb.w	r7, [sl, #2]
 800ff06:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 800ff0a:	fb1a fa05 	smulbb	sl, sl, r5
 800ff0e:	fb07 a708 	mla	r7, r7, r8, sl
 800ff12:	b2bf      	uxth	r7, r7
 800ff14:	f107 0a01 	add.w	sl, r7, #1
 800ff18:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 800ff1c:	123f      	asrs	r7, r7, #8
 800ff1e:	f806 7c04 	strb.w	r7, [r6, #-4]
 800ff22:	e7b5      	b.n	800fe90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 800ff24:	2700      	movs	r7, #0
 800ff26:	1bde      	subs	r6, r3, r7
 800ff28:	2e00      	cmp	r6, #0
 800ff2a:	dc42      	bgt.n	800ffb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 800ff2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff34:	441c      	add	r4, r3
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f340 8092 	ble.w	8010062 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 800ff3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff44:	ee30 0a04 	vadd.f32	s0, s0, s8
 800ff48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 800ff4c:	eef0 6a62 	vmov.f32	s13, s5
 800ff50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff54:	ee31 1a05 	vadd.f32	s2, s2, s10
 800ff58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff5c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 800ff60:	eef0 6a43 	vmov.f32	s13, s6
 800ff64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ff68:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800ff6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 800ff70:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ff74:	ee77 2a62 	vsub.f32	s5, s14, s5
 800ff78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 800ff7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 800ff80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 800ff84:	ee12 2a90 	vmov	r2, s5
 800ff88:	eef0 2a47 	vmov.f32	s5, s14
 800ff8c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ff90:	ee13 2a10 	vmov	r2, s6
 800ff94:	9311      	str	r3, [sp, #68]	; 0x44
 800ff96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff98:	eeb0 3a67 	vmov.f32	s6, s15
 800ff9c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ffa0:	9312      	str	r3, [sp, #72]	; 0x48
 800ffa2:	9b01      	ldr	r3, [sp, #4]
 800ffa4:	9a03      	ldr	r2, [sp, #12]
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffac:	bf08      	it	eq
 800ffae:	4613      	moveq	r3, r2
 800ffb0:	e73a      	b.n	800fe28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 800ffb2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 800ffb6:	d44e      	bmi.n	8010056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffb8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800ffbc:	4556      	cmp	r6, sl
 800ffbe:	dd4a      	ble.n	8010056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffc0:	ea5f 4b22 	movs.w	fp, r2, asr #16
 800ffc4:	d447      	bmi.n	8010056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffc6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ffca:	4559      	cmp	r1, fp
 800ffcc:	dd43      	ble.n	8010056 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 800ffce:	fa0f f986 	sxth.w	r9, r6
 800ffd2:	9902      	ldr	r1, [sp, #8]
 800ffd4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 800ffd8:	fb0b 1909 	mla	r9, fp, r9, r1
 800ffdc:	f814 b006 	ldrb.w	fp, [r4, r6]
 800ffe0:	f819 900a 	ldrb.w	r9, [r9, sl]
 800ffe4:	fb1b fb05 	smulbb	fp, fp, r5
 800ffe8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800ffec:	eb0e 0a09 	add.w	sl, lr, r9
 800fff0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 800fff4:	fb09 b908 	mla	r9, r9, r8, fp
 800fff8:	fa1f f989 	uxth.w	r9, r9
 800fffc:	f109 0b01 	add.w	fp, r9, #1
 8010000:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010004:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010008:	f804 9006 	strb.w	r9, [r4, r6]
 801000c:	4426      	add	r6, r4
 801000e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010012:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010016:	fb1b fb05 	smulbb	fp, fp, r5
 801001a:	fb09 b908 	mla	r9, r9, r8, fp
 801001e:	fa1f f989 	uxth.w	r9, r9
 8010022:	f109 0b01 	add.w	fp, r9, #1
 8010026:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801002a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801002e:	f886 9001 	strb.w	r9, [r6, #1]
 8010032:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010036:	f896 a002 	ldrb.w	sl, [r6, #2]
 801003a:	fb1a fa05 	smulbb	sl, sl, r5
 801003e:	fb09 a908 	mla	r9, r9, r8, sl
 8010042:	fa1f f989 	uxth.w	r9, r9
 8010046:	f109 0a01 	add.w	sl, r9, #1
 801004a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801004e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010052:	f886 9002 	strb.w	r9, [r6, #2]
 8010056:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010058:	3701      	adds	r7, #1
 801005a:	4408      	add	r0, r1
 801005c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801005e:	440a      	add	r2, r1
 8010060:	e761      	b.n	800ff26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010062:	b005      	add	sp, #20
 8010064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010068 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801006e:	4693      	mov	fp, r2
 8010070:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010076:	6868      	ldr	r0, [r5, #4]
 8010078:	6877      	ldr	r7, [r6, #4]
 801007a:	9100      	str	r1, [sp, #0]
 801007c:	3704      	adds	r7, #4
 801007e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010082:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8010086:	fb00 2404 	mla	r4, r0, r4, r2
 801008a:	682a      	ldr	r2, [r5, #0]
 801008c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010090:	4414      	add	r4, r2
 8010092:	6832      	ldr	r2, [r6, #0]
 8010094:	9201      	str	r2, [sp, #4]
 8010096:	9a00      	ldr	r2, [sp, #0]
 8010098:	2a00      	cmp	r2, #0
 801009a:	dc03      	bgt.n	80100a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801009c:	f1bb 0f00 	cmp.w	fp, #0
 80100a0:	f340 80bc 	ble.w	801021c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80100a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100a6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80100aa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80100ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100b0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80100b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	dd0c      	ble.n	80100d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80100bc:	1405      	asrs	r5, r0, #16
 80100be:	d405      	bmi.n	80100cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100c0:	4555      	cmp	r5, sl
 80100c2:	da03      	bge.n	80100cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100c4:	1415      	asrs	r5, r2, #16
 80100c6:	d401      	bmi.n	80100cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80100c8:	454d      	cmp	r5, r9
 80100ca:	db05      	blt.n	80100d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80100cc:	4440      	add	r0, r8
 80100ce:	4472      	add	r2, lr
 80100d0:	3b01      	subs	r3, #1
 80100d2:	3403      	adds	r4, #3
 80100d4:	e7f0      	b.n	80100b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80100d6:	d03f      	beq.n	8010158 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80100d8:	1e5d      	subs	r5, r3, #1
 80100da:	fb08 0c05 	mla	ip, r8, r5, r0
 80100de:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80100e2:	d42e      	bmi.n	8010142 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100e4:	45d4      	cmp	ip, sl
 80100e6:	da2c      	bge.n	8010142 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100e8:	fb0e 2505 	mla	r5, lr, r5, r2
 80100ec:	142d      	asrs	r5, r5, #16
 80100ee:	d428      	bmi.n	8010142 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100f0:	454d      	cmp	r5, r9
 80100f2:	da26      	bge.n	8010142 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80100f4:	1ce5      	adds	r5, r4, #3
 80100f6:	469c      	mov	ip, r3
 80100f8:	f1bc 0f00 	cmp.w	ip, #0
 80100fc:	f105 0503 	add.w	r5, r5, #3
 8010100:	dd25      	ble.n	801014e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8010102:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8010106:	ea4f 4922 	mov.w	r9, r2, asr #16
 801010a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801010e:	4472      	add	r2, lr
 8010110:	468a      	mov	sl, r1
 8010112:	9901      	ldr	r1, [sp, #4]
 8010114:	fb0a 1909 	mla	r9, sl, r9, r1
 8010118:	1401      	asrs	r1, r0, #16
 801011a:	4440      	add	r0, r8
 801011c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8010120:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010124:	eb07 0a09 	add.w	sl, r7, r9
 8010128:	f817 9009 	ldrb.w	r9, [r7, r9]
 801012c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8010130:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010134:	f805 9c05 	strb.w	r9, [r5, #-5]
 8010138:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801013c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8010140:	e7da      	b.n	80100f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8010142:	2500      	movs	r5, #0
 8010144:	eba3 0c05 	sub.w	ip, r3, r5
 8010148:	f1bc 0f00 	cmp.w	ip, #0
 801014c:	dc3b      	bgt.n	80101c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801014e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010156:	441c      	add	r4, r3
 8010158:	9b00      	ldr	r3, [sp, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	dd5e      	ble.n	801021c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801015e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010164:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010168:	eeb0 6a62 	vmov.f32	s12, s5
 801016c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010170:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010174:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010178:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801017c:	eeb0 6a43 	vmov.f32	s12, s6
 8010180:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010184:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010188:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801018c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010190:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010194:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010198:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801019c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80101a0:	ee12 2a90 	vmov	r2, s5
 80101a4:	eef0 2a47 	vmov.f32	s5, s14
 80101a8:	fb92 f8f3 	sdiv	r8, r2, r3
 80101ac:	ee13 2a10 	vmov	r2, s6
 80101b0:	eeb0 3a67 	vmov.f32	s6, s15
 80101b4:	fb92 fef3 	sdiv	lr, r2, r3
 80101b8:	9b00      	ldr	r3, [sp, #0]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101c0:	bf08      	it	eq
 80101c2:	465b      	moveq	r3, fp
 80101c4:	e767      	b.n	8010096 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80101c6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80101ca:	d423      	bmi.n	8010214 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101cc:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80101d0:	45cc      	cmp	ip, r9
 80101d2:	dd1f      	ble.n	8010214 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101d4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80101d8:	d41c      	bmi.n	8010214 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101da:	68f1      	ldr	r1, [r6, #12]
 80101dc:	4551      	cmp	r1, sl
 80101de:	dd19      	ble.n	8010214 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80101e0:	fa0f fc8c 	sxth.w	ip, ip
 80101e4:	9901      	ldr	r1, [sp, #4]
 80101e6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80101ea:	f81c c009 	ldrb.w	ip, [ip, r9]
 80101ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80101f2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80101f6:	eb07 090c 	add.w	r9, r7, ip
 80101fa:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80101fe:	f804 a00c 	strb.w	sl, [r4, ip]
 8010202:	44a4      	add	ip, r4
 8010204:	f899 a001 	ldrb.w	sl, [r9, #1]
 8010208:	f88c a001 	strb.w	sl, [ip, #1]
 801020c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8010210:	f88c 9002 	strb.w	r9, [ip, #2]
 8010214:	4440      	add	r0, r8
 8010216:	4472      	add	r2, lr
 8010218:	3501      	adds	r5, #1
 801021a:	e793      	b.n	8010144 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801021c:	b003      	add	sp, #12
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010222 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010226:	b085      	sub	sp, #20
 8010228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801022c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801022e:	9202      	str	r2, [sp, #8]
 8010230:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010234:	6860      	ldr	r0, [r4, #4]
 8010236:	9203      	str	r2, [sp, #12]
 8010238:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801023c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010240:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010244:	fb00 2505 	mla	r5, r0, r5, r2
 8010248:	6822      	ldr	r2, [r4, #0]
 801024a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801024e:	4415      	add	r5, r2
 8010250:	f8dc 2000 	ldr.w	r2, [ip]
 8010254:	9200      	str	r2, [sp, #0]
 8010256:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801025a:	3204      	adds	r2, #4
 801025c:	9201      	str	r2, [sp, #4]
 801025e:	2900      	cmp	r1, #0
 8010260:	dc03      	bgt.n	801026a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010262:	9a02      	ldr	r2, [sp, #8]
 8010264:	2a00      	cmp	r2, #0
 8010266:	f340 8127 	ble.w	80104b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801026a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801026c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010270:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010276:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801027a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801027e:	2b00      	cmp	r3, #0
 8010280:	dd0d      	ble.n	801029e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010282:	1422      	asrs	r2, r4, #16
 8010284:	d405      	bmi.n	8010292 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010286:	4542      	cmp	r2, r8
 8010288:	da03      	bge.n	8010292 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801028a:	1402      	asrs	r2, r0, #16
 801028c:	d401      	bmi.n	8010292 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801028e:	42ba      	cmp	r2, r7
 8010290:	db06      	blt.n	80102a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010292:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010294:	4474      	add	r4, lr
 8010296:	3b01      	subs	r3, #1
 8010298:	3503      	adds	r5, #3
 801029a:	4410      	add	r0, r2
 801029c:	e7ef      	b.n	801027e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801029e:	d075      	beq.n	801038c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80102a0:	1e5a      	subs	r2, r3, #1
 80102a2:	fb0e 4602 	mla	r6, lr, r2, r4
 80102a6:	1436      	asrs	r6, r6, #16
 80102a8:	d465      	bmi.n	8010376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102aa:	4546      	cmp	r6, r8
 80102ac:	da63      	bge.n	8010376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80102b0:	fb06 0202 	mla	r2, r6, r2, r0
 80102b4:	1412      	asrs	r2, r2, #16
 80102b6:	d45e      	bmi.n	8010376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102b8:	42ba      	cmp	r2, r7
 80102ba:	da5c      	bge.n	8010376 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80102bc:	1cef      	adds	r7, r5, #3
 80102be:	4699      	mov	r9, r3
 80102c0:	f1b9 0f00 	cmp.w	r9, #0
 80102c4:	dd5d      	ble.n	8010382 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80102c6:	1402      	asrs	r2, r0, #16
 80102c8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80102cc:	1426      	asrs	r6, r4, #16
 80102ce:	4692      	mov	sl, r2
 80102d0:	9a00      	ldr	r2, [sp, #0]
 80102d2:	fb08 220a 	mla	r2, r8, sl, r2
 80102d6:	5d92      	ldrb	r2, [r2, r6]
 80102d8:	9e01      	ldr	r6, [sp, #4]
 80102da:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80102de:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80102e2:	d041      	beq.n	8010368 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80102e4:	9a03      	ldr	r2, [sp, #12]
 80102e6:	fa5f fb86 	uxtb.w	fp, r6
 80102ea:	fb02 f808 	mul.w	r8, r2, r8
 80102ee:	f108 0201 	add.w	r2, r8, #1
 80102f2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80102f6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80102fa:	1212      	asrs	r2, r2, #8
 80102fc:	fa1f fa82 	uxth.w	sl, r2
 8010300:	43d2      	mvns	r2, r2
 8010302:	fb1b fb0a 	smulbb	fp, fp, sl
 8010306:	b2d2      	uxtb	r2, r2
 8010308:	fb08 b802 	mla	r8, r8, r2, fp
 801030c:	fa1f f888 	uxth.w	r8, r8
 8010310:	f108 0b01 	add.w	fp, r8, #1
 8010314:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010318:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801031c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010320:	fb1b fb0a 	smulbb	fp, fp, sl
 8010324:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010328:	fb16 fa0a 	smulbb	sl, r6, sl
 801032c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010330:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010334:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010338:	fb06 aa02 	mla	sl, r6, r2, sl
 801033c:	fb08 b802 	mla	r8, r8, r2, fp
 8010340:	fa1f fa8a 	uxth.w	sl, sl
 8010344:	fa1f f888 	uxth.w	r8, r8
 8010348:	f10a 0601 	add.w	r6, sl, #1
 801034c:	f108 0b01 	add.w	fp, r8, #1
 8010350:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010354:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010358:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801035c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010360:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010364:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801036a:	4474      	add	r4, lr
 801036c:	3703      	adds	r7, #3
 801036e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010372:	4410      	add	r0, r2
 8010374:	e7a4      	b.n	80102c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8010376:	f04f 0800 	mov.w	r8, #0
 801037a:	eba3 0208 	sub.w	r2, r3, r8
 801037e:	2a00      	cmp	r2, #0
 8010380:	dc3b      	bgt.n	80103fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8010382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801038a:	441d      	add	r5, r3
 801038c:	2900      	cmp	r1, #0
 801038e:	f340 8093 	ble.w	80104b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010392:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010398:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801039c:	3901      	subs	r1, #1
 801039e:	eeb0 6a62 	vmov.f32	s12, s5
 80103a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80103a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80103aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80103ae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80103b2:	eeb0 6a43 	vmov.f32	s12, s6
 80103b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80103ba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80103be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80103c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80103c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80103ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80103ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80103d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80103d6:	ee12 2a90 	vmov	r2, s5
 80103da:	eef0 2a47 	vmov.f32	s5, s14
 80103de:	fb92 fef3 	sdiv	lr, r2, r3
 80103e2:	ee13 2a10 	vmov	r2, s6
 80103e6:	eeb0 3a67 	vmov.f32	s6, s15
 80103ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80103ee:	9a02      	ldr	r2, [sp, #8]
 80103f0:	9312      	str	r3, [sp, #72]	; 0x48
 80103f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103f4:	bf08      	it	eq
 80103f6:	4613      	moveq	r3, r2
 80103f8:	e731      	b.n	801025e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80103fa:	1427      	asrs	r7, r4, #16
 80103fc:	d456      	bmi.n	80104ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80103fe:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010402:	42be      	cmp	r6, r7
 8010404:	dd52      	ble.n	80104ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010406:	ea5f 4920 	movs.w	r9, r0, asr #16
 801040a:	d44f      	bmi.n	80104ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801040c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010410:	454a      	cmp	r2, r9
 8010412:	dd4b      	ble.n	80104ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010414:	9a00      	ldr	r2, [sp, #0]
 8010416:	b236      	sxth	r6, r6
 8010418:	fb09 2606 	mla	r6, r9, r6, r2
 801041c:	5df2      	ldrb	r2, [r6, r7]
 801041e:	9e01      	ldr	r6, [sp, #4]
 8010420:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8010424:	0e3a      	lsrs	r2, r7, #24
 8010426:	d041      	beq.n	80104ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010428:	9e03      	ldr	r6, [sp, #12]
 801042a:	fa5f fb87 	uxtb.w	fp, r7
 801042e:	4372      	muls	r2, r6
 8010430:	1c56      	adds	r6, r2, #1
 8010432:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010436:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801043a:	1212      	asrs	r2, r2, #8
 801043c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010440:	fa1f fa82 	uxth.w	sl, r2
 8010444:	43d2      	mvns	r2, r2
 8010446:	fb1b fb0a 	smulbb	fp, fp, sl
 801044a:	b2d2      	uxtb	r2, r2
 801044c:	fb09 b902 	mla	r9, r9, r2, fp
 8010450:	fa1f f989 	uxth.w	r9, r9
 8010454:	f109 0b01 	add.w	fp, r9, #1
 8010458:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801045c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010460:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010464:	fb1b fb0a 	smulbb	fp, fp, sl
 8010468:	ea4f 2929 	mov.w	r9, r9, asr #8
 801046c:	fb17 fa0a 	smulbb	sl, r7, sl
 8010470:	f805 9006 	strb.w	r9, [r5, r6]
 8010474:	442e      	add	r6, r5
 8010476:	78b7      	ldrb	r7, [r6, #2]
 8010478:	f896 9001 	ldrb.w	r9, [r6, #1]
 801047c:	fb07 aa02 	mla	sl, r7, r2, sl
 8010480:	fb09 b902 	mla	r9, r9, r2, fp
 8010484:	fa1f fa8a 	uxth.w	sl, sl
 8010488:	fa1f f989 	uxth.w	r9, r9
 801048c:	f10a 0701 	add.w	r7, sl, #1
 8010490:	f109 0b01 	add.w	fp, r9, #1
 8010494:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010498:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801049c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80104a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80104a4:	f886 a002 	strb.w	sl, [r6, #2]
 80104a8:	f886 9001 	strb.w	r9, [r6, #1]
 80104ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104ae:	4474      	add	r4, lr
 80104b0:	f108 0801 	add.w	r8, r8, #1
 80104b4:	4410      	add	r0, r2
 80104b6:	e760      	b.n	801037a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80104b8:	b005      	add	sp, #20
 80104ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80104be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c2:	b085      	sub	sp, #20
 80104c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80104ca:	9203      	str	r2, [sp, #12]
 80104cc:	6868      	ldr	r0, [r5, #4]
 80104ce:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80104d2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80104d6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80104da:	fb00 2404 	mla	r4, r0, r4, r2
 80104de:	682a      	ldr	r2, [r5, #0]
 80104e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80104e4:	4414      	add	r4, r2
 80104e6:	f8dc 2000 	ldr.w	r2, [ip]
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80104f0:	3204      	adds	r2, #4
 80104f2:	9202      	str	r2, [sp, #8]
 80104f4:	2900      	cmp	r1, #0
 80104f6:	dc03      	bgt.n	8010500 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80104f8:	9a03      	ldr	r2, [sp, #12]
 80104fa:	2a00      	cmp	r2, #0
 80104fc:	f340 8137 	ble.w	801076e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8010500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010502:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010506:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801050a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801050c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010510:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010514:	2b00      	cmp	r3, #0
 8010516:	dd0d      	ble.n	8010534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010518:	1405      	asrs	r5, r0, #16
 801051a:	d405      	bmi.n	8010528 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801051c:	4545      	cmp	r5, r8
 801051e:	da03      	bge.n	8010528 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010520:	1415      	asrs	r5, r2, #16
 8010522:	d401      	bmi.n	8010528 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010524:	42bd      	cmp	r5, r7
 8010526:	db06      	blt.n	8010536 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8010528:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801052a:	4470      	add	r0, lr
 801052c:	3b01      	subs	r3, #1
 801052e:	3403      	adds	r4, #3
 8010530:	442a      	add	r2, r5
 8010532:	e7ef      	b.n	8010514 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8010534:	d070      	beq.n	8010618 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8010536:	1e5d      	subs	r5, r3, #1
 8010538:	fb0e 0605 	mla	r6, lr, r5, r0
 801053c:	1436      	asrs	r6, r6, #16
 801053e:	d462      	bmi.n	8010606 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010540:	4546      	cmp	r6, r8
 8010542:	da60      	bge.n	8010606 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010544:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010546:	fb06 2505 	mla	r5, r6, r5, r2
 801054a:	142d      	asrs	r5, r5, #16
 801054c:	d45b      	bmi.n	8010606 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801054e:	42bd      	cmp	r5, r7
 8010550:	da59      	bge.n	8010606 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8010552:	1ce5      	adds	r5, r4, #3
 8010554:	469a      	mov	sl, r3
 8010556:	f1ba 0f00 	cmp.w	sl, #0
 801055a:	dd58      	ble.n	801060e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801055c:	1416      	asrs	r6, r2, #16
 801055e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010562:	1407      	asrs	r7, r0, #16
 8010564:	46b1      	mov	r9, r6
 8010566:	9e01      	ldr	r6, [sp, #4]
 8010568:	fb08 6609 	mla	r6, r8, r9, r6
 801056c:	5df6      	ldrb	r6, [r6, r7]
 801056e:	9f02      	ldr	r7, [sp, #8]
 8010570:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8010574:	0e37      	lsrs	r7, r6, #24
 8010576:	2fff      	cmp	r7, #255	; 0xff
 8010578:	f000 80f0 	beq.w	801075c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801057c:	fa5f f887 	uxtb.w	r8, r7
 8010580:	b3d7      	cbz	r7, 80105f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010582:	fa1f f788 	uxth.w	r7, r8
 8010586:	ea6f 0808 	mvn.w	r8, r8
 801058a:	fa5f fb86 	uxtb.w	fp, r6
 801058e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8010592:	fa5f f888 	uxtb.w	r8, r8
 8010596:	fb1b fb07 	smulbb	fp, fp, r7
 801059a:	fb09 b908 	mla	r9, r9, r8, fp
 801059e:	fa1f f989 	uxth.w	r9, r9
 80105a2:	f109 0b01 	add.w	fp, r9, #1
 80105a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80105aa:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80105ae:	fb1b fb08 	smulbb	fp, fp, r8
 80105b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80105b6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80105ba:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80105be:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80105c2:	fb09 b907 	mla	r9, r9, r7, fp
 80105c6:	fa1f f989 	uxth.w	r9, r9
 80105ca:	f109 0b01 	add.w	fp, r9, #1
 80105ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80105d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80105d6:	f805 9c02 	strb.w	r9, [r5, #-2]
 80105da:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80105de:	fb19 f808 	smulbb	r8, r9, r8
 80105e2:	fb06 8607 	mla	r6, r6, r7, r8
 80105e6:	b2b6      	uxth	r6, r6
 80105e8:	f106 0801 	add.w	r8, r6, #1
 80105ec:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80105f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80105f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80105f8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80105fa:	4470      	add	r0, lr
 80105fc:	3503      	adds	r5, #3
 80105fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010602:	4432      	add	r2, r6
 8010604:	e7a7      	b.n	8010556 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8010606:	2600      	movs	r6, #0
 8010608:	1b9d      	subs	r5, r3, r6
 801060a:	2d00      	cmp	r5, #0
 801060c:	dc3b      	bgt.n	8010686 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801060e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010616:	441c      	add	r4, r3
 8010618:	2900      	cmp	r1, #0
 801061a:	f340 80a8 	ble.w	801076e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801061e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010624:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010628:	3901      	subs	r1, #1
 801062a:	eeb0 6a62 	vmov.f32	s12, s5
 801062e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010632:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010636:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801063a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801063e:	eeb0 6a43 	vmov.f32	s12, s6
 8010642:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010646:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801064a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801064e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010652:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010656:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801065a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801065e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010662:	ee12 2a90 	vmov	r2, s5
 8010666:	eef0 2a47 	vmov.f32	s5, s14
 801066a:	fb92 fef3 	sdiv	lr, r2, r3
 801066e:	ee13 2a10 	vmov	r2, s6
 8010672:	eeb0 3a67 	vmov.f32	s6, s15
 8010676:	fb92 f3f3 	sdiv	r3, r2, r3
 801067a:	9a03      	ldr	r2, [sp, #12]
 801067c:	9312      	str	r3, [sp, #72]	; 0x48
 801067e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010680:	bf08      	it	eq
 8010682:	4613      	moveq	r3, r2
 8010684:	e736      	b.n	80104f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8010686:	ea5f 4820 	movs.w	r8, r0, asr #16
 801068a:	d457      	bmi.n	801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801068c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8010690:	4547      	cmp	r7, r8
 8010692:	dd53      	ble.n	801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8010694:	ea5f 4922 	movs.w	r9, r2, asr #16
 8010698:	d450      	bmi.n	801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801069a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801069e:	454d      	cmp	r5, r9
 80106a0:	dd4c      	ble.n	801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80106a2:	9d01      	ldr	r5, [sp, #4]
 80106a4:	b23f      	sxth	r7, r7
 80106a6:	fb09 5707 	mla	r7, r9, r7, r5
 80106aa:	f817 5008 	ldrb.w	r5, [r7, r8]
 80106ae:	9f02      	ldr	r7, [sp, #8]
 80106b0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80106b4:	0e2f      	lsrs	r7, r5, #24
 80106b6:	2fff      	cmp	r7, #255	; 0xff
 80106b8:	d045      	beq.n	8010746 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80106ba:	fa5f f987 	uxtb.w	r9, r7
 80106be:	b3ef      	cbz	r7, 801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80106c0:	fa1f f889 	uxth.w	r8, r9
 80106c4:	ea6f 0909 	mvn.w	r9, r9
 80106c8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80106cc:	fa5f fb85 	uxtb.w	fp, r5
 80106d0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80106d4:	fa5f f989 	uxtb.w	r9, r9
 80106d8:	fb1b fb08 	smulbb	fp, fp, r8
 80106dc:	fb0a ba09 	mla	sl, sl, r9, fp
 80106e0:	fa1f fa8a 	uxth.w	sl, sl
 80106e4:	f10a 0b01 	add.w	fp, sl, #1
 80106e8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80106ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80106f0:	f804 a007 	strb.w	sl, [r4, r7]
 80106f4:	4427      	add	r7, r4
 80106f6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80106fa:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80106fe:	f897 b001 	ldrb.w	fp, [r7, #1]
 8010702:	fb1b fb09 	smulbb	fp, fp, r9
 8010706:	fb0a ba08 	mla	sl, sl, r8, fp
 801070a:	fa1f fa8a 	uxth.w	sl, sl
 801070e:	f10a 0b01 	add.w	fp, sl, #1
 8010712:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8010716:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801071a:	f887 a001 	strb.w	sl, [r7, #1]
 801071e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8010722:	fb1a f909 	smulbb	r9, sl, r9
 8010726:	fb05 9508 	mla	r5, r5, r8, r9
 801072a:	b2ad      	uxth	r5, r5
 801072c:	f105 0901 	add.w	r9, r5, #1
 8010730:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8010734:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010738:	f887 9002 	strb.w	r9, [r7, #2]
 801073c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801073e:	4470      	add	r0, lr
 8010740:	3601      	adds	r6, #1
 8010742:	442a      	add	r2, r5
 8010744:	e760      	b.n	8010608 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010746:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801074a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801074e:	55e5      	strb	r5, [r4, r7]
 8010750:	4427      	add	r7, r4
 8010752:	0c2d      	lsrs	r5, r5, #16
 8010754:	f887 8001 	strb.w	r8, [r7, #1]
 8010758:	70bd      	strb	r5, [r7, #2]
 801075a:	e7ef      	b.n	801073c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801075c:	0a37      	lsrs	r7, r6, #8
 801075e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8010762:	0c36      	lsrs	r6, r6, #16
 8010764:	f805 7c02 	strb.w	r7, [r5, #-2]
 8010768:	f805 6c01 	strb.w	r6, [r5, #-1]
 801076c:	e744      	b.n	80105f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801076e:	b005      	add	sp, #20
 8010770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010774 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010778:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801077a:	9201      	str	r2, [sp, #4]
 801077c:	6870      	ldr	r0, [r6, #4]
 801077e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8010782:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010786:	fa1f fe85 	uxth.w	lr, r5
 801078a:	43ed      	mvns	r5, r5
 801078c:	f8dc 8000 	ldr.w	r8, [ip]
 8010790:	b2ed      	uxtb	r5, r5
 8010792:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010796:	fb00 2404 	mla	r4, r0, r4, r2
 801079a:	6832      	ldr	r2, [r6, #0]
 801079c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80107a0:	4414      	add	r4, r2
 80107a2:	2900      	cmp	r1, #0
 80107a4:	dc03      	bgt.n	80107ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80107a6:	9a01      	ldr	r2, [sp, #4]
 80107a8:	2a00      	cmp	r2, #0
 80107aa:	f340 810d 	ble.w	80109c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80107ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107b0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80107b4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80107b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107ba:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80107be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	dd0e      	ble.n	80107e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80107c6:	1406      	asrs	r6, r0, #16
 80107c8:	d405      	bmi.n	80107d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107ca:	4556      	cmp	r6, sl
 80107cc:	da03      	bge.n	80107d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107ce:	1416      	asrs	r6, r2, #16
 80107d0:	d401      	bmi.n	80107d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80107d2:	454e      	cmp	r6, r9
 80107d4:	db07      	blt.n	80107e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80107d6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80107d8:	3b01      	subs	r3, #1
 80107da:	3403      	adds	r4, #3
 80107dc:	4430      	add	r0, r6
 80107de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80107e0:	4432      	add	r2, r6
 80107e2:	e7ee      	b.n	80107c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80107e4:	d060      	beq.n	80108a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80107e6:	1e5e      	subs	r6, r3, #1
 80107e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80107ea:	fb07 0706 	mla	r7, r7, r6, r0
 80107ee:	143f      	asrs	r7, r7, #16
 80107f0:	d451      	bmi.n	8010896 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107f2:	4557      	cmp	r7, sl
 80107f4:	da4f      	bge.n	8010896 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80107f6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80107f8:	fb07 2606 	mla	r6, r7, r6, r2
 80107fc:	1436      	asrs	r6, r6, #16
 80107fe:	d44a      	bmi.n	8010896 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8010800:	454e      	cmp	r6, r9
 8010802:	da48      	bge.n	8010896 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8010804:	1ce6      	adds	r6, r4, #3
 8010806:	4699      	mov	r9, r3
 8010808:	f1b9 0f00 	cmp.w	r9, #0
 801080c:	f106 0603 	add.w	r6, r6, #3
 8010810:	dd45      	ble.n	801089e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8010812:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8010816:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801081a:	1417      	asrs	r7, r2, #16
 801081c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010820:	fb0b a707 	mla	r7, fp, r7, sl
 8010824:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010828:	fb1b fb05 	smulbb	fp, fp, r5
 801082c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010830:	eb08 0a07 	add.w	sl, r8, r7
 8010834:	f818 7007 	ldrb.w	r7, [r8, r7]
 8010838:	fb07 b70e 	mla	r7, r7, lr, fp
 801083c:	b2bf      	uxth	r7, r7
 801083e:	f107 0b01 	add.w	fp, r7, #1
 8010842:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010846:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801084a:	fb1b fb05 	smulbb	fp, fp, r5
 801084e:	123f      	asrs	r7, r7, #8
 8010850:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010854:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010858:	fb07 b70e 	mla	r7, r7, lr, fp
 801085c:	b2bf      	uxth	r7, r7
 801085e:	f107 0b01 	add.w	fp, r7, #1
 8010862:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010866:	123f      	asrs	r7, r7, #8
 8010868:	f806 7c05 	strb.w	r7, [r6, #-5]
 801086c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010870:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010874:	fb1a fa05 	smulbb	sl, sl, r5
 8010878:	fb07 a70e 	mla	r7, r7, lr, sl
 801087c:	b2bf      	uxth	r7, r7
 801087e:	f107 0a01 	add.w	sl, r7, #1
 8010882:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010886:	123f      	asrs	r7, r7, #8
 8010888:	f806 7c04 	strb.w	r7, [r6, #-4]
 801088c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801088e:	4438      	add	r0, r7
 8010890:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010892:	443a      	add	r2, r7
 8010894:	e7b8      	b.n	8010808 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8010896:	2700      	movs	r7, #0
 8010898:	1bde      	subs	r6, r3, r7
 801089a:	2e00      	cmp	r6, #0
 801089c:	dc3f      	bgt.n	801091e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801089e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80108a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108a6:	441c      	add	r4, r3
 80108a8:	2900      	cmp	r1, #0
 80108aa:	f340 808d 	ble.w	80109c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80108ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80108b8:	3901      	subs	r1, #1
 80108ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80108be:	eef0 6a62 	vmov.f32	s13, s5
 80108c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80108c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80108ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108ce:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80108d2:	eef0 6a43 	vmov.f32	s13, s6
 80108d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80108da:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80108de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80108e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80108e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80108ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80108ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80108f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80108f6:	ee12 2a90 	vmov	r2, s5
 80108fa:	eef0 2a47 	vmov.f32	s5, s14
 80108fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8010902:	ee13 2a10 	vmov	r2, s6
 8010906:	930f      	str	r3, [sp, #60]	; 0x3c
 8010908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801090a:	eeb0 3a67 	vmov.f32	s6, s15
 801090e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010912:	9a01      	ldr	r2, [sp, #4]
 8010914:	9310      	str	r3, [sp, #64]	; 0x40
 8010916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010918:	bf08      	it	eq
 801091a:	4613      	moveq	r3, r2
 801091c:	e741      	b.n	80107a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801091e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010922:	d44b      	bmi.n	80109bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8010924:	f8dc b008 	ldr.w	fp, [ip, #8]
 8010928:	45cb      	cmp	fp, r9
 801092a:	dd47      	ble.n	80109bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801092c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010930:	d444      	bmi.n	80109bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8010932:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8010936:	4556      	cmp	r6, sl
 8010938:	dd40      	ble.n	80109bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801093a:	fa0f f68b 	sxth.w	r6, fp
 801093e:	fb0a 9906 	mla	r9, sl, r6, r9
 8010942:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010946:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801094a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801094e:	fb1b fb05 	smulbb	fp, fp, r5
 8010952:	eb08 0a09 	add.w	sl, r8, r9
 8010956:	f818 9009 	ldrb.w	r9, [r8, r9]
 801095a:	fb09 b90e 	mla	r9, r9, lr, fp
 801095e:	fa1f f989 	uxth.w	r9, r9
 8010962:	f109 0b01 	add.w	fp, r9, #1
 8010966:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801096a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801096e:	f804 9006 	strb.w	r9, [r4, r6]
 8010972:	4426      	add	r6, r4
 8010974:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010978:	f896 b001 	ldrb.w	fp, [r6, #1]
 801097c:	fb1b fb05 	smulbb	fp, fp, r5
 8010980:	fb09 b90e 	mla	r9, r9, lr, fp
 8010984:	fa1f f989 	uxth.w	r9, r9
 8010988:	f109 0b01 	add.w	fp, r9, #1
 801098c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010990:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010994:	f886 9001 	strb.w	r9, [r6, #1]
 8010998:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801099c:	f896 a002 	ldrb.w	sl, [r6, #2]
 80109a0:	fb1a fa05 	smulbb	sl, sl, r5
 80109a4:	fb09 a90e 	mla	r9, r9, lr, sl
 80109a8:	fa1f f989 	uxth.w	r9, r9
 80109ac:	f109 0a01 	add.w	sl, r9, #1
 80109b0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80109b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80109b8:	f886 9002 	strb.w	r9, [r6, #2]
 80109bc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80109be:	3701      	adds	r7, #1
 80109c0:	4430      	add	r0, r6
 80109c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80109c4:	4432      	add	r2, r6
 80109c6:	e767      	b.n	8010898 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80109c8:	b003      	add	sp, #12
 80109ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80109ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80109d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109d8:	9201      	str	r2, [sp, #4]
 80109da:	6868      	ldr	r0, [r5, #4]
 80109dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80109de:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80109e2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80109e6:	fb00 2404 	mla	r4, r0, r4, r2
 80109ea:	682a      	ldr	r2, [r5, #0]
 80109ec:	f8d7 8000 	ldr.w	r8, [r7]
 80109f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80109f4:	4414      	add	r4, r2
 80109f6:	2900      	cmp	r1, #0
 80109f8:	dc03      	bgt.n	8010a02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80109fa:	9a01      	ldr	r2, [sp, #4]
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	f340 80af 	ble.w	8010b60 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8010a02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a04:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8010a08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a0e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8010a12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	dd0c      	ble.n	8010a34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8010a1a:	1405      	asrs	r5, r0, #16
 8010a1c:	d405      	bmi.n	8010a2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a1e:	4555      	cmp	r5, sl
 8010a20:	da03      	bge.n	8010a2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a22:	1415      	asrs	r5, r2, #16
 8010a24:	d401      	bmi.n	8010a2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010a26:	454d      	cmp	r5, r9
 8010a28:	db05      	blt.n	8010a36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010a2a:	4470      	add	r0, lr
 8010a2c:	4462      	add	r2, ip
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	3403      	adds	r4, #3
 8010a32:	e7f0      	b.n	8010a16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010a34:	d038      	beq.n	8010aa8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010a36:	1e5d      	subs	r5, r3, #1
 8010a38:	fb0e 0605 	mla	r6, lr, r5, r0
 8010a3c:	1436      	asrs	r6, r6, #16
 8010a3e:	d42a      	bmi.n	8010a96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a40:	4556      	cmp	r6, sl
 8010a42:	da28      	bge.n	8010a96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a44:	fb0c 2505 	mla	r5, ip, r5, r2
 8010a48:	142d      	asrs	r5, r5, #16
 8010a4a:	d424      	bmi.n	8010a96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a4c:	454d      	cmp	r5, r9
 8010a4e:	da22      	bge.n	8010a96 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8010a50:	1ce6      	adds	r6, r4, #3
 8010a52:	4699      	mov	r9, r3
 8010a54:	f1b9 0f00 	cmp.w	r9, #0
 8010a58:	f106 0603 	add.w	r6, r6, #3
 8010a5c:	dd1f      	ble.n	8010a9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8010a5e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8010a62:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010a66:	1415      	asrs	r5, r2, #16
 8010a68:	4470      	add	r0, lr
 8010a6a:	4462      	add	r2, ip
 8010a6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a70:	fb0b a505 	mla	r5, fp, r5, sl
 8010a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a78:	eb08 0a05 	add.w	sl, r8, r5
 8010a7c:	f818 5005 	ldrb.w	r5, [r8, r5]
 8010a80:	f806 5c06 	strb.w	r5, [r6, #-6]
 8010a84:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8010a88:	f806 5c05 	strb.w	r5, [r6, #-5]
 8010a8c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8010a90:	f806 5c04 	strb.w	r5, [r6, #-4]
 8010a94:	e7de      	b.n	8010a54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8010a96:	2600      	movs	r6, #0
 8010a98:	1b9d      	subs	r5, r3, r6
 8010a9a:	2d00      	cmp	r5, #0
 8010a9c:	dc38      	bgt.n	8010b10 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010aa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010aa6:	441c      	add	r4, r3
 8010aa8:	2900      	cmp	r1, #0
 8010aaa:	dd59      	ble.n	8010b60 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8010aac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010ab6:	3901      	subs	r1, #1
 8010ab8:	eeb0 6a62 	vmov.f32	s12, s5
 8010abc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010ac0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010ac4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ac8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010acc:	eeb0 6a43 	vmov.f32	s12, s6
 8010ad0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ad4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010ad8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010adc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010ae0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010ae4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010ae8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010aec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010af0:	ee12 2a90 	vmov	r2, s5
 8010af4:	eef0 2a47 	vmov.f32	s5, s14
 8010af8:	fb92 fef3 	sdiv	lr, r2, r3
 8010afc:	ee13 2a10 	vmov	r2, s6
 8010b00:	eeb0 3a67 	vmov.f32	s6, s15
 8010b04:	fb92 fcf3 	sdiv	ip, r2, r3
 8010b08:	9a01      	ldr	r2, [sp, #4]
 8010b0a:	bf08      	it	eq
 8010b0c:	4613      	moveq	r3, r2
 8010b0e:	e772      	b.n	80109f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010b10:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010b14:	d420      	bmi.n	8010b58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b16:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8010b1a:	45cb      	cmp	fp, r9
 8010b1c:	dd1c      	ble.n	8010b58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b1e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010b22:	d419      	bmi.n	8010b58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b24:	68fd      	ldr	r5, [r7, #12]
 8010b26:	4555      	cmp	r5, sl
 8010b28:	dd16      	ble.n	8010b58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8010b2a:	fa0f f58b 	sxth.w	r5, fp
 8010b2e:	fb0a 9505 	mla	r5, sl, r5, r9
 8010b32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b36:	f818 9005 	ldrb.w	r9, [r8, r5]
 8010b3a:	eb08 0b05 	add.w	fp, r8, r5
 8010b3e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010b42:	f804 9005 	strb.w	r9, [r4, r5]
 8010b46:	4425      	add	r5, r4
 8010b48:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8010b4c:	f885 9001 	strb.w	r9, [r5, #1]
 8010b50:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8010b54:	f885 9002 	strb.w	r9, [r5, #2]
 8010b58:	4470      	add	r0, lr
 8010b5a:	4462      	add	r2, ip
 8010b5c:	3601      	adds	r6, #1
 8010b5e:	e79b      	b.n	8010a98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8010b60:	b003      	add	sp, #12
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010b72:	9202      	str	r2, [sp, #8]
 8010b74:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010b78:	6860      	ldr	r0, [r4, #4]
 8010b7a:	9203      	str	r2, [sp, #12]
 8010b7c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010b80:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010b84:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010b88:	fb00 2505 	mla	r5, r0, r5, r2
 8010b8c:	6822      	ldr	r2, [r4, #0]
 8010b8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b92:	4415      	add	r5, r2
 8010b94:	f8dc 2000 	ldr.w	r2, [ip]
 8010b98:	9201      	str	r2, [sp, #4]
 8010b9a:	2900      	cmp	r1, #0
 8010b9c:	dc03      	bgt.n	8010ba6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8010b9e:	9a02      	ldr	r2, [sp, #8]
 8010ba0:	2a00      	cmp	r2, #0
 8010ba2:	f340 8122 	ble.w	8010dea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ba8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010bac:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010bb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010bb2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010bb6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dd0d      	ble.n	8010bda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8010bbe:	1422      	asrs	r2, r4, #16
 8010bc0:	d405      	bmi.n	8010bce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bc2:	4542      	cmp	r2, r8
 8010bc4:	da03      	bge.n	8010bce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bc6:	1402      	asrs	r2, r0, #16
 8010bc8:	d401      	bmi.n	8010bce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8010bca:	42ba      	cmp	r2, r7
 8010bcc:	db06      	blt.n	8010bdc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8010bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010bd0:	4474      	add	r4, lr
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	3503      	adds	r5, #3
 8010bd6:	4410      	add	r0, r2
 8010bd8:	e7ef      	b.n	8010bba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8010bda:	d072      	beq.n	8010cc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8010bdc:	1e5a      	subs	r2, r3, #1
 8010bde:	fb0e 4602 	mla	r6, lr, r2, r4
 8010be2:	1436      	asrs	r6, r6, #16
 8010be4:	d462      	bmi.n	8010cac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010be6:	4546      	cmp	r6, r8
 8010be8:	da60      	bge.n	8010cac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bea:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010bec:	fb06 0202 	mla	r2, r6, r2, r0
 8010bf0:	1412      	asrs	r2, r2, #16
 8010bf2:	d45b      	bmi.n	8010cac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bf4:	42ba      	cmp	r2, r7
 8010bf6:	da59      	bge.n	8010cac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010bf8:	1cef      	adds	r7, r5, #3
 8010bfa:	4699      	mov	r9, r3
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	dd5a      	ble.n	8010cb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8010c02:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010c06:	1426      	asrs	r6, r4, #16
 8010c08:	1402      	asrs	r2, r0, #16
 8010c0a:	fb08 6202 	mla	r2, r8, r2, r6
 8010c0e:	9e01      	ldr	r6, [sp, #4]
 8010c10:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8010c14:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8010c18:	d041      	beq.n	8010c9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010c1a:	9a03      	ldr	r2, [sp, #12]
 8010c1c:	fa5f fb86 	uxtb.w	fp, r6
 8010c20:	fb02 f808 	mul.w	r8, r2, r8
 8010c24:	f108 0201 	add.w	r2, r8, #1
 8010c28:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8010c2c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8010c30:	1212      	asrs	r2, r2, #8
 8010c32:	fa1f fa82 	uxth.w	sl, r2
 8010c36:	43d2      	mvns	r2, r2
 8010c38:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c3c:	b2d2      	uxtb	r2, r2
 8010c3e:	fb08 b802 	mla	r8, r8, r2, fp
 8010c42:	fa1f f888 	uxth.w	r8, r8
 8010c46:	f108 0b01 	add.w	fp, r8, #1
 8010c4a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c4e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8010c52:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010c56:	fb1b fb0a 	smulbb	fp, fp, sl
 8010c5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c5e:	fb16 fa0a 	smulbb	sl, r6, sl
 8010c62:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010c66:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010c6a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010c6e:	fb06 aa02 	mla	sl, r6, r2, sl
 8010c72:	fb08 b802 	mla	r8, r8, r2, fp
 8010c76:	fa1f fa8a 	uxth.w	sl, sl
 8010c7a:	fa1f f888 	uxth.w	r8, r8
 8010c7e:	f10a 0601 	add.w	r6, sl, #1
 8010c82:	f108 0b01 	add.w	fp, r8, #1
 8010c86:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010c8a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010c8e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010c92:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010c96:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010c9a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ca0:	4474      	add	r4, lr
 8010ca2:	3703      	adds	r7, #3
 8010ca4:	f109 39ff 	add.w	r9, r9, #4294967295
 8010ca8:	4410      	add	r0, r2
 8010caa:	e7a7      	b.n	8010bfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8010cac:	f04f 0800 	mov.w	r8, #0
 8010cb0:	eba3 0208 	sub.w	r2, r3, r8
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	dc3b      	bgt.n	8010d30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8010cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cc0:	441d      	add	r5, r3
 8010cc2:	2900      	cmp	r1, #0
 8010cc4:	f340 8091 	ble.w	8010dea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8010cc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010cd2:	3901      	subs	r1, #1
 8010cd4:	eeb0 6a62 	vmov.f32	s12, s5
 8010cd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010cdc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010ce0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ce4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010ce8:	eeb0 6a43 	vmov.f32	s12, s6
 8010cec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010cf0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010cf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010cf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010cfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010d00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010d04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010d08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010d0c:	ee12 2a90 	vmov	r2, s5
 8010d10:	eef0 2a47 	vmov.f32	s5, s14
 8010d14:	fb92 fef3 	sdiv	lr, r2, r3
 8010d18:	ee13 2a10 	vmov	r2, s6
 8010d1c:	eeb0 3a67 	vmov.f32	s6, s15
 8010d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d24:	9a02      	ldr	r2, [sp, #8]
 8010d26:	9312      	str	r3, [sp, #72]	; 0x48
 8010d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d2a:	bf08      	it	eq
 8010d2c:	4613      	moveq	r3, r2
 8010d2e:	e734      	b.n	8010b9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010d30:	1427      	asrs	r7, r4, #16
 8010d32:	d454      	bmi.n	8010dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d34:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010d38:	42be      	cmp	r6, r7
 8010d3a:	dd50      	ble.n	8010dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d3c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010d40:	d44d      	bmi.n	8010dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d42:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010d46:	454a      	cmp	r2, r9
 8010d48:	dd49      	ble.n	8010dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d4a:	b236      	sxth	r6, r6
 8010d4c:	9a01      	ldr	r2, [sp, #4]
 8010d4e:	fb09 7606 	mla	r6, r9, r6, r7
 8010d52:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010d56:	0e3a      	lsrs	r2, r7, #24
 8010d58:	d041      	beq.n	8010dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8010d5a:	9e03      	ldr	r6, [sp, #12]
 8010d5c:	fa5f fb87 	uxtb.w	fp, r7
 8010d60:	4372      	muls	r2, r6
 8010d62:	1c56      	adds	r6, r2, #1
 8010d64:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8010d68:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8010d6c:	1212      	asrs	r2, r2, #8
 8010d6e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8010d72:	fa1f fa82 	uxth.w	sl, r2
 8010d76:	43d2      	mvns	r2, r2
 8010d78:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d7c:	b2d2      	uxtb	r2, r2
 8010d7e:	fb09 b902 	mla	r9, r9, r2, fp
 8010d82:	fa1f f989 	uxth.w	r9, r9
 8010d86:	f109 0b01 	add.w	fp, r9, #1
 8010d8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010d8e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8010d92:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8010d96:	fb1b fb0a 	smulbb	fp, fp, sl
 8010d9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010d9e:	fb17 fa0a 	smulbb	sl, r7, sl
 8010da2:	f805 9006 	strb.w	r9, [r5, r6]
 8010da6:	442e      	add	r6, r5
 8010da8:	78b7      	ldrb	r7, [r6, #2]
 8010daa:	f896 9001 	ldrb.w	r9, [r6, #1]
 8010dae:	fb07 aa02 	mla	sl, r7, r2, sl
 8010db2:	fb09 b902 	mla	r9, r9, r2, fp
 8010db6:	fa1f fa8a 	uxth.w	sl, sl
 8010dba:	fa1f f989 	uxth.w	r9, r9
 8010dbe:	f10a 0701 	add.w	r7, sl, #1
 8010dc2:	f109 0b01 	add.w	fp, r9, #1
 8010dc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8010dca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010dce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010dd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010dd6:	f886 a002 	strb.w	sl, [r6, #2]
 8010dda:	f886 9001 	strb.w	r9, [r6, #1]
 8010dde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010de0:	4474      	add	r4, lr
 8010de2:	f108 0801 	add.w	r8, r8, #1
 8010de6:	4410      	add	r0, r2
 8010de8:	e762      	b.n	8010cb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010dea:	b005      	add	sp, #20
 8010dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010df0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dfa:	9201      	str	r2, [sp, #4]
 8010dfc:	6860      	ldr	r0, [r4, #4]
 8010dfe:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8010e02:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8010e06:	fb00 2505 	mla	r5, r0, r5, r2
 8010e0a:	6822      	ldr	r2, [r4, #0]
 8010e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e10:	4415      	add	r5, r2
 8010e12:	f8dc 2000 	ldr.w	r2, [ip]
 8010e16:	9200      	str	r2, [sp, #0]
 8010e18:	2900      	cmp	r1, #0
 8010e1a:	dc03      	bgt.n	8010e24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8010e1c:	9a01      	ldr	r2, [sp, #4]
 8010e1e:	2a00      	cmp	r2, #0
 8010e20:	f340 812b 	ble.w	801107a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e26:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010e2a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e30:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010e34:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dd0e      	ble.n	8010e5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8010e3c:	1422      	asrs	r2, r4, #16
 8010e3e:	d405      	bmi.n	8010e4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e40:	4572      	cmp	r2, lr
 8010e42:	da03      	bge.n	8010e4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e44:	1402      	asrs	r2, r0, #16
 8010e46:	d401      	bmi.n	8010e4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010e48:	42ba      	cmp	r2, r7
 8010e4a:	db07      	blt.n	8010e5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8010e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e4e:	3b01      	subs	r3, #1
 8010e50:	3503      	adds	r5, #3
 8010e52:	4414      	add	r4, r2
 8010e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e56:	4410      	add	r0, r2
 8010e58:	e7ee      	b.n	8010e38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010e5a:	d06f      	beq.n	8010f3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8010e5c:	1e5a      	subs	r2, r3, #1
 8010e5e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010e60:	fb06 4602 	mla	r6, r6, r2, r4
 8010e64:	1436      	asrs	r6, r6, #16
 8010e66:	d45e      	bmi.n	8010f26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e68:	4576      	cmp	r6, lr
 8010e6a:	da5c      	bge.n	8010f26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010e6e:	fb06 0202 	mla	r2, r6, r2, r0
 8010e72:	1412      	asrs	r2, r2, #16
 8010e74:	d457      	bmi.n	8010f26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e76:	42ba      	cmp	r2, r7
 8010e78:	da55      	bge.n	8010f26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8010e7a:	1cee      	adds	r6, r5, #3
 8010e7c:	469a      	mov	sl, r3
 8010e7e:	f1ba 0f00 	cmp.w	sl, #0
 8010e82:	dd56      	ble.n	8010f32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8010e84:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8010e88:	1427      	asrs	r7, r4, #16
 8010e8a:	1402      	asrs	r2, r0, #16
 8010e8c:	fb0e 7202 	mla	r2, lr, r2, r7
 8010e90:	9f00      	ldr	r7, [sp, #0]
 8010e92:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8010e96:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8010e9a:	d03c      	beq.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8010e9c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8010ea0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010ea4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8010ea8:	fa5f f28e 	uxtb.w	r2, lr
 8010eac:	b2ff      	uxtb	r7, r7
 8010eae:	f000 80dd 	beq.w	801106c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8010eb2:	fa1f f882 	uxth.w	r8, r2
 8010eb6:	43d2      	mvns	r2, r2
 8010eb8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8010ebc:	fb17 f708 	smulbb	r7, r7, r8
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	fb19 f908 	smulbb	r9, r9, r8
 8010ec6:	fb0e 7702 	mla	r7, lr, r2, r7
 8010eca:	fb1b f808 	smulbb	r8, fp, r8
 8010ece:	b2bf      	uxth	r7, r7
 8010ed0:	f107 0e01 	add.w	lr, r7, #1
 8010ed4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8010ed8:	123f      	asrs	r7, r7, #8
 8010eda:	f806 7c03 	strb.w	r7, [r6, #-3]
 8010ede:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8010ee2:	fb07 9902 	mla	r9, r7, r2, r9
 8010ee6:	fa1f f989 	uxth.w	r9, r9
 8010eea:	f109 0701 	add.w	r7, r9, #1
 8010eee:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8010ef2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8010ef6:	fb07 8802 	mla	r8, r7, r2, r8
 8010efa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010efe:	fa1f f888 	uxth.w	r8, r8
 8010f02:	f806 9c02 	strb.w	r9, [r6, #-2]
 8010f06:	f108 0201 	add.w	r2, r8, #1
 8010f0a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8010f0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010f12:	f806 8c01 	strb.w	r8, [r6, #-1]
 8010f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f18:	3603      	adds	r6, #3
 8010f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f1e:	4414      	add	r4, r2
 8010f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f22:	4410      	add	r0, r2
 8010f24:	e7ab      	b.n	8010e7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8010f26:	f04f 0e00 	mov.w	lr, #0
 8010f2a:	eba3 020e 	sub.w	r2, r3, lr
 8010f2e:	2a00      	cmp	r2, #0
 8010f30:	dc3d      	bgt.n	8010fae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8010f32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f3a:	441d      	add	r5, r3
 8010f3c:	2900      	cmp	r1, #0
 8010f3e:	f340 809c 	ble.w	801107a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8010f42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010f4c:	3901      	subs	r1, #1
 8010f4e:	eeb0 6a62 	vmov.f32	s12, s5
 8010f52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010f56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010f5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f5e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010f62:	eeb0 6a43 	vmov.f32	s12, s6
 8010f66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f6a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010f6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010f86:	ee12 2a90 	vmov	r2, s5
 8010f8a:	eef0 2a47 	vmov.f32	s5, s14
 8010f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f92:	ee13 2a10 	vmov	r2, s6
 8010f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f9a:	eeb0 3a67 	vmov.f32	s6, s15
 8010f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fa2:	9a01      	ldr	r2, [sp, #4]
 8010fa4:	9310      	str	r3, [sp, #64]	; 0x40
 8010fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fa8:	bf08      	it	eq
 8010faa:	4613      	moveq	r3, r2
 8010fac:	e734      	b.n	8010e18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8010fae:	1427      	asrs	r7, r4, #16
 8010fb0:	d44d      	bmi.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fb2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010fb6:	42be      	cmp	r6, r7
 8010fb8:	dd49      	ble.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fba:	ea5f 4820 	movs.w	r8, r0, asr #16
 8010fbe:	d446      	bmi.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fc0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010fc4:	4542      	cmp	r2, r8
 8010fc6:	dd42      	ble.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fc8:	b236      	sxth	r6, r6
 8010fca:	9a00      	ldr	r2, [sp, #0]
 8010fcc:	fb08 7606 	mla	r6, r8, r6, r7
 8010fd0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8010fd4:	0e3a      	lsrs	r2, r7, #24
 8010fd6:	d03a      	beq.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8010fd8:	2aff      	cmp	r2, #255	; 0xff
 8010fda:	b2d6      	uxtb	r6, r2
 8010fdc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8010fe0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8010fe4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8010fe8:	b2ff      	uxtb	r7, r7
 8010fea:	d037      	beq.n	801105c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8010fec:	fa1f f986 	uxth.w	r9, r6
 8010ff0:	4472      	add	r2, lr
 8010ff2:	43f6      	mvns	r6, r6
 8010ff4:	f815 8002 	ldrb.w	r8, [r5, r2]
 8010ff8:	fb17 f709 	smulbb	r7, r7, r9
 8010ffc:	fb1a fa09 	smulbb	sl, sl, r9
 8011000:	b2f6      	uxtb	r6, r6
 8011002:	fb1b f909 	smulbb	r9, fp, r9
 8011006:	fb08 7706 	mla	r7, r8, r6, r7
 801100a:	b2bf      	uxth	r7, r7
 801100c:	f107 0801 	add.w	r8, r7, #1
 8011010:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011014:	123f      	asrs	r7, r7, #8
 8011016:	54af      	strb	r7, [r5, r2]
 8011018:	442a      	add	r2, r5
 801101a:	7857      	ldrb	r7, [r2, #1]
 801101c:	fb07 aa06 	mla	sl, r7, r6, sl
 8011020:	fa1f fa8a 	uxth.w	sl, sl
 8011024:	f10a 0701 	add.w	r7, sl, #1
 8011028:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801102c:	7897      	ldrb	r7, [r2, #2]
 801102e:	fb07 9906 	mla	r9, r7, r6, r9
 8011032:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011036:	fa1f f989 	uxth.w	r9, r9
 801103a:	f882 a001 	strb.w	sl, [r2, #1]
 801103e:	f109 0601 	add.w	r6, r9, #1
 8011042:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011046:	ea4f 2929 	mov.w	r9, r9, asr #8
 801104a:	f882 9002 	strb.w	r9, [r2, #2]
 801104e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011050:	f10e 0e01 	add.w	lr, lr, #1
 8011054:	4414      	add	r4, r2
 8011056:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011058:	4410      	add	r0, r2
 801105a:	e766      	b.n	8010f2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801105c:	4472      	add	r2, lr
 801105e:	54af      	strb	r7, [r5, r2]
 8011060:	442a      	add	r2, r5
 8011062:	f882 a001 	strb.w	sl, [r2, #1]
 8011066:	f882 b002 	strb.w	fp, [r2, #2]
 801106a:	e7f0      	b.n	801104e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801106c:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011070:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011074:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011078:	e74d      	b.n	8010f16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801107a:	b003      	add	sp, #12
 801107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b087      	sub	sp, #28
 8011086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801108a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801108c:	9204      	str	r2, [sp, #16]
 801108e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011092:	6860      	ldr	r0, [r4, #4]
 8011094:	9205      	str	r2, [sp, #20]
 8011096:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801109a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801109e:	9101      	str	r1, [sp, #4]
 80110a0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80110a4:	fb00 2505 	mla	r5, r0, r5, r2
 80110a8:	6822      	ldr	r2, [r4, #0]
 80110aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110ae:	4415      	add	r5, r2
 80110b0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80110b4:	3201      	adds	r2, #1
 80110b6:	f022 0201 	bic.w	r2, r2, #1
 80110ba:	9202      	str	r2, [sp, #8]
 80110bc:	f8dc 2000 	ldr.w	r2, [ip]
 80110c0:	9203      	str	r2, [sp, #12]
 80110c2:	9a01      	ldr	r2, [sp, #4]
 80110c4:	2a00      	cmp	r2, #0
 80110c6:	dc03      	bgt.n	80110d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80110c8:	9a04      	ldr	r2, [sp, #16]
 80110ca:	2a00      	cmp	r2, #0
 80110cc:	f340 8135 	ble.w	801133a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80110d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110d2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80110d6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80110da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110dc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80110e0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	dd0d      	ble.n	8011104 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80110e8:	1422      	asrs	r2, r4, #16
 80110ea:	d405      	bmi.n	80110f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110ec:	4542      	cmp	r2, r8
 80110ee:	da03      	bge.n	80110f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110f0:	1402      	asrs	r2, r0, #16
 80110f2:	d401      	bmi.n	80110f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80110f4:	42ba      	cmp	r2, r7
 80110f6:	db06      	blt.n	8011106 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80110f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110fa:	4474      	add	r4, lr
 80110fc:	3b01      	subs	r3, #1
 80110fe:	3503      	adds	r5, #3
 8011100:	4410      	add	r0, r2
 8011102:	e7ef      	b.n	80110e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011104:	d077      	beq.n	80111f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8011106:	1e5a      	subs	r2, r3, #1
 8011108:	fb0e 4602 	mla	r6, lr, r2, r4
 801110c:	1436      	asrs	r6, r6, #16
 801110e:	d469      	bmi.n	80111e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011110:	4546      	cmp	r6, r8
 8011112:	da67      	bge.n	80111e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011114:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011116:	fb06 0202 	mla	r2, r6, r2, r0
 801111a:	1412      	asrs	r2, r2, #16
 801111c:	d462      	bmi.n	80111e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801111e:	42ba      	cmp	r2, r7
 8011120:	da60      	bge.n	80111e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011122:	1cee      	adds	r6, r5, #3
 8011124:	4699      	mov	r9, r3
 8011126:	f1b9 0f00 	cmp.w	r9, #0
 801112a:	dd5f      	ble.n	80111ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801112c:	1422      	asrs	r2, r4, #16
 801112e:	9902      	ldr	r1, [sp, #8]
 8011130:	1407      	asrs	r7, r0, #16
 8011132:	fb01 2707 	mla	r7, r1, r7, r2
 8011136:	9903      	ldr	r1, [sp, #12]
 8011138:	087a      	lsrs	r2, r7, #1
 801113a:	5c8a      	ldrb	r2, [r1, r2]
 801113c:	07f9      	lsls	r1, r7, #31
 801113e:	bf54      	ite	pl
 8011140:	f002 020f 	andpl.w	r2, r2, #15
 8011144:	1112      	asrmi	r2, r2, #4
 8011146:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801114a:	b2d2      	uxtb	r2, r2
 801114c:	2a00      	cmp	r2, #0
 801114e:	d042      	beq.n	80111d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011150:	497b      	ldr	r1, [pc, #492]	; (8011340 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011152:	680f      	ldr	r7, [r1, #0]
 8011154:	9905      	ldr	r1, [sp, #20]
 8011156:	fa5f fb87 	uxtb.w	fp, r7
 801115a:	434a      	muls	r2, r1
 801115c:	f102 0801 	add.w	r8, r2, #1
 8011160:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8011164:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8011168:	1212      	asrs	r2, r2, #8
 801116a:	fa1f fa82 	uxth.w	sl, r2
 801116e:	43d2      	mvns	r2, r2
 8011170:	fb1b fb0a 	smulbb	fp, fp, sl
 8011174:	b2d2      	uxtb	r2, r2
 8011176:	fb08 b802 	mla	r8, r8, r2, fp
 801117a:	fa1f f888 	uxth.w	r8, r8
 801117e:	f108 0b01 	add.w	fp, r8, #1
 8011182:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011186:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801118a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801118e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011192:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011196:	fb17 fa0a 	smulbb	sl, r7, sl
 801119a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801119e:	f806 8c03 	strb.w	r8, [r6, #-3]
 80111a2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80111a6:	fb07 aa02 	mla	sl, r7, r2, sl
 80111aa:	fb08 b802 	mla	r8, r8, r2, fp
 80111ae:	fa1f fa8a 	uxth.w	sl, sl
 80111b2:	fa1f f888 	uxth.w	r8, r8
 80111b6:	f10a 0701 	add.w	r7, sl, #1
 80111ba:	f108 0b01 	add.w	fp, r8, #1
 80111be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80111c2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80111c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80111ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80111ce:	f806 ac01 	strb.w	sl, [r6, #-1]
 80111d2:	f806 8c02 	strb.w	r8, [r6, #-2]
 80111d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80111d8:	4474      	add	r4, lr
 80111da:	3603      	adds	r6, #3
 80111dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80111e0:	4410      	add	r0, r2
 80111e2:	e7a0      	b.n	8011126 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80111e4:	2700      	movs	r7, #0
 80111e6:	1bda      	subs	r2, r3, r7
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	dc3e      	bgt.n	801126a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80111ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80111f4:	441d      	add	r5, r3
 80111f6:	9b01      	ldr	r3, [sp, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f340 809e 	ble.w	801133a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80111fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011202:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011204:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011208:	eeb0 6a62 	vmov.f32	s12, s5
 801120c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011210:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011218:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801121c:	eeb0 6a43 	vmov.f32	s12, s6
 8011220:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011224:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011228:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801122c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011230:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011234:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011238:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801123c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011240:	ee12 2a90 	vmov	r2, s5
 8011244:	eef0 2a47 	vmov.f32	s5, s14
 8011248:	fb92 fef3 	sdiv	lr, r2, r3
 801124c:	ee13 2a10 	vmov	r2, s6
 8011250:	eeb0 3a67 	vmov.f32	s6, s15
 8011254:	fb92 f3f3 	sdiv	r3, r2, r3
 8011258:	9314      	str	r3, [sp, #80]	; 0x50
 801125a:	9b01      	ldr	r3, [sp, #4]
 801125c:	9a04      	ldr	r2, [sp, #16]
 801125e:	3b01      	subs	r3, #1
 8011260:	9301      	str	r3, [sp, #4]
 8011262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011264:	bf08      	it	eq
 8011266:	4613      	moveq	r3, r2
 8011268:	e72b      	b.n	80110c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801126a:	1426      	asrs	r6, r4, #16
 801126c:	d460      	bmi.n	8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801126e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011272:	42b2      	cmp	r2, r6
 8011274:	dd5c      	ble.n	8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011276:	ea5f 4820 	movs.w	r8, r0, asr #16
 801127a:	d459      	bmi.n	8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801127c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011280:	4542      	cmp	r2, r8
 8011282:	dd55      	ble.n	8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011284:	9a02      	ldr	r2, [sp, #8]
 8011286:	9903      	ldr	r1, [sp, #12]
 8011288:	fb08 6602 	mla	r6, r8, r2, r6
 801128c:	0872      	lsrs	r2, r6, #1
 801128e:	07f6      	lsls	r6, r6, #31
 8011290:	5c8a      	ldrb	r2, [r1, r2]
 8011292:	bf54      	ite	pl
 8011294:	f002 020f 	andpl.w	r2, r2, #15
 8011298:	1112      	asrmi	r2, r2, #4
 801129a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801129e:	b2d2      	uxtb	r2, r2
 80112a0:	2a00      	cmp	r2, #0
 80112a2:	d045      	beq.n	8011330 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80112a4:	4926      	ldr	r1, [pc, #152]	; (8011340 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80112a6:	f8d1 8000 	ldr.w	r8, [r1]
 80112aa:	9905      	ldr	r1, [sp, #20]
 80112ac:	fa5f fb88 	uxtb.w	fp, r8
 80112b0:	434a      	muls	r2, r1
 80112b2:	1c56      	adds	r6, r2, #1
 80112b4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80112b8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80112bc:	1212      	asrs	r2, r2, #8
 80112be:	f815 9006 	ldrb.w	r9, [r5, r6]
 80112c2:	fa1f fa82 	uxth.w	sl, r2
 80112c6:	43d2      	mvns	r2, r2
 80112c8:	fb1b fb0a 	smulbb	fp, fp, sl
 80112cc:	b2d2      	uxtb	r2, r2
 80112ce:	fb09 b902 	mla	r9, r9, r2, fp
 80112d2:	fa1f f989 	uxth.w	r9, r9
 80112d6:	f109 0b01 	add.w	fp, r9, #1
 80112da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80112de:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80112e2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80112e6:	fb1b fb0a 	smulbb	fp, fp, sl
 80112ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80112ee:	fb18 fa0a 	smulbb	sl, r8, sl
 80112f2:	f805 9006 	strb.w	r9, [r5, r6]
 80112f6:	442e      	add	r6, r5
 80112f8:	f896 8002 	ldrb.w	r8, [r6, #2]
 80112fc:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011300:	fb08 aa02 	mla	sl, r8, r2, sl
 8011304:	fb09 b902 	mla	r9, r9, r2, fp
 8011308:	fa1f fa8a 	uxth.w	sl, sl
 801130c:	fa1f f989 	uxth.w	r9, r9
 8011310:	f10a 0801 	add.w	r8, sl, #1
 8011314:	f109 0b01 	add.w	fp, r9, #1
 8011318:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801131c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011320:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011324:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011328:	f886 a002 	strb.w	sl, [r6, #2]
 801132c:	f886 9001 	strb.w	r9, [r6, #1]
 8011330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011332:	4474      	add	r4, lr
 8011334:	3701      	adds	r7, #1
 8011336:	4410      	add	r0, r2
 8011338:	e755      	b.n	80111e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801133a:	b007      	add	sp, #28
 801133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011340:	2400ae14 	.word	0x2400ae14

08011344 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	b085      	sub	sp, #20
 801134a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801134e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011350:	9203      	str	r2, [sp, #12]
 8011352:	6860      	ldr	r0, [r4, #4]
 8011354:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011358:	9100      	str	r1, [sp, #0]
 801135a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801135e:	fb00 2606 	mla	r6, r0, r6, r2
 8011362:	6822      	ldr	r2, [r4, #0]
 8011364:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011368:	4416      	add	r6, r2
 801136a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801136e:	3201      	adds	r2, #1
 8011370:	f022 0201 	bic.w	r2, r2, #1
 8011374:	9201      	str	r2, [sp, #4]
 8011376:	f8dc 2000 	ldr.w	r2, [ip]
 801137a:	9202      	str	r2, [sp, #8]
 801137c:	9a00      	ldr	r2, [sp, #0]
 801137e:	2a00      	cmp	r2, #0
 8011380:	dc03      	bgt.n	801138a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8011382:	9a03      	ldr	r2, [sp, #12]
 8011384:	2a00      	cmp	r2, #0
 8011386:	f340 8140 	ble.w	801160a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801138a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801138c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011390:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8011394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011396:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801139a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dd0e      	ble.n	80113c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80113a2:	142a      	asrs	r2, r5, #16
 80113a4:	d405      	bmi.n	80113b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80113a6:	4572      	cmp	r2, lr
 80113a8:	da03      	bge.n	80113b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80113aa:	1422      	asrs	r2, r4, #16
 80113ac:	d401      	bmi.n	80113b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80113ae:	42ba      	cmp	r2, r7
 80113b0:	db07      	blt.n	80113c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80113b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113b4:	3b01      	subs	r3, #1
 80113b6:	3603      	adds	r6, #3
 80113b8:	4415      	add	r5, r2
 80113ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80113bc:	4414      	add	r4, r2
 80113be:	e7ee      	b.n	801139e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80113c0:	d072      	beq.n	80114a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80113c2:	1e5a      	subs	r2, r3, #1
 80113c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113c6:	fb00 5002 	mla	r0, r0, r2, r5
 80113ca:	1400      	asrs	r0, r0, #16
 80113cc:	d463      	bmi.n	8011496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113ce:	4570      	cmp	r0, lr
 80113d0:	da61      	bge.n	8011496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80113d4:	fb00 4202 	mla	r2, r0, r2, r4
 80113d8:	1412      	asrs	r2, r2, #16
 80113da:	d45c      	bmi.n	8011496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113dc:	42ba      	cmp	r2, r7
 80113de:	da5a      	bge.n	8011496 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80113e0:	1cf0      	adds	r0, r6, #3
 80113e2:	469a      	mov	sl, r3
 80113e4:	f1ba 0f00 	cmp.w	sl, #0
 80113e8:	dd59      	ble.n	801149e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80113ea:	142a      	asrs	r2, r5, #16
 80113ec:	9901      	ldr	r1, [sp, #4]
 80113ee:	1427      	asrs	r7, r4, #16
 80113f0:	fb01 2707 	mla	r7, r1, r7, r2
 80113f4:	9902      	ldr	r1, [sp, #8]
 80113f6:	087a      	lsrs	r2, r7, #1
 80113f8:	5c8a      	ldrb	r2, [r1, r2]
 80113fa:	07f9      	lsls	r1, r7, #31
 80113fc:	bf54      	ite	pl
 80113fe:	f002 020f 	andpl.w	r2, r2, #15
 8011402:	1112      	asrmi	r2, r2, #4
 8011404:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011408:	b2d2      	uxtb	r2, r2
 801140a:	2a00      	cmp	r2, #0
 801140c:	d03b      	beq.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801140e:	4980      	ldr	r1, [pc, #512]	; (8011610 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8011410:	2aff      	cmp	r2, #255	; 0xff
 8011412:	680f      	ldr	r7, [r1, #0]
 8011414:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011418:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801141c:	b2ff      	uxtb	r7, r7
 801141e:	f000 80ed 	beq.w	80115fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8011422:	fa1f f882 	uxth.w	r8, r2
 8011426:	43d2      	mvns	r2, r2
 8011428:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801142c:	fb17 f708 	smulbb	r7, r7, r8
 8011430:	b2d2      	uxtb	r2, r2
 8011432:	fb19 f908 	smulbb	r9, r9, r8
 8011436:	fb0e 7702 	mla	r7, lr, r2, r7
 801143a:	fb1b f808 	smulbb	r8, fp, r8
 801143e:	b2bf      	uxth	r7, r7
 8011440:	f107 0e01 	add.w	lr, r7, #1
 8011444:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011448:	123f      	asrs	r7, r7, #8
 801144a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801144e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8011452:	fb07 9902 	mla	r9, r7, r2, r9
 8011456:	fa1f f989 	uxth.w	r9, r9
 801145a:	f109 0701 	add.w	r7, r9, #1
 801145e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011462:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8011466:	fb07 8802 	mla	r8, r7, r2, r8
 801146a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801146e:	fa1f f888 	uxth.w	r8, r8
 8011472:	f800 9c02 	strb.w	r9, [r0, #-2]
 8011476:	f108 0201 	add.w	r2, r8, #1
 801147a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801147e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011482:	f800 8c01 	strb.w	r8, [r0, #-1]
 8011486:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011488:	3003      	adds	r0, #3
 801148a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801148e:	4415      	add	r5, r2
 8011490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011492:	4414      	add	r4, r2
 8011494:	e7a6      	b.n	80113e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8011496:	2700      	movs	r7, #0
 8011498:	1bda      	subs	r2, r3, r7
 801149a:	2a00      	cmp	r2, #0
 801149c:	dc40      	bgt.n	8011520 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801149e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114a6:	441e      	add	r6, r3
 80114a8:	9b00      	ldr	r3, [sp, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f340 80ad 	ble.w	801160a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80114b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80114b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80114ba:	eeb0 6a62 	vmov.f32	s12, s5
 80114be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80114c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80114c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114ca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80114ce:	eeb0 6a43 	vmov.f32	s12, s6
 80114d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114d6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80114da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80114de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80114e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80114e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80114ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80114ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80114f2:	ee12 2a90 	vmov	r2, s5
 80114f6:	eef0 2a47 	vmov.f32	s5, s14
 80114fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80114fe:	ee13 2a10 	vmov	r2, s6
 8011502:	9311      	str	r3, [sp, #68]	; 0x44
 8011504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011506:	eeb0 3a67 	vmov.f32	s6, s15
 801150a:	fb92 f3f3 	sdiv	r3, r2, r3
 801150e:	9312      	str	r3, [sp, #72]	; 0x48
 8011510:	9b00      	ldr	r3, [sp, #0]
 8011512:	9a03      	ldr	r2, [sp, #12]
 8011514:	3b01      	subs	r3, #1
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801151a:	bf08      	it	eq
 801151c:	4613      	moveq	r3, r2
 801151e:	e72d      	b.n	801137c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8011520:	1428      	asrs	r0, r5, #16
 8011522:	d45c      	bmi.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8011524:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011528:	4282      	cmp	r2, r0
 801152a:	dd58      	ble.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801152c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8011530:	d455      	bmi.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8011532:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011536:	4572      	cmp	r2, lr
 8011538:	dd51      	ble.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801153a:	9a01      	ldr	r2, [sp, #4]
 801153c:	9902      	ldr	r1, [sp, #8]
 801153e:	fb0e 0002 	mla	r0, lr, r2, r0
 8011542:	0842      	lsrs	r2, r0, #1
 8011544:	07c0      	lsls	r0, r0, #31
 8011546:	5c8a      	ldrb	r2, [r1, r2]
 8011548:	bf54      	ite	pl
 801154a:	f002 020f 	andpl.w	r2, r2, #15
 801154e:	1112      	asrmi	r2, r2, #4
 8011550:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011554:	b2d2      	uxtb	r2, r2
 8011556:	2a00      	cmp	r2, #0
 8011558:	d041      	beq.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801155a:	492d      	ldr	r1, [pc, #180]	; (8011610 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801155c:	2aff      	cmp	r2, #255	; 0xff
 801155e:	6808      	ldr	r0, [r1, #0]
 8011560:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8011564:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8011568:	fa5f fe80 	uxtb.w	lr, r0
 801156c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8011570:	d03b      	beq.n	80115ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8011572:	fa1f f982 	uxth.w	r9, r2
 8011576:	4438      	add	r0, r7
 8011578:	43d2      	mvns	r2, r2
 801157a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801157e:	fb1e fe09 	smulbb	lr, lr, r9
 8011582:	fb1a fa09 	smulbb	sl, sl, r9
 8011586:	b2d2      	uxtb	r2, r2
 8011588:	fb1b f909 	smulbb	r9, fp, r9
 801158c:	fb08 ee02 	mla	lr, r8, r2, lr
 8011590:	fa1f fe8e 	uxth.w	lr, lr
 8011594:	f10e 0801 	add.w	r8, lr, #1
 8011598:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801159c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80115a0:	f806 e000 	strb.w	lr, [r6, r0]
 80115a4:	4430      	add	r0, r6
 80115a6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80115aa:	fb0e aa02 	mla	sl, lr, r2, sl
 80115ae:	fa1f fa8a 	uxth.w	sl, sl
 80115b2:	f10a 0e01 	add.w	lr, sl, #1
 80115b6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80115ba:	f890 e002 	ldrb.w	lr, [r0, #2]
 80115be:	fb0e 9902 	mla	r9, lr, r2, r9
 80115c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80115c6:	fa1f f989 	uxth.w	r9, r9
 80115ca:	f880 a001 	strb.w	sl, [r0, #1]
 80115ce:	f109 0201 	add.w	r2, r9, #1
 80115d2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80115d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115da:	f880 9002 	strb.w	r9, [r0, #2]
 80115de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80115e0:	3701      	adds	r7, #1
 80115e2:	4415      	add	r5, r2
 80115e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80115e6:	4414      	add	r4, r2
 80115e8:	e756      	b.n	8011498 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80115ea:	4438      	add	r0, r7
 80115ec:	f806 e000 	strb.w	lr, [r6, r0]
 80115f0:	4430      	add	r0, r6
 80115f2:	f880 a001 	strb.w	sl, [r0, #1]
 80115f6:	f880 b002 	strb.w	fp, [r0, #2]
 80115fa:	e7f0      	b.n	80115de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80115fc:	f800 7c03 	strb.w	r7, [r0, #-3]
 8011600:	f800 9c02 	strb.w	r9, [r0, #-2]
 8011604:	f800 bc01 	strb.w	fp, [r0, #-1]
 8011608:	e73d      	b.n	8011486 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801160a:	b005      	add	sp, #20
 801160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011610:	2400ae14 	.word	0x2400ae14

08011614 <_ZN8touchgfx8LCD24bppD1Ev>:
 8011614:	4770      	bx	lr

08011616 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8011616:	4770      	bx	lr

08011618 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8011618:	4770      	bx	lr

0801161a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801161a:	4770      	bx	lr

0801161c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801161c:	4770      	bx	lr

0801161e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801161e:	4770      	bx	lr

08011620 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011620:	4770      	bx	lr

08011622 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011622:	4770      	bx	lr

08011624 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011624:	4770      	bx	lr

08011626 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011626:	4770      	bx	lr

08011628 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011628:	4770      	bx	lr

0801162a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801162a:	4770      	bx	lr

0801162c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801162c:	4770      	bx	lr

0801162e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801162e:	4770      	bx	lr

08011630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8011630:	4770      	bx	lr

08011632 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8011632:	4770      	bx	lr

08011634 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8011634:	4770      	bx	lr

08011636 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8011636:	4770      	bx	lr

08011638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8011638:	4770      	bx	lr

0801163a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801163a:	4770      	bx	lr

0801163c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801163c:	4770      	bx	lr
	...

08011640 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011642:	4606      	mov	r6, r0
 8011644:	b087      	sub	sp, #28
 8011646:	4615      	mov	r5, r2
 8011648:	461f      	mov	r7, r3
 801164a:	b353      	cbz	r3, 80116a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801164c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011650:	2b00      	cmp	r3, #0
 8011652:	dd26      	ble.n	80116a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8011654:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011658:	2b00      	cmp	r3, #0
 801165a:	dd22      	ble.n	80116a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801165c:	6808      	ldr	r0, [r1, #0]
 801165e:	aa04      	add	r2, sp, #16
 8011660:	6849      	ldr	r1, [r1, #4]
 8011662:	4c1b      	ldr	r4, [pc, #108]	; (80116d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8011664:	c203      	stmia	r2!, {r0, r1}
 8011666:	a804      	add	r0, sp, #16
 8011668:	f7fb fb74 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801166c:	6820      	ldr	r0, [r4, #0]
 801166e:	6803      	ldr	r3, [r0, #0]
 8011670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011672:	4798      	blx	r3
 8011674:	2fff      	cmp	r7, #255	; 0xff
 8011676:	d016      	beq.n	80116a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8011678:	f010 0f08 	tst.w	r0, #8
 801167c:	6820      	ldr	r0, [r4, #0]
 801167e:	d015      	beq.n	80116ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8011680:	2400      	movs	r4, #0
 8011682:	6801      	ldr	r1, [r0, #0]
 8011684:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011688:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801168c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8011690:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8011694:	9401      	str	r4, [sp, #4]
 8011696:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801169a:	9400      	str	r4, [sp, #0]
 801169c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801169e:	4629      	mov	r1, r5
 80116a0:	47a0      	blx	r4
 80116a2:	b007      	add	sp, #28
 80116a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a6:	f010 0f02 	tst.w	r0, #2
 80116aa:	e7e7      	b.n	801167c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80116ac:	6803      	ldr	r3, [r0, #0]
 80116ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b0:	4798      	blx	r3
 80116b2:	4b08      	ldr	r3, [pc, #32]	; (80116d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80116b4:	4601      	mov	r1, r0
 80116b6:	4630      	mov	r0, r6
 80116b8:	881a      	ldrh	r2, [r3, #0]
 80116ba:	6833      	ldr	r3, [r6, #0]
 80116bc:	e9cd 5700 	strd	r5, r7, [sp]
 80116c0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80116c2:	ab04      	add	r3, sp, #16
 80116c4:	47a8      	blx	r5
 80116c6:	6820      	ldr	r0, [r4, #0]
 80116c8:	6803      	ldr	r3, [r0, #0]
 80116ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116cc:	4798      	blx	r3
 80116ce:	e7e8      	b.n	80116a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80116d0:	2400ae0c 	.word	0x2400ae0c
 80116d4:	2400ae06 	.word	0x2400ae06

080116d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80116d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116dc:	b08b      	sub	sp, #44	; 0x2c
 80116de:	460d      	mov	r5, r1
 80116e0:	4616      	mov	r6, r2
 80116e2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80116e6:	f1b8 0f00 	cmp.w	r8, #0
 80116ea:	d047      	beq.n	801177c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80116ec:	6810      	ldr	r0, [r2, #0]
 80116ee:	ac06      	add	r4, sp, #24
 80116f0:	6851      	ldr	r1, [r2, #4]
 80116f2:	4f51      	ldr	r7, [pc, #324]	; (8011838 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80116f4:	c403      	stmia	r4!, {r0, r1}
 80116f6:	6818      	ldr	r0, [r3, #0]
 80116f8:	ac08      	add	r4, sp, #32
 80116fa:	6859      	ldr	r1, [r3, #4]
 80116fc:	c403      	stmia	r4!, {r0, r1}
 80116fe:	a806      	add	r0, sp, #24
 8011700:	f7fb fb28 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011704:	4631      	mov	r1, r6
 8011706:	a808      	add	r0, sp, #32
 8011708:	f7fb fb4c 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801170c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011710:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8011714:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011718:	6838      	ldr	r0, [r7, #0]
 801171a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801171e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8011722:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8011726:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801172a:	440d      	add	r5, r1
 801172c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011730:	440a      	add	r2, r1
 8011732:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011736:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801173a:	4413      	add	r3, r2
 801173c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011740:	6803      	ldr	r3, [r0, #0]
 8011742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011744:	4798      	blx	r3
 8011746:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801174a:	d01a      	beq.n	8011782 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801174c:	f010 0f04 	tst.w	r0, #4
 8011750:	6838      	ldr	r0, [r7, #0]
 8011752:	d019      	beq.n	8011788 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8011754:	2100      	movs	r1, #0
 8011756:	6807      	ldr	r7, [r0, #0]
 8011758:	b2a4      	uxth	r4, r4
 801175a:	f8cd 800c 	str.w	r8, [sp, #12]
 801175e:	b2b6      	uxth	r6, r6
 8011760:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8011764:	9401      	str	r4, [sp, #4]
 8011766:	9600      	str	r6, [sp, #0]
 8011768:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801176c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8011770:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8011774:	9102      	str	r1, [sp, #8]
 8011776:	4629      	mov	r1, r5
 8011778:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801177a:	47a0      	blx	r4
 801177c:	b00b      	add	sp, #44	; 0x2c
 801177e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011782:	f010 0f01 	tst.w	r0, #1
 8011786:	e7e3      	b.n	8011750 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8011788:	6803      	ldr	r3, [r0, #0]
 801178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801178c:	4798      	blx	r3
 801178e:	4a2b      	ldr	r2, [pc, #172]	; (801183c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8011790:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8011794:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011798:	8813      	ldrh	r3, [r2, #0]
 801179a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801179e:	fb03 f404 	mul.w	r4, r3, r4
 80117a2:	fb03 c101 	mla	r1, r3, r1, ip
 80117a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80117aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80117ae:	4408      	add	r0, r1
 80117b0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80117b4:	4404      	add	r4, r0
 80117b6:	d02e      	beq.n	8011816 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80117b8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80117bc:	1b9b      	subs	r3, r3, r6
 80117be:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80117c2:	1b96      	subs	r6, r2, r6
 80117c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80117cc:	42a0      	cmp	r0, r4
 80117ce:	d22d      	bcs.n	801182c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80117d0:	eb00 0e01 	add.w	lr, r0, r1
 80117d4:	4570      	cmp	r0, lr
 80117d6:	d210      	bcs.n	80117fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80117d8:	f890 9000 	ldrb.w	r9, [r0]
 80117dc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80117e0:	fb19 f90c 	smulbb	r9, r9, ip
 80117e4:	fb02 9208 	mla	r2, r2, r8, r9
 80117e8:	b292      	uxth	r2, r2
 80117ea:	f102 0901 	add.w	r9, r2, #1
 80117ee:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80117f2:	1212      	asrs	r2, r2, #8
 80117f4:	f800 2b01 	strb.w	r2, [r0], #1
 80117f8:	e7ec      	b.n	80117d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80117fa:	4418      	add	r0, r3
 80117fc:	4435      	add	r5, r6
 80117fe:	e7e5      	b.n	80117cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8011800:	8813      	ldrh	r3, [r2, #0]
 8011802:	1b9b      	subs	r3, r3, r6
 8011804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011808:	4418      	add	r0, r3
 801180a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801180e:	1b9b      	subs	r3, r3, r6
 8011810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011814:	441d      	add	r5, r3
 8011816:	42a0      	cmp	r0, r4
 8011818:	d208      	bcs.n	801182c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801181a:	eb00 0c01 	add.w	ip, r0, r1
 801181e:	4560      	cmp	r0, ip
 8011820:	d2ee      	bcs.n	8011800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8011822:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011826:	f800 3b01 	strb.w	r3, [r0], #1
 801182a:	e7f8      	b.n	801181e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801182c:	6838      	ldr	r0, [r7, #0]
 801182e:	6803      	ldr	r3, [r0, #0]
 8011830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011832:	4798      	blx	r3
 8011834:	e7a2      	b.n	801177c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8011836:	bf00      	nop
 8011838:	2400ae0c 	.word	0x2400ae0c
 801183c:	2400ae06 	.word	0x2400ae06

08011840 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8011840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011842:	2300      	movs	r3, #0
 8011844:	b085      	sub	sp, #20
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	4b41      	ldr	r3, [pc, #260]	; (8011950 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d136      	bne.n	80118be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8011850:	4a40      	ldr	r2, [pc, #256]	; (8011954 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8011852:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011856:	f8ad 2004 	strh.w	r2, [sp, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d131      	bne.n	80118c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801185e:	4b3e      	ldr	r3, [pc, #248]	; (8011958 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8011860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011864:	ac02      	add	r4, sp, #8
 8011866:	6808      	ldr	r0, [r1, #0]
 8011868:	f8ad 3006 	strh.w	r3, [sp, #6]
 801186c:	ab02      	add	r3, sp, #8
 801186e:	6849      	ldr	r1, [r1, #4]
 8011870:	4d3a      	ldr	r5, [pc, #232]	; (801195c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8011872:	c303      	stmia	r3!, {r0, r1}
 8011874:	4669      	mov	r1, sp
 8011876:	4620      	mov	r0, r4
 8011878:	f7fb fa94 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801187c:	4668      	mov	r0, sp
 801187e:	f7fb fa69 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011882:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011886:	f8bd 2000 	ldrh.w	r2, [sp]
 801188a:	462e      	mov	r6, r5
 801188c:	6828      	ldr	r0, [r5, #0]
 801188e:	4413      	add	r3, r2
 8011890:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011894:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011898:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801189c:	4413      	add	r3, r2
 801189e:	f8ad 300a 	strh.w	r3, [sp, #10]
 80118a2:	6803      	ldr	r3, [r0, #0]
 80118a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a6:	4798      	blx	r3
 80118a8:	f010 0f01 	tst.w	r0, #1
 80118ac:	d00b      	beq.n	80118c6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80118ae:	6828      	ldr	r0, [r5, #0]
 80118b0:	6803      	ldr	r3, [r0, #0]
 80118b2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80118b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118b8:	4798      	blx	r3
 80118ba:	b005      	add	sp, #20
 80118bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118be:	4a26      	ldr	r2, [pc, #152]	; (8011958 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80118c0:	e7c7      	b.n	8011852 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80118c2:	4b24      	ldr	r3, [pc, #144]	; (8011954 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80118c4:	e7cc      	b.n	8011860 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80118c6:	6830      	ldr	r0, [r6, #0]
 80118c8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80118cc:	6803      	ldr	r3, [r0, #0]
 80118ce:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80118d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118d4:	4798      	blx	r3
 80118d6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80118da:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80118de:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80118e2:	fb14 3402 	smlabb	r4, r4, r2, r3
 80118e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80118ea:	4404      	add	r4, r0
 80118ec:	6830      	ldr	r0, [r6, #0]
 80118ee:	6803      	ldr	r3, [r0, #0]
 80118f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f2:	4798      	blx	r3
 80118f4:	4917      	ldr	r1, [pc, #92]	; (8011954 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80118f6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80118fa:	880b      	ldrh	r3, [r1, #0]
 80118fc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8011900:	fb03 c202 	mla	r2, r3, r2, ip
 8011904:	437b      	muls	r3, r7
 8011906:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801190a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801190e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011912:	4410      	add	r0, r2
 8011914:	18c2      	adds	r2, r0, r3
 8011916:	4290      	cmp	r0, r2
 8011918:	d214      	bcs.n	8011944 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801191a:	eb00 0c07 	add.w	ip, r0, r7
 801191e:	4560      	cmp	r0, ip
 8011920:	d204      	bcs.n	801192c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8011922:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011926:	f800 3b01 	strb.w	r3, [r0], #1
 801192a:	e7f8      	b.n	801191e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801192c:	880b      	ldrh	r3, [r1, #0]
 801192e:	1b5b      	subs	r3, r3, r5
 8011930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011934:	4418      	add	r0, r3
 8011936:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801193a:	1b5b      	subs	r3, r3, r5
 801193c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011940:	441c      	add	r4, r3
 8011942:	e7e8      	b.n	8011916 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8011944:	6830      	ldr	r0, [r6, #0]
 8011946:	6803      	ldr	r3, [r0, #0]
 8011948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801194a:	4798      	blx	r3
 801194c:	e7b5      	b.n	80118ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801194e:	bf00      	nop
 8011950:	2400ae04 	.word	0x2400ae04
 8011954:	2400ae06 	.word	0x2400ae06
 8011958:	2400ae08 	.word	0x2400ae08
 801195c:	2400ae0c 	.word	0x2400ae0c

08011960 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8011960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011964:	b089      	sub	sp, #36	; 0x24
 8011966:	4607      	mov	r7, r0
 8011968:	4689      	mov	r9, r1
 801196a:	4692      	mov	sl, r2
 801196c:	ac08      	add	r4, sp, #32
 801196e:	461e      	mov	r6, r3
 8011970:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8011974:	4620      	mov	r0, r4
 8011976:	f7fe f8ef 	bl	800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	4605      	mov	r5, r0
 801197e:	4620      	mov	r0, r4
 8011980:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011984:	f7fe f834 	bl	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011988:	4683      	mov	fp, r0
 801198a:	4620      	mov	r0, r4
 801198c:	f7fe f864 	bl	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011990:	4653      	mov	r3, sl
 8011992:	464a      	mov	r2, r9
 8011994:	4639      	mov	r1, r7
 8011996:	9500      	str	r5, [sp, #0]
 8011998:	e9cd b001 	strd	fp, r0, [sp, #4]
 801199c:	a806      	add	r0, sp, #24
 801199e:	47c0      	blx	r8
 80119a0:	a906      	add	r1, sp, #24
 80119a2:	4630      	mov	r0, r6
 80119a4:	f7fd ff08 	bl	800f7b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80119a8:	4628      	mov	r0, r5
 80119aa:	b009      	add	sp, #36	; 0x24
 80119ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119b0 <_ZN8touchgfx8LCD24bppD0Ev>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	4604      	mov	r4, r0
 80119b4:	2158      	movs	r1, #88	; 0x58
 80119b6:	f006 f8f6 	bl	8017ba6 <_ZdlPvj>
 80119ba:	4620      	mov	r0, r4
 80119bc:	bd10      	pop	{r4, pc}

080119be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80119be:	b510      	push	{r4, lr}
 80119c0:	4604      	mov	r4, r0
 80119c2:	2104      	movs	r1, #4
 80119c4:	f006 f8ef 	bl	8017ba6 <_ZdlPvj>
 80119c8:	4620      	mov	r0, r4
 80119ca:	bd10      	pop	{r4, pc}

080119cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80119cc:	b510      	push	{r4, lr}
 80119ce:	4604      	mov	r4, r0
 80119d0:	2104      	movs	r1, #4
 80119d2:	f006 f8e8 	bl	8017ba6 <_ZdlPvj>
 80119d6:	4620      	mov	r0, r4
 80119d8:	bd10      	pop	{r4, pc}

080119da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80119da:	b510      	push	{r4, lr}
 80119dc:	4604      	mov	r4, r0
 80119de:	2104      	movs	r1, #4
 80119e0:	f006 f8e1 	bl	8017ba6 <_ZdlPvj>
 80119e4:	4620      	mov	r0, r4
 80119e6:	bd10      	pop	{r4, pc}

080119e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80119e8:	b510      	push	{r4, lr}
 80119ea:	4604      	mov	r4, r0
 80119ec:	2104      	movs	r1, #4
 80119ee:	f006 f8da 	bl	8017ba6 <_ZdlPvj>
 80119f2:	4620      	mov	r0, r4
 80119f4:	bd10      	pop	{r4, pc}

080119f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80119f6:	b510      	push	{r4, lr}
 80119f8:	4604      	mov	r4, r0
 80119fa:	2104      	movs	r1, #4
 80119fc:	f006 f8d3 	bl	8017ba6 <_ZdlPvj>
 8011a00:	4620      	mov	r0, r4
 8011a02:	bd10      	pop	{r4, pc}

08011a04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011a04:	b510      	push	{r4, lr}
 8011a06:	4604      	mov	r4, r0
 8011a08:	2104      	movs	r1, #4
 8011a0a:	f006 f8cc 	bl	8017ba6 <_ZdlPvj>
 8011a0e:	4620      	mov	r0, r4
 8011a10:	bd10      	pop	{r4, pc}

08011a12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011a12:	b510      	push	{r4, lr}
 8011a14:	4604      	mov	r4, r0
 8011a16:	2104      	movs	r1, #4
 8011a18:	f006 f8c5 	bl	8017ba6 <_ZdlPvj>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	bd10      	pop	{r4, pc}

08011a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011a20:	b510      	push	{r4, lr}
 8011a22:	4604      	mov	r4, r0
 8011a24:	2104      	movs	r1, #4
 8011a26:	f006 f8be 	bl	8017ba6 <_ZdlPvj>
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	bd10      	pop	{r4, pc}

08011a2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8011a2e:	b510      	push	{r4, lr}
 8011a30:	4604      	mov	r4, r0
 8011a32:	2104      	movs	r1, #4
 8011a34:	f006 f8b7 	bl	8017ba6 <_ZdlPvj>
 8011a38:	4620      	mov	r0, r4
 8011a3a:	bd10      	pop	{r4, pc}

08011a3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	4604      	mov	r4, r0
 8011a40:	2104      	movs	r1, #4
 8011a42:	f006 f8b0 	bl	8017ba6 <_ZdlPvj>
 8011a46:	4620      	mov	r0, r4
 8011a48:	bd10      	pop	{r4, pc}

08011a4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8011a4a:	b510      	push	{r4, lr}
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	2104      	movs	r1, #4
 8011a50:	f006 f8a9 	bl	8017ba6 <_ZdlPvj>
 8011a54:	4620      	mov	r0, r4
 8011a56:	bd10      	pop	{r4, pc}

08011a58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	2104      	movs	r1, #4
 8011a5e:	f006 f8a2 	bl	8017ba6 <_ZdlPvj>
 8011a62:	4620      	mov	r0, r4
 8011a64:	bd10      	pop	{r4, pc}

08011a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8011a66:	b510      	push	{r4, lr}
 8011a68:	4604      	mov	r4, r0
 8011a6a:	2104      	movs	r1, #4
 8011a6c:	f006 f89b 	bl	8017ba6 <_ZdlPvj>
 8011a70:	4620      	mov	r0, r4
 8011a72:	bd10      	pop	{r4, pc}

08011a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	4604      	mov	r4, r0
 8011a78:	2104      	movs	r1, #4
 8011a7a:	f006 f894 	bl	8017ba6 <_ZdlPvj>
 8011a7e:	4620      	mov	r0, r4
 8011a80:	bd10      	pop	{r4, pc}

08011a82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8011a82:	b510      	push	{r4, lr}
 8011a84:	4604      	mov	r4, r0
 8011a86:	2104      	movs	r1, #4
 8011a88:	f006 f88d 	bl	8017ba6 <_ZdlPvj>
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	bd10      	pop	{r4, pc}

08011a90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	2104      	movs	r1, #4
 8011a96:	f006 f886 	bl	8017ba6 <_ZdlPvj>
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	bd10      	pop	{r4, pc}

08011a9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8011a9e:	b510      	push	{r4, lr}
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	2104      	movs	r1, #4
 8011aa4:	f006 f87f 	bl	8017ba6 <_ZdlPvj>
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	bd10      	pop	{r4, pc}

08011aac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8011aac:	b510      	push	{r4, lr}
 8011aae:	4604      	mov	r4, r0
 8011ab0:	2104      	movs	r1, #4
 8011ab2:	f006 f878 	bl	8017ba6 <_ZdlPvj>
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	bd10      	pop	{r4, pc}

08011aba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8011aba:	b510      	push	{r4, lr}
 8011abc:	4604      	mov	r4, r0
 8011abe:	2104      	movs	r1, #4
 8011ac0:	f006 f871 	bl	8017ba6 <_ZdlPvj>
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	bd10      	pop	{r4, pc}

08011ac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8011ac8:	b510      	push	{r4, lr}
 8011aca:	4604      	mov	r4, r0
 8011acc:	2104      	movs	r1, #4
 8011ace:	f006 f86a 	bl	8017ba6 <_ZdlPvj>
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	bd10      	pop	{r4, pc}

08011ad6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ada:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011ade:	9c06      	ldr	r4, [sp, #24]
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d06e      	beq.n	8011bc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011ae4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8011ae8:	2d00      	cmp	r5, #0
 8011aea:	dd6a      	ble.n	8011bc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011aec:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8011af0:	f1bc 0f00 	cmp.w	ip, #0
 8011af4:	dd65      	ble.n	8011bc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011af6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8011afa:	28ff      	cmp	r0, #255	; 0xff
 8011afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b00:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8011b04:	fb02 3306 	mla	r3, r2, r6, r3
 8011b08:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011b0c:	b2e4      	uxtb	r4, r4
 8011b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b12:	4419      	add	r1, r3
 8011b14:	fb02 f30c 	mul.w	r3, r2, ip
 8011b18:	eba2 0205 	sub.w	r2, r2, r5
 8011b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011b28:	440b      	add	r3, r1
 8011b2a:	d03e      	beq.n	8011baa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8011b2c:	fa1f fc80 	uxth.w	ip, r0
 8011b30:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011b34:	fb06 f60c 	mul.w	r6, r6, ip
 8011b38:	b280      	uxth	r0, r0
 8011b3a:	fb07 f70c 	mul.w	r7, r7, ip
 8011b3e:	fb04 f40c 	mul.w	r4, r4, ip
 8011b42:	4299      	cmp	r1, r3
 8011b44:	d23d      	bcs.n	8011bc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011b46:	eb01 0c05 	add.w	ip, r1, r5
 8011b4a:	458c      	cmp	ip, r1
 8011b4c:	f101 0e03 	add.w	lr, r1, #3
 8011b50:	d928      	bls.n	8011ba4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8011b52:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8011b56:	fb11 f100 	smulbb	r1, r1, r0
 8011b5a:	4421      	add	r1, r4
 8011b5c:	b289      	uxth	r1, r1
 8011b5e:	f101 0801 	add.w	r8, r1, #1
 8011b62:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b66:	1209      	asrs	r1, r1, #8
 8011b68:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8011b6c:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8011b70:	fb11 f100 	smulbb	r1, r1, r0
 8011b74:	4439      	add	r1, r7
 8011b76:	b289      	uxth	r1, r1
 8011b78:	f101 0801 	add.w	r8, r1, #1
 8011b7c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b80:	1209      	asrs	r1, r1, #8
 8011b82:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8011b86:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8011b8a:	fb11 f100 	smulbb	r1, r1, r0
 8011b8e:	4431      	add	r1, r6
 8011b90:	b289      	uxth	r1, r1
 8011b92:	f101 0801 	add.w	r8, r1, #1
 8011b96:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011b9a:	1209      	asrs	r1, r1, #8
 8011b9c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8011ba0:	4671      	mov	r1, lr
 8011ba2:	e7d2      	b.n	8011b4a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8011ba4:	4411      	add	r1, r2
 8011ba6:	e7cc      	b.n	8011b42 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8011ba8:	4411      	add	r1, r2
 8011baa:	4299      	cmp	r1, r3
 8011bac:	d209      	bcs.n	8011bc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8011bae:	1948      	adds	r0, r1, r5
 8011bb0:	4281      	cmp	r1, r0
 8011bb2:	d2f9      	bcs.n	8011ba8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8011bb4:	700c      	strb	r4, [r1, #0]
 8011bb6:	3103      	adds	r1, #3
 8011bb8:	f801 7c02 	strb.w	r7, [r1, #-2]
 8011bbc:	f801 6c01 	strb.w	r6, [r1, #-1]
 8011bc0:	e7f6      	b.n	8011bb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8011bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8011bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bcc:	b093      	sub	sp, #76	; 0x4c
 8011bce:	4699      	mov	r9, r3
 8011bd0:	4617      	mov	r7, r2
 8011bd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bd6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8011bda:	4604      	mov	r4, r0
 8011bdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011be0:	a80c      	add	r0, sp, #48	; 0x30
 8011be2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8011be6:	460d      	mov	r5, r1
 8011be8:	4649      	mov	r1, r9
 8011bea:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8011bee:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011bf2:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8011bf6:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8011bfa:	f7f9 f93b 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 8011bfe:	4639      	mov	r1, r7
 8011c00:	a80c      	add	r0, sp, #48	; 0x30
 8011c02:	f7f9 f937 	bl	800ae74 <_ZN8touchgfx4RectaNERKS0_>
 8011c06:	4b78      	ldr	r3, [pc, #480]	; (8011de8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8011c08:	8818      	ldrh	r0, [r3, #0]
 8011c0a:	4b78      	ldr	r3, [pc, #480]	; (8011dec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8011c0c:	b202      	sxth	r2, r0
 8011c0e:	8819      	ldrh	r1, [r3, #0]
 8011c10:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011c14:	b20f      	sxth	r7, r1
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	da07      	bge.n	8011c2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8011c1a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8011c1e:	4463      	add	r3, ip
 8011c20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011c24:	2300      	movs	r3, #0
 8011c26:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011c2a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011c2e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8011c32:	1ad2      	subs	r2, r2, r3
 8011c34:	4594      	cmp	ip, r2
 8011c36:	bfc4      	itt	gt
 8011c38:	1ac2      	subgt	r2, r0, r3
 8011c3a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8011c3e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	da07      	bge.n	8011c56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8011c46:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8011c4a:	4462      	add	r2, ip
 8011c4c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8011c50:	2200      	movs	r2, #0
 8011c52:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011c56:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8011c5a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8011c5e:	1abf      	subs	r7, r7, r2
 8011c60:	45bc      	cmp	ip, r7
 8011c62:	f8df c190 	ldr.w	ip, [pc, #400]	; 8011df4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8011c66:	bfc8      	it	gt
 8011c68:	1a8f      	subgt	r7, r1, r2
 8011c6a:	f89c c000 	ldrb.w	ip, [ip]
 8011c6e:	bfc8      	it	gt
 8011c70:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8011c74:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8011c78:	f1bc 0f00 	cmp.w	ip, #0
 8011c7c:	d176      	bne.n	8011d6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8011c7e:	4287      	cmp	r7, r0
 8011c80:	bf14      	ite	ne
 8011c82:	2100      	movne	r1, #0
 8011c84:	2101      	moveq	r1, #1
 8011c86:	2f00      	cmp	r7, #0
 8011c88:	9107      	str	r1, [sp, #28]
 8011c8a:	dd73      	ble.n	8011d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c8c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8011c90:	2900      	cmp	r1, #0
 8011c92:	9104      	str	r1, [sp, #16]
 8011c94:	dd6e      	ble.n	8011d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8011c96:	f8b9 1000 	ldrh.w	r1, [r9]
 8011c9a:	a80e      	add	r0, sp, #56	; 0x38
 8011c9c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8011ca0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011ca4:	1a5b      	subs	r3, r3, r1
 8011ca6:	a910      	add	r1, sp, #64	; 0x40
 8011ca8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8011cac:	b21b      	sxth	r3, r3
 8011cae:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8011cb2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8011df8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011cb6:	9305      	str	r3, [sp, #20]
 8011cb8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8011cbc:	1ad2      	subs	r2, r2, r3
 8011cbe:	b213      	sxth	r3, r2
 8011cc0:	9306      	str	r3, [sp, #24]
 8011cc2:	9b05      	ldr	r3, [sp, #20]
 8011cc4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8011cc8:	9b06      	ldr	r3, [sp, #24]
 8011cca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011cce:	9b04      	ldr	r3, [sp, #16]
 8011cd0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8011cd8:	f7fb f864 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011cdc:	4640      	mov	r0, r8
 8011cde:	f7fb f839 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011ce2:	a810      	add	r0, sp, #64	; 0x40
 8011ce4:	f7fb f836 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011ce8:	4b41      	ldr	r3, [pc, #260]	; (8011df0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8011cea:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8011cee:	4628      	mov	r0, r5
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	9308      	str	r3, [sp, #32]
 8011cf4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8011cf8:	b21b      	sxth	r3, r3
 8011cfa:	9303      	str	r3, [sp, #12]
 8011cfc:	682b      	ldr	r3, [r5, #0]
 8011cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d00:	4798      	blx	r3
 8011d02:	9a03      	ldr	r2, [sp, #12]
 8011d04:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011d08:	4681      	mov	r9, r0
 8011d0a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011d0e:	fb13 f302 	smulbb	r3, r3, r2
 8011d12:	2203      	movs	r2, #3
 8011d14:	f8da 0000 	ldr.w	r0, [sl]
 8011d18:	fb15 3302 	smlabb	r3, r5, r2, r3
 8011d1c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8011d1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d20:	441d      	add	r5, r3
 8011d22:	6803      	ldr	r3, [r0, #0]
 8011d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d26:	4798      	blx	r3
 8011d28:	9009      	str	r0, [sp, #36]	; 0x24
 8011d2a:	f8da 0000 	ldr.w	r0, [sl]
 8011d2e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011d32:	6803      	ldr	r3, [r0, #0]
 8011d34:	910a      	str	r1, [sp, #40]	; 0x28
 8011d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d38:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8011d3c:	4798      	blx	r3
 8011d3e:	f010 0f01 	tst.w	r0, #1
 8011d42:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011d46:	d01e      	beq.n	8011d86 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8011d48:	f8da 0000 	ldr.w	r0, [sl]
 8011d4c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8011d50:	6803      	ldr	r3, [r0, #0]
 8011d52:	9200      	str	r2, [sp, #0]
 8011d54:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8011d56:	462b      	mov	r3, r5
 8011d58:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011d5c:	47b0      	blx	r6
 8011d5e:	9b05      	ldr	r3, [sp, #20]
 8011d60:	80a7      	strh	r7, [r4, #4]
 8011d62:	8023      	strh	r3, [r4, #0]
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	8063      	strh	r3, [r4, #2]
 8011d68:	9b04      	ldr	r3, [sp, #16]
 8011d6a:	e007      	b.n	8011d7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8011d6c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8011d70:	4288      	cmp	r0, r1
 8011d72:	e785      	b.n	8011c80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8011d74:	2300      	movs	r3, #0
 8011d76:	8023      	strh	r3, [r4, #0]
 8011d78:	8063      	strh	r3, [r4, #2]
 8011d7a:	80a3      	strh	r3, [r4, #4]
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	80e3      	strh	r3, [r4, #6]
 8011d80:	b013      	add	sp, #76	; 0x4c
 8011d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d86:	fb09 f606 	mul.w	r6, r9, r6
 8011d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d8c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8011d90:	9a07      	ldr	r2, [sp, #28]
 8011d92:	4433      	add	r3, r6
 8011d94:	461e      	mov	r6, r3
 8011d96:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011d9a:	b16a      	cbz	r2, 8011db8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011d9c:	9a08      	ldr	r2, [sp, #32]
 8011d9e:	4593      	cmp	fp, r2
 8011da0:	d10a      	bne.n	8011db8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8011da2:	f8da 0000 	ldr.w	r0, [sl]
 8011da6:	fb09 f303 	mul.w	r3, r9, r3
 8011daa:	4629      	mov	r1, r5
 8011dac:	6802      	ldr	r2, [r0, #0]
 8011dae:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011db2:	4632      	mov	r2, r6
 8011db4:	47d0      	blx	sl
 8011db6:	e7d2      	b.n	8011d5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011db8:	9a03      	ldr	r2, [sp, #12]
 8011dba:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8011df8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8011dbe:	fb02 5803 	mla	r8, r2, r3, r5
 8011dc2:	4545      	cmp	r5, r8
 8011dc4:	d2cb      	bcs.n	8011d5e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8011dc6:	f8db 0000 	ldr.w	r0, [fp]
 8011dca:	4629      	mov	r1, r5
 8011dcc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8011dd0:	6802      	ldr	r2, [r0, #0]
 8011dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011dd6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8011dda:	4632      	mov	r2, r6
 8011ddc:	47d0      	blx	sl
 8011dde:	9b03      	ldr	r3, [sp, #12]
 8011de0:	444e      	add	r6, r9
 8011de2:	441d      	add	r5, r3
 8011de4:	e7ed      	b.n	8011dc2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8011de6:	bf00      	nop
 8011de8:	2400ae00 	.word	0x2400ae00
 8011dec:	2400ae02 	.word	0x2400ae02
 8011df0:	2400ae06 	.word	0x2400ae06
 8011df4:	2400ae04 	.word	0x2400ae04
 8011df8:	2400ae0c 	.word	0x2400ae0c

08011dfc <_ZN8touchgfx8LCD24bppC1Ev>:
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	490c      	ldr	r1, [pc, #48]	; (8011e30 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8011e00:	6042      	str	r2, [r0, #4]
 8011e02:	6001      	str	r1, [r0, #0]
 8011e04:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8011e08:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8011e0c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011e10:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8011e14:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8011e18:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8011e1c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8011e20:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8011e24:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8011e28:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	0801a648 	.word	0x0801a648

08011e34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	b091      	sub	sp, #68	; 0x44
 8011e3a:	4607      	mov	r7, r0
 8011e3c:	4688      	mov	r8, r1
 8011e3e:	6810      	ldr	r0, [r2, #0]
 8011e40:	6851      	ldr	r1, [r2, #4]
 8011e42:	ac0c      	add	r4, sp, #48	; 0x30
 8011e44:	4616      	mov	r6, r2
 8011e46:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8011e4a:	4d64      	ldr	r5, [pc, #400]	; (8011fdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011e4c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8011fe0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8011e50:	c403      	stmia	r4!, {r0, r1}
 8011e52:	6818      	ldr	r0, [r3, #0]
 8011e54:	ac0e      	add	r4, sp, #56	; 0x38
 8011e56:	6859      	ldr	r1, [r3, #4]
 8011e58:	c403      	stmia	r4!, {r0, r1}
 8011e5a:	a80c      	add	r0, sp, #48	; 0x30
 8011e5c:	f7fa ff7a 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e60:	4631      	mov	r1, r6
 8011e62:	a80e      	add	r0, sp, #56	; 0x38
 8011e64:	f7fa ff9e 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e68:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011e6c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011e70:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011e74:	6828      	ldr	r0, [r5, #0]
 8011e76:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011e7a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8011e7e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8011e82:	440f      	add	r7, r1
 8011e84:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8011e88:	440a      	add	r2, r1
 8011e8a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8011e8e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011e92:	4413      	add	r3, r2
 8011e94:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011e98:	6803      	ldr	r3, [r0, #0]
 8011e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e9c:	4798      	blx	r3
 8011e9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011ea2:	6828      	ldr	r0, [r5, #0]
 8011ea4:	d01f      	beq.n	8011ee6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	2500      	movs	r5, #0
 8011eaa:	6801      	ldr	r1, [r0, #0]
 8011eac:	b2a4      	uxth	r4, r4
 8011eae:	b2b6      	uxth	r6, r6
 8011eb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011eb4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8011eb8:	250b      	movs	r5, #11
 8011eba:	9507      	str	r5, [sp, #28]
 8011ebc:	f8ba 5000 	ldrh.w	r5, [sl]
 8011ec0:	f8cd 9010 	str.w	r9, [sp, #16]
 8011ec4:	9602      	str	r6, [sp, #8]
 8011ec6:	9401      	str	r4, [sp, #4]
 8011ec8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8011ecc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011ed0:	9203      	str	r2, [sp, #12]
 8011ed2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011ed6:	9200      	str	r2, [sp, #0]
 8011ed8:	4642      	mov	r2, r8
 8011eda:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8011edc:	4639      	mov	r1, r7
 8011ede:	47a0      	blx	r4
 8011ee0:	b011      	add	sp, #68	; 0x44
 8011ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee6:	6803      	ldr	r3, [r0, #0]
 8011ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eea:	4798      	blx	r3
 8011eec:	f8ba 5000 	ldrh.w	r5, [sl]
 8011ef0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8011ef4:	f04f 0e04 	mov.w	lr, #4
 8011ef8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011efc:	436e      	muls	r6, r5
 8011efe:	fb05 2303 	mla	r3, r5, r3, r2
 8011f02:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011f06:	1b2d      	subs	r5, r5, r4
 8011f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f10:	4418      	add	r0, r3
 8011f12:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8011f16:	1982      	adds	r2, r0, r6
 8011f18:	1b1b      	subs	r3, r3, r4
 8011f1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f20:	4290      	cmp	r0, r2
 8011f22:	d254      	bcs.n	8011fce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8011f24:	eb00 0a04 	add.w	sl, r0, r4
 8011f28:	4550      	cmp	r0, sl
 8011f2a:	d24c      	bcs.n	8011fc6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8011f2c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011f30:	fb1e e101 	smlabb	r1, lr, r1, lr
 8011f34:	eb08 0c01 	add.w	ip, r8, r1
 8011f38:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8011f3c:	b173      	cbz	r3, 8011f5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011f3e:	2bff      	cmp	r3, #255	; 0xff
 8011f40:	f818 b001 	ldrb.w	fp, [r8, r1]
 8011f44:	d10c      	bne.n	8011f60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f46:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011f4a:	d109      	bne.n	8011f60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011f4c:	f880 b000 	strb.w	fp, [r0]
 8011f50:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8011f54:	7043      	strb	r3, [r0, #1]
 8011f56:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8011f5a:	7083      	strb	r3, [r0, #2]
 8011f5c:	3003      	adds	r0, #3
 8011f5e:	e7e3      	b.n	8011f28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8011f60:	fb09 f103 	mul.w	r1, r9, r3
 8011f64:	1c4b      	adds	r3, r1, #1
 8011f66:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8011f6a:	7801      	ldrb	r1, [r0, #0]
 8011f6c:	121b      	asrs	r3, r3, #8
 8011f6e:	b29e      	uxth	r6, r3
 8011f70:	43db      	mvns	r3, r3
 8011f72:	fb1b fb06 	smulbb	fp, fp, r6
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	fb01 b103 	mla	r1, r1, r3, fp
 8011f7c:	b289      	uxth	r1, r1
 8011f7e:	f101 0b01 	add.w	fp, r1, #1
 8011f82:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011f86:	f890 b001 	ldrb.w	fp, [r0, #1]
 8011f8a:	fb1b fb03 	smulbb	fp, fp, r3
 8011f8e:	1209      	asrs	r1, r1, #8
 8011f90:	7001      	strb	r1, [r0, #0]
 8011f92:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8011f96:	fb01 b106 	mla	r1, r1, r6, fp
 8011f9a:	b289      	uxth	r1, r1
 8011f9c:	f101 0b01 	add.w	fp, r1, #1
 8011fa0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8011fa4:	1209      	asrs	r1, r1, #8
 8011fa6:	7041      	strb	r1, [r0, #1]
 8011fa8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011fac:	f890 c002 	ldrb.w	ip, [r0, #2]
 8011fb0:	fb1c f303 	smulbb	r3, ip, r3
 8011fb4:	fb01 3606 	mla	r6, r1, r6, r3
 8011fb8:	b2b6      	uxth	r6, r6
 8011fba:	1c73      	adds	r3, r6, #1
 8011fbc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8011fc0:	1236      	asrs	r6, r6, #8
 8011fc2:	7086      	strb	r6, [r0, #2]
 8011fc4:	e7ca      	b.n	8011f5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fc8:	4428      	add	r0, r5
 8011fca:	441f      	add	r7, r3
 8011fcc:	e7a8      	b.n	8011f20 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8011fce:	4b03      	ldr	r3, [pc, #12]	; (8011fdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8011fd0:	6818      	ldr	r0, [r3, #0]
 8011fd2:	6803      	ldr	r3, [r0, #0]
 8011fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd6:	4798      	blx	r3
 8011fd8:	e782      	b.n	8011ee0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011fda:	bf00      	nop
 8011fdc:	2400ae0c 	.word	0x2400ae0c
 8011fe0:	2400ae06 	.word	0x2400ae06

08011fe4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe8:	b091      	sub	sp, #68	; 0x44
 8011fea:	4680      	mov	r8, r0
 8011fec:	460e      	mov	r6, r1
 8011fee:	6810      	ldr	r0, [r2, #0]
 8011ff0:	6851      	ldr	r1, [r2, #4]
 8011ff2:	ad0c      	add	r5, sp, #48	; 0x30
 8011ff4:	4614      	mov	r4, r2
 8011ff6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8011ffa:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8012194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8011ffe:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012198 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8012002:	c503      	stmia	r5!, {r0, r1}
 8012004:	6818      	ldr	r0, [r3, #0]
 8012006:	ad0e      	add	r5, sp, #56	; 0x38
 8012008:	6859      	ldr	r1, [r3, #4]
 801200a:	c503      	stmia	r5!, {r0, r1}
 801200c:	a80c      	add	r0, sp, #48	; 0x30
 801200e:	f7fa fea1 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012012:	4621      	mov	r1, r4
 8012014:	a80e      	add	r0, sp, #56	; 0x38
 8012016:	f7fa fec5 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801201a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801201e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012022:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012026:	f8d9 0000 	ldr.w	r0, [r9]
 801202a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801202e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012032:	eb08 0401 	add.w	r4, r8, r1
 8012036:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801203a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801203e:	440a      	add	r2, r1
 8012040:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012044:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012048:	4413      	add	r3, r2
 801204a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801204e:	6803      	ldr	r3, [r0, #0]
 8012050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012052:	4798      	blx	r3
 8012054:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012058:	f8d9 0000 	ldr.w	r0, [r9]
 801205c:	d022      	beq.n	80120a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801205e:	2200      	movs	r2, #0
 8012060:	f04f 0c01 	mov.w	ip, #1
 8012064:	6801      	ldr	r1, [r0, #0]
 8012066:	b2ad      	uxth	r5, r5
 8012068:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801206c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8012070:	f04f 0c0b 	mov.w	ip, #11
 8012074:	f8cd c01c 	str.w	ip, [sp, #28]
 8012078:	f8ba c000 	ldrh.w	ip, [sl]
 801207c:	9704      	str	r7, [sp, #16]
 801207e:	9502      	str	r5, [sp, #8]
 8012080:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8012084:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012088:	9203      	str	r2, [sp, #12]
 801208a:	fa1f f288 	uxth.w	r2, r8
 801208e:	9201      	str	r2, [sp, #4]
 8012090:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012094:	9200      	str	r2, [sp, #0]
 8012096:	4632      	mov	r2, r6
 8012098:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801209a:	4621      	mov	r1, r4
 801209c:	47a8      	blx	r5
 801209e:	b011      	add	sp, #68	; 0x44
 80120a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a4:	6803      	ldr	r3, [r0, #0]
 80120a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120a8:	4798      	blx	r3
 80120aa:	f8ba 2000 	ldrh.w	r2, [sl]
 80120ae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80120b2:	f04f 0e03 	mov.w	lr, #3
 80120b6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80120ba:	4355      	muls	r5, r2
 80120bc:	fa1f fc87 	uxth.w	ip, r7
 80120c0:	fb02 1303 	mla	r3, r2, r3, r1
 80120c4:	eba2 0208 	sub.w	r2, r2, r8
 80120c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80120d4:	4418      	add	r0, r3
 80120d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80120d8:	1943      	adds	r3, r0, r5
 80120da:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80120de:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80120e2:	eba2 0208 	sub.w	r2, r2, r8
 80120e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80120ea:	b2ad      	uxth	r5, r5
 80120ec:	4298      	cmp	r0, r3
 80120ee:	d24a      	bcs.n	8012186 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80120f0:	eb00 0908 	add.w	r9, r0, r8
 80120f4:	4621      	mov	r1, r4
 80120f6:	4548      	cmp	r0, r9
 80120f8:	460c      	mov	r4, r1
 80120fa:	d240      	bcs.n	801217e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80120fc:	f04f 0a04 	mov.w	sl, #4
 8012100:	7824      	ldrb	r4, [r4, #0]
 8012102:	2fff      	cmp	r7, #255	; 0xff
 8012104:	f101 0101 	add.w	r1, r1, #1
 8012108:	fb1e a404 	smlabb	r4, lr, r4, sl
 801210c:	eb06 0a04 	add.w	sl, r6, r4
 8012110:	f816 b004 	ldrb.w	fp, [r6, r4]
 8012114:	d02b      	beq.n	801216e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8012116:	7804      	ldrb	r4, [r0, #0]
 8012118:	fb14 f405 	smulbb	r4, r4, r5
 801211c:	fb0b 440c 	mla	r4, fp, ip, r4
 8012120:	b2a4      	uxth	r4, r4
 8012122:	f104 0b01 	add.w	fp, r4, #1
 8012126:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801212a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801212e:	fb1b fb05 	smulbb	fp, fp, r5
 8012132:	1224      	asrs	r4, r4, #8
 8012134:	7004      	strb	r4, [r0, #0]
 8012136:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801213a:	fb04 b40c 	mla	r4, r4, ip, fp
 801213e:	b2a4      	uxth	r4, r4
 8012140:	f104 0b01 	add.w	fp, r4, #1
 8012144:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012148:	1224      	asrs	r4, r4, #8
 801214a:	7044      	strb	r4, [r0, #1]
 801214c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012150:	f890 a002 	ldrb.w	sl, [r0, #2]
 8012154:	fb1a fa05 	smulbb	sl, sl, r5
 8012158:	fb04 a40c 	mla	r4, r4, ip, sl
 801215c:	b2a4      	uxth	r4, r4
 801215e:	f104 0a01 	add.w	sl, r4, #1
 8012162:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8012166:	1224      	asrs	r4, r4, #8
 8012168:	7084      	strb	r4, [r0, #2]
 801216a:	3003      	adds	r0, #3
 801216c:	e7c3      	b.n	80120f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801216e:	f880 b000 	strb.w	fp, [r0]
 8012172:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012176:	7044      	strb	r4, [r0, #1]
 8012178:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801217c:	e7f4      	b.n	8012168 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801217e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012180:	4420      	add	r0, r4
 8012182:	188c      	adds	r4, r1, r2
 8012184:	e7b2      	b.n	80120ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8012186:	4b03      	ldr	r3, [pc, #12]	; (8012194 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8012188:	6818      	ldr	r0, [r3, #0]
 801218a:	6803      	ldr	r3, [r0, #0]
 801218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218e:	4798      	blx	r3
 8012190:	e785      	b.n	801209e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8012192:	bf00      	nop
 8012194:	2400ae0c 	.word	0x2400ae0c
 8012198:	2400ae06 	.word	0x2400ae06

0801219c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801219c:	b430      	push	{r4, r5}
 801219e:	780d      	ldrb	r5, [r1, #0]
 80121a0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80121a4:	b11d      	cbz	r5, 80121ae <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 80121a6:	2d01      	cmp	r5, #1
 80121a8:	d005      	beq.n	80121b6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80121aa:	bc30      	pop	{r4, r5}
 80121ac:	4770      	bx	lr
 80121ae:	9402      	str	r4, [sp, #8]
 80121b0:	bc30      	pop	{r4, r5}
 80121b2:	f7ff be3f 	b.w	8011e34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80121b6:	9402      	str	r4, [sp, #8]
 80121b8:	bc30      	pop	{r4, r5}
 80121ba:	f7ff bf13 	b.w	8011fe4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

080121c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80121c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121c4:	4605      	mov	r5, r0
 80121c6:	b08f      	sub	sp, #60	; 0x3c
 80121c8:	460c      	mov	r4, r1
 80121ca:	461f      	mov	r7, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d052      	beq.n	8012276 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80121d0:	6808      	ldr	r0, [r1, #0]
 80121d2:	ab0a      	add	r3, sp, #40	; 0x28
 80121d4:	6849      	ldr	r1, [r1, #4]
 80121d6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80123a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80121da:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80123a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80121de:	c303      	stmia	r3!, {r0, r1}
 80121e0:	6810      	ldr	r0, [r2, #0]
 80121e2:	ab0c      	add	r3, sp, #48	; 0x30
 80121e4:	6851      	ldr	r1, [r2, #4]
 80121e6:	c303      	stmia	r3!, {r0, r1}
 80121e8:	a80a      	add	r0, sp, #40	; 0x28
 80121ea:	f7fa fdb3 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80121ee:	4621      	mov	r1, r4
 80121f0:	a80c      	add	r0, sp, #48	; 0x30
 80121f2:	f7fa fdd7 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121f6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80121fa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80121fe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012202:	f8d8 0000 	ldr.w	r0, [r8]
 8012206:	fb11 2103 	smlabb	r1, r1, r3, r2
 801220a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801220e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8012212:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8012216:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801221a:	440a      	add	r2, r1
 801221c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012220:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012224:	4413      	add	r3, r2
 8012226:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801222a:	6803      	ldr	r3, [r0, #0]
 801222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222e:	4798      	blx	r3
 8012230:	2fff      	cmp	r7, #255	; 0xff
 8012232:	d023      	beq.n	801227c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012234:	f010 0f04 	tst.w	r0, #4
 8012238:	f8d8 0000 	ldr.w	r0, [r8]
 801223c:	d021      	beq.n	8012282 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801223e:	2100      	movs	r1, #0
 8012240:	f04f 0e01 	mov.w	lr, #1
 8012244:	f8d0 c000 	ldr.w	ip, [r0]
 8012248:	b2a4      	uxth	r4, r4
 801224a:	9106      	str	r1, [sp, #24]
 801224c:	b2b6      	uxth	r6, r6
 801224e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012252:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012256:	e9cd e107 	strd	lr, r1, [sp, #28]
 801225a:	f8b9 e000 	ldrh.w	lr, [r9]
 801225e:	9703      	str	r7, [sp, #12]
 8012260:	9401      	str	r4, [sp, #4]
 8012262:	9600      	str	r6, [sp, #0]
 8012264:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8012268:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801226c:	9102      	str	r1, [sp, #8]
 801226e:	4629      	mov	r1, r5
 8012270:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8012274:	47a0      	blx	r4
 8012276:	b00f      	add	sp, #60	; 0x3c
 8012278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801227c:	f010 0f01 	tst.w	r0, #1
 8012280:	e7da      	b.n	8012238 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8012282:	6803      	ldr	r3, [r0, #0]
 8012284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012286:	4798      	blx	r3
 8012288:	f8b9 1000 	ldrh.w	r1, [r9]
 801228c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012290:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8012294:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012298:	434c      	muls	r4, r1
 801229a:	2fff      	cmp	r7, #255	; 0xff
 801229c:	fb01 2303 	mla	r3, r1, r3, r2
 80122a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80122a4:	eba1 0106 	sub.w	r1, r1, r6
 80122a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80122ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80122b0:	4418      	add	r0, r3
 80122b2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80122b6:	eba3 0606 	sub.w	r6, r3, r6
 80122ba:	4404      	add	r4, r0
 80122bc:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80122c0:	d04a      	beq.n	8012358 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80122c2:	43fa      	mvns	r2, r7
 80122c4:	b2bb      	uxth	r3, r7
 80122c6:	b2d7      	uxtb	r7, r2
 80122c8:	42a0      	cmp	r0, r4
 80122ca:	d263      	bcs.n	8012394 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80122cc:	eb00 0e0c 	add.w	lr, r0, ip
 80122d0:	4586      	cmp	lr, r0
 80122d2:	f100 0803 	add.w	r8, r0, #3
 80122d6:	d93a      	bls.n	801234e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80122d8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80122dc:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80122e0:	00d0      	lsls	r0, r2, #3
 80122e2:	fb19 f907 	smulbb	r9, r9, r7
 80122e6:	b2c0      	uxtb	r0, r0
 80122e8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80122ec:	fb00 9003 	mla	r0, r0, r3, r9
 80122f0:	b280      	uxth	r0, r0
 80122f2:	f100 0901 	add.w	r9, r0, #1
 80122f6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80122fa:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80122fe:	fb19 f907 	smulbb	r9, r9, r7
 8012302:	1200      	asrs	r0, r0, #8
 8012304:	f808 0c03 	strb.w	r0, [r8, #-3]
 8012308:	10d0      	asrs	r0, r2, #3
 801230a:	1212      	asrs	r2, r2, #8
 801230c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8012310:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8012314:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012318:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801231c:	fb00 9003 	mla	r0, r0, r3, r9
 8012320:	b280      	uxth	r0, r0
 8012322:	f100 0901 	add.w	r9, r0, #1
 8012326:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801232a:	1200      	asrs	r0, r0, #8
 801232c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8012330:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8012334:	fb10 f007 	smulbb	r0, r0, r7
 8012338:	fb02 0203 	mla	r2, r2, r3, r0
 801233c:	b292      	uxth	r2, r2
 801233e:	1c50      	adds	r0, r2, #1
 8012340:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8012344:	4640      	mov	r0, r8
 8012346:	1212      	asrs	r2, r2, #8
 8012348:	f808 2c01 	strb.w	r2, [r8, #-1]
 801234c:	e7c0      	b.n	80122d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801234e:	4408      	add	r0, r1
 8012350:	4435      	add	r5, r6
 8012352:	e7b9      	b.n	80122c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8012354:	4408      	add	r0, r1
 8012356:	4435      	add	r5, r6
 8012358:	42a0      	cmp	r0, r4
 801235a:	d21b      	bcs.n	8012394 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801235c:	eb00 070c 	add.w	r7, r0, ip
 8012360:	42b8      	cmp	r0, r7
 8012362:	d2f7      	bcs.n	8012354 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8012364:	f835 3b02 	ldrh.w	r3, [r5], #2
 8012368:	3003      	adds	r0, #3
 801236a:	00da      	lsls	r2, r3, #3
 801236c:	b2d2      	uxtb	r2, r2
 801236e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012372:	f800 2c03 	strb.w	r2, [r0, #-3]
 8012376:	10da      	asrs	r2, r3, #3
 8012378:	121b      	asrs	r3, r3, #8
 801237a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801237e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012382:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012386:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801238a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801238e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012392:	e7e5      	b.n	8012360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8012394:	4b02      	ldr	r3, [pc, #8]	; (80123a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8012396:	6818      	ldr	r0, [r3, #0]
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801239c:	4798      	blx	r3
 801239e:	e76a      	b.n	8012276 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80123a0:	2400ae0c 	.word	0x2400ae0c
 80123a4:	2400ae06 	.word	0x2400ae06

080123a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80123a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123ac:	b08a      	sub	sp, #40	; 0x28
 80123ae:	460d      	mov	r5, r1
 80123b0:	4604      	mov	r4, r0
 80123b2:	461e      	mov	r6, r3
 80123b4:	6808      	ldr	r0, [r1, #0]
 80123b6:	ab06      	add	r3, sp, #24
 80123b8:	6849      	ldr	r1, [r1, #4]
 80123ba:	4f5d      	ldr	r7, [pc, #372]	; (8012530 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80123bc:	c303      	stmia	r3!, {r0, r1}
 80123be:	6810      	ldr	r0, [r2, #0]
 80123c0:	ab08      	add	r3, sp, #32
 80123c2:	6851      	ldr	r1, [r2, #4]
 80123c4:	c303      	stmia	r3!, {r0, r1}
 80123c6:	a806      	add	r0, sp, #24
 80123c8:	f7fa fcc4 	bl	800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123cc:	4629      	mov	r1, r5
 80123ce:	a808      	add	r0, sp, #32
 80123d0:	f7fa fce8 	bl	800cda4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80123d4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80123d8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80123dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80123e0:	6838      	ldr	r0, [r7, #0]
 80123e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80123e6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80123ea:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80123ee:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80123f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80123f6:	440a      	add	r2, r1
 80123f8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80123fc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012400:	4413      	add	r3, r2
 8012402:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012406:	6803      	ldr	r3, [r0, #0]
 8012408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801240a:	4798      	blx	r3
 801240c:	2eff      	cmp	r6, #255	; 0xff
 801240e:	d119      	bne.n	8012444 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8012410:	f010 0f20 	tst.w	r0, #32
 8012414:	6838      	ldr	r0, [r7, #0]
 8012416:	d018      	beq.n	801244a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8012418:	b2ad      	uxth	r5, r5
 801241a:	2700      	movs	r7, #0
 801241c:	6801      	ldr	r1, [r0, #0]
 801241e:	9501      	str	r5, [sp, #4]
 8012420:	fa1f f588 	uxth.w	r5, r8
 8012424:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8012428:	9500      	str	r5, [sp, #0]
 801242a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801242e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8012432:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8012436:	9602      	str	r6, [sp, #8]
 8012438:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801243a:	4621      	mov	r1, r4
 801243c:	47a8      	blx	r5
 801243e:	b00a      	add	sp, #40	; 0x28
 8012440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012448:	e7e4      	b.n	8012414 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801244a:	6803      	ldr	r3, [r0, #0]
 801244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801244e:	4798      	blx	r3
 8012450:	4b38      	ldr	r3, [pc, #224]	; (8012534 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8012452:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012456:	f8b3 c000 	ldrh.w	ip, [r3]
 801245a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801245e:	fb0c f505 	mul.w	r5, ip, r5
 8012462:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8012466:	fb0c 2303 	mla	r3, ip, r3, r2
 801246a:	ebac 0c08 	sub.w	ip, ip, r8
 801246e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012472:	ebae 0e08 	sub.w	lr, lr, r8
 8012476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801247a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801247e:	4418      	add	r0, r3
 8012480:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8012484:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8012488:	4405      	add	r5, r0
 801248a:	42a8      	cmp	r0, r5
 801248c:	d24a      	bcs.n	8012524 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801248e:	eb00 0803 	add.w	r8, r0, r3
 8012492:	4540      	cmp	r0, r8
 8012494:	d243      	bcs.n	801251e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8012496:	78e2      	ldrb	r2, [r4, #3]
 8012498:	b15a      	cbz	r2, 80124b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801249a:	2aff      	cmp	r2, #255	; 0xff
 801249c:	f894 9000 	ldrb.w	r9, [r4]
 80124a0:	d10a      	bne.n	80124b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80124a2:	2eff      	cmp	r6, #255	; 0xff
 80124a4:	d108      	bne.n	80124b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80124a6:	f880 9000 	strb.w	r9, [r0]
 80124aa:	7862      	ldrb	r2, [r4, #1]
 80124ac:	7042      	strb	r2, [r0, #1]
 80124ae:	78a2      	ldrb	r2, [r4, #2]
 80124b0:	7082      	strb	r2, [r0, #2]
 80124b2:	3003      	adds	r0, #3
 80124b4:	3404      	adds	r4, #4
 80124b6:	e7ec      	b.n	8012492 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80124b8:	4372      	muls	r2, r6
 80124ba:	1c51      	adds	r1, r2, #1
 80124bc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80124c0:	1209      	asrs	r1, r1, #8
 80124c2:	fa1f fa81 	uxth.w	sl, r1
 80124c6:	43c9      	mvns	r1, r1
 80124c8:	fb19 f90a 	smulbb	r9, r9, sl
 80124cc:	b2ca      	uxtb	r2, r1
 80124ce:	7801      	ldrb	r1, [r0, #0]
 80124d0:	fb01 9902 	mla	r9, r1, r2, r9
 80124d4:	fa1f f989 	uxth.w	r9, r9
 80124d8:	f109 0101 	add.w	r1, r9, #1
 80124dc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80124e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80124e4:	f880 9000 	strb.w	r9, [r0]
 80124e8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80124ec:	7861      	ldrb	r1, [r4, #1]
 80124ee:	fb19 f902 	smulbb	r9, r9, r2
 80124f2:	fb01 910a 	mla	r1, r1, sl, r9
 80124f6:	b289      	uxth	r1, r1
 80124f8:	f101 0901 	add.w	r9, r1, #1
 80124fc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8012500:	1209      	asrs	r1, r1, #8
 8012502:	7041      	strb	r1, [r0, #1]
 8012504:	7881      	ldrb	r1, [r0, #2]
 8012506:	f894 9002 	ldrb.w	r9, [r4, #2]
 801250a:	fb11 f202 	smulbb	r2, r1, r2
 801250e:	fb09 220a 	mla	r2, r9, sl, r2
 8012512:	b292      	uxth	r2, r2
 8012514:	1c51      	adds	r1, r2, #1
 8012516:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801251a:	1212      	asrs	r2, r2, #8
 801251c:	e7c8      	b.n	80124b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801251e:	4460      	add	r0, ip
 8012520:	4474      	add	r4, lr
 8012522:	e7b2      	b.n	801248a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8012524:	6838      	ldr	r0, [r7, #0]
 8012526:	6803      	ldr	r3, [r0, #0]
 8012528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801252a:	4798      	blx	r3
 801252c:	e787      	b.n	801243e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801252e:	bf00      	nop
 8012530:	2400ae0c 	.word	0x2400ae0c
 8012534:	2400ae06 	.word	0x2400ae06

08012538 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801253c:	b085      	sub	sp, #20
 801253e:	4606      	mov	r6, r0
 8012540:	460c      	mov	r4, r1
 8012542:	4691      	mov	r9, r2
 8012544:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8012548:	4698      	mov	r8, r3
 801254a:	b31d      	cbz	r5, 8012594 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801254c:	4608      	mov	r0, r1
 801254e:	f7fd fa4f 	bl	800f9f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012552:	4607      	mov	r7, r0
 8012554:	4620      	mov	r0, r4
 8012556:	f7fd fa7f 	bl	800fa58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801255a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801255e:	4620      	mov	r0, r4
 8012560:	f8ad 9008 	strh.w	r9, [sp, #8]
 8012564:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012568:	f8ad 700c 	strh.w	r7, [sp, #12]
 801256c:	f7fd fb78 	bl	800fc60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012570:	280b      	cmp	r0, #11
 8012572:	d80f      	bhi.n	8012594 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8012574:	e8df f000 	tbb	[pc, r0]
 8012578:	0e062920 	.word	0x0e062920
 801257c:	0e0e0e0e 	.word	0x0e0e0e0e
 8012580:	110e0e0e 	.word	0x110e0e0e
 8012584:	4620      	mov	r0, r4
 8012586:	f7fd fae7 	bl	800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>
 801258a:	462b      	mov	r3, r5
 801258c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801258e:	a902      	add	r1, sp, #8
 8012590:	f7ff ff0a 	bl	80123a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012594:	b005      	add	sp, #20
 8012596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801259a:	4620      	mov	r0, r4
 801259c:	f7fd fadc 	bl	800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125a0:	4606      	mov	r6, r0
 80125a2:	4620      	mov	r0, r4
 80125a4:	f7fd fb08 	bl	800fbb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80125a8:	9500      	str	r5, [sp, #0]
 80125aa:	4601      	mov	r1, r0
 80125ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ae:	aa02      	add	r2, sp, #8
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ff fdf3 	bl	801219c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80125b6:	e7ed      	b.n	8012594 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7fd facd 	bl	800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125be:	462b      	mov	r3, r5
 80125c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125c2:	a902      	add	r1, sp, #8
 80125c4:	f7ff fdfc 	bl	80121c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80125c8:	e7e4      	b.n	8012594 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80125ca:	6833      	ldr	r3, [r6, #0]
 80125cc:	4620      	mov	r0, r4
 80125ce:	68df      	ldr	r7, [r3, #12]
 80125d0:	f7fd fac2 	bl	800fb58 <_ZNK8touchgfx6Bitmap7getDataEv>
 80125d4:	2300      	movs	r3, #0
 80125d6:	4601      	mov	r1, r0
 80125d8:	aa02      	add	r2, sp, #8
 80125da:	4630      	mov	r0, r6
 80125dc:	e9cd 5300 	strd	r5, r3, [sp]
 80125e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125e2:	47b8      	blx	r7
 80125e4:	e7d6      	b.n	8012594 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080125e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80125e6:	b4f0      	push	{r4, r5, r6, r7}
 80125e8:	4616      	mov	r6, r2
 80125ea:	461c      	mov	r4, r3
 80125ec:	460d      	mov	r5, r1
 80125ee:	9a04      	ldr	r2, [sp, #16]
 80125f0:	2e01      	cmp	r6, #1
 80125f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80125f6:	d00e      	beq.n	8012616 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80125f8:	d303      	bcc.n	8012602 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80125fa:	2e02      	cmp	r6, #2
 80125fc:	d006      	beq.n	801260c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80125fe:	bcf0      	pop	{r4, r5, r6, r7}
 8012600:	4770      	bx	lr
 8012602:	4621      	mov	r1, r4
 8012604:	4628      	mov	r0, r5
 8012606:	bcf0      	pop	{r4, r5, r6, r7}
 8012608:	f7ff bdda 	b.w	80121c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801260c:	4621      	mov	r1, r4
 801260e:	4628      	mov	r0, r5
 8012610:	bcf0      	pop	{r4, r5, r6, r7}
 8012612:	f7ff bec9 	b.w	80123a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012616:	6805      	ldr	r5, [r0, #0]
 8012618:	2600      	movs	r6, #0
 801261a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801261e:	68ed      	ldr	r5, [r5, #12]
 8012620:	4613      	mov	r3, r2
 8012622:	4622      	mov	r2, r4
 8012624:	46ac      	mov	ip, r5
 8012626:	bcf0      	pop	{r4, r5, r6, r7}
 8012628:	4760      	bx	ip
	...

0801262c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801262c:	b160      	cbz	r0, 8012648 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801262e:	2903      	cmp	r1, #3
 8012630:	d818      	bhi.n	8012664 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8012632:	e8df f001 	tbb	[pc, r1]
 8012636:	1902      	.short	0x1902
 8012638:	1b06      	.short	0x1b06
 801263a:	4b0e      	ldr	r3, [pc, #56]	; (8012674 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801263c:	8818      	ldrh	r0, [r3, #0]
 801263e:	4240      	negs	r0, r0
 8012640:	4770      	bx	lr
 8012642:	4b0c      	ldr	r3, [pc, #48]	; (8012674 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8012644:	8818      	ldrh	r0, [r3, #0]
 8012646:	4770      	bx	lr
 8012648:	2903      	cmp	r1, #3
 801264a:	d80b      	bhi.n	8012664 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801264c:	a301      	add	r3, pc, #4	; (adr r3, 8012654 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801264e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012652:	bf00      	nop
 8012654:	08012669 	.word	0x08012669
 8012658:	08012643 	.word	0x08012643
 801265c:	0801266d 	.word	0x0801266d
 8012660:	0801263b 	.word	0x0801263b
 8012664:	2000      	movs	r0, #0
 8012666:	4770      	bx	lr
 8012668:	2001      	movs	r0, #1
 801266a:	4770      	bx	lr
 801266c:	f04f 30ff 	mov.w	r0, #4294967295
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	2400ae06 	.word	0x2400ae06

08012678 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8012678:	b160      	cbz	r0, 8012694 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801267a:	2903      	cmp	r1, #3
 801267c:	d818      	bhi.n	80126b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801267e:	e8df f001 	tbb	[pc, r1]
 8012682:	0219      	.short	0x0219
 8012684:	051b      	.short	0x051b
 8012686:	4b0e      	ldr	r3, [pc, #56]	; (80126c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8012688:	8818      	ldrh	r0, [r3, #0]
 801268a:	4770      	bx	lr
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801268e:	8818      	ldrh	r0, [r3, #0]
 8012690:	4240      	negs	r0, r0
 8012692:	4770      	bx	lr
 8012694:	2903      	cmp	r1, #3
 8012696:	d80b      	bhi.n	80126b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8012698:	a301      	add	r3, pc, #4	; (adr r3, 80126a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801269a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801269e:	bf00      	nop
 80126a0:	08012687 	.word	0x08012687
 80126a4:	080126b9 	.word	0x080126b9
 80126a8:	0801268d 	.word	0x0801268d
 80126ac:	080126b5 	.word	0x080126b5
 80126b0:	2000      	movs	r0, #0
 80126b2:	4770      	bx	lr
 80126b4:	2001      	movs	r0, #1
 80126b6:	4770      	bx	lr
 80126b8:	f04f 30ff 	mov.w	r0, #4294967295
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop
 80126c0:	2400ae06 	.word	0x2400ae06

080126c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80126c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c8:	b097      	sub	sp, #92	; 0x5c
 80126ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80126cc:	a912      	add	r1, sp, #72	; 0x48
 80126ce:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80126d2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80126d6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80126da:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80126de:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80126e2:	e881 000c 	stmia.w	r1, {r2, r3}
 80126e6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80126ea:	930a      	str	r3, [sp, #40]	; 0x28
 80126ec:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80126f0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80126f4:	9311      	str	r3, [sp, #68]	; 0x44
 80126f6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80126fa:	798d      	ldrb	r5, [r1, #6]
 80126fc:	930c      	str	r3, [sp, #48]	; 0x30
 80126fe:	7b4b      	ldrb	r3, [r1, #13]
 8012700:	0158      	lsls	r0, r3, #5
 8012702:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012706:	4328      	orrs	r0, r5
 8012708:	9009      	str	r0, [sp, #36]	; 0x24
 801270a:	f000 817c 	beq.w	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801270e:	011b      	lsls	r3, r3, #4
 8012710:	79c8      	ldrb	r0, [r1, #7]
 8012712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012716:	4303      	orrs	r3, r0
 8012718:	930e      	str	r3, [sp, #56]	; 0x38
 801271a:	f000 8174 	beq.w	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801271e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012722:	b29b      	uxth	r3, r3
 8012724:	2f00      	cmp	r7, #0
 8012726:	f000 8116 	beq.w	8012956 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801272a:	1aff      	subs	r7, r7, r3
 801272c:	b2bf      	uxth	r7, r7
 801272e:	043b      	lsls	r3, r7, #16
 8012730:	d502      	bpl.n	8012738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8012732:	1bf6      	subs	r6, r6, r7
 8012734:	2700      	movs	r7, #0
 8012736:	b236      	sxth	r6, r6
 8012738:	f9b2 1000 	ldrsh.w	r1, [r2]
 801273c:	a812      	add	r0, sp, #72	; 0x48
 801273e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8012742:	428e      	cmp	r6, r1
 8012744:	b28b      	uxth	r3, r1
 8012746:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801274a:	bfbf      	itttt	lt
 801274c:	18ff      	addlt	r7, r7, r3
 801274e:	1bbe      	sublt	r6, r7, r6
 8012750:	b2b7      	uxthlt	r7, r6
 8012752:	460e      	movlt	r6, r1
 8012754:	8891      	ldrh	r1, [r2, #4]
 8012756:	440b      	add	r3, r1
 8012758:	4631      	mov	r1, r6
 801275a:	b21b      	sxth	r3, r3
 801275c:	9310      	str	r3, [sp, #64]	; 0x40
 801275e:	88d3      	ldrh	r3, [r2, #6]
 8012760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012762:	449a      	add	sl, r3
 8012764:	fa0f f38a 	sxth.w	r3, sl
 8012768:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801276c:	930f      	str	r3, [sp, #60]	; 0x3c
 801276e:	4bb5      	ldr	r3, [pc, #724]	; (8012a44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8012770:	f893 b000 	ldrb.w	fp, [r3]
 8012774:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012778:	f1dc 0300 	rsbs	r3, ip, #0
 801277c:	eb43 030c 	adc.w	r3, r3, ip
 8012780:	930d      	str	r3, [sp, #52]	; 0x34
 8012782:	464b      	mov	r3, r9
 8012784:	f7fa f960 	bl	800ca48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012788:	4631      	mov	r1, r6
 801278a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801278e:	464b      	mov	r3, r9
 8012790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012792:	a812      	add	r0, sp, #72	; 0x48
 8012794:	f7fa f975 	bl	800ca82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012798:	a916      	add	r1, sp, #88	; 0x58
 801279a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801279e:	a815      	add	r0, sp, #84	; 0x54
 80127a0:	f7fa fa96 	bl	800ccd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80127a4:	f1b9 0f00 	cmp.w	r9, #0
 80127a8:	f040 80d8 	bne.w	801295c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 80127ac:	f1bb 0f01 	cmp.w	fp, #1
 80127b0:	f040 80dc 	bne.w	801296c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80127b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80127b6:	b153      	cbz	r3, 80127ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80127b8:	2508      	movs	r5, #8
 80127ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127bc:	fb95 f3f8 	sdiv	r3, r5, r8
 80127c0:	1e5d      	subs	r5, r3, #1
 80127c2:	4415      	add	r5, r2
 80127c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80127c8:	fb15 f503 	smulbb	r5, r5, r3
 80127cc:	b2ad      	uxth	r5, r5
 80127ce:	b907      	cbnz	r7, 80127d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80127d0:	b16c      	cbz	r4, 80127ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80127d2:	fb04 7305 	mla	r3, r4, r5, r7
 80127d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80127d8:	ebaa 0a04 	sub.w	sl, sl, r4
 80127dc:	fb08 f303 	mul.w	r3, r8, r3
 80127e0:	fa1f fa8a 	uxth.w	sl, sl
 80127e4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80127e8:	f003 0407 	and.w	r4, r3, #7
 80127ec:	9226      	str	r2, [sp, #152]	; 0x98
 80127ee:	4649      	mov	r1, r9
 80127f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127f2:	f7ff ff1b 	bl	801262c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80127f6:	4683      	mov	fp, r0
 80127f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80127fa:	f7ff ff3d 	bl	8012678 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80127fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012802:	4681      	mov	r9, r0
 8012804:	1a9b      	subs	r3, r3, r2
 8012806:	459a      	cmp	sl, r3
 8012808:	bfa8      	it	ge
 801280a:	469a      	movge	sl, r3
 801280c:	f1ba 0f00 	cmp.w	sl, #0
 8012810:	f340 80f9 	ble.w	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012814:	1bf6      	subs	r6, r6, r7
 8012816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012818:	1b9e      	subs	r6, r3, r6
 801281a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801281c:	429e      	cmp	r6, r3
 801281e:	bfd4      	ite	le
 8012820:	ebc7 0706 	rsble	r7, r7, r6
 8012824:	ebc7 0703 	rsbgt	r7, r7, r3
 8012828:	2f00      	cmp	r7, #0
 801282a:	f340 80ec 	ble.w	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801282e:	1bed      	subs	r5, r5, r7
 8012830:	fb08 f305 	mul.w	r3, r8, r5
 8012834:	930d      	str	r3, [sp, #52]	; 0x34
 8012836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012838:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801283c:	930e      	str	r3, [sp, #56]	; 0x38
 801283e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012840:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012844:	930f      	str	r3, [sp, #60]	; 0x3c
 8012846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012848:	b2db      	uxtb	r3, r3
 801284a:	9310      	str	r3, [sp, #64]	; 0x40
 801284c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801284e:	2b00      	cmp	r3, #0
 8012850:	f040 80de 	bne.w	8012a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8012854:	4b7c      	ldr	r3, [pc, #496]	; (8012a48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8012856:	6818      	ldr	r0, [r3, #0]
 8012858:	6803      	ldr	r3, [r0, #0]
 801285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801285c:	4798      	blx	r3
 801285e:	2301      	movs	r3, #1
 8012860:	4a7a      	ldr	r2, [pc, #488]	; (8012a4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8012862:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8012866:	fb07 9b1b 	mls	fp, r7, fp, r9
 801286a:	fa03 f308 	lsl.w	r3, r3, r8
 801286e:	8811      	ldrh	r1, [r2, #0]
 8012870:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8012874:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8012878:	3b01      	subs	r3, #1
 801287a:	fb06 bb07 	mla	fp, r6, r7, fp
 801287e:	b2db      	uxtb	r3, r3
 8012880:	930a      	str	r3, [sp, #40]	; 0x28
 8012882:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8012886:	fb01 2303 	mla	r3, r1, r3, r2
 801288a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801288e:	18c3      	adds	r3, r0, r3
 8012890:	9309      	str	r3, [sp, #36]	; 0x24
 8012892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012894:	781a      	ldrb	r2, [r3, #0]
 8012896:	4122      	asrs	r2, r4
 8012898:	b2d2      	uxtb	r2, r2
 801289a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801289e:	f0c0 80d7 	bcc.w	8012a50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80128a2:	46be      	mov	lr, r7
 80128a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128a6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80128aa:	f0c0 80ba 	bcc.w	8012a22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 80128ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b0:	4013      	ands	r3, r2
 80128b2:	d041      	beq.n	8012938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80128b4:	20ff      	movs	r0, #255	; 0xff
 80128b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80128b8:	fb90 f5f5 	sdiv	r5, r0, r5
 80128bc:	436b      	muls	r3, r5
 80128be:	2bfe      	cmp	r3, #254	; 0xfe
 80128c0:	dd03      	ble.n	80128ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80128c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128c4:	4285      	cmp	r5, r0
 80128c6:	f000 80a5 	beq.w	8012a14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80128ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80128ce:	fb15 f303 	smulbb	r3, r5, r3
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	1c5d      	adds	r5, r3, #1
 80128d6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80128da:	780d      	ldrb	r5, [r1, #0]
 80128dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80128e0:	fa1f fc83 	uxth.w	ip, r3
 80128e4:	43db      	mvns	r3, r3
 80128e6:	fb10 f90c 	smulbb	r9, r0, ip
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80128ee:	fb05 9503 	mla	r5, r5, r3, r9
 80128f2:	b2ad      	uxth	r5, r5
 80128f4:	f105 0901 	add.w	r9, r5, #1
 80128f8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80128fc:	fb10 f90c 	smulbb	r9, r0, ip
 8012900:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012902:	122d      	asrs	r5, r5, #8
 8012904:	fb10 fc0c 	smulbb	ip, r0, ip
 8012908:	700d      	strb	r5, [r1, #0]
 801290a:	784d      	ldrb	r5, [r1, #1]
 801290c:	fb05 9503 	mla	r5, r5, r3, r9
 8012910:	b2ad      	uxth	r5, r5
 8012912:	f105 0901 	add.w	r9, r5, #1
 8012916:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801291a:	122d      	asrs	r5, r5, #8
 801291c:	704d      	strb	r5, [r1, #1]
 801291e:	788d      	ldrb	r5, [r1, #2]
 8012920:	fb05 cc03 	mla	ip, r5, r3, ip
 8012924:	fa1f fc8c 	uxth.w	ip, ip
 8012928:	f10c 0301 	add.w	r3, ip, #1
 801292c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8012930:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8012934:	f881 c002 	strb.w	ip, [r1, #2]
 8012938:	4444      	add	r4, r8
 801293a:	4431      	add	r1, r6
 801293c:	b2a4      	uxth	r4, r4
 801293e:	2c07      	cmp	r4, #7
 8012940:	bf89      	itett	hi
 8012942:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8012944:	fa42 f208 	asrls.w	r2, r2, r8
 8012948:	2400      	movhi	r4, #0
 801294a:	785a      	ldrbhi	r2, [r3, #1]
 801294c:	bf8a      	itet	hi
 801294e:	3301      	addhi	r3, #1
 8012950:	b2d2      	uxtbls	r2, r2
 8012952:	9326      	strhi	r3, [sp, #152]	; 0x98
 8012954:	e7a7      	b.n	80128a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8012956:	441e      	add	r6, r3
 8012958:	b236      	sxth	r6, r6
 801295a:	e6ed      	b.n	8012738 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801295c:	f1b9 0f01 	cmp.w	r9, #1
 8012960:	f47f af28 	bne.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012964:	f1bb 0f01 	cmp.w	fp, #1
 8012968:	f47f af24 	bne.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801296c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8012a48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8012970:	f8db 0000 	ldr.w	r0, [fp]
 8012974:	6803      	ldr	r3, [r0, #0]
 8012976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012978:	4798      	blx	r3
 801297a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801297e:	465a      	mov	r2, fp
 8012980:	d006      	beq.n	8012990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8012982:	f1b8 0f04 	cmp.w	r8, #4
 8012986:	d141      	bne.n	8012a0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8012988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801298a:	3300      	adds	r3, #0
 801298c:	bf18      	it	ne
 801298e:	2301      	movne	r3, #1
 8012990:	0580      	lsls	r0, r0, #22
 8012992:	d566      	bpl.n	8012a62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8012994:	f1b8 0f08 	cmp.w	r8, #8
 8012998:	d163      	bne.n	8012a62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801299a:	2b00      	cmp	r3, #0
 801299c:	bf0c      	ite	eq
 801299e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80129a2:	f44f 7180 	movne.w	r1, #256	; 0x100
 80129a6:	2f00      	cmp	r7, #0
 80129a8:	f47f af04 	bne.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129ac:	2c00      	cmp	r4, #0
 80129ae:	f47f af01 	bne.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80129b6:	18f3      	adds	r3, r6, r3
 80129b8:	4283      	cmp	r3, r0
 80129ba:	f73f aefb 	bgt.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80129c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129c2:	4403      	add	r3, r0
 80129c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80129c6:	4283      	cmp	r3, r0
 80129c8:	f73f aef4 	bgt.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80129cc:	f1b8 0f08 	cmp.w	r8, #8
 80129d0:	6810      	ldr	r0, [r2, #0]
 80129d2:	f04f 0600 	mov.w	r6, #0
 80129d6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80129da:	bf18      	it	ne
 80129dc:	3501      	addne	r5, #1
 80129de:	6804      	ldr	r4, [r0, #0]
 80129e0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80129e4:	bf18      	it	ne
 80129e6:	f025 0501 	bicne.w	r5, r5, #1
 80129ea:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80129ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80129f0:	bf18      	it	ne
 80129f2:	b2ad      	uxthne	r5, r5
 80129f4:	9104      	str	r1, [sp, #16]
 80129f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80129f8:	e9cd 5a00 	strd	r5, sl, [sp]
 80129fc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8012a00:	9926      	ldr	r1, [sp, #152]	; 0x98
 8012a02:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8012a04:	47a0      	blx	r4
 8012a06:	b017      	add	sp, #92	; 0x5c
 8012a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e7bf      	b.n	8012990 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8012a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012a12:	e724      	b.n	801285e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8012a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a16:	700b      	strb	r3, [r1, #0]
 8012a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a1a:	704b      	strb	r3, [r1, #1]
 8012a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a1e:	708b      	strb	r3, [r1, #2]
 8012a20:	e78a      	b.n	8012938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8012a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a24:	b153      	cbz	r3, 8012a3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8012a26:	441c      	add	r4, r3
 8012a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012a2a:	b2a4      	uxth	r4, r4
 8012a2c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8012a30:	f004 0407 	and.w	r4, r4, #7
 8012a34:	781a      	ldrb	r2, [r3, #0]
 8012a36:	9326      	str	r3, [sp, #152]	; 0x98
 8012a38:	4122      	asrs	r2, r4
 8012a3a:	b2d2      	uxtb	r2, r2
 8012a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3e:	445b      	add	r3, fp
 8012a40:	9309      	str	r3, [sp, #36]	; 0x24
 8012a42:	e72a      	b.n	801289a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8012a44:	2400ae04 	.word	0x2400ae04
 8012a48:	2400ae0c 	.word	0x2400ae0c
 8012a4c:	2400ae06 	.word	0x2400ae06
 8012a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1d7      	bne.n	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a56:	4b06      	ldr	r3, [pc, #24]	; (8012a70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8012a58:	6818      	ldr	r0, [r3, #0]
 8012a5a:	6803      	ldr	r3, [r0, #0]
 8012a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a5e:	4798      	blx	r3
 8012a60:	e7d1      	b.n	8012a06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f43f aea6 	beq.w	80127b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8012a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012a6c:	e79b      	b.n	80129a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8012a6e:	bf00      	nop
 8012a70:	2400ae0c 	.word	0x2400ae0c

08012a74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4c15      	ldr	r4, [pc, #84]	; (8012acc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8012a78:	4605      	mov	r5, r0
 8012a7a:	7823      	ldrb	r3, [r4, #0]
 8012a7c:	f3bf 8f5b 	dmb	ish
 8012a80:	07da      	lsls	r2, r3, #31
 8012a82:	d40b      	bmi.n	8012a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a84:	4620      	mov	r0, r4
 8012a86:	f005 f890 	bl	8017baa <__cxa_guard_acquire>
 8012a8a:	b138      	cbz	r0, 8012a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f005 f898 	bl	8017bc2 <__cxa_guard_release>
 8012a92:	4a0f      	ldr	r2, [pc, #60]	; (8012ad0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012a94:	490f      	ldr	r1, [pc, #60]	; (8012ad4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8012a96:	4810      	ldr	r0, [pc, #64]	; (8012ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012a98:	f005 f880 	bl	8017b9c <__aeabi_atexit>
 8012a9c:	4c0f      	ldr	r4, [pc, #60]	; (8012adc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8012a9e:	7823      	ldrb	r3, [r4, #0]
 8012aa0:	f3bf 8f5b 	dmb	ish
 8012aa4:	07db      	lsls	r3, r3, #31
 8012aa6:	d40b      	bmi.n	8012ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f005 f87e 	bl	8017baa <__cxa_guard_acquire>
 8012aae:	b138      	cbz	r0, 8012ac0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	f005 f886 	bl	8017bc2 <__cxa_guard_release>
 8012ab6:	4a06      	ldr	r2, [pc, #24]	; (8012ad0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8012ab8:	4909      	ldr	r1, [pc, #36]	; (8012ae0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8012aba:	480a      	ldr	r0, [pc, #40]	; (8012ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012abc:	f005 f86e 	bl	8017b9c <__aeabi_atexit>
 8012ac0:	4b05      	ldr	r3, [pc, #20]	; (8012ad8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8012ac2:	612b      	str	r3, [r5, #16]
 8012ac4:	4b07      	ldr	r3, [pc, #28]	; (8012ae4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8012ac6:	616b      	str	r3, [r5, #20]
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
 8012aca:	bf00      	nop
 8012acc:	2400aed8 	.word	0x2400aed8
 8012ad0:	24000000 	.word	0x24000000
 8012ad4:	08011639 	.word	0x08011639
 8012ad8:	24000094 	.word	0x24000094
 8012adc:	2400aedc 	.word	0x2400aedc
 8012ae0:	08011637 	.word	0x08011637
 8012ae4:	24000098 	.word	0x24000098

08012ae8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	4c15      	ldr	r4, [pc, #84]	; (8012b40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8012aec:	4605      	mov	r5, r0
 8012aee:	7823      	ldrb	r3, [r4, #0]
 8012af0:	f3bf 8f5b 	dmb	ish
 8012af4:	07da      	lsls	r2, r3, #31
 8012af6:	d40b      	bmi.n	8012b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012af8:	4620      	mov	r0, r4
 8012afa:	f005 f856 	bl	8017baa <__cxa_guard_acquire>
 8012afe:	b138      	cbz	r0, 8012b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8012b00:	4620      	mov	r0, r4
 8012b02:	f005 f85e 	bl	8017bc2 <__cxa_guard_release>
 8012b06:	4a0f      	ldr	r2, [pc, #60]	; (8012b44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012b08:	490f      	ldr	r1, [pc, #60]	; (8012b48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8012b0a:	4810      	ldr	r0, [pc, #64]	; (8012b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012b0c:	f005 f846 	bl	8017b9c <__aeabi_atexit>
 8012b10:	4c0f      	ldr	r4, [pc, #60]	; (8012b50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8012b12:	7823      	ldrb	r3, [r4, #0]
 8012b14:	f3bf 8f5b 	dmb	ish
 8012b18:	07db      	lsls	r3, r3, #31
 8012b1a:	d40b      	bmi.n	8012b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	f005 f844 	bl	8017baa <__cxa_guard_acquire>
 8012b22:	b138      	cbz	r0, 8012b34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8012b24:	4620      	mov	r0, r4
 8012b26:	f005 f84c 	bl	8017bc2 <__cxa_guard_release>
 8012b2a:	4a06      	ldr	r2, [pc, #24]	; (8012b44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8012b2c:	4909      	ldr	r1, [pc, #36]	; (8012b54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8012b2e:	480a      	ldr	r0, [pc, #40]	; (8012b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b30:	f005 f834 	bl	8017b9c <__aeabi_atexit>
 8012b34:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8012b36:	60ab      	str	r3, [r5, #8]
 8012b38:	4b07      	ldr	r3, [pc, #28]	; (8012b58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8012b3a:	60eb      	str	r3, [r5, #12]
 8012b3c:	bd38      	pop	{r3, r4, r5, pc}
 8012b3e:	bf00      	nop
 8012b40:	2400aeb8 	.word	0x2400aeb8
 8012b44:	24000000 	.word	0x24000000
 8012b48:	0801163d 	.word	0x0801163d
 8012b4c:	24000074 	.word	0x24000074
 8012b50:	2400aebc 	.word	0x2400aebc
 8012b54:	0801163b 	.word	0x0801163b
 8012b58:	24000078 	.word	0x24000078

08012b5c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8012b5c:	b510      	push	{r4, lr}
 8012b5e:	4604      	mov	r4, r0
 8012b60:	f7ff ff88 	bl	8012a74 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8012b64:	4620      	mov	r0, r4
 8012b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b6a:	f7ff bfbd 	b.w	8012ae8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08012b70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4c15      	ldr	r4, [pc, #84]	; (8012bc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8012b74:	4605      	mov	r5, r0
 8012b76:	7823      	ldrb	r3, [r4, #0]
 8012b78:	f3bf 8f5b 	dmb	ish
 8012b7c:	07da      	lsls	r2, r3, #31
 8012b7e:	d40b      	bmi.n	8012b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b80:	4620      	mov	r0, r4
 8012b82:	f005 f812 	bl	8017baa <__cxa_guard_acquire>
 8012b86:	b138      	cbz	r0, 8012b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f005 f81a 	bl	8017bc2 <__cxa_guard_release>
 8012b8e:	4a0f      	ldr	r2, [pc, #60]	; (8012bcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012b90:	490f      	ldr	r1, [pc, #60]	; (8012bd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8012b92:	4810      	ldr	r0, [pc, #64]	; (8012bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012b94:	f005 f802 	bl	8017b9c <__aeabi_atexit>
 8012b98:	4c0f      	ldr	r4, [pc, #60]	; (8012bd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8012b9a:	7823      	ldrb	r3, [r4, #0]
 8012b9c:	f3bf 8f5b 	dmb	ish
 8012ba0:	07db      	lsls	r3, r3, #31
 8012ba2:	d40b      	bmi.n	8012bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f005 f800 	bl	8017baa <__cxa_guard_acquire>
 8012baa:	b138      	cbz	r0, 8012bbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8012bac:	4620      	mov	r0, r4
 8012bae:	f005 f808 	bl	8017bc2 <__cxa_guard_release>
 8012bb2:	4a06      	ldr	r2, [pc, #24]	; (8012bcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8012bb4:	4909      	ldr	r1, [pc, #36]	; (8012bdc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8012bb6:	480a      	ldr	r0, [pc, #40]	; (8012be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012bb8:	f004 fff0 	bl	8017b9c <__aeabi_atexit>
 8012bbc:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8012bbe:	622b      	str	r3, [r5, #32]
 8012bc0:	4b07      	ldr	r3, [pc, #28]	; (8012be0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8012bc2:	626b      	str	r3, [r5, #36]	; 0x24
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	bf00      	nop
 8012bc8:	2400aee0 	.word	0x2400aee0
 8012bcc:	24000000 	.word	0x24000000
 8012bd0:	08011631 	.word	0x08011631
 8012bd4:	2400009c 	.word	0x2400009c
 8012bd8:	2400aee4 	.word	0x2400aee4
 8012bdc:	0801162f 	.word	0x0801162f
 8012be0:	240000a0 	.word	0x240000a0

08012be4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4c15      	ldr	r4, [pc, #84]	; (8012c3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8012be8:	4605      	mov	r5, r0
 8012bea:	7823      	ldrb	r3, [r4, #0]
 8012bec:	f3bf 8f5b 	dmb	ish
 8012bf0:	07da      	lsls	r2, r3, #31
 8012bf2:	d40b      	bmi.n	8012c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f004 ffd8 	bl	8017baa <__cxa_guard_acquire>
 8012bfa:	b138      	cbz	r0, 8012c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f004 ffe0 	bl	8017bc2 <__cxa_guard_release>
 8012c02:	4a0f      	ldr	r2, [pc, #60]	; (8012c40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012c04:	490f      	ldr	r1, [pc, #60]	; (8012c44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8012c06:	4810      	ldr	r0, [pc, #64]	; (8012c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012c08:	f004 ffc8 	bl	8017b9c <__aeabi_atexit>
 8012c0c:	4c0f      	ldr	r4, [pc, #60]	; (8012c4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8012c0e:	7823      	ldrb	r3, [r4, #0]
 8012c10:	f3bf 8f5b 	dmb	ish
 8012c14:	07db      	lsls	r3, r3, #31
 8012c16:	d40b      	bmi.n	8012c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f004 ffc6 	bl	8017baa <__cxa_guard_acquire>
 8012c1e:	b138      	cbz	r0, 8012c30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8012c20:	4620      	mov	r0, r4
 8012c22:	f004 ffce 	bl	8017bc2 <__cxa_guard_release>
 8012c26:	4a06      	ldr	r2, [pc, #24]	; (8012c40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8012c28:	4909      	ldr	r1, [pc, #36]	; (8012c50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8012c2a:	480a      	ldr	r0, [pc, #40]	; (8012c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012c2c:	f004 ffb6 	bl	8017b9c <__aeabi_atexit>
 8012c30:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8012c32:	61ab      	str	r3, [r5, #24]
 8012c34:	4b07      	ldr	r3, [pc, #28]	; (8012c54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8012c36:	61eb      	str	r3, [r5, #28]
 8012c38:	bd38      	pop	{r3, r4, r5, pc}
 8012c3a:	bf00      	nop
 8012c3c:	2400aec0 	.word	0x2400aec0
 8012c40:	24000000 	.word	0x24000000
 8012c44:	08011635 	.word	0x08011635
 8012c48:	2400007c 	.word	0x2400007c
 8012c4c:	2400aec4 	.word	0x2400aec4
 8012c50:	08011633 	.word	0x08011633
 8012c54:	24000080 	.word	0x24000080

08012c58 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8012c58:	b510      	push	{r4, lr}
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	f7ff ff88 	bl	8012b70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8012c60:	4620      	mov	r0, r4
 8012c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c66:	f7ff bfbd 	b.w	8012be4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08012c6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4c15      	ldr	r4, [pc, #84]	; (8012cc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8012c70:	4605      	mov	r5, r0
 8012c72:	7823      	ldrb	r3, [r4, #0]
 8012c74:	f3bf 8f5b 	dmb	ish
 8012c78:	07da      	lsls	r2, r3, #31
 8012c7a:	d40b      	bmi.n	8012c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f004 ff94 	bl	8017baa <__cxa_guard_acquire>
 8012c82:	b138      	cbz	r0, 8012c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8012c84:	4620      	mov	r0, r4
 8012c86:	f004 ff9c 	bl	8017bc2 <__cxa_guard_release>
 8012c8a:	4a0f      	ldr	r2, [pc, #60]	; (8012cc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012c8c:	490f      	ldr	r1, [pc, #60]	; (8012ccc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8012c8e:	4810      	ldr	r0, [pc, #64]	; (8012cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012c90:	f004 ff84 	bl	8017b9c <__aeabi_atexit>
 8012c94:	4c0f      	ldr	r4, [pc, #60]	; (8012cd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8012c96:	7823      	ldrb	r3, [r4, #0]
 8012c98:	f3bf 8f5b 	dmb	ish
 8012c9c:	07db      	lsls	r3, r3, #31
 8012c9e:	d40b      	bmi.n	8012cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f004 ff82 	bl	8017baa <__cxa_guard_acquire>
 8012ca6:	b138      	cbz	r0, 8012cb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f004 ff8a 	bl	8017bc2 <__cxa_guard_release>
 8012cae:	4a06      	ldr	r2, [pc, #24]	; (8012cc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8012cb0:	4909      	ldr	r1, [pc, #36]	; (8012cd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8012cb2:	480a      	ldr	r0, [pc, #40]	; (8012cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012cb4:	f004 ff72 	bl	8017b9c <__aeabi_atexit>
 8012cb8:	4b05      	ldr	r3, [pc, #20]	; (8012cd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8012cba:	632b      	str	r3, [r5, #48]	; 0x30
 8012cbc:	4b07      	ldr	r3, [pc, #28]	; (8012cdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8012cbe:	636b      	str	r3, [r5, #52]	; 0x34
 8012cc0:	bd38      	pop	{r3, r4, r5, pc}
 8012cc2:	bf00      	nop
 8012cc4:	2400aec8 	.word	0x2400aec8
 8012cc8:	24000000 	.word	0x24000000
 8012ccc:	08011629 	.word	0x08011629
 8012cd0:	24000084 	.word	0x24000084
 8012cd4:	2400aecc 	.word	0x2400aecc
 8012cd8:	08011627 	.word	0x08011627
 8012cdc:	24000088 	.word	0x24000088

08012ce0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	4c15      	ldr	r4, [pc, #84]	; (8012d38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8012ce4:	4605      	mov	r5, r0
 8012ce6:	7823      	ldrb	r3, [r4, #0]
 8012ce8:	f3bf 8f5b 	dmb	ish
 8012cec:	07da      	lsls	r2, r3, #31
 8012cee:	d40b      	bmi.n	8012d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f004 ff5a 	bl	8017baa <__cxa_guard_acquire>
 8012cf6:	b138      	cbz	r0, 8012d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f004 ff62 	bl	8017bc2 <__cxa_guard_release>
 8012cfe:	4a0f      	ldr	r2, [pc, #60]	; (8012d3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012d00:	490f      	ldr	r1, [pc, #60]	; (8012d40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8012d02:	4810      	ldr	r0, [pc, #64]	; (8012d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012d04:	f004 ff4a 	bl	8017b9c <__aeabi_atexit>
 8012d08:	4c0f      	ldr	r4, [pc, #60]	; (8012d48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8012d0a:	7823      	ldrb	r3, [r4, #0]
 8012d0c:	f3bf 8f5b 	dmb	ish
 8012d10:	07db      	lsls	r3, r3, #31
 8012d12:	d40b      	bmi.n	8012d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012d14:	4620      	mov	r0, r4
 8012d16:	f004 ff48 	bl	8017baa <__cxa_guard_acquire>
 8012d1a:	b138      	cbz	r0, 8012d2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f004 ff50 	bl	8017bc2 <__cxa_guard_release>
 8012d22:	4a06      	ldr	r2, [pc, #24]	; (8012d3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8012d24:	4909      	ldr	r1, [pc, #36]	; (8012d4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8012d26:	480a      	ldr	r0, [pc, #40]	; (8012d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012d28:	f004 ff38 	bl	8017b9c <__aeabi_atexit>
 8012d2c:	4b05      	ldr	r3, [pc, #20]	; (8012d44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8012d2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8012d30:	4b07      	ldr	r3, [pc, #28]	; (8012d50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8012d32:	62eb      	str	r3, [r5, #44]	; 0x2c
 8012d34:	bd38      	pop	{r3, r4, r5, pc}
 8012d36:	bf00      	nop
 8012d38:	2400aea0 	.word	0x2400aea0
 8012d3c:	24000000 	.word	0x24000000
 8012d40:	0801162d 	.word	0x0801162d
 8012d44:	2400005c 	.word	0x2400005c
 8012d48:	2400aea4 	.word	0x2400aea4
 8012d4c:	0801162b 	.word	0x0801162b
 8012d50:	24000060 	.word	0x24000060

08012d54 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8012d54:	b510      	push	{r4, lr}
 8012d56:	4604      	mov	r4, r0
 8012d58:	f7ff ff88 	bl	8012c6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d62:	f7ff bfbd 	b.w	8012ce0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08012d68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8012d68:	b538      	push	{r3, r4, r5, lr}
 8012d6a:	4c15      	ldr	r4, [pc, #84]	; (8012dc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	7823      	ldrb	r3, [r4, #0]
 8012d70:	f3bf 8f5b 	dmb	ish
 8012d74:	07da      	lsls	r2, r3, #31
 8012d76:	d40b      	bmi.n	8012d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f004 ff16 	bl	8017baa <__cxa_guard_acquire>
 8012d7e:	b138      	cbz	r0, 8012d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8012d80:	4620      	mov	r0, r4
 8012d82:	f004 ff1e 	bl	8017bc2 <__cxa_guard_release>
 8012d86:	4a0f      	ldr	r2, [pc, #60]	; (8012dc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012d88:	490f      	ldr	r1, [pc, #60]	; (8012dc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8012d8a:	4810      	ldr	r0, [pc, #64]	; (8012dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012d8c:	f004 ff06 	bl	8017b9c <__aeabi_atexit>
 8012d90:	4c0f      	ldr	r4, [pc, #60]	; (8012dd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8012d92:	7823      	ldrb	r3, [r4, #0]
 8012d94:	f3bf 8f5b 	dmb	ish
 8012d98:	07db      	lsls	r3, r3, #31
 8012d9a:	d40b      	bmi.n	8012db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f004 ff04 	bl	8017baa <__cxa_guard_acquire>
 8012da2:	b138      	cbz	r0, 8012db4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8012da4:	4620      	mov	r0, r4
 8012da6:	f004 ff0c 	bl	8017bc2 <__cxa_guard_release>
 8012daa:	4a06      	ldr	r2, [pc, #24]	; (8012dc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8012dac:	4909      	ldr	r1, [pc, #36]	; (8012dd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8012dae:	480a      	ldr	r0, [pc, #40]	; (8012dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012db0:	f004 fef4 	bl	8017b9c <__aeabi_atexit>
 8012db4:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8012db6:	642b      	str	r3, [r5, #64]	; 0x40
 8012db8:	4b07      	ldr	r3, [pc, #28]	; (8012dd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8012dba:	646b      	str	r3, [r5, #68]	; 0x44
 8012dbc:	bd38      	pop	{r3, r4, r5, pc}
 8012dbe:	bf00      	nop
 8012dc0:	2400aed0 	.word	0x2400aed0
 8012dc4:	24000000 	.word	0x24000000
 8012dc8:	08011621 	.word	0x08011621
 8012dcc:	2400008c 	.word	0x2400008c
 8012dd0:	2400aed4 	.word	0x2400aed4
 8012dd4:	0801161f 	.word	0x0801161f
 8012dd8:	24000090 	.word	0x24000090

08012ddc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	4c15      	ldr	r4, [pc, #84]	; (8012e34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8012de0:	4605      	mov	r5, r0
 8012de2:	7823      	ldrb	r3, [r4, #0]
 8012de4:	f3bf 8f5b 	dmb	ish
 8012de8:	07da      	lsls	r2, r3, #31
 8012dea:	d40b      	bmi.n	8012e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012dec:	4620      	mov	r0, r4
 8012dee:	f004 fedc 	bl	8017baa <__cxa_guard_acquire>
 8012df2:	b138      	cbz	r0, 8012e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8012df4:	4620      	mov	r0, r4
 8012df6:	f004 fee4 	bl	8017bc2 <__cxa_guard_release>
 8012dfa:	4a0f      	ldr	r2, [pc, #60]	; (8012e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012dfc:	490f      	ldr	r1, [pc, #60]	; (8012e3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8012dfe:	4810      	ldr	r0, [pc, #64]	; (8012e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012e00:	f004 fecc 	bl	8017b9c <__aeabi_atexit>
 8012e04:	4c0f      	ldr	r4, [pc, #60]	; (8012e44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8012e06:	7823      	ldrb	r3, [r4, #0]
 8012e08:	f3bf 8f5b 	dmb	ish
 8012e0c:	07db      	lsls	r3, r3, #31
 8012e0e:	d40b      	bmi.n	8012e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012e10:	4620      	mov	r0, r4
 8012e12:	f004 feca 	bl	8017baa <__cxa_guard_acquire>
 8012e16:	b138      	cbz	r0, 8012e28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f004 fed2 	bl	8017bc2 <__cxa_guard_release>
 8012e1e:	4a06      	ldr	r2, [pc, #24]	; (8012e38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8012e20:	4909      	ldr	r1, [pc, #36]	; (8012e48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8012e22:	480a      	ldr	r0, [pc, #40]	; (8012e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012e24:	f004 feba 	bl	8017b9c <__aeabi_atexit>
 8012e28:	4b05      	ldr	r3, [pc, #20]	; (8012e40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8012e2a:	63ab      	str	r3, [r5, #56]	; 0x38
 8012e2c:	4b07      	ldr	r3, [pc, #28]	; (8012e4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8012e2e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012e30:	bd38      	pop	{r3, r4, r5, pc}
 8012e32:	bf00      	nop
 8012e34:	2400aeb0 	.word	0x2400aeb0
 8012e38:	24000000 	.word	0x24000000
 8012e3c:	08011625 	.word	0x08011625
 8012e40:	2400006c 	.word	0x2400006c
 8012e44:	2400aeb4 	.word	0x2400aeb4
 8012e48:	08011623 	.word	0x08011623
 8012e4c:	24000070 	.word	0x24000070

08012e50 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8012e50:	b510      	push	{r4, lr}
 8012e52:	4604      	mov	r4, r0
 8012e54:	f7ff ff88 	bl	8012d68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8012e58:	4620      	mov	r0, r4
 8012e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e5e:	f7ff bfbd 	b.w	8012ddc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08012e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8012e64:	b538      	push	{r3, r4, r5, lr}
 8012e66:	4c15      	ldr	r4, [pc, #84]	; (8012ebc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8012e68:	4605      	mov	r5, r0
 8012e6a:	7823      	ldrb	r3, [r4, #0]
 8012e6c:	f3bf 8f5b 	dmb	ish
 8012e70:	07da      	lsls	r2, r3, #31
 8012e72:	d40b      	bmi.n	8012e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e74:	4620      	mov	r0, r4
 8012e76:	f004 fe98 	bl	8017baa <__cxa_guard_acquire>
 8012e7a:	b138      	cbz	r0, 8012e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	f004 fea0 	bl	8017bc2 <__cxa_guard_release>
 8012e82:	4a0f      	ldr	r2, [pc, #60]	; (8012ec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012e84:	490f      	ldr	r1, [pc, #60]	; (8012ec4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8012e86:	4810      	ldr	r0, [pc, #64]	; (8012ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012e88:	f004 fe88 	bl	8017b9c <__aeabi_atexit>
 8012e8c:	4c0f      	ldr	r4, [pc, #60]	; (8012ecc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8012e8e:	7823      	ldrb	r3, [r4, #0]
 8012e90:	f3bf 8f5b 	dmb	ish
 8012e94:	07db      	lsls	r3, r3, #31
 8012e96:	d40b      	bmi.n	8012eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f004 fe86 	bl	8017baa <__cxa_guard_acquire>
 8012e9e:	b138      	cbz	r0, 8012eb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f004 fe8e 	bl	8017bc2 <__cxa_guard_release>
 8012ea6:	4a06      	ldr	r2, [pc, #24]	; (8012ec0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8012ea8:	4909      	ldr	r1, [pc, #36]	; (8012ed0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8012eaa:	480a      	ldr	r0, [pc, #40]	; (8012ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012eac:	f004 fe76 	bl	8017b9c <__aeabi_atexit>
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8012eb2:	652b      	str	r3, [r5, #80]	; 0x50
 8012eb4:	4b07      	ldr	r3, [pc, #28]	; (8012ed4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8012eb6:	656b      	str	r3, [r5, #84]	; 0x54
 8012eb8:	bd38      	pop	{r3, r4, r5, pc}
 8012eba:	bf00      	nop
 8012ebc:	2400aea8 	.word	0x2400aea8
 8012ec0:	24000000 	.word	0x24000000
 8012ec4:	08011619 	.word	0x08011619
 8012ec8:	24000064 	.word	0x24000064
 8012ecc:	2400aeac 	.word	0x2400aeac
 8012ed0:	08011617 	.word	0x08011617
 8012ed4:	24000068 	.word	0x24000068

08012ed8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4c15      	ldr	r4, [pc, #84]	; (8012f30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8012edc:	4605      	mov	r5, r0
 8012ede:	7823      	ldrb	r3, [r4, #0]
 8012ee0:	f3bf 8f5b 	dmb	ish
 8012ee4:	07da      	lsls	r2, r3, #31
 8012ee6:	d40b      	bmi.n	8012f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f004 fe5e 	bl	8017baa <__cxa_guard_acquire>
 8012eee:	b138      	cbz	r0, 8012f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f004 fe66 	bl	8017bc2 <__cxa_guard_release>
 8012ef6:	4a0f      	ldr	r2, [pc, #60]	; (8012f34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012ef8:	490f      	ldr	r1, [pc, #60]	; (8012f38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8012efa:	4810      	ldr	r0, [pc, #64]	; (8012f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012efc:	f004 fe4e 	bl	8017b9c <__aeabi_atexit>
 8012f00:	4c0f      	ldr	r4, [pc, #60]	; (8012f40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8012f02:	7823      	ldrb	r3, [r4, #0]
 8012f04:	f3bf 8f5b 	dmb	ish
 8012f08:	07db      	lsls	r3, r3, #31
 8012f0a:	d40b      	bmi.n	8012f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f004 fe4c 	bl	8017baa <__cxa_guard_acquire>
 8012f12:	b138      	cbz	r0, 8012f24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8012f14:	4620      	mov	r0, r4
 8012f16:	f004 fe54 	bl	8017bc2 <__cxa_guard_release>
 8012f1a:	4a06      	ldr	r2, [pc, #24]	; (8012f34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8012f1c:	4909      	ldr	r1, [pc, #36]	; (8012f44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8012f1e:	480a      	ldr	r0, [pc, #40]	; (8012f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012f20:	f004 fe3c 	bl	8017b9c <__aeabi_atexit>
 8012f24:	4b05      	ldr	r3, [pc, #20]	; (8012f3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8012f26:	64ab      	str	r3, [r5, #72]	; 0x48
 8012f28:	4b07      	ldr	r3, [pc, #28]	; (8012f48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8012f2a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012f2c:	bd38      	pop	{r3, r4, r5, pc}
 8012f2e:	bf00      	nop
 8012f30:	2400ae98 	.word	0x2400ae98
 8012f34:	24000000 	.word	0x24000000
 8012f38:	0801161d 	.word	0x0801161d
 8012f3c:	24000054 	.word	0x24000054
 8012f40:	2400ae9c 	.word	0x2400ae9c
 8012f44:	0801161b 	.word	0x0801161b
 8012f48:	24000058 	.word	0x24000058

08012f4c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8012f4c:	b510      	push	{r4, lr}
 8012f4e:	4604      	mov	r4, r0
 8012f50:	f7ff ff88 	bl	8012e64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8012f54:	4620      	mov	r0, r4
 8012f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f5a:	f7ff bfbd 	b.w	8012ed8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08012f5e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8012f5e:	b510      	push	{r4, lr}
 8012f60:	4604      	mov	r4, r0
 8012f62:	f7ff fff3 	bl	8012f4c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8012f66:	4620      	mov	r0, r4
 8012f68:	f7ff ff72 	bl	8012e50 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7ff fe73 	bl	8012c58 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8012f72:	4620      	mov	r0, r4
 8012f74:	f7ff fdf2 	bl	8012b5c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8012f78:	4620      	mov	r0, r4
 8012f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f7e:	f7ff bee9 	b.w	8012d54 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08012f82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8012f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f86:	b087      	sub	sp, #28
 8012f88:	788d      	ldrb	r5, [r1, #2]
 8012f8a:	f891 9000 	ldrb.w	r9, [r1]
 8012f8e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8012f92:	9501      	str	r5, [sp, #4]
 8012f94:	784d      	ldrb	r5, [r1, #1]
 8012f96:	9203      	str	r2, [sp, #12]
 8012f98:	9502      	str	r5, [sp, #8]
 8012f9a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8012f9e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8012fa2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012fa6:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8012faa:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8012fae:	fb06 0708 	mla	r7, r6, r8, r0
 8012fb2:	2e00      	cmp	r6, #0
 8012fb4:	eb02 0a07 	add.w	sl, r2, r7
 8012fb8:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8012fbc:	9d01      	ldr	r5, [sp, #4]
 8012fbe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8012fc2:	ea45 0509 	orr.w	r5, r5, r9
 8012fc6:	9505      	str	r5, [sp, #20]
 8012fc8:	f2c0 80b2 	blt.w	8013130 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012fcc:	45b3      	cmp	fp, r6
 8012fce:	f340 80af 	ble.w	8013130 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	f2c0 80aa 	blt.w	801312c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fd8:	4580      	cmp	r8, r0
 8012fda:	f340 80a7 	ble.w	801312c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8012fde:	9a03      	ldr	r2, [sp, #12]
 8012fe0:	5dd7      	ldrb	r7, [r2, r7]
 8012fe2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012fe6:	441f      	add	r7, r3
 8012fe8:	1c42      	adds	r2, r0, #1
 8012fea:	f100 80a4 	bmi.w	8013136 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012fee:	4590      	cmp	r8, r2
 8012ff0:	f340 80a1 	ble.w	8013136 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012ff4:	2c00      	cmp	r4, #0
 8012ff6:	f000 809e 	beq.w	8013136 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8012ffa:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8012ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013002:	441d      	add	r5, r3
 8013004:	3601      	adds	r6, #1
 8013006:	f100 809a 	bmi.w	801313e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801300a:	45b3      	cmp	fp, r6
 801300c:	f340 8097 	ble.w	801313e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013010:	f1bc 0f00 	cmp.w	ip, #0
 8013014:	f000 8093 	beq.w	801313e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013018:	2800      	cmp	r0, #0
 801301a:	f2c0 808e 	blt.w	801313a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801301e:	4580      	cmp	r8, r0
 8013020:	f340 808b 	ble.w	801313a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8013024:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8013028:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801302c:	441e      	add	r6, r3
 801302e:	3001      	adds	r0, #1
 8013030:	f100 8088 	bmi.w	8013144 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013034:	4580      	cmp	r8, r0
 8013036:	f340 8085 	ble.w	8013144 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801303a:	2c00      	cmp	r4, #0
 801303c:	f000 8082 	beq.w	8013144 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013040:	44d0      	add	r8, sl
 8013042:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013046:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801304a:	4413      	add	r3, r2
 801304c:	b2a4      	uxth	r4, r4
 801304e:	f895 a000 	ldrb.w	sl, [r5]
 8013052:	fa1f fc8c 	uxth.w	ip, ip
 8013056:	fb04 fb0c 	mul.w	fp, r4, ip
 801305a:	0124      	lsls	r4, r4, #4
 801305c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8013060:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8013064:	eba4 040b 	sub.w	r4, r4, fp
 8013068:	fa1f f08c 	uxth.w	r0, ip
 801306c:	b2a2      	uxth	r2, r4
 801306e:	783c      	ldrb	r4, [r7, #0]
 8013070:	eba8 0800 	sub.w	r8, r8, r0
 8013074:	fa1f fc8e 	uxth.w	ip, lr
 8013078:	fb02 fa0a 	mul.w	sl, r2, sl
 801307c:	ea6f 0e0e 	mvn.w	lr, lr
 8013080:	fa1f f888 	uxth.w	r8, r8
 8013084:	fa5f fe8e 	uxtb.w	lr, lr
 8013088:	fb08 aa04 	mla	sl, r8, r4, sl
 801308c:	7834      	ldrb	r4, [r6, #0]
 801308e:	fb19 f90e 	smulbb	r9, r9, lr
 8013092:	fb00 aa04 	mla	sl, r0, r4, sl
 8013096:	781c      	ldrb	r4, [r3, #0]
 8013098:	fb0b a404 	mla	r4, fp, r4, sl
 801309c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80130a0:	fb04 990c 	mla	r9, r4, ip, r9
 80130a4:	fa1f f989 	uxth.w	r9, r9
 80130a8:	f109 0401 	add.w	r4, r9, #1
 80130ac:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80130b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80130b4:	f881 9000 	strb.w	r9, [r1]
 80130b8:	f895 9001 	ldrb.w	r9, [r5, #1]
 80130bc:	787c      	ldrb	r4, [r7, #1]
 80130be:	fb02 f909 	mul.w	r9, r2, r9
 80130c2:	fb08 9904 	mla	r9, r8, r4, r9
 80130c6:	7874      	ldrb	r4, [r6, #1]
 80130c8:	fb00 9904 	mla	r9, r0, r4, r9
 80130cc:	785c      	ldrb	r4, [r3, #1]
 80130ce:	fb0b 9404 	mla	r4, fp, r4, r9
 80130d2:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80130d6:	9c02      	ldr	r4, [sp, #8]
 80130d8:	fb14 f90e 	smulbb	r9, r4, lr
 80130dc:	fb0a 940c 	mla	r4, sl, ip, r9
 80130e0:	b2a4      	uxth	r4, r4
 80130e2:	f104 0901 	add.w	r9, r4, #1
 80130e6:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80130ea:	1224      	asrs	r4, r4, #8
 80130ec:	704c      	strb	r4, [r1, #1]
 80130ee:	78ad      	ldrb	r5, [r5, #2]
 80130f0:	78bc      	ldrb	r4, [r7, #2]
 80130f2:	436a      	muls	r2, r5
 80130f4:	789b      	ldrb	r3, [r3, #2]
 80130f6:	fb08 2204 	mla	r2, r8, r4, r2
 80130fa:	78b4      	ldrb	r4, [r6, #2]
 80130fc:	fb00 2004 	mla	r0, r0, r4, r2
 8013100:	fb0b 0b03 	mla	fp, fp, r3, r0
 8013104:	9b01      	ldr	r3, [sp, #4]
 8013106:	fb13 fe0e 	smulbb	lr, r3, lr
 801310a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801310e:	fb0b ec0c 	mla	ip, fp, ip, lr
 8013112:	fa1f fc8c 	uxth.w	ip, ip
 8013116:	f10c 0e01 	add.w	lr, ip, #1
 801311a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801311e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013122:	f881 c002 	strb.w	ip, [r1, #2]
 8013126:	b007      	add	sp, #28
 8013128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801312c:	af05      	add	r7, sp, #20
 801312e:	e75b      	b.n	8012fe8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8013130:	ad05      	add	r5, sp, #20
 8013132:	462f      	mov	r7, r5
 8013134:	e766      	b.n	8013004 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8013136:	ad05      	add	r5, sp, #20
 8013138:	e764      	b.n	8013004 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801313a:	ae05      	add	r6, sp, #20
 801313c:	e777      	b.n	801302e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801313e:	ab05      	add	r3, sp, #20
 8013140:	461e      	mov	r6, r3
 8013142:	e783      	b.n	801304c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8013144:	ab05      	add	r3, sp, #20
 8013146:	e781      	b.n	801304c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08013148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801314c:	b093      	sub	sp, #76	; 0x4c
 801314e:	9210      	str	r2, [sp, #64]	; 0x40
 8013150:	9309      	str	r3, [sp, #36]	; 0x24
 8013152:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013154:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013158:	9011      	str	r0, [sp, #68]	; 0x44
 801315a:	930e      	str	r3, [sp, #56]	; 0x38
 801315c:	6850      	ldr	r0, [r2, #4]
 801315e:	910d      	str	r1, [sp, #52]	; 0x34
 8013160:	6812      	ldr	r2, [r2, #0]
 8013162:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8013166:	fb00 1303 	mla	r3, r0, r3, r1
 801316a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801316e:	18d3      	adds	r3, r2, r3
 8013170:	930a      	str	r3, [sp, #40]	; 0x28
 8013172:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	930c      	str	r3, [sp, #48]	; 0x30
 8013178:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801317a:	685c      	ldr	r4, [r3, #4]
 801317c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801317e:	3404      	adds	r4, #4
 8013180:	43db      	mvns	r3, r3
 8013182:	b2db      	uxtb	r3, r3
 8013184:	930b      	str	r3, [sp, #44]	; 0x2c
 8013186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013188:	2b00      	cmp	r3, #0
 801318a:	dc03      	bgt.n	8013194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801318c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801318e:	2b00      	cmp	r3, #0
 8013190:	f340 8250 	ble.w	8013634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8013194:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013196:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801319a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801319e:	1e48      	subs	r0, r1, #1
 80131a0:	1e55      	subs	r5, r2, #1
 80131a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f340 80ee 	ble.w	8013386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80131aa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80131ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80131ae:	1436      	asrs	r6, r6, #16
 80131b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80131b4:	d406      	bmi.n	80131c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131b6:	4286      	cmp	r6, r0
 80131b8:	da04      	bge.n	80131c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	db02      	blt.n	80131c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80131be:	42ab      	cmp	r3, r5
 80131c0:	f2c0 80e2 	blt.w	8013388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80131c4:	3601      	adds	r6, #1
 80131c6:	f100 80cf 	bmi.w	8013368 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131ca:	42b1      	cmp	r1, r6
 80131cc:	f2c0 80cc 	blt.w	8013368 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131d0:	3301      	adds	r3, #1
 80131d2:	f100 80c9 	bmi.w	8013368 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131d6:	429a      	cmp	r2, r3
 80131d8:	f2c0 80c6 	blt.w	8013368 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80131dc:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80131e0:	f1bb 0f00 	cmp.w	fp, #0
 80131e4:	f340 80f1 	ble.w	80133ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80131e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80131ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80131ec:	9824      	ldr	r0, [sp, #144]	; 0x90
 80131ee:	141d      	asrs	r5, r3, #16
 80131f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80131f6:	68c7      	ldr	r7, [r0, #12]
 80131f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80131fa:	1418      	asrs	r0, r3, #16
 80131fc:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8013200:	6892      	ldr	r2, [r2, #8]
 8013202:	f100 8137 	bmi.w	8013474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013206:	f102 3cff 	add.w	ip, r2, #4294967295
 801320a:	4560      	cmp	r0, ip
 801320c:	f280 8132 	bge.w	8013474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013210:	2d00      	cmp	r5, #0
 8013212:	f2c0 812f 	blt.w	8013474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013216:	f107 3cff 	add.w	ip, r7, #4294967295
 801321a:	4565      	cmp	r5, ip
 801321c:	f280 812a 	bge.w	8013474 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013220:	b212      	sxth	r2, r2
 8013222:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013224:	fb05 0002 	mla	r0, r5, r2, r0
 8013228:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801322a:	f817 c000 	ldrb.w	ip, [r7, r0]
 801322e:	4405      	add	r5, r0
 8013230:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013234:	eb04 0e0c 	add.w	lr, r4, ip
 8013238:	f1b8 0f00 	cmp.w	r8, #0
 801323c:	f000 810c 	beq.w	8013458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8013240:	786f      	ldrb	r7, [r5, #1]
 8013242:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013246:	4427      	add	r7, r4
 8013248:	2900      	cmp	r1, #0
 801324a:	f000 810d 	beq.w	8013468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801324e:	18a8      	adds	r0, r5, r2
 8013250:	5caa      	ldrb	r2, [r5, r2]
 8013252:	7840      	ldrb	r0, [r0, #1]
 8013254:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013258:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801325c:	4422      	add	r2, r4
 801325e:	4420      	add	r0, r4
 8013260:	fa1f f388 	uxth.w	r3, r8
 8013264:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8013268:	b289      	uxth	r1, r1
 801326a:	f897 c000 	ldrb.w	ip, [r7]
 801326e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013272:	fb03 f901 	mul.w	r9, r3, r1
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801327c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8013280:	eba3 0309 	sub.w	r3, r3, r9
 8013284:	b289      	uxth	r1, r1
 8013286:	b29b      	uxth	r3, r3
 8013288:	eba8 0801 	sub.w	r8, r8, r1
 801328c:	fb03 fc0c 	mul.w	ip, r3, ip
 8013290:	fa1f f888 	uxth.w	r8, r8
 8013294:	930f      	str	r3, [sp, #60]	; 0x3c
 8013296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013298:	fb08 cc0a 	mla	ip, r8, sl, ip
 801329c:	f892 a000 	ldrb.w	sl, [r2]
 80132a0:	fb01 cc0a 	mla	ip, r1, sl, ip
 80132a4:	f890 a000 	ldrb.w	sl, [r0]
 80132a8:	fb09 cc0a 	mla	ip, r9, sl, ip
 80132ac:	f896 a000 	ldrb.w	sl, [r6]
 80132b0:	fb1a fa03 	smulbb	sl, sl, r3
 80132b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80132b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132ba:	fb0c ac05 	mla	ip, ip, r5, sl
 80132be:	fa1f fc8c 	uxth.w	ip, ip
 80132c2:	f10c 0a01 	add.w	sl, ip, #1
 80132c6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80132ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80132ce:	f886 a000 	strb.w	sl, [r6]
 80132d2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80132d6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80132da:	fb03 fc0c 	mul.w	ip, r3, ip
 80132de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132e0:	fb08 cc0a 	mla	ip, r8, sl, ip
 80132e4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80132e8:	fb01 cc0a 	mla	ip, r1, sl, ip
 80132ec:	f890 a001 	ldrb.w	sl, [r0, #1]
 80132f0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80132f4:	f896 a001 	ldrb.w	sl, [r6, #1]
 80132f8:	fb1a fa03 	smulbb	sl, sl, r3
 80132fc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8013300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013302:	fb0c ac05 	mla	ip, ip, r5, sl
 8013306:	fa1f fc8c 	uxth.w	ip, ip
 801330a:	f10c 0a01 	add.w	sl, ip, #1
 801330e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8013312:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013316:	f886 c001 	strb.w	ip, [r6, #1]
 801331a:	78bf      	ldrb	r7, [r7, #2]
 801331c:	f89e c002 	ldrb.w	ip, [lr, #2]
 8013320:	437b      	muls	r3, r7
 8013322:	fb08 330c 	mla	r3, r8, ip, r3
 8013326:	f892 c002 	ldrb.w	ip, [r2, #2]
 801332a:	7882      	ldrb	r2, [r0, #2]
 801332c:	fb01 310c 	mla	r1, r1, ip, r3
 8013330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013332:	fb09 1902 	mla	r9, r9, r2, r1
 8013336:	78b1      	ldrb	r1, [r6, #2]
 8013338:	fb11 f103 	smulbb	r1, r1, r3
 801333c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013340:	fb09 1505 	mla	r5, r9, r5, r1
 8013344:	b2ad      	uxth	r5, r5
 8013346:	1c6b      	adds	r3, r5, #1
 8013348:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801334c:	122d      	asrs	r5, r5, #8
 801334e:	70b5      	strb	r5, [r6, #2]
 8013350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013352:	3603      	adds	r6, #3
 8013354:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013356:	f10b 3bff 	add.w	fp, fp, #4294967295
 801335a:	4413      	add	r3, r2
 801335c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801335e:	931d      	str	r3, [sp, #116]	; 0x74
 8013360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013362:	4413      	add	r3, r2
 8013364:	931e      	str	r3, [sp, #120]	; 0x78
 8013366:	e73b      	b.n	80131e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8013368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801336a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801336c:	4433      	add	r3, r6
 801336e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013370:	931d      	str	r3, [sp, #116]	; 0x74
 8013372:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013374:	4433      	add	r3, r6
 8013376:	931e      	str	r3, [sp, #120]	; 0x78
 8013378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801337a:	3b01      	subs	r3, #1
 801337c:	9309      	str	r3, [sp, #36]	; 0x24
 801337e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013380:	3303      	adds	r3, #3
 8013382:	930a      	str	r3, [sp, #40]	; 0x28
 8013384:	e70d      	b.n	80131a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8013386:	d028      	beq.n	80133da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8013388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801338a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801338c:	3b01      	subs	r3, #1
 801338e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8013390:	fb00 5003 	mla	r0, r0, r3, r5
 8013394:	1400      	asrs	r0, r0, #16
 8013396:	f53f af21 	bmi.w	80131dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801339a:	3901      	subs	r1, #1
 801339c:	4288      	cmp	r0, r1
 801339e:	f6bf af1d 	bge.w	80131dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80133a2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80133a4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80133a6:	fb01 0303 	mla	r3, r1, r3, r0
 80133aa:	141b      	asrs	r3, r3, #16
 80133ac:	f53f af16 	bmi.w	80131dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80133b0:	3a01      	subs	r2, #1
 80133b2:	4293      	cmp	r3, r2
 80133b4:	f6bf af12 	bge.w	80131dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80133b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80133be:	1cdf      	adds	r7, r3, #3
 80133c0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80133c4:	f1b9 0f00 	cmp.w	r9, #0
 80133c8:	dc73      	bgt.n	80134b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80133ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80133d6:	441a      	add	r2, r3
 80133d8:	920a      	str	r2, [sp, #40]	; 0x28
 80133da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133dc:	2b00      	cmp	r3, #0
 80133de:	f340 8129 	ble.w	8013634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80133e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80133e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80133e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80133ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80133f0:	eef0 6a62 	vmov.f32	s13, s5
 80133f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80133fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013400:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8013404:	eef0 6a43 	vmov.f32	s13, s6
 8013408:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801340c:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8013410:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013414:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013418:	ee77 2a62 	vsub.f32	s5, s14, s5
 801341c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013420:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013424:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013428:	ee12 2a90 	vmov	r2, s5
 801342c:	eef0 2a47 	vmov.f32	s5, s14
 8013430:	fb92 f3f3 	sdiv	r3, r2, r3
 8013434:	ee13 2a10 	vmov	r2, s6
 8013438:	931f      	str	r3, [sp, #124]	; 0x7c
 801343a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801343c:	eeb0 3a67 	vmov.f32	s6, s15
 8013440:	fb92 f3f3 	sdiv	r3, r2, r3
 8013444:	9320      	str	r3, [sp, #128]	; 0x80
 8013446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801344a:	3b01      	subs	r3, #1
 801344c:	930d      	str	r3, [sp, #52]	; 0x34
 801344e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013450:	bf08      	it	eq
 8013452:	4613      	moveq	r3, r2
 8013454:	9309      	str	r3, [sp, #36]	; 0x24
 8013456:	e696      	b.n	8013186 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8013458:	b149      	cbz	r1, 801346e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801345a:	5caa      	ldrb	r2, [r5, r2]
 801345c:	4670      	mov	r0, lr
 801345e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013462:	4422      	add	r2, r4
 8013464:	4677      	mov	r7, lr
 8013466:	e6fb      	b.n	8013260 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8013468:	4670      	mov	r0, lr
 801346a:	4672      	mov	r2, lr
 801346c:	e6f8      	b.n	8013260 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801346e:	4670      	mov	r0, lr
 8013470:	4672      	mov	r2, lr
 8013472:	e7f7      	b.n	8013464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8013474:	f110 0c01 	adds.w	ip, r0, #1
 8013478:	f53f af6a 	bmi.w	8013350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801347c:	4562      	cmp	r2, ip
 801347e:	f6ff af67 	blt.w	8013350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013482:	f115 0c01 	adds.w	ip, r5, #1
 8013486:	f53f af63 	bmi.w	8013350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801348a:	4567      	cmp	r7, ip
 801348c:	f6ff af60 	blt.w	8013350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8013490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013492:	b23f      	sxth	r7, r7
 8013494:	b212      	sxth	r2, r2
 8013496:	9002      	str	r0, [sp, #8]
 8013498:	9701      	str	r7, [sp, #4]
 801349a:	9200      	str	r2, [sp, #0]
 801349c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801349e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134a0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80134a4:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80134a8:	4623      	mov	r3, r4
 80134aa:	4631      	mov	r1, r6
 80134ac:	f7ff fd69 	bl	8012f82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80134b0:	e74e      	b.n	8013350 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80134b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80134b4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80134b6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80134ba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80134bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80134be:	1400      	asrs	r0, r0, #16
 80134c0:	142d      	asrs	r5, r5, #16
 80134c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80134c8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80134cc:	fb02 5000 	mla	r0, r2, r0, r5
 80134d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134d2:	f815 e000 	ldrb.w	lr, [r5, r0]
 80134d6:	eb05 0c00 	add.w	ip, r5, r0
 80134da:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80134de:	eb04 060e 	add.w	r6, r4, lr
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	f000 8097 	beq.w	8013616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80134e8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80134ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134f0:	4425      	add	r5, r4
 80134f2:	2900      	cmp	r1, #0
 80134f4:	f000 8098 	beq.w	8013628 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80134f8:	eb0c 0002 	add.w	r0, ip, r2
 80134fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013500:	7840      	ldrb	r0, [r0, #1]
 8013502:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801350a:	4422      	add	r2, r4
 801350c:	4420      	add	r0, r4
 801350e:	b29b      	uxth	r3, r3
 8013510:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8013514:	b289      	uxth	r1, r1
 8013516:	f895 e000 	ldrb.w	lr, [r5]
 801351a:	3703      	adds	r7, #3
 801351c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013520:	fb03 f801 	mul.w	r8, r3, r1
 8013524:	011b      	lsls	r3, r3, #4
 8013526:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801352a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801352e:	eba3 0308 	sub.w	r3, r3, r8
 8013532:	b289      	uxth	r1, r1
 8013534:	b29b      	uxth	r3, r3
 8013536:	ebac 0c01 	sub.w	ip, ip, r1
 801353a:	fb03 fe0e 	mul.w	lr, r3, lr
 801353e:	fa1f fc8c 	uxth.w	ip, ip
 8013542:	930f      	str	r3, [sp, #60]	; 0x3c
 8013544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013546:	fb0c ee0b 	mla	lr, ip, fp, lr
 801354a:	f892 b000 	ldrb.w	fp, [r2]
 801354e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013552:	f890 b000 	ldrb.w	fp, [r0]
 8013556:	fb08 ee0b 	mla	lr, r8, fp, lr
 801355a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801355e:	fb1b fb03 	smulbb	fp, fp, r3
 8013562:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8013566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013568:	fb0e be0a 	mla	lr, lr, sl, fp
 801356c:	fa1f fe8e 	uxth.w	lr, lr
 8013570:	f10e 0b01 	add.w	fp, lr, #1
 8013574:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8013578:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801357c:	f807 ec06 	strb.w	lr, [r7, #-6]
 8013580:	f895 e001 	ldrb.w	lr, [r5, #1]
 8013584:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013588:	fb03 fe0e 	mul.w	lr, r3, lr
 801358c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801358e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013592:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013596:	fb01 ee0b 	mla	lr, r1, fp, lr
 801359a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801359e:	fb08 ee0b 	mla	lr, r8, fp, lr
 80135a2:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80135a6:	fb1b fb03 	smulbb	fp, fp, r3
 80135aa:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80135ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135b0:	fb0e be0a 	mla	lr, lr, sl, fp
 80135b4:	fa1f fe8e 	uxth.w	lr, lr
 80135b8:	f10e 0b01 	add.w	fp, lr, #1
 80135bc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80135c0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80135c4:	f807 ec05 	strb.w	lr, [r7, #-5]
 80135c8:	78ad      	ldrb	r5, [r5, #2]
 80135ca:	78b6      	ldrb	r6, [r6, #2]
 80135cc:	436b      	muls	r3, r5
 80135ce:	7895      	ldrb	r5, [r2, #2]
 80135d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80135d2:	fb0c 3306 	mla	r3, ip, r6, r3
 80135d6:	fb01 3305 	mla	r3, r1, r5, r3
 80135da:	7885      	ldrb	r5, [r0, #2]
 80135dc:	fb08 3805 	mla	r8, r8, r5, r3
 80135e0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80135e4:	fb13 f302 	smulbb	r3, r3, r2
 80135e8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80135ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80135ee:	fb08 380a 	mla	r8, r8, sl, r3
 80135f2:	fa1f f888 	uxth.w	r8, r8
 80135f6:	f108 0301 	add.w	r3, r8, #1
 80135fa:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80135fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013600:	4413      	add	r3, r2
 8013602:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013604:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013608:	931d      	str	r3, [sp, #116]	; 0x74
 801360a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801360c:	f807 8c04 	strb.w	r8, [r7, #-4]
 8013610:	4413      	add	r3, r2
 8013612:	931e      	str	r3, [sp, #120]	; 0x78
 8013614:	e6d6      	b.n	80133c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8013616:	b151      	cbz	r1, 801362e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8013618:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801361c:	4630      	mov	r0, r6
 801361e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013622:	4422      	add	r2, r4
 8013624:	4635      	mov	r5, r6
 8013626:	e772      	b.n	801350e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8013628:	4630      	mov	r0, r6
 801362a:	4632      	mov	r2, r6
 801362c:	e76f      	b.n	801350e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801362e:	4630      	mov	r0, r6
 8013630:	4632      	mov	r2, r6
 8013632:	e7f7      	b.n	8013624 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8013634:	b013      	add	sp, #76	; 0x4c
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801363a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801363a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801363e:	784c      	ldrb	r4, [r1, #1]
 8013640:	f891 a002 	ldrb.w	sl, [r1, #2]
 8013644:	0224      	lsls	r4, r4, #8
 8013646:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801364a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801364e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013652:	f891 a000 	ldrb.w	sl, [r1]
 8013656:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801365a:	ea44 040a 	orr.w	r4, r4, sl
 801365e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8013662:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8013666:	9401      	str	r4, [sp, #4]
 8013668:	fb05 c70e 	mla	r7, r5, lr, ip
 801366c:	2d00      	cmp	r5, #0
 801366e:	eb02 0807 	add.w	r8, r2, r7
 8013672:	db72      	blt.n	801375a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013674:	45a9      	cmp	r9, r5
 8013676:	dd70      	ble.n	801375a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8013678:	f1bc 0f00 	cmp.w	ip, #0
 801367c:	db6b      	blt.n	8013756 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801367e:	45e6      	cmp	lr, ip
 8013680:	dd69      	ble.n	8013756 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8013682:	5dd7      	ldrb	r7, [r2, r7]
 8013684:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013688:	441f      	add	r7, r3
 801368a:	f11c 0201 	adds.w	r2, ip, #1
 801368e:	d467      	bmi.n	8013760 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013690:	4596      	cmp	lr, r2
 8013692:	dd65      	ble.n	8013760 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013694:	2800      	cmp	r0, #0
 8013696:	d063      	beq.n	8013760 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8013698:	f898 4001 	ldrb.w	r4, [r8, #1]
 801369c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80136a0:	441c      	add	r4, r3
 80136a2:	3501      	adds	r5, #1
 80136a4:	d460      	bmi.n	8013768 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80136a6:	45a9      	cmp	r9, r5
 80136a8:	dd5e      	ble.n	8013768 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80136aa:	2e00      	cmp	r6, #0
 80136ac:	d05c      	beq.n	8013768 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80136ae:	f1bc 0f00 	cmp.w	ip, #0
 80136b2:	db57      	blt.n	8013764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80136b4:	45e6      	cmp	lr, ip
 80136b6:	dd55      	ble.n	8013764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80136b8:	f818 500e 	ldrb.w	r5, [r8, lr]
 80136bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136c0:	441d      	add	r5, r3
 80136c2:	f11c 0201 	adds.w	r2, ip, #1
 80136c6:	d452      	bmi.n	801376e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136c8:	4596      	cmp	lr, r2
 80136ca:	dd50      	ble.n	801376e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d04e      	beq.n	801376e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80136d0:	44c6      	add	lr, r8
 80136d2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80136d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80136da:	4413      	add	r3, r2
 80136dc:	b280      	uxth	r0, r0
 80136de:	f897 8000 	ldrb.w	r8, [r7]
 80136e2:	b2b2      	uxth	r2, r6
 80136e4:	fb00 f602 	mul.w	r6, r0, r2
 80136e8:	0100      	lsls	r0, r0, #4
 80136ea:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80136ee:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80136f2:	1b80      	subs	r0, r0, r6
 80136f4:	fa1f fc82 	uxth.w	ip, r2
 80136f8:	b282      	uxth	r2, r0
 80136fa:	7820      	ldrb	r0, [r4, #0]
 80136fc:	ebae 0e0c 	sub.w	lr, lr, ip
 8013700:	4350      	muls	r0, r2
 8013702:	fa1f fe8e 	uxth.w	lr, lr
 8013706:	fb0e 0808 	mla	r8, lr, r8, r0
 801370a:	7828      	ldrb	r0, [r5, #0]
 801370c:	fb0c 8800 	mla	r8, ip, r0, r8
 8013710:	7818      	ldrb	r0, [r3, #0]
 8013712:	fb06 8000 	mla	r0, r6, r0, r8
 8013716:	1200      	asrs	r0, r0, #8
 8013718:	7008      	strb	r0, [r1, #0]
 801371a:	7860      	ldrb	r0, [r4, #1]
 801371c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8013720:	4350      	muls	r0, r2
 8013722:	fb0e 0808 	mla	r8, lr, r8, r0
 8013726:	7868      	ldrb	r0, [r5, #1]
 8013728:	fb0c 8800 	mla	r8, ip, r0, r8
 801372c:	7858      	ldrb	r0, [r3, #1]
 801372e:	fb06 8000 	mla	r0, r6, r0, r8
 8013732:	1200      	asrs	r0, r0, #8
 8013734:	7048      	strb	r0, [r1, #1]
 8013736:	78a0      	ldrb	r0, [r4, #2]
 8013738:	78bf      	ldrb	r7, [r7, #2]
 801373a:	4350      	muls	r0, r2
 801373c:	78aa      	ldrb	r2, [r5, #2]
 801373e:	fb0e 0007 	mla	r0, lr, r7, r0
 8013742:	fb0c 0c02 	mla	ip, ip, r2, r0
 8013746:	789a      	ldrb	r2, [r3, #2]
 8013748:	fb06 c202 	mla	r2, r6, r2, ip
 801374c:	1212      	asrs	r2, r2, #8
 801374e:	708a      	strb	r2, [r1, #2]
 8013750:	b002      	add	sp, #8
 8013752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013756:	af01      	add	r7, sp, #4
 8013758:	e797      	b.n	801368a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801375a:	ac01      	add	r4, sp, #4
 801375c:	4627      	mov	r7, r4
 801375e:	e7a0      	b.n	80136a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013760:	ac01      	add	r4, sp, #4
 8013762:	e79e      	b.n	80136a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8013764:	ad01      	add	r5, sp, #4
 8013766:	e7ac      	b.n	80136c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8013768:	ab01      	add	r3, sp, #4
 801376a:	461d      	mov	r5, r3
 801376c:	e7b6      	b.n	80136dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801376e:	ab01      	add	r3, sp, #4
 8013770:	e7b4      	b.n	80136dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08013772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013776:	b08d      	sub	sp, #52	; 0x34
 8013778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801377c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8013780:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013782:	900b      	str	r0, [sp, #44]	; 0x2c
 8013784:	9306      	str	r3, [sp, #24]
 8013786:	6850      	ldr	r0, [r2, #4]
 8013788:	6812      	ldr	r2, [r2, #0]
 801378a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801378c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8013790:	fb00 1303 	mla	r3, r0, r3, r1
 8013794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013798:	18d3      	adds	r3, r2, r3
 801379a:	9307      	str	r3, [sp, #28]
 801379c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	9308      	str	r3, [sp, #32]
 80137a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80137a4:	685d      	ldr	r5, [r3, #4]
 80137a6:	3504      	adds	r5, #4
 80137a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	dc03      	bgt.n	80137b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80137ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	f340 81e6 	ble.w	8013b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80137b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80137b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80137bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80137c0:	1e48      	subs	r0, r1, #1
 80137c2:	1e56      	subs	r6, r2, #1
 80137c4:	9b06      	ldr	r3, [sp, #24]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f340 80bd 	ble.w	8013946 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80137cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80137ce:	1427      	asrs	r7, r4, #16
 80137d0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80137d4:	d406      	bmi.n	80137e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137d6:	4287      	cmp	r7, r0
 80137d8:	da04      	bge.n	80137e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	db02      	blt.n	80137e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80137de:	42b3      	cmp	r3, r6
 80137e0:	f2c0 80b2 	blt.w	8013948 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80137e4:	3701      	adds	r7, #1
 80137e6:	f100 80a1 	bmi.w	801392c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137ea:	42b9      	cmp	r1, r7
 80137ec:	f2c0 809e 	blt.w	801392c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137f0:	3301      	adds	r3, #1
 80137f2:	f100 809b 	bmi.w	801392c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137f6:	429a      	cmp	r2, r3
 80137f8:	f2c0 8098 	blt.w	801392c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80137fc:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8013800:	f1bb 0f00 	cmp.w	fp, #0
 8013804:	f340 80bf 	ble.w	8013986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8013808:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801380a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801380c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801380e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013812:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8013816:	1420      	asrs	r0, r4, #16
 8013818:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801381a:	ea4f 4723 	mov.w	r7, r3, asr #16
 801381e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8013822:	6892      	ldr	r2, [r2, #8]
 8013824:	f100 8103 	bmi.w	8013a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013828:	f102 3eff 	add.w	lr, r2, #4294967295
 801382c:	4570      	cmp	r0, lr
 801382e:	f280 80fe 	bge.w	8013a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013832:	2f00      	cmp	r7, #0
 8013834:	f2c0 80fb 	blt.w	8013a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013838:	f10c 3eff 	add.w	lr, ip, #4294967295
 801383c:	4577      	cmp	r7, lr
 801383e:	f280 80f6 	bge.w	8013a2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8013842:	b212      	sxth	r2, r2
 8013844:	fb07 0002 	mla	r0, r7, r2, r0
 8013848:	9f08      	ldr	r7, [sp, #32]
 801384a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801384e:	eb07 0e00 	add.w	lr, r7, r0
 8013852:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013856:	eb05 0c08 	add.w	ip, r5, r8
 801385a:	2b00      	cmp	r3, #0
 801385c:	f000 80d8 	beq.w	8013a10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013860:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8013864:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013868:	442f      	add	r7, r5
 801386a:	2900      	cmp	r1, #0
 801386c:	f000 80d9 	beq.w	8013a22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013870:	eb0e 0002 	add.w	r0, lr, r2
 8013874:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013878:	7840      	ldrb	r0, [r0, #1]
 801387a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801387e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013882:	442a      	add	r2, r5
 8013884:	4428      	add	r0, r5
 8013886:	b29b      	uxth	r3, r3
 8013888:	f815 a008 	ldrb.w	sl, [r5, r8]
 801388c:	b289      	uxth	r1, r1
 801388e:	f897 8000 	ldrb.w	r8, [r7]
 8013892:	fb03 f901 	mul.w	r9, r3, r1
 8013896:	011b      	lsls	r3, r3, #4
 8013898:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801389c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80138a0:	eba3 0309 	sub.w	r3, r3, r9
 80138a4:	b289      	uxth	r1, r1
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	ebae 0e01 	sub.w	lr, lr, r1
 80138ac:	fb03 f808 	mul.w	r8, r3, r8
 80138b0:	fa1f fe8e 	uxth.w	lr, lr
 80138b4:	fb0e 880a 	mla	r8, lr, sl, r8
 80138b8:	f892 a000 	ldrb.w	sl, [r2]
 80138bc:	fb01 880a 	mla	r8, r1, sl, r8
 80138c0:	f890 a000 	ldrb.w	sl, [r0]
 80138c4:	fb09 880a 	mla	r8, r9, sl, r8
 80138c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80138cc:	f886 8000 	strb.w	r8, [r6]
 80138d0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80138d4:	f89c a001 	ldrb.w	sl, [ip, #1]
 80138d8:	fb03 f808 	mul.w	r8, r3, r8
 80138dc:	fb0e 880a 	mla	r8, lr, sl, r8
 80138e0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80138e4:	fb01 880a 	mla	r8, r1, sl, r8
 80138e8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80138ec:	fb09 880a 	mla	r8, r9, sl, r8
 80138f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80138f4:	f886 8001 	strb.w	r8, [r6, #1]
 80138f8:	78bf      	ldrb	r7, [r7, #2]
 80138fa:	f89c c002 	ldrb.w	ip, [ip, #2]
 80138fe:	437b      	muls	r3, r7
 8013900:	7892      	ldrb	r2, [r2, #2]
 8013902:	fb0e 330c 	mla	r3, lr, ip, r3
 8013906:	fb01 3102 	mla	r1, r1, r2, r3
 801390a:	7882      	ldrb	r2, [r0, #2]
 801390c:	fb09 1902 	mla	r9, r9, r2, r1
 8013910:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013914:	f886 9002 	strb.w	r9, [r6, #2]
 8013918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801391a:	3603      	adds	r6, #3
 801391c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801391e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013922:	441c      	add	r4, r3
 8013924:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013926:	4413      	add	r3, r2
 8013928:	9318      	str	r3, [sp, #96]	; 0x60
 801392a:	e769      	b.n	8013800 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801392c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801392e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8013930:	441c      	add	r4, r3
 8013932:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013934:	443b      	add	r3, r7
 8013936:	9318      	str	r3, [sp, #96]	; 0x60
 8013938:	9b06      	ldr	r3, [sp, #24]
 801393a:	3b01      	subs	r3, #1
 801393c:	9306      	str	r3, [sp, #24]
 801393e:	9b07      	ldr	r3, [sp, #28]
 8013940:	3303      	adds	r3, #3
 8013942:	9307      	str	r3, [sp, #28]
 8013944:	e73e      	b.n	80137c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8013946:	d026      	beq.n	8013996 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8013948:	9b06      	ldr	r3, [sp, #24]
 801394a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801394c:	3b01      	subs	r3, #1
 801394e:	fb00 4003 	mla	r0, r0, r3, r4
 8013952:	1400      	asrs	r0, r0, #16
 8013954:	f53f af52 	bmi.w	80137fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013958:	3901      	subs	r1, #1
 801395a:	4288      	cmp	r0, r1
 801395c:	f6bf af4e 	bge.w	80137fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013960:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013962:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013964:	fb01 0303 	mla	r3, r1, r3, r0
 8013968:	141b      	asrs	r3, r3, #16
 801396a:	f53f af47 	bmi.w	80137fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801396e:	3a01      	subs	r2, #1
 8013970:	4293      	cmp	r3, r2
 8013972:	f6bf af43 	bge.w	80137fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8013976:	9b07      	ldr	r3, [sp, #28]
 8013978:	f8dd a018 	ldr.w	sl, [sp, #24]
 801397c:	f103 0803 	add.w	r8, r3, #3
 8013980:	f1ba 0f00 	cmp.w	sl, #0
 8013984:	dc71      	bgt.n	8013a6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8013986:	9b06      	ldr	r3, [sp, #24]
 8013988:	9a07      	ldr	r2, [sp, #28]
 801398a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801398e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013992:	441a      	add	r2, r3
 8013994:	9207      	str	r2, [sp, #28]
 8013996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013998:	2b00      	cmp	r3, #0
 801399a:	f340 80f2 	ble.w	8013b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801399e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80139a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80139a8:	eeb0 6a62 	vmov.f32	s12, s5
 80139ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139b8:	ee16 4a10 	vmov	r4, s12
 80139bc:	eeb0 6a43 	vmov.f32	s12, s6
 80139c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139c4:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 80139c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80139d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80139dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80139e0:	ee12 2a90 	vmov	r2, s5
 80139e4:	eef0 2a47 	vmov.f32	s5, s14
 80139e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139ec:	ee13 2a10 	vmov	r2, s6
 80139f0:	9319      	str	r3, [sp, #100]	; 0x64
 80139f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80139f4:	eeb0 3a67 	vmov.f32	s6, s15
 80139f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80139fc:	931a      	str	r3, [sp, #104]	; 0x68
 80139fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a02:	3b01      	subs	r3, #1
 8013a04:	9309      	str	r3, [sp, #36]	; 0x24
 8013a06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013a08:	bf08      	it	eq
 8013a0a:	4613      	moveq	r3, r2
 8013a0c:	9306      	str	r3, [sp, #24]
 8013a0e:	e6cb      	b.n	80137a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8013a10:	b151      	cbz	r1, 8013a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8013a12:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8013a16:	4660      	mov	r0, ip
 8013a18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013a1c:	442a      	add	r2, r5
 8013a1e:	4667      	mov	r7, ip
 8013a20:	e731      	b.n	8013886 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8013a22:	4660      	mov	r0, ip
 8013a24:	4662      	mov	r2, ip
 8013a26:	e72e      	b.n	8013886 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8013a28:	4660      	mov	r0, ip
 8013a2a:	4662      	mov	r2, ip
 8013a2c:	e7f7      	b.n	8013a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8013a2e:	f110 0e01 	adds.w	lr, r0, #1
 8013a32:	f53f af71 	bmi.w	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a36:	4572      	cmp	r2, lr
 8013a38:	f6ff af6e 	blt.w	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a3c:	f117 0e01 	adds.w	lr, r7, #1
 8013a40:	f53f af6a 	bmi.w	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a44:	45f4      	cmp	ip, lr
 8013a46:	f6ff af67 	blt.w	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a4a:	b212      	sxth	r2, r2
 8013a4c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8013a50:	fa0f f38c 	sxth.w	r3, ip
 8013a54:	9200      	str	r2, [sp, #0]
 8013a56:	4631      	mov	r1, r6
 8013a58:	9a08      	ldr	r2, [sp, #32]
 8013a5a:	9301      	str	r3, [sp, #4]
 8013a5c:	462b      	mov	r3, r5
 8013a5e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8013a62:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013a64:	f7ff fde9 	bl	801363a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8013a68:	e756      	b.n	8013918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8013a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a6c:	1426      	asrs	r6, r4, #16
 8013a6e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013a70:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8013a74:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013a78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a7a:	1400      	asrs	r0, r0, #16
 8013a7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8013a80:	fb02 6000 	mla	r0, r2, r0, r6
 8013a84:	9e08      	ldr	r6, [sp, #32]
 8013a86:	f816 e000 	ldrb.w	lr, [r6, r0]
 8013a8a:	eb06 0c00 	add.w	ip, r6, r0
 8013a8e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8013a92:	eb05 070e 	add.w	r7, r5, lr
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d064      	beq.n	8013b64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8013a9a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8013a9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013aa2:	442e      	add	r6, r5
 8013aa4:	2900      	cmp	r1, #0
 8013aa6:	d066      	beq.n	8013b76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8013aa8:	eb0c 0002 	add.w	r0, ip, r2
 8013aac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013ab0:	7840      	ldrb	r0, [r0, #1]
 8013ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ab6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013aba:	442a      	add	r2, r5
 8013abc:	4428      	add	r0, r5
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8013ac4:	b289      	uxth	r1, r1
 8013ac6:	f896 e000 	ldrb.w	lr, [r6]
 8013aca:	f108 0803 	add.w	r8, r8, #3
 8013ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ad2:	fb03 f901 	mul.w	r9, r3, r1
 8013ad6:	011b      	lsls	r3, r3, #4
 8013ad8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013adc:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8013ae0:	eba3 0309 	sub.w	r3, r3, r9
 8013ae4:	b289      	uxth	r1, r1
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	ebac 0c01 	sub.w	ip, ip, r1
 8013aec:	fb03 fe0e 	mul.w	lr, r3, lr
 8013af0:	fa1f fc8c 	uxth.w	ip, ip
 8013af4:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013af8:	f892 b000 	ldrb.w	fp, [r2]
 8013afc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013b00:	f890 b000 	ldrb.w	fp, [r0]
 8013b04:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013b08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013b0c:	f808 ec06 	strb.w	lr, [r8, #-6]
 8013b10:	f896 e001 	ldrb.w	lr, [r6, #1]
 8013b14:	f897 b001 	ldrb.w	fp, [r7, #1]
 8013b18:	fb03 fe0e 	mul.w	lr, r3, lr
 8013b1c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8013b20:	f892 b001 	ldrb.w	fp, [r2, #1]
 8013b24:	fb01 ee0b 	mla	lr, r1, fp, lr
 8013b28:	f890 b001 	ldrb.w	fp, [r0, #1]
 8013b2c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8013b30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8013b34:	f808 ec05 	strb.w	lr, [r8, #-5]
 8013b38:	78b6      	ldrb	r6, [r6, #2]
 8013b3a:	78bf      	ldrb	r7, [r7, #2]
 8013b3c:	4373      	muls	r3, r6
 8013b3e:	7896      	ldrb	r6, [r2, #2]
 8013b40:	7882      	ldrb	r2, [r0, #2]
 8013b42:	fb0c 3307 	mla	r3, ip, r7, r3
 8013b46:	fb01 3306 	mla	r3, r1, r6, r3
 8013b4a:	fb09 3902 	mla	r9, r9, r2, r3
 8013b4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b52:	441c      	add	r4, r3
 8013b54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013b56:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013b5a:	4413      	add	r3, r2
 8013b5c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8013b60:	9318      	str	r3, [sp, #96]	; 0x60
 8013b62:	e70d      	b.n	8013980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8013b64:	b151      	cbz	r1, 8013b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8013b66:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013b6a:	4638      	mov	r0, r7
 8013b6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013b70:	442a      	add	r2, r5
 8013b72:	463e      	mov	r6, r7
 8013b74:	e7a3      	b.n	8013abe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b76:	4638      	mov	r0, r7
 8013b78:	463a      	mov	r2, r7
 8013b7a:	e7a0      	b.n	8013abe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	463a      	mov	r2, r7
 8013b80:	e7f7      	b.n	8013b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8013b82:	b00d      	add	sp, #52	; 0x34
 8013b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8013b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8013b90:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8013b9a:	fb05 700c 	mla	r0, r5, ip, r7
 8013b9e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8013ba2:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8013ba6:	eb02 0800 	add.w	r8, r2, r0
 8013baa:	f2c0 8118 	blt.w	8013dde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013bae:	45a9      	cmp	r9, r5
 8013bb0:	f340 8115 	ble.w	8013dde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8013bb4:	2f00      	cmp	r7, #0
 8013bb6:	f2c0 8110 	blt.w	8013dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013bba:	45bc      	cmp	ip, r7
 8013bbc:	f340 810d 	ble.w	8013dda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8013bc0:	5c12      	ldrb	r2, [r2, r0]
 8013bc2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013bc6:	1c7a      	adds	r2, r7, #1
 8013bc8:	f100 810c 	bmi.w	8013de4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013bcc:	4594      	cmp	ip, r2
 8013bce:	f340 8109 	ble.w	8013de4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8013bd2:	2c00      	cmp	r4, #0
 8013bd4:	f000 8108 	beq.w	8013de8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8013bd8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013bdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013be0:	3501      	adds	r5, #1
 8013be2:	f100 8105 	bmi.w	8013df0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013be6:	45a9      	cmp	r9, r5
 8013be8:	f340 8102 	ble.w	8013df0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8013bec:	f1be 0f00 	cmp.w	lr, #0
 8013bf0:	f000 8101 	beq.w	8013df6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8013bf4:	2f00      	cmp	r7, #0
 8013bf6:	f2c0 80f9 	blt.w	8013dec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013bfa:	45bc      	cmp	ip, r7
 8013bfc:	f340 80f6 	ble.w	8013dec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8013c00:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013c04:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013c08:	3701      	adds	r7, #1
 8013c0a:	f100 80f7 	bmi.w	8013dfc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013c0e:	45bc      	cmp	ip, r7
 8013c10:	f340 80f4 	ble.w	8013dfc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8013c14:	2c00      	cmp	r4, #0
 8013c16:	f000 80f3 	beq.w	8013e00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8013c1a:	44c4      	add	ip, r8
 8013c1c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8013c20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c24:	fa1f fc84 	uxth.w	ip, r4
 8013c28:	fa1f f48e 	uxth.w	r4, lr
 8013c2c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8013c30:	fb04 fe0c 	mul.w	lr, r4, ip
 8013c34:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8013c38:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8013c3c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8013c40:	ebac 070e 	sub.w	r7, ip, lr
 8013c44:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8013c48:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8013c4c:	b2a4      	uxth	r4, r4
 8013c4e:	b2bf      	uxth	r7, r7
 8013c50:	1b1b      	subs	r3, r3, r4
 8013c52:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8013c56:	fb07 fc0a 	mul.w	ip, r7, sl
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8013c60:	9300      	str	r3, [sp, #0]
 8013c62:	fb04 cc09 	mla	ip, r4, r9, ip
 8013c66:	fb0e cc08 	mla	ip, lr, r8, ip
 8013c6a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8013c6e:	9301      	str	r3, [sp, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 80af 	beq.w	8013dd4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8013c76:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8013c7a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013c7e:	fb0b fc0c 	mul.w	ip, fp, ip
 8013c82:	fb0b f606 	mul.w	r6, fp, r6
 8013c86:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8013c8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8013c8e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8013c92:	44dc      	add	ip, fp
 8013c94:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8013c98:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013c9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013ca0:	fb0a fb0b 	mul.w	fp, sl, fp
 8013ca4:	fb0a fa00 	mul.w	sl, sl, r0
 8013ca8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8013cac:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8013cb0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8013cb4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8013cb8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8013cbc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013cc0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8013cc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cc8:	0a36      	lsrs	r6, r6, #8
 8013cca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013cce:	44dc      	add	ip, fp
 8013cd0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8013cd4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8013cd8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8013cdc:	fb09 fb0b 	mul.w	fp, r9, fp
 8013ce0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013ce4:	fb09 f905 	mul.w	r9, r9, r5
 8013ce8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8013cec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8013cf0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8013cf4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013cf8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013cfc:	fb0c fc07 	mul.w	ip, ip, r7
 8013d00:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8013d04:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8013d08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8013d0c:	4458      	add	r0, fp
 8013d0e:	fb08 f505 	mul.w	r5, r8, r5
 8013d12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8013d16:	fb08 f802 	mul.w	r8, r8, r2
 8013d1a:	0a00      	lsrs	r0, r0, #8
 8013d1c:	0a2a      	lsrs	r2, r5, #8
 8013d1e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8013d22:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8013d26:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8013d2a:	4415      	add	r5, r2
 8013d2c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8013d30:	0a2d      	lsrs	r5, r5, #8
 8013d32:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d36:	9a00      	ldr	r2, [sp, #0]
 8013d38:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8013d3c:	fb03 cc02 	mla	ip, r3, r2, ip
 8013d40:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8013d44:	9b01      	ldr	r3, [sp, #4]
 8013d46:	fb05 c50e 	mla	r5, r5, lr, ip
 8013d4a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8013d4e:	fb00 5004 	mla	r0, r0, r4, r5
 8013d52:	0a00      	lsrs	r0, r0, #8
 8013d54:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8013d58:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8013d5c:	4378      	muls	r0, r7
 8013d5e:	fb02 0006 	mla	r0, r2, r6, r0
 8013d62:	fb0e 0e08 	mla	lr, lr, r8, r0
 8013d66:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8013d6a:	fb04 e000 	mla	r0, r4, r0, lr
 8013d6e:	0a00      	lsrs	r0, r0, #8
 8013d70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8013d74:	4328      	orrs	r0, r5
 8013d76:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8013d7a:	b2ad      	uxth	r5, r5
 8013d7c:	b2c4      	uxtb	r4, r0
 8013d7e:	436b      	muls	r3, r5
 8013d80:	fb14 f405 	smulbb	r4, r4, r5
 8013d84:	1c5a      	adds	r2, r3, #1
 8013d86:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8013d8a:	780b      	ldrb	r3, [r1, #0]
 8013d8c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8013d90:	b2d2      	uxtb	r2, r2
 8013d92:	fb03 4302 	mla	r3, r3, r2, r4
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	1c5c      	adds	r4, r3, #1
 8013d9a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013d9e:	784c      	ldrb	r4, [r1, #1]
 8013da0:	fb14 f402 	smulbb	r4, r4, r2
 8013da4:	121b      	asrs	r3, r3, #8
 8013da6:	700b      	strb	r3, [r1, #0]
 8013da8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013dac:	fb03 4305 	mla	r3, r3, r5, r4
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	1c5c      	adds	r4, r3, #1
 8013db4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8013db8:	0c04      	lsrs	r4, r0, #16
 8013dba:	7888      	ldrb	r0, [r1, #2]
 8013dbc:	121b      	asrs	r3, r3, #8
 8013dbe:	fb10 f002 	smulbb	r0, r0, r2
 8013dc2:	704b      	strb	r3, [r1, #1]
 8013dc4:	fb04 0005 	mla	r0, r4, r5, r0
 8013dc8:	b280      	uxth	r0, r0
 8013dca:	1c43      	adds	r3, r0, #1
 8013dcc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8013dd0:	1200      	asrs	r0, r0, #8
 8013dd2:	7088      	strb	r0, [r1, #2]
 8013dd4:	b003      	add	sp, #12
 8013dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dda:	2600      	movs	r6, #0
 8013ddc:	e6f3      	b.n	8013bc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8013dde:	2000      	movs	r0, #0
 8013de0:	4606      	mov	r6, r0
 8013de2:	e6fd      	b.n	8013be0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013de4:	2000      	movs	r0, #0
 8013de6:	e6fb      	b.n	8013be0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013de8:	4620      	mov	r0, r4
 8013dea:	e6f9      	b.n	8013be0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8013dec:	2500      	movs	r5, #0
 8013dee:	e70b      	b.n	8013c08 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8013df0:	2200      	movs	r2, #0
 8013df2:	4615      	mov	r5, r2
 8013df4:	e716      	b.n	8013c24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013df6:	4672      	mov	r2, lr
 8013df8:	4675      	mov	r5, lr
 8013dfa:	e713      	b.n	8013c24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	e711      	b.n	8013c24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8013e00:	4622      	mov	r2, r4
 8013e02:	e70f      	b.n	8013c24 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08013e04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	b09f      	sub	sp, #124	; 0x7c
 8013e0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e0e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013e10:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8013e14:	901d      	str	r0, [sp, #116]	; 0x74
 8013e16:	931c      	str	r3, [sp, #112]	; 0x70
 8013e18:	6850      	ldr	r0, [r2, #4]
 8013e1a:	9119      	str	r1, [sp, #100]	; 0x64
 8013e1c:	6812      	ldr	r2, [r2, #0]
 8013e1e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013e20:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8013e24:	fb00 1303 	mla	r3, r0, r3, r1
 8013e28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e2c:	18d3      	adds	r3, r2, r3
 8013e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8013e30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	9312      	str	r3, [sp, #72]	; 0x48
 8013e36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e38:	685e      	ldr	r6, [r3, #4]
 8013e3a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8013e3e:	3604      	adds	r6, #4
 8013e40:	930d      	str	r3, [sp, #52]	; 0x34
 8013e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	dc03      	bgt.n	8013e50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f340 8378 	ble.w	8014540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8013e50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013e52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013e56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013e5a:	1e48      	subs	r0, r1, #1
 8013e5c:	1e57      	subs	r7, r2, #1
 8013e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f340 818c 	ble.w	801417e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8013e66:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8013e68:	142b      	asrs	r3, r5, #16
 8013e6a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8013e6e:	d406      	bmi.n	8013e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e70:	4584      	cmp	ip, r0
 8013e72:	da04      	bge.n	8013e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	db02      	blt.n	8013e7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8013e78:	42bb      	cmp	r3, r7
 8013e7a:	f2c0 8181 	blt.w	8014180 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8013e7e:	f11c 0c01 	adds.w	ip, ip, #1
 8013e82:	f100 816f 	bmi.w	8014164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e86:	4561      	cmp	r1, ip
 8013e88:	f2c0 816c 	blt.w	8014164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	f100 8169 	bmi.w	8014164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e92:	429a      	cmp	r2, r3
 8013e94:	f2c0 8166 	blt.w	8014164 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8013e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	f340 818c 	ble.w	80141be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8013ea6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013ea8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8013eac:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8013eb0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8013eb4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8013eb6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8013eba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013ebc:	141b      	asrs	r3, r3, #16
 8013ebe:	f100 81d0 	bmi.w	8014262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8013ec6:	4543      	cmp	r3, r8
 8013ec8:	f280 81cb 	bge.w	8014262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ecc:	f1bc 0f00 	cmp.w	ip, #0
 8013ed0:	f2c0 81c7 	blt.w	8014262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ed4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8013ed8:	45c4      	cmp	ip, r8
 8013eda:	f280 81c2 	bge.w	8014262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8013ede:	b200      	sxth	r0, r0
 8013ee0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013ee2:	fb0c 3300 	mla	r3, ip, r0, r3
 8013ee6:	eb04 0803 	add.w	r8, r4, r3
 8013eea:	5ce3      	ldrb	r3, [r4, r3]
 8013eec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013ef0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8013ef4:	2a00      	cmp	r2, #0
 8013ef6:	f000 81a9 	beq.w	801424c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8013efa:	f898 c001 	ldrb.w	ip, [r8, #1]
 8013efe:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8013f02:	940e      	str	r4, [sp, #56]	; 0x38
 8013f04:	0e24      	lsrs	r4, r4, #24
 8013f06:	9415      	str	r4, [sp, #84]	; 0x54
 8013f08:	b179      	cbz	r1, 8013f2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013f0a:	eb08 0c00 	add.w	ip, r8, r0
 8013f0e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8013f12:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013f16:	900a      	str	r0, [sp, #40]	; 0x28
 8013f18:	0e00      	lsrs	r0, r0, #24
 8013f1a:	9013      	str	r0, [sp, #76]	; 0x4c
 8013f1c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8013f20:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013f24:	900f      	str	r0, [sp, #60]	; 0x3c
 8013f26:	0e00      	lsrs	r0, r0, #24
 8013f28:	9016      	str	r0, [sp, #88]	; 0x58
 8013f2a:	b292      	uxth	r2, r2
 8013f2c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013f2e:	b289      	uxth	r1, r1
 8013f30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013f32:	fb02 f901 	mul.w	r9, r2, r1
 8013f36:	0112      	lsls	r2, r2, #4
 8013f38:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013f3c:	eba2 0809 	sub.w	r8, r2, r9
 8013f40:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8013f44:	b289      	uxth	r1, r1
 8013f46:	fa1f f888 	uxth.w	r8, r8
 8013f4a:	1a52      	subs	r2, r2, r1
 8013f4c:	fb08 f000 	mul.w	r0, r8, r0
 8013f50:	b292      	uxth	r2, r2
 8013f52:	fb02 000e 	mla	r0, r2, lr, r0
 8013f56:	fb01 0004 	mla	r0, r1, r4, r0
 8013f5a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8013f5c:	fb09 0004 	mla	r0, r9, r4, r0
 8013f60:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8013f64:	2800      	cmp	r0, #0
 8013f66:	f000 80f2 	beq.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8013f6a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f6e:	d01b      	beq.n	8013fa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8013f70:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8013f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013f78:	fb0e fa0a 	mul.w	sl, lr, sl
 8013f7c:	fb0e fe03 	mul.w	lr, lr, r3
 8013f80:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8013f84:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8013f88:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8013f8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013f90:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8013f94:	4453      	add	r3, sl
 8013f96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013f9a:	0a1b      	lsrs	r3, r3, #8
 8013f9c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8013fa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8013fa4:	ea43 030c 	orr.w	r3, r3, ip
 8013fa8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013faa:	2cff      	cmp	r4, #255	; 0xff
 8013fac:	d021      	beq.n	8013ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8013fae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013fb0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013fb4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013fb6:	fb04 fb0b 	mul.w	fp, r4, fp
 8013fba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013fbc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8013fc0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013fc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8013fc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8013fca:	fb04 fa0a 	mul.w	sl, r4, sl
 8013fce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fd2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8013fd6:	44de      	add	lr, fp
 8013fd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8013fdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8013fe0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8013fe4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8013fe8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8013fec:	ea4e 040a 	orr.w	r4, lr, sl
 8013ff0:	940e      	str	r4, [sp, #56]	; 0x38
 8013ff2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013ff4:	2cff      	cmp	r4, #255	; 0xff
 8013ff6:	d021      	beq.n	801403c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8013ff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ffa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8013ffe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014000:	fb04 fb0b 	mul.w	fp, r4, fp
 8014004:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014006:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801400a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801400c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014010:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014014:	fb04 fa0a 	mul.w	sl, r4, sl
 8014018:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801401c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014020:	44de      	add	lr, fp
 8014022:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014026:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801402a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801402e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014032:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014036:	ea4e 040a 	orr.w	r4, lr, sl
 801403a:	940a      	str	r4, [sp, #40]	; 0x28
 801403c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801403e:	2cff      	cmp	r4, #255	; 0xff
 8014040:	d021      	beq.n	8014086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8014042:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014044:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014048:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801404a:	fb04 fb0b 	mul.w	fp, r4, fp
 801404e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014050:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014054:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014056:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801405a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801405e:	fb04 fa0a 	mul.w	sl, r4, sl
 8014062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014066:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801406a:	44de      	add	lr, fp
 801406c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014074:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801407c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014080:	ea4e 040a 	orr.w	r4, lr, sl
 8014084:	940f      	str	r4, [sp, #60]	; 0x3c
 8014086:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014088:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801408c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014090:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014096:	fb08 fc0c 	mul.w	ip, r8, ip
 801409a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801409e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80140a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80140a4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80140a8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80140ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80140ae:	fb09 cc0e 	mla	ip, r9, lr, ip
 80140b2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80140b6:	fb08 f80e 	mul.w	r8, r8, lr
 80140ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80140be:	fb02 8303 	mla	r3, r2, r3, r8
 80140c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80140c8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80140cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140ce:	fb01 330a 	mla	r3, r1, sl, r3
 80140d2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80140d6:	fb09 3901 	mla	r9, r9, r1, r3
 80140da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80140de:	4343      	muls	r3, r0
 80140e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80140e4:	1c58      	adds	r0, r3, #1
 80140e6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80140ea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80140ee:	ea4c 0c09 	orr.w	ip, ip, r9
 80140f2:	783b      	ldrb	r3, [r7, #0]
 80140f4:	fa5f f28c 	uxtb.w	r2, ip
 80140f8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80140fc:	fb12 f201 	smulbb	r2, r2, r1
 8014100:	b2c0      	uxtb	r0, r0
 8014102:	fb03 2300 	mla	r3, r3, r0, r2
 8014106:	b29b      	uxth	r3, r3
 8014108:	1c5a      	adds	r2, r3, #1
 801410a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801410e:	787a      	ldrb	r2, [r7, #1]
 8014110:	fb12 f200 	smulbb	r2, r2, r0
 8014114:	121b      	asrs	r3, r3, #8
 8014116:	703b      	strb	r3, [r7, #0]
 8014118:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801411c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014120:	fb03 2301 	mla	r3, r3, r1, r2
 8014124:	b29b      	uxth	r3, r3
 8014126:	1c5a      	adds	r2, r3, #1
 8014128:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801412c:	121b      	asrs	r3, r3, #8
 801412e:	707b      	strb	r3, [r7, #1]
 8014130:	78bb      	ldrb	r3, [r7, #2]
 8014132:	fb13 f000 	smulbb	r0, r3, r0
 8014136:	fb0c 0c01 	mla	ip, ip, r1, r0
 801413a:	fa1f fc8c 	uxth.w	ip, ip
 801413e:	f10c 0301 	add.w	r3, ip, #1
 8014142:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014146:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801414a:	f887 c002 	strb.w	ip, [r7, #2]
 801414e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014150:	3703      	adds	r7, #3
 8014152:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014154:	441a      	add	r2, r3
 8014156:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014158:	441d      	add	r5, r3
 801415a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801415c:	9229      	str	r2, [sp, #164]	; 0xa4
 801415e:	3b01      	subs	r3, #1
 8014160:	931a      	str	r3, [sp, #104]	; 0x68
 8014162:	e69c      	b.n	8013e9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8014164:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014166:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014168:	441c      	add	r4, r3
 801416a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801416c:	441d      	add	r5, r3
 801416e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014170:	9429      	str	r4, [sp, #164]	; 0xa4
 8014172:	3b01      	subs	r3, #1
 8014174:	9309      	str	r3, [sp, #36]	; 0x24
 8014176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014178:	3303      	adds	r3, #3
 801417a:	930c      	str	r3, [sp, #48]	; 0x30
 801417c:	e66f      	b.n	8013e5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801417e:	d026      	beq.n	80141ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014182:	982b      	ldr	r0, [sp, #172]	; 0xac
 8014184:	3b01      	subs	r3, #1
 8014186:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014188:	fb00 4003 	mla	r0, r0, r3, r4
 801418c:	1400      	asrs	r0, r0, #16
 801418e:	f53f ae83 	bmi.w	8013e98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014192:	3901      	subs	r1, #1
 8014194:	4288      	cmp	r0, r1
 8014196:	f6bf ae7f 	bge.w	8013e98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801419a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801419c:	fb01 5303 	mla	r3, r1, r3, r5
 80141a0:	141b      	asrs	r3, r3, #16
 80141a2:	f53f ae79 	bmi.w	8013e98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80141a6:	3a01      	subs	r2, #1
 80141a8:	4293      	cmp	r3, r2
 80141aa:	f6bf ae75 	bge.w	8013e98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80141ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80141b4:	f103 0e03 	add.w	lr, r3, #3
 80141b8:	f1bb 0f00 	cmp.w	fp, #0
 80141bc:	dc71      	bgt.n	80142a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80141be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80141c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80141ca:	4423      	add	r3, r4
 80141cc:	930c      	str	r3, [sp, #48]	; 0x30
 80141ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	f340 81b5 	ble.w	8014540 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80141d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80141dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80141e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141e4:	eef0 6a62 	vmov.f32	s13, s5
 80141e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141f4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80141f8:	eef0 6a43 	vmov.f32	s13, s6
 80141fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014200:	ee16 5a90 	vmov	r5, s13
 8014204:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014208:	ee61 7a27 	vmul.f32	s15, s2, s15
 801420c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014210:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014214:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014218:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801421c:	ee12 2a90 	vmov	r2, s5
 8014220:	eef0 2a47 	vmov.f32	s5, s14
 8014224:	fb92 f3f3 	sdiv	r3, r2, r3
 8014228:	ee13 2a10 	vmov	r2, s6
 801422c:	932b      	str	r3, [sp, #172]	; 0xac
 801422e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014230:	eeb0 3a67 	vmov.f32	s6, s15
 8014234:	fb92 f3f3 	sdiv	r3, r2, r3
 8014238:	932c      	str	r3, [sp, #176]	; 0xb0
 801423a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801423c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801423e:	3b01      	subs	r3, #1
 8014240:	9319      	str	r3, [sp, #100]	; 0x64
 8014242:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014244:	bf08      	it	eq
 8014246:	4613      	moveq	r3, r2
 8014248:	9309      	str	r3, [sp, #36]	; 0x24
 801424a:	e5fa      	b.n	8013e42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801424c:	2900      	cmp	r1, #0
 801424e:	f43f ae6c 	beq.w	8013f2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014252:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014256:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801425a:	900a      	str	r0, [sp, #40]	; 0x28
 801425c:	0e00      	lsrs	r0, r0, #24
 801425e:	9013      	str	r0, [sp, #76]	; 0x4c
 8014260:	e663      	b.n	8013f2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014262:	f113 0801 	adds.w	r8, r3, #1
 8014266:	f53f af72 	bmi.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801426a:	4540      	cmp	r0, r8
 801426c:	f6ff af6f 	blt.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014270:	f11c 0801 	adds.w	r8, ip, #1
 8014274:	f53f af6b 	bmi.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014278:	45c6      	cmp	lr, r8
 801427a:	f6ff af68 	blt.w	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801427e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014280:	b200      	sxth	r0, r0
 8014282:	9302      	str	r3, [sp, #8]
 8014284:	fa0f f38e 	sxth.w	r3, lr
 8014288:	9000      	str	r0, [sp, #0]
 801428a:	9301      	str	r3, [sp, #4]
 801428c:	4633      	mov	r3, r6
 801428e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014290:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8014294:	e9cd c203 	strd	ip, r2, [sp, #12]
 8014298:	4639      	mov	r1, r7
 801429a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801429c:	f7ff fc74 	bl	8013b88 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80142a0:	e755      	b.n	801414e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80142a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80142a4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80142a8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80142aa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80142ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80142b0:	1427      	asrs	r7, r4, #16
 80142b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80142b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80142b8:	142b      	asrs	r3, r5, #16
 80142ba:	fb01 7303 	mla	r3, r1, r3, r7
 80142be:	18e7      	adds	r7, r4, r3
 80142c0:	5ce3      	ldrb	r3, [r4, r3]
 80142c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80142c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80142ca:	2a00      	cmp	r2, #0
 80142cc:	f000 812e 	beq.w	801452c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80142d0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80142d4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80142d8:	9410      	str	r4, [sp, #64]	; 0x40
 80142da:	0e24      	lsrs	r4, r4, #24
 80142dc:	9417      	str	r4, [sp, #92]	; 0x5c
 80142de:	b170      	cbz	r0, 80142fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80142e0:	eb07 0801 	add.w	r8, r7, r1
 80142e4:	5c79      	ldrb	r1, [r7, r1]
 80142e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142ea:	910b      	str	r1, [sp, #44]	; 0x2c
 80142ec:	0e09      	lsrs	r1, r1, #24
 80142ee:	9114      	str	r1, [sp, #80]	; 0x50
 80142f0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80142f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80142f8:	9111      	str	r1, [sp, #68]	; 0x44
 80142fa:	0e09      	lsrs	r1, r1, #24
 80142fc:	9118      	str	r1, [sp, #96]	; 0x60
 80142fe:	b292      	uxth	r2, r2
 8014300:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014302:	b280      	uxth	r0, r0
 8014304:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014306:	fb02 f900 	mul.w	r9, r2, r0
 801430a:	0112      	lsls	r2, r2, #4
 801430c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8014310:	eba2 0809 	sub.w	r8, r2, r9
 8014314:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8014318:	b280      	uxth	r0, r0
 801431a:	fa1f f888 	uxth.w	r8, r8
 801431e:	1a12      	subs	r2, r2, r0
 8014320:	fb08 f101 	mul.w	r1, r8, r1
 8014324:	b292      	uxth	r2, r2
 8014326:	fb02 110c 	mla	r1, r2, ip, r1
 801432a:	fb00 1104 	mla	r1, r0, r4, r1
 801432e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014330:	fb09 1104 	mla	r1, r9, r4, r1
 8014334:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014338:	2900      	cmp	r1, #0
 801433a:	f000 80ec 	beq.w	8014516 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801433e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014342:	d019      	beq.n	8014378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8014344:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014348:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801434c:	fb0c fa0a 	mul.w	sl, ip, sl
 8014350:	fb0c fc03 	mul.w	ip, ip, r3
 8014354:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014358:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801435c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014360:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014364:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014368:	4453      	add	r3, sl
 801436a:	0a3f      	lsrs	r7, r7, #8
 801436c:	0a1b      	lsrs	r3, r3, #8
 801436e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014372:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014376:	433b      	orrs	r3, r7
 8014378:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801437a:	2cff      	cmp	r4, #255	; 0xff
 801437c:	d020      	beq.n	80143c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801437e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014380:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014384:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014386:	4367      	muls	r7, r4
 8014388:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801438a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801438e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014392:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014394:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014398:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801439c:	fb04 fa0a 	mul.w	sl, r4, sl
 80143a0:	44bc      	add	ip, r7
 80143a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80143a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80143aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80143ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80143b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80143ba:	ea4c 040a 	orr.w	r4, ip, sl
 80143be:	9410      	str	r4, [sp, #64]	; 0x40
 80143c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143c2:	2cff      	cmp	r4, #255	; 0xff
 80143c4:	d020      	beq.n	8014408 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80143c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80143c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80143cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143ce:	4367      	muls	r7, r4
 80143d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80143d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80143d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80143da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80143dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80143e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80143e8:	44bc      	add	ip, r7
 80143ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80143ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80143f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80143f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80143fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80143fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014402:	ea4c 040a 	orr.w	r4, ip, sl
 8014406:	940b      	str	r4, [sp, #44]	; 0x2c
 8014408:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801440a:	2cff      	cmp	r4, #255	; 0xff
 801440c:	d020      	beq.n	8014450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801440e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014410:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014414:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014416:	4367      	muls	r7, r4
 8014418:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801441a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801441e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014422:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014424:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014428:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801442c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014430:	44bc      	add	ip, r7
 8014432:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014436:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801443a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801443e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014442:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014446:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801444a:	ea4c 040a 	orr.w	r4, ip, sl
 801444e:	9411      	str	r4, [sp, #68]	; 0x44
 8014450:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014452:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801445a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801445e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014460:	fb08 f707 	mul.w	r7, r8, r7
 8014464:	fb02 770c 	mla	r7, r2, ip, r7
 8014468:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801446c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801446e:	fb00 770c 	mla	r7, r0, ip, r7
 8014472:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014476:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014478:	fb09 770c 	mla	r7, r9, ip, r7
 801447c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014480:	fb08 f80c 	mul.w	r8, r8, ip
 8014484:	0a3f      	lsrs	r7, r7, #8
 8014486:	fb02 8303 	mla	r3, r2, r3, r8
 801448a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801448c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014490:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014494:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014496:	fb00 330a 	mla	r3, r0, sl, r3
 801449a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801449e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80144a0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80144a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80144aa:	434b      	muls	r3, r1
 80144ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80144b0:	1c59      	adds	r1, r3, #1
 80144b2:	ea47 070c 	orr.w	r7, r7, ip
 80144b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80144ba:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80144be:	b2fa      	uxtb	r2, r7
 80144c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80144c4:	fb12 f200 	smulbb	r2, r2, r0
 80144c8:	b2c9      	uxtb	r1, r1
 80144ca:	fb03 2301 	mla	r3, r3, r1, r2
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	1c5a      	adds	r2, r3, #1
 80144d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144d6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80144da:	fb12 f201 	smulbb	r2, r2, r1
 80144de:	121b      	asrs	r3, r3, #8
 80144e0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80144e4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80144e8:	0c3f      	lsrs	r7, r7, #16
 80144ea:	fb03 2300 	mla	r3, r3, r0, r2
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	1c5a      	adds	r2, r3, #1
 80144f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80144f6:	121b      	asrs	r3, r3, #8
 80144f8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80144fc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8014500:	fb13 f101 	smulbb	r1, r3, r1
 8014504:	fb07 1700 	mla	r7, r7, r0, r1
 8014508:	b2bf      	uxth	r7, r7
 801450a:	1c7b      	adds	r3, r7, #1
 801450c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8014510:	123f      	asrs	r7, r7, #8
 8014512:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8014516:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014518:	f10e 0e03 	add.w	lr, lr, #3
 801451c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801451e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014522:	441a      	add	r2, r3
 8014524:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014526:	9229      	str	r2, [sp, #164]	; 0xa4
 8014528:	441d      	add	r5, r3
 801452a:	e645      	b.n	80141b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801452c:	2800      	cmp	r0, #0
 801452e:	f43f aee6 	beq.w	80142fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014532:	5c79      	ldrb	r1, [r7, r1]
 8014534:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014538:	910b      	str	r1, [sp, #44]	; 0x2c
 801453a:	0e09      	lsrs	r1, r1, #24
 801453c:	9114      	str	r1, [sp, #80]	; 0x50
 801453e:	e6de      	b.n	80142fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8014540:	b01f      	add	sp, #124	; 0x7c
 8014542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014546 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8014546:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801454a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801454e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8014552:	2d00      	cmp	r5, #0
 8014554:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8014558:	fb05 700e 	mla	r0, r5, lr, r7
 801455c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8014560:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8014564:	eb02 0800 	add.w	r8, r2, r0
 8014568:	f2c0 8105 	blt.w	8014776 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801456c:	45a9      	cmp	r9, r5
 801456e:	f340 8102 	ble.w	8014776 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8014572:	2f00      	cmp	r7, #0
 8014574:	f2c0 80fd 	blt.w	8014772 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8014578:	45be      	cmp	lr, r7
 801457a:	f340 80fa 	ble.w	8014772 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801457e:	5c12      	ldrb	r2, [r2, r0]
 8014580:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014584:	1c7a      	adds	r2, r7, #1
 8014586:	f100 80f9 	bmi.w	801477c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801458a:	4596      	cmp	lr, r2
 801458c:	f340 80f6 	ble.w	801477c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8014590:	2c00      	cmp	r4, #0
 8014592:	f000 80f5 	beq.w	8014780 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8014596:	f898 2001 	ldrb.w	r2, [r8, #1]
 801459a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801459e:	3501      	adds	r5, #1
 80145a0:	f100 80f2 	bmi.w	8014788 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80145a4:	45a9      	cmp	r9, r5
 80145a6:	f340 80ef 	ble.w	8014788 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80145aa:	f1bc 0f00 	cmp.w	ip, #0
 80145ae:	f000 80ee 	beq.w	801478e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	f2c0 80e6 	blt.w	8014784 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80145b8:	45be      	cmp	lr, r7
 80145ba:	f340 80e3 	ble.w	8014784 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80145be:	f818 200e 	ldrb.w	r2, [r8, lr]
 80145c2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80145c6:	3701      	adds	r7, #1
 80145c8:	f100 80e4 	bmi.w	8014794 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80145cc:	45be      	cmp	lr, r7
 80145ce:	f340 80e1 	ble.w	8014794 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80145d2:	2c00      	cmp	r4, #0
 80145d4:	f000 80e0 	beq.w	8014798 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80145d8:	44c6      	add	lr, r8
 80145da:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80145de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80145e2:	b2a3      	uxth	r3, r4
 80145e4:	fa1f fc8c 	uxth.w	ip, ip
 80145e8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80145ec:	fb0c fe03 	mul.w	lr, ip, r3
 80145f0:	011b      	lsls	r3, r3, #4
 80145f2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80145f6:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80145fa:	eba3 070e 	sub.w	r7, r3, lr
 80145fe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014602:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8014606:	fa1f f48c 	uxth.w	r4, ip
 801460a:	b2bf      	uxth	r7, r7
 801460c:	1b1b      	subs	r3, r3, r4
 801460e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8014612:	fb07 fc0a 	mul.w	ip, r7, sl
 8014616:	b29b      	uxth	r3, r3
 8014618:	fb03 cc0b 	mla	ip, r3, fp, ip
 801461c:	9300      	str	r3, [sp, #0]
 801461e:	fb04 cc09 	mla	ip, r4, r9, ip
 8014622:	fb0e cc08 	mla	ip, lr, r8, ip
 8014626:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801462a:	9301      	str	r3, [sp, #4]
 801462c:	2b00      	cmp	r3, #0
 801462e:	f000 809d 	beq.w	801476c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8014632:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014636:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801463a:	fb0b fc0c 	mul.w	ip, fp, ip
 801463e:	fb0b f606 	mul.w	r6, fp, r6
 8014642:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014646:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801464a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801464e:	44dc      	add	ip, fp
 8014650:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8014654:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801465c:	fb0a fb0b 	mul.w	fp, sl, fp
 8014660:	fb0a fa00 	mul.w	sl, sl, r0
 8014664:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014668:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801466c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8014670:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014674:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014678:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801467c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8014680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014684:	0a36      	lsrs	r6, r6, #8
 8014686:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801468a:	44dc      	add	ip, fp
 801468c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014690:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014694:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014698:	fb09 fb0b 	mul.w	fp, r9, fp
 801469c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80146a0:	fb09 f905 	mul.w	r9, r9, r5
 80146a4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80146a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80146ac:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80146b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80146b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80146b8:	fb0c fc07 	mul.w	ip, ip, r7
 80146bc:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80146c0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80146c4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80146c8:	4458      	add	r0, fp
 80146ca:	fb08 f505 	mul.w	r5, r8, r5
 80146ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80146d2:	fb08 f802 	mul.w	r8, r8, r2
 80146d6:	0a00      	lsrs	r0, r0, #8
 80146d8:	0a2a      	lsrs	r2, r5, #8
 80146da:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80146de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80146e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80146e6:	4415      	add	r5, r2
 80146e8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80146ec:	0a2d      	lsrs	r5, r5, #8
 80146ee:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80146f2:	9a00      	ldr	r2, [sp, #0]
 80146f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80146f8:	fb03 cc02 	mla	ip, r3, r2, ip
 80146fc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8014700:	9b01      	ldr	r3, [sp, #4]
 8014702:	fb05 c50e 	mla	r5, r5, lr, ip
 8014706:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801470a:	43db      	mvns	r3, r3
 801470c:	fb00 5004 	mla	r0, r0, r4, r5
 8014710:	b2db      	uxtb	r3, r3
 8014712:	0a00      	lsrs	r0, r0, #8
 8014714:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8014718:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801471c:	4378      	muls	r0, r7
 801471e:	fb02 0006 	mla	r0, r2, r6, r0
 8014722:	780a      	ldrb	r2, [r1, #0]
 8014724:	fb0e 0e08 	mla	lr, lr, r8, r0
 8014728:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801472c:	fb04 e000 	mla	r0, r4, r0, lr
 8014730:	fb02 f403 	mul.w	r4, r2, r3
 8014734:	0a00      	lsrs	r0, r0, #8
 8014736:	1c62      	adds	r2, r4, #1
 8014738:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801473c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8014740:	4328      	orrs	r0, r5
 8014742:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014746:	700a      	strb	r2, [r1, #0]
 8014748:	784a      	ldrb	r2, [r1, #1]
 801474a:	435a      	muls	r2, r3
 801474c:	1c54      	adds	r4, r2, #1
 801474e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8014752:	0a02      	lsrs	r2, r0, #8
 8014754:	0c00      	lsrs	r0, r0, #16
 8014756:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801475a:	704a      	strb	r2, [r1, #1]
 801475c:	788a      	ldrb	r2, [r1, #2]
 801475e:	4353      	muls	r3, r2
 8014760:	1c5a      	adds	r2, r3, #1
 8014762:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014766:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801476a:	7088      	strb	r0, [r1, #2]
 801476c:	b003      	add	sp, #12
 801476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014772:	2600      	movs	r6, #0
 8014774:	e706      	b.n	8014584 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8014776:	2000      	movs	r0, #0
 8014778:	4606      	mov	r6, r0
 801477a:	e710      	b.n	801459e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801477c:	2000      	movs	r0, #0
 801477e:	e70e      	b.n	801459e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014780:	4620      	mov	r0, r4
 8014782:	e70c      	b.n	801459e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8014784:	2500      	movs	r5, #0
 8014786:	e71e      	b.n	80145c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8014788:	2200      	movs	r2, #0
 801478a:	4615      	mov	r5, r2
 801478c:	e729      	b.n	80145e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801478e:	4662      	mov	r2, ip
 8014790:	4665      	mov	r5, ip
 8014792:	e726      	b.n	80145e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014794:	2200      	movs	r2, #0
 8014796:	e724      	b.n	80145e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8014798:	4622      	mov	r2, r4
 801479a:	e722      	b.n	80145e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801479c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a0:	b09b      	sub	sp, #108	; 0x6c
 80147a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147a6:	9218      	str	r2, [sp, #96]	; 0x60
 80147a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80147aa:	9019      	str	r0, [sp, #100]	; 0x64
 80147ac:	9116      	str	r1, [sp, #88]	; 0x58
 80147ae:	6850      	ldr	r0, [r2, #4]
 80147b0:	9307      	str	r3, [sp, #28]
 80147b2:	6812      	ldr	r2, [r2, #0]
 80147b4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80147b6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80147ba:	fb00 1303 	mla	r3, r0, r3, r1
 80147be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80147c2:	18d3      	adds	r3, r2, r3
 80147c4:	930a      	str	r3, [sp, #40]	; 0x28
 80147c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80147cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147ce:	685e      	ldr	r6, [r3, #4]
 80147d0:	3604      	adds	r6, #4
 80147d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	dc03      	bgt.n	80147e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80147d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f340 834f 	ble.w	8014e7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80147e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80147e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80147e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80147ea:	1e48      	subs	r0, r1, #1
 80147ec:	1e57      	subs	r7, r2, #1
 80147ee:	9b07      	ldr	r3, [sp, #28]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f340 8178 	ble.w	8014ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80147f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80147f8:	142b      	asrs	r3, r5, #16
 80147fa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80147fe:	d406      	bmi.n	801480e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014800:	4584      	cmp	ip, r0
 8014802:	da04      	bge.n	801480e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014804:	2b00      	cmp	r3, #0
 8014806:	db02      	blt.n	801480e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014808:	42bb      	cmp	r3, r7
 801480a:	f2c0 816d 	blt.w	8014ae8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801480e:	f11c 0c01 	adds.w	ip, ip, #1
 8014812:	f100 815b 	bmi.w	8014acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014816:	4561      	cmp	r1, ip
 8014818:	f2c0 8158 	blt.w	8014acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801481c:	3301      	adds	r3, #1
 801481e:	f100 8155 	bmi.w	8014acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014822:	429a      	cmp	r2, r3
 8014824:	f2c0 8152 	blt.w	8014acc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8014828:	9b07      	ldr	r3, [sp, #28]
 801482a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801482c:	9317      	str	r3, [sp, #92]	; 0x5c
 801482e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014830:	2b00      	cmp	r3, #0
 8014832:	f340 8178 	ble.w	8014b26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8014836:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014838:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801483c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014840:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014844:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014846:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801484a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801484c:	141b      	asrs	r3, r3, #16
 801484e:	f100 81ba 	bmi.w	8014bc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014852:	f101 38ff 	add.w	r8, r1, #4294967295
 8014856:	4543      	cmp	r3, r8
 8014858:	f280 81b5 	bge.w	8014bc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801485c:	f1bc 0f00 	cmp.w	ip, #0
 8014860:	f2c0 81b1 	blt.w	8014bc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8014864:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014868:	45c4      	cmp	ip, r8
 801486a:	f280 81ac 	bge.w	8014bc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801486e:	b209      	sxth	r1, r1
 8014870:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014872:	fb0c 3301 	mla	r3, ip, r1, r3
 8014876:	eb04 0803 	add.w	r8, r4, r3
 801487a:	5ce3      	ldrb	r3, [r4, r3]
 801487c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014880:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8014884:	2a00      	cmp	r2, #0
 8014886:	f000 8193 	beq.w	8014bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801488a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801488e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8014892:	940b      	str	r4, [sp, #44]	; 0x2c
 8014894:	0e24      	lsrs	r4, r4, #24
 8014896:	9412      	str	r4, [sp, #72]	; 0x48
 8014898:	b178      	cbz	r0, 80148ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801489a:	eb08 0c01 	add.w	ip, r8, r1
 801489e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80148a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80148a6:	9108      	str	r1, [sp, #32]
 80148a8:	0e09      	lsrs	r1, r1, #24
 80148aa:	9110      	str	r1, [sp, #64]	; 0x40
 80148ac:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80148b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80148b4:	910c      	str	r1, [sp, #48]	; 0x30
 80148b6:	0e09      	lsrs	r1, r1, #24
 80148b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80148ba:	b292      	uxth	r2, r2
 80148bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80148be:	b280      	uxth	r0, r0
 80148c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80148c2:	fb02 f900 	mul.w	r9, r2, r0
 80148c6:	0112      	lsls	r2, r2, #4
 80148c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80148cc:	eba2 0809 	sub.w	r8, r2, r9
 80148d0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80148d4:	b280      	uxth	r0, r0
 80148d6:	fa1f f888 	uxth.w	r8, r8
 80148da:	1a12      	subs	r2, r2, r0
 80148dc:	fb08 f101 	mul.w	r1, r8, r1
 80148e0:	b292      	uxth	r2, r2
 80148e2:	fb02 110e 	mla	r1, r2, lr, r1
 80148e6:	fb00 1104 	mla	r1, r0, r4, r1
 80148ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80148ec:	fb09 1104 	mla	r1, r9, r4, r1
 80148f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80148f4:	2900      	cmp	r1, #0
 80148f6:	f000 80de 	beq.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80148fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80148fe:	d01b      	beq.n	8014938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8014900:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014908:	fb0e fa0a 	mul.w	sl, lr, sl
 801490c:	fb0e fe03 	mul.w	lr, lr, r3
 8014910:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014914:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014918:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801491c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014920:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014924:	4453      	add	r3, sl
 8014926:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801492a:	0a1b      	lsrs	r3, r3, #8
 801492c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014930:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014934:	ea43 030c 	orr.w	r3, r3, ip
 8014938:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801493a:	2cff      	cmp	r4, #255	; 0xff
 801493c:	d021      	beq.n	8014982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801493e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014940:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014944:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014946:	fb04 fb0b 	mul.w	fp, r4, fp
 801494a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801494c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014950:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014952:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014956:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801495a:	fb04 fa0a 	mul.w	sl, r4, sl
 801495e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014962:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014966:	44de      	add	lr, fp
 8014968:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801496c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801497c:	ea4e 040a 	orr.w	r4, lr, sl
 8014980:	940b      	str	r4, [sp, #44]	; 0x2c
 8014982:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014984:	2cff      	cmp	r4, #255	; 0xff
 8014986:	d021      	beq.n	80149cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8014988:	9c08      	ldr	r4, [sp, #32]
 801498a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801498e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014990:	fb04 fb0b 	mul.w	fp, r4, fp
 8014994:	9c08      	ldr	r4, [sp, #32]
 8014996:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801499a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801499c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80149a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80149a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80149a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80149b0:	44de      	add	lr, fp
 80149b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80149b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80149ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80149be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80149c6:	ea4e 040a 	orr.w	r4, lr, sl
 80149ca:	9408      	str	r4, [sp, #32]
 80149cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149ce:	2cff      	cmp	r4, #255	; 0xff
 80149d0:	d021      	beq.n	8014a16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80149d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80149d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149da:	fb04 fb0b 	mul.w	fp, r4, fp
 80149de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80149e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80149e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80149ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80149ee:	fb04 fa0a 	mul.w	sl, r4, sl
 80149f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80149f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80149fa:	44de      	add	lr, fp
 80149fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014a00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014a04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014a08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014a0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014a10:	ea4e 040a 	orr.w	r4, lr, sl
 8014a14:	940c      	str	r4, [sp, #48]	; 0x30
 8014a16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014a18:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8014a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014a20:	43c9      	mvns	r1, r1
 8014a22:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014a26:	9c08      	ldr	r4, [sp, #32]
 8014a28:	b2c9      	uxtb	r1, r1
 8014a2a:	fb08 fc0c 	mul.w	ip, r8, ip
 8014a2e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8014a32:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014a38:	fb00 cc0e 	mla	ip, r0, lr, ip
 8014a3c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014a40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014a42:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014a46:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014a4a:	fb08 f80e 	mul.w	r8, r8, lr
 8014a4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014a52:	fb02 8303 	mla	r3, r2, r3, r8
 8014a56:	9a08      	ldr	r2, [sp, #32]
 8014a58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a62:	fb00 330a 	mla	r3, r0, sl, r3
 8014a66:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8014a6a:	fb09 3900 	mla	r9, r9, r0, r3
 8014a6e:	783b      	ldrb	r3, [r7, #0]
 8014a70:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014a74:	fb03 f201 	mul.w	r2, r3, r1
 8014a78:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014a7c:	1c53      	adds	r3, r2, #1
 8014a7e:	ea4c 0c09 	orr.w	ip, ip, r9
 8014a82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a86:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8014a8a:	703b      	strb	r3, [r7, #0]
 8014a8c:	787b      	ldrb	r3, [r7, #1]
 8014a8e:	434b      	muls	r3, r1
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8014a96:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8014a9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014a9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014aa2:	707b      	strb	r3, [r7, #1]
 8014aa4:	78bb      	ldrb	r3, [r7, #2]
 8014aa6:	4359      	muls	r1, r3
 8014aa8:	1c4b      	adds	r3, r1, #1
 8014aaa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8014aae:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8014ab2:	f887 c002 	strb.w	ip, [r7, #2]
 8014ab6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014ab8:	3703      	adds	r7, #3
 8014aba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014abc:	441a      	add	r2, r3
 8014abe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014ac0:	441d      	add	r5, r3
 8014ac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ac4:	9225      	str	r2, [sp, #148]	; 0x94
 8014ac6:	3b01      	subs	r3, #1
 8014ac8:	9317      	str	r3, [sp, #92]	; 0x5c
 8014aca:	e6b0      	b.n	801482e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8014acc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014ace:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014ad0:	441c      	add	r4, r3
 8014ad2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014ad4:	441d      	add	r5, r3
 8014ad6:	9b07      	ldr	r3, [sp, #28]
 8014ad8:	9425      	str	r4, [sp, #148]	; 0x94
 8014ada:	3b01      	subs	r3, #1
 8014adc:	9307      	str	r3, [sp, #28]
 8014ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ae0:	3303      	adds	r3, #3
 8014ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae4:	e683      	b.n	80147ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8014ae6:	d026      	beq.n	8014b36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8014ae8:	9b07      	ldr	r3, [sp, #28]
 8014aea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014aec:	3b01      	subs	r3, #1
 8014aee:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014af0:	fb00 4003 	mla	r0, r0, r3, r4
 8014af4:	1400      	asrs	r0, r0, #16
 8014af6:	f53f ae97 	bmi.w	8014828 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014afa:	3901      	subs	r1, #1
 8014afc:	4288      	cmp	r0, r1
 8014afe:	f6bf ae93 	bge.w	8014828 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014b02:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014b04:	fb01 5303 	mla	r3, r1, r3, r5
 8014b08:	141b      	asrs	r3, r3, #16
 8014b0a:	f53f ae8d 	bmi.w	8014828 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014b0e:	3a01      	subs	r2, #1
 8014b10:	4293      	cmp	r3, r2
 8014b12:	f6bf ae89 	bge.w	8014828 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8014b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b18:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014b1c:	f103 0e03 	add.w	lr, r3, #3
 8014b20:	f1bb 0f00 	cmp.w	fp, #0
 8014b24:	dc6d      	bgt.n	8014c02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8014b26:	9b07      	ldr	r3, [sp, #28]
 8014b28:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014b32:	4423      	add	r3, r4
 8014b34:	930a      	str	r3, [sp, #40]	; 0x28
 8014b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f340 81a0 	ble.w	8014e7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8014b3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b48:	eeb0 6a62 	vmov.f32	s12, s5
 8014b4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014b50:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014b54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b58:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8014b5c:	eeb0 6a43 	vmov.f32	s12, s6
 8014b60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014b64:	ee16 5a10 	vmov	r5, s12
 8014b68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014b6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014b70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014b74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014b78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014b7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014b80:	ee12 2a90 	vmov	r2, s5
 8014b84:	eef0 2a47 	vmov.f32	s5, s14
 8014b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b8c:	ee13 2a10 	vmov	r2, s6
 8014b90:	9327      	str	r3, [sp, #156]	; 0x9c
 8014b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014b94:	eeb0 3a67 	vmov.f32	s6, s15
 8014b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8014b9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014ba0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	9316      	str	r3, [sp, #88]	; 0x58
 8014ba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014ba8:	bf08      	it	eq
 8014baa:	4613      	moveq	r3, r2
 8014bac:	9307      	str	r3, [sp, #28]
 8014bae:	e610      	b.n	80147d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	f43f ae82 	beq.w	80148ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014bb6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8014bba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014bbe:	9108      	str	r1, [sp, #32]
 8014bc0:	0e09      	lsrs	r1, r1, #24
 8014bc2:	9110      	str	r1, [sp, #64]	; 0x40
 8014bc4:	e679      	b.n	80148ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8014bc6:	f113 0801 	adds.w	r8, r3, #1
 8014bca:	f53f af74 	bmi.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bce:	4541      	cmp	r1, r8
 8014bd0:	f6ff af71 	blt.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bd4:	f11c 0801 	adds.w	r8, ip, #1
 8014bd8:	f53f af6d 	bmi.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014bdc:	45c6      	cmp	lr, r8
 8014bde:	f6ff af6a 	blt.w	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014be2:	b209      	sxth	r1, r1
 8014be4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8014be8:	fa0f f38e 	sxth.w	r3, lr
 8014bec:	9100      	str	r1, [sp, #0]
 8014bee:	4639      	mov	r1, r7
 8014bf0:	9301      	str	r3, [sp, #4]
 8014bf2:	4633      	mov	r3, r6
 8014bf4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8014bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bfa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014bfc:	f7ff fca3 	bl	8014546 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8014c00:	e759      	b.n	8014ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8014c02:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014c04:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8014c08:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014c0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014c0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014c10:	1427      	asrs	r7, r4, #16
 8014c12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014c14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014c18:	142b      	asrs	r3, r5, #16
 8014c1a:	fb01 7303 	mla	r3, r1, r3, r7
 8014c1e:	18e7      	adds	r7, r4, r3
 8014c20:	5ce3      	ldrb	r3, [r4, r3]
 8014c22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014c26:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8014c2a:	2a00      	cmp	r2, #0
 8014c2c:	f000 811d 	beq.w	8014e6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8014c30:	f897 8001 	ldrb.w	r8, [r7, #1]
 8014c34:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8014c38:	940d      	str	r4, [sp, #52]	; 0x34
 8014c3a:	0e24      	lsrs	r4, r4, #24
 8014c3c:	9414      	str	r4, [sp, #80]	; 0x50
 8014c3e:	b170      	cbz	r0, 8014c5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014c40:	eb07 0801 	add.w	r8, r7, r1
 8014c44:	5c79      	ldrb	r1, [r7, r1]
 8014c46:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c4a:	9109      	str	r1, [sp, #36]	; 0x24
 8014c4c:	0e09      	lsrs	r1, r1, #24
 8014c4e:	9111      	str	r1, [sp, #68]	; 0x44
 8014c50:	f898 1001 	ldrb.w	r1, [r8, #1]
 8014c54:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014c58:	910e      	str	r1, [sp, #56]	; 0x38
 8014c5a:	0e09      	lsrs	r1, r1, #24
 8014c5c:	9115      	str	r1, [sp, #84]	; 0x54
 8014c5e:	b292      	uxth	r2, r2
 8014c60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014c62:	b280      	uxth	r0, r0
 8014c64:	fb02 f900 	mul.w	r9, r2, r0
 8014c68:	0112      	lsls	r2, r2, #4
 8014c6a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8014c6e:	eba2 0809 	sub.w	r8, r2, r9
 8014c72:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8014c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c78:	b280      	uxth	r0, r0
 8014c7a:	fa1f f888 	uxth.w	r8, r8
 8014c7e:	1a09      	subs	r1, r1, r0
 8014c80:	fb08 f202 	mul.w	r2, r8, r2
 8014c84:	b289      	uxth	r1, r1
 8014c86:	fb01 220c 	mla	r2, r1, ip, r2
 8014c8a:	fb00 2204 	mla	r2, r0, r4, r2
 8014c8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014c90:	fb09 2204 	mla	r2, r9, r4, r2
 8014c94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	f000 80db 	beq.w	8014e54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8014c9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014ca2:	d019      	beq.n	8014cd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8014ca4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014ca8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014cac:	fb0c fa0a 	mul.w	sl, ip, sl
 8014cb0:	fb0c fc03 	mul.w	ip, ip, r3
 8014cb4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014cb8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014cbc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8014cc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014cc4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014cc8:	4453      	add	r3, sl
 8014cca:	0a3f      	lsrs	r7, r7, #8
 8014ccc:	0a1b      	lsrs	r3, r3, #8
 8014cce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8014cd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014cd6:	433b      	orrs	r3, r7
 8014cd8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cda:	2cff      	cmp	r4, #255	; 0xff
 8014cdc:	d020      	beq.n	8014d20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8014cde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014ce0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014ce4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014ce6:	4367      	muls	r7, r4
 8014ce8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014cea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014cee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014cf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014cf4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014cf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014cfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d00:	44bc      	add	ip, r7
 8014d02:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d0a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d1a:	ea4c 040a 	orr.w	r4, ip, sl
 8014d1e:	940d      	str	r4, [sp, #52]	; 0x34
 8014d20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d22:	2cff      	cmp	r4, #255	; 0xff
 8014d24:	d020      	beq.n	8014d68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8014d26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d28:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d2e:	4367      	muls	r7, r4
 8014d30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d32:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8014d3c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d44:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d48:	44bc      	add	ip, r7
 8014d4a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d62:	ea4c 040a 	orr.w	r4, ip, sl
 8014d66:	9409      	str	r4, [sp, #36]	; 0x24
 8014d68:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d6a:	2cff      	cmp	r4, #255	; 0xff
 8014d6c:	d020      	beq.n	8014db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8014d6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014d74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d76:	4367      	muls	r7, r4
 8014d78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d7a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8014d7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8014d88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014d8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d90:	44bc      	add	ip, r7
 8014d92:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8014d96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014da2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014da6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014daa:	ea4c 040a 	orr.w	r4, ip, sl
 8014dae:	940e      	str	r4, [sp, #56]	; 0x38
 8014db0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014db2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8014db6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014dba:	43d2      	mvns	r2, r2
 8014dbc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8014dc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014dc2:	b2d2      	uxtb	r2, r2
 8014dc4:	fb08 f707 	mul.w	r7, r8, r7
 8014dc8:	fb01 770c 	mla	r7, r1, ip, r7
 8014dcc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014dd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014dd2:	fb00 770c 	mla	r7, r0, ip, r7
 8014dd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014dda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014ddc:	fb09 770c 	mla	r7, r9, ip, r7
 8014de0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8014de4:	fb08 f80c 	mul.w	r8, r8, ip
 8014de8:	0a3f      	lsrs	r7, r7, #8
 8014dea:	fb01 8303 	mla	r3, r1, r3, r8
 8014dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014df0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8014df4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8014df8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014dfa:	fb00 330a 	mla	r3, r0, sl, r3
 8014dfe:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8014e02:	fb09 3c0c 	mla	ip, r9, ip, r3
 8014e06:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8014e0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014e0e:	fb03 f102 	mul.w	r1, r3, r2
 8014e12:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014e16:	1c4b      	adds	r3, r1, #1
 8014e18:	ea47 070c 	orr.w	r7, r7, ip
 8014e1c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e20:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8014e24:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8014e28:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8014e2c:	4353      	muls	r3, r2
 8014e2e:	1c59      	adds	r1, r3, #1
 8014e30:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8014e34:	0a3b      	lsrs	r3, r7, #8
 8014e36:	0c3f      	lsrs	r7, r7, #16
 8014e38:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8014e3c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8014e40:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8014e44:	435a      	muls	r2, r3
 8014e46:	1c53      	adds	r3, r2, #1
 8014e48:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8014e4c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8014e50:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8014e54:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014e56:	f10e 0e03 	add.w	lr, lr, #3
 8014e5a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014e5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e60:	441a      	add	r2, r3
 8014e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014e64:	9225      	str	r2, [sp, #148]	; 0x94
 8014e66:	441d      	add	r5, r3
 8014e68:	e65a      	b.n	8014b20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	f43f aef7 	beq.w	8014c5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e70:	5c79      	ldrb	r1, [r7, r1]
 8014e72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014e76:	9109      	str	r1, [sp, #36]	; 0x24
 8014e78:	0e09      	lsrs	r1, r1, #24
 8014e7a:	9111      	str	r1, [sp, #68]	; 0x44
 8014e7c:	e6ef      	b.n	8014c5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014e7e:	b01b      	add	sp, #108	; 0x6c
 8014e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8014e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	b08d      	sub	sp, #52	; 0x34
 8014e8a:	468b      	mov	fp, r1
 8014e8c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8014e90:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8014e94:	fb0c 5703 	mla	r7, ip, r3, r5
 8014e98:	f1bc 0f00 	cmp.w	ip, #0
 8014e9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8014e9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014ea2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8014ea6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8014eaa:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8014eae:	eb02 0607 	add.w	r6, r2, r7
 8014eb2:	f89b 4000 	ldrb.w	r4, [fp]
 8014eb6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8014eba:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8014ebe:	f2c0 80c1 	blt.w	8015044 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014ec2:	45e6      	cmp	lr, ip
 8014ec4:	f340 80be 	ble.w	8015044 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8014ec8:	2d00      	cmp	r5, #0
 8014eca:	f2c0 80b7 	blt.w	801503c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014ece:	42ab      	cmp	r3, r5
 8014ed0:	f340 80b4 	ble.w	801503c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8014ed4:	5dd2      	ldrb	r2, [r2, r7]
 8014ed6:	9205      	str	r2, [sp, #20]
 8014ed8:	7872      	ldrb	r2, [r6, #1]
 8014eda:	9206      	str	r2, [sp, #24]
 8014edc:	78b2      	ldrb	r2, [r6, #2]
 8014ede:	9207      	str	r2, [sp, #28]
 8014ee0:	1c6a      	adds	r2, r5, #1
 8014ee2:	f100 80b6 	bmi.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	f340 80b3 	ble.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014eec:	f1b8 0f00 	cmp.w	r8, #0
 8014ef0:	f000 80af 	beq.w	8015052 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8014ef4:	78f2      	ldrb	r2, [r6, #3]
 8014ef6:	9201      	str	r2, [sp, #4]
 8014ef8:	7932      	ldrb	r2, [r6, #4]
 8014efa:	9202      	str	r2, [sp, #8]
 8014efc:	7972      	ldrb	r2, [r6, #5]
 8014efe:	9203      	str	r2, [sp, #12]
 8014f00:	f11c 0c01 	adds.w	ip, ip, #1
 8014f04:	f100 80ad 	bmi.w	8015062 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014f08:	45e6      	cmp	lr, ip
 8014f0a:	f340 80aa 	ble.w	8015062 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014f0e:	f1ba 0f00 	cmp.w	sl, #0
 8014f12:	f000 80a6 	beq.w	8015062 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8014f16:	2d00      	cmp	r5, #0
 8014f18:	f2c0 809f 	blt.w	801505a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014f1c:	42ab      	cmp	r3, r5
 8014f1e:	f340 809c 	ble.w	801505a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8014f22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014f26:	f816 9002 	ldrb.w	r9, [r6, r2]
 8014f2a:	2203      	movs	r2, #3
 8014f2c:	fb03 6c02 	mla	ip, r3, r2, r6
 8014f30:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8014f34:	f89c e002 	ldrb.w	lr, [ip, #2]
 8014f38:	9704      	str	r7, [sp, #16]
 8014f3a:	3501      	adds	r5, #1
 8014f3c:	f100 8098 	bmi.w	8015070 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f40:	42ab      	cmp	r3, r5
 8014f42:	f340 8095 	ble.w	8015070 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f46:	f1b8 0f00 	cmp.w	r8, #0
 8014f4a:	f000 8091 	beq.w	8015070 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8014f4e:	f04f 0c03 	mov.w	ip, #3
 8014f52:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8014f56:	5cb5      	ldrb	r5, [r6, r2]
 8014f58:	fb03 620c 	mla	r2, r3, ip, r6
 8014f5c:	fb03 630c 	mla	r3, r3, ip, r6
 8014f60:	7912      	ldrb	r2, [r2, #4]
 8014f62:	795e      	ldrb	r6, [r3, #5]
 8014f64:	fa1f f388 	uxth.w	r3, r8
 8014f68:	fa1f fc8a 	uxth.w	ip, sl
 8014f6c:	fb03 f70c 	mul.w	r7, r3, ip
 8014f70:	011b      	lsls	r3, r3, #4
 8014f72:	9708      	str	r7, [sp, #32]
 8014f74:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8014f78:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8014f7c:	1bdb      	subs	r3, r3, r7
 8014f7e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8014f82:	fa1f fc8c 	uxth.w	ip, ip
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	9709      	str	r7, [sp, #36]	; 0x24
 8014f8a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8014f8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014f90:	930a      	str	r3, [sp, #40]	; 0x28
 8014f92:	fa1f fa8a 	uxth.w	sl, sl
 8014f96:	ea6f 0807 	mvn.w	r8, r7
 8014f9a:	9f01      	ldr	r7, [sp, #4]
 8014f9c:	435f      	muls	r7, r3
 8014f9e:	9b05      	ldr	r3, [sp, #20]
 8014fa0:	fa5f f888 	uxtb.w	r8, r8
 8014fa4:	fb0a 7703 	mla	r7, sl, r3, r7
 8014fa8:	9b08      	ldr	r3, [sp, #32]
 8014faa:	fb14 f408 	smulbb	r4, r4, r8
 8014fae:	fb0c 7709 	mla	r7, ip, r9, r7
 8014fb2:	fb10 f008 	smulbb	r0, r0, r8
 8014fb6:	fb11 f108 	smulbb	r1, r1, r8
 8014fba:	fb03 7705 	mla	r7, r3, r5, r7
 8014fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8014fc4:	fb07 4703 	mla	r7, r7, r3, r4
 8014fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fca:	b2bf      	uxth	r7, r7
 8014fcc:	1c7c      	adds	r4, r7, #1
 8014fce:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8014fd2:	1224      	asrs	r4, r4, #8
 8014fd4:	f88b 4000 	strb.w	r4, [fp]
 8014fd8:	9c02      	ldr	r4, [sp, #8]
 8014fda:	435c      	muls	r4, r3
 8014fdc:	9b06      	ldr	r3, [sp, #24]
 8014fde:	fb0a 4403 	mla	r4, sl, r3, r4
 8014fe2:	9b04      	ldr	r3, [sp, #16]
 8014fe4:	fb0c 4403 	mla	r4, ip, r3, r4
 8014fe8:	9b08      	ldr	r3, [sp, #32]
 8014fea:	fb03 4402 	mla	r4, r3, r2, r4
 8014fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ff2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014ff6:	fb04 0403 	mla	r4, r4, r3, r0
 8014ffa:	9b03      	ldr	r3, [sp, #12]
 8014ffc:	435a      	muls	r2, r3
 8014ffe:	b2a4      	uxth	r4, r4
 8015000:	4613      	mov	r3, r2
 8015002:	9a07      	ldr	r2, [sp, #28]
 8015004:	1c60      	adds	r0, r4, #1
 8015006:	fb0a 3a02 	mla	sl, sl, r2, r3
 801500a:	9b08      	ldr	r3, [sp, #32]
 801500c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8015010:	fb0c ac0e 	mla	ip, ip, lr, sl
 8015014:	1224      	asrs	r4, r4, #8
 8015016:	fb03 c606 	mla	r6, r3, r6, ip
 801501a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801501c:	f88b 4001 	strb.w	r4, [fp, #1]
 8015020:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015024:	fb06 1103 	mla	r1, r6, r3, r1
 8015028:	b289      	uxth	r1, r1
 801502a:	1c4e      	adds	r6, r1, #1
 801502c:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8015030:	1209      	asrs	r1, r1, #8
 8015032:	f88b 1002 	strb.w	r1, [fp, #2]
 8015036:	b00d      	add	sp, #52	; 0x34
 8015038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015040:	9405      	str	r4, [sp, #20]
 8015042:	e74d      	b.n	8014ee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8015044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015048:	9401      	str	r4, [sp, #4]
 801504a:	9405      	str	r4, [sp, #20]
 801504c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015050:	e756      	b.n	8014f00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8015052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015056:	9401      	str	r4, [sp, #4]
 8015058:	e752      	b.n	8014f00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801505a:	468e      	mov	lr, r1
 801505c:	9004      	str	r0, [sp, #16]
 801505e:	46a1      	mov	r9, r4
 8015060:	e76b      	b.n	8014f3a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8015062:	460e      	mov	r6, r1
 8015064:	4602      	mov	r2, r0
 8015066:	4625      	mov	r5, r4
 8015068:	468e      	mov	lr, r1
 801506a:	9004      	str	r0, [sp, #16]
 801506c:	46a1      	mov	r9, r4
 801506e:	e779      	b.n	8014f64 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8015070:	460e      	mov	r6, r1
 8015072:	4602      	mov	r2, r0
 8015074:	4625      	mov	r5, r4
 8015076:	e775      	b.n	8014f64 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08015078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507c:	b09f      	sub	sp, #124	; 0x7c
 801507e:	920e      	str	r2, [sp, #56]	; 0x38
 8015080:	9307      	str	r3, [sp, #28]
 8015082:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015084:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8015088:	901d      	str	r0, [sp, #116]	; 0x74
 801508a:	930c      	str	r3, [sp, #48]	; 0x30
 801508c:	6850      	ldr	r0, [r2, #4]
 801508e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015090:	6812      	ldr	r2, [r2, #0]
 8015092:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8015096:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801509a:	fb00 1303 	mla	r3, r0, r3, r1
 801509e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80150a2:	18d3      	adds	r3, r2, r3
 80150a4:	9308      	str	r3, [sp, #32]
 80150a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	930a      	str	r3, [sp, #40]	; 0x28
 80150ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150ae:	43db      	mvns	r3, r3
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	9309      	str	r3, [sp, #36]	; 0x24
 80150b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	dc03      	bgt.n	80150c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80150ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150bc:	2b00      	cmp	r3, #0
 80150be:	f340 81f5 	ble.w	80154ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80150c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80150c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80150c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80150cc:	1e48      	subs	r0, r1, #1
 80150ce:	1e54      	subs	r4, r2, #1
 80150d0:	9b07      	ldr	r3, [sp, #28]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	f340 80d5 	ble.w	8015282 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80150d8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80150dc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80150e0:	d406      	bmi.n	80150f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150e2:	4285      	cmp	r5, r0
 80150e4:	da04      	bge.n	80150f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	db02      	blt.n	80150f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80150ea:	42a3      	cmp	r3, r4
 80150ec:	f2c0 80ca 	blt.w	8015284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80150f0:	3501      	adds	r5, #1
 80150f2:	f100 80bb 	bmi.w	801526c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150f6:	42a9      	cmp	r1, r5
 80150f8:	f2c0 80b8 	blt.w	801526c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80150fc:	3301      	adds	r3, #1
 80150fe:	f100 80b5 	bmi.w	801526c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015102:	429a      	cmp	r2, r3
 8015104:	f2c0 80b2 	blt.w	801526c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015108:	9b07      	ldr	r3, [sp, #28]
 801510a:	9d08      	ldr	r5, [sp, #32]
 801510c:	930d      	str	r3, [sp, #52]	; 0x34
 801510e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015110:	2b00      	cmp	r3, #0
 8015112:	f340 80d6 	ble.w	80152c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8015116:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8015118:	ea4f 4428 	mov.w	r4, r8, asr #16
 801511c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801511e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8015122:	68c6      	ldr	r6, [r0, #12]
 8015124:	ea5f 402a 	movs.w	r0, sl, asr #16
 8015128:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801512c:	689b      	ldr	r3, [r3, #8]
 801512e:	f100 810f 	bmi.w	8015350 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015132:	1e5f      	subs	r7, r3, #1
 8015134:	42b8      	cmp	r0, r7
 8015136:	f280 810b 	bge.w	8015350 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801513a:	2c00      	cmp	r4, #0
 801513c:	f2c0 8108 	blt.w	8015350 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015140:	1e77      	subs	r7, r6, #1
 8015142:	42bc      	cmp	r4, r7
 8015144:	f280 8104 	bge.w	8015350 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015148:	b21b      	sxth	r3, r3
 801514a:	fb04 0003 	mla	r0, r4, r3, r0
 801514e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015150:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015154:	1826      	adds	r6, r4, r0
 8015156:	5c24      	ldrb	r4, [r4, r0]
 8015158:	78b7      	ldrb	r7, [r6, #2]
 801515a:	7870      	ldrb	r0, [r6, #1]
 801515c:	970f      	str	r7, [sp, #60]	; 0x3c
 801515e:	7977      	ldrb	r7, [r6, #5]
 8015160:	f896 e003 	ldrb.w	lr, [r6, #3]
 8015164:	f896 c004 	ldrb.w	ip, [r6, #4]
 8015168:	9710      	str	r7, [sp, #64]	; 0x40
 801516a:	b1c9      	cbz	r1, 80151a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801516c:	f04f 0b03 	mov.w	fp, #3
 8015170:	f06f 0904 	mvn.w	r9, #4
 8015174:	3605      	adds	r6, #5
 8015176:	fb13 930b 	smlabb	r3, r3, fp, r9
 801517a:	eb06 0b03 	add.w	fp, r6, r3
 801517e:	5cf3      	ldrb	r3, [r6, r3]
 8015180:	9311      	str	r3, [sp, #68]	; 0x44
 8015182:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015186:	9313      	str	r3, [sp, #76]	; 0x4c
 8015188:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801518c:	9315      	str	r3, [sp, #84]	; 0x54
 801518e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8015192:	9312      	str	r3, [sp, #72]	; 0x48
 8015194:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8015198:	9314      	str	r3, [sp, #80]	; 0x50
 801519a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801519e:	9316      	str	r3, [sp, #88]	; 0x58
 80151a0:	b292      	uxth	r2, r2
 80151a2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80151a4:	b289      	uxth	r1, r1
 80151a6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80151aa:	fb02 f601 	mul.w	r6, r2, r1
 80151ae:	0112      	lsls	r2, r2, #4
 80151b0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80151b4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80151b8:	1b92      	subs	r2, r2, r6
 80151ba:	b289      	uxth	r1, r1
 80151bc:	b292      	uxth	r2, r2
 80151be:	eba9 0901 	sub.w	r9, r9, r1
 80151c2:	fb02 fe0e 	mul.w	lr, r2, lr
 80151c6:	fa1f f989 	uxth.w	r9, r9
 80151ca:	fb02 fc0c 	mul.w	ip, r2, ip
 80151ce:	fb09 e404 	mla	r4, r9, r4, lr
 80151d2:	f895 e000 	ldrb.w	lr, [r5]
 80151d6:	fb09 c000 	mla	r0, r9, r0, ip
 80151da:	fb01 4407 	mla	r4, r1, r7, r4
 80151de:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80151e0:	fb06 4407 	mla	r4, r6, r7, r4
 80151e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80151e6:	fb1e fe07 	smulbb	lr, lr, r7
 80151ea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80151ee:	fb04 e403 	mla	r4, r4, r3, lr
 80151f2:	b2a4      	uxth	r4, r4
 80151f4:	f104 0e01 	add.w	lr, r4, #1
 80151f8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80151fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80151fe:	fb01 0004 	mla	r0, r1, r4, r0
 8015202:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015204:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015208:	fb06 0004 	mla	r0, r6, r4, r0
 801520c:	786c      	ldrb	r4, [r5, #1]
 801520e:	f885 e000 	strb.w	lr, [r5]
 8015212:	fb14 f407 	smulbb	r4, r4, r7
 8015216:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801521a:	fb00 4003 	mla	r0, r0, r3, r4
 801521e:	b280      	uxth	r0, r0
 8015220:	1c44      	adds	r4, r0, #1
 8015222:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8015226:	1200      	asrs	r0, r0, #8
 8015228:	7068      	strb	r0, [r5, #1]
 801522a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801522c:	4342      	muls	r2, r0
 801522e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015230:	fb09 2200 	mla	r2, r9, r0, r2
 8015234:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015236:	fb01 2100 	mla	r1, r1, r0, r2
 801523a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801523c:	fb06 1602 	mla	r6, r6, r2, r1
 8015240:	78a9      	ldrb	r1, [r5, #2]
 8015242:	fb11 f107 	smulbb	r1, r1, r7
 8015246:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801524a:	fb06 1303 	mla	r3, r6, r3, r1
 801524e:	b29b      	uxth	r3, r3
 8015250:	1c5e      	adds	r6, r3, #1
 8015252:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8015256:	121b      	asrs	r3, r3, #8
 8015258:	70ab      	strb	r3, [r5, #2]
 801525a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801525c:	3503      	adds	r5, #3
 801525e:	449a      	add	sl, r3
 8015260:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015262:	4498      	add	r8, r3
 8015264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015266:	3b01      	subs	r3, #1
 8015268:	930d      	str	r3, [sp, #52]	; 0x34
 801526a:	e750      	b.n	801510e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801526c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801526e:	449a      	add	sl, r3
 8015270:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015272:	4498      	add	r8, r3
 8015274:	9b07      	ldr	r3, [sp, #28]
 8015276:	3b01      	subs	r3, #1
 8015278:	9307      	str	r3, [sp, #28]
 801527a:	9b08      	ldr	r3, [sp, #32]
 801527c:	3303      	adds	r3, #3
 801527e:	9308      	str	r3, [sp, #32]
 8015280:	e726      	b.n	80150d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8015282:	d026      	beq.n	80152d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8015284:	9b07      	ldr	r3, [sp, #28]
 8015286:	982b      	ldr	r0, [sp, #172]	; 0xac
 8015288:	3b01      	subs	r3, #1
 801528a:	fb00 a003 	mla	r0, r0, r3, sl
 801528e:	1400      	asrs	r0, r0, #16
 8015290:	f53f af3a 	bmi.w	8015108 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015294:	3901      	subs	r1, #1
 8015296:	4288      	cmp	r0, r1
 8015298:	f6bf af36 	bge.w	8015108 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801529c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801529e:	fb01 8303 	mla	r3, r1, r3, r8
 80152a2:	141b      	asrs	r3, r3, #16
 80152a4:	f53f af30 	bmi.w	8015108 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80152a8:	3a01      	subs	r2, #1
 80152aa:	4293      	cmp	r3, r2
 80152ac:	f6bf af2c 	bge.w	8015108 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80152b0:	9b08      	ldr	r3, [sp, #32]
 80152b2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80152b6:	1cdd      	adds	r5, r3, #3
 80152b8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80152bc:	f1bc 0f00 	cmp.w	ip, #0
 80152c0:	dc5f      	bgt.n	8015382 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80152c2:	9b07      	ldr	r3, [sp, #28]
 80152c4:	9a08      	ldr	r2, [sp, #32]
 80152c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80152ce:	441a      	add	r2, r3
 80152d0:	9208      	str	r2, [sp, #32]
 80152d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f340 80e9 	ble.w	80154ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80152da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80152e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80152e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80152e8:	eef0 6a62 	vmov.f32	s13, s5
 80152ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80152f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80152f8:	ee16 aa90 	vmov	sl, s13
 80152fc:	eef0 6a43 	vmov.f32	s13, s6
 8015300:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015304:	ee16 8a90 	vmov	r8, s13
 8015308:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801530c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015310:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015314:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015318:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801531c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015320:	ee12 2a90 	vmov	r2, s5
 8015324:	eef0 2a47 	vmov.f32	s5, s14
 8015328:	fb92 f3f3 	sdiv	r3, r2, r3
 801532c:	ee13 2a10 	vmov	r2, s6
 8015330:	932b      	str	r3, [sp, #172]	; 0xac
 8015332:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015334:	eeb0 3a67 	vmov.f32	s6, s15
 8015338:	fb92 f3f3 	sdiv	r3, r2, r3
 801533c:	932c      	str	r3, [sp, #176]	; 0xb0
 801533e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015342:	3b01      	subs	r3, #1
 8015344:	930b      	str	r3, [sp, #44]	; 0x2c
 8015346:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015348:	bf08      	it	eq
 801534a:	4613      	moveq	r3, r2
 801534c:	9307      	str	r3, [sp, #28]
 801534e:	e6b1      	b.n	80150b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015350:	1c47      	adds	r7, r0, #1
 8015352:	d482      	bmi.n	801525a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015354:	42bb      	cmp	r3, r7
 8015356:	db80      	blt.n	801525a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015358:	1c67      	adds	r7, r4, #1
 801535a:	f53f af7e 	bmi.w	801525a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801535e:	42be      	cmp	r6, r7
 8015360:	f6ff af7b 	blt.w	801525a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015364:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015366:	b236      	sxth	r6, r6
 8015368:	9001      	str	r0, [sp, #4]
 801536a:	b21b      	sxth	r3, r3
 801536c:	9600      	str	r6, [sp, #0]
 801536e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015370:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8015374:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8015378:	4629      	mov	r1, r5
 801537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801537c:	f7ff fd82 	bl	8014e84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8015380:	e76b      	b.n	801525a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8015382:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8015384:	ea4f 402a 	mov.w	r0, sl, asr #16
 8015388:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801538c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8015390:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8015394:	ea4f 4128 	mov.w	r1, r8, asr #16
 8015398:	fb07 0101 	mla	r1, r7, r1, r0
 801539c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801539e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80153a2:	1844      	adds	r4, r0, r1
 80153a4:	5c40      	ldrb	r0, [r0, r1]
 80153a6:	78a6      	ldrb	r6, [r4, #2]
 80153a8:	7861      	ldrb	r1, [r4, #1]
 80153aa:	960f      	str	r6, [sp, #60]	; 0x3c
 80153ac:	78e6      	ldrb	r6, [r4, #3]
 80153ae:	910d      	str	r1, [sp, #52]	; 0x34
 80153b0:	9610      	str	r6, [sp, #64]	; 0x40
 80153b2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80153b6:	f894 b005 	ldrb.w	fp, [r4, #5]
 80153ba:	b192      	cbz	r2, 80153e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80153bc:	f06f 0604 	mvn.w	r6, #4
 80153c0:	2103      	movs	r1, #3
 80153c2:	3405      	adds	r4, #5
 80153c4:	fb17 6701 	smlabb	r7, r7, r1, r6
 80153c8:	19e6      	adds	r6, r4, r7
 80153ca:	5de4      	ldrb	r4, [r4, r7]
 80153cc:	9417      	str	r4, [sp, #92]	; 0x5c
 80153ce:	7874      	ldrb	r4, [r6, #1]
 80153d0:	9419      	str	r4, [sp, #100]	; 0x64
 80153d2:	78b4      	ldrb	r4, [r6, #2]
 80153d4:	941b      	str	r4, [sp, #108]	; 0x6c
 80153d6:	78f4      	ldrb	r4, [r6, #3]
 80153d8:	9418      	str	r4, [sp, #96]	; 0x60
 80153da:	7934      	ldrb	r4, [r6, #4]
 80153dc:	941a      	str	r4, [sp, #104]	; 0x68
 80153de:	7974      	ldrb	r4, [r6, #5]
 80153e0:	941c      	str	r4, [sp, #112]	; 0x70
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80153e6:	b292      	uxth	r2, r2
 80153e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153ea:	3503      	adds	r5, #3
 80153ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80153f0:	fb03 f402 	mul.w	r4, r3, r2
 80153f4:	011b      	lsls	r3, r3, #4
 80153f6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80153fa:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80153fe:	1b1b      	subs	r3, r3, r4
 8015400:	b292      	uxth	r2, r2
 8015402:	b29b      	uxth	r3, r3
 8015404:	1ab6      	subs	r6, r6, r2
 8015406:	435f      	muls	r7, r3
 8015408:	b2b6      	uxth	r6, r6
 801540a:	fb03 f909 	mul.w	r9, r3, r9
 801540e:	fb03 fb0b 	mul.w	fp, r3, fp
 8015412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015414:	fb06 7000 	mla	r0, r6, r0, r7
 8015418:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801541a:	fb06 bb03 	mla	fp, r6, r3, fp
 801541e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015420:	fb02 0007 	mla	r0, r2, r7, r0
 8015424:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8015426:	fb02 bb03 	mla	fp, r2, r3, fp
 801542a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801542c:	fb04 0007 	mla	r0, r4, r7, r0
 8015430:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8015434:	fb17 f701 	smulbb	r7, r7, r1
 8015438:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801543c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801543e:	fb00 700e 	mla	r0, r0, lr, r7
 8015442:	fb06 9101 	mla	r1, r6, r1, r9
 8015446:	b280      	uxth	r0, r0
 8015448:	1c47      	adds	r7, r0, #1
 801544a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801544e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015450:	1200      	asrs	r0, r0, #8
 8015452:	f805 0c06 	strb.w	r0, [r5, #-6]
 8015456:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015458:	fb02 1100 	mla	r1, r2, r0, r1
 801545c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801545e:	fb04 1100 	mla	r1, r4, r0, r1
 8015462:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8015466:	fb04 b403 	mla	r4, r4, r3, fp
 801546a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801546e:	fb10 f007 	smulbb	r0, r0, r7
 8015472:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015476:	fb13 f307 	smulbb	r3, r3, r7
 801547a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801547e:	fb01 010e 	mla	r1, r1, lr, r0
 8015482:	fb04 340e 	mla	r4, r4, lr, r3
 8015486:	b289      	uxth	r1, r1
 8015488:	b2a4      	uxth	r4, r4
 801548a:	1c48      	adds	r0, r1, #1
 801548c:	1c63      	adds	r3, r4, #1
 801548e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8015492:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8015496:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015498:	1209      	asrs	r1, r1, #8
 801549a:	1224      	asrs	r4, r4, #8
 801549c:	449a      	add	sl, r3
 801549e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80154a0:	f805 1c05 	strb.w	r1, [r5, #-5]
 80154a4:	f805 4c04 	strb.w	r4, [r5, #-4]
 80154a8:	4498      	add	r8, r3
 80154aa:	e707      	b.n	80152bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80154ac:	b01f      	add	sp, #124	; 0x7c
 80154ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154b2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80154b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b6:	b087      	sub	sp, #28
 80154b8:	780d      	ldrb	r5, [r1, #0]
 80154ba:	784c      	ldrb	r4, [r1, #1]
 80154bc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80154c0:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 80154c4:	9004      	str	r0, [sp, #16]
 80154c6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80154ca:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 80154ce:	9005      	str	r0, [sp, #20]
 80154d0:	fb06 bc03 	mla	ip, r6, r3, fp
 80154d4:	2e00      	cmp	r6, #0
 80154d6:	7888      	ldrb	r0, [r1, #2]
 80154d8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80154dc:	eb02 090c 	add.w	r9, r2, ip
 80154e0:	f2c0 8084 	blt.w	80155ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154e4:	42b7      	cmp	r7, r6
 80154e6:	f340 8081 	ble.w	80155ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80154ea:	f1bb 0f00 	cmp.w	fp, #0
 80154ee:	db79      	blt.n	80155e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154f0:	455b      	cmp	r3, fp
 80154f2:	dd77      	ble.n	80155e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80154f4:	f812 200c 	ldrb.w	r2, [r2, ip]
 80154f8:	9201      	str	r2, [sp, #4]
 80154fa:	f899 2001 	ldrb.w	r2, [r9, #1]
 80154fe:	9202      	str	r2, [sp, #8]
 8015500:	f899 2002 	ldrb.w	r2, [r9, #2]
 8015504:	9203      	str	r2, [sp, #12]
 8015506:	f11b 0201 	adds.w	r2, fp, #1
 801550a:	d476      	bmi.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801550c:	4293      	cmp	r3, r2
 801550e:	dd74      	ble.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8015510:	9a04      	ldr	r2, [sp, #16]
 8015512:	2a00      	cmp	r2, #0
 8015514:	d071      	beq.n	80155fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8015516:	f899 8003 	ldrb.w	r8, [r9, #3]
 801551a:	f899 c004 	ldrb.w	ip, [r9, #4]
 801551e:	f899 a005 	ldrb.w	sl, [r9, #5]
 8015522:	3601      	adds	r6, #1
 8015524:	d471      	bmi.n	801560a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8015526:	42b7      	cmp	r7, r6
 8015528:	dd6f      	ble.n	801560a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801552a:	9a05      	ldr	r2, [sp, #20]
 801552c:	2a00      	cmp	r2, #0
 801552e:	d06c      	beq.n	801560a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8015530:	f1bb 0f00 	cmp.w	fp, #0
 8015534:	db65      	blt.n	8015602 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8015536:	455b      	cmp	r3, fp
 8015538:	dd63      	ble.n	8015602 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801553a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801553e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8015542:	2203      	movs	r2, #3
 8015544:	fb03 9602 	mla	r6, r3, r2, r9
 8015548:	7877      	ldrb	r7, [r6, #1]
 801554a:	78b6      	ldrb	r6, [r6, #2]
 801554c:	f11b 0b01 	adds.w	fp, fp, #1
 8015550:	d40c      	bmi.n	801556c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015552:	455b      	cmp	r3, fp
 8015554:	dd0a      	ble.n	801556c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8015556:	9a04      	ldr	r2, [sp, #16]
 8015558:	b142      	cbz	r2, 801556c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801555a:	2203      	movs	r2, #3
 801555c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8015560:	f819 5000 	ldrb.w	r5, [r9, r0]
 8015564:	fb03 9002 	mla	r0, r3, r2, r9
 8015568:	7904      	ldrb	r4, [r0, #4]
 801556a:	7940      	ldrb	r0, [r0, #5]
 801556c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015570:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015574:	fb03 fb02 	mul.w	fp, r3, r2
 8015578:	011b      	lsls	r3, r3, #4
 801557a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801557e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8015582:	eba3 030b 	sub.w	r3, r3, fp
 8015586:	b292      	uxth	r2, r2
 8015588:	b29b      	uxth	r3, r3
 801558a:	eba9 0902 	sub.w	r9, r9, r2
 801558e:	9304      	str	r3, [sp, #16]
 8015590:	fa1f f989 	uxth.w	r9, r9
 8015594:	fb03 f808 	mul.w	r8, r3, r8
 8015598:	9b01      	ldr	r3, [sp, #4]
 801559a:	fb09 8803 	mla	r8, r9, r3, r8
 801559e:	9b04      	ldr	r3, [sp, #16]
 80155a0:	fb03 fc0c 	mul.w	ip, r3, ip
 80155a4:	9b02      	ldr	r3, [sp, #8]
 80155a6:	fb02 880e 	mla	r8, r2, lr, r8
 80155aa:	fb09 cc03 	mla	ip, r9, r3, ip
 80155ae:	9b04      	ldr	r3, [sp, #16]
 80155b0:	fb0b 8805 	mla	r8, fp, r5, r8
 80155b4:	fb02 c707 	mla	r7, r2, r7, ip
 80155b8:	fb03 f30a 	mul.w	r3, r3, sl
 80155bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80155c0:	fb0b 7404 	mla	r4, fp, r4, r7
 80155c4:	f881 8000 	strb.w	r8, [r1]
 80155c8:	1224      	asrs	r4, r4, #8
 80155ca:	704c      	strb	r4, [r1, #1]
 80155cc:	9c03      	ldr	r4, [sp, #12]
 80155ce:	fb09 3904 	mla	r9, r9, r4, r3
 80155d2:	fb02 9206 	mla	r2, r2, r6, r9
 80155d6:	fb0b 2000 	mla	r0, fp, r0, r2
 80155da:	1200      	asrs	r0, r0, #8
 80155dc:	7088      	strb	r0, [r1, #2]
 80155de:	b007      	add	sp, #28
 80155e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155e8:	9501      	str	r5, [sp, #4]
 80155ea:	e78c      	b.n	8015506 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80155ec:	4682      	mov	sl, r0
 80155ee:	46a4      	mov	ip, r4
 80155f0:	46a8      	mov	r8, r5
 80155f2:	9501      	str	r5, [sp, #4]
 80155f4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80155f8:	e793      	b.n	8015522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80155fa:	4682      	mov	sl, r0
 80155fc:	46a4      	mov	ip, r4
 80155fe:	46a8      	mov	r8, r5
 8015600:	e78f      	b.n	8015522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8015602:	4606      	mov	r6, r0
 8015604:	4627      	mov	r7, r4
 8015606:	46ae      	mov	lr, r5
 8015608:	e7a0      	b.n	801554c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801560a:	4606      	mov	r6, r0
 801560c:	4627      	mov	r7, r4
 801560e:	46ae      	mov	lr, r5
 8015610:	e7ac      	b.n	801556c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08015612 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015616:	b09b      	sub	sp, #108	; 0x6c
 8015618:	920b      	str	r2, [sp, #44]	; 0x2c
 801561a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801561c:	9019      	str	r0, [sp, #100]	; 0x64
 801561e:	9109      	str	r1, [sp, #36]	; 0x24
 8015620:	6850      	ldr	r0, [r2, #4]
 8015622:	9306      	str	r3, [sp, #24]
 8015624:	6812      	ldr	r2, [r2, #0]
 8015626:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801562a:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801562e:	fb00 1303 	mla	r3, r0, r3, r1
 8015632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015636:	18d3      	adds	r3, r2, r3
 8015638:	9307      	str	r3, [sp, #28]
 801563a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	9308      	str	r3, [sp, #32]
 8015640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015642:	2b00      	cmp	r3, #0
 8015644:	dc03      	bgt.n	801564e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015648:	2b00      	cmp	r3, #0
 801564a:	f340 81ab 	ble.w	80159a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801564e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015650:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015654:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015658:	1e48      	subs	r0, r1, #1
 801565a:	1e55      	subs	r5, r2, #1
 801565c:	9b06      	ldr	r3, [sp, #24]
 801565e:	2b00      	cmp	r3, #0
 8015660:	f340 80b1 	ble.w	80157c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015664:	ea5f 462b 	movs.w	r6, fp, asr #16
 8015668:	ea4f 4324 	mov.w	r3, r4, asr #16
 801566c:	d406      	bmi.n	801567c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801566e:	4286      	cmp	r6, r0
 8015670:	da04      	bge.n	801567c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015672:	2b00      	cmp	r3, #0
 8015674:	db02      	blt.n	801567c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015676:	42ab      	cmp	r3, r5
 8015678:	f2c0 80a6 	blt.w	80157c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801567c:	3601      	adds	r6, #1
 801567e:	f100 8097 	bmi.w	80157b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015682:	42b1      	cmp	r1, r6
 8015684:	f2c0 8094 	blt.w	80157b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015688:	3301      	adds	r3, #1
 801568a:	f100 8091 	bmi.w	80157b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801568e:	429a      	cmp	r2, r3
 8015690:	f2c0 808e 	blt.w	80157b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015694:	9b06      	ldr	r3, [sp, #24]
 8015696:	9e07      	ldr	r6, [sp, #28]
 8015698:	930a      	str	r3, [sp, #40]	; 0x28
 801569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801569c:	2b00      	cmp	r3, #0
 801569e:	f340 80b0 	ble.w	8015802 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80156a2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80156a4:	1425      	asrs	r5, r4, #16
 80156a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80156a8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80156ac:	68c7      	ldr	r7, [r0, #12]
 80156ae:	ea5f 402b 	movs.w	r0, fp, asr #16
 80156b2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80156b6:	689b      	ldr	r3, [r3, #8]
 80156b8:	f100 80ea 	bmi.w	8015890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156bc:	f103 3cff 	add.w	ip, r3, #4294967295
 80156c0:	4560      	cmp	r0, ip
 80156c2:	f280 80e5 	bge.w	8015890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156c6:	2d00      	cmp	r5, #0
 80156c8:	f2c0 80e2 	blt.w	8015890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80156d0:	4565      	cmp	r5, ip
 80156d2:	f280 80dd 	bge.w	8015890 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80156d6:	b21b      	sxth	r3, r3
 80156d8:	fb05 0003 	mla	r0, r5, r3, r0
 80156dc:	9d08      	ldr	r5, [sp, #32]
 80156de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80156e2:	182f      	adds	r7, r5, r0
 80156e4:	5c2d      	ldrb	r5, [r5, r0]
 80156e6:	7878      	ldrb	r0, [r7, #1]
 80156e8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80156ec:	900c      	str	r0, [sp, #48]	; 0x30
 80156ee:	f897 9003 	ldrb.w	r9, [r7, #3]
 80156f2:	f897 8004 	ldrb.w	r8, [r7, #4]
 80156f6:	f897 a005 	ldrb.w	sl, [r7, #5]
 80156fa:	b1c9      	cbz	r1, 8015730 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80156fc:	f04f 0c03 	mov.w	ip, #3
 8015700:	f06f 0004 	mvn.w	r0, #4
 8015704:	3705      	adds	r7, #5
 8015706:	fb13 030c 	smlabb	r3, r3, ip, r0
 801570a:	eb07 0c03 	add.w	ip, r7, r3
 801570e:	5cfb      	ldrb	r3, [r7, r3]
 8015710:	930d      	str	r3, [sp, #52]	; 0x34
 8015712:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015716:	930f      	str	r3, [sp, #60]	; 0x3c
 8015718:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801571c:	9311      	str	r3, [sp, #68]	; 0x44
 801571e:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8015722:	930e      	str	r3, [sp, #56]	; 0x38
 8015724:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8015728:	9310      	str	r3, [sp, #64]	; 0x40
 801572a:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801572e:	9312      	str	r3, [sp, #72]	; 0x48
 8015730:	b292      	uxth	r2, r2
 8015732:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015734:	b289      	uxth	r1, r1
 8015736:	fb02 f301 	mul.w	r3, r2, r1
 801573a:	0112      	lsls	r2, r2, #4
 801573c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8015740:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8015744:	1ad2      	subs	r2, r2, r3
 8015746:	b289      	uxth	r1, r1
 8015748:	b292      	uxth	r2, r2
 801574a:	1a7f      	subs	r7, r7, r1
 801574c:	fb02 f909 	mul.w	r9, r2, r9
 8015750:	b2bf      	uxth	r7, r7
 8015752:	fb02 f808 	mul.w	r8, r2, r8
 8015756:	fb02 fa0a 	mul.w	sl, r2, sl
 801575a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801575c:	fb07 9905 	mla	r9, r7, r5, r9
 8015760:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015762:	fb07 8800 	mla	r8, r7, r0, r8
 8015766:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015768:	fb07 aa0e 	mla	sl, r7, lr, sl
 801576c:	fb01 9905 	mla	r9, r1, r5, r9
 8015770:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015772:	fb01 8800 	mla	r8, r1, r0, r8
 8015776:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015778:	fb01 a102 	mla	r1, r1, r2, sl
 801577c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801577e:	fb03 9905 	mla	r9, r3, r5, r9
 8015782:	fb03 8800 	mla	r8, r3, r0, r8
 8015786:	fb03 1302 	mla	r3, r3, r2, r1
 801578a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801578e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015792:	121b      	asrs	r3, r3, #8
 8015794:	f886 9000 	strb.w	r9, [r6]
 8015798:	f886 8001 	strb.w	r8, [r6, #1]
 801579c:	70b3      	strb	r3, [r6, #2]
 801579e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80157a0:	3603      	adds	r6, #3
 80157a2:	449b      	add	fp, r3
 80157a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157a6:	441c      	add	r4, r3
 80157a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157aa:	3b01      	subs	r3, #1
 80157ac:	930a      	str	r3, [sp, #40]	; 0x28
 80157ae:	e774      	b.n	801569a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80157b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80157b2:	449b      	add	fp, r3
 80157b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80157b6:	441c      	add	r4, r3
 80157b8:	9b06      	ldr	r3, [sp, #24]
 80157ba:	3b01      	subs	r3, #1
 80157bc:	9306      	str	r3, [sp, #24]
 80157be:	9b07      	ldr	r3, [sp, #28]
 80157c0:	3303      	adds	r3, #3
 80157c2:	9307      	str	r3, [sp, #28]
 80157c4:	e74a      	b.n	801565c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80157c6:	d024      	beq.n	8015812 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80157c8:	9b06      	ldr	r3, [sp, #24]
 80157ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80157cc:	3b01      	subs	r3, #1
 80157ce:	fb00 b003 	mla	r0, r0, r3, fp
 80157d2:	1400      	asrs	r0, r0, #16
 80157d4:	f53f af5e 	bmi.w	8015694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157d8:	3901      	subs	r1, #1
 80157da:	4288      	cmp	r0, r1
 80157dc:	f6bf af5a 	bge.w	8015694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157e0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80157e2:	fb01 4303 	mla	r3, r1, r3, r4
 80157e6:	141b      	asrs	r3, r3, #16
 80157e8:	f53f af54 	bmi.w	8015694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157ec:	3a01      	subs	r2, #1
 80157ee:	4293      	cmp	r3, r2
 80157f0:	f6bf af50 	bge.w	8015694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80157f4:	9b07      	ldr	r3, [sp, #28]
 80157f6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80157fa:	1cde      	adds	r6, r3, #3
 80157fc:	f1be 0f00 	cmp.w	lr, #0
 8015800:	dc5f      	bgt.n	80158c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015802:	9b06      	ldr	r3, [sp, #24]
 8015804:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015808:	9b07      	ldr	r3, [sp, #28]
 801580a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801580e:	4423      	add	r3, r4
 8015810:	9307      	str	r3, [sp, #28]
 8015812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015814:	2b00      	cmp	r3, #0
 8015816:	f340 80c5 	ble.w	80159a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801581a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801581e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015820:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015824:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015828:	eef0 6a62 	vmov.f32	s13, s5
 801582c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015830:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015834:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015838:	ee16 ba90 	vmov	fp, s13
 801583c:	eef0 6a43 	vmov.f32	s13, s6
 8015840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015844:	ee16 4a90 	vmov	r4, s13
 8015848:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801584c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015850:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015854:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015858:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801585c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015860:	ee12 2a90 	vmov	r2, s5
 8015864:	eef0 2a47 	vmov.f32	s5, s14
 8015868:	fb92 f3f3 	sdiv	r3, r2, r3
 801586c:	ee13 2a10 	vmov	r2, s6
 8015870:	9327      	str	r3, [sp, #156]	; 0x9c
 8015872:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015874:	eeb0 3a67 	vmov.f32	s6, s15
 8015878:	fb92 f3f3 	sdiv	r3, r2, r3
 801587c:	9328      	str	r3, [sp, #160]	; 0xa0
 801587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015882:	3b01      	subs	r3, #1
 8015884:	9309      	str	r3, [sp, #36]	; 0x24
 8015886:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015888:	bf08      	it	eq
 801588a:	4613      	moveq	r3, r2
 801588c:	9306      	str	r3, [sp, #24]
 801588e:	e6d7      	b.n	8015640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015890:	f110 0c01 	adds.w	ip, r0, #1
 8015894:	d483      	bmi.n	801579e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8015896:	4563      	cmp	r3, ip
 8015898:	db81      	blt.n	801579e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801589a:	f115 0c01 	adds.w	ip, r5, #1
 801589e:	f53f af7e 	bmi.w	801579e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80158a2:	4567      	cmp	r7, ip
 80158a4:	f6ff af7b 	blt.w	801579e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80158a8:	b23f      	sxth	r7, r7
 80158aa:	b21b      	sxth	r3, r3
 80158ac:	9700      	str	r7, [sp, #0]
 80158ae:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80158b2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80158b6:	9a08      	ldr	r2, [sp, #32]
 80158b8:	4631      	mov	r1, r6
 80158ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80158bc:	f7ff fdf9 	bl	80154b2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80158c0:	e76d      	b.n	801579e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80158c2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80158c4:	ea4f 402b 	mov.w	r0, fp, asr #16
 80158c8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80158cc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80158d0:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80158d4:	1421      	asrs	r1, r4, #16
 80158d6:	930a      	str	r3, [sp, #40]	; 0x28
 80158d8:	fb0c 0101 	mla	r1, ip, r1, r0
 80158dc:	9808      	ldr	r0, [sp, #32]
 80158de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80158e2:	1845      	adds	r5, r0, r1
 80158e4:	5c40      	ldrb	r0, [r0, r1]
 80158e6:	796f      	ldrb	r7, [r5, #5]
 80158e8:	7869      	ldrb	r1, [r5, #1]
 80158ea:	f895 8002 	ldrb.w	r8, [r5, #2]
 80158ee:	f895 a003 	ldrb.w	sl, [r5, #3]
 80158f2:	f895 9004 	ldrb.w	r9, [r5, #4]
 80158f6:	970c      	str	r7, [sp, #48]	; 0x30
 80158f8:	b1a2      	cbz	r2, 8015924 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80158fa:	2703      	movs	r7, #3
 80158fc:	f06f 0304 	mvn.w	r3, #4
 8015900:	3505      	adds	r5, #5
 8015902:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8015906:	eb05 070c 	add.w	r7, r5, ip
 801590a:	f815 500c 	ldrb.w	r5, [r5, ip]
 801590e:	9513      	str	r5, [sp, #76]	; 0x4c
 8015910:	787d      	ldrb	r5, [r7, #1]
 8015912:	9515      	str	r5, [sp, #84]	; 0x54
 8015914:	78bd      	ldrb	r5, [r7, #2]
 8015916:	9517      	str	r5, [sp, #92]	; 0x5c
 8015918:	78fd      	ldrb	r5, [r7, #3]
 801591a:	9514      	str	r5, [sp, #80]	; 0x50
 801591c:	793d      	ldrb	r5, [r7, #4]
 801591e:	9516      	str	r5, [sp, #88]	; 0x58
 8015920:	797d      	ldrb	r5, [r7, #5]
 8015922:	9518      	str	r5, [sp, #96]	; 0x60
 8015924:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015928:	b292      	uxth	r2, r2
 801592a:	3603      	adds	r6, #3
 801592c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015930:	fb03 f502 	mul.w	r5, r3, r2
 8015934:	011b      	lsls	r3, r3, #4
 8015936:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801593a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801593e:	1b5b      	subs	r3, r3, r5
 8015940:	b292      	uxth	r2, r2
 8015942:	b29b      	uxth	r3, r3
 8015944:	1abf      	subs	r7, r7, r2
 8015946:	fb03 f909 	mul.w	r9, r3, r9
 801594a:	b2bf      	uxth	r7, r7
 801594c:	fb03 fa0a 	mul.w	sl, r3, sl
 8015950:	fb07 9901 	mla	r9, r7, r1, r9
 8015954:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015956:	fb07 aa00 	mla	sl, r7, r0, sl
 801595a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801595c:	fb02 9901 	mla	r9, r2, r1, r9
 8015960:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015962:	fb02 aa00 	mla	sl, r2, r0, sl
 8015966:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015968:	fb05 9901 	mla	r9, r5, r1, r9
 801596c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801596e:	fb05 aa00 	mla	sl, r5, r0, sl
 8015972:	434b      	muls	r3, r1
 8015974:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015976:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801597a:	fb07 3308 	mla	r3, r7, r8, r3
 801597e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015982:	f806 ac06 	strb.w	sl, [r6, #-6]
 8015986:	fb02 3201 	mla	r2, r2, r1, r3
 801598a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801598c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8015990:	fb05 2503 	mla	r5, r5, r3, r2
 8015994:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015996:	122d      	asrs	r5, r5, #8
 8015998:	449b      	add	fp, r3
 801599a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801599c:	f806 5c04 	strb.w	r5, [r6, #-4]
 80159a0:	441c      	add	r4, r3
 80159a2:	e72b      	b.n	80157fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80159a4:	b01b      	add	sp, #108	; 0x6c
 80159a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80159aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ae:	b087      	sub	sp, #28
 80159b0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80159b4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80159b8:	fb05 7003 	mla	r0, r5, r3, r7
 80159bc:	2d00      	cmp	r5, #0
 80159be:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80159c2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80159c6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80159ca:	f2c0 811f 	blt.w	8015c0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80159ce:	45a8      	cmp	r8, r5
 80159d0:	f340 811c 	ble.w	8015c0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80159d4:	2f00      	cmp	r7, #0
 80159d6:	f2c0 8117 	blt.w	8015c08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159da:	42bb      	cmp	r3, r7
 80159dc:	f340 8114 	ble.w	8015c08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80159e0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80159e4:	1c7a      	adds	r2, r7, #1
 80159e6:	f100 8114 	bmi.w	8015c12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159ea:	4293      	cmp	r3, r2
 80159ec:	f340 8111 	ble.w	8015c12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80159f0:	2c00      	cmp	r4, #0
 80159f2:	f000 8110 	beq.w	8015c16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80159f6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80159fa:	3501      	adds	r5, #1
 80159fc:	f100 810f 	bmi.w	8015c1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8015a00:	45a8      	cmp	r8, r5
 8015a02:	f340 810c 	ble.w	8015c1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8015a06:	f1be 0f00 	cmp.w	lr, #0
 8015a0a:	f000 810b 	beq.w	8015c24 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8015a0e:	2f00      	cmp	r7, #0
 8015a10:	f2c0 8103 	blt.w	8015c1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8015a14:	42bb      	cmp	r3, r7
 8015a16:	f340 8100 	ble.w	8015c1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8015a1a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8015a1e:	3701      	adds	r7, #1
 8015a20:	f100 8103 	bmi.w	8015c2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8015a24:	42bb      	cmp	r3, r7
 8015a26:	f340 8100 	ble.w	8015c2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8015a2a:	2c00      	cmp	r4, #0
 8015a2c:	f000 80ff 	beq.w	8015c2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8015a30:	3301      	adds	r3, #1
 8015a32:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015a36:	fa1f fc84 	uxth.w	ip, r4
 8015a3a:	fa1f fe8e 	uxth.w	lr, lr
 8015a3e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8015a42:	fb0c f90e 	mul.w	r9, ip, lr
 8015a46:	0e13      	lsrs	r3, r2, #24
 8015a48:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8015a4c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8015a50:	9302      	str	r3, [sp, #8]
 8015a52:	ebac 0709 	sub.w	r7, ip, r9
 8015a56:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8015a5a:	fa1f f48e 	uxth.w	r4, lr
 8015a5e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8015a62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015a66:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8015a6a:	fb0a fe0e 	mul.w	lr, sl, lr
 8015a6e:	1b1b      	subs	r3, r3, r4
 8015a70:	fb0a f606 	mul.w	r6, sl, r6
 8015a74:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8015a78:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8015a7c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015a86:	b2bf      	uxth	r7, r7
 8015a88:	9301      	str	r3, [sp, #4]
 8015a8a:	44e6      	add	lr, ip
 8015a8c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8015a90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015a94:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8015a98:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8015a9c:	9303      	str	r3, [sp, #12]
 8015a9e:	0a33      	lsrs	r3, r6, #8
 8015aa0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8015aa4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015aa8:	9304      	str	r3, [sp, #16]
 8015aaa:	fb0b f606 	mul.w	r6, fp, r6
 8015aae:	fb0b f000 	mul.w	r0, fp, r0
 8015ab2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8015ab6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015aba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015abe:	44b6      	add	lr, r6
 8015ac0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8015ac4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8015ac8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8015acc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8015ad0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015ad4:	fb08 f606 	mul.w	r6, r8, r6
 8015ad8:	0a03      	lsrs	r3, r0, #8
 8015ada:	fb08 f505 	mul.w	r5, r8, r5
 8015ade:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015ae2:	0a30      	lsrs	r0, r6, #8
 8015ae4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015ae8:	9305      	str	r3, [sp, #20]
 8015aea:	0e13      	lsrs	r3, r2, #24
 8015aec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015af0:	fb0e fe07 	mul.w	lr, lr, r7
 8015af4:	4430      	add	r0, r6
 8015af6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8015afa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8015afe:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8015b02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015b06:	0a00      	lsrs	r0, r0, #8
 8015b08:	435e      	muls	r6, r3
 8015b0a:	0a2d      	lsrs	r5, r5, #8
 8015b0c:	435a      	muls	r2, r3
 8015b0e:	9b03      	ldr	r3, [sp, #12]
 8015b10:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8015b14:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8015b18:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015b1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b20:	44b4      	add	ip, r6
 8015b22:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8015b26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b2a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8015b2e:	9e01      	ldr	r6, [sp, #4]
 8015b30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b34:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b38:	9b04      	ldr	r3, [sp, #16]
 8015b3a:	0a12      	lsrs	r2, r2, #8
 8015b3c:	fb0c ee09 	mla	lr, ip, r9, lr
 8015b40:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8015b44:	9b05      	ldr	r3, [sp, #20]
 8015b46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015b4a:	fb00 ee04 	mla	lr, r0, r4, lr
 8015b4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b52:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8015b56:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8015b5a:	9b01      	ldr	r3, [sp, #4]
 8015b5c:	fb07 fe0e 	mul.w	lr, r7, lr
 8015b60:	fb07 f70b 	mul.w	r7, r7, fp
 8015b64:	fb03 ee06 	mla	lr, r3, r6, lr
 8015b68:	fb03 730a 	mla	r3, r3, sl, r7
 8015b6c:	fb09 e202 	mla	r2, r9, r2, lr
 8015b70:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8015b74:	fb04 2e0e 	mla	lr, r4, lr, r2
 8015b78:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8015b7c:	fb04 3408 	mla	r4, r4, r8, r3
 8015b80:	9b02      	ldr	r3, [sp, #8]
 8015b82:	b292      	uxth	r2, r2
 8015b84:	fb09 4903 	mla	r9, r9, r3, r4
 8015b88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015b8c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8015b90:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015b94:	fb09 f902 	mul.w	r9, r9, r2
 8015b98:	ea40 0e0e 	orr.w	lr, r0, lr
 8015b9c:	f109 0301 	add.w	r3, r9, #1
 8015ba0:	fa5f f08e 	uxtb.w	r0, lr
 8015ba4:	fb10 f002 	smulbb	r0, r0, r2
 8015ba8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8015bac:	780b      	ldrb	r3, [r1, #0]
 8015bae:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8015bb2:	fa5f f989 	uxtb.w	r9, r9
 8015bb6:	fb03 0309 	mla	r3, r3, r9, r0
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	1c58      	adds	r0, r3, #1
 8015bbe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015bc2:	7848      	ldrb	r0, [r1, #1]
 8015bc4:	fb10 f009 	smulbb	r0, r0, r9
 8015bc8:	121b      	asrs	r3, r3, #8
 8015bca:	700b      	strb	r3, [r1, #0]
 8015bcc:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8015bd0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015bd4:	fb03 0302 	mla	r3, r3, r2, r0
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	1c58      	adds	r0, r3, #1
 8015bdc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8015be0:	121b      	asrs	r3, r3, #8
 8015be2:	704b      	strb	r3, [r1, #1]
 8015be4:	788b      	ldrb	r3, [r1, #2]
 8015be6:	fb13 f909 	smulbb	r9, r3, r9
 8015bea:	fb0e 9e02 	mla	lr, lr, r2, r9
 8015bee:	fa1f fe8e 	uxth.w	lr, lr
 8015bf2:	f10e 0301 	add.w	r3, lr, #1
 8015bf6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8015bfa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015bfe:	f881 e002 	strb.w	lr, [r1, #2]
 8015c02:	b007      	add	sp, #28
 8015c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c08:	2600      	movs	r6, #0
 8015c0a:	e6eb      	b.n	80159e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8015c0c:	2000      	movs	r0, #0
 8015c0e:	4606      	mov	r6, r0
 8015c10:	e6f3      	b.n	80159fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c12:	2000      	movs	r0, #0
 8015c14:	e6f1      	b.n	80159fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c16:	4620      	mov	r0, r4
 8015c18:	e6ef      	b.n	80159fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8015c1a:	2500      	movs	r5, #0
 8015c1c:	e6ff      	b.n	8015a1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8015c1e:	2200      	movs	r2, #0
 8015c20:	4615      	mov	r5, r2
 8015c22:	e708      	b.n	8015a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c24:	4672      	mov	r2, lr
 8015c26:	4675      	mov	r5, lr
 8015c28:	e705      	b.n	8015a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	e703      	b.n	8015a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8015c2e:	4622      	mov	r2, r4
 8015c30:	e701      	b.n	8015a36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08015c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c36:	b09d      	sub	sp, #116	; 0x74
 8015c38:	9219      	str	r2, [sp, #100]	; 0x64
 8015c3a:	9307      	str	r3, [sp, #28]
 8015c3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8015c3e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8015c42:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c44:	931a      	str	r3, [sp, #104]	; 0x68
 8015c46:	6850      	ldr	r0, [r2, #4]
 8015c48:	9117      	str	r1, [sp, #92]	; 0x5c
 8015c4a:	6812      	ldr	r2, [r2, #0]
 8015c4c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8015c50:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8015c54:	fb00 1303 	mla	r3, r0, r3, r1
 8015c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c5c:	18d3      	adds	r3, r2, r3
 8015c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c60:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	9310      	str	r3, [sp, #64]	; 0x40
 8015c66:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8015c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	dc03      	bgt.n	8015c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015c72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f340 8368 	ble.w	801634a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015c7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c7c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015c80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015c84:	1e48      	subs	r0, r1, #1
 8015c86:	1e57      	subs	r7, r2, #1
 8015c88:	9b07      	ldr	r3, [sp, #28]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f340 8187 	ble.w	8015f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8015c90:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8015c94:	ea4f 4326 	mov.w	r3, r6, asr #16
 8015c98:	d406      	bmi.n	8015ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c9a:	4584      	cmp	ip, r0
 8015c9c:	da04      	bge.n	8015ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	db02      	blt.n	8015ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015ca2:	42bb      	cmp	r3, r7
 8015ca4:	f2c0 817c 	blt.w	8015fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015ca8:	f11c 0c01 	adds.w	ip, ip, #1
 8015cac:	f100 816c 	bmi.w	8015f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cb0:	4561      	cmp	r1, ip
 8015cb2:	f2c0 8169 	blt.w	8015f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	f100 8166 	bmi.w	8015f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	f2c0 8163 	blt.w	8015f88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8015cc2:	9b07      	ldr	r3, [sp, #28]
 8015cc4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015cc6:	9318      	str	r3, [sp, #96]	; 0x60
 8015cc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	f340 8186 	ble.w	8015fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8015cd0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015cd2:	142a      	asrs	r2, r5, #16
 8015cd4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8015cd8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015cdc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8015ce0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8015ce4:	f100 81cb 	bmi.w	801607e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015ce8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015cec:	4542      	cmp	r2, r8
 8015cee:	f280 81c6 	bge.w	801607e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	f2c0 81c3 	blt.w	801607e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015cf8:	f103 38ff 	add.w	r8, r3, #4294967295
 8015cfc:	4540      	cmp	r0, r8
 8015cfe:	f280 81be 	bge.w	801607e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8015d02:	fa0f f38e 	sxth.w	r3, lr
 8015d06:	fb00 2203 	mla	r2, r0, r3, r2
 8015d0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015d0c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8015d10:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8015d14:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8015d18:	2900      	cmp	r1, #0
 8015d1a:	f000 81a6 	beq.w	801606a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8015d1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d22:	900c      	str	r0, [sp, #48]	; 0x30
 8015d24:	0e00      	lsrs	r0, r0, #24
 8015d26:	9013      	str	r0, [sp, #76]	; 0x4c
 8015d28:	f1bc 0f00 	cmp.w	ip, #0
 8015d2c:	d00f      	beq.n	8015d4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8015d2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d32:	3b01      	subs	r3, #1
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	3304      	adds	r3, #4
 8015d38:	eb08 0003 	add.w	r0, r8, r3
 8015d3c:	f858 3003 	ldr.w	r3, [r8, r3]
 8015d40:	9308      	str	r3, [sp, #32]
 8015d42:	0e1b      	lsrs	r3, r3, #24
 8015d44:	9311      	str	r3, [sp, #68]	; 0x44
 8015d46:	6843      	ldr	r3, [r0, #4]
 8015d48:	930d      	str	r3, [sp, #52]	; 0x34
 8015d4a:	0e1b      	lsrs	r3, r3, #24
 8015d4c:	9314      	str	r3, [sp, #80]	; 0x50
 8015d4e:	b289      	uxth	r1, r1
 8015d50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015d52:	fa1f fc8c 	uxth.w	ip, ip
 8015d56:	0108      	lsls	r0, r1, #4
 8015d58:	fb01 f90c 	mul.w	r9, r1, ip
 8015d5c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8015d60:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8015d64:	eba0 0809 	sub.w	r8, r0, r9
 8015d68:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015d6a:	fa1f f18c 	uxth.w	r1, ip
 8015d6e:	fa1f f888 	uxth.w	r8, r8
 8015d72:	1a5b      	subs	r3, r3, r1
 8015d74:	fb08 f000 	mul.w	r0, r8, r0
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	fb03 000e 	mla	r0, r3, lr, r0
 8015d7e:	fb01 0004 	mla	r0, r1, r4, r0
 8015d82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015d84:	fb09 0004 	mla	r0, r9, r4, r0
 8015d88:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015d8c:	2800      	cmp	r0, #0
 8015d8e:	f000 80f2 	beq.w	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8015d92:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015d96:	d01b      	beq.n	8015dd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8015d98:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8015d9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015da0:	fb0e fa0a 	mul.w	sl, lr, sl
 8015da4:	fb0e fe02 	mul.w	lr, lr, r2
 8015da8:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8015dac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015db0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015db4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015db8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015dbc:	4452      	add	r2, sl
 8015dbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015dc2:	0a12      	lsrs	r2, r2, #8
 8015dc4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015dc8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015dcc:	ea42 020c 	orr.w	r2, r2, ip
 8015dd0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dd2:	2cff      	cmp	r4, #255	; 0xff
 8015dd4:	d021      	beq.n	8015e1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8015dd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015dd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015ddc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dde:	fb04 fb0b 	mul.w	fp, r4, fp
 8015de2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015de4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015de8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015dee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015df2:	fb04 fa0a 	mul.w	sl, r4, sl
 8015df6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015dfa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015dfe:	44de      	add	lr, fp
 8015e00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e14:	ea4e 040a 	orr.w	r4, lr, sl
 8015e18:	940c      	str	r4, [sp, #48]	; 0x30
 8015e1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e1c:	2cff      	cmp	r4, #255	; 0xff
 8015e1e:	d021      	beq.n	8015e64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8015e20:	9c08      	ldr	r4, [sp, #32]
 8015e22:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e26:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e28:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e2c:	9c08      	ldr	r4, [sp, #32]
 8015e2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e32:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015e34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e48:	44de      	add	lr, fp
 8015e4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015e56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015e5e:	ea4e 040a 	orr.w	r4, lr, sl
 8015e62:	9408      	str	r4, [sp, #32]
 8015e64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e66:	2cff      	cmp	r4, #255	; 0xff
 8015e68:	d021      	beq.n	8015eae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8015e6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e6c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e72:	fb04 fb0b 	mul.w	fp, r4, fp
 8015e76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015e7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015e7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015e82:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015e86:	fb04 fa0a 	mul.w	sl, r4, sl
 8015e8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015e8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015e92:	44de      	add	lr, fp
 8015e94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015e98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015e9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ea0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015ea4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015ea8:	ea4e 040a 	orr.w	r4, lr, sl
 8015eac:	940d      	str	r4, [sp, #52]	; 0x34
 8015eae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015eb0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8015eb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015eb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015ebc:	9c08      	ldr	r4, [sp, #32]
 8015ebe:	fb08 fc0c 	mul.w	ip, r8, ip
 8015ec2:	fb03 cc0e 	mla	ip, r3, lr, ip
 8015ec6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015eca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015ecc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015ed0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015ed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015ed6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015eda:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015ede:	fb08 f80e 	mul.w	r8, r8, lr
 8015ee2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015ee6:	fb03 8202 	mla	r2, r3, r2, r8
 8015eea:	9b08      	ldr	r3, [sp, #32]
 8015eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ef0:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8015ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ef6:	fb01 220a 	mla	r2, r1, sl, r2
 8015efa:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8015efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f00:	fb09 2901 	mla	r9, r9, r1, r2
 8015f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f06:	4343      	muls	r3, r0
 8015f08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015f0c:	1c58      	adds	r0, r3, #1
 8015f0e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015f12:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8015f16:	783b      	ldrb	r3, [r7, #0]
 8015f18:	ea4c 0c09 	orr.w	ip, ip, r9
 8015f1c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8015f20:	fa5f f28c 	uxtb.w	r2, ip
 8015f24:	b2c0      	uxtb	r0, r0
 8015f26:	fb12 f201 	smulbb	r2, r2, r1
 8015f2a:	fb03 2300 	mla	r3, r3, r0, r2
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	1c5a      	adds	r2, r3, #1
 8015f32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f36:	787a      	ldrb	r2, [r7, #1]
 8015f38:	fb12 f200 	smulbb	r2, r2, r0
 8015f3c:	121b      	asrs	r3, r3, #8
 8015f3e:	703b      	strb	r3, [r7, #0]
 8015f40:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015f44:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015f48:	fb03 2301 	mla	r3, r3, r1, r2
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	1c5a      	adds	r2, r3, #1
 8015f50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015f54:	121b      	asrs	r3, r3, #8
 8015f56:	707b      	strb	r3, [r7, #1]
 8015f58:	78bb      	ldrb	r3, [r7, #2]
 8015f5a:	fb13 f000 	smulbb	r0, r3, r0
 8015f5e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8015f62:	fa1f fc8c 	uxth.w	ip, ip
 8015f66:	f10c 0301 	add.w	r3, ip, #1
 8015f6a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015f6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015f72:	f887 c002 	strb.w	ip, [r7, #2]
 8015f76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f78:	3703      	adds	r7, #3
 8015f7a:	441d      	add	r5, r3
 8015f7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f7e:	441e      	add	r6, r3
 8015f80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015f82:	3b01      	subs	r3, #1
 8015f84:	9318      	str	r3, [sp, #96]	; 0x60
 8015f86:	e69f      	b.n	8015cc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015f88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015f8a:	441d      	add	r5, r3
 8015f8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015f8e:	441e      	add	r6, r3
 8015f90:	9b07      	ldr	r3, [sp, #28]
 8015f92:	3b01      	subs	r3, #1
 8015f94:	9307      	str	r3, [sp, #28]
 8015f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f98:	3303      	adds	r3, #3
 8015f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f9c:	e674      	b.n	8015c88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8015f9e:	d025      	beq.n	8015fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8015fa0:	9b07      	ldr	r3, [sp, #28]
 8015fa2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015fa4:	3b01      	subs	r3, #1
 8015fa6:	fb00 5003 	mla	r0, r0, r3, r5
 8015faa:	1400      	asrs	r0, r0, #16
 8015fac:	f53f ae89 	bmi.w	8015cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fb0:	3901      	subs	r1, #1
 8015fb2:	4288      	cmp	r0, r1
 8015fb4:	f6bf ae85 	bge.w	8015cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fb8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8015fba:	fb01 6303 	mla	r3, r1, r3, r6
 8015fbe:	141b      	asrs	r3, r3, #16
 8015fc0:	f53f ae7f 	bmi.w	8015cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fc4:	3a01      	subs	r2, #1
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	f6bf ae7b 	bge.w	8015cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8015fd2:	f103 0e03 	add.w	lr, r3, #3
 8015fd6:	f1bb 0f00 	cmp.w	fp, #0
 8015fda:	dc6e      	bgt.n	80160ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8015fdc:	9b07      	ldr	r3, [sp, #28]
 8015fde:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fe4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015fe8:	4423      	add	r3, r4
 8015fea:	930a      	str	r3, [sp, #40]	; 0x28
 8015fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f340 81ab 	ble.w	801634a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8015ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015ff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015ffa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015ffe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016002:	eef0 6a62 	vmov.f32	s13, s5
 8016006:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801600a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801600e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016012:	ee16 5a90 	vmov	r5, s13
 8016016:	eef0 6a43 	vmov.f32	s13, s6
 801601a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801601e:	ee16 6a90 	vmov	r6, s13
 8016022:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016026:	ee61 7a27 	vmul.f32	s15, s2, s15
 801602a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801602e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016032:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016036:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801603a:	ee12 2a90 	vmov	r2, s5
 801603e:	eef0 2a47 	vmov.f32	s5, s14
 8016042:	fb92 f3f3 	sdiv	r3, r2, r3
 8016046:	ee13 2a10 	vmov	r2, s6
 801604a:	9329      	str	r3, [sp, #164]	; 0xa4
 801604c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801604e:	eeb0 3a67 	vmov.f32	s6, s15
 8016052:	fb92 f3f3 	sdiv	r3, r2, r3
 8016056:	932a      	str	r3, [sp, #168]	; 0xa8
 8016058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801605a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801605c:	3b01      	subs	r3, #1
 801605e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016060:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016062:	bf08      	it	eq
 8016064:	4613      	moveq	r3, r2
 8016066:	9307      	str	r3, [sp, #28]
 8016068:	e600      	b.n	8015c6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801606a:	f1bc 0f00 	cmp.w	ip, #0
 801606e:	f43f ae6e 	beq.w	8015d4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016072:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016076:	9308      	str	r3, [sp, #32]
 8016078:	0e1b      	lsrs	r3, r3, #24
 801607a:	9311      	str	r3, [sp, #68]	; 0x44
 801607c:	e667      	b.n	8015d4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801607e:	f112 0801 	adds.w	r8, r2, #1
 8016082:	f53f af78 	bmi.w	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016086:	45c6      	cmp	lr, r8
 8016088:	f6ff af75 	blt.w	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801608c:	f110 0801 	adds.w	r8, r0, #1
 8016090:	f53f af71 	bmi.w	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016094:	4543      	cmp	r3, r8
 8016096:	f6ff af6e 	blt.w	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801609a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801609c:	b21b      	sxth	r3, r3
 801609e:	9201      	str	r2, [sp, #4]
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	fa0f f38e 	sxth.w	r3, lr
 80160a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160ac:	e9cd c404 	strd	ip, r4, [sp, #16]
 80160b0:	4639      	mov	r1, r7
 80160b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80160b4:	f7ff fc79 	bl	80159aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80160b8:	e75d      	b.n	8015f76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80160ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80160bc:	142f      	asrs	r7, r5, #16
 80160be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80160c0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80160c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80160c8:	1433      	asrs	r3, r6, #16
 80160ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80160ce:	fb02 7303 	mla	r3, r2, r3, r7
 80160d2:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80160d6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80160da:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80160de:	2900      	cmp	r1, #0
 80160e0:	f000 812a 	beq.w	8016338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80160e4:	687c      	ldr	r4, [r7, #4]
 80160e6:	940e      	str	r4, [sp, #56]	; 0x38
 80160e8:	0e24      	lsrs	r4, r4, #24
 80160ea:	9415      	str	r4, [sp, #84]	; 0x54
 80160ec:	b178      	cbz	r0, 801610e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80160ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80160f2:	3a01      	subs	r2, #1
 80160f4:	0092      	lsls	r2, r2, #2
 80160f6:	3204      	adds	r2, #4
 80160f8:	eb07 0802 	add.w	r8, r7, r2
 80160fc:	58ba      	ldr	r2, [r7, r2]
 80160fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016100:	0e12      	lsrs	r2, r2, #24
 8016102:	9212      	str	r2, [sp, #72]	; 0x48
 8016104:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016108:	920f      	str	r2, [sp, #60]	; 0x3c
 801610a:	0e12      	lsrs	r2, r2, #24
 801610c:	9216      	str	r2, [sp, #88]	; 0x58
 801610e:	b289      	uxth	r1, r1
 8016110:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016112:	b280      	uxth	r0, r0
 8016114:	fb01 f900 	mul.w	r9, r1, r0
 8016118:	0109      	lsls	r1, r1, #4
 801611a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801611e:	eba1 0809 	sub.w	r8, r1, r9
 8016122:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8016126:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016128:	b280      	uxth	r0, r0
 801612a:	fa1f f888 	uxth.w	r8, r8
 801612e:	1a12      	subs	r2, r2, r0
 8016130:	fb08 f101 	mul.w	r1, r8, r1
 8016134:	b292      	uxth	r2, r2
 8016136:	fb02 110c 	mla	r1, r2, ip, r1
 801613a:	fb00 1104 	mla	r1, r0, r4, r1
 801613e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016140:	fb09 1104 	mla	r1, r9, r4, r1
 8016144:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016148:	2900      	cmp	r1, #0
 801614a:	f000 80ec 	beq.w	8016326 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801614e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016152:	d019      	beq.n	8016188 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8016154:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801615c:	fb0c fa0a 	mul.w	sl, ip, sl
 8016160:	fb0c fc03 	mul.w	ip, ip, r3
 8016164:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016168:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801616c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016170:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016174:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016178:	4453      	add	r3, sl
 801617a:	0a3f      	lsrs	r7, r7, #8
 801617c:	0a1b      	lsrs	r3, r3, #8
 801617e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016182:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016186:	433b      	orrs	r3, r7
 8016188:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801618a:	2cff      	cmp	r4, #255	; 0xff
 801618c:	d020      	beq.n	80161d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801618e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016190:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016194:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016196:	4367      	muls	r7, r4
 8016198:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801619a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801619e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80161a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80161a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80161a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80161b0:	44bc      	add	ip, r7
 80161b2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80161ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80161c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80161ca:	ea4c 040a 	orr.w	r4, ip, sl
 80161ce:	940e      	str	r4, [sp, #56]	; 0x38
 80161d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161d2:	2cff      	cmp	r4, #255	; 0xff
 80161d4:	d020      	beq.n	8016218 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80161d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161d8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80161dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161de:	4367      	muls	r7, r4
 80161e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80161e6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80161ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80161ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80161f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80161f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80161f8:	44bc      	add	ip, r7
 80161fa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80161fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016202:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016206:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801620a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801620e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016212:	ea4c 040a 	orr.w	r4, ip, sl
 8016216:	9409      	str	r4, [sp, #36]	; 0x24
 8016218:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801621a:	2cff      	cmp	r4, #255	; 0xff
 801621c:	d020      	beq.n	8016260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801621e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016220:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016224:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016226:	4367      	muls	r7, r4
 8016228:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801622a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801622e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016232:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016234:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016238:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801623c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016240:	44bc      	add	ip, r7
 8016242:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016246:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801624a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801624e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016252:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016256:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801625a:	ea4c 040a 	orr.w	r4, ip, sl
 801625e:	940f      	str	r4, [sp, #60]	; 0x3c
 8016260:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016262:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801626a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801626e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016270:	fb08 f707 	mul.w	r7, r8, r7
 8016274:	fb02 770c 	mla	r7, r2, ip, r7
 8016278:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801627c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801627e:	fb00 770c 	mla	r7, r0, ip, r7
 8016282:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016286:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016288:	fb09 770c 	mla	r7, r9, ip, r7
 801628c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8016290:	fb08 f80c 	mul.w	r8, r8, ip
 8016294:	0a3f      	lsrs	r7, r7, #8
 8016296:	fb02 8303 	mla	r3, r2, r3, r8
 801629a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801629c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80162a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80162a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162a6:	fb00 330a 	mla	r3, r0, sl, r3
 80162aa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80162ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80162b0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80162b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80162ba:	434b      	muls	r3, r1
 80162bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80162c0:	1c59      	adds	r1, r3, #1
 80162c2:	ea47 070c 	orr.w	r7, r7, ip
 80162c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80162ca:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80162ce:	b2fa      	uxtb	r2, r7
 80162d0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80162d4:	fb12 f200 	smulbb	r2, r2, r0
 80162d8:	b2c9      	uxtb	r1, r1
 80162da:	fb03 2301 	mla	r3, r3, r1, r2
 80162de:	b29b      	uxth	r3, r3
 80162e0:	1c5a      	adds	r2, r3, #1
 80162e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80162e6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80162ea:	fb12 f201 	smulbb	r2, r2, r1
 80162ee:	121b      	asrs	r3, r3, #8
 80162f0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80162f4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80162f8:	0c3f      	lsrs	r7, r7, #16
 80162fa:	fb03 2300 	mla	r3, r3, r0, r2
 80162fe:	b29b      	uxth	r3, r3
 8016300:	1c5a      	adds	r2, r3, #1
 8016302:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016306:	121b      	asrs	r3, r3, #8
 8016308:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801630c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8016310:	fb13 f101 	smulbb	r1, r3, r1
 8016314:	fb07 1700 	mla	r7, r7, r0, r1
 8016318:	b2bf      	uxth	r7, r7
 801631a:	1c79      	adds	r1, r7, #1
 801631c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8016320:	123f      	asrs	r7, r7, #8
 8016322:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8016326:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016328:	f10e 0e03 	add.w	lr, lr, #3
 801632c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016330:	441d      	add	r5, r3
 8016332:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016334:	441e      	add	r6, r3
 8016336:	e64e      	b.n	8015fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8016338:	2800      	cmp	r0, #0
 801633a:	f43f aee8 	beq.w	801610e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801633e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016342:	9209      	str	r2, [sp, #36]	; 0x24
 8016344:	0e12      	lsrs	r2, r2, #24
 8016346:	9212      	str	r2, [sp, #72]	; 0x48
 8016348:	e6e1      	b.n	801610e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801634a:	b01d      	add	sp, #116	; 0x74
 801634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016350 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8016350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016354:	b087      	sub	sp, #28
 8016356:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801635a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801635e:	fb05 7003 	mla	r0, r5, r3, r7
 8016362:	2d00      	cmp	r5, #0
 8016364:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016368:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801636c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8016370:	f2c0 810a 	blt.w	8016588 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8016374:	45a8      	cmp	r8, r5
 8016376:	f340 8107 	ble.w	8016588 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801637a:	2f00      	cmp	r7, #0
 801637c:	f2c0 8102 	blt.w	8016584 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016380:	42bb      	cmp	r3, r7
 8016382:	f340 80ff 	ble.w	8016584 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8016386:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801638a:	1c7a      	adds	r2, r7, #1
 801638c:	f100 80ff 	bmi.w	801658e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016390:	4293      	cmp	r3, r2
 8016392:	f340 80fc 	ble.w	801658e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8016396:	2c00      	cmp	r4, #0
 8016398:	f000 80fb 	beq.w	8016592 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801639c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80163a0:	3501      	adds	r5, #1
 80163a2:	f100 80fa 	bmi.w	801659a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80163a6:	45a8      	cmp	r8, r5
 80163a8:	f340 80f7 	ble.w	801659a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80163ac:	f1be 0f00 	cmp.w	lr, #0
 80163b0:	f000 80f6 	beq.w	80165a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80163b4:	2f00      	cmp	r7, #0
 80163b6:	f2c0 80ee 	blt.w	8016596 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80163ba:	42bb      	cmp	r3, r7
 80163bc:	f340 80eb 	ble.w	8016596 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80163c0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80163c4:	3701      	adds	r7, #1
 80163c6:	f100 80ee 	bmi.w	80165a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80163ca:	42bb      	cmp	r3, r7
 80163cc:	f340 80eb 	ble.w	80165a6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80163d0:	2c00      	cmp	r4, #0
 80163d2:	f000 80ea 	beq.w	80165aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80163d6:	3301      	adds	r3, #1
 80163d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163dc:	fa1f fc84 	uxth.w	ip, r4
 80163e0:	fa1f fe8e 	uxth.w	lr, lr
 80163e4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80163e8:	fb0c f90e 	mul.w	r9, ip, lr
 80163ec:	0e13      	lsrs	r3, r2, #24
 80163ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80163f2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80163f6:	9302      	str	r3, [sp, #8]
 80163f8:	ebac 0709 	sub.w	r7, ip, r9
 80163fc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8016400:	fa1f f48e 	uxth.w	r4, lr
 8016404:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8016408:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801640c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8016410:	fb0a fe0e 	mul.w	lr, sl, lr
 8016414:	1b1b      	subs	r3, r3, r4
 8016416:	fb0a f606 	mul.w	r6, sl, r6
 801641a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801641e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8016422:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8016426:	b29b      	uxth	r3, r3
 8016428:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801642c:	b2bf      	uxth	r7, r7
 801642e:	9301      	str	r3, [sp, #4]
 8016430:	44e6      	add	lr, ip
 8016432:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016436:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801643a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801643e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8016442:	9303      	str	r3, [sp, #12]
 8016444:	0a33      	lsrs	r3, r6, #8
 8016446:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801644a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801644e:	9304      	str	r3, [sp, #16]
 8016450:	fb0b f606 	mul.w	r6, fp, r6
 8016454:	fb0b f000 	mul.w	r0, fp, r0
 8016458:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801645c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8016460:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016464:	44b6      	add	lr, r6
 8016466:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801646a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801646e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8016472:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016476:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801647a:	fb08 f606 	mul.w	r6, r8, r6
 801647e:	0a03      	lsrs	r3, r0, #8
 8016480:	fb08 f505 	mul.w	r5, r8, r5
 8016484:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016488:	0a30      	lsrs	r0, r6, #8
 801648a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801648e:	9305      	str	r3, [sp, #20]
 8016490:	0e13      	lsrs	r3, r2, #24
 8016492:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016496:	fb0e fe07 	mul.w	lr, lr, r7
 801649a:	4430      	add	r0, r6
 801649c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80164a0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80164a4:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80164a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80164ac:	0a00      	lsrs	r0, r0, #8
 80164ae:	435e      	muls	r6, r3
 80164b0:	0a2d      	lsrs	r5, r5, #8
 80164b2:	435a      	muls	r2, r3
 80164b4:	9b03      	ldr	r3, [sp, #12]
 80164b6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80164ba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80164be:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80164c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80164c6:	44b4      	add	ip, r6
 80164c8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80164cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80164d0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80164d4:	9e01      	ldr	r6, [sp, #4]
 80164d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80164da:	fb03 ee06 	mla	lr, r3, r6, lr
 80164de:	9b04      	ldr	r3, [sp, #16]
 80164e0:	0a12      	lsrs	r2, r2, #8
 80164e2:	fb0c ee09 	mla	lr, ip, r9, lr
 80164e6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80164ea:	9b05      	ldr	r3, [sp, #20]
 80164ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80164f0:	fb00 ee04 	mla	lr, r0, r4, lr
 80164f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80164f8:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80164fc:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8016500:	9b01      	ldr	r3, [sp, #4]
 8016502:	fb07 fe0e 	mul.w	lr, r7, lr
 8016506:	fb07 f70b 	mul.w	r7, r7, fp
 801650a:	fb03 ee06 	mla	lr, r3, r6, lr
 801650e:	fb03 730a 	mla	r3, r3, sl, r7
 8016512:	fb09 e202 	mla	r2, r9, r2, lr
 8016516:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801651a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801651e:	fb04 3408 	mla	r4, r4, r8, r3
 8016522:	9b02      	ldr	r3, [sp, #8]
 8016524:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016528:	fb09 4903 	mla	r9, r9, r3, r4
 801652c:	780b      	ldrb	r3, [r1, #0]
 801652e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016532:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8016536:	ea40 0e0e 	orr.w	lr, r0, lr
 801653a:	fa5f f989 	uxtb.w	r9, r9
 801653e:	fb03 f209 	mul.w	r2, r3, r9
 8016542:	1c53      	adds	r3, r2, #1
 8016544:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016548:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801654c:	700b      	strb	r3, [r1, #0]
 801654e:	784b      	ldrb	r3, [r1, #1]
 8016550:	fb03 f309 	mul.w	r3, r3, r9
 8016554:	1c5a      	adds	r2, r3, #1
 8016556:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801655a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801655e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8016562:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016566:	704b      	strb	r3, [r1, #1]
 8016568:	788b      	ldrb	r3, [r1, #2]
 801656a:	fb03 f909 	mul.w	r9, r3, r9
 801656e:	f109 0301 	add.w	r3, r9, #1
 8016572:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8016576:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801657a:	f881 e002 	strb.w	lr, [r1, #2]
 801657e:	b007      	add	sp, #28
 8016580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016584:	2600      	movs	r6, #0
 8016586:	e700      	b.n	801638a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8016588:	2000      	movs	r0, #0
 801658a:	4606      	mov	r6, r0
 801658c:	e708      	b.n	80163a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801658e:	2000      	movs	r0, #0
 8016590:	e706      	b.n	80163a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016592:	4620      	mov	r0, r4
 8016594:	e704      	b.n	80163a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8016596:	2500      	movs	r5, #0
 8016598:	e714      	b.n	80163c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801659a:	2200      	movs	r2, #0
 801659c:	4615      	mov	r5, r2
 801659e:	e71d      	b.n	80163dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80165a0:	4672      	mov	r2, lr
 80165a2:	4675      	mov	r5, lr
 80165a4:	e71a      	b.n	80163dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80165a6:	2200      	movs	r2, #0
 80165a8:	e718      	b.n	80163dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80165aa:	4622      	mov	r2, r4
 80165ac:	e716      	b.n	80163dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080165ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80165ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b2:	b099      	sub	sp, #100	; 0x64
 80165b4:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 80165b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80165ba:	9017      	str	r0, [sp, #92]	; 0x5c
 80165bc:	9306      	str	r3, [sp, #24]
 80165be:	6850      	ldr	r0, [r2, #4]
 80165c0:	6812      	ldr	r2, [r2, #0]
 80165c2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80165c6:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 80165ca:	fb00 1303 	mla	r3, r0, r3, r1
 80165ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165d2:	18d3      	adds	r3, r2, r3
 80165d4:	9309      	str	r3, [sp, #36]	; 0x24
 80165d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	930e      	str	r3, [sp, #56]	; 0x38
 80165dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165de:	2b00      	cmp	r3, #0
 80165e0:	dc03      	bgt.n	80165ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80165e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	f340 8360 	ble.w	8016caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80165ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80165ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80165f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80165f4:	1e48      	subs	r0, r1, #1
 80165f6:	1e57      	subs	r7, r2, #1
 80165f8:	9b06      	ldr	r3, [sp, #24]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	f340 817b 	ble.w	80168f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8016600:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8016604:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016608:	d406      	bmi.n	8016618 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801660a:	4584      	cmp	ip, r0
 801660c:	da04      	bge.n	8016618 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801660e:	2b00      	cmp	r3, #0
 8016610:	db02      	blt.n	8016618 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016612:	42bb      	cmp	r3, r7
 8016614:	f2c0 8170 	blt.w	80168f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8016618:	f11c 0c01 	adds.w	ip, ip, #1
 801661c:	f100 8160 	bmi.w	80168e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016620:	4561      	cmp	r1, ip
 8016622:	f2c0 815d 	blt.w	80168e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016626:	3301      	adds	r3, #1
 8016628:	f100 815a 	bmi.w	80168e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801662c:	429a      	cmp	r2, r3
 801662e:	f2c0 8157 	blt.w	80168e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8016632:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016636:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016638:	f1b8 0f00 	cmp.w	r8, #0
 801663c:	f340 8179 	ble.w	8016932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8016640:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016642:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8016646:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016648:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801664c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8016650:	142a      	asrs	r2, r5, #16
 8016652:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016656:	689b      	ldr	r3, [r3, #8]
 8016658:	f100 81be 	bmi.w	80169d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801665c:	f103 39ff 	add.w	r9, r3, #4294967295
 8016660:	454a      	cmp	r2, r9
 8016662:	f280 81b9 	bge.w	80169d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016666:	f1bc 0f00 	cmp.w	ip, #0
 801666a:	f2c0 81b5 	blt.w	80169d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801666e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8016672:	45cc      	cmp	ip, r9
 8016674:	f280 81b0 	bge.w	80169d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8016678:	b21b      	sxth	r3, r3
 801667a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801667c:	fb0c 2203 	mla	r2, ip, r3, r2
 8016680:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8016684:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016688:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801668c:	2900      	cmp	r1, #0
 801668e:	f000 8197 	beq.w	80169c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8016692:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8016696:	940a      	str	r4, [sp, #40]	; 0x28
 8016698:	0e24      	lsrs	r4, r4, #24
 801669a:	9411      	str	r4, [sp, #68]	; 0x44
 801669c:	b180      	cbz	r0, 80166c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801669e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80166a2:	3b01      	subs	r3, #1
 80166a4:	009b      	lsls	r3, r3, #2
 80166a6:	3304      	adds	r3, #4
 80166a8:	eb09 0c03 	add.w	ip, r9, r3
 80166ac:	f859 3003 	ldr.w	r3, [r9, r3]
 80166b0:	9307      	str	r3, [sp, #28]
 80166b2:	0e1b      	lsrs	r3, r3, #24
 80166b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80166b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80166ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80166bc:	0e1b      	lsrs	r3, r3, #24
 80166be:	9312      	str	r3, [sp, #72]	; 0x48
 80166c0:	b289      	uxth	r1, r1
 80166c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166c4:	b280      	uxth	r0, r0
 80166c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80166c8:	fb01 fa00 	mul.w	sl, r1, r0
 80166cc:	0109      	lsls	r1, r1, #4
 80166ce:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80166d2:	eba1 090a 	sub.w	r9, r1, sl
 80166d6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80166da:	b280      	uxth	r0, r0
 80166dc:	fa1f f989 	uxth.w	r9, r9
 80166e0:	1a09      	subs	r1, r1, r0
 80166e2:	fb09 f303 	mul.w	r3, r9, r3
 80166e6:	b289      	uxth	r1, r1
 80166e8:	fb01 330e 	mla	r3, r1, lr, r3
 80166ec:	fb00 3304 	mla	r3, r0, r4, r3
 80166f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80166f2:	fb0a 3304 	mla	r3, sl, r4, r3
 80166f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	f000 80e8 	beq.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8016700:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016704:	d01b      	beq.n	801673e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8016706:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801670a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801670e:	fb0e fb0b 	mul.w	fp, lr, fp
 8016712:	fb0e fe02 	mul.w	lr, lr, r2
 8016716:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801671a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801671e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016722:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016726:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801672a:	445a      	add	r2, fp
 801672c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016730:	0a12      	lsrs	r2, r2, #8
 8016732:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016736:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801673a:	ea42 020c 	orr.w	r2, r2, ip
 801673e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016740:	2cff      	cmp	r4, #255	; 0xff
 8016742:	d021      	beq.n	8016788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8016744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016746:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801674a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801674c:	fb04 fc0c 	mul.w	ip, r4, ip
 8016750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016752:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016756:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801675a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801675c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016760:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016764:	fb04 fb0b 	mul.w	fp, r4, fp
 8016768:	44e6      	add	lr, ip
 801676a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801676e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016772:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8016776:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801677a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801677e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016782:	ea4e 040b 	orr.w	r4, lr, fp
 8016786:	940a      	str	r4, [sp, #40]	; 0x28
 8016788:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801678a:	2cff      	cmp	r4, #255	; 0xff
 801678c:	d021      	beq.n	80167d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801678e:	9c07      	ldr	r4, [sp, #28]
 8016790:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016794:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016796:	fb04 fc0c 	mul.w	ip, r4, ip
 801679a:	9c07      	ldr	r4, [sp, #28]
 801679c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80167a0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80167a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80167a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80167aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80167b2:	44e6      	add	lr, ip
 80167b4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80167b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80167bc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80167c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80167c8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80167cc:	ea4e 040b 	orr.w	r4, lr, fp
 80167d0:	9407      	str	r4, [sp, #28]
 80167d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167d4:	2cff      	cmp	r4, #255	; 0xff
 80167d6:	d021      	beq.n	801681c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80167d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80167de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167e0:	fb04 fc0c 	mul.w	ip, r4, ip
 80167e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80167e6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80167ea:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80167ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167f0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80167f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80167f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80167fc:	44e6      	add	lr, ip
 80167fe:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8016802:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016806:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801680a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801680e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8016812:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8016816:	ea4e 040b 	orr.w	r4, lr, fp
 801681a:	940b      	str	r4, [sp, #44]	; 0x2c
 801681c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801681e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8016822:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016826:	2bff      	cmp	r3, #255	; 0xff
 8016828:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801682c:	9c07      	ldr	r4, [sp, #28]
 801682e:	fb09 fc0c 	mul.w	ip, r9, ip
 8016832:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016836:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801683a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801683c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016840:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016846:	fb0a cc0e 	mla	ip, sl, lr, ip
 801684a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801684e:	fb09 f90e 	mul.w	r9, r9, lr
 8016852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016856:	fb01 9202 	mla	r2, r1, r2, r9
 801685a:	9907      	ldr	r1, [sp, #28]
 801685c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016860:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8016864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016866:	fb00 220b 	mla	r2, r0, fp, r2
 801686a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801686e:	fb0a 2a00 	mla	sl, sl, r0, r2
 8016872:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016876:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801687a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801687e:	fa5f f08c 	uxtb.w	r0, ip
 8016882:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016886:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801688a:	f000 80a2 	beq.w	80169d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801688e:	43db      	mvns	r3, r3
 8016890:	783a      	ldrb	r2, [r7, #0]
 8016892:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016896:	b2db      	uxtb	r3, r3
 8016898:	fb02 fe03 	mul.w	lr, r2, r3
 801689c:	fb0a fa03 	mul.w	sl, sl, r3
 80168a0:	f10e 0201 	add.w	r2, lr, #1
 80168a4:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80168a8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80168ac:	703a      	strb	r2, [r7, #0]
 80168ae:	787a      	ldrb	r2, [r7, #1]
 80168b0:	fb02 f003 	mul.w	r0, r2, r3
 80168b4:	f10a 0301 	add.w	r3, sl, #1
 80168b8:	1c42      	adds	r2, r0, #1
 80168ba:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80168be:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80168c2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80168c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80168ca:	707a      	strb	r2, [r7, #1]
 80168cc:	f887 c002 	strb.w	ip, [r7, #2]
 80168d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168d2:	3703      	adds	r7, #3
 80168d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80168d8:	441d      	add	r5, r3
 80168da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168dc:	441e      	add	r6, r3
 80168de:	e6ab      	b.n	8016638 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80168e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80168e2:	441d      	add	r5, r3
 80168e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80168e6:	441e      	add	r6, r3
 80168e8:	9b06      	ldr	r3, [sp, #24]
 80168ea:	3b01      	subs	r3, #1
 80168ec:	9306      	str	r3, [sp, #24]
 80168ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168f0:	3303      	adds	r3, #3
 80168f2:	9309      	str	r3, [sp, #36]	; 0x24
 80168f4:	e680      	b.n	80165f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80168f6:	d024      	beq.n	8016942 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80168f8:	9b06      	ldr	r3, [sp, #24]
 80168fa:	9825      	ldr	r0, [sp, #148]	; 0x94
 80168fc:	3b01      	subs	r3, #1
 80168fe:	fb00 5003 	mla	r0, r0, r3, r5
 8016902:	1400      	asrs	r0, r0, #16
 8016904:	f53f ae95 	bmi.w	8016632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016908:	3901      	subs	r1, #1
 801690a:	4288      	cmp	r0, r1
 801690c:	f6bf ae91 	bge.w	8016632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016910:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016912:	fb01 6303 	mla	r3, r1, r3, r6
 8016916:	141b      	asrs	r3, r3, #16
 8016918:	f53f ae8b 	bmi.w	8016632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801691c:	3a01      	subs	r2, #1
 801691e:	4293      	cmp	r3, r2
 8016920:	f6bf ae87 	bge.w	8016632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016926:	f8dd b018 	ldr.w	fp, [sp, #24]
 801692a:	1cdf      	adds	r7, r3, #3
 801692c:	f1bb 0f00 	cmp.w	fp, #0
 8016930:	dc6e      	bgt.n	8016a10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8016932:	9b06      	ldr	r3, [sp, #24]
 8016934:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801693a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801693e:	4423      	add	r3, r4
 8016940:	9309      	str	r3, [sp, #36]	; 0x24
 8016942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016944:	2b00      	cmp	r3, #0
 8016946:	f340 81b0 	ble.w	8016caa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801694a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801694e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016950:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016954:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016958:	eef0 6a62 	vmov.f32	s13, s5
 801695c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016960:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016964:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016968:	ee16 5a90 	vmov	r5, s13
 801696c:	eef0 6a43 	vmov.f32	s13, s6
 8016970:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016974:	ee16 6a90 	vmov	r6, s13
 8016978:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801697c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016980:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016984:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016988:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801698c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016990:	ee12 2a90 	vmov	r2, s5
 8016994:	eef0 2a47 	vmov.f32	s5, s14
 8016998:	fb92 f3f3 	sdiv	r3, r2, r3
 801699c:	ee13 2a10 	vmov	r2, s6
 80169a0:	9325      	str	r3, [sp, #148]	; 0x94
 80169a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80169a4:	eeb0 3a67 	vmov.f32	s6, s15
 80169a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80169ac:	9326      	str	r3, [sp, #152]	; 0x98
 80169ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80169b2:	3b01      	subs	r3, #1
 80169b4:	9315      	str	r3, [sp, #84]	; 0x54
 80169b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80169b8:	bf08      	it	eq
 80169ba:	4613      	moveq	r3, r2
 80169bc:	9306      	str	r3, [sp, #24]
 80169be:	e60d      	b.n	80165dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	f43f ae7d 	beq.w	80166c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80169c6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80169ca:	9307      	str	r3, [sp, #28]
 80169cc:	0e1b      	lsrs	r3, r3, #24
 80169ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80169d0:	e676      	b.n	80166c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80169d2:	7038      	strb	r0, [r7, #0]
 80169d4:	7079      	strb	r1, [r7, #1]
 80169d6:	e779      	b.n	80168cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80169d8:	f112 0901 	adds.w	r9, r2, #1
 80169dc:	f53f af78 	bmi.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169e0:	454b      	cmp	r3, r9
 80169e2:	f6ff af75 	blt.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169e6:	f11c 0901 	adds.w	r9, ip, #1
 80169ea:	f53f af71 	bmi.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169ee:	45ce      	cmp	lr, r9
 80169f0:	f6ff af6e 	blt.w	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80169f4:	b21b      	sxth	r3, r3
 80169f6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80169fa:	fa0f f28e 	sxth.w	r2, lr
 80169fe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8016a02:	9200      	str	r2, [sp, #0]
 8016a04:	4639      	mov	r1, r7
 8016a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a08:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016a0a:	f7ff fca1 	bl	8016350 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8016a0e:	e75f      	b.n	80168d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8016a10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016a12:	1429      	asrs	r1, r5, #16
 8016a14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016a16:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8016a1a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8016a1e:	1433      	asrs	r3, r6, #16
 8016a20:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016a24:	fb0c 1303 	mla	r3, ip, r3, r1
 8016a28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016a2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016a2e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016a32:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8016a36:	2a00      	cmp	r2, #0
 8016a38:	f000 8129 	beq.w	8016c8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8016a3c:	684c      	ldr	r4, [r1, #4]
 8016a3e:	940c      	str	r4, [sp, #48]	; 0x30
 8016a40:	0e24      	lsrs	r4, r4, #24
 8016a42:	9413      	str	r4, [sp, #76]	; 0x4c
 8016a44:	b198      	cbz	r0, 8016a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016a46:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8016a4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016a4e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8016a52:	f10c 0c04 	add.w	ip, ip, #4
 8016a56:	eb01 080c 	add.w	r8, r1, ip
 8016a5a:	f851 100c 	ldr.w	r1, [r1, ip]
 8016a5e:	9108      	str	r1, [sp, #32]
 8016a60:	0e09      	lsrs	r1, r1, #24
 8016a62:	9110      	str	r1, [sp, #64]	; 0x40
 8016a64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016a68:	910d      	str	r1, [sp, #52]	; 0x34
 8016a6a:	0e09      	lsrs	r1, r1, #24
 8016a6c:	9114      	str	r1, [sp, #80]	; 0x50
 8016a6e:	b292      	uxth	r2, r2
 8016a70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016a72:	b280      	uxth	r0, r0
 8016a74:	fb02 f900 	mul.w	r9, r2, r0
 8016a78:	0112      	lsls	r2, r2, #4
 8016a7a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016a7e:	eba2 0809 	sub.w	r8, r2, r9
 8016a82:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8016a86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a88:	b280      	uxth	r0, r0
 8016a8a:	fa1f f888 	uxth.w	r8, r8
 8016a8e:	1a09      	subs	r1, r1, r0
 8016a90:	fb08 f202 	mul.w	r2, r8, r2
 8016a94:	b289      	uxth	r1, r1
 8016a96:	fb01 220e 	mla	r2, r1, lr, r2
 8016a9a:	fb00 2204 	mla	r2, r0, r4, r2
 8016a9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016aa0:	fb09 2204 	mla	r2, r9, r4, r2
 8016aa4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016aa8:	2a00      	cmp	r2, #0
 8016aaa:	f000 80e8 	beq.w	8016c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8016aae:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016ab2:	d01b      	beq.n	8016aec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8016ab4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016ab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016abc:	fb0e fa0a 	mul.w	sl, lr, sl
 8016ac0:	fb0e fe03 	mul.w	lr, lr, r3
 8016ac4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016ac8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016acc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016ad0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ad4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016ad8:	4453      	add	r3, sl
 8016ada:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016ade:	0a1b      	lsrs	r3, r3, #8
 8016ae0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016ae4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ae8:	ea43 030c 	orr.w	r3, r3, ip
 8016aec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016aee:	2cff      	cmp	r4, #255	; 0xff
 8016af0:	d021      	beq.n	8016b36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8016af2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016af4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016af8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016afa:	fb04 fc0c 	mul.w	ip, r4, ip
 8016afe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016b00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b04:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016b0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b12:	fb04 fa0a 	mul.w	sl, r4, sl
 8016b16:	44e6      	add	lr, ip
 8016b18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b30:	ea4e 040a 	orr.w	r4, lr, sl
 8016b34:	940c      	str	r4, [sp, #48]	; 0x30
 8016b36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b38:	2cff      	cmp	r4, #255	; 0xff
 8016b3a:	d021      	beq.n	8016b80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8016b3c:	9c08      	ldr	r4, [sp, #32]
 8016b3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b42:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b44:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b48:	9c08      	ldr	r4, [sp, #32]
 8016b4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016b4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016b50:	fb04 fa0e 	mul.w	sl, r4, lr
 8016b54:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b58:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016b5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b60:	44e6      	add	lr, ip
 8016b62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b7a:	ea4e 040a 	orr.w	r4, lr, sl
 8016b7e:	9408      	str	r4, [sp, #32]
 8016b80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b82:	2cff      	cmp	r4, #255	; 0xff
 8016b84:	d021      	beq.n	8016bca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8016b86:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016b8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b8e:	fb04 fc0c 	mul.w	ip, r4, ip
 8016b92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016b94:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016b98:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8016ba2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016ba6:	fb04 fa0a 	mul.w	sl, r4, sl
 8016baa:	44e6      	add	lr, ip
 8016bac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016bb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016bb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016bb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016bbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016bc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016bc4:	ea4e 040a 	orr.w	r4, lr, sl
 8016bc8:	940d      	str	r4, [sp, #52]	; 0x34
 8016bca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016bcc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8016bd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016bd4:	2aff      	cmp	r2, #255	; 0xff
 8016bd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016bda:	9c08      	ldr	r4, [sp, #32]
 8016bdc:	fb08 fc0c 	mul.w	ip, r8, ip
 8016be0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016be4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016bea:	fb00 cc0e 	mla	ip, r0, lr, ip
 8016bee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016bf2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016bf4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016bf8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016bfc:	fb08 f80e 	mul.w	r8, r8, lr
 8016c00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016c04:	fb01 8303 	mla	r3, r1, r3, r8
 8016c08:	9908      	ldr	r1, [sp, #32]
 8016c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016c0e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8016c12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016c14:	fb00 330a 	mla	r3, r0, sl, r3
 8016c18:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8016c1c:	fb09 3e0e 	mla	lr, r9, lr, r3
 8016c20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016c24:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016c28:	ea4c 0c0e 	orr.w	ip, ip, lr
 8016c2c:	fa5f f08c 	uxtb.w	r0, ip
 8016c30:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8016c34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016c38:	d032      	beq.n	8016ca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8016c3a:	43d2      	mvns	r2, r2
 8016c3c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8016c40:	b2d2      	uxtb	r2, r2
 8016c42:	fb0e fe02 	mul.w	lr, lr, r2
 8016c46:	f10e 0301 	add.w	r3, lr, #1
 8016c4a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8016c4e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8016c52:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8016c56:	4350      	muls	r0, r2
 8016c58:	f807 3c03 	strb.w	r3, [r7, #-3]
 8016c5c:	1c43      	adds	r3, r0, #1
 8016c5e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016c62:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8016c66:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8016c6a:	4353      	muls	r3, r2
 8016c6c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016c70:	1c5a      	adds	r2, r3, #1
 8016c72:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c76:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8016c7a:	f807 cc01 	strb.w	ip, [r7, #-1]
 8016c7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8016c80:	3703      	adds	r7, #3
 8016c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016c86:	441d      	add	r5, r3
 8016c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c8a:	441e      	add	r6, r3
 8016c8c:	e64e      	b.n	801692c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	f43f aeed 	beq.w	8016a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016c94:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8016c98:	9108      	str	r1, [sp, #32]
 8016c9a:	0e09      	lsrs	r1, r1, #24
 8016c9c:	9110      	str	r1, [sp, #64]	; 0x40
 8016c9e:	e6e6      	b.n	8016a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8016ca0:	f807 0c03 	strb.w	r0, [r7, #-3]
 8016ca4:	f807 1c02 	strb.w	r1, [r7, #-2]
 8016ca8:	e7e7      	b.n	8016c7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8016caa:	b019      	add	sp, #100	; 0x64
 8016cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016cb0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8016cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8016cb8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016cbc:	2c00      	cmp	r4, #0
 8016cbe:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8016cc2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8016cc6:	fb00 4e03 	mla	lr, r0, r3, r4
 8016cca:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8016cce:	f2c0 80b8 	blt.w	8016e42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cd2:	45a1      	cmp	r9, r4
 8016cd4:	f340 80b5 	ble.w	8016e42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	f2c0 80b2 	blt.w	8016e42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016cde:	4580      	cmp	r8, r0
 8016ce0:	f340 80af 	ble.w	8016e42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8016ce4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8016ce8:	f01e 0f01 	tst.w	lr, #1
 8016cec:	5d56      	ldrb	r6, [r2, r5]
 8016cee:	bf0c      	ite	eq
 8016cf0:	f006 060f 	andeq.w	r6, r6, #15
 8016cf4:	1136      	asrne	r6, r6, #4
 8016cf6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8016cfa:	b2f6      	uxtb	r6, r6
 8016cfc:	f114 0a01 	adds.w	sl, r4, #1
 8016d00:	f100 80a1 	bmi.w	8016e46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d04:	45d1      	cmp	r9, sl
 8016d06:	f340 809e 	ble.w	8016e46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	f2c0 809b 	blt.w	8016e46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d10:	4580      	cmp	r8, r0
 8016d12:	f340 8098 	ble.w	8016e46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8016d16:	2f00      	cmp	r7, #0
 8016d18:	f000 8097 	beq.w	8016e4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8016d1c:	f10e 0b01 	add.w	fp, lr, #1
 8016d20:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8016d24:	f01b 0f01 	tst.w	fp, #1
 8016d28:	5d55      	ldrb	r5, [r2, r5]
 8016d2a:	bf0c      	ite	eq
 8016d2c:	f005 050f 	andeq.w	r5, r5, #15
 8016d30:	112d      	asrne	r5, r5, #4
 8016d32:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8016d36:	b2ed      	uxtb	r5, r5
 8016d38:	f1bc 0f00 	cmp.w	ip, #0
 8016d3c:	f000 8089 	beq.w	8016e52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8016d40:	2c00      	cmp	r4, #0
 8016d42:	f100 0001 	add.w	r0, r0, #1
 8016d46:	f2c0 8082 	blt.w	8016e4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d4a:	45a1      	cmp	r9, r4
 8016d4c:	dd7f      	ble.n	8016e4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	db7d      	blt.n	8016e4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d52:	4580      	cmp	r8, r0
 8016d54:	dd7b      	ble.n	8016e4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8016d56:	eb03 0b0e 	add.w	fp, r3, lr
 8016d5a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8016d5e:	f01b 0f01 	tst.w	fp, #1
 8016d62:	5d14      	ldrb	r4, [r2, r4]
 8016d64:	bf0c      	ite	eq
 8016d66:	f004 040f 	andeq.w	r4, r4, #15
 8016d6a:	1124      	asrne	r4, r4, #4
 8016d6c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8016d70:	b2e4      	uxtb	r4, r4
 8016d72:	f1ba 0f00 	cmp.w	sl, #0
 8016d76:	db6f      	blt.n	8016e58 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d78:	45d1      	cmp	r9, sl
 8016d7a:	dd6d      	ble.n	8016e58 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	db6b      	blt.n	8016e58 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d80:	4580      	cmp	r8, r0
 8016d82:	dd69      	ble.n	8016e58 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8016d84:	2f00      	cmp	r7, #0
 8016d86:	d069      	beq.n	8016e5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8016d88:	3301      	adds	r3, #1
 8016d8a:	449e      	add	lr, r3
 8016d8c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8016d90:	f01e 0f01 	tst.w	lr, #1
 8016d94:	5cd0      	ldrb	r0, [r2, r3]
 8016d96:	bf0c      	ite	eq
 8016d98:	f000 000f 	andeq.w	r0, r0, #15
 8016d9c:	1100      	asrne	r0, r0, #4
 8016d9e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016da2:	b2c3      	uxtb	r3, r0
 8016da4:	b2ba      	uxth	r2, r7
 8016da6:	fa1f fc8c 	uxth.w	ip, ip
 8016daa:	fb02 f00c 	mul.w	r0, r2, ip
 8016dae:	0112      	lsls	r2, r2, #4
 8016db0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8016db4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8016db8:	1a12      	subs	r2, r2, r0
 8016dba:	fa1f fc8c 	uxth.w	ip, ip
 8016dbe:	b292      	uxth	r2, r2
 8016dc0:	eba7 070c 	sub.w	r7, r7, ip
 8016dc4:	436a      	muls	r2, r5
 8016dc6:	b2bf      	uxth	r7, r7
 8016dc8:	fb06 2207 	mla	r2, r6, r7, r2
 8016dcc:	fb0c 2404 	mla	r4, ip, r4, r2
 8016dd0:	fb00 4303 	mla	r3, r0, r3, r4
 8016dd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016dd8:	b38b      	cbz	r3, 8016e3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8016dda:	4a21      	ldr	r2, [pc, #132]	; (8016e60 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8016ddc:	6814      	ldr	r4, [r2, #0]
 8016dde:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8016de2:	b2e5      	uxtb	r5, r4
 8016de4:	4353      	muls	r3, r2
 8016de6:	1c5a      	adds	r2, r3, #1
 8016de8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016dec:	1212      	asrs	r2, r2, #8
 8016dee:	b290      	uxth	r0, r2
 8016df0:	43d2      	mvns	r2, r2
 8016df2:	fb15 f500 	smulbb	r5, r5, r0
 8016df6:	b2d3      	uxtb	r3, r2
 8016df8:	780a      	ldrb	r2, [r1, #0]
 8016dfa:	fb02 5203 	mla	r2, r2, r3, r5
 8016dfe:	b292      	uxth	r2, r2
 8016e00:	1c55      	adds	r5, r2, #1
 8016e02:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016e06:	784d      	ldrb	r5, [r1, #1]
 8016e08:	fb15 f503 	smulbb	r5, r5, r3
 8016e0c:	1212      	asrs	r2, r2, #8
 8016e0e:	700a      	strb	r2, [r1, #0]
 8016e10:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8016e14:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8016e18:	fb02 5200 	mla	r2, r2, r0, r5
 8016e1c:	b292      	uxth	r2, r2
 8016e1e:	1c55      	adds	r5, r2, #1
 8016e20:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8016e24:	1212      	asrs	r2, r2, #8
 8016e26:	704a      	strb	r2, [r1, #1]
 8016e28:	788a      	ldrb	r2, [r1, #2]
 8016e2a:	fb12 f303 	smulbb	r3, r2, r3
 8016e2e:	fb04 3300 	mla	r3, r4, r0, r3
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	1c5a      	adds	r2, r3, #1
 8016e36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016e3a:	121b      	asrs	r3, r3, #8
 8016e3c:	708b      	strb	r3, [r1, #2]
 8016e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e42:	2600      	movs	r6, #0
 8016e44:	e75a      	b.n	8016cfc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8016e46:	2500      	movs	r5, #0
 8016e48:	e776      	b.n	8016d38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e4a:	463d      	mov	r5, r7
 8016e4c:	e774      	b.n	8016d38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8016e4e:	2400      	movs	r4, #0
 8016e50:	e78f      	b.n	8016d72 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8016e52:	4663      	mov	r3, ip
 8016e54:	4664      	mov	r4, ip
 8016e56:	e7a5      	b.n	8016da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e58:	2300      	movs	r3, #0
 8016e5a:	e7a3      	b.n	8016da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e5c:	463b      	mov	r3, r7
 8016e5e:	e7a1      	b.n	8016da4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8016e60:	2400ae14 	.word	0x2400ae14

08016e64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e68:	b097      	sub	sp, #92	; 0x5c
 8016e6a:	9214      	str	r2, [sp, #80]	; 0x50
 8016e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8016e70:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8016e74:	9015      	str	r0, [sp, #84]	; 0x54
 8016e76:	910c      	str	r1, [sp, #48]	; 0x30
 8016e78:	6850      	ldr	r0, [r2, #4]
 8016e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8016e7c:	6812      	ldr	r2, [r2, #0]
 8016e7e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8016e82:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8016e86:	fb00 1303 	mla	r3, r0, r3, r1
 8016e8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e8e:	eb02 0a03 	add.w	sl, r2, r3
 8016e92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016e94:	689b      	ldr	r3, [r3, #8]
 8016e96:	3301      	adds	r3, #1
 8016e98:	f023 0301 	bic.w	r3, r3, #1
 8016e9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ea0:	681f      	ldr	r7, [r3, #0]
 8016ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	dc03      	bgt.n	8016eb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8016ea8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	f340 8247 	ble.w	801733e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8016eb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016eb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016eb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016eba:	1e48      	subs	r0, r1, #1
 8016ebc:	f102 3cff 	add.w	ip, r2, #4294967295
 8016ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f340 80e5 	ble.w	8017092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8016ec8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8016ecc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016ed0:	d406      	bmi.n	8016ee0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ed2:	4586      	cmp	lr, r0
 8016ed4:	da04      	bge.n	8016ee0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	db02      	blt.n	8016ee0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016eda:	4563      	cmp	r3, ip
 8016edc:	f2c0 80da 	blt.w	8017094 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8016ee0:	f11e 0e01 	adds.w	lr, lr, #1
 8016ee4:	f100 80cb 	bmi.w	801707e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ee8:	4571      	cmp	r1, lr
 8016eea:	f2c0 80c8 	blt.w	801707e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016eee:	3301      	adds	r3, #1
 8016ef0:	f100 80c5 	bmi.w	801707e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	f2c0 80c2 	blt.w	801707e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	46d0      	mov	r8, sl
 8016efe:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8016f02:	930d      	str	r3, [sp, #52]	; 0x34
 8016f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	f340 80e3 	ble.w	80170d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8016f0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016f0e:	1430      	asrs	r0, r6, #16
 8016f10:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8016f14:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016f18:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8016f1c:	142b      	asrs	r3, r5, #16
 8016f1e:	f100 812e 	bmi.w	801717e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f22:	f10c 3bff 	add.w	fp, ip, #4294967295
 8016f26:	455b      	cmp	r3, fp
 8016f28:	f280 8129 	bge.w	801717e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f2c:	2800      	cmp	r0, #0
 8016f2e:	f2c0 8126 	blt.w	801717e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f32:	f10e 3bff 	add.w	fp, lr, #4294967295
 8016f36:	4558      	cmp	r0, fp
 8016f38:	f280 8121 	bge.w	801717e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8016f3c:	fb00 3309 	mla	r3, r0, r9, r3
 8016f40:	0858      	lsrs	r0, r3, #1
 8016f42:	07dc      	lsls	r4, r3, #31
 8016f44:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016f48:	bf54      	ite	pl
 8016f4a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8016f4e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8016f52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8016f56:	fa5f fc8c 	uxtb.w	ip, ip
 8016f5a:	2a00      	cmp	r2, #0
 8016f5c:	f000 80fe 	beq.w	801715c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8016f60:	1c58      	adds	r0, r3, #1
 8016f62:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016f66:	07c0      	lsls	r0, r0, #31
 8016f68:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8016f6c:	bf54      	ite	pl
 8016f6e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8016f72:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8016f76:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8016f7a:	fa5f f08e 	uxtb.w	r0, lr
 8016f7e:	9010      	str	r0, [sp, #64]	; 0x40
 8016f80:	b1d9      	cbz	r1, 8016fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016f82:	444b      	add	r3, r9
 8016f84:	0858      	lsrs	r0, r3, #1
 8016f86:	07dc      	lsls	r4, r3, #31
 8016f88:	f103 0301 	add.w	r3, r3, #1
 8016f8c:	5c38      	ldrb	r0, [r7, r0]
 8016f8e:	bf54      	ite	pl
 8016f90:	f000 000f 	andpl.w	r0, r0, #15
 8016f94:	1100      	asrmi	r0, r0, #4
 8016f96:	07dc      	lsls	r4, r3, #31
 8016f98:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8016f9c:	b2c0      	uxtb	r0, r0
 8016f9e:	900a      	str	r0, [sp, #40]	; 0x28
 8016fa0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016fa4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8016fa8:	bf54      	ite	pl
 8016faa:	f00e 030f 	andpl.w	r3, lr, #15
 8016fae:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8016fb2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8016fb6:	b2db      	uxtb	r3, r3
 8016fb8:	9311      	str	r3, [sp, #68]	; 0x44
 8016fba:	b292      	uxth	r2, r2
 8016fbc:	b289      	uxth	r1, r1
 8016fbe:	0113      	lsls	r3, r2, #4
 8016fc0:	fb02 f001 	mul.w	r0, r2, r1
 8016fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fc6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016fca:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8016fce:	1a1b      	subs	r3, r3, r0
 8016fd0:	b289      	uxth	r1, r1
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	ebae 0e01 	sub.w	lr, lr, r1
 8016fd8:	4353      	muls	r3, r2
 8016fda:	fa1f fe8e 	uxth.w	lr, lr
 8016fde:	fb0c 320e 	mla	r2, ip, lr, r3
 8016fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fe4:	fb01 2203 	mla	r2, r1, r3, r2
 8016fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fea:	fb00 2203 	mla	r2, r0, r3, r2
 8016fee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016ff2:	2a00      	cmp	r2, #0
 8016ff4:	d039      	beq.n	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016ff6:	4bc7      	ldr	r3, [pc, #796]	; (8017314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8016ff8:	6819      	ldr	r1, [r3, #0]
 8016ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ffc:	fa5f fc81 	uxtb.w	ip, r1
 8017000:	435a      	muls	r2, r3
 8017002:	1c53      	adds	r3, r2, #1
 8017004:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017008:	1212      	asrs	r2, r2, #8
 801700a:	b290      	uxth	r0, r2
 801700c:	43d2      	mvns	r2, r2
 801700e:	fb1c fc00 	smulbb	ip, ip, r0
 8017012:	b2d3      	uxtb	r3, r2
 8017014:	f898 2000 	ldrb.w	r2, [r8]
 8017018:	fb02 c203 	mla	r2, r2, r3, ip
 801701c:	b292      	uxth	r2, r2
 801701e:	f102 0c01 	add.w	ip, r2, #1
 8017022:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017026:	f898 c001 	ldrb.w	ip, [r8, #1]
 801702a:	fb1c fc03 	smulbb	ip, ip, r3
 801702e:	1212      	asrs	r2, r2, #8
 8017030:	f888 2000 	strb.w	r2, [r8]
 8017034:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8017038:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801703c:	fb02 c200 	mla	r2, r2, r0, ip
 8017040:	b292      	uxth	r2, r2
 8017042:	f102 0c01 	add.w	ip, r2, #1
 8017046:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801704a:	1212      	asrs	r2, r2, #8
 801704c:	f888 2001 	strb.w	r2, [r8, #1]
 8017050:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017054:	fb12 f303 	smulbb	r3, r2, r3
 8017058:	fb01 3300 	mla	r3, r1, r0, r3
 801705c:	b29b      	uxth	r3, r3
 801705e:	1c5a      	adds	r2, r3, #1
 8017060:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017064:	121b      	asrs	r3, r3, #8
 8017066:	f888 3002 	strb.w	r3, [r8, #2]
 801706a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801706c:	f108 0803 	add.w	r8, r8, #3
 8017070:	441d      	add	r5, r3
 8017072:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017074:	441e      	add	r6, r3
 8017076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017078:	3b01      	subs	r3, #1
 801707a:	930d      	str	r3, [sp, #52]	; 0x34
 801707c:	e742      	b.n	8016f04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801707e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017080:	f10a 0a03 	add.w	sl, sl, #3
 8017084:	441d      	add	r5, r3
 8017086:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017088:	441e      	add	r6, r3
 801708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801708c:	3b01      	subs	r3, #1
 801708e:	9309      	str	r3, [sp, #36]	; 0x24
 8017090:	e716      	b.n	8016ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017092:	d024      	beq.n	80170de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8017094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017096:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017098:	3b01      	subs	r3, #1
 801709a:	fb00 5003 	mla	r0, r0, r3, r5
 801709e:	1400      	asrs	r0, r0, #16
 80170a0:	f53f af2b 	bmi.w	8016efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170a4:	3901      	subs	r1, #1
 80170a6:	4288      	cmp	r0, r1
 80170a8:	f6bf af27 	bge.w	8016efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 80170ae:	fb01 6303 	mla	r3, r1, r3, r6
 80170b2:	141b      	asrs	r3, r3, #16
 80170b4:	f53f af21 	bmi.w	8016efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170b8:	3a01      	subs	r2, #1
 80170ba:	4293      	cmp	r3, r2
 80170bc:	f6bf af1d 	bge.w	8016efa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80170c0:	f10a 0e03 	add.w	lr, sl, #3
 80170c4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80170c8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80170cc:	f1b8 0f00 	cmp.w	r8, #0
 80170d0:	dc76      	bgt.n	80171c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80170d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80170d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80170dc:	44a2      	add	sl, r4
 80170de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f340 812c 	ble.w	801733e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80170e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170f4:	eef0 6a62 	vmov.f32	s13, s5
 80170f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017100:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017104:	ee16 5a90 	vmov	r5, s13
 8017108:	eef0 6a43 	vmov.f32	s13, s6
 801710c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017110:	ee16 6a90 	vmov	r6, s13
 8017114:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017118:	ee61 7a27 	vmul.f32	s15, s2, s15
 801711c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017120:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017124:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017128:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801712c:	ee12 2a90 	vmov	r2, s5
 8017130:	eef0 2a47 	vmov.f32	s5, s14
 8017134:	fb92 f3f3 	sdiv	r3, r2, r3
 8017138:	ee13 2a10 	vmov	r2, s6
 801713c:	9323      	str	r3, [sp, #140]	; 0x8c
 801713e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017140:	eeb0 3a67 	vmov.f32	s6, s15
 8017144:	fb92 f3f3 	sdiv	r3, r2, r3
 8017148:	9324      	str	r3, [sp, #144]	; 0x90
 801714a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801714c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801714e:	3b01      	subs	r3, #1
 8017150:	930c      	str	r3, [sp, #48]	; 0x30
 8017152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017154:	bf08      	it	eq
 8017156:	4613      	moveq	r3, r2
 8017158:	9309      	str	r3, [sp, #36]	; 0x24
 801715a:	e6a2      	b.n	8016ea2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801715c:	2900      	cmp	r1, #0
 801715e:	f43f af2c 	beq.w	8016fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017162:	eb09 0003 	add.w	r0, r9, r3
 8017166:	0843      	lsrs	r3, r0, #1
 8017168:	07c0      	lsls	r0, r0, #31
 801716a:	5cfb      	ldrb	r3, [r7, r3]
 801716c:	bf54      	ite	pl
 801716e:	f003 030f 	andpl.w	r3, r3, #15
 8017172:	111b      	asrmi	r3, r3, #4
 8017174:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017178:	b2db      	uxtb	r3, r3
 801717a:	930a      	str	r3, [sp, #40]	; 0x28
 801717c:	e71d      	b.n	8016fba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801717e:	f113 0b01 	adds.w	fp, r3, #1
 8017182:	f53f af72 	bmi.w	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017186:	45dc      	cmp	ip, fp
 8017188:	f6ff af6f 	blt.w	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801718c:	f110 0b01 	adds.w	fp, r0, #1
 8017190:	f53f af6b 	bmi.w	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017194:	45de      	cmp	lr, fp
 8017196:	f6ff af68 	blt.w	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801719a:	9302      	str	r3, [sp, #8]
 801719c:	fa0f f38e 	sxth.w	r3, lr
 80171a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80171a2:	9301      	str	r3, [sp, #4]
 80171a4:	fa0f f38c 	sxth.w	r3, ip
 80171a8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80171ac:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80171b0:	9300      	str	r3, [sp, #0]
 80171b2:	463a      	mov	r2, r7
 80171b4:	464b      	mov	r3, r9
 80171b6:	4641      	mov	r1, r8
 80171b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80171ba:	f7ff fd79 	bl	8016cb0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80171be:	e754      	b.n	801706a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80171c0:	142a      	asrs	r2, r5, #16
 80171c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80171c6:	1433      	asrs	r3, r6, #16
 80171c8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80171cc:	fb09 2303 	mla	r3, r9, r3, r2
 80171d0:	085a      	lsrs	r2, r3, #1
 80171d2:	07dc      	lsls	r4, r3, #31
 80171d4:	5cba      	ldrb	r2, [r7, r2]
 80171d6:	bf54      	ite	pl
 80171d8:	f002 020f 	andpl.w	r2, r2, #15
 80171dc:	1112      	asrmi	r2, r2, #4
 80171de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80171e2:	b2d2      	uxtb	r2, r2
 80171e4:	2900      	cmp	r1, #0
 80171e6:	f000 8097 	beq.w	8017318 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80171ea:	f103 0b01 	add.w	fp, r3, #1
 80171ee:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80171f2:	f01b 0f01 	tst.w	fp, #1
 80171f6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80171fa:	bf0c      	ite	eq
 80171fc:	f00c 0c0f 	andeq.w	ip, ip, #15
 8017200:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8017204:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017208:	fa5f f48c 	uxtb.w	r4, ip
 801720c:	9412      	str	r4, [sp, #72]	; 0x48
 801720e:	b300      	cbz	r0, 8017252 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8017210:	444b      	add	r3, r9
 8017212:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017216:	07dc      	lsls	r4, r3, #31
 8017218:	f103 0301 	add.w	r3, r3, #1
 801721c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017220:	bf54      	ite	pl
 8017222:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017226:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801722a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801722e:	fa5f f48c 	uxtb.w	r4, ip
 8017232:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017236:	940b      	str	r4, [sp, #44]	; 0x2c
 8017238:	07dc      	lsls	r4, r3, #31
 801723a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801723e:	bf54      	ite	pl
 8017240:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017244:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017248:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801724c:	fa5f f38c 	uxtb.w	r3, ip
 8017250:	9313      	str	r3, [sp, #76]	; 0x4c
 8017252:	b289      	uxth	r1, r1
 8017254:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017256:	b280      	uxth	r0, r0
 8017258:	fb01 f300 	mul.w	r3, r1, r0
 801725c:	0109      	lsls	r1, r1, #4
 801725e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8017262:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8017266:	1ac9      	subs	r1, r1, r3
 8017268:	b280      	uxth	r0, r0
 801726a:	b289      	uxth	r1, r1
 801726c:	ebac 0c00 	sub.w	ip, ip, r0
 8017270:	4361      	muls	r1, r4
 8017272:	fa1f fc8c 	uxth.w	ip, ip
 8017276:	fb02 120c 	mla	r2, r2, ip, r1
 801727a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801727c:	fb00 2001 	mla	r0, r0, r1, r2
 8017280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017282:	fb03 0302 	mla	r3, r3, r2, r0
 8017286:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801728a:	2b00      	cmp	r3, #0
 801728c:	d039      	beq.n	8017302 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801728e:	4a21      	ldr	r2, [pc, #132]	; (8017314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8017290:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017294:	6810      	ldr	r0, [r2, #0]
 8017296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017298:	fa5f fc80 	uxtb.w	ip, r0
 801729c:	4353      	muls	r3, r2
 801729e:	1c5a      	adds	r2, r3, #1
 80172a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80172a4:	121b      	asrs	r3, r3, #8
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	43db      	mvns	r3, r3
 80172aa:	fb1c fc02 	smulbb	ip, ip, r2
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	fb01 c103 	mla	r1, r1, r3, ip
 80172b4:	b289      	uxth	r1, r1
 80172b6:	f101 0c01 	add.w	ip, r1, #1
 80172ba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80172be:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80172c2:	fb1c fc03 	smulbb	ip, ip, r3
 80172c6:	1209      	asrs	r1, r1, #8
 80172c8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80172cc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80172d0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80172d4:	fb01 c102 	mla	r1, r1, r2, ip
 80172d8:	b289      	uxth	r1, r1
 80172da:	f101 0c01 	add.w	ip, r1, #1
 80172de:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80172e2:	1209      	asrs	r1, r1, #8
 80172e4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80172e8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80172ec:	fb11 f303 	smulbb	r3, r1, r3
 80172f0:	fb00 3002 	mla	r0, r0, r2, r3
 80172f4:	b280      	uxth	r0, r0
 80172f6:	1c42      	adds	r2, r0, #1
 80172f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80172fc:	1200      	asrs	r0, r0, #8
 80172fe:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8017302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017304:	f10e 0e03 	add.w	lr, lr, #3
 8017308:	f108 38ff 	add.w	r8, r8, #4294967295
 801730c:	441d      	add	r5, r3
 801730e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017310:	441e      	add	r6, r3
 8017312:	e6db      	b.n	80170cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8017314:	2400ae14 	.word	0x2400ae14
 8017318:	2800      	cmp	r0, #0
 801731a:	d09a      	beq.n	8017252 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801731c:	444b      	add	r3, r9
 801731e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017322:	07db      	lsls	r3, r3, #31
 8017324:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017328:	bf54      	ite	pl
 801732a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801732e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017332:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017336:	fa5f f38c 	uxtb.w	r3, ip
 801733a:	930b      	str	r3, [sp, #44]	; 0x2c
 801733c:	e789      	b.n	8017252 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801733e:	b017      	add	sp, #92	; 0x5c
 8017340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801734c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017350:	2d00      	cmp	r5, #0
 8017352:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017356:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801735a:	fb04 5e03 	mla	lr, r4, r3, r5
 801735e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8017362:	f2c0 80b1 	blt.w	80174c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017366:	45a9      	cmp	r9, r5
 8017368:	f340 80ae 	ble.w	80174c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801736c:	2c00      	cmp	r4, #0
 801736e:	f2c0 80ab 	blt.w	80174c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017372:	45a0      	cmp	r8, r4
 8017374:	f340 80a8 	ble.w	80174c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8017378:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801737c:	f01e 0f01 	tst.w	lr, #1
 8017380:	5d97      	ldrb	r7, [r2, r6]
 8017382:	bf0c      	ite	eq
 8017384:	f007 070f 	andeq.w	r7, r7, #15
 8017388:	113f      	asrne	r7, r7, #4
 801738a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801738e:	b2ff      	uxtb	r7, r7
 8017390:	f115 0a01 	adds.w	sl, r5, #1
 8017394:	f100 809a 	bmi.w	80174cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8017398:	45d1      	cmp	r9, sl
 801739a:	f340 8097 	ble.w	80174cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801739e:	2c00      	cmp	r4, #0
 80173a0:	f2c0 8094 	blt.w	80174cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80173a4:	45a0      	cmp	r8, r4
 80173a6:	f340 8091 	ble.w	80174cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	f000 8090 	beq.w	80174d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80173b0:	f10e 0b01 	add.w	fp, lr, #1
 80173b4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80173b8:	f01b 0f01 	tst.w	fp, #1
 80173bc:	5d96      	ldrb	r6, [r2, r6]
 80173be:	bf0c      	ite	eq
 80173c0:	f006 060f 	andeq.w	r6, r6, #15
 80173c4:	1136      	asrne	r6, r6, #4
 80173c6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80173ca:	b2f6      	uxtb	r6, r6
 80173cc:	f1bc 0f00 	cmp.w	ip, #0
 80173d0:	f000 8082 	beq.w	80174d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80173d4:	2d00      	cmp	r5, #0
 80173d6:	f104 0401 	add.w	r4, r4, #1
 80173da:	db7b      	blt.n	80174d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173dc:	45a9      	cmp	r9, r5
 80173de:	dd79      	ble.n	80174d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173e0:	2c00      	cmp	r4, #0
 80173e2:	db77      	blt.n	80174d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173e4:	45a0      	cmp	r8, r4
 80173e6:	dd75      	ble.n	80174d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80173e8:	eb03 0b0e 	add.w	fp, r3, lr
 80173ec:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80173f0:	f01b 0f01 	tst.w	fp, #1
 80173f4:	5d55      	ldrb	r5, [r2, r5]
 80173f6:	bf0c      	ite	eq
 80173f8:	f005 050f 	andeq.w	r5, r5, #15
 80173fc:	112d      	asrne	r5, r5, #4
 80173fe:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8017402:	b2ed      	uxtb	r5, r5
 8017404:	f1ba 0f00 	cmp.w	sl, #0
 8017408:	db69      	blt.n	80174de <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801740a:	45d1      	cmp	r9, sl
 801740c:	dd67      	ble.n	80174de <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801740e:	2c00      	cmp	r4, #0
 8017410:	db65      	blt.n	80174de <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8017412:	45a0      	cmp	r8, r4
 8017414:	dd63      	ble.n	80174de <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8017416:	2800      	cmp	r0, #0
 8017418:	d063      	beq.n	80174e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801741a:	3301      	adds	r3, #1
 801741c:	449e      	add	lr, r3
 801741e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017422:	f01e 0f01 	tst.w	lr, #1
 8017426:	5cd4      	ldrb	r4, [r2, r3]
 8017428:	bf0c      	ite	eq
 801742a:	f004 040f 	andeq.w	r4, r4, #15
 801742e:	1124      	asrne	r4, r4, #4
 8017430:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017434:	b2e3      	uxtb	r3, r4
 8017436:	b282      	uxth	r2, r0
 8017438:	fa1f fc8c 	uxth.w	ip, ip
 801743c:	fb02 f40c 	mul.w	r4, r2, ip
 8017440:	0112      	lsls	r2, r2, #4
 8017442:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8017446:	fa1f f08c 	uxth.w	r0, ip
 801744a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801744e:	1b12      	subs	r2, r2, r4
 8017450:	ebac 0c00 	sub.w	ip, ip, r0
 8017454:	b292      	uxth	r2, r2
 8017456:	fa1f fc8c 	uxth.w	ip, ip
 801745a:	4372      	muls	r2, r6
 801745c:	fb07 220c 	mla	r2, r7, ip, r2
 8017460:	fb00 2005 	mla	r0, r0, r5, r2
 8017464:	fb04 0303 	mla	r3, r4, r3, r0
 8017468:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801746c:	b353      	cbz	r3, 80174c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801746e:	4a1e      	ldr	r2, [pc, #120]	; (80174e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8017470:	7808      	ldrb	r0, [r1, #0]
 8017472:	6814      	ldr	r4, [r2, #0]
 8017474:	b29a      	uxth	r2, r3
 8017476:	43db      	mvns	r3, r3
 8017478:	b2e5      	uxtb	r5, r4
 801747a:	b2db      	uxtb	r3, r3
 801747c:	fb15 f502 	smulbb	r5, r5, r2
 8017480:	fb00 5003 	mla	r0, r0, r3, r5
 8017484:	b280      	uxth	r0, r0
 8017486:	1c45      	adds	r5, r0, #1
 8017488:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801748c:	784d      	ldrb	r5, [r1, #1]
 801748e:	fb15 f503 	smulbb	r5, r5, r3
 8017492:	1200      	asrs	r0, r0, #8
 8017494:	7008      	strb	r0, [r1, #0]
 8017496:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801749a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801749e:	fb00 5002 	mla	r0, r0, r2, r5
 80174a2:	b280      	uxth	r0, r0
 80174a4:	1c45      	adds	r5, r0, #1
 80174a6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80174aa:	1200      	asrs	r0, r0, #8
 80174ac:	7048      	strb	r0, [r1, #1]
 80174ae:	7888      	ldrb	r0, [r1, #2]
 80174b0:	fb10 f303 	smulbb	r3, r0, r3
 80174b4:	fb04 3202 	mla	r2, r4, r2, r3
 80174b8:	b292      	uxth	r2, r2
 80174ba:	1c53      	adds	r3, r2, #1
 80174bc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80174c0:	1212      	asrs	r2, r2, #8
 80174c2:	708a      	strb	r2, [r1, #2]
 80174c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c8:	2700      	movs	r7, #0
 80174ca:	e761      	b.n	8017390 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80174cc:	2600      	movs	r6, #0
 80174ce:	e77d      	b.n	80173cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174d0:	4606      	mov	r6, r0
 80174d2:	e77b      	b.n	80173cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80174d4:	2500      	movs	r5, #0
 80174d6:	e795      	b.n	8017404 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80174d8:	4663      	mov	r3, ip
 80174da:	4665      	mov	r5, ip
 80174dc:	e7ab      	b.n	8017436 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174de:	2300      	movs	r3, #0
 80174e0:	e7a9      	b.n	8017436 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174e2:	4603      	mov	r3, r0
 80174e4:	e7a7      	b.n	8017436 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80174e6:	bf00      	nop
 80174e8:	2400ae14 	.word	0x2400ae14

080174ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f0:	b093      	sub	sp, #76	; 0x4c
 80174f2:	461c      	mov	r4, r3
 80174f4:	920c      	str	r2, [sp, #48]	; 0x30
 80174f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174f8:	9011      	str	r0, [sp, #68]	; 0x44
 80174fa:	9107      	str	r1, [sp, #28]
 80174fc:	6850      	ldr	r0, [r2, #4]
 80174fe:	6812      	ldr	r2, [r2, #0]
 8017500:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8017504:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8017508:	fb00 1303 	mla	r3, r0, r3, r1
 801750c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017510:	eb02 0b03 	add.w	fp, r2, r3
 8017514:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	3301      	adds	r3, #1
 801751a:	f023 0301 	bic.w	r3, r3, #1
 801751e:	9309      	str	r3, [sp, #36]	; 0x24
 8017520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017522:	f8d3 8000 	ldr.w	r8, [r3]
 8017526:	9b07      	ldr	r3, [sp, #28]
 8017528:	2b00      	cmp	r3, #0
 801752a:	dc03      	bgt.n	8017534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801752c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801752e:	2b00      	cmp	r3, #0
 8017530:	f340 822b 	ble.w	801798a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017534:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017536:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801753a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801753e:	1e48      	subs	r0, r1, #1
 8017540:	1e57      	subs	r7, r2, #1
 8017542:	2c00      	cmp	r4, #0
 8017544:	f340 80d7 	ble.w	80176f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8017548:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801754c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017550:	d406      	bmi.n	8017560 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017552:	4584      	cmp	ip, r0
 8017554:	da04      	bge.n	8017560 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017556:	2b00      	cmp	r3, #0
 8017558:	db02      	blt.n	8017560 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801755a:	42bb      	cmp	r3, r7
 801755c:	f2c0 80cc 	blt.w	80176f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8017560:	f11c 0c01 	adds.w	ip, ip, #1
 8017564:	f100 80bf 	bmi.w	80176e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017568:	4561      	cmp	r1, ip
 801756a:	f2c0 80bc 	blt.w	80176e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801756e:	3301      	adds	r3, #1
 8017570:	f100 80b9 	bmi.w	80176e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8017574:	429a      	cmp	r2, r3
 8017576:	f2c0 80b6 	blt.w	80176e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801757a:	46a2      	mov	sl, r4
 801757c:	465f      	mov	r7, fp
 801757e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017582:	f1ba 0f00 	cmp.w	sl, #0
 8017586:	f340 80d4 	ble.w	8017732 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801758a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801758e:	1430      	asrs	r0, r6, #16
 8017590:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017594:	9308      	str	r3, [sp, #32]
 8017596:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017598:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801759c:	142b      	asrs	r3, r5, #16
 801759e:	f100 8124 	bmi.w	80177ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175a2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80175a6:	4293      	cmp	r3, r2
 80175a8:	f280 811f 	bge.w	80177ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175ac:	2800      	cmp	r0, #0
 80175ae:	f2c0 811c 	blt.w	80177ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175b2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80175b6:	4290      	cmp	r0, r2
 80175b8:	f280 8117 	bge.w	80177ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80175bc:	fb00 3309 	mla	r3, r0, r9, r3
 80175c0:	0858      	lsrs	r0, r3, #1
 80175c2:	07da      	lsls	r2, r3, #31
 80175c4:	9a08      	ldr	r2, [sp, #32]
 80175c6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80175ca:	bf54      	ite	pl
 80175cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80175d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80175d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80175d8:	fa5f fc8c 	uxtb.w	ip, ip
 80175dc:	2a00      	cmp	r2, #0
 80175de:	f000 80ed 	beq.w	80177bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80175e2:	1c58      	adds	r0, r3, #1
 80175e4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80175e8:	07c0      	lsls	r0, r0, #31
 80175ea:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80175ee:	bf54      	ite	pl
 80175f0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80175f4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80175f8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80175fc:	fa5f fe8e 	uxtb.w	lr, lr
 8017600:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8017604:	b1c9      	cbz	r1, 801763a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8017606:	444b      	add	r3, r9
 8017608:	0858      	lsrs	r0, r3, #1
 801760a:	07da      	lsls	r2, r3, #31
 801760c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017610:	bf54      	ite	pl
 8017612:	f000 000f 	andpl.w	r0, r0, #15
 8017616:	1100      	asrmi	r0, r0, #4
 8017618:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801761c:	b2c0      	uxtb	r0, r0
 801761e:	900a      	str	r0, [sp, #40]	; 0x28
 8017620:	1c58      	adds	r0, r3, #1
 8017622:	0843      	lsrs	r3, r0, #1
 8017624:	07c2      	lsls	r2, r0, #31
 8017626:	f818 3003 	ldrb.w	r3, [r8, r3]
 801762a:	bf54      	ite	pl
 801762c:	f003 030f 	andpl.w	r3, r3, #15
 8017630:	111b      	asrmi	r3, r3, #4
 8017632:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017636:	b2db      	uxtb	r3, r3
 8017638:	930e      	str	r3, [sp, #56]	; 0x38
 801763a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801763e:	b289      	uxth	r1, r1
 8017640:	fb02 f301 	mul.w	r3, r2, r1
 8017644:	0112      	lsls	r2, r2, #4
 8017646:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801764a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801764e:	1ad2      	subs	r2, r2, r3
 8017650:	b289      	uxth	r1, r1
 8017652:	b292      	uxth	r2, r2
 8017654:	1a40      	subs	r0, r0, r1
 8017656:	fa1f fe80 	uxth.w	lr, r0
 801765a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801765c:	4342      	muls	r2, r0
 801765e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8017662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017664:	fb01 c102 	mla	r1, r1, r2, ip
 8017668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801766a:	fb03 1302 	mla	r3, r3, r2, r1
 801766e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017672:	b383      	cbz	r3, 80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017674:	4ac6      	ldr	r2, [pc, #792]	; (8017990 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8017676:	2bff      	cmp	r3, #255	; 0xff
 8017678:	6812      	ldr	r2, [r2, #0]
 801767a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801767e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8017682:	b2d2      	uxtb	r2, r2
 8017684:	f000 80ac 	beq.w	80177e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8017688:	b299      	uxth	r1, r3
 801768a:	43db      	mvns	r3, r3
 801768c:	f897 c000 	ldrb.w	ip, [r7]
 8017690:	fb12 f201 	smulbb	r2, r2, r1
 8017694:	b2db      	uxtb	r3, r3
 8017696:	fb10 f001 	smulbb	r0, r0, r1
 801769a:	fb0c 2203 	mla	r2, ip, r3, r2
 801769e:	fb1e f101 	smulbb	r1, lr, r1
 80176a2:	b292      	uxth	r2, r2
 80176a4:	f102 0c01 	add.w	ip, r2, #1
 80176a8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80176ac:	1212      	asrs	r2, r2, #8
 80176ae:	703a      	strb	r2, [r7, #0]
 80176b0:	787a      	ldrb	r2, [r7, #1]
 80176b2:	fb02 0003 	mla	r0, r2, r3, r0
 80176b6:	b280      	uxth	r0, r0
 80176b8:	1c42      	adds	r2, r0, #1
 80176ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80176be:	78ba      	ldrb	r2, [r7, #2]
 80176c0:	fb02 1303 	mla	r3, r2, r3, r1
 80176c4:	1200      	asrs	r0, r0, #8
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	7078      	strb	r0, [r7, #1]
 80176ca:	f103 0e01 	add.w	lr, r3, #1
 80176ce:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80176d2:	121b      	asrs	r3, r3, #8
 80176d4:	70bb      	strb	r3, [r7, #2]
 80176d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176d8:	3703      	adds	r7, #3
 80176da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176de:	441d      	add	r5, r3
 80176e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176e2:	441e      	add	r6, r3
 80176e4:	e74d      	b.n	8017582 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80176e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176e8:	3c01      	subs	r4, #1
 80176ea:	f10b 0b03 	add.w	fp, fp, #3
 80176ee:	441d      	add	r5, r3
 80176f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80176f2:	441e      	add	r6, r3
 80176f4:	e725      	b.n	8017542 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80176f6:	d021      	beq.n	801773c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80176f8:	1e63      	subs	r3, r4, #1
 80176fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80176fc:	fb00 5003 	mla	r0, r0, r3, r5
 8017700:	1400      	asrs	r0, r0, #16
 8017702:	f53f af3a 	bmi.w	801757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017706:	3901      	subs	r1, #1
 8017708:	4288      	cmp	r0, r1
 801770a:	f6bf af36 	bge.w	801757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801770e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8017710:	fb01 6303 	mla	r3, r1, r3, r6
 8017714:	141b      	asrs	r3, r3, #16
 8017716:	f53f af30 	bmi.w	801757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801771a:	3a01      	subs	r2, #1
 801771c:	4293      	cmp	r3, r2
 801771e:	f6bf af2c 	bge.w	801757a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017722:	f10b 0c03 	add.w	ip, fp, #3
 8017726:	46a6      	mov	lr, r4
 8017728:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801772c:	f1be 0f00 	cmp.w	lr, #0
 8017730:	dc79      	bgt.n	8017826 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8017732:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017736:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801773a:	44a3      	add	fp, r4
 801773c:	9b07      	ldr	r3, [sp, #28]
 801773e:	2b00      	cmp	r3, #0
 8017740:	f340 8123 	ble.w	801798a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017748:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801774a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801774e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017752:	eef0 6a62 	vmov.f32	s13, s5
 8017756:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801775a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801775e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017762:	ee16 5a90 	vmov	r5, s13
 8017766:	eef0 6a43 	vmov.f32	s13, s6
 801776a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801776e:	ee16 6a90 	vmov	r6, s13
 8017772:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017776:	ee61 7a27 	vmul.f32	s15, s2, s15
 801777a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801777e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017782:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017786:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801778a:	ee12 2a90 	vmov	r2, s5
 801778e:	eef0 2a47 	vmov.f32	s5, s14
 8017792:	fb92 f3f3 	sdiv	r3, r2, r3
 8017796:	ee13 2a10 	vmov	r2, s6
 801779a:	931f      	str	r3, [sp, #124]	; 0x7c
 801779c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801779e:	eeb0 3a67 	vmov.f32	s6, s15
 80177a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80177a6:	9320      	str	r3, [sp, #128]	; 0x80
 80177a8:	9b07      	ldr	r3, [sp, #28]
 80177aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80177ac:	3b01      	subs	r3, #1
 80177ae:	9307      	str	r3, [sp, #28]
 80177b0:	bf08      	it	eq
 80177b2:	4614      	moveq	r4, r2
 80177b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80177b6:	bf18      	it	ne
 80177b8:	461c      	movne	r4, r3
 80177ba:	e6b4      	b.n	8017526 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80177bc:	2900      	cmp	r1, #0
 80177be:	f43f af3c 	beq.w	801763a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80177c2:	eb09 0003 	add.w	r0, r9, r3
 80177c6:	0843      	lsrs	r3, r0, #1
 80177c8:	07c0      	lsls	r0, r0, #31
 80177ca:	f818 3003 	ldrb.w	r3, [r8, r3]
 80177ce:	bf54      	ite	pl
 80177d0:	f003 030f 	andpl.w	r3, r3, #15
 80177d4:	111b      	asrmi	r3, r3, #4
 80177d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	930a      	str	r3, [sp, #40]	; 0x28
 80177de:	e72c      	b.n	801763a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80177e0:	703a      	strb	r2, [r7, #0]
 80177e2:	7078      	strb	r0, [r7, #1]
 80177e4:	f887 e002 	strb.w	lr, [r7, #2]
 80177e8:	e775      	b.n	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177ea:	1c5a      	adds	r2, r3, #1
 80177ec:	f53f af73 	bmi.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177f0:	4594      	cmp	ip, r2
 80177f2:	f6ff af70 	blt.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177f6:	1c42      	adds	r2, r0, #1
 80177f8:	f53f af6d 	bmi.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80177fc:	4596      	cmp	lr, r2
 80177fe:	f6ff af6a 	blt.w	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017802:	9302      	str	r3, [sp, #8]
 8017804:	fa0f f38e 	sxth.w	r3, lr
 8017808:	9a08      	ldr	r2, [sp, #32]
 801780a:	9301      	str	r3, [sp, #4]
 801780c:	fa0f f38c 	sxth.w	r3, ip
 8017810:	9105      	str	r1, [sp, #20]
 8017812:	4639      	mov	r1, r7
 8017814:	9300      	str	r3, [sp, #0]
 8017816:	464b      	mov	r3, r9
 8017818:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801781c:	4642      	mov	r2, r8
 801781e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017820:	f7ff fd90 	bl	8017344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8017824:	e757      	b.n	80176d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017826:	142a      	asrs	r2, r5, #16
 8017828:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801782c:	1433      	asrs	r3, r6, #16
 801782e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8017832:	fb09 2303 	mla	r3, r9, r3, r2
 8017836:	085a      	lsrs	r2, r3, #1
 8017838:	07d9      	lsls	r1, r3, #31
 801783a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801783e:	bf54      	ite	pl
 8017840:	f002 020f 	andpl.w	r2, r2, #15
 8017844:	1112      	asrmi	r2, r2, #4
 8017846:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801784a:	b2d2      	uxtb	r2, r2
 801784c:	2800      	cmp	r0, #0
 801784e:	f000 8085 	beq.w	801795c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017852:	f103 0a01 	add.w	sl, r3, #1
 8017856:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801785a:	f01a 0f01 	tst.w	sl, #1
 801785e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017862:	bf0c      	ite	eq
 8017864:	f001 010f 	andeq.w	r1, r1, #15
 8017868:	1109      	asrne	r1, r1, #4
 801786a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801786e:	b2c9      	uxtb	r1, r1
 8017870:	910f      	str	r1, [sp, #60]	; 0x3c
 8017872:	b1df      	cbz	r7, 80178ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017874:	444b      	add	r3, r9
 8017876:	0859      	lsrs	r1, r3, #1
 8017878:	f013 0f01 	tst.w	r3, #1
 801787c:	f103 0301 	add.w	r3, r3, #1
 8017880:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017884:	bf0c      	ite	eq
 8017886:	f001 010f 	andeq.w	r1, r1, #15
 801788a:	1109      	asrne	r1, r1, #4
 801788c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017890:	b2c9      	uxtb	r1, r1
 8017892:	910b      	str	r1, [sp, #44]	; 0x2c
 8017894:	0859      	lsrs	r1, r3, #1
 8017896:	07db      	lsls	r3, r3, #31
 8017898:	f818 1001 	ldrb.w	r1, [r8, r1]
 801789c:	bf54      	ite	pl
 801789e:	f001 010f 	andpl.w	r1, r1, #15
 80178a2:	1109      	asrmi	r1, r1, #4
 80178a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80178a8:	b2c9      	uxtb	r1, r1
 80178aa:	9110      	str	r1, [sp, #64]	; 0x40
 80178ac:	b280      	uxth	r0, r0
 80178ae:	b2bf      	uxth	r7, r7
 80178b0:	fb00 f307 	mul.w	r3, r0, r7
 80178b4:	0100      	lsls	r0, r0, #4
 80178b6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80178ba:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80178be:	1ac0      	subs	r0, r0, r3
 80178c0:	b2bf      	uxth	r7, r7
 80178c2:	b280      	uxth	r0, r0
 80178c4:	1bc9      	subs	r1, r1, r7
 80178c6:	fa1f fa81 	uxth.w	sl, r1
 80178ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80178cc:	4348      	muls	r0, r1
 80178ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80178d0:	fb02 020a 	mla	r2, r2, sl, r0
 80178d4:	fb07 2701 	mla	r7, r7, r1, r2
 80178d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178da:	fb03 7302 	mla	r3, r3, r2, r7
 80178de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80178e2:	b393      	cbz	r3, 801794a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80178e4:	4a2a      	ldr	r2, [pc, #168]	; (8017990 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80178e6:	2bff      	cmp	r3, #255	; 0xff
 80178e8:	6811      	ldr	r1, [r2, #0]
 80178ea:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80178ee:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80178f2:	b2c9      	uxtb	r1, r1
 80178f4:	d042      	beq.n	801797c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80178f6:	b298      	uxth	r0, r3
 80178f8:	43db      	mvns	r3, r3
 80178fa:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80178fe:	fb11 f100 	smulbb	r1, r1, r0
 8017902:	b2db      	uxtb	r3, r3
 8017904:	fb17 f700 	smulbb	r7, r7, r0
 8017908:	fb02 1103 	mla	r1, r2, r3, r1
 801790c:	fb1a f000 	smulbb	r0, sl, r0
 8017910:	b289      	uxth	r1, r1
 8017912:	1c4a      	adds	r2, r1, #1
 8017914:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8017918:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801791c:	fb02 7703 	mla	r7, r2, r3, r7
 8017920:	1209      	asrs	r1, r1, #8
 8017922:	b2bf      	uxth	r7, r7
 8017924:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8017928:	1c7a      	adds	r2, r7, #1
 801792a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801792e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8017932:	fb02 0303 	mla	r3, r2, r3, r0
 8017936:	123f      	asrs	r7, r7, #8
 8017938:	b29b      	uxth	r3, r3
 801793a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801793e:	1c5a      	adds	r2, r3, #1
 8017940:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017944:	121b      	asrs	r3, r3, #8
 8017946:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801794a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801794c:	f10c 0c03 	add.w	ip, ip, #3
 8017950:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017954:	441d      	add	r5, r3
 8017956:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017958:	441e      	add	r6, r3
 801795a:	e6e7      	b.n	801772c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801795c:	2f00      	cmp	r7, #0
 801795e:	d0a5      	beq.n	80178ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017960:	444b      	add	r3, r9
 8017962:	0859      	lsrs	r1, r3, #1
 8017964:	07db      	lsls	r3, r3, #31
 8017966:	f818 1001 	ldrb.w	r1, [r8, r1]
 801796a:	bf54      	ite	pl
 801796c:	f001 010f 	andpl.w	r1, r1, #15
 8017970:	1109      	asrmi	r1, r1, #4
 8017972:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8017976:	b2c9      	uxtb	r1, r1
 8017978:	910b      	str	r1, [sp, #44]	; 0x2c
 801797a:	e797      	b.n	80178ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801797c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8017980:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8017984:	f80c ac01 	strb.w	sl, [ip, #-1]
 8017988:	e7df      	b.n	801794a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801798a:	b013      	add	sp, #76	; 0x4c
 801798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017990:	2400ae14 	.word	0x2400ae14

08017994 <CRC_Lock>:
 8017994:	4a20      	ldr	r2, [pc, #128]	; (8017a18 <CRC_Lock+0x84>)
 8017996:	b530      	push	{r4, r5, lr}
 8017998:	6813      	ldr	r3, [r2, #0]
 801799a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801799e:	f24c 2540 	movw	r5, #49728	; 0xc240
 80179a2:	f023 0301 	bic.w	r3, r3, #1
 80179a6:	6013      	str	r3, [r2, #0]
 80179a8:	4b1c      	ldr	r3, [pc, #112]	; (8017a1c <CRC_Lock+0x88>)
 80179aa:	681a      	ldr	r2, [r3, #0]
 80179ac:	4022      	ands	r2, r4
 80179ae:	42aa      	cmp	r2, r5
 80179b0:	d005      	beq.n	80179be <CRC_Lock+0x2a>
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80179b8:	4023      	ands	r3, r4
 80179ba:	4293      	cmp	r3, r2
 80179bc:	d124      	bne.n	8017a08 <CRC_Lock+0x74>
 80179be:	4b18      	ldr	r3, [pc, #96]	; (8017a20 <CRC_Lock+0x8c>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	bb0b      	cbnz	r3, 8017a08 <CRC_Lock+0x74>
 80179c4:	4b17      	ldr	r3, [pc, #92]	; (8017a24 <CRC_Lock+0x90>)
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80179cc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80179d0:	d00d      	beq.n	80179ee <CRC_Lock+0x5a>
 80179d2:	681a      	ldr	r2, [r3, #0]
 80179d4:	f240 4483 	movw	r4, #1155	; 0x483
 80179d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80179dc:	42a2      	cmp	r2, r4
 80179de:	d006      	beq.n	80179ee <CRC_Lock+0x5a>
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f240 4285 	movw	r2, #1157	; 0x485
 80179e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179ea:	4293      	cmp	r3, r2
 80179ec:	d10c      	bne.n	8017a08 <CRC_Lock+0x74>
 80179ee:	4b0e      	ldr	r3, [pc, #56]	; (8017a28 <CRC_Lock+0x94>)
 80179f0:	2201      	movs	r2, #1
 80179f2:	601a      	str	r2, [r3, #0]
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	2a00      	cmp	r2, #0
 80179f8:	d1fc      	bne.n	80179f4 <CRC_Lock+0x60>
 80179fa:	4b0c      	ldr	r3, [pc, #48]	; (8017a2c <CRC_Lock+0x98>)
 80179fc:	6018      	str	r0, [r3, #0]
 80179fe:	6818      	ldr	r0, [r3, #0]
 8017a00:	1a43      	subs	r3, r0, r1
 8017a02:	4258      	negs	r0, r3
 8017a04:	4158      	adcs	r0, r3
 8017a06:	bd30      	pop	{r4, r5, pc}
 8017a08:	4b09      	ldr	r3, [pc, #36]	; (8017a30 <CRC_Lock+0x9c>)
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	601a      	str	r2, [r3, #0]
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	2a00      	cmp	r2, #0
 8017a12:	d1fc      	bne.n	8017a0e <CRC_Lock+0x7a>
 8017a14:	4b07      	ldr	r3, [pc, #28]	; (8017a34 <CRC_Lock+0xa0>)
 8017a16:	e7f1      	b.n	80179fc <CRC_Lock+0x68>
 8017a18:	e0002000 	.word	0xe0002000
 8017a1c:	e000ed00 	.word	0xe000ed00
 8017a20:	e0042000 	.word	0xe0042000
 8017a24:	5c001000 	.word	0x5c001000
 8017a28:	58024c08 	.word	0x58024c08
 8017a2c:	58024c00 	.word	0x58024c00
 8017a30:	40023008 	.word	0x40023008
 8017a34:	40023000 	.word	0x40023000

08017a38 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8017a38:	6101      	str	r1, [r0, #16]
 8017a3a:	4770      	bx	lr

08017a3c <_ZN8touchgfx8Gestures4tickEv>:
 8017a3c:	7b83      	ldrb	r3, [r0, #14]
 8017a3e:	b14b      	cbz	r3, 8017a54 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8017a40:	8903      	ldrh	r3, [r0, #8]
 8017a42:	3301      	adds	r3, #1
 8017a44:	b29b      	uxth	r3, r3
 8017a46:	2b07      	cmp	r3, #7
 8017a48:	8103      	strh	r3, [r0, #8]
 8017a4a:	bf81      	itttt	hi
 8017a4c:	2300      	movhi	r3, #0
 8017a4e:	8143      	strhhi	r3, [r0, #10]
 8017a50:	8183      	strhhi	r3, [r0, #12]
 8017a52:	7383      	strbhi	r3, [r0, #14]
 8017a54:	4770      	bx	lr
	...

08017a58 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8017a58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017a5c:	4698      	mov	r8, r3
 8017a5e:	8883      	ldrh	r3, [r0, #4]
 8017a60:	4604      	mov	r4, r0
 8017a62:	4617      	mov	r7, r2
 8017a64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a68:	eba8 0303 	sub.w	r3, r8, r3
 8017a6c:	4a19      	ldr	r2, [pc, #100]	; (8017ad4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8017a6e:	460e      	mov	r6, r1
 8017a70:	b21b      	sxth	r3, r3
 8017a72:	88c1      	ldrh	r1, [r0, #6]
 8017a74:	9200      	str	r2, [sp, #0]
 8017a76:	2000      	movs	r0, #0
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	8aa2      	ldrh	r2, [r4, #20]
 8017a7c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8017a80:	bfb8      	it	lt
 8017a82:	425b      	neglt	r3, r3
 8017a84:	f88d 0004 	strb.w	r0, [sp, #4]
 8017a88:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017a8c:	b21b      	sxth	r3, r3
 8017a8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8017a92:	f8ad 500c 	strh.w	r5, [sp, #12]
 8017a96:	4293      	cmp	r3, r2
 8017a98:	dc07      	bgt.n	8017aaa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8017a9a:	1a69      	subs	r1, r5, r1
 8017a9c:	b209      	sxth	r1, r1
 8017a9e:	2900      	cmp	r1, #0
 8017aa0:	bfb8      	it	lt
 8017aa2:	4249      	neglt	r1, r1
 8017aa4:	b209      	sxth	r1, r1
 8017aa6:	428a      	cmp	r2, r1
 8017aa8:	da10      	bge.n	8017acc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8017aaa:	6920      	ldr	r0, [r4, #16]
 8017aac:	4669      	mov	r1, sp
 8017aae:	eba8 0606 	sub.w	r6, r8, r6
 8017ab2:	1bef      	subs	r7, r5, r7
 8017ab4:	6803      	ldr	r3, [r0, #0]
 8017ab6:	685b      	ldr	r3, [r3, #4]
 8017ab8:	4798      	blx	r3
 8017aba:	2300      	movs	r3, #0
 8017abc:	2001      	movs	r0, #1
 8017abe:	8166      	strh	r6, [r4, #10]
 8017ac0:	8123      	strh	r3, [r4, #8]
 8017ac2:	81a7      	strh	r7, [r4, #12]
 8017ac4:	f8a4 8004 	strh.w	r8, [r4, #4]
 8017ac8:	80e5      	strh	r5, [r4, #6]
 8017aca:	73a0      	strb	r0, [r4, #14]
 8017acc:	b004      	add	sp, #16
 8017ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad2:	bf00      	nop
 8017ad4:	0801a45c 	.word	0x0801a45c

08017ad8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8017ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ada:	461e      	mov	r6, r3
 8017adc:	1e4b      	subs	r3, r1, #1
 8017ade:	b085      	sub	sp, #20
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	460d      	mov	r5, r1
 8017ae6:	4617      	mov	r7, r2
 8017ae8:	d84b      	bhi.n	8017b82 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8017aea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017aee:	1cd3      	adds	r3, r2, #3
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	2b06      	cmp	r3, #6
 8017af4:	d916      	bls.n	8017b24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8017af6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8017b98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017afa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017afe:	f8cd c004 	str.w	ip, [sp, #4]
 8017b02:	f04f 0c00 	mov.w	ip, #0
 8017b06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017b0a:	6900      	ldr	r0, [r0, #16]
 8017b0c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017b10:	a901      	add	r1, sp, #4
 8017b12:	f88d c008 	strb.w	ip, [sp, #8]
 8017b16:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017b1a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b1e:	6803      	ldr	r3, [r0, #0]
 8017b20:	689b      	ldr	r3, [r3, #8]
 8017b22:	4798      	blx	r3
 8017b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b28:	1cd3      	adds	r3, r2, #3
 8017b2a:	b29b      	uxth	r3, r3
 8017b2c:	2b06      	cmp	r3, #6
 8017b2e:	d916      	bls.n	8017b5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b30:	f8df c064 	ldr.w	ip, [pc, #100]	; 8017b98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8017b34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017b38:	f8cd c004 	str.w	ip, [sp, #4]
 8017b3c:	f04f 0c01 	mov.w	ip, #1
 8017b40:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017b44:	6920      	ldr	r0, [r4, #16]
 8017b46:	f8ad 100c 	strh.w	r1, [sp, #12]
 8017b4a:	a901      	add	r1, sp, #4
 8017b4c:	f88d c008 	strb.w	ip, [sp, #8]
 8017b50:	f8ad 200a 	strh.w	r2, [sp, #10]
 8017b54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b58:	6803      	ldr	r3, [r0, #0]
 8017b5a:	689b      	ldr	r3, [r3, #8]
 8017b5c:	4798      	blx	r3
 8017b5e:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8017b60:	a901      	add	r1, sp, #4
 8017b62:	6920      	ldr	r0, [r4, #16]
 8017b64:	9301      	str	r3, [sp, #4]
 8017b66:	2300      	movs	r3, #0
 8017b68:	f88d 5008 	strb.w	r5, [sp, #8]
 8017b6c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8017b70:	f8ad 600c 	strh.w	r6, [sp, #12]
 8017b74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b78:	6803      	ldr	r3, [r0, #0]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	4798      	blx	r3
 8017b7e:	b005      	add	sp, #20
 8017b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b82:	2900      	cmp	r1, #0
 8017b84:	d1eb      	bne.n	8017b5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b86:	80a2      	strh	r2, [r4, #4]
 8017b88:	80c6      	strh	r6, [r0, #6]
 8017b8a:	60a1      	str	r1, [r4, #8]
 8017b8c:	81a1      	strh	r1, [r4, #12]
 8017b8e:	73a1      	strb	r1, [r4, #14]
 8017b90:	e7e5      	b.n	8017b5e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8017b92:	bf00      	nop
 8017b94:	0801a448 	.word	0x0801a448
 8017b98:	0801a470 	.word	0x0801a470

08017b9c <__aeabi_atexit>:
 8017b9c:	460b      	mov	r3, r1
 8017b9e:	4601      	mov	r1, r0
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f000 b853 	b.w	8017c4c <__cxa_atexit>

08017ba6 <_ZdlPvj>:
 8017ba6:	f000 b812 	b.w	8017bce <_ZdlPv>

08017baa <__cxa_guard_acquire>:
 8017baa:	6803      	ldr	r3, [r0, #0]
 8017bac:	07db      	lsls	r3, r3, #31
 8017bae:	d406      	bmi.n	8017bbe <__cxa_guard_acquire+0x14>
 8017bb0:	7843      	ldrb	r3, [r0, #1]
 8017bb2:	b103      	cbz	r3, 8017bb6 <__cxa_guard_acquire+0xc>
 8017bb4:	deff      	udf	#255	; 0xff
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	7043      	strb	r3, [r0, #1]
 8017bba:	4618      	mov	r0, r3
 8017bbc:	4770      	bx	lr
 8017bbe:	2000      	movs	r0, #0
 8017bc0:	4770      	bx	lr

08017bc2 <__cxa_guard_release>:
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	6003      	str	r3, [r0, #0]
 8017bc6:	4770      	bx	lr

08017bc8 <__cxa_pure_virtual>:
 8017bc8:	b508      	push	{r3, lr}
 8017bca:	f000 f80f 	bl	8017bec <_ZSt9terminatev>

08017bce <_ZdlPv>:
 8017bce:	f000 b989 	b.w	8017ee4 <free>

08017bd2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8017bd2:	b508      	push	{r3, lr}
 8017bd4:	4780      	blx	r0
 8017bd6:	f000 f80e 	bl	8017bf6 <abort>
	...

08017bdc <_ZSt13get_terminatev>:
 8017bdc:	4b02      	ldr	r3, [pc, #8]	; (8017be8 <_ZSt13get_terminatev+0xc>)
 8017bde:	6818      	ldr	r0, [r3, #0]
 8017be0:	f3bf 8f5b 	dmb	ish
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop
 8017be8:	240000a4 	.word	0x240000a4

08017bec <_ZSt9terminatev>:
 8017bec:	b508      	push	{r3, lr}
 8017bee:	f7ff fff5 	bl	8017bdc <_ZSt13get_terminatev>
 8017bf2:	f7ff ffee 	bl	8017bd2 <_ZN10__cxxabiv111__terminateEPFvvE>

08017bf6 <abort>:
 8017bf6:	b508      	push	{r3, lr}
 8017bf8:	2006      	movs	r0, #6
 8017bfa:	f000 fe01 	bl	8018800 <raise>
 8017bfe:	2001      	movs	r0, #1
 8017c00:	f7ea fb22 	bl	8002248 <_exit>

08017c04 <__assert_func>:
 8017c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c06:	4614      	mov	r4, r2
 8017c08:	461a      	mov	r2, r3
 8017c0a:	4b09      	ldr	r3, [pc, #36]	; (8017c30 <__assert_func+0x2c>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4605      	mov	r5, r0
 8017c10:	68d8      	ldr	r0, [r3, #12]
 8017c12:	b14c      	cbz	r4, 8017c28 <__assert_func+0x24>
 8017c14:	4b07      	ldr	r3, [pc, #28]	; (8017c34 <__assert_func+0x30>)
 8017c16:	9100      	str	r1, [sp, #0]
 8017c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c1c:	4906      	ldr	r1, [pc, #24]	; (8017c38 <__assert_func+0x34>)
 8017c1e:	462b      	mov	r3, r5
 8017c20:	f000 f8fe 	bl	8017e20 <fiprintf>
 8017c24:	f7ff ffe7 	bl	8017bf6 <abort>
 8017c28:	4b04      	ldr	r3, [pc, #16]	; (8017c3c <__assert_func+0x38>)
 8017c2a:	461c      	mov	r4, r3
 8017c2c:	e7f3      	b.n	8017c16 <__assert_func+0x12>
 8017c2e:	bf00      	nop
 8017c30:	240000a8 	.word	0x240000a8
 8017c34:	0801a698 	.word	0x0801a698
 8017c38:	0801a6a5 	.word	0x0801a6a5
 8017c3c:	0801a6d3 	.word	0x0801a6d3

08017c40 <atexit>:
 8017c40:	2300      	movs	r3, #0
 8017c42:	4601      	mov	r1, r0
 8017c44:	461a      	mov	r2, r3
 8017c46:	4618      	mov	r0, r3
 8017c48:	f000 bf0c 	b.w	8018a64 <__register_exitproc>

08017c4c <__cxa_atexit>:
 8017c4c:	b510      	push	{r4, lr}
 8017c4e:	4c05      	ldr	r4, [pc, #20]	; (8017c64 <__cxa_atexit+0x18>)
 8017c50:	4613      	mov	r3, r2
 8017c52:	b12c      	cbz	r4, 8017c60 <__cxa_atexit+0x14>
 8017c54:	460a      	mov	r2, r1
 8017c56:	4601      	mov	r1, r0
 8017c58:	2002      	movs	r0, #2
 8017c5a:	f000 ff03 	bl	8018a64 <__register_exitproc>
 8017c5e:	bd10      	pop	{r4, pc}
 8017c60:	4620      	mov	r0, r4
 8017c62:	e7fc      	b.n	8017c5e <__cxa_atexit+0x12>
 8017c64:	08018a65 	.word	0x08018a65

08017c68 <__errno>:
 8017c68:	4b01      	ldr	r3, [pc, #4]	; (8017c70 <__errno+0x8>)
 8017c6a:	6818      	ldr	r0, [r3, #0]
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	240000a8 	.word	0x240000a8

08017c74 <std>:
 8017c74:	2300      	movs	r3, #0
 8017c76:	b510      	push	{r4, lr}
 8017c78:	4604      	mov	r4, r0
 8017c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8017c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c82:	6083      	str	r3, [r0, #8]
 8017c84:	8181      	strh	r1, [r0, #12]
 8017c86:	6643      	str	r3, [r0, #100]	; 0x64
 8017c88:	81c2      	strh	r2, [r0, #14]
 8017c8a:	6183      	str	r3, [r0, #24]
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	2208      	movs	r2, #8
 8017c90:	305c      	adds	r0, #92	; 0x5c
 8017c92:	f000 f93d 	bl	8017f10 <memset>
 8017c96:	4b05      	ldr	r3, [pc, #20]	; (8017cac <std+0x38>)
 8017c98:	6263      	str	r3, [r4, #36]	; 0x24
 8017c9a:	4b05      	ldr	r3, [pc, #20]	; (8017cb0 <std+0x3c>)
 8017c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c9e:	4b05      	ldr	r3, [pc, #20]	; (8017cb4 <std+0x40>)
 8017ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ca2:	4b05      	ldr	r3, [pc, #20]	; (8017cb8 <std+0x44>)
 8017ca4:	6224      	str	r4, [r4, #32]
 8017ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8017ca8:	bd10      	pop	{r4, pc}
 8017caa:	bf00      	nop
 8017cac:	08018839 	.word	0x08018839
 8017cb0:	0801885b 	.word	0x0801885b
 8017cb4:	08018893 	.word	0x08018893
 8017cb8:	080188b7 	.word	0x080188b7

08017cbc <_cleanup_r>:
 8017cbc:	4901      	ldr	r1, [pc, #4]	; (8017cc4 <_cleanup_r+0x8>)
 8017cbe:	f000 b8c1 	b.w	8017e44 <_fwalk_reent>
 8017cc2:	bf00      	nop
 8017cc4:	08018c55 	.word	0x08018c55

08017cc8 <__sfmoreglue>:
 8017cc8:	b570      	push	{r4, r5, r6, lr}
 8017cca:	2268      	movs	r2, #104	; 0x68
 8017ccc:	1e4d      	subs	r5, r1, #1
 8017cce:	4355      	muls	r5, r2
 8017cd0:	460e      	mov	r6, r1
 8017cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017cd6:	f000 f98f 	bl	8017ff8 <_malloc_r>
 8017cda:	4604      	mov	r4, r0
 8017cdc:	b140      	cbz	r0, 8017cf0 <__sfmoreglue+0x28>
 8017cde:	2100      	movs	r1, #0
 8017ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8017ce4:	300c      	adds	r0, #12
 8017ce6:	60a0      	str	r0, [r4, #8]
 8017ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017cec:	f000 f910 	bl	8017f10 <memset>
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	bd70      	pop	{r4, r5, r6, pc}

08017cf4 <__sfp_lock_acquire>:
 8017cf4:	4801      	ldr	r0, [pc, #4]	; (8017cfc <__sfp_lock_acquire+0x8>)
 8017cf6:	f000 b8ea 	b.w	8017ece <__retarget_lock_acquire_recursive>
 8017cfa:	bf00      	nop
 8017cfc:	2400aeea 	.word	0x2400aeea

08017d00 <__sfp_lock_release>:
 8017d00:	4801      	ldr	r0, [pc, #4]	; (8017d08 <__sfp_lock_release+0x8>)
 8017d02:	f000 b8e6 	b.w	8017ed2 <__retarget_lock_release_recursive>
 8017d06:	bf00      	nop
 8017d08:	2400aeea 	.word	0x2400aeea

08017d0c <__sinit_lock_acquire>:
 8017d0c:	4801      	ldr	r0, [pc, #4]	; (8017d14 <__sinit_lock_acquire+0x8>)
 8017d0e:	f000 b8de 	b.w	8017ece <__retarget_lock_acquire_recursive>
 8017d12:	bf00      	nop
 8017d14:	2400aeeb 	.word	0x2400aeeb

08017d18 <__sinit_lock_release>:
 8017d18:	4801      	ldr	r0, [pc, #4]	; (8017d20 <__sinit_lock_release+0x8>)
 8017d1a:	f000 b8da 	b.w	8017ed2 <__retarget_lock_release_recursive>
 8017d1e:	bf00      	nop
 8017d20:	2400aeeb 	.word	0x2400aeeb

08017d24 <__sinit>:
 8017d24:	b510      	push	{r4, lr}
 8017d26:	4604      	mov	r4, r0
 8017d28:	f7ff fff0 	bl	8017d0c <__sinit_lock_acquire>
 8017d2c:	69a3      	ldr	r3, [r4, #24]
 8017d2e:	b11b      	cbz	r3, 8017d38 <__sinit+0x14>
 8017d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d34:	f7ff bff0 	b.w	8017d18 <__sinit_lock_release>
 8017d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8017d3e:	4b13      	ldr	r3, [pc, #76]	; (8017d8c <__sinit+0x68>)
 8017d40:	4a13      	ldr	r2, [pc, #76]	; (8017d90 <__sinit+0x6c>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d46:	42a3      	cmp	r3, r4
 8017d48:	bf04      	itt	eq
 8017d4a:	2301      	moveq	r3, #1
 8017d4c:	61a3      	streq	r3, [r4, #24]
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f000 f820 	bl	8017d94 <__sfp>
 8017d54:	6060      	str	r0, [r4, #4]
 8017d56:	4620      	mov	r0, r4
 8017d58:	f000 f81c 	bl	8017d94 <__sfp>
 8017d5c:	60a0      	str	r0, [r4, #8]
 8017d5e:	4620      	mov	r0, r4
 8017d60:	f000 f818 	bl	8017d94 <__sfp>
 8017d64:	2200      	movs	r2, #0
 8017d66:	60e0      	str	r0, [r4, #12]
 8017d68:	2104      	movs	r1, #4
 8017d6a:	6860      	ldr	r0, [r4, #4]
 8017d6c:	f7ff ff82 	bl	8017c74 <std>
 8017d70:	68a0      	ldr	r0, [r4, #8]
 8017d72:	2201      	movs	r2, #1
 8017d74:	2109      	movs	r1, #9
 8017d76:	f7ff ff7d 	bl	8017c74 <std>
 8017d7a:	68e0      	ldr	r0, [r4, #12]
 8017d7c:	2202      	movs	r2, #2
 8017d7e:	2112      	movs	r1, #18
 8017d80:	f7ff ff78 	bl	8017c74 <std>
 8017d84:	2301      	movs	r3, #1
 8017d86:	61a3      	str	r3, [r4, #24]
 8017d88:	e7d2      	b.n	8017d30 <__sinit+0xc>
 8017d8a:	bf00      	nop
 8017d8c:	0801a734 	.word	0x0801a734
 8017d90:	08017cbd 	.word	0x08017cbd

08017d94 <__sfp>:
 8017d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d96:	4607      	mov	r7, r0
 8017d98:	f7ff ffac 	bl	8017cf4 <__sfp_lock_acquire>
 8017d9c:	4b1e      	ldr	r3, [pc, #120]	; (8017e18 <__sfp+0x84>)
 8017d9e:	681e      	ldr	r6, [r3, #0]
 8017da0:	69b3      	ldr	r3, [r6, #24]
 8017da2:	b913      	cbnz	r3, 8017daa <__sfp+0x16>
 8017da4:	4630      	mov	r0, r6
 8017da6:	f7ff ffbd 	bl	8017d24 <__sinit>
 8017daa:	3648      	adds	r6, #72	; 0x48
 8017dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017db0:	3b01      	subs	r3, #1
 8017db2:	d503      	bpl.n	8017dbc <__sfp+0x28>
 8017db4:	6833      	ldr	r3, [r6, #0]
 8017db6:	b30b      	cbz	r3, 8017dfc <__sfp+0x68>
 8017db8:	6836      	ldr	r6, [r6, #0]
 8017dba:	e7f7      	b.n	8017dac <__sfp+0x18>
 8017dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017dc0:	b9d5      	cbnz	r5, 8017df8 <__sfp+0x64>
 8017dc2:	4b16      	ldr	r3, [pc, #88]	; (8017e1c <__sfp+0x88>)
 8017dc4:	60e3      	str	r3, [r4, #12]
 8017dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017dca:	6665      	str	r5, [r4, #100]	; 0x64
 8017dcc:	f000 f87e 	bl	8017ecc <__retarget_lock_init_recursive>
 8017dd0:	f7ff ff96 	bl	8017d00 <__sfp_lock_release>
 8017dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017ddc:	6025      	str	r5, [r4, #0]
 8017dde:	61a5      	str	r5, [r4, #24]
 8017de0:	2208      	movs	r2, #8
 8017de2:	4629      	mov	r1, r5
 8017de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017de8:	f000 f892 	bl	8017f10 <memset>
 8017dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017df4:	4620      	mov	r0, r4
 8017df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017df8:	3468      	adds	r4, #104	; 0x68
 8017dfa:	e7d9      	b.n	8017db0 <__sfp+0x1c>
 8017dfc:	2104      	movs	r1, #4
 8017dfe:	4638      	mov	r0, r7
 8017e00:	f7ff ff62 	bl	8017cc8 <__sfmoreglue>
 8017e04:	4604      	mov	r4, r0
 8017e06:	6030      	str	r0, [r6, #0]
 8017e08:	2800      	cmp	r0, #0
 8017e0a:	d1d5      	bne.n	8017db8 <__sfp+0x24>
 8017e0c:	f7ff ff78 	bl	8017d00 <__sfp_lock_release>
 8017e10:	230c      	movs	r3, #12
 8017e12:	603b      	str	r3, [r7, #0]
 8017e14:	e7ee      	b.n	8017df4 <__sfp+0x60>
 8017e16:	bf00      	nop
 8017e18:	0801a734 	.word	0x0801a734
 8017e1c:	ffff0001 	.word	0xffff0001

08017e20 <fiprintf>:
 8017e20:	b40e      	push	{r1, r2, r3}
 8017e22:	b503      	push	{r0, r1, lr}
 8017e24:	4601      	mov	r1, r0
 8017e26:	ab03      	add	r3, sp, #12
 8017e28:	4805      	ldr	r0, [pc, #20]	; (8017e40 <fiprintf+0x20>)
 8017e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e2e:	6800      	ldr	r0, [r0, #0]
 8017e30:	9301      	str	r3, [sp, #4]
 8017e32:	f000 f97f 	bl	8018134 <_vfiprintf_r>
 8017e36:	b002      	add	sp, #8
 8017e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e3c:	b003      	add	sp, #12
 8017e3e:	4770      	bx	lr
 8017e40:	240000a8 	.word	0x240000a8

08017e44 <_fwalk_reent>:
 8017e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e48:	4606      	mov	r6, r0
 8017e4a:	4688      	mov	r8, r1
 8017e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e50:	2700      	movs	r7, #0
 8017e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e56:	f1b9 0901 	subs.w	r9, r9, #1
 8017e5a:	d505      	bpl.n	8017e68 <_fwalk_reent+0x24>
 8017e5c:	6824      	ldr	r4, [r4, #0]
 8017e5e:	2c00      	cmp	r4, #0
 8017e60:	d1f7      	bne.n	8017e52 <_fwalk_reent+0xe>
 8017e62:	4638      	mov	r0, r7
 8017e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e68:	89ab      	ldrh	r3, [r5, #12]
 8017e6a:	2b01      	cmp	r3, #1
 8017e6c:	d907      	bls.n	8017e7e <_fwalk_reent+0x3a>
 8017e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e72:	3301      	adds	r3, #1
 8017e74:	d003      	beq.n	8017e7e <_fwalk_reent+0x3a>
 8017e76:	4629      	mov	r1, r5
 8017e78:	4630      	mov	r0, r6
 8017e7a:	47c0      	blx	r8
 8017e7c:	4307      	orrs	r7, r0
 8017e7e:	3568      	adds	r5, #104	; 0x68
 8017e80:	e7e9      	b.n	8017e56 <_fwalk_reent+0x12>
	...

08017e84 <__libc_init_array>:
 8017e84:	b570      	push	{r4, r5, r6, lr}
 8017e86:	4d0d      	ldr	r5, [pc, #52]	; (8017ebc <__libc_init_array+0x38>)
 8017e88:	4c0d      	ldr	r4, [pc, #52]	; (8017ec0 <__libc_init_array+0x3c>)
 8017e8a:	1b64      	subs	r4, r4, r5
 8017e8c:	10a4      	asrs	r4, r4, #2
 8017e8e:	2600      	movs	r6, #0
 8017e90:	42a6      	cmp	r6, r4
 8017e92:	d109      	bne.n	8017ea8 <__libc_init_array+0x24>
 8017e94:	4d0b      	ldr	r5, [pc, #44]	; (8017ec4 <__libc_init_array+0x40>)
 8017e96:	4c0c      	ldr	r4, [pc, #48]	; (8017ec8 <__libc_init_array+0x44>)
 8017e98:	f000 ffd0 	bl	8018e3c <_init>
 8017e9c:	1b64      	subs	r4, r4, r5
 8017e9e:	10a4      	asrs	r4, r4, #2
 8017ea0:	2600      	movs	r6, #0
 8017ea2:	42a6      	cmp	r6, r4
 8017ea4:	d105      	bne.n	8017eb2 <__libc_init_array+0x2e>
 8017ea6:	bd70      	pop	{r4, r5, r6, pc}
 8017ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017eac:	4798      	blx	r3
 8017eae:	3601      	adds	r6, #1
 8017eb0:	e7ee      	b.n	8017e90 <__libc_init_array+0xc>
 8017eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017eb6:	4798      	blx	r3
 8017eb8:	3601      	adds	r6, #1
 8017eba:	e7f2      	b.n	8017ea2 <__libc_init_array+0x1e>
 8017ebc:	0801a788 	.word	0x0801a788
 8017ec0:	0801a788 	.word	0x0801a788
 8017ec4:	0801a788 	.word	0x0801a788
 8017ec8:	0801a79c 	.word	0x0801a79c

08017ecc <__retarget_lock_init_recursive>:
 8017ecc:	4770      	bx	lr

08017ece <__retarget_lock_acquire_recursive>:
 8017ece:	4770      	bx	lr

08017ed0 <__retarget_lock_release>:
 8017ed0:	4770      	bx	lr

08017ed2 <__retarget_lock_release_recursive>:
 8017ed2:	4770      	bx	lr

08017ed4 <malloc>:
 8017ed4:	4b02      	ldr	r3, [pc, #8]	; (8017ee0 <malloc+0xc>)
 8017ed6:	4601      	mov	r1, r0
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	f000 b88d 	b.w	8017ff8 <_malloc_r>
 8017ede:	bf00      	nop
 8017ee0:	240000a8 	.word	0x240000a8

08017ee4 <free>:
 8017ee4:	4b02      	ldr	r3, [pc, #8]	; (8017ef0 <free+0xc>)
 8017ee6:	4601      	mov	r1, r0
 8017ee8:	6818      	ldr	r0, [r3, #0]
 8017eea:	f000 b819 	b.w	8017f20 <_free_r>
 8017eee:	bf00      	nop
 8017ef0:	240000a8 	.word	0x240000a8

08017ef4 <memcpy>:
 8017ef4:	440a      	add	r2, r1
 8017ef6:	4291      	cmp	r1, r2
 8017ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8017efc:	d100      	bne.n	8017f00 <memcpy+0xc>
 8017efe:	4770      	bx	lr
 8017f00:	b510      	push	{r4, lr}
 8017f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f0a:	4291      	cmp	r1, r2
 8017f0c:	d1f9      	bne.n	8017f02 <memcpy+0xe>
 8017f0e:	bd10      	pop	{r4, pc}

08017f10 <memset>:
 8017f10:	4402      	add	r2, r0
 8017f12:	4603      	mov	r3, r0
 8017f14:	4293      	cmp	r3, r2
 8017f16:	d100      	bne.n	8017f1a <memset+0xa>
 8017f18:	4770      	bx	lr
 8017f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8017f1e:	e7f9      	b.n	8017f14 <memset+0x4>

08017f20 <_free_r>:
 8017f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f22:	2900      	cmp	r1, #0
 8017f24:	d044      	beq.n	8017fb0 <_free_r+0x90>
 8017f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f2a:	9001      	str	r0, [sp, #4]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8017f32:	bfb8      	it	lt
 8017f34:	18e4      	addlt	r4, r4, r3
 8017f36:	f000 ff41 	bl	8018dbc <__malloc_lock>
 8017f3a:	4a1e      	ldr	r2, [pc, #120]	; (8017fb4 <_free_r+0x94>)
 8017f3c:	9801      	ldr	r0, [sp, #4]
 8017f3e:	6813      	ldr	r3, [r2, #0]
 8017f40:	b933      	cbnz	r3, 8017f50 <_free_r+0x30>
 8017f42:	6063      	str	r3, [r4, #4]
 8017f44:	6014      	str	r4, [r2, #0]
 8017f46:	b003      	add	sp, #12
 8017f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f4c:	f000 bf3c 	b.w	8018dc8 <__malloc_unlock>
 8017f50:	42a3      	cmp	r3, r4
 8017f52:	d908      	bls.n	8017f66 <_free_r+0x46>
 8017f54:	6825      	ldr	r5, [r4, #0]
 8017f56:	1961      	adds	r1, r4, r5
 8017f58:	428b      	cmp	r3, r1
 8017f5a:	bf01      	itttt	eq
 8017f5c:	6819      	ldreq	r1, [r3, #0]
 8017f5e:	685b      	ldreq	r3, [r3, #4]
 8017f60:	1949      	addeq	r1, r1, r5
 8017f62:	6021      	streq	r1, [r4, #0]
 8017f64:	e7ed      	b.n	8017f42 <_free_r+0x22>
 8017f66:	461a      	mov	r2, r3
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	b10b      	cbz	r3, 8017f70 <_free_r+0x50>
 8017f6c:	42a3      	cmp	r3, r4
 8017f6e:	d9fa      	bls.n	8017f66 <_free_r+0x46>
 8017f70:	6811      	ldr	r1, [r2, #0]
 8017f72:	1855      	adds	r5, r2, r1
 8017f74:	42a5      	cmp	r5, r4
 8017f76:	d10b      	bne.n	8017f90 <_free_r+0x70>
 8017f78:	6824      	ldr	r4, [r4, #0]
 8017f7a:	4421      	add	r1, r4
 8017f7c:	1854      	adds	r4, r2, r1
 8017f7e:	42a3      	cmp	r3, r4
 8017f80:	6011      	str	r1, [r2, #0]
 8017f82:	d1e0      	bne.n	8017f46 <_free_r+0x26>
 8017f84:	681c      	ldr	r4, [r3, #0]
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	6053      	str	r3, [r2, #4]
 8017f8a:	4421      	add	r1, r4
 8017f8c:	6011      	str	r1, [r2, #0]
 8017f8e:	e7da      	b.n	8017f46 <_free_r+0x26>
 8017f90:	d902      	bls.n	8017f98 <_free_r+0x78>
 8017f92:	230c      	movs	r3, #12
 8017f94:	6003      	str	r3, [r0, #0]
 8017f96:	e7d6      	b.n	8017f46 <_free_r+0x26>
 8017f98:	6825      	ldr	r5, [r4, #0]
 8017f9a:	1961      	adds	r1, r4, r5
 8017f9c:	428b      	cmp	r3, r1
 8017f9e:	bf04      	itt	eq
 8017fa0:	6819      	ldreq	r1, [r3, #0]
 8017fa2:	685b      	ldreq	r3, [r3, #4]
 8017fa4:	6063      	str	r3, [r4, #4]
 8017fa6:	bf04      	itt	eq
 8017fa8:	1949      	addeq	r1, r1, r5
 8017faa:	6021      	streq	r1, [r4, #0]
 8017fac:	6054      	str	r4, [r2, #4]
 8017fae:	e7ca      	b.n	8017f46 <_free_r+0x26>
 8017fb0:	b003      	add	sp, #12
 8017fb2:	bd30      	pop	{r4, r5, pc}
 8017fb4:	2400aeec 	.word	0x2400aeec

08017fb8 <sbrk_aligned>:
 8017fb8:	b570      	push	{r4, r5, r6, lr}
 8017fba:	4e0e      	ldr	r6, [pc, #56]	; (8017ff4 <sbrk_aligned+0x3c>)
 8017fbc:	460c      	mov	r4, r1
 8017fbe:	6831      	ldr	r1, [r6, #0]
 8017fc0:	4605      	mov	r5, r0
 8017fc2:	b911      	cbnz	r1, 8017fca <sbrk_aligned+0x12>
 8017fc4:	f000 fbe4 	bl	8018790 <_sbrk_r>
 8017fc8:	6030      	str	r0, [r6, #0]
 8017fca:	4621      	mov	r1, r4
 8017fcc:	4628      	mov	r0, r5
 8017fce:	f000 fbdf 	bl	8018790 <_sbrk_r>
 8017fd2:	1c43      	adds	r3, r0, #1
 8017fd4:	d00a      	beq.n	8017fec <sbrk_aligned+0x34>
 8017fd6:	1cc4      	adds	r4, r0, #3
 8017fd8:	f024 0403 	bic.w	r4, r4, #3
 8017fdc:	42a0      	cmp	r0, r4
 8017fde:	d007      	beq.n	8017ff0 <sbrk_aligned+0x38>
 8017fe0:	1a21      	subs	r1, r4, r0
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	f000 fbd4 	bl	8018790 <_sbrk_r>
 8017fe8:	3001      	adds	r0, #1
 8017fea:	d101      	bne.n	8017ff0 <sbrk_aligned+0x38>
 8017fec:	f04f 34ff 	mov.w	r4, #4294967295
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}
 8017ff4:	2400aef0 	.word	0x2400aef0

08017ff8 <_malloc_r>:
 8017ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ffc:	1ccd      	adds	r5, r1, #3
 8017ffe:	f025 0503 	bic.w	r5, r5, #3
 8018002:	3508      	adds	r5, #8
 8018004:	2d0c      	cmp	r5, #12
 8018006:	bf38      	it	cc
 8018008:	250c      	movcc	r5, #12
 801800a:	2d00      	cmp	r5, #0
 801800c:	4607      	mov	r7, r0
 801800e:	db01      	blt.n	8018014 <_malloc_r+0x1c>
 8018010:	42a9      	cmp	r1, r5
 8018012:	d905      	bls.n	8018020 <_malloc_r+0x28>
 8018014:	230c      	movs	r3, #12
 8018016:	603b      	str	r3, [r7, #0]
 8018018:	2600      	movs	r6, #0
 801801a:	4630      	mov	r0, r6
 801801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018020:	4e2e      	ldr	r6, [pc, #184]	; (80180dc <_malloc_r+0xe4>)
 8018022:	f000 fecb 	bl	8018dbc <__malloc_lock>
 8018026:	6833      	ldr	r3, [r6, #0]
 8018028:	461c      	mov	r4, r3
 801802a:	bb34      	cbnz	r4, 801807a <_malloc_r+0x82>
 801802c:	4629      	mov	r1, r5
 801802e:	4638      	mov	r0, r7
 8018030:	f7ff ffc2 	bl	8017fb8 <sbrk_aligned>
 8018034:	1c43      	adds	r3, r0, #1
 8018036:	4604      	mov	r4, r0
 8018038:	d14d      	bne.n	80180d6 <_malloc_r+0xde>
 801803a:	6834      	ldr	r4, [r6, #0]
 801803c:	4626      	mov	r6, r4
 801803e:	2e00      	cmp	r6, #0
 8018040:	d140      	bne.n	80180c4 <_malloc_r+0xcc>
 8018042:	6823      	ldr	r3, [r4, #0]
 8018044:	4631      	mov	r1, r6
 8018046:	4638      	mov	r0, r7
 8018048:	eb04 0803 	add.w	r8, r4, r3
 801804c:	f000 fba0 	bl	8018790 <_sbrk_r>
 8018050:	4580      	cmp	r8, r0
 8018052:	d13a      	bne.n	80180ca <_malloc_r+0xd2>
 8018054:	6821      	ldr	r1, [r4, #0]
 8018056:	3503      	adds	r5, #3
 8018058:	1a6d      	subs	r5, r5, r1
 801805a:	f025 0503 	bic.w	r5, r5, #3
 801805e:	3508      	adds	r5, #8
 8018060:	2d0c      	cmp	r5, #12
 8018062:	bf38      	it	cc
 8018064:	250c      	movcc	r5, #12
 8018066:	4629      	mov	r1, r5
 8018068:	4638      	mov	r0, r7
 801806a:	f7ff ffa5 	bl	8017fb8 <sbrk_aligned>
 801806e:	3001      	adds	r0, #1
 8018070:	d02b      	beq.n	80180ca <_malloc_r+0xd2>
 8018072:	6823      	ldr	r3, [r4, #0]
 8018074:	442b      	add	r3, r5
 8018076:	6023      	str	r3, [r4, #0]
 8018078:	e00e      	b.n	8018098 <_malloc_r+0xa0>
 801807a:	6822      	ldr	r2, [r4, #0]
 801807c:	1b52      	subs	r2, r2, r5
 801807e:	d41e      	bmi.n	80180be <_malloc_r+0xc6>
 8018080:	2a0b      	cmp	r2, #11
 8018082:	d916      	bls.n	80180b2 <_malloc_r+0xba>
 8018084:	1961      	adds	r1, r4, r5
 8018086:	42a3      	cmp	r3, r4
 8018088:	6025      	str	r5, [r4, #0]
 801808a:	bf18      	it	ne
 801808c:	6059      	strne	r1, [r3, #4]
 801808e:	6863      	ldr	r3, [r4, #4]
 8018090:	bf08      	it	eq
 8018092:	6031      	streq	r1, [r6, #0]
 8018094:	5162      	str	r2, [r4, r5]
 8018096:	604b      	str	r3, [r1, #4]
 8018098:	4638      	mov	r0, r7
 801809a:	f104 060b 	add.w	r6, r4, #11
 801809e:	f000 fe93 	bl	8018dc8 <__malloc_unlock>
 80180a2:	f026 0607 	bic.w	r6, r6, #7
 80180a6:	1d23      	adds	r3, r4, #4
 80180a8:	1af2      	subs	r2, r6, r3
 80180aa:	d0b6      	beq.n	801801a <_malloc_r+0x22>
 80180ac:	1b9b      	subs	r3, r3, r6
 80180ae:	50a3      	str	r3, [r4, r2]
 80180b0:	e7b3      	b.n	801801a <_malloc_r+0x22>
 80180b2:	6862      	ldr	r2, [r4, #4]
 80180b4:	42a3      	cmp	r3, r4
 80180b6:	bf0c      	ite	eq
 80180b8:	6032      	streq	r2, [r6, #0]
 80180ba:	605a      	strne	r2, [r3, #4]
 80180bc:	e7ec      	b.n	8018098 <_malloc_r+0xa0>
 80180be:	4623      	mov	r3, r4
 80180c0:	6864      	ldr	r4, [r4, #4]
 80180c2:	e7b2      	b.n	801802a <_malloc_r+0x32>
 80180c4:	4634      	mov	r4, r6
 80180c6:	6876      	ldr	r6, [r6, #4]
 80180c8:	e7b9      	b.n	801803e <_malloc_r+0x46>
 80180ca:	230c      	movs	r3, #12
 80180cc:	603b      	str	r3, [r7, #0]
 80180ce:	4638      	mov	r0, r7
 80180d0:	f000 fe7a 	bl	8018dc8 <__malloc_unlock>
 80180d4:	e7a1      	b.n	801801a <_malloc_r+0x22>
 80180d6:	6025      	str	r5, [r4, #0]
 80180d8:	e7de      	b.n	8018098 <_malloc_r+0xa0>
 80180da:	bf00      	nop
 80180dc:	2400aeec 	.word	0x2400aeec

080180e0 <__sfputc_r>:
 80180e0:	6893      	ldr	r3, [r2, #8]
 80180e2:	3b01      	subs	r3, #1
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	b410      	push	{r4}
 80180e8:	6093      	str	r3, [r2, #8]
 80180ea:	da08      	bge.n	80180fe <__sfputc_r+0x1e>
 80180ec:	6994      	ldr	r4, [r2, #24]
 80180ee:	42a3      	cmp	r3, r4
 80180f0:	db01      	blt.n	80180f6 <__sfputc_r+0x16>
 80180f2:	290a      	cmp	r1, #10
 80180f4:	d103      	bne.n	80180fe <__sfputc_r+0x1e>
 80180f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180fa:	f000 bbe1 	b.w	80188c0 <__swbuf_r>
 80180fe:	6813      	ldr	r3, [r2, #0]
 8018100:	1c58      	adds	r0, r3, #1
 8018102:	6010      	str	r0, [r2, #0]
 8018104:	7019      	strb	r1, [r3, #0]
 8018106:	4608      	mov	r0, r1
 8018108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801810c:	4770      	bx	lr

0801810e <__sfputs_r>:
 801810e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018110:	4606      	mov	r6, r0
 8018112:	460f      	mov	r7, r1
 8018114:	4614      	mov	r4, r2
 8018116:	18d5      	adds	r5, r2, r3
 8018118:	42ac      	cmp	r4, r5
 801811a:	d101      	bne.n	8018120 <__sfputs_r+0x12>
 801811c:	2000      	movs	r0, #0
 801811e:	e007      	b.n	8018130 <__sfputs_r+0x22>
 8018120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018124:	463a      	mov	r2, r7
 8018126:	4630      	mov	r0, r6
 8018128:	f7ff ffda 	bl	80180e0 <__sfputc_r>
 801812c:	1c43      	adds	r3, r0, #1
 801812e:	d1f3      	bne.n	8018118 <__sfputs_r+0xa>
 8018130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018134 <_vfiprintf_r>:
 8018134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018138:	460d      	mov	r5, r1
 801813a:	b09d      	sub	sp, #116	; 0x74
 801813c:	4614      	mov	r4, r2
 801813e:	4698      	mov	r8, r3
 8018140:	4606      	mov	r6, r0
 8018142:	b118      	cbz	r0, 801814c <_vfiprintf_r+0x18>
 8018144:	6983      	ldr	r3, [r0, #24]
 8018146:	b90b      	cbnz	r3, 801814c <_vfiprintf_r+0x18>
 8018148:	f7ff fdec 	bl	8017d24 <__sinit>
 801814c:	4b89      	ldr	r3, [pc, #548]	; (8018374 <_vfiprintf_r+0x240>)
 801814e:	429d      	cmp	r5, r3
 8018150:	d11b      	bne.n	801818a <_vfiprintf_r+0x56>
 8018152:	6875      	ldr	r5, [r6, #4]
 8018154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018156:	07d9      	lsls	r1, r3, #31
 8018158:	d405      	bmi.n	8018166 <_vfiprintf_r+0x32>
 801815a:	89ab      	ldrh	r3, [r5, #12]
 801815c:	059a      	lsls	r2, r3, #22
 801815e:	d402      	bmi.n	8018166 <_vfiprintf_r+0x32>
 8018160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018162:	f7ff feb4 	bl	8017ece <__retarget_lock_acquire_recursive>
 8018166:	89ab      	ldrh	r3, [r5, #12]
 8018168:	071b      	lsls	r3, r3, #28
 801816a:	d501      	bpl.n	8018170 <_vfiprintf_r+0x3c>
 801816c:	692b      	ldr	r3, [r5, #16]
 801816e:	b9eb      	cbnz	r3, 80181ac <_vfiprintf_r+0x78>
 8018170:	4629      	mov	r1, r5
 8018172:	4630      	mov	r0, r6
 8018174:	f000 fc08 	bl	8018988 <__swsetup_r>
 8018178:	b1c0      	cbz	r0, 80181ac <_vfiprintf_r+0x78>
 801817a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801817c:	07dc      	lsls	r4, r3, #31
 801817e:	d50e      	bpl.n	801819e <_vfiprintf_r+0x6a>
 8018180:	f04f 30ff 	mov.w	r0, #4294967295
 8018184:	b01d      	add	sp, #116	; 0x74
 8018186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801818a:	4b7b      	ldr	r3, [pc, #492]	; (8018378 <_vfiprintf_r+0x244>)
 801818c:	429d      	cmp	r5, r3
 801818e:	d101      	bne.n	8018194 <_vfiprintf_r+0x60>
 8018190:	68b5      	ldr	r5, [r6, #8]
 8018192:	e7df      	b.n	8018154 <_vfiprintf_r+0x20>
 8018194:	4b79      	ldr	r3, [pc, #484]	; (801837c <_vfiprintf_r+0x248>)
 8018196:	429d      	cmp	r5, r3
 8018198:	bf08      	it	eq
 801819a:	68f5      	ldreq	r5, [r6, #12]
 801819c:	e7da      	b.n	8018154 <_vfiprintf_r+0x20>
 801819e:	89ab      	ldrh	r3, [r5, #12]
 80181a0:	0598      	lsls	r0, r3, #22
 80181a2:	d4ed      	bmi.n	8018180 <_vfiprintf_r+0x4c>
 80181a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181a6:	f7ff fe94 	bl	8017ed2 <__retarget_lock_release_recursive>
 80181aa:	e7e9      	b.n	8018180 <_vfiprintf_r+0x4c>
 80181ac:	2300      	movs	r3, #0
 80181ae:	9309      	str	r3, [sp, #36]	; 0x24
 80181b0:	2320      	movs	r3, #32
 80181b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80181ba:	2330      	movs	r3, #48	; 0x30
 80181bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018380 <_vfiprintf_r+0x24c>
 80181c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181c4:	f04f 0901 	mov.w	r9, #1
 80181c8:	4623      	mov	r3, r4
 80181ca:	469a      	mov	sl, r3
 80181cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181d0:	b10a      	cbz	r2, 80181d6 <_vfiprintf_r+0xa2>
 80181d2:	2a25      	cmp	r2, #37	; 0x25
 80181d4:	d1f9      	bne.n	80181ca <_vfiprintf_r+0x96>
 80181d6:	ebba 0b04 	subs.w	fp, sl, r4
 80181da:	d00b      	beq.n	80181f4 <_vfiprintf_r+0xc0>
 80181dc:	465b      	mov	r3, fp
 80181de:	4622      	mov	r2, r4
 80181e0:	4629      	mov	r1, r5
 80181e2:	4630      	mov	r0, r6
 80181e4:	f7ff ff93 	bl	801810e <__sfputs_r>
 80181e8:	3001      	adds	r0, #1
 80181ea:	f000 80aa 	beq.w	8018342 <_vfiprintf_r+0x20e>
 80181ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181f0:	445a      	add	r2, fp
 80181f2:	9209      	str	r2, [sp, #36]	; 0x24
 80181f4:	f89a 3000 	ldrb.w	r3, [sl]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	f000 80a2 	beq.w	8018342 <_vfiprintf_r+0x20e>
 80181fe:	2300      	movs	r3, #0
 8018200:	f04f 32ff 	mov.w	r2, #4294967295
 8018204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018208:	f10a 0a01 	add.w	sl, sl, #1
 801820c:	9304      	str	r3, [sp, #16]
 801820e:	9307      	str	r3, [sp, #28]
 8018210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018214:	931a      	str	r3, [sp, #104]	; 0x68
 8018216:	4654      	mov	r4, sl
 8018218:	2205      	movs	r2, #5
 801821a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801821e:	4858      	ldr	r0, [pc, #352]	; (8018380 <_vfiprintf_r+0x24c>)
 8018220:	f7e8 f866 	bl	80002f0 <memchr>
 8018224:	9a04      	ldr	r2, [sp, #16]
 8018226:	b9d8      	cbnz	r0, 8018260 <_vfiprintf_r+0x12c>
 8018228:	06d1      	lsls	r1, r2, #27
 801822a:	bf44      	itt	mi
 801822c:	2320      	movmi	r3, #32
 801822e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018232:	0713      	lsls	r3, r2, #28
 8018234:	bf44      	itt	mi
 8018236:	232b      	movmi	r3, #43	; 0x2b
 8018238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801823c:	f89a 3000 	ldrb.w	r3, [sl]
 8018240:	2b2a      	cmp	r3, #42	; 0x2a
 8018242:	d015      	beq.n	8018270 <_vfiprintf_r+0x13c>
 8018244:	9a07      	ldr	r2, [sp, #28]
 8018246:	4654      	mov	r4, sl
 8018248:	2000      	movs	r0, #0
 801824a:	f04f 0c0a 	mov.w	ip, #10
 801824e:	4621      	mov	r1, r4
 8018250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018254:	3b30      	subs	r3, #48	; 0x30
 8018256:	2b09      	cmp	r3, #9
 8018258:	d94e      	bls.n	80182f8 <_vfiprintf_r+0x1c4>
 801825a:	b1b0      	cbz	r0, 801828a <_vfiprintf_r+0x156>
 801825c:	9207      	str	r2, [sp, #28]
 801825e:	e014      	b.n	801828a <_vfiprintf_r+0x156>
 8018260:	eba0 0308 	sub.w	r3, r0, r8
 8018264:	fa09 f303 	lsl.w	r3, r9, r3
 8018268:	4313      	orrs	r3, r2
 801826a:	9304      	str	r3, [sp, #16]
 801826c:	46a2      	mov	sl, r4
 801826e:	e7d2      	b.n	8018216 <_vfiprintf_r+0xe2>
 8018270:	9b03      	ldr	r3, [sp, #12]
 8018272:	1d19      	adds	r1, r3, #4
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	9103      	str	r1, [sp, #12]
 8018278:	2b00      	cmp	r3, #0
 801827a:	bfbb      	ittet	lt
 801827c:	425b      	neglt	r3, r3
 801827e:	f042 0202 	orrlt.w	r2, r2, #2
 8018282:	9307      	strge	r3, [sp, #28]
 8018284:	9307      	strlt	r3, [sp, #28]
 8018286:	bfb8      	it	lt
 8018288:	9204      	strlt	r2, [sp, #16]
 801828a:	7823      	ldrb	r3, [r4, #0]
 801828c:	2b2e      	cmp	r3, #46	; 0x2e
 801828e:	d10c      	bne.n	80182aa <_vfiprintf_r+0x176>
 8018290:	7863      	ldrb	r3, [r4, #1]
 8018292:	2b2a      	cmp	r3, #42	; 0x2a
 8018294:	d135      	bne.n	8018302 <_vfiprintf_r+0x1ce>
 8018296:	9b03      	ldr	r3, [sp, #12]
 8018298:	1d1a      	adds	r2, r3, #4
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	9203      	str	r2, [sp, #12]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	bfb8      	it	lt
 80182a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80182a6:	3402      	adds	r4, #2
 80182a8:	9305      	str	r3, [sp, #20]
 80182aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018390 <_vfiprintf_r+0x25c>
 80182ae:	7821      	ldrb	r1, [r4, #0]
 80182b0:	2203      	movs	r2, #3
 80182b2:	4650      	mov	r0, sl
 80182b4:	f7e8 f81c 	bl	80002f0 <memchr>
 80182b8:	b140      	cbz	r0, 80182cc <_vfiprintf_r+0x198>
 80182ba:	2340      	movs	r3, #64	; 0x40
 80182bc:	eba0 000a 	sub.w	r0, r0, sl
 80182c0:	fa03 f000 	lsl.w	r0, r3, r0
 80182c4:	9b04      	ldr	r3, [sp, #16]
 80182c6:	4303      	orrs	r3, r0
 80182c8:	3401      	adds	r4, #1
 80182ca:	9304      	str	r3, [sp, #16]
 80182cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182d0:	482c      	ldr	r0, [pc, #176]	; (8018384 <_vfiprintf_r+0x250>)
 80182d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182d6:	2206      	movs	r2, #6
 80182d8:	f7e8 f80a 	bl	80002f0 <memchr>
 80182dc:	2800      	cmp	r0, #0
 80182de:	d03f      	beq.n	8018360 <_vfiprintf_r+0x22c>
 80182e0:	4b29      	ldr	r3, [pc, #164]	; (8018388 <_vfiprintf_r+0x254>)
 80182e2:	bb1b      	cbnz	r3, 801832c <_vfiprintf_r+0x1f8>
 80182e4:	9b03      	ldr	r3, [sp, #12]
 80182e6:	3307      	adds	r3, #7
 80182e8:	f023 0307 	bic.w	r3, r3, #7
 80182ec:	3308      	adds	r3, #8
 80182ee:	9303      	str	r3, [sp, #12]
 80182f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182f2:	443b      	add	r3, r7
 80182f4:	9309      	str	r3, [sp, #36]	; 0x24
 80182f6:	e767      	b.n	80181c8 <_vfiprintf_r+0x94>
 80182f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80182fc:	460c      	mov	r4, r1
 80182fe:	2001      	movs	r0, #1
 8018300:	e7a5      	b.n	801824e <_vfiprintf_r+0x11a>
 8018302:	2300      	movs	r3, #0
 8018304:	3401      	adds	r4, #1
 8018306:	9305      	str	r3, [sp, #20]
 8018308:	4619      	mov	r1, r3
 801830a:	f04f 0c0a 	mov.w	ip, #10
 801830e:	4620      	mov	r0, r4
 8018310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018314:	3a30      	subs	r2, #48	; 0x30
 8018316:	2a09      	cmp	r2, #9
 8018318:	d903      	bls.n	8018322 <_vfiprintf_r+0x1ee>
 801831a:	2b00      	cmp	r3, #0
 801831c:	d0c5      	beq.n	80182aa <_vfiprintf_r+0x176>
 801831e:	9105      	str	r1, [sp, #20]
 8018320:	e7c3      	b.n	80182aa <_vfiprintf_r+0x176>
 8018322:	fb0c 2101 	mla	r1, ip, r1, r2
 8018326:	4604      	mov	r4, r0
 8018328:	2301      	movs	r3, #1
 801832a:	e7f0      	b.n	801830e <_vfiprintf_r+0x1da>
 801832c:	ab03      	add	r3, sp, #12
 801832e:	9300      	str	r3, [sp, #0]
 8018330:	462a      	mov	r2, r5
 8018332:	4b16      	ldr	r3, [pc, #88]	; (801838c <_vfiprintf_r+0x258>)
 8018334:	a904      	add	r1, sp, #16
 8018336:	4630      	mov	r0, r6
 8018338:	f3af 8000 	nop.w
 801833c:	4607      	mov	r7, r0
 801833e:	1c78      	adds	r0, r7, #1
 8018340:	d1d6      	bne.n	80182f0 <_vfiprintf_r+0x1bc>
 8018342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018344:	07d9      	lsls	r1, r3, #31
 8018346:	d405      	bmi.n	8018354 <_vfiprintf_r+0x220>
 8018348:	89ab      	ldrh	r3, [r5, #12]
 801834a:	059a      	lsls	r2, r3, #22
 801834c:	d402      	bmi.n	8018354 <_vfiprintf_r+0x220>
 801834e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018350:	f7ff fdbf 	bl	8017ed2 <__retarget_lock_release_recursive>
 8018354:	89ab      	ldrh	r3, [r5, #12]
 8018356:	065b      	lsls	r3, r3, #25
 8018358:	f53f af12 	bmi.w	8018180 <_vfiprintf_r+0x4c>
 801835c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801835e:	e711      	b.n	8018184 <_vfiprintf_r+0x50>
 8018360:	ab03      	add	r3, sp, #12
 8018362:	9300      	str	r3, [sp, #0]
 8018364:	462a      	mov	r2, r5
 8018366:	4b09      	ldr	r3, [pc, #36]	; (801838c <_vfiprintf_r+0x258>)
 8018368:	a904      	add	r1, sp, #16
 801836a:	4630      	mov	r0, r6
 801836c:	f000 f880 	bl	8018470 <_printf_i>
 8018370:	e7e4      	b.n	801833c <_vfiprintf_r+0x208>
 8018372:	bf00      	nop
 8018374:	0801a6f4 	.word	0x0801a6f4
 8018378:	0801a714 	.word	0x0801a714
 801837c:	0801a6d4 	.word	0x0801a6d4
 8018380:	0801a738 	.word	0x0801a738
 8018384:	0801a742 	.word	0x0801a742
 8018388:	00000000 	.word	0x00000000
 801838c:	0801810f 	.word	0x0801810f
 8018390:	0801a73e 	.word	0x0801a73e

08018394 <_printf_common>:
 8018394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018398:	4616      	mov	r6, r2
 801839a:	4699      	mov	r9, r3
 801839c:	688a      	ldr	r2, [r1, #8]
 801839e:	690b      	ldr	r3, [r1, #16]
 80183a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80183a4:	4293      	cmp	r3, r2
 80183a6:	bfb8      	it	lt
 80183a8:	4613      	movlt	r3, r2
 80183aa:	6033      	str	r3, [r6, #0]
 80183ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80183b0:	4607      	mov	r7, r0
 80183b2:	460c      	mov	r4, r1
 80183b4:	b10a      	cbz	r2, 80183ba <_printf_common+0x26>
 80183b6:	3301      	adds	r3, #1
 80183b8:	6033      	str	r3, [r6, #0]
 80183ba:	6823      	ldr	r3, [r4, #0]
 80183bc:	0699      	lsls	r1, r3, #26
 80183be:	bf42      	ittt	mi
 80183c0:	6833      	ldrmi	r3, [r6, #0]
 80183c2:	3302      	addmi	r3, #2
 80183c4:	6033      	strmi	r3, [r6, #0]
 80183c6:	6825      	ldr	r5, [r4, #0]
 80183c8:	f015 0506 	ands.w	r5, r5, #6
 80183cc:	d106      	bne.n	80183dc <_printf_common+0x48>
 80183ce:	f104 0a19 	add.w	sl, r4, #25
 80183d2:	68e3      	ldr	r3, [r4, #12]
 80183d4:	6832      	ldr	r2, [r6, #0]
 80183d6:	1a9b      	subs	r3, r3, r2
 80183d8:	42ab      	cmp	r3, r5
 80183da:	dc26      	bgt.n	801842a <_printf_common+0x96>
 80183dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80183e0:	1e13      	subs	r3, r2, #0
 80183e2:	6822      	ldr	r2, [r4, #0]
 80183e4:	bf18      	it	ne
 80183e6:	2301      	movne	r3, #1
 80183e8:	0692      	lsls	r2, r2, #26
 80183ea:	d42b      	bmi.n	8018444 <_printf_common+0xb0>
 80183ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183f0:	4649      	mov	r1, r9
 80183f2:	4638      	mov	r0, r7
 80183f4:	47c0      	blx	r8
 80183f6:	3001      	adds	r0, #1
 80183f8:	d01e      	beq.n	8018438 <_printf_common+0xa4>
 80183fa:	6823      	ldr	r3, [r4, #0]
 80183fc:	68e5      	ldr	r5, [r4, #12]
 80183fe:	6832      	ldr	r2, [r6, #0]
 8018400:	f003 0306 	and.w	r3, r3, #6
 8018404:	2b04      	cmp	r3, #4
 8018406:	bf08      	it	eq
 8018408:	1aad      	subeq	r5, r5, r2
 801840a:	68a3      	ldr	r3, [r4, #8]
 801840c:	6922      	ldr	r2, [r4, #16]
 801840e:	bf0c      	ite	eq
 8018410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018414:	2500      	movne	r5, #0
 8018416:	4293      	cmp	r3, r2
 8018418:	bfc4      	itt	gt
 801841a:	1a9b      	subgt	r3, r3, r2
 801841c:	18ed      	addgt	r5, r5, r3
 801841e:	2600      	movs	r6, #0
 8018420:	341a      	adds	r4, #26
 8018422:	42b5      	cmp	r5, r6
 8018424:	d11a      	bne.n	801845c <_printf_common+0xc8>
 8018426:	2000      	movs	r0, #0
 8018428:	e008      	b.n	801843c <_printf_common+0xa8>
 801842a:	2301      	movs	r3, #1
 801842c:	4652      	mov	r2, sl
 801842e:	4649      	mov	r1, r9
 8018430:	4638      	mov	r0, r7
 8018432:	47c0      	blx	r8
 8018434:	3001      	adds	r0, #1
 8018436:	d103      	bne.n	8018440 <_printf_common+0xac>
 8018438:	f04f 30ff 	mov.w	r0, #4294967295
 801843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018440:	3501      	adds	r5, #1
 8018442:	e7c6      	b.n	80183d2 <_printf_common+0x3e>
 8018444:	18e1      	adds	r1, r4, r3
 8018446:	1c5a      	adds	r2, r3, #1
 8018448:	2030      	movs	r0, #48	; 0x30
 801844a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801844e:	4422      	add	r2, r4
 8018450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018458:	3302      	adds	r3, #2
 801845a:	e7c7      	b.n	80183ec <_printf_common+0x58>
 801845c:	2301      	movs	r3, #1
 801845e:	4622      	mov	r2, r4
 8018460:	4649      	mov	r1, r9
 8018462:	4638      	mov	r0, r7
 8018464:	47c0      	blx	r8
 8018466:	3001      	adds	r0, #1
 8018468:	d0e6      	beq.n	8018438 <_printf_common+0xa4>
 801846a:	3601      	adds	r6, #1
 801846c:	e7d9      	b.n	8018422 <_printf_common+0x8e>
	...

08018470 <_printf_i>:
 8018470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018474:	7e0f      	ldrb	r7, [r1, #24]
 8018476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018478:	2f78      	cmp	r7, #120	; 0x78
 801847a:	4691      	mov	r9, r2
 801847c:	4680      	mov	r8, r0
 801847e:	460c      	mov	r4, r1
 8018480:	469a      	mov	sl, r3
 8018482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018486:	d807      	bhi.n	8018498 <_printf_i+0x28>
 8018488:	2f62      	cmp	r7, #98	; 0x62
 801848a:	d80a      	bhi.n	80184a2 <_printf_i+0x32>
 801848c:	2f00      	cmp	r7, #0
 801848e:	f000 80d8 	beq.w	8018642 <_printf_i+0x1d2>
 8018492:	2f58      	cmp	r7, #88	; 0x58
 8018494:	f000 80a3 	beq.w	80185de <_printf_i+0x16e>
 8018498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801849c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80184a0:	e03a      	b.n	8018518 <_printf_i+0xa8>
 80184a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80184a6:	2b15      	cmp	r3, #21
 80184a8:	d8f6      	bhi.n	8018498 <_printf_i+0x28>
 80184aa:	a101      	add	r1, pc, #4	; (adr r1, 80184b0 <_printf_i+0x40>)
 80184ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184b0:	08018509 	.word	0x08018509
 80184b4:	0801851d 	.word	0x0801851d
 80184b8:	08018499 	.word	0x08018499
 80184bc:	08018499 	.word	0x08018499
 80184c0:	08018499 	.word	0x08018499
 80184c4:	08018499 	.word	0x08018499
 80184c8:	0801851d 	.word	0x0801851d
 80184cc:	08018499 	.word	0x08018499
 80184d0:	08018499 	.word	0x08018499
 80184d4:	08018499 	.word	0x08018499
 80184d8:	08018499 	.word	0x08018499
 80184dc:	08018629 	.word	0x08018629
 80184e0:	0801854d 	.word	0x0801854d
 80184e4:	0801860b 	.word	0x0801860b
 80184e8:	08018499 	.word	0x08018499
 80184ec:	08018499 	.word	0x08018499
 80184f0:	0801864b 	.word	0x0801864b
 80184f4:	08018499 	.word	0x08018499
 80184f8:	0801854d 	.word	0x0801854d
 80184fc:	08018499 	.word	0x08018499
 8018500:	08018499 	.word	0x08018499
 8018504:	08018613 	.word	0x08018613
 8018508:	682b      	ldr	r3, [r5, #0]
 801850a:	1d1a      	adds	r2, r3, #4
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	602a      	str	r2, [r5, #0]
 8018510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018518:	2301      	movs	r3, #1
 801851a:	e0a3      	b.n	8018664 <_printf_i+0x1f4>
 801851c:	6820      	ldr	r0, [r4, #0]
 801851e:	6829      	ldr	r1, [r5, #0]
 8018520:	0606      	lsls	r6, r0, #24
 8018522:	f101 0304 	add.w	r3, r1, #4
 8018526:	d50a      	bpl.n	801853e <_printf_i+0xce>
 8018528:	680e      	ldr	r6, [r1, #0]
 801852a:	602b      	str	r3, [r5, #0]
 801852c:	2e00      	cmp	r6, #0
 801852e:	da03      	bge.n	8018538 <_printf_i+0xc8>
 8018530:	232d      	movs	r3, #45	; 0x2d
 8018532:	4276      	negs	r6, r6
 8018534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018538:	485e      	ldr	r0, [pc, #376]	; (80186b4 <_printf_i+0x244>)
 801853a:	230a      	movs	r3, #10
 801853c:	e019      	b.n	8018572 <_printf_i+0x102>
 801853e:	680e      	ldr	r6, [r1, #0]
 8018540:	602b      	str	r3, [r5, #0]
 8018542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018546:	bf18      	it	ne
 8018548:	b236      	sxthne	r6, r6
 801854a:	e7ef      	b.n	801852c <_printf_i+0xbc>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	6820      	ldr	r0, [r4, #0]
 8018550:	1d19      	adds	r1, r3, #4
 8018552:	6029      	str	r1, [r5, #0]
 8018554:	0601      	lsls	r1, r0, #24
 8018556:	d501      	bpl.n	801855c <_printf_i+0xec>
 8018558:	681e      	ldr	r6, [r3, #0]
 801855a:	e002      	b.n	8018562 <_printf_i+0xf2>
 801855c:	0646      	lsls	r6, r0, #25
 801855e:	d5fb      	bpl.n	8018558 <_printf_i+0xe8>
 8018560:	881e      	ldrh	r6, [r3, #0]
 8018562:	4854      	ldr	r0, [pc, #336]	; (80186b4 <_printf_i+0x244>)
 8018564:	2f6f      	cmp	r7, #111	; 0x6f
 8018566:	bf0c      	ite	eq
 8018568:	2308      	moveq	r3, #8
 801856a:	230a      	movne	r3, #10
 801856c:	2100      	movs	r1, #0
 801856e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018572:	6865      	ldr	r5, [r4, #4]
 8018574:	60a5      	str	r5, [r4, #8]
 8018576:	2d00      	cmp	r5, #0
 8018578:	bfa2      	ittt	ge
 801857a:	6821      	ldrge	r1, [r4, #0]
 801857c:	f021 0104 	bicge.w	r1, r1, #4
 8018580:	6021      	strge	r1, [r4, #0]
 8018582:	b90e      	cbnz	r6, 8018588 <_printf_i+0x118>
 8018584:	2d00      	cmp	r5, #0
 8018586:	d04d      	beq.n	8018624 <_printf_i+0x1b4>
 8018588:	4615      	mov	r5, r2
 801858a:	fbb6 f1f3 	udiv	r1, r6, r3
 801858e:	fb03 6711 	mls	r7, r3, r1, r6
 8018592:	5dc7      	ldrb	r7, [r0, r7]
 8018594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018598:	4637      	mov	r7, r6
 801859a:	42bb      	cmp	r3, r7
 801859c:	460e      	mov	r6, r1
 801859e:	d9f4      	bls.n	801858a <_printf_i+0x11a>
 80185a0:	2b08      	cmp	r3, #8
 80185a2:	d10b      	bne.n	80185bc <_printf_i+0x14c>
 80185a4:	6823      	ldr	r3, [r4, #0]
 80185a6:	07de      	lsls	r6, r3, #31
 80185a8:	d508      	bpl.n	80185bc <_printf_i+0x14c>
 80185aa:	6923      	ldr	r3, [r4, #16]
 80185ac:	6861      	ldr	r1, [r4, #4]
 80185ae:	4299      	cmp	r1, r3
 80185b0:	bfde      	ittt	le
 80185b2:	2330      	movle	r3, #48	; 0x30
 80185b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80185b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80185bc:	1b52      	subs	r2, r2, r5
 80185be:	6122      	str	r2, [r4, #16]
 80185c0:	f8cd a000 	str.w	sl, [sp]
 80185c4:	464b      	mov	r3, r9
 80185c6:	aa03      	add	r2, sp, #12
 80185c8:	4621      	mov	r1, r4
 80185ca:	4640      	mov	r0, r8
 80185cc:	f7ff fee2 	bl	8018394 <_printf_common>
 80185d0:	3001      	adds	r0, #1
 80185d2:	d14c      	bne.n	801866e <_printf_i+0x1fe>
 80185d4:	f04f 30ff 	mov.w	r0, #4294967295
 80185d8:	b004      	add	sp, #16
 80185da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185de:	4835      	ldr	r0, [pc, #212]	; (80186b4 <_printf_i+0x244>)
 80185e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80185e4:	6829      	ldr	r1, [r5, #0]
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80185ec:	6029      	str	r1, [r5, #0]
 80185ee:	061d      	lsls	r5, r3, #24
 80185f0:	d514      	bpl.n	801861c <_printf_i+0x1ac>
 80185f2:	07df      	lsls	r7, r3, #31
 80185f4:	bf44      	itt	mi
 80185f6:	f043 0320 	orrmi.w	r3, r3, #32
 80185fa:	6023      	strmi	r3, [r4, #0]
 80185fc:	b91e      	cbnz	r6, 8018606 <_printf_i+0x196>
 80185fe:	6823      	ldr	r3, [r4, #0]
 8018600:	f023 0320 	bic.w	r3, r3, #32
 8018604:	6023      	str	r3, [r4, #0]
 8018606:	2310      	movs	r3, #16
 8018608:	e7b0      	b.n	801856c <_printf_i+0xfc>
 801860a:	6823      	ldr	r3, [r4, #0]
 801860c:	f043 0320 	orr.w	r3, r3, #32
 8018610:	6023      	str	r3, [r4, #0]
 8018612:	2378      	movs	r3, #120	; 0x78
 8018614:	4828      	ldr	r0, [pc, #160]	; (80186b8 <_printf_i+0x248>)
 8018616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801861a:	e7e3      	b.n	80185e4 <_printf_i+0x174>
 801861c:	0659      	lsls	r1, r3, #25
 801861e:	bf48      	it	mi
 8018620:	b2b6      	uxthmi	r6, r6
 8018622:	e7e6      	b.n	80185f2 <_printf_i+0x182>
 8018624:	4615      	mov	r5, r2
 8018626:	e7bb      	b.n	80185a0 <_printf_i+0x130>
 8018628:	682b      	ldr	r3, [r5, #0]
 801862a:	6826      	ldr	r6, [r4, #0]
 801862c:	6961      	ldr	r1, [r4, #20]
 801862e:	1d18      	adds	r0, r3, #4
 8018630:	6028      	str	r0, [r5, #0]
 8018632:	0635      	lsls	r5, r6, #24
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	d501      	bpl.n	801863c <_printf_i+0x1cc>
 8018638:	6019      	str	r1, [r3, #0]
 801863a:	e002      	b.n	8018642 <_printf_i+0x1d2>
 801863c:	0670      	lsls	r0, r6, #25
 801863e:	d5fb      	bpl.n	8018638 <_printf_i+0x1c8>
 8018640:	8019      	strh	r1, [r3, #0]
 8018642:	2300      	movs	r3, #0
 8018644:	6123      	str	r3, [r4, #16]
 8018646:	4615      	mov	r5, r2
 8018648:	e7ba      	b.n	80185c0 <_printf_i+0x150>
 801864a:	682b      	ldr	r3, [r5, #0]
 801864c:	1d1a      	adds	r2, r3, #4
 801864e:	602a      	str	r2, [r5, #0]
 8018650:	681d      	ldr	r5, [r3, #0]
 8018652:	6862      	ldr	r2, [r4, #4]
 8018654:	2100      	movs	r1, #0
 8018656:	4628      	mov	r0, r5
 8018658:	f7e7 fe4a 	bl	80002f0 <memchr>
 801865c:	b108      	cbz	r0, 8018662 <_printf_i+0x1f2>
 801865e:	1b40      	subs	r0, r0, r5
 8018660:	6060      	str	r0, [r4, #4]
 8018662:	6863      	ldr	r3, [r4, #4]
 8018664:	6123      	str	r3, [r4, #16]
 8018666:	2300      	movs	r3, #0
 8018668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801866c:	e7a8      	b.n	80185c0 <_printf_i+0x150>
 801866e:	6923      	ldr	r3, [r4, #16]
 8018670:	462a      	mov	r2, r5
 8018672:	4649      	mov	r1, r9
 8018674:	4640      	mov	r0, r8
 8018676:	47d0      	blx	sl
 8018678:	3001      	adds	r0, #1
 801867a:	d0ab      	beq.n	80185d4 <_printf_i+0x164>
 801867c:	6823      	ldr	r3, [r4, #0]
 801867e:	079b      	lsls	r3, r3, #30
 8018680:	d413      	bmi.n	80186aa <_printf_i+0x23a>
 8018682:	68e0      	ldr	r0, [r4, #12]
 8018684:	9b03      	ldr	r3, [sp, #12]
 8018686:	4298      	cmp	r0, r3
 8018688:	bfb8      	it	lt
 801868a:	4618      	movlt	r0, r3
 801868c:	e7a4      	b.n	80185d8 <_printf_i+0x168>
 801868e:	2301      	movs	r3, #1
 8018690:	4632      	mov	r2, r6
 8018692:	4649      	mov	r1, r9
 8018694:	4640      	mov	r0, r8
 8018696:	47d0      	blx	sl
 8018698:	3001      	adds	r0, #1
 801869a:	d09b      	beq.n	80185d4 <_printf_i+0x164>
 801869c:	3501      	adds	r5, #1
 801869e:	68e3      	ldr	r3, [r4, #12]
 80186a0:	9903      	ldr	r1, [sp, #12]
 80186a2:	1a5b      	subs	r3, r3, r1
 80186a4:	42ab      	cmp	r3, r5
 80186a6:	dcf2      	bgt.n	801868e <_printf_i+0x21e>
 80186a8:	e7eb      	b.n	8018682 <_printf_i+0x212>
 80186aa:	2500      	movs	r5, #0
 80186ac:	f104 0619 	add.w	r6, r4, #25
 80186b0:	e7f5      	b.n	801869e <_printf_i+0x22e>
 80186b2:	bf00      	nop
 80186b4:	0801a749 	.word	0x0801a749
 80186b8:	0801a75a 	.word	0x0801a75a

080186bc <cleanup_glue>:
 80186bc:	b538      	push	{r3, r4, r5, lr}
 80186be:	460c      	mov	r4, r1
 80186c0:	6809      	ldr	r1, [r1, #0]
 80186c2:	4605      	mov	r5, r0
 80186c4:	b109      	cbz	r1, 80186ca <cleanup_glue+0xe>
 80186c6:	f7ff fff9 	bl	80186bc <cleanup_glue>
 80186ca:	4621      	mov	r1, r4
 80186cc:	4628      	mov	r0, r5
 80186ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186d2:	f7ff bc25 	b.w	8017f20 <_free_r>
	...

080186d8 <_reclaim_reent>:
 80186d8:	4b2c      	ldr	r3, [pc, #176]	; (801878c <_reclaim_reent+0xb4>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4283      	cmp	r3, r0
 80186de:	b570      	push	{r4, r5, r6, lr}
 80186e0:	4604      	mov	r4, r0
 80186e2:	d051      	beq.n	8018788 <_reclaim_reent+0xb0>
 80186e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186e6:	b143      	cbz	r3, 80186fa <_reclaim_reent+0x22>
 80186e8:	68db      	ldr	r3, [r3, #12]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d14a      	bne.n	8018784 <_reclaim_reent+0xac>
 80186ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186f0:	6819      	ldr	r1, [r3, #0]
 80186f2:	b111      	cbz	r1, 80186fa <_reclaim_reent+0x22>
 80186f4:	4620      	mov	r0, r4
 80186f6:	f7ff fc13 	bl	8017f20 <_free_r>
 80186fa:	6961      	ldr	r1, [r4, #20]
 80186fc:	b111      	cbz	r1, 8018704 <_reclaim_reent+0x2c>
 80186fe:	4620      	mov	r0, r4
 8018700:	f7ff fc0e 	bl	8017f20 <_free_r>
 8018704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018706:	b111      	cbz	r1, 801870e <_reclaim_reent+0x36>
 8018708:	4620      	mov	r0, r4
 801870a:	f7ff fc09 	bl	8017f20 <_free_r>
 801870e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018710:	b111      	cbz	r1, 8018718 <_reclaim_reent+0x40>
 8018712:	4620      	mov	r0, r4
 8018714:	f7ff fc04 	bl	8017f20 <_free_r>
 8018718:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801871a:	b111      	cbz	r1, 8018722 <_reclaim_reent+0x4a>
 801871c:	4620      	mov	r0, r4
 801871e:	f7ff fbff 	bl	8017f20 <_free_r>
 8018722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018724:	b111      	cbz	r1, 801872c <_reclaim_reent+0x54>
 8018726:	4620      	mov	r0, r4
 8018728:	f7ff fbfa 	bl	8017f20 <_free_r>
 801872c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801872e:	b111      	cbz	r1, 8018736 <_reclaim_reent+0x5e>
 8018730:	4620      	mov	r0, r4
 8018732:	f7ff fbf5 	bl	8017f20 <_free_r>
 8018736:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018738:	b111      	cbz	r1, 8018740 <_reclaim_reent+0x68>
 801873a:	4620      	mov	r0, r4
 801873c:	f7ff fbf0 	bl	8017f20 <_free_r>
 8018740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018742:	b111      	cbz	r1, 801874a <_reclaim_reent+0x72>
 8018744:	4620      	mov	r0, r4
 8018746:	f7ff fbeb 	bl	8017f20 <_free_r>
 801874a:	69a3      	ldr	r3, [r4, #24]
 801874c:	b1e3      	cbz	r3, 8018788 <_reclaim_reent+0xb0>
 801874e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018750:	4620      	mov	r0, r4
 8018752:	4798      	blx	r3
 8018754:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018756:	b1b9      	cbz	r1, 8018788 <_reclaim_reent+0xb0>
 8018758:	4620      	mov	r0, r4
 801875a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801875e:	f7ff bfad 	b.w	80186bc <cleanup_glue>
 8018762:	5949      	ldr	r1, [r1, r5]
 8018764:	b941      	cbnz	r1, 8018778 <_reclaim_reent+0xa0>
 8018766:	3504      	adds	r5, #4
 8018768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801876a:	2d80      	cmp	r5, #128	; 0x80
 801876c:	68d9      	ldr	r1, [r3, #12]
 801876e:	d1f8      	bne.n	8018762 <_reclaim_reent+0x8a>
 8018770:	4620      	mov	r0, r4
 8018772:	f7ff fbd5 	bl	8017f20 <_free_r>
 8018776:	e7ba      	b.n	80186ee <_reclaim_reent+0x16>
 8018778:	680e      	ldr	r6, [r1, #0]
 801877a:	4620      	mov	r0, r4
 801877c:	f7ff fbd0 	bl	8017f20 <_free_r>
 8018780:	4631      	mov	r1, r6
 8018782:	e7ef      	b.n	8018764 <_reclaim_reent+0x8c>
 8018784:	2500      	movs	r5, #0
 8018786:	e7ef      	b.n	8018768 <_reclaim_reent+0x90>
 8018788:	bd70      	pop	{r4, r5, r6, pc}
 801878a:	bf00      	nop
 801878c:	240000a8 	.word	0x240000a8

08018790 <_sbrk_r>:
 8018790:	b538      	push	{r3, r4, r5, lr}
 8018792:	4d06      	ldr	r5, [pc, #24]	; (80187ac <_sbrk_r+0x1c>)
 8018794:	2300      	movs	r3, #0
 8018796:	4604      	mov	r4, r0
 8018798:	4608      	mov	r0, r1
 801879a:	602b      	str	r3, [r5, #0]
 801879c:	f7e9 fd84 	bl	80022a8 <_sbrk>
 80187a0:	1c43      	adds	r3, r0, #1
 80187a2:	d102      	bne.n	80187aa <_sbrk_r+0x1a>
 80187a4:	682b      	ldr	r3, [r5, #0]
 80187a6:	b103      	cbz	r3, 80187aa <_sbrk_r+0x1a>
 80187a8:	6023      	str	r3, [r4, #0]
 80187aa:	bd38      	pop	{r3, r4, r5, pc}
 80187ac:	2400affc 	.word	0x2400affc

080187b0 <_raise_r>:
 80187b0:	291f      	cmp	r1, #31
 80187b2:	b538      	push	{r3, r4, r5, lr}
 80187b4:	4604      	mov	r4, r0
 80187b6:	460d      	mov	r5, r1
 80187b8:	d904      	bls.n	80187c4 <_raise_r+0x14>
 80187ba:	2316      	movs	r3, #22
 80187bc:	6003      	str	r3, [r0, #0]
 80187be:	f04f 30ff 	mov.w	r0, #4294967295
 80187c2:	bd38      	pop	{r3, r4, r5, pc}
 80187c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80187c6:	b112      	cbz	r2, 80187ce <_raise_r+0x1e>
 80187c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187cc:	b94b      	cbnz	r3, 80187e2 <_raise_r+0x32>
 80187ce:	4620      	mov	r0, r4
 80187d0:	f000 f830 	bl	8018834 <_getpid_r>
 80187d4:	462a      	mov	r2, r5
 80187d6:	4601      	mov	r1, r0
 80187d8:	4620      	mov	r0, r4
 80187da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187de:	f000 b817 	b.w	8018810 <_kill_r>
 80187e2:	2b01      	cmp	r3, #1
 80187e4:	d00a      	beq.n	80187fc <_raise_r+0x4c>
 80187e6:	1c59      	adds	r1, r3, #1
 80187e8:	d103      	bne.n	80187f2 <_raise_r+0x42>
 80187ea:	2316      	movs	r3, #22
 80187ec:	6003      	str	r3, [r0, #0]
 80187ee:	2001      	movs	r0, #1
 80187f0:	e7e7      	b.n	80187c2 <_raise_r+0x12>
 80187f2:	2400      	movs	r4, #0
 80187f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80187f8:	4628      	mov	r0, r5
 80187fa:	4798      	blx	r3
 80187fc:	2000      	movs	r0, #0
 80187fe:	e7e0      	b.n	80187c2 <_raise_r+0x12>

08018800 <raise>:
 8018800:	4b02      	ldr	r3, [pc, #8]	; (801880c <raise+0xc>)
 8018802:	4601      	mov	r1, r0
 8018804:	6818      	ldr	r0, [r3, #0]
 8018806:	f7ff bfd3 	b.w	80187b0 <_raise_r>
 801880a:	bf00      	nop
 801880c:	240000a8 	.word	0x240000a8

08018810 <_kill_r>:
 8018810:	b538      	push	{r3, r4, r5, lr}
 8018812:	4d07      	ldr	r5, [pc, #28]	; (8018830 <_kill_r+0x20>)
 8018814:	2300      	movs	r3, #0
 8018816:	4604      	mov	r4, r0
 8018818:	4608      	mov	r0, r1
 801881a:	4611      	mov	r1, r2
 801881c:	602b      	str	r3, [r5, #0]
 801881e:	f7e9 fd0b 	bl	8002238 <_kill>
 8018822:	1c43      	adds	r3, r0, #1
 8018824:	d102      	bne.n	801882c <_kill_r+0x1c>
 8018826:	682b      	ldr	r3, [r5, #0]
 8018828:	b103      	cbz	r3, 801882c <_kill_r+0x1c>
 801882a:	6023      	str	r3, [r4, #0]
 801882c:	bd38      	pop	{r3, r4, r5, pc}
 801882e:	bf00      	nop
 8018830:	2400affc 	.word	0x2400affc

08018834 <_getpid_r>:
 8018834:	f7e9 bcfe 	b.w	8002234 <_getpid>

08018838 <__sread>:
 8018838:	b510      	push	{r4, lr}
 801883a:	460c      	mov	r4, r1
 801883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018840:	f000 fac8 	bl	8018dd4 <_read_r>
 8018844:	2800      	cmp	r0, #0
 8018846:	bfab      	itete	ge
 8018848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801884a:	89a3      	ldrhlt	r3, [r4, #12]
 801884c:	181b      	addge	r3, r3, r0
 801884e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018852:	bfac      	ite	ge
 8018854:	6563      	strge	r3, [r4, #84]	; 0x54
 8018856:	81a3      	strhlt	r3, [r4, #12]
 8018858:	bd10      	pop	{r4, pc}

0801885a <__swrite>:
 801885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801885e:	461f      	mov	r7, r3
 8018860:	898b      	ldrh	r3, [r1, #12]
 8018862:	05db      	lsls	r3, r3, #23
 8018864:	4605      	mov	r5, r0
 8018866:	460c      	mov	r4, r1
 8018868:	4616      	mov	r6, r2
 801886a:	d505      	bpl.n	8018878 <__swrite+0x1e>
 801886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018870:	2302      	movs	r3, #2
 8018872:	2200      	movs	r2, #0
 8018874:	f000 fa2a 	bl	8018ccc <_lseek_r>
 8018878:	89a3      	ldrh	r3, [r4, #12]
 801887a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801887e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018882:	81a3      	strh	r3, [r4, #12]
 8018884:	4632      	mov	r2, r6
 8018886:	463b      	mov	r3, r7
 8018888:	4628      	mov	r0, r5
 801888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801888e:	f000 b869 	b.w	8018964 <_write_r>

08018892 <__sseek>:
 8018892:	b510      	push	{r4, lr}
 8018894:	460c      	mov	r4, r1
 8018896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801889a:	f000 fa17 	bl	8018ccc <_lseek_r>
 801889e:	1c43      	adds	r3, r0, #1
 80188a0:	89a3      	ldrh	r3, [r4, #12]
 80188a2:	bf15      	itete	ne
 80188a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80188a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80188aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80188ae:	81a3      	strheq	r3, [r4, #12]
 80188b0:	bf18      	it	ne
 80188b2:	81a3      	strhne	r3, [r4, #12]
 80188b4:	bd10      	pop	{r4, pc}

080188b6 <__sclose>:
 80188b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ba:	f000 b935 	b.w	8018b28 <_close_r>
	...

080188c0 <__swbuf_r>:
 80188c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188c2:	460e      	mov	r6, r1
 80188c4:	4614      	mov	r4, r2
 80188c6:	4605      	mov	r5, r0
 80188c8:	b118      	cbz	r0, 80188d2 <__swbuf_r+0x12>
 80188ca:	6983      	ldr	r3, [r0, #24]
 80188cc:	b90b      	cbnz	r3, 80188d2 <__swbuf_r+0x12>
 80188ce:	f7ff fa29 	bl	8017d24 <__sinit>
 80188d2:	4b21      	ldr	r3, [pc, #132]	; (8018958 <__swbuf_r+0x98>)
 80188d4:	429c      	cmp	r4, r3
 80188d6:	d12b      	bne.n	8018930 <__swbuf_r+0x70>
 80188d8:	686c      	ldr	r4, [r5, #4]
 80188da:	69a3      	ldr	r3, [r4, #24]
 80188dc:	60a3      	str	r3, [r4, #8]
 80188de:	89a3      	ldrh	r3, [r4, #12]
 80188e0:	071a      	lsls	r2, r3, #28
 80188e2:	d52f      	bpl.n	8018944 <__swbuf_r+0x84>
 80188e4:	6923      	ldr	r3, [r4, #16]
 80188e6:	b36b      	cbz	r3, 8018944 <__swbuf_r+0x84>
 80188e8:	6923      	ldr	r3, [r4, #16]
 80188ea:	6820      	ldr	r0, [r4, #0]
 80188ec:	1ac0      	subs	r0, r0, r3
 80188ee:	6963      	ldr	r3, [r4, #20]
 80188f0:	b2f6      	uxtb	r6, r6
 80188f2:	4283      	cmp	r3, r0
 80188f4:	4637      	mov	r7, r6
 80188f6:	dc04      	bgt.n	8018902 <__swbuf_r+0x42>
 80188f8:	4621      	mov	r1, r4
 80188fa:	4628      	mov	r0, r5
 80188fc:	f000 f9aa 	bl	8018c54 <_fflush_r>
 8018900:	bb30      	cbnz	r0, 8018950 <__swbuf_r+0x90>
 8018902:	68a3      	ldr	r3, [r4, #8]
 8018904:	3b01      	subs	r3, #1
 8018906:	60a3      	str	r3, [r4, #8]
 8018908:	6823      	ldr	r3, [r4, #0]
 801890a:	1c5a      	adds	r2, r3, #1
 801890c:	6022      	str	r2, [r4, #0]
 801890e:	701e      	strb	r6, [r3, #0]
 8018910:	6963      	ldr	r3, [r4, #20]
 8018912:	3001      	adds	r0, #1
 8018914:	4283      	cmp	r3, r0
 8018916:	d004      	beq.n	8018922 <__swbuf_r+0x62>
 8018918:	89a3      	ldrh	r3, [r4, #12]
 801891a:	07db      	lsls	r3, r3, #31
 801891c:	d506      	bpl.n	801892c <__swbuf_r+0x6c>
 801891e:	2e0a      	cmp	r6, #10
 8018920:	d104      	bne.n	801892c <__swbuf_r+0x6c>
 8018922:	4621      	mov	r1, r4
 8018924:	4628      	mov	r0, r5
 8018926:	f000 f995 	bl	8018c54 <_fflush_r>
 801892a:	b988      	cbnz	r0, 8018950 <__swbuf_r+0x90>
 801892c:	4638      	mov	r0, r7
 801892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018930:	4b0a      	ldr	r3, [pc, #40]	; (801895c <__swbuf_r+0x9c>)
 8018932:	429c      	cmp	r4, r3
 8018934:	d101      	bne.n	801893a <__swbuf_r+0x7a>
 8018936:	68ac      	ldr	r4, [r5, #8]
 8018938:	e7cf      	b.n	80188da <__swbuf_r+0x1a>
 801893a:	4b09      	ldr	r3, [pc, #36]	; (8018960 <__swbuf_r+0xa0>)
 801893c:	429c      	cmp	r4, r3
 801893e:	bf08      	it	eq
 8018940:	68ec      	ldreq	r4, [r5, #12]
 8018942:	e7ca      	b.n	80188da <__swbuf_r+0x1a>
 8018944:	4621      	mov	r1, r4
 8018946:	4628      	mov	r0, r5
 8018948:	f000 f81e 	bl	8018988 <__swsetup_r>
 801894c:	2800      	cmp	r0, #0
 801894e:	d0cb      	beq.n	80188e8 <__swbuf_r+0x28>
 8018950:	f04f 37ff 	mov.w	r7, #4294967295
 8018954:	e7ea      	b.n	801892c <__swbuf_r+0x6c>
 8018956:	bf00      	nop
 8018958:	0801a6f4 	.word	0x0801a6f4
 801895c:	0801a714 	.word	0x0801a714
 8018960:	0801a6d4 	.word	0x0801a6d4

08018964 <_write_r>:
 8018964:	b538      	push	{r3, r4, r5, lr}
 8018966:	4d07      	ldr	r5, [pc, #28]	; (8018984 <_write_r+0x20>)
 8018968:	4604      	mov	r4, r0
 801896a:	4608      	mov	r0, r1
 801896c:	4611      	mov	r1, r2
 801896e:	2200      	movs	r2, #0
 8018970:	602a      	str	r2, [r5, #0]
 8018972:	461a      	mov	r2, r3
 8018974:	f7e9 fc7e 	bl	8002274 <_write>
 8018978:	1c43      	adds	r3, r0, #1
 801897a:	d102      	bne.n	8018982 <_write_r+0x1e>
 801897c:	682b      	ldr	r3, [r5, #0]
 801897e:	b103      	cbz	r3, 8018982 <_write_r+0x1e>
 8018980:	6023      	str	r3, [r4, #0]
 8018982:	bd38      	pop	{r3, r4, r5, pc}
 8018984:	2400affc 	.word	0x2400affc

08018988 <__swsetup_r>:
 8018988:	4b32      	ldr	r3, [pc, #200]	; (8018a54 <__swsetup_r+0xcc>)
 801898a:	b570      	push	{r4, r5, r6, lr}
 801898c:	681d      	ldr	r5, [r3, #0]
 801898e:	4606      	mov	r6, r0
 8018990:	460c      	mov	r4, r1
 8018992:	b125      	cbz	r5, 801899e <__swsetup_r+0x16>
 8018994:	69ab      	ldr	r3, [r5, #24]
 8018996:	b913      	cbnz	r3, 801899e <__swsetup_r+0x16>
 8018998:	4628      	mov	r0, r5
 801899a:	f7ff f9c3 	bl	8017d24 <__sinit>
 801899e:	4b2e      	ldr	r3, [pc, #184]	; (8018a58 <__swsetup_r+0xd0>)
 80189a0:	429c      	cmp	r4, r3
 80189a2:	d10f      	bne.n	80189c4 <__swsetup_r+0x3c>
 80189a4:	686c      	ldr	r4, [r5, #4]
 80189a6:	89a3      	ldrh	r3, [r4, #12]
 80189a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80189ac:	0719      	lsls	r1, r3, #28
 80189ae:	d42c      	bmi.n	8018a0a <__swsetup_r+0x82>
 80189b0:	06dd      	lsls	r5, r3, #27
 80189b2:	d411      	bmi.n	80189d8 <__swsetup_r+0x50>
 80189b4:	2309      	movs	r3, #9
 80189b6:	6033      	str	r3, [r6, #0]
 80189b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80189bc:	81a3      	strh	r3, [r4, #12]
 80189be:	f04f 30ff 	mov.w	r0, #4294967295
 80189c2:	e03e      	b.n	8018a42 <__swsetup_r+0xba>
 80189c4:	4b25      	ldr	r3, [pc, #148]	; (8018a5c <__swsetup_r+0xd4>)
 80189c6:	429c      	cmp	r4, r3
 80189c8:	d101      	bne.n	80189ce <__swsetup_r+0x46>
 80189ca:	68ac      	ldr	r4, [r5, #8]
 80189cc:	e7eb      	b.n	80189a6 <__swsetup_r+0x1e>
 80189ce:	4b24      	ldr	r3, [pc, #144]	; (8018a60 <__swsetup_r+0xd8>)
 80189d0:	429c      	cmp	r4, r3
 80189d2:	bf08      	it	eq
 80189d4:	68ec      	ldreq	r4, [r5, #12]
 80189d6:	e7e6      	b.n	80189a6 <__swsetup_r+0x1e>
 80189d8:	0758      	lsls	r0, r3, #29
 80189da:	d512      	bpl.n	8018a02 <__swsetup_r+0x7a>
 80189dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189de:	b141      	cbz	r1, 80189f2 <__swsetup_r+0x6a>
 80189e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189e4:	4299      	cmp	r1, r3
 80189e6:	d002      	beq.n	80189ee <__swsetup_r+0x66>
 80189e8:	4630      	mov	r0, r6
 80189ea:	f7ff fa99 	bl	8017f20 <_free_r>
 80189ee:	2300      	movs	r3, #0
 80189f0:	6363      	str	r3, [r4, #52]	; 0x34
 80189f2:	89a3      	ldrh	r3, [r4, #12]
 80189f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189f8:	81a3      	strh	r3, [r4, #12]
 80189fa:	2300      	movs	r3, #0
 80189fc:	6063      	str	r3, [r4, #4]
 80189fe:	6923      	ldr	r3, [r4, #16]
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	89a3      	ldrh	r3, [r4, #12]
 8018a04:	f043 0308 	orr.w	r3, r3, #8
 8018a08:	81a3      	strh	r3, [r4, #12]
 8018a0a:	6923      	ldr	r3, [r4, #16]
 8018a0c:	b94b      	cbnz	r3, 8018a22 <__swsetup_r+0x9a>
 8018a0e:	89a3      	ldrh	r3, [r4, #12]
 8018a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a18:	d003      	beq.n	8018a22 <__swsetup_r+0x9a>
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	4630      	mov	r0, r6
 8018a1e:	f000 f98d 	bl	8018d3c <__smakebuf_r>
 8018a22:	89a0      	ldrh	r0, [r4, #12]
 8018a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a28:	f010 0301 	ands.w	r3, r0, #1
 8018a2c:	d00a      	beq.n	8018a44 <__swsetup_r+0xbc>
 8018a2e:	2300      	movs	r3, #0
 8018a30:	60a3      	str	r3, [r4, #8]
 8018a32:	6963      	ldr	r3, [r4, #20]
 8018a34:	425b      	negs	r3, r3
 8018a36:	61a3      	str	r3, [r4, #24]
 8018a38:	6923      	ldr	r3, [r4, #16]
 8018a3a:	b943      	cbnz	r3, 8018a4e <__swsetup_r+0xc6>
 8018a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018a40:	d1ba      	bne.n	80189b8 <__swsetup_r+0x30>
 8018a42:	bd70      	pop	{r4, r5, r6, pc}
 8018a44:	0781      	lsls	r1, r0, #30
 8018a46:	bf58      	it	pl
 8018a48:	6963      	ldrpl	r3, [r4, #20]
 8018a4a:	60a3      	str	r3, [r4, #8]
 8018a4c:	e7f4      	b.n	8018a38 <__swsetup_r+0xb0>
 8018a4e:	2000      	movs	r0, #0
 8018a50:	e7f7      	b.n	8018a42 <__swsetup_r+0xba>
 8018a52:	bf00      	nop
 8018a54:	240000a8 	.word	0x240000a8
 8018a58:	0801a6f4 	.word	0x0801a6f4
 8018a5c:	0801a714 	.word	0x0801a714
 8018a60:	0801a6d4 	.word	0x0801a6d4

08018a64 <__register_exitproc>:
 8018a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8018b24 <__register_exitproc+0xc0>
 8018a6c:	4606      	mov	r6, r0
 8018a6e:	f8d8 0000 	ldr.w	r0, [r8]
 8018a72:	461f      	mov	r7, r3
 8018a74:	460d      	mov	r5, r1
 8018a76:	4691      	mov	r9, r2
 8018a78:	f7ff fa29 	bl	8017ece <__retarget_lock_acquire_recursive>
 8018a7c:	4b25      	ldr	r3, [pc, #148]	; (8018b14 <__register_exitproc+0xb0>)
 8018a7e:	681c      	ldr	r4, [r3, #0]
 8018a80:	b934      	cbnz	r4, 8018a90 <__register_exitproc+0x2c>
 8018a82:	4c25      	ldr	r4, [pc, #148]	; (8018b18 <__register_exitproc+0xb4>)
 8018a84:	601c      	str	r4, [r3, #0]
 8018a86:	4b25      	ldr	r3, [pc, #148]	; (8018b1c <__register_exitproc+0xb8>)
 8018a88:	b113      	cbz	r3, 8018a90 <__register_exitproc+0x2c>
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8018a90:	6863      	ldr	r3, [r4, #4]
 8018a92:	2b1f      	cmp	r3, #31
 8018a94:	dd07      	ble.n	8018aa6 <__register_exitproc+0x42>
 8018a96:	f8d8 0000 	ldr.w	r0, [r8]
 8018a9a:	f7ff fa1a 	bl	8017ed2 <__retarget_lock_release_recursive>
 8018a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8018aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018aa6:	b34e      	cbz	r6, 8018afc <__register_exitproc+0x98>
 8018aa8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8018aac:	b988      	cbnz	r0, 8018ad2 <__register_exitproc+0x6e>
 8018aae:	4b1c      	ldr	r3, [pc, #112]	; (8018b20 <__register_exitproc+0xbc>)
 8018ab0:	b923      	cbnz	r3, 8018abc <__register_exitproc+0x58>
 8018ab2:	f8d8 0000 	ldr.w	r0, [r8]
 8018ab6:	f7ff fa0b 	bl	8017ed0 <__retarget_lock_release>
 8018aba:	e7f0      	b.n	8018a9e <__register_exitproc+0x3a>
 8018abc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8018ac0:	f7ff fa08 	bl	8017ed4 <malloc>
 8018ac4:	2800      	cmp	r0, #0
 8018ac6:	d0f4      	beq.n	8018ab2 <__register_exitproc+0x4e>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8018ace:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018ad2:	6863      	ldr	r3, [r4, #4]
 8018ad4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8018ad8:	2201      	movs	r2, #1
 8018ada:	409a      	lsls	r2, r3
 8018adc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8018ae0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8018ae4:	4313      	orrs	r3, r2
 8018ae6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8018aea:	2e02      	cmp	r6, #2
 8018aec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8018af0:	bf02      	ittt	eq
 8018af2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8018af6:	4313      	orreq	r3, r2
 8018af8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8018afc:	6863      	ldr	r3, [r4, #4]
 8018afe:	f8d8 0000 	ldr.w	r0, [r8]
 8018b02:	1c5a      	adds	r2, r3, #1
 8018b04:	3302      	adds	r3, #2
 8018b06:	6062      	str	r2, [r4, #4]
 8018b08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018b0c:	f7ff f9e1 	bl	8017ed2 <__retarget_lock_release_recursive>
 8018b10:	2000      	movs	r0, #0
 8018b12:	e7c6      	b.n	8018aa2 <__register_exitproc+0x3e>
 8018b14:	2400b08c 	.word	0x2400b08c
 8018b18:	2400b000 	.word	0x2400b000
 8018b1c:	0801a76c 	.word	0x0801a76c
 8018b20:	08017ed5 	.word	0x08017ed5
 8018b24:	2400010c 	.word	0x2400010c

08018b28 <_close_r>:
 8018b28:	b538      	push	{r3, r4, r5, lr}
 8018b2a:	4d06      	ldr	r5, [pc, #24]	; (8018b44 <_close_r+0x1c>)
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	4604      	mov	r4, r0
 8018b30:	4608      	mov	r0, r1
 8018b32:	602b      	str	r3, [r5, #0]
 8018b34:	f7e9 fbac 	bl	8002290 <_close>
 8018b38:	1c43      	adds	r3, r0, #1
 8018b3a:	d102      	bne.n	8018b42 <_close_r+0x1a>
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	b103      	cbz	r3, 8018b42 <_close_r+0x1a>
 8018b40:	6023      	str	r3, [r4, #0]
 8018b42:	bd38      	pop	{r3, r4, r5, pc}
 8018b44:	2400affc 	.word	0x2400affc

08018b48 <__sflush_r>:
 8018b48:	898a      	ldrh	r2, [r1, #12]
 8018b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b4e:	4605      	mov	r5, r0
 8018b50:	0710      	lsls	r0, r2, #28
 8018b52:	460c      	mov	r4, r1
 8018b54:	d458      	bmi.n	8018c08 <__sflush_r+0xc0>
 8018b56:	684b      	ldr	r3, [r1, #4]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	dc05      	bgt.n	8018b68 <__sflush_r+0x20>
 8018b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	dc02      	bgt.n	8018b68 <__sflush_r+0x20>
 8018b62:	2000      	movs	r0, #0
 8018b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b6a:	2e00      	cmp	r6, #0
 8018b6c:	d0f9      	beq.n	8018b62 <__sflush_r+0x1a>
 8018b6e:	2300      	movs	r3, #0
 8018b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b74:	682f      	ldr	r7, [r5, #0]
 8018b76:	602b      	str	r3, [r5, #0]
 8018b78:	d032      	beq.n	8018be0 <__sflush_r+0x98>
 8018b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b7c:	89a3      	ldrh	r3, [r4, #12]
 8018b7e:	075a      	lsls	r2, r3, #29
 8018b80:	d505      	bpl.n	8018b8e <__sflush_r+0x46>
 8018b82:	6863      	ldr	r3, [r4, #4]
 8018b84:	1ac0      	subs	r0, r0, r3
 8018b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b88:	b10b      	cbz	r3, 8018b8e <__sflush_r+0x46>
 8018b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b8c:	1ac0      	subs	r0, r0, r3
 8018b8e:	2300      	movs	r3, #0
 8018b90:	4602      	mov	r2, r0
 8018b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b94:	6a21      	ldr	r1, [r4, #32]
 8018b96:	4628      	mov	r0, r5
 8018b98:	47b0      	blx	r6
 8018b9a:	1c43      	adds	r3, r0, #1
 8018b9c:	89a3      	ldrh	r3, [r4, #12]
 8018b9e:	d106      	bne.n	8018bae <__sflush_r+0x66>
 8018ba0:	6829      	ldr	r1, [r5, #0]
 8018ba2:	291d      	cmp	r1, #29
 8018ba4:	d82c      	bhi.n	8018c00 <__sflush_r+0xb8>
 8018ba6:	4a2a      	ldr	r2, [pc, #168]	; (8018c50 <__sflush_r+0x108>)
 8018ba8:	40ca      	lsrs	r2, r1
 8018baa:	07d6      	lsls	r6, r2, #31
 8018bac:	d528      	bpl.n	8018c00 <__sflush_r+0xb8>
 8018bae:	2200      	movs	r2, #0
 8018bb0:	6062      	str	r2, [r4, #4]
 8018bb2:	04d9      	lsls	r1, r3, #19
 8018bb4:	6922      	ldr	r2, [r4, #16]
 8018bb6:	6022      	str	r2, [r4, #0]
 8018bb8:	d504      	bpl.n	8018bc4 <__sflush_r+0x7c>
 8018bba:	1c42      	adds	r2, r0, #1
 8018bbc:	d101      	bne.n	8018bc2 <__sflush_r+0x7a>
 8018bbe:	682b      	ldr	r3, [r5, #0]
 8018bc0:	b903      	cbnz	r3, 8018bc4 <__sflush_r+0x7c>
 8018bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8018bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bc6:	602f      	str	r7, [r5, #0]
 8018bc8:	2900      	cmp	r1, #0
 8018bca:	d0ca      	beq.n	8018b62 <__sflush_r+0x1a>
 8018bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bd0:	4299      	cmp	r1, r3
 8018bd2:	d002      	beq.n	8018bda <__sflush_r+0x92>
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	f7ff f9a3 	bl	8017f20 <_free_r>
 8018bda:	2000      	movs	r0, #0
 8018bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8018bde:	e7c1      	b.n	8018b64 <__sflush_r+0x1c>
 8018be0:	6a21      	ldr	r1, [r4, #32]
 8018be2:	2301      	movs	r3, #1
 8018be4:	4628      	mov	r0, r5
 8018be6:	47b0      	blx	r6
 8018be8:	1c41      	adds	r1, r0, #1
 8018bea:	d1c7      	bne.n	8018b7c <__sflush_r+0x34>
 8018bec:	682b      	ldr	r3, [r5, #0]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d0c4      	beq.n	8018b7c <__sflush_r+0x34>
 8018bf2:	2b1d      	cmp	r3, #29
 8018bf4:	d001      	beq.n	8018bfa <__sflush_r+0xb2>
 8018bf6:	2b16      	cmp	r3, #22
 8018bf8:	d101      	bne.n	8018bfe <__sflush_r+0xb6>
 8018bfa:	602f      	str	r7, [r5, #0]
 8018bfc:	e7b1      	b.n	8018b62 <__sflush_r+0x1a>
 8018bfe:	89a3      	ldrh	r3, [r4, #12]
 8018c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c04:	81a3      	strh	r3, [r4, #12]
 8018c06:	e7ad      	b.n	8018b64 <__sflush_r+0x1c>
 8018c08:	690f      	ldr	r7, [r1, #16]
 8018c0a:	2f00      	cmp	r7, #0
 8018c0c:	d0a9      	beq.n	8018b62 <__sflush_r+0x1a>
 8018c0e:	0793      	lsls	r3, r2, #30
 8018c10:	680e      	ldr	r6, [r1, #0]
 8018c12:	bf08      	it	eq
 8018c14:	694b      	ldreq	r3, [r1, #20]
 8018c16:	600f      	str	r7, [r1, #0]
 8018c18:	bf18      	it	ne
 8018c1a:	2300      	movne	r3, #0
 8018c1c:	eba6 0807 	sub.w	r8, r6, r7
 8018c20:	608b      	str	r3, [r1, #8]
 8018c22:	f1b8 0f00 	cmp.w	r8, #0
 8018c26:	dd9c      	ble.n	8018b62 <__sflush_r+0x1a>
 8018c28:	6a21      	ldr	r1, [r4, #32]
 8018c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c2c:	4643      	mov	r3, r8
 8018c2e:	463a      	mov	r2, r7
 8018c30:	4628      	mov	r0, r5
 8018c32:	47b0      	blx	r6
 8018c34:	2800      	cmp	r0, #0
 8018c36:	dc06      	bgt.n	8018c46 <__sflush_r+0xfe>
 8018c38:	89a3      	ldrh	r3, [r4, #12]
 8018c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c3e:	81a3      	strh	r3, [r4, #12]
 8018c40:	f04f 30ff 	mov.w	r0, #4294967295
 8018c44:	e78e      	b.n	8018b64 <__sflush_r+0x1c>
 8018c46:	4407      	add	r7, r0
 8018c48:	eba8 0800 	sub.w	r8, r8, r0
 8018c4c:	e7e9      	b.n	8018c22 <__sflush_r+0xda>
 8018c4e:	bf00      	nop
 8018c50:	20400001 	.word	0x20400001

08018c54 <_fflush_r>:
 8018c54:	b538      	push	{r3, r4, r5, lr}
 8018c56:	690b      	ldr	r3, [r1, #16]
 8018c58:	4605      	mov	r5, r0
 8018c5a:	460c      	mov	r4, r1
 8018c5c:	b913      	cbnz	r3, 8018c64 <_fflush_r+0x10>
 8018c5e:	2500      	movs	r5, #0
 8018c60:	4628      	mov	r0, r5
 8018c62:	bd38      	pop	{r3, r4, r5, pc}
 8018c64:	b118      	cbz	r0, 8018c6e <_fflush_r+0x1a>
 8018c66:	6983      	ldr	r3, [r0, #24]
 8018c68:	b90b      	cbnz	r3, 8018c6e <_fflush_r+0x1a>
 8018c6a:	f7ff f85b 	bl	8017d24 <__sinit>
 8018c6e:	4b14      	ldr	r3, [pc, #80]	; (8018cc0 <_fflush_r+0x6c>)
 8018c70:	429c      	cmp	r4, r3
 8018c72:	d11b      	bne.n	8018cac <_fflush_r+0x58>
 8018c74:	686c      	ldr	r4, [r5, #4]
 8018c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d0ef      	beq.n	8018c5e <_fflush_r+0xa>
 8018c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c80:	07d0      	lsls	r0, r2, #31
 8018c82:	d404      	bmi.n	8018c8e <_fflush_r+0x3a>
 8018c84:	0599      	lsls	r1, r3, #22
 8018c86:	d402      	bmi.n	8018c8e <_fflush_r+0x3a>
 8018c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c8a:	f7ff f920 	bl	8017ece <__retarget_lock_acquire_recursive>
 8018c8e:	4628      	mov	r0, r5
 8018c90:	4621      	mov	r1, r4
 8018c92:	f7ff ff59 	bl	8018b48 <__sflush_r>
 8018c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c98:	07da      	lsls	r2, r3, #31
 8018c9a:	4605      	mov	r5, r0
 8018c9c:	d4e0      	bmi.n	8018c60 <_fflush_r+0xc>
 8018c9e:	89a3      	ldrh	r3, [r4, #12]
 8018ca0:	059b      	lsls	r3, r3, #22
 8018ca2:	d4dd      	bmi.n	8018c60 <_fflush_r+0xc>
 8018ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ca6:	f7ff f914 	bl	8017ed2 <__retarget_lock_release_recursive>
 8018caa:	e7d9      	b.n	8018c60 <_fflush_r+0xc>
 8018cac:	4b05      	ldr	r3, [pc, #20]	; (8018cc4 <_fflush_r+0x70>)
 8018cae:	429c      	cmp	r4, r3
 8018cb0:	d101      	bne.n	8018cb6 <_fflush_r+0x62>
 8018cb2:	68ac      	ldr	r4, [r5, #8]
 8018cb4:	e7df      	b.n	8018c76 <_fflush_r+0x22>
 8018cb6:	4b04      	ldr	r3, [pc, #16]	; (8018cc8 <_fflush_r+0x74>)
 8018cb8:	429c      	cmp	r4, r3
 8018cba:	bf08      	it	eq
 8018cbc:	68ec      	ldreq	r4, [r5, #12]
 8018cbe:	e7da      	b.n	8018c76 <_fflush_r+0x22>
 8018cc0:	0801a6f4 	.word	0x0801a6f4
 8018cc4:	0801a714 	.word	0x0801a714
 8018cc8:	0801a6d4 	.word	0x0801a6d4

08018ccc <_lseek_r>:
 8018ccc:	b538      	push	{r3, r4, r5, lr}
 8018cce:	4d07      	ldr	r5, [pc, #28]	; (8018cec <_lseek_r+0x20>)
 8018cd0:	4604      	mov	r4, r0
 8018cd2:	4608      	mov	r0, r1
 8018cd4:	4611      	mov	r1, r2
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	602a      	str	r2, [r5, #0]
 8018cda:	461a      	mov	r2, r3
 8018cdc:	f7e9 fae2 	bl	80022a4 <_lseek>
 8018ce0:	1c43      	adds	r3, r0, #1
 8018ce2:	d102      	bne.n	8018cea <_lseek_r+0x1e>
 8018ce4:	682b      	ldr	r3, [r5, #0]
 8018ce6:	b103      	cbz	r3, 8018cea <_lseek_r+0x1e>
 8018ce8:	6023      	str	r3, [r4, #0]
 8018cea:	bd38      	pop	{r3, r4, r5, pc}
 8018cec:	2400affc 	.word	0x2400affc

08018cf0 <__swhatbuf_r>:
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	460e      	mov	r6, r1
 8018cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cf8:	2900      	cmp	r1, #0
 8018cfa:	b096      	sub	sp, #88	; 0x58
 8018cfc:	4614      	mov	r4, r2
 8018cfe:	461d      	mov	r5, r3
 8018d00:	da08      	bge.n	8018d14 <__swhatbuf_r+0x24>
 8018d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018d06:	2200      	movs	r2, #0
 8018d08:	602a      	str	r2, [r5, #0]
 8018d0a:	061a      	lsls	r2, r3, #24
 8018d0c:	d410      	bmi.n	8018d30 <__swhatbuf_r+0x40>
 8018d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d12:	e00e      	b.n	8018d32 <__swhatbuf_r+0x42>
 8018d14:	466a      	mov	r2, sp
 8018d16:	f000 f86f 	bl	8018df8 <_fstat_r>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	dbf1      	blt.n	8018d02 <__swhatbuf_r+0x12>
 8018d1e:	9a01      	ldr	r2, [sp, #4]
 8018d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d28:	425a      	negs	r2, r3
 8018d2a:	415a      	adcs	r2, r3
 8018d2c:	602a      	str	r2, [r5, #0]
 8018d2e:	e7ee      	b.n	8018d0e <__swhatbuf_r+0x1e>
 8018d30:	2340      	movs	r3, #64	; 0x40
 8018d32:	2000      	movs	r0, #0
 8018d34:	6023      	str	r3, [r4, #0]
 8018d36:	b016      	add	sp, #88	; 0x58
 8018d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08018d3c <__smakebuf_r>:
 8018d3c:	898b      	ldrh	r3, [r1, #12]
 8018d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d40:	079d      	lsls	r5, r3, #30
 8018d42:	4606      	mov	r6, r0
 8018d44:	460c      	mov	r4, r1
 8018d46:	d507      	bpl.n	8018d58 <__smakebuf_r+0x1c>
 8018d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018d4c:	6023      	str	r3, [r4, #0]
 8018d4e:	6123      	str	r3, [r4, #16]
 8018d50:	2301      	movs	r3, #1
 8018d52:	6163      	str	r3, [r4, #20]
 8018d54:	b002      	add	sp, #8
 8018d56:	bd70      	pop	{r4, r5, r6, pc}
 8018d58:	ab01      	add	r3, sp, #4
 8018d5a:	466a      	mov	r2, sp
 8018d5c:	f7ff ffc8 	bl	8018cf0 <__swhatbuf_r>
 8018d60:	9900      	ldr	r1, [sp, #0]
 8018d62:	4605      	mov	r5, r0
 8018d64:	4630      	mov	r0, r6
 8018d66:	f7ff f947 	bl	8017ff8 <_malloc_r>
 8018d6a:	b948      	cbnz	r0, 8018d80 <__smakebuf_r+0x44>
 8018d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d70:	059a      	lsls	r2, r3, #22
 8018d72:	d4ef      	bmi.n	8018d54 <__smakebuf_r+0x18>
 8018d74:	f023 0303 	bic.w	r3, r3, #3
 8018d78:	f043 0302 	orr.w	r3, r3, #2
 8018d7c:	81a3      	strh	r3, [r4, #12]
 8018d7e:	e7e3      	b.n	8018d48 <__smakebuf_r+0xc>
 8018d80:	4b0d      	ldr	r3, [pc, #52]	; (8018db8 <__smakebuf_r+0x7c>)
 8018d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8018d84:	89a3      	ldrh	r3, [r4, #12]
 8018d86:	6020      	str	r0, [r4, #0]
 8018d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d8c:	81a3      	strh	r3, [r4, #12]
 8018d8e:	9b00      	ldr	r3, [sp, #0]
 8018d90:	6163      	str	r3, [r4, #20]
 8018d92:	9b01      	ldr	r3, [sp, #4]
 8018d94:	6120      	str	r0, [r4, #16]
 8018d96:	b15b      	cbz	r3, 8018db0 <__smakebuf_r+0x74>
 8018d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d9c:	4630      	mov	r0, r6
 8018d9e:	f000 f83d 	bl	8018e1c <_isatty_r>
 8018da2:	b128      	cbz	r0, 8018db0 <__smakebuf_r+0x74>
 8018da4:	89a3      	ldrh	r3, [r4, #12]
 8018da6:	f023 0303 	bic.w	r3, r3, #3
 8018daa:	f043 0301 	orr.w	r3, r3, #1
 8018dae:	81a3      	strh	r3, [r4, #12]
 8018db0:	89a0      	ldrh	r0, [r4, #12]
 8018db2:	4305      	orrs	r5, r0
 8018db4:	81a5      	strh	r5, [r4, #12]
 8018db6:	e7cd      	b.n	8018d54 <__smakebuf_r+0x18>
 8018db8:	08017cbd 	.word	0x08017cbd

08018dbc <__malloc_lock>:
 8018dbc:	4801      	ldr	r0, [pc, #4]	; (8018dc4 <__malloc_lock+0x8>)
 8018dbe:	f7ff b886 	b.w	8017ece <__retarget_lock_acquire_recursive>
 8018dc2:	bf00      	nop
 8018dc4:	2400aee9 	.word	0x2400aee9

08018dc8 <__malloc_unlock>:
 8018dc8:	4801      	ldr	r0, [pc, #4]	; (8018dd0 <__malloc_unlock+0x8>)
 8018dca:	f7ff b882 	b.w	8017ed2 <__retarget_lock_release_recursive>
 8018dce:	bf00      	nop
 8018dd0:	2400aee9 	.word	0x2400aee9

08018dd4 <_read_r>:
 8018dd4:	b538      	push	{r3, r4, r5, lr}
 8018dd6:	4d07      	ldr	r5, [pc, #28]	; (8018df4 <_read_r+0x20>)
 8018dd8:	4604      	mov	r4, r0
 8018dda:	4608      	mov	r0, r1
 8018ddc:	4611      	mov	r1, r2
 8018dde:	2200      	movs	r2, #0
 8018de0:	602a      	str	r2, [r5, #0]
 8018de2:	461a      	mov	r2, r3
 8018de4:	f7e9 fa36 	bl	8002254 <_read>
 8018de8:	1c43      	adds	r3, r0, #1
 8018dea:	d102      	bne.n	8018df2 <_read_r+0x1e>
 8018dec:	682b      	ldr	r3, [r5, #0]
 8018dee:	b103      	cbz	r3, 8018df2 <_read_r+0x1e>
 8018df0:	6023      	str	r3, [r4, #0]
 8018df2:	bd38      	pop	{r3, r4, r5, pc}
 8018df4:	2400affc 	.word	0x2400affc

08018df8 <_fstat_r>:
 8018df8:	b538      	push	{r3, r4, r5, lr}
 8018dfa:	4d07      	ldr	r5, [pc, #28]	; (8018e18 <_fstat_r+0x20>)
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	4604      	mov	r4, r0
 8018e00:	4608      	mov	r0, r1
 8018e02:	4611      	mov	r1, r2
 8018e04:	602b      	str	r3, [r5, #0]
 8018e06:	f7e9 fa46 	bl	8002296 <_fstat>
 8018e0a:	1c43      	adds	r3, r0, #1
 8018e0c:	d102      	bne.n	8018e14 <_fstat_r+0x1c>
 8018e0e:	682b      	ldr	r3, [r5, #0]
 8018e10:	b103      	cbz	r3, 8018e14 <_fstat_r+0x1c>
 8018e12:	6023      	str	r3, [r4, #0]
 8018e14:	bd38      	pop	{r3, r4, r5, pc}
 8018e16:	bf00      	nop
 8018e18:	2400affc 	.word	0x2400affc

08018e1c <_isatty_r>:
 8018e1c:	b538      	push	{r3, r4, r5, lr}
 8018e1e:	4d06      	ldr	r5, [pc, #24]	; (8018e38 <_isatty_r+0x1c>)
 8018e20:	2300      	movs	r3, #0
 8018e22:	4604      	mov	r4, r0
 8018e24:	4608      	mov	r0, r1
 8018e26:	602b      	str	r3, [r5, #0]
 8018e28:	f7e9 fa3a 	bl	80022a0 <_isatty>
 8018e2c:	1c43      	adds	r3, r0, #1
 8018e2e:	d102      	bne.n	8018e36 <_isatty_r+0x1a>
 8018e30:	682b      	ldr	r3, [r5, #0]
 8018e32:	b103      	cbz	r3, 8018e36 <_isatty_r+0x1a>
 8018e34:	6023      	str	r3, [r4, #0]
 8018e36:	bd38      	pop	{r3, r4, r5, pc}
 8018e38:	2400affc 	.word	0x2400affc

08018e3c <_init>:
 8018e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3e:	bf00      	nop
 8018e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e42:	bc08      	pop	{r3}
 8018e44:	469e      	mov	lr, r3
 8018e46:	4770      	bx	lr

08018e48 <_fini>:
 8018e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e4a:	bf00      	nop
 8018e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e4e:	bc08      	pop	{r3}
 8018e50:	469e      	mov	lr, r3
 8018e52:	4770      	bx	lr
