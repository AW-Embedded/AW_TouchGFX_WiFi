
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019944  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a14  08019bf4  08019bf4  00029bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0801b608  0801b608  0002b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801b620  0801b620  0009fbb8  2**0
                  CONTENTS
  5 .ARM          00000000  0801b620  0801b620  0009fbb8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801b620  0801b620  0009fbb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0801b620  0801b620  0002b620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0801b634  0801b634  0002b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  0801b63c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b398  24000110  0801b74c  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b4a8  0801b74c  0003b4a8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009fbb8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00040000  2**2
                  ALLOC
 14 FontFlashSection 000001a8  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900001a8  900001a8  000401a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005fa00  900001b8  900001b8  000401b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0005949d  00000000  00000000  0009fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000a81f9  00000000  00000000  000f9083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000122ff  00000000  00000000  001a127c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003630  00000000  00000000  001b3580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00175f90  00000000  00000000  001b6bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003708  00000000  00000000  0032cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00032246  00000000  00000000  00330248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00040964  00000000  00000000  0036248e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  003a2df2  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000a0c4  00000000  00000000  003a2ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019bdc 	.word	0x08019bdc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08019bdc 	.word	0x08019bdc

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f004 fc2b 	bl	8004c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f018 fc11 	bl	8018c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f001 fc7f 	bl	8001ce4 <main>
  bx  lr
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003ec:	0801b63c 	.word	0x0801b63c
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 80003f8:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 80003fc:	2400b4a8 	.word	0x2400b4a8

08000400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>

08000402 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000402:	4770      	bx	lr

08000404 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000404:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000406:	f000 ff51 	bl	80012ac <touchgfx_init>
}
 800040a:	bd08      	pop	{r3, pc}

0800040c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800040c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800040e:	f000 ffc7 	bl	80013a0 <touchgfx_taskEntry>
}
 8000412:	bd08      	pop	{r3, pc}

08000414 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000414:	4a02      	ldr	r2, [pc, #8]	; (8000420 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000416:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000418:	4a02      	ldr	r2, [pc, #8]	; (8000424 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800041a:	6002      	str	r2, [r0, #0]
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	08019c54 	.word	0x08019c54
 8000424:	08019c3c 	.word	0x08019c3c

08000428 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000428:	b500      	push	{lr}
 800042a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800042c:	2308      	movs	r3, #8
 800042e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000430:	2000      	movs	r0, #0
 8000432:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <_ZN20STM32TouchController4initEv+0x24>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <_ZN20STM32TouchController4initEv+0x28>)
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000440:	4669      	mov	r1, sp
 8000442:	f004 fb03 	bl	8004a4c <BSP_TS_Init>
}
 8000446:	b005      	add	sp, #20
 8000448:	f85d fb04 	ldr.w	pc, [sp], #4
 800044c:	2400b21e 	.word	0x2400b21e
 8000450:	2400b220 	.word	0x2400b220

08000454 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b085      	sub	sp, #20
 8000458:	460d      	mov	r5, r1
 800045a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800045c:	2000      	movs	r0, #0
 800045e:	9001      	str	r0, [sp, #4]
 8000460:	9002      	str	r0, [sp, #8]
 8000462:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000464:	a901      	add	r1, sp, #4
 8000466:	f004 fb61 	bl	8004b2c <BSP_TS_GetState>
 800046a:	b140      	cbz	r0, 800047e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000470:	f383 8811 	msr	BASEPRI, r3
 8000474:	f3bf 8f6f 	isb	sy
 8000478:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800047c:	e7fe      	b.n	800047c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	b913      	cbnz	r3, 8000488 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000482:	2000      	movs	r0, #0
}
 8000484:	b005      	add	sp, #20
 8000486:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000488:	9b02      	ldr	r3, [sp, #8]
 800048a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800048c:	9b03      	ldr	r3, [sp, #12]
 800048e:	6023      	str	r3, [r4, #0]
        return true;
 8000490:	2001      	movs	r0, #1
 8000492:	e7f7      	b.n	8000484 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

08000494 <_ZN20STM32TouchControllerD0Ev>:
 8000494:	b510      	push	{r4, lr}
 8000496:	4604      	mov	r4, r0
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <_ZN20STM32TouchControllerD0Ev+0x18>)
 800049a:	6003      	str	r3, [r0, #0]
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 800049e:	6003      	str	r3, [r0, #0]
 80004a0:	2104      	movs	r1, #4
 80004a2:	f018 fa40 	bl	8018926 <_ZdlPvj>
 80004a6:	4620      	mov	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	bf00      	nop
 80004ac:	08019c54 	.word	0x08019c54
 80004b0:	08019c3c 	.word	0x08019c3c

080004b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004b4:	b508      	push	{r3, lr}
    switch (id)
 80004b6:	2803      	cmp	r0, #3
 80004b8:	d80e      	bhi.n	80004d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ba:	e8df f000 	tbb	[pc, r0]
 80004be:	0e02      	.short	0x0e02
 80004c0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004c4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	0952      	lsrs	r2, r2, #5
 80004ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d2:	4815      	ldr	r0, [pc, #84]	; (8000528 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004d4:	f005 f9c2 	bl	800585c <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004dc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	0952      	lsrs	r2, r2, #5
 80004e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004ec:	f005 f9b6 	bl	800585c <HAL_GPIO_WritePin>
        break;
 80004f0:	e7f2      	b.n	80004d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004f4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f8:	fab2 f282 	clz	r2, r2
 80004fc:	0952      	lsrs	r2, r2, #5
 80004fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000504:	f005 f9aa 	bl	800585c <HAL_GPIO_WritePin>
        break;
 8000508:	e7e6      	b.n	80004d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800050c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000510:	fab2 f282 	clz	r2, r2
 8000514:	0952      	lsrs	r2, r2, #5
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800051c:	f005 f99e 	bl	800585c <HAL_GPIO_WritePin>
}
 8000520:	e7da      	b.n	80004d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000522:	bf00      	nop
 8000524:	2400012c 	.word	0x2400012c
 8000528:	58021c00 	.word	0x58021c00
 800052c:	58022000 	.word	0x58022000

08000530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000530:	b508      	push	{r3, lr}
    switch (id)
 8000532:	2803      	cmp	r0, #3
 8000534:	d80e      	bhi.n	8000554 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000536:	e8df f000 	tbb	[pc, r0]
 800053a:	0e02      	.short	0x0e02
 800053c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000540:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000544:	b103      	cbz	r3, 8000548 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000546:	2001      	movs	r0, #1
 8000548:	4602      	mov	r2, r0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000550:	f005 f984 	bl	800585c <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000554:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000558:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800055c:	b903      	cbnz	r3, 8000560 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800055e:	2000      	movs	r0, #0
 8000560:	4602      	mov	r2, r0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000568:	f005 f978 	bl	800585c <HAL_GPIO_WritePin>
        break;
 800056c:	e7f2      	b.n	8000554 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000574:	b133      	cbz	r3, 8000584 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800057e:	f005 f96d 	bl	800585c <HAL_GPIO_WritePin>
        break;
 8000582:	e7e7      	b.n	8000554 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000584:	2200      	movs	r2, #0
 8000586:	e7f7      	b.n	8000578 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800058a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800058e:	b133      	cbz	r3, 800059e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000598:	f005 f960 	bl	800585c <HAL_GPIO_WritePin>
}
 800059c:	e7da      	b.n	8000554 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800059e:	2200      	movs	r2, #0
 80005a0:	e7f7      	b.n	8000592 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005a2:	bf00      	nop
 80005a4:	2400012c 	.word	0x2400012c
 80005a8:	58021c00 	.word	0x58021c00
 80005ac:	58022000 	.word	0x58022000

080005b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005b0:	b508      	push	{r3, lr}
    switch (id)
 80005b2:	2803      	cmp	r0, #3
 80005b4:	d808      	bhi.n	80005c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005b6:	e8df f000 	tbb	[pc, r0]
 80005ba:	0802      	.short	0x0802
 80005bc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005c4:	f005 f950 	bl	8005868 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005c8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d0:	f005 f94a 	bl	8005868 <HAL_GPIO_TogglePin>
        break;
 80005d4:	e7f8      	b.n	80005c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005dc:	f005 f944 	bl	8005868 <HAL_GPIO_TogglePin>
        break;
 80005e0:	e7f2      	b.n	80005c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	4802      	ldr	r0, [pc, #8]	; (80005f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e8:	f005 f93e 	bl	8005868 <HAL_GPIO_TogglePin>
}
 80005ec:	e7ec      	b.n	80005c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005ee:	bf00      	nop
 80005f0:	58021c00 	.word	0x58021c00
 80005f4:	58022000 	.word	0x58022000

080005f8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 80005f8:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80005fc:	2301      	movs	r3, #1
 80005fe:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000602:	4770      	bx	lr

08000604 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000604:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000606:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800060a:	b123      	cbz	r3, 8000616 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800060c:	6840      	ldr	r0, [r0, #4]
 800060e:	6803      	ldr	r3, [r0, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000614:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000616:	2000      	movs	r0, #0
 8000618:	e7fc      	b.n	8000614 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800061a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800061a:	2000      	movs	r0, #0
 800061c:	4770      	bx	lr
	...

08000620 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000620:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000622:	3900      	subs	r1, #0
 8000624:	bf18      	it	ne
 8000626:	2101      	movne	r1, #1
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800062a:	7019      	strb	r1, [r3, #0]
    }
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2400b223 	.word	0x2400b223

08000634 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000634:	2000      	movs	r0, #0
 8000636:	4770      	bx	lr

08000638 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000638:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800063a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800063c:	b10b      	cbz	r3, 8000642 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800063e:	4608      	mov	r0, r1
 8000640:	4798      	blx	r3
        }
    }
 8000642:	bd08      	pop	{r3, pc}

08000644 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000644:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000648:	4770      	bx	lr

0800064a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800064a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800064c:	6840      	ldr	r0, [r0, #4]
 800064e:	6803      	ldr	r3, [r0, #0]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4798      	blx	r3
    }
 8000654:	bd08      	pop	{r3, pc}
	...

08000658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000658:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800065c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000660:	429a      	cmp	r2, r3
 8000662:	d00c      	beq.n	800067e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b9ab      	cbnz	r3, 8000696 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800066c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000670:	8818      	ldrh	r0, [r3, #0]
 8000672:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000674:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b143      	cbz	r3, 8000696 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000686:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800068a:	8818      	ldrh	r0, [r3, #0]
 800068c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800068e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8000690:	4b01      	ldr	r3, [pc, #4]	; (8000698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
        }
    }
 8000696:	4770      	bx	lr
 8000698:	2400b21c 	.word	0x2400b21c
 800069c:	2400b21a 	.word	0x2400b21a
 80006a0:	2400b218 	.word	0x2400b218

080006a4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006a6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006aa:	6002      	str	r2, [r0, #0]
    {
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006ae:	6002      	str	r2, [r0, #0]
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	08019de4 	.word	0x08019de4
 80006b8:	0801a3e4 	.word	0x0801a3e4
 80006bc:	0801af5c 	.word	0x0801af5c

080006c0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006c0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006c2:	f000 fffd 	bl	80016c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006c8:	b508      	push	{r3, lr}
 80006ca:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006d2:	4798      	blx	r3
    enableInterrupts();
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006d8:	4620      	mov	r0, r4
 80006da:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006dc:	f000 f920 	bl	8000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006e4:	4620      	mov	r0, r4
 80006e6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006ee:	f005 f8b5 	bl	800585c <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006f2:	4d0b      	ldr	r5, [pc, #44]	; (8000720 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	4628      	mov	r0, r5
 80006fa:	f005 f8af 	bl	800585c <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 80006fe:	20c8      	movs	r0, #200	; 0xc8
 8000700:	f004 fb16 	bl	8004d30 <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2102      	movs	r1, #2
 8000708:	4628      	mov	r0, r5
 800070a:	f005 f8a7 	bl	800585c <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800070e:	f000 f907 	bl	8000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000716:	4620      	mov	r0, r4
 8000718:	4798      	blx	r3
    for (;;)
 800071a:	e7f8      	b.n	800070e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800071c:	58022800 	.word	0x58022800
 8000720:	58020000 	.word	0x58020000

08000724 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000724:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000726:	f000 ff57 	bl	80015d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800072a:	bd08      	pop	{r3, pc}

0800072c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800072c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800072e:	f000 ff59 	bl	80015e4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000732:	bd08      	pop	{r3, pc}

08000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000734:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000736:	f000 ffeb 	bl	8001710 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000746:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800074e:	e000      	b.n	8000752 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000750:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000752:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000756:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800075a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800075e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000762:	4907      	ldr	r1, [pc, #28]	; (8000780 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000764:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000768:	4613      	mov	r3, r2
 800076a:	3a01      	subs	r2, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f2      	bne.n	8000756 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	2800      	cmp	r0, #0
 8000774:	d1ec      	bne.n	8000750 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800077e:	bd10      	pop	{r4, pc}
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000784:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000786:	f000 fee5 	bl	8001554 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800078a:	bd08      	pop	{r3, pc}

0800078c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800078c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800078e:	f000 feeb 	bl	8001568 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000792:	bd08      	pop	{r3, pc}

08000794 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000796:	f000 fef1 	bl	800157c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800079e:	f000 ff01 	bl	80015a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007a4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007a6:	b161      	cbz	r1, 80007c2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007a8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007aa:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007ac:	3a00      	subs	r2, #0
 80007ae:	bf18      	it	ne
 80007b0:	2201      	movne	r2, #1
 80007b2:	4907      	ldr	r1, [pc, #28]	; (80007d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007b4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007b6:	6802      	ldr	r2, [r0, #0]
 80007b8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007bc:	4619      	mov	r1, r3
 80007be:	4790      	blx	r2
    }
 80007c0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007c6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007cc:	f018 f8da 	bl	8018984 <__assert_func>
 80007d0:	2400b222 	.word	0x2400b222
 80007d4:	08019c64 	.word	0x08019c64
 80007d8:	08019c9c 	.word	0x08019c9c
 80007dc:	08019cec 	.word	0x08019cec

080007e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007e0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	428b      	cmp	r3, r1
 80007e8:	d808      	bhi.n	80007fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d804      	bhi.n	80007fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80007f4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80007f8:	801a      	strh	r2, [r3, #0]
    }
 80007fa:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000800:	219e      	movs	r1, #158	; 0x9e
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000804:	f018 f8be 	bl	8018984 <__assert_func>
 8000808:	2400b218 	.word	0x2400b218
 800080c:	2400b21a 	.word	0x2400b21a
 8000810:	2400b21e 	.word	0x2400b21e
 8000814:	2400b220 	.word	0x2400b220
 8000818:	08019d34 	.word	0x08019d34
 800081c:	08019d98 	.word	0x08019d98
 8000820:	08019cec 	.word	0x08019cec

08000824 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000824:	b510      	push	{r4, lr}
 8000826:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000828:	f00c f8aa 	bl	800c980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000832:	4620      	mov	r0, r4
 8000834:	4798      	blx	r3
    }
 8000836:	bd10      	pop	{r4, pc}

08000838 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000838:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800083a:	f00b faed 	bl	800be18 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800083e:	bd08      	pop	{r3, pc}

08000840 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000840:	b510      	push	{r4, lr}
 8000842:	4604      	mov	r4, r0
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000846:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_ZN11TouchGFXHALD0Ev+0x20>)
 800084a:	6003      	str	r3, [r0, #0]
    {
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <_ZN11TouchGFXHALD0Ev+0x24>)
 800084e:	6003      	str	r3, [r0, #0]
 8000850:	217c      	movs	r1, #124	; 0x7c
 8000852:	f018 f868 	bl	8018926 <_ZdlPvj>
 8000856:	4620      	mov	r0, r4
 8000858:	bd10      	pop	{r4, pc}
 800085a:	bf00      	nop
 800085c:	08019de4 	.word	0x08019de4
 8000860:	0801a3e4 	.word	0x0801a3e4
 8000864:	0801af5c 	.word	0x0801af5c

08000868 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000868:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	4608      	mov	r0, r1
 8000870:	f008 fbe2 	bl	8009038 <osSemaphoreNew>
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000876:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000878:	b140      	cbz	r0, 800088c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800087a:	2200      	movs	r2, #0
 800087c:	2104      	movs	r1, #4
 800087e:	2001      	movs	r0, #1
 8000880:	f008 fc99 	bl	80091b6 <osMessageQueueNew>
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000888:	b130      	cbz	r0, 8000898 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800088a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000890:	2128      	movs	r1, #40	; 0x28
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000894:	f018 f876 	bl	8018984 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800089c:	212c      	movs	r1, #44	; 0x2c
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a0:	f018 f870 	bl	8018984 <__assert_func>
 80008a4:	24000140 	.word	0x24000140
 80008a8:	2400013c 	.word	0x2400013c
 80008ac:	08019eb4 	.word	0x08019eb4
 80008b0:	08019f00 	.word	0x08019f00
 80008b4:	08019f30 	.word	0x08019f30
 80008b8:	08019f90 	.word	0x08019f90

080008bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008bc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008be:	f04f 31ff 	mov.w	r1, #4294967295
 80008c2:	4b02      	ldr	r3, [pc, #8]	; (80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	f008 fc13 	bl	80090f0 <osSemaphoreAcquire>
}
 80008ca:	bd08      	pop	{r3, pc}
 80008cc:	24000140 	.word	0x24000140

080008d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008d0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f008 fc3f 	bl	8009158 <osSemaphoreRelease>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000140 	.word	0x24000140

080008e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f008 fc02 	bl	80090f0 <osSemaphoreAcquire>
}
 80008ec:	bd08      	pop	{r3, pc}
 80008ee:	bf00      	nop
 80008f0:	24000140 	.word	0x24000140

080008f4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80008f4:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008f6:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	f008 fc2d 	bl	8009158 <osSemaphoreRelease>
}
 80008fe:	bd08      	pop	{r3, pc}
 8000900:	24000140 	.word	0x24000140

08000904 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000904:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000906:	2300      	movs	r3, #0
 8000908:	461a      	mov	r2, r3
 800090a:	4903      	ldr	r1, [pc, #12]	; (8000918 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800090c:	4803      	ldr	r0, [pc, #12]	; (800091c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800090e:	6800      	ldr	r0, [r0, #0]
 8000910:	f008 fc9d 	bl	800924e <osMessageQueuePut>
}
 8000914:	bd08      	pop	{r3, pc}
 8000916:	bf00      	nop
 8000918:	24000004 	.word	0x24000004
 800091c:	2400013c 	.word	0x2400013c

08000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000920:	b510      	push	{r4, lr}
 8000922:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000924:	4c07      	ldr	r4, [pc, #28]	; (8000944 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000926:	2300      	movs	r3, #0
 8000928:	461a      	mov	r2, r3
 800092a:	a901      	add	r1, sp, #4
 800092c:	6820      	ldr	r0, [r4, #0]
 800092e:	f008 fcce 	bl	80092ce <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	2200      	movs	r2, #0
 8000938:	a901      	add	r1, sp, #4
 800093a:	6820      	ldr	r0, [r4, #0]
 800093c:	f008 fcc7 	bl	80092ce <osMessageQueueGet>
}
 8000940:	b002      	add	sp, #8
 8000942:	bd10      	pop	{r4, pc}
 8000944:	2400013c 	.word	0x2400013c

08000948 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000948:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800094a:	6803      	ldr	r3, [r0, #0]
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4798      	blx	r3
    }
 8000950:	bd08      	pop	{r3, pc}

08000952 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000952:	2001      	movs	r0, #1
 8000954:	4770      	bx	lr

08000956 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000956:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	4798      	blx	r3
    }
 800095e:	bd08      	pop	{r3, pc}

08000960 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000960:	b508      	push	{r3, lr}
        return instance;
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <DMA2D_XferCpltCallback+0x10>)
 8000964:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000966:	6858      	ldr	r0, [r3, #4]
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800096e:	bd08      	pop	{r3, pc}
 8000970:	2400b224 	.word	0x2400b224

08000974 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <_ZN8STM32DMAD1Ev+0x24>)
 8000976:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <_ZN8STM32DMAD1Ev+0x28>)
 800097a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800097e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000986:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_ZN8STM32DMAD1Ev+0x2c>)
 800098c:	60c2      	str	r2, [r0, #12]
    {
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_ZN8STM32DMAD1Ev+0x30>)
 8000990:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_ZN8STM32DMAD1Ev+0x34>)
 8000994:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8000996:	4770      	bx	lr
 8000998:	0801a170 	.word	0x0801a170
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	0801b084 	.word	0x0801b084
 80009a4:	0801a14c 	.word	0x0801a14c
 80009a8:	0801b034 	.word	0x0801b034

080009ac <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009ac:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <_ZN8STM32DMA10initializeEv+0x40>)
 80009b0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009b4:	f042 0210 	orr.w	r2, r2, #16
 80009b8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c0:	f002 0210 	and.w	r2, r2, #16
 80009c4:	9201      	str	r2, [sp, #4]
 80009c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009ca:	f042 0210 	orr.w	r2, r2, #16
 80009ce:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009d2:	f022 0210 	bic.w	r2, r2, #16
 80009d6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <_ZN8STM32DMA10initializeEv+0x44>)
 80009da:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <_ZN8STM32DMA10initializeEv+0x48>)
 80009dc:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009e4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009e6:	b002      	add	sp, #8
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	2400123c 	.word	0x2400123c
 80009f4:	08000961 	.word	0x08000961
 80009f8:	e000e100 	.word	0xe000e100

080009fc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80009fc:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a00:	4770      	bx	lr

08000a02 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a02:	b510      	push	{r4, lr}
 8000a04:	4604      	mov	r4, r0
}
 8000a06:	f7ff ffb5 	bl	8000974 <_ZN8STM32DMAD1Ev>
 8000a0a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f017 ff89 	bl	8018926 <_ZdlPvj>
 8000a14:	4620      	mov	r0, r4
 8000a16:	bd10      	pop	{r4, pc}

08000a18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a18:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a1a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d809      	bhi.n	8000a34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a20:	e8df f003 	tbb	[pc, r3]
 8000a24:	080e1006 	.word	0x080e1006
 8000a28:	10080808 	.word	0x10080808
 8000a2c:	1010      	.short	0x1010
 8000a2e:	10          	.byte	0x10
 8000a2f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a30:	2002      	movs	r0, #2
        break;
 8000a32:	e008      	b.n	8000a46 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a38:	2187      	movs	r1, #135	; 0x87
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a3c:	f017 ffa2 	bl	8018984 <__assert_func>
    switch (format)
 8000a40:	2000      	movs	r0, #0
 8000a42:	e000      	b.n	8000a46 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a44:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a48:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a4a:	8aca      	ldrh	r2, [r1, #22]
 8000a4c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a50:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a56:	690a      	ldr	r2, [r1, #16]
 8000a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a5a:	8b4a      	ldrh	r2, [r1, #26]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	eba2 020c 	sub.w	r2, r2, ip
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a66:	680b      	ldr	r3, [r1, #0]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d008      	beq.n	8000a7e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a6e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a74:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a78:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a7a:	601a      	str	r2, [r3, #0]
    }
}
 8000a7c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a7e:	8b4a      	ldrh	r2, [r1, #26]
 8000a80:	8a8b      	ldrh	r3, [r1, #20]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a86:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a88:	8b4a      	ldrh	r2, [r1, #26]
 8000a8a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a8e:	eba2 020c 	sub.w	r2, r2, ip
 8000a92:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000a94:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000a96:	7f08      	ldrb	r0, [r1, #28]
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000a9a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000a9e:	61da      	str	r2, [r3, #28]
 8000aa0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000aa2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000aa4:	690a      	ldr	r2, [r1, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000aa8:	690a      	ldr	r2, [r1, #16]
 8000aaa:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e7e4      	b.n	8000a7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ab2:	bf00      	nop
 8000ab4:	08019fd4 	.word	0x08019fd4
 8000ab8:	08019ff0 	.word	0x08019ff0
 8000abc:	0801a03c 	.word	0x0801a03c
 8000ac0:	52001000 	.word	0x52001000
 8000ac4:	00030201 	.word	0x00030201
 8000ac8:	00010009 	.word	0x00010009
 8000acc:	00020201 	.word	0x00020201

08000ad0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ad0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ad2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ad4:	2b0b      	cmp	r3, #11
 8000ad6:	d815      	bhi.n	8000b04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ad8:	e8df f003 	tbb	[pc, r3]
 8000adc:	141a1c06 	.word	0x141a1c06
 8000ae0:	12141414 	.word	0x12141414
 8000ae4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ae8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000aea:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000aec:	2b0b      	cmp	r3, #11
 8000aee:	d820      	bhi.n	8000b32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000af0:	e8df f003 	tbb	[pc, r3]
 8000af4:	1f252712 	.word	0x1f252712
 8000af8:	1d1f1f1f 	.word	0x1d1f1f1f
 8000afc:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b00:	2005      	movs	r0, #5
        break;
 8000b02:	e7f2      	b.n	8000aea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b04:	4b75      	ldr	r3, [pc, #468]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b06:	4a76      	ldr	r2, [pc, #472]	; (8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b08:	2166      	movs	r1, #102	; 0x66
 8000b0a:	4876      	ldr	r0, [pc, #472]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b0c:	f017 ff3a 	bl	8018984 <__assert_func>
    switch (format)
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7ea      	b.n	8000aea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b14:	2001      	movs	r0, #1
 8000b16:	e7e8      	b.n	8000aea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b18:	2402      	movs	r4, #2
    switch (format)
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d815      	bhi.n	8000b4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b1e:	e8df f003 	tbb	[pc, r3]
 8000b22:	1c12      	.short	0x1c12
 8000b24:	1414141a 	.word	0x1414141a
 8000b28:	1c1c1c14 	.word	0x1c1c1c14
 8000b2c:	1c          	.byte	0x1c
 8000b2d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b2e:	2405      	movs	r4, #5
        break;
 8000b30:	e7f3      	b.n	8000b1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b34:	4a6a      	ldr	r2, [pc, #424]	; (8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b36:	2166      	movs	r1, #102	; 0x66
 8000b38:	486a      	ldr	r0, [pc, #424]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b3a:	f017 ff23 	bl	8018984 <__assert_func>
    switch (format)
 8000b3e:	2400      	movs	r4, #0
 8000b40:	e7eb      	b.n	8000b1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b42:	2401      	movs	r4, #1
 8000b44:	e7e9      	b.n	8000b1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b46:	2502      	movs	r5, #2
        break;
 8000b48:	e008      	b.n	8000b5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b4a:	4b64      	ldr	r3, [pc, #400]	; (8000cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b4c:	4a66      	ldr	r2, [pc, #408]	; (8000ce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b4e:	2187      	movs	r1, #135	; 0x87
 8000b50:	4864      	ldr	r0, [pc, #400]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b52:	f017 ff17 	bl	8018984 <__assert_func>
    switch (format)
 8000b56:	2500      	movs	r5, #0
 8000b58:	e000      	b.n	8000b5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b5c:	8b4a      	ldrh	r2, [r1, #26]
 8000b5e:	8a8b      	ldrh	r3, [r1, #20]
 8000b60:	1ad2      	subs	r2, r2, r3
 8000b62:	4b62      	ldr	r3, [pc, #392]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b64:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b66:	8b4a      	ldrh	r2, [r1, #26]
 8000b68:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b6c:	eba2 020c 	sub.w	r2, r2, ip
 8000b70:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b72:	8b0a      	ldrh	r2, [r1, #24]
 8000b74:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b78:	eba2 020c 	sub.w	r2, r2, ip
 8000b7c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b7e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b80:	8aca      	ldrh	r2, [r1, #22]
 8000b82:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b86:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b8a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b8c:	690a      	ldr	r2, [r1, #16]
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000b90:	684a      	ldr	r2, [r1, #4]
 8000b92:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000b94:	680b      	ldr	r3, [r1, #0]
 8000b96:	2b80      	cmp	r3, #128	; 0x80
 8000b98:	d036      	beq.n	8000c08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000b9a:	d813      	bhi.n	8000bc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	d07c      	beq.n	8000c9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000ba0:	2b40      	cmp	r3, #64	; 0x40
 8000ba2:	d07a      	beq.n	8000c9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	f040 8085 	bne.w	8000cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000baa:	7f0b      	ldrb	r3, [r1, #28]
 8000bac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bba:	690a      	ldr	r2, [r1, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bbe:	4a4c      	ldr	r2, [pc, #304]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bc0:	601a      	str	r2, [r3, #0]
        break;
 8000bc2:	e020      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc8:	d010      	beq.n	8000bec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bce:	d171      	bne.n	8000cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bd0:	7f0b      	ldrb	r3, [r1, #28]
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000bd4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bda:	61da      	str	r2, [r3, #28]
 8000bdc:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bde:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000be0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000be2:	690a      	ldr	r2, [r1, #16]
 8000be4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000be6:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000be8:	601a      	str	r2, [r3, #0]
        break;
 8000bea:	e00c      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bec:	7f0b      	ldrb	r3, [r1, #28]
 8000bee:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000bf0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bf6:	61da      	str	r2, [r3, #28]
 8000bf8:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bfa:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bfc:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bfe:	690a      	ldr	r2, [r1, #16]
 8000c00:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c02:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c08:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c0a:	7f0b      	ldrb	r3, [r1, #28]
 8000c0c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c10:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c16:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c18:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c1a:	6908      	ldr	r0, [r1, #16]
 8000c1c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c1e:	1d10      	adds	r0, r2, #4
 8000c20:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c22:	7813      	ldrb	r3, [r2, #0]
 8000c24:	b18b      	cbz	r3, 8000c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d12c      	bne.n	8000c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c2a:	7f0b      	ldrb	r3, [r1, #28]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d027      	beq.n	8000c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c30:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c32:	482e      	ldr	r0, [pc, #184]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c34:	69c4      	ldr	r4, [r0, #28]
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c38:	4023      	ands	r3, r4
 8000c3a:	8852      	ldrh	r2, [r2, #2]
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	61c3      	str	r3, [r0, #28]
                break;
 8000c48:	e009      	b.n	8000c5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c4a:	4928      	ldr	r1, [pc, #160]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c4c:	69c8      	ldr	r0, [r1, #28]
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c50:	4003      	ands	r3, r0
 8000c52:	8852      	ldrh	r2, [r2, #2]
 8000c54:	3a01      	subs	r2, #1
 8000c56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c5a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c5c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c60:	69d3      	ldr	r3, [r2, #28]
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f013 0f20 	tst.w	r3, #32
 8000c70:	d1fa      	bne.n	8000c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c74:	2210      	movs	r2, #16
 8000c76:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c78:	b159      	cbz	r1, 8000c92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e7c2      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c80:	2100      	movs	r1, #0
 8000c82:	e7d6      	b.n	8000c32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c86:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c88:	f240 1101 	movw	r1, #257	; 0x101
 8000c8c:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c8e:	f017 fe79 	bl	8018984 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e7b5      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c9a:	7f0b      	ldrb	r3, [r1, #28]
 8000c9c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ca0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000ca8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000caa:	690a      	ldr	r2, [r1, #16]
 8000cac:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cb0:	601a      	str	r2, [r3, #0]
        break;
 8000cb2:	e7a8      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cb4:	7f0b      	ldrb	r3, [r1, #28]
 8000cb6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cba:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cc0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cc2:	7f4a      	ldrb	r2, [r1, #29]
 8000cc4:	7f8b      	ldrb	r3, [r1, #30]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d003      	beq.n	8000cd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e799      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd4:	f240 2201 	movw	r2, #513	; 0x201
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	e794      	b.n	8000c06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cdc:	08019fd4 	.word	0x08019fd4
 8000ce0:	0801a09c 	.word	0x0801a09c
 8000ce4:	0801a03c 	.word	0x0801a03c
 8000ce8:	08019ff0 	.word	0x08019ff0
 8000cec:	52001000 	.word	0x52001000
 8000cf0:	00020201 	.word	0x00020201
 8000cf4:	00020009 	.word	0x00020009
 8000cf8:	0002000a 	.word	0x0002000a
 8000cfc:	ffff00ef 	.word	0xffff00ef
 8000d00:	0801a0e8 	.word	0x0801a0e8
 8000d04:	0801a104 	.word	0x0801a104
 8000d08:	00010201 	.word	0x00010201

08000d0c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <_ZN8STM32DMAC1Ev+0x38>)
 8000d12:	f840 3b0c 	str.w	r3, [r0], #12
 8000d16:	6068      	str	r0, [r5, #4]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	722b      	strb	r3, [r5, #8]
 8000d1c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d1e:	462c      	mov	r4, r5
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d22:	f844 3b20 	str.w	r3, [r4], #32
 8000d26:	2260      	movs	r2, #96	; 0x60
 8000d28:	4621      	mov	r1, r4
 8000d2a:	f00b ff6b 	bl	800cc04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d2e:	235f      	movs	r3, #95	; 0x5f
 8000d30:	e003      	b.n	8000d3a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60e2      	str	r2, [r4, #12]
 8000d36:	3424      	adds	r4, #36	; 0x24
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	daf9      	bge.n	8000d32 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d3e:	4628      	mov	r0, r5
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
 8000d42:	bf00      	nop
 8000d44:	0801b034 	.word	0x0801b034
 8000d48:	0801a170 	.word	0x0801a170

08000d4c <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d4c:	4b01      	ldr	r3, [pc, #4]	; (8000d54 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d4e:	6003      	str	r3, [r0, #0]
    }
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	0801a1d4 	.word	0x0801a1d4

08000d58 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d58:	4770      	bx	lr

08000d5a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d5a:	4770      	bx	lr

08000d5c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d5c:	4770      	bx	lr

08000d5e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d5e:	4770      	bx	lr

08000d60 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d60:	4770      	bx	lr

08000d62 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d62:	4770      	bx	lr

08000d64 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d66:	6003      	str	r3, [r0, #0]
    }
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	0801a1e4 	.word	0x0801a1e4

08000d70 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d70:	4770      	bx	lr

08000d72 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d72:	4770      	bx	lr

08000d74 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d74:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d78:	6808      	ldr	r0, [r1, #0]
 8000d7a:	6849      	ldr	r1, [r1, #4]
 8000d7c:	c303      	stmia	r3!, {r0, r1}
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000d84:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000d88:	b158      	cbz	r0, 8000da2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000d8a:	6803      	ldr	r3, [r0, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	4798      	blx	r3
 8000d90:	b138      	cbz	r0, 8000da2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000d92:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000d96:	6803      	ldr	r3, [r0, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000da6:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000daa:	6002      	str	r2, [r0, #0]
    {
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dae:	6002      	str	r2, [r0, #0]
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	0801a224 	.word	0x0801a224
 8000db8:	0801b1d4 	.word	0x0801b1d4
 8000dbc:	0801a1e4 	.word	0x0801a1e4

08000dc0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dc2:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000dc6:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000dcc:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dd2:	6002      	str	r2, [r0, #0]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000dd6:	6002      	str	r2, [r0, #0]
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000dda:	6002      	str	r2, [r0, #0]
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	0801a288 	.word	0x0801a288
 8000de4:	0801a270 	.word	0x0801a270
 8000de8:	0801a20c 	.word	0x0801a20c
 8000dec:	0801a224 	.word	0x0801a224
 8000df0:	0801b1d4 	.word	0x0801b1d4
 8000df4:	0801a1e4 	.word	0x0801a1e4

08000df8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <_ZN19FrontendApplicationD1Ev+0x24>)
 8000dfa:	6002      	str	r2, [r0, #0]
 8000dfc:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <_ZN19FrontendApplicationD1Ev+0x28>)
 8000dfe:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e02:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e08:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e0e:	6002      	str	r2, [r0, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e12:	6002      	str	r2, [r0, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	0801a2d4 	.word	0x0801a2d4
 8000e20:	0801a288 	.word	0x0801a288
 8000e24:	0801a270 	.word	0x0801a270
 8000e28:	0801a20c 	.word	0x0801a20c
 8000e2c:	0801a224 	.word	0x0801a224
 8000e30:	0801b1d4 	.word	0x0801b1d4
 8000e34:	0801a1e4 	.word	0x0801a1e4

08000e38 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e38:	4a02      	ldr	r2, [pc, #8]	; (8000e44 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e3a:	6002      	str	r2, [r0, #0]
    {
 8000e3c:	4a02      	ldr	r2, [pc, #8]	; (8000e48 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e3e:	6002      	str	r2, [r0, #0]
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0801a320 	.word	0x0801a320
 8000e48:	0801a1d4 	.word	0x0801a1d4

08000e4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e4e:	6002      	str	r2, [r0, #0]
    {
 8000e50:	4a02      	ldr	r2, [pc, #8]	; (8000e5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e52:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	0801a270 	.word	0x0801a270
 8000e5c:	0801a20c 	.word	0x0801a20c

08000e60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e60:	2001      	movs	r0, #1
 8000e62:	4770      	bx	lr

08000e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e64:	200c      	movs	r0, #12
 8000e66:	4770      	bx	lr

08000e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e6c:	0089      	lsls	r1, r1, #2
 8000e6e:	3108      	adds	r1, #8
    }
 8000e70:	4408      	add	r0, r1
 8000e72:	4770      	bx	lr

08000e74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e78:	0089      	lsls	r1, r1, #2
 8000e7a:	3108      	adds	r1, #8
    }
 8000e7c:	4408      	add	r0, r1
 8000e7e:	4770      	bx	lr

08000e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e80:	2001      	movs	r0, #1
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e84:	2098      	movs	r0, #152	; 0x98
 8000e86:	4770      	bx	lr

08000e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e88:	2398      	movs	r3, #152	; 0x98
 8000e8a:	fb03 f101 	mul.w	r1, r3, r1
 8000e8e:	3108      	adds	r1, #8
    }
 8000e90:	4408      	add	r0, r1
 8000e92:	4770      	bx	lr

08000e94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e94:	2398      	movs	r3, #152	; 0x98
 8000e96:	fb03 f101 	mul.w	r1, r3, r1
 8000e9a:	3108      	adds	r1, #8
    }
 8000e9c:	4408      	add	r0, r1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	4770      	bx	lr

08000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea4:	2010      	movs	r0, #16
 8000ea6:	4770      	bx	lr

08000ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea8:	0109      	lsls	r1, r1, #4
 8000eaa:	3108      	adds	r1, #8
    }
 8000eac:	4408      	add	r0, r1
 8000eae:	4770      	bx	lr

08000eb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb0:	0109      	lsls	r1, r1, #4
 8000eb2:	3108      	adds	r1, #8
    }
 8000eb4:	4408      	add	r0, r1
 8000eb6:	4770      	bx	lr

08000eb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eb8:	b508      	push	{r3, lr}
 8000eba:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ebc:	6841      	ldr	r1, [r0, #4]
 8000ebe:	68c2      	ldr	r2, [r0, #12]
 8000ec0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ec4:	f012 0f01 	tst.w	r2, #1
 8000ec8:	d102      	bne.n	8000ed0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4798      	blx	r3
    }
 8000ece:	bd08      	pop	{r3, pc}
 8000ed0:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ed4:	f851 200c 	ldr.w	r2, [r1, ip]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	58d3      	ldr	r3, [r2, r3]
 8000edc:	e7f6      	b.n	8000ecc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000ede <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000ede:	6843      	ldr	r3, [r0, #4]
 8000ee0:	b14b      	cbz	r3, 8000ef6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000ee2:	6883      	ldr	r3, [r0, #8]
 8000ee4:	b10b      	cbz	r3, 8000eea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4770      	bx	lr
 8000eea:	68c3      	ldr	r3, [r0, #12]
 8000eec:	f013 0f01 	tst.w	r3, #1
 8000ef0:	d003      	beq.n	8000efa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4770      	bx	lr
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4770      	bx	lr
 8000efa:	2000      	movs	r0, #0
    }
 8000efc:	4770      	bx	lr
	...

08000f00 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f00:	b510      	push	{r4, lr}
 8000f02:	4604      	mov	r4, r0
    {
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f06:	6003      	str	r3, [r0, #0]
    }
 8000f08:	2104      	movs	r1, #4
 8000f0a:	f017 fd0c 	bl	8018926 <_ZdlPvj>
 8000f0e:	4620      	mov	r0, r4
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	bf00      	nop
 8000f14:	0801a1e4 	.word	0x0801a1e4

08000f18 <_ZN16FrontendHeapBaseD0Ev>:
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f1e:	6003      	str	r3, [r0, #0]
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f22:	6003      	str	r3, [r0, #0]
 8000f24:	2114      	movs	r1, #20
 8000f26:	f017 fcfe 	bl	8018926 <_ZdlPvj>
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop
 8000f30:	0801a320 	.word	0x0801a320
 8000f34:	0801a1d4 	.word	0x0801a1d4

08000f38 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
    {
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f3e:	6003      	str	r3, [r0, #0]
    }
 8000f40:	2114      	movs	r1, #20
 8000f42:	f017 fcf0 	bl	8018926 <_ZdlPvj>
 8000f46:	4620      	mov	r0, r4
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	bf00      	nop
 8000f4c:	0801a1d4 	.word	0x0801a1d4

08000f50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4604      	mov	r4, r0
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f56:	6003      	str	r3, [r0, #0]
    {
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f5a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	f017 fce2 	bl	8018926 <_ZdlPvj>
 8000f62:	4620      	mov	r0, r4
 8000f64:	bd10      	pop	{r4, pc}
 8000f66:	bf00      	nop
 8000f68:	0801a270 	.word	0x0801a270
 8000f6c:	0801a20c 	.word	0x0801a20c

08000f70 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000f76:	6003      	str	r3, [r0, #0]
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000f7a:	6003      	str	r3, [r0, #0]
    {
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000f7e:	6003      	str	r3, [r0, #0]
 8000f80:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f84:	f017 fccf 	bl	8018926 <_ZdlPvj>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	bd10      	pop	{r4, pc}
 8000f8c:	0801a224 	.word	0x0801a224
 8000f90:	0801b1d4 	.word	0x0801b1d4
 8000f94:	0801a1e4 	.word	0x0801a1e4

08000f98 <_ZN23FrontendApplicationBaseD0Ev>:
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000f9e:	6003      	str	r3, [r0, #0]
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fa2:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fa8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fb2:	6003      	str	r3, [r0, #0]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000fbc:	f017 fcb3 	bl	8018926 <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	0801a288 	.word	0x0801a288
 8000fc8:	0801a270 	.word	0x0801a270
 8000fcc:	0801a20c 	.word	0x0801a20c
 8000fd0:	0801a224 	.word	0x0801a224
 8000fd4:	0801b1d4 	.word	0x0801b1d4
 8000fd8:	0801a1e4 	.word	0x0801a1e4

08000fdc <_ZN19FrontendApplicationD0Ev>:
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <_ZN19FrontendApplicationD0Ev+0x30>)
 8000fe2:	6003      	str	r3, [r0, #0]
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <_ZN19FrontendApplicationD0Ev+0x34>)
 8000fe6:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <_ZN19FrontendApplicationD0Ev+0x38>)
 8000fea:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8000ff0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <_ZN19FrontendApplicationD0Ev+0x40>)
 8000ff6:	6003      	str	r3, [r0, #0]
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <_ZN19FrontendApplicationD0Ev+0x44>)
 8000ffa:	6003      	str	r3, [r0, #0]
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <_ZN19FrontendApplicationD0Ev+0x48>)
 8000ffe:	6003      	str	r3, [r0, #0]
 8001000:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001004:	f017 fc8f 	bl	8018926 <_ZdlPvj>
 8001008:	4620      	mov	r0, r4
 800100a:	bd10      	pop	{r4, pc}
 800100c:	0801a2d4 	.word	0x0801a2d4
 8001010:	0801a288 	.word	0x0801a288
 8001014:	0801a270 	.word	0x0801a270
 8001018:	0801a20c 	.word	0x0801a20c
 800101c:	0801a224 	.word	0x0801a224
 8001020:	0801b1d4 	.word	0x0801b1d4
 8001024:	0801a1e4 	.word	0x0801a1e4

08001028 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001028:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 800102a:	4608      	mov	r0, r1
 800102c:	f001 fb8c 	bl	8002748 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001030:	bd08      	pop	{r3, pc}

08001032 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8001032:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 8001034:	f001 fb88 	bl	8002748 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001038:	bd08      	pop	{r3, pc}

0800103a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800103a:	b510      	push	{r4, lr}
 800103c:	4604      	mov	r4, r0
    {
        model.tick();
 800103e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8001042:	f002 f80e 	bl	8003062 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001046:	4620      	mov	r0, r4
 8001048:	f00c fdf6 	bl	800dc38 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800104c:	bd10      	pop	{r4, pc}
	...

08001050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001050:	b510      	push	{r4, lr}
 8001052:	4604      	mov	r4, r0
 8001054:	4b02      	ldr	r3, [pc, #8]	; (8001060 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001056:	6003      	str	r3, [r0, #0]
 8001058:	f00a fc28 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 800105c:	4620      	mov	r0, r4
 800105e:	bd10      	pop	{r4, pc}
 8001060:	0801a39c 	.word	0x0801a39c

08001064 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001064:	b510      	push	{r4, lr}
 8001066:	4604      	mov	r4, r0
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800106a:	6003      	str	r3, [r0, #0]
 800106c:	f00a fc1e 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001070:	2114      	movs	r1, #20
 8001072:	4620      	mov	r0, r4
 8001074:	f017 fc57 	bl	8018926 <_ZdlPvj>
 8001078:	4620      	mov	r0, r4
 800107a:	bd10      	pop	{r4, pc}
 800107c:	0801a39c 	.word	0x0801a39c

08001080 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001080:	b510      	push	{r4, lr}
 8001082:	4604      	mov	r4, r0
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001086:	6003      	str	r3, [r0, #0]
 8001088:	f00a fc10 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 800108c:	4620      	mov	r0, r4
 800108e:	bd10      	pop	{r4, pc}
 8001090:	0801a368 	.word	0x0801a368

08001094 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001094:	b510      	push	{r4, lr}
 8001096:	4604      	mov	r4, r0
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 800109a:	6003      	str	r3, [r0, #0]
 800109c:	f00a fc06 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a0:	21a0      	movs	r1, #160	; 0xa0
 80010a2:	4620      	mov	r0, r4
 80010a4:	f017 fc3f 	bl	8018926 <_ZdlPvj>
 80010a8:	4620      	mov	r0, r4
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	0801a368 	.word	0x0801a368

080010b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b0:	b510      	push	{r4, lr}
 80010b2:	4604      	mov	r4, r0
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010b6:	6003      	str	r3, [r0, #0]
 80010b8:	f00a fbf8 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010bc:	4620      	mov	r0, r4
 80010be:	bd10      	pop	{r4, pc}
 80010c0:	0801a334 	.word	0x0801a334

080010c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010c4:	b510      	push	{r4, lr}
 80010c6:	4604      	mov	r4, r0
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010ca:	6003      	str	r3, [r0, #0]
 80010cc:	f00a fbee 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d0:	2118      	movs	r1, #24
 80010d2:	4620      	mov	r0, r4
 80010d4:	f017 fc27 	bl	8018926 <_ZdlPvj>
 80010d8:	4620      	mov	r0, r4
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	0801a334 	.word	0x0801a334

080010e0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80010e0:	b510      	push	{r4, lr}
 80010e2:	4604      	mov	r4, r0
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <_ZN12FrontendHeapD1Ev+0x60>)
 80010e6:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <_ZN12FrontendHeapD1Ev+0x64>)
 80010ea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    virtual ~FrontendApplicationBase() { }
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <_ZN12FrontendHeapD1Ev+0x68>)
 80010f0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <_ZN12FrontendHeapD1Ev+0x6c>)
 80010f6:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_ZN12FrontendHeapD1Ev+0x70>)
 80010fc:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <_ZN12FrontendHeapD1Ev+0x74>)
 8001102:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <_ZN12FrontendHeapD1Ev+0x78>)
 8001108:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_ZN12FrontendHeapD1Ev+0x7c>)
 800110e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_ZN12FrontendHeapD1Ev+0x80>)
 8001114:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001118:	f00a fbc8 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 800111c:	4620      	mov	r0, r4
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_ZN12FrontendHeapD1Ev+0x84>)
 8001120:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001124:	f00a fbc2 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001128:	4620      	mov	r0, r4
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <_ZN12FrontendHeapD1Ev+0x88>)
 800112c:	f840 3f14 	str.w	r3, [r0, #20]!
 8001130:	f00a fbbc 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <_ZN12FrontendHeapD1Ev+0x8c>)
 8001136:	6023      	str	r3, [r4, #0]
    {
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <_ZN12FrontendHeapD1Ev+0x90>)
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	4620      	mov	r0, r4
 800113e:	bd10      	pop	{r4, pc}
 8001140:	0801a3d0 	.word	0x0801a3d0
 8001144:	0801a2d4 	.word	0x0801a2d4
 8001148:	0801a288 	.word	0x0801a288
 800114c:	0801a270 	.word	0x0801a270
 8001150:	0801a20c 	.word	0x0801a20c
 8001154:	0801a224 	.word	0x0801a224
 8001158:	0801b1d4 	.word	0x0801b1d4
 800115c:	0801a1e4 	.word	0x0801a1e4
 8001160:	0801a39c 	.word	0x0801a39c
 8001164:	0801a368 	.word	0x0801a368
 8001168:	0801a334 	.word	0x0801a334
 800116c:	0801a320 	.word	0x0801a320
 8001170:	0801a1d4 	.word	0x0801a1d4

08001174 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001174:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 8001176:	4c17      	ldr	r4, [pc, #92]	; (80011d4 <__tcf_0+0x60>)
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <__tcf_0+0x64>)
 800117a:	6023      	str	r3, [r4, #0]
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <__tcf_0+0x68>)
 800117e:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <__tcf_0+0x6c>)
 8001184:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <__tcf_0+0x70>)
 800118a:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    {
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <__tcf_0+0x74>)
 8001190:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <__tcf_0+0x78>)
 8001196:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <__tcf_0+0x7c>)
 800119c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <__tcf_0+0x80>)
 80011a2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80011a6:	4620      	mov	r0, r4
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <__tcf_0+0x84>)
 80011aa:	f840 3fcc 	str.w	r3, [r0, #204]!
 80011ae:	f00a fb7d 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011b2:	4620      	mov	r0, r4
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <__tcf_0+0x88>)
 80011b6:	f840 3f2c 	str.w	r3, [r0, #44]!
 80011ba:	f00a fb77 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011be:	4620      	mov	r0, r4
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <__tcf_0+0x8c>)
 80011c2:	f840 3f14 	str.w	r3, [r0, #20]!
 80011c6:	f00a fb71 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <__tcf_0+0x90>)
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <__tcf_0+0x94>)
 80011d0:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 80011d2:	bd10      	pop	{r4, pc}
 80011d4:	24000148 	.word	0x24000148
 80011d8:	0801a3d0 	.word	0x0801a3d0
 80011dc:	0801a2d4 	.word	0x0801a2d4
 80011e0:	0801a288 	.word	0x0801a288
 80011e4:	0801a270 	.word	0x0801a270
 80011e8:	0801a20c 	.word	0x0801a20c
 80011ec:	0801a224 	.word	0x0801a224
 80011f0:	0801b1d4 	.word	0x0801b1d4
 80011f4:	0801a1e4 	.word	0x0801a1e4
 80011f8:	0801a39c 	.word	0x0801a39c
 80011fc:	0801a368 	.word	0x0801a368
 8001200:	0801a334 	.word	0x0801a334
 8001204:	0801a320 	.word	0x0801a320
 8001208:	0801a1d4 	.word	0x0801a1d4

0800120c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800120c:	b510      	push	{r4, lr}
 800120e:	4604      	mov	r4, r0
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <_ZN12FrontendHeapD0Ev+0x6c>)
 8001212:	6003      	str	r3, [r0, #0]
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <_ZN12FrontendHeapD0Ev+0x70>)
 8001216:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <_ZN12FrontendHeapD0Ev+0x74>)
 800121c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <_ZN12FrontendHeapD0Ev+0x78>)
 8001222:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
    {
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001228:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <_ZN12FrontendHeapD0Ev+0x80>)
 800122e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <_ZN12FrontendHeapD0Ev+0x84>)
 8001234:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <_ZN12FrontendHeapD0Ev+0x88>)
 800123a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <_ZN12FrontendHeapD0Ev+0x8c>)
 8001240:	f840 3fcc 	str.w	r3, [r0, #204]!
 8001244:	f00a fb32 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001248:	4620      	mov	r0, r4
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <_ZN12FrontendHeapD0Ev+0x90>)
 800124c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001250:	f00a fb2c 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001254:	4620      	mov	r0, r4
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <_ZN12FrontendHeapD0Ev+0x94>)
 8001258:	f840 3f14 	str.w	r3, [r0, #20]!
 800125c:	f00a fb26 	bl	800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_ZN12FrontendHeapD0Ev+0x98>)
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_ZN12FrontendHeapD0Ev+0x9c>)
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800126c:	4620      	mov	r0, r4
 800126e:	f017 fb5a 	bl	8018926 <_ZdlPvj>
 8001272:	4620      	mov	r0, r4
 8001274:	bd10      	pop	{r4, pc}
 8001276:	bf00      	nop
 8001278:	0801a3d0 	.word	0x0801a3d0
 800127c:	0801a2d4 	.word	0x0801a2d4
 8001280:	0801a288 	.word	0x0801a288
 8001284:	0801a270 	.word	0x0801a270
 8001288:	0801a20c 	.word	0x0801a20c
 800128c:	0801a224 	.word	0x0801a224
 8001290:	0801b1d4 	.word	0x0801b1d4
 8001294:	0801a1e4 	.word	0x0801a1e4
 8001298:	0801a39c 	.word	0x0801a39c
 800129c:	0801a368 	.word	0x0801a368
 80012a0:	0801a334 	.word	0x0801a334
 80012a4:	0801a320 	.word	0x0801a320
 80012a8:	0801a1d4 	.word	0x0801a1d4

080012ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80012b0:	f001 f9a8 	bl	8002604 <_ZN14BitmapDatabase11getInstanceEv>
 80012b4:	4605      	mov	r5, r0
 80012b6:	f001 f9a9 	bl	800260c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80012ba:	4601      	mov	r1, r0
 80012bc:	2400      	movs	r4, #0
 80012be:	9400      	str	r4, [sp, #0]
 80012c0:	4623      	mov	r3, r4
 80012c2:	4622      	mov	r2, r4
 80012c4:	4628      	mov	r0, r5
 80012c6:	f00f fa3f 	bl	8010748 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <touchgfx_init+0xc0>)
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <touchgfx_init+0xc4>)
 80012ce:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80012d0:	4620      	mov	r0, r4
 80012d2:	f001 fcfb 	bl	8002ccc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80012d6:	4827      	ldr	r0, [pc, #156]	; (8001374 <touchgfx_init+0xc8>)
 80012d8:	f00f f8ee 	bl	80104b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <touchgfx_init+0xcc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f3bf 8f5b 	dmb	ish
 80012e4:	f013 0f01 	tst.w	r3, #1
 80012e8:	d004      	beq.n	80012f4 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80012ea:	4824      	ldr	r0, [pc, #144]	; (800137c <touchgfx_init+0xd0>)
 80012ec:	f7ff f9e8 	bl	80006c0 <_ZN11TouchGFXHAL10initializeEv>
}
 80012f0:	b003      	add	sp, #12
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <touchgfx_init+0xcc>)
 80012f6:	f017 fb18 	bl	801892a <__cxa_guard_acquire>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d0f5      	beq.n	80012ea <touchgfx_init+0x3e>
          frontendApplication(app)
 80012fe:	4c20      	ldr	r4, [pc, #128]	; (8001380 <touchgfx_init+0xd4>)
 8001300:	4620      	mov	r0, r4
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <touchgfx_init+0xd8>)
 8001304:	f840 3b14 	str.w	r3, [r0], #20
 8001308:	6060      	str	r0, [r4, #4]
 800130a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 800130e:	60a7      	str	r7, [r4, #8]
 8001310:	f104 06cc 	add.w	r6, r4, #204	; 0xcc
 8001314:	60e6      	str	r6, [r4, #12]
 8001316:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
 800131a:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <touchgfx_init+0xdc>)
 800131e:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <touchgfx_init+0xe0>)
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	f00a fac4 	bl	800b8b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <touchgfx_init+0xe4>)
 800132a:	6163      	str	r3, [r4, #20]
 800132c:	4638      	mov	r0, r7
 800132e:	f00a fabf 	bl	800b8b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <touchgfx_init+0xe8>)
 8001334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001336:	4630      	mov	r0, r6
 8001338:	f00a faba 	bl	800b8b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <touchgfx_init+0xec>)
 800133e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8001342:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
 8001346:	4630      	mov	r0, r6
 8001348:	f001 fe88 	bl	800305c <_ZN5ModelC1Ev>
 800134c:	4622      	mov	r2, r4
 800134e:	4631      	mov	r1, r6
 8001350:	4628      	mov	r0, r5
 8001352:	f001 fe79 	bl	8003048 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 8001356:	4628      	mov	r0, r5
 8001358:	f001 f9f6 	bl	8002748 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <touchgfx_init+0xf0>)
 800135e:	f017 fb2f 	bl	80189c0 <atexit>
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <touchgfx_init+0xcc>)
 8001364:	f017 faed 	bl	8018942 <__cxa_guard_release>
 8001368:	e7bf      	b.n	80012ea <touchgfx_init+0x3e>
 800136a:	bf00      	nop
 800136c:	2400b280 	.word	0x2400b280
 8001370:	240011a4 	.word	0x240011a4
 8001374:	24000008 	.word	0x24000008
 8001378:	24000144 	.word	0x24000144
 800137c:	24001128 	.word	0x24001128
 8001380:	24000148 	.word	0x24000148
 8001384:	0801a1d4 	.word	0x0801a1d4
 8001388:	0801a320 	.word	0x0801a320
 800138c:	0801a3d0 	.word	0x0801a3d0
 8001390:	0801a334 	.word	0x0801a334
 8001394:	0801a368 	.word	0x0801a368
 8001398:	0801a39c 	.word	0x0801a39c
 800139c:	08001175 	.word	0x08001175

080013a0 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013a0:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013a2:	4802      	ldr	r0, [pc, #8]	; (80013ac <touchgfx_taskEntry+0xc>)
 80013a4:	f7ff f990 	bl	80006c8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80013a8:	bd08      	pop	{r3, pc}
 80013aa:	bf00      	nop
 80013ac:	24001128 	.word	0x24001128

080013b0 <_Z41__static_initialization_and_destruction_0ii>:
 80013b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	2801      	cmp	r0, #1
 80013ba:	d006      	beq.n	80013ca <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80013bc:	b91c      	cbnz	r4, 80013c6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d076      	beq.n	80014b4 <_Z41__static_initialization_and_destruction_0ii+0x104>
}
 80013c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d1f4      	bne.n	80013bc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80013d2:	4e45      	ldr	r6, [pc, #276]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80013d6:	6033      	str	r3, [r6, #0]
{
public:

    STM32TouchController() {}
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80013da:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80013dc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001534 <_Z41__static_initialization_and_destruction_0ii+0x184>
 80013e0:	4640      	mov	r0, r8
 80013e2:	f7ff fc93 	bl	8000d0c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80013e6:	4f43      	ldr	r7, [pc, #268]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80013e8:	4638      	mov	r0, r7
 80013ea:	f011 fbc7 	bl	8012b7c <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 80013ee:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f8c3 8004 	str.w	r8, [r3, #4]
 80013f8:	609f      	str	r7, [r3, #8]
 80013fa:	60de      	str	r6, [r3, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001404:	839a      	strh	r2, [r3, #28]
 8001406:	83da      	strh	r2, [r3, #30]
 8001408:	841a      	strh	r2, [r3, #32]
 800140a:	845a      	strh	r2, [r3, #34]	; 0x22
 800140c:	849a      	strh	r2, [r3, #36]	; 0x24
 800140e:	84da      	strh	r2, [r3, #38]	; 0x26
 8001410:	851a      	strh	r2, [r3, #40]	; 0x28
 8001412:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
 8001418:	861a      	strh	r2, [r3, #48]	; 0x30
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
 8001426:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800142a:	2101      	movs	r1, #1
 800142c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
 8001430:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001434:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001438:	64da      	str	r2, [r3, #76]	; 0x4c
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800143a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800143e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8001442:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800144a:	659a      	str	r2, [r3, #88]	; 0x58
 800144c:	65da      	str	r2, [r3, #92]	; 0x5c
 800144e:	661a      	str	r2, [r3, #96]	; 0x60
 8001450:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8001454:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001458:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800145c:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 8001460:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001464:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001468:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800146c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001470:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001474:	671a      	str	r2, [r3, #112]	; 0x70
 8001476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800147a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800147e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001482:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
 8001486:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 800148a:	491d      	ldr	r1, [pc, #116]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800148c:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800148e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8001494:	8001      	strh	r1, [r0, #0]
 8001496:	481c      	ldr	r0, [pc, #112]	; (8001508 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8001498:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800149a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800149e:	481b      	ldr	r0, [pc, #108]	; (800150c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80014a0:	8001      	strh	r1, [r0, #0]
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80014a4:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80014a6:	491b      	ldr	r1, [pc, #108]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80014a8:	700a      	strb	r2, [r1, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014ac:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014b0:	601a      	str	r2, [r3, #0]
    }
 80014b2:	e783      	b.n	80013bc <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80014b8:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80014bc:	601a      	str	r2, [r3, #0]
    {
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80014c0:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80014c4:	4a17      	ldr	r2, [pc, #92]	; (8001524 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80014c6:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80014ca:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80014d0:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80014d4:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 80014d6:	4817      	ldr	r0, [pc, #92]	; (8001534 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80014d8:	f7ff fa4c 	bl	8000974 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80014e0:	601a      	str	r2, [r3, #0]
    {
 80014e2:	4a02      	ldr	r2, [pc, #8]	; (80014ec <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	e76e      	b.n	80013c6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80014e8:	24000384 	.word	0x24000384
 80014ec:	08019c3c 	.word	0x08019c3c
 80014f0:	08019c54 	.word	0x08019c54
 80014f4:	240011a8 	.word	0x240011a8
 80014f8:	24001128 	.word	0x24001128
 80014fc:	0801af5c 	.word	0x0801af5c
 8001500:	2400b224 	.word	0x2400b224
 8001504:	2400b218 	.word	0x2400b218
 8001508:	2400b21e 	.word	0x2400b21e
 800150c:	2400b21a 	.word	0x2400b21a
 8001510:	2400b220 	.word	0x2400b220
 8001514:	2400b21c 	.word	0x2400b21c
 8001518:	0801a3e4 	.word	0x0801a3e4
 800151c:	08019de4 	.word	0x08019de4
 8001520:	24000008 	.word	0x24000008
 8001524:	0801a564 	.word	0x0801a564
 8001528:	0801a1c0 	.word	0x0801a1c0
 800152c:	0801b4e0 	.word	0x0801b4e0
 8001530:	0801b17c 	.word	0x0801b17c
 8001534:	24000388 	.word	0x24000388

08001538 <_GLOBAL__sub_I_touchgfx_init>:
 8001538:	b508      	push	{r3, lr}
 800153a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff ff36 	bl	80013b0 <_Z41__static_initialization_and_destruction_0ii>
 8001544:	bd08      	pop	{r3, pc}

08001546 <_GLOBAL__sub_D_touchgfx_init>:
 8001546:	b508      	push	{r3, lr}
 8001548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff2f 	bl	80013b0 <_Z41__static_initialization_and_destruction_0ii>
 8001552:	bd08      	pop	{r3, pc}

08001554 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001556:	2290      	movs	r2, #144	; 0x90
 8001558:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800155c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800156a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001574:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800157e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800158a:	f3bf 8f6f 	isb	sy
 800158e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80015a6:	68d3      	ldr	r3, [r2, #12]
 80015a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80015b2:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80015b4:	6911      	ldr	r1, [r2, #16]
 80015b6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80015ba:	3901      	subs	r1, #1
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 80015be:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80015c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80015ca:	4770      	bx	lr
 80015cc:	50001000 	.word	0x50001000
 80015d0:	24001204 	.word	0x24001204
 80015d4:	24001202 	.word	0x24001202

080015d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80015d8:	4b01      	ldr	r3, [pc, #4]	; (80015e0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80015da:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80015de:	4770      	bx	lr
 80015e0:	50001000 	.word	0x50001000

080015e4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80015e6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80015ea:	2201      	movs	r2, #1
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015ee:	4770      	bx	lr
 80015f0:	50001000 	.word	0x50001000

080015f4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015fc:	d025      	beq.n	800164a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 80015fe:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001608:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800160c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001610:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001614:	e000      	b.n	8001618 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001616:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001618:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800161c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001620:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001624:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001628:	4908      	ldr	r1, [pc, #32]	; (800164c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 800162a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800162e:	4613      	mov	r3, r2
 8001630:	3a01      	subs	r2, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f2      	bne.n	800161c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001636:	1e43      	subs	r3, r0, #1
 8001638:	2800      	cmp	r0, #0
 800163a:	d1ec      	bne.n	8001616 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 800163c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001640:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001650:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001658:	d025      	beq.n	80016a6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 800165a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001664:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001668:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800166c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001670:	e000      	b.n	8001674 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001672:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001674:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001678:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800167c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001680:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001684:	4908      	ldr	r1, [pc, #32]	; (80016a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001686:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800168a:	4613      	mov	r3, r2
 800168c:	3a01      	subs	r2, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f2      	bne.n	8001678 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001692:	1e43      	subs	r3, r0, #1
 8001694:	2800      	cmp	r0, #0
 8001696:	d1ec      	bne.n	8001672 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800169c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80016a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <_ZN20TouchGFXGeneratedHALD1Ev>:
 80016ac:	4a02      	ldr	r2, [pc, #8]	; (80016b8 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 80016ae:	6002      	str	r2, [r0, #0]
 80016b0:	4a02      	ldr	r2, [pc, #8]	; (80016bc <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 80016b2:	6002      	str	r2, [r0, #0]
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	0801a3e4 	.word	0x0801a3e4
 80016bc:	0801af5c 	.word	0x0801af5c

080016c0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4604      	mov	r4, r0
    HAL::initialize();
 80016c4:	f00a fbfd 	bl	800bec2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80016cc:	f00c fc06 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 80016d0:	4601      	mov	r1, r0
 80016d2:	4620      	mov	r0, r4
 80016d4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80016dc:	2300      	movs	r3, #0
 80016de:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 80016e2:	4620      	mov	r0, r4
 80016e4:	47a8      	blx	r5
}
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	2409fa00 	.word	0x2409fa00
 80016ec:	24040000 	.word	0x24040000

080016f0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 80016f0:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 80016f2:	f00a fbcd 	bl	800be90 <_ZN8touchgfx3HAL10beginFrameEv>
}
 80016f6:	bd08      	pop	{r3, pc}

080016f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80016f8:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 80016fa:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80016fe:	b113      	cbz	r3, 8001706 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001706:	f00a fbcf 	bl	800bea8 <_ZN8touchgfx3HAL8endFrameEv>
}
 800170a:	bd08      	pop	{r3, pc}
 800170c:	24001200 	.word	0x24001200

08001710 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001710:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001712:	f00a fb87 	bl	800be24 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800171e:	d021      	beq.n	8001764 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001728:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800172c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001730:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001734:	e000      	b.n	8001738 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8001736:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001738:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800173c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001740:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001744:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800174a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800174e:	4613      	mov	r3, r2
 8001750:	3a01      	subs	r2, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8001756:	1e43      	subs	r3, r0, #1
 8001758:	2800      	cmp	r0, #0
 800175a:	d1ec      	bne.n	8001736 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800175c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001760:	f3bf 8f6f 	isb	sy
}
 8001764:	bd10      	pop	{r4, pc}
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800176c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800176e:	f00a fcc2 	bl	800c0f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8001772:	bd08      	pop	{r3, pc}

08001774 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8001774:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8001776:	f00a fb4f 	bl	800be18 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800177a:	bd08      	pop	{r3, pc}

0800177c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800177c:	b510      	push	{r4, lr}
 800177e:	4604      	mov	r4, r0
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8001782:	6003      	str	r3, [r0, #0]
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8001786:	6003      	str	r3, [r0, #0]
 8001788:	217c      	movs	r1, #124	; 0x7c
 800178a:	f017 f8cc 	bl	8018926 <_ZdlPvj>
 800178e:	4620      	mov	r0, r4
 8001790:	bd10      	pop	{r4, pc}
 8001792:	bf00      	nop
 8001794:	0801a3e4 	.word	0x0801a3e4
 8001798:	0801af5c 	.word	0x0801af5c

0800179c <HAL_LTDC_LineEventCallback>:
        return instance;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_LTDC_LineEventCallback+0x54>)
 800179e:	681b      	ldr	r3, [r3, #0]

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (!HAL::getInstance())
 80017a0:	b32b      	cbz	r3, 80017ee <HAL_LTDC_LineEventCallback+0x52>
    {
 80017a2:	b510      	push	{r4, lr}
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_LTDC_LineEventCallback+0x58>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <HAL_LTDC_LineEventCallback+0x5c>)
 80017aa:	8811      	ldrh	r1, [r2, #0]
 80017ac:	428b      	cmp	r3, r1
 80017ae:	d00a      	beq.n	80017c6 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80017b0:	f004 feb2 	bl	8006518 <HAL_LTDC_ProgramLineEvent>
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_LTDC_LineEventCallback+0x54>)
 80017b6:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 80017b8:	6803      	ldr	r3, [r0, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7fe feb6 	bl	8000530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        }
    }
 80017c4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_LTDC_LineEventCallback+0x60>)
 80017c8:	8819      	ldrh	r1, [r3, #0]
 80017ca:	f004 fea5 	bl	8006518 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80017ce:	4c08      	ldr	r4, [pc, #32]	; (80017f0 <HAL_LTDC_LineEventCallback+0x54>)
 80017d0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80017d2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80017d6:	3301      	adds	r3, #1
 80017d8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80017dc:	f7ff f892 	bl	8000904 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	f00b f8cd 	bl	800c980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7fe fe64 	bl	80004b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80017ec:	e7ea      	b.n	80017c4 <HAL_LTDC_LineEventCallback+0x28>
 80017ee:	4770      	bx	lr
 80017f0:	2400b224 	.word	0x2400b224
 80017f4:	50001000 	.word	0x50001000
 80017f8:	24001204 	.word	0x24001204
 80017fc:	24001202 	.word	0x24001202

08001800 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001800:	b530      	push	{r4, r5, lr}
 8001802:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001804:	2400      	movs	r4, #0
 8001806:	9400      	str	r4, [sp, #0]
 8001808:	9401      	str	r4, [sp, #4]
 800180a:	9402      	str	r4, [sp, #8]
 800180c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800180e:	f003 fb0b 	bl	8004e28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001812:	2501      	movs	r5, #1
 8001814:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001818:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800181c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001820:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001822:	231b      	movs	r3, #27
 8001824:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001828:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800182c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001830:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001834:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001838:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800183c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001840:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001844:	4668      	mov	r0, sp
 8001846:	f003 fb0d 	bl	8004e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800184a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800184e:	2319      	movs	r3, #25
 8001850:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001854:	2403      	movs	r4, #3
 8001856:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800185a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800185e:	4668      	mov	r0, sp
 8001860:	f003 fb00 	bl	8004e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001864:	2302      	movs	r3, #2
 8001866:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800186a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800186e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8001870:	2313      	movs	r3, #19
 8001872:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001876:	4668      	mov	r0, sp
 8001878:	f003 faf4 	bl	8004e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800187c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001880:	2311      	movs	r3, #17
 8001882:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001886:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800188a:	4668      	mov	r0, sp
 800188c:	f003 faea 	bl	8004e64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001890:	2004      	movs	r0, #4
 8001892:	f003 fad7 	bl	8004e44 <HAL_MPU_Enable>

}
 8001896:	b005      	add	sp, #20
 8001898:	bd30      	pop	{r4, r5, pc}
	...

0800189c <MX_CRC_Init>:
{
 800189c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_CRC_Init+0x1c>)
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_CRC_Init+0x20>)
 80018a2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018a8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018aa:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018ac:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018ae:	2301      	movs	r3, #1
 80018b0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018b2:	f003 fb07 	bl	8004ec4 <HAL_CRC_Init>
}
 80018b6:	bd08      	pop	{r3, pc}
 80018b8:	24001218 	.word	0x24001218
 80018bc:	40023000 	.word	0x40023000

080018c0 <MX_GPIO_Init>:
{
 80018c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018c4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	2400      	movs	r4, #0
 80018c8:	9407      	str	r4, [sp, #28]
 80018ca:	9408      	str	r4, [sp, #32]
 80018cc:	9409      	str	r4, [sp, #36]	; 0x24
 80018ce:	940a      	str	r4, [sp, #40]	; 0x28
 80018d0:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <MX_GPIO_Init+0x190>)
 80018d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018e0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018e4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018f4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80018f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80018fc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001904:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001910:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001914:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001918:	9202      	str	r2, [sp, #8]
 800191a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800191c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001924:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001928:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800192c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001930:	9203      	str	r2, [sp, #12]
 8001932:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001934:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800193c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001940:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001944:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001948:	9204      	str	r2, [sp, #16]
 800194a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001958:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800195c:	f002 0201 	and.w	r2, r2, #1
 8001960:	9205      	str	r2, [sp, #20]
 8001962:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001968:	f042 0208 	orr.w	r2, r2, #8
 800196c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	9306      	str	r3, [sp, #24]
 800197a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800197c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001a5c <MX_GPIO_Init+0x19c>
 8001980:	4622      	mov	r2, r4
 8001982:	f640 0104 	movw	r1, #2052	; 0x804
 8001986:	4648      	mov	r0, r9
 8001988:	f003 ff68 	bl	800585c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800198c:	4f31      	ldr	r7, [pc, #196]	; (8001a54 <MX_GPIO_Init+0x194>)
 800198e:	4622      	mov	r2, r4
 8001990:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8001994:	4638      	mov	r0, r7
 8001996:	f003 ff61 	bl	800585c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800199a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001a60 <MX_GPIO_Init+0x1a0>
 800199e:	4622      	mov	r2, r4
 80019a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a4:	4640      	mov	r0, r8
 80019a6:	f003 ff59 	bl	800585c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80019aa:	4e2b      	ldr	r6, [pc, #172]	; (8001a58 <MX_GPIO_Init+0x198>)
 80019ac:	4622      	mov	r2, r4
 80019ae:	2106      	movs	r1, #6
 80019b0:	4630      	mov	r0, r6
 80019b2:	f003 ff53 	bl	800585c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80019b6:	f640 0304 	movw	r3, #2052	; 0x804
 80019ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2501      	movs	r5, #1
 80019be:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c4:	a907      	add	r1, sp, #28
 80019c6:	4648      	mov	r0, r9
 80019c8:	f003 fd90 	bl	80054ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80019cc:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80019d0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	f04f 0903 	mov.w	r9, #3
 80019da:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019de:	a907      	add	r1, sp, #28
 80019e0:	4638      	mov	r0, r7
 80019e2:	f003 fd83 	bl	80054ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80019e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80019f4:	a907      	add	r1, sp, #28
 80019f6:	4640      	mov	r0, r8
 80019f8:	f003 fd78 	bl	80054ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019fc:	f04f 0804 	mov.w	r8, #4
 8001a00:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a08:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	a907      	add	r1, sp, #28
 8001a0e:	4638      	mov	r0, r7
 8001a10:	f003 fd6c 	bl	80054ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a14:	2302      	movs	r3, #2
 8001a16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	a907      	add	r1, sp, #28
 8001a20:	4630      	mov	r0, r6
 8001a22:	f003 fd63 	bl	80054ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8001a26:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001a30:	a907      	add	r1, sp, #28
 8001a32:	4630      	mov	r0, r6
 8001a34:	f003 fd5a 	bl	80054ec <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a38:	4622      	mov	r2, r4
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	2008      	movs	r0, #8
 8001a3e:	f003 f99d 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a42:	2008      	movs	r0, #8
 8001a44:	f003 f9d0 	bl	8004de8 <HAL_NVIC_EnableIRQ>
}
 8001a48:	b00d      	add	sp, #52	; 0x34
 8001a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a4e:	bf00      	nop
 8001a50:	58024400 	.word	0x58024400
 8001a54:	58021c00 	.word	0x58021c00
 8001a58:	58020000 	.word	0x58020000
 8001a5c:	58021800 	.word	0x58021800
 8001a60:	58022000 	.word	0x58022000

08001a64 <MX_DMA2D_Init>:
{
 8001a64:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 8001a66:	4c0b      	ldr	r4, [pc, #44]	; (8001a94 <MX_DMA2D_Init+0x30>)
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <MX_DMA2D_Init+0x34>)
 8001a6a:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001a70:	2202      	movs	r2, #2
 8001a72:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a74:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a76:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001a78:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a7a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a7c:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001a7e:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a80:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001a82:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a84:	4620      	mov	r0, r4
 8001a86:	f003 fbcd 	bl	8005224 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f003 fcab 	bl	80053e8 <HAL_DMA2D_ConfigLayer>
}
 8001a92:	bd10      	pop	{r4, pc}
 8001a94:	2400123c 	.word	0x2400123c
 8001a98:	52001000 	.word	0x52001000

08001a9c <MX_LTDC_Init>:
{
 8001a9c:	b530      	push	{r4, r5, lr}
 8001a9e:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001aa0:	2234      	movs	r2, #52	; 0x34
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	a801      	add	r0, sp, #4
 8001aa6:	f017 f903 	bl	8018cb0 <memset>
  hltdc.Instance = LTDC;
 8001aaa:	4c23      	ldr	r4, [pc, #140]	; (8001b38 <MX_LTDC_Init+0x9c>)
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <MX_LTDC_Init+0xa0>)
 8001aae:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ab4:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ab6:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ab8:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8001aba:	2328      	movs	r3, #40	; 0x28
 8001abc:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8001abe:	2309      	movs	r3, #9
 8001ac0:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001ac2:	232a      	movs	r3, #42	; 0x2a
 8001ac4:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001ac6:	230b      	movs	r3, #11
 8001ac8:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001aca:	f240 230a 	movw	r3, #522	; 0x20a
 8001ace:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ad0:	f240 131b 	movw	r3, #283	; 0x11b
 8001ad4:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8001ad6:	f240 232a 	movw	r3, #554	; 0x22a
 8001ada:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001adc:	f240 131d 	movw	r3, #285	; 0x11d
 8001ae0:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ae2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ae6:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001aea:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001aee:	4620      	mov	r0, r4
 8001af0:	f004 fbf4 	bl	80062dc <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8001af4:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8001af6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001afa:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8001afc:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8001afe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001b02:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001b04:	2301      	movs	r3, #1
 8001b06:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8001b08:	23ff      	movs	r3, #255	; 0xff
 8001b0a:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8001b0c:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b12:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b14:	2005      	movs	r0, #5
 8001b16:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001b18:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001b1a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b1c:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001b1e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b22:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b26:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	a901      	add	r1, sp, #4
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f004 fcbd 	bl	80064ae <HAL_LTDC_ConfigLayer>
}
 8001b34:	b00f      	add	sp, #60	; 0x3c
 8001b36:	bd30      	pop	{r4, r5, pc}
 8001b38:	240012f0 	.word	0x240012f0
 8001b3c:	50001000 	.word	0x50001000

08001b40 <MX_I2C4_Init>:
{
 8001b40:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8001b42:	4c0d      	ldr	r4, [pc, #52]	; (8001b78 <MX_I2C4_Init+0x38>)
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_I2C4_Init+0x3c>)
 8001b46:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <MX_I2C4_Init+0x40>)
 8001b4a:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	2301      	movs	r3, #1
 8001b52:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001b56:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b58:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5a:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f004 f85c 	bl	8005c1c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f004 fa80 	bl	800606e <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b6e:	4629      	mov	r1, r5
 8001b70:	4620      	mov	r0, r4
 8001b72:	f004 faaa 	bl	80060ca <HAL_I2CEx_ConfigDigitalFilter>
}
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	240012a4 	.word	0x240012a4
 8001b7c:	58001c00 	.word	0x58001c00
 8001b80:	30808bd0 	.word	0x30808bd0

08001b84 <MX_OCTOSPI1_Init>:
{
 8001b84:	b530      	push	{r4, r5, lr}
 8001b86:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 8001b88:	4814      	ldr	r0, [pc, #80]	; (8001bdc <MX_OCTOSPI1_Init+0x58>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_OCTOSPI1_Init+0x5c>)
 8001b8c:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b8e:	2501      	movs	r5, #1
 8001b90:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b92:	2400      	movs	r4, #0
 8001b94:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b96:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 8001b98:	231a      	movs	r3, #26
 8001b9a:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001ba0:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ba2:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001ba4:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001baa:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001bac:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001bae:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001bb4:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001bb6:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001bb8:	f005 f92c 	bl	8006e14 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001bbc:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001bc0:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f002 fe2b 	bl	8004820 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8001bca:	a901      	add	r1, sp, #4
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f002 fea1 	bl	8004914 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f002 fdcc 	bl	8004770 <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	bd30      	pop	{r4, r5, pc}
 8001bdc:	24001398 	.word	0x24001398
 8001be0:	52005000 	.word	0x52005000

08001be4 <MX_SPI2_Init>:
{
 8001be4:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <MX_SPI2_Init+0x48>)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_SPI2_Init+0x4c>)
 8001bea:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfa:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfc:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c02:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c08:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001c10:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c12:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c14:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c16:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c18:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c1a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c1c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c1e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c20:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c22:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c24:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c26:	f006 fdbb 	bl	80087a0 <HAL_SPI_Init>
}
 8001c2a:	bd08      	pop	{r3, pc}
 8001c2c:	240013f4 	.word	0x240013f4
 8001c30:	40003800 	.word	0x40003800

08001c34 <SystemClock_Config>:
{
 8001c34:	b510      	push	{r4, lr}
 8001c36:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c38:	224c      	movs	r2, #76	; 0x4c
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	a809      	add	r0, sp, #36	; 0x24
 8001c3e:	f017 f837 	bl	8018cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	a801      	add	r0, sp, #4
 8001c48:	f017 f832 	bl	8018cb0 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <SystemClock_Config+0xa8>)
 8001c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c56:	2004      	movs	r0, #4
 8001c58:	f005 f960 	bl	8006f1c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <SystemClock_Config+0xac>)
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c68:	619a      	str	r2, [r3, #24]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <SystemClock_Config+0xac>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001c7c:	d0fa      	beq.n	8001c74 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c7e:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <SystemClock_Config+0xa8>)
 8001c80:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c94:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c96:	2302      	movs	r3, #2
 8001c98:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8001ca0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ca4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ca6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ca8:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001caa:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001cac:	2304      	movs	r3, #4
 8001cae:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cb4:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb6:	a809      	add	r0, sp, #36	; 0x24
 8001cb8:	f005 f97a 	bl	8006fb0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbc:	233f      	movs	r3, #63	; 0x3f
 8001cbe:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc0:	2103      	movs	r1, #3
 8001cc2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001cca:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001ccc:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001cce:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001cd0:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cd2:	a801      	add	r0, sp, #4
 8001cd4:	f005 fd78 	bl	80077c8 <HAL_RCC_ClockConfig>
}
 8001cd8:	b01c      	add	sp, #112	; 0x70
 8001cda:	bd10      	pop	{r4, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58024800 	.word	0x58024800

08001ce4 <main>:
{
 8001ce4:	b508      	push	{r3, lr}
  MPU_Config();
 8001ce6:	f7ff fd8b 	bl	8001800 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <main+0x100>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cf2:	d113      	bne.n	8001d1c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cf8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <main+0x100>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d08:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d12:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d18:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <main+0x100>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d24:	d127      	bne.n	8001d76 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <main+0x100>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001d32:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d36:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001d3a:	e000      	b.n	8001d3e <main+0x5a>
    } while(sets-- != 0U);
 8001d3c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d3e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d42:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001d46:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001d4a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001d4e:	4925      	ldr	r1, [pc, #148]	; (8001de4 <main+0x100>)
 8001d50:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001d54:	4613      	mov	r3, r2
 8001d56:	3a01      	subs	r2, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <main+0x5e>
    } while(sets-- != 0U);
 8001d5c:	1e43      	subs	r3, r0, #1
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d1ec      	bne.n	8001d3c <main+0x58>
 8001d62:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001d66:	694b      	ldr	r3, [r1, #20]
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	614b      	str	r3, [r1, #20]
 8001d6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d72:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001d76:	f002 ff9b 	bl	8004cb0 <HAL_Init>
  SystemClock_Config();
 8001d7a:	f7ff ff5b 	bl	8001c34 <SystemClock_Config>
  MX_CRC_Init();
 8001d7e:	f7ff fd8d 	bl	800189c <MX_CRC_Init>
  MX_GPIO_Init();
 8001d82:	f7ff fd9d 	bl	80018c0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001d86:	f7ff fe6d 	bl	8001a64 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001d8a:	f7ff fe87 	bl	8001a9c <MX_LTDC_Init>
  MX_I2C4_Init();
 8001d8e:	f7ff fed7 	bl	8001b40 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8001d92:	f7ff fef7 	bl	8001b84 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8001d96:	f7ff ff25 	bl	8001be4 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 8001d9a:	f7fe fb33 	bl	8000404 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001d9e:	f7fe fb30 	bl	8000402 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001da2:	f007 f8bd 	bl	8008f20 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <main+0x104>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	200a      	movs	r0, #10
 8001dac:	f007 fa03 	bl	80091b6 <osMessageQueueNew>
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <main+0x108>)
 8001db2:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <main+0x10c>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	200a      	movs	r0, #10
 8001dba:	f007 f9fc 	bl	80091b6 <osMessageQueueNew>
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <main+0x110>)
 8001dc0:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <main+0x114>)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <main+0x118>)
 8001dc8:	f007 f8d8 	bl	8008f7c <osThreadNew>
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <main+0x11c>)
 8001dce:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <main+0x120>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <main+0x124>)
 8001dd6:	f007 f8d1 	bl	8008f7c <osThreadNew>
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <main+0x128>)
 8001ddc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001dde:	f007 f8b1 	bl	8008f44 <osKernelStart>
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <main+0xfe>
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	0801a4e4 	.word	0x0801a4e4
 8001dec:	24001208 	.word	0x24001208
 8001df0:	0801a520 	.word	0x0801a520
 8001df4:	24001210 	.word	0x24001210
 8001df8:	0801a538 	.word	0x0801a538
 8001dfc:	080024fd 	.word	0x080024fd
 8001e00:	24001214 	.word	0x24001214
 8001e04:	0801a4fc 	.word	0x0801a4fc
 8001e08:	0800040d 	.word	0x0800040d
 8001e0c:	2400120c 	.word	0x2400120c

08001e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d000      	beq.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e1a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001e1c:	f002 ff76 	bl	8004d0c <HAL_IncTick>
}
 8001e20:	e7fb      	b.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001e22:	bf00      	nop
 8001e24:	40001000 	.word	0x40001000

08001e28 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_SPI_RxCpltCallback+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b113      	cbz	r3, 8001e38 <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8001e32:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <HAL_SPI_RxCpltCallback+0x10>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    }
}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	24001480 	.word	0x24001480

08001e40 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_SPI_TxCpltCallback+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b113      	cbz	r3, 8001e4c <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8001e46:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_SPI_TxCpltCallback+0x10>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    }
}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	24001484 	.word	0x24001484

08001e54 <HAL_GPIO_EXTI_Callback>:
    return -1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8001e54:	2820      	cmp	r0, #32
 8001e56:	d000      	beq.n	8001e5a <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8001e58:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8001e5a:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_GPIO_EXTI_Callback+0x10>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	e7fa      	b.n	8001e58 <HAL_GPIO_EXTI_Callback+0x4>
 8001e62:	bf00      	nop
 8001e64:	2400147c 	.word	0x2400147c

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b500      	push	{lr}
 8001e6a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_MspInit+0x30>)
 8001e6e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001e72:	f042 0202 	orr.w	r2, r2, #2
 8001e76:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8001e7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	210f      	movs	r1, #15
 8001e8a:	f06f 0001 	mvn.w	r0, #1
 8001e8e:	f002 ff75 	bl	8004d7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	b003      	add	sp, #12
 8001e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e98:	58024400 	.word	0x58024400

08001e9c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001e9c:	6802      	ldr	r2, [r0, #0]
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_CRC_MspInit+0x2c>)
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d000      	beq.n	8001ea6 <HAL_CRC_MspInit+0xa>
 8001ea4:	4770      	bx	lr
{
 8001ea6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_CRC_MspInit+0x30>)
 8001eaa:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8001eb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ec2:	b002      	add	sp, #8
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023000 	.word	0x40023000
 8001ecc:	58024400 	.word	0x58024400

08001ed0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_DMA2D_MspInit+0x40>)
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d000      	beq.n	8001eda <HAL_DMA2D_MspInit+0xa>
 8001ed8:	4770      	bx	lr
{
 8001eda:	b500      	push	{lr}
 8001edc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_DMA2D_MspInit+0x44>)
 8001ee0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001ee4:	f042 0210 	orr.w	r2, r2, #16
 8001ee8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001eec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	205a      	movs	r0, #90	; 0x5a
 8001efe:	f002 ff3d 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f02:	205a      	movs	r0, #90	; 0x5a
 8001f04:	f002 ff70 	bl	8004de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f08:	b003      	add	sp, #12
 8001f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f0e:	bf00      	nop
 8001f10:	52001000 	.word	0x52001000
 8001f14:	58024400 	.word	0x58024400

08001f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	b0b6      	sub	sp, #216	; 0xd8
 8001f1c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	2100      	movs	r1, #0
 8001f20:	9131      	str	r1, [sp, #196]	; 0xc4
 8001f22:	9132      	str	r1, [sp, #200]	; 0xc8
 8001f24:	9133      	str	r1, [sp, #204]	; 0xcc
 8001f26:	9134      	str	r1, [sp, #208]	; 0xd0
 8001f28:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2a:	22b8      	movs	r2, #184	; 0xb8
 8001f2c:	a803      	add	r0, sp, #12
 8001f2e:	f016 febf 	bl	8018cb0 <memset>
  if(hi2c->Instance==I2C4)
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_I2C_MspInit+0x8c>)
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001f3a:	b036      	add	sp, #216	; 0xd8
 8001f3c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	a803      	add	r0, sp, #12
 8001f44:	f005 ff06 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	bb40      	cbnz	r0, 8001f9c <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4c17      	ldr	r4, [pc, #92]	; (8001fa8 <HAL_I2C_MspInit+0x90>)
 8001f4c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8001f58:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001f64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f68:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6a:	2312      	movs	r3, #18
 8001f6c:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f72:	2302      	movs	r3, #2
 8001f74:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	a931      	add	r1, sp, #196	; 0xc4
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <HAL_I2C_MspInit+0x94>)
 8001f7e:	f003 fab5 	bl	80054ec <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f82:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8001f8e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	9b02      	ldr	r3, [sp, #8]
}
 8001f9a:	e7ce      	b.n	8001f3a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001f9c:	f7ff ff44 	bl	8001e28 <Error_Handler>
 8001fa0:	e7d3      	b.n	8001f4a <HAL_I2C_MspInit+0x32>
 8001fa2:	bf00      	nop
 8001fa4:	58001c00 	.word	0x58001c00
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	58020c00 	.word	0x58020c00

08001fb0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8001fb0:	6802      	ldr	r2, [r0, #0]
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_I2C_MspDeInit+0x34>)
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d000      	beq.n	8001fba <HAL_I2C_MspDeInit+0xa>
 8001fb8:	4770      	bx	lr
{
 8001fba:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_I2C_MspDeInit+0x38>)
 8001fbe:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8001fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8001fca:	4c08      	ldr	r4, [pc, #32]	; (8001fec <HAL_I2C_MspDeInit+0x3c>)
 8001fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f003 fb9b 	bl	800570c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f003 fb96 	bl	800570c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	58001c00 	.word	0x58001c00
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58020c00 	.word	0x58020c00

08001ff0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	b0b8      	sub	sp, #224	; 0xe0
 8001ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	9133      	str	r1, [sp, #204]	; 0xcc
 8001ffa:	9134      	str	r1, [sp, #208]	; 0xd0
 8001ffc:	9135      	str	r1, [sp, #212]	; 0xd4
 8001ffe:	9136      	str	r1, [sp, #216]	; 0xd8
 8002000:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002002:	22b8      	movs	r2, #184	; 0xb8
 8002004:	a805      	add	r0, sp, #20
 8002006:	f016 fe53 	bl	8018cb0 <memset>
  if(hltdc->Instance==LTDC)
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_LTDC_MspInit+0x114>)
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002012:	b038      	add	sp, #224	; 0xe0
 8002014:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002016:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800201a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800201c:	2318      	movs	r3, #24
 800201e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002020:	23c9      	movs	r3, #201	; 0xc9
 8002022:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002024:	2302      	movs	r3, #2
 8002026:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002028:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 800202a:	2315      	movs	r3, #21
 800202c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800202e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002032:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002034:	f241 5356 	movw	r3, #5462	; 0x1556
 8002038:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	a805      	add	r0, sp, #20
 800203c:	f005 fe8a 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	2800      	cmp	r0, #0
 8002042:	d15c      	bne.n	80020fe <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_LTDC_MspInit+0x118>)
 8002046:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002052:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002056:	f002 0208 	and.w	r2, r2, #8
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800205e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002066:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800206a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800206e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002076:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800207a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002082:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002086:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800208a:	9203      	str	r2, [sp, #12]
 800208c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800208e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800209a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 80020a6:	23ff      	movs	r3, #255	; 0xff
 80020a8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2602      	movs	r6, #2
 80020ac:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2400      	movs	r4, #0
 80020b0:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b4:	250e      	movs	r5, #14
 80020b6:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020b8:	a933      	add	r1, sp, #204	; 0xcc
 80020ba:	4814      	ldr	r0, [pc, #80]	; (800210c <HAL_LTDC_MspInit+0x11c>)
 80020bc:	f003 fa16 	bl	80054ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020cc:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020ce:	a933      	add	r1, sp, #204	; 0xcc
 80020d0:	480f      	ldr	r0, [pc, #60]	; (8002110 <HAL_LTDC_MspInit+0x120>)
 80020d2:	f003 fa0b 	bl	80054ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 80020d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020da:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e2:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020e4:	a933      	add	r1, sp, #204	; 0xcc
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <HAL_LTDC_MspInit+0x124>)
 80020e8:	f003 fa00 	bl	80054ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80020ec:	4622      	mov	r2, r4
 80020ee:	2105      	movs	r1, #5
 80020f0:	2058      	movs	r0, #88	; 0x58
 80020f2:	f002 fe43 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020f6:	2058      	movs	r0, #88	; 0x58
 80020f8:	f002 fe76 	bl	8004de8 <HAL_NVIC_EnableIRQ>
}
 80020fc:	e789      	b.n	8002012 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 80020fe:	f7ff fe93 	bl	8001e28 <Error_Handler>
 8002102:	e79f      	b.n	8002044 <HAL_LTDC_MspInit+0x54>
 8002104:	50001000 	.word	0x50001000
 8002108:	58024400 	.word	0x58024400
 800210c:	58022800 	.word	0x58022800
 8002110:	58022400 	.word	0x58022400
 8002114:	58022000 	.word	0x58022000

08002118 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002118:	b510      	push	{r4, lr}
 800211a:	b0b0      	sub	sp, #192	; 0xc0
 800211c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211e:	22b8      	movs	r2, #184	; 0xb8
 8002120:	2100      	movs	r1, #0
 8002122:	a802      	add	r0, sp, #8
 8002124:	f016 fdc4 	bl	8018cb0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002128:	6822      	ldr	r2, [r4, #0]
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_OSPI_MspInit+0x8c>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002130:	b030      	add	sp, #192	; 0xc0
 8002132:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002138:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800213a:	2318      	movs	r3, #24
 800213c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800213e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002142:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002144:	2302      	movs	r3, #2
 8002146:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002148:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800214a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800214c:	2320      	movs	r3, #32
 800214e:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8002150:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002152:	a802      	add	r0, sp, #8
 8002154:	f005 fdfe 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8002158:	bb08      	cbnz	r0, 800219e <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_OSPI_MspInit+0x90>)
 800215c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002160:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002164:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002168:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800216c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002170:	9200      	str	r2, [sp, #0]
 8002172:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002174:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002180:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2105      	movs	r1, #5
 8002190:	205c      	movs	r0, #92	; 0x5c
 8002192:	f002 fdf3 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8002196:	205c      	movs	r0, #92	; 0x5c
 8002198:	f002 fe26 	bl	8004de8 <HAL_NVIC_EnableIRQ>
}
 800219c:	e7c8      	b.n	8002130 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 800219e:	f7ff fe43 	bl	8001e28 <Error_Handler>
 80021a2:	e7da      	b.n	800215a <HAL_OSPI_MspInit+0x42>
 80021a4:	52005000 	.word	0x52005000
 80021a8:	58024400 	.word	0x58024400

080021ac <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80021ac:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80021ae:	6802      	ldr	r2, [r0, #0]
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_OSPI_MspDeInit+0x30>)
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d000      	beq.n	80021b8 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80021b6:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_OSPI_MspDeInit+0x34>)
 80021ba:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80021be:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021c2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80021c6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80021ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ce:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80021d2:	205c      	movs	r0, #92	; 0x5c
 80021d4:	f002 fe16 	bl	8004e04 <HAL_NVIC_DisableIRQ>
}
 80021d8:	e7ed      	b.n	80021b6 <HAL_OSPI_MspDeInit+0xa>
 80021da:	bf00      	nop
 80021dc:	52005000 	.word	0x52005000
 80021e0:	58024400 	.word	0x58024400

080021e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	b0b6      	sub	sp, #216	; 0xd8
 80021e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	2100      	movs	r1, #0
 80021ec:	9131      	str	r1, [sp, #196]	; 0xc4
 80021ee:	9132      	str	r1, [sp, #200]	; 0xc8
 80021f0:	9133      	str	r1, [sp, #204]	; 0xcc
 80021f2:	9134      	str	r1, [sp, #208]	; 0xd0
 80021f4:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f6:	22b8      	movs	r2, #184	; 0xb8
 80021f8:	a803      	add	r0, sp, #12
 80021fa:	f016 fd59 	bl	8018cb0 <memset>
  if(hspi->Instance==SPI2)
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_SPI_MspInit+0xc8>)
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002206:	b036      	add	sp, #216	; 0xd8
 8002208:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800220a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	a803      	add	r0, sp, #12
 8002212:	f005 fd9f 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8002216:	2800      	cmp	r0, #0
 8002218:	d145      	bne.n	80022a6 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_SPI_MspInit+0xcc>)
 800221c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002224:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002228:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800222c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002230:	9200      	str	r2, [sp, #0]
 8002232:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002234:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002240:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002244:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002248:	9201      	str	r2, [sp, #4]
 800224a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002258:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002264:	230c      	movs	r3, #12
 8002266:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2602      	movs	r6, #2
 800226a:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2400      	movs	r4, #0
 800226e:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002272:	2505      	movs	r5, #5
 8002274:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002276:	a931      	add	r1, sp, #196	; 0xc4
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <HAL_SPI_MspInit+0xd0>)
 800227a:	f003 f937 	bl	80054ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800228a:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	a931      	add	r1, sp, #196	; 0xc4
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <HAL_SPI_MspInit+0xd4>)
 8002290:	f003 f92c 	bl	80054ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002294:	4622      	mov	r2, r4
 8002296:	4621      	mov	r1, r4
 8002298:	2024      	movs	r0, #36	; 0x24
 800229a:	f002 fd6f 	bl	8004d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800229e:	2024      	movs	r0, #36	; 0x24
 80022a0:	f002 fda2 	bl	8004de8 <HAL_NVIC_EnableIRQ>
}
 80022a4:	e7af      	b.n	8002206 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80022a6:	f7ff fdbf 	bl	8001e28 <Error_Handler>
 80022aa:	e7b6      	b.n	800221a <HAL_SPI_MspInit+0x36>
 80022ac:	40003800 	.word	0x40003800
 80022b0:	58024400 	.word	0x58024400
 80022b4:	58022000 	.word	0x58022000
 80022b8:	58020000 	.word	0x58020000

080022bc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022bc:	280f      	cmp	r0, #15
 80022be:	d901      	bls.n	80022c4 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80022c2:	4770      	bx	lr
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80022ca:	2200      	movs	r2, #0
 80022cc:	4601      	mov	r1, r0
 80022ce:	2036      	movs	r0, #54	; 0x36
 80022d0:	f002 fd54 	bl	8004d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022d4:	2036      	movs	r0, #54	; 0x36
 80022d6:	f002 fd87 	bl	8004de8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_InitTick+0x88>)
 80022dc:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_InitTick+0x8c>)
 80022e0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80022e4:	f042 0210 	orr.w	r2, r2, #16
 80022e8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80022ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022f8:	a901      	add	r1, sp, #4
 80022fa:	a802      	add	r0, sp, #8
 80022fc:	f005 fbf4 	bl	8007ae8 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002300:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002302:	b9bb      	cbnz	r3, 8002334 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002304:	f005 fbcc 	bl	8007aa0 <HAL_RCC_GetPCLK1Freq>
 8002308:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800230a:	4810      	ldr	r0, [pc, #64]	; (800234c <HAL_InitTick+0x90>)
 800230c:	fba0 2303 	umull	r2, r3, r0, r3
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <HAL_InitTick+0x94>)
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <HAL_InitTick+0x98>)
 8002318:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800231a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800231e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002320:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002328:	f006 fdba 	bl	8008ea0 <HAL_TIM_Base_Init>
 800232c:	b130      	cbz	r0, 800233c <HAL_InitTick+0x80>
  return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
}
 8002330:	b00a      	add	sp, #40	; 0x28
 8002332:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002334:	f005 fbb4 	bl	8007aa0 <HAL_RCC_GetPCLK1Freq>
 8002338:	0043      	lsls	r3, r0, #1
 800233a:	e7e6      	b.n	800230a <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <HAL_InitTick+0x94>)
 800233e:	f006 fc13 	bl	8008b68 <HAL_TIM_Base_Start_IT>
 8002342:	e7f5      	b.n	8002330 <HAL_InitTick+0x74>
 8002344:	24000048 	.word	0x24000048
 8002348:	58024400 	.word	0x58024400
 800234c:	431bde83 	.word	0x431bde83
 8002350:	24001488 	.word	0x24001488
 8002354:	40001000 	.word	0x40001000

08002358 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002358:	4770      	bx	lr

0800235a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler>

0800235c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler>

0800235e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler>

08002360 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler>

08002362 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	4770      	bx	lr

08002364 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8002366:	2004      	movs	r0, #4
 8002368:	f003 fa87 	bl	800587a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800236c:	bd08      	pop	{r3, pc}
	...

08002370 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002372:	4802      	ldr	r0, [pc, #8]	; (800237c <SPI2_IRQHandler+0xc>)
 8002374:	f006 faca 	bl	800890c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002378:	bd08      	pop	{r3, pc}
 800237a:	bf00      	nop
 800237c:	240013f4 	.word	0x240013f4

08002380 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002382:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM6_DAC_IRQHandler+0xc>)
 8002384:	f006 fc3c 	bl	8008c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop
 800238c:	24001488 	.word	0x24001488

08002390 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002390:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002392:	4802      	ldr	r0, [pc, #8]	; (800239c <LTDC_IRQHandler+0xc>)
 8002394:	f004 f81e 	bl	80063d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002398:	bd08      	pop	{r3, pc}
 800239a:	bf00      	nop
 800239c:	240012f0 	.word	0x240012f0

080023a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <DMA2D_IRQHandler+0xc>)
 80023a4:	f002 ff82 	bl	80052ac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	2400123c 	.word	0x2400123c

080023b0 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80023b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80023b2:	4802      	ldr	r0, [pc, #8]	; (80023bc <OCTOSPI1_IRQHandler+0xc>)
 80023b4:	f004 fc18 	bl	8006be8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop
 80023bc:	24001398 	.word	0x24001398

080023c0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80023c0:	2001      	movs	r0, #1
 80023c2:	4770      	bx	lr

080023c4 <_kill>:

int _kill(int pid, int sig)
{
 80023c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80023c6:	f016 fb0f 	bl	80189e8 <__errno>
 80023ca:	2316      	movs	r3, #22
 80023cc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80023ce:	f04f 30ff 	mov.w	r0, #4294967295
 80023d2:	bd08      	pop	{r3, pc}

080023d4 <_exit>:

void _exit (int status)
{
 80023d4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80023d6:	f04f 31ff 	mov.w	r1, #4294967295
 80023da:	f7ff fff3 	bl	80023c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023de:	e7fe      	b.n	80023de <_exit+0xa>

080023e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	460c      	mov	r4, r1
 80023e4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e6:	2500      	movs	r5, #0
 80023e8:	e006      	b.n	80023f8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80023ea:	f3af 8000 	nop.w
 80023ee:	4621      	mov	r1, r4
 80023f0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80023f6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	42b5      	cmp	r5, r6
 80023fa:	dbf6      	blt.n	80023ea <_read+0xa>
	}

return len;
}
 80023fc:	4630      	mov	r0, r6
 80023fe:	bd70      	pop	{r4, r5, r6, pc}

08002400 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	460c      	mov	r4, r1
 8002404:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	2500      	movs	r5, #0
 8002408:	e004      	b.n	8002414 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800240a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800240e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	3501      	adds	r5, #1
 8002414:	42b5      	cmp	r5, r6
 8002416:	dbf8      	blt.n	800240a <_write+0xa>
	}
	return len;
}
 8002418:	4630      	mov	r0, r6
 800241a:	bd70      	pop	{r4, r5, r6, pc}

0800241c <_close>:

int _close(int file)
{
	return -1;
}
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	4770      	bx	lr

08002422 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002426:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002428:	2000      	movs	r0, #0
 800242a:	4770      	bx	lr

0800242c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800242c:	2001      	movs	r0, #1
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002430:	2000      	movs	r0, #0
 8002432:	4770      	bx	lr

08002434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002434:	b508      	push	{r3, lr}
 8002436:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <_sbrk+0x34>)
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	b142      	cbz	r2, 8002450 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <_sbrk+0x34>)
 8002440:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002442:	4403      	add	r3, r0
 8002444:	466a      	mov	r2, sp
 8002446:	4293      	cmp	r3, r2
 8002448:	d806      	bhi.n	8002458 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <_sbrk+0x34>)
 800244c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800244e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x34>)
 8002452:	4906      	ldr	r1, [pc, #24]	; (800246c <_sbrk+0x38>)
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	e7f2      	b.n	800243e <_sbrk+0xa>
		errno = ENOMEM;
 8002458:	f016 fac6 	bl	80189e8 <__errno>
 800245c:	230c      	movs	r3, #12
 800245e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	e7f3      	b.n	800244e <_sbrk+0x1a>
 8002466:	bf00      	nop
 8002468:	240014d4 	.word	0x240014d4
 800246c:	2400b4a8 	.word	0x2400b4a8

08002470 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 8002474:	2200      	movs	r2, #0
 8002476:	4611      	mov	r1, r2
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <wifi_scan+0x28>)
 800247a:	f009 f8ab 	bl	800b5d4 <net_wifi_scan>
  if (ret == NET_OK)
 800247e:	4605      	mov	r5, r0
 8002480:	b108      	cbz	r0, 8002486 <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 8002482:	4628      	mov	r0, r5
 8002484:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002486:	220a      	movs	r2, #10
 8002488:	4621      	mov	r1, r4
 800248a:	4803      	ldr	r0, [pc, #12]	; (8002498 <wifi_scan+0x28>)
 800248c:	f009 f8bc 	bl	800b608 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8002490:	2800      	cmp	r0, #0
 8002492:	dcf6      	bgt.n	8002482 <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8002494:	4605      	mov	r5, r0
  return ret;
 8002496:	e7f4      	b.n	8002482 <wifi_scan+0x12>
 8002498:	240016e0 	.word	0x240016e0

0800249c <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 800249c:	b500      	push	{lr}
 800249e:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 80024a0:	9001      	str	r0, [sp, #4]
 80024a2:	9102      	str	r1, [sp, #8]
 80024a4:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 80024a6:	a901      	add	r1, sp, #4
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <wifi_connect+0x5c>)
 80024aa:	f009 f8c3 	bl	800b634 <net_wifi_set_credentials>
 80024ae:	b9e8      	cbnz	r0, 80024ec <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <wifi_connect+0x5c>)
 80024b2:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00b      	beq.n	80024d2 <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <wifi_connect+0x5c>)
 80024bc:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d00b      	beq.n	80024dc <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <wifi_connect+0x5c>)
 80024c6:	f009 f8ee 	bl	800b6a6 <net_if_connect>
 80024ca:	b990      	cbnz	r0, 80024f2 <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80024cc:	b005      	add	sp, #20
 80024ce:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <wifi_connect+0x5c>)
 80024d4:	2205      	movs	r2, #5
 80024d6:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80024da:	e7ee      	b.n	80024ba <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <wifi_connect+0x5c>)
 80024de:	f009 f8e7 	bl	800b6b0 <net_if_disconnect>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d0ee      	beq.n	80024c4 <wifi_connect+0x28>
      return  -1;
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ea:	e7ef      	b.n	80024cc <wifi_connect+0x30>
    return -1;
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	e7ec      	b.n	80024cc <wifi_connect+0x30>
    return -1;
 80024f2:	f04f 30ff 	mov.w	r0, #4294967295
 80024f6:	e7e9      	b.n	80024cc <wifi_connect+0x30>
 80024f8:	240016e0 	.word	0x240016e0

080024fc <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80024fc:	b500      	push	{lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	e015      	b.n	800252e <esWiFi_Task+0x32>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 8002502:	4c23      	ldr	r4, [pc, #140]	; (8002590 <esWiFi_Task+0x94>)
 8002504:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002508:	2100      	movs	r1, #0
 800250a:	4620      	mov	r0, r4
 800250c:	f016 fbd0 	bl	8018cb0 <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff ffad 	bl	8002470 <wifi_scan>
 8002516:	b950      	cbnz	r0, 800252e <esWiFi_Task+0x32>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 8002518:	2301      	movs	r3, #1
 800251a:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 800251e:	2300      	movs	r3, #0
 8002520:	461a      	mov	r2, r3
 8002522:	f10d 0106 	add.w	r1, sp, #6
 8002526:	481b      	ldr	r0, [pc, #108]	; (8002594 <esWiFi_Task+0x98>)
 8002528:	6800      	ldr	r0, [r0, #0]
 800252a:	f006 fe90 	bl	800924e <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	2200      	movs	r2, #0
 8002534:	f10d 0107 	add.w	r1, sp, #7
 8002538:	4817      	ldr	r0, [pc, #92]	; (8002598 <esWiFi_Task+0x9c>)
 800253a:	6800      	ldr	r0, [r0, #0]
 800253c:	f006 fec7 	bl	80092ce <osMessageQueueGet>
        switch(msg)
 8002540:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0dc      	beq.n	8002502 <esWiFi_Task+0x6>
 8002548:	2b02      	cmp	r3, #2
 800254a:	d1f0      	bne.n	800252e <esWiFi_Task+0x32>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 800254c:	4813      	ldr	r0, [pc, #76]	; (800259c <esWiFi_Task+0xa0>)
 800254e:	f008 ff7f 	bl	800b450 <net_wifi_string_to_security>
 8002552:	4602      	mov	r2, r0
 8002554:	4912      	ldr	r1, [pc, #72]	; (80025a0 <esWiFi_Task+0xa4>)
 8002556:	4813      	ldr	r0, [pc, #76]	; (80025a4 <esWiFi_Task+0xa8>)
 8002558:	f7ff ffa0 	bl	800249c <wifi_connect>
 800255c:	b158      	cbz	r0, 8002576 <esWiFi_Task+0x7a>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 800255e:	2304      	movs	r3, #4
 8002560:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8002564:	2300      	movs	r3, #0
 8002566:	461a      	mov	r2, r3
 8002568:	f10d 0106 	add.w	r1, sp, #6
 800256c:	4809      	ldr	r0, [pc, #36]	; (8002594 <esWiFi_Task+0x98>)
 800256e:	6800      	ldr	r0, [r0, #0]
 8002570:	f006 fe6d 	bl	800924e <osMessageQueuePut>
 8002574:	e7db      	b.n	800252e <esWiFi_Task+0x32>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8002576:	2303      	movs	r3, #3
 8002578:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800257c:	2300      	movs	r3, #0
 800257e:	461a      	mov	r2, r3
 8002580:	f10d 0106 	add.w	r1, sp, #6
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <esWiFi_Task+0x98>)
 8002586:	6800      	ldr	r0, [r0, #0]
 8002588:	f006 fe61 	bl	800924e <osMessageQueuePut>
 800258c:	e7cf      	b.n	800252e <esWiFi_Task+0x32>
 800258e:	bf00      	nop
 8002590:	240014d8 	.word	0x240014d8
 8002594:	24001208 	.word	0x24001208
 8002598:	24001210 	.word	0x24001210
 800259c:	24001878 	.word	0x24001878
 80025a0:	24001898 	.word	0x24001898
 80025a4:	240018d8 	.word	0x240018d8

080025a8 <_ZN23ApplicationFontProviderD1Ev>:
 80025a8:	4a02      	ldr	r2, [pc, #8]	; (80025b4 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80025aa:	6002      	str	r2, [r0, #0]
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80025ae:	6002      	str	r2, [r0, #0]
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	0801a564 	.word	0x0801a564
 80025b8:	0801a1c0 	.word	0x0801a1c0

080025bc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80025bc:	b508      	push	{r3, lr}
    switch (typography)
 80025be:	2901      	cmp	r1, #1
 80025c0:	d008      	beq.n	80025d4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 80025c2:	2902      	cmp	r1, #2
 80025c4:	d00a      	beq.n	80025dc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80025c6:	b109      	cbz	r1, 80025cc <_ZN23ApplicationFontProvider7getFontEt+0x10>
 80025c8:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80025ca:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80025cc:	f000 fbd6 	bl	8002d7c <_ZN17TypedTextDatabase8getFontsEv>
 80025d0:	6800      	ldr	r0, [r0, #0]
 80025d2:	e7fa      	b.n	80025ca <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80025d4:	f000 fbd2 	bl	8002d7c <_ZN17TypedTextDatabase8getFontsEv>
 80025d8:	6840      	ldr	r0, [r0, #4]
 80025da:	e7f6      	b.n	80025ca <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80025dc:	f000 fbce 	bl	8002d7c <_ZN17TypedTextDatabase8getFontsEv>
 80025e0:	6880      	ldr	r0, [r0, #8]
 80025e2:	e7f2      	b.n	80025ca <_ZN23ApplicationFontProvider7getFontEt+0xe>

080025e4 <_ZN23ApplicationFontProviderD0Ev>:
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4604      	mov	r4, r0
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <_ZN23ApplicationFontProviderD0Ev+0x18>)
 80025ea:	6003      	str	r3, [r0, #0]
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 80025ee:	6003      	str	r3, [r0, #0]
 80025f0:	2104      	movs	r1, #4
 80025f2:	f016 f998 	bl	8018926 <_ZdlPvj>
 80025f6:	4620      	mov	r0, r4
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	bf00      	nop
 80025fc:	0801a564 	.word	0x0801a564
 8002600:	0801a1c0 	.word	0x0801a1c0

08002604 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002604:	4800      	ldr	r0, [pc, #0]	; (8002608 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002606:	4770      	bx	lr
 8002608:	0801a570 	.word	0x0801a570

0800260c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800260c:	2001      	movs	r0, #1
 800260e:	4770      	bx	lr

08002610 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8002610:	b169      	cbz	r1, 800262e <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002612:	b510      	push	{r4, lr}
 8002614:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800261a:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800261e:	6803      	ldr	r3, [r0, #0]
 8002620:	689c      	ldr	r4, [r3, #8]
 8002622:	f10d 0303 	add.w	r3, sp, #3
 8002626:	aa01      	add	r2, sp, #4
 8002628:	47a0      	blx	r4
        return glyph;
    }
 800262a:	b002      	add	sp, #8
 800262c:	bd10      	pop	{r4, pc}
            return 0;
 800262e:	2000      	movs	r0, #0
    }
 8002630:	4770      	bx	lr

08002632 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002632:	8940      	ldrh	r0, [r0, #10]
 8002634:	4770      	bx	lr

08002636 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002636:	8980      	ldrh	r0, [r0, #12]
 8002638:	4770      	bx	lr

0800263a <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 800263a:	8880      	ldrh	r0, [r0, #4]
 800263c:	4770      	bx	lr

0800263e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800263e:	8883      	ldrh	r3, [r0, #4]
 8002640:	7980      	ldrb	r0, [r0, #6]
 8002642:	4418      	add	r0, r3
    }
 8002644:	b280      	uxth	r0, r0
 8002646:	4770      	bx	lr

08002648 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002648:	79c0      	ldrb	r0, [r0, #7]
    }
 800264a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800264e:	4770      	bx	lr

08002650 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002650:	79c0      	ldrb	r0, [r0, #7]
    }
 8002652:	09c0      	lsrs	r0, r0, #7
 8002654:	4770      	bx	lr
	...

08002658 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8002658:	4b01      	ldr	r3, [pc, #4]	; (8002660 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 800265a:	6003      	str	r3, [r0, #0]
    }
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	0801a8b8 	.word	0x0801a8b8

08002664 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8002664:	4770      	bx	lr

08002666 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002666:	4770      	bx	lr

08002668 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002668:	4770      	bx	lr

0800266a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800266a:	6041      	str	r1, [r0, #4]
    }
 800266c:	4770      	bx	lr

0800266e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800266e:	2301      	movs	r3, #1
 8002670:	7203      	strb	r3, [r0, #8]
    }
 8002672:	4770      	bx	lr

08002674 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002674:	4a02      	ldr	r2, [pc, #8]	; (8002680 <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8002676:	6002      	str	r2, [r0, #0]
    {
 8002678:	4a02      	ldr	r2, [pc, #8]	; (8002684 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 800267a:	6002      	str	r2, [r0, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	0801a8dc 	.word	0x0801a8dc
 8002684:	0801a8b8 	.word	0x0801a8b8

08002688 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002688:	b510      	push	{r4, lr}
 800268a:	4604      	mov	r4, r0
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 800268e:	6003      	str	r3, [r0, #0]
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8002692:	6003      	str	r3, [r0, #0]
 8002694:	210c      	movs	r1, #12
 8002696:	f016 f946 	bl	8018926 <_ZdlPvj>
 800269a:	4620      	mov	r0, r4
 800269c:	bd10      	pop	{r4, pc}
 800269e:	bf00      	nop
 80026a0:	0801a8dc 	.word	0x0801a8dc
 80026a4:	0801a8b8 	.word	0x0801a8b8

080026a8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
    {
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <_ZN8touchgfx10TransitionD0Ev+0x14>)
 80026ae:	6003      	str	r3, [r0, #0]
    }
 80026b0:	210c      	movs	r1, #12
 80026b2:	f016 f938 	bl	8018926 <_ZdlPvj>
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	bf00      	nop
 80026bc:	0801a8b8 	.word	0x0801a8b8

080026c0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80026c0:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80026c2:	f00b fc0b 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 80026c6:	f00b ffaf 	bl	800e628 <_ZN8touchgfx11Application10invalidateEv>
    }
 80026ca:	bd08      	pop	{r3, pc}

080026cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	460d      	mov	r5, r1
 80026d2:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 80026d4:	f00b fc24 	bl	800df20 <_ZN8touchgfx11ApplicationC1Ev>
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80026da:	6023      	str	r3, [r4, #0]
 80026dc:	2100      	movs	r1, #0
 80026de:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80026e2:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
        instance = this;
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x68>)
 80026e8:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 80026ec:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 80026f0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 80026f6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80026fa:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 80026fe:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002702:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
 8002706:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 800270a:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
        return instance;
 800270e:	4d0d      	ldr	r5, [pc, #52]	; (8002744 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8002710:	6828      	ldr	r0, [r5, #0]
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002712:	6803      	ldr	r3, [r0, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800271e:	b10a      	cbz	r2, 8002724 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>
 8002720:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002722:	b900      	cbnz	r0, 8002726 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5a>
        return instance->lcdRef;
 8002724:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002726:	f011 fada 	bl	8013cde <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800272a:	4620      	mov	r0, r4
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	bf00      	nop
 8002730:	0801a224 	.word	0x0801a224
 8002734:	2400b270 	.word	0x2400b270
 8002738:	0801a288 	.word	0x0801a288
 800273c:	0801a20c 	.word	0x0801a20c
 8002740:	0801a270 	.word	0x0801a270
 8002744:	2400b224 	.word	0x2400b224

08002748 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 8002748:	b410      	push	{r4}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8002750:	9206      	str	r2, [sp, #24]
 8002752:	2200      	movs	r2, #0
 8002754:	9207      	str	r2, [sp, #28]
 8002756:	46ec      	mov	ip, sp
 8002758:	aa08      	add	r2, sp, #32
 800275a:	e912 0003 	ldmdb	r2, {r0, r1}
 800275e:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8002762:	4c0c      	ldr	r4, [pc, #48]	; (8002794 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8002764:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8002768:	9202      	str	r2, [sp, #8]
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	aa04      	add	r2, sp, #16
 800276e:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002772:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8002776:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 800277a:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 800277e:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8002780:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8002784:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8002788:	b009      	add	sp, #36	; 0x24
 800278a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	080028ed 	.word	0x080028ed
 8002794:	0801a20c 	.word	0x0801a20c
 8002798:	0801a270 	.word	0x0801a270

0800279c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800279c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	4607      	mov	r7, r0
 80027a2:	4688      	mov	r8, r1
 80027a4:	4615      	mov	r5, r2
 80027a6:	4699      	mov	r9, r3
 80027a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80027ac:	6890      	ldr	r0, [r2, #8]
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4798      	blx	r3
 80027b4:	2897      	cmp	r0, #151	; 0x97
 80027b6:	d976      	bls.n	80028a6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80027b8:	6868      	ldr	r0, [r5, #4]
 80027ba:	6803      	ldr	r3, [r0, #0]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4798      	blx	r3
 80027c0:	280f      	cmp	r0, #15
 80027c2:	d976      	bls.n	80028b2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80027c4:	68e8      	ldr	r0, [r5, #12]
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4798      	blx	r3
 80027cc:	280b      	cmp	r0, #11
 80027ce:	d976      	bls.n	80028be <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
    Application::getInstance()->clearAllTimerWidgets();
 80027d0:	f00b fb84 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 80027d4:	f00b fb88 	bl	800dee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80027d8:	f8d9 0000 	ldr.w	r0, [r9]
 80027dc:	b110      	cbz	r0, 80027e4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x48>
        (*currentTrans)->tearDown();
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4798      	blx	r3
    if (*currentTrans)
 80027e4:	f8d9 0000 	ldr.w	r0, [r9]
 80027e8:	b110      	cbz	r0, 80027f0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
        (*currentTrans)->~Transition();
 80027ea:	6803      	ldr	r3, [r0, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4798      	blx	r3
    if (*currentScreen)
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	b110      	cbz	r0, 80027fa <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5e>
        (*currentScreen)->tearDownScreen();
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	4798      	blx	r3
    if (*currentPresenter)
 80027fa:	f8d8 0000 	ldr.w	r0, [r8]
 80027fe:	b110      	cbz	r0, 8002806 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6a>
        (*currentPresenter)->deactivate();
 8002800:	6803      	ldr	r3, [r0, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4798      	blx	r3
    if (*currentScreen)
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	b110      	cbz	r0, 8002810 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentScreen)->~Screen();
 800280a:	6803      	ldr	r3, [r0, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4798      	blx	r3
    if (*currentPresenter)
 8002810:	f8d8 0000 	ldr.w	r0, [r8]
 8002814:	b110      	cbz	r0, 800281c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
        (*currentPresenter)->~Presenter();
 8002816:	6803      	ldr	r3, [r0, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800281c:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800281e:	6803      	ldr	r3, [r0, #0]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2100      	movs	r1, #0
 8002824:	4798      	blx	r3
 8002826:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 800282a:	6003      	str	r3, [r0, #0]
 800282c:	f04f 0b00 	mov.w	fp, #0
 8002830:	f8c0 b004 	str.w	fp, [r0, #4]
 8002834:	f880 b008 	strb.w	fp, [r0, #8]
 8002838:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 800283a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800283c:	68a8      	ldr	r0, [r5, #8]
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	4659      	mov	r1, fp
 8002844:	4798      	blx	r3
 8002846:	4606      	mov	r6, r0
 8002848:	f000 fd08 	bl	800325c <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800284c:	6868      	ldr	r0, [r5, #4]
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	4659      	mov	r1, fp
 8002854:	4798      	blx	r3
 8002856:	4605      	mov	r5, r0
 8002858:	4631      	mov	r1, r6
 800285a:	f000 fc87 	bl	800316c <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 800285e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002862:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8002866:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8002868:	2d00      	cmp	r5, #0
 800286a:	d02e      	beq.n	80028ca <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800286c:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800286e:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002872:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002876:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8002878:	6833      	ldr	r3, [r6, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4630      	mov	r0, r6
 800287e:	4798      	blx	r3
    newPresenter->activate();
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4628      	mov	r0, r5
 8002886:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002888:	4621      	mov	r1, r4
 800288a:	4630      	mov	r0, r6
 800288c:	f00c ff0c 	bl	800f6a8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4620      	mov	r0, r4
 8002896:	4798      	blx	r3
    newTransition->invalidate();
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4620      	mov	r0, r4
 800289e:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 80028a0:	4628      	mov	r0, r5
 80028a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80028a8:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80028aa:	21a3      	movs	r1, #163	; 0xa3
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80028ae:	f016 f869 	bl	8018984 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80028b6:	21a4      	movs	r1, #164	; 0xa4
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80028ba:	f016 f863 	bl	8018984 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 80028c2:	21a5      	movs	r1, #165	; 0xa5
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 80028c6:	f016 f85d 	bl	8018984 <__assert_func>
    model->bind(newPresenter);
 80028ca:	462b      	mov	r3, r5
 80028cc:	e7cf      	b.n	800286e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 80028ce:	bf00      	nop
 80028d0:	0801a8b8 	.word	0x0801a8b8
 80028d4:	0801a8dc 	.word	0x0801a8dc
 80028d8:	0801a584 	.word	0x0801a584
 80028dc:	0801a614 	.word	0x0801a614
 80028e0:	0801a720 	.word	0x0801a720
 80028e4:	0801a768 	.word	0x0801a768
 80028e8:	0801a80c 	.word	0x0801a80c

080028ec <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 80028ec:	b500      	push	{lr}
 80028ee:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80028f0:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 80028f8:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80028fc:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8002902:	f7ff ff4b 	bl	800279c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002906:	b003      	add	sp, #12
 8002908:	f85d fb04 	ldr.w	pc, [sp], #4
 800290c:	2400b264 	.word	0x2400b264
 8002910:	2400b260 	.word	0x2400b260

08002914 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002914:	6a00      	ldr	r0, [r0, #32]
 8002916:	4770      	bx	lr

08002918 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002918:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800291a:	4770      	bx	lr

0800291c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 800291e:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8002920:	4a03      	ldr	r2, [pc, #12]	; (8002930 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8002922:	6002      	str	r2, [r0, #0]
    {
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8002926:	6002      	str	r2, [r0, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	0801a900 	.word	0x0801a900
 8002930:	0801b288 	.word	0x0801b288
 8002934:	0801ab40 	.word	0x0801ab40

08002938 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8002938:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800293a:	888b      	ldrh	r3, [r1, #4]
 800293c:	0adb      	lsrs	r3, r3, #11
 800293e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002942:	680b      	ldr	r3, [r1, #0]
}
 8002944:	4418      	add	r0, r3
 8002946:	4770      	bx	lr

08002948 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8002948:	4694      	mov	ip, r2
 800294a:	b1da      	cbz	r2, 8002984 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 800294c:	7b13      	ldrb	r3, [r2, #12]
 800294e:	b1db      	cbz	r3, 8002988 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002950:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002952:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8002956:	0200      	lsls	r0, r0, #8
 8002958:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800295c:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8002960:	ea40 000c 	orr.w	r0, r0, ip
 8002964:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002968:	b29b      	uxth	r3, r3
 800296a:	b17b      	cbz	r3, 800298c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800296c:	8810      	ldrh	r0, [r2, #0]
 800296e:	4288      	cmp	r0, r1
 8002970:	d005      	beq.n	800297e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8002972:	4288      	cmp	r0, r1
 8002974:	d80c      	bhi.n	8002990 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002976:	3b01      	subs	r3, #1
 8002978:	b29b      	uxth	r3, r3
 800297a:	3204      	adds	r2, #4
 800297c:	e7f5      	b.n	800296a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 800297e:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8002982:	4770      	bx	lr
        return 0;
 8002984:	2000      	movs	r0, #0
 8002986:	4770      	bx	lr
 8002988:	2000      	movs	r0, #0
 800298a:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 800298c:	2000      	movs	r0, #0
 800298e:	4770      	bx	lr
 8002990:	2000      	movs	r0, #0
}
 8002992:	4770      	bx	lr

08002994 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002994:	b510      	push	{r4, lr}
 8002996:	4604      	mov	r4, r0
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 800299a:	6003      	str	r3, [r0, #0]
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 800299e:	6003      	str	r3, [r0, #0]
    {
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80029a2:	6003      	str	r3, [r0, #0]
 80029a4:	2128      	movs	r1, #40	; 0x28
 80029a6:	f015 ffbe 	bl	8018926 <_ZdlPvj>
 80029aa:	4620      	mov	r0, r4
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	bf00      	nop
 80029b0:	0801a900 	.word	0x0801a900
 80029b4:	0801b288 	.word	0x0801b288
 80029b8:	0801ab40 	.word	0x0801ab40

080029bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80029bc:	b530      	push	{r4, r5, lr}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80029c2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80029c6:	9506      	str	r5, [sp, #24]
 80029c8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80029cc:	9505      	str	r5, [sp, #20]
 80029ce:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80029d2:	9504      	str	r5, [sp, #16]
 80029d4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80029d8:	9503      	str	r5, [sp, #12]
 80029da:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80029de:	9502      	str	r5, [sp, #8]
 80029e0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80029e4:	9501      	str	r5, [sp, #4]
 80029e6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80029ea:	9500      	str	r5, [sp, #0]
 80029ec:	f00c fabc 	bl	800ef68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029f6:	61a3      	str	r3, [r4, #24]
 80029f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80029fa:	61e3      	str	r3, [r4, #28]
 80029fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80029fe:	6223      	str	r3, [r4, #32]
 8002a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002a02:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002a04:	4620      	mov	r0, r4
 8002a06:	b009      	add	sp, #36	; 0x24
 8002a08:	bd30      	pop	{r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0801a900 	.word	0x0801a900

08002a10 <__tcf_0>:
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <__tcf_0+0x10>)
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__tcf_0+0x14>)
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__tcf_0+0x18>)
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__tcf_0+0x1c>)
 8002a1c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002a1e:	4770      	bx	lr
 8002a20:	240017dc 	.word	0x240017dc
 8002a24:	0801a900 	.word	0x0801a900
 8002a28:	0801b288 	.word	0x0801b288
 8002a2c:	0801ab40 	.word	0x0801ab40

08002a30 <_Z23getFont_verdana_10_4bppv>:
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f3bf 8f5b 	dmb	ish
 8002a38:	f013 0f01 	tst.w	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8002a3e:	4815      	ldr	r0, [pc, #84]	; (8002a94 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002a40:	4770      	bx	lr
{
 8002a42:	b500      	push	{lr}
 8002a44:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002a46:	4812      	ldr	r0, [pc, #72]	; (8002a90 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002a48:	f015 ff6f 	bl	801892a <__cxa_guard_acquire>
 8002a4c:	b918      	cbnz	r0, 8002a56 <_Z23getFont_verdana_10_4bppv+0x26>
}
 8002a4e:	4811      	ldr	r0, [pc, #68]	; (8002a94 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002a50:	b00d      	add	sp, #52	; 0x34
 8002a52:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002a56:	2300      	movs	r3, #0
 8002a58:	930a      	str	r3, [sp, #40]	; 0x28
 8002a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5c:	9308      	str	r3, [sp, #32]
 8002a5e:	223f      	movs	r2, #63	; 0x3f
 8002a60:	9207      	str	r2, [sp, #28]
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002a64:	9206      	str	r2, [sp, #24]
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002a68:	9205      	str	r2, [sp, #20]
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	9303      	str	r3, [sp, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	9202      	str	r2, [sp, #8]
 8002a72:	2104      	movs	r1, #4
 8002a74:	9101      	str	r1, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	230a      	movs	r3, #10
 8002a7a:	4909      	ldr	r1, [pc, #36]	; (8002aa0 <_Z23getFont_verdana_10_4bppv+0x70>)
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002a7e:	f7ff ff9d 	bl	80029bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002a82:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <_Z23getFont_verdana_10_4bppv+0x74>)
 8002a84:	f015 ff9c 	bl	80189c0 <atexit>
 8002a88:	4801      	ldr	r0, [pc, #4]	; (8002a90 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002a8a:	f015 ff5a 	bl	8018942 <__cxa_guard_release>
 8002a8e:	e7de      	b.n	8002a4e <_Z23getFont_verdana_10_4bppv+0x1e>
 8002a90:	240017d8 	.word	0x240017d8
 8002a94:	240017dc 	.word	0x240017dc
 8002a98:	0801b608 	.word	0x0801b608
 8002a9c:	0801b614 	.word	0x0801b614
 8002aa0:	90000178 	.word	0x90000178
 8002aa4:	08002a11 	.word	0x08002a11

08002aa8 <__tcf_0>:
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <__tcf_0+0x10>)
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__tcf_0+0x14>)
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <__tcf_0+0x18>)
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__tcf_0+0x1c>)
 8002ab4:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002ab6:	4770      	bx	lr
 8002ab8:	24001808 	.word	0x24001808
 8002abc:	0801a900 	.word	0x0801a900
 8002ac0:	0801b288 	.word	0x0801b288
 8002ac4:	0801ab40 	.word	0x0801ab40

08002ac8 <_Z23getFont_verdana_20_4bppv>:
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	f3bf 8f5b 	dmb	ish
 8002ad0:	f013 0f01 	tst.w	r3, #1
 8002ad4:	d001      	beq.n	8002ada <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8002ad6:	4815      	ldr	r0, [pc, #84]	; (8002b2c <_Z23getFont_verdana_20_4bppv+0x64>)
 8002ad8:	4770      	bx	lr
{
 8002ada:	b500      	push	{lr}
 8002adc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002ade:	4812      	ldr	r0, [pc, #72]	; (8002b28 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002ae0:	f015 ff23 	bl	801892a <__cxa_guard_acquire>
 8002ae4:	b918      	cbnz	r0, 8002aee <_Z23getFont_verdana_20_4bppv+0x26>
}
 8002ae6:	4811      	ldr	r0, [pc, #68]	; (8002b2c <_Z23getFont_verdana_20_4bppv+0x64>)
 8002ae8:	b00d      	add	sp, #52	; 0x34
 8002aea:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002aee:	2300      	movs	r3, #0
 8002af0:	930a      	str	r3, [sp, #40]	; 0x28
 8002af2:	9309      	str	r3, [sp, #36]	; 0x24
 8002af4:	9308      	str	r3, [sp, #32]
 8002af6:	223f      	movs	r2, #63	; 0x3f
 8002af8:	9207      	str	r2, [sp, #28]
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002afc:	9206      	str	r2, [sp, #24]
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002b00:	9205      	str	r2, [sp, #20]
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	9303      	str	r3, [sp, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	9202      	str	r2, [sp, #8]
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	9101      	str	r1, [sp, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2314      	movs	r3, #20
 8002b12:	4909      	ldr	r1, [pc, #36]	; (8002b38 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <_Z23getFont_verdana_20_4bppv+0x64>)
 8002b16:	f7ff ff51 	bl	80029bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002b1a:	4808      	ldr	r0, [pc, #32]	; (8002b3c <_Z23getFont_verdana_20_4bppv+0x74>)
 8002b1c:	f015 ff50 	bl	80189c0 <atexit>
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002b22:	f015 ff0e 	bl	8018942 <__cxa_guard_release>
 8002b26:	e7de      	b.n	8002ae6 <_Z23getFont_verdana_20_4bppv+0x1e>
 8002b28:	24001804 	.word	0x24001804
 8002b2c:	24001808 	.word	0x24001808
 8002b30:	0801b60c 	.word	0x0801b60c
 8002b34:	0801b618 	.word	0x0801b618
 8002b38:	90000188 	.word	0x90000188
 8002b3c:	08002aa9 	.word	0x08002aa9

08002b40 <__tcf_0>:
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <__tcf_0+0x10>)
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__tcf_0+0x14>)
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <__tcf_0+0x18>)
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <__tcf_0+0x1c>)
 8002b4c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002b4e:	4770      	bx	lr
 8002b50:	24001834 	.word	0x24001834
 8002b54:	0801a900 	.word	0x0801a900
 8002b58:	0801b288 	.word	0x0801b288
 8002b5c:	0801ab40 	.word	0x0801ab40

08002b60 <_Z23getFont_verdana_40_4bppv>:
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f3bf 8f5b 	dmb	ish
 8002b68:	f013 0f01 	tst.w	r3, #1
 8002b6c:	d001      	beq.n	8002b72 <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8002b6e:	4815      	ldr	r0, [pc, #84]	; (8002bc4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002b70:	4770      	bx	lr
{
 8002b72:	b500      	push	{lr}
 8002b74:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002b76:	4812      	ldr	r0, [pc, #72]	; (8002bc0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002b78:	f015 fed7 	bl	801892a <__cxa_guard_acquire>
 8002b7c:	b918      	cbnz	r0, 8002b86 <_Z23getFont_verdana_40_4bppv+0x26>
}
 8002b7e:	4811      	ldr	r0, [pc, #68]	; (8002bc4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002b80:	b00d      	add	sp, #52	; 0x34
 8002b82:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002b86:	2300      	movs	r3, #0
 8002b88:	930a      	str	r3, [sp, #40]	; 0x28
 8002b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b8c:	9308      	str	r3, [sp, #32]
 8002b8e:	223f      	movs	r2, #63	; 0x3f
 8002b90:	9207      	str	r2, [sp, #28]
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002b94:	9206      	str	r2, [sp, #24]
 8002b96:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002b98:	9205      	str	r2, [sp, #20]
 8002b9a:	9304      	str	r3, [sp, #16]
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	9202      	str	r2, [sp, #8]
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	9101      	str	r1, [sp, #4]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2328      	movs	r3, #40	; 0x28
 8002baa:	4909      	ldr	r1, [pc, #36]	; (8002bd0 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002bac:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002bae:	f7ff ff05 	bl	80029bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002bb2:	4808      	ldr	r0, [pc, #32]	; (8002bd4 <_Z23getFont_verdana_40_4bppv+0x74>)
 8002bb4:	f015 ff04 	bl	80189c0 <atexit>
 8002bb8:	4801      	ldr	r0, [pc, #4]	; (8002bc0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002bba:	f015 fec2 	bl	8018942 <__cxa_guard_release>
 8002bbe:	e7de      	b.n	8002b7e <_Z23getFont_verdana_40_4bppv+0x1e>
 8002bc0:	24001830 	.word	0x24001830
 8002bc4:	24001834 	.word	0x24001834
 8002bc8:	0801b610 	.word	0x0801b610
 8002bcc:	0801b61c 	.word	0x0801b61c
 8002bd0:	90000198 	.word	0x90000198
 8002bd4:	08002b41 	.word	0x08002b41

08002bd8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 8002bd8:	2000      	movs	r0, #0
 8002bda:	4770      	bx	lr

08002bdc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002bdc:	2000      	movs	r0, #0
 8002bde:	4770      	bx	lr

08002be0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002be0:	2000      	movs	r0, #0
 8002be2:	4770      	bx	lr

08002be4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002be4:	b40e      	push	{r1, r2, r3}
 8002be6:	b500      	push	{lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	ab03      	add	r3, sp, #12
 8002bec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002bf0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f00b ffe8 	bl	800ebc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002bf8:	b002      	add	sp, #8
 8002bfa:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bfe:	b003      	add	sp, #12
 8002c00:	4770      	bx	lr

08002c02 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002c02:	b40c      	push	{r2, r3}
 8002c04:	b500      	push	{lr}
 8002c06:	b083      	sub	sp, #12
 8002c08:	ab04      	add	r3, sp, #16
 8002c0a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002c0e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002c10:	f00b ffda 	bl	800ebc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002c14:	b003      	add	sp, #12
 8002c16:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c1a:	b002      	add	sp, #8
 8002c1c:	4770      	bx	lr
	...

08002c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002c24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c26:	b133      	cbz	r3, 8002c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002c28:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002c2a:	b143      	cbz	r3, 8002c3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8002c2c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002c2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c32:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c34:	b94b      	cbnz	r3, 8002c4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002c36:	4620      	mov	r0, r4
 8002c38:	f00d f904 	bl	800fe44 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8002c3c:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8002c42:	21c0      	movs	r1, #192	; 0xc0
 8002c44:	481c      	ldr	r0, [pc, #112]	; (8002cb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8002c46:	f015 fe9d 	bl	8018984 <__assert_func>
        substituteGlyphs();
 8002c4a:	f00d f9f9 	bl	8010040 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002c4e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8002c50:	2801      	cmp	r0, #1
 8002c52:	d91d      	bls.n	8002c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8002c54:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8002c56:	1c4b      	adds	r3, r1, #1
 8002c58:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002c5a:	2b09      	cmp	r3, #9
 8002c5c:	d81e      	bhi.n	8002c9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 8002c5e:	461a      	mov	r2, r3
 8002c60:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002c64:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002c68:	f640 123f 	movw	r2, #2367	; 0x93f
 8002c6c:	4594      	cmp	ip, r2
 8002c6e:	d1e2      	bne.n	8002c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8002c70:	b1b8      	cbz	r0, 8002ca2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 8002c72:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8002c76:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d900      	bls.n	8002c7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002c82:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002c84:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002c88:	f640 133f 	movw	r3, #2367	; 0x93f
 8002c8c:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 8002c8e:	e7d2      	b.n	8002c36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 8002c94:	21c5      	movs	r1, #197	; 0xc5
 8002c96:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8002c98:	f015 fe74 	bl	8018984 <__assert_func>
            return buffer[index < size ? index : index - size];
 8002c9c:	f1a3 020a 	sub.w	r2, r3, #10
 8002ca0:	e7de      	b.n	8002c60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8002ca4:	4a03      	ldr	r2, [pc, #12]	; (8002cb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8002ca6:	21c0      	movs	r1, #192	; 0xc0
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8002caa:	f015 fe6b 	bl	8018984 <__assert_func>
 8002cae:	bf00      	nop
 8002cb0:	0801a950 	.word	0x0801a950
 8002cb4:	0801a95c 	.word	0x0801a95c
 8002cb8:	0801aa08 	.word	0x0801aa08
 8002cbc:	0801aa54 	.word	0x0801aa54
 8002cc0:	0801aa64 	.word	0x0801aa64

08002cc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8002cc4:	b508      	push	{r3, lr}
    fillInputBuffer();
 8002cc6:	f00d f886 	bl	800fdd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8002cca:	bd08      	pop	{r3, pc}

08002ccc <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002ccc:	bb40      	cbnz	r0, 8002d20 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 8002cce:	b538      	push	{r3, r4, r5, lr}
 8002cd0:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002cd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002cd8:	b1c3      	cbz	r3, 8002d0c <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	4419      	add	r1, r3
 8002cde:	4812      	ldr	r0, [pc, #72]	; (8002d28 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002ce0:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	4419      	add	r1, r3
 8002ce6:	4811      	ldr	r0, [pc, #68]	; (8002d2c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002ce8:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002cea:	689c      	ldr	r4, [r3, #8]
 8002cec:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 8002cee:	b164      	cbz	r4, 8002d0a <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002cf2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002cf4:	f000 f842 	bl	8002d7c <_ZN17TypedTextDatabase8getFontsEv>
 8002cf8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002cfa:	f000 f83d 	bl	8002d78 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002d00:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002d04:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002d08:	8018      	strh	r0, [r3, #0]
    }
}
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002d0e:	490c      	ldr	r1, [pc, #48]	; (8002d40 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002d10:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002d14:	490b      	ldr	r1, [pc, #44]	; (8002d44 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8002d16:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8002d1a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8002d1e:	e7e6      	b.n	8002cee <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2400185c 	.word	0x2400185c
 8002d28:	24001860 	.word	0x24001860
 8002d2c:	24001864 	.word	0x24001864
 8002d30:	24001868 	.word	0x24001868
 8002d34:	2400b274 	.word	0x2400b274
 8002d38:	2400b27c 	.word	0x2400b27c
 8002d3c:	2400b278 	.word	0x2400b278
 8002d40:	900001ac 	.word	0x900001ac
 8002d44:	900001a8 	.word	0x900001a8
 8002d48:	900001b4 	.word	0x900001b4

08002d4c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002d4c:	2801      	cmp	r0, #1
 8002d4e:	d000      	beq.n	8002d52 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8002d50:	4770      	bx	lr
 8002d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d56:	4299      	cmp	r1, r3
 8002d58:	d1fa      	bne.n	8002d50 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8002d5a:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8002d5c:	f7ff feb4 	bl	8002ac8 <_Z23getFont_verdana_20_4bppv>
};
 8002d60:	4c04      	ldr	r4, [pc, #16]	; (8002d74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002d62:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002d64:	f7ff fefc 	bl	8002b60 <_Z23getFont_verdana_40_4bppv>
};
 8002d68:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002d6a:	f7ff fe61 	bl	8002a30 <_Z23getFont_verdana_10_4bppv>
};
 8002d6e:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop
 8002d74:	2400186c 	.word	0x2400186c

08002d78 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8002d78:	2000      	movs	r0, #0
 8002d7a:	4770      	bx	lr

08002d7c <_ZN17TypedTextDatabase8getFontsEv>:
}
 8002d7c:	4800      	ldr	r0, [pc, #0]	; (8002d80 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002d7e:	4770      	bx	lr
 8002d80:	2400186c 	.word	0x2400186c

08002d84 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8002d84:	b508      	push	{r3, lr}
 8002d86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7ff ffde 	bl	8002d4c <_Z41__static_initialization_and_destruction_0ii>
 8002d90:	bd08      	pop	{r3, pc}

08002d92 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8002d92:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8002d94:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002d98:	b113      	cbz	r3, 8002da0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4798      	blx	r3
        }
    }
 8002da0:	bd08      	pop	{r3, pc}

08002da2 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002da2:	2000      	movs	r0, #0
 8002da4:	4770      	bx	lr

08002da6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002da6:	8081      	strh	r1, [r0, #4]
    }
 8002da8:	4770      	bx	lr

08002daa <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002daa:	80c1      	strh	r1, [r0, #6]
    }
 8002dac:	4770      	bx	lr

08002dae <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002dae:	8101      	strh	r1, [r0, #8]
    }
 8002db0:	4770      	bx	lr

08002db2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002db2:	8141      	strh	r1, [r0, #10]
    }
 8002db4:	4770      	bx	lr

08002db6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002db6:	4770      	bx	lr

08002db8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002db8:	4770      	bx	lr

08002dba <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002dba:	4770      	bx	lr

08002dbc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002dbc:	4770      	bx	lr

08002dbe <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002dbe:	4770      	bx	lr

08002dc0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002dc0:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002dc2:	6804      	ldr	r4, [r0, #0]
 8002dc4:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8002dc6:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8002dca:	eba1 010c 	sub.w	r1, r1, ip
 8002dce:	88c3      	ldrh	r3, [r0, #6]
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	b212      	sxth	r2, r2
 8002dd4:	b209      	sxth	r1, r1
 8002dd6:	47a0      	blx	r4
    }
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dde:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002de0:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8002de2:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002de8:	6010      	str	r0, [r2, #0]
    }
 8002dea:	4770      	bx	lr

08002dec <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002dec:	4770      	bx	lr

08002dee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002dee:	4770      	bx	lr

08002df0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002df0:	4770      	bx	lr

08002df2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002df2:	4770      	bx	lr

08002df4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002df4:	4770      	bx	lr

08002df6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8002df6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002dfa:	b11a      	cbz	r2, 8002e04 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8002dfc:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002e00:	b102      	cbz	r2, 8002e04 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002e02:	6018      	str	r0, [r3, #0]
        }
    }
 8002e04:	4770      	bx	lr
	...

08002e08 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8002e0a:	6002      	str	r2, [r0, #0]
    {
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8002e0e:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 8002e12:	6042      	str	r2, [r0, #4]
    {
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8002e16:	6042      	str	r2, [r0, #4]
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	0801abfc 	.word	0x0801abfc
 8002e20:	0801b31c 	.word	0x0801b31c
 8002e24:	0801aec0 	.word	0x0801aec0
 8002e28:	0801b220 	.word	0x0801b220

08002e2c <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8002e2c:	b410      	push	{r4}
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <_ZN18mainScreenViewBaseD1Ev+0x30>)
 8002e30:	6002      	str	r2, [r0, #0]
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <_ZN18mainScreenViewBaseD1Ev+0x34>)
 8002e34:	66c2      	str	r2, [r0, #108]	; 0x6c
class Widget : public Drawable
 8002e36:	490b      	ldr	r1, [pc, #44]	; (8002e64 <_ZN18mainScreenViewBaseD1Ev+0x38>)
 8002e38:	66c1      	str	r1, [r0, #108]	; 0x6c
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <_ZN18mainScreenViewBaseD1Ev+0x3c>)
 8002e3c:	66c2      	str	r2, [r0, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8002e3e:	4c0b      	ldr	r4, [pc, #44]	; (8002e6c <_ZN18mainScreenViewBaseD1Ev+0x40>)
 8002e40:	6404      	str	r4, [r0, #64]	; 0x40
 8002e42:	6401      	str	r1, [r0, #64]	; 0x40
 8002e44:	6402      	str	r2, [r0, #64]	; 0x40
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <_ZN18mainScreenViewBaseD1Ev+0x44>)
 8002e48:	6001      	str	r1, [r0, #0]
 8002e4a:	490a      	ldr	r1, [pc, #40]	; (8002e74 <_ZN18mainScreenViewBaseD1Ev+0x48>)
 8002e4c:	6001      	str	r1, [r0, #0]
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <_ZN18mainScreenViewBaseD1Ev+0x4c>)
 8002e50:	6041      	str	r1, [r0, #4]
 8002e52:	6042      	str	r2, [r0, #4]
 8002e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	0801ac30 	.word	0x0801ac30
 8002e60:	0801b110 	.word	0x0801b110
 8002e64:	0801ab94 	.word	0x0801ab94
 8002e68:	0801b220 	.word	0x0801b220
 8002e6c:	0801b0a8 	.word	0x0801b0a8
 8002e70:	0801abfc 	.word	0x0801abfc
 8002e74:	0801b31c 	.word	0x0801b31c
 8002e78:	0801aec0 	.word	0x0801aec0

08002e7c <_ZN18mainScreenViewBase11setupScreenEv>:
}

void mainScreenViewBase::setupScreen()
{

}
 8002e7c:	4770      	bx	lr
	...

08002e80 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 8002e86:	6003      	str	r3, [r0, #0]
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8002e8a:	6003      	str	r3, [r0, #0]
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8002e8e:	6043      	str	r3, [r0, #4]
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 8002e92:	6043      	str	r3, [r0, #4]
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	f015 fd46 	bl	8018926 <_ZdlPvj>
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	0801abfc 	.word	0x0801abfc
 8002ea4:	0801b31c 	.word	0x0801b31c
 8002ea8:	0801aec0 	.word	0x0801aec0
 8002eac:	0801b220 	.word	0x0801b220

08002eb0 <_ZN18mainScreenViewBaseD0Ev>:
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <_ZN18mainScreenViewBaseD0Ev+0x34>)
 8002eb6:	6003      	str	r3, [r0, #0]
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <_ZN18mainScreenViewBaseD0Ev+0x38>)
 8002eba:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <_ZN18mainScreenViewBaseD0Ev+0x3c>)
 8002ebe:	66c2      	str	r2, [r0, #108]	; 0x6c
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <_ZN18mainScreenViewBaseD0Ev+0x40>)
 8002ec2:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <_ZN18mainScreenViewBaseD0Ev+0x44>)
 8002ec6:	6401      	str	r1, [r0, #64]	; 0x40
 8002ec8:	6402      	str	r2, [r0, #64]	; 0x40
 8002eca:	6403      	str	r3, [r0, #64]	; 0x40
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <_ZN18mainScreenViewBaseD0Ev+0x48>)
 8002ece:	6002      	str	r2, [r0, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <_ZN18mainScreenViewBaseD0Ev+0x4c>)
 8002ed2:	6002      	str	r2, [r0, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <_ZN18mainScreenViewBaseD0Ev+0x50>)
 8002ed6:	6042      	str	r2, [r0, #4]
 8002ed8:	6043      	str	r3, [r0, #4]
 8002eda:	2198      	movs	r1, #152	; 0x98
 8002edc:	f015 fd23 	bl	8018926 <_ZdlPvj>
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd10      	pop	{r4, pc}
 8002ee4:	0801ac30 	.word	0x0801ac30
 8002ee8:	0801b110 	.word	0x0801b110
 8002eec:	0801ab94 	.word	0x0801ab94
 8002ef0:	0801b220 	.word	0x0801b220
 8002ef4:	0801b0a8 	.word	0x0801b0a8
 8002ef8:	0801abfc 	.word	0x0801abfc
 8002efc:	0801b31c 	.word	0x0801b31c
 8002f00:	0801aec0 	.word	0x0801aec0

08002f04 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8002f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	4607      	mov	r7, r0
        : presenter(0)
 8002f0c:	f00c fa20 	bl	800f350 <_ZN8touchgfx6ScreenC1Ev>
 8002f10:	4b47      	ldr	r3, [pc, #284]	; (8003030 <_ZN18mainScreenViewBaseC1Ev+0x12c>)
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	2400      	movs	r4, #0
 8002f16:	63fc      	str	r4, [r7, #60]	; 0x3c
 8002f18:	463d      	mov	r5, r7
 8002f1a:	4b46      	ldr	r3, [pc, #280]	; (8003034 <_ZN18mainScreenViewBaseC1Ev+0x130>)
 8002f1c:	f845 3b40 	str.w	r3, [r5], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002f20:	f04f 0926 	mov.w	r9, #38	; 0x26
 8002f24:	464a      	mov	r2, r9
 8002f26:	4621      	mov	r1, r4
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f015 fec1 	bl	8018cb0 <memset>
          visible(true)
 8002f2e:	f8df b114 	ldr.w	fp, [pc, #276]	; 8003044 <_ZN18mainScreenViewBaseC1Ev+0x140>
 8002f32:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8002f36:	80ac      	strh	r4, [r5, #4]
 8002f38:	80ec      	strh	r4, [r5, #6]
 8002f3a:	812c      	strh	r4, [r5, #8]
 8002f3c:	816c      	strh	r4, [r5, #10]
 8002f3e:	81ac      	strh	r4, [r5, #12]
 8002f40:	81ec      	strh	r4, [r5, #14]
 8002f42:	822c      	strh	r4, [r5, #16]
 8002f44:	826c      	strh	r4, [r5, #18]
 8002f46:	616c      	str	r4, [r5, #20]
 8002f48:	61ac      	str	r4, [r5, #24]
 8002f4a:	61ec      	str	r4, [r5, #28]
 8002f4c:	842c      	strh	r4, [r5, #32]
 8002f4e:	846c      	strh	r4, [r5, #34]	; 0x22
 8002f50:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8002f54:	f04f 0a01 	mov.w	sl, #1
 8002f58:	f885 a025 	strb.w	sl, [r5, #37]	; 0x25
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <_ZN18mainScreenViewBaseC1Ev+0x138>)
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40
 8002f64:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8002f68:	f885 8026 	strb.w	r8, [r5, #38]	; 0x26
        : color(col)
 8002f6c:	62ac      	str	r4, [r5, #40]	; 0x28
 8002f6e:	f107 066c 	add.w	r6, r7, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f76:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002f7a:	464a      	mov	r2, r9
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f015 fe96 	bl	8018cb0 <memset>
 8002f84:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8002f88:	80b4      	strh	r4, [r6, #4]
 8002f8a:	80f4      	strh	r4, [r6, #6]
 8002f8c:	8134      	strh	r4, [r6, #8]
 8002f8e:	8174      	strh	r4, [r6, #10]
 8002f90:	81b4      	strh	r4, [r6, #12]
 8002f92:	81f4      	strh	r4, [r6, #14]
 8002f94:	8234      	strh	r4, [r6, #16]
 8002f96:	8274      	strh	r4, [r6, #18]
 8002f98:	6174      	str	r4, [r6, #20]
 8002f9a:	61b4      	str	r4, [r6, #24]
 8002f9c:	61f4      	str	r4, [r6, #28]
 8002f9e:	8434      	strh	r4, [r6, #32]
 8002fa0:	8474      	strh	r4, [r6, #34]	; 0x22
 8002fa2:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8002fa6:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <_ZN18mainScreenViewBaseC1Ev+0x134>)
 8002fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <_ZN18mainScreenViewBaseC1Ev+0x13c>)
 8002fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb2:	f8bd 3000 	ldrh.w	r3, [sp]
 8002fb6:	84f3      	strh	r3, [r6, #38]	; 0x26
 8002fb8:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8002fbc:	4669      	mov	r1, sp
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f009 fe6f 	bl	800cca2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4628      	mov	r0, r5
 8002fcc:	4798      	blx	r3
        setY(y);
 8002fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	4798      	blx	r3
        setWidth(width);
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	4798      	blx	r3
        setHeight(height);
 8002fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002fec:	4628      	mov	r0, r5
 8002fee:	4798      	blx	r3
        : color(col)
 8002ff0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002ff4:	66bb      	str	r3, [r7, #104]	; 0x68
        setX(x);
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	4798      	blx	r3
        setY(y);
 8003000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	4621      	mov	r1, r4
 8003006:	4630      	mov	r0, r6
 8003008:	4798      	blx	r3
 800300a:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 800300e:	a901      	add	r1, sp, #4
 8003010:	4630      	mov	r0, r6
 8003012:	f009 fe46 	bl	800cca2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003016:	1d3c      	adds	r4, r7, #4
 8003018:	4629      	mov	r1, r5
 800301a:	4620      	mov	r0, r4
 800301c:	f008 fc5c 	bl	800b8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003020:	4631      	mov	r1, r6
 8003022:	4620      	mov	r0, r4
 8003024:	f008 fc58 	bl	800b8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003028:	4638      	mov	r0, r7
 800302a:	b003      	add	sp, #12
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003030:	0801abfc 	.word	0x0801abfc
 8003034:	0801ac30 	.word	0x0801ac30
 8003038:	0801ab94 	.word	0x0801ab94
 800303c:	0801b0a8 	.word	0x0801b0a8
 8003040:	0801b110 	.word	0x0801b110
 8003044:	0801b220 	.word	0x0801b220

08003048 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003048:	b510      	push	{r4, lr}
 800304a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800304c:	f7ff fb3e 	bl	80026cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003052:	6023      	str	r3, [r4, #0]
{

}
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}
 8003058:	0801a2d4 	.word	0x0801a2d4

0800305c <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 800305c:	2200      	movs	r2, #0
 800305e:	6002      	str	r2, [r0, #0]
{

}
 8003060:	4770      	bx	lr

08003062 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003062:	4770      	bx	lr

08003064 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8003064:	4770      	bx	lr

08003066 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 8003066:	4770      	bx	lr

08003068 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 8003068:	4b01      	ldr	r3, [pc, #4]	; (8003070 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 800306a:	6003      	str	r3, [r0, #0]
    }
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	0801ac64 	.word	0x0801ac64

08003074 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <_ZN13ModelListenerD1Ev+0x8>)
 8003076:	6003      	str	r3, [r0, #0]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	0801ac7c 	.word	0x0801ac7c

08003080 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8003080:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8003082:	f102 0108 	add.w	r1, r2, #8
 8003086:	6001      	str	r1, [r0, #0]
 8003088:	3220      	adds	r2, #32
 800308a:	6042      	str	r2, [r0, #4]
 800308c:	4a03      	ldr	r2, [pc, #12]	; (800309c <_ZN19mainScreenPresenterD1Ev+0x1c>)
 800308e:	6042      	str	r2, [r0, #4]
    {
 8003090:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <_ZN19mainScreenPresenterD1Ev+0x20>)
 8003092:	6002      	str	r2, [r0, #0]
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	0801ac84 	.word	0x0801ac84
 800309c:	0801ac7c 	.word	0x0801ac7c
 80030a0:	0801ac64 	.word	0x0801ac64

080030a4 <_ZThn4_N19mainScreenPresenterD1Ev>:
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 80030a8:	f102 0108 	add.w	r1, r2, #8
 80030ac:	f840 1c04 	str.w	r1, [r0, #-4]
 80030b0:	3220      	adds	r2, #32
 80030b2:	f840 2904 	str.w	r2, [r0], #-4
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 80030b8:	6042      	str	r2, [r0, #4]
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 80030bc:	f843 2c04 	str.w	r2, [r3, #-4]
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	0801ac84 	.word	0x0801ac84
 80030c8:	0801ac7c 	.word	0x0801ac7c
 80030cc:	0801ac64 	.word	0x0801ac64

080030d0 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 80030d0:	4770      	bx	lr

080030d2 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 80030d2:	4770      	bx	lr

080030d4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80030d4:	b510      	push	{r4, lr}
 80030d6:	4604      	mov	r4, r0
    {
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80030da:	6003      	str	r3, [r0, #0]
    }
 80030dc:	2104      	movs	r1, #4
 80030de:	f015 fc22 	bl	8018926 <_ZdlPvj>
 80030e2:	4620      	mov	r0, r4
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	0801ac64 	.word	0x0801ac64

080030ec <_ZN13ModelListenerD0Ev>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <_ZN13ModelListenerD0Ev+0x14>)
 80030f2:	6003      	str	r3, [r0, #0]
 80030f4:	2108      	movs	r1, #8
 80030f6:	f015 fc16 	bl	8018926 <_ZdlPvj>
 80030fa:	4620      	mov	r0, r4
 80030fc:	bd10      	pop	{r4, pc}
 80030fe:	bf00      	nop
 8003100:	0801ac7c 	.word	0x0801ac7c

08003104 <_ZN19mainScreenPresenterD0Ev>:
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <_ZN19mainScreenPresenterD0Ev+0x24>)
 800310a:	f103 0208 	add.w	r2, r3, #8
 800310e:	6002      	str	r2, [r0, #0]
 8003110:	3320      	adds	r3, #32
 8003112:	6043      	str	r3, [r0, #4]
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <_ZN19mainScreenPresenterD0Ev+0x28>)
 8003116:	6043      	str	r3, [r0, #4]
    {
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 800311a:	6003      	str	r3, [r0, #0]
 800311c:	2110      	movs	r1, #16
 800311e:	f015 fc02 	bl	8018926 <_ZdlPvj>
 8003122:	4620      	mov	r0, r4
 8003124:	bd10      	pop	{r4, pc}
 8003126:	bf00      	nop
 8003128:	0801ac84 	.word	0x0801ac84
 800312c:	0801ac7c 	.word	0x0801ac7c
 8003130:	0801ac64 	.word	0x0801ac64

08003134 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8003134:	b510      	push	{r4, lr}
 8003136:	4604      	mov	r4, r0
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 800313a:	f103 0208 	add.w	r2, r3, #8
 800313e:	f840 2c04 	str.w	r2, [r0, #-4]
 8003142:	3320      	adds	r3, #32
 8003144:	f844 3904 	str.w	r3, [r4], #-4
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 800314e:	f840 3c04 	str.w	r3, [r0, #-4]
 8003152:	2110      	movs	r1, #16
 8003154:	4620      	mov	r0, r4
 8003156:	f015 fbe6 	bl	8018926 <_ZdlPvj>
 800315a:	4620      	mov	r0, r4
 800315c:	bd10      	pop	{r4, pc}
 800315e:	bf00      	nop
 8003160:	0801ac84 	.word	0x0801ac84
 8003164:	0801ac7c 	.word	0x0801ac7c
 8003168:	0801ac64 	.word	0x0801ac64

0800316c <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 800316c:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8003170:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8003174:	6042      	str	r2, [r0, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	6082      	str	r2, [r0, #8]
    : view(v)
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 800317c:	f102 0408 	add.w	r4, r2, #8
 8003180:	6004      	str	r4, [r0, #0]
 8003182:	3220      	adds	r2, #32
 8003184:	6042      	str	r2, [r0, #4]
 8003186:	60c1      	str	r1, [r0, #12]
}
 8003188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	0801ac64 	.word	0x0801ac64
 8003194:	0801ac7c 	.word	0x0801ac7c
 8003198:	0801ac84 	.word	0x0801ac84

0800319c <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 800319c:	b410      	push	{r4}
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <_ZN14mainScreenViewD1Ev+0x34>)
 80031a0:	6002      	str	r2, [r0, #0]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <_ZN14mainScreenViewD1Ev+0x38>)
 80031a4:	6002      	str	r2, [r0, #0]
class Image : public Widget
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <_ZN14mainScreenViewD1Ev+0x3c>)
 80031a8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80031aa:	490c      	ldr	r1, [pc, #48]	; (80031dc <_ZN14mainScreenViewD1Ev+0x40>)
 80031ac:	66c1      	str	r1, [r0, #108]	; 0x6c
    {
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <_ZN14mainScreenViewD1Ev+0x44>)
 80031b0:	66c2      	str	r2, [r0, #108]	; 0x6c
class Box : public Widget
 80031b2:	4c0c      	ldr	r4, [pc, #48]	; (80031e4 <_ZN14mainScreenViewD1Ev+0x48>)
 80031b4:	6404      	str	r4, [r0, #64]	; 0x40
 80031b6:	6401      	str	r1, [r0, #64]	; 0x40
 80031b8:	6402      	str	r2, [r0, #64]	; 0x40
class View : public Screen
 80031ba:	490b      	ldr	r1, [pc, #44]	; (80031e8 <_ZN14mainScreenViewD1Ev+0x4c>)
 80031bc:	6001      	str	r1, [r0, #0]
    {
 80031be:	490b      	ldr	r1, [pc, #44]	; (80031ec <_ZN14mainScreenViewD1Ev+0x50>)
 80031c0:	6001      	str	r1, [r0, #0]
 80031c2:	490b      	ldr	r1, [pc, #44]	; (80031f0 <_ZN14mainScreenViewD1Ev+0x54>)
 80031c4:	6041      	str	r1, [r0, #4]
 80031c6:	6042      	str	r2, [r0, #4]
 80031c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	0801acb4 	.word	0x0801acb4
 80031d4:	0801ac30 	.word	0x0801ac30
 80031d8:	0801b110 	.word	0x0801b110
 80031dc:	0801ab94 	.word	0x0801ab94
 80031e0:	0801b220 	.word	0x0801b220
 80031e4:	0801b0a8 	.word	0x0801b0a8
 80031e8:	0801abfc 	.word	0x0801abfc
 80031ec:	0801b31c 	.word	0x0801b31c
 80031f0:	0801aec0 	.word	0x0801aec0

080031f4 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80031f4:	4770      	bx	lr

080031f6 <_ZN14mainScreenView11setupScreenEv>:
{
 80031f6:	b508      	push	{r3, lr}
    mainScreenViewBase::setupScreen();
 80031f8:	f7ff fe40 	bl	8002e7c <_ZN18mainScreenViewBase11setupScreenEv>
}
 80031fc:	bd08      	pop	{r3, pc}
	...

08003200 <_ZN14mainScreenViewD0Ev>:
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <_ZN14mainScreenViewD0Ev+0x38>)
 8003206:	6003      	str	r3, [r0, #0]
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <_ZN14mainScreenViewD0Ev+0x3c>)
 800320a:	6003      	str	r3, [r0, #0]
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <_ZN14mainScreenViewD0Ev+0x40>)
 800320e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <_ZN14mainScreenViewD0Ev+0x44>)
 8003212:	66c2      	str	r2, [r0, #108]	; 0x6c
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <_ZN14mainScreenViewD0Ev+0x48>)
 8003216:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <_ZN14mainScreenViewD0Ev+0x4c>)
 800321a:	6401      	str	r1, [r0, #64]	; 0x40
 800321c:	6402      	str	r2, [r0, #64]	; 0x40
 800321e:	6403      	str	r3, [r0, #64]	; 0x40
 8003220:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <_ZN14mainScreenViewD0Ev+0x50>)
 8003222:	6002      	str	r2, [r0, #0]
 8003224:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <_ZN14mainScreenViewD0Ev+0x54>)
 8003226:	6002      	str	r2, [r0, #0]
 8003228:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <_ZN14mainScreenViewD0Ev+0x58>)
 800322a:	6042      	str	r2, [r0, #4]
 800322c:	6043      	str	r3, [r0, #4]
 800322e:	2198      	movs	r1, #152	; 0x98
 8003230:	f015 fb79 	bl	8018926 <_ZdlPvj>
 8003234:	4620      	mov	r0, r4
 8003236:	bd10      	pop	{r4, pc}
 8003238:	0801acb4 	.word	0x0801acb4
 800323c:	0801ac30 	.word	0x0801ac30
 8003240:	0801b110 	.word	0x0801b110
 8003244:	0801ab94 	.word	0x0801ab94
 8003248:	0801b220 	.word	0x0801b220
 800324c:	0801b0a8 	.word	0x0801b0a8
 8003250:	0801abfc 	.word	0x0801abfc
 8003254:	0801b31c 	.word	0x0801b31c
 8003258:	0801aec0 	.word	0x0801aec0

0800325c <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 800325c:	b510      	push	{r4, lr}
 800325e:	4604      	mov	r4, r0
 8003260:	f7ff fe50 	bl	8002f04 <_ZN18mainScreenViewBaseC1Ev>
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <_ZN14mainScreenViewC1Ev+0x10>)
 8003266:	6023      	str	r3, [r4, #0]
}
 8003268:	4620      	mov	r0, r4
 800326a:	bd10      	pop	{r4, pc}
 800326c:	0801acb4 	.word	0x0801acb4

08003270 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8003274:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8003276:	2305      	movs	r3, #5
 8003278:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800327a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800327e:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8003280:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003284:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8003286:	2000      	movs	r0, #0
 8003288:	4770      	bx	lr

0800328a <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 800328a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8003292:	2000      	movs	r0, #0
 8003294:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800329c:	e7f9      	b.n	8003292 <FT5336_DeInit+0x8>

0800329e <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800329e:	2000      	movs	r0, #0
 80032a0:	4770      	bx	lr

080032a2 <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 80032a2:	2000      	movs	r0, #0
 80032a4:	4770      	bx	lr

080032a6 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80032a6:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80032a8:	6904      	ldr	r4, [r0, #16]
 80032aa:	8900      	ldrh	r0, [r0, #8]
 80032ac:	47a0      	blx	r4
}
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80032b0:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80032b2:	68c4      	ldr	r4, [r0, #12]
 80032b4:	8900      	ldrh	r0, [r0, #8]
 80032b6:	47a0      	blx	r4
}
 80032b8:	bd10      	pop	{r4, pc}

080032ba <FT5336_GestureConfig>:
{
 80032ba:	b570      	push	{r4, r5, r6, lr}
 80032bc:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80032be:	f100 0518 	add.w	r5, r0, #24
 80032c2:	7809      	ldrb	r1, [r1, #0]
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f91d 	bl	8003504 <ft5336_radian_value>
 80032ca:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80032cc:	7931      	ldrb	r1, [r6, #4]
 80032ce:	4628      	mov	r0, r5
 80032d0:	f000 f925 	bl	800351e <ft5336_offset_left_right>
 80032d4:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80032d6:	7a31      	ldrb	r1, [r6, #8]
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 f92d 	bl	8003538 <ft5336_offset_up_down>
 80032de:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80032e0:	7b31      	ldrb	r1, [r6, #12]
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 f935 	bl	8003552 <ft5336_disatnce_left_right>
 80032e8:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80032ea:	7c31      	ldrb	r1, [r6, #16]
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 f93d 	bl	800356c <ft5336_distance_up_down>
 80032f2:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80032f4:	7d31      	ldrb	r1, [r6, #20]
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f945 	bl	8003586 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 80032fc:	1820      	adds	r0, r4, r0
 80032fe:	d100      	bne.n	8003302 <FT5336_GestureConfig+0x48>
}
 8003300:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003302:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003306:	e7fb      	b.n	8003300 <FT5336_GestureConfig+0x46>

08003308 <FT5336_ReadID>:
{
 8003308:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800330a:	3018      	adds	r0, #24
 800330c:	f000 f955 	bl	80035ba <ft5336_chip_id>
}
 8003310:	bd08      	pop	{r3, pc}

08003312 <FT5336_DetectTouch>:
{
 8003312:	b500      	push	{lr}
 8003314:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003316:	f10d 0107 	add.w	r1, sp, #7
 800331a:	3018      	adds	r0, #24
 800331c:	f000 f8e5 	bl	80034ea <ft5336_td_status>
 8003320:	b938      	cbnz	r0, 8003332 <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003322:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003326:	2b05      	cmp	r3, #5
 8003328:	d800      	bhi.n	800332c <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 800332a:	4618      	mov	r0, r3
}
 800332c:	b003      	add	sp, #12
 800332e:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003336:	e7f9      	b.n	800332c <FT5336_DetectTouch+0x1a>

08003338 <FT5336_GetState>:
{
 8003338:	b530      	push	{r4, r5, lr}
 800333a:	b083      	sub	sp, #12
 800333c:	4605      	mov	r5, r0
 800333e:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003340:	f7ff ffe7 	bl	8003312 <FT5336_DetectTouch>
 8003344:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003346:	2304      	movs	r3, #4
 8003348:	eb0d 0203 	add.w	r2, sp, r3
 800334c:	2103      	movs	r1, #3
 800334e:	f105 0018 	add.w	r0, r5, #24
 8003352:	f000 f8b9 	bl	80034c8 <ft5336_read_reg>
 8003356:	b998      	cbnz	r0, 8003380 <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003358:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003362:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003366:	4313      	orrs	r3, r2
 8003368:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800336a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003374:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003378:	4313      	orrs	r3, r2
 800337a:	60a3      	str	r3, [r4, #8]
}
 800337c:	b003      	add	sp, #12
 800337e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003384:	e7fa      	b.n	800337c <FT5336_GetState+0x44>

08003386 <FT5336_GetMultiTouchState>:
{
 8003386:	b530      	push	{r4, r5, lr}
 8003388:	b089      	sub	sp, #36	; 0x24
 800338a:	4604      	mov	r4, r0
 800338c:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800338e:	f7ff ffc0 	bl	8003312 <FT5336_DetectTouch>
 8003392:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003394:	231e      	movs	r3, #30
 8003396:	466a      	mov	r2, sp
 8003398:	2103      	movs	r1, #3
 800339a:	f104 0018 	add.w	r0, r4, #24
 800339e:	f000 f893 	bl	80034c8 <ft5336_read_reg>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d146      	bne.n	8003434 <FT5336_GetMultiTouchState+0xae>
 80033a6:	4603      	mov	r3, r0
 80033a8:	e040      	b.n	800342c <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80033aa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80033ae:	004a      	lsls	r2, r1, #1
 80033b0:	ac08      	add	r4, sp, #32
 80033b2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80033b6:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80033ba:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80033be:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80033c2:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80033c6:	446c      	add	r4, sp
 80033c8:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 80033cc:	4321      	orrs	r1, r4
 80033ce:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80033d2:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80033d4:	f102 0122 	add.w	r1, r2, #34	; 0x22
 80033d8:	4469      	add	r1, sp
 80033da:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80033de:	0224      	lsls	r4, r4, #8
 80033e0:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80033e4:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80033e8:	4469      	add	r1, sp
 80033ea:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80033ee:	430c      	orrs	r4, r1
 80033f0:	1d99      	adds	r1, r3, #6
 80033f2:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80033f6:	ea4f 119c 	mov.w	r1, ip, lsr #6
 80033fa:	f103 0410 	add.w	r4, r3, #16
 80033fe:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8003402:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8003406:	4469      	add	r1, sp
 8003408:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 800340c:	f103 010a 	add.w	r1, r3, #10
 8003410:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003414:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003416:	3225      	adds	r2, #37	; 0x25
 8003418:	446a      	add	r2, sp
 800341a:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800341e:	0909      	lsrs	r1, r1, #4
 8003420:	f103 0214 	add.w	r2, r3, #20
 8003424:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003428:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800342a:	3301      	adds	r3, #1
 800342c:	2b04      	cmp	r3, #4
 800342e:	d9bc      	bls.n	80033aa <FT5336_GetMultiTouchState+0x24>
}
 8003430:	b009      	add	sp, #36	; 0x24
 8003432:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003438:	e7fa      	b.n	8003430 <FT5336_GetMultiTouchState+0xaa>

0800343a <FT5336_GetGesture>:
{
 800343a:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800343c:	3018      	adds	r0, #24
 800343e:	f000 f84d 	bl	80034dc <ft5336_gest_id>
}
 8003442:	bd08      	pop	{r3, pc}

08003444 <FT5336_EnableIT>:
{
 8003444:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8003446:	2101      	movs	r1, #1
 8003448:	3018      	adds	r0, #24
 800344a:	f000 f8a9 	bl	80035a0 <ft5336_g_mode>
}
 800344e:	bd08      	pop	{r3, pc}

08003450 <FT5336_DisableIT>:
{
 8003450:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8003452:	2100      	movs	r1, #0
 8003454:	3018      	adds	r0, #24
 8003456:	f000 f8a3 	bl	80035a0 <ft5336_g_mode>
}
 800345a:	bd08      	pop	{r3, pc}

0800345c <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 800345c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003460:	b95b      	cbnz	r3, 800347a <FT5336_Init+0x1e>
{
 8003462:	b510      	push	{r4, lr}
 8003464:	4604      	mov	r4, r0
    pObj->IO.Init();
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fff0 	bl	8003450 <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8003470:	2201      	movs	r2, #1
 8003472:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8003476:	b910      	cbnz	r0, 800347e <FT5336_Init+0x22>
}
 8003478:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 800347a:	2000      	movs	r0, #0
}
 800347c:	4770      	bx	lr
    ret = FT5336_ERROR;
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003482:	e7f9      	b.n	8003478 <FT5336_Init+0x1c>

08003484 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003484:	b1a8      	cbz	r0, 80034b2 <FT5336_RegisterBusIO+0x2e>
{
 8003486:	b508      	push	{r3, lr}
 8003488:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 800348a:	680a      	ldr	r2, [r1, #0]
 800348c:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800348e:	6848      	ldr	r0, [r1, #4]
 8003490:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003492:	8908      	ldrh	r0, [r1, #8]
 8003494:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003496:	68c8      	ldr	r0, [r1, #12]
 8003498:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800349a:	6908      	ldr	r0, [r1, #16]
 800349c:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800349e:	6949      	ldr	r1, [r1, #20]
 80034a0:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80034a2:	4907      	ldr	r1, [pc, #28]	; (80034c0 <FT5336_RegisterBusIO+0x3c>)
 80034a4:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80034a6:	4907      	ldr	r1, [pc, #28]	; (80034c4 <FT5336_RegisterBusIO+0x40>)
 80034a8:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80034aa:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 80034ac:	b122      	cbz	r2, 80034b8 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 80034ae:	4790      	blx	r2
}
 80034b0:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034b6:	4770      	bx	lr
      ret = FT5336_ERROR;
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80034bc:	e7f8      	b.n	80034b0 <FT5336_RegisterBusIO+0x2c>
 80034be:	bf00      	nop
 80034c0:	080032a7 	.word	0x080032a7
 80034c4:	080032b1 	.word	0x080032b1

080034c8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80034c8:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80034ca:	6844      	ldr	r4, [r0, #4]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	47a0      	blx	r4
}
 80034d0:	bd10      	pop	{r4, pc}

080034d2 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80034d2:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80034d4:	6804      	ldr	r4, [r0, #0]
 80034d6:	6880      	ldr	r0, [r0, #8]
 80034d8:	47a0      	blx	r4
}
 80034da:	bd10      	pop	{r4, pc}

080034dc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80034dc:	b508      	push	{r3, lr}
 80034de:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80034e0:	2301      	movs	r3, #1
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7ff fff0 	bl	80034c8 <ft5336_read_reg>
}
 80034e8:	bd08      	pop	{r3, pc}

080034ea <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80034ea:	b510      	push	{r4, lr}
 80034ec:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80034ee:	2301      	movs	r3, #1
 80034f0:	460a      	mov	r2, r1
 80034f2:	2102      	movs	r1, #2
 80034f4:	f7ff ffe8 	bl	80034c8 <ft5336_read_reg>
  
  if(ret == 0)
 80034f8:	b918      	cbnz	r0, 8003502 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80034fa:	7823      	ldrb	r3, [r4, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8003502:	bd10      	pop	{r4, pc}

08003504 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8003504:	b500      	push	{lr}
 8003506:	b083      	sub	sp, #12
 8003508:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800350c:	2301      	movs	r3, #1
 800350e:	f10d 0207 	add.w	r2, sp, #7
 8003512:	2191      	movs	r1, #145	; 0x91
 8003514:	f7ff ffdd 	bl	80034d2 <ft5336_write_reg>
}
 8003518:	b003      	add	sp, #12
 800351a:	f85d fb04 	ldr.w	pc, [sp], #4

0800351e <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800351e:	b500      	push	{lr}
 8003520:	b083      	sub	sp, #12
 8003522:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003526:	2301      	movs	r3, #1
 8003528:	f10d 0207 	add.w	r2, sp, #7
 800352c:	2192      	movs	r1, #146	; 0x92
 800352e:	f7ff ffd0 	bl	80034d2 <ft5336_write_reg>
}
 8003532:	b003      	add	sp, #12
 8003534:	f85d fb04 	ldr.w	pc, [sp], #4

08003538 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003538:	b500      	push	{lr}
 800353a:	b083      	sub	sp, #12
 800353c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003540:	2301      	movs	r3, #1
 8003542:	f10d 0207 	add.w	r2, sp, #7
 8003546:	2193      	movs	r1, #147	; 0x93
 8003548:	f7ff ffc3 	bl	80034d2 <ft5336_write_reg>
}
 800354c:	b003      	add	sp, #12
 800354e:	f85d fb04 	ldr.w	pc, [sp], #4

08003552 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003552:	b500      	push	{lr}
 8003554:	b083      	sub	sp, #12
 8003556:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800355a:	2301      	movs	r3, #1
 800355c:	f10d 0207 	add.w	r2, sp, #7
 8003560:	2194      	movs	r1, #148	; 0x94
 8003562:	f7ff ffb6 	bl	80034d2 <ft5336_write_reg>
}
 8003566:	b003      	add	sp, #12
 8003568:	f85d fb04 	ldr.w	pc, [sp], #4

0800356c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800356c:	b500      	push	{lr}
 800356e:	b083      	sub	sp, #12
 8003570:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003574:	2301      	movs	r3, #1
 8003576:	f10d 0207 	add.w	r2, sp, #7
 800357a:	2195      	movs	r1, #149	; 0x95
 800357c:	f7ff ffa9 	bl	80034d2 <ft5336_write_reg>
}
 8003580:	b003      	add	sp, #12
 8003582:	f85d fb04 	ldr.w	pc, [sp], #4

08003586 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003586:	b500      	push	{lr}
 8003588:	b083      	sub	sp, #12
 800358a:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800358e:	2301      	movs	r3, #1
 8003590:	f10d 0207 	add.w	r2, sp, #7
 8003594:	2196      	movs	r1, #150	; 0x96
 8003596:	f7ff ff9c 	bl	80034d2 <ft5336_write_reg>
}
 800359a:	b003      	add	sp, #12
 800359c:	f85d fb04 	ldr.w	pc, [sp], #4

080035a0 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80035a0:	b500      	push	{lr}
 80035a2:	b083      	sub	sp, #12
 80035a4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80035a8:	2301      	movs	r3, #1
 80035aa:	f10d 0207 	add.w	r2, sp, #7
 80035ae:	21a4      	movs	r1, #164	; 0xa4
 80035b0:	f7ff ff8f 	bl	80034d2 <ft5336_write_reg>
}
 80035b4:	b003      	add	sp, #12
 80035b6:	f85d fb04 	ldr.w	pc, [sp], #4

080035ba <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80035ba:	b508      	push	{r3, lr}
 80035bc:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80035be:	2301      	movs	r3, #1
 80035c0:	21a8      	movs	r1, #168	; 0xa8
 80035c2:	f7ff ff81 	bl	80034c8 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 80035c6:	bd08      	pop	{r3, pc}

080035c8 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 80035c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035cc:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80035ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d2:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80035da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035de:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80035e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035e4:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80035e6:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80035e8:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 80035ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ee:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80035f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035f4:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 80035f6:	2000      	movs	r0, #0
 80035f8:	4770      	bx	lr

080035fa <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80035fa:	b570      	push	{r4, r5, r6, lr}
 80035fc:	b09a      	sub	sp, #104	; 0x68
 80035fe:	4606      	mov	r6, r0
 8003600:	460c      	mov	r4, r1
 8003602:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003604:	2250      	movs	r2, #80	; 0x50
 8003606:	2100      	movs	r1, #0
 8003608:	a806      	add	r0, sp, #24
 800360a:	f015 fb51 	bl	8018cb0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800360e:	2300      	movs	r3, #0
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	9302      	str	r3, [sp, #8]
 8003614:	9303      	str	r3, [sp, #12]
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800361a:	429c      	cmp	r4, r3
 800361c:	bf08      	it	eq
 800361e:	2d01      	cmpeq	r5, #1
 8003620:	d061      	beq.n	80036e6 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003622:	2c00      	cmp	r4, #0
 8003624:	d143      	bne.n	80036ae <MX25LM51245G_AutoPollingMemReady+0xb4>
 8003626:	2301      	movs	r3, #1
 8003628:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800362a:	2d01      	cmp	r5, #1
 800362c:	d041      	beq.n	80036b2 <MX25LM51245G_AutoPollingMemReady+0xb8>
 800362e:	2300      	movs	r3, #0
 8003630:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003632:	2c00      	cmp	r4, #0
 8003634:	d13f      	bne.n	80036b6 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8003636:	2300      	movs	r3, #0
 8003638:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800363a:	2c00      	cmp	r4, #0
 800363c:	d13d      	bne.n	80036ba <MX25LM51245G_AutoPollingMemReady+0xc0>
 800363e:	2305      	movs	r3, #5
 8003640:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003642:	2c00      	cmp	r4, #0
 8003644:	d13c      	bne.n	80036c0 <MX25LM51245G_AutoPollingMemReady+0xc6>
 8003646:	2300      	movs	r3, #0
 8003648:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800364a:	2d01      	cmp	r5, #1
 800364c:	d03b      	beq.n	80036c6 <MX25LM51245G_AutoPollingMemReady+0xcc>
 800364e:	2300      	movs	r3, #0
 8003650:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003652:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003656:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003658:	2c00      	cmp	r4, #0
 800365a:	d137      	bne.n	80036cc <MX25LM51245G_AutoPollingMemReady+0xd2>
 800365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003660:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003662:	2d01      	cmp	r5, #1
 8003664:	d035      	beq.n	80036d2 <MX25LM51245G_AutoPollingMemReady+0xd8>
 8003666:	2300      	movs	r3, #0
 8003668:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800366a:	bbac      	cbnz	r4, 80036d8 <MX25LM51245G_AutoPollingMemReady+0xde>
 800366c:	2300      	movs	r3, #0
 800366e:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003670:	2d01      	cmp	r5, #1
 8003672:	d033      	beq.n	80036dc <MX25LM51245G_AutoPollingMemReady+0xe2>
 8003674:	2301      	movs	r3, #1
 8003676:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003678:	2d01      	cmp	r5, #1
 800367a:	d031      	beq.n	80036e0 <MX25LM51245G_AutoPollingMemReady+0xe6>
 800367c:	2300      	movs	r3, #0
 800367e:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8003680:	2301      	movs	r3, #1
 8003682:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003684:	2310      	movs	r3, #16
 8003686:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800368c:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	a906      	add	r1, sp, #24
 8003694:	4630      	mov	r0, r6
 8003696:	f003 f8d7 	bl	8006848 <HAL_OSPI_Command>
 800369a:	bb38      	cbnz	r0, 80036ec <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	a901      	add	r1, sp, #4
 80036a2:	4630      	mov	r0, r6
 80036a4:	f003 f9e1 	bl	8006a6a <HAL_OSPI_AutoPolling>
 80036a8:	bb18      	cbnz	r0, 80036f2 <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80036aa:	b01a      	add	sp, #104	; 0x68
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036ae:	2304      	movs	r3, #4
 80036b0:	e7ba      	b.n	8003628 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036b2:	2308      	movs	r3, #8
 80036b4:	e7bc      	b.n	8003630 <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80036b6:	2310      	movs	r3, #16
 80036b8:	e7be      	b.n	8003638 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80036ba:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80036be:	e7bf      	b.n	8003640 <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80036c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c4:	e7c0      	b.n	8003648 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80036c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036ca:	e7c1      	b.n	8003650 <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80036cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036d0:	e7c6      	b.n	8003660 <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80036d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036d6:	e7c7      	b.n	8003668 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80036d8:	2305      	movs	r3, #5
 80036da:	e7c8      	b.n	800366e <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80036dc:	2302      	movs	r3, #2
 80036de:	e7ca      	b.n	8003676 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80036e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80036e4:	e7cb      	b.n	800367e <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 80036e6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ea:	e7de      	b.n	80036aa <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	e7db      	b.n	80036aa <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	e7d8      	b.n	80036aa <MX25LM51245G_AutoPollingMemReady+0xb0>

080036f8 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	b096      	sub	sp, #88	; 0x58
 80036fc:	4606      	mov	r6, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8003702:	2250      	movs	r2, #80	; 0x50
 8003704:	2100      	movs	r1, #0
 8003706:	a802      	add	r0, sp, #8
 8003708:	f015 fad2 	bl	8018cb0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8003712:	2c01      	cmp	r4, #1
 8003714:	bf08      	it	eq
 8003716:	429d      	cmpeq	r5, r3
 8003718:	d04e      	beq.n	80037b8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800371a:	2301      	movs	r3, #1
 800371c:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800371e:	b104      	cbz	r4, 8003722 <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8003720:	2304      	movs	r3, #4
 8003722:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003724:	b92c      	cbnz	r4, 8003732 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8003726:	2300      	movs	r3, #0
 8003728:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800372a:	b924      	cbnz	r4, 8003736 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 800372c:	bb15      	cbnz	r5, 8003774 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 800372e:	230b      	movs	r3, #11
 8003730:	e003      	b.n	800373a <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003732:	2310      	movs	r3, #16
 8003734:	e7f8      	b.n	8003728 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003736:	f64e 4313 	movw	r3, #60435	; 0xec13
 800373a:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800373c:	b9e4      	cbnz	r4, 8003778 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003742:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003744:	b9dd      	cbnz	r5, 800377e <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8003746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800374a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800374c:	b9d4      	cbnz	r4, 8003784 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800374e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003752:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003754:	b9cc      	cbnz	r4, 800378a <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8003756:	2308      	movs	r3, #8
 8003758:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	a902      	add	r1, sp, #8
 8003760:	4630      	mov	r0, r6
 8003762:	f003 f871 	bl	8006848 <HAL_OSPI_Command>
 8003766:	bb50      	cbnz	r0, 80037be <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003768:	2302      	movs	r3, #2
 800376a:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800376c:	b97c      	cbnz	r4, 800378e <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 800376e:	b185      	cbz	r5, 8003792 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8003770:	2312      	movs	r3, #18
 8003772:	e00e      	b.n	8003792 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003774:	230c      	movs	r3, #12
 8003776:	e7e0      	b.n	800373a <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377c:	e7e1      	b.n	8003742 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800377e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003782:	e7e2      	b.n	800374a <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003784:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003788:	e7e3      	b.n	8003752 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800378a:	2306      	movs	r3, #6
 800378c:	e7e4      	b.n	8003758 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800378e:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003792:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	a902      	add	r1, sp, #8
 800379e:	4630      	mov	r0, r6
 80037a0:	f003 f852 	bl	8006848 <HAL_OSPI_Command>
 80037a4:	b970      	cbnz	r0, 80037c4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80037aa:	4669      	mov	r1, sp
 80037ac:	4630      	mov	r0, r6
 80037ae:	f003 f9b9 	bl	8006b24 <HAL_OSPI_MemoryMapped>
 80037b2:	b950      	cbnz	r0, 80037ca <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80037b4:	b016      	add	sp, #88	; 0x58
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	e7fa      	b.n	80037b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	e7f7      	b.n	80037b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	e7f4      	b.n	80037b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	e7f1      	b.n	80037b4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

080037d0 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80037d0:	b510      	push	{r4, lr}
 80037d2:	b096      	sub	sp, #88	; 0x58
 80037d4:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80037d6:	2250      	movs	r2, #80	; 0x50
 80037d8:	2100      	movs	r1, #0
 80037da:	a802      	add	r0, sp, #8
 80037dc:	f015 fa68 	bl	8018cb0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80037e0:	2300      	movs	r3, #0
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80037e6:	2301      	movs	r3, #1
 80037e8:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80037ea:	2304      	movs	r3, #4
 80037ec:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80037ee:	2308      	movs	r3, #8
 80037f0:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80037f2:	2310      	movs	r3, #16
 80037f4:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80037f6:	f64e 6311 	movw	r3, #60945	; 0xee11
 80037fa:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80037fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003800:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8003802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003806:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003808:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800380c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800380e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003812:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8003814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003818:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800381a:	2306      	movs	r3, #6
 800381c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800381e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003822:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	a902      	add	r1, sp, #8
 800382a:	4620      	mov	r0, r4
 800382c:	f003 f80c 	bl	8006848 <HAL_OSPI_Command>
 8003830:	b9b8      	cbnz	r0, 8003862 <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003832:	2302      	movs	r3, #2
 8003834:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003836:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800383a:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003840:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	a902      	add	r1, sp, #8
 8003848:	4620      	mov	r0, r4
 800384a:	f002 fffd 	bl	8006848 <HAL_OSPI_Command>
 800384e:	b958      	cbnz	r0, 8003868 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003854:	4669      	mov	r1, sp
 8003856:	4620      	mov	r0, r4
 8003858:	f003 f964 	bl	8006b24 <HAL_OSPI_MemoryMapped>
 800385c:	b938      	cbnz	r0, 800386e <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800385e:	b016      	add	sp, #88	; 0x58
 8003860:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8003862:	f04f 30ff 	mov.w	r0, #4294967295
 8003866:	e7fa      	b.n	800385e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	e7f7      	b.n	800385e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	e7f4      	b.n	800385e <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08003874 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	b09a      	sub	sp, #104	; 0x68
 8003878:	4606      	mov	r6, r0
 800387a:	460c      	mov	r4, r1
 800387c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800387e:	2250      	movs	r2, #80	; 0x50
 8003880:	2100      	movs	r1, #0
 8003882:	a806      	add	r0, sp, #24
 8003884:	f015 fa14 	bl	8018cb0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003888:	2300      	movs	r3, #0
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	9303      	str	r3, [sp, #12]
 8003890:	9304      	str	r3, [sp, #16]
 8003892:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003894:	429c      	cmp	r4, r3
 8003896:	bf08      	it	eq
 8003898:	2d01      	cmpeq	r5, #1
 800389a:	d076      	beq.n	800398a <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800389c:	2c00      	cmp	r4, #0
 800389e:	d155      	bne.n	800394c <MX25LM51245G_WriteEnable+0xd8>
 80038a0:	2301      	movs	r3, #1
 80038a2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80038a4:	2d01      	cmp	r5, #1
 80038a6:	d053      	beq.n	8003950 <MX25LM51245G_WriteEnable+0xdc>
 80038a8:	2300      	movs	r3, #0
 80038aa:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80038ac:	2c00      	cmp	r4, #0
 80038ae:	d151      	bne.n	8003954 <MX25LM51245G_WriteEnable+0xe0>
 80038b0:	2300      	movs	r3, #0
 80038b2:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	d14f      	bne.n	8003958 <MX25LM51245G_WriteEnable+0xe4>
 80038b8:	2306      	movs	r3, #6
 80038ba:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	a906      	add	r1, sp, #24
 80038c2:	4630      	mov	r0, r6
 80038c4:	f002 ffc0 	bl	8006848 <HAL_OSPI_Command>
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d161      	bne.n	8003990 <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80038cc:	2c00      	cmp	r4, #0
 80038ce:	d146      	bne.n	800395e <MX25LM51245G_WriteEnable+0xea>
 80038d0:	2305      	movs	r3, #5
 80038d2:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80038d4:	2c00      	cmp	r4, #0
 80038d6:	d145      	bne.n	8003964 <MX25LM51245G_WriteEnable+0xf0>
 80038d8:	2300      	movs	r3, #0
 80038da:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80038dc:	2d01      	cmp	r5, #1
 80038de:	d044      	beq.n	800396a <MX25LM51245G_WriteEnable+0xf6>
 80038e0:	2300      	movs	r3, #0
 80038e2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80038e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038e8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80038ee:	2c00      	cmp	r4, #0
 80038f0:	d13e      	bne.n	8003970 <MX25LM51245G_WriteEnable+0xfc>
 80038f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f6:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80038f8:	2d01      	cmp	r5, #1
 80038fa:	d03c      	beq.n	8003976 <MX25LM51245G_WriteEnable+0x102>
 80038fc:	2300      	movs	r3, #0
 80038fe:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003900:	2c00      	cmp	r4, #0
 8003902:	d13b      	bne.n	800397c <MX25LM51245G_WriteEnable+0x108>
 8003904:	2300      	movs	r3, #0
 8003906:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003908:	2d01      	cmp	r5, #1
 800390a:	d039      	beq.n	8003980 <MX25LM51245G_WriteEnable+0x10c>
 800390c:	2301      	movs	r3, #1
 800390e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003910:	2d01      	cmp	r5, #1
 8003912:	d037      	beq.n	8003984 <MX25LM51245G_WriteEnable+0x110>
 8003914:	2300      	movs	r3, #0
 8003916:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	a906      	add	r1, sp, #24
 800391e:	4630      	mov	r0, r6
 8003920:	f002 ff92 	bl	8006848 <HAL_OSPI_Command>
 8003924:	bbb8      	cbnz	r0, 8003996 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8003926:	2302      	movs	r3, #2
 8003928:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 800392a:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800392c:	2300      	movs	r3, #0
 800392e:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003930:	2310      	movs	r3, #16
 8003932:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003934:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003938:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	a901      	add	r1, sp, #4
 8003940:	4630      	mov	r0, r6
 8003942:	f003 f892 	bl	8006a6a <HAL_OSPI_AutoPolling>
 8003946:	bb48      	cbnz	r0, 800399c <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003948:	b01a      	add	sp, #104	; 0x68
 800394a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800394c:	2304      	movs	r3, #4
 800394e:	e7a8      	b.n	80038a2 <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003950:	2308      	movs	r3, #8
 8003952:	e7aa      	b.n	80038aa <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003954:	2310      	movs	r3, #16
 8003956:	e7ac      	b.n	80038b2 <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8003958:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800395c:	e7ad      	b.n	80038ba <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800395e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8003962:	e7b6      	b.n	80038d2 <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003968:	e7b7      	b.n	80038da <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800396a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800396e:	e7b8      	b.n	80038e2 <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003970:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003974:	e7bf      	b.n	80038f6 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003976:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800397a:	e7c0      	b.n	80038fe <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800397c:	2305      	movs	r3, #5
 800397e:	e7c2      	b.n	8003906 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003980:	2302      	movs	r3, #2
 8003982:	e7c4      	b.n	800390e <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003984:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003988:	e7c5      	b.n	8003916 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	e7db      	b.n	8003948 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	e7d8      	b.n	8003948 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8003996:	f04f 30ff 	mov.w	r0, #4294967295
 800399a:	e7d5      	b.n	8003948 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e7d2      	b.n	8003948 <MX25LM51245G_WriteEnable+0xd4>

080039a2 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80039a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a4:	b095      	sub	sp, #84	; 0x54
 80039a6:	4607      	mov	r7, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	4615      	mov	r5, r2
 80039ac:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80039ae:	2250      	movs	r2, #80	; 0x50
 80039b0:	2100      	movs	r1, #0
 80039b2:	4668      	mov	r0, sp
 80039b4:	f015 f97c 	bl	8018cb0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80039b8:	2c00      	cmp	r4, #0
 80039ba:	bf08      	it	eq
 80039bc:	2d01      	cmpeq	r5, #1
 80039be:	d04e      	beq.n	8003a5e <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80039c0:	bb24      	cbnz	r4, 8003a0c <MX25LM51245G_WriteCfg2Register+0x6a>
 80039c2:	2301      	movs	r3, #1
 80039c4:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80039c6:	2d01      	cmp	r5, #1
 80039c8:	d022      	beq.n	8003a10 <MX25LM51245G_WriteCfg2Register+0x6e>
 80039ca:	2300      	movs	r3, #0
 80039cc:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80039ce:	bb0c      	cbnz	r4, 8003a14 <MX25LM51245G_WriteCfg2Register+0x72>
 80039d0:	2300      	movs	r3, #0
 80039d2:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80039d4:	bb04      	cbnz	r4, 8003a18 <MX25LM51245G_WriteCfg2Register+0x76>
 80039d6:	2372      	movs	r3, #114	; 0x72
 80039d8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80039da:	bb04      	cbnz	r4, 8003a1e <MX25LM51245G_WriteCfg2Register+0x7c>
 80039dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e0:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80039e2:	2d01      	cmp	r5, #1
 80039e4:	d01e      	beq.n	8003a24 <MX25LM51245G_WriteCfg2Register+0x82>
 80039e6:	2300      	movs	r3, #0
 80039e8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80039ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039ee:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 80039f0:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80039f2:	b9d4      	cbnz	r4, 8003a2a <MX25LM51245G_WriteCfg2Register+0x88>
 80039f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80039fa:	2d01      	cmp	r5, #1
 80039fc:	d018      	beq.n	8003a30 <MX25LM51245G_WriteCfg2Register+0x8e>
 80039fe:	2300      	movs	r3, #0
 8003a00:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003a02:	b1d4      	cbz	r4, 8003a3a <MX25LM51245G_WriteCfg2Register+0x98>
 8003a04:	2d01      	cmp	r5, #1
 8003a06:	d016      	beq.n	8003a36 <MX25LM51245G_WriteCfg2Register+0x94>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e017      	b.n	8003a3c <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e7d9      	b.n	80039c4 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003a10:	2308      	movs	r3, #8
 8003a12:	e7db      	b.n	80039cc <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003a14:	2310      	movs	r3, #16
 8003a16:	e7dc      	b.n	80039d2 <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8003a18:	f247 238d 	movw	r3, #29325	; 0x728d
 8003a1c:	e7dc      	b.n	80039d8 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a22:	e7dd      	b.n	80039e0 <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a28:	e7de      	b.n	80039e8 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003a2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a2e:	e7e3      	b.n	80039f8 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a34:	e7e4      	b.n	8003a00 <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003a36:	2302      	movs	r3, #2
 8003a38:	e000      	b.n	8003a3c <MX25LM51245G_WriteCfg2Register+0x9a>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4669      	mov	r1, sp
 8003a44:	4638      	mov	r0, r7
 8003a46:	f002 feff 	bl	8006848 <HAL_OSPI_Command>
 8003a4a:	b958      	cbnz	r0, 8003a64 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a50:	a91a      	add	r1, sp, #104	; 0x68
 8003a52:	4638      	mov	r0, r7
 8003a54:	f002 ff59 	bl	800690a <HAL_OSPI_Transmit>
 8003a58:	b938      	cbnz	r0, 8003a6a <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003a5a:	b015      	add	sp, #84	; 0x54
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	e7fa      	b.n	8003a5a <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e7f7      	b.n	8003a5a <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	e7f4      	b.n	8003a5a <MX25LM51245G_WriteCfg2Register+0xb8>

08003a70 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	b095      	sub	sp, #84	; 0x54
 8003a74:	4607      	mov	r7, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	4615      	mov	r5, r2
 8003a7a:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003a7c:	2250      	movs	r2, #80	; 0x50
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4668      	mov	r0, sp
 8003a82:	f015 f915 	bl	8018cb0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	bf08      	it	eq
 8003a8a:	2d01      	cmpeq	r5, #1
 8003a8c:	d05b      	beq.n	8003b46 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d13d      	bne.n	8003b0e <MX25LM51245G_ReadCfg2Register+0x9e>
 8003a92:	2301      	movs	r3, #1
 8003a94:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003a96:	2d01      	cmp	r5, #1
 8003a98:	d03b      	beq.n	8003b12 <MX25LM51245G_ReadCfg2Register+0xa2>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d139      	bne.n	8003b16 <MX25LM51245G_ReadCfg2Register+0xa6>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	d137      	bne.n	8003b1a <MX25LM51245G_ReadCfg2Register+0xaa>
 8003aaa:	2371      	movs	r3, #113	; 0x71
 8003aac:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003aae:	2c00      	cmp	r4, #0
 8003ab0:	d136      	bne.n	8003b20 <MX25LM51245G_ReadCfg2Register+0xb0>
 8003ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab6:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003ab8:	2d01      	cmp	r5, #1
 8003aba:	d034      	beq.n	8003b26 <MX25LM51245G_ReadCfg2Register+0xb6>
 8003abc:	2300      	movs	r3, #0
 8003abe:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003ac0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ac4:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 8003ac6:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003ac8:	bb84      	cbnz	r4, 8003b2c <MX25LM51245G_ReadCfg2Register+0xbc>
 8003aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ace:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003ad0:	2d01      	cmp	r5, #1
 8003ad2:	d02e      	beq.n	8003b32 <MX25LM51245G_ReadCfg2Register+0xc2>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003ad8:	bb74      	cbnz	r4, 8003b38 <MX25LM51245G_ReadCfg2Register+0xc8>
 8003ada:	2300      	movs	r3, #0
 8003adc:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003ade:	2d01      	cmp	r5, #1
 8003ae0:	d02c      	beq.n	8003b3c <MX25LM51245G_ReadCfg2Register+0xcc>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003ae6:	2d01      	cmp	r5, #1
 8003ae8:	d02a      	beq.n	8003b40 <MX25LM51245G_ReadCfg2Register+0xd0>
 8003aea:	2300      	movs	r3, #0
 8003aec:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4669      	mov	r1, sp
 8003af4:	4638      	mov	r0, r7
 8003af6:	f002 fea7 	bl	8006848 <HAL_OSPI_Command>
 8003afa:	bb38      	cbnz	r0, 8003b4c <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b02:	4638      	mov	r0, r7
 8003b04:	f002 ff4e 	bl	80069a4 <HAL_OSPI_Receive>
 8003b08:	bb18      	cbnz	r0, 8003b52 <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003b0a:	b015      	add	sp, #84	; 0x54
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	e7c0      	b.n	8003a94 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003b12:	2308      	movs	r3, #8
 8003b14:	e7c2      	b.n	8003a9c <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003b16:	2310      	movs	r3, #16
 8003b18:	e7c4      	b.n	8003aa4 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8003b1a:	f247 138e 	movw	r3, #29070	; 0x718e
 8003b1e:	e7c5      	b.n	8003aac <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b24:	e7c7      	b.n	8003ab6 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003b26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b2a:	e7c8      	b.n	8003abe <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003b2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b30:	e7cd      	b.n	8003ace <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003b32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b36:	e7ce      	b.n	8003ad6 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003b38:	2305      	movs	r3, #5
 8003b3a:	e7cf      	b.n	8003adc <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e7d1      	b.n	8003ae4 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003b40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b44:	e7d2      	b.n	8003aec <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8003b46:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4a:	e7de      	b.n	8003b0a <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	e7db      	b.n	8003b0a <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	e7d8      	b.n	8003b0a <MX25LM51245G_ReadCfg2Register+0x9a>

08003b58 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	b094      	sub	sp, #80	; 0x50
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003b62:	2250      	movs	r2, #80	; 0x50
 8003b64:	2100      	movs	r1, #0
 8003b66:	4668      	mov	r0, sp
 8003b68:	f015 f8a2 	bl	8018cb0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003b6c:	2c00      	cmp	r4, #0
 8003b6e:	bf08      	it	eq
 8003b70:	2d01      	cmpeq	r5, #1
 8003b72:	d01e      	beq.n	8003bb2 <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003b74:	b9a4      	cbnz	r4, 8003ba0 <MX25LM51245G_ResetEnable+0x48>
 8003b76:	2301      	movs	r3, #1
 8003b78:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003b7a:	2d01      	cmp	r5, #1
 8003b7c:	d012      	beq.n	8003ba4 <MX25LM51245G_ResetEnable+0x4c>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003b82:	b98c      	cbnz	r4, 8003ba8 <MX25LM51245G_ResetEnable+0x50>
 8003b84:	2300      	movs	r3, #0
 8003b86:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003b88:	b984      	cbnz	r4, 8003bac <MX25LM51245G_ResetEnable+0x54>
 8003b8a:	2366      	movs	r3, #102	; 0x66
 8003b8c:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4669      	mov	r1, sp
 8003b94:	4630      	mov	r0, r6
 8003b96:	f002 fe57 	bl	8006848 <HAL_OSPI_Command>
 8003b9a:	b968      	cbnz	r0, 8003bb8 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003b9c:	b014      	add	sp, #80	; 0x50
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e7e9      	b.n	8003b78 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	e7eb      	b.n	8003b80 <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003ba8:	2310      	movs	r3, #16
 8003baa:	e7ec      	b.n	8003b86 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003bac:	f246 6399 	movw	r3, #26265	; 0x6699
 8003bb0:	e7ec      	b.n	8003b8c <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 8003bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb6:	e7f1      	b.n	8003b9c <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e7ee      	b.n	8003b9c <MX25LM51245G_ResetEnable+0x44>

08003bbe <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003bbe:	b570      	push	{r4, r5, r6, lr}
 8003bc0:	b094      	sub	sp, #80	; 0x50
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003bc8:	2250      	movs	r2, #80	; 0x50
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4668      	mov	r0, sp
 8003bce:	f015 f86f 	bl	8018cb0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003bd2:	2c00      	cmp	r4, #0
 8003bd4:	bf08      	it	eq
 8003bd6:	2d01      	cmpeq	r5, #1
 8003bd8:	d01e      	beq.n	8003c18 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003bda:	b9a4      	cbnz	r4, 8003c06 <MX25LM51245G_ResetMemory+0x48>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003be0:	2d01      	cmp	r5, #1
 8003be2:	d012      	beq.n	8003c0a <MX25LM51245G_ResetMemory+0x4c>
 8003be4:	2300      	movs	r3, #0
 8003be6:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003be8:	b98c      	cbnz	r4, 8003c0e <MX25LM51245G_ResetMemory+0x50>
 8003bea:	2300      	movs	r3, #0
 8003bec:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003bee:	b984      	cbnz	r4, 8003c12 <MX25LM51245G_ResetMemory+0x54>
 8003bf0:	2399      	movs	r3, #153	; 0x99
 8003bf2:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4669      	mov	r1, sp
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f002 fe24 	bl	8006848 <HAL_OSPI_Command>
 8003c00:	b968      	cbnz	r0, 8003c1e <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003c02:	b014      	add	sp, #80	; 0x50
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003c06:	2304      	movs	r3, #4
 8003c08:	e7e9      	b.n	8003bde <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	e7eb      	b.n	8003be6 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003c0e:	2310      	movs	r3, #16
 8003c10:	e7ec      	b.n	8003bec <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003c12:	f649 1366 	movw	r3, #39270	; 0x9966
 8003c16:	e7ec      	b.n	8003bf2 <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	e7f1      	b.n	8003c02 <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c22:	e7ee      	b.n	8003c02 <MX25LM51245G_ResetMemory+0x44>

08003c24 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8003c2a:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 8003c2e:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8003c34:	222c      	movs	r2, #44	; 0x2c
 8003c36:	fb02 3101 	mla	r1, r2, r1, r3
 8003c3a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003c3c:	68ca      	ldr	r2, [r1, #12]
 8003c3e:	eb03 0e02 	add.w	lr, r3, r2
 8003c42:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003c46:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003c48:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003c4a:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003c4e:	690b      	ldr	r3, [r1, #16]
 8003c50:	6a08      	ldr	r0, [r1, #32]
 8003c52:	1a1e      	subs	r6, r3, r0
 8003c54:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003c58:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003c5a:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003c5e:	694b      	ldr	r3, [r1, #20]
 8003c60:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8003c64:	f1be 0f00 	cmp.w	lr, #0
 8003c68:	dd08      	ble.n	8003c7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	dd09      	ble.n	8003c82 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003c6e:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003c70:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003c74:	2d0f      	cmp	r5, #15
 8003c76:	d83b      	bhi.n	8003cf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003c78:	2400      	movs	r4, #0
 8003c7a:	e02b      	b.n	8003cd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8003c7c:	f04f 0e00 	mov.w	lr, #0
 8003c80:	e7f3      	b.n	8003c6a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 8003c82:	2600      	movs	r6, #0
 8003c84:	e7f3      	b.n	8003c6e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003c86:	3201      	adds	r2, #1
 8003c88:	2a0f      	cmp	r2, #15
 8003c8a:	d822      	bhi.n	8003cd2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003c8c:	fb02 f300 	mul.w	r3, r2, r0
 8003c90:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003c94:	459e      	cmp	lr, r3
 8003c96:	bf8c      	ite	hi
 8003c98:	2100      	movhi	r1, #0
 8003c9a:	2101      	movls	r1, #1
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	bf38      	it	cc
 8003ca0:	2100      	movcc	r1, #0
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d0ef      	beq.n	8003c86 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 8003ca6:	45a9      	cmp	r9, r5
 8003ca8:	d0ed      	beq.n	8003c86 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003caa:	4914      	ldr	r1, [pc, #80]	; (8003cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 8003cac:	680b      	ldr	r3, [r1, #0]
 8003cae:	f8df a050 	ldr.w	sl, [pc, #80]	; 8003d00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 8003cb2:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003cb6:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 8003cba:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003cbe:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003cc2:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003cca:	2b7f      	cmp	r3, #127	; 0x7f
 8003ccc:	d810      	bhi.n	8003cf0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 8003cce:	46a9      	mov	r9, r5
 8003cd0:	e7d9      	b.n	8003c86 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003cd2:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003cd4:	2c0f      	cmp	r4, #15
 8003cd6:	d809      	bhi.n	8003cec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003cd8:	1c67      	adds	r7, r4, #1
 8003cda:	1c68      	adds	r0, r5, #1
 8003cdc:	fb04 0300 	mla	r3, r4, r0, r0
 8003ce0:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 8003ce4:	4598      	cmp	r8, r3
 8003ce6:	d8f4      	bhi.n	8003cd2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	e7cd      	b.n	8003c88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7c1      	b.n	8003c74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	3b9aca00 	.word	0x3b9aca00
 8003cf8:	0801ace0 	.word	0x0801ace0
 8003cfc:	240022fc 	.word	0x240022fc
 8003d00:	240018fc 	.word	0x240018fc

08003d04 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	b089      	sub	sp, #36	; 0x24
 8003d0a:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003d0c:	4f4b      	ldr	r7, [pc, #300]	; (8003e3c <I2C_Compute_SCLL_SCLH+0x138>)
 8003d0e:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8003d12:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003d16:	494a      	ldr	r1, [pc, #296]	; (8003e40 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003d18:	232c      	movs	r3, #44	; 0x2c
 8003d1a:	fb04 f303 	mul.w	r3, r4, r3
 8003d1e:	18ca      	adds	r2, r1, r3
 8003d20:	58cb      	ldr	r3, [r1, r3]
 8003d22:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8003d26:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d2a:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003d2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d2e:	fb08 f303 	mul.w	r3, r8, r3
 8003d32:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003d34:	6853      	ldr	r3, [r2, #4]
 8003d36:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003d3a:	6893      	ldr	r3, [r2, #8]
 8003d3c:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8003d40:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	9307      	str	r3, [sp, #28]
 8003d4c:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003d4e:	e060      	b.n	8003e12 <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8003d50:	1af2      	subs	r2, r6, r3
 8003d52:	e02a      	b.n	8003daa <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8003d54:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003d56:	29ff      	cmp	r1, #255	; 0xff
 8003d58:	d837      	bhi.n	8003dca <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003d5a:	1c4d      	adds	r5, r1, #1
 8003d5c:	fb01 0200 	mla	r2, r1, r0, r0
 8003d60:	4442      	add	r2, r8
 8003d62:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003d64:	eb0c 0302 	add.w	r3, ip, r2
 8003d68:	4e35      	ldr	r6, [pc, #212]	; (8003e40 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003d6a:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003d6e:	fb0b 6b04 	mla	fp, fp, r4, r6
 8003d72:	f8db 6020 	ldr.w	r6, [fp, #32]
 8003d76:	4433      	add	r3, r6
 8003d78:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8003d7c:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003d7e:	429f      	cmp	r7, r3
 8003d80:	bf8c      	ite	hi
 8003d82:	2600      	movhi	r6, #0
 8003d84:	2601      	movls	r6, #1
 8003d86:	4599      	cmp	r9, r3
 8003d88:	bf38      	it	cc
 8003d8a:	2600      	movcc	r6, #0
 8003d8c:	2e00      	cmp	r6, #0
 8003d8e:	d0e1      	beq.n	8003d54 <I2C_Compute_SCLL_SCLH+0x50>
 8003d90:	4e2b      	ldr	r6, [pc, #172]	; (8003e40 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003d92:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8003d96:	fb0b 6604 	mla	r6, fp, r4, r6
 8003d9a:	69f6      	ldr	r6, [r6, #28]
 8003d9c:	4296      	cmp	r6, r2
 8003d9e:	d8d9      	bhi.n	8003d54 <I2C_Compute_SCLL_SCLH+0x50>
 8003da0:	4592      	cmp	sl, r2
 8003da2:	d2d7      	bcs.n	8003d54 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8003da4:	9e05      	ldr	r6, [sp, #20]
 8003da6:	1b9a      	subs	r2, r3, r6
 8003da8:	d4d2      	bmi.n	8003d50 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d2d1      	bcs.n	8003d54 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8003db0:	9b04      	ldr	r3, [sp, #16]
 8003db2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <I2C_Compute_SCLL_SCLH+0x140>)
 8003db8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003dbc:	9e01      	ldr	r6, [sp, #4]
 8003dbe:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003dc0:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 8003dc2:	9202      	str	r2, [sp, #8]
              ret = count;
 8003dc4:	9b04      	ldr	r3, [sp, #16]
 8003dc6:	9307      	str	r3, [sp, #28]
 8003dc8:	e7c4      	b.n	8003d54 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003dce:	9b01      	ldr	r3, [sp, #4]
 8003dd0:	2bff      	cmp	r3, #255	; 0xff
 8003dd2:	d81b      	bhi.n	8003e0c <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003dd4:	9906      	ldr	r1, [sp, #24]
 8003dd6:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	9203      	str	r2, [sp, #12]
 8003de0:	fb03 0c00 	mla	ip, r3, r0, r0
 8003de4:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8003de8:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8003dec:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <I2C_Compute_SCLL_SCLH+0x13c>)
 8003df0:	222c      	movs	r2, #44	; 0x2c
 8003df2:	fb02 3304 	mla	r3, r2, r4, r3
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	4563      	cmp	r3, ip
 8003dfa:	d2e6      	bcs.n	8003dca <I2C_Compute_SCLL_SCLH+0xc6>
 8003dfc:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8003e00:	1a5b      	subs	r3, r3, r1
 8003e02:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8003e06:	d2e0      	bcs.n	8003dca <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003e08:	2100      	movs	r1, #0
 8003e0a:	e7a4      	b.n	8003d56 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003e0c:	9b04      	ldr	r3, [sp, #16]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <I2C_Compute_SCLL_SCLH+0x144>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	9a04      	ldr	r2, [sp, #16]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d90a      	bls.n	8003e32 <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003e1c:	9b04      	ldr	r3, [sp, #16]
 8003e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <I2C_Compute_SCLL_SCLH+0x140>)
 8003e24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e28:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	e7cd      	b.n	8003dce <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8003e32:	9807      	ldr	r0, [sp, #28]
 8003e34:	b009      	add	sp, #36	; 0x24
 8003e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	3b9aca00 	.word	0x3b9aca00
 8003e40:	0801ace0 	.word	0x0801ace0
 8003e44:	240018fc 	.word	0x240018fc
 8003e48:	240022fc 	.word	0x240022fc

08003e4c <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	bf18      	it	ne
 8003e50:	2900      	cmpne	r1, #0
 8003e52:	d134      	bne.n	8003ebe <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8003e54:	2000      	movs	r0, #0
}
 8003e56:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003e58:	3401      	adds	r4, #1
 8003e5a:	2c02      	cmp	r4, #2
 8003e5c:	d834      	bhi.n	8003ec8 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <I2C_GetTiming+0x84>)
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 3304 	mla	r3, r1, r4, r3
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d8f5      	bhi.n	8003e58 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <I2C_GetTiming+0x84>)
 8003e6e:	fb01 3304 	mla	r3, r1, r4, r3
 8003e72:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d3ef      	bcc.n	8003e58 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fed2 	bl	8003c24 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7ff ff3e 	bl	8003d04 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8003e88:	287f      	cmp	r0, #127	; 0x7f
 8003e8a:	d81f      	bhi.n	8003ecc <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <I2C_GetTiming+0x88>)
 8003e8e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003e92:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8003e96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003e9a:	6863      	ldr	r3, [r4, #4]
 8003e9c:	051b      	lsls	r3, r3, #20
 8003e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003ea2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003ea6:	68a1      	ldr	r1, [r4, #8]
 8003ea8:	0409      	lsls	r1, r1, #16
 8003eaa:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003eae:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003eb0:	68e1      	ldr	r1, [r4, #12]
 8003eb2:	0209      	lsls	r1, r1, #8
 8003eb4:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003eb6:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003eb8:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003eba:	4318      	orrs	r0, r3
 8003ebc:	e005      	b.n	8003eca <I2C_GetTiming+0x7e>
{
 8003ebe:	b538      	push	{r3, r4, r5, lr}
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	e7c8      	b.n	8003e5a <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8003ec8:	2000      	movs	r0, #0
}
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8003ecc:	2000      	movs	r0, #0
  return ret;
 8003ece:	e7fc      	b.n	8003eca <I2C_GetTiming+0x7e>
 8003ed0:	0801ace0 	.word	0x0801ace0
 8003ed4:	240018fc 	.word	0x240018fc

08003ed8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003edc:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003ede:	4c2a      	ldr	r4, [pc, #168]	; (8003f88 <I2C4_MspInit+0xb0>)
 8003ee0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003eec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003ef8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003efc:	f043 0308 	orr.w	r3, r3, #8
 8003f00:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003f04:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f14:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003f16:	f04f 0912 	mov.w	r9, #18
 8003f1a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003f1e:	f04f 0800 	mov.w	r8, #0
 8003f22:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003f26:	2702      	movs	r7, #2
 8003f28:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003f2a:	2604      	movs	r6, #4
 8003f2c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003f2e:	4d17      	ldr	r5, [pc, #92]	; (8003f8c <I2C4_MspInit+0xb4>)
 8003f30:	a903      	add	r1, sp, #12
 8003f32:	4628      	mov	r0, r5
 8003f34:	f001 fada 	bl	80054ec <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f3c:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003f3e:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003f42:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003f46:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003f48:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003f4a:	a903      	add	r1, sp, #12
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f001 facd 	bl	80054ec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003f52:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8003f5e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003f6a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003f76:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8003f82:	b009      	add	sp, #36	; 0x24
 8003f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	58020c00 	.word	0x58020c00

08003f90 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003f90:	b510      	push	{r4, lr}
 8003f92:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f98:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003f9a:	4c09      	ldr	r4, [pc, #36]	; (8003fc0 <I2C4_MspDeInit+0x30>)
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f001 fbb5 	bl	800570c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fa6:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f001 fbaf 	bl	800570c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <I2C4_MspDeInit+0x34>)
 8003fb0:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003fbc:	b006      	add	sp, #24
 8003fbe:	bd10      	pop	{r4, pc}
 8003fc0:	58020c00 	.word	0x58020c00
 8003fc4:	58024400 	.word	0x58024400

08003fc8 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003fcc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003fd0:	9402      	str	r4, [sp, #8]
 8003fd2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003fd6:	9401      	str	r4, [sp, #4]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	460a      	mov	r2, r1
 8003fde:	4601      	mov	r1, r0
 8003fe0:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <I2C4_WriteReg+0x2c>)
 8003fe2:	f001 fe92 	bl	8005d0a <HAL_I2C_Mem_Write>
 8003fe6:	b910      	cbnz	r0, 8003fee <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 8003fe8:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8003fea:	b004      	add	sp, #16
 8003fec:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8003fee:	f06f 0007 	mvn.w	r0, #7
 8003ff2:	e7fa      	b.n	8003fea <I2C4_WriteReg+0x22>
 8003ff4:	24002300 	.word	0x24002300

08003ff8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003ffc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004000:	9402      	str	r4, [sp, #8]
 8004002:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8004006:	9401      	str	r4, [sp, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	460a      	mov	r2, r1
 800400e:	4601      	mov	r1, r0
 8004010:	4804      	ldr	r0, [pc, #16]	; (8004024 <I2C4_ReadReg+0x2c>)
 8004012:	f001 ff4f 	bl	8005eb4 <HAL_I2C_Mem_Read>
 8004016:	b910      	cbnz	r0, 800401e <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8004018:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 800401a:	b004      	add	sp, #16
 800401c:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 800401e:	f06f 0007 	mvn.w	r0, #7
 8004022:	e7fa      	b.n	800401a <I2C4_ReadReg+0x22>
 8004024:	24002300 	.word	0x24002300

08004028 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <BSP_I2C4_DeInit+0x28>)
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8004030:	b10b      	cbz	r3, 8004036 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8004032:	2000      	movs	r0, #0
}
 8004034:	4770      	bx	lr
{
 8004036:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8004038:	4c06      	ldr	r4, [pc, #24]	; (8004054 <BSP_I2C4_DeInit+0x2c>)
 800403a:	4620      	mov	r0, r4
 800403c:	f7ff ffa8 	bl	8003f90 <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004040:	4620      	mov	r0, r4
 8004042:	f001 fe49 	bl	8005cd8 <HAL_I2C_DeInit>
 8004046:	b900      	cbnz	r0, 800404a <BSP_I2C4_DeInit+0x22>
}
 8004048:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 800404a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800404e:	e7fb      	b.n	8004048 <BSP_I2C4_DeInit+0x20>
 8004050:	240018f8 	.word	0x240018f8
 8004054:	24002300 	.word	0x24002300

08004058 <MX_I2C4_Init>:
{
 8004058:	b510      	push	{r4, lr}
 800405a:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 800405c:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004062:	2201      	movs	r2, #1
 8004064:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004066:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004068:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800406a:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800406c:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800406e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004070:	f001 fdd4 	bl	8005c1c <HAL_I2C_Init>
 8004074:	b108      	cbz	r0, 800407a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8004076:	2001      	movs	r0, #1
}
 8004078:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800407a:	2100      	movs	r1, #0
 800407c:	4620      	mov	r0, r4
 800407e:	f001 fff6 	bl	800606e <HAL_I2CEx_ConfigAnalogFilter>
 8004082:	b108      	cbz	r0, 8004088 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8004084:	2001      	movs	r0, #1
 8004086:	e7f7      	b.n	8004078 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004088:	2100      	movs	r1, #0
 800408a:	4620      	mov	r0, r4
 800408c:	f002 f81d 	bl	80060ca <HAL_I2CEx_ConfigDigitalFilter>
 8004090:	2800      	cmp	r0, #0
 8004092:	d0f1      	beq.n	8004078 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8004094:	2001      	movs	r0, #1
 8004096:	e7ef      	b.n	8004078 <MX_I2C4_Init+0x20>

08004098 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <BSP_I2C4_Init+0x48>)
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <BSP_I2C4_Init+0x4c>)
 800409c:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <BSP_I2C4_Init+0x50>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b10b      	cbz	r3, 80040a8 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 80040a4:	2000      	movs	r0, #0
}
 80040a6:	4770      	bx	lr
{
 80040a8:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <BSP_I2C4_Init+0x50>)
 80040ae:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80040b0:	480b      	ldr	r0, [pc, #44]	; (80040e0 <BSP_I2C4_Init+0x48>)
 80040b2:	f001 ffd7 	bl	8006064 <HAL_I2C_GetState>
 80040b6:	b108      	cbz	r0, 80040bc <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80040b8:	2000      	movs	r0, #0
}
 80040ba:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 80040bc:	4c08      	ldr	r4, [pc, #32]	; (80040e0 <BSP_I2C4_Init+0x48>)
 80040be:	4620      	mov	r0, r4
 80040c0:	f7ff ff0a 	bl	8003ed8 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80040c4:	f003 fcfe 	bl	8007ac4 <HAL_RCC_GetPCLK2Freq>
 80040c8:	4908      	ldr	r1, [pc, #32]	; (80040ec <BSP_I2C4_Init+0x54>)
 80040ca:	f7ff febf 	bl	8003e4c <I2C_GetTiming>
 80040ce:	4601      	mov	r1, r0
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7ff ffc1 	bl	8004058 <MX_I2C4_Init>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d0ef      	beq.n	80040ba <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 80040da:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80040de:	e7ec      	b.n	80040ba <BSP_I2C4_Init+0x22>
 80040e0:	24002300 	.word	0x24002300
 80040e4:	58001c00 	.word	0x58001c00
 80040e8:	240018f8 	.word	0x240018f8
 80040ec:	000186a0 	.word	0x000186a0

080040f0 <BSP_I2C4_WriteReg>:
{
 80040f0:	b500      	push	{lr}
 80040f2:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	4613      	mov	r3, r2
 80040f8:	2201      	movs	r2, #1
 80040fa:	f7ff ff65 	bl	8003fc8 <I2C4_WriteReg>
 80040fe:	b910      	cbnz	r0, 8004106 <BSP_I2C4_WriteReg+0x16>
}
 8004100:	b003      	add	sp, #12
 8004102:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004106:	4805      	ldr	r0, [pc, #20]	; (800411c <BSP_I2C4_WriteReg+0x2c>)
 8004108:	f001 ffaf 	bl	800606a <HAL_I2C_GetError>
 800410c:	2804      	cmp	r0, #4
 800410e:	d002      	beq.n	8004116 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004110:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004114:	e7f4      	b.n	8004100 <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004116:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800411a:	e7f1      	b.n	8004100 <BSP_I2C4_WriteReg+0x10>
 800411c:	24002300 	.word	0x24002300

08004120 <BSP_I2C4_ReadReg>:
{
 8004120:	b500      	push	{lr}
 8004122:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	2201      	movs	r2, #1
 800412a:	f7ff ff65 	bl	8003ff8 <I2C4_ReadReg>
 800412e:	b910      	cbnz	r0, 8004136 <BSP_I2C4_ReadReg+0x16>
}
 8004130:	b003      	add	sp, #12
 8004132:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004136:	4805      	ldr	r0, [pc, #20]	; (800414c <BSP_I2C4_ReadReg+0x2c>)
 8004138:	f001 ff97 	bl	800606a <HAL_I2C_GetError>
 800413c:	2804      	cmp	r0, #4
 800413e:	d002      	beq.n	8004146 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004140:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004144:	e7f4      	b.n	8004130 <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004146:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800414a:	e7f1      	b.n	8004130 <BSP_I2C4_ReadReg+0x10>
 800414c:	24002300 	.word	0x24002300

08004150 <BSP_GetTick>:
{
 8004150:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8004152:	f000 fde7 	bl	8004d24 <HAL_GetTick>
}
 8004156:	bd08      	pop	{r3, pc}

08004158 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800415e:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <OSPI_NOR_MspInit+0x200>)
 8004160:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8004164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004168:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800416c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8004170:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004174:	9201      	str	r2, [sp, #4]
 8004176:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8004178:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800417a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417e:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8004180:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004182:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004186:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8004188:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800418c:	f042 0202 	orr.w	r2, r2, #2
 8004190:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8004194:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004198:	f002 0202 	and.w	r2, r2, #2
 800419c:	9202      	str	r2, [sp, #8]
 800419e:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 80041a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041a4:	f042 0204 	orr.w	r2, r2, #4
 80041a8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80041ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041b0:	f002 0204 	and.w	r2, r2, #4
 80041b4:	9203      	str	r2, [sp, #12]
 80041b6:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 80041b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80041c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80041cc:	9204      	str	r2, [sp, #16]
 80041ce:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 80041d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80041dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041e0:	f002 0208 	and.w	r2, r2, #8
 80041e4:	9205      	str	r2, [sp, #20]
 80041e6:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 80041e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041ec:	f042 0220 	orr.w	r2, r2, #32
 80041f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80041f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80041f8:	f002 0220 	and.w	r2, r2, #32
 80041fc:	9206      	str	r2, [sp, #24]
 80041fe:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8004200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004204:	f042 0220 	orr.w	r2, r2, #32
 8004208:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800420c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004210:	f002 0220 	and.w	r2, r2, #32
 8004214:	9207      	str	r2, [sp, #28]
 8004216:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8004218:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800421c:	f042 0220 	orr.w	r2, r2, #32
 8004220:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8004224:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004228:	f002 0220 	and.w	r2, r2, #32
 800422c:	9208      	str	r2, [sp, #32]
 800422e:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8004230:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004234:	f042 0204 	orr.w	r2, r2, #4
 8004238:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800423c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004240:	f002 0204 	and.w	r2, r2, #4
 8004244:	9209      	str	r2, [sp, #36]	; 0x24
 8004246:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8004248:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800424c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004250:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8004254:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004258:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800425c:	920a      	str	r2, [sp, #40]	; 0x28
 800425e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8004260:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800426c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8004270:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004274:	920b      	str	r2, [sp, #44]	; 0x2c
 8004276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8004278:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800427c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004280:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8004284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	930c      	str	r3, [sp, #48]	; 0x30
 800428e:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8004290:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8004294:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004298:	f04f 0a02 	mov.w	sl, #2
 800429c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80042a0:	2301      	movs	r3, #1
 80042a2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80042a8:	240a      	movs	r4, #10
 80042aa:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80042ac:	a90d      	add	r1, sp, #52	; 0x34
 80042ae:	482b      	ldr	r0, [pc, #172]	; (800435c <OSPI_NOR_MspInit+0x204>)
 80042b0:	f001 f91c 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80042b4:	2320      	movs	r3, #32
 80042b6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80042b8:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80042ba:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004370 <OSPI_NOR_MspInit+0x218>
 80042be:	a90d      	add	r1, sp, #52	; 0x34
 80042c0:	4648      	mov	r0, r9
 80042c2:	f001 f913 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80042c6:	2304      	movs	r3, #4
 80042c8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 80042ce:	2509      	movs	r5, #9
 80042d0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80042d2:	a90d      	add	r1, sp, #52	; 0x34
 80042d4:	4822      	ldr	r0, [pc, #136]	; (8004360 <OSPI_NOR_MspInit+0x208>)
 80042d6:	f001 f909 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 80042da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042de:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 80042e0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80042e2:	a90d      	add	r1, sp, #52	; 0x34
 80042e4:	481f      	ldr	r0, [pc, #124]	; (8004364 <OSPI_NOR_MspInit+0x20c>)
 80042e6:	f001 f901 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 80042ea:	f44f 7800 	mov.w	r8, #512	; 0x200
 80042ee:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 80042f2:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 80042f4:	4e1c      	ldr	r6, [pc, #112]	; (8004368 <OSPI_NOR_MspInit+0x210>)
 80042f6:	a90d      	add	r1, sp, #52	; 0x34
 80042f8:	4630      	mov	r0, r6
 80042fa:	f001 f8f7 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 80042fe:	2780      	movs	r7, #128	; 0x80
 8004300:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8004302:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8004304:	a90d      	add	r1, sp, #52	; 0x34
 8004306:	4630      	mov	r0, r6
 8004308:	f001 f8f0 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800430c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8004310:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8004312:	a90d      	add	r1, sp, #52	; 0x34
 8004314:	4630      	mov	r0, r6
 8004316:	f001 f8e9 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800431a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800431e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8004320:	a90d      	add	r1, sp, #52	; 0x34
 8004322:	4648      	mov	r0, r9
 8004324:	f001 f8e2 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8004328:	2308      	movs	r3, #8
 800432a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800432c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800432e:	a90d      	add	r1, sp, #52	; 0x34
 8004330:	480e      	ldr	r0, [pc, #56]	; (800436c <OSPI_NOR_MspInit+0x214>)
 8004332:	f001 f8db 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8004336:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800433a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800433c:	a90d      	add	r1, sp, #52	; 0x34
 800433e:	4807      	ldr	r0, [pc, #28]	; (800435c <OSPI_NOR_MspInit+0x204>)
 8004340:	f001 f8d4 	bl	80054ec <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8004344:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8004346:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8004348:	a90d      	add	r1, sp, #52	; 0x34
 800434a:	4806      	ldr	r0, [pc, #24]	; (8004364 <OSPI_NOR_MspInit+0x20c>)
 800434c:	f001 f8ce 	bl	80054ec <HAL_GPIO_Init>
}
 8004350:	b013      	add	sp, #76	; 0x4c
 8004352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	58024400 	.word	0x58024400
 800435c:	58021800 	.word	0x58021800
 8004360:	58020400 	.word	0x58020400
 8004364:	58020c00 	.word	0x58020c00
 8004368:	58021400 	.word	0x58021400
 800436c:	58021c00 	.word	0x58021c00
 8004370:	58020800 	.word	0x58020800

08004374 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004378:	4c24      	ldr	r4, [pc, #144]	; (800440c <OSPI_NOR_ResetMemory+0x98>)
 800437a:	235c      	movs	r3, #92	; 0x5c
 800437c:	fb03 4400 	mla	r4, r3, r0, r4
 8004380:	2200      	movs	r2, #0
 8004382:	4611      	mov	r1, r2
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff fbe7 	bl	8003b58 <MX25LM51245G_ResetEnable>
 800438a:	bb60      	cbnz	r0, 80043e6 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800438c:	2200      	movs	r2, #0
 800438e:	4611      	mov	r1, r2
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff fc14 	bl	8003bbe <MX25LM51245G_ResetMemory>
 8004396:	bb48      	cbnz	r0, 80043ec <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004398:	2200      	movs	r2, #0
 800439a:	2101      	movs	r1, #1
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff fbdb 	bl	8003b58 <MX25LM51245G_ResetEnable>
 80043a2:	bb30      	cbnz	r0, 80043f2 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80043a4:	2200      	movs	r2, #0
 80043a6:	2101      	movs	r1, #1
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff fc08 	bl	8003bbe <MX25LM51245G_ResetMemory>
 80043ae:	bb18      	cbnz	r0, 80043f8 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80043b0:	2201      	movs	r2, #1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7ff fbcf 	bl	8003b58 <MX25LM51245G_ResetEnable>
 80043ba:	bb00      	cbnz	r0, 80043fe <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80043bc:	2201      	movs	r2, #1
 80043be:	4611      	mov	r1, r2
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff fbfc 	bl	8003bbe <MX25LM51245G_ResetMemory>
 80043c6:	4604      	mov	r4, r0
 80043c8:	b9e0      	cbnz	r0, 8004404 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80043ca:	4811      	ldr	r0, [pc, #68]	; (8004410 <OSPI_NOR_ResetMemory+0x9c>)
 80043cc:	2301      	movs	r3, #1
 80043ce:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80043d2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80043d6:	2300      	movs	r3, #0
 80043d8:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80043da:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	f000 fca7 	bl	8004d30 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 80043e2:	4620      	mov	r0, r4
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043e6:	f06f 0404 	mvn.w	r4, #4
 80043ea:	e7fa      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043ec:	f06f 0404 	mvn.w	r4, #4
 80043f0:	e7f7      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043f2:	f06f 0404 	mvn.w	r4, #4
 80043f6:	e7f4      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043f8:	f06f 0404 	mvn.w	r4, #4
 80043fc:	e7f1      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80043fe:	f06f 0404 	mvn.w	r4, #4
 8004402:	e7ee      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004404:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8004408:	e7eb      	b.n	80043e2 <OSPI_NOR_ResetMemory+0x6e>
 800440a:	bf00      	nop
 800440c:	24002354 	.word	0x24002354
 8004410:	2400234c 	.word	0x2400234c

08004414 <OSPI_NOR_MspDeInit>:
{
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8004416:	2104      	movs	r1, #4
 8004418:	4820      	ldr	r0, [pc, #128]	; (800449c <OSPI_NOR_MspDeInit+0x88>)
 800441a:	f001 f977 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800441e:	4f20      	ldr	r7, [pc, #128]	; (80044a0 <OSPI_NOR_MspDeInit+0x8c>)
 8004420:	2120      	movs	r1, #32
 8004422:	4638      	mov	r0, r7
 8004424:	f001 f972 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8004428:	4e1e      	ldr	r6, [pc, #120]	; (80044a4 <OSPI_NOR_MspDeInit+0x90>)
 800442a:	2140      	movs	r1, #64	; 0x40
 800442c:	4630      	mov	r0, r6
 800442e:	f001 f96d 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8004432:	4d1d      	ldr	r5, [pc, #116]	; (80044a8 <OSPI_NOR_MspDeInit+0x94>)
 8004434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004438:	4628      	mov	r0, r5
 800443a:	f001 f967 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800443e:	4c1b      	ldr	r4, [pc, #108]	; (80044ac <OSPI_NOR_MspDeInit+0x98>)
 8004440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004444:	4620      	mov	r0, r4
 8004446:	f001 f961 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	4620      	mov	r0, r4
 800444e:	f001 f95d 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8004452:	2140      	movs	r1, #64	; 0x40
 8004454:	4620      	mov	r0, r4
 8004456:	f001 f959 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800445a:	2102      	movs	r1, #2
 800445c:	4638      	mov	r0, r7
 800445e:	f001 f955 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8004462:	2108      	movs	r1, #8
 8004464:	4812      	ldr	r0, [pc, #72]	; (80044b0 <OSPI_NOR_MspDeInit+0x9c>)
 8004466:	f001 f951 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800446a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800446e:	4630      	mov	r0, r6
 8004470:	f001 f94c 	bl	800570c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	4628      	mov	r0, r5
 8004478:	f001 f948 	bl	800570c <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <OSPI_NOR_MspDeInit+0xa0>)
 800447e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004484:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8004486:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 800448e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8004492:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004496:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449c:	58020400 	.word	0x58020400
 80044a0:	58020800 	.word	0x58020800
 80044a4:	58021800 	.word	0x58021800
 80044a8:	58020c00 	.word	0x58020c00
 80044ac:	58021400 	.word	0x58021400
 80044b0:	58021c00 	.word	0x58021c00
 80044b4:	58024400 	.word	0x58024400

080044b8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80044be:	4d2b      	ldr	r5, [pc, #172]	; (800456c <OSPI_NOR_ExitOPIMode+0xb4>)
 80044c0:	235c      	movs	r3, #92	; 0x5c
 80044c2:	fb03 5500 	mla	r5, r3, r0, r5
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <OSPI_NOR_ExitOPIMode+0xb8>)
 80044c8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80044cc:	789a      	ldrb	r2, [r3, #2]
 80044ce:	7859      	ldrb	r1, [r3, #1]
 80044d0:	4628      	mov	r0, r5
 80044d2:	f7ff f9cf 	bl	8003874 <MX25LM51245G_WriteEnable>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d138      	bne.n	800454c <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 80044e0:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80044e4:	4922      	ldr	r1, [pc, #136]	; (8004570 <OSPI_NOR_ExitOPIMode+0xb8>)
 80044e6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	788a      	ldrb	r2, [r1, #2]
 80044ee:	7849      	ldrb	r1, [r1, #1]
 80044f0:	4628      	mov	r0, r5
 80044f2:	f7ff fa56 	bl	80039a2 <MX25LM51245G_WriteCfg2Register>
 80044f6:	4606      	mov	r6, r0
 80044f8:	bb58      	cbnz	r0, 8004552 <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80044fa:	2028      	movs	r0, #40	; 0x28
 80044fc:	f000 fc18 	bl	8004d30 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <OSPI_NOR_ExitOPIMode+0xb8>)
 8004502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004506:	789b      	ldrb	r3, [r3, #2]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d014      	beq.n	8004536 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800450c:	2200      	movs	r2, #0
 800450e:	4611      	mov	r1, r2
 8004510:	4628      	mov	r0, r5
 8004512:	f7ff f872 	bl	80035fa <MX25LM51245G_AutoPollingMemReady>
 8004516:	b9f8      	cbnz	r0, 8004558 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	461a      	mov	r2, r3
 8004520:	4619      	mov	r1, r3
 8004522:	4628      	mov	r0, r5
 8004524:	f7ff faa4 	bl	8003a70 <MX25LM51245G_ReadCfg2Register>
 8004528:	b9c8      	cbnz	r0, 800455e <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 800452a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800452e:	b9cb      	cbnz	r3, 8004564 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8004530:	4630      	mov	r0, r6
 8004532:	b004      	add	sp, #16
 8004534:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004536:	2300      	movs	r3, #0
 8004538:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800453a:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800453c:	4628      	mov	r0, r5
 800453e:	f002 fc69 	bl	8006e14 <HAL_OSPI_Init>
 8004542:	2800      	cmp	r0, #0
 8004544:	d0e2      	beq.n	800450c <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004546:	f06f 0603 	mvn.w	r6, #3
 800454a:	e7df      	b.n	800450c <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800454c:	f06f 0604 	mvn.w	r6, #4
 8004550:	e7ee      	b.n	8004530 <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004552:	f06f 0604 	mvn.w	r6, #4
 8004556:	e7eb      	b.n	8004530 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004558:	f06f 0604 	mvn.w	r6, #4
 800455c:	e7e8      	b.n	8004530 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800455e:	f06f 0604 	mvn.w	r6, #4
 8004562:	e7e5      	b.n	8004530 <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004564:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8004568:	e7e2      	b.n	8004530 <OSPI_NOR_ExitOPIMode+0x78>
 800456a:	bf00      	nop
 800456c:	24002354 	.word	0x24002354
 8004570:	2400234c 	.word	0x2400234c

08004574 <OSPI_NOR_EnterSOPIMode>:
{
 8004574:	b530      	push	{r4, r5, lr}
 8004576:	b085      	sub	sp, #20
 8004578:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800457a:	4c2e      	ldr	r4, [pc, #184]	; (8004634 <OSPI_NOR_EnterSOPIMode+0xc0>)
 800457c:	235c      	movs	r3, #92	; 0x5c
 800457e:	fb03 4400 	mla	r4, r3, r0, r4
 8004582:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8004584:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004588:	789a      	ldrb	r2, [r3, #2]
 800458a:	7859      	ldrb	r1, [r3, #1]
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff f971 	bl	8003874 <MX25LM51245G_WriteEnable>
 8004592:	2800      	cmp	r0, #0
 8004594:	d139      	bne.n	800460a <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8004596:	4928      	ldr	r1, [pc, #160]	; (8004638 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8004598:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800459c:	2307      	movs	r3, #7
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045a4:	788a      	ldrb	r2, [r1, #2]
 80045a6:	7849      	ldrb	r1, [r1, #1]
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff f9fa 	bl	80039a2 <MX25LM51245G_WriteCfg2Register>
 80045ae:	bb78      	cbnz	r0, 8004610 <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80045b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80045b6:	789a      	ldrb	r2, [r3, #2]
 80045b8:	7859      	ldrb	r1, [r3, #1]
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7ff f95a 	bl	8003874 <MX25LM51245G_WriteEnable>
 80045c0:	bb48      	cbnz	r0, 8004616 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80045c2:	481d      	ldr	r0, [pc, #116]	; (8004638 <OSPI_NOR_EnterSOPIMode+0xc4>)
 80045c4:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80045c8:	2301      	movs	r3, #1
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	78aa      	ldrb	r2, [r5, #2]
 80045d0:	7869      	ldrb	r1, [r5, #1]
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff f9e5 	bl	80039a2 <MX25LM51245G_WriteCfg2Register>
 80045d8:	bb00      	cbnz	r0, 800461c <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80045da:	2028      	movs	r0, #40	; 0x28
 80045dc:	f000 fba8 	bl	8004d30 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80045e0:	2200      	movs	r2, #0
 80045e2:	2101      	movs	r1, #1
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff f808 	bl	80035fa <MX25LM51245G_AutoPollingMemReady>
 80045ea:	b9d0      	cbnz	r0, 8004622 <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	461a      	mov	r2, r3
 80045f4:	2101      	movs	r1, #1
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7ff fa3a 	bl	8003a70 <MX25LM51245G_ReadCfg2Register>
 80045fc:	b9a0      	cbnz	r0, 8004628 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 80045fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d113      	bne.n	800462e <OSPI_NOR_EnterSOPIMode+0xba>
}
 8004606:	b005      	add	sp, #20
 8004608:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800460a:	f06f 0004 	mvn.w	r0, #4
 800460e:	e7fa      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004610:	f06f 0004 	mvn.w	r0, #4
 8004614:	e7f7      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004616:	f06f 0004 	mvn.w	r0, #4
 800461a:	e7f4      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800461c:	f06f 0004 	mvn.w	r0, #4
 8004620:	e7f1      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004622:	f06f 0004 	mvn.w	r0, #4
 8004626:	e7ee      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004628:	f06f 0004 	mvn.w	r0, #4
 800462c:	e7eb      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800462e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004632:	e7e8      	b.n	8004606 <OSPI_NOR_EnterSOPIMode+0x92>
 8004634:	24002354 	.word	0x24002354
 8004638:	2400234c 	.word	0x2400234c

0800463c <OSPI_NOR_EnterDOPIMode>:
{
 800463c:	b530      	push	{r4, r5, lr}
 800463e:	b085      	sub	sp, #20
 8004640:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004642:	4c35      	ldr	r4, [pc, #212]	; (8004718 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8004644:	235c      	movs	r3, #92	; 0x5c
 8004646:	fb03 4400 	mla	r4, r3, r0, r4
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <OSPI_NOR_EnterDOPIMode+0xe0>)
 800464c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004650:	789a      	ldrb	r2, [r3, #2]
 8004652:	7859      	ldrb	r1, [r3, #1]
 8004654:	4620      	mov	r0, r4
 8004656:	f7ff f90d 	bl	8003874 <MX25LM51245G_WriteEnable>
 800465a:	2800      	cmp	r0, #0
 800465c:	d144      	bne.n	80046e8 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800465e:	492f      	ldr	r1, [pc, #188]	; (800471c <OSPI_NOR_EnterDOPIMode+0xe0>)
 8004660:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004664:	2307      	movs	r3, #7
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800466c:	788a      	ldrb	r2, [r1, #2]
 800466e:	7849      	ldrb	r1, [r1, #1]
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff f996 	bl	80039a2 <MX25LM51245G_WriteCfg2Register>
 8004676:	2800      	cmp	r0, #0
 8004678:	d139      	bne.n	80046ee <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <OSPI_NOR_EnterDOPIMode+0xe0>)
 800467c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004680:	789a      	ldrb	r2, [r3, #2]
 8004682:	7859      	ldrb	r1, [r3, #1]
 8004684:	4620      	mov	r0, r4
 8004686:	f7ff f8f5 	bl	8003874 <MX25LM51245G_WriteEnable>
 800468a:	bb98      	cbnz	r0, 80046f4 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800468c:	4923      	ldr	r1, [pc, #140]	; (800471c <OSPI_NOR_EnterDOPIMode+0xe0>)
 800468e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004692:	2302      	movs	r3, #2
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	788a      	ldrb	r2, [r1, #2]
 800469a:	7849      	ldrb	r1, [r1, #1]
 800469c:	4620      	mov	r0, r4
 800469e:	f7ff f980 	bl	80039a2 <MX25LM51245G_WriteCfg2Register>
 80046a2:	bb50      	cbnz	r0, 80046fa <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80046a4:	2028      	movs	r0, #40	; 0x28
 80046a6:	f000 fb43 	bl	8004d30 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80046aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ae:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80046b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80046b6:	4620      	mov	r0, r4
 80046b8:	f002 fbac 	bl	8006e14 <HAL_OSPI_Init>
 80046bc:	bb00      	cbnz	r0, 8004700 <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80046be:	2201      	movs	r2, #1
 80046c0:	4611      	mov	r1, r2
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fe ff99 	bl	80035fa <MX25LM51245G_AutoPollingMemReady>
 80046c8:	b9e8      	cbnz	r0, 8004706 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80046ca:	ab03      	add	r3, sp, #12
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	2201      	movs	r2, #1
 80046d2:	4611      	mov	r1, r2
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff f9cb 	bl	8003a70 <MX25LM51245G_ReadCfg2Register>
 80046da:	b9b8      	cbnz	r0, 800470c <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 80046dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d116      	bne.n	8004712 <OSPI_NOR_EnterDOPIMode+0xd6>
}
 80046e4:	b005      	add	sp, #20
 80046e6:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80046e8:	f06f 0004 	mvn.w	r0, #4
 80046ec:	e7fa      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80046ee:	f06f 0004 	mvn.w	r0, #4
 80046f2:	e7f7      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80046f4:	f06f 0004 	mvn.w	r0, #4
 80046f8:	e7f4      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80046fa:	f06f 0004 	mvn.w	r0, #4
 80046fe:	e7f1      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004700:	f06f 0003 	mvn.w	r0, #3
 8004704:	e7ee      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004706:	f06f 0004 	mvn.w	r0, #4
 800470a:	e7eb      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800470c:	f06f 0004 	mvn.w	r0, #4
 8004710:	e7e8      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004712:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004716:	e7e5      	b.n	80046e4 <OSPI_NOR_EnterDOPIMode+0xa8>
 8004718:	24002354 	.word	0x24002354
 800471c:	2400234c 	.word	0x2400234c

08004720 <MX_OSPI_NOR_Init>:
{
 8004720:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <MX_OSPI_NOR_Init+0x4c>)
 8004724:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8004726:	2304      	movs	r3, #4
 8004728:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800472e:	680a      	ldr	r2, [r1, #0]
 8004730:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8004732:	2202      	movs	r2, #2
 8004734:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8004736:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8004738:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800473a:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800473c:	684a      	ldr	r2, [r1, #4]
 800473e:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8004740:	688a      	ldr	r2, [r1, #8]
 8004742:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8004744:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8004746:	2308      	movs	r3, #8
 8004748:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800474a:	68cb      	ldr	r3, [r1, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d005      	beq.n	800475c <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8004750:	2300      	movs	r3, #0
 8004752:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004754:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8004756:	f002 fb5d 	bl	8006e14 <HAL_OSPI_Init>
}
 800475a:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800475c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004760:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8004762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004766:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004768:	e7f5      	b.n	8004756 <MX_OSPI_NOR_Init+0x36>
 800476a:	bf00      	nop
 800476c:	52005000 	.word	0x52005000

08004770 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004770:	bb38      	cbnz	r0, 80047c2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 8004772:	b510      	push	{r4, lr}
 8004774:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8004778:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800477c:	789b      	ldrb	r3, [r3, #2]
 800477e:	b983      	cbnz	r3, 80047a2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8004782:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004786:	2201      	movs	r2, #1
 8004788:	7859      	ldrb	r1, [r3, #1]
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 800478c:	205c      	movs	r0, #92	; 0x5c
 800478e:	fb00 3004 	mla	r0, r0, r4, r3
 8004792:	f7fe ffb1 	bl	80036f8 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8004796:	b9b8      	cbnz	r0, 80047c8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8004798:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800479a:	2202      	movs	r2, #2
 800479c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 80047a0:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80047a4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80047a8:	7859      	ldrb	r1, [r3, #1]
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 80047ac:	205c      	movs	r0, #92	; 0x5c
 80047ae:	fb00 3004 	mla	r0, r0, r4, r3
 80047b2:	f7ff f80d 	bl	80037d0 <MX25LM51245G_EnableMemoryMappedModeDTR>
 80047b6:	b950      	cbnz	r0, 80047ce <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 80047ba:	2202      	movs	r2, #2
 80047bc:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80047c0:	e7ee      	b.n	80047a0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 80047c2:	f06f 0001 	mvn.w	r0, #1
}
 80047c6:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80047c8:	f06f 0004 	mvn.w	r0, #4
 80047cc:	e7e8      	b.n	80047a0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80047ce:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80047d2:	e7e5      	b.n	80047a0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 80047d4:	2400234c 	.word	0x2400234c
 80047d8:	24002354 	.word	0x24002354

080047dc <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80047dc:	b990      	cbnz	r0, 8004804 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 80047de:	b510      	push	{r4, lr}
 80047e0:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 80047e4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d10e      	bne.n	800480a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 80047ee:	205c      	movs	r0, #92	; 0x5c
 80047f0:	fb00 3004 	mla	r0, r0, r4, r3
 80047f4:	f002 fac6 	bl	8006d84 <HAL_OSPI_Abort>
 80047f8:	b950      	cbnz	r0, 8004810 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8004802:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004804:	f06f 0001 	mvn.w	r0, #1
}
 8004808:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800480a:	f06f 001a 	mvn.w	r0, #26
 800480e:	e7f8      	b.n	8004802 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8004810:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004814:	e7f5      	b.n	8004802 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8004816:	bf00      	nop
 8004818:	2400234c 	.word	0x2400234c
 800481c:	24002354 	.word	0x24002354

08004820 <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004820:	bb08      	cbnz	r0, 8004866 <BSP_OSPI_NOR_DeInit+0x46>
{
 8004822:	b510      	push	{r4, lr}
 8004824:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <BSP_OSPI_NOR_DeInit+0x54>)
 8004828:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d013      	beq.n	8004858 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <BSP_OSPI_NOR_DeInit+0x54>)
 8004832:	2200      	movs	r2, #0
 8004834:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8004838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800483c:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800483e:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <BSP_OSPI_NOR_DeInit+0x58>)
 8004842:	225c      	movs	r2, #92	; 0x5c
 8004844:	fb02 3404 	mla	r4, r2, r4, r3
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff fde3 	bl	8004414 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800484e:	4620      	mov	r0, r4
 8004850:	f001 ffe6 	bl	8006820 <HAL_OSPI_DeInit>
 8004854:	b950      	cbnz	r0, 800486c <BSP_OSPI_NOR_DeInit+0x4c>
}
 8004856:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8004858:	f7ff ffc0 	bl	80047dc <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800485c:	2800      	cmp	r0, #0
 800485e:	d0e7      	beq.n	8004830 <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004860:	f06f 0004 	mvn.w	r0, #4
 8004864:	e7f7      	b.n	8004856 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8004866:	f06f 0001 	mvn.w	r0, #1
}
 800486a:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 800486c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004870:	e7f1      	b.n	8004856 <BSP_OSPI_NOR_DeInit+0x36>
 8004872:	bf00      	nop
 8004874:	2400234c 	.word	0x2400234c
 8004878:	24002354 	.word	0x24002354

0800487c <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800487c:	2800      	cmp	r0, #0
 800487e:	d141      	bne.n	8004904 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	460d      	mov	r5, r1
 8004884:	4616      	mov	r6, r2
 8004886:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800488a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d03b      	beq.n	800490a <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8004892:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8004894:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d00b      	beq.n	80048b6 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800489e:	2901      	cmp	r1, #1
 80048a0:	d025      	beq.n	80048ee <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 80048a2:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80048ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80048b0:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80048b2:	70a6      	strb	r6, [r4, #2]
}
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80048b6:	2901      	cmp	r1, #1
 80048b8:	d105      	bne.n	80048c6 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80048bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80048c0:	789b      	ldrb	r3, [r3, #2]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01c      	beq.n	8004900 <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7ff fdf6 	bl	80044b8 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80048cc:	2800      	cmp	r0, #0
 80048ce:	bf08      	it	eq
 80048d0:	2d01      	cmpeq	r5, #1
 80048d2:	d10f      	bne.n	80048f4 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 80048d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	b91b      	cbnz	r3, 80048e6 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff feac 	bl	800463c <OSPI_NOR_EnterDOPIMode>
 80048e4:	e006      	b.n	80048f4 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff fe44 	bl	8004574 <OSPI_NOR_EnterSOPIMode>
 80048ec:	e002      	b.n	80048f4 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80048ee:	b922      	cbnz	r2, 80048fa <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80048f0:	f7ff fe40 	bl	8004574 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d1dd      	bne.n	80048b4 <BSP_OSPI_NOR_ConfigFlash+0x38>
 80048f8:	e7d4      	b.n	80048a4 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 80048fa:	f7ff fe9f 	bl	800463c <OSPI_NOR_EnterDOPIMode>
 80048fe:	e7f9      	b.n	80048f4 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 8004900:	2000      	movs	r0, #0
 8004902:	e7cf      	b.n	80048a4 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8004904:	f06f 0001 	mvn.w	r0, #1
}
 8004908:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800490a:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800490e:	e7d1      	b.n	80048b4 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8004910:	2400234c 	.word	0x2400234c

08004914 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8004914:	2800      	cmp	r0, #0
 8004916:	d13f      	bne.n	8004998 <BSP_OSPI_NOR_Init+0x84>
{
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	b08e      	sub	sp, #56	; 0x38
 800491c:	460d      	mov	r5, r1
 800491e:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8004920:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <BSP_OSPI_NOR_Init+0x9c>)
 8004922:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8004926:	b113      	cbz	r3, 800492e <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8004928:	2000      	movs	r0, #0
}
 800492a:	b00e      	add	sp, #56	; 0x38
 800492c:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800492e:	4e21      	ldr	r6, [pc, #132]	; (80049b4 <BSP_OSPI_NOR_Init+0xa0>)
 8004930:	235c      	movs	r3, #92	; 0x5c
 8004932:	fb03 6600 	mla	r6, r3, r0, r6
 8004936:	4630      	mov	r0, r6
 8004938:	f7ff fc0e 	bl	8004158 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800493c:	a805      	add	r0, sp, #20
 800493e:	f7fe fe43 	bl	80035c8 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 8004942:	2303      	movs	r3, #3
 8004944:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8004946:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800494c:	b313      	cbz	r3, 8004994 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004954:	2300      	movs	r3, #0
 8004956:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8004958:	786b      	ldrb	r3, [r5, #1]
 800495a:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800495c:	a901      	add	r1, sp, #4
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff fede 	bl	8004720 <MX_OSPI_NOR_Init>
 8004964:	b9d8      	cbnz	r0, 800499e <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff fd04 	bl	8004374 <OSPI_NOR_ResetMemory>
 800496c:	b9d0      	cbnz	r0, 80049a4 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <BSP_OSPI_NOR_Init+0x9c>)
 8004970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004974:	789a      	ldrb	r2, [r3, #2]
 8004976:	7859      	ldrb	r1, [r3, #1]
 8004978:	4630      	mov	r0, r6
 800497a:	f7fe fe3e 	bl	80035fa <MX25LM51245G_AutoPollingMemReady>
 800497e:	b9a0      	cbnz	r0, 80049aa <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004980:	786a      	ldrb	r2, [r5, #1]
 8004982:	7829      	ldrb	r1, [r5, #0]
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff ff79 	bl	800487c <BSP_OSPI_NOR_ConfigFlash>
 800498a:	2800      	cmp	r0, #0
 800498c:	d0cd      	beq.n	800492a <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800498e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004992:	e7ca      	b.n	800492a <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e7dc      	b.n	8004952 <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8004998:	f06f 0001 	mvn.w	r0, #1
}
 800499c:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800499e:	f06f 0003 	mvn.w	r0, #3
 80049a2:	e7c2      	b.n	800492a <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80049a4:	f06f 0004 	mvn.w	r0, #4
 80049a8:	e7bf      	b.n	800492a <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80049aa:	f06f 0004 	mvn.w	r0, #4
 80049ae:	e7bc      	b.n	800492a <BSP_OSPI_NOR_Init+0x16>
 80049b0:	2400234c 	.word	0x2400234c
 80049b4:	24002354 	.word	0x24002354

080049b8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80049c2:	2370      	movs	r3, #112	; 0x70
 80049c4:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <FT5336_Probe+0x70>)
 80049ca:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <FT5336_Probe+0x74>)
 80049ce:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <FT5336_Probe+0x78>)
 80049d2:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <FT5336_Probe+0x7c>)
 80049d6:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80049d8:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <FT5336_Probe+0x80>)
 80049da:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80049dc:	a902      	add	r1, sp, #8
 80049de:	4817      	ldr	r0, [pc, #92]	; (8004a3c <FT5336_Probe+0x84>)
 80049e0:	f7fe fd50 	bl	8003484 <FT5336_RegisterBusIO>
 80049e4:	b998      	cbnz	r0, 8004a0e <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80049e6:	a901      	add	r1, sp, #4
 80049e8:	4814      	ldr	r0, [pc, #80]	; (8004a3c <FT5336_Probe+0x84>)
 80049ea:	f7fe fc8d 	bl	8003308 <FT5336_ReadID>
 80049ee:	b988      	cbnz	r0, 8004a14 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	2b51      	cmp	r3, #81	; 0x51
 80049f4:	d111      	bne.n	8004a1a <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80049f6:	4811      	ldr	r0, [pc, #68]	; (8004a3c <FT5336_Probe+0x84>)
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <FT5336_Probe+0x88>)
 80049fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <FT5336_Probe+0x8c>)
 8004a00:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <FT5336_Probe+0x90>)
 8004a02:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4798      	blx	r3
 8004a08:	b950      	cbnz	r0, 8004a20 <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 8004a0a:	b008      	add	sp, #32
 8004a0c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 8004a0e:	f06f 0007 	mvn.w	r0, #7
 8004a12:	e7fa      	b.n	8004a0a <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a14:	f06f 0004 	mvn.w	r0, #4
 8004a18:	e7f7      	b.n	8004a0a <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004a1a:	f06f 0006 	mvn.w	r0, #6
 8004a1e:	e7f4      	b.n	8004a0a <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a20:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8004a24:	e7f1      	b.n	8004a0a <FT5336_Probe+0x52>
 8004a26:	bf00      	nop
 8004a28:	08004099 	.word	0x08004099
 8004a2c:	08004029 	.word	0x08004029
 8004a30:	08004121 	.word	0x08004121
 8004a34:	080040f1 	.word	0x080040f1
 8004a38:	08004151 	.word	0x08004151
 8004a3c:	240023b0 	.word	0x240023b0
 8004a40:	240023d8 	.word	0x240023d8
 8004a44:	2400000c 	.word	0x2400000c
 8004a48:	240023fc 	.word	0x240023fc

08004a4c <BSP_TS_Init>:
{
 8004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4e:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d150      	bne.n	8004af6 <BSP_TS_Init+0xaa>
 8004a54:	460c      	mov	r4, r1
 8004a56:	4605      	mov	r5, r0
 8004a58:	680b      	ldr	r3, [r1, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d04e      	beq.n	8004afc <BSP_TS_Init+0xb0>
 8004a5e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004a62:	d84e      	bhi.n	8004b02 <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004a64:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d04e      	beq.n	8004b08 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004a6a:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 8004a6e:	d84e      	bhi.n	8004b0e <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8004a70:	68c9      	ldr	r1, [r1, #12]
 8004a72:	4293      	cmp	r3, r2
 8004a74:	bf28      	it	cs
 8004a76:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d84b      	bhi.n	8004b14 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8004a7c:	f7ff ff9c 	bl	80049b8 <FT5336_Probe>
 8004a80:	4606      	mov	r6, r0
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d149      	bne.n	8004b1a <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004a86:	6820      	ldr	r0, [r4, #0]
 8004a88:	4925      	ldr	r1, [pc, #148]	; (8004b20 <BSP_TS_Init+0xd4>)
 8004a8a:	016a      	lsls	r2, r5, #5
 8004a8c:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 8004a90:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8004a96:	68a2      	ldr	r2, [r4, #8]
 8004a98:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8004a9a:	68e2      	ldr	r2, [r4, #12]
 8004a9c:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004a9e:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <BSP_TS_Init+0xd8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	a901      	add	r1, sp, #4
 8004aa6:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <BSP_TS_Init+0xdc>)
 8004aa8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8004aac:	4798      	blx	r3
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	db1e      	blt.n	8004af0 <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <BSP_TS_Init+0xd4>)
 8004ab4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004ab8:	9a02      	ldr	r2, [sp, #8]
 8004aba:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004abc:	9a03      	ldr	r2, [sp, #12]
 8004abe:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	b113      	cbz	r3, 8004aca <BSP_TS_Init+0x7e>
}
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	b005      	add	sp, #20
 8004ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	68e1      	ldr	r1, [r4, #12]
 8004ace:	440a      	add	r2, r1
 8004ad0:	3201      	adds	r2, #1
 8004ad2:	4913      	ldr	r1, [pc, #76]	; (8004b20 <BSP_TS_Init+0xd4>)
 8004ad4:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 8004ad8:	3006      	adds	r0, #6
 8004ada:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	68e7      	ldr	r7, [r4, #12]
 8004ae2:	443a      	add	r2, r7
 8004ae4:	3201      	adds	r2, #1
 8004ae6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004aea:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004aec:	3301      	adds	r3, #1
 8004aee:	e7e8      	b.n	8004ac2 <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004af0:	f06f 0604 	mvn.w	r6, #4
 8004af4:	e7e6      	b.n	8004ac4 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 8004af6:	f06f 0601 	mvn.w	r6, #1
 8004afa:	e7e3      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004afc:	f06f 0601 	mvn.w	r6, #1
 8004b00:	e7e0      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004b02:	f06f 0601 	mvn.w	r6, #1
 8004b06:	e7dd      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004b08:	f06f 0601 	mvn.w	r6, #1
 8004b0c:	e7da      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004b0e:	f06f 0601 	mvn.w	r6, #1
 8004b12:	e7d7      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004b14:	f06f 0601 	mvn.w	r6, #1
 8004b18:	e7d4      	b.n	8004ac4 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 8004b1a:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 8004b1e:	e7d1      	b.n	8004ac4 <BSP_TS_Init+0x78>
 8004b20:	240023dc 	.word	0x240023dc
 8004b24:	240023fc 	.word	0x240023fc
 8004b28:	240023d8 	.word	0x240023d8

08004b2c <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d178      	bne.n	8004c22 <BSP_TS_GetState+0xf6>
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	460c      	mov	r4, r1
 8004b36:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004b38:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <BSP_TS_GetState+0xfc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	a901      	add	r1, sp, #4
 8004b40:	4a3a      	ldr	r2, [pc, #232]	; (8004c2c <BSP_TS_GetState+0x100>)
 8004b42:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004b46:	4798      	blx	r3
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	db66      	blt.n	8004c1a <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 8004b4c:	9e01      	ldr	r6, [sp, #4]
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d059      	beq.n	8004c06 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 8004b52:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 8004b54:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004b58:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004b5c:	6899      	ldr	r1, [r3, #8]
 8004b5e:	f011 0f08 	tst.w	r1, #8
 8004b62:	d141      	bne.n	8004be8 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 8004b64:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 8004b66:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8004b68:	f011 0f02 	tst.w	r1, #2
 8004b6c:	d005      	beq.n	8004b7a <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004b70:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004b7a:	f011 0f04 	tst.w	r1, #4
 8004b7e:	d005      	beq.n	8004b8c <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8004b80:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004b82:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 8004b86:	6952      	ldr	r2, [r2, #20]
 8004b88:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004b8c:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004b8e:	0168      	lsls	r0, r5, #5
 8004b90:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 8004b94:	5810      	ldr	r0, [r2, r0]
 8004b96:	fb00 f303 	mul.w	r3, r0, r3
 8004b9a:	690a      	ldr	r2, [r1, #16]
 8004b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba0:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004ba2:	684a      	ldr	r2, [r1, #4]
 8004ba4:	fb0c f202 	mul.w	r2, ip, r2
 8004ba8:	6948      	ldr	r0, [r1, #20]
 8004baa:	fbb2 f2f0 	udiv	r2, r2, r0
 8004bae:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 8004bb0:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8004bb2:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004bb4:	4283      	cmp	r3, r0
 8004bb6:	d91a      	bls.n	8004bee <BSP_TS_GetState+0xc2>
 8004bb8:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004bba:	491d      	ldr	r1, [pc, #116]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004bbc:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8004bc0:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004bc2:	428a      	cmp	r2, r1
 8004bc4:	d915      	bls.n	8004bf2 <BSP_TS_GetState+0xc6>
 8004bc6:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004bc8:	4919      	ldr	r1, [pc, #100]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004bca:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8004bce:	68c9      	ldr	r1, [r1, #12]
 8004bd0:	42b1      	cmp	r1, r6
 8004bd2:	d301      	bcc.n	8004bd8 <BSP_TS_GetState+0xac>
 8004bd4:	4291      	cmp	r1, r2
 8004bd6:	d20e      	bcs.n	8004bf6 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004bda:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 8004bde:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004be0:	68a3      	ldr	r3, [r4, #8]
 8004be2:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 8004be4:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004be6:	e01a      	b.n	8004c1e <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 8004be8:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 8004bea:	4603      	mov	r3, r0
 8004bec:	e7bc      	b.n	8004b68 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004bee:	1ac6      	subs	r6, r0, r3
 8004bf0:	e7e3      	b.n	8004bba <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004bf2:	1a8a      	subs	r2, r1, r2
 8004bf4:	e7e8      	b.n	8004bc8 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004bf6:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004bfa:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8004bfe:	69eb      	ldr	r3, [r5, #28]
 8004c00:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 8004c02:	2000      	movs	r0, #0
 8004c04:	e00b      	b.n	8004c1e <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 8004c06:	2000      	movs	r0, #0
 8004c08:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <BSP_TS_GetState+0x104>)
 8004c0c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8004c10:	69ab      	ldr	r3, [r5, #24]
 8004c12:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004c14:	69eb      	ldr	r3, [r5, #28]
 8004c16:	60a3      	str	r3, [r4, #8]
 8004c18:	e001      	b.n	8004c1e <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c1a:	f06f 0004 	mvn.w	r0, #4
}
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8004c22:	f06f 0001 	mvn.w	r0, #1
}
 8004c26:	4770      	bx	lr
 8004c28:	240023fc 	.word	0x240023fc
 8004c2c:	240023d8 	.word	0x240023d8
 8004c30:	240023dc 	.word	0x240023dc

08004c34 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <SystemInit+0x64>)
 8004c36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <SystemInit+0x68>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	4913      	ldr	r1, [pc, #76]	; (8004ca0 <SystemInit+0x6c>)
 8004c54:	4001      	ands	r1, r0
 8004c56:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004c58:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004c5a:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004c5c:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004c74:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <SystemInit+0x70>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <SystemInit+0x74>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c84:	d203      	bcs.n	8004c8e <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <SystemInit+0x78>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c8e:	4b02      	ldr	r3, [pc, #8]	; (8004c98 <SystemInit+0x64>)
 8004c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c94:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004c96:	4770      	bx	lr
 8004c98:	e000ed00 	.word	0xe000ed00
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	eaf6ed7f 	.word	0xeaf6ed7f
 8004ca4:	5c001000 	.word	0x5c001000
 8004ca8:	ffff0000 	.word	0xffff0000
 8004cac:	51008000 	.word	0x51008000

08004cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	f000 f850 	bl	8004d58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004cb8:	f002 fc8c 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <HAL_Init+0x4c>)
 8004cbe:	698b      	ldr	r3, [r1, #24]
 8004cc0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004cc4:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <HAL_Init+0x50>)
 8004cc6:	5cd3      	ldrb	r3, [r2, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004cce:	698b      	ldr	r3, [r1, #24]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	fa20 f303 	lsr.w	r3, r0, r3
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <HAL_Init+0x54>)
 8004ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_Init+0x58>)
 8004ce4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fd fae8 	bl	80022bc <HAL_InitTick>
 8004cec:	b110      	cbz	r0, 8004cf4 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8004cee:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd10      	pop	{r4, pc}
 8004cf4:	4604      	mov	r4, r0
  HAL_MspInit();
 8004cf6:	f7fd f8b7 	bl	8001e68 <HAL_MspInit>
  return HAL_OK;
 8004cfa:	e7f9      	b.n	8004cf0 <HAL_Init+0x40>
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	0801ad64 	.word	0x0801ad64
 8004d04:	24000040 	.word	0x24000040
 8004d08:	2400003c 	.word	0x2400003c

08004d0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <HAL_IncTick+0x10>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4a03      	ldr	r2, [pc, #12]	; (8004d20 <HAL_IncTick+0x14>)
 8004d12:	6811      	ldr	r1, [r2, #0]
 8004d14:	440b      	add	r3, r1
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	24000044 	.word	0x24000044
 8004d20:	24002400 	.word	0x24002400

08004d24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004d24:	4b01      	ldr	r3, [pc, #4]	; (8004d2c <HAL_GetTick+0x8>)
 8004d26:	6818      	ldr	r0, [r3, #0]
}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	24002400 	.word	0x24002400

08004d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7ff fff6 	bl	8004d24 <HAL_GetTick>
 8004d38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d3e:	d002      	beq.n	8004d46 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <HAL_Delay+0x24>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d46:	f7ff ffed 	bl	8004d24 <HAL_GetTick>
 8004d4a:	1b40      	subs	r0, r0, r5
 8004d4c:	42a0      	cmp	r0, r4
 8004d4e:	d3fa      	bcc.n	8004d46 <HAL_Delay+0x16>
  {
  }
}
 8004d50:	bd38      	pop	{r3, r4, r5, pc}
 8004d52:	bf00      	nop
 8004d54:	24000044 	.word	0x24000044

08004d58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d58:	4906      	ldr	r1, [pc, #24]	; (8004d74 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004d5a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d64:	0200      	lsls	r0, r0, #8
 8004d66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d6a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004d6c:	4a02      	ldr	r2, [pc, #8]	; (8004d78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004d6e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004d70:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	05fa0000 	.word	0x05fa0000

08004d7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d7e:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_NVIC_SetPriority+0x60>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d86:	f1c3 0c07 	rsb	ip, r3, #7
 8004d8a:	f1bc 0f04 	cmp.w	ip, #4
 8004d8e:	bf28      	it	cs
 8004d90:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d94:	f103 0e04 	add.w	lr, r3, #4
 8004d98:	f1be 0f06 	cmp.w	lr, #6
 8004d9c:	d914      	bls.n	8004dc8 <HAL_NVIC_SetPriority+0x4c>
 8004d9e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da0:	f04f 3eff 	mov.w	lr, #4294967295
 8004da4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004da8:	ea21 010c 	bic.w	r1, r1, ip
 8004dac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dae:	fa0e f303 	lsl.w	r3, lr, r3
 8004db2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004db8:	2800      	cmp	r0, #0
 8004dba:	db07      	blt.n	8004dcc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dbc:	0109      	lsls	r1, r1, #4
 8004dbe:	b2c9      	uxtb	r1, r1
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_NVIC_SetPriority+0x64>)
 8004dc2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004dc4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e7e9      	b.n	8004da0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	f000 000f 	and.w	r0, r0, #15
 8004dd0:	0109      	lsls	r1, r1, #4
 8004dd2:	b2c9      	uxtb	r1, r1
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_NVIC_SetPriority+0x68>)
 8004dd6:	5419      	strb	r1, [r3, r0]
 8004dd8:	e7f4      	b.n	8004dc4 <HAL_NVIC_SetPriority+0x48>
 8004dda:	bf00      	nop
 8004ddc:	e000ed00 	.word	0xe000ed00
 8004de0:	e000e400 	.word	0xe000e400
 8004de4:	e000ed14 	.word	0xe000ed14

08004de8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004de8:	2800      	cmp	r0, #0
 8004dea:	db07      	blt.n	8004dfc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dec:	f000 021f 	and.w	r2, r0, #31
 8004df0:	0940      	lsrs	r0, r0, #5
 8004df2:	2301      	movs	r3, #1
 8004df4:	4093      	lsls	r3, r2
 8004df6:	4a02      	ldr	r2, [pc, #8]	; (8004e00 <HAL_NVIC_EnableIRQ+0x18>)
 8004df8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e100 	.word	0xe000e100

08004e04 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004e04:	2800      	cmp	r0, #0
 8004e06:	db0c      	blt.n	8004e22 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e08:	f000 021f 	and.w	r2, r0, #31
 8004e0c:	0940      	lsrs	r0, r0, #5
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4093      	lsls	r3, r2
 8004e12:	3020      	adds	r0, #32
 8004e14:	4a03      	ldr	r2, [pc, #12]	; (8004e24 <HAL_NVIC_DisableIRQ+0x20>)
 8004e16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004e1e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004e22:	4770      	bx	lr
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004e28:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_MPU_Disable+0x18>)
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004e44:	f040 0001 	orr.w	r0, r0, #1
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_MPU_Enable+0x1c>)
 8004e4a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004e5a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004e5e:	4770      	bx	lr
 8004e60:	e000ed00 	.word	0xe000ed00

08004e64 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004e64:	7842      	ldrb	r2, [r0, #1]
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <HAL_MPU_ConfigRegion+0x5c>)
 8004e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004e6c:	7803      	ldrb	r3, [r0, #0]
 8004e6e:	b1fb      	cbz	r3, 8004eb0 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004e70:	6843      	ldr	r3, [r0, #4]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <HAL_MPU_ConfigRegion+0x5c>)
 8004e74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e78:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e7a:	7ac3      	ldrb	r3, [r0, #11]
 8004e7c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e7e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e82:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e84:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e88:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e8a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e8e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e90:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e94:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e9a:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ea0:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ea2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004ea6:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ea8:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004eaa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004eae:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_MPU_ConfigRegion+0x5c>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d038      	beq.n	8004f3a <HAL_CRC_Init+0x76>
{
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ecc:	7f43      	ldrb	r3, [r0, #29]
 8004ece:	b31b      	cbz	r3, 8004f18 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ed4:	7923      	ldrb	r3, [r4, #4]
 8004ed6:	bb1b      	cbnz	r3, 8004f20 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_CRC_Init+0x7c>)
 8004edc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	6893      	ldr	r3, [r2, #8]
 8004ee2:	f023 0318 	bic.w	r3, r3, #24
 8004ee6:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004ee8:	7963      	ldrb	r3, [r4, #5]
 8004eea:	bb13      	cbnz	r3, 8004f32 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004efc:	6961      	ldr	r1, [r4, #20]
 8004efe:	430b      	orrs	r3, r1
 8004f00:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	6893      	ldr	r3, [r2, #8]
 8004f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0a:	69a1      	ldr	r1, [r4, #24]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f10:	2301      	movs	r3, #1
 8004f12:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 8004f14:	2000      	movs	r0, #0
}
 8004f16:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8004f18:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004f1a:	f7fc ffbf 	bl	8001e9c <HAL_CRC_MspInit>
 8004f1e:	e7d7      	b.n	8004ed0 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004f20:	68e2      	ldr	r2, [r4, #12]
 8004f22:	68a1      	ldr	r1, [r4, #8]
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 f80d 	bl	8004f44 <HAL_CRCEx_Polynomial_Set>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d0dc      	beq.n	8004ee8 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e7f1      	b.n	8004f16 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	611a      	str	r2, [r3, #16]
 8004f38:	e7dc      	b.n	8004ef4 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	04c11db7 	.word	0x04c11db7

08004f44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f44:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f46:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f48:	461c      	mov	r4, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b134      	cbz	r4, 8004f5c <HAL_CRCEx_Polynomial_Set+0x18>
 8004f4e:	f003 0c1f 	and.w	ip, r3, #31
 8004f52:	fa21 fc0c 	lsr.w	ip, r1, ip
 8004f56:	f01c 0f01 	tst.w	ip, #1
 8004f5a:	d0f5      	beq.n	8004f48 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004f5c:	2a18      	cmp	r2, #24
 8004f5e:	d822      	bhi.n	8004fa6 <HAL_CRCEx_Polynomial_Set+0x62>
 8004f60:	e8df f002 	tbb	[pc, r2]
 8004f64:	2121210f 	.word	0x2121210f
 8004f68:	21212121 	.word	0x21212121
 8004f6c:	2121211d 	.word	0x2121211d
 8004f70:	21212121 	.word	0x21212121
 8004f74:	21212119 	.word	0x21212119
 8004f78:	21212121 	.word	0x21212121
 8004f7c:	0d          	.byte	0x0d
 8004f7d:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d815      	bhi.n	8004fae <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f82:	6803      	ldr	r3, [r0, #0]
 8004f84:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f86:	6801      	ldr	r1, [r0, #0]
 8004f88:	688b      	ldr	r3, [r1, #8]
 8004f8a:	f023 0318 	bic.w	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	608a      	str	r2, [r1, #8]
 8004f92:	2000      	movs	r0, #0
 8004f94:	e008      	b.n	8004fa8 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d9f3      	bls.n	8004f82 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e004      	b.n	8004fa8 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d9ef      	bls.n	8004f82 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 8004fa6:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 8004fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fac:	4770      	bx	lr
        status =   HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e7fa      	b.n	8004fa8 <HAL_CRCEx_Polynomial_Set+0x64>
	...

08004fb4 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f000 8129 	beq.w	800520c <HAL_DMA_Abort_IT+0x258>
{
 8004fba:	b508      	push	{r3, lr}
 8004fbc:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fbe:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d003      	beq.n	8004fd0 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8004fce:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fd0:	6803      	ldr	r3, [r0, #0]
 8004fd2:	4890      	ldr	r0, [pc, #576]	; (8005214 <HAL_DMA_Abort_IT+0x260>)
 8004fd4:	4990      	ldr	r1, [pc, #576]	; (8005218 <HAL_DMA_Abort_IT+0x264>)
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	bf18      	it	ne
 8004fda:	4283      	cmpne	r3, r0
 8004fdc:	bf0c      	ite	eq
 8004fde:	2101      	moveq	r1, #1
 8004fe0:	2100      	movne	r1, #0
 8004fe2:	d066      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8004fe4:	3030      	adds	r0, #48	; 0x30
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	d063      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8004fea:	3018      	adds	r0, #24
 8004fec:	4283      	cmp	r3, r0
 8004fee:	d060      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8004ff0:	3018      	adds	r0, #24
 8004ff2:	4283      	cmp	r3, r0
 8004ff4:	d05d      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8004ff6:	3018      	adds	r0, #24
 8004ff8:	4283      	cmp	r3, r0
 8004ffa:	d05a      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8004ffc:	3018      	adds	r0, #24
 8004ffe:	4283      	cmp	r3, r0
 8005000:	d057      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005002:	3018      	adds	r0, #24
 8005004:	4283      	cmp	r3, r0
 8005006:	d054      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005008:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800500c:	4283      	cmp	r3, r0
 800500e:	d050      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005010:	3018      	adds	r0, #24
 8005012:	4283      	cmp	r3, r0
 8005014:	d04d      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005016:	3018      	adds	r0, #24
 8005018:	4283      	cmp	r3, r0
 800501a:	d04a      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 800501c:	3018      	adds	r0, #24
 800501e:	4283      	cmp	r3, r0
 8005020:	d047      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005022:	3018      	adds	r0, #24
 8005024:	4283      	cmp	r3, r0
 8005026:	d044      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005028:	3018      	adds	r0, #24
 800502a:	4283      	cmp	r3, r0
 800502c:	d041      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 800502e:	3018      	adds	r0, #24
 8005030:	4283      	cmp	r3, r0
 8005032:	d03e      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
 8005034:	3018      	adds	r0, #24
 8005036:	4283      	cmp	r3, r0
 8005038:	d03b      	beq.n	80050b2 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	f021 010e 	bic.w	r1, r1, #14
 8005040:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8005048:	4973      	ldr	r1, [pc, #460]	; (8005218 <HAL_DMA_Abort_IT+0x264>)
 800504a:	428b      	cmp	r3, r1
 800504c:	bf18      	it	ne
 800504e:	4283      	cmpne	r3, r0
 8005050:	d06a      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005052:	4972      	ldr	r1, [pc, #456]	; (800521c <HAL_DMA_Abort_IT+0x268>)
 8005054:	428b      	cmp	r3, r1
 8005056:	d067      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005058:	3118      	adds	r1, #24
 800505a:	428b      	cmp	r3, r1
 800505c:	d064      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 800505e:	3118      	adds	r1, #24
 8005060:	428b      	cmp	r3, r1
 8005062:	d061      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005064:	3118      	adds	r1, #24
 8005066:	428b      	cmp	r3, r1
 8005068:	d05e      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 800506a:	3118      	adds	r1, #24
 800506c:	428b      	cmp	r3, r1
 800506e:	d05b      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005070:	3118      	adds	r1, #24
 8005072:	428b      	cmp	r3, r1
 8005074:	d058      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005076:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800507a:	428b      	cmp	r3, r1
 800507c:	d054      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 800507e:	3118      	adds	r1, #24
 8005080:	428b      	cmp	r3, r1
 8005082:	d051      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005084:	3118      	adds	r1, #24
 8005086:	428b      	cmp	r3, r1
 8005088:	d04e      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 800508a:	3118      	adds	r1, #24
 800508c:	428b      	cmp	r3, r1
 800508e:	d04b      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005090:	3118      	adds	r1, #24
 8005092:	428b      	cmp	r3, r1
 8005094:	d048      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 8005096:	3118      	adds	r1, #24
 8005098:	428b      	cmp	r3, r1
 800509a:	d045      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 800509c:	3118      	adds	r1, #24
 800509e:	428b      	cmp	r3, r1
 80050a0:	d042      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 80050a2:	3118      	adds	r1, #24
 80050a4:	428b      	cmp	r3, r1
 80050a6:	d03f      	beq.n	8005128 <HAL_DMA_Abort_IT+0x174>
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	f021 0101 	bic.w	r1, r1, #1
 80050ae:	6019      	str	r1, [r3, #0]
 80050b0:	e03e      	b.n	8005130 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 80050b2:	2004      	movs	r0, #4
 80050b4:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80050b8:	bb81      	cbnz	r1, 800511c <HAL_DMA_Abort_IT+0x168>
 80050ba:	4a58      	ldr	r2, [pc, #352]	; (800521c <HAL_DMA_Abort_IT+0x268>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d02d      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050c0:	3218      	adds	r2, #24
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d02a      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050c6:	3218      	adds	r2, #24
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d027      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050cc:	3218      	adds	r2, #24
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d024      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050d2:	3218      	adds	r2, #24
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d021      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050d8:	3218      	adds	r2, #24
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01e      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01a      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050e6:	3218      	adds	r2, #24
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d017      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050ec:	3218      	adds	r2, #24
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d014      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050f2:	3218      	adds	r2, #24
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d011      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050f8:	3218      	adds	r2, #24
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 80050fe:	3218      	adds	r2, #24
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 8005104:	3218      	adds	r2, #24
 8005106:	4293      	cmp	r3, r2
 8005108:	d008      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 800510a:	3218      	adds	r2, #24
 800510c:	4293      	cmp	r3, r2
 800510e:	d005      	beq.n	800511c <HAL_DMA_Abort_IT+0x168>
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005118:	2000      	movs	r0, #0
 800511a:	e758      	b.n	8004fce <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005124:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8005126:	e752      	b.n	8004fce <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	f021 0101 	bic.w	r1, r1, #1
 800512e:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	4838      	ldr	r0, [pc, #224]	; (8005214 <HAL_DMA_Abort_IT+0x260>)
 8005134:	4938      	ldr	r1, [pc, #224]	; (8005218 <HAL_DMA_Abort_IT+0x264>)
 8005136:	428b      	cmp	r3, r1
 8005138:	bf18      	it	ne
 800513a:	4283      	cmpne	r3, r0
 800513c:	d042      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800513e:	3118      	adds	r1, #24
 8005140:	428b      	cmp	r3, r1
 8005142:	d03f      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005144:	3118      	adds	r1, #24
 8005146:	428b      	cmp	r3, r1
 8005148:	d03c      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800514a:	3118      	adds	r1, #24
 800514c:	428b      	cmp	r3, r1
 800514e:	d039      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005150:	3118      	adds	r1, #24
 8005152:	428b      	cmp	r3, r1
 8005154:	d036      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005156:	3118      	adds	r1, #24
 8005158:	428b      	cmp	r3, r1
 800515a:	d033      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800515c:	3118      	adds	r1, #24
 800515e:	428b      	cmp	r3, r1
 8005160:	d030      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005162:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005166:	428b      	cmp	r3, r1
 8005168:	d02c      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800516a:	3118      	adds	r1, #24
 800516c:	428b      	cmp	r3, r1
 800516e:	d029      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005170:	3118      	adds	r1, #24
 8005172:	428b      	cmp	r3, r1
 8005174:	d026      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005176:	3118      	adds	r1, #24
 8005178:	428b      	cmp	r3, r1
 800517a:	d023      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800517c:	3118      	adds	r1, #24
 800517e:	428b      	cmp	r3, r1
 8005180:	d020      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005182:	3118      	adds	r1, #24
 8005184:	428b      	cmp	r3, r1
 8005186:	d01d      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005188:	3118      	adds	r1, #24
 800518a:	428b      	cmp	r3, r1
 800518c:	d01a      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800518e:	3118      	adds	r1, #24
 8005190:	428b      	cmp	r3, r1
 8005192:	d017      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 8005194:	4922      	ldr	r1, [pc, #136]	; (8005220 <HAL_DMA_Abort_IT+0x26c>)
 8005196:	428b      	cmp	r3, r1
 8005198:	d014      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 800519a:	3114      	adds	r1, #20
 800519c:	428b      	cmp	r3, r1
 800519e:	d011      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051a0:	3114      	adds	r1, #20
 80051a2:	428b      	cmp	r3, r1
 80051a4:	d00e      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051a6:	3114      	adds	r1, #20
 80051a8:	428b      	cmp	r3, r1
 80051aa:	d00b      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051ac:	3114      	adds	r1, #20
 80051ae:	428b      	cmp	r3, r1
 80051b0:	d008      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051b2:	3114      	adds	r1, #20
 80051b4:	428b      	cmp	r3, r1
 80051b6:	d005      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051b8:	3114      	adds	r1, #20
 80051ba:	428b      	cmp	r3, r1
 80051bc:	d002      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x210>
 80051be:	3114      	adds	r1, #20
 80051c0:	428b      	cmp	r3, r1
 80051c2:	d117      	bne.n	80051f4 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051c4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80051c6:	680b      	ldr	r3, [r1, #0]
 80051c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051cc:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ce:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051d0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80051d2:	f003 011f 	and.w	r1, r3, #31
 80051d6:	2301      	movs	r3, #1
 80051d8:	408b      	lsls	r3, r1
 80051da:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051dc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80051de:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80051e0:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80051e2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80051e4:	b133      	cbz	r3, 80051f4 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80051ec:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ee:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80051f0:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80051f2:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80051fa:	2300      	movs	r3, #0
 80051fc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005200:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005202:	b12b      	cbz	r3, 8005210 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
  return HAL_OK;
 8005208:	2000      	movs	r0, #0
 800520a:	e6e0      	b.n	8004fce <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800520c:	2001      	movs	r0, #1
}
 800520e:	4770      	bx	lr
  return HAL_OK;
 8005210:	2000      	movs	r0, #0
 8005212:	e6dc      	b.n	8004fce <HAL_DMA_Abort_IT+0x1a>
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	58025408 	.word	0x58025408

08005224 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005224:	2800      	cmp	r0, #0
 8005226:	d037      	beq.n	8005298 <HAL_DMA2D_Init+0x74>
{
 8005228:	b510      	push	{r4, lr}
 800522a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800522c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02c      	beq.n	800528e <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	680a      	ldr	r2, [r1, #0]
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <HAL_DMA2D_Init+0x78>)
 8005240:	4013      	ands	r3, r2
 8005242:	6862      	ldr	r2, [r4, #4]
 8005244:	69e0      	ldr	r0, [r4, #28]
 8005246:	4302      	orrs	r2, r0
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_DMA2D_Init+0x7c>)
 8005252:	4013      	ands	r3, r2
 8005254:	68a2      	ldr	r2, [r4, #8]
 8005256:	69a0      	ldr	r0, [r4, #24]
 8005258:	4302      	orrs	r2, r0
 800525a:	4313      	orrs	r3, r2
 800525c:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005262:	4b10      	ldr	r3, [pc, #64]	; (80052a4 <HAL_DMA2D_Init+0x80>)
 8005264:	400b      	ands	r3, r1
 8005266:	68e1      	ldr	r1, [r4, #12]
 8005268:	430b      	orrs	r3, r1
 800526a:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800526c:	6821      	ldr	r1, [r4, #0]
 800526e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005270:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005274:	6920      	ldr	r0, [r4, #16]
 8005276:	6962      	ldr	r2, [r4, #20]
 8005278:	0552      	lsls	r2, r2, #21
 800527a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800527e:	4313      	orrs	r3, r2
 8005280:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005282:	2000      	movs	r0, #0
 8005284:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005286:	2301      	movs	r3, #1
 8005288:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800528c:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800528e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8005292:	f7fc fe1d 	bl	8001ed0 <HAL_DMA2D_MspInit>
 8005296:	e7cd      	b.n	8005234 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
}
 800529a:	4770      	bx	lr
 800529c:	fff8ffbf 	.word	0xfff8ffbf
 80052a0:	fffffef8 	.word	0xfffffef8
 80052a4:	ffff0000 	.word	0xffff0000

080052a8 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80052a8:	4770      	bx	lr

080052aa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80052aa:	4770      	bx	lr

080052ac <HAL_DMA2D_IRQHandler>:
{
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80052b0:	6803      	ldr	r3, [r0, #0]
 80052b2:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80052b4:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052b6:	f015 0f01 	tst.w	r5, #1
 80052ba:	d016      	beq.n	80052ea <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80052bc:	f416 7f80 	tst.w	r6, #256	; 0x100
 80052c0:	d013      	beq.n	80052ea <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c8:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80052d2:	6803      	ldr	r3, [r0, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052d8:	2304      	movs	r3, #4
 80052da:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80052de:	2300      	movs	r3, #0
 80052e0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80052e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052e6:	b103      	cbz	r3, 80052ea <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 80052e8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052ea:	f015 0f20 	tst.w	r5, #32
 80052ee:	d018      	beq.n	8005322 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80052f0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80052f4:	d015      	beq.n	8005322 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052fe:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	2220      	movs	r2, #32
 8005304:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800530e:	2304      	movs	r3, #4
 8005310:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8005314:	2300      	movs	r3, #0
 8005316:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800531a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800531c:	b10b      	cbz	r3, 8005322 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800531e:	4620      	mov	r0, r4
 8005320:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005322:	f015 0f08 	tst.w	r5, #8
 8005326:	d018      	beq.n	800535a <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005328:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800532c:	d015      	beq.n	800535a <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	2208      	movs	r2, #8
 800533c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800533e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005340:	f043 0304 	orr.w	r3, r3, #4
 8005344:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005346:	2304      	movs	r3, #4
 8005348:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800534c:	2300      	movs	r3, #0
 800534e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8005352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005354:	b10b      	cbz	r3, 800535a <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8005356:	4620      	mov	r0, r4
 8005358:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800535a:	f015 0f04 	tst.w	r5, #4
 800535e:	d002      	beq.n	8005366 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005360:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8005364:	d120      	bne.n	80053a8 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005366:	f015 0f02 	tst.w	r5, #2
 800536a:	d016      	beq.n	800539a <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800536c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8005370:	d013      	beq.n	800539a <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	6813      	ldr	r3, [r2, #0]
 8005376:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800537a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	2202      	movs	r2, #2
 8005380:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005384:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005386:	2301      	movs	r3, #1
 8005388:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800538c:	2300      	movs	r3, #0
 800538e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8005392:	6a23      	ldr	r3, [r4, #32]
 8005394:	b10b      	cbz	r3, 800539a <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8005396:	4620      	mov	r0, r4
 8005398:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800539a:	f015 0f10 	tst.w	r5, #16
 800539e:	d002      	beq.n	80053a6 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80053a0:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80053a4:	d10c      	bne.n	80053c0 <HAL_DMA2D_IRQHandler+0x114>
}
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b0:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	2204      	movs	r2, #4
 80053b6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff ff75 	bl	80052a8 <HAL_DMA2D_LineEventCallback>
 80053be:	e7d2      	b.n	8005366 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c8:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80053d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d2:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80053da:	2300      	movs	r3, #0
 80053dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff ff62 	bl	80052aa <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80053e6:	e7de      	b.n	80053a6 <HAL_DMA2D_IRQHandler+0xfa>

080053e8 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053e8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d074      	beq.n	80054da <HAL_DMA2D_ConfigLayer+0xf2>
{
 80053f0:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80053f2:	2301      	movs	r3, #1
 80053f4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053f8:	2302      	movs	r3, #2
 80053fa:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80053fe:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8005402:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005406:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005408:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800540a:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800540e:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8005410:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005414:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005416:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800541a:	f1a4 0209 	sub.w	r2, r4, #9
 800541e:	2a01      	cmp	r2, #1
 8005420:	d921      	bls.n	8005466 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005422:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8005426:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800542a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800542c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005430:	bb61      	cbnz	r1, 800548c <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005432:	6804      	ldr	r4, [r0, #0]
 8005434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <HAL_DMA2D_ConfigLayer+0xf8>)
 8005438:	402a      	ands	r2, r5
 800543a:	4313      	orrs	r3, r2
 800543c:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800543e:	6802      	ldr	r2, [r0, #0]
 8005440:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8005444:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005448:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800544a:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	3b09      	subs	r3, #9
 8005450:	2b01      	cmp	r3, #1
 8005452:	d911      	bls.n	8005478 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005454:	2301      	movs	r3, #1
 8005456:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800545a:	2300      	movs	r3, #0
 800545c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 8005460:	4618      	mov	r0, r3
}
 8005462:	bc30      	pop	{r4, r5}
 8005464:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005466:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800546a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800546e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005470:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005474:	4313      	orrs	r3, r2
 8005476:	e7db      	b.n	8005430 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005478:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800547c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005480:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005482:	6802      	ldr	r2, [r0, #0]
 8005484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005488:	6293      	str	r3, [r2, #40]	; 0x28
 800548a:	e7e3      	b.n	8005454 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800548c:	2c0b      	cmp	r4, #11
 800548e:	d01b      	beq.n	80054c8 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005490:	4d14      	ldr	r5, [pc, #80]	; (80054e4 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005492:	6804      	ldr	r4, [r0, #0]
 8005494:	69e2      	ldr	r2, [r4, #28]
 8005496:	ea22 0205 	bic.w	r2, r2, r5
 800549a:	4313      	orrs	r3, r2
 800549c:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800549e:	6802      	ldr	r2, [r0, #0]
 80054a0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80054a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80054a8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80054aa:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	3b09      	subs	r3, #9
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d8cf      	bhi.n	8005454 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80054b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80054b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80054bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80054be:	6802      	ldr	r2, [r0, #0]
 80054c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	6213      	str	r3, [r2, #32]
 80054c6:	e7c5      	b.n	8005454 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80054c8:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80054cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80054d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054d2:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 80054d6:	4d04      	ldr	r5, [pc, #16]	; (80054e8 <HAL_DMA2D_ConfigLayer+0x100>)
 80054d8:	e7db      	b.n	8005492 <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 80054da:	2002      	movs	r0, #2
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	00ccfff0 	.word	0x00ccfff0
 80054e4:	ff33000f 	.word	0xff33000f
 80054e8:	ff3f000f 	.word	0xff3f000f

080054ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80054f0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054f2:	e06b      	b.n	80055cc <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054f6:	005e      	lsls	r6, r3, #1
 80054f8:	2403      	movs	r4, #3
 80054fa:	40b4      	lsls	r4, r6
 80054fc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005500:	68cc      	ldr	r4, [r1, #12]
 8005502:	40b4      	lsls	r4, r6
 8005504:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005506:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005508:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800550a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550e:	684c      	ldr	r4, [r1, #4]
 8005510:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005514:	409c      	lsls	r4, r3
 8005516:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800551a:	6044      	str	r4, [r0, #4]
 800551c:	e068      	b.n	80055f0 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800551e:	08dd      	lsrs	r5, r3, #3
 8005520:	3508      	adds	r5, #8
 8005522:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005526:	f003 0407 	and.w	r4, r3, #7
 800552a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800552e:	240f      	movs	r4, #15
 8005530:	fa04 f40c 	lsl.w	r4, r4, ip
 8005534:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005538:	690c      	ldr	r4, [r1, #16]
 800553a:	fa04 f40c 	lsl.w	r4, r4, ip
 800553e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005542:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005546:	e06b      	b.n	8005620 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005548:	2409      	movs	r4, #9
 800554a:	e000      	b.n	800554e <HAL_GPIO_Init+0x62>
 800554c:	2400      	movs	r4, #0
 800554e:	fa04 f40e 	lsl.w	r4, r4, lr
 8005552:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005554:	f10c 0c02 	add.w	ip, ip, #2
 8005558:	4d69      	ldr	r5, [pc, #420]	; (8005700 <HAL_GPIO_Init+0x214>)
 800555a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800555e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005562:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005564:	43d4      	mvns	r4, r2
 8005566:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800556a:	684f      	ldr	r7, [r1, #4]
 800556c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005570:	d001      	beq.n	8005576 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8005572:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005576:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800557a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800557c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800557e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005582:	684f      	ldr	r7, [r1, #4]
 8005584:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005588:	d001      	beq.n	800558e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800558a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800558e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005592:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005594:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005598:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800559c:	684f      	ldr	r7, [r1, #4]
 800559e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80055a2:	d001      	beq.n	80055a8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80055a4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055a8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80055ac:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055b0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80055b4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055b6:	684e      	ldr	r6, [r1, #4]
 80055b8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80055bc:	d001      	beq.n	80055c2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80055be:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80055ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055cc:	680a      	ldr	r2, [r1, #0]
 80055ce:	fa32 f403 	lsrs.w	r4, r2, r3
 80055d2:	f000 8092 	beq.w	80056fa <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055d6:	f04f 0c01 	mov.w	ip, #1
 80055da:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80055de:	ea1c 0202 	ands.w	r2, ip, r2
 80055e2:	d0f2      	beq.n	80055ca <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055e4:	684c      	ldr	r4, [r1, #4]
 80055e6:	f004 0403 	and.w	r4, r4, #3
 80055ea:	3c01      	subs	r4, #1
 80055ec:	2c01      	cmp	r4, #1
 80055ee:	d981      	bls.n	80054f4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f0:	684c      	ldr	r4, [r1, #4]
 80055f2:	f004 0403 	and.w	r4, r4, #3
 80055f6:	2c03      	cmp	r4, #3
 80055f8:	d00c      	beq.n	8005614 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80055fa:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055fc:	005d      	lsls	r5, r3, #1
 80055fe:	f04f 0c03 	mov.w	ip, #3
 8005602:	fa0c fc05 	lsl.w	ip, ip, r5
 8005606:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800560a:	688c      	ldr	r4, [r1, #8]
 800560c:	40ac      	lsls	r4, r5
 800560e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8005612:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005614:	684c      	ldr	r4, [r1, #4]
 8005616:	f004 0403 	and.w	r4, r4, #3
 800561a:	2c02      	cmp	r4, #2
 800561c:	f43f af7f 	beq.w	800551e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8005620:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005622:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005626:	f04f 0c03 	mov.w	ip, #3
 800562a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800562e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005632:	684c      	ldr	r4, [r1, #4]
 8005634:	f004 0403 	and.w	r4, r4, #3
 8005638:	fa04 f40e 	lsl.w	r4, r4, lr
 800563c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005640:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005642:	684c      	ldr	r4, [r1, #4]
 8005644:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005648:	d0bf      	beq.n	80055ca <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564a:	4c2e      	ldr	r4, [pc, #184]	; (8005704 <HAL_GPIO_Init+0x218>)
 800564c:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 8005650:	f045 0502 	orr.w	r5, r5, #2
 8005654:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 8005658:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 800565c:	f004 0402 	and.w	r4, r4, #2
 8005660:	9401      	str	r4, [sp, #4]
 8005662:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005664:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005668:	f10c 0502 	add.w	r5, ip, #2
 800566c:	4c24      	ldr	r4, [pc, #144]	; (8005700 <HAL_GPIO_Init+0x214>)
 800566e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005672:	f003 0403 	and.w	r4, r3, #3
 8005676:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800567a:	240f      	movs	r4, #15
 800567c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005680:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005684:	4c20      	ldr	r4, [pc, #128]	; (8005708 <HAL_GPIO_Init+0x21c>)
 8005686:	42a0      	cmp	r0, r4
 8005688:	f43f af60 	beq.w	800554c <HAL_GPIO_Init+0x60>
 800568c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005690:	42a0      	cmp	r0, r4
 8005692:	d022      	beq.n	80056da <HAL_GPIO_Init+0x1ee>
 8005694:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005698:	42a0      	cmp	r0, r4
 800569a:	d020      	beq.n	80056de <HAL_GPIO_Init+0x1f2>
 800569c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d01e      	beq.n	80056e2 <HAL_GPIO_Init+0x1f6>
 80056a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d01c      	beq.n	80056e6 <HAL_GPIO_Init+0x1fa>
 80056ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d01a      	beq.n	80056ea <HAL_GPIO_Init+0x1fe>
 80056b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d018      	beq.n	80056ee <HAL_GPIO_Init+0x202>
 80056bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d016      	beq.n	80056f2 <HAL_GPIO_Init+0x206>
 80056c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d014      	beq.n	80056f6 <HAL_GPIO_Init+0x20a>
 80056cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	f43f af39 	beq.w	8005548 <HAL_GPIO_Init+0x5c>
 80056d6:	240a      	movs	r4, #10
 80056d8:	e739      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056da:	2401      	movs	r4, #1
 80056dc:	e737      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056de:	2402      	movs	r4, #2
 80056e0:	e735      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056e2:	2403      	movs	r4, #3
 80056e4:	e733      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056e6:	2404      	movs	r4, #4
 80056e8:	e731      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056ea:	2405      	movs	r4, #5
 80056ec:	e72f      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056ee:	2406      	movs	r4, #6
 80056f0:	e72d      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056f2:	2407      	movs	r4, #7
 80056f4:	e72b      	b.n	800554e <HAL_GPIO_Init+0x62>
 80056f6:	2408      	movs	r4, #8
 80056f8:	e729      	b.n	800554e <HAL_GPIO_Init+0x62>
  }
}
 80056fa:	b003      	add	sp, #12
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fe:	bf00      	nop
 8005700:	58000400 	.word	0x58000400
 8005704:	58024400 	.word	0x58024400
 8005708:	58020000 	.word	0x58020000

0800570c <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 800570c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800570e:	fa31 f203 	lsrs.w	r2, r1, r3
 8005712:	f000 809d 	beq.w	8005850 <HAL_GPIO_DeInit+0x144>
{
 8005716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005718:	e02e      	b.n	8005778 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800571a:	2509      	movs	r5, #9
 800571c:	e000      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 800571e:	2500      	movs	r5, #0
 8005720:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005724:	45a4      	cmp	ip, r4
 8005726:	d072      	beq.n	800580e <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005728:	6804      	ldr	r4, [r0, #0]
 800572a:	005d      	lsls	r5, r3, #1
 800572c:	f04f 0c03 	mov.w	ip, #3
 8005730:	fa0c fc05 	lsl.w	ip, ip, r5
 8005734:	ea44 040c 	orr.w	r4, r4, ip
 8005738:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800573a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800573e:	f10e 0e08 	add.w	lr, lr, #8
 8005742:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8005746:	f003 0507 	and.w	r5, r3, #7
 800574a:	00ae      	lsls	r6, r5, #2
 800574c:	250f      	movs	r5, #15
 800574e:	40b5      	lsls	r5, r6
 8005750:	ea24 0405 	bic.w	r4, r4, r5
 8005754:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005758:	68c4      	ldr	r4, [r0, #12]
 800575a:	ea24 040c 	bic.w	r4, r4, ip
 800575e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005760:	6844      	ldr	r4, [r0, #4]
 8005762:	ea24 0202 	bic.w	r2, r4, r2
 8005766:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005768:	6882      	ldr	r2, [r0, #8]
 800576a:	ea22 020c 	bic.w	r2, r2, ip
 800576e:	6082      	str	r2, [r0, #8]
    }

    position++;
 8005770:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8005772:	fa31 f203 	lsrs.w	r2, r1, r3
 8005776:	d06a      	beq.n	800584e <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800577c:	ea12 0e01 	ands.w	lr, r2, r1
 8005780:	d0f6      	beq.n	8005770 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005782:	089e      	lsrs	r6, r3, #2
 8005784:	1cb5      	adds	r5, r6, #2
 8005786:	4c33      	ldr	r4, [pc, #204]	; (8005854 <HAL_GPIO_DeInit+0x148>)
 8005788:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800578c:	f003 0c03 	and.w	ip, r3, #3
 8005790:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005794:	250f      	movs	r5, #15
 8005796:	fa05 f70c 	lsl.w	r7, r5, ip
 800579a:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800579c:	4d2e      	ldr	r5, [pc, #184]	; (8005858 <HAL_GPIO_DeInit+0x14c>)
 800579e:	42a8      	cmp	r0, r5
 80057a0:	d0bd      	beq.n	800571e <HAL_GPIO_DeInit+0x12>
 80057a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057a6:	42a8      	cmp	r0, r5
 80057a8:	d021      	beq.n	80057ee <HAL_GPIO_DeInit+0xe2>
 80057aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ae:	42a8      	cmp	r0, r5
 80057b0:	d01f      	beq.n	80057f2 <HAL_GPIO_DeInit+0xe6>
 80057b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057b6:	42a8      	cmp	r0, r5
 80057b8:	d01d      	beq.n	80057f6 <HAL_GPIO_DeInit+0xea>
 80057ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057be:	42a8      	cmp	r0, r5
 80057c0:	d01b      	beq.n	80057fa <HAL_GPIO_DeInit+0xee>
 80057c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057c6:	42a8      	cmp	r0, r5
 80057c8:	d019      	beq.n	80057fe <HAL_GPIO_DeInit+0xf2>
 80057ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ce:	42a8      	cmp	r0, r5
 80057d0:	d017      	beq.n	8005802 <HAL_GPIO_DeInit+0xf6>
 80057d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057d6:	42a8      	cmp	r0, r5
 80057d8:	d015      	beq.n	8005806 <HAL_GPIO_DeInit+0xfa>
 80057da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057de:	42a8      	cmp	r0, r5
 80057e0:	d013      	beq.n	800580a <HAL_GPIO_DeInit+0xfe>
 80057e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057e6:	42a8      	cmp	r0, r5
 80057e8:	d097      	beq.n	800571a <HAL_GPIO_DeInit+0xe>
 80057ea:	250a      	movs	r5, #10
 80057ec:	e798      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 80057ee:	2501      	movs	r5, #1
 80057f0:	e796      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 80057f2:	2502      	movs	r5, #2
 80057f4:	e794      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 80057f6:	2503      	movs	r5, #3
 80057f8:	e792      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 80057fa:	2504      	movs	r5, #4
 80057fc:	e790      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 80057fe:	2505      	movs	r5, #5
 8005800:	e78e      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 8005802:	2506      	movs	r5, #6
 8005804:	e78c      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 8005806:	2507      	movs	r5, #7
 8005808:	e78a      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
 800580a:	2508      	movs	r5, #8
 800580c:	e788      	b.n	8005720 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800580e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005812:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8005816:	ea25 050e 	bic.w	r5, r5, lr
 800581a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800581e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8005822:	ea25 050e 	bic.w	r5, r5, lr
 8005826:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800582a:	6865      	ldr	r5, [r4, #4]
 800582c:	ea25 050e 	bic.w	r5, r5, lr
 8005830:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	ea25 050e 	bic.w	r5, r5, lr
 8005838:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800583a:	f8df c018 	ldr.w	ip, [pc, #24]	; 8005854 <HAL_GPIO_DeInit+0x148>
 800583e:	1cb4      	adds	r4, r6, #2
 8005840:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8005844:	ea25 0507 	bic.w	r5, r5, r7
 8005848:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 800584c:	e76c      	b.n	8005728 <HAL_GPIO_DeInit+0x1c>
  }
}
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	58000400 	.word	0x58000400
 8005858:	58020000 	.word	0x58020000

0800585c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800585c:	b10a      	cbz	r2, 8005862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	6181      	str	r1, [r0, #24]
 8005860:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005862:	0409      	lsls	r1, r1, #16
 8005864:	6181      	str	r1, [r0, #24]
  }
}
 8005866:	4770      	bx	lr

08005868 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005868:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800586a:	ea01 0203 	and.w	r2, r1, r3
 800586e:	ea21 0103 	bic.w	r1, r1, r3
 8005872:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005876:	6181      	str	r1, [r0, #24]
}
 8005878:	4770      	bx	lr

0800587a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800587a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	4203      	tst	r3, r0
 8005886:	d100      	bne.n	800588a <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8005888:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005892:	f7fc fadf 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
}
 8005896:	e7f7      	b.n	8005888 <HAL_GPIO_EXTI_IRQHandler+0xe>

08005898 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	f012 0f02 	tst.w	r2, #2
 80058a0:	d001      	beq.n	80058a6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058a2:	2200      	movs	r2, #0
 80058a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a6:	6803      	ldr	r3, [r0, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	f012 0f01 	tst.w	r2, #1
 80058ae:	d103      	bne.n	80058b8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	619a      	str	r2, [r3, #24]
  }
}
 80058b8:	4770      	bx	lr

080058ba <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058ba:	b410      	push	{r4}
 80058bc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058be:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80058c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058c6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058c8:	4321      	orrs	r1, r4
 80058ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058ce:	6802      	ldr	r2, [r0, #0]
 80058d0:	6853      	ldr	r3, [r2, #4]
 80058d2:	0d64      	lsrs	r4, r4, #21
 80058d4:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80058d8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80058dc:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80058e0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80058e4:	f044 0403 	orr.w	r4, r4, #3
 80058e8:	ea23 0404 	bic.w	r4, r3, r4
 80058ec:	4321      	orrs	r1, r4
 80058ee:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <I2C_IsErrorOccurred>:
{
 80058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fa:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80058fc:	6803      	ldr	r3, [r0, #0]
 80058fe:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005900:	f017 0710 	ands.w	r7, r7, #16
 8005904:	d04e      	beq.n	80059a4 <I2C_IsErrorOccurred+0xae>
 8005906:	460e      	mov	r6, r1
 8005908:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590a:	2210      	movs	r2, #16
 800590c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	6998      	ldr	r0, [r3, #24]
 8005914:	f010 0f20 	tst.w	r0, #32
 8005918:	d13d      	bne.n	8005996 <I2C_IsErrorOccurred+0xa0>
 800591a:	2d00      	cmp	r5, #0
 800591c:	d13b      	bne.n	8005996 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800591e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005922:	d0f5      	beq.n	8005910 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7ff f9fe 	bl	8004d24 <HAL_GetTick>
 8005928:	eba0 0008 	sub.w	r0, r0, r8
 800592c:	42b0      	cmp	r0, r6
 800592e:	d801      	bhi.n	8005934 <I2C_IsErrorOccurred+0x3e>
 8005930:	2e00      	cmp	r6, #0
 8005932:	d1ed      	bne.n	8005910 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	684a      	ldr	r2, [r1, #4]
 8005938:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800593c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005940:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005942:	6988      	ldr	r0, [r1, #24]
 8005944:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005948:	d004      	beq.n	8005954 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800594a:	3b20      	subs	r3, #32
 800594c:	bf18      	it	ne
 800594e:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8005950:	b902      	cbnz	r2, 8005954 <I2C_IsErrorOccurred+0x5e>
 8005952:	b9c3      	cbnz	r3, 8005986 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f013 0f20 	tst.w	r3, #32
 800595c:	d1d8      	bne.n	8005910 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800595e:	f7ff f9e1 	bl	8004d24 <HAL_GetTick>
 8005962:	eba0 0008 	sub.w	r0, r0, r8
 8005966:	2819      	cmp	r0, #25
 8005968:	d9f4      	bls.n	8005954 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800596a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005972:	2320      	movs	r3, #32
 8005974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005978:	2300      	movs	r3, #0
 800597a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800597e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8005982:	2501      	movs	r5, #1
 8005984:	e7e6      	b.n	8005954 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005986:	684b      	ldr	r3, [r1, #4]
 8005988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800598c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800598e:	f7ff f9c9 	bl	8004d24 <HAL_GetTick>
 8005992:	4680      	mov	r8, r0
 8005994:	e7de      	b.n	8005954 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005996:	2d00      	cmp	r5, #0
 8005998:	d140      	bne.n	8005a1c <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599a:	2220      	movs	r2, #32
 800599c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800599e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80059a0:	2501      	movs	r5, #1
 80059a2:	e000      	b.n	80059a6 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 80059a4:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059ae:	d005      	beq.n	80059bc <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 80059b0:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059b8:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80059ba:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80059c0:	d006      	beq.n	80059d0 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 80059c2:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059cc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80059ce:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059d4:	d024      	beq.n	8005a20 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80059d6:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80059e2:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff ff57 	bl	8005898 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6853      	ldr	r3, [r2, #4]
 80059ee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80059f2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80059f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a02:	431f      	orrs	r7, r3
 8005a04:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	2320      	movs	r3, #32
 8005a08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a16:	4628      	mov	r0, r5
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8005a1c:	2704      	movs	r7, #4
 8005a1e:	e7c2      	b.n	80059a6 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	d0f8      	beq.n	8005a16 <I2C_IsErrorOccurred+0x120>
 8005a24:	e7de      	b.n	80059e4 <I2C_IsErrorOccurred+0xee>

08005a26 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f013 0f02 	tst.w	r3, #2
 8005a36:	d11d      	bne.n	8005a74 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff ff5a 	bl	80058f6 <I2C_IsErrorOccurred>
 8005a42:	b9c8      	cbnz	r0, 8005a78 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a48:	d0f1      	beq.n	8005a2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7ff f96b 	bl	8004d24 <HAL_GetTick>
 8005a4e:	1b80      	subs	r0, r0, r6
 8005a50:	42a8      	cmp	r0, r5
 8005a52:	d801      	bhi.n	8005a58 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	d1ea      	bne.n	8005a2e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a5a:	f043 0320 	orr.w	r3, r3, #32
 8005a5e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	2320      	movs	r3, #32
 8005a62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005a6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005a70:	2001      	movs	r0, #1
 8005a72:	e000      	b.n	8005a76 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8005a74:	2000      	movs	r0, #0
}
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e7fc      	b.n	8005a76 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005a7c <I2C_WaitOnFlagUntilTimeout>:
{
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	4606      	mov	r6, r0
 8005a82:	4688      	mov	r8, r1
 8005a84:	4617      	mov	r7, r2
 8005a86:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a88:	6834      	ldr	r4, [r6, #0]
 8005a8a:	69a4      	ldr	r4, [r4, #24]
 8005a8c:	ea38 0304 	bics.w	r3, r8, r4
 8005a90:	bf0c      	ite	eq
 8005a92:	f04f 0c01 	moveq.w	ip, #1
 8005a96:	f04f 0c00 	movne.w	ip, #0
 8005a9a:	45bc      	cmp	ip, r7
 8005a9c:	d118      	bne.n	8005ad0 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8005a9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005aa2:	d0f1      	beq.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa4:	f7ff f93e 	bl	8004d24 <HAL_GetTick>
 8005aa8:	9b06      	ldr	r3, [sp, #24]
 8005aaa:	1ac0      	subs	r0, r0, r3
 8005aac:	42a8      	cmp	r0, r5
 8005aae:	d801      	bhi.n	8005ab4 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	d1e9      	bne.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005ab6:	f043 0320 	orr.w	r3, r3, #32
 8005aba:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	2320      	movs	r3, #32
 8005abe:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005ac8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005acc:	2001      	movs	r0, #1
 8005ace:	e000      	b.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8005ad0:	2000      	movs	r0, #0
}
 8005ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005ad8 <I2C_RequestMemoryWrite>:
{
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4690      	mov	r8, r2
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	9e08      	ldr	r6, [sp, #32]
 8005ae6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <I2C_RequestMemoryWrite+0x78>)
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af0:	b2ea      	uxtb	r2, r5
 8005af2:	f7ff fee2 	bl	80058ba <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	463a      	mov	r2, r7
 8005af8:	4631      	mov	r1, r6
 8005afa:	4620      	mov	r0, r4
 8005afc:	f7ff ff93 	bl	8005a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b00:	b9f8      	cbnz	r0, 8005b42 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b02:	2d01      	cmp	r5, #1
 8005b04:	d10e      	bne.n	8005b24 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	fa5f f288 	uxtb.w	r2, r8
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	9700      	str	r7, [sp, #0]
 8005b10:	4633      	mov	r3, r6
 8005b12:	2200      	movs	r2, #0
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	4620      	mov	r0, r4
 8005b18:	f7ff ffb0 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005b1c:	b9a8      	cbnz	r0, 8005b4a <I2C_RequestMemoryWrite+0x72>
}
 8005b1e:	b002      	add	sp, #8
 8005b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff ff78 	bl	8005a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b36:	b930      	cbnz	r0, 8005b46 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	fa5f f288 	uxtb.w	r2, r8
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b40:	e7e5      	b.n	8005b0e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8005b42:	2001      	movs	r0, #1
 8005b44:	e7eb      	b.n	8005b1e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005b46:	2001      	movs	r0, #1
 8005b48:	e7e9      	b.n	8005b1e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	e7e7      	b.n	8005b1e <I2C_RequestMemoryWrite+0x46>
 8005b4e:	bf00      	nop
 8005b50:	80002000 	.word	0x80002000

08005b54 <I2C_RequestMemoryRead>:
{
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4690      	mov	r8, r2
 8005b5e:	461d      	mov	r5, r3
 8005b60:	9e08      	ldr	r6, [sp, #32]
 8005b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <I2C_RequestMemoryRead+0x74>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b2ea      	uxtb	r2, r5
 8005b6c:	f7ff fea5 	bl	80058ba <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b70:	463a      	mov	r2, r7
 8005b72:	4631      	mov	r1, r6
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff ff56 	bl	8005a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7a:	b9f8      	cbnz	r0, 8005bbc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b7c:	2d01      	cmp	r5, #1
 8005b7e:	d10e      	bne.n	8005b9e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	fa5f f288 	uxtb.w	r2, r8
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b88:	9700      	str	r7, [sp, #0]
 8005b8a:	4633      	mov	r3, r6
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2140      	movs	r1, #64	; 0x40
 8005b90:	4620      	mov	r0, r4
 8005b92:	f7ff ff73 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005b96:	b9a8      	cbnz	r0, 8005bc4 <I2C_RequestMemoryRead+0x70>
}
 8005b98:	b002      	add	sp, #8
 8005b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ff3b 	bl	8005a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bb0:	b930      	cbnz	r0, 8005bc0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	fa5f f288 	uxtb.w	r2, r8
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bba:	e7e5      	b.n	8005b88 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	e7eb      	b.n	8005b98 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e7e9      	b.n	8005b98 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e7e7      	b.n	8005b98 <I2C_RequestMemoryRead+0x44>
 8005bc8:	80002000 	.word	0x80002000

08005bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4605      	mov	r5, r0
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f013 0f20 	tst.w	r3, #32
 8005bdc:	d11a      	bne.n	8005c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	4632      	mov	r2, r6
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f7ff fe87 	bl	80058f6 <I2C_IsErrorOccurred>
 8005be8:	b9b0      	cbnz	r0, 8005c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7ff f89b 	bl	8004d24 <HAL_GetTick>
 8005bee:	1b80      	subs	r0, r0, r6
 8005bf0:	42a0      	cmp	r0, r4
 8005bf2:	d801      	bhi.n	8005bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d1ed      	bne.n	8005bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bf8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c00:	2320      	movs	r3, #32
 8005c02:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c0c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8005c10:	2001      	movs	r0, #1
}
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7fc      	b.n	8005c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8005c18:	2001      	movs	r0, #1
 8005c1a:	e7fa      	b.n	8005c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08005c1c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d057      	beq.n	8005cd0 <HAL_I2C_Init+0xb4>
{
 8005c20:	b510      	push	{r4, lr}
 8005c22:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d041      	beq.n	8005cb0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2c:	2324      	movs	r3, #36	; 0x24
 8005c2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	6813      	ldr	r3, [r2, #0]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005c44:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	6893      	ldr	r3, [r2, #8]
 8005c4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c4e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c50:	68e3      	ldr	r3, [r4, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d031      	beq.n	8005cba <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005c5e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c60:	68e3      	ldr	r3, [r4, #12]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d02f      	beq.n	8005cc6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	6851      	ldr	r1, [r2, #4]
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <HAL_I2C_Init+0xb8>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	68d3      	ldr	r3, [r2, #12]
 8005c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c78:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6962      	ldr	r2, [r4, #20]
 8005c7e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c80:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c88:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c8a:	69e3      	ldr	r3, [r4, #28]
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	6813      	ldr	r3, [r2, #0]
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005cae:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005cb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005cb4:	f7fc f930 	bl	8001f18 <HAL_I2C_MspInit>
 8005cb8:	e7b8      	b.n	8005c2c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	6093      	str	r3, [r2, #8]
 8005cc4:	e7cc      	b.n	8005c60 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	e7ca      	b.n	8005c66 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
}
 8005cd2:	4770      	bx	lr
 8005cd4:	02008000 	.word	0x02008000

08005cd8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8005cd8:	b1a8      	cbz	r0, 8005d06 <HAL_I2C_DeInit+0x2e>
{
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cde:	2324      	movs	r3, #36	; 0x24
 8005ce0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005ce4:	6802      	ldr	r2, [r0, #0]
 8005ce6:	6813      	ldr	r3, [r2, #0]
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005cee:	f7fc f95f 	bl	8001fb0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cf6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8005d00:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005d04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d06:	2001      	movs	r0, #1
}
 8005d08:	4770      	bx	lr

08005d0a <HAL_I2C_Mem_Write>:
{
 8005d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	460d      	mov	r5, r1
 8005d12:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005d16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d18:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005d1c:	b2c9      	uxtb	r1, r1
 8005d1e:	2920      	cmp	r1, #32
 8005d20:	f040 80bc 	bne.w	8005e9c <HAL_I2C_Mem_Write+0x192>
 8005d24:	4604      	mov	r4, r0
 8005d26:	4690      	mov	r8, r2
 8005d28:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d2c:	f1ba 0f00 	cmp.w	sl, #0
 8005d30:	bf18      	it	ne
 8005d32:	2b00      	cmpne	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8005d36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	f000 80b2 	beq.w	8005ea4 <HAL_I2C_Mem_Write+0x19a>
 8005d40:	f04f 0b01 	mov.w	fp, #1
 8005d44:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005d48:	f7fe ffec 	bl	8004d24 <HAL_GetTick>
 8005d4c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d4e:	9000      	str	r0, [sp, #0]
 8005d50:	2319      	movs	r3, #25
 8005d52:	465a      	mov	r2, fp
 8005d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f7ff fe8f 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	b130      	cbz	r0, 8005d6e <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8005d60:	2001      	movs	r0, #1
 8005d62:	e09c      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d68:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	e097      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d6e:	2321      	movs	r3, #33	; 0x21
 8005d70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005d7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d80:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d86:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d88:	9601      	str	r6, [sp, #4]
 8005d8a:	9700      	str	r7, [sp, #0]
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	4642      	mov	r2, r8
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff fea0 	bl	8005ad8 <I2C_RequestMemoryWrite>
 8005d98:	b970      	cbnz	r0, 8005db8 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2bff      	cmp	r3, #255	; 0xff
 8005da0:	d90f      	bls.n	8005dc2 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005da2:	22ff      	movs	r2, #255	; 0xff
 8005da4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005da6:	2300      	movs	r3, #0
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dae:	4629      	mov	r1, r5
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff fd82 	bl	80058ba <I2C_TransferConfig>
 8005db6:	e021      	b.n	8005dfc <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8005db8:	2300      	movs	r3, #0
 8005dba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	e06d      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005dc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff fd70 	bl	80058ba <I2C_TransferConfig>
 8005dda:	e00f      	b.n	8005dfc <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005ddc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dde:	b292      	uxth	r2, r2
 8005de0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005de2:	2300      	movs	r3, #0
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4629      	mov	r1, r5
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff fd63 	bl	80058ba <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005df4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d033      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4620      	mov	r0, r4
 8005e02:	f7ff fe10 	bl	8005a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d14e      	bne.n	8005ea8 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e14:	3301      	adds	r3, #1
 8005e16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005e18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005e22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e2c:	b292      	uxth	r2, r2
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	d0e0      	beq.n	8005df4 <HAL_I2C_Mem_Write+0xea>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1de      	bne.n	8005df4 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	9600      	str	r6, [sp, #0]
 8005e38:	463b      	mov	r3, r7
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7ff fe1c 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005e44:	bb90      	cbnz	r0, 8005eac <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2bff      	cmp	r3, #255	; 0xff
 8005e4c:	d9c6      	bls.n	8005ddc <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e4e:	22ff      	movs	r2, #255	; 0xff
 8005e50:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f7ff fd2c 	bl	80058ba <I2C_TransferConfig>
 8005e62:	e7c7      	b.n	8005df4 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e64:	4632      	mov	r2, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff feaf 	bl	8005bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e6e:	b9f8      	cbnz	r0, 8005eb0 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	2220      	movs	r2, #32
 8005e74:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005e76:	6821      	ldr	r1, [r4, #0]
 8005e78:	684b      	ldr	r3, [r1, #4]
 8005e7a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005e7e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005e82:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005e96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005e9a:	e000      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8005e9c:	2002      	movs	r0, #2
}
 8005e9e:	b003      	add	sp, #12
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	e7fa      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	e7f8      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8005eac:	2001      	movs	r0, #1
 8005eae:	e7f6      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	e7f4      	b.n	8005e9e <HAL_I2C_Mem_Write+0x194>

08005eb4 <HAL_I2C_Mem_Read>:
{
 8005eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	460d      	mov	r5, r1
 8005ebc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005ec0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005ec6:	b2c9      	uxtb	r1, r1
 8005ec8:	2920      	cmp	r1, #32
 8005eca:	f040 80bd 	bne.w	8006048 <HAL_I2C_Mem_Read+0x194>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed6:	f1ba 0f00 	cmp.w	sl, #0
 8005eda:	bf18      	it	ne
 8005edc:	2b00      	cmpne	r3, #0
 8005ede:	d016      	beq.n	8005f0e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8005ee0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f000 80b3 	beq.w	8006050 <HAL_I2C_Mem_Read+0x19c>
 8005eea:	f04f 0b01 	mov.w	fp, #1
 8005eee:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005ef2:	f7fe ff17 	bl	8004d24 <HAL_GetTick>
 8005ef6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ef8:	9000      	str	r0, [sp, #0]
 8005efa:	2319      	movs	r3, #25
 8005efc:	465a      	mov	r2, fp
 8005efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff fdba 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005f08:	b130      	cbz	r0, 8005f18 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	e09d      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f12:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8005f14:	2001      	movs	r0, #1
 8005f16:	e098      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f18:	2322      	movs	r3, #34	; 0x22
 8005f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f2c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f30:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f32:	9601      	str	r6, [sp, #4]
 8005f34:	9700      	str	r7, [sp, #0]
 8005f36:	464b      	mov	r3, r9
 8005f38:	4642      	mov	r2, r8
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fe09 	bl	8005b54 <I2C_RequestMemoryRead>
 8005f42:	b970      	cbnz	r0, 8005f62 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2bff      	cmp	r3, #255	; 0xff
 8005f4a:	d90f      	bls.n	8005f6c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4c:	22ff      	movs	r2, #255	; 0xff
 8005f4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f50:	4b43      	ldr	r3, [pc, #268]	; (8006060 <HAL_I2C_Mem_Read+0x1ac>)
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fcad 	bl	80058ba <I2C_TransferConfig>
 8005f60:	e021      	b.n	8005fa6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8005f62:	2300      	movs	r3, #0
 8005f64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005f68:	4658      	mov	r0, fp
 8005f6a:	e06e      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8005f6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f72:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <HAL_I2C_Mem_Read+0x1ac>)
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7ff fc9b 	bl	80058ba <I2C_TransferConfig>
 8005f84:	e00f      	b.n	8005fa6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8005f86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	4629      	mov	r1, r5
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff fc8e 	bl	80058ba <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005f9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d034      	beq.n	8006010 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fa6:	9600      	str	r6, [sp, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	2200      	movs	r2, #0
 8005fac:	2104      	movs	r1, #4
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff fd64 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d14d      	bne.n	8006054 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005fc6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005fc8:	3a01      	subs	r2, #1
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005fce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0de      	beq.n	8005f9e <HAL_I2C_Mem_Read+0xea>
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	d1dc      	bne.n	8005f9e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fe4:	9600      	str	r6, [sp, #0]
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	4620      	mov	r0, r4
 8005fec:	f7ff fd46 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	bb90      	cbnz	r0, 8006058 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
 8005ff8:	d9c5      	bls.n	8005f86 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ffa:	22ff      	movs	r2, #255	; 0xff
 8005ffc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ffe:	2300      	movs	r3, #0
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006006:	4629      	mov	r1, r5
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff fc56 	bl	80058ba <I2C_TransferConfig>
 800600e:	e7c6      	b.n	8005f9e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006010:	4632      	mov	r2, r6
 8006012:	4639      	mov	r1, r7
 8006014:	4620      	mov	r0, r4
 8006016:	f7ff fdd9 	bl	8005bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800601a:	b9f8      	cbnz	r0, 800605c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	2220      	movs	r2, #32
 8006020:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006022:	6821      	ldr	r1, [r4, #0]
 8006024:	684b      	ldr	r3, [r1, #4]
 8006026:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800602a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800602e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006038:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800603c:	2300      	movs	r3, #0
 800603e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006042:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8006046:	e000      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8006048:	2002      	movs	r0, #2
}
 800604a:	b003      	add	sp, #12
 800604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006050:	2002      	movs	r0, #2
 8006052:	e7fa      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8006054:	2001      	movs	r0, #1
 8006056:	e7f8      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
 800605a:	e7f6      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800605c:	2001      	movs	r0, #1
 800605e:	e7f4      	b.n	800604a <HAL_I2C_Mem_Read+0x196>
 8006060:	80002400 	.word	0x80002400

08006064 <HAL_I2C_GetState>:
  return hi2c->State;
 8006064:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8006068:	4770      	bx	lr

0800606a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800606a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800606c:	4770      	bx	lr

0800606e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b20      	cmp	r3, #32
 8006076:	d124      	bne.n	80060c2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800607c:	2b01      	cmp	r3, #1
 800607e:	d022      	beq.n	80060c6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006086:	2324      	movs	r3, #36	; 0x24
 8006088:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800608c:	6802      	ldr	r2, [r0, #0]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006096:	6802      	ldr	r2, [r0, #0]
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609e:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060a0:	6802      	ldr	r2, [r0, #0]
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	4319      	orrs	r1, r3
 80060a6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a8:	6802      	ldr	r2, [r0, #0]
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	2320      	movs	r3, #32
 80060b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b8:	2300      	movs	r3, #0
 80060ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80060be:	4618      	mov	r0, r3
 80060c0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2002      	movs	r0, #2
 80060c4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80060c6:	2002      	movs	r0, #2
  }
}
 80060c8:	4770      	bx	lr

080060ca <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d122      	bne.n	800611a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d020      	beq.n	800611e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80060dc:	2301      	movs	r3, #1
 80060de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	2324      	movs	r3, #36	; 0x24
 80060e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e8:	6802      	ldr	r2, [r0, #0]
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060f2:	6802      	ldr	r2, [r0, #0]
 80060f4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060fa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060fe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006100:	6802      	ldr	r2, [r0, #0]
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800610a:	2320      	movs	r3, #32
 800610c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006110:	2300      	movs	r3, #0
 8006112:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006116:	4618      	mov	r0, r3
 8006118:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800611a:	2002      	movs	r0, #2
 800611c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800611e:	2002      	movs	r0, #2
  }
}
 8006120:	4770      	bx	lr
	...

08006124 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006126:	684d      	ldr	r5, [r1, #4]
 8006128:	6804      	ldr	r4, [r0, #0]
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8006130:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006132:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8006136:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800613a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800613e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006142:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006146:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006148:	6804      	ldr	r4, [r0, #0]
 800614a:	68e6      	ldr	r6, [r4, #12]
 800614c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006150:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006152:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006154:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006158:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800615c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006160:	68cd      	ldr	r5, [r1, #12]
 8006162:	6804      	ldr	r4, [r0, #0]
 8006164:	68e3      	ldr	r3, [r4, #12]
 8006166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800616a:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800616c:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 8006170:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8006174:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006178:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800617c:	688b      	ldr	r3, [r1, #8]
 800617e:	6804      	ldr	r4, [r0, #0]
 8006180:	68e6      	ldr	r6, [r4, #12]
 8006182:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 8006186:	4473      	add	r3, lr
 8006188:	3301      	adds	r3, #1
 800618a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800618e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8006192:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006196:	6803      	ldr	r3, [r0, #0]
 8006198:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800619c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80061a0:	f024 0407 	bic.w	r4, r4, #7
 80061a4:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80061a8:	6803      	ldr	r3, [r0, #0]
 80061aa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80061ae:	690c      	ldr	r4, [r1, #16]
 80061b0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80061b4:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80061b8:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80061bc:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80061be:	6804      	ldr	r4, [r0, #0]
 80061c0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80061c4:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 80061c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80061cc:	2400      	movs	r4, #0
 80061ce:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80061d2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80061d6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80061da:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80061de:	6806      	ldr	r6, [r0, #0]
 80061e0:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 80061e4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80061e8:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 80061ec:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80061f0:	6803      	ldr	r3, [r0, #0]
 80061f2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80061f6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 80061fa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80061fe:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006202:	6803      	ldr	r3, [r0, #0]
 8006204:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006208:	694d      	ldr	r5, [r1, #20]
 800620a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800620e:	6803      	ldr	r3, [r0, #0]
 8006210:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006214:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8006218:	4d2e      	ldr	r5, [pc, #184]	; (80062d4 <LTDC_SetConfig+0x1b0>)
 800621a:	4035      	ands	r5, r6
 800621c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006220:	6a0d      	ldr	r5, [r1, #32]
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006228:	69ce      	ldr	r6, [r1, #28]
 800622a:	4335      	orrs	r5, r6
 800622c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8006236:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800623a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800623e:	6803      	ldr	r3, [r0, #0]
 8006240:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 8006244:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006246:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800624a:	690b      	ldr	r3, [r1, #16]
 800624c:	b16b      	cbz	r3, 800626a <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800624e:	2b01      	cmp	r3, #1
 8006250:	d039      	beq.n	80062c6 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006252:	2b02      	cmp	r3, #2
 8006254:	bf18      	it	ne
 8006256:	2b04      	cmpne	r3, #4
 8006258:	d037      	beq.n	80062ca <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800625a:	2b03      	cmp	r3, #3
 800625c:	d037      	beq.n	80062ce <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800625e:	2b07      	cmp	r3, #7
 8006260:	d001      	beq.n	8006266 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006262:	2501      	movs	r5, #1
 8006264:	e002      	b.n	800626c <LTDC_SetConfig+0x148>
    tmp = 2U;
 8006266:	2502      	movs	r5, #2
 8006268:	e000      	b.n	800626c <LTDC_SetConfig+0x148>
    tmp = 4U;
 800626a:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800626c:	6802      	ldr	r2, [r0, #0]
 800626e:	4462      	add	r2, ip
 8006270:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8006274:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8006278:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800627c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800627e:	fb05 f402 	mul.w	r4, r5, r2
 8006282:	684b      	ldr	r3, [r1, #4]
 8006284:	680a      	ldr	r2, [r1, #0]
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	fb05 f303 	mul.w	r3, r5, r3
 800628c:	3307      	adds	r3, #7
 800628e:	6802      	ldr	r2, [r0, #0]
 8006290:	4462      	add	r2, ip
 8006292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006296:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800629a:	6803      	ldr	r3, [r0, #0]
 800629c:	4463      	add	r3, ip
 800629e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80062a2:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <LTDC_SetConfig+0x1b4>)
 80062a4:	4022      	ands	r2, r4
 80062a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	4463      	add	r3, ip
 80062ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80062b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062b4:	6803      	ldr	r3, [r0, #0]
 80062b6:	449c      	add	ip, r3
 80062b8:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 80062c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 80062c6:	2503      	movs	r5, #3
 80062c8:	e7d0      	b.n	800626c <LTDC_SetConfig+0x148>
    tmp = 2U;
 80062ca:	2502      	movs	r5, #2
 80062cc:	e7ce      	b.n	800626c <LTDC_SetConfig+0x148>
 80062ce:	2502      	movs	r5, #2
 80062d0:	e7cc      	b.n	800626c <LTDC_SetConfig+0x148>
 80062d2:	bf00      	nop
 80062d4:	fffff8f8 	.word	0xfffff8f8
 80062d8:	fffff800 	.word	0xfffff800

080062dc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80062dc:	2800      	cmp	r0, #0
 80062de:	d072      	beq.n	80063c6 <HAL_LTDC_Init+0xea>
{
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80062e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d067      	beq.n	80063bc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062ec:	2302      	movs	r3, #2
 80062ee:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	6993      	ldr	r3, [r2, #24]
 80062f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062fa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	698a      	ldr	r2, [r1, #24]
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	68a0      	ldr	r0, [r4, #8]
 8006304:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006306:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006308:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800630a:	6920      	ldr	r0, [r4, #16]
 800630c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800630e:	4313      	orrs	r3, r2
 8006310:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006312:	6821      	ldr	r1, [r4, #0]
 8006314:	688a      	ldr	r2, [r1, #8]
 8006316:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_LTDC_Init+0xf0>)
 8006318:	401a      	ands	r2, r3
 800631a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	6882      	ldr	r2, [r0, #8]
 8006320:	69a1      	ldr	r1, [r4, #24]
 8006322:	6965      	ldr	r5, [r4, #20]
 8006324:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006328:	430a      	orrs	r2, r1
 800632a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800632c:	6821      	ldr	r1, [r4, #0]
 800632e:	68ca      	ldr	r2, [r1, #12]
 8006330:	401a      	ands	r2, r3
 8006332:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	68c2      	ldr	r2, [r0, #12]
 8006338:	6a21      	ldr	r1, [r4, #32]
 800633a:	69e5      	ldr	r5, [r4, #28]
 800633c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006340:	430a      	orrs	r2, r1
 8006342:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006344:	6821      	ldr	r1, [r4, #0]
 8006346:	690a      	ldr	r2, [r1, #16]
 8006348:	401a      	ands	r2, r3
 800634a:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	6902      	ldr	r2, [r0, #16]
 8006350:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006352:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006354:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006358:	430a      	orrs	r2, r1
 800635a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	694a      	ldr	r2, [r1, #20]
 8006360:	4013      	ands	r3, r2
 8006362:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006364:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	694b      	ldr	r3, [r1, #20]
 800636a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800636c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006370:	4313      	orrs	r3, r2
 8006372:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006374:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006378:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800637c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800637e:	6821      	ldr	r1, [r4, #0]
 8006380:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006382:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006386:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006388:	6821      	ldr	r1, [r4, #0]
 800638a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800638c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006390:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8006394:	4303      	orrs	r3, r0
 8006396:	4313      	orrs	r3, r2
 8006398:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800639e:	f043 0306 	orr.w	r3, r3, #6
 80063a2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	6993      	ldr	r3, [r2, #24]
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063ae:	2000      	movs	r0, #0
 80063b0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80063bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80063c0:	f7fb fe16 	bl	8001ff0 <HAL_LTDC_MspInit>
 80063c4:	e792      	b.n	80062ec <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	f000f800 	.word	0xf000f800

080063d0 <HAL_LTDC_ErrorCallback>:
}
 80063d0:	4770      	bx	lr

080063d2 <HAL_LTDC_ReloadEventCallback>:
}
 80063d2:	4770      	bx	lr

080063d4 <HAL_LTDC_IRQHandler>:
{
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80063d8:	6803      	ldr	r3, [r0, #0]
 80063da:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80063dc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063de:	f015 0f04 	tst.w	r5, #4
 80063e2:	d002      	beq.n	80063ea <HAL_LTDC_IRQHandler+0x16>
 80063e4:	f016 0f04 	tst.w	r6, #4
 80063e8:	d112      	bne.n	8006410 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063ea:	f015 0f02 	tst.w	r5, #2
 80063ee:	d002      	beq.n	80063f6 <HAL_LTDC_IRQHandler+0x22>
 80063f0:	f016 0f02 	tst.w	r6, #2
 80063f4:	d121      	bne.n	800643a <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80063f6:	f015 0f01 	tst.w	r5, #1
 80063fa:	d002      	beq.n	8006402 <HAL_LTDC_IRQHandler+0x2e>
 80063fc:	f016 0f01 	tst.w	r6, #1
 8006400:	d132      	bne.n	8006468 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006402:	f015 0f08 	tst.w	r5, #8
 8006406:	d002      	beq.n	800640e <HAL_LTDC_IRQHandler+0x3a>
 8006408:	f016 0f08 	tst.w	r6, #8
 800640c:	d13d      	bne.n	800648a <HAL_LTDC_IRQHandler+0xb6>
}
 800640e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006412:	f022 0204 	bic.w	r2, r2, #4
 8006416:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006418:	6803      	ldr	r3, [r0, #0]
 800641a:	2204      	movs	r2, #4
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800641e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800642a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800642e:	2300      	movs	r3, #0
 8006430:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006434:	f7ff ffcc 	bl	80063d0 <HAL_LTDC_ErrorCallback>
 8006438:	e7d7      	b.n	80063ea <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800643a:	6822      	ldr	r2, [r4, #0]
 800643c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800643e:	f023 0302 	bic.w	r3, r3, #2
 8006442:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	2202      	movs	r2, #2
 8006448:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800644a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006454:	2304      	movs	r3, #4
 8006456:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800645a:	2300      	movs	r3, #0
 800645c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006460:	4620      	mov	r0, r4
 8006462:	f7ff ffb5 	bl	80063d0 <HAL_LTDC_ErrorCallback>
 8006466:	e7c6      	b.n	80063f6 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006468:	6822      	ldr	r2, [r4, #0]
 800646a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	2301      	movs	r3, #1
 8006476:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006478:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800647c:	2300      	movs	r3, #0
 800647e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006482:	4620      	mov	r0, r4
 8006484:	f7fb f98a 	bl	800179c <HAL_LTDC_LineEventCallback>
 8006488:	e7bb      	b.n	8006402 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800648e:	f023 0308 	bic.w	r3, r3, #8
 8006492:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	2208      	movs	r2, #8
 8006498:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800649a:	2301      	movs	r3, #1
 800649c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80064a0:	2300      	movs	r3, #0
 80064a2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7ff ff93 	bl	80063d2 <HAL_LTDC_ReloadEventCallback>
}
 80064ac:	e7af      	b.n	800640e <HAL_LTDC_IRQHandler+0x3a>

080064ae <HAL_LTDC_ConfigLayer>:
{
 80064ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80064b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d02c      	beq.n	8006512 <HAL_LTDC_ConfigLayer+0x64>
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	4616      	mov	r6, r2
 80064be:	2701      	movs	r7, #1
 80064c0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064c4:	2302      	movs	r3, #2
 80064c6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80064ca:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80064ce:	fb0c 0c02 	mla	ip, ip, r2, r0
 80064d2:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80064d6:	468e      	mov	lr, r1
 80064d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80064dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80064e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80064e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80064e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80064ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80064f0:	f8de 3000 	ldr.w	r3, [lr]
 80064f4:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80064f8:	4632      	mov	r2, r6
 80064fa:	4629      	mov	r1, r5
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff fe11 	bl	8006124 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006506:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800650a:	2000      	movs	r0, #0
 800650c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8006510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8006512:	2002      	movs	r0, #2
 8006514:	e7fc      	b.n	8006510 <HAL_LTDC_ConfigLayer+0x62>
	...

08006518 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8006518:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d01a      	beq.n	8006556 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8006520:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8006522:	2201      	movs	r2, #1
 8006524:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800652e:	6804      	ldr	r4, [r0, #0]
 8006530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006538:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_LTDC_ProgramLineEvent+0x44>)
 800653a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800653c:	6801      	ldr	r1, [r0, #0]
 800653e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006540:	4313      	orrs	r3, r2
 8006542:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8006544:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006548:	2300      	movs	r3, #0
 800654a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800654e:	4618      	mov	r0, r3
}
 8006550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006554:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8006556:	2002      	movs	r0, #2
}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	50001000 	.word	0x50001000

08006560 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8006564:	f7fe fbde 	bl	8004d24 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006568:	2c00      	cmp	r4, #0
 800656a:	d035      	beq.n	80065d8 <HAL_MDMA_Abort+0x78>
 800656c:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800656e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d006      	beq.n	8006586 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800657c:	2300      	movs	r3, #0
 800657e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 8006582:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 8006584:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	68d3      	ldr	r3, [r2, #12]
 800658a:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800658e:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	68d3      	ldr	r3, [r2, #12]
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	f012 0f01 	tst.w	r2, #1
 80065a2:	d010      	beq.n	80065c6 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80065a4:	f7fe fbbe 	bl	8004d24 <HAL_GetTick>
 80065a8:	1b43      	subs	r3, r0, r5
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d9f5      	bls.n	800659a <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80065ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 80065b6:	2300      	movs	r3, #0
 80065b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80065bc:	2303      	movs	r3, #3
 80065be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
 80065c4:	e7de      	b.n	8006584 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80065c6:	221f      	movs	r2, #31
 80065c8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 80065ca:	2000      	movs	r0, #0
 80065cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80065d6:	e7d5      	b.n	8006584 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 80065d8:	2001      	movs	r0, #1
 80065da:	e7d3      	b.n	8006584 <HAL_MDMA_Abort+0x24>

080065dc <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80065dc:	b190      	cbz	r0, 8006604 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80065de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d003      	beq.n	80065f0 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 80065ec:	2001      	movs	r0, #1
 80065ee:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80065f0:	2304      	movs	r3, #4
 80065f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80065f6:	6802      	ldr	r2, [r0, #0]
 80065f8:	68d3      	ldr	r3, [r2, #12]
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006600:	2000      	movs	r0, #0
 8006602:	4770      	bx	lr
    return HAL_ERROR;
 8006604:	2001      	movs	r0, #1
}
 8006606:	4770      	bx	lr

08006608 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006608:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800660a:	6802      	ldr	r2, [r0, #0]
 800660c:	6813      	ldr	r3, [r2, #0]
 800660e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006612:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006614:	6883      	ldr	r3, [r0, #8]
 8006616:	b933      	cbnz	r3, 8006626 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006618:	6802      	ldr	r2, [r0, #0]
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006620:	684c      	ldr	r4, [r1, #4]
 8006622:	4323      	orrs	r3, r4
 8006624:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006626:	680b      	ldr	r3, [r1, #0]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d04d      	beq.n	80066c8 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800662c:	2b03      	cmp	r3, #3
 800662e:	d055      	beq.n	80066dc <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8006630:	6803      	ldr	r3, [r0, #0]
 8006632:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 8006636:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800663a:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800663e:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006642:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8006644:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8006646:	432c      	orrs	r4, r5
 8006648:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800664a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800664c:	b15c      	cbz	r4, 8006666 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800664e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006650:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006658:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800665a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800665c:	432c      	orrs	r4, r5
 800665e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8006660:	432c      	orrs	r4, r5
 8006662:	4323      	orrs	r3, r4
 8006664:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8006666:	f8de 3000 	ldr.w	r3, [lr]
 800666a:	f023 031f 	bic.w	r3, r3, #31
 800666e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8006670:	4323      	orrs	r3, r4
 8006672:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006676:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8006678:	b12b      	cbz	r3, 8006686 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800667a:	680b      	ldr	r3, [r1, #0]
 800667c:	b91b      	cbnz	r3, 8006686 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800667e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006680:	6804      	ldr	r4, [r0, #0]
 8006682:	3b01      	subs	r3, #1
 8006684:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006686:	68cb      	ldr	r3, [r1, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d073      	beq.n	8006774 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800668c:	69cc      	ldr	r4, [r1, #28]
 800668e:	2c00      	cmp	r4, #0
 8006690:	d048      	beq.n	8006724 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006692:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8006694:	b365      	cbz	r5, 80066f0 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006696:	6817      	ldr	r7, [r2, #0]
 8006698:	4e48      	ldr	r6, [pc, #288]	; (80067bc <OSPI_ConfigCmd+0x1b4>)
 800669a:	403e      	ands	r6, r7
 800669c:	694f      	ldr	r7, [r1, #20]
 800669e:	433b      	orrs	r3, r7
 80066a0:	690f      	ldr	r7, [r1, #16]
 80066a2:	433b      	orrs	r3, r7
 80066a4:	431c      	orrs	r4, r3
 80066a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80066a8:	431c      	orrs	r4, r3
 80066aa:	6a0b      	ldr	r3, [r1, #32]
 80066ac:	431c      	orrs	r4, r3
 80066ae:	432c      	orrs	r4, r5
 80066b0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80066b2:	432c      	orrs	r4, r5
 80066b4:	4334      	orrs	r4, r6
 80066b6:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80066b8:	688b      	ldr	r3, [r1, #8]
 80066ba:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80066be:	6803      	ldr	r3, [r0, #0]
 80066c0:	698a      	ldr	r2, [r1, #24]
 80066c2:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 80066c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 80066c8:	6803      	ldr	r3, [r0, #0]
 80066ca:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 80066ce:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 80066d2:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80066d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80066da:	e7b2      	b.n	8006642 <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 80066dc:	6803      	ldr	r3, [r0, #0]
 80066de:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80066e2:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80066e6:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80066ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80066ee:	e7a8      	b.n	8006642 <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80066f0:	6816      	ldr	r6, [r2, #0]
 80066f2:	4d33      	ldr	r5, [pc, #204]	; (80067c0 <OSPI_ConfigCmd+0x1b8>)
 80066f4:	4035      	ands	r5, r6
 80066f6:	694e      	ldr	r6, [r1, #20]
 80066f8:	4333      	orrs	r3, r6
 80066fa:	690e      	ldr	r6, [r1, #16]
 80066fc:	4333      	orrs	r3, r6
 80066fe:	431c      	orrs	r4, r3
 8006700:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006702:	431c      	orrs	r4, r3
 8006704:	6a0b      	ldr	r3, [r1, #32]
 8006706:	431c      	orrs	r4, r3
 8006708:	432c      	orrs	r4, r5
 800670a:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800670c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800670e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006712:	d1d1      	bne.n	80066b8 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006714:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006716:	2b08      	cmp	r3, #8
 8006718:	d1ce      	bne.n	80066b8 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e7c9      	b.n	80066b8 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006724:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8006726:	b184      	cbz	r4, 800674a <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006728:	6815      	ldr	r5, [r2, #0]
 800672a:	4826      	ldr	r0, [pc, #152]	; (80067c4 <OSPI_ConfigCmd+0x1bc>)
 800672c:	4028      	ands	r0, r5
 800672e:	694d      	ldr	r5, [r1, #20]
 8006730:	432b      	orrs	r3, r5
 8006732:	690d      	ldr	r5, [r1, #16]
 8006734:	432b      	orrs	r3, r5
 8006736:	431c      	orrs	r4, r3
 8006738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800673a:	431c      	orrs	r4, r3
 800673c:	4304      	orrs	r4, r0
 800673e:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 8006740:	688b      	ldr	r3, [r1, #8]
 8006742:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2000      	movs	r0, #0
 8006748:	e7bd      	b.n	80066c6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800674a:	6814      	ldr	r4, [r2, #0]
 800674c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006750:	694d      	ldr	r5, [r1, #20]
 8006752:	432b      	orrs	r3, r5
 8006754:	690d      	ldr	r5, [r1, #16]
 8006756:	432b      	orrs	r3, r5
 8006758:	4323      	orrs	r3, r4
 800675a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800675c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800675e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006762:	d1ed      	bne.n	8006740 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006764:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006766:	2b08      	cmp	r3, #8
 8006768:	d1ea      	bne.n	8006740 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e7e5      	b.n	8006740 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006774:	69cb      	ldr	r3, [r1, #28]
 8006776:	b1e3      	cbz	r3, 80067b2 <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006778:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800677a:	b184      	cbz	r4, 800679e <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800677c:	6816      	ldr	r6, [r2, #0]
 800677e:	4d12      	ldr	r5, [pc, #72]	; (80067c8 <OSPI_ConfigCmd+0x1c0>)
 8006780:	4035      	ands	r5, r6
 8006782:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006784:	4333      	orrs	r3, r6
 8006786:	6a0e      	ldr	r6, [r1, #32]
 8006788:	4333      	orrs	r3, r6
 800678a:	4323      	orrs	r3, r4
 800678c:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800678e:	4323      	orrs	r3, r4
 8006790:	432b      	orrs	r3, r5
 8006792:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 8006794:	6803      	ldr	r3, [r0, #0]
 8006796:	698a      	ldr	r2, [r1, #24]
 8006798:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800679a:	2000      	movs	r0, #0
 800679c:	e793      	b.n	80066c6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800679e:	6814      	ldr	r4, [r2, #0]
 80067a0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80067a4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80067a6:	432b      	orrs	r3, r5
 80067a8:	6a0d      	ldr	r5, [r1, #32]
 80067aa:	432b      	orrs	r3, r5
 80067ac:	4323      	orrs	r3, r4
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	e7f0      	b.n	8006794 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80067b2:	2308      	movs	r3, #8
 80067b4:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 80067b6:	2001      	movs	r0, #1
 80067b8:	e785      	b.n	80066c6 <OSPI_ConfigCmd+0xbe>
 80067ba:	bf00      	nop
 80067bc:	f0ffc0c0 	.word	0xf0ffc0c0
 80067c0:	ffffc0c0 	.word	0xffffc0c0
 80067c4:	f0ffffc0 	.word	0xf0ffffc0
 80067c8:	f0ffc0ff 	.word	0xf0ffc0ff

080067cc <OSPI_WaitFlagStateUntilTimeout>:
{
 80067cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d0:	4605      	mov	r5, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	4616      	mov	r6, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80067dc:	682c      	ldr	r4, [r5, #0]
 80067de:	6a24      	ldr	r4, [r4, #32]
 80067e0:	423c      	tst	r4, r7
 80067e2:	bf14      	ite	ne
 80067e4:	f04f 0c01 	movne.w	ip, #1
 80067e8:	f04f 0c00 	moveq.w	ip, #0
 80067ec:	45b4      	cmp	ip, r6
 80067ee:	d014      	beq.n	800681a <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067f4:	d0f2      	beq.n	80067dc <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fe fa95 	bl	8004d24 <HAL_GetTick>
 80067fa:	eba0 0009 	sub.w	r0, r0, r9
 80067fe:	4540      	cmp	r0, r8
 8006800:	d802      	bhi.n	8006808 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 8006802:	f1b8 0f00 	cmp.w	r8, #0
 8006806:	d1e9      	bne.n	80067dc <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800680c:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800680e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 8006816:	2001      	movs	r0, #1
 8006818:	e000      	b.n	800681c <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800681a:	2000      	movs	r0, #0
}
 800681c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006820 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 8006820:	b180      	cbz	r0, 8006844 <HAL_OSPI_DeInit+0x24>
{
 8006822:	b510      	push	{r4, lr}
 8006824:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 8006826:	6802      	ldr	r2, [r0, #0]
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006830:	6802      	ldr	r2, [r0, #0]
 8006832:	6893      	ldr	r3, [r2, #8]
 8006834:	f023 0302 	bic.w	r3, r3, #2
 8006838:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800683a:	f7fb fcb7 	bl	80021ac <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800683e:	2000      	movs	r0, #0
 8006840:	6520      	str	r0, [r4, #80]	; 0x50
}
 8006842:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8006844:	2001      	movs	r0, #1
}
 8006846:	4770      	bx	lr

08006848 <HAL_OSPI_Command>:
{
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	4604      	mov	r4, r0
 8006850:	4688      	mov	r8, r1
 8006852:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8006854:	f7fe fa66 	bl	8004d24 <HAL_GetTick>
 8006858:	4606      	mov	r6, r0
  state = hospi->State;
 800685a:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800685c:	2d02      	cmp	r5, #2
 800685e:	d009      	beq.n	8006874 <HAL_OSPI_Command+0x2c>
 8006860:	2d14      	cmp	r5, #20
 8006862:	d024      	beq.n	80068ae <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8006864:	2d24      	cmp	r5, #36	; 0x24
 8006866:	d028      	beq.n	80068ba <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006868:	2310      	movs	r3, #16
 800686a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800686c:	2001      	movs	r0, #1
}
 800686e:	b002      	add	sp, #8
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006874:	68e3      	ldr	r3, [r4, #12]
 8006876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800687a:	d0f1      	beq.n	8006860 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800687c:	9700      	str	r7, [sp, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	2200      	movs	r2, #0
 8006882:	2120      	movs	r1, #32
 8006884:	4620      	mov	r0, r4
 8006886:	f7ff ffa1 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800688a:	2800      	cmp	r0, #0
 800688c:	d1ef      	bne.n	800686e <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800688e:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8006890:	4641      	mov	r1, r8
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff feb8 	bl	8006608 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 8006898:	2800      	cmp	r0, #0
 800689a:	d1e8      	bne.n	800686e <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800689c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80068a0:	b193      	cbz	r3, 80068c8 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80068a2:	f8d8 3000 	ldr.w	r3, [r8]
 80068a6:	b9d3      	cbnz	r3, 80068de <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068a8:	2304      	movs	r3, #4
 80068aa:	6523      	str	r3, [r4, #80]	; 0x50
 80068ac:	e7df      	b.n	800686e <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068ae:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80068b2:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d8d5      	bhi.n	8006864 <HAL_OSPI_Command+0x1c>
 80068b8:	e7e0      	b.n	800687c <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80068ba:	f8d8 3000 	ldr.w	r3, [r8]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	bf18      	it	ne
 80068c2:	2b01      	cmpne	r3, #1
 80068c4:	d1d0      	bne.n	8006868 <HAL_OSPI_Command+0x20>
 80068c6:	e7d9      	b.n	800687c <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80068c8:	9700      	str	r7, [sp, #0]
 80068ca:	4633      	mov	r3, r6
 80068cc:	2201      	movs	r2, #1
 80068ce:	2102      	movs	r1, #2
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff ff7b 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	2202      	movs	r2, #2
 80068da:	625a      	str	r2, [r3, #36]	; 0x24
 80068dc:	e7c7      	b.n	800686e <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d007      	beq.n	80068f2 <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d1c3      	bne.n	800686e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80068e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068e8:	2b14      	cmp	r3, #20
 80068ea:	d00b      	beq.n	8006904 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068ec:	2324      	movs	r3, #36	; 0x24
 80068ee:	6523      	str	r3, [r4, #80]	; 0x50
 80068f0:	e7bd      	b.n	800686e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80068f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068f4:	2b24      	cmp	r3, #36	; 0x24
 80068f6:	d002      	beq.n	80068fe <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80068f8:	2314      	movs	r3, #20
 80068fa:	6523      	str	r3, [r4, #80]	; 0x50
 80068fc:	e7b7      	b.n	800686e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068fe:	2304      	movs	r3, #4
 8006900:	6523      	str	r3, [r4, #80]	; 0x50
 8006902:	e7b4      	b.n	800686e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006904:	2304      	movs	r3, #4
 8006906:	6523      	str	r3, [r4, #80]	; 0x50
 8006908:	e7b1      	b.n	800686e <HAL_OSPI_Command+0x26>

0800690a <HAL_OSPI_Transmit>:
{
 800690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	4604      	mov	r4, r0
 8006912:	4688      	mov	r8, r1
 8006914:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006916:	f7fe fa05 	bl	8004d24 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800691a:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800691c:	f1b8 0f00 	cmp.w	r8, #0
 8006920:	d00a      	beq.n	8006938 <HAL_OSPI_Transmit+0x2e>
 8006922:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006924:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006926:	2b04      	cmp	r3, #4
 8006928:	d00a      	beq.n	8006940 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800692a:	2310      	movs	r3, #16
 800692c:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
}
 8006930:	4618      	mov	r0, r3
 8006932:	b002      	add	sp, #8
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006938:	2308      	movs	r3, #8
 800693a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e7f7      	b.n	8006930 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	3301      	adds	r3, #1
 8006944:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8006946:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006948:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800694a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006954:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006956:	9600      	str	r6, [sp, #0]
 8006958:	462b      	mov	r3, r5
 800695a:	2201      	movs	r2, #1
 800695c:	2104      	movs	r1, #4
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff ff34 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006964:	4603      	mov	r3, r0
 8006966:	b960      	cbnz	r0, 8006982 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006968:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 8006970:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006972:	3101      	adds	r1, #1
 8006974:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006976:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006978:	3901      	subs	r1, #1
 800697a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800697c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800697e:	2a00      	cmp	r2, #0
 8006980:	d1e9      	bne.n	8006956 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d4      	bne.n	8006930 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006986:	9600      	str	r6, [sp, #0]
 8006988:	462b      	mov	r3, r5
 800698a:	2201      	movs	r2, #1
 800698c:	2102      	movs	r1, #2
 800698e:	4620      	mov	r0, r4
 8006990:	f7ff ff1c 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006994:	4603      	mov	r3, r0
 8006996:	2800      	cmp	r0, #0
 8006998:	d1ca      	bne.n	8006930 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800699a:	6821      	ldr	r1, [r4, #0]
 800699c:	2202      	movs	r2, #2
 800699e:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80069a0:	6522      	str	r2, [r4, #80]	; 0x50
 80069a2:	e7c5      	b.n	8006930 <HAL_OSPI_Transmit+0x26>

080069a4 <HAL_OSPI_Receive>:
{
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	4604      	mov	r4, r0
 80069ac:	4688      	mov	r8, r1
 80069ae:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80069b0:	f7fe f9b8 	bl	8004d24 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80069b4:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 80069b6:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80069b8:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	d00a      	beq.n	80069d8 <HAL_OSPI_Receive+0x34>
 80069c2:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80069c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d00a      	beq.n	80069e0 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80069ca:	2310      	movs	r3, #16
 80069cc:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	b002      	add	sp, #8
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069d8:	2308      	movs	r3, #8
 80069da:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e7f7      	b.n	80069d0 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80069e2:	3301      	adds	r3, #1
 80069e4:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80069e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80069e8:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 80069ea:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80069f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f8:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a00:	d007      	beq.n	8006a12 <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8006a08:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 8006a0c:	d02a      	beq.n	8006a64 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a0e:	649a      	str	r2, [r3, #72]	; 0x48
 8006a10:	e001      	b.n	8006a16 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a16:	9700      	str	r7, [sp, #0]
 8006a18:	4633      	mov	r3, r6
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	2106      	movs	r1, #6
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fed4 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006a24:	4603      	mov	r3, r0
 8006a26:	b960      	cbnz	r0, 8006a42 <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006a28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006a2a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8006a2e:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8006a30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a32:	3101      	adds	r1, #1
 8006a34:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006a36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a38:	3901      	subs	r1, #1
 8006a3a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8006a3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	d1e9      	bne.n	8006a16 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1c4      	bne.n	80069d0 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a46:	9700      	str	r7, [sp, #0]
 8006a48:	4633      	mov	r3, r6
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	2102      	movs	r1, #2
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff febc 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006a54:	4603      	mov	r3, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1ba      	bne.n	80069d0 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006a60:	6522      	str	r2, [r4, #80]	; 0x50
 8006a62:	e7b5      	b.n	80069d0 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006a64:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8006a68:	e7d5      	b.n	8006a16 <HAL_OSPI_Receive+0x72>

08006a6a <HAL_OSPI_AutoPolling>:
{
 8006a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	4604      	mov	r4, r0
 8006a72:	460d      	mov	r5, r1
 8006a74:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8006a76:	f7fe f955 	bl	8004d24 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8006a7a:	6821      	ldr	r1, [r4, #0]
 8006a7c:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8006a7e:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006a82:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006a84:	2904      	cmp	r1, #4
 8006a86:	d005      	beq.n	8006a94 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a88:	2310      	movs	r3, #16
 8006a8a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006a8c:	2001      	movs	r0, #1
}
 8006a8e:	b003      	add	sp, #12
 8006a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a94:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006a96:	68eb      	ldr	r3, [r5, #12]
 8006a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9c:	d1f4      	bne.n	8006a88 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a9e:	f8cd 9000 	str.w	r9, [sp]
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2120      	movs	r1, #32
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fe8f 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d1ed      	bne.n	8006a8e <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	682a      	ldr	r2, [r5, #0]
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	686a      	ldr	r2, [r5, #4]
 8006abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	692a      	ldr	r2, [r5, #16]
 8006ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	680b      	ldr	r3, [r1, #0]
 8006ace:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 8006ad2:	68aa      	ldr	r2, [r5, #8]
 8006ad4:	68e8      	ldr	r0, [r5, #12]
 8006ad6:	4302      	orrs	r2, r0
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ade:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006ae0:	68e3      	ldr	r3, [r4, #12]
 8006ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ae6:	d007      	beq.n	8006af8 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006aee:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8006af2:	d013      	beq.n	8006b1c <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006af4:	649f      	str	r7, [r3, #72]	; 0x48
 8006af6:	e001      	b.n	8006afc <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006afc:	f8cd 9000 	str.w	r9, [sp]
 8006b00:	4643      	mov	r3, r8
 8006b02:	2201      	movs	r2, #1
 8006b04:	2108      	movs	r1, #8
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff fe60 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d1be      	bne.n	8006a8e <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	2208      	movs	r2, #8
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8006b16:	2302      	movs	r3, #2
 8006b18:	6523      	str	r3, [r4, #80]	; 0x50
 8006b1a:	e7b8      	b.n	8006a8e <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006b1c:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 8006b20:	e7ec      	b.n	8006afc <HAL_OSPI_AutoPolling+0x92>
	...

08006b24 <HAL_OSPI_MemoryMapped>:
{
 8006b24:	b530      	push	{r4, r5, lr}
 8006b26:	b083      	sub	sp, #12
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006b2c:	f7fe f8fa 	bl	8004d24 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006b30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d004      	beq.n	8006b40 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b36:	2310      	movs	r3, #16
 8006b38:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
}
 8006b3c:	b003      	add	sp, #12
 8006b3e:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006b40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	4603      	mov	r3, r0
 8006b46:	2200      	movs	r2, #0
 8006b48:	2120      	movs	r1, #32
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff fe3e 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1f3      	bne.n	8006b3c <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006b54:	2388      	movs	r3, #136	; 0x88
 8006b56:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d009      	beq.n	8006b72 <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	6811      	ldr	r1, [r2, #0]
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <HAL_OSPI_MemoryMapped+0x68>)
 8006b64:	400b      	ands	r3, r1
 8006b66:	6829      	ldr	r1, [r5, #0]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	e7e4      	b.n	8006b3c <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	686a      	ldr	r2, [r5, #4]
 8006b76:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e7e8      	b.n	8006b5e <HAL_OSPI_MemoryMapped+0x3a>
 8006b8c:	cffffff7 	.word	0xcffffff7

08006b90 <HAL_OSPI_ErrorCallback>:
}
 8006b90:	4770      	bx	lr

08006b92 <HAL_OSPI_AbortCpltCallback>:
}
 8006b92:	4770      	bx	lr

08006b94 <OSPI_DMAAbortCplt>:
{
 8006b94:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8006b96:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006b9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba2:	d116      	bne.n	8006bd2 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ba4:	6803      	ldr	r3, [r0, #0]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	f012 0f20 	tst.w	r2, #32
 8006bac:	d00c      	beq.n	8006bc8 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006bae:	2202      	movs	r2, #2
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8006bb2:	6802      	ldr	r2, [r0, #0]
 8006bb4:	6813      	ldr	r3, [r2, #0]
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bba:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006bbc:	6802      	ldr	r2, [r0, #0]
 8006bbe:	6813      	ldr	r3, [r2, #0]
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	e008      	b.n	8006bda <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006bcc:	f7ff ffe1 	bl	8006b92 <HAL_OSPI_AbortCpltCallback>
 8006bd0:	e003      	b.n	8006bda <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8006bd6:	f7ff ffdb 	bl	8006b90 <HAL_OSPI_ErrorCallback>
}
 8006bda:	bd08      	pop	{r3, pc}

08006bdc <HAL_OSPI_FifoThresholdCallback>:
}
 8006bdc:	4770      	bx	lr

08006bde <HAL_OSPI_CmdCpltCallback>:
}
 8006bde:	4770      	bx	lr

08006be0 <HAL_OSPI_RxCpltCallback>:
}
 8006be0:	4770      	bx	lr

08006be2 <HAL_OSPI_TxCpltCallback>:
}
 8006be2:	4770      	bx	lr

08006be4 <HAL_OSPI_StatusMatchCallback>:
}
 8006be4:	4770      	bx	lr

08006be6 <HAL_OSPI_TimeOutCallback>:
}
 8006be6:	4770      	bx	lr

08006be8 <HAL_OSPI_IRQHandler>:
{
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006bec:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 8006bee:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 8006bf0:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 8006bf2:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8006bf4:	f013 0f04 	tst.w	r3, #4
 8006bf8:	d027      	beq.n	8006c4a <HAL_OSPI_IRQHandler+0x62>
 8006bfa:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8006bfe:	d024      	beq.n	8006c4a <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006c00:	2818      	cmp	r0, #24
 8006c02:	d00c      	beq.n	8006c1e <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006c04:	2828      	cmp	r0, #40	; 0x28
 8006c06:	d015      	beq.n	8006c34 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 8006c08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c0a:	b923      	cbnz	r3, 8006c16 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	6813      	ldr	r3, [r2, #0]
 8006c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff ffe0 	bl	8006bdc <HAL_OSPI_FifoThresholdCallback>
}
 8006c1c:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 8006c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 8006c2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c32:	e7e9      	b.n	8006c08 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c36:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006c3a:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c3e:	3301      	adds	r3, #1
 8006c40:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 8006c42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c44:	3b01      	subs	r3, #1
 8006c46:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c48:	e7de      	b.n	8006c08 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006c4a:	f013 0f02 	tst.w	r3, #2
 8006c4e:	d044      	beq.n	8006cda <HAL_OSPI_IRQHandler+0xf2>
 8006c50:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8006c54:	d041      	beq.n	8006cda <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006c56:	2828      	cmp	r0, #40	; 0x28
 8006c58:	d014      	beq.n	8006c84 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006c66:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006c68:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006c6a:	2818      	cmp	r0, #24
 8006c6c:	d029      	beq.n	8006cc2 <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8006c6e:	2808      	cmp	r0, #8
 8006c70:	d02b      	beq.n	8006cca <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8006c72:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006c76:	d1d1      	bne.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8006c78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c7a:	bb53      	cbnz	r3, 8006cd2 <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7ff ff88 	bl	8006b92 <HAL_OSPI_AbortCpltCallback>
 8006c82:	e7cb      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8006c84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c86:	b169      	cbz	r1, 8006ca4 <HAL_OSPI_IRQHandler+0xbc>
 8006c88:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c90:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8006c94:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c98:	3301      	adds	r3, #1
 8006c9a:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006c9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ca2:	e7bb      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 8006ca4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1b8      	bne.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006caa:	2102      	movs	r1, #2
 8006cac:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	6813      	ldr	r3, [r2, #0]
 8006cb2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006cb6:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 8006cb8:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff ff90 	bl	8006be0 <HAL_OSPI_RxCpltCallback>
 8006cc0:	e7ac      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7ff ff8d 	bl	8006be2 <HAL_OSPI_TxCpltCallback>
 8006cc8:	e7a8      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff ff87 	bl	8006bde <HAL_OSPI_CmdCpltCallback>
 8006cd0:	e7a4      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f7ff ff5c 	bl	8006b90 <HAL_OSPI_ErrorCallback>
 8006cd8:	e7a0      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8006cda:	f013 0f08 	tst.w	r3, #8
 8006cde:	d013      	beq.n	8006d08 <HAL_OSPI_IRQHandler+0x120>
 8006ce0:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8006ce4:	d010      	beq.n	8006d08 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8006cf2:	d005      	beq.n	8006d00 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006cfa:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7ff ff6f 	bl	8006be4 <HAL_OSPI_StatusMatchCallback>
 8006d06:	e789      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8006d08:	f013 0f01 	tst.w	r3, #1
 8006d0c:	d029      	beq.n	8006d62 <HAL_OSPI_IRQHandler+0x17a>
 8006d0e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8006d12:	d026      	beq.n	8006d62 <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8006d14:	2301      	movs	r3, #1
 8006d16:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8006d18:	6822      	ldr	r2, [r4, #0]
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d20:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8006d22:	2302      	movs	r3, #2
 8006d24:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	f012 0f04 	tst.w	r2, #4
 8006d2e:	d012      	beq.n	8006d56 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	f022 0204 	bic.w	r2, r2, #4
 8006d36:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8006d38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006d3a:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <HAL_OSPI_IRQHandler+0x198>)
 8006d3c:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8006d3e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006d40:	f7ff fc4c 	bl	80065dc <HAL_MDMA_Abort_IT>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f43f af69 	beq.w	8006c1c <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff1e 	bl	8006b90 <HAL_OSPI_ErrorCallback>
 8006d54:	e762      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 8006d56:	2302      	movs	r3, #2
 8006d58:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff18 	bl	8006b90 <HAL_OSPI_ErrorCallback>
 8006d60:	e75c      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8006d62:	f013 0f10 	tst.w	r3, #16
 8006d66:	f43f af59 	beq.w	8006c1c <HAL_OSPI_IRQHandler+0x34>
 8006d6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006d6e:	f43f af55 	beq.w	8006c1c <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8006d72:	2310      	movs	r3, #16
 8006d74:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff ff35 	bl	8006be6 <HAL_OSPI_TimeOutCallback>
}
 8006d7c:	e74e      	b.n	8006c1c <HAL_OSPI_IRQHandler+0x34>
 8006d7e:	bf00      	nop
 8006d80:	08006b95 	.word	0x08006b95

08006d84 <HAL_OSPI_Abort>:
{
 8006d84:	b530      	push	{r4, r5, lr}
 8006d86:	b083      	sub	sp, #12
 8006d88:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006d8a:	f7fd ffcb 	bl	8004d24 <HAL_GetTick>
  state = hospi->State;
 8006d8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006d90:	f012 0f0c 	tst.w	r2, #12
 8006d94:	d036      	beq.n	8006e04 <HAL_OSPI_Abort+0x80>
 8006d96:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f012 0f04 	tst.w	r2, #4
 8006da0:	d108      	bne.n	8006db4 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	f012 0f20 	tst.w	r2, #32
 8006dac:	d10e      	bne.n	8006dcc <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 8006dae:	2302      	movs	r3, #2
 8006db0:	6523      	str	r3, [r4, #80]	; 0x50
 8006db2:	e02a      	b.n	8006e0a <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006dbc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006dbe:	f7ff fbcf 	bl	8006560 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d0ee      	beq.n	8006da4 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	6563      	str	r3, [r4, #84]	; 0x54
 8006dca:	e7eb      	b.n	8006da4 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	f042 0202 	orr.w	r2, r2, #2
 8006dd2:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006dd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	462b      	mov	r3, r5
 8006dda:	2201      	movs	r2, #1
 8006ddc:	2102      	movs	r1, #2
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff fcf4 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006de4:	b988      	cbnz	r0, 8006e0a <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	2202      	movs	r2, #2
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006dec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	462b      	mov	r3, r5
 8006df2:	2200      	movs	r2, #0
 8006df4:	2120      	movs	r1, #32
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff fce8 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006dfc:	b928      	cbnz	r0, 8006e0a <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	6523      	str	r3, [r4, #80]	; 0x50
 8006e02:	e002      	b.n	8006e0a <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006e04:	2310      	movs	r3, #16
 8006e06:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 8006e08:	2001      	movs	r0, #1
}
 8006e0a:	b003      	add	sp, #12
 8006e0c:	bd30      	pop	{r4, r5, pc}

08006e0e <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 8006e0e:	6581      	str	r1, [r0, #88]	; 0x58
}
 8006e10:	2000      	movs	r0, #0
 8006e12:	4770      	bx	lr

08006e14 <HAL_OSPI_Init>:
{
 8006e14:	b530      	push	{r4, r5, lr}
 8006e16:	b083      	sub	sp, #12
 8006e18:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006e1a:	f7fd ff83 	bl	8004d24 <HAL_GetTick>
  if (hospi == NULL)
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	d077      	beq.n	8006f12 <HAL_OSPI_Init+0xfe>
 8006e22:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006e28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006e2a:	b113      	cbz	r3, 8006e32 <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8006e2c:	2000      	movs	r0, #0
}
 8006e2e:	b003      	add	sp, #12
 8006e30:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7fb f970 	bl	8002118 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006e38:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7ff ffe6 	bl	8006e0e <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	6882      	ldr	r2, [r0, #8]
 8006e46:	4b34      	ldr	r3, [pc, #208]	; (8006f18 <HAL_OSPI_Init+0x104>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	68e2      	ldr	r2, [r4, #12]
 8006e4c:	6921      	ldr	r1, [r4, #16]
 8006e4e:	3901      	subs	r1, #1
 8006e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e54:	6961      	ldr	r1, [r4, #20]
 8006e56:	3901      	subs	r1, #1
 8006e58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	69e1      	ldr	r1, [r4, #28]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	68d3      	ldr	r3, [r2, #12]
 8006e6c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006e70:	6a21      	ldr	r1, [r4, #32]
 8006e72:	430b      	orrs	r3, r1
 8006e74:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006e76:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e80:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006e86:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006e88:	6821      	ldr	r1, [r4, #0]
 8006e8a:	680b      	ldr	r3, [r1, #0]
 8006e8c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	3a01      	subs	r2, #1
 8006e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e98:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2120      	movs	r1, #32
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f7ff fc91 	bl	80067cc <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1bf      	bne.n	8006e2e <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006eae:	6821      	ldr	r1, [r4, #0]
 8006eb0:	68cb      	ldr	r3, [r1, #12]
 8006eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006eb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	6813      	ldr	r3, [r2, #0]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	68a1      	ldr	r1, [r4, #8]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006ecc:	6821      	ldr	r1, [r4, #0]
 8006ece:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 8006ed2:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 8006ed6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ed8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006eda:	432a      	orrs	r2, r5
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	6813      	ldr	r3, [r2, #0]
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006eec:	69a3      	ldr	r3, [r4, #24]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d006      	beq.n	8006f00 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ef8:	d008      	beq.n	8006f0c <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 8006efa:	2302      	movs	r3, #2
 8006efc:	6523      	str	r3, [r4, #80]	; 0x50
 8006efe:	e796      	b.n	8006e2e <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	6893      	ldr	r3, [r2, #8]
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	6093      	str	r3, [r2, #8]
 8006f0a:	e7f2      	b.n	8006ef2 <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	6523      	str	r3, [r4, #80]	; 0x50
 8006f10:	e78d      	b.n	8006e2e <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 8006f12:	2001      	movs	r0, #1
 8006f14:	e78b      	b.n	8006e2e <HAL_OSPI_Init+0x1a>
 8006f16:	bf00      	nop
 8006f18:	f8e0f8f4 	.word	0xf8e0f8f4

08006f1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <HAL_PWREx_ConfigSupply+0x90>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d007      	beq.n	8006f3c <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <HAL_PWREx_ConfigSupply+0x90>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f34:	4283      	cmp	r3, r0
 8006f36:	d036      	beq.n	8006fa6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f38:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <HAL_PWREx_ConfigSupply+0x90>)
 8006f3e:	68d3      	ldr	r3, [r2, #12]
 8006f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f44:	4303      	orrs	r3, r0
 8006f46:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8006f48:	f7fd feec 	bl	8004d24 <HAL_GetTick>
 8006f4c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f4e:	4b17      	ldr	r3, [pc, #92]	; (8006fac <HAL_PWREx_ConfigSupply+0x90>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006f56:	d107      	bne.n	8006f68 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f58:	f7fd fee4 	bl	8004d24 <HAL_GetTick>
 8006f5c:	1b43      	subs	r3, r0, r5
 8006f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f62:	d9f4      	bls.n	8006f4e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 8006f64:	2001      	movs	r0, #1
 8006f66:	e7e8      	b.n	8006f3a <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006f68:	2c2e      	cmp	r4, #46	; 0x2e
 8006f6a:	bf18      	it	ne
 8006f6c:	2c1e      	cmpne	r4, #30
 8006f6e:	d008      	beq.n	8006f82 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8006f70:	2c2d      	cmp	r4, #45	; 0x2d
 8006f72:	bf14      	ite	ne
 8006f74:	2300      	movne	r3, #0
 8006f76:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006f78:	2c1d      	cmp	r4, #29
 8006f7a:	d002      	beq.n	8006f82 <HAL_PWREx_ConfigSupply+0x66>
 8006f7c:	b90b      	cbnz	r3, 8006f82 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7db      	b.n	8006f3a <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 8006f82:	f7fd fecf 	bl	8004d24 <HAL_GetTick>
 8006f86:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006f88:	4b08      	ldr	r3, [pc, #32]	; (8006fac <HAL_PWREx_ConfigSupply+0x90>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f90:	d107      	bne.n	8006fa2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f92:	f7fd fec7 	bl	8004d24 <HAL_GetTick>
 8006f96:	1b00      	subs	r0, r0, r4
 8006f98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006f9c:	d9f4      	bls.n	8006f88 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	e7cb      	b.n	8006f3a <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e7c9      	b.n	8006f3a <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e7c7      	b.n	8006f3a <HAL_PWREx_ConfigSupply+0x1e>
 8006faa:	bf00      	nop
 8006fac:	58024800 	.word	0x58024800

08006fb0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f000 82f0 	beq.w	8007596 <HAL_RCC_OscConfig+0x5e6>
{
 8006fb6:	b538      	push	{r3, r4, r5, lr}
 8006fb8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fba:	6803      	ldr	r3, [r0, #0]
 8006fbc:	f013 0f01 	tst.w	r3, #1
 8006fc0:	d029      	beq.n	8007016 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc2:	4aa1      	ldr	r2, [pc, #644]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8006fc4:	6913      	ldr	r3, [r2, #16]
 8006fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fca:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d019      	beq.n	8007004 <HAL_RCC_OscConfig+0x54>
 8006fd0:	2b18      	cmp	r3, #24
 8006fd2:	d013      	beq.n	8006ffc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d043      	beq.n	8007064 <HAL_RCC_OscConfig+0xb4>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d158      	bne.n	8007092 <HAL_RCC_OscConfig+0xe2>
 8006fe0:	4b99      	ldr	r3, [pc, #612]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e038      	b.n	800706e <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ffc:	f002 0203 	and.w	r2, r2, #3
 8007000:	2a02      	cmp	r2, #2
 8007002:	d1e7      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007004:	4b90      	ldr	r3, [pc, #576]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800700c:	d003      	beq.n	8007016 <HAL_RCC_OscConfig+0x66>
 800700e:	6863      	ldr	r3, [r4, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 82c2 	beq.w	800759a <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	f013 0f02 	tst.w	r3, #2
 800701c:	f000 80a2 	beq.w	8007164 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007020:	4a89      	ldr	r2, [pc, #548]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007022:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007024:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007026:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800702a:	d074      	beq.n	8007116 <HAL_RCC_OscConfig+0x166>
 800702c:	2b18      	cmp	r3, #24
 800702e:	d06f      	beq.n	8007110 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007030:	68e3      	ldr	r3, [r4, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80c3 	beq.w	80071be <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007038:	4983      	ldr	r1, [pc, #524]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800703a:	680a      	ldr	r2, [r1, #0]
 800703c:	f022 0219 	bic.w	r2, r2, #25
 8007040:	4313      	orrs	r3, r2
 8007042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007044:	f7fd fe6e 	bl	8004d24 <HAL_GetTick>
 8007048:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800704a:	4b7f      	ldr	r3, [pc, #508]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f013 0f04 	tst.w	r3, #4
 8007052:	f040 80ab 	bne.w	80071ac <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007056:	f7fd fe65 	bl	8004d24 <HAL_GetTick>
 800705a:	1b40      	subs	r0, r0, r5
 800705c:	2802      	cmp	r0, #2
 800705e:	d9f4      	bls.n	800704a <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8007060:	2003      	movs	r0, #3
 8007062:	e2a1      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007064:	4a78      	ldr	r2, [pc, #480]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007066:	6813      	ldr	r3, [r2, #0]
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d03e      	beq.n	80070f2 <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8007074:	f7fd fe56 	bl	8004d24 <HAL_GetTick>
 8007078:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800707a:	4b73      	ldr	r3, [pc, #460]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007082:	d1c8      	bne.n	8007016 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007084:	f7fd fe4e 	bl	8004d24 <HAL_GetTick>
 8007088:	1b40      	subs	r0, r0, r5
 800708a:	2864      	cmp	r0, #100	; 0x64
 800708c:	d9f5      	bls.n	800707a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800708e:	2003      	movs	r0, #3
 8007090:	e28a      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007096:	d010      	beq.n	80070ba <HAL_RCC_OscConfig+0x10a>
 8007098:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800709c:	d01b      	beq.n	80070d6 <HAL_RCC_OscConfig+0x126>
 800709e:	4b6a      	ldr	r3, [pc, #424]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e7d9      	b.n	800706e <HAL_RCC_OscConfig+0xbe>
 80070ba:	4b63      	ldr	r3, [pc, #396]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e7cb      	b.n	800706e <HAL_RCC_OscConfig+0xbe>
 80070d6:	4b5c      	ldr	r3, [pc, #368]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e7bd      	b.n	800706e <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80070f2:	f7fd fe17 	bl	8004d24 <HAL_GetTick>
 80070f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070f8:	4b53      	ldr	r3, [pc, #332]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007100:	d089      	beq.n	8007016 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007102:	f7fd fe0f 	bl	8004d24 <HAL_GetTick>
 8007106:	1b40      	subs	r0, r0, r5
 8007108:	2864      	cmp	r0, #100	; 0x64
 800710a:	d9f5      	bls.n	80070f8 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800710c:	2003      	movs	r0, #3
 800710e:	e24b      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007110:	f012 0f03 	tst.w	r2, #3
 8007114:	d18c      	bne.n	8007030 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007116:	4b4c      	ldr	r3, [pc, #304]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f013 0f04 	tst.w	r3, #4
 800711e:	d003      	beq.n	8007128 <HAL_RCC_OscConfig+0x178>
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 823b 	beq.w	800759e <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007128:	4a47      	ldr	r2, [pc, #284]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	f023 0319 	bic.w	r3, r3, #25
 8007130:	68e1      	ldr	r1, [r4, #12]
 8007132:	430b      	orrs	r3, r1
 8007134:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8007136:	f7fd fdf5 	bl	8004d24 <HAL_GetTick>
 800713a:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800713c:	4b42      	ldr	r3, [pc, #264]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f013 0f04 	tst.w	r3, #4
 8007144:	d106      	bne.n	8007154 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007146:	f7fd fded 	bl	8004d24 <HAL_GetTick>
 800714a:	1b40      	subs	r0, r0, r5
 800714c:	2802      	cmp	r0, #2
 800714e:	d9f5      	bls.n	800713c <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 8007150:	2003      	movs	r0, #3
 8007152:	e229      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007154:	4a3c      	ldr	r2, [pc, #240]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007156:	6853      	ldr	r3, [r2, #4]
 8007158:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800715c:	6921      	ldr	r1, [r4, #16]
 800715e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007162:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f013 0f10 	tst.w	r3, #16
 800716a:	d051      	beq.n	8007210 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800716c:	4a36      	ldr	r2, [pc, #216]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 800716e:	6913      	ldr	r3, [r2, #16]
 8007170:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007174:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007176:	2b08      	cmp	r3, #8
 8007178:	d039      	beq.n	80071ee <HAL_RCC_OscConfig+0x23e>
 800717a:	2b18      	cmp	r3, #24
 800717c:	d033      	beq.n	80071e6 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800717e:	69e3      	ldr	r3, [r4, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d06c      	beq.n	800725e <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007184:	4a30      	ldr	r2, [pc, #192]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fd fdc9 	bl	8004d24 <HAL_GetTick>
 8007192:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007194:	4b2c      	ldr	r3, [pc, #176]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f413 7f80 	tst.w	r3, #256	; 0x100
 800719c:	d156      	bne.n	800724c <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800719e:	f7fd fdc1 	bl	8004d24 <HAL_GetTick>
 80071a2:	1b40      	subs	r0, r0, r5
 80071a4:	2802      	cmp	r0, #2
 80071a6:	d9f5      	bls.n	8007194 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 80071a8:	2003      	movs	r0, #3
 80071aa:	e1fd      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	4a26      	ldr	r2, [pc, #152]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80071ae:	6853      	ldr	r3, [r2, #4]
 80071b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071b4:	6921      	ldr	r1, [r4, #16]
 80071b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80071ba:	6053      	str	r3, [r2, #4]
 80071bc:	e7d2      	b.n	8007164 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 80071be:	4a22      	ldr	r2, [pc, #136]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80071c8:	f7fd fdac 	bl	8004d24 <HAL_GetTick>
 80071cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071ce:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f013 0f04 	tst.w	r3, #4
 80071d6:	d0c5      	beq.n	8007164 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071d8:	f7fd fda4 	bl	8004d24 <HAL_GetTick>
 80071dc:	1b40      	subs	r0, r0, r5
 80071de:	2802      	cmp	r0, #2
 80071e0:	d9f5      	bls.n	80071ce <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 80071e2:	2003      	movs	r0, #3
 80071e4:	e1e0      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071e6:	f002 0203 	and.w	r2, r2, #3
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	d1c7      	bne.n	800717e <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ee:	4b16      	ldr	r3, [pc, #88]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80071f6:	d003      	beq.n	8007200 <HAL_RCC_OscConfig+0x250>
 80071f8:	69e3      	ldr	r3, [r4, #28]
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	f040 81d1 	bne.w	80075a2 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007200:	4a11      	ldr	r2, [pc, #68]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007202:	68d3      	ldr	r3, [r2, #12]
 8007204:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800720e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	f013 0f08 	tst.w	r3, #8
 8007216:	d04a      	beq.n	80072ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007218:	6963      	ldr	r3, [r4, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d033      	beq.n	8007286 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007220:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007228:	f7fd fd7c 	bl	8004d24 <HAL_GetTick>
 800722c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_RCC_OscConfig+0x298>)
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	f013 0f02 	tst.w	r3, #2
 8007236:	d13a      	bne.n	80072ae <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007238:	f7fd fd74 	bl	8004d24 <HAL_GetTick>
 800723c:	1b40      	subs	r0, r0, r5
 800723e:	2802      	cmp	r0, #2
 8007240:	d9f5      	bls.n	800722e <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 8007242:	2003      	movs	r0, #3
 8007244:	e1b0      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800724c:	4a8c      	ldr	r2, [pc, #560]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 800724e:	68d3      	ldr	r3, [r2, #12]
 8007250:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800725a:	60d3      	str	r3, [r2, #12]
 800725c:	e7d8      	b.n	8007210 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800725e:	4a88      	ldr	r2, [pc, #544]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007260:	6813      	ldr	r3, [r2, #0]
 8007262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007266:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007268:	f7fd fd5c 	bl	8004d24 <HAL_GetTick>
 800726c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800726e:	4b84      	ldr	r3, [pc, #528]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007276:	d0cb      	beq.n	8007210 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007278:	f7fd fd54 	bl	8004d24 <HAL_GetTick>
 800727c:	1b40      	subs	r0, r0, r5
 800727e:	2802      	cmp	r0, #2
 8007280:	d9f5      	bls.n	800726e <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8007282:	2003      	movs	r0, #3
 8007284:	e190      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007286:	4a7e      	ldr	r2, [pc, #504]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007288:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800728a:	f023 0301 	bic.w	r3, r3, #1
 800728e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007290:	f7fd fd48 	bl	8004d24 <HAL_GetTick>
 8007294:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007296:	4b7a      	ldr	r3, [pc, #488]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729a:	f013 0f02 	tst.w	r3, #2
 800729e:	d006      	beq.n	80072ae <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072a0:	f7fd fd40 	bl	8004d24 <HAL_GetTick>
 80072a4:	1b40      	subs	r0, r0, r5
 80072a6:	2802      	cmp	r0, #2
 80072a8:	d9f5      	bls.n	8007296 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 80072aa:	2003      	movs	r0, #3
 80072ac:	e17c      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f013 0f20 	tst.w	r3, #32
 80072b4:	d029      	beq.n	800730a <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80072b6:	69a3      	ldr	r3, [r4, #24]
 80072b8:	b19b      	cbz	r3, 80072e2 <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072ba:	4a71      	ldr	r2, [pc, #452]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80072bc:	6813      	ldr	r3, [r2, #0]
 80072be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072c4:	f7fd fd2e 	bl	8004d24 <HAL_GetTick>
 80072c8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072ca:	4b6d      	ldr	r3, [pc, #436]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80072d2:	d11a      	bne.n	800730a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072d4:	f7fd fd26 	bl	8004d24 <HAL_GetTick>
 80072d8:	1b40      	subs	r0, r0, r5
 80072da:	2802      	cmp	r0, #2
 80072dc:	d9f5      	bls.n	80072ca <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 80072de:	2003      	movs	r0, #3
 80072e0:	e162      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072e2:	4a67      	ldr	r2, [pc, #412]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ec:	f7fd fd1a 	bl	8004d24 <HAL_GetTick>
 80072f0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072f2:	4b63      	ldr	r3, [pc, #396]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80072fa:	d006      	beq.n	800730a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072fc:	f7fd fd12 	bl	8004d24 <HAL_GetTick>
 8007300:	1b40      	subs	r0, r0, r5
 8007302:	2802      	cmp	r0, #2
 8007304:	d9f5      	bls.n	80072f2 <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 8007306:	2003      	movs	r0, #3
 8007308:	e14e      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	f013 0f04 	tst.w	r3, #4
 8007310:	d122      	bne.n	8007358 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8146 	beq.w	80075a6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800731a:	4a59      	ldr	r2, [pc, #356]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 800731c:	6912      	ldr	r2, [r2, #16]
 800731e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007322:	2a18      	cmp	r2, #24
 8007324:	f000 810e 	beq.w	8007544 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007328:	2b02      	cmp	r3, #2
 800732a:	f000 8094 	beq.w	8007456 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800732e:	4a54      	ldr	r2, [pc, #336]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007330:	6813      	ldr	r3, [r2, #0]
 8007332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fd fcf4 	bl	8004d24 <HAL_GetTick>
 800733c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800733e:	4b50      	ldr	r3, [pc, #320]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007346:	f000 80fb 	beq.w	8007540 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800734a:	f7fd fceb 	bl	8004d24 <HAL_GetTick>
 800734e:	1b00      	subs	r0, r0, r4
 8007350:	2802      	cmp	r0, #2
 8007352:	d9f4      	bls.n	800733e <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 8007354:	2003      	movs	r0, #3
 8007356:	e127      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 8007358:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_RCC_OscConfig+0x4d4>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007360:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007362:	f7fd fcdf 	bl	8004d24 <HAL_GetTick>
 8007366:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007368:	4b46      	ldr	r3, [pc, #280]	; (8007484 <HAL_RCC_OscConfig+0x4d4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007370:	d106      	bne.n	8007380 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007372:	f7fd fcd7 	bl	8004d24 <HAL_GetTick>
 8007376:	1b40      	subs	r0, r0, r5
 8007378:	2864      	cmp	r0, #100	; 0x64
 800737a:	d9f5      	bls.n	8007368 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800737c:	2003      	movs	r0, #3
 800737e:	e113      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d00e      	beq.n	80073a4 <HAL_RCC_OscConfig+0x3f4>
 8007386:	bb33      	cbnz	r3, 80073d6 <HAL_RCC_OscConfig+0x426>
 8007388:	4b3d      	ldr	r3, [pc, #244]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 800738a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	671a      	str	r2, [r3, #112]	; 0x70
 8007392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007398:	671a      	str	r2, [r3, #112]	; 0x70
 800739a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800739c:	f022 0204 	bic.w	r2, r2, #4
 80073a0:	671a      	str	r2, [r3, #112]	; 0x70
 80073a2:	e004      	b.n	80073ae <HAL_RCC_OscConfig+0x3fe>
 80073a4:	4a36      	ldr	r2, [pc, #216]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80073a6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d03e      	beq.n	8007432 <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 80073b4:	f7fd fcb6 	bl	8004d24 <HAL_GetTick>
 80073b8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ba:	4b31      	ldr	r3, [pc, #196]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f013 0f02 	tst.w	r3, #2
 80073c2:	d1a6      	bne.n	8007312 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c4:	f7fd fcae 	bl	8004d24 <HAL_GetTick>
 80073c8:	1b40      	subs	r0, r0, r5
 80073ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ce:	4298      	cmp	r0, r3
 80073d0:	d9f3      	bls.n	80073ba <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80073d2:	2003      	movs	r0, #3
 80073d4:	e0e8      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d00f      	beq.n	80073fa <HAL_RCC_OscConfig+0x44a>
 80073da:	2b85      	cmp	r3, #133	; 0x85
 80073dc:	d01b      	beq.n	8007416 <HAL_RCC_OscConfig+0x466>
 80073de:	4b28      	ldr	r3, [pc, #160]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80073e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	671a      	str	r2, [r3, #112]	; 0x70
 80073e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ea:	f022 0204 	bic.w	r2, r2, #4
 80073ee:	671a      	str	r2, [r3, #112]	; 0x70
 80073f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f6:	671a      	str	r2, [r3, #112]	; 0x70
 80073f8:	e7d9      	b.n	80073ae <HAL_RCC_OscConfig+0x3fe>
 80073fa:	4b21      	ldr	r3, [pc, #132]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 80073fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073fe:	f042 0204 	orr.w	r2, r2, #4
 8007402:	671a      	str	r2, [r3, #112]	; 0x70
 8007404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800740a:	671a      	str	r2, [r3, #112]	; 0x70
 800740c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	671a      	str	r2, [r3, #112]	; 0x70
 8007414:	e7cb      	b.n	80073ae <HAL_RCC_OscConfig+0x3fe>
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007418:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800741a:	f042 0204 	orr.w	r2, r2, #4
 800741e:	671a      	str	r2, [r3, #112]	; 0x70
 8007420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007426:	671a      	str	r2, [r3, #112]	; 0x70
 8007428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	671a      	str	r2, [r3, #112]	; 0x70
 8007430:	e7bd      	b.n	80073ae <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8007432:	f7fd fc77 	bl	8004d24 <HAL_GetTick>
 8007436:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007438:	4b11      	ldr	r3, [pc, #68]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	f013 0f02 	tst.w	r3, #2
 8007440:	f43f af67 	beq.w	8007312 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007444:	f7fd fc6e 	bl	8004d24 <HAL_GetTick>
 8007448:	1b40      	subs	r0, r0, r5
 800744a:	f241 3388 	movw	r3, #5000	; 0x1388
 800744e:	4298      	cmp	r0, r3
 8007450:	d9f2      	bls.n	8007438 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 8007452:	2003      	movs	r0, #3
 8007454:	e0a8      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 8007456:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007458:	6813      	ldr	r3, [r2, #0]
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007460:	f7fd fc60 	bl	8004d24 <HAL_GetTick>
 8007464:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007466:	4b06      	ldr	r3, [pc, #24]	; (8007480 <HAL_RCC_OscConfig+0x4d0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800746e:	d00b      	beq.n	8007488 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007470:	f7fd fc58 	bl	8004d24 <HAL_GetTick>
 8007474:	1b40      	subs	r0, r0, r5
 8007476:	2802      	cmp	r0, #2
 8007478:	d9f5      	bls.n	8007466 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800747a:	2003      	movs	r0, #3
 800747c:	e094      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 800747e:	bf00      	nop
 8007480:	58024400 	.word	0x58024400
 8007484:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007488:	4b4f      	ldr	r3, [pc, #316]	; (80075c8 <HAL_RCC_OscConfig+0x618>)
 800748a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800748c:	4a4f      	ldr	r2, [pc, #316]	; (80075cc <HAL_RCC_OscConfig+0x61c>)
 800748e:	400a      	ands	r2, r1
 8007490:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007492:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007494:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8007498:	430a      	orrs	r2, r1
 800749a:	629a      	str	r2, [r3, #40]	; 0x28
 800749c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800749e:	3a01      	subs	r2, #1
 80074a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a6:	3901      	subs	r1, #1
 80074a8:	0249      	lsls	r1, r1, #9
 80074aa:	b289      	uxth	r1, r1
 80074ac:	430a      	orrs	r2, r1
 80074ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074b0:	3901      	subs	r1, #1
 80074b2:	0409      	lsls	r1, r1, #16
 80074b4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80074b8:	430a      	orrs	r2, r1
 80074ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80074bc:	3901      	subs	r1, #1
 80074be:	0609      	lsls	r1, r1, #24
 80074c0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80074c4:	430a      	orrs	r2, r1
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074d2:	4a3f      	ldr	r2, [pc, #252]	; (80075d0 <HAL_RCC_OscConfig+0x620>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80074d8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e0:	f022 020c 	bic.w	r2, r2, #12
 80074e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80074e6:	430a      	orrs	r2, r1
 80074e8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	f022 0202 	bic.w	r2, r2, #2
 80074f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80074f2:	430a      	orrs	r2, r1
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007504:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800750c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	f042 0201 	orr.w	r2, r2, #1
 8007514:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800751c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800751e:	f7fd fc01 	bl	8004d24 <HAL_GetTick>
 8007522:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007524:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <HAL_RCC_OscConfig+0x618>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800752c:	d106      	bne.n	800753c <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800752e:	f7fd fbf9 	bl	8004d24 <HAL_GetTick>
 8007532:	1b00      	subs	r0, r0, r4
 8007534:	2802      	cmp	r0, #2
 8007536:	d9f5      	bls.n	8007524 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 8007538:	2003      	movs	r0, #3
 800753a:	e035      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800753c:	2000      	movs	r0, #0
 800753e:	e033      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 8007540:	2000      	movs	r0, #0
 8007542:	e031      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007544:	4920      	ldr	r1, [pc, #128]	; (80075c8 <HAL_RCC_OscConfig+0x618>)
 8007546:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007548:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754a:	2b01      	cmp	r3, #1
 800754c:	d02d      	beq.n	80075aa <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	f002 0303 	and.w	r3, r2, #3
 8007552:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007554:	428b      	cmp	r3, r1
 8007556:	d12a      	bne.n	80075ae <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007558:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800755c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755e:	429a      	cmp	r2, r3
 8007560:	d127      	bne.n	80075b2 <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007562:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007566:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007568:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d123      	bne.n	80075b6 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800756e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8007572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007574:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d11f      	bne.n	80075ba <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800757a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800757e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007580:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007582:	429a      	cmp	r2, r3
 8007584:	d11b      	bne.n	80075be <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007586:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800758a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800758c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800758e:	4298      	cmp	r0, r3
 8007590:	d117      	bne.n	80075c2 <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 8007592:	2000      	movs	r0, #0
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 8007596:	2001      	movs	r0, #1
}
 8007598:	4770      	bx	lr
        return HAL_ERROR;
 800759a:	2001      	movs	r0, #1
 800759c:	e004      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800759e:	2001      	movs	r0, #1
 80075a0:	e002      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 80075a2:	2001      	movs	r0, #1
 80075a4:	e000      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 80075a6:	2000      	movs	r0, #0
}
 80075a8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80075aa:	2001      	movs	r0, #1
 80075ac:	e7fc      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075ae:	2001      	movs	r0, #1
 80075b0:	e7fa      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075b2:	2001      	movs	r0, #1
 80075b4:	e7f8      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075b6:	2001      	movs	r0, #1
 80075b8:	e7f6      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7f4      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075be:	2001      	movs	r0, #1
 80075c0:	e7f2      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7f0      	b.n	80075a8 <HAL_RCC_OscConfig+0x5f8>
 80075c6:	bf00      	nop
 80075c8:	58024400 	.word	0x58024400
 80075cc:	fffffc0c 	.word	0xfffffc0c
 80075d0:	ffff0007 	.word	0xffff0007

080075d4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d4:	4b74      	ldr	r3, [pc, #464]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075dc:	2b10      	cmp	r3, #16
 80075de:	f000 80de 	beq.w	800779e <HAL_RCC_GetSysClockFreq+0x1ca>
 80075e2:	2b18      	cmp	r3, #24
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_GetSysClockFreq+0x34>
 80075e6:	b10b      	cbz	r3, 80075ec <HAL_RCC_GetSysClockFreq+0x18>
 80075e8:	4870      	ldr	r0, [pc, #448]	; (80077ac <HAL_RCC_GetSysClockFreq+0x1d8>)
 80075ea:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ec:	4b6e      	ldr	r3, [pc, #440]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f013 0f20 	tst.w	r3, #32
 80075f4:	f000 80d5 	beq.w	80077a2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075f8:	4b6b      	ldr	r3, [pc, #428]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8007600:	4b6b      	ldr	r3, [pc, #428]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007602:	fa23 f000 	lsr.w	r0, r3, r0
 8007606:	4770      	bx	lr
{
 8007608:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800760a:	4a67      	ldr	r2, [pc, #412]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800760c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800760e:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007612:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8007614:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007618:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800761a:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800761e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007620:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007624:	fb0c f303 	mul.w	r3, ip, r3
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8007630:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8007634:	f000 8093 	beq.w	800775e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8007638:	2901      	cmp	r1, #1
 800763a:	d065      	beq.n	8007708 <HAL_RCC_GetSysClockFreq+0x134>
 800763c:	2902      	cmp	r1, #2
 800763e:	f000 8091 	beq.w	8007764 <HAL_RCC_GetSysClockFreq+0x190>
 8007642:	b1e1      	cbz	r1, 800767e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007644:	ee07 0a10 	vmov	s14, r0
 8007648:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800764c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 80077b4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8007650:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007654:	4b54      	ldr	r3, [pc, #336]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	ee06 3a90 	vmov	s13, r3
 8007660:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007664:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007668:	ee67 7a86 	vmul.f32	s15, s15, s12
 800766c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007678:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800767c:	e060      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	f013 0f20 	tst.w	r3, #32
 8007684:	d023      	beq.n	80076ce <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007686:	4611      	mov	r1, r2
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800768e:	4b48      	ldr	r3, [pc, #288]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007690:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007692:	ee07 3a10 	vmov	s14, r3
 8007696:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800769a:	ee07 0a10 	vmov	s14, r0
 800769e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80076a2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80076a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80076a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ac:	ee06 3a90 	vmov	s13, r3
 80076b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80076b4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80076b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076cc:	e038      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076ce:	ee07 0a10 	vmov	s14, r0
 80076d2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80076d6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80077bc <HAL_RCC_GetSysClockFreq+0x1e8>
 80076da:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80076de:	4b32      	ldr	r3, [pc, #200]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee06 3a90 	vmov	s13, r3
 80076ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80076ee:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 80076f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007706:	e01b      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007708:	ee07 0a10 	vmov	s14, r0
 800770c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007710:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80077b4 <HAL_RCC_GetSysClockFreq+0x1e0>
 8007714:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007718:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007720:	ee06 3a90 	vmov	s13, r3
 8007724:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007728:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800772c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773c:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007740:	4b19      	ldr	r3, [pc, #100]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007748:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007756:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800775a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800775e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007762:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007764:	ee07 0a10 	vmov	s14, r0
 8007768:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800776c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80077c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007770:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007774:	4b0c      	ldr	r3, [pc, #48]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	ee06 3a90 	vmov	s13, r3
 8007780:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007784:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80077b8 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007788:	ee67 7a86 	vmul.f32	s15, s15, s12
 800778c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007798:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800779c:	e7d0      	b.n	8007740 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800779e:	4809      	ldr	r0, [pc, #36]	; (80077c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80077a0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077a2:	4803      	ldr	r0, [pc, #12]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	58024400 	.word	0x58024400
 80077ac:	003d0900 	.word	0x003d0900
 80077b0:	03d09000 	.word	0x03d09000
 80077b4:	4a742400 	.word	0x4a742400
 80077b8:	39000000 	.word	0x39000000
 80077bc:	4c742400 	.word	0x4c742400
 80077c0:	4bb71b00 	.word	0x4bb71b00
 80077c4:	016e3600 	.word	0x016e3600

080077c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f000 8132 	beq.w	8007a32 <HAL_RCC_ClockConfig+0x26a>
{
 80077ce:	b570      	push	{r4, r5, r6, lr}
 80077d0:	460d      	mov	r5, r1
 80077d2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b9b      	ldr	r3, [pc, #620]	; (8007a44 <HAL_RCC_ClockConfig+0x27c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	428b      	cmp	r3, r1
 80077de:	d20b      	bcs.n	80077f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e0:	4a98      	ldr	r2, [pc, #608]	; (8007a44 <HAL_RCC_ClockConfig+0x27c>)
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	f023 030f 	bic.w	r3, r3, #15
 80077e8:	430b      	orrs	r3, r1
 80077ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ec:	6813      	ldr	r3, [r2, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	428b      	cmp	r3, r1
 80077f4:	f040 811f 	bne.w	8007a36 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	f013 0f04 	tst.w	r3, #4
 80077fe:	d00c      	beq.n	800781a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007800:	6922      	ldr	r2, [r4, #16]
 8007802:	4b91      	ldr	r3, [pc, #580]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800780a:	429a      	cmp	r2, r3
 800780c:	d905      	bls.n	800781a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800780e:	498e      	ldr	r1, [pc, #568]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007810:	698b      	ldr	r3, [r1, #24]
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	431a      	orrs	r2, r3
 8007818:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	f013 0f08 	tst.w	r3, #8
 8007820:	d00c      	beq.n	800783c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800782c:	429a      	cmp	r2, r3
 800782e:	d905      	bls.n	800783c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007830:	4985      	ldr	r1, [pc, #532]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007832:	69cb      	ldr	r3, [r1, #28]
 8007834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007838:	431a      	orrs	r2, r3
 800783a:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f013 0f10 	tst.w	r3, #16
 8007842:	d00c      	beq.n	800785e <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007844:	69a2      	ldr	r2, [r4, #24]
 8007846:	4b80      	ldr	r3, [pc, #512]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784e:	429a      	cmp	r2, r3
 8007850:	d905      	bls.n	800785e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007852:	497d      	ldr	r1, [pc, #500]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007854:	69cb      	ldr	r3, [r1, #28]
 8007856:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800785a:	431a      	orrs	r2, r3
 800785c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f013 0f20 	tst.w	r3, #32
 8007864:	d00c      	beq.n	8007880 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007866:	69e2      	ldr	r2, [r4, #28]
 8007868:	4b77      	ldr	r3, [pc, #476]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007870:	429a      	cmp	r2, r3
 8007872:	d905      	bls.n	8007880 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007874:	4974      	ldr	r1, [pc, #464]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007876:	6a0b      	ldr	r3, [r1, #32]
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787c:	431a      	orrs	r2, r3
 800787e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	f013 0f02 	tst.w	r3, #2
 8007886:	d00c      	beq.n	80078a2 <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007888:	68e2      	ldr	r2, [r4, #12]
 800788a:	4b6f      	ldr	r3, [pc, #444]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	429a      	cmp	r2, r3
 8007894:	d905      	bls.n	80078a2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007896:	496c      	ldr	r1, [pc, #432]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007898:	698b      	ldr	r3, [r1, #24]
 800789a:	f023 030f 	bic.w	r3, r3, #15
 800789e:	431a      	orrs	r2, r3
 80078a0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f013 0f01 	tst.w	r3, #1
 80078a8:	d041      	beq.n	800792e <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078aa:	4a67      	ldr	r2, [pc, #412]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80078ac:	6993      	ldr	r3, [r2, #24]
 80078ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078b2:	68a1      	ldr	r1, [r4, #8]
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d00a      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d027      	beq.n	8007912 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d02c      	beq.n	8007920 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078c6:	4a60      	ldr	r2, [pc, #384]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	f012 0f04 	tst.w	r2, #4
 80078ce:	d106      	bne.n	80078de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80078d0:	2001      	movs	r0, #1
 80078d2:	e0ad      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80078da:	f000 80ae 	beq.w	8007a3a <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078de:	495a      	ldr	r1, [pc, #360]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80078e0:	690a      	ldr	r2, [r1, #16]
 80078e2:	f022 0207 	bic.w	r2, r2, #7
 80078e6:	4313      	orrs	r3, r2
 80078e8:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80078ea:	f7fd fa1b 	bl	8004d24 <HAL_GetTick>
 80078ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078f0:	4b55      	ldr	r3, [pc, #340]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80078fe:	d016      	beq.n	800792e <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007900:	f7fd fa10 	bl	8004d24 <HAL_GetTick>
 8007904:	1b80      	subs	r0, r0, r6
 8007906:	f241 3388 	movw	r3, #5000	; 0x1388
 800790a:	4298      	cmp	r0, r3
 800790c:	d9f0      	bls.n	80078f0 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800790e:	2003      	movs	r0, #3
 8007910:	e08e      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007912:	4a4d      	ldr	r2, [pc, #308]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800791a:	d1e0      	bne.n	80078de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800791c:	2001      	movs	r0, #1
 800791e:	e087      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007920:	4a49      	ldr	r2, [pc, #292]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007928:	d1d9      	bne.n	80078de <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800792a:	2001      	movs	r0, #1
 800792c:	e080      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f013 0f02 	tst.w	r3, #2
 8007934:	d00c      	beq.n	8007950 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007936:	68e2      	ldr	r2, [r4, #12]
 8007938:	4b43      	ldr	r3, [pc, #268]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	429a      	cmp	r2, r3
 8007942:	d205      	bcs.n	8007950 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007944:	4940      	ldr	r1, [pc, #256]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007946:	698b      	ldr	r3, [r1, #24]
 8007948:	f023 030f 	bic.w	r3, r3, #15
 800794c:	431a      	orrs	r2, r3
 800794e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007950:	4b3c      	ldr	r3, [pc, #240]	; (8007a44 <HAL_RCC_ClockConfig+0x27c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	42ab      	cmp	r3, r5
 800795a:	d90a      	bls.n	8007972 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800795c:	4a39      	ldr	r2, [pc, #228]	; (8007a44 <HAL_RCC_ClockConfig+0x27c>)
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	f023 030f 	bic.w	r3, r3, #15
 8007964:	432b      	orrs	r3, r5
 8007966:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007968:	6813      	ldr	r3, [r2, #0]
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	42ab      	cmp	r3, r5
 8007970:	d165      	bne.n	8007a3e <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	f013 0f04 	tst.w	r3, #4
 8007978:	d00c      	beq.n	8007994 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800797a:	6922      	ldr	r2, [r4, #16]
 800797c:	4b32      	ldr	r3, [pc, #200]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007984:	429a      	cmp	r2, r3
 8007986:	d205      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007988:	492f      	ldr	r1, [pc, #188]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 800798a:	698b      	ldr	r3, [r1, #24]
 800798c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007990:	431a      	orrs	r2, r3
 8007992:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	f013 0f08 	tst.w	r3, #8
 800799a:	d00c      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800799c:	6962      	ldr	r2, [r4, #20]
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d205      	bcs.n	80079b6 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079aa:	4927      	ldr	r1, [pc, #156]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079ac:	69cb      	ldr	r3, [r1, #28]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b2:	431a      	orrs	r2, r3
 80079b4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	f013 0f10 	tst.w	r3, #16
 80079bc:	d00c      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80079be:	69a2      	ldr	r2, [r4, #24]
 80079c0:	4b21      	ldr	r3, [pc, #132]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d205      	bcs.n	80079d8 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079cc:	491e      	ldr	r1, [pc, #120]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079ce:	69cb      	ldr	r3, [r1, #28]
 80079d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80079d4:	431a      	orrs	r2, r3
 80079d6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	f013 0f20 	tst.w	r3, #32
 80079de:	d00c      	beq.n	80079fa <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80079e0:	69e2      	ldr	r2, [r4, #28]
 80079e2:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d205      	bcs.n	80079fa <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079ee:	4916      	ldr	r1, [pc, #88]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 80079f0:	6a0b      	ldr	r3, [r1, #32]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	431a      	orrs	r2, r3
 80079f8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80079fa:	f7ff fdeb 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 80079fe:	4912      	ldr	r1, [pc, #72]	; (8007a48 <HAL_RCC_ClockConfig+0x280>)
 8007a00:	698b      	ldr	r3, [r1, #24]
 8007a02:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a06:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <HAL_RCC_ClockConfig+0x284>)
 8007a08:	5cd3      	ldrb	r3, [r2, r3]
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a10:	698b      	ldr	r3, [r1, #24]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	5cd3      	ldrb	r3, [r2, r3]
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	fa20 f303 	lsr.w	r3, r0, r3
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <HAL_RCC_ClockConfig+0x288>)
 8007a22:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <HAL_RCC_ClockConfig+0x28c>)
 8007a26:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007a28:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <HAL_RCC_ClockConfig+0x290>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	f7fa fc46 	bl	80022bc <HAL_InitTick>
}
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007a32:	2001      	movs	r0, #1
}
 8007a34:	4770      	bx	lr
      return HAL_ERROR;
 8007a36:	2001      	movs	r0, #1
 8007a38:	e7fa      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	e7f8      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8007a3e:	2001      	movs	r0, #1
 8007a40:	e7f6      	b.n	8007a30 <HAL_RCC_ClockConfig+0x268>
 8007a42:	bf00      	nop
 8007a44:	52002000 	.word	0x52002000
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	0801ad64 	.word	0x0801ad64
 8007a50:	24000040 	.word	0x24000040
 8007a54:	2400003c 	.word	0x2400003c
 8007a58:	24000048 	.word	0x24000048

08007a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a5c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007a5e:	f7ff fdb9 	bl	80075d4 <HAL_RCC_GetSysClockFreq>
 8007a62:	4a0b      	ldr	r2, [pc, #44]	; (8007a90 <HAL_RCC_GetHCLKFreq+0x34>)
 8007a64:	6993      	ldr	r3, [r2, #24]
 8007a66:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a6a:	490a      	ldr	r1, [pc, #40]	; (8007a94 <HAL_RCC_GetHCLKFreq+0x38>)
 8007a6c:	5ccb      	ldrb	r3, [r1, r3]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a76:	6992      	ldr	r2, [r2, #24]
 8007a78:	f002 020f 	and.w	r2, r2, #15
 8007a7c:	5c88      	ldrb	r0, [r1, r2]
 8007a7e:	f000 001f 	and.w	r0, r0, #31
 8007a82:	fa23 f000 	lsr.w	r0, r3, r0
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007a88:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a8a:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <HAL_RCC_GetHCLKFreq+0x40>)
 8007a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007a8e:	bd08      	pop	{r3, pc}
 8007a90:	58024400 	.word	0x58024400
 8007a94:	0801ad64 	.word	0x0801ad64
 8007a98:	24000040 	.word	0x24000040
 8007a9c:	2400003c 	.word	0x2400003c

08007aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007aa2:	f7ff ffdb 	bl	8007a5c <HAL_RCC_GetHCLKFreq>
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007aae:	4a04      	ldr	r2, [pc, #16]	; (8007ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab0:	5cd3      	ldrb	r3, [r2, r3]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8007ab6:	40d8      	lsrs	r0, r3
 8007ab8:	bd08      	pop	{r3, pc}
 8007aba:	bf00      	nop
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	0801ad64 	.word	0x0801ad64

08007ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ac4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007ac6:	f7ff ffc9 	bl	8007a5c <HAL_RCC_GetHCLKFreq>
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007ad2:	4a04      	ldr	r2, [pc, #16]	; (8007ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ad4:	5cd3      	ldrb	r3, [r2, r3]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8007ada:	40d8      	lsrs	r0, r3
 8007adc:	bd08      	pop	{r3, pc}
 8007ade:	bf00      	nop
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	0801ad64 	.word	0x0801ad64

08007ae8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ae8:	233f      	movs	r3, #63	; 0x3f
 8007aea:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <HAL_RCC_GetClockConfig+0x4c>)
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	f002 0207 	and.w	r2, r2, #7
 8007af4:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007afc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	f002 020f 	and.w	r2, r2, #15
 8007b04:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b0c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8007b0e:	69da      	ldr	r2, [r3, #28]
 8007b10:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007b14:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007b1c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b24:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b26:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <HAL_RCC_GetClockConfig+0x50>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	600b      	str	r3, [r1, #0]
}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	58024400 	.word	0x58024400
 8007b38:	52002000 	.word	0x52002000

08007b3c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b3c:	4b40      	ldr	r3, [pc, #256]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d079      	beq.n	8007c3c <RCCEx_PLL2_Config+0x100>
{
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b4e:	4a3c      	ldr	r2, [pc, #240]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007b50:	6813      	ldr	r3, [r2, #0]
 8007b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b58:	f7fd f8e4 	bl	8004d24 <HAL_GetTick>
 8007b5c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b5e:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007b66:	d006      	beq.n	8007b76 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b68:	f7fd f8dc 	bl	8004d24 <HAL_GetTick>
 8007b6c:	1b03      	subs	r3, r0, r4
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d9f5      	bls.n	8007b5e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007b72:	2003      	movs	r0, #3

  }


  return status;
}
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b76:	4b32      	ldr	r3, [pc, #200]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b7a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8007b7e:	6829      	ldr	r1, [r5, #0]
 8007b80:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007b84:	629a      	str	r2, [r3, #40]	; 0x28
 8007b86:	686a      	ldr	r2, [r5, #4]
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8e:	68a9      	ldr	r1, [r5, #8]
 8007b90:	3901      	subs	r1, #1
 8007b92:	0249      	lsls	r1, r1, #9
 8007b94:	b289      	uxth	r1, r1
 8007b96:	430a      	orrs	r2, r1
 8007b98:	68e9      	ldr	r1, [r5, #12]
 8007b9a:	3901      	subs	r1, #1
 8007b9c:	0409      	lsls	r1, r1, #16
 8007b9e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	6929      	ldr	r1, [r5, #16]
 8007ba6:	3901      	subs	r1, #1
 8007ba8:	0609      	lsls	r1, r1, #24
 8007baa:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007bb8:	6969      	ldr	r1, [r5, #20]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	f022 0220 	bic.w	r2, r2, #32
 8007bc4:	69a9      	ldr	r1, [r5, #24]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	f022 0210 	bic.w	r2, r2, #16
 8007bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bd2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <RCCEx_PLL2_Config+0x108>)
 8007bd6:	400a      	ands	r2, r1
 8007bd8:	69e9      	ldr	r1, [r5, #28]
 8007bda:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be2:	f042 0210 	orr.w	r2, r2, #16
 8007be6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007be8:	b9c6      	cbnz	r6, 8007c1c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bea:	461a      	mov	r2, r3
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8007bf4:	4a12      	ldr	r2, [pc, #72]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007bf6:	6813      	ldr	r3, [r2, #0]
 8007bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bfc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007bfe:	f7fd f891 	bl	8004d24 <HAL_GetTick>
 8007c02:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007c0c:	d114      	bne.n	8007c38 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c0e:	f7fd f889 	bl	8004d24 <HAL_GetTick>
 8007c12:	1b00      	subs	r0, r0, r4
 8007c14:	2802      	cmp	r0, #2
 8007c16:	d9f5      	bls.n	8007c04 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8007c18:	2003      	movs	r0, #3
 8007c1a:	e7ab      	b.n	8007b74 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007c1c:	2e01      	cmp	r6, #1
 8007c1e:	d005      	beq.n	8007c2c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c20:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007c22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c2a:	e7e3      	b.n	8007bf4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <RCCEx_PLL2_Config+0x104>)
 8007c2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c36:	e7dd      	b.n	8007bf4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8007c38:	2000      	movs	r0, #0
 8007c3a:	e79b      	b.n	8007b74 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
}
 8007c3e:	4770      	bx	lr
 8007c40:	58024400 	.word	0x58024400
 8007c44:	ffff0007 	.word	0xffff0007

08007c48 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c48:	4b40      	ldr	r3, [pc, #256]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	d079      	beq.n	8007d48 <RCCEx_PLL3_Config+0x100>
{
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4605      	mov	r5, r0
 8007c58:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c5a:	4a3c      	ldr	r2, [pc, #240]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c64:	f7fd f85e 	bl	8004d24 <HAL_GetTick>
 8007c68:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c6a:	4b38      	ldr	r3, [pc, #224]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007c72:	d006      	beq.n	8007c82 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c74:	f7fd f856 	bl	8004d24 <HAL_GetTick>
 8007c78:	1b03      	subs	r3, r0, r4
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d9f5      	bls.n	8007c6a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007c7e:	2003      	movs	r0, #3

  }


  return status;
}
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c82:	4b32      	ldr	r3, [pc, #200]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c86:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007c8a:	6829      	ldr	r1, [r5, #0]
 8007c8c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007c90:	629a      	str	r2, [r3, #40]	; 0x28
 8007c92:	686a      	ldr	r2, [r5, #4]
 8007c94:	3a01      	subs	r2, #1
 8007c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c9a:	68a9      	ldr	r1, [r5, #8]
 8007c9c:	3901      	subs	r1, #1
 8007c9e:	0249      	lsls	r1, r1, #9
 8007ca0:	b289      	uxth	r1, r1
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	68e9      	ldr	r1, [r5, #12]
 8007ca6:	3901      	subs	r1, #1
 8007ca8:	0409      	lsls	r1, r1, #16
 8007caa:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	6929      	ldr	r1, [r5, #16]
 8007cb2:	3901      	subs	r1, #1
 8007cb4:	0609      	lsls	r1, r1, #24
 8007cb6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cc4:	6969      	ldr	r1, [r5, #20]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cd0:	69a9      	ldr	r1, [r5, #24]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cde:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007ce0:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <RCCEx_PLL3_Config+0x108>)
 8007ce2:	400a      	ands	r2, r1
 8007ce4:	69e9      	ldr	r1, [r5, #28]
 8007ce6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007cf4:	b9c6      	cbnz	r6, 8007d28 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8007d00:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007d0a:	f7fd f80b 	bl	8004d24 <HAL_GetTick>
 8007d0e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d10:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007d18:	d114      	bne.n	8007d44 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d1a:	f7fd f803 	bl	8004d24 <HAL_GetTick>
 8007d1e:	1b00      	subs	r0, r0, r4
 8007d20:	2802      	cmp	r0, #2
 8007d22:	d9f5      	bls.n	8007d10 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8007d24:	2003      	movs	r0, #3
 8007d26:	e7ab      	b.n	8007c80 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d28:	2e01      	cmp	r6, #1
 8007d2a:	d005      	beq.n	8007d38 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d2c:	4a07      	ldr	r2, [pc, #28]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007d2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d36:	e7e3      	b.n	8007d00 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d38:	4a04      	ldr	r2, [pc, #16]	; (8007d4c <RCCEx_PLL3_Config+0x104>)
 8007d3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d42:	e7dd      	b.n	8007d00 <RCCEx_PLL3_Config+0xb8>
  return status;
 8007d44:	2000      	movs	r0, #0
 8007d46:	e79b      	b.n	8007c80 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007d48:	2001      	movs	r0, #1
}
 8007d4a:	4770      	bx	lr
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	ffff0007 	.word	0xffff0007

08007d54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d58:	6803      	ldr	r3, [r0, #0]
 8007d5a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007d5e:	d030      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d60:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d66:	d026      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007d68:	d80e      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007d6a:	b1eb      	cbz	r3, 8007da8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d70:	d107      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d72:	2102      	movs	r1, #2
 8007d74:	3004      	adds	r0, #4
 8007d76:	f7ff fee1 	bl	8007b3c <RCCEx_PLL2_Config>
 8007d7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007d7c:	b145      	cbz	r5, 8007d90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007d7e:	462e      	mov	r6, r5
 8007d80:	e021      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d82:	2601      	movs	r6, #1
 8007d84:	4635      	mov	r5, r6
 8007d86:	e01e      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007d8e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d90:	4a99      	ldr	r2, [pc, #612]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007d92:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007d94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d98:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d9e:	2600      	movs	r6, #0
 8007da0:	e011      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007da2:	2601      	movs	r6, #1
 8007da4:	4635      	mov	r5, r6
 8007da6:	e00e      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da8:	4a93      	ldr	r2, [pc, #588]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007daa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007db2:	2500      	movs	r5, #0
 8007db4:	e7ec      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007db6:	2102      	movs	r1, #2
 8007db8:	3024      	adds	r0, #36	; 0x24
 8007dba:	f7ff ff45 	bl	8007c48 <RCCEx_PLL3_Config>
 8007dbe:	4605      	mov	r5, r0
      break;
 8007dc0:	e7dc      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dc2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007dc4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007dcc:	d026      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007dce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d81f      	bhi.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8007dd4:	e8df f003 	tbb	[pc, r3]
 8007dd8:	08171103 	.word	0x08171103
 8007ddc:	08          	.byte	0x08
 8007ddd:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dde:	4a86      	ldr	r2, [pc, #536]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007de0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007de8:	b9bd      	cbnz	r5, 8007e1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dea:	4a83      	ldr	r2, [pc, #524]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007dec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6513      	str	r3, [r2, #80]	; 0x50
 8007df8:	e010      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	1d20      	adds	r0, r4, #4
 8007dfe:	f7ff fe9d 	bl	8007b3c <RCCEx_PLL2_Config>
 8007e02:	4605      	mov	r5, r0
      break;
 8007e04:	e7f0      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e06:	2100      	movs	r1, #0
 8007e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e0c:	f7ff ff1c 	bl	8007c48 <RCCEx_PLL3_Config>
 8007e10:	4605      	mov	r5, r0
      break;
 8007e12:	e7e9      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e14:	2601      	movs	r6, #1
 8007e16:	4635      	mov	r5, r6
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8007e1a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e22:	d01d      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007e24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d039      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007e2a:	d80b      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8007e2c:	b38b      	cbz	r3, 8007e92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d105      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e32:	2100      	movs	r1, #0
 8007e34:	1d20      	adds	r0, r4, #4
 8007e36:	f7ff fe81 	bl	8007b3c <RCCEx_PLL2_Config>
 8007e3a:	4605      	mov	r5, r0
      break;
 8007e3c:	e008      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007e3e:	2601      	movs	r6, #1
 8007e40:	4635      	mov	r5, r6
 8007e42:	e00d      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e48:	d002      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007e4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007e4e:	d11b      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8007e50:	bb65      	cbnz	r5, 8007eac <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007e52:	4a69      	ldr	r2, [pc, #420]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007e54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e56:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007e5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e66:	d035      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007e68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6e:	d057      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007e70:	d821      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04e      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7a:	d119      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	1d20      	adds	r0, r4, #4
 8007e80:	f7ff fe5c 	bl	8007b3c <RCCEx_PLL2_Config>
 8007e84:	4605      	mov	r5, r0
      break;
 8007e86:	e01c      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 8007e88:	2bc0      	cmp	r3, #192	; 0xc0
 8007e8a:	d0e1      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007e8c:	2601      	movs	r6, #1
 8007e8e:	4635      	mov	r5, r6
 8007e90:	e7e6      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e92:	4a59      	ldr	r2, [pc, #356]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007e94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007e9c:	e7d8      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ea4:	f7ff fed0 	bl	8007c48 <RCCEx_PLL3_Config>
 8007ea8:	4605      	mov	r5, r0
      break;
 8007eaa:	e7d1      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007eac:	462e      	mov	r6, r5
 8007eae:	e7d7      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007eb0:	2601      	movs	r6, #1
 8007eb2:	4635      	mov	r5, r6
 8007eb4:	e00e      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eba:	d002      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007ebc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ec0:	d122      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	d133      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007ec6:	4a4c      	ldr	r2, [pc, #304]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007ec8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007eca:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8007ece:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007eda:	d031      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 8007edc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d041      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007ee2:	d829      	bhi.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007ee4:	b133      	cbz	r3, 8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	d123      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eea:	4a43      	ldr	r2, [pc, #268]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	d13c      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007ef8:	4a3f      	ldr	r2, [pc, #252]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007efa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007efc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007f00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f02:	430b      	orrs	r3, r1
 8007f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f06:	e01b      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 8007f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f0c:	d0d9      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007f0e:	2601      	movs	r6, #1
 8007f10:	4635      	mov	r5, r6
 8007f12:	e7df      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f14:	4a38      	ldr	r2, [pc, #224]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007f16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007f1e:	e7d0      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f20:	2100      	movs	r1, #0
 8007f22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f26:	f7ff fe8f 	bl	8007c48 <RCCEx_PLL3_Config>
 8007f2a:	4605      	mov	r5, r0
      break;
 8007f2c:	e7c9      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007f2e:	462e      	mov	r6, r5
 8007f30:	e7d0      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 8007f32:	2601      	movs	r6, #1
 8007f34:	4635      	mov	r5, r6
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8007f38:	2b30      	cmp	r3, #48	; 0x30
 8007f3a:	d0db      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007f3c:	2601      	movs	r6, #1
 8007f3e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007f46:	d039      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f4e:	d02d      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007f50:	d814      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007f52:	b32b      	cbz	r3, 8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f58:	d10d      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	1d20      	adds	r0, r4, #4
 8007f5e:	f7ff fded 	bl	8007b3c <RCCEx_PLL2_Config>
 8007f62:	4605      	mov	r5, r0
      break;
 8007f64:	e010      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f66:	2102      	movs	r1, #2
 8007f68:	1d20      	adds	r0, r4, #4
 8007f6a:	f7ff fde7 	bl	8007b3c <RCCEx_PLL2_Config>
 8007f6e:	4605      	mov	r5, r0
      break;
 8007f70:	e7c0      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007f72:	462e      	mov	r6, r5
 8007f74:	e7e4      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f76:	2601      	movs	r6, #1
 8007f78:	4635      	mov	r5, r6
 8007f7a:	e01f      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007f7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f80:	d002      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f86:	d108      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 8007f88:	b9bd      	cbnz	r5, 8007fba <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007f8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f92:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6513      	str	r3, [r2, #80]	; 0x50
 8007f98:	e010      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007f9a:	2601      	movs	r6, #1
 8007f9c:	4635      	mov	r5, r6
 8007f9e:	e00d      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007fa2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007faa:	e7ed      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fac:	2100      	movs	r1, #0
 8007fae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fb2:	f7ff fe49 	bl	8007c48 <RCCEx_PLL3_Config>
 8007fb6:	4605      	mov	r5, r0
      break;
 8007fb8:	e7e6      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007fba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007fc2:	d026      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fca:	d037      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007fcc:	d816      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fce:	b13b      	cbz	r3, 8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd4:	d10d      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	1d20      	adds	r0, r4, #4
 8007fda:	f7ff fdaf 	bl	8007b3c <RCCEx_PLL2_Config>
 8007fde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007fe0:	bb9d      	cbnz	r5, 800804a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007fe2:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007fe4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007fe6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007fea:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6513      	str	r3, [r2, #80]	; 0x50
 8007ff0:	e00f      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ff2:	2601      	movs	r6, #1
 8007ff4:	4635      	mov	r5, r6
 8007ff6:	e00c      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007ff8:	58024400 	.word	0x58024400
 8007ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008000:	d0ee      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008006:	d0eb      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008008:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800800c:	d0e8      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800800e:	2601      	movs	r6, #1
 8008010:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008018:	d025      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800801a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800801e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008022:	d04c      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008024:	d816      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d03c      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800802a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800802e:	d10e      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008030:	2101      	movs	r1, #1
 8008032:	1d20      	adds	r0, r4, #4
 8008034:	f7ff fd82 	bl	8007b3c <RCCEx_PLL2_Config>
 8008038:	4605      	mov	r5, r0
      break;
 800803a:	e033      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800803c:	2101      	movs	r1, #1
 800803e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008042:	f7ff fe01 	bl	8007c48 <RCCEx_PLL3_Config>
 8008046:	4605      	mov	r5, r0
      break;
 8008048:	e7ca      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800804a:	462e      	mov	r6, r5
 800804c:	e7e1      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800804e:	2601      	movs	r6, #1
 8008050:	4635      	mov	r5, r6
 8008052:	e008      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008058:	d024      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800805a:	d91d      	bls.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800805c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008060:	d020      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8008062:	2601      	movs	r6, #1
 8008064:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800806c:	d009      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800806e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008074:	d02c      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d037      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x398>
 800807c:	b36b      	cbz	r3, 80080da <HAL_RCCEx_PeriphCLKConfig+0x386>
 800807e:	2601      	movs	r6, #1
 8008080:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008088:	d045      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800808a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800808c:	2b03      	cmp	r3, #3
 800808e:	d86d      	bhi.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008090:	e8df f003 	tbb	[pc, r3]
 8008094:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 8008098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800809c:	d002      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800809e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a2:	d109      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 80080a4:	b995      	cbnz	r5, 80080cc <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080a6:	4a8c      	ldr	r2, [pc, #560]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80080a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80080aa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80080ae:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6593      	str	r3, [r2, #88]	; 0x58
 80080b6:	e7d6      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 80080b8:	2601      	movs	r6, #1
 80080ba:	4635      	mov	r5, r6
 80080bc:	e7d3      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080be:	2101      	movs	r1, #1
 80080c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080c4:	f7ff fdc0 	bl	8007c48 <RCCEx_PLL3_Config>
 80080c8:	4605      	mov	r5, r0
      break;
 80080ca:	e7eb      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80080cc:	462e      	mov	r6, r5
 80080ce:	e7ca      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4a81      	ldr	r2, [pc, #516]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80080d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80080d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80080da:	b96d      	cbnz	r5, 80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080dc:	4a7e      	ldr	r2, [pc, #504]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80080de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080e0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80080e4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80080e6:	430b      	orrs	r3, r1
 80080e8:	6513      	str	r3, [r2, #80]	; 0x50
 80080ea:	e7ca      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080ec:	2101      	movs	r1, #1
 80080ee:	1d20      	adds	r0, r4, #4
 80080f0:	f7ff fd24 	bl	8007b3c <RCCEx_PLL2_Config>
 80080f4:	4605      	mov	r5, r0
      break;
 80080f6:	e7f0      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x386>
 80080f8:	462e      	mov	r6, r5
 80080fa:	e7c2      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080fc:	4a76      	ldr	r2, [pc, #472]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80080fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008104:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008106:	bba5      	cbnz	r5, 8008172 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008108:	4a73      	ldr	r2, [pc, #460]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800810a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800810c:	f023 0303 	bic.w	r3, r3, #3
 8008110:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008112:	430b      	orrs	r3, r1
 8008114:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800811c:	d12b      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f013 0f01 	tst.w	r3, #1
 8008124:	f000 80a3 	beq.w	800826e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008128:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800812c:	2b28      	cmp	r3, #40	; 0x28
 800812e:	f200 809c 	bhi.w	800826a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008132:	e8df f003 	tbb	[pc, r3]
 8008136:	9a89      	.short	0x9a89
 8008138:	9a9a9a9a 	.word	0x9a9a9a9a
 800813c:	9a849a9a 	.word	0x9a849a9a
 8008140:	9a9a9a9a 	.word	0x9a9a9a9a
 8008144:	9a939a9a 	.word	0x9a939a9a
 8008148:	9a9a9a9a 	.word	0x9a9a9a9a
 800814c:	9a899a9a 	.word	0x9a899a9a
 8008150:	9a9a9a9a 	.word	0x9a9a9a9a
 8008154:	9a899a9a 	.word	0x9a899a9a
 8008158:	9a9a9a9a 	.word	0x9a9a9a9a
 800815c:	9a9a      	.short	0x9a9a
 800815e:	89          	.byte	0x89
 800815f:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008160:	2102      	movs	r1, #2
 8008162:	1d20      	adds	r0, r4, #4
 8008164:	f7ff fcea 	bl	8007b3c <RCCEx_PLL2_Config>
 8008168:	4605      	mov	r5, r0
      break;
 800816a:	e7cc      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800816c:	2601      	movs	r6, #1
 800816e:	4635      	mov	r5, r6
 8008170:	e7d1      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8008172:	462e      	mov	r6, r5
 8008174:	e7cf      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008176:	4a59      	ldr	r2, [pc, #356]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8008178:	6813      	ldr	r3, [r2, #0]
 800817a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800817e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008180:	f7fc fdd0 	bl	8004d24 <HAL_GetTick>
 8008184:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008186:	4b55      	ldr	r3, [pc, #340]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800818e:	d105      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008190:	f7fc fdc8 	bl	8004d24 <HAL_GetTick>
 8008194:	1bc0      	subs	r0, r0, r7
 8008196:	2864      	cmp	r0, #100	; 0x64
 8008198:	d9f5      	bls.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800819a:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800819c:	2d00      	cmp	r5, #0
 800819e:	d14a      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081a0:	4b4d      	ldr	r3, [pc, #308]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80081a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80081a8:	4053      	eors	r3, r2
 80081aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80081ae:	d00c      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081b0:	4b49      	ldr	r3, [pc, #292]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80081b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80081b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80081ba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80081be:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80081c2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80081c6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80081c8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d015      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 80081d4:	bb8d      	cbnz	r5, 800823a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80081da:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80081de:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80081e2:	d01e      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80081e4:	4a3c      	ldr	r2, [pc, #240]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80081e6:	6913      	ldr	r3, [r2, #16]
 80081e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081ec:	6113      	str	r3, [r2, #16]
 80081ee:	493a      	ldr	r1, [pc, #232]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80081f0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80081f2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80081f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80081fa:	4313      	orrs	r3, r2
 80081fc:	670b      	str	r3, [r1, #112]	; 0x70
 80081fe:	e78e      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 8008200:	f7fc fd90 	bl	8004d24 <HAL_GetTick>
 8008204:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008206:	4b34      	ldr	r3, [pc, #208]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820a:	f013 0f02 	tst.w	r3, #2
 800820e:	d1e1      	bne.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008210:	f7fc fd88 	bl	8004d24 <HAL_GetTick>
 8008214:	1bc0      	subs	r0, r0, r7
 8008216:	f241 3388 	movw	r3, #5000	; 0x1388
 800821a:	4298      	cmp	r0, r3
 800821c:	d9f3      	bls.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800821e:	2503      	movs	r5, #3
 8008220:	e7d8      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008222:	482d      	ldr	r0, [pc, #180]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008224:	6902      	ldr	r2, [r0, #16]
 8008226:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800822a:	492d      	ldr	r1, [pc, #180]	; (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800822c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8008230:	4313      	orrs	r3, r2
 8008232:	6103      	str	r3, [r0, #16]
 8008234:	e7db      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 8008236:	462e      	mov	r6, r5
 8008238:	e771      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800823a:	462e      	mov	r6, r5
 800823c:	e76f      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800823e:	2101      	movs	r1, #1
 8008240:	1d20      	adds	r0, r4, #4
 8008242:	f7ff fc7b 	bl	8007b3c <RCCEx_PLL2_Config>
 8008246:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008248:	b9ed      	cbnz	r5, 8008286 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800824a:	4a23      	ldr	r2, [pc, #140]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800824c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800824e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008252:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008256:	430b      	orrs	r3, r1
 8008258:	6553      	str	r3, [r2, #84]	; 0x54
 800825a:	e008      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800825c:	2101      	movs	r1, #1
 800825e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008262:	f7ff fcf1 	bl	8007c48 <RCCEx_PLL3_Config>
 8008266:	4605      	mov	r5, r0
      break;
 8008268:	e7ee      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800826a:	2601      	movs	r6, #1
 800826c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f013 0f02 	tst.w	r3, #2
 8008274:	d016      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008276:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008278:	2b05      	cmp	r3, #5
 800827a:	d827      	bhi.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x578>
 800827c:	e8df f003 	tbb	[pc, r3]
 8008280:	0a1f050a 	.word	0x0a1f050a
 8008284:	0a0a      	.short	0x0a0a
 8008286:	462e      	mov	r6, r5
 8008288:	e7f1      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800828a:	2101      	movs	r1, #1
 800828c:	1d20      	adds	r0, r4, #4
 800828e:	f7ff fc55 	bl	8007b3c <RCCEx_PLL2_Config>
 8008292:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008294:	b9ed      	cbnz	r5, 80082d2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008296:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8008298:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	f013 0f04 	tst.w	r3, #4
 80082aa:	d029      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	d84a      	bhi.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80082b4:	e8df f003 	tbb	[pc, r3]
 80082b8:	1b42161b 	.word	0x1b42161b
 80082bc:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082be:	2101      	movs	r1, #1
 80082c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082c4:	f7ff fcc0 	bl	8007c48 <RCCEx_PLL3_Config>
 80082c8:	4605      	mov	r5, r0
      break;
 80082ca:	e7e3      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082cc:	2601      	movs	r6, #1
 80082ce:	4635      	mov	r5, r6
 80082d0:	e7e8      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80082d2:	462e      	mov	r6, r5
 80082d4:	e7e6      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80082d6:	bf00      	nop
 80082d8:	58024400 	.word	0x58024400
 80082dc:	58024800 	.word	0x58024800
 80082e0:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082e4:	2101      	movs	r1, #1
 80082e6:	1d20      	adds	r0, r4, #4
 80082e8:	f7ff fc28 	bl	8007b3c <RCCEx_PLL2_Config>
 80082ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80082ee:	bb7d      	cbnz	r5, 8008350 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082f0:	4aa9      	ldr	r2, [pc, #676]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80082f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	f013 0f20 	tst.w	r3, #32
 8008306:	d033      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008308:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800830c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008310:	d04c      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x658>
 8008312:	d822      	bhi.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x606>
 8008314:	b13b      	cbz	r3, 8008326 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831a:	d11b      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800831c:	2100      	movs	r1, #0
 800831e:	1d20      	adds	r0, r4, #4
 8008320:	f7ff fc0c 	bl	8007b3c <RCCEx_PLL2_Config>
 8008324:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008326:	2d00      	cmp	r5, #0
 8008328:	d147      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800832a:	4a9b      	ldr	r2, [pc, #620]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800832c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800832e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008332:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008336:	430b      	orrs	r3, r1
 8008338:	6553      	str	r3, [r2, #84]	; 0x54
 800833a:	e019      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800833c:	2101      	movs	r1, #1
 800833e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008342:	f7ff fc81 	bl	8007c48 <RCCEx_PLL3_Config>
 8008346:	4605      	mov	r5, r0
      break;
 8008348:	e7d1      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800834a:	2601      	movs	r6, #1
 800834c:	4635      	mov	r5, r6
 800834e:	e7d7      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008350:	462e      	mov	r6, r5
 8008352:	e7d5      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008354:	2601      	movs	r6, #1
 8008356:	4635      	mov	r5, r6
 8008358:	e00a      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800835a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835e:	d0e2      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8008360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008364:	d0df      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8008366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800836a:	d0dc      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800836c:	2601      	movs	r6, #1
 800836e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008376:	d030      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008378:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800837c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008380:	d04b      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8008382:	d81f      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8008384:	b13b      	cbz	r3, 8008396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838a:	d118      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800838c:	2100      	movs	r1, #0
 800838e:	1d20      	adds	r0, r4, #4
 8008390:	f7ff fbd4 	bl	8007b3c <RCCEx_PLL2_Config>
 8008394:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008396:	2d00      	cmp	r5, #0
 8008398:	d146      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800839a:	4a7f      	ldr	r2, [pc, #508]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800839c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800839e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80083a2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80083a6:	430b      	orrs	r3, r1
 80083a8:	6593      	str	r3, [r2, #88]	; 0x58
 80083aa:	e016      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083ac:	2102      	movs	r1, #2
 80083ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083b2:	f7ff fc49 	bl	8007c48 <RCCEx_PLL3_Config>
 80083b6:	4605      	mov	r5, r0
      break;
 80083b8:	e7b5      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80083ba:	462e      	mov	r6, r5
 80083bc:	e7d8      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083be:	2601      	movs	r6, #1
 80083c0:	4635      	mov	r5, r6
 80083c2:	e00a      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x686>
 80083c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c8:	d0e5      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80083ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083ce:	d0e2      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80083d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083d4:	d0df      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80083d6:	2601      	movs	r6, #1
 80083d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083e0:	d032      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80083e2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80083e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ea:	f000 80a2 	beq.w	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80083ee:	d820      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80083f0:	b13b      	cbz	r3, 8008402 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80083f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f6:	d119      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083f8:	2100      	movs	r1, #0
 80083fa:	1d20      	adds	r0, r4, #4
 80083fc:	f7ff fb9e 	bl	8007b3c <RCCEx_PLL2_Config>
 8008400:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008402:	2d00      	cmp	r5, #0
 8008404:	f040 809c 	bne.w	8008540 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008408:	4a63      	ldr	r2, [pc, #396]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800840a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800840c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008410:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8008414:	430b      	orrs	r3, r1
 8008416:	6593      	str	r3, [r2, #88]	; 0x58
 8008418:	e016      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800841a:	2102      	movs	r1, #2
 800841c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008420:	f7ff fc12 	bl	8007c48 <RCCEx_PLL3_Config>
 8008424:	4605      	mov	r5, r0
      break;
 8008426:	e7b6      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008428:	462e      	mov	r6, r5
 800842a:	e7d6      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800842c:	2601      	movs	r6, #1
 800842e:	4635      	mov	r5, r6
 8008430:	e00a      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008436:	d0e4      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8008438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800843c:	d0e1      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800843e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008442:	d0de      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8008444:	2601      	movs	r6, #1
 8008446:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f013 0f08 	tst.w	r3, #8
 800844e:	d00c      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008450:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008458:	d074      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800845a:	4a4f      	ldr	r2, [pc, #316]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800845c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800845e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008462:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8008466:	430b      	orrs	r3, r1
 8008468:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f013 0f10 	tst.w	r3, #16
 8008470:	d00c      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008472:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	d06c      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800847c:	4a46      	ldr	r2, [pc, #280]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800847e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008484:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8008488:	430b      	orrs	r3, r1
 800848a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008492:	d00b      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 8008494:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849c:	d073      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800849e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a2:	d066      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05f      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x814>
 80084a8:	2601      	movs	r6, #1
 80084aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80084b2:	d00c      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 80084b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80084b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084bc:	d07d      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x866>
 80084be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084c2:	d070      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80084c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c8:	d068      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80084ca:	2601      	movs	r6, #1
 80084cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80084d4:	d008      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 80084d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d077      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x878>
 80084dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e0:	f000 8082 	beq.w	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x894>
 80084e4:	2601      	movs	r6, #1
 80084e6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80084ee:	f040 8083 	bne.w	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80084f8:	f000 808b 	beq.w	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 80084fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008504:	f000 80c9 	beq.w	800869a <HAL_RCCEx_PeriphCLKConfig+0x946>
 8008508:	f240 8080 	bls.w	800860c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800850c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008510:	d003      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008516:	f040 80be 	bne.w	8008696 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800851a:	2d00      	cmp	r5, #0
 800851c:	f040 80c3 	bne.w	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008520:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008522:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008528:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800852c:	430b      	orrs	r3, r1
 800852e:	6553      	str	r3, [r2, #84]	; 0x54
 8008530:	e06f      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008532:	2102      	movs	r1, #2
 8008534:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008538:	f7ff fb86 	bl	8007c48 <RCCEx_PLL3_Config>
 800853c:	4605      	mov	r5, r0
      break;
 800853e:	e760      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8008540:	462e      	mov	r6, r5
 8008542:	e781      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008544:	2102      	movs	r1, #2
 8008546:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800854a:	f7ff fb7d 	bl	8007c48 <RCCEx_PLL3_Config>
 800854e:	2800      	cmp	r0, #0
 8008550:	d083      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 8008552:	2601      	movs	r6, #1
 8008554:	e781      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008556:	2102      	movs	r1, #2
 8008558:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800855c:	f7ff fb74 	bl	8007c48 <RCCEx_PLL3_Config>
 8008560:	2800      	cmp	r0, #0
 8008562:	d08b      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 8008564:	2601      	movs	r6, #1
 8008566:	e789      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008568:	2100      	movs	r1, #0
 800856a:	1d20      	adds	r0, r4, #4
 800856c:	f7ff fae6 	bl	8007b3c <RCCEx_PLL2_Config>
 8008570:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008572:	b97d      	cbnz	r5, 8008594 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008574:	4a08      	ldr	r2, [pc, #32]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008576:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008578:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800857c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008580:	430b      	orrs	r3, r1
 8008582:	6593      	str	r3, [r2, #88]	; 0x58
 8008584:	e792      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008586:	2102      	movs	r1, #2
 8008588:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800858c:	f7ff fb5c 	bl	8007c48 <RCCEx_PLL3_Config>
 8008590:	4605      	mov	r5, r0
      break;
 8008592:	e7ee      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008594:	462e      	mov	r6, r5
 8008596:	e789      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x758>
 8008598:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859c:	4a47      	ldr	r2, [pc, #284]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800859e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80085a6:	b97d      	cbnz	r5, 80085c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085a8:	4a44      	ldr	r2, [pc, #272]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80085aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085b0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6553      	str	r3, [r2, #84]	; 0x54
 80085b8:	e789      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ba:	2101      	movs	r1, #1
 80085bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085c0:	f7ff fb42 	bl	8007c48 <RCCEx_PLL3_Config>
 80085c4:	4605      	mov	r5, r0
      break;
 80085c6:	e7ee      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80085c8:	462e      	mov	r6, r5
 80085ca:	e780      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085cc:	4a3b      	ldr	r2, [pc, #236]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80085ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80085d6:	b96d      	cbnz	r5, 80085f4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085d8:	4a38      	ldr	r2, [pc, #224]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80085da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80085dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085e2:	430b      	orrs	r3, r1
 80085e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085e6:	e77f      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085e8:	2102      	movs	r1, #2
 80085ea:	1d20      	adds	r0, r4, #4
 80085ec:	f7ff faa6 	bl	8007b3c <RCCEx_PLL2_Config>
 80085f0:	4605      	mov	r5, r0
      break;
 80085f2:	e7f0      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
 80085f4:	462e      	mov	r6, r5
 80085f6:	e777      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80085f8:	2102      	movs	r1, #2
 80085fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085fe:	f7ff fb23 	bl	8007c48 <RCCEx_PLL3_Config>
 8008602:	2800      	cmp	r0, #0
 8008604:	f43f af75 	beq.w	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 8008608:	2601      	movs	r6, #1
 800860a:	e772      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800860c:	2b00      	cmp	r3, #0
 800860e:	d084      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 8008610:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008618:	d006      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800861a:	4a28      	ldr	r2, [pc, #160]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800861c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800861e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008622:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008624:	430b      	orrs	r3, r1
 8008626:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800862e:	d006      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008630:	4a22      	ldr	r2, [pc, #136]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008632:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008638:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800863a:	430b      	orrs	r3, r1
 800863c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008644:	d006      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008646:	4a1d      	ldr	r2, [pc, #116]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008648:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800864a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800864e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008650:	430b      	orrs	r3, r1
 8008652:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800865a:	d009      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800865c:	4b17      	ldr	r3, [pc, #92]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008664:	611a      	str	r2, [r3, #16]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800866c:	430a      	orrs	r2, r1
 800866e:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	db19      	blt.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800867c:	d007      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800867e:	4a0f      	ldr	r2, [pc, #60]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8008680:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008682:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008686:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800868a:	430b      	orrs	r3, r1
 800868c:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800868e:	b106      	cbz	r6, 8008692 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 8008690:	2601      	movs	r6, #1
}
 8008692:	4630      	mov	r0, r6
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008696:	2601      	movs	r6, #1
 8008698:	e7bb      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800869a:	4a08      	ldr	r2, [pc, #32]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800869c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800869e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80086a4:	e739      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80086a6:	462e      	mov	r6, r5
 80086a8:	e7b3      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086aa:	4a04      	ldr	r2, [pc, #16]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80086ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80086ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80086b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80086b4:	430b      	orrs	r3, r1
 80086b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b8:	e7dd      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x922>
 80086ba:	bf00      	nop
 80086bc:	58024400 	.word	0x58024400

080086c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80086c0:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 80086c2:	6802      	ldr	r2, [r0, #0]
 80086c4:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086c6:	6991      	ldr	r1, [r2, #24]
 80086c8:	f041 0108 	orr.w	r1, r1, #8
 80086cc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086ce:	6801      	ldr	r1, [r0, #0]
 80086d0:	698a      	ldr	r2, [r1, #24]
 80086d2:	f042 0210 	orr.w	r2, r2, #16
 80086d6:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086d8:	6801      	ldr	r1, [r0, #0]
 80086da:	680a      	ldr	r2, [r1, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80086e2:	6801      	ldr	r1, [r0, #0]
 80086e4:	690c      	ldr	r4, [r1, #16]
 80086e6:	4a29      	ldr	r2, [pc, #164]	; (800878c <SPI_CloseTransfer+0xcc>)
 80086e8:	4022      	ands	r2, r4
 80086ea:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086ec:	6801      	ldr	r1, [r0, #0]
 80086ee:	688a      	ldr	r2, [r1, #8]
 80086f0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80086f4:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086f6:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	2a04      	cmp	r2, #4
 80086fe:	d00d      	beq.n	800871c <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008700:	f013 0f20 	tst.w	r3, #32
 8008704:	d00a      	beq.n	800871c <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008706:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800870a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800870e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008712:	6801      	ldr	r1, [r0, #0]
 8008714:	698a      	ldr	r2, [r1, #24]
 8008716:	f042 0220 	orr.w	r2, r2, #32
 800871a:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800871c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8008720:	b2d2      	uxtb	r2, r2
 8008722:	2a03      	cmp	r2, #3
 8008724:	d00d      	beq.n	8008742 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008726:	f013 0f40 	tst.w	r3, #64	; 0x40
 800872a:	d00a      	beq.n	8008742 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800872c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8008730:	f042 0204 	orr.w	r2, r2, #4
 8008734:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008738:	6801      	ldr	r1, [r0, #0]
 800873a:	698a      	ldr	r2, [r1, #24]
 800873c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008740:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008742:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008746:	d00a      	beq.n	800875e <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008748:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800874c:	f042 0201 	orr.w	r2, r2, #1
 8008750:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008754:	6801      	ldr	r1, [r0, #0]
 8008756:	698a      	ldr	r2, [r1, #24]
 8008758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800875c:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800875e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008762:	d00a      	beq.n	800877a <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008764:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008770:	6802      	ldr	r2, [r0, #0]
 8008772:	6993      	ldr	r3, [r2, #24]
 8008774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008778:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800877a:	2300      	movs	r3, #0
 800877c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008780:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8008784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	fffffc90 	.word	0xfffffc90

08008790 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008790:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008792:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008794:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008796:	3008      	adds	r0, #8
 8008798:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800879a:	fb03 0000 	mla	r0, r3, r0, r0
 800879e:	4770      	bx	lr

080087a0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f000 80a3 	beq.w	80088ec <HAL_SPI_Init+0x14c>
{
 80087a6:	b570      	push	{r4, r5, r6, lr}
 80087a8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80087ae:	6805      	ldr	r5, [r0, #0]
 80087b0:	4b52      	ldr	r3, [pc, #328]	; (80088fc <HAL_SPI_Init+0x15c>)
 80087b2:	4e53      	ldr	r6, [pc, #332]	; (8008900 <HAL_SPI_Init+0x160>)
 80087b4:	429d      	cmp	r5, r3
 80087b6:	bf18      	it	ne
 80087b8:	42b5      	cmpne	r5, r6
 80087ba:	bf14      	ite	ne
 80087bc:	2601      	movne	r6, #1
 80087be:	2600      	moveq	r6, #0
 80087c0:	d007      	beq.n	80087d2 <HAL_SPI_Init+0x32>
 80087c2:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80087c6:	429d      	cmp	r5, r3
 80087c8:	d003      	beq.n	80087d2 <HAL_SPI_Init+0x32>
 80087ca:	68c3      	ldr	r3, [r0, #12]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	f200 808f 	bhi.w	80088f0 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff ffdc 	bl	8008790 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087d8:	b12e      	cbz	r6, 80087e6 <HAL_SPI_Init+0x46>
 80087da:	4b4a      	ldr	r3, [pc, #296]	; (8008904 <HAL_SPI_Init+0x164>)
 80087dc:	429d      	cmp	r5, r3
 80087de:	d002      	beq.n	80087e6 <HAL_SPI_Init+0x46>
 80087e0:	2808      	cmp	r0, #8
 80087e2:	f200 8087 	bhi.w	80088f4 <HAL_SPI_Init+0x154>
 80087e6:	4a45      	ldr	r2, [pc, #276]	; (80088fc <HAL_SPI_Init+0x15c>)
 80087e8:	4b45      	ldr	r3, [pc, #276]	; (8008900 <HAL_SPI_Init+0x160>)
 80087ea:	429d      	cmp	r5, r3
 80087ec:	bf18      	it	ne
 80087ee:	4295      	cmpne	r5, r2
 80087f0:	d003      	beq.n	80087fa <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f6:	429d      	cmp	r5, r3
 80087f8:	d101      	bne.n	80087fe <HAL_SPI_Init+0x5e>
 80087fa:	2810      	cmp	r0, #16
 80087fc:	d87c      	bhi.n	80088f8 <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80087fe:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8008802:	2b00      	cmp	r3, #0
 8008804:	d059      	beq.n	80088ba <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008806:	2302      	movs	r3, #2
 8008808:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	6813      	ldr	r3, [r2, #0]
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008816:	6821      	ldr	r1, [r4, #0]
 8008818:	688a      	ldr	r2, [r1, #8]
 800881a:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800881e:	69a3      	ldr	r3, [r4, #24]
 8008820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008824:	d04f      	beq.n	80088c6 <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008826:	69e3      	ldr	r3, [r4, #28]
 8008828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800882a:	430b      	orrs	r3, r1
 800882c:	4313      	orrs	r3, r2
 800882e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008830:	4313      	orrs	r3, r2
 8008832:	68e1      	ldr	r1, [r4, #12]
 8008834:	6822      	ldr	r2, [r4, #0]
 8008836:	430b      	orrs	r3, r1
 8008838:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800883a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800883c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800883e:	4313      	orrs	r3, r2
 8008840:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008842:	4313      	orrs	r3, r2
 8008844:	69a2      	ldr	r2, [r4, #24]
 8008846:	4313      	orrs	r3, r2
 8008848:	6922      	ldr	r2, [r4, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	6962      	ldr	r2, [r4, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	6a22      	ldr	r2, [r4, #32]
 8008852:	4313      	orrs	r3, r2
 8008854:	6862      	ldr	r2, [r4, #4]
 8008856:	4313      	orrs	r3, r2
 8008858:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800885a:	4313      	orrs	r3, r2
 800885c:	68a2      	ldr	r2, [r4, #8]
 800885e:	4313      	orrs	r3, r2
 8008860:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008862:	4313      	orrs	r3, r2
 8008864:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	430b      	orrs	r3, r1
 800886a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	b96b      	cbnz	r3, 800888c <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	6893      	ldr	r3, [r2, #8]
 8008874:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8008878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800887c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	6893      	ldr	r3, [r2, #8]
 8008882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800888a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800889c:	d006      	beq.n	80088ac <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	68d3      	ldr	r3, [r2, #12]
 80088a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088a8:	430b      	orrs	r3, r1
 80088aa:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ac:	2000      	movs	r0, #0
 80088ae:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80088ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80088be:	4620      	mov	r0, r4
 80088c0:	f7f9 fc90 	bl	80021e4 <HAL_SPI_MspInit>
 80088c4:	e79f      	b.n	8008806 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088cc:	d006      	beq.n	80088dc <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1a9      	bne.n	8008826 <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80088d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80088d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088d8:	d1a5      	bne.n	8008826 <HAL_SPI_Init+0x86>
 80088da:	e002      	b.n	80088e2 <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80088dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1f5      	bne.n	80088ce <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80088e2:	680b      	ldr	r3, [r1, #0]
 80088e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088e8:	600b      	str	r3, [r1, #0]
 80088ea:	e79c      	b.n	8008826 <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 80088ec:	2001      	movs	r0, #1
}
 80088ee:	4770      	bx	lr
    return HAL_ERROR;
 80088f0:	2001      	movs	r0, #1
 80088f2:	e7e1      	b.n	80088b8 <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 80088f4:	2001      	movs	r0, #1
 80088f6:	e7df      	b.n	80088b8 <HAL_SPI_Init+0x118>
 80088f8:	2001      	movs	r0, #1
 80088fa:	e7dd      	b.n	80088b8 <HAL_SPI_Init+0x118>
 80088fc:	40013000 	.word	0x40013000
 8008900:	40003800 	.word	0x40003800
 8008904:	40003c00 	.word	0x40003c00

08008908 <HAL_SPI_TxRxCpltCallback>:
}
 8008908:	4770      	bx	lr

0800890a <HAL_SPI_ErrorCallback>:
}
 800890a:	4770      	bx	lr

0800890c <HAL_SPI_IRQHandler>:
{
 800890c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8008912:	6806      	ldr	r6, [r0, #0]
 8008914:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8008918:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800891c:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008920:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8008924:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8008928:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800892a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800892e:	2b04      	cmp	r3, #4
 8008930:	d03b      	beq.n	80089aa <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 8008932:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008934:	f005 0845 	and.w	r8, r5, #69	; 0x45
 8008938:	f1b8 0f01 	cmp.w	r8, #1
 800893c:	d03c      	beq.n	80089b8 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800893e:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8008942:	2a02      	cmp	r2, #2
 8008944:	d03d      	beq.n	80089c2 <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 8008946:	2b00      	cmp	r3, #0
 8008948:	d13e      	bne.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800894a:	f015 0f08 	tst.w	r5, #8
 800894e:	d071      	beq.n	8008a34 <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008950:	6822      	ldr	r2, [r4, #0]
 8008952:	6993      	ldr	r3, [r2, #24]
 8008954:	f043 0308 	orr.w	r3, r3, #8
 8008958:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	6993      	ldr	r3, [r2, #24]
 800895e:	f043 0310 	orr.w	r3, r3, #16
 8008962:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	6993      	ldr	r3, [r2, #24]
 8008968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800896c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	6913      	ldr	r3, [r2, #16]
 8008972:	f023 0308 	bic.w	r3, r3, #8
 8008976:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8008980:	d033      	beq.n	80089ea <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff fe9c 	bl	80086c0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8008988:	2301      	movs	r3, #1
 800898a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800898e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008992:	2b00      	cmp	r3, #0
 8008994:	d142      	bne.n	8008a1c <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008996:	2f05      	cmp	r7, #5
 8008998:	d044      	beq.n	8008a24 <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800899a:	2f04      	cmp	r7, #4
 800899c:	d046      	beq.n	8008a2c <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800899e:	2f03      	cmp	r7, #3
 80089a0:	d112      	bne.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7f9 fa4c 	bl	8001e40 <HAL_SPI_TxCpltCallback>
    return;
 80089a8:	e00e      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 80089aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80089ac:	4798      	blx	r3
    hspi->RxISR(hspi);
 80089ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089b0:	4620      	mov	r0, r4
 80089b2:	4798      	blx	r3
    handled = 1UL;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7bd      	b.n	8008934 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 80089b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80089ba:	4620      	mov	r0, r4
 80089bc:	4798      	blx	r3
    handled = 1UL;
 80089be:	4643      	mov	r3, r8
 80089c0:	e7bd      	b.n	800893e <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 80089c2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80089c4:	4620      	mov	r0, r4
 80089c6:	4798      	blx	r3
}
 80089c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089cc:	2b07      	cmp	r3, #7
 80089ce:	d91c      	bls.n	8008a0a <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d2:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 80089d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d8:	3302      	adds	r3, #2
 80089da:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 80089dc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80089ea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0c6      	beq.n	8008982 <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80089f4:	68e3      	ldr	r3, [r4, #12]
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d9e8      	bls.n	80089cc <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a00:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a04:	3304      	adds	r3, #4
 8008a06:	6663      	str	r3, [r4, #100]	; 0x64
 8008a08:	e7e8      	b.n	80089dc <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a0e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008a12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a16:	3301      	adds	r3, #1
 8008a18:	6663      	str	r3, [r4, #100]	; 0x64
 8008a1a:	e7df      	b.n	80089dc <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff ff74 	bl	800890a <HAL_SPI_ErrorCallback>
      return;
 8008a22:	e7d1      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7ff ff6f 	bl	8008908 <HAL_SPI_TxRxCpltCallback>
 8008a2a:	e7cd      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7f9 f9fd 	bl	8001e2c <HAL_SPI_RxCpltCallback>
 8008a32:	e7c9      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008a34:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8008a38:	d002      	beq.n	8008a40 <HAL_SPI_IRQHandler+0x134>
 8008a3a:	f01a 0f08 	tst.w	sl, #8
 8008a3e:	d173      	bne.n	8008b28 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008a40:	f415 7f58 	tst.w	r5, #864	; 0x360
 8008a44:	d0c0      	beq.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008a46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a4a:	d00a      	beq.n	8008a62 <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a4c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008a50:	f043 0304 	orr.w	r3, r3, #4
 8008a54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	6993      	ldr	r3, [r2, #24]
 8008a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a60:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008a62:	f415 7f00 	tst.w	r5, #512	; 0x200
 8008a66:	d00a      	beq.n	8008a7e <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a68:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a74:	6822      	ldr	r2, [r4, #0]
 8008a76:	6993      	ldr	r3, [r2, #24]
 8008a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a7c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008a7e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008a82:	d00a      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008a88:	f043 0308 	orr.w	r3, r3, #8
 8008a8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a90:	6822      	ldr	r2, [r4, #0]
 8008a92:	6993      	ldr	r3, [r2, #24]
 8008a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a98:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008a9a:	f015 0f20 	tst.w	r5, #32
 8008a9e:	d00a      	beq.n	8008ab6 <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008aa0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	6993      	ldr	r3, [r2, #24]
 8008ab0:	f043 0320 	orr.w	r3, r3, #32
 8008ab4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d084      	beq.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	6813      	ldr	r3, [r2, #0]
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	6911      	ldr	r1, [r2, #16]
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <HAL_SPI_IRQHandler+0x238>)
 8008ace:	400b      	ands	r3, r1
 8008ad0:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008ad2:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 8008ad6:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 8008ada:	d12b      	bne.n	8008b34 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	6893      	ldr	r3, [r2, #8]
 8008ae0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008ae4:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8008ae6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008ae8:	b15b      	cbz	r3, 8008b02 <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008aea:	4a17      	ldr	r2, [pc, #92]	; (8008b48 <HAL_SPI_IRQHandler+0x23c>)
 8008aec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008aee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008af0:	f7fc fa60 	bl	8004fb4 <HAL_DMA_Abort_IT>
 8008af4:	b128      	cbz	r0, 8008b02 <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008af6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8008b02:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f43f af5f 	beq.w	80089c8 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b0a:	4a0f      	ldr	r2, [pc, #60]	; (8008b48 <HAL_SPI_IRQHandler+0x23c>)
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008b0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008b10:	f7fc fa50 	bl	8004fb4 <HAL_DMA_Abort_IT>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f43f af57 	beq.w	80089c8 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8008b26:	e74f      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	6993      	ldr	r3, [r2, #24]
 8008b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b30:	6193      	str	r3, [r2, #24]
    return;
 8008b32:	e749      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7ff fee5 	bl	800890a <HAL_SPI_ErrorCallback>
    return;
 8008b40:	e742      	b.n	80089c8 <HAL_SPI_IRQHandler+0xbc>
 8008b42:	bf00      	nop
 8008b44:	fffffc94 	.word	0xfffffc94
 8008b48:	08008b4d 	.word	0x08008b4d

08008b4c <SPI_DMAAbortOnError>:
{
 8008b4c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008b56:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8008b60:	f7ff fed3 	bl	800890a <HAL_SPI_ErrorCallback>
}
 8008b64:	bd08      	pop	{r3, pc}

08008b66 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d13a      	bne.n	8008be8 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b72:	2302      	movs	r3, #2
 8008b74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b78:	6802      	ldr	r2, [r0, #0]
 8008b7a:	68d3      	ldr	r3, [r2, #12]
 8008b7c:	f043 0301 	orr.w	r3, r3, #1
 8008b80:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b82:	6803      	ldr	r3, [r0, #0]
 8008b84:	4a1a      	ldr	r2, [pc, #104]	; (8008bf0 <HAL_TIM_Base_Start_IT+0x88>)
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	bf18      	it	ne
 8008b8c:	4293      	cmpne	r3, r2
 8008b8e:	d01d      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008b90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d019      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d015      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d011      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008ba8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d00d      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008bb0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d009      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
 8008bb8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d005      	beq.n	8008bcc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bcc:	6899      	ldr	r1, [r3, #8]
 8008bce:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <HAL_TIM_Base_Start_IT+0x8c>)
 8008bd0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd2:	2a06      	cmp	r2, #6
 8008bd4:	bf18      	it	ne
 8008bd6:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 8008bda:	d007      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	f042 0201 	orr.w	r2, r2, #1
 8008be2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008be4:	2000      	movs	r0, #0
 8008be6:	4770      	bx	lr
    return HAL_ERROR;
 8008be8:	2001      	movs	r0, #1
 8008bea:	4770      	bx	lr
  return HAL_OK;
 8008bec:	2000      	movs	r0, #0
}
 8008bee:	4770      	bx	lr
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	00010007 	.word	0x00010007

08008bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bf8:	4770      	bx	lr

08008bfa <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bfc:	4770      	bx	lr

08008bfe <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_IRQHandler>:
{
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c04:	6803      	ldr	r3, [r0, #0]
 8008c06:	691a      	ldr	r2, [r3, #16]
 8008c08:	f012 0f02 	tst.w	r2, #2
 8008c0c:	d011      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	f012 0f02 	tst.w	r2, #2
 8008c14:	d00d      	beq.n	8008c32 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c16:	f06f 0202 	mvn.w	r2, #2
 8008c1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c20:	6803      	ldr	r3, [r0, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f013 0f03 	tst.w	r3, #3
 8008c28:	d079      	beq.n	8008d1e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008c2a:	f7ff ffe6 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	f012 0f04 	tst.w	r2, #4
 8008c3a:	d012      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	f012 0f04 	tst.w	r2, #4
 8008c42:	d00e      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c44:	f06f 0204 	mvn.w	r2, #4
 8008c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008c56:	d068      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f7ff ffce 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	f012 0f08 	tst.w	r2, #8
 8008c6a:	d012      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	f012 0f08 	tst.w	r2, #8
 8008c72:	d00e      	beq.n	8008c92 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c74:	f06f 0208 	mvn.w	r2, #8
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c7a:	2304      	movs	r3, #4
 8008c7c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f013 0f03 	tst.w	r3, #3
 8008c86:	d057      	beq.n	8008d38 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7ff ffb6 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	f012 0f10 	tst.w	r2, #16
 8008c9a:	d012      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	f012 0f10 	tst.w	r2, #16
 8008ca2:	d00e      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ca4:	f06f 0210 	mvn.w	r2, #16
 8008ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008caa:	2308      	movs	r3, #8
 8008cac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008cb6:	d046      	beq.n	8008d46 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f7ff ff9e 	bl	8008bfa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	691a      	ldr	r2, [r3, #16]
 8008cc6:	f012 0f01 	tst.w	r2, #1
 8008cca:	d003      	beq.n	8008cd4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	f012 0f01 	tst.w	r2, #1
 8008cd2:	d13f      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008cdc:	d003      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008ce4:	d13d      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008cee:	d003      	beq.n	8008cf8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008cf6:	d13b      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008d08:	d139      	bne.n	8008d7e <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	691a      	ldr	r2, [r3, #16]
 8008d0e:	f012 0f20 	tst.w	r2, #32
 8008d12:	d003      	beq.n	8008d1c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	f012 0f20 	tst.w	r2, #32
 8008d1a:	d137      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x18c>
}
 8008d1c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d1e:	f7ff ff6b 	bl	8008bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff6a 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8008d28:	e781      	b.n	8008c2e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff ff64 	bl	8008bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7ff ff63 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8008d36:	e792      	b.n	8008c5e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff ff5d 	bl	8008bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff ff5c 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8008d44:	e7a3      	b.n	8008c8e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d46:	4620      	mov	r0, r4
 8008d48:	f7ff ff56 	bl	8008bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f7ff ff55 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
 8008d52:	e7b4      	b.n	8008cbe <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d54:	f06f 0201 	mvn.w	r2, #1
 8008d58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f7f9 f858 	bl	8001e10 <HAL_TIM_PeriodElapsedCallback>
 8008d60:	e7b8      	b.n	8008cd4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 f8ca 	bl	8008f02 <HAL_TIMEx_BreakCallback>
 8008d6e:	e7ba      	b.n	8008ce6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f8c4 	bl	8008f04 <HAL_TIMEx_Break2Callback>
 8008d7c:	e7bc      	b.n	8008cf8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7ff ff3a 	bl	8008bfe <HAL_TIM_TriggerCallback>
 8008d8a:	e7be      	b.n	8008d0a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d8c:	f06f 0220 	mvn.w	r2, #32
 8008d90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f8b4 	bl	8008f00 <HAL_TIMEx_CommutCallback>
}
 8008d98:	e7c0      	b.n	8008d1c <HAL_TIM_IRQHandler+0x11c>
	...

08008d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d9c:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d9e:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008da0:	4a39      	ldr	r2, [pc, #228]	; (8008e88 <TIM_Base_SetConfig+0xec>)
 8008da2:	4290      	cmp	r0, r2
 8008da4:	bf14      	ite	ne
 8008da6:	f04f 0e00 	movne.w	lr, #0
 8008daa:	f04f 0e01 	moveq.w	lr, #1
 8008dae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008db2:	bf14      	ite	ne
 8008db4:	4672      	movne	r2, lr
 8008db6:	f04e 0201 	orreq.w	r2, lr, #1
 8008dba:	b9aa      	cbnz	r2, 8008de8 <TIM_Base_SetConfig+0x4c>
 8008dbc:	4c33      	ldr	r4, [pc, #204]	; (8008e8c <TIM_Base_SetConfig+0xf0>)
 8008dbe:	42a0      	cmp	r0, r4
 8008dc0:	bf14      	ite	ne
 8008dc2:	2400      	movne	r4, #0
 8008dc4:	2401      	moveq	r4, #1
 8008dc6:	4d32      	ldr	r5, [pc, #200]	; (8008e90 <TIM_Base_SetConfig+0xf4>)
 8008dc8:	42a8      	cmp	r0, r5
 8008dca:	d00d      	beq.n	8008de8 <TIM_Base_SetConfig+0x4c>
 8008dcc:	b964      	cbnz	r4, 8008de8 <TIM_Base_SetConfig+0x4c>
 8008dce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8008dd2:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8008dd6:	42a0      	cmp	r0, r4
 8008dd8:	bf14      	ite	ne
 8008dda:	2400      	movne	r4, #0
 8008ddc:	2401      	moveq	r4, #1
 8008dde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008de2:	42a8      	cmp	r0, r5
 8008de4:	d000      	beq.n	8008de8 <TIM_Base_SetConfig+0x4c>
 8008de6:	b11c      	cbz	r4, 8008df0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008dec:	684c      	ldr	r4, [r1, #4]
 8008dee:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008df0:	bb12      	cbnz	r2, 8008e38 <TIM_Base_SetConfig+0x9c>
 8008df2:	4a26      	ldr	r2, [pc, #152]	; (8008e8c <TIM_Base_SetConfig+0xf0>)
 8008df4:	4290      	cmp	r0, r2
 8008df6:	bf14      	ite	ne
 8008df8:	2200      	movne	r2, #0
 8008dfa:	2201      	moveq	r2, #1
 8008dfc:	4c24      	ldr	r4, [pc, #144]	; (8008e90 <TIM_Base_SetConfig+0xf4>)
 8008dfe:	42a0      	cmp	r0, r4
 8008e00:	d01a      	beq.n	8008e38 <TIM_Base_SetConfig+0x9c>
 8008e02:	b9ca      	cbnz	r2, 8008e38 <TIM_Base_SetConfig+0x9c>
 8008e04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008e08:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8008e0c:	4290      	cmp	r0, r2
 8008e0e:	bf14      	ite	ne
 8008e10:	2200      	movne	r2, #0
 8008e12:	2201      	moveq	r2, #1
 8008e14:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d00d      	beq.n	8008e38 <TIM_Base_SetConfig+0x9c>
 8008e1c:	b962      	cbnz	r2, 8008e38 <TIM_Base_SetConfig+0x9c>
 8008e1e:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <TIM_Base_SetConfig+0xf8>)
 8008e20:	4290      	cmp	r0, r2
 8008e22:	bf14      	ite	ne
 8008e24:	2200      	movne	r2, #0
 8008e26:	2201      	moveq	r2, #1
 8008e28:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8008e2c:	42a0      	cmp	r0, r4
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x9c>
 8008e30:	b912      	cbnz	r2, 8008e38 <TIM_Base_SetConfig+0x9c>
 8008e32:	4a19      	ldr	r2, [pc, #100]	; (8008e98 <TIM_Base_SetConfig+0xfc>)
 8008e34:	4290      	cmp	r0, r2
 8008e36:	d104      	bne.n	8008e42 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e38:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e3c:	68cb      	ldr	r3, [r1, #12]
 8008e3e:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e46:	694a      	ldr	r2, [r1, #20]
 8008e48:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008e4a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e4c:	688a      	ldr	r2, [r1, #8]
 8008e4e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e50:	680a      	ldr	r2, [r1, #0]
 8008e52:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e54:	4a11      	ldr	r2, [pc, #68]	; (8008e9c <TIM_Base_SetConfig+0x100>)
 8008e56:	4290      	cmp	r0, r2
 8008e58:	bf14      	ite	ne
 8008e5a:	4673      	movne	r3, lr
 8008e5c:	f04e 0301 	orreq.w	r3, lr, #1
 8008e60:	b963      	cbnz	r3, 8008e7c <TIM_Base_SetConfig+0xe0>
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <TIM_Base_SetConfig+0xf8>)
 8008e64:	4298      	cmp	r0, r3
 8008e66:	bf14      	ite	ne
 8008e68:	2300      	movne	r3, #0
 8008e6a:	2301      	moveq	r3, #1
 8008e6c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008e70:	4290      	cmp	r0, r2
 8008e72:	d003      	beq.n	8008e7c <TIM_Base_SetConfig+0xe0>
 8008e74:	b913      	cbnz	r3, 8008e7c <TIM_Base_SetConfig+0xe0>
 8008e76:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <TIM_Base_SetConfig+0xfc>)
 8008e78:	4298      	cmp	r0, r3
 8008e7a:	d101      	bne.n	8008e80 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e7c:	690b      	ldr	r3, [r1, #16]
 8008e7e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e80:	2301      	movs	r3, #1
 8008e82:	6143      	str	r3, [r0, #20]
}
 8008e84:	bd30      	pop	{r4, r5, pc}
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000400 	.word	0x40000400
 8008e94:	40014400 	.word	0x40014400
 8008e98:	40014800 	.word	0x40014800
 8008e9c:	40010400 	.word	0x40010400

08008ea0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008ea0:	b360      	cbz	r0, 8008efc <HAL_TIM_Base_Init+0x5c>
{
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008eaa:	b313      	cbz	r3, 8008ef2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	2302      	movs	r3, #2
 8008eae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f851 0b04 	ldr.w	r0, [r1], #4
 8008eb8:	f7ff ff70 	bl	8008d9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008ec6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008eca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008ece:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ee2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008ee6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008eee:	2000      	movs	r0, #0
}
 8008ef0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008ef2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008ef6:	f7ff fe36 	bl	8008b66 <HAL_TIM_Base_MspInit>
 8008efa:	e7d7      	b.n	8008eac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008efc:	2001      	movs	r0, #1
}
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f00:	4770      	bx	lr

08008f02 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f04:	4770      	bx	lr

08008f06 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f06:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f0c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f0e:	f001 ff6b 	bl	800ade8 <xTaskGetSchedulerState>
 8008f12:	2801      	cmp	r0, #1
 8008f14:	d100      	bne.n	8008f18 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008f16:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8008f18:	f000 fc6c 	bl	80097f4 <xPortSysTickHandler>
}
 8008f1c:	e7fb      	b.n	8008f16 <SysTick_Handler+0x10>
	...

08008f20 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f20:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f24:	b92b      	cbnz	r3, 8008f32 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <osKernelInitialize+0x20>)
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	b928      	cbnz	r0, 8008f38 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f30:	4770      	bx	lr
    stat = osErrorISR;
 8008f32:	f06f 0005 	mvn.w	r0, #5
 8008f36:	4770      	bx	lr
    } else {
      stat = osError;
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	240026c0 	.word	0x240026c0

08008f44 <osKernelStart>:
 8008f44:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f48:	b973      	cbnz	r3, 8008f68 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <osKernelStart+0x30>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10d      	bne.n	8008f6e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8008f52:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f54:	2400      	movs	r4, #0
 8008f56:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <osKernelStart+0x34>)
 8008f58:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f5a:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <osKernelStart+0x30>)
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f60:	f001 fcb8 	bl	800a8d4 <vTaskStartScheduler>
      stat = osOK;
 8008f64:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008f66:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008f68:	f06f 0005 	mvn.w	r0, #5
 8008f6c:	4770      	bx	lr
      stat = osError;
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f72:	4770      	bx	lr
 8008f74:	240026c0 	.word	0x240026c0
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f80:	2400      	movs	r4, #0
 8008f82:	9405      	str	r4, [sp, #20]
 8008f84:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008f88:	bb74      	cbnz	r4, 8008fe8 <osThreadNew+0x6c>
 8008f8a:	b368      	cbz	r0, 8008fe8 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008f8c:	b322      	cbz	r2, 8008fd8 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 8008f8e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008f90:	6993      	ldr	r3, [r2, #24]
 8008f92:	b903      	cbnz	r3, 8008f96 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8008f94:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f96:	1e5c      	subs	r4, r3, #1
 8008f98:	2c37      	cmp	r4, #55	; 0x37
 8008f9a:	d849      	bhi.n	8009030 <osThreadNew+0xb4>
 8008f9c:	6854      	ldr	r4, [r2, #4]
 8008f9e:	f014 0f01 	tst.w	r4, #1
 8008fa2:	d147      	bne.n	8009034 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008fa4:	6956      	ldr	r6, [r2, #20]
 8008fa6:	b16e      	cbz	r6, 8008fc4 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fa8:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fac:	6894      	ldr	r4, [r2, #8]
 8008fae:	b12c      	cbz	r4, 8008fbc <osThreadNew+0x40>
 8008fb0:	68d7      	ldr	r7, [r2, #12]
 8008fb2:	2fbb      	cmp	r7, #187	; 0xbb
 8008fb4:	d902      	bls.n	8008fbc <osThreadNew+0x40>
 8008fb6:	6917      	ldr	r7, [r2, #16]
 8008fb8:	b107      	cbz	r7, 8008fbc <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fba:	b9c6      	cbnz	r6, 8008fee <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fbc:	b12c      	cbz	r4, 8008fca <osThreadNew+0x4e>
    mem  = -1;
 8008fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc2:	e00e      	b.n	8008fe2 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8008fc4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8008fc8:	e7f0      	b.n	8008fac <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fca:	68d4      	ldr	r4, [r2, #12]
 8008fcc:	b98c      	cbnz	r4, 8008ff2 <osThreadNew+0x76>
 8008fce:	6914      	ldr	r4, [r2, #16]
 8008fd0:	b194      	cbz	r4, 8008ff8 <osThreadNew+0x7c>
    mem  = -1;
 8008fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd6:	e004      	b.n	8008fe2 <osThreadNew+0x66>
    name = NULL;
 8008fd8:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008fda:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008fdc:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008fde:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8008fe2:	2c01      	cmp	r4, #1
 8008fe4:	d00a      	beq.n	8008ffc <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008fe6:	b1ac      	cbz	r4, 8009014 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fe8:	9805      	ldr	r0, [sp, #20]
}
 8008fea:	b007      	add	sp, #28
 8008fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008fee:	2401      	movs	r4, #1
 8008ff0:	e7f7      	b.n	8008fe2 <osThreadNew+0x66>
    mem  = -1;
 8008ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ff6:	e7f4      	b.n	8008fe2 <osThreadNew+0x66>
          mem = 0;
 8008ff8:	2400      	movs	r4, #0
 8008ffa:	e7f2      	b.n	8008fe2 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ffc:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ffe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009000:	9202      	str	r2, [sp, #8]
 8009002:	9401      	str	r4, [sp, #4]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	460b      	mov	r3, r1
 8009008:	4662      	mov	r2, ip
 800900a:	4629      	mov	r1, r5
 800900c:	f001 fbf2 	bl	800a7f4 <xTaskCreateStatic>
 8009010:	9005      	str	r0, [sp, #20]
 8009012:	e7e9      	b.n	8008fe8 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009014:	aa05      	add	r2, sp, #20
 8009016:	9201      	str	r2, [sp, #4]
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	460b      	mov	r3, r1
 800901c:	fa1f f28c 	uxth.w	r2, ip
 8009020:	4629      	mov	r1, r5
 8009022:	f001 fc22 	bl	800a86a <xTaskCreate>
 8009026:	2801      	cmp	r0, #1
 8009028:	d0de      	beq.n	8008fe8 <osThreadNew+0x6c>
            hTask = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	9305      	str	r3, [sp, #20]
 800902e:	e7db      	b.n	8008fe8 <osThreadNew+0x6c>
        return (NULL);
 8009030:	2000      	movs	r0, #0
 8009032:	e7da      	b.n	8008fea <osThreadNew+0x6e>
 8009034:	2000      	movs	r0, #0
 8009036:	e7d8      	b.n	8008fea <osThreadNew+0x6e>

08009038 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009040:	2b00      	cmp	r3, #0
 8009042:	d14d      	bne.n	80090e0 <osSemaphoreNew+0xa8>
 8009044:	460e      	mov	r6, r1
 8009046:	4614      	mov	r4, r2
 8009048:	4288      	cmp	r0, r1
 800904a:	bf34      	ite	cc
 800904c:	2300      	movcc	r3, #0
 800904e:	2301      	movcs	r3, #1
 8009050:	2800      	cmp	r0, #0
 8009052:	d049      	beq.n	80090e8 <osSemaphoreNew+0xb0>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d047      	beq.n	80090e8 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 8009058:	b14a      	cbz	r2, 800906e <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800905a:	6895      	ldr	r5, [r2, #8]
 800905c:	b115      	cbz	r5, 8009064 <osSemaphoreNew+0x2c>
 800905e:	68d3      	ldr	r3, [r2, #12]
 8009060:	2b4f      	cmp	r3, #79	; 0x4f
 8009062:	d814      	bhi.n	800908e <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009064:	2d00      	cmp	r5, #0
 8009066:	d141      	bne.n	80090ec <osSemaphoreNew+0xb4>
 8009068:	68e3      	ldr	r3, [r4, #12]
 800906a:	b10b      	cbz	r3, 8009070 <osSemaphoreNew+0x38>
 800906c:	e039      	b.n	80090e2 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800906e:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8009070:	2801      	cmp	r0, #1
 8009072:	d00e      	beq.n	8009092 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8009074:	bb73      	cbnz	r3, 80090d4 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009076:	4631      	mov	r1, r6
 8009078:	f000 fe35 	bl	8009ce6 <xQueueCreateCountingSemaphore>
 800907c:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800907e:	b385      	cbz	r5, 80090e2 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 8009080:	b104      	cbz	r4, 8009084 <osSemaphoreNew+0x4c>
          name = attr->name;
 8009082:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f001 f9a6 	bl	800a3d8 <vQueueAddToRegistry>
 800908c:	e029      	b.n	80090e2 <osSemaphoreNew+0xaa>
        mem = 1;
 800908e:	2301      	movs	r3, #1
 8009090:	e7ee      	b.n	8009070 <osSemaphoreNew+0x38>
        if (mem == 1) {
 8009092:	b9b3      	cbnz	r3, 80090c2 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 8009094:	2203      	movs	r2, #3
 8009096:	2100      	movs	r1, #0
 8009098:	2001      	movs	r0, #1
 800909a:	f000 fddd 	bl	8009c58 <xQueueGenericCreate>
 800909e:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80090a0:	2d00      	cmp	r5, #0
 80090a2:	bf18      	it	ne
 80090a4:	2e00      	cmpne	r6, #0
 80090a6:	d0ea      	beq.n	800907e <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80090a8:	2300      	movs	r3, #0
 80090aa:	461a      	mov	r2, r3
 80090ac:	4619      	mov	r1, r3
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fe37 	bl	8009d22 <xQueueGenericSend>
 80090b4:	2801      	cmp	r0, #1
 80090b6:	d0e2      	beq.n	800907e <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 80090b8:	4628      	mov	r0, r5
 80090ba:	f001 f9b7 	bl	800a42c <vQueueDelete>
            hSemaphore = NULL;
 80090be:	2500      	movs	r5, #0
 80090c0:	e00f      	b.n	80090e2 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	2203      	movs	r2, #3
 80090c6:	9200      	str	r2, [sp, #0]
 80090c8:	2200      	movs	r2, #0
 80090ca:	4611      	mov	r1, r2
 80090cc:	f000 fd71 	bl	8009bb2 <xQueueGenericCreateStatic>
 80090d0:	4605      	mov	r5, r0
 80090d2:	e7e5      	b.n	80090a0 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80090d4:	68a2      	ldr	r2, [r4, #8]
 80090d6:	4631      	mov	r1, r6
 80090d8:	f000 fde2 	bl	8009ca0 <xQueueCreateCountingSemaphoreStatic>
 80090dc:	4605      	mov	r5, r0
 80090de:	e7ce      	b.n	800907e <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 80090e0:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80090e2:	4628      	mov	r0, r5
 80090e4:	b002      	add	sp, #8
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80090e8:	2500      	movs	r5, #0
 80090ea:	e7fa      	b.n	80090e2 <osSemaphoreNew+0xaa>
 80090ec:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 80090ee:	e7f8      	b.n	80090e2 <osSemaphoreNew+0xaa>

080090f0 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80090f0:	b320      	cbz	r0, 800913c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80090f2:	b510      	push	{r4, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	460c      	mov	r4, r1
 80090f8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80090fc:	b1b3      	cbz	r3, 800912c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 80090fe:	bb01      	cbnz	r1, 8009142 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009100:	2100      	movs	r1, #0
 8009102:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009104:	aa01      	add	r2, sp, #4
 8009106:	f001 f912 	bl	800a32e <xQueueReceiveFromISR>
 800910a:	2801      	cmp	r0, #1
 800910c:	d11c      	bne.n	8009148 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800910e:	9801      	ldr	r0, [sp, #4]
 8009110:	b150      	cbz	r0, 8009128 <osSemaphoreAcquire+0x38>
 8009112:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009126:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009128:	b002      	add	sp, #8
 800912a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800912c:	f001 f82c 	bl	800a188 <xQueueSemaphoreTake>
 8009130:	2801      	cmp	r0, #1
 8009132:	d00c      	beq.n	800914e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 8009134:	b16c      	cbz	r4, 8009152 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 8009136:	f06f 0001 	mvn.w	r0, #1
 800913a:	e7f5      	b.n	8009128 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800913c:	f06f 0003 	mvn.w	r0, #3
}
 8009140:	4770      	bx	lr
      stat = osErrorParameter;
 8009142:	f06f 0003 	mvn.w	r0, #3
 8009146:	e7ef      	b.n	8009128 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8009148:	f06f 0002 	mvn.w	r0, #2
 800914c:	e7ec      	b.n	8009128 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800914e:	2000      	movs	r0, #0
 8009150:	e7ea      	b.n	8009128 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8009152:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009156:	e7e7      	b.n	8009128 <osSemaphoreAcquire+0x38>

08009158 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009158:	b320      	cbz	r0, 80091a4 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800915a:	b500      	push	{lr}
 800915c:	b083      	sub	sp, #12
 800915e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009162:	b1a3      	cbz	r3, 800918e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009168:	a901      	add	r1, sp, #4
 800916a:	f000 ff05 	bl	8009f78 <xQueueGiveFromISR>
 800916e:	2801      	cmp	r0, #1
 8009170:	d11b      	bne.n	80091aa <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8009172:	9801      	ldr	r0, [sp, #4]
 8009174:	b198      	cbz	r0, 800919e <osSemaphoreRelease+0x46>
 8009176:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800917a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800918a:	2000      	movs	r0, #0
 800918c:	e007      	b.n	800919e <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800918e:	2300      	movs	r3, #0
 8009190:	461a      	mov	r2, r3
 8009192:	4619      	mov	r1, r3
 8009194:	f000 fdc5 	bl	8009d22 <xQueueGenericSend>
 8009198:	2801      	cmp	r0, #1
 800919a:	d109      	bne.n	80091b0 <osSemaphoreRelease+0x58>
  stat = osOK;
 800919c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800919e:	b003      	add	sp, #12
 80091a0:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 80091a4:	f06f 0003 	mvn.w	r0, #3
}
 80091a8:	4770      	bx	lr
      stat = osErrorResource;
 80091aa:	f06f 0002 	mvn.w	r0, #2
 80091ae:	e7f6      	b.n	800919e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80091b0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80091b4:	e7f3      	b.n	800919e <osSemaphoreRelease+0x46>

080091b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80091b6:	b570      	push	{r4, r5, r6, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d13d      	bne.n	800923e <osMessageQueueNew+0x88>
 80091c2:	4614      	mov	r4, r2
 80091c4:	1e0b      	subs	r3, r1, #0
 80091c6:	bf18      	it	ne
 80091c8:	2301      	movne	r3, #1
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d03b      	beq.n	8009246 <osMessageQueueNew+0x90>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d039      	beq.n	8009246 <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 80091d2:	b36a      	cbz	r2, 8009230 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091d4:	6893      	ldr	r3, [r2, #8]
 80091d6:	b14b      	cbz	r3, 80091ec <osMessageQueueNew+0x36>
 80091d8:	68d2      	ldr	r2, [r2, #12]
 80091da:	2a4f      	cmp	r2, #79	; 0x4f
 80091dc:	d906      	bls.n	80091ec <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091de:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091e0:	b122      	cbz	r2, 80091ec <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091e2:	fb01 f500 	mul.w	r5, r1, r0
 80091e6:	6966      	ldr	r6, [r4, #20]
 80091e8:	42ae      	cmp	r6, r5
 80091ea:	d21b      	bcs.n	8009224 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80091ec:	b173      	cbz	r3, 800920c <osMessageQueueNew+0x56>
    mem = -1;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80091f2:	bb53      	cbnz	r3, 800924a <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80091f4:	2200      	movs	r2, #0
 80091f6:	f000 fd2f 	bl	8009c58 <xQueueGenericCreate>
 80091fa:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80091fc:	b305      	cbz	r5, 8009240 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 80091fe:	b104      	cbz	r4, 8009202 <osMessageQueueNew+0x4c>
        name = attr->name;
 8009200:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8009202:	4621      	mov	r1, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f001 f8e7 	bl	800a3d8 <vQueueAddToRegistry>
 800920a:	e019      	b.n	8009240 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800920c:	68e3      	ldr	r3, [r4, #12]
 800920e:	b98b      	cbnz	r3, 8009234 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009210:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009212:	b113      	cbz	r3, 800921a <osMessageQueueNew+0x64>
    mem = -1;
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	e7eb      	b.n	80091f2 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800921a:	6963      	ldr	r3, [r4, #20]
 800921c:	b16b      	cbz	r3, 800923a <osMessageQueueNew+0x84>
    mem = -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	e7e6      	b.n	80091f2 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009224:	2500      	movs	r5, #0
 8009226:	9500      	str	r5, [sp, #0]
 8009228:	f000 fcc3 	bl	8009bb2 <xQueueGenericCreateStatic>
 800922c:	4605      	mov	r5, r0
 800922e:	e7e5      	b.n	80091fc <osMessageQueueNew+0x46>
      mem = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	e7de      	b.n	80091f2 <osMessageQueueNew+0x3c>
    mem = -1;
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
 8009238:	e7db      	b.n	80091f2 <osMessageQueueNew+0x3c>
          mem = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	e7d9      	b.n	80091f2 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800923e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009240:	4628      	mov	r0, r5
 8009242:	b002      	add	sp, #8
 8009244:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8009246:	2500      	movs	r5, #0
 8009248:	e7fa      	b.n	8009240 <osMessageQueueNew+0x8a>
 800924a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800924c:	e7f8      	b.n	8009240 <osMessageQueueNew+0x8a>

0800924e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800924e:	b510      	push	{r4, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	461c      	mov	r4, r3
 8009254:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009258:	b1d3      	cbz	r3, 8009290 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800925a:	2900      	cmp	r1, #0
 800925c:	bf18      	it	ne
 800925e:	2800      	cmpne	r0, #0
 8009260:	d024      	beq.n	80092ac <osMessageQueuePut+0x5e>
 8009262:	bb34      	cbnz	r4, 80092b2 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009264:	2300      	movs	r3, #0
 8009266:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009268:	aa01      	add	r2, sp, #4
 800926a:	f000 fe1e 	bl	8009eaa <xQueueGenericSendFromISR>
 800926e:	2801      	cmp	r0, #1
 8009270:	d122      	bne.n	80092b8 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009272:	9801      	ldr	r0, [sp, #4]
 8009274:	b150      	cbz	r0, 800928c <osMessageQueuePut+0x3e>
 8009276:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800927a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800928a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800928c:	b002      	add	sp, #8
 800928e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009290:	2900      	cmp	r1, #0
 8009292:	bf18      	it	ne
 8009294:	2800      	cmpne	r0, #0
 8009296:	d012      	beq.n	80092be <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009298:	2300      	movs	r3, #0
 800929a:	4622      	mov	r2, r4
 800929c:	f000 fd41 	bl	8009d22 <xQueueGenericSend>
 80092a0:	2801      	cmp	r0, #1
 80092a2:	d00f      	beq.n	80092c4 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 80092a4:	b184      	cbz	r4, 80092c8 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 80092a6:	f06f 0001 	mvn.w	r0, #1
 80092aa:	e7ef      	b.n	800928c <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092ac:	f06f 0003 	mvn.w	r0, #3
 80092b0:	e7ec      	b.n	800928c <osMessageQueuePut+0x3e>
 80092b2:	f06f 0003 	mvn.w	r0, #3
 80092b6:	e7e9      	b.n	800928c <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 80092b8:	f06f 0002 	mvn.w	r0, #2
 80092bc:	e7e6      	b.n	800928c <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80092be:	f06f 0003 	mvn.w	r0, #3
 80092c2:	e7e3      	b.n	800928c <osMessageQueuePut+0x3e>
  stat = osOK;
 80092c4:	2000      	movs	r0, #0
 80092c6:	e7e1      	b.n	800928c <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 80092c8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80092cc:	e7de      	b.n	800928c <osMessageQueuePut+0x3e>

080092ce <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80092ce:	b510      	push	{r4, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	461c      	mov	r4, r3
 80092d4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80092d8:	b1d3      	cbz	r3, 8009310 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092da:	2900      	cmp	r1, #0
 80092dc:	bf18      	it	ne
 80092de:	2800      	cmpne	r0, #0
 80092e0:	d023      	beq.n	800932a <osMessageQueueGet+0x5c>
 80092e2:	bb2c      	cbnz	r4, 8009330 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092e8:	aa01      	add	r2, sp, #4
 80092ea:	f001 f820 	bl	800a32e <xQueueReceiveFromISR>
 80092ee:	2801      	cmp	r0, #1
 80092f0:	d121      	bne.n	8009336 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80092f2:	9801      	ldr	r0, [sp, #4]
 80092f4:	b150      	cbz	r0, 800930c <osMessageQueueGet+0x3e>
 80092f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80092fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800930a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800930c:	b002      	add	sp, #8
 800930e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009310:	2900      	cmp	r1, #0
 8009312:	bf18      	it	ne
 8009314:	2800      	cmpne	r0, #0
 8009316:	d011      	beq.n	800933c <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009318:	4622      	mov	r2, r4
 800931a:	f000 fe86 	bl	800a02a <xQueueReceive>
 800931e:	2801      	cmp	r0, #1
 8009320:	d00f      	beq.n	8009342 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 8009322:	b184      	cbz	r4, 8009346 <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 8009324:	f06f 0001 	mvn.w	r0, #1
 8009328:	e7f0      	b.n	800930c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800932a:	f06f 0003 	mvn.w	r0, #3
 800932e:	e7ed      	b.n	800930c <osMessageQueueGet+0x3e>
 8009330:	f06f 0003 	mvn.w	r0, #3
 8009334:	e7ea      	b.n	800930c <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 8009336:	f06f 0002 	mvn.w	r0, #2
 800933a:	e7e7      	b.n	800930c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800933c:	f06f 0003 	mvn.w	r0, #3
 8009340:	e7e4      	b.n	800930c <osMessageQueueGet+0x3e>
  stat = osOK;
 8009342:	2000      	movs	r0, #0
 8009344:	e7e2      	b.n	800930c <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 8009346:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800934a:	e7df      	b.n	800930c <osMessageQueueGet+0x3e>

0800934c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800934c:	4b03      	ldr	r3, [pc, #12]	; (800935c <vApplicationGetIdleTaskMemory+0x10>)
 800934e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <vApplicationGetIdleTaskMemory+0x14>)
 8009352:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009354:	2380      	movs	r3, #128	; 0x80
 8009356:	6013      	str	r3, [r2, #0]
}
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	24002604 	.word	0x24002604
 8009360:	24002404 	.word	0x24002404

08009364 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009364:	4b03      	ldr	r3, [pc, #12]	; (8009374 <vApplicationGetTimerTaskMemory+0x10>)
 8009366:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <vApplicationGetTimerTaskMemory+0x14>)
 800936a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800936c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009370:	6013      	str	r3, [r2, #0]
}
 8009372:	4770      	bx	lr
 8009374:	24002ac4 	.word	0x24002ac4
 8009378:	240026c4 	.word	0x240026c4

0800937c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800937c:	4a12      	ldr	r2, [pc, #72]	; (80093c8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800937e:	f012 0f07 	tst.w	r2, #7
 8009382:	d01e      	beq.n	80093c2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009384:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009386:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800938a:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800938e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009390:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009392:	480e      	ldr	r0, [pc, #56]	; (80093cc <prvHeapInit+0x50>)
 8009394:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009396:	2100      	movs	r1, #0
 8009398:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800939a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800939c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800939e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80093a2:	480b      	ldr	r0, [pc, #44]	; (80093d0 <prvHeapInit+0x54>)
 80093a4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80093a6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093a8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093aa:	1a99      	subs	r1, r3, r2
 80093ac:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093ae:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <prvHeapInit+0x58>)
 80093b2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b4:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <prvHeapInit+0x5c>)
 80093b6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b8:	4b08      	ldr	r3, [pc, #32]	; (80093dc <prvHeapInit+0x60>)
 80093ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093be:	601a      	str	r2, [r3, #0]
}
 80093c0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c6:	e7e4      	b.n	8009392 <prvHeapInit+0x16>
 80093c8:	24002b84 	.word	0x24002b84
 80093cc:	2400ab98 	.word	0x2400ab98
 80093d0:	24002b80 	.word	0x24002b80
 80093d4:	2400ab8c 	.word	0x2400ab8c
 80093d8:	2400ab88 	.word	0x2400ab88
 80093dc:	2400ab84 	.word	0x2400ab84

080093e0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <prvInsertBlockIntoFreeList+0x5c>)
 80093e2:	461a      	mov	r2, r3
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4283      	cmp	r3, r0
 80093e8:	d3fb      	bcc.n	80093e2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093ea:	6851      	ldr	r1, [r2, #4]
 80093ec:	eb02 0c01 	add.w	ip, r2, r1
 80093f0:	4584      	cmp	ip, r0
 80093f2:	d009      	beq.n	8009408 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093f4:	6841      	ldr	r1, [r0, #4]
 80093f6:	eb00 0c01 	add.w	ip, r0, r1
 80093fa:	4563      	cmp	r3, ip
 80093fc:	d009      	beq.n	8009412 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093fe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009400:	4290      	cmp	r0, r2
 8009402:	d019      	beq.n	8009438 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009404:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8009406:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009408:	6840      	ldr	r0, [r0, #4]
 800940a:	4401      	add	r1, r0
 800940c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800940e:	4610      	mov	r0, r2
 8009410:	e7f0      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x14>
{
 8009412:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009414:	4c0a      	ldr	r4, [pc, #40]	; (8009440 <prvInsertBlockIntoFreeList+0x60>)
 8009416:	6824      	ldr	r4, [r4, #0]
 8009418:	42a3      	cmp	r3, r4
 800941a:	d00b      	beq.n	8009434 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4419      	add	r1, r3
 8009420:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8009428:	4290      	cmp	r0, r2
 800942a:	d000      	beq.n	800942e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800942c:	6010      	str	r0, [r2, #0]
	}
}
 800942e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009432:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009434:	6004      	str	r4, [r0, #0]
 8009436:	e7f7      	b.n	8009428 <prvInsertBlockIntoFreeList+0x48>
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	2400ab98 	.word	0x2400ab98
 8009440:	24002b80 	.word	0x24002b80

08009444 <pvPortMalloc>:
{
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8009448:	f001 fa9a 	bl	800a980 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800944c:	4b36      	ldr	r3, [pc, #216]	; (8009528 <pvPortMalloc+0xe4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	b1a3      	cbz	r3, 800947c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009452:	4b36      	ldr	r3, [pc, #216]	; (800952c <pvPortMalloc+0xe8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	421d      	tst	r5, r3
 8009458:	d14e      	bne.n	80094f8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800945a:	b135      	cbz	r5, 800946a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800945c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800945e:	f015 0f07 	tst.w	r5, #7
 8009462:	d002      	beq.n	800946a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009464:	f025 0507 	bic.w	r5, r5, #7
 8009468:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800946a:	2d00      	cmp	r5, #0
 800946c:	d046      	beq.n	80094fc <pvPortMalloc+0xb8>
 800946e:	4b30      	ldr	r3, [pc, #192]	; (8009530 <pvPortMalloc+0xec>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	42ab      	cmp	r3, r5
 8009474:	d351      	bcc.n	800951a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8009476:	4a2f      	ldr	r2, [pc, #188]	; (8009534 <pvPortMalloc+0xf0>)
 8009478:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800947a:	e004      	b.n	8009486 <pvPortMalloc+0x42>
			prvHeapInit();
 800947c:	f7ff ff7e 	bl	800937c <prvHeapInit>
 8009480:	e7e7      	b.n	8009452 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8009482:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009484:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009486:	6863      	ldr	r3, [r4, #4]
 8009488:	42ab      	cmp	r3, r5
 800948a:	d202      	bcs.n	8009492 <pvPortMalloc+0x4e>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f7      	bne.n	8009482 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8009492:	4b25      	ldr	r3, [pc, #148]	; (8009528 <pvPortMalloc+0xe4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	42a3      	cmp	r3, r4
 8009498:	d041      	beq.n	800951e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800949a:	6816      	ldr	r6, [r2, #0]
 800949c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	1b5b      	subs	r3, r3, r5
 80094a6:	2b10      	cmp	r3, #16
 80094a8:	d910      	bls.n	80094cc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094aa:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	f010 0f07 	tst.w	r0, #7
 80094b0:	d008      	beq.n	80094c4 <pvPortMalloc+0x80>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	e7fe      	b.n	80094c2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094c4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094c6:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094c8:	f7ff ff8a 	bl	80093e0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	4918      	ldr	r1, [pc, #96]	; (8009530 <pvPortMalloc+0xec>)
 80094d0:	680b      	ldr	r3, [r1, #0]
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094d6:	4918      	ldr	r1, [pc, #96]	; (8009538 <pvPortMalloc+0xf4>)
 80094d8:	6809      	ldr	r1, [r1, #0]
 80094da:	428b      	cmp	r3, r1
 80094dc:	d201      	bcs.n	80094e2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094de:	4916      	ldr	r1, [pc, #88]	; (8009538 <pvPortMalloc+0xf4>)
 80094e0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <pvPortMalloc+0xe8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80094ee:	4a13      	ldr	r2, [pc, #76]	; (800953c <pvPortMalloc+0xf8>)
 80094f0:	6813      	ldr	r3, [r2, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e002      	b.n	80094fe <pvPortMalloc+0xba>
void *pvReturn = NULL;
 80094f8:	2600      	movs	r6, #0
 80094fa:	e000      	b.n	80094fe <pvPortMalloc+0xba>
 80094fc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80094fe:	f001 fad9 	bl	800aab4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009502:	f016 0f07 	tst.w	r6, #7
 8009506:	d00c      	beq.n	8009522 <pvPortMalloc+0xde>
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	e7fe      	b.n	8009518 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800951a:	2600      	movs	r6, #0
 800951c:	e7ef      	b.n	80094fe <pvPortMalloc+0xba>
 800951e:	2600      	movs	r6, #0
 8009520:	e7ed      	b.n	80094fe <pvPortMalloc+0xba>
}
 8009522:	4630      	mov	r0, r6
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	bf00      	nop
 8009528:	24002b80 	.word	0x24002b80
 800952c:	2400ab84 	.word	0x2400ab84
 8009530:	2400ab88 	.word	0x2400ab88
 8009534:	2400ab98 	.word	0x2400ab98
 8009538:	2400ab8c 	.word	0x2400ab8c
 800953c:	2400ab90 	.word	0x2400ab90

08009540 <vPortFree>:
	if( pv != NULL )
 8009540:	2800      	cmp	r0, #0
 8009542:	d034      	beq.n	80095ae <vPortFree+0x6e>
{
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009548:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800954c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009550:	4a17      	ldr	r2, [pc, #92]	; (80095b0 <vPortFree+0x70>)
 8009552:	6812      	ldr	r2, [r2, #0]
 8009554:	4213      	tst	r3, r2
 8009556:	d108      	bne.n	800956a <vPortFree+0x2a>
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	e7fe      	b.n	8009568 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800956a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800956e:	b141      	cbz	r1, 8009582 <vPortFree+0x42>
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	e7fe      	b.n	8009580 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009582:	ea23 0302 	bic.w	r3, r3, r2
 8009586:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800958a:	f001 f9f9 	bl	800a980 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800958e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009592:	4a08      	ldr	r2, [pc, #32]	; (80095b4 <vPortFree+0x74>)
 8009594:	6813      	ldr	r3, [r2, #0]
 8009596:	440b      	add	r3, r1
 8009598:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800959a:	4628      	mov	r0, r5
 800959c:	f7ff ff20 	bl	80093e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095a0:	4a05      	ldr	r2, [pc, #20]	; (80095b8 <vPortFree+0x78>)
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80095a8:	f001 fa84 	bl	800aab4 <xTaskResumeAll>
}
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	4770      	bx	lr
 80095b0:	2400ab84 	.word	0x2400ab84
 80095b4:	2400ab88 	.word	0x2400ab88
 80095b8:	2400ab94 	.word	0x2400ab94

080095bc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095bc:	f100 0308 	add.w	r3, r0, #8
 80095c0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095ca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095d0:	4770      	bx	lr

080095d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095d6:	4770      	bx	lr

080095d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80095d8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095da:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095e0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095e2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	6003      	str	r3, [r0, #0]
}
 80095ec:	4770      	bx	lr

080095ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ee:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095f0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80095f6:	d011      	beq.n	800961c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095f8:	f100 0308 	add.w	r3, r0, #8
 80095fc:	461c      	mov	r4, r3
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	42aa      	cmp	r2, r5
 8009604:	d9fa      	bls.n	80095fc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009606:	6863      	ldr	r3, [r4, #4]
 8009608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800960a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800960c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800960e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009610:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009612:	6803      	ldr	r3, [r0, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	6003      	str	r3, [r0, #0]
}
 8009618:	bc30      	pop	{r4, r5}
 800961a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800961c:	6904      	ldr	r4, [r0, #16]
 800961e:	e7f2      	b.n	8009606 <vListInsert+0x18>

08009620 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009620:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009622:	6841      	ldr	r1, [r0, #4]
 8009624:	6882      	ldr	r2, [r0, #8]
 8009626:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009628:	6841      	ldr	r1, [r0, #4]
 800962a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	4282      	cmp	r2, r0
 8009630:	d006      	beq.n	8009640 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009632:	2200      	movs	r2, #0
 8009634:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	3a01      	subs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800963c:	6818      	ldr	r0, [r3, #0]
}
 800963e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009640:	6882      	ldr	r2, [r0, #8]
 8009642:	605a      	str	r2, [r3, #4]
 8009644:	e7f5      	b.n	8009632 <uxListRemove+0x12>
	...

08009648 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009648:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <prvTaskExitError+0x3c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d008      	beq.n	800966a <prvTaskExitError+0x22>
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	e7fe      	b.n	8009668 <prvTaskExitError+0x20>
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0fc      	beq.n	800967a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009680:	b002      	add	sp, #8
 8009682:	4770      	bx	lr
 8009684:	2400004c 	.word	0x2400004c

08009688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <prvPortStartFirstTask+0x24>)
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	6800      	ldr	r0, [r0, #0]
 800968e:	f380 8808 	msr	MSP, r0
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f380 8814 	msr	CONTROL, r0
 800969a:	b662      	cpsie	i
 800969c:	b661      	cpsie	f
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	df00      	svc	0
 80096a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096aa:	0000      	.short	0x0000
 80096ac:	e000ed08 	.word	0xe000ed08

080096b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096c0 <vPortEnableVFP+0x10>
 80096b4:	6801      	ldr	r1, [r0, #0]
 80096b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096ba:	6001      	str	r1, [r0, #0]
 80096bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096be:	0000      	.short	0x0000
 80096c0:	e000ed88 	.word	0xe000ed88

080096c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096c8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096cc:	f021 0101 	bic.w	r1, r1, #1
 80096d0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <pxPortInitialiseStack+0x28>)
 80096d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096de:	f06f 0302 	mvn.w	r3, #2
 80096e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80096e6:	3844      	subs	r0, #68	; 0x44
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	08009649 	.word	0x08009649

080096f0 <SVC_Handler>:
	__asm volatile (
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <pxCurrentTCBConst2>)
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	f380 8809 	msr	PSP, r0
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	4770      	bx	lr
 800970c:	f3af 8000 	nop.w

08009710 <pxCurrentTCBConst2>:
 8009710:	2400abe8 	.word	0x2400abe8

08009714 <vPortEnterCritical>:
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009724:	4a0b      	ldr	r2, [pc, #44]	; (8009754 <vPortEnterCritical+0x40>)
 8009726:	6813      	ldr	r3, [r2, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800972c:	2b01      	cmp	r3, #1
 800972e:	d000      	beq.n	8009732 <vPortEnterCritical+0x1e>
}
 8009730:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009732:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009736:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800973a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800973e:	d0f7      	beq.n	8009730 <vPortEnterCritical+0x1c>
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	e7fe      	b.n	8009750 <vPortEnterCritical+0x3c>
 8009752:	bf00      	nop
 8009754:	2400004c 	.word	0x2400004c

08009758 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009758:	4b09      	ldr	r3, [pc, #36]	; (8009780 <vPortExitCritical+0x28>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	b943      	cbnz	r3, 8009770 <vPortExitCritical+0x18>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	e7fe      	b.n	800976e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009770:	3b01      	subs	r3, #1
 8009772:	4a03      	ldr	r2, [pc, #12]	; (8009780 <vPortExitCritical+0x28>)
 8009774:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009776:	b90b      	cbnz	r3, 800977c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009778:	f383 8811 	msr	BASEPRI, r3
}
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	2400004c 	.word	0x2400004c
	...

08009790 <PendSV_Handler>:
	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	f380 8811 	msr	BASEPRI, r0
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f001 f9f4 	bl	800abac <vTaskSwitchContext>
 80097c4:	f04f 0000 	mov.w	r0, #0
 80097c8:	f380 8811 	msr	BASEPRI, r0
 80097cc:	bc09      	pop	{r0, r3}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d6:	f01e 0f10 	tst.w	lr, #16
 80097da:	bf08      	it	eq
 80097dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e0:	f380 8809 	msr	PSP, r0
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst>:
 80097f0:	2400abe8 	.word	0x2400abe8

080097f4 <xPortSysTickHandler>:
{
 80097f4:	b508      	push	{r3, lr}
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009806:	f001 f8c9 	bl	800a99c <xTaskIncrementTick>
 800980a:	b128      	cbz	r0, 8009818 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009814:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009818:	2300      	movs	r3, #0
 800981a:	f383 8811 	msr	BASEPRI, r3
}
 800981e:	bd08      	pop	{r3, pc}

08009820 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009820:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009824:	2300      	movs	r3, #0
 8009826:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009828:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <vPortSetupTimerInterrupt+0x20>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4905      	ldr	r1, [pc, #20]	; (8009844 <vPortSetupTimerInterrupt+0x24>)
 8009830:	fba1 1303 	umull	r1, r3, r1, r3
 8009834:	099b      	lsrs	r3, r3, #6
 8009836:	3b01      	subs	r3, #1
 8009838:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800983a:	2307      	movs	r3, #7
 800983c:	6113      	str	r3, [r2, #16]
}
 800983e:	4770      	bx	lr
 8009840:	2400003c 	.word	0x2400003c
 8009844:	10624dd3 	.word	0x10624dd3

08009848 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800984c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8009850:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <xPortStartScheduler+0x100>)
 8009852:	429a      	cmp	r2, r3
 8009854:	d01c      	beq.n	8009890 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009856:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800985a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800985e:	4b3b      	ldr	r3, [pc, #236]	; (800994c <xPortStartScheduler+0x104>)
 8009860:	429a      	cmp	r2, r3
 8009862:	d01e      	beq.n	80098a2 <xPortStartScheduler+0x5a>
{
 8009864:	b530      	push	{r4, r5, lr}
 8009866:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009868:	4b39      	ldr	r3, [pc, #228]	; (8009950 <xPortStartScheduler+0x108>)
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800987c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009884:	4a33      	ldr	r2, [pc, #204]	; (8009954 <xPortStartScheduler+0x10c>)
 8009886:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009888:	4b33      	ldr	r3, [pc, #204]	; (8009958 <xPortStartScheduler+0x110>)
 800988a:	2207      	movs	r2, #7
 800988c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800988e:	e01b      	b.n	80098c8 <xPortStartScheduler+0x80>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a0:	e7fe      	b.n	80098a0 <xPortStartScheduler+0x58>
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b2:	e7fe      	b.n	80098b2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 80098b4:	4a28      	ldr	r2, [pc, #160]	; (8009958 <xPortStartScheduler+0x110>)
 80098b6:	6813      	ldr	r3, [r2, #0]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80098cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098d0:	d1f0      	bne.n	80098b4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098d2:	4b21      	ldr	r3, [pc, #132]	; (8009958 <xPortStartScheduler+0x110>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d008      	beq.n	80098ec <xPortStartScheduler+0xa4>
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	e7fe      	b.n	80098ea <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	4a1a      	ldr	r2, [pc, #104]	; (8009958 <xPortStartScheduler+0x110>)
 80098f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098f6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4a14      	ldr	r2, [pc, #80]	; (8009950 <xPortStartScheduler+0x108>)
 80098fe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009900:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8009904:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800990c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009910:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009914:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009918:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800991c:	f7ff ff80 	bl	8009820 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009920:	2500      	movs	r5, #0
 8009922:	4b0e      	ldr	r3, [pc, #56]	; (800995c <xPortStartScheduler+0x114>)
 8009924:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009926:	f7ff fec3 	bl	80096b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800992a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800992e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009932:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009936:	f7ff fea7 	bl	8009688 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800993a:	f001 f937 	bl	800abac <vTaskSwitchContext>
	prvTaskExitError();
 800993e:	f7ff fe83 	bl	8009648 <prvTaskExitError>
}
 8009942:	4628      	mov	r0, r5
 8009944:	b003      	add	sp, #12
 8009946:	bd30      	pop	{r4, r5, pc}
 8009948:	410fc271 	.word	0x410fc271
 800994c:	410fc270 	.word	0x410fc270
 8009950:	e000e400 	.word	0xe000e400
 8009954:	2400aba0 	.word	0x2400aba0
 8009958:	2400aba4 	.word	0x2400aba4
 800995c:	2400004c 	.word	0x2400004c

08009960 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009960:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009964:	2b0f      	cmp	r3, #15
 8009966:	d90f      	bls.n	8009988 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009968:	4a11      	ldr	r2, [pc, #68]	; (80099b0 <vPortValidateInterruptPriority+0x50>)
 800996a:	5c9b      	ldrb	r3, [r3, r2]
 800996c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800996e:	4a11      	ldr	r2, [pc, #68]	; (80099b4 <vPortValidateInterruptPriority+0x54>)
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	d908      	bls.n	8009988 <vPortValidateInterruptPriority+0x28>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	e7fe      	b.n	8009986 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009988:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800998c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009994:	4a08      	ldr	r2, [pc, #32]	; (80099b8 <vPortValidateInterruptPriority+0x58>)
 8009996:	6812      	ldr	r2, [r2, #0]
 8009998:	4293      	cmp	r3, r2
 800999a:	d908      	bls.n	80099ae <vPortValidateInterruptPriority+0x4e>
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	e7fe      	b.n	80099ac <vPortValidateInterruptPriority+0x4c>
	}
 80099ae:	4770      	bx	lr
 80099b0:	e000e3f0 	.word	0xe000e3f0
 80099b4:	2400aba0 	.word	0x2400aba0
 80099b8:	2400aba4 	.word	0x2400aba4

080099bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099bc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80099c0:	b118      	cbz	r0, 80099ca <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80099ca:	4770      	bx	lr

080099cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099d0:	f7ff fea0 	bl	8009714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80099d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099d8:	429a      	cmp	r2, r3
 80099da:	d004      	beq.n	80099e6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80099dc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80099de:	f7ff febb 	bl	8009758 <vPortExitCritical>

	return xReturn;
}
 80099e2:	4620      	mov	r0, r4
 80099e4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80099e6:	2401      	movs	r4, #1
 80099e8:	e7f9      	b.n	80099de <prvIsQueueFull+0x12>

080099ea <prvIsQueueEmpty>:
{
 80099ea:	b510      	push	{r4, lr}
 80099ec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80099ee:	f7ff fe91 	bl	8009714 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099f4:	b923      	cbnz	r3, 8009a00 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80099f6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80099f8:	f7ff feae 	bl	8009758 <vPortExitCritical>
}
 80099fc:	4620      	mov	r0, r4
 80099fe:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8009a00:	2400      	movs	r4, #0
 8009a02:	e7f9      	b.n	80099f8 <prvIsQueueEmpty+0xe>

08009a04 <prvCopyDataToQueue>:
{
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a0a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009a0e:	b95a      	cbnz	r2, 8009a28 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a10:	6803      	ldr	r3, [r0, #0]
 8009a12:	b11b      	cbz	r3, 8009a1c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009a14:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a16:	3601      	adds	r6, #1
 8009a18:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a1c:	6880      	ldr	r0, [r0, #8]
 8009a1e:	f001 fa3f 	bl	800aea0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	e7f6      	b.n	8009a16 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009a28:	b96d      	cbnz	r5, 8009a46 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a2a:	6840      	ldr	r0, [r0, #4]
 8009a2c:	f00f f932 	bl	8018c94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	4413      	add	r3, r2
 8009a36:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a38:	68a2      	ldr	r2, [r4, #8]
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d319      	bcc.n	8009a72 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009a42:	4628      	mov	r0, r5
 8009a44:	e7e7      	b.n	8009a16 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a46:	68c0      	ldr	r0, [r0, #12]
 8009a48:	f00f f924 	bl	8018c94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a4c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009a4e:	4251      	negs	r1, r2
 8009a50:	68e3      	ldr	r3, [r4, #12]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d202      	bcs.n	8009a62 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	440b      	add	r3, r1
 8009a60:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009a62:	2d02      	cmp	r5, #2
 8009a64:	d001      	beq.n	8009a6a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009a66:	2000      	movs	r0, #0
 8009a68:	e7d5      	b.n	8009a16 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a6a:	b126      	cbz	r6, 8009a76 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009a6c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e7d1      	b.n	8009a16 <prvCopyDataToQueue+0x12>
 8009a72:	4628      	mov	r0, r5
 8009a74:	e7cf      	b.n	8009a16 <prvCopyDataToQueue+0x12>
 8009a76:	2000      	movs	r0, #0
 8009a78:	e7cd      	b.n	8009a16 <prvCopyDataToQueue+0x12>

08009a7a <prvCopyDataFromQueue>:
{
 8009a7a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009a7e:	b16a      	cbz	r2, 8009a9c <prvCopyDataFromQueue+0x22>
{
 8009a80:	b510      	push	{r4, lr}
 8009a82:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a84:	68d9      	ldr	r1, [r3, #12]
 8009a86:	4411      	add	r1, r2
 8009a88:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a8a:	689c      	ldr	r4, [r3, #8]
 8009a8c:	42a1      	cmp	r1, r4
 8009a8e:	d301      	bcc.n	8009a94 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a90:	6819      	ldr	r1, [r3, #0]
 8009a92:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a94:	68d9      	ldr	r1, [r3, #12]
 8009a96:	f00f f8fd 	bl	8018c94 <memcpy>
}
 8009a9a:	bd10      	pop	{r4, pc}
 8009a9c:	4770      	bx	lr

08009a9e <prvUnlockQueue>:
{
 8009a9e:	b538      	push	{r3, r4, r5, lr}
 8009aa0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009aa2:	f7ff fe37 	bl	8009714 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009aa6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8009aaa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aac:	e001      	b.n	8009ab2 <prvUnlockQueue+0x14>
			--cTxLock;
 8009aae:	3c01      	subs	r4, #1
 8009ab0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ab2:	2c00      	cmp	r4, #0
 8009ab4:	dd0a      	ble.n	8009acc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab8:	b143      	cbz	r3, 8009acc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009abe:	f001 f8f9 	bl	800acb4 <xTaskRemoveFromEventList>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0f3      	beq.n	8009aae <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009ac6:	f001 f989 	bl	800addc <vTaskMissedYield>
 8009aca:	e7f0      	b.n	8009aae <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8009acc:	23ff      	movs	r3, #255	; 0xff
 8009ace:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009ad2:	f7ff fe41 	bl	8009758 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009ad6:	f7ff fe1d 	bl	8009714 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009ada:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8009ade:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ae0:	e001      	b.n	8009ae6 <prvUnlockQueue+0x48>
				--cRxLock;
 8009ae2:	3c01      	subs	r4, #1
 8009ae4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	dd0a      	ble.n	8009b00 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aea:	692b      	ldr	r3, [r5, #16]
 8009aec:	b143      	cbz	r3, 8009b00 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aee:	f105 0010 	add.w	r0, r5, #16
 8009af2:	f001 f8df 	bl	800acb4 <xTaskRemoveFromEventList>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d0f3      	beq.n	8009ae2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8009afa:	f001 f96f 	bl	800addc <vTaskMissedYield>
 8009afe:	e7f0      	b.n	8009ae2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009b00:	23ff      	movs	r3, #255	; 0xff
 8009b02:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009b06:	f7ff fe27 	bl	8009758 <vPortExitCritical>
}
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}

08009b0c <xQueueGenericReset>:
{
 8009b0c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009b0e:	b1e0      	cbz	r0, 8009b4a <xQueueGenericReset+0x3e>
 8009b10:	460d      	mov	r5, r1
 8009b12:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009b14:	f7ff fdfe 	bl	8009714 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009b1c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b1e:	fb01 3002 	mla	r0, r1, r2, r3
 8009b22:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b24:	2000      	movs	r0, #0
 8009b26:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b28:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	fb02 3301 	mla	r3, r2, r1, r3
 8009b30:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b32:	23ff      	movs	r3, #255	; 0xff
 8009b34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009b3c:	b9fd      	cbnz	r5, 8009b7e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	b963      	cbnz	r3, 8009b5c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009b42:	f7ff fe09 	bl	8009758 <vPortExitCritical>
}
 8009b46:	2001      	movs	r0, #1
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009b5a:	e7fe      	b.n	8009b5a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b5c:	f104 0010 	add.w	r0, r4, #16
 8009b60:	f001 f8a8 	bl	800acb4 <xTaskRemoveFromEventList>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d0ec      	beq.n	8009b42 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009b68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b70:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	e7e1      	b.n	8009b42 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b7e:	f104 0010 	add.w	r0, r4, #16
 8009b82:	f7ff fd1b 	bl	80095bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b8a:	f7ff fd17 	bl	80095bc <vListInitialise>
 8009b8e:	e7d8      	b.n	8009b42 <xQueueGenericReset+0x36>

08009b90 <prvInitialiseNewQueue>:
{
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	461d      	mov	r5, r3
 8009b94:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b96:	460b      	mov	r3, r1
 8009b98:	b949      	cbnz	r1, 8009bae <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b9a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8009b9c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b9e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f7ff ffb2 	bl	8009b0c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009ba8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bae:	6022      	str	r2, [r4, #0]
 8009bb0:	e7f4      	b.n	8009b9c <prvInitialiseNewQueue+0xc>

08009bb2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bb2:	b940      	cbnz	r0, 8009bc6 <xQueueGenericCreateStatic+0x14>
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueGenericCreateStatic+0x12>
	{
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 8009bcc:	b183      	cbz	r3, 8009bf0 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bce:	1e0b      	subs	r3, r1, #0
 8009bd0:	bf18      	it	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	bf08      	it	eq
 8009bd8:	f043 0301 	orreq.w	r3, r3, #1
 8009bdc:	b98b      	cbnz	r3, 8009c02 <xQueueGenericCreateStatic+0x50>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	e7fe      	b.n	8009bee <xQueueGenericCreateStatic+0x3c>
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009c00:	e7fe      	b.n	8009c00 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c02:	fab1 f381 	clz	r3, r1
 8009c06:	095b      	lsrs	r3, r3, #5
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	bf18      	it	ne
 8009c0c:	f043 0301 	orrne.w	r3, r3, #1
 8009c10:	b943      	cbnz	r3, 8009c24 <xQueueGenericCreateStatic+0x72>
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c24:	2350      	movs	r3, #80	; 0x50
 8009c26:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	2b50      	cmp	r3, #80	; 0x50
 8009c2c:	d008      	beq.n	8009c40 <xQueueGenericCreateStatic+0x8e>
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	e7fe      	b.n	8009c3e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c40:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c48:	9400      	str	r4, [sp, #0]
 8009c4a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009c4e:	f7ff ff9f 	bl	8009b90 <prvInitialiseNewQueue>
	}
 8009c52:	4620      	mov	r0, r4
 8009c54:	b004      	add	sp, #16
 8009c56:	bd10      	pop	{r4, pc}

08009c58 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c58:	b940      	cbnz	r0, 8009c6c <xQueueGenericCreate+0x14>
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	e7fe      	b.n	8009c6a <xQueueGenericCreate+0x12>
	{
 8009c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	460d      	mov	r5, r1
 8009c72:	4614      	mov	r4, r2
 8009c74:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c76:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c7a:	3050      	adds	r0, #80	; 0x50
 8009c7c:	f7ff fbe2 	bl	8009444 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009c80:	4607      	mov	r7, r0
 8009c82:	b150      	cbz	r0, 8009c9a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c8a:	9000      	str	r0, [sp, #0]
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8009c92:	4629      	mov	r1, r5
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff ff7b 	bl	8009b90 <prvInitialiseNewQueue>
	}
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	b003      	add	sp, #12
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ca0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8009ca0:	b940      	cbnz	r0, 8009cb4 <xQueueCreateCountingSemaphoreStatic+0x14>
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	e7fe      	b.n	8009cb2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	d208      	bcs.n	8009cd0 <xQueueCreateCountingSemaphoreStatic+0x30>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	e7fe      	b.n	8009cce <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4611      	mov	r1, r2
 8009cda:	f7ff ff6a 	bl	8009bb2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8009cde:	b100      	cbz	r0, 8009ce2 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ce0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009ce2:	b002      	add	sp, #8
 8009ce4:	bd10      	pop	{r4, pc}

08009ce6 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8009ce6:	b940      	cbnz	r0, 8009cfa <xQueueCreateCountingSemaphore+0x14>
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueCreateCountingSemaphore+0x12>
	{
 8009cfa:	b510      	push	{r4, lr}
 8009cfc:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8009cfe:	4288      	cmp	r0, r1
 8009d00:	d208      	bcs.n	8009d14 <xQueueCreateCountingSemaphore+0x2e>
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	e7fe      	b.n	8009d12 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d14:	2202      	movs	r2, #2
 8009d16:	2100      	movs	r1, #0
 8009d18:	f7ff ff9e 	bl	8009c58 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009d1c:	b100      	cbz	r0, 8009d20 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d1e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8009d20:	bd10      	pop	{r4, pc}

08009d22 <xQueueGenericSend>:
{
 8009d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d24:	b085      	sub	sp, #20
 8009d26:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009d28:	b188      	cbz	r0, 8009d4e <xQueueGenericSend+0x2c>
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d30:	b1b1      	cbz	r1, 8009d60 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d32:	2d02      	cmp	r5, #2
 8009d34:	d120      	bne.n	8009d78 <xQueueGenericSend+0x56>
 8009d36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d01d      	beq.n	8009d78 <xQueueGenericSend+0x56>
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	e7fe      	b.n	8009d4c <xQueueGenericSend+0x2a>
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009d5e:	e7fe      	b.n	8009d5e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d60:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0e5      	beq.n	8009d32 <xQueueGenericSend+0x10>
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	e7fe      	b.n	8009d76 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d78:	f001 f836 	bl	800ade8 <xTaskGetSchedulerState>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	b958      	cbnz	r0, 8009d98 <xQueueGenericSend+0x76>
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d048      	beq.n	8009e18 <xQueueGenericSend+0xf6>
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	e7fe      	b.n	8009d96 <xQueueGenericSend+0x74>
 8009d98:	2600      	movs	r6, #0
 8009d9a:	e03d      	b.n	8009e18 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7ff fe2f 	bl	8009a04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da8:	b97b      	cbnz	r3, 8009dca <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8009daa:	b148      	cbz	r0, 8009dc0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009dac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009dc0:	f7ff fcca 	bl	8009758 <vPortExitCritical>
				return pdPASS;
 8009dc4:	2001      	movs	r0, #1
}
 8009dc6:	b005      	add	sp, #20
 8009dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dce:	f000 ff71 	bl	800acb4 <xTaskRemoveFromEventList>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0f4      	beq.n	8009dc0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009dd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	e7e9      	b.n	8009dc0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009dec:	f7ff fcb4 	bl	8009758 <vPortExitCritical>
					return errQUEUE_FULL;
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7e8      	b.n	8009dc6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df4:	a802      	add	r0, sp, #8
 8009df6:	f000 ffa3 	bl	800ad40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfa:	2601      	movs	r6, #1
 8009dfc:	e019      	b.n	8009e32 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009e04:	e021      	b.n	8009e4a <xQueueGenericSend+0x128>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e0c:	e023      	b.n	8009e56 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff fe45 	bl	8009a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e14:	f000 fe4e 	bl	800aab4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009e18:	f7ff fc7c 	bl	8009714 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d3bb      	bcc.n	8009d9c <xQueueGenericSend+0x7a>
 8009e24:	2d02      	cmp	r5, #2
 8009e26:	d0b9      	beq.n	8009d9c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0de      	beq.n	8009dec <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	d0e0      	beq.n	8009df4 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009e32:	f7ff fc91 	bl	8009758 <vPortExitCritical>
		vTaskSuspendAll();
 8009e36:	f000 fda3 	bl	800a980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e3a:	f7ff fc6b 	bl	8009714 <vPortEnterCritical>
 8009e3e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009e42:	b252      	sxtb	r2, r2
 8009e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e48:	d0d9      	beq.n	8009dfe <xQueueGenericSend+0xdc>
 8009e4a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009e4e:	b252      	sxtb	r2, r2
 8009e50:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e54:	d0d7      	beq.n	8009e06 <xQueueGenericSend+0xe4>
 8009e56:	f7ff fc7f 	bl	8009758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e5a:	a901      	add	r1, sp, #4
 8009e5c:	a802      	add	r0, sp, #8
 8009e5e:	f000 ff7b 	bl	800ad58 <xTaskCheckForTimeOut>
 8009e62:	b9d8      	cbnz	r0, 8009e9c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7ff fdb1 	bl	80099cc <prvIsQueueFull>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d0cf      	beq.n	8009e0e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e6e:	9901      	ldr	r1, [sp, #4]
 8009e70:	f104 0010 	add.w	r0, r4, #16
 8009e74:	f000 feea 	bl	800ac4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7ff fe10 	bl	8009a9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e7e:	f000 fe19 	bl	800aab4 <xTaskResumeAll>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d1c8      	bne.n	8009e18 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009e86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	e7bd      	b.n	8009e18 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7ff fdfe 	bl	8009a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ea2:	f000 fe07 	bl	800aab4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e78d      	b.n	8009dc6 <xQueueGenericSend+0xa4>

08009eaa <xQueueGenericSendFromISR>:
{
 8009eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009eae:	b190      	cbz	r0, 8009ed6 <xQueueGenericSendFromISR+0x2c>
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	461c      	mov	r4, r3
 8009eb6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eb8:	b1b1      	cbz	r1, 8009ee8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009eba:	2c02      	cmp	r4, #2
 8009ebc:	d120      	bne.n	8009f00 <xQueueGenericSendFromISR+0x56>
 8009ebe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d01d      	beq.n	8009f00 <xQueueGenericSendFromISR+0x56>
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	e7fe      	b.n	8009ed4 <xQueueGenericSendFromISR+0x2a>
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009ee6:	e7fe      	b.n	8009ee6 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0e5      	beq.n	8009eba <xQueueGenericSendFromISR+0x10>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	e7fe      	b.n	8009efe <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f00:	f7ff fd2e 	bl	8009960 <vPortValidateInterruptPriority>
	__asm volatile
 8009f04:	f3ef 8911 	mrs	r9, BASEPRI
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f18:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009f1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d306      	bcc.n	8009f2e <xQueueGenericSendFromISR+0x84>
 8009f20:	2c02      	cmp	r4, #2
 8009f22:	d004      	beq.n	8009f2e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009f24:	2000      	movs	r0, #0
	__asm volatile
 8009f26:	f389 8811 	msr	BASEPRI, r9
}
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f2e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8009f32:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f36:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f7ff fd61 	bl	8009a04 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009f42:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009f46:	d006      	beq.n	8009f56 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f48:	f108 0301 	add.w	r3, r8, #1
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009f52:	2001      	movs	r0, #1
 8009f54:	e7e7      	b.n	8009f26 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f58:	b90b      	cbnz	r3, 8009f5e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	e7e3      	b.n	8009f26 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f5e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009f62:	f000 fea7 	bl	800acb4 <xTaskRemoveFromEventList>
 8009f66:	b118      	cbz	r0, 8009f70 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8009f68:	b126      	cbz	r6, 8009f74 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	6030      	str	r0, [r6, #0]
 8009f6e:	e7da      	b.n	8009f26 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009f70:	2001      	movs	r0, #1
 8009f72:	e7d8      	b.n	8009f26 <xQueueGenericSendFromISR+0x7c>
 8009f74:	2001      	movs	r0, #1
 8009f76:	e7d6      	b.n	8009f26 <xQueueGenericSendFromISR+0x7c>

08009f78 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8009f78:	b168      	cbz	r0, 8009f96 <xQueueGiveFromISR+0x1e>
{
 8009f7a:	b570      	push	{r4, r5, r6, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f82:	b18b      	cbz	r3, 8009fa8 <xQueueGiveFromISR+0x30>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	e7fe      	b.n	8009f94 <xQueueGiveFromISR+0x1c>
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009fa6:	e7fe      	b.n	8009fa6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fa8:	6803      	ldr	r3, [r0, #0]
 8009faa:	b1eb      	cbz	r3, 8009fe8 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fac:	f7ff fcd8 	bl	8009960 <vPortValidateInterruptPriority>
	__asm volatile
 8009fb0:	f3ef 8611 	mrs	r6, BASEPRI
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fc4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009fc6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d926      	bls.n	800a01a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fcc:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8009fd0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d011      	beq.n	800a000 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fdc:	3301      	adds	r3, #1
 8009fde:	b25b      	sxtb	r3, r3
 8009fe0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e019      	b.n	800a01c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fe8:	6883      	ldr	r3, [r0, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0de      	beq.n	8009fac <xQueueGiveFromISR+0x34>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	e7fe      	b.n	8009ffe <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a000:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a002:	b90b      	cbnz	r3, 800a008 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800a004:	2001      	movs	r0, #1
 800a006:	e009      	b.n	800a01c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a008:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a00c:	f000 fe52 	bl	800acb4 <xTaskRemoveFromEventList>
 800a010:	b138      	cbz	r0, 800a022 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800a012:	b144      	cbz	r4, 800a026 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a014:	2001      	movs	r0, #1
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	e000      	b.n	800a01c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800a01a:	2000      	movs	r0, #0
	__asm volatile
 800a01c:	f386 8811 	msr	BASEPRI, r6
}
 800a020:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800a022:	2001      	movs	r0, #1
 800a024:	e7fa      	b.n	800a01c <xQueueGiveFromISR+0xa4>
 800a026:	2001      	movs	r0, #1
 800a028:	e7f8      	b.n	800a01c <xQueueGiveFromISR+0xa4>

0800a02a <xQueueReceive>:
{
 800a02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02c:	b085      	sub	sp, #20
 800a02e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a030:	b190      	cbz	r0, 800a058 <xQueueReceive+0x2e>
 800a032:	460f      	mov	r7, r1
 800a034:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a036:	b1c1      	cbz	r1, 800a06a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a038:	f000 fed6 	bl	800ade8 <xTaskGetSchedulerState>
 800a03c:	4606      	mov	r6, r0
 800a03e:	bb00      	cbnz	r0, 800a082 <xQueueReceive+0x58>
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d05e      	beq.n	800a104 <xQueueReceive+0xda>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	e7fe      	b.n	800a056 <xQueueReceive+0x2c>
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a068:	e7fe      	b.n	800a068 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a06a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0e3      	beq.n	800a038 <xQueueReceive+0xe>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	e7fe      	b.n	800a080 <xQueueReceive+0x56>
 800a082:	2600      	movs	r6, #0
 800a084:	e03e      	b.n	800a104 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a086:	4639      	mov	r1, r7
 800a088:	4620      	mov	r0, r4
 800a08a:	f7ff fcf6 	bl	8009a7a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a08e:	3d01      	subs	r5, #1
 800a090:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	b923      	cbnz	r3, 800a0a0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800a096:	f7ff fb5f 	bl	8009758 <vPortExitCritical>
				return pdPASS;
 800a09a:	2001      	movs	r0, #1
}
 800a09c:	b005      	add	sp, #20
 800a09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a0:	f104 0010 	add.w	r0, r4, #16
 800a0a4:	f000 fe06 	bl	800acb4 <xTaskRemoveFromEventList>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0f4      	beq.n	800a096 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800a0ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	e7e9      	b.n	800a096 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800a0c2:	f7ff fb49 	bl	8009758 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e7e8      	b.n	800a09c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ca:	a802      	add	r0, sp, #8
 800a0cc:	f000 fe38 	bl	800ad40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0d0:	2601      	movs	r6, #1
 800a0d2:	e021      	b.n	800a118 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a0da:	e029      	b.n	800a130 <xQueueReceive+0x106>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0e2:	e02b      	b.n	800a13c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f7ff fcda 	bl	8009a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0ea:	f000 fce3 	bl	800aab4 <xTaskResumeAll>
 800a0ee:	e009      	b.n	800a104 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff fcd4 	bl	8009a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0f6:	f000 fcdd 	bl	800aab4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff fc75 	bl	80099ea <prvIsQueueEmpty>
 800a100:	2800      	cmp	r0, #0
 800a102:	d13f      	bne.n	800a184 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800a104:	f7ff fb06 	bl	8009714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a108:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	d1bb      	bne.n	800a086 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0d6      	beq.n	800a0c2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800a114:	2e00      	cmp	r6, #0
 800a116:	d0d8      	beq.n	800a0ca <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800a118:	f7ff fb1e 	bl	8009758 <vPortExitCritical>
		vTaskSuspendAll();
 800a11c:	f000 fc30 	bl	800a980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a120:	f7ff faf8 	bl	8009714 <vPortEnterCritical>
 800a124:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a128:	b25b      	sxtb	r3, r3
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d0d1      	beq.n	800a0d4 <xQueueReceive+0xaa>
 800a130:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a134:	b25b      	sxtb	r3, r3
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d0cf      	beq.n	800a0dc <xQueueReceive+0xb2>
 800a13c:	f7ff fb0c 	bl	8009758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a140:	a901      	add	r1, sp, #4
 800a142:	a802      	add	r0, sp, #8
 800a144:	f000 fe08 	bl	800ad58 <xTaskCheckForTimeOut>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d1d1      	bne.n	800a0f0 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7ff fc4c 	bl	80099ea <prvIsQueueEmpty>
 800a152:	2800      	cmp	r0, #0
 800a154:	d0c6      	beq.n	800a0e4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a156:	9901      	ldr	r1, [sp, #4]
 800a158:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a15c:	f000 fd76 	bl	800ac4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a160:	4620      	mov	r0, r4
 800a162:	f7ff fc9c 	bl	8009a9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a166:	f000 fca5 	bl	800aab4 <xTaskResumeAll>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1ca      	bne.n	800a104 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800a16e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a176:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	e7bf      	b.n	800a104 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800a184:	2000      	movs	r0, #0
 800a186:	e789      	b.n	800a09c <xQueueReceive+0x72>

0800a188 <xQueueSemaphoreTake>:
{
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a18e:	b158      	cbz	r0, 800a1a8 <xQueueSemaphoreTake+0x20>
 800a190:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a192:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a194:	b18b      	cbz	r3, 800a1ba <xQueueSemaphoreTake+0x32>
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	e7fe      	b.n	800a1a6 <xQueueSemaphoreTake+0x1e>
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a1b8:	e7fe      	b.n	800a1b8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ba:	f000 fe15 	bl	800ade8 <xTaskGetSchedulerState>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b950      	cbnz	r0, 800a1d8 <xQueueSemaphoreTake+0x50>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	b15b      	cbz	r3, 800a1de <xQueueSemaphoreTake+0x56>
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	e7fe      	b.n	800a1d6 <xQueueSemaphoreTake+0x4e>
 800a1d8:	2600      	movs	r6, #0
 800a1da:	4635      	mov	r5, r6
 800a1dc:	e055      	b.n	800a28a <xQueueSemaphoreTake+0x102>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	e053      	b.n	800a28a <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	b13b      	cbz	r3, 800a1fa <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	b94b      	cbnz	r3, 800a202 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800a1ee:	f7ff fab3 	bl	8009758 <vPortExitCritical>
				return pdPASS;
 800a1f2:	2601      	movs	r6, #1
}
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	b004      	add	sp, #16
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1fa:	f000 fee9 	bl	800afd0 <pvTaskIncrementMutexHeldCount>
 800a1fe:	60a0      	str	r0, [r4, #8]
 800a200:	e7f3      	b.n	800a1ea <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a202:	f104 0010 	add.w	r0, r4, #16
 800a206:	f000 fd55 	bl	800acb4 <xTaskRemoveFromEventList>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d0ef      	beq.n	800a1ee <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800a20e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a216:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	e7e4      	b.n	800a1ee <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a224:	b146      	cbz	r6, 800a238 <xQueueSemaphoreTake+0xb0>
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	e7fe      	b.n	800a236 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800a238:	f7ff fa8e 	bl	8009758 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a23c:	e7da      	b.n	800a1f4 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a23e:	a802      	add	r0, sp, #8
 800a240:	f000 fd7e 	bl	800ad40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a244:	2501      	movs	r5, #1
 800a246:	e02a      	b.n	800a29e <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800a248:	2300      	movs	r3, #0
 800a24a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a24e:	e032      	b.n	800a2b6 <xQueueSemaphoreTake+0x12e>
 800a250:	2300      	movs	r3, #0
 800a252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a256:	e034      	b.n	800a2c2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800a258:	f7ff fa5c 	bl	8009714 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a25c:	68a0      	ldr	r0, [r4, #8]
 800a25e:	f000 fdd3 	bl	800ae08 <xTaskPriorityInherit>
 800a262:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800a264:	f7ff fa78 	bl	8009758 <vPortExitCritical>
 800a268:	e03b      	b.n	800a2e2 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800a26a:	4620      	mov	r0, r4
 800a26c:	f7ff fc17 	bl	8009a9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a270:	f000 fc20 	bl	800aab4 <xTaskResumeAll>
 800a274:	e009      	b.n	800a28a <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800a276:	4620      	mov	r0, r4
 800a278:	f7ff fc11 	bl	8009a9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a27c:	f000 fc1a 	bl	800aab4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a280:	4620      	mov	r0, r4
 800a282:	f7ff fbb2 	bl	80099ea <prvIsQueueEmpty>
 800a286:	2800      	cmp	r0, #0
 800a288:	d142      	bne.n	800a310 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800a28a:	f7ff fa43 	bl	8009714 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a28e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1a6      	bne.n	800a1e2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a294:	9b01      	ldr	r3, [sp, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0c4      	beq.n	800a224 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	d0cf      	beq.n	800a23e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800a29e:	f7ff fa5b 	bl	8009758 <vPortExitCritical>
		vTaskSuspendAll();
 800a2a2:	f000 fb6d 	bl	800a980 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2a6:	f7ff fa35 	bl	8009714 <vPortEnterCritical>
 800a2aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a2ae:	b25b      	sxtb	r3, r3
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d0c8      	beq.n	800a248 <xQueueSemaphoreTake+0xc0>
 800a2b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a2ba:	b25b      	sxtb	r3, r3
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d0c6      	beq.n	800a250 <xQueueSemaphoreTake+0xc8>
 800a2c2:	f7ff fa49 	bl	8009758 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2c6:	a901      	add	r1, sp, #4
 800a2c8:	a802      	add	r0, sp, #8
 800a2ca:	f000 fd45 	bl	800ad58 <xTaskCheckForTimeOut>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d1d1      	bne.n	800a276 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff fb89 	bl	80099ea <prvIsQueueEmpty>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0c6      	beq.n	800a26a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0ba      	beq.n	800a258 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2e2:	9901      	ldr	r1, [sp, #4]
 800a2e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2e8:	f000 fcb0 	bl	800ac4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f7ff fbd6 	bl	8009a9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2f2:	f000 fbdf 	bl	800aab4 <xTaskResumeAll>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d1c7      	bne.n	800a28a <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800a2fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	e7bc      	b.n	800a28a <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800a310:	b90e      	cbnz	r6, 800a316 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800a312:	2600      	movs	r6, #0
 800a314:	e76e      	b.n	800a1f4 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800a316:	f7ff f9fd 	bl	8009714 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff fb4e 	bl	80099bc <prvGetDisinheritPriorityAfterTimeout>
 800a320:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a322:	68a0      	ldr	r0, [r4, #8]
 800a324:	f000 fe04 	bl	800af30 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a328:	f7ff fa16 	bl	8009758 <vPortExitCritical>
 800a32c:	e7f1      	b.n	800a312 <xQueueSemaphoreTake+0x18a>

0800a32e <xQueueReceiveFromISR>:
{
 800a32e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a332:	b1b0      	cbz	r0, 800a362 <xQueueReceiveFromISR+0x34>
 800a334:	460d      	mov	r5, r1
 800a336:	4616      	mov	r6, r2
 800a338:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a33a:	b1d9      	cbz	r1, 800a374 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a33c:	f7ff fb10 	bl	8009960 <vPortValidateInterruptPriority>
	__asm volatile
 800a340:	f3ef 8811 	mrs	r8, BASEPRI
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a354:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a356:	b9cf      	cbnz	r7, 800a38c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800a358:	2000      	movs	r0, #0
	__asm volatile
 800a35a:	f388 8811 	msr	BASEPRI, r8
}
 800a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a372:	e7fe      	b.n	800a372 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a374:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0e0      	beq.n	800a33c <xQueueReceiveFromISR+0xe>
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	e7fe      	b.n	800a38a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a38c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800a390:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a394:	4629      	mov	r1, r5
 800a396:	4620      	mov	r0, r4
 800a398:	f7ff fb6f 	bl	8009a7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a39c:	3f01      	subs	r7, #1
 800a39e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a3a0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a3a4:	d006      	beq.n	800a3b4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a3a6:	f109 0301 	add.w	r3, r9, #1
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	e7d2      	b.n	800a35a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	b90b      	cbnz	r3, 800a3bc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	e7ce      	b.n	800a35a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3bc:	f104 0010 	add.w	r0, r4, #16
 800a3c0:	f000 fc78 	bl	800acb4 <xTaskRemoveFromEventList>
 800a3c4:	b118      	cbz	r0, 800a3ce <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800a3c6:	b126      	cbz	r6, 800a3d2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	6030      	str	r0, [r6, #0]
 800a3cc:	e7c5      	b.n	800a35a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	e7c3      	b.n	800a35a <xQueueReceiveFromISR+0x2c>
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7c1      	b.n	800a35a <xQueueReceiveFromISR+0x2c>
	...

0800a3d8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2b07      	cmp	r3, #7
 800a3dc:	d80c      	bhi.n	800a3f8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3de:	4a07      	ldr	r2, [pc, #28]	; (800a3fc <vQueueAddToRegistry+0x24>)
 800a3e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3e4:	b10a      	cbz	r2, 800a3ea <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	e7f7      	b.n	800a3da <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3ea:	4a04      	ldr	r2, [pc, #16]	; (800a3fc <vQueueAddToRegistry+0x24>)
 800a3ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3f4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3f6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	2400aba8 	.word	0x2400aba8

0800a400 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a400:	2300      	movs	r3, #0
 800a402:	2b07      	cmp	r3, #7
 800a404:	d80f      	bhi.n	800a426 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a406:	4a08      	ldr	r2, [pc, #32]	; (800a428 <vQueueUnregisterQueue+0x28>)
 800a408:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a40c:	6852      	ldr	r2, [r2, #4]
 800a40e:	4282      	cmp	r2, r0
 800a410:	d001      	beq.n	800a416 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a412:	3301      	adds	r3, #1
 800a414:	e7f5      	b.n	800a402 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a416:	4a04      	ldr	r2, [pc, #16]	; (800a428 <vQueueUnregisterQueue+0x28>)
 800a418:	2100      	movs	r1, #0
 800a41a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a41e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a422:	6059      	str	r1, [r3, #4]
				break;
 800a424:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a426:	4770      	bx	lr
 800a428:	2400aba8 	.word	0x2400aba8

0800a42c <vQueueDelete>:
	configASSERT( pxQueue );
 800a42c:	b138      	cbz	r0, 800a43e <vQueueDelete+0x12>
{
 800a42e:	b510      	push	{r4, lr}
 800a430:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800a432:	f7ff ffe5 	bl	800a400 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a436:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a43a:	b14b      	cbz	r3, 800a450 <vQueueDelete+0x24>
}
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a44e:	e7fe      	b.n	800a44e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800a450:	4620      	mov	r0, r4
 800a452:	f7ff f875 	bl	8009540 <vPortFree>
}
 800a456:	e7f1      	b.n	800a43c <vQueueDelete+0x10>

0800a458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	4604      	mov	r4, r0
 800a45c:	460d      	mov	r5, r1
 800a45e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a460:	f7ff f958 	bl	8009714 <vPortEnterCritical>
 800a464:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d00d      	beq.n	800a48c <vQueueWaitForMessageRestricted+0x34>
 800a470:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a474:	b25b      	sxtb	r3, r3
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d00b      	beq.n	800a494 <vQueueWaitForMessageRestricted+0x3c>
 800a47c:	f7ff f96c 	bl	8009758 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a482:	b15b      	cbz	r3, 800a49c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a484:	4620      	mov	r0, r4
 800a486:	f7ff fb0a 	bl	8009a9e <prvUnlockQueue>
	}
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a48c:	2300      	movs	r3, #0
 800a48e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a492:	e7ed      	b.n	800a470 <vQueueWaitForMessageRestricted+0x18>
 800a494:	2300      	movs	r3, #0
 800a496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a49a:	e7ef      	b.n	800a47c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a49c:	4632      	mov	r2, r6
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a4a4:	f000 fbea 	bl	800ac7c <vTaskPlaceOnEventListRestricted>
 800a4a8:	e7ec      	b.n	800a484 <vQueueWaitForMessageRestricted+0x2c>
	...

0800a4ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <prvResetNextTaskUnblockTime+0x24>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	b923      	cbnz	r3, 800a4be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <prvResetNextTaskUnblockTime+0x28>)
 800a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <prvResetNextTaskUnblockTime+0x24>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	4b02      	ldr	r3, [pc, #8]	; (800a4d4 <prvResetNextTaskUnblockTime+0x28>)
 800a4ca:	601a      	str	r2, [r3, #0]
	}
}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2400abec 	.word	0x2400abec
 800a4d4:	2400b094 	.word	0x2400b094

0800a4d8 <prvInitialiseNewTask>:
{
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	4680      	mov	r8, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	4617      	mov	r7, r2
 800a4e2:	4699      	mov	r9, r3
 800a4e4:	9e08      	ldr	r6, [sp, #32]
 800a4e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a4ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4ec:	0092      	lsls	r2, r2, #2
 800a4ee:	21a5      	movs	r1, #165	; 0xa5
 800a4f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a4f2:	f00e fbdd 	bl	8018cb0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4f8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800a4fc:	443a      	add	r2, r7
 800a4fe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a502:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800a506:	2d00      	cmp	r5, #0
 800a508:	d043      	beq.n	800a592 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a50a:	f04f 0c00 	mov.w	ip, #0
 800a50e:	f1bc 0f0f 	cmp.w	ip, #15
 800a512:	d80b      	bhi.n	800a52c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a514:	f815 200c 	ldrb.w	r2, [r5, ip]
 800a518:	eb04 030c 	add.w	r3, r4, ip
 800a51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800a520:	f815 300c 	ldrb.w	r3, [r5, ip]
 800a524:	b113      	cbz	r3, 800a52c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a526:	f10c 0c01 	add.w	ip, ip, #1
 800a52a:	e7f0      	b.n	800a50e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a52c:	2300      	movs	r3, #0
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a532:	2e37      	cmp	r6, #55	; 0x37
 800a534:	d900      	bls.n	800a538 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a536:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a538:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a53a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a53c:	2500      	movs	r5, #0
 800a53e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a540:	1d20      	adds	r0, r4, #4
 800a542:	f7ff f846 	bl	80095d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a546:	f104 0018 	add.w	r0, r4, #24
 800a54a:	f7ff f842 	bl	80095d2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a54e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a550:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800a554:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a556:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a558:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a55c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a560:	2260      	movs	r2, #96	; 0x60
 800a562:	4629      	mov	r1, r5
 800a564:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800a568:	f00e fba2 	bl	8018cb0 <memset>
 800a56c:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <prvInitialiseNewTask+0xc4>)
 800a56e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <prvInitialiseNewTask+0xc8>)
 800a572:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <prvInitialiseNewTask+0xcc>)
 800a576:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a578:	464a      	mov	r2, r9
 800a57a:	4641      	mov	r1, r8
 800a57c:	4638      	mov	r0, r7
 800a57e:	f7ff f8a1 	bl	80096c4 <pxPortInitialiseStack>
 800a582:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a584:	f1ba 0f00 	cmp.w	sl, #0
 800a588:	d001      	beq.n	800a58e <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a58a:	f8ca 4000 	str.w	r4, [sl]
}
 800a58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a598:	e7cb      	b.n	800a532 <prvInitialiseNewTask+0x5a>
 800a59a:	bf00      	nop
 800a59c:	0801b58c 	.word	0x0801b58c
 800a5a0:	0801b5ac 	.word	0x0801b5ac
 800a5a4:	0801b56c 	.word	0x0801b56c

0800a5a8 <prvInitialiseTaskLists>:
{
 800a5a8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5aa:	2400      	movs	r4, #0
 800a5ac:	e007      	b.n	800a5be <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5ae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a5b2:	0093      	lsls	r3, r2, #2
 800a5b4:	480e      	ldr	r0, [pc, #56]	; (800a5f0 <prvInitialiseTaskLists+0x48>)
 800a5b6:	4418      	add	r0, r3
 800a5b8:	f7ff f800 	bl	80095bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5bc:	3401      	adds	r4, #1
 800a5be:	2c37      	cmp	r4, #55	; 0x37
 800a5c0:	d9f5      	bls.n	800a5ae <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800a5c2:	4d0c      	ldr	r5, [pc, #48]	; (800a5f4 <prvInitialiseTaskLists+0x4c>)
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7fe fff9 	bl	80095bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5ca:	4c0b      	ldr	r4, [pc, #44]	; (800a5f8 <prvInitialiseTaskLists+0x50>)
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7fe fff5 	bl	80095bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5d2:	480a      	ldr	r0, [pc, #40]	; (800a5fc <prvInitialiseTaskLists+0x54>)
 800a5d4:	f7fe fff2 	bl	80095bc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800a5d8:	4809      	ldr	r0, [pc, #36]	; (800a600 <prvInitialiseTaskLists+0x58>)
 800a5da:	f7fe ffef 	bl	80095bc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800a5de:	4809      	ldr	r0, [pc, #36]	; (800a604 <prvInitialiseTaskLists+0x5c>)
 800a5e0:	f7fe ffec 	bl	80095bc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5e4:	4b08      	ldr	r3, [pc, #32]	; (800a608 <prvInitialiseTaskLists+0x60>)
 800a5e6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5e8:	4b08      	ldr	r3, [pc, #32]	; (800a60c <prvInitialiseTaskLists+0x64>)
 800a5ea:	601c      	str	r4, [r3, #0]
}
 800a5ec:	bd38      	pop	{r3, r4, r5, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2400abf4 	.word	0x2400abf4
 800a5f4:	2400b068 	.word	0x2400b068
 800a5f8:	2400b07c 	.word	0x2400b07c
 800a5fc:	2400b0a0 	.word	0x2400b0a0
 800a600:	2400b0cc 	.word	0x2400b0cc
 800a604:	2400b0b8 	.word	0x2400b0b8
 800a608:	2400abec 	.word	0x2400abec
 800a60c:	2400abf0 	.word	0x2400abf0

0800a610 <prvAddNewTaskToReadyList>:
{
 800a610:	b510      	push	{r4, lr}
 800a612:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a614:	f7ff f87e 	bl	8009714 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a618:	4a22      	ldr	r2, [pc, #136]	; (800a6a4 <prvAddNewTaskToReadyList+0x94>)
 800a61a:	6813      	ldr	r3, [r2, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a620:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <prvAddNewTaskToReadyList+0x98>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	b15b      	cbz	r3, 800a63e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a626:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <prvAddNewTaskToReadyList+0x9c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	b96b      	cbnz	r3, 800a648 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a62c:	4b1e      	ldr	r3, [pc, #120]	; (800a6a8 <prvAddNewTaskToReadyList+0x98>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a634:	429a      	cmp	r2, r3
 800a636:	d807      	bhi.n	800a648 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a638:	4b1b      	ldr	r3, [pc, #108]	; (800a6a8 <prvAddNewTaskToReadyList+0x98>)
 800a63a:	601c      	str	r4, [r3, #0]
 800a63c:	e004      	b.n	800a648 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a63e:	4b1a      	ldr	r3, [pc, #104]	; (800a6a8 <prvAddNewTaskToReadyList+0x98>)
 800a640:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d029      	beq.n	800a69c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800a648:	4a19      	ldr	r2, [pc, #100]	; (800a6b0 <prvAddNewTaskToReadyList+0xa0>)
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a650:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a654:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <prvAddNewTaskToReadyList+0xa4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4298      	cmp	r0, r3
 800a65a:	d901      	bls.n	800a660 <prvAddNewTaskToReadyList+0x50>
 800a65c:	4b15      	ldr	r3, [pc, #84]	; (800a6b4 <prvAddNewTaskToReadyList+0xa4>)
 800a65e:	6018      	str	r0, [r3, #0]
 800a660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a664:	1d21      	adds	r1, r4, #4
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <prvAddNewTaskToReadyList+0xa8>)
 800a668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a66c:	f7fe ffb4 	bl	80095d8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a670:	f7ff f872 	bl	8009758 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a674:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <prvAddNewTaskToReadyList+0x9c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	b17b      	cbz	r3, 800a69a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a67a:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <prvAddNewTaskToReadyList+0x98>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a682:	429a      	cmp	r2, r3
 800a684:	d209      	bcs.n	800a69a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800a686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
}
 800a69a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a69c:	f7ff ff84 	bl	800a5a8 <prvInitialiseTaskLists>
 800a6a0:	e7d2      	b.n	800a648 <prvAddNewTaskToReadyList+0x38>
 800a6a2:	bf00      	nop
 800a6a4:	2400b054 	.word	0x2400b054
 800a6a8:	2400abe8 	.word	0x2400abe8
 800a6ac:	2400b0b4 	.word	0x2400b0b4
 800a6b0:	2400b060 	.word	0x2400b060
 800a6b4:	2400b064 	.word	0x2400b064
 800a6b8:	2400abf4 	.word	0x2400abf4

0800a6bc <prvDeleteTCB>:
	{
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6c0:	3054      	adds	r0, #84	; 0x54
 800a6c2:	f00e fed9 	bl	8019478 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6c6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800a6ca:	b163      	cbz	r3, 800a6e6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d011      	beq.n	800a6f4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d00e      	beq.n	800a6f2 <prvDeleteTCB+0x36>
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	e7fe      	b.n	800a6e4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800a6e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a6e8:	f7fe ff2a 	bl	8009540 <vPortFree>
				vPortFree( pxTCB );
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7fe ff27 	bl	8009540 <vPortFree>
	}
 800a6f2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7fe ff23 	bl	8009540 <vPortFree>
 800a6fa:	e7fa      	b.n	800a6f2 <prvDeleteTCB+0x36>

0800a6fc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <prvCheckTasksWaitingTermination+0x40>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	b1d3      	cbz	r3, 800a738 <prvCheckTasksWaitingTermination+0x3c>
{
 800a702:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a704:	f7ff f806 	bl	8009714 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <prvCheckTasksWaitingTermination+0x44>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a70e:	1d20      	adds	r0, r4, #4
 800a710:	f7fe ff86 	bl	8009620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a714:	4a0b      	ldr	r2, [pc, #44]	; (800a744 <prvCheckTasksWaitingTermination+0x48>)
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	3b01      	subs	r3, #1
 800a71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a71c:	4a07      	ldr	r2, [pc, #28]	; (800a73c <prvCheckTasksWaitingTermination+0x40>)
 800a71e:	6813      	ldr	r3, [r2, #0]
 800a720:	3b01      	subs	r3, #1
 800a722:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a724:	f7ff f818 	bl	8009758 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a728:	4620      	mov	r0, r4
 800a72a:	f7ff ffc7 	bl	800a6bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a72e:	4b03      	ldr	r3, [pc, #12]	; (800a73c <prvCheckTasksWaitingTermination+0x40>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e6      	bne.n	800a704 <prvCheckTasksWaitingTermination+0x8>
}
 800a736:	bd10      	pop	{r4, pc}
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	2400b058 	.word	0x2400b058
 800a740:	2400b0cc 	.word	0x2400b0cc
 800a744:	2400b054 	.word	0x2400b054

0800a748 <prvIdleTask>:
{
 800a748:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800a74a:	f7ff ffd7 	bl	800a6fc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a74e:	4b07      	ldr	r3, [pc, #28]	; (800a76c <prvIdleTask+0x24>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d9f9      	bls.n	800a74a <prvIdleTask+0x2>
				taskYIELD();
 800a756:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	e7ee      	b.n	800a74a <prvIdleTask+0x2>
 800a76c:	2400abf4 	.word	0x2400abf4

0800a770 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	4604      	mov	r4, r0
 800a774:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a776:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x6c>)
 800a778:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a77a:	4b19      	ldr	r3, [pc, #100]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	3004      	adds	r0, #4
 800a780:	f7fe ff4e 	bl	8009620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a784:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a788:	bf14      	ite	ne
 800a78a:	2300      	movne	r3, #0
 800a78c:	2301      	moveq	r3, #1
 800a78e:	2d00      	cmp	r5, #0
 800a790:	bf08      	it	eq
 800a792:	2300      	moveq	r3, #0
 800a794:	b96b      	cbnz	r3, 800a7b2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a796:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a798:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a79e:	42a6      	cmp	r6, r4
 800a7a0:	d90e      	bls.n	800a7c0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a2:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0x74>)
 800a7a4:	6818      	ldr	r0, [r3, #0]
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a7a8:	6819      	ldr	r1, [r3, #0]
 800a7aa:	3104      	adds	r1, #4
 800a7ac:	f7fe ff1f 	bl	80095ee <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b2:	4b0b      	ldr	r3, [pc, #44]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a7b4:	6819      	ldr	r1, [r3, #0]
 800a7b6:	3104      	adds	r1, #4
 800a7b8:	480b      	ldr	r0, [pc, #44]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0x78>)
 800a7ba:	f7fe ff0d 	bl	80095d8 <vListInsertEnd>
 800a7be:	e7f7      	b.n	800a7b0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x7c>)
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x70>)
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	3104      	adds	r1, #4
 800a7ca:	f7fe ff10 	bl	80095ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x80>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	42a3      	cmp	r3, r4
 800a7d4:	d9ec      	bls.n	800a7b0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800a7d6:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x80>)
 800a7d8:	601c      	str	r4, [r3, #0]
}
 800a7da:	e7e9      	b.n	800a7b0 <prvAddCurrentTaskToDelayedList+0x40>
 800a7dc:	2400b0e0 	.word	0x2400b0e0
 800a7e0:	2400abe8 	.word	0x2400abe8
 800a7e4:	2400abf0 	.word	0x2400abf0
 800a7e8:	2400b0b8 	.word	0x2400b0b8
 800a7ec:	2400abec 	.word	0x2400abec
 800a7f0:	2400b094 	.word	0x2400b094

0800a7f4 <xTaskCreateStatic>:
	{
 800a7f4:	b530      	push	{r4, r5, lr}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a7fa:	b17c      	cbz	r4, 800a81c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7fe:	b1b5      	cbz	r5, 800a82e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a800:	25bc      	movs	r5, #188	; 0xbc
 800a802:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a804:	9d04      	ldr	r5, [sp, #16]
 800a806:	2dbc      	cmp	r5, #188	; 0xbc
 800a808:	d01a      	beq.n	800a840 <xTaskCreateStatic+0x4c>
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	e7fe      	b.n	800a81a <xTaskCreateStatic+0x26>
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a82c:	e7fe      	b.n	800a82c <xTaskCreateStatic+0x38>
 800a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a83e:	e7fe      	b.n	800a83e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a840:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a844:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a846:	2402      	movs	r4, #2
 800a848:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a84c:	2400      	movs	r4, #0
 800a84e:	9403      	str	r4, [sp, #12]
 800a850:	9502      	str	r5, [sp, #8]
 800a852:	ac05      	add	r4, sp, #20
 800a854:	9401      	str	r4, [sp, #4]
 800a856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a858:	9400      	str	r4, [sp, #0]
 800a85a:	f7ff fe3d 	bl	800a4d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a85e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a860:	f7ff fed6 	bl	800a610 <prvAddNewTaskToReadyList>
	}
 800a864:	9805      	ldr	r0, [sp, #20]
 800a866:	b007      	add	sp, #28
 800a868:	bd30      	pop	{r4, r5, pc}

0800a86a <xTaskCreate>:
	{
 800a86a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86e:	b085      	sub	sp, #20
 800a870:	4607      	mov	r7, r0
 800a872:	4688      	mov	r8, r1
 800a874:	4614      	mov	r4, r2
 800a876:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a878:	0090      	lsls	r0, r2, #2
 800a87a:	f7fe fde3 	bl	8009444 <pvPortMalloc>
			if( pxStack != NULL )
 800a87e:	b300      	cbz	r0, 800a8c2 <xTaskCreate+0x58>
 800a880:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a882:	20bc      	movs	r0, #188	; 0xbc
 800a884:	f7fe fdde 	bl	8009444 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a888:	4605      	mov	r5, r0
 800a88a:	b1b0      	cbz	r0, 800a8ba <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800a88c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800a890:	b1e5      	cbz	r5, 800a8cc <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a892:	2300      	movs	r3, #0
 800a894:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a898:	9303      	str	r3, [sp, #12]
 800a89a:	9502      	str	r5, [sp, #8]
 800a89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	4633      	mov	r3, r6
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f7ff fe14 	bl	800a4d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f7ff fead 	bl	800a610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e005      	b.n	800a8c6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800a8ba:	4648      	mov	r0, r9
 800a8bc:	f7fe fe40 	bl	8009540 <vPortFree>
 800a8c0:	e7e6      	b.n	800a890 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8c2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a8c6:	b005      	add	sp, #20
 800a8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a8d0:	e7f9      	b.n	800a8c6 <xTaskCreate+0x5c>
	...

0800a8d4 <vTaskStartScheduler>:
{
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8d8:	2400      	movs	r4, #0
 800a8da:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8dc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8de:	aa07      	add	r2, sp, #28
 800a8e0:	a906      	add	r1, sp, #24
 800a8e2:	a805      	add	r0, sp, #20
 800a8e4:	f7fe fd32 	bl	800934c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	9302      	str	r3, [sp, #8]
 800a8ec:	9b06      	ldr	r3, [sp, #24]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	9400      	str	r4, [sp, #0]
 800a8f2:	4623      	mov	r3, r4
 800a8f4:	9a07      	ldr	r2, [sp, #28]
 800a8f6:	491a      	ldr	r1, [pc, #104]	; (800a960 <vTaskStartScheduler+0x8c>)
 800a8f8:	481a      	ldr	r0, [pc, #104]	; (800a964 <vTaskStartScheduler+0x90>)
 800a8fa:	f7ff ff7b 	bl	800a7f4 <xTaskCreateStatic>
 800a8fe:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <vTaskStartScheduler+0x94>)
 800a900:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800a902:	b140      	cbz	r0, 800a916 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800a904:	f000 fbe2 	bl	800b0cc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a908:	2801      	cmp	r0, #1
 800a90a:	d006      	beq.n	800a91a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a90c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a910:	d01d      	beq.n	800a94e <vTaskStartScheduler+0x7a>
}
 800a912:	b008      	add	sp, #32
 800a914:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800a916:	2000      	movs	r0, #0
 800a918:	e7f6      	b.n	800a908 <vTaskStartScheduler+0x34>
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a92a:	4b10      	ldr	r3, [pc, #64]	; (800a96c <vTaskStartScheduler+0x98>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3354      	adds	r3, #84	; 0x54
 800a930:	4a0f      	ldr	r2, [pc, #60]	; (800a970 <vTaskStartScheduler+0x9c>)
 800a932:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800a934:	4b0f      	ldr	r3, [pc, #60]	; (800a974 <vTaskStartScheduler+0xa0>)
 800a936:	f04f 32ff 	mov.w	r2, #4294967295
 800a93a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a93c:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <vTaskStartScheduler+0xa4>)
 800a93e:	2201      	movs	r2, #1
 800a940:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a942:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <vTaskStartScheduler+0xa8>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a948:	f7fe ff7e 	bl	8009848 <xPortStartScheduler>
 800a94c:	e7e1      	b.n	800a912 <vTaskStartScheduler+0x3e>
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a95e:	e7fe      	b.n	800a95e <vTaskStartScheduler+0x8a>
 800a960:	0801ad74 	.word	0x0801ad74
 800a964:	0800a749 	.word	0x0800a749
 800a968:	2400b090 	.word	0x2400b090
 800a96c:	2400abe8 	.word	0x2400abe8
 800a970:	240000a8 	.word	0x240000a8
 800a974:	2400b094 	.word	0x2400b094
 800a978:	2400b0b4 	.word	0x2400b0b4
 800a97c:	2400b0e0 	.word	0x2400b0e0

0800a980 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a980:	4a02      	ldr	r2, [pc, #8]	; (800a98c <vTaskSuspendAll+0xc>)
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	3301      	adds	r3, #1
 800a986:	6013      	str	r3, [r2, #0]
}
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	2400b05c 	.word	0x2400b05c

0800a990 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a990:	4b01      	ldr	r3, [pc, #4]	; (800a998 <xTaskGetTickCount+0x8>)
 800a992:	6818      	ldr	r0, [r3, #0]
}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	2400b0e0 	.word	0x2400b0e0

0800a99c <xTaskIncrementTick>:
{
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a99e:	4b3a      	ldr	r3, [pc, #232]	; (800aa88 <xTaskIncrementTick+0xec>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d169      	bne.n	800aa7a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9a6:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <xTaskIncrementTick+0xf0>)
 800a9a8:	681d      	ldr	r5, [r3, #0]
 800a9aa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a9ac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9ae:	b9c5      	cbnz	r5, 800a9e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a9b0:	4b37      	ldr	r3, [pc, #220]	; (800aa90 <xTaskIncrementTick+0xf4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	b143      	cbz	r3, 800a9ca <xTaskIncrementTick+0x2e>
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskIncrementTick+0x2c>
 800a9ca:	4a31      	ldr	r2, [pc, #196]	; (800aa90 <xTaskIncrementTick+0xf4>)
 800a9cc:	6811      	ldr	r1, [r2, #0]
 800a9ce:	4b31      	ldr	r3, [pc, #196]	; (800aa94 <xTaskIncrementTick+0xf8>)
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	6010      	str	r0, [r2, #0]
 800a9d4:	6019      	str	r1, [r3, #0]
 800a9d6:	4a30      	ldr	r2, [pc, #192]	; (800aa98 <xTaskIncrementTick+0xfc>)
 800a9d8:	6813      	ldr	r3, [r2, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	f7ff fd65 	bl	800a4ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9e2:	4b2e      	ldr	r3, [pc, #184]	; (800aa9c <xTaskIncrementTick+0x100>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	42ab      	cmp	r3, r5
 800a9e8:	d93d      	bls.n	800aa66 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800a9ea:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9ec:	4b2c      	ldr	r3, [pc, #176]	; (800aaa0 <xTaskIncrementTick+0x104>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9f6:	009a      	lsls	r2, r3, #2
 800a9f8:	4b2a      	ldr	r3, [pc, #168]	; (800aaa4 <xTaskIncrementTick+0x108>)
 800a9fa:	589b      	ldr	r3, [r3, r2]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d900      	bls.n	800aa02 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800aa00:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800aa02:	4b29      	ldr	r3, [pc, #164]	; (800aaa8 <xTaskIncrementTick+0x10c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d03c      	beq.n	800aa84 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800aa0a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800aa0c:	e03a      	b.n	800aa84 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800aa0e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa10:	4b1f      	ldr	r3, [pc, #124]	; (800aa90 <xTaskIncrementTick+0xf4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	b343      	cbz	r3, 800aa6a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <xTaskIncrementTick+0xf4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa20:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800aa22:	429d      	cmp	r5, r3
 800aa24:	d326      	bcc.n	800aa74 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa26:	1d26      	adds	r6, r4, #4
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7fe fdf9 	bl	8009620 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa30:	b11b      	cbz	r3, 800aa3a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa32:	f104 0018 	add.w	r0, r4, #24
 800aa36:	f7fe fdf3 	bl	8009620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa3c:	4a1b      	ldr	r2, [pc, #108]	; (800aaac <xTaskIncrementTick+0x110>)
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d901      	bls.n	800aa48 <xTaskIncrementTick+0xac>
 800aa44:	4a19      	ldr	r2, [pc, #100]	; (800aaac <xTaskIncrementTick+0x110>)
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa4c:	009a      	lsls	r2, r3, #2
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4814      	ldr	r0, [pc, #80]	; (800aaa4 <xTaskIncrementTick+0x108>)
 800aa52:	4410      	add	r0, r2
 800aa54:	f7fe fdc0 	bl	80095d8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aa5a:	4b11      	ldr	r3, [pc, #68]	; (800aaa0 <xTaskIncrementTick+0x104>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d2d4      	bcs.n	800aa0e <xTaskIncrementTick+0x72>
 800aa64:	e7d4      	b.n	800aa10 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800aa66:	2700      	movs	r7, #0
 800aa68:	e7d2      	b.n	800aa10 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <xTaskIncrementTick+0x100>)
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	601a      	str	r2, [r3, #0]
					break;
 800aa72:	e7bb      	b.n	800a9ec <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800aa74:	4a09      	ldr	r2, [pc, #36]	; (800aa9c <xTaskIncrementTick+0x100>)
 800aa76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa78:	e7b8      	b.n	800a9ec <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800aa7a:	4a0d      	ldr	r2, [pc, #52]	; (800aab0 <xTaskIncrementTick+0x114>)
 800aa7c:	6813      	ldr	r3, [r2, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800aa82:	2700      	movs	r7, #0
}
 800aa84:	4638      	mov	r0, r7
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa88:	2400b05c 	.word	0x2400b05c
 800aa8c:	2400b0e0 	.word	0x2400b0e0
 800aa90:	2400abec 	.word	0x2400abec
 800aa94:	2400abf0 	.word	0x2400abf0
 800aa98:	2400b098 	.word	0x2400b098
 800aa9c:	2400b094 	.word	0x2400b094
 800aaa0:	2400abe8 	.word	0x2400abe8
 800aaa4:	2400abf4 	.word	0x2400abf4
 800aaa8:	2400b0e4 	.word	0x2400b0e4
 800aaac:	2400b064 	.word	0x2400b064
 800aab0:	2400b09c 	.word	0x2400b09c

0800aab4 <xTaskResumeAll>:
{
 800aab4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800aab6:	4b35      	ldr	r3, [pc, #212]	; (800ab8c <xTaskResumeAll+0xd8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	b943      	cbnz	r3, 800aace <xTaskResumeAll+0x1a>
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	e7fe      	b.n	800aacc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800aace:	f7fe fe21 	bl	8009714 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800aad2:	4b2e      	ldr	r3, [pc, #184]	; (800ab8c <xTaskResumeAll+0xd8>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	3a01      	subs	r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d14f      	bne.n	800ab80 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aae0:	4b2b      	ldr	r3, [pc, #172]	; (800ab90 <xTaskResumeAll+0xdc>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	b90b      	cbnz	r3, 800aaea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800aae6:	2400      	movs	r4, #0
 800aae8:	e04b      	b.n	800ab82 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800aaea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaec:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <xTaskResumeAll+0xe0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	b31b      	cbz	r3, 800ab3a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf2:	4b28      	ldr	r3, [pc, #160]	; (800ab94 <xTaskResumeAll+0xe0>)
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf8:	f104 0018 	add.w	r0, r4, #24
 800aafc:	f7fe fd90 	bl	8009620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab00:	1d25      	adds	r5, r4, #4
 800ab02:	4628      	mov	r0, r5
 800ab04:	f7fe fd8c 	bl	8009620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ab0a:	4b23      	ldr	r3, [pc, #140]	; (800ab98 <xTaskResumeAll+0xe4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4298      	cmp	r0, r3
 800ab10:	d901      	bls.n	800ab16 <xTaskResumeAll+0x62>
 800ab12:	4b21      	ldr	r3, [pc, #132]	; (800ab98 <xTaskResumeAll+0xe4>)
 800ab14:	6018      	str	r0, [r3, #0]
 800ab16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	4b1f      	ldr	r3, [pc, #124]	; (800ab9c <xTaskResumeAll+0xe8>)
 800ab1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab22:	f7fe fd59 	bl	80095d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab28:	4b1d      	ldr	r3, [pc, #116]	; (800aba0 <xTaskResumeAll+0xec>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d3dc      	bcc.n	800aaec <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800ab32:	4b1c      	ldr	r3, [pc, #112]	; (800aba4 <xTaskResumeAll+0xf0>)
 800ab34:	2201      	movs	r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	e7d8      	b.n	800aaec <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800ab3a:	b10c      	cbz	r4, 800ab40 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800ab3c:	f7ff fcb6 	bl	800a4ac <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab40:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <xTaskResumeAll+0xf4>)
 800ab42:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ab44:	b984      	cbnz	r4, 800ab68 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800ab46:	4b17      	ldr	r3, [pc, #92]	; (800aba4 <xTaskResumeAll+0xf0>)
 800ab48:	681c      	ldr	r4, [r3, #0]
 800ab4a:	b1d4      	cbz	r4, 800ab82 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800ab4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ab60:	2401      	movs	r4, #1
 800ab62:	e00e      	b.n	800ab82 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab64:	3c01      	subs	r4, #1
 800ab66:	d007      	beq.n	800ab78 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800ab68:	f7ff ff18 	bl	800a99c <xTaskIncrementTick>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0f9      	beq.n	800ab64 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800ab70:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xTaskResumeAll+0xf0>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	e7f5      	b.n	800ab64 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800ab78:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <xTaskResumeAll+0xf4>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e7e2      	b.n	800ab46 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800ab80:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ab82:	f7fe fde9 	bl	8009758 <vPortExitCritical>
}
 800ab86:	4620      	mov	r0, r4
 800ab88:	bd38      	pop	{r3, r4, r5, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2400b05c 	.word	0x2400b05c
 800ab90:	2400b054 	.word	0x2400b054
 800ab94:	2400b0a0 	.word	0x2400b0a0
 800ab98:	2400b064 	.word	0x2400b064
 800ab9c:	2400abf4 	.word	0x2400abf4
 800aba0:	2400abe8 	.word	0x2400abe8
 800aba4:	2400b0e4 	.word	0x2400b0e4
 800aba8:	2400b09c 	.word	0x2400b09c

0800abac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abac:	4b21      	ldr	r3, [pc, #132]	; (800ac34 <vTaskSwitchContext+0x88>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	b11b      	cbz	r3, 800abba <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800abb2:	4b21      	ldr	r3, [pc, #132]	; (800ac38 <vTaskSwitchContext+0x8c>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800abba:	4b1f      	ldr	r3, [pc, #124]	; (800ac38 <vTaskSwitchContext+0x8c>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abc0:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <vTaskSwitchContext+0x90>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800abc8:	008a      	lsls	r2, r1, #2
 800abca:	491d      	ldr	r1, [pc, #116]	; (800ac40 <vTaskSwitchContext+0x94>)
 800abcc:	588a      	ldr	r2, [r1, r2]
 800abce:	b95a      	cbnz	r2, 800abe8 <vTaskSwitchContext+0x3c>
 800abd0:	b10b      	cbz	r3, 800abd6 <vTaskSwitchContext+0x2a>
 800abd2:	3b01      	subs	r3, #1
 800abd4:	e7f6      	b.n	800abc4 <vTaskSwitchContext+0x18>
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	e7fe      	b.n	800abe6 <vTaskSwitchContext+0x3a>
 800abe8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800abec:	0082      	lsls	r2, r0, #2
 800abee:	440a      	add	r2, r1
 800abf0:	6850      	ldr	r0, [r2, #4]
 800abf2:	6840      	ldr	r0, [r0, #4]
 800abf4:	6050      	str	r0, [r2, #4]
 800abf6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800abfa:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800abfe:	3208      	adds	r2, #8
 800ac00:	4411      	add	r1, r2
 800ac02:	4288      	cmp	r0, r1
 800ac04:	d00f      	beq.n	800ac26 <vTaskSwitchContext+0x7a>
 800ac06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ac0a:	0091      	lsls	r1, r2, #2
 800ac0c:	4a0c      	ldr	r2, [pc, #48]	; (800ac40 <vTaskSwitchContext+0x94>)
 800ac0e:	440a      	add	r2, r1
 800ac10:	6852      	ldr	r2, [r2, #4]
 800ac12:	68d1      	ldr	r1, [r2, #12]
 800ac14:	4a0b      	ldr	r2, [pc, #44]	; (800ac44 <vTaskSwitchContext+0x98>)
 800ac16:	6011      	str	r1, [r2, #0]
 800ac18:	4908      	ldr	r1, [pc, #32]	; (800ac3c <vTaskSwitchContext+0x90>)
 800ac1a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac1c:	6813      	ldr	r3, [r2, #0]
 800ac1e:	3354      	adds	r3, #84	; 0x54
 800ac20:	4a09      	ldr	r2, [pc, #36]	; (800ac48 <vTaskSwitchContext+0x9c>)
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac26:	6840      	ldr	r0, [r0, #4]
 800ac28:	4662      	mov	r2, ip
 800ac2a:	0091      	lsls	r1, r2, #2
 800ac2c:	4a04      	ldr	r2, [pc, #16]	; (800ac40 <vTaskSwitchContext+0x94>)
 800ac2e:	440a      	add	r2, r1
 800ac30:	6050      	str	r0, [r2, #4]
 800ac32:	e7e8      	b.n	800ac06 <vTaskSwitchContext+0x5a>
 800ac34:	2400b05c 	.word	0x2400b05c
 800ac38:	2400b0e4 	.word	0x2400b0e4
 800ac3c:	2400b064 	.word	0x2400b064
 800ac40:	2400abf4 	.word	0x2400abf4
 800ac44:	2400abe8 	.word	0x2400abe8
 800ac48:	240000a8 	.word	0x240000a8

0800ac4c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800ac4c:	b158      	cbz	r0, 800ac66 <vTaskPlaceOnEventList+0x1a>
{
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac52:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <vTaskPlaceOnEventList+0x2c>)
 800ac54:	6811      	ldr	r1, [r2, #0]
 800ac56:	3118      	adds	r1, #24
 800ac58:	f7fe fcc9 	bl	80095ee <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f7ff fd86 	bl	800a770 <prvAddCurrentTaskToDelayedList>
}
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800ac76:	e7fe      	b.n	800ac76 <vTaskPlaceOnEventList+0x2a>
 800ac78:	2400abe8 	.word	0x2400abe8

0800ac7c <vTaskPlaceOnEventListRestricted>:
	{
 800ac7c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800ac7e:	b170      	cbz	r0, 800ac9e <vTaskPlaceOnEventListRestricted+0x22>
 800ac80:	460d      	mov	r5, r1
 800ac82:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac84:	4a0a      	ldr	r2, [pc, #40]	; (800acb0 <vTaskPlaceOnEventListRestricted+0x34>)
 800ac86:	6811      	ldr	r1, [r2, #0]
 800ac88:	3118      	adds	r1, #24
 800ac8a:	f7fe fca5 	bl	80095d8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800ac8e:	b10c      	cbz	r4, 800ac94 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800ac90:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac94:	4621      	mov	r1, r4
 800ac96:	4628      	mov	r0, r5
 800ac98:	f7ff fd6a 	bl	800a770 <prvAddCurrentTaskToDelayedList>
	}
 800ac9c:	bd38      	pop	{r3, r4, r5, pc}
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800acae:	e7fe      	b.n	800acae <vTaskPlaceOnEventListRestricted+0x32>
 800acb0:	2400abe8 	.word	0x2400abe8

0800acb4 <xTaskRemoveFromEventList>:
{
 800acb4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb6:	68c3      	ldr	r3, [r0, #12]
 800acb8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800acba:	b324      	cbz	r4, 800ad06 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800acbc:	f104 0518 	add.w	r5, r4, #24
 800acc0:	4628      	mov	r0, r5
 800acc2:	f7fe fcad 	bl	8009620 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acc6:	4b18      	ldr	r3, [pc, #96]	; (800ad28 <xTaskRemoveFromEventList+0x74>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	bb2b      	cbnz	r3, 800ad18 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800accc:	1d25      	adds	r5, r4, #4
 800acce:	4628      	mov	r0, r5
 800acd0:	f7fe fca6 	bl	8009620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800acd6:	4b15      	ldr	r3, [pc, #84]	; (800ad2c <xTaskRemoveFromEventList+0x78>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4298      	cmp	r0, r3
 800acdc:	d901      	bls.n	800ace2 <xTaskRemoveFromEventList+0x2e>
 800acde:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <xTaskRemoveFromEventList+0x78>)
 800ace0:	6018      	str	r0, [r3, #0]
 800ace2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ace6:	4629      	mov	r1, r5
 800ace8:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <xTaskRemoveFromEventList+0x7c>)
 800acea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800acee:	f7fe fc73 	bl	80095d8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acf4:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <xTaskRemoveFromEventList+0x80>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d911      	bls.n	800ad22 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800acfe:	2001      	movs	r0, #1
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <xTaskRemoveFromEventList+0x84>)
 800ad02:	6018      	str	r0, [r3, #0]
}
 800ad04:	bd38      	pop	{r3, r4, r5, pc}
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800ad16:	e7fe      	b.n	800ad16 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4808      	ldr	r0, [pc, #32]	; (800ad3c <xTaskRemoveFromEventList+0x88>)
 800ad1c:	f7fe fc5c 	bl	80095d8 <vListInsertEnd>
 800ad20:	e7e7      	b.n	800acf2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800ad22:	2000      	movs	r0, #0
	return xReturn;
 800ad24:	e7ee      	b.n	800ad04 <xTaskRemoveFromEventList+0x50>
 800ad26:	bf00      	nop
 800ad28:	2400b05c 	.word	0x2400b05c
 800ad2c:	2400b064 	.word	0x2400b064
 800ad30:	2400abf4 	.word	0x2400abf4
 800ad34:	2400abe8 	.word	0x2400abe8
 800ad38:	2400b0e4 	.word	0x2400b0e4
 800ad3c:	2400b0a0 	.word	0x2400b0a0

0800ad40 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad40:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <vTaskInternalSetTimeOutState+0x10>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad46:	4b03      	ldr	r3, [pc, #12]	; (800ad54 <vTaskInternalSetTimeOutState+0x14>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	6043      	str	r3, [r0, #4]
}
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	2400b098 	.word	0x2400b098
 800ad54:	2400b0e0 	.word	0x2400b0e0

0800ad58 <xTaskCheckForTimeOut>:
{
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800ad5a:	b1c8      	cbz	r0, 800ad90 <xTaskCheckForTimeOut+0x38>
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800ad60:	b1f9      	cbz	r1, 800ada2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800ad62:	f7fe fcd7 	bl	8009714 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ad66:	4b1b      	ldr	r3, [pc, #108]	; (800add4 <xTaskCheckForTimeOut+0x7c>)
 800ad68:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad6a:	686b      	ldr	r3, [r5, #4]
 800ad6c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad74:	d026      	beq.n	800adc4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad76:	4e18      	ldr	r6, [pc, #96]	; (800add8 <xTaskCheckForTimeOut+0x80>)
 800ad78:	6836      	ldr	r6, [r6, #0]
 800ad7a:	682f      	ldr	r7, [r5, #0]
 800ad7c:	42b7      	cmp	r7, r6
 800ad7e:	d001      	beq.n	800ad84 <xTaskCheckForTimeOut+0x2c>
 800ad80:	428b      	cmp	r3, r1
 800ad82:	d924      	bls.n	800adce <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad84:	4282      	cmp	r2, r0
 800ad86:	d815      	bhi.n	800adb4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ad8c:	2401      	movs	r4, #1
 800ad8e:	e01a      	b.n	800adc6 <xTaskCheckForTimeOut+0x6e>
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800ada0:	e7fe      	b.n	800ada0 <xTaskCheckForTimeOut+0x48>
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800adb2:	e7fe      	b.n	800adb2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800adb4:	1a5b      	subs	r3, r3, r1
 800adb6:	4413      	add	r3, r2
 800adb8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adba:	4628      	mov	r0, r5
 800adbc:	f7ff ffc0 	bl	800ad40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adc0:	2400      	movs	r4, #0
 800adc2:	e000      	b.n	800adc6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800adc4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800adc6:	f7fe fcc7 	bl	8009758 <vPortExitCritical>
}
 800adca:	4620      	mov	r0, r4
 800adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800adce:	2401      	movs	r4, #1
 800add0:	e7f9      	b.n	800adc6 <xTaskCheckForTimeOut+0x6e>
 800add2:	bf00      	nop
 800add4:	2400b0e0 	.word	0x2400b0e0
 800add8:	2400b098 	.word	0x2400b098

0800addc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800addc:	4b01      	ldr	r3, [pc, #4]	; (800ade4 <vTaskMissedYield+0x8>)
 800adde:	2201      	movs	r2, #1
 800ade0:	601a      	str	r2, [r3, #0]
}
 800ade2:	4770      	bx	lr
 800ade4:	2400b0e4 	.word	0x2400b0e4

0800ade8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ade8:	4b05      	ldr	r3, [pc, #20]	; (800ae00 <xTaskGetSchedulerState+0x18>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	b133      	cbz	r3, 800adfc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <xTaskGetSchedulerState+0x1c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	b10b      	cbz	r3, 800adf8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800adf4:	2000      	movs	r0, #0
	}
 800adf6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800adf8:	2002      	movs	r0, #2
 800adfa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adfc:	2001      	movs	r0, #1
 800adfe:	4770      	bx	lr
 800ae00:	2400b0b4 	.word	0x2400b0b4
 800ae04:	2400b05c 	.word	0x2400b05c

0800ae08 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d03e      	beq.n	800ae8a <xTaskPriorityInherit+0x82>
	{
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ae12:	4a20      	ldr	r2, [pc, #128]	; (800ae94 <xTaskPriorityInherit+0x8c>)
 800ae14:	6812      	ldr	r2, [r2, #0]
 800ae16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d22e      	bcs.n	800ae7a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae1c:	6982      	ldr	r2, [r0, #24]
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	db05      	blt.n	800ae2e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae22:	4a1c      	ldr	r2, [pc, #112]	; (800ae94 <xTaskPriorityInherit+0x8c>)
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae28:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ae2c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae2e:	6961      	ldr	r1, [r4, #20]
 800ae30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae34:	4a18      	ldr	r2, [pc, #96]	; (800ae98 <xTaskPriorityInherit+0x90>)
 800ae36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae3a:	4299      	cmp	r1, r3
 800ae3c:	d005      	beq.n	800ae4a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <xTaskPriorityInherit+0x8c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800ae46:	2001      	movs	r0, #1
	}
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae4a:	1d25      	adds	r5, r4, #4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7fe fbe7 	bl	8009620 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae52:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <xTaskPriorityInherit+0x8c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ae58:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae5a:	4b10      	ldr	r3, [pc, #64]	; (800ae9c <xTaskPriorityInherit+0x94>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4298      	cmp	r0, r3
 800ae60:	d901      	bls.n	800ae66 <xTaskPriorityInherit+0x5e>
 800ae62:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <xTaskPriorityInherit+0x94>)
 800ae64:	6018      	str	r0, [r3, #0]
 800ae66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <xTaskPriorityInherit+0x90>)
 800ae6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae72:	f7fe fbb1 	bl	80095d8 <vListInsertEnd>
				xReturn = pdTRUE;
 800ae76:	2001      	movs	r0, #1
 800ae78:	e7e6      	b.n	800ae48 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae7a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800ae7c:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <xTaskPriorityInherit+0x8c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d303      	bcc.n	800ae8e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800ae86:	2000      	movs	r0, #0
 800ae88:	e7de      	b.n	800ae48 <xTaskPriorityInherit+0x40>
 800ae8a:	2000      	movs	r0, #0
	}
 800ae8c:	4770      	bx	lr
					xReturn = pdTRUE;
 800ae8e:	2001      	movs	r0, #1
		return xReturn;
 800ae90:	e7da      	b.n	800ae48 <xTaskPriorityInherit+0x40>
 800ae92:	bf00      	nop
 800ae94:	2400abe8 	.word	0x2400abe8
 800ae98:	2400abf4 	.word	0x2400abf4
 800ae9c:	2400b064 	.word	0x2400b064

0800aea0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d03b      	beq.n	800af1c <xTaskPriorityDisinherit+0x7c>
	{
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800aea8:	4b1e      	ldr	r3, [pc, #120]	; (800af24 <xTaskPriorityDisinherit+0x84>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4283      	cmp	r3, r0
 800aeae:	d008      	beq.n	800aec2 <xTaskPriorityDisinherit+0x22>
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	e7fe      	b.n	800aec0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800aec2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aec4:	b943      	cbnz	r3, 800aed8 <xTaskPriorityDisinherit+0x38>
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	e7fe      	b.n	800aed6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800aed8:	3b01      	subs	r3, #1
 800aeda:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aedc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800aede:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800aee0:	4291      	cmp	r1, r2
 800aee2:	d01d      	beq.n	800af20 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aee4:	b10b      	cbz	r3, 800aeea <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800aee6:	2000      	movs	r0, #0
	}
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeea:	1d05      	adds	r5, r0, #4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f7fe fb97 	bl	8009620 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aef2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aef4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef6:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800aefa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800aefc:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <xTaskPriorityDisinherit+0x88>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4298      	cmp	r0, r3
 800af02:	d901      	bls.n	800af08 <xTaskPriorityDisinherit+0x68>
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <xTaskPriorityDisinherit+0x88>)
 800af06:	6018      	str	r0, [r3, #0]
 800af08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800af0c:	4629      	mov	r1, r5
 800af0e:	4b07      	ldr	r3, [pc, #28]	; (800af2c <xTaskPriorityDisinherit+0x8c>)
 800af10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af14:	f7fe fb60 	bl	80095d8 <vListInsertEnd>
					xReturn = pdTRUE;
 800af18:	2001      	movs	r0, #1
 800af1a:	e7e5      	b.n	800aee8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800af1c:	2000      	movs	r0, #0
	}
 800af1e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800af20:	2000      	movs	r0, #0
 800af22:	e7e1      	b.n	800aee8 <xTaskPriorityDisinherit+0x48>
 800af24:	2400abe8 	.word	0x2400abe8
 800af28:	2400b064 	.word	0x2400b064
 800af2c:	2400abf4 	.word	0x2400abf4

0800af30 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800af30:	2800      	cmp	r0, #0
 800af32:	d046      	beq.n	800afc2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800af38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800af3a:	b943      	cbnz	r3, 800af4e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800af3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af40:	f383 8811 	msr	BASEPRI, r3
 800af44:	f3bf 8f6f 	isb	sy
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	e7fe      	b.n	800af4c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af4e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800af50:	428a      	cmp	r2, r1
 800af52:	d200      	bcs.n	800af56 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800af54:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800af56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af58:	4291      	cmp	r1, r2
 800af5a:	d001      	beq.n	800af60 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d000      	beq.n	800af62 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800af60:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800af62:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	42a3      	cmp	r3, r4
 800af68:	d022      	beq.n	800afb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800af6a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af6c:	69a3      	ldr	r3, [r4, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	db02      	blt.n	800af78 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af72:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800af76:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af78:	6962      	ldr	r2, [r4, #20]
 800af7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800af7e:	4b12      	ldr	r3, [pc, #72]	; (800afc8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800af80:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800af84:	428a      	cmp	r2, r1
 800af86:	d1eb      	bne.n	800af60 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af88:	1d25      	adds	r5, r4, #4
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7fe fb48 	bl	8009620 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800af90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800af92:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4298      	cmp	r0, r3
 800af98:	d901      	bls.n	800af9e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800af9a:	4b0c      	ldr	r3, [pc, #48]	; (800afcc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800af9c:	6018      	str	r0, [r3, #0]
 800af9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800afa2:	4629      	mov	r1, r5
 800afa4:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800afa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afaa:	f7fe fb15 	bl	80095d8 <vListInsertEnd>
	}
 800afae:	e7d7      	b.n	800af60 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800afc0:	e7fe      	b.n	800afc0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800afc2:	4770      	bx	lr
 800afc4:	2400abe8 	.word	0x2400abe8
 800afc8:	2400abf4 	.word	0x2400abf4
 800afcc:	2400b064 	.word	0x2400b064

0800afd0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800afd0:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <pvTaskIncrementMutexHeldCount+0x18>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	b123      	cbz	r3, 800afe0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800afd6:	4b04      	ldr	r3, [pc, #16]	; (800afe8 <pvTaskIncrementMutexHeldCount+0x18>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800afdc:	3301      	adds	r3, #1
 800afde:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800afe0:	4b01      	ldr	r3, [pc, #4]	; (800afe8 <pvTaskIncrementMutexHeldCount+0x18>)
 800afe2:	6818      	ldr	r0, [r3, #0]
	}
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	2400abe8 	.word	0x2400abe8

0800afec <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afec:	4b06      	ldr	r3, [pc, #24]	; (800b008 <prvGetNextExpireTime+0x1c>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6813      	ldr	r3, [r2, #0]
 800aff2:	b92b      	cbnz	r3, 800b000 <prvGetNextExpireTime+0x14>
 800aff4:	2301      	movs	r3, #1
 800aff6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aff8:	b923      	cbnz	r3, 800b004 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affa:	68d3      	ldr	r3, [r2, #12]
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b000:	2300      	movs	r3, #0
 800b002:	e7f8      	b.n	800aff6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b004:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800b006:	4770      	bx	lr
 800b008:	2400b0e8 	.word	0x2400b0e8

0800b00c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b00c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b00e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b010:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b012:	4291      	cmp	r1, r2
 800b014:	d80c      	bhi.n	800b030 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b016:	1ad2      	subs	r2, r2, r3
 800b018:	6983      	ldr	r3, [r0, #24]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d301      	bcc.n	800b022 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b01e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800b020:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b022:	1d01      	adds	r1, r0, #4
 800b024:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <prvInsertTimerInActiveList+0x48>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	f7fe fae1 	bl	80095ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b02c:	2000      	movs	r0, #0
 800b02e:	e7f7      	b.n	800b020 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b030:	429a      	cmp	r2, r3
 800b032:	bf2c      	ite	cs
 800b034:	2200      	movcs	r2, #0
 800b036:	2201      	movcc	r2, #1
 800b038:	4299      	cmp	r1, r3
 800b03a:	bf38      	it	cc
 800b03c:	2200      	movcc	r2, #0
 800b03e:	b10a      	cbz	r2, 800b044 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800b040:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b042:	e7ed      	b.n	800b020 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b044:	1d01      	adds	r1, r0, #4
 800b046:	4b04      	ldr	r3, [pc, #16]	; (800b058 <prvInsertTimerInActiveList+0x4c>)
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	f7fe fad0 	bl	80095ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b04e:	2000      	movs	r0, #0
 800b050:	e7e6      	b.n	800b020 <prvInsertTimerInActiveList+0x14>
 800b052:	bf00      	nop
 800b054:	2400b0ec 	.word	0x2400b0ec
 800b058:	2400b0e8 	.word	0x2400b0e8

0800b05c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b05c:	b530      	push	{r4, r5, lr}
 800b05e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b060:	f7fe fb58 	bl	8009714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b064:	4b11      	ldr	r3, [pc, #68]	; (800b0ac <prvCheckForValidListAndQueue+0x50>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	b11b      	cbz	r3, 800b072 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b06a:	f7fe fb75 	bl	8009758 <vPortExitCritical>
}
 800b06e:	b003      	add	sp, #12
 800b070:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b072:	4d0f      	ldr	r5, [pc, #60]	; (800b0b0 <prvCheckForValidListAndQueue+0x54>)
 800b074:	4628      	mov	r0, r5
 800b076:	f7fe faa1 	bl	80095bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b07a:	4c0e      	ldr	r4, [pc, #56]	; (800b0b4 <prvCheckForValidListAndQueue+0x58>)
 800b07c:	4620      	mov	r0, r4
 800b07e:	f7fe fa9d 	bl	80095bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <prvCheckForValidListAndQueue+0x5c>)
 800b084:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b086:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <prvCheckForValidListAndQueue+0x60>)
 800b088:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b08a:	2300      	movs	r3, #0
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <prvCheckForValidListAndQueue+0x64>)
 800b090:	4a0c      	ldr	r2, [pc, #48]	; (800b0c4 <prvCheckForValidListAndQueue+0x68>)
 800b092:	2110      	movs	r1, #16
 800b094:	200a      	movs	r0, #10
 800b096:	f7fe fd8c 	bl	8009bb2 <xQueueGenericCreateStatic>
 800b09a:	4b04      	ldr	r3, [pc, #16]	; (800b0ac <prvCheckForValidListAndQueue+0x50>)
 800b09c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0e3      	beq.n	800b06a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0a2:	4909      	ldr	r1, [pc, #36]	; (800b0c8 <prvCheckForValidListAndQueue+0x6c>)
 800b0a4:	f7ff f998 	bl	800a3d8 <vQueueAddToRegistry>
 800b0a8:	e7df      	b.n	800b06a <prvCheckForValidListAndQueue+0xe>
 800b0aa:	bf00      	nop
 800b0ac:	2400b20c 	.word	0x2400b20c
 800b0b0:	2400b190 	.word	0x2400b190
 800b0b4:	2400b1a4 	.word	0x2400b1a4
 800b0b8:	2400b0e8 	.word	0x2400b0e8
 800b0bc:	2400b0ec 	.word	0x2400b0ec
 800b0c0:	2400b1bc 	.word	0x2400b1bc
 800b0c4:	2400b0f0 	.word	0x2400b0f0
 800b0c8:	0801ad7c 	.word	0x0801ad7c

0800b0cc <xTimerCreateTimerTask>:
{
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b0d0:	f7ff ffc4 	bl	800b05c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b0d4:	4b12      	ldr	r3, [pc, #72]	; (800b120 <xTimerCreateTimerTask+0x54>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	b1cb      	cbz	r3, 800b10e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b0da:	2400      	movs	r4, #0
 800b0dc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b0de:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b0e0:	aa07      	add	r2, sp, #28
 800b0e2:	a906      	add	r1, sp, #24
 800b0e4:	a805      	add	r0, sp, #20
 800b0e6:	f7fe f93d 	bl	8009364 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	4623      	mov	r3, r4
 800b0f8:	9a07      	ldr	r2, [sp, #28]
 800b0fa:	490a      	ldr	r1, [pc, #40]	; (800b124 <xTimerCreateTimerTask+0x58>)
 800b0fc:	480a      	ldr	r0, [pc, #40]	; (800b128 <xTimerCreateTimerTask+0x5c>)
 800b0fe:	f7ff fb79 	bl	800a7f4 <xTaskCreateStatic>
 800b102:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <xTimerCreateTimerTask+0x60>)
 800b104:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b106:	b110      	cbz	r0, 800b10e <xTimerCreateTimerTask+0x42>
}
 800b108:	2001      	movs	r0, #1
 800b10a:	b008      	add	sp, #32
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800b11e:	e7fe      	b.n	800b11e <xTimerCreateTimerTask+0x52>
 800b120:	2400b20c 	.word	0x2400b20c
 800b124:	0801ad84 	.word	0x0801ad84
 800b128:	0800b435 	.word	0x0800b435
 800b12c:	2400b210 	.word	0x2400b210

0800b130 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b130:	b1b8      	cbz	r0, 800b162 <xTimerGenericCommand+0x32>
 800b132:	469c      	mov	ip, r3
 800b134:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800b136:	4818      	ldr	r0, [pc, #96]	; (800b198 <xTimerGenericCommand+0x68>)
 800b138:	6800      	ldr	r0, [r0, #0]
 800b13a:	b358      	cbz	r0, 800b194 <xTimerGenericCommand+0x64>
{
 800b13c:	b500      	push	{lr}
 800b13e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800b140:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b142:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b144:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b146:	2905      	cmp	r1, #5
 800b148:	dc1c      	bgt.n	800b184 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b14a:	f7ff fe4d 	bl	800ade8 <xTaskGetSchedulerState>
 800b14e:	2802      	cmp	r0, #2
 800b150:	d010      	beq.n	800b174 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b152:	2300      	movs	r3, #0
 800b154:	461a      	mov	r2, r3
 800b156:	4669      	mov	r1, sp
 800b158:	480f      	ldr	r0, [pc, #60]	; (800b198 <xTimerGenericCommand+0x68>)
 800b15a:	6800      	ldr	r0, [r0, #0]
 800b15c:	f7fe fde1 	bl	8009d22 <xQueueGenericSend>
 800b160:	e015      	b.n	800b18e <xTimerGenericCommand+0x5e>
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800b172:	e7fe      	b.n	800b172 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b174:	2300      	movs	r3, #0
 800b176:	9a06      	ldr	r2, [sp, #24]
 800b178:	4669      	mov	r1, sp
 800b17a:	4807      	ldr	r0, [pc, #28]	; (800b198 <xTimerGenericCommand+0x68>)
 800b17c:	6800      	ldr	r0, [r0, #0]
 800b17e:	f7fe fdd0 	bl	8009d22 <xQueueGenericSend>
 800b182:	e004      	b.n	800b18e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b184:	2300      	movs	r3, #0
 800b186:	4662      	mov	r2, ip
 800b188:	4669      	mov	r1, sp
 800b18a:	f7fe fe8e 	bl	8009eaa <xQueueGenericSendFromISR>
}
 800b18e:	b005      	add	sp, #20
 800b190:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800b194:	2000      	movs	r0, #0
}
 800b196:	4770      	bx	lr
 800b198:	2400b20c 	.word	0x2400b20c

0800b19c <prvSwitchTimerLists>:
{
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1a0:	4b1b      	ldr	r3, [pc, #108]	; (800b210 <prvSwitchTimerLists+0x74>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	b362      	cbz	r2, 800b202 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ac:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1ae:	1d25      	adds	r5, r4, #4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f7fe fa35 	bl	8009620 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1b6:	6a23      	ldr	r3, [r4, #32]
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b1c0:	f013 0f04 	tst.w	r3, #4
 800b1c4:	d0ec      	beq.n	800b1a0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1c6:	69a3      	ldr	r3, [r4, #24]
 800b1c8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800b1ca:	429e      	cmp	r6, r3
 800b1cc:	d207      	bcs.n	800b1de <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <prvSwitchTimerLists+0x74>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	f7fe fa09 	bl	80095ee <vListInsert>
 800b1dc:	e7e0      	b.n	800b1a0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1de:	2100      	movs	r1, #0
 800b1e0:	9100      	str	r1, [sp, #0]
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff ffa2 	bl	800b130 <xTimerGenericCommand>
				configASSERT( xResult );
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d1d7      	bne.n	800b1a0 <prvSwitchTimerLists+0x4>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	e7fe      	b.n	800b200 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800b202:	4a04      	ldr	r2, [pc, #16]	; (800b214 <prvSwitchTimerLists+0x78>)
 800b204:	6810      	ldr	r0, [r2, #0]
 800b206:	4902      	ldr	r1, [pc, #8]	; (800b210 <prvSwitchTimerLists+0x74>)
 800b208:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800b20a:	6013      	str	r3, [r2, #0]
}
 800b20c:	b002      	add	sp, #8
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	2400b0e8 	.word	0x2400b0e8
 800b214:	2400b0ec 	.word	0x2400b0ec

0800b218 <prvSampleTimeNow>:
{
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800b21c:	f7ff fbb8 	bl	800a990 <xTaskGetTickCount>
 800b220:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800b222:	4b07      	ldr	r3, [pc, #28]	; (800b240 <prvSampleTimeNow+0x28>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4283      	cmp	r3, r0
 800b228:	d805      	bhi.n	800b236 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800b22e:	4b04      	ldr	r3, [pc, #16]	; (800b240 <prvSampleTimeNow+0x28>)
 800b230:	601c      	str	r4, [r3, #0]
}
 800b232:	4620      	mov	r0, r4
 800b234:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800b236:	f7ff ffb1 	bl	800b19c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b23a:	2301      	movs	r3, #1
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	e7f6      	b.n	800b22e <prvSampleTimeNow+0x16>
 800b240:	2400b1b8 	.word	0x2400b1b8

0800b244 <prvProcessExpiredTimer>:
{
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	4606      	mov	r6, r0
 800b24a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24c:	4917      	ldr	r1, [pc, #92]	; (800b2ac <prvProcessExpiredTimer+0x68>)
 800b24e:	6809      	ldr	r1, [r1, #0]
 800b250:	68c9      	ldr	r1, [r1, #12]
 800b252:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b254:	1d20      	adds	r0, r4, #4
 800b256:	f7fe f9e3 	bl	8009620 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b25a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800b25e:	f01c 0f04 	tst.w	ip, #4
 800b262:	d108      	bne.n	800b276 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b264:	f02c 0c01 	bic.w	ip, ip, #1
 800b268:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b26c:	6a23      	ldr	r3, [r4, #32]
 800b26e:	4620      	mov	r0, r4
 800b270:	4798      	blx	r3
}
 800b272:	b002      	add	sp, #8
 800b274:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b276:	69a1      	ldr	r1, [r4, #24]
 800b278:	4633      	mov	r3, r6
 800b27a:	462a      	mov	r2, r5
 800b27c:	4431      	add	r1, r6
 800b27e:	4620      	mov	r0, r4
 800b280:	f7ff fec4 	bl	800b00c <prvInsertTimerInActiveList>
 800b284:	2800      	cmp	r0, #0
 800b286:	d0f1      	beq.n	800b26c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b288:	2100      	movs	r1, #0
 800b28a:	9100      	str	r1, [sp, #0]
 800b28c:	460b      	mov	r3, r1
 800b28e:	4632      	mov	r2, r6
 800b290:	4620      	mov	r0, r4
 800b292:	f7ff ff4d 	bl	800b130 <xTimerGenericCommand>
			configASSERT( xResult );
 800b296:	2800      	cmp	r0, #0
 800b298:	d1e8      	bne.n	800b26c <prvProcessExpiredTimer+0x28>
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	e7fe      	b.n	800b2aa <prvProcessExpiredTimer+0x66>
 800b2ac:	2400b0e8 	.word	0x2400b0e8

0800b2b0 <prvProcessTimerOrBlockTask>:
{
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800b2b8:	f7ff fb62 	bl	800a980 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2bc:	a801      	add	r0, sp, #4
 800b2be:	f7ff ffab 	bl	800b218 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b2c2:	9b01      	ldr	r3, [sp, #4]
 800b2c4:	bb3b      	cbnz	r3, 800b316 <prvProcessTimerOrBlockTask+0x66>
 800b2c6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2c8:	42b0      	cmp	r0, r6
 800b2ca:	bf28      	it	cs
 800b2cc:	2c00      	cmpcs	r4, #0
 800b2ce:	d019      	beq.n	800b304 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800b2d0:	b124      	cbz	r4, 800b2dc <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2d2:	4a13      	ldr	r2, [pc, #76]	; (800b320 <prvProcessTimerOrBlockTask+0x70>)
 800b2d4:	6812      	ldr	r2, [r2, #0]
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	b9da      	cbnz	r2, 800b312 <prvProcessTimerOrBlockTask+0x62>
 800b2da:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b2dc:	4622      	mov	r2, r4
 800b2de:	1b71      	subs	r1, r6, r5
 800b2e0:	4b10      	ldr	r3, [pc, #64]	; (800b324 <prvProcessTimerOrBlockTask+0x74>)
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	f7ff f8b8 	bl	800a458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b2e8:	f7ff fbe4 	bl	800aab4 <xTaskResumeAll>
 800b2ec:	b9a8      	cbnz	r0, 800b31a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800b2ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	e00a      	b.n	800b31a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800b304:	f7ff fbd6 	bl	800aab4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b308:	4629      	mov	r1, r5
 800b30a:	4630      	mov	r0, r6
 800b30c:	f7ff ff9a 	bl	800b244 <prvProcessExpiredTimer>
 800b310:	e003      	b.n	800b31a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b312:	461c      	mov	r4, r3
 800b314:	e7e2      	b.n	800b2dc <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800b316:	f7ff fbcd 	bl	800aab4 <xTaskResumeAll>
}
 800b31a:	b002      	add	sp, #8
 800b31c:	bd70      	pop	{r4, r5, r6, pc}
 800b31e:	bf00      	nop
 800b320:	2400b0ec 	.word	0x2400b0ec
 800b324:	2400b20c 	.word	0x2400b20c

0800b328 <prvProcessReceivedCommands>:
{
 800b328:	b510      	push	{r4, lr}
 800b32a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b32c:	e002      	b.n	800b334 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	da0f      	bge.n	800b354 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b334:	2200      	movs	r2, #0
 800b336:	a904      	add	r1, sp, #16
 800b338:	4b3d      	ldr	r3, [pc, #244]	; (800b430 <prvProcessReceivedCommands+0x108>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	f7fe fe75 	bl	800a02a <xQueueReceive>
 800b340:	2800      	cmp	r0, #0
 800b342:	d073      	beq.n	800b42c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	daf1      	bge.n	800b32e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b34a:	9907      	ldr	r1, [sp, #28]
 800b34c:	9806      	ldr	r0, [sp, #24]
 800b34e:	9b05      	ldr	r3, [sp, #20]
 800b350:	4798      	blx	r3
 800b352:	e7ec      	b.n	800b32e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b354:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b356:	6963      	ldr	r3, [r4, #20]
 800b358:	b113      	cbz	r3, 800b360 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b35a:	1d20      	adds	r0, r4, #4
 800b35c:	f7fe f960 	bl	8009620 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b360:	a803      	add	r0, sp, #12
 800b362:	f7ff ff59 	bl	800b218 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b366:	9b04      	ldr	r3, [sp, #16]
 800b368:	2b09      	cmp	r3, #9
 800b36a:	d8e3      	bhi.n	800b334 <prvProcessReceivedCommands+0xc>
 800b36c:	e8df f003 	tbb	[pc, r3]
 800b370:	30050505 	.word	0x30050505
 800b374:	05055037 	.word	0x05055037
 800b378:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b37a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b386:	9b05      	ldr	r3, [sp, #20]
 800b388:	69a1      	ldr	r1, [r4, #24]
 800b38a:	4602      	mov	r2, r0
 800b38c:	4419      	add	r1, r3
 800b38e:	4620      	mov	r0, r4
 800b390:	f7ff fe3c 	bl	800b00c <prvInsertTimerInActiveList>
 800b394:	2800      	cmp	r0, #0
 800b396:	d0cd      	beq.n	800b334 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b398:	6a23      	ldr	r3, [r4, #32]
 800b39a:	4620      	mov	r0, r4
 800b39c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b39e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b3a2:	f013 0f04 	tst.w	r3, #4
 800b3a6:	d0c5      	beq.n	800b334 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3a8:	69a2      	ldr	r2, [r4, #24]
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	9100      	str	r1, [sp, #0]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	9805      	ldr	r0, [sp, #20]
 800b3b2:	4402      	add	r2, r0
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff febb 	bl	800b130 <xTimerGenericCommand>
							configASSERT( xResult );
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1ba      	bne.n	800b334 <prvProcessReceivedCommands+0xc>
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	e7fe      	b.n	800b3ce <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b3d4:	f023 0301 	bic.w	r3, r3, #1
 800b3d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800b3dc:	e7aa      	b.n	800b334 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b3e2:	f043 0301 	orr.w	r3, r3, #1
 800b3e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3ea:	9905      	ldr	r1, [sp, #20]
 800b3ec:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3ee:	b131      	cbz	r1, 800b3fe <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	4401      	add	r1, r0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7ff fe08 	bl	800b00c <prvInsertTimerInActiveList>
					break;
 800b3fc:	e79a      	b.n	800b334 <prvProcessReceivedCommands+0xc>
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b40e:	e7fe      	b.n	800b40e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b410:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b414:	f013 0f02 	tst.w	r3, #2
 800b418:	d004      	beq.n	800b424 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b41a:	f023 0301 	bic.w	r3, r3, #1
 800b41e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b422:	e787      	b.n	800b334 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800b424:	4620      	mov	r0, r4
 800b426:	f7fe f88b 	bl	8009540 <vPortFree>
 800b42a:	e783      	b.n	800b334 <prvProcessReceivedCommands+0xc>
}
 800b42c:	b008      	add	sp, #32
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	2400b20c 	.word	0x2400b20c

0800b434 <prvTimerTask>:
{
 800b434:	b500      	push	{lr}
 800b436:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b438:	a801      	add	r0, sp, #4
 800b43a:	f7ff fdd7 	bl	800afec <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b43e:	9901      	ldr	r1, [sp, #4]
 800b440:	f7ff ff36 	bl	800b2b0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800b444:	f7ff ff70 	bl	800b328 <prvProcessReceivedCommands>
	for( ;; )
 800b448:	e7f6      	b.n	800b438 <prvTimerTask+0x4>

0800b44a <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 800b44a:	6840      	ldr	r0, [r0, #4]
 800b44c:	4770      	bx	lr
	...

0800b450 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 800b454:	493d      	ldr	r1, [pc, #244]	; (800b54c <net_wifi_string_to_security+0xfc>)
 800b456:	f7f4 ff4b 	bl	80002f0 <strcmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d071      	beq.n	800b542 <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 800b45e:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 800b462:	493b      	ldr	r1, [pc, #236]	; (800b550 <net_wifi_string_to_security+0x100>)
 800b464:	4620      	mov	r0, r4
 800b466:	f7f4 ff43 	bl	80002f0 <strcmp>
 800b46a:	b908      	cbnz	r0, 800b470 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 800b46c:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 800b470:	4938      	ldr	r1, [pc, #224]	; (800b554 <net_wifi_string_to_security+0x104>)
 800b472:	4620      	mov	r0, r4
 800b474:	f7f4 ff3c 	bl	80002f0 <strcmp>
 800b478:	b900      	cbnz	r0, 800b47c <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 800b47a:	4d37      	ldr	r5, [pc, #220]	; (800b558 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 800b47c:	4937      	ldr	r1, [pc, #220]	; (800b55c <net_wifi_string_to_security+0x10c>)
 800b47e:	4620      	mov	r0, r4
 800b480:	f7f4 ff36 	bl	80002f0 <strcmp>
 800b484:	b900      	cbnz	r0, 800b488 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 800b486:	4d36      	ldr	r5, [pc, #216]	; (800b560 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 800b488:	4936      	ldr	r1, [pc, #216]	; (800b564 <net_wifi_string_to_security+0x114>)
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7f4 ff30 	bl	80002f0 <strcmp>
 800b490:	b900      	cbnz	r0, 800b494 <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 800b492:	4d35      	ldr	r5, [pc, #212]	; (800b568 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 800b494:	4935      	ldr	r1, [pc, #212]	; (800b56c <net_wifi_string_to_security+0x11c>)
 800b496:	4620      	mov	r0, r4
 800b498:	f7f4 ff2a 	bl	80002f0 <strcmp>
 800b49c:	b900      	cbnz	r0, 800b4a0 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 800b49e:	4d34      	ldr	r5, [pc, #208]	; (800b570 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 800b4a0:	4934      	ldr	r1, [pc, #208]	; (800b574 <net_wifi_string_to_security+0x124>)
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7f4 ff24 	bl	80002f0 <strcmp>
 800b4a8:	b900      	cbnz	r0, 800b4ac <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 800b4aa:	4d33      	ldr	r5, [pc, #204]	; (800b578 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 800b4ac:	4933      	ldr	r1, [pc, #204]	; (800b57c <net_wifi_string_to_security+0x12c>)
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7f4 ff1e 	bl	80002f0 <strcmp>
 800b4b4:	b900      	cbnz	r0, 800b4b8 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 800b4b6:	4d32      	ldr	r5, [pc, #200]	; (800b580 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 800b4b8:	4932      	ldr	r1, [pc, #200]	; (800b584 <net_wifi_string_to_security+0x134>)
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7f4 ff18 	bl	80002f0 <strcmp>
 800b4c0:	b900      	cbnz	r0, 800b4c4 <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 800b4c2:	4d31      	ldr	r5, [pc, #196]	; (800b588 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 800b4c4:	4931      	ldr	r1, [pc, #196]	; (800b58c <net_wifi_string_to_security+0x13c>)
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f7f4 ff12 	bl	80002f0 <strcmp>
 800b4cc:	b900      	cbnz	r0, 800b4d0 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 800b4ce:	4d30      	ldr	r5, [pc, #192]	; (800b590 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 800b4d0:	4930      	ldr	r1, [pc, #192]	; (800b594 <net_wifi_string_to_security+0x144>)
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7f4 ff0c 	bl	80002f0 <strcmp>
 800b4d8:	b900      	cbnz	r0, 800b4dc <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 800b4da:	4d2f      	ldr	r5, [pc, #188]	; (800b598 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 800b4dc:	492f      	ldr	r1, [pc, #188]	; (800b59c <net_wifi_string_to_security+0x14c>)
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7f4 ff06 	bl	80002f0 <strcmp>
 800b4e4:	b900      	cbnz	r0, 800b4e8 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 800b4e6:	4d2e      	ldr	r5, [pc, #184]	; (800b5a0 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 800b4e8:	492e      	ldr	r1, [pc, #184]	; (800b5a4 <net_wifi_string_to_security+0x154>)
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7f4 ff00 	bl	80002f0 <strcmp>
 800b4f0:	b900      	cbnz	r0, 800b4f4 <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 800b4f2:	4d2d      	ldr	r5, [pc, #180]	; (800b5a8 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 800b4f4:	492d      	ldr	r1, [pc, #180]	; (800b5ac <net_wifi_string_to_security+0x15c>)
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7f4 fefa 	bl	80002f0 <strcmp>
 800b4fc:	b900      	cbnz	r0, 800b500 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 800b4fe:	4d2c      	ldr	r5, [pc, #176]	; (800b5b0 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 800b500:	492c      	ldr	r1, [pc, #176]	; (800b5b4 <net_wifi_string_to_security+0x164>)
 800b502:	4620      	mov	r0, r4
 800b504:	f7f4 fef4 	bl	80002f0 <strcmp>
 800b508:	b900      	cbnz	r0, 800b50c <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 800b50a:	4d2b      	ldr	r5, [pc, #172]	; (800b5b8 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 800b50c:	492b      	ldr	r1, [pc, #172]	; (800b5bc <net_wifi_string_to_security+0x16c>)
 800b50e:	4620      	mov	r0, r4
 800b510:	f7f4 feee 	bl	80002f0 <strcmp>
 800b514:	b900      	cbnz	r0, 800b518 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 800b516:	4d2a      	ldr	r5, [pc, #168]	; (800b5c0 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 800b518:	492a      	ldr	r1, [pc, #168]	; (800b5c4 <net_wifi_string_to_security+0x174>)
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7f4 fee8 	bl	80002f0 <strcmp>
 800b520:	b908      	cbnz	r0, 800b526 <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 800b522:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 800b526:	4928      	ldr	r1, [pc, #160]	; (800b5c8 <net_wifi_string_to_security+0x178>)
 800b528:	4620      	mov	r0, r4
 800b52a:	f7f4 fee1 	bl	80002f0 <strcmp>
 800b52e:	b908      	cbnz	r0, 800b534 <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 800b530:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 800b534:	4925      	ldr	r1, [pc, #148]	; (800b5cc <net_wifi_string_to_security+0x17c>)
 800b536:	4620      	mov	r0, r4
 800b538:	f7f4 feda 	bl	80002f0 <strcmp>
 800b53c:	b118      	cbz	r0, 800b546 <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 800b53e:	4628      	mov	r0, r5
 800b540:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 800b542:	2500      	movs	r5, #0
 800b544:	e78d      	b.n	800b462 <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 800b546:	4d22      	ldr	r5, [pc, #136]	; (800b5d0 <net_wifi_string_to_security+0x180>)
  return ret;
 800b548:	e7f9      	b.n	800b53e <net_wifi_string_to_security+0xee>
 800b54a:	bf00      	nop
 800b54c:	0801ad94 	.word	0x0801ad94
 800b550:	0801ad9c 	.word	0x0801ad9c
 800b554:	0801ada8 	.word	0x0801ada8
 800b558:	00200002 	.word	0x00200002
 800b55c:	0801adb4 	.word	0x0801adb4
 800b560:	00200006 	.word	0x00200006
 800b564:	0801adc0 	.word	0x0801adc0
 800b568:	00400004 	.word	0x00400004
 800b56c:	0801adcc 	.word	0x0801adcc
 800b570:	00400002 	.word	0x00400002
 800b574:	0801ae6c 	.word	0x0801ae6c
 800b578:	00400006 	.word	0x00400006
 800b57c:	0801ae78 	.word	0x0801ae78
 800b580:	40400004 	.word	0x40400004
 800b584:	0801adf0 	.word	0x0801adf0
 800b588:	01000004 	.word	0x01000004
 800b58c:	0801adf8 	.word	0x0801adf8
 800b590:	01400004 	.word	0x01400004
 800b594:	0801ae04 	.word	0x0801ae04
 800b598:	02200002 	.word	0x02200002
 800b59c:	0801ae14 	.word	0x0801ae14
 800b5a0:	02200004 	.word	0x02200004
 800b5a4:	0801ae20 	.word	0x0801ae20
 800b5a8:	02400002 	.word	0x02400002
 800b5ac:	0801ae30 	.word	0x0801ae30
 800b5b0:	02400004 	.word	0x02400004
 800b5b4:	0801ae40 	.word	0x0801ae40
 800b5b8:	02400006 	.word	0x02400006
 800b5bc:	0801ae50 	.word	0x0801ae50
 800b5c0:	42400004 	.word	0x42400004
 800b5c4:	0801ae5c 	.word	0x0801ae5c
 800b5c8:	0801ae60 	.word	0x0801ae60
 800b5cc:	0801ae64 	.word	0x0801ae64
 800b5d0:	10000004 	.word	0x10000004

0800b5d4 <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800b5da:	f000 f853 	bl	800b684 <netif_check>
  if (pnetif == NULL)
 800b5de:	b150      	cbz	r0, 800b5f6 <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800b5e0:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800b5e4:	7811      	ldrb	r1, [r2, #0]
 800b5e6:	b949      	cbnz	r1, 800b5fc <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 800b5e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b5ea:	6816      	ldr	r6, [r2, #0]
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	47b0      	blx	r6
 800b5f2:	b930      	cbnz	r0, 800b602 <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 800b5f4:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800b5f6:	f06f 0003 	mvn.w	r0, #3
 800b5fa:	e7fb      	b.n	800b5f4 <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 800b5fc:	f06f 0003 	mvn.w	r0, #3
 800b600:	e7f8      	b.n	800b5f4 <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 800b602:	f06f 001c 	mvn.w	r0, #28
  return ret;
 800b606:	e7f5      	b.n	800b5f4 <net_wifi_scan+0x20>

0800b608 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	460d      	mov	r5, r1
 800b60c:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800b60e:	f000 f839 	bl	800b684 <netif_check>
  if (pnetif == NULL)
 800b612:	b148      	cbz	r0, 800b628 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 800b614:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800b618:	7811      	ldrb	r1, [r2, #0]
 800b61a:	b941      	cbnz	r1, 800b62e <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 800b61c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b61e:	6856      	ldr	r6, [r2, #4]
 800b620:	4622      	mov	r2, r4
 800b622:	4629      	mov	r1, r5
 800b624:	47b0      	blx	r6
  }
  return ret;
}
 800b626:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 800b628:	f06f 0003 	mvn.w	r0, #3
 800b62c:	e7fb      	b.n	800b626 <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 800b62e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800b632:	e7f8      	b.n	800b626 <net_wifi_get_scan_results+0x1e>

0800b634 <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 800b634:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800b638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b63a:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 800b63c:	2000      	movs	r0, #0
 800b63e:	4770      	bx	lr

0800b640 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 800b640:	b510      	push	{r4, lr}
 800b642:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 800b644:	2300      	movs	r3, #0
 800b646:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 800b648:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 800b64a:	b110      	cbz	r0, 800b652 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 800b64c:	f7ff fefd 	bl	800b44a <net_get_ip_addr>
 800b650:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 800b652:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <net_if_find+0x40>)
 800b654:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 800b656:	2204      	movs	r2, #4
 800b658:	4669      	mov	r1, sp
 800b65a:	eb0d 0002 	add.w	r0, sp, r2
 800b65e:	f00d fb09 	bl	8018c74 <memcmp>
 800b662:	b148      	cbz	r0, 800b678 <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 800b664:	2204      	movs	r2, #4
 800b666:	eb0d 0102 	add.w	r1, sp, r2
 800b66a:	18a0      	adds	r0, r4, r2
 800b66c:	f00d fb02 	bl	8018c74 <memcmp>
 800b670:	b110      	cbz	r0, 800b678 <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 800b672:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 800b674:	2c00      	cmp	r4, #0
 800b676:	d1f5      	bne.n	800b664 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 800b678:	4620      	mov	r0, r4
 800b67a:	b002      	add	sp, #8
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	bf00      	nop
 800b680:	2400b214 	.word	0x2400b214

0800b684 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 800b684:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 800b686:	b100      	cbz	r0, 800b68a <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 800b688:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 800b68a:	2000      	movs	r0, #0
 800b68c:	f7ff ffd8 	bl	800b640 <net_if_find>
    if (pnetif == NULL)
 800b690:	e7fa      	b.n	800b688 <netif_check+0x4>

0800b692 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800b692:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800b696:	b128      	cbz	r0, 800b6a4 <net_if_notify+0x12>
{
 800b698:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 800b69a:	6804      	ldr	r4, [r0, #0]
 800b69c:	b10c      	cbz	r4, 800b6a2 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 800b69e:	6840      	ldr	r0, [r0, #4]
 800b6a0:	47a0      	blx	r4
  }
}
 800b6a2:	bd10      	pop	{r4, pc}
 800b6a4:	4770      	bx	lr

0800b6a6 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 800b6a6:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 800b6a8:	2102      	movs	r1, #2
 800b6aa:	f000 f8a6 	bl	800b7fa <net_state_manage_event>
}
 800b6ae:	bd08      	pop	{r3, pc}

0800b6b0 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 800b6b0:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 800b6b2:	2103      	movs	r1, #3
 800b6b4:	f000 f8a1 	bl	800b7fa <net_state_manage_event>
}
 800b6b8:	bd08      	pop	{r3, pc}

0800b6ba <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 800b6ba:	b508      	push	{r3, lr}
 800b6bc:	460a      	mov	r2, r1
  pnetif->state = state;
 800b6be:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f7ff ffe4 	bl	800b692 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 800b6ca:	bd08      	pop	{r3, pc}

0800b6cc <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800b6d0:	2901      	cmp	r1, #1
 800b6d2:	d004      	beq.n	800b6de <net_state_initialized+0x12>
 800b6d4:	2905      	cmp	r1, #5
 800b6d6:	d010      	beq.n	800b6fa <net_state_initialized+0x2e>
 800b6d8:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 800b6da:	4628      	mov	r0, r5
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 800b6de:	2102      	movs	r1, #2
 800b6e0:	f7ff ffeb 	bl	800b6ba <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 800b6e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4798      	blx	r3
      if (NET_OK != ret)
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d0f2      	beq.n	800b6da <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800b6f4:	f06f 0510 	mvn.w	r5, #16
 800b6f8:	e7ef      	b.n	800b6da <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 800b6fa:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	4798      	blx	r3
 800b702:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 800b704:	2100      	movs	r1, #0
 800b706:	4620      	mov	r0, r4
 800b708:	f7ff ffd7 	bl	800b6ba <set_state>
      if (NET_OK != ret)
 800b70c:	2d00      	cmp	r5, #0
 800b70e:	d0e4      	beq.n	800b6da <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800b710:	f06f 0510 	mvn.w	r5, #16
  return ret;
 800b714:	e7e1      	b.n	800b6da <net_state_initialized+0xe>

0800b716 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800b716:	2907      	cmp	r1, #7
 800b718:	d001      	beq.n	800b71e <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 800b71a:	2000      	movs	r0, #0
 800b71c:	4770      	bx	lr
{
 800b71e:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800b720:	2103      	movs	r1, #3
 800b722:	f7ff ffca 	bl	800b6ba <set_state>
}
 800b726:	2000      	movs	r0, #0
 800b728:	bd08      	pop	{r3, pc}

0800b72a <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 800b72a:	b510      	push	{r4, lr}
 800b72c:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800b72e:	2902      	cmp	r1, #2
 800b730:	d003      	beq.n	800b73a <net_state_ready+0x10>
 800b732:	2904      	cmp	r1, #4
 800b734:	d00e      	beq.n	800b754 <net_state_ready+0x2a>
 800b736:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800b738:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 800b73a:	2104      	movs	r1, #4
 800b73c:	f7ff ffbd 	bl	800b6ba <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 800b740:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	4620      	mov	r0, r4
 800b748:	4798      	blx	r3
      if (NET_OK != ret)
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0f4      	beq.n	800b738 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800b74e:	f06f 0010 	mvn.w	r0, #16
 800b752:	e7f1      	b.n	800b738 <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 800b754:	2106      	movs	r1, #6
 800b756:	f7ff ffb0 	bl	800b6ba <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 800b75a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	4620      	mov	r0, r4
 800b762:	4798      	blx	r3
      if (NET_OK != ret)
 800b764:	2800      	cmp	r0, #0
 800b766:	d0e7      	beq.n	800b738 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800b768:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800b76c:	e7e4      	b.n	800b738 <net_state_ready+0xe>

0800b76e <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 800b76e:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 800b770:	2903      	cmp	r1, #3
 800b772:	d006      	beq.n	800b782 <net_state_connecting+0x14>
 800b774:	290a      	cmp	r1, #10
 800b776:	d102      	bne.n	800b77e <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 800b778:	2105      	movs	r1, #5
 800b77a:	f7ff ff9e 	bl	800b6ba <set_state>

    default:
      break;
  }
  return ret;
}
 800b77e:	2000      	movs	r0, #0
 800b780:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 800b782:	2103      	movs	r1, #3
 800b784:	f7ff ff99 	bl	800b6ba <set_state>
      break;
 800b788:	e7f9      	b.n	800b77e <net_state_connecting+0x10>

0800b78a <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 800b78a:	b510      	push	{r4, lr}
 800b78c:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 800b78e:	2903      	cmp	r1, #3
 800b790:	d003      	beq.n	800b79a <net_state_connected+0x10>
 800b792:	2909      	cmp	r1, #9
 800b794:	d00e      	beq.n	800b7b4 <net_state_connected+0x2a>
 800b796:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 800b798:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 800b79a:	2107      	movs	r1, #7
 800b79c:	f7ff ff8d 	bl	800b6ba <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 800b7a0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4798      	blx	r3
      if (NET_OK != ret)
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0f4      	beq.n	800b798 <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 800b7ae:	f06f 0010 	mvn.w	r0, #16
  return ret;
 800b7b2:	e7f1      	b.n	800b798 <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 800b7b4:	2108      	movs	r1, #8
 800b7b6:	f7ff ff80 	bl	800b6ba <set_state>
  int32_t       ret = NET_OK;
 800b7ba:	2000      	movs	r0, #0
      break;
 800b7bc:	e7ec      	b.n	800b798 <net_state_connected+0xe>

0800b7be <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800b7be:	2907      	cmp	r1, #7
 800b7c0:	d001      	beq.n	800b7c6 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	4770      	bx	lr
{
 800b7c6:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 800b7c8:	2103      	movs	r1, #3
 800b7ca:	f7ff ff76 	bl	800b6ba <set_state>
}
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	bd08      	pop	{r3, pc}

0800b7d2 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 800b7d2:	2908      	cmp	r1, #8
 800b7d4:	d001      	beq.n	800b7da <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	4770      	bx	lr
{
 800b7da:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 800b7dc:	2105      	movs	r1, #5
 800b7de:	f7ff ff6c 	bl	800b6ba <set_state>
}
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	bd08      	pop	{r3, pc}

0800b7e6 <net_state_stopping>:
  switch (event)
 800b7e6:	2906      	cmp	r1, #6
 800b7e8:	d001      	beq.n	800b7ee <net_state_stopping+0x8>
}
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	4770      	bx	lr
{
 800b7ee:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	f7ff ff62 	bl	800b6ba <set_state>
}
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	bd08      	pop	{r3, pc}

0800b7fa <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 800b7fa:	b510      	push	{r4, lr}
 800b7fc:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 800b7fe:	f7ff ff41 	bl	800b684 <netif_check>
  if (pnetif == NULL)
 800b802:	b350      	cbz	r0, 800b85a <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 800b804:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 800b808:	3b01      	subs	r3, #1
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	d828      	bhi.n	800b860 <net_state_manage_event+0x66>
 800b80e:	e8df f003 	tbb	[pc, r3]
 800b812:	0804      	.short	0x0804
 800b814:	2014100c 	.word	0x2014100c
 800b818:	1c18      	.short	0x1c18
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7ff ff56 	bl	800b6cc <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 800b820:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 800b822:	4621      	mov	r1, r4
 800b824:	f7ff ff77 	bl	800b716 <net_state_starting>
        break;
 800b828:	e7fa      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 800b82a:	4621      	mov	r1, r4
 800b82c:	f7ff ff7d 	bl	800b72a <net_state_ready>
        break;
 800b830:	e7f6      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 800b832:	4621      	mov	r1, r4
 800b834:	f7ff ff9b 	bl	800b76e <net_state_connecting>
        break;
 800b838:	e7f2      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 800b83a:	4621      	mov	r1, r4
 800b83c:	f7ff ffa5 	bl	800b78a <net_state_connected>
        break;
 800b840:	e7ee      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 800b842:	4621      	mov	r1, r4
 800b844:	f7ff ffbb 	bl	800b7be <net_state_disconnecting>
        break;
 800b848:	e7ea      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7ff ffc1 	bl	800b7d2 <net_state_connection_lost>
        break;
 800b850:	e7e6      	b.n	800b820 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 800b852:	4621      	mov	r1, r4
 800b854:	f7ff ffc7 	bl	800b7e6 <net_state_stopping>
        break;
 800b858:	e7e2      	b.n	800b820 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 800b85a:	f06f 0003 	mvn.w	r0, #3
 800b85e:	e7df      	b.n	800b820 <net_state_manage_event+0x26>
    switch (pnetif->state)
 800b860:	f06f 001b 	mvn.w	r0, #27
  return ret;
 800b864:	e7dc      	b.n	800b820 <net_state_manage_event+0x26>

0800b866 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800b866:	8880      	ldrh	r0, [r0, #4]
 800b868:	4770      	bx	lr

0800b86a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800b86a:	b570      	push	{r4, r5, r6, lr}
 800b86c:	6803      	ldr	r3, [r0, #0]
 800b86e:	460c      	mov	r4, r1
 800b870:	2100      	movs	r1, #0
 800b872:	4605      	mov	r5, r0
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	4798      	blx	r3
 800b878:	4606      	mov	r6, r0
 800b87a:	682b      	ldr	r3, [r5, #0]
 800b87c:	4628      	mov	r0, r5
 800b87e:	1ba4      	subs	r4, r4, r6
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	b2a4      	uxth	r4, r4
 800b884:	4798      	blx	r3
 800b886:	fbb4 f0f0 	udiv	r0, r4, r0
 800b88a:	bd70      	pop	{r4, r5, r6, pc}

0800b88c <_ZN8touchgfx17AbstractPartition5clearEv>:
 800b88c:	2300      	movs	r3, #0
 800b88e:	8083      	strh	r3, [r0, #4]
 800b890:	4770      	bx	lr

0800b892 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800b892:	b510      	push	{r4, lr}
 800b894:	6803      	ldr	r3, [r0, #0]
 800b896:	4604      	mov	r4, r0
 800b898:	8881      	ldrh	r1, [r0, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	4798      	blx	r3
 800b89e:	88a3      	ldrh	r3, [r4, #4]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	80a3      	strh	r3, [r4, #4]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800b8a6:	6803      	ldr	r3, [r0, #0]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	4718      	bx	r3

0800b8ac <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800b8b0:	4a02      	ldr	r2, [pc, #8]	; (800b8bc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800b8b2:	6002      	str	r2, [r0, #0]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	8082      	strh	r2, [r0, #4]
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	0801ae8c 	.word	0x0801ae8c

0800b8c0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800b8c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b8c2:	4770      	bx	lr

0800b8c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800b8c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	b12b      	cbz	r3, 800b8d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b8ca:	b920      	cbnz	r0, 800b8d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800b8cc:	1a5a      	subs	r2, r3, r1
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	4250      	negs	r0, r2
 800b8d2:	4150      	adcs	r0, r2
 800b8d4:	e7f8      	b.n	800b8c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800b8d6:	4770      	bx	lr

0800b8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800b8d8:	2300      	movs	r3, #0
 800b8da:	6148      	str	r0, [r1, #20]
 800b8dc:	618b      	str	r3, [r1, #24]
 800b8de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8e0:	b913      	cbnz	r3, 800b8e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800b8e2:	6281      	str	r1, [r0, #40]	; 0x28
 800b8e4:	4770      	bx	lr
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	2a00      	cmp	r2, #0
 800b8ec:	d1fb      	bne.n	800b8e6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800b8ee:	6199      	str	r1, [r3, #24]
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZN8touchgfx9Container9removeAllEv>:
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8f6:	b123      	cbz	r3, 800b902 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800b8f8:	6999      	ldr	r1, [r3, #24]
 800b8fa:	6281      	str	r1, [r0, #40]	; 0x28
 800b8fc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800b900:	e7f8      	b.n	800b8f4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800b902:	4770      	bx	lr

0800b904 <_ZN8touchgfx9Container6unlinkEv>:
 800b904:	2300      	movs	r3, #0
 800b906:	6283      	str	r3, [r0, #40]	; 0x28
 800b908:	4770      	bx	lr

0800b90a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800b90a:	2200      	movs	r2, #0
 800b90c:	8002      	strh	r2, [r0, #0]
 800b90e:	8042      	strh	r2, [r0, #2]
 800b910:	8082      	strh	r2, [r0, #4]
 800b912:	80c2      	strh	r2, [r0, #6]
 800b914:	4770      	bx	lr

0800b916 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800b916:	b570      	push	{r4, r5, r6, lr}
 800b918:	460d      	mov	r5, r1
 800b91a:	4616      	mov	r6, r2
 800b91c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b91e:	b13c      	cbz	r4, 800b930 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	4620      	mov	r0, r4
 800b924:	4632      	mov	r2, r6
 800b926:	4629      	mov	r1, r5
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	4798      	blx	r3
 800b92c:	69a4      	ldr	r4, [r4, #24]
 800b92e:	e7f6      	b.n	800b91e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800b930:	bd70      	pop	{r4, r5, r6, pc}

0800b932 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800b932:	b538      	push	{r3, r4, r5, lr}
 800b934:	460d      	mov	r5, r1
 800b936:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b938:	b134      	cbz	r4, 800b948 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800b93a:	682b      	ldr	r3, [r5, #0]
 800b93c:	4621      	mov	r1, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	4798      	blx	r3
 800b944:	69a4      	ldr	r4, [r4, #24]
 800b946:	e7f7      	b.n	800b938 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800b948:	bd38      	pop	{r3, r4, r5, pc}

0800b94a <_ZNK8touchgfx9Container17invalidateContentEv>:
 800b94a:	b510      	push	{r4, lr}
 800b94c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b94e:	b12c      	cbz	r4, 800b95c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	4620      	mov	r0, r4
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	4798      	blx	r3
 800b958:	69a4      	ldr	r4, [r4, #24]
 800b95a:	e7f8      	b.n	800b94e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800b95c:	bd10      	pop	{r4, pc}

0800b95e <_ZN8touchgfx9ContainerD1Ev>:
 800b95e:	4770      	bx	lr

0800b960 <_ZN8touchgfx9ContainerD0Ev>:
 800b960:	b510      	push	{r4, lr}
 800b962:	4604      	mov	r4, r0
 800b964:	212c      	movs	r1, #44	; 0x2c
 800b966:	f00c ffde 	bl	8018926 <_ZdlPvj>
 800b96a:	4620      	mov	r0, r4
 800b96c:	bd10      	pop	{r4, pc}

0800b96e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800b96e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b970:	b19b      	cbz	r3, 800b99a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b972:	428b      	cmp	r3, r1
 800b974:	d109      	bne.n	800b98a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800b976:	699a      	ldr	r2, [r3, #24]
 800b978:	2100      	movs	r1, #0
 800b97a:	6159      	str	r1, [r3, #20]
 800b97c:	6282      	str	r2, [r0, #40]	; 0x28
 800b97e:	b902      	cbnz	r2, 800b982 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800b980:	4770      	bx	lr
 800b982:	6199      	str	r1, [r3, #24]
 800b984:	4770      	bx	lr
 800b986:	4613      	mov	r3, r2
 800b988:	b13a      	cbz	r2, 800b99a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800b98a:	699a      	ldr	r2, [r3, #24]
 800b98c:	428a      	cmp	r2, r1
 800b98e:	d1fa      	bne.n	800b986 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800b990:	698a      	ldr	r2, [r1, #24]
 800b992:	619a      	str	r2, [r3, #24]
 800b994:	2300      	movs	r3, #0
 800b996:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800b99a:	4770      	bx	lr

0800b99c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800b99c:	b410      	push	{r4}
 800b99e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	b92b      	cbnz	r3, 800b9b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800b9a4:	6803      	ldr	r3, [r0, #0]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ae:	4718      	bx	r3
 800b9b0:	b941      	cbnz	r1, 800b9c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800b9b2:	6193      	str	r3, [r2, #24]
 800b9b4:	6282      	str	r2, [r0, #40]	; 0x28
 800b9b6:	6154      	str	r4, [r2, #20]
 800b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d0f9      	beq.n	800b9b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800b9c4:	4299      	cmp	r1, r3
 800b9c6:	6998      	ldr	r0, [r3, #24]
 800b9c8:	d1f9      	bne.n	800b9be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800b9ca:	6190      	str	r0, [r2, #24]
 800b9cc:	618a      	str	r2, [r1, #24]
 800b9ce:	e7f2      	b.n	800b9b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800b9d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d4:	461f      	mov	r7, r3
 800b9d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b9da:	460d      	mov	r5, r1
 800b9dc:	4616      	mov	r6, r2
 800b9de:	b103      	cbz	r3, 800b9e2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800b9e0:	6038      	str	r0, [r7, #0]
 800b9e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b9e4:	b314      	cbz	r4, 800ba2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800b9e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800b9ea:	b1eb      	cbz	r3, 800ba28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b9ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b9f0:	428d      	cmp	r5, r1
 800b9f2:	db19      	blt.n	800ba28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800b9f4:	b289      	uxth	r1, r1
 800b9f6:	8923      	ldrh	r3, [r4, #8]
 800b9f8:	440b      	add	r3, r1
 800b9fa:	b21b      	sxth	r3, r3
 800b9fc:	429d      	cmp	r5, r3
 800b9fe:	da13      	bge.n	800ba28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ba00:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ba04:	4296      	cmp	r6, r2
 800ba06:	db0f      	blt.n	800ba28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ba08:	b292      	uxth	r2, r2
 800ba0a:	8963      	ldrh	r3, [r4, #10]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b21b      	sxth	r3, r3
 800ba10:	429e      	cmp	r6, r3
 800ba12:	da09      	bge.n	800ba28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	1ab2      	subs	r2, r6, r2
 800ba18:	1a69      	subs	r1, r5, r1
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800ba20:	b212      	sxth	r2, r2
 800ba22:	463b      	mov	r3, r7
 800ba24:	b209      	sxth	r1, r1
 800ba26:	47c0      	blx	r8
 800ba28:	69a4      	ldr	r4, [r4, #24]
 800ba2a:	e7db      	b.n	800b9e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4c6d      	ldr	r4, [pc, #436]	; (800bbec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ba36:	b0a1      	sub	sp, #132	; 0x84
 800ba38:	4606      	mov	r6, r0
 800ba3a:	6824      	ldr	r4, [r4, #0]
 800ba3c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ba3e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800ba42:	2400      	movs	r4, #0
 800ba44:	9303      	str	r3, [sp, #12]
 800ba46:	802c      	strh	r4, [r5, #0]
 800ba48:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ba4a:	802c      	strh	r4, [r5, #0]
 800ba4c:	601c      	str	r4, [r3, #0]
 800ba4e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ba52:	f7ff ffbd 	bl	800b9d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ba56:	f1b9 0f03 	cmp.w	r9, #3
 800ba5a:	f340 80c1 	ble.w	800bbe0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	a80c      	add	r0, sp, #48	; 0x30
 800ba62:	f003 fa6f 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ba66:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ba6a:	9306      	str	r3, [sp, #24]
 800ba6c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800ba70:	9307      	str	r3, [sp, #28]
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	f8d3 a000 	ldr.w	sl, [r3]
 800ba78:	f1ba 0f00 	cmp.w	sl, #0
 800ba7c:	f000 80b3 	beq.w	800bbe6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ba80:	4651      	mov	r1, sl
 800ba82:	a810      	add	r0, sp, #64	; 0x40
 800ba84:	f003 fa5e 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ba88:	2002      	movs	r0, #2
 800ba8a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	9a06      	ldr	r2, [sp, #24]
 800ba92:	fb91 f1f0 	sdiv	r1, r1, r0
 800ba96:	189d      	adds	r5, r3, r2
 800ba98:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800ba9c:	9a07      	ldr	r2, [sp, #28]
 800ba9e:	4419      	add	r1, r3
 800baa0:	9b02      	ldr	r3, [sp, #8]
 800baa2:	4413      	add	r3, r2
 800baa4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800baa8:	1a6d      	subs	r5, r5, r1
 800baaa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800baae:	fb92 f2f0 	sdiv	r2, r2, r0
 800bab2:	440a      	add	r2, r1
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	435b      	muls	r3, r3
 800bab8:	fb05 3505 	mla	r5, r5, r5, r3
 800babc:	4f4c      	ldr	r7, [pc, #304]	; (800bbf0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800babe:	ac10      	add	r4, sp, #64	; 0x40
 800bac0:	f1b9 0f0c 	cmp.w	r9, #12
 800bac4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bac8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800baca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bacc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bad0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800bad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bad8:	f04f 0303 	mov.w	r3, #3
 800badc:	bfd8      	it	le
 800bade:	f109 32ff 	addle.w	r2, r9, #4294967295
 800bae2:	f04f 0400 	mov.w	r4, #0
 800bae6:	f8cd 9000 	str.w	r9, [sp]
 800baea:	bfcc      	ite	gt
 800baec:	4698      	movgt	r8, r3
 800baee:	fb92 f8f3 	sdivle	r8, r2, r3
 800baf2:	1c63      	adds	r3, r4, #1
 800baf4:	aa10      	add	r2, sp, #64	; 0x40
 800baf6:	f004 0401 	and.w	r4, r4, #1
 800bafa:	f04f 0b00 	mov.w	fp, #0
 800bafe:	9308      	str	r3, [sp, #32]
 800bb00:	9b00      	ldr	r3, [sp, #0]
 800bb02:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800bb06:	fb93 f3f8 	sdiv	r3, r3, r8
 800bb0a:	3404      	adds	r4, #4
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	9a04      	ldr	r2, [sp, #16]
 800bb12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb16:	fb13 f302 	smulbb	r3, r3, r2
 800bb1a:	9a01      	ldr	r2, [sp, #4]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	1899      	adds	r1, r3, r2
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800bb26:	b209      	sxth	r1, r1
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	db4d      	blt.n	800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb2c:	8932      	ldrh	r2, [r6, #8]
 800bb2e:	4413      	add	r3, r2
 800bb30:	b21b      	sxth	r3, r3
 800bb32:	4299      	cmp	r1, r3
 800bb34:	da48      	bge.n	800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	6827      	ldr	r7, [r4, #0]
 800bb3a:	fb17 f703 	smulbb	r7, r7, r3
 800bb3e:	9b02      	ldr	r3, [sp, #8]
 800bb40:	b2bf      	uxth	r7, r7
 800bb42:	18fa      	adds	r2, r7, r3
 800bb44:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800bb48:	b212      	sxth	r2, r2
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	db3c      	blt.n	800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb4e:	8970      	ldrh	r0, [r6, #10]
 800bb50:	4403      	add	r3, r0
 800bb52:	b21b      	sxth	r3, r3
 800bb54:	429a      	cmp	r2, r3
 800bb56:	da37      	bge.n	800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb5e:	ab0b      	add	r3, sp, #44	; 0x2c
 800bb60:	f7ff ff36 	bl	800b9d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800bb64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb66:	b37a      	cbz	r2, 800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb68:	4552      	cmp	r2, sl
 800bb6a:	d02d      	beq.n	800bbc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	a80e      	add	r0, sp, #56	; 0x38
 800bb70:	9209      	str	r2, [sp, #36]	; 0x24
 800bb72:	f003 f9e7 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bb76:	f04f 0e02 	mov.w	lr, #2
 800bb7a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800bb7e:	9a06      	ldr	r2, [sp, #24]
 800bb80:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800bb8a:	4413      	add	r3, r2
 800bb8c:	9a07      	ldr	r2, [sp, #28]
 800bb8e:	fb91 f1fe 	sdiv	r1, r1, lr
 800bb92:	fb9c fcfe 	sdiv	ip, ip, lr
 800bb96:	4401      	add	r1, r0
 800bb98:	1a58      	subs	r0, r3, r1
 800bb9a:	9b02      	ldr	r3, [sp, #8]
 800bb9c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800bba0:	4413      	add	r3, r2
 800bba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba4:	448c      	add	ip, r1
 800bba6:	eba3 030c 	sub.w	r3, r3, ip
 800bbaa:	435b      	muls	r3, r3
 800bbac:	fb00 3300 	mla	r3, r0, r0, r3
 800bbb0:	42ab      	cmp	r3, r5
 800bbb2:	d208      	bcs.n	800bbc6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800bbb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbb6:	461d      	mov	r5, r3
 800bbb8:	9803      	ldr	r0, [sp, #12]
 800bbba:	6001      	str	r1, [r0, #0]
 800bbbc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800bbbe:	9805      	ldr	r0, [sp, #20]
 800bbc0:	8008      	strh	r0, [r1, #0]
 800bbc2:	992b      	ldr	r1, [sp, #172]	; 0xac
 800bbc4:	800f      	strh	r7, [r1, #0]
 800bbc6:	4692      	mov	sl, r2
 800bbc8:	f10b 0b01 	add.w	fp, fp, #1
 800bbcc:	3408      	adds	r4, #8
 800bbce:	f1bb 0f04 	cmp.w	fp, #4
 800bbd2:	d19d      	bne.n	800bb10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800bbd4:	9b00      	ldr	r3, [sp, #0]
 800bbd6:	9c08      	ldr	r4, [sp, #32]
 800bbd8:	444b      	add	r3, r9
 800bbda:	4544      	cmp	r4, r8
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	d188      	bne.n	800baf2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800bbe0:	b021      	add	sp, #132	; 0x84
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	f04f 35ff 	mov.w	r5, #4294967295
 800bbea:	e767      	b.n	800babc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800bbec:	2400b224 	.word	0x2400b224
 800bbf0:	08019bf4 	.word	0x08019bf4

0800bbf4 <_ZN8touchgfx4RectaNERKS0_>:
 800bbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbf8:	f9b1 7000 	ldrsh.w	r7, [r1]
 800bbfc:	888c      	ldrh	r4, [r1, #4]
 800bbfe:	f9b0 9000 	ldrsh.w	r9, [r0]
 800bc02:	443c      	add	r4, r7
 800bc04:	b2a4      	uxth	r4, r4
 800bc06:	fa0f f884 	sxth.w	r8, r4
 800bc0a:	45c1      	cmp	r9, r8
 800bc0c:	da2f      	bge.n	800bc6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bc0e:	8882      	ldrh	r2, [r0, #4]
 800bc10:	444a      	add	r2, r9
 800bc12:	b292      	uxth	r2, r2
 800bc14:	fa0f fe82 	sxth.w	lr, r2
 800bc18:	4577      	cmp	r7, lr
 800bc1a:	da28      	bge.n	800bc6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bc1c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800bc20:	88cb      	ldrh	r3, [r1, #6]
 800bc22:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800bc26:	442b      	add	r3, r5
 800bc28:	b21b      	sxth	r3, r3
 800bc2a:	429e      	cmp	r6, r3
 800bc2c:	da1f      	bge.n	800bc6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bc2e:	88c3      	ldrh	r3, [r0, #6]
 800bc30:	4433      	add	r3, r6
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	fa0f fc83 	sxth.w	ip, r3
 800bc38:	4565      	cmp	r5, ip
 800bc3a:	da18      	bge.n	800bc6e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800bc3c:	454f      	cmp	r7, r9
 800bc3e:	bfb8      	it	lt
 800bc40:	464f      	movlt	r7, r9
 800bc42:	42b5      	cmp	r5, r6
 800bc44:	bfb8      	it	lt
 800bc46:	4635      	movlt	r5, r6
 800bc48:	45f0      	cmp	r8, lr
 800bc4a:	bfd8      	it	le
 800bc4c:	4622      	movle	r2, r4
 800bc4e:	1bd2      	subs	r2, r2, r7
 800bc50:	8082      	strh	r2, [r0, #4]
 800bc52:	884a      	ldrh	r2, [r1, #2]
 800bc54:	88c9      	ldrh	r1, [r1, #6]
 800bc56:	8007      	strh	r7, [r0, #0]
 800bc58:	440a      	add	r2, r1
 800bc5a:	8045      	strh	r5, [r0, #2]
 800bc5c:	b292      	uxth	r2, r2
 800bc5e:	b211      	sxth	r1, r2
 800bc60:	458c      	cmp	ip, r1
 800bc62:	bfa8      	it	ge
 800bc64:	4613      	movge	r3, r2
 800bc66:	1b5b      	subs	r3, r3, r5
 800bc68:	80c3      	strh	r3, [r0, #6]
 800bc6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc6e:	2300      	movs	r3, #0
 800bc70:	8003      	strh	r3, [r0, #0]
 800bc72:	8043      	strh	r3, [r0, #2]
 800bc74:	8083      	strh	r3, [r0, #4]
 800bc76:	80c3      	strh	r3, [r0, #6]
 800bc78:	e7f7      	b.n	800bc6a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800bc7a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	dd06      	ble.n	800bc90 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800bc82:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800bc86:	2800      	cmp	r0, #0
 800bc88:	bfcc      	ite	gt
 800bc8a:	2000      	movgt	r0, #0
 800bc8c:	2001      	movle	r0, #1
 800bc8e:	4770      	bx	lr
 800bc90:	2001      	movs	r0, #1
 800bc92:	4770      	bx	lr

0800bc94 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800bc9e:	8003      	strh	r3, [r0, #0]
 800bca0:	8043      	strh	r3, [r0, #2]
 800bca2:	8083      	strh	r3, [r0, #4]
 800bca4:	80c3      	strh	r3, [r0, #6]
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	d040      	beq.n	800bd2c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800bcaa:	1d28      	adds	r0, r5, #4
 800bcac:	f7ff ffe5 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bcb0:	b988      	cbnz	r0, 800bcd6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7ff ffe1 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bcb8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800bcbc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800bcc0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800bcc4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800bcc8:	b138      	cbz	r0, 800bcda <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800bcca:	8022      	strh	r2, [r4, #0]
 800bccc:	8063      	strh	r3, [r4, #2]
 800bcce:	f8a4 e004 	strh.w	lr, [r4, #4]
 800bcd2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800bcd6:	69ad      	ldr	r5, [r5, #24]
 800bcd8:	e7e5      	b.n	800bca6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800bcda:	f9b4 0000 	ldrsh.w	r0, [r4]
 800bcde:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800bce2:	4290      	cmp	r0, r2
 800bce4:	4607      	mov	r7, r0
 800bce6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800bcea:	460e      	mov	r6, r1
 800bcec:	bfa8      	it	ge
 800bcee:	4617      	movge	r7, r2
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	4472      	add	r2, lr
 800bcf4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800bcf8:	bfa8      	it	ge
 800bcfa:	461e      	movge	r6, r3
 800bcfc:	4440      	add	r0, r8
 800bcfe:	4471      	add	r1, lr
 800bd00:	4463      	add	r3, ip
 800bd02:	b200      	sxth	r0, r0
 800bd04:	8027      	strh	r7, [r4, #0]
 800bd06:	b212      	sxth	r2, r2
 800bd08:	8066      	strh	r6, [r4, #2]
 800bd0a:	b209      	sxth	r1, r1
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	4290      	cmp	r0, r2
 800bd10:	bfac      	ite	ge
 800bd12:	ebc7 0200 	rsbge	r2, r7, r0
 800bd16:	ebc7 0202 	rsblt	r2, r7, r2
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	bfac      	ite	ge
 800bd1e:	ebc6 0301 	rsbge	r3, r6, r1
 800bd22:	ebc6 0303 	rsblt	r3, r6, r3
 800bd26:	80a2      	strh	r2, [r4, #4]
 800bd28:	80e3      	strh	r3, [r4, #6]
 800bd2a:	e7d4      	b.n	800bcd6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd32 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800bd32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd36:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800bd3a:	b383      	cbz	r3, 800bd9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800bd3c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bd3e:	b374      	cbz	r4, 800bd9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800bd40:	f9b1 5000 	ldrsh.w	r5, [r1]
 800bd44:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800bd48:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800bd4c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800bd50:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800bd54:	b303      	cbz	r3, 800bd98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800bd56:	4668      	mov	r0, sp
 800bd58:	1d21      	adds	r1, r4, #4
 800bd5a:	f8ad 5000 	strh.w	r5, [sp]
 800bd5e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800bd62:	f8ad 7004 	strh.w	r7, [sp, #4]
 800bd66:	f8ad 8006 	strh.w	r8, [sp, #6]
 800bd6a:	f7ff ff43 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800bd6e:	4668      	mov	r0, sp
 800bd70:	f7ff ff83 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bd74:	b980      	cbnz	r0, 800bd98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800bd76:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd7a:	4669      	mov	r1, sp
 800bd7c:	88a2      	ldrh	r2, [r4, #4]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	1a9b      	subs	r3, r3, r2
 800bd82:	88e2      	ldrh	r2, [r4, #6]
 800bd84:	f8ad 3000 	strh.w	r3, [sp]
 800bd88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bd8c:	1a9b      	subs	r3, r3, r2
 800bd8e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4798      	blx	r3
 800bd98:	69a4      	ldr	r4, [r4, #24]
 800bd9a:	2c00      	cmp	r4, #0
 800bd9c:	d1d8      	bne.n	800bd50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800bd9e:	b002      	add	sp, #8
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bda4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800bda4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800bdaa:	460d      	mov	r5, r1
 800bdac:	4616      	mov	r6, r2
 800bdae:	b323      	cbz	r3, 800bdfa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800bdb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bdb2:	b314      	cbz	r4, 800bdfa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800bdb4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800bdb8:	b1eb      	cbz	r3, 800bdf6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800bdba:	6828      	ldr	r0, [r5, #0]
 800bdbc:	466b      	mov	r3, sp
 800bdbe:	6869      	ldr	r1, [r5, #4]
 800bdc0:	c303      	stmia	r3!, {r0, r1}
 800bdc2:	4668      	mov	r0, sp
 800bdc4:	1d21      	adds	r1, r4, #4
 800bdc6:	f7ff ff15 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800bdca:	4668      	mov	r0, sp
 800bdcc:	f7ff ff55 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800bdd0:	b988      	cbnz	r0, 800bdf6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800bdd2:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdd6:	4669      	mov	r1, sp
 800bdd8:	88a2      	ldrh	r2, [r4, #4]
 800bdda:	4620      	mov	r0, r4
 800bddc:	1a9b      	subs	r3, r3, r2
 800bdde:	88e2      	ldrh	r2, [r4, #6]
 800bde0:	f8ad 3000 	strh.w	r3, [sp]
 800bde4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bde8:	1a9b      	subs	r3, r3, r2
 800bdea:	4632      	mov	r2, r6
 800bdec:	f8ad 3002 	strh.w	r3, [sp, #2]
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf4:	4798      	blx	r3
 800bdf6:	69a4      	ldr	r4, [r4, #24]
 800bdf8:	e7db      	b.n	800bdb2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800bdfa:	b002      	add	sp, #8
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}

0800bdfe <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800bdfe:	4770      	bx	lr

0800be00 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800be00:	4770      	bx	lr

0800be02 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800be02:	6803      	ldr	r3, [r0, #0]
 800be04:	b513      	push	{r0, r1, r4, lr}
 800be06:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800be0a:	2300      	movs	r3, #0
 800be0c:	e9cd 3300 	strd	r3, r3, [sp]
 800be10:	466b      	mov	r3, sp
 800be12:	47a0      	blx	r4
 800be14:	b002      	add	sp, #8
 800be16:	bd10      	pop	{r4, pc}

0800be18 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800be18:	2301      	movs	r3, #1
 800be1a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800be1e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800be22:	4770      	bx	lr

0800be24 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800be24:	2301      	movs	r3, #1
 800be26:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800be2a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800be2e:	4770      	bx	lr

0800be30 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800be30:	6843      	ldr	r3, [r0, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	725a      	strb	r2, [r3, #9]
 800be36:	6840      	ldr	r0, [r0, #4]
 800be38:	6803      	ldr	r3, [r0, #0]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	4718      	bx	r3

0800be3e <_ZN8touchgfx3HAL8flushDMAEv>:
 800be3e:	6840      	ldr	r0, [r0, #4]
 800be40:	6803      	ldr	r3, [r0, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	4718      	bx	r3

0800be46 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800be46:	b530      	push	{r4, r5, lr}
 800be48:	b08b      	sub	sp, #44	; 0x2c
 800be4a:	6804      	ldr	r4, [r0, #0]
 800be4c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800be50:	9509      	str	r5, [sp, #36]	; 0x24
 800be52:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800be56:	9508      	str	r5, [sp, #32]
 800be58:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800be5c:	9507      	str	r5, [sp, #28]
 800be5e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800be62:	9506      	str	r5, [sp, #24]
 800be64:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800be68:	9505      	str	r5, [sp, #20]
 800be6a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800be6e:	9504      	str	r5, [sp, #16]
 800be70:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800be74:	9503      	str	r5, [sp, #12]
 800be76:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800be7a:	9502      	str	r5, [sp, #8]
 800be7c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800be80:	e9cd 3500 	strd	r3, r5, [sp]
 800be84:	4613      	mov	r3, r2
 800be86:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800be88:	2200      	movs	r2, #0
 800be8a:	47a0      	blx	r4
 800be8c:	b00b      	add	sp, #44	; 0x2c
 800be8e:	bd30      	pop	{r4, r5, pc}

0800be90 <_ZN8touchgfx3HAL10beginFrameEv>:
 800be90:	4b04      	ldr	r3, [pc, #16]	; (800bea4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b123      	cbz	r3, 800bea0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800be96:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800be9a:	f080 0001 	eor.w	r0, r0, #1
 800be9e:	4770      	bx	lr
 800bea0:	2001      	movs	r0, #1
 800bea2:	4770      	bx	lr
 800bea4:	2400b222 	.word	0x2400b222

0800bea8 <_ZN8touchgfx3HAL8endFrameEv>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	4604      	mov	r4, r0
 800beac:	6840      	ldr	r0, [r0, #4]
 800beae:	6803      	ldr	r3, [r0, #0]
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	4798      	blx	r3
 800beb4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800beb8:	b113      	cbz	r3, 800bec0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800beba:	2301      	movs	r3, #1
 800bebc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800bec0:	bd10      	pop	{r4, pc}

0800bec2 <_ZN8touchgfx3HAL10initializeEv>:
 800bec2:	b510      	push	{r4, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	f7f4 fccf 	bl	8000868 <_ZN8touchgfx10OSWrappers10initializeEv>
 800beca:	6860      	ldr	r0, [r4, #4]
 800becc:	6803      	ldr	r3, [r0, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	4798      	blx	r3
 800bed2:	68e0      	ldr	r0, [r4, #12]
 800bed4:	6803      	ldr	r3, [r0, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	4798      	blx	r3
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	4620      	mov	r0, r4
 800bede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee4:	4718      	bx	r3

0800bee6 <_ZN8touchgfx3HAL9taskEntryEv>:
 800bee6:	b508      	push	{r3, lr}
 800bee8:	6803      	ldr	r3, [r0, #0]
 800beea:	4604      	mov	r4, r0
 800beec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bef0:	4798      	blx	r3
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bef6:	4620      	mov	r0, r4
 800bef8:	4798      	blx	r3
 800befa:	f7f4 fd11 	bl	8000920 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf02:	e7f8      	b.n	800bef6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800bf04 <_ZN8touchgfx3HAL4tickEv>:
 800bf04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bf06:	6803      	ldr	r3, [r0, #0]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4d5b      	ldr	r5, [pc, #364]	; (800c078 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800bf0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf10:	4798      	blx	r3
 800bf12:	2800      	cmp	r0, #0
 800bf14:	f000 8095 	beq.w	800c042 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800bf18:	2001      	movs	r0, #1
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	f7f4 faca 	bl	80004b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800bf20:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800bf24:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800bf28:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800bf2c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800bf30:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800bf34:	b133      	cbz	r3, 800bf44 <_ZN8touchgfx3HAL4tickEv+0x40>
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bf3e:	4798      	blx	r3
 800bf40:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800bf44:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800bf48:	2601      	movs	r6, #1
 800bf4a:	6862      	ldr	r2, [r4, #4]
 800bf4c:	f083 0301 	eor.w	r3, r3, #1
 800bf50:	702e      	strb	r6, [r5, #0]
 800bf52:	7253      	strb	r3, [r2, #9]
 800bf54:	f001 ffc2 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 800bf58:	6803      	ldr	r3, [r0, #0]
 800bf5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5c:	4798      	blx	r3
 800bf5e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800bf62:	b90b      	cbnz	r3, 800bf68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800bf64:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800bf68:	f001 ffb8 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 800bf6c:	6803      	ldr	r3, [r0, #0]
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	4798      	blx	r3
 800bf72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf74:	6803      	ldr	r3, [r0, #0]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	4798      	blx	r3
 800bf7a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800bf7e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800bf82:	3b01      	subs	r3, #1
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800bf8a:	b10a      	cbz	r2, 800bf90 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1eb      	bne.n	800bf68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800bf90:	4a3a      	ldr	r2, [pc, #232]	; (800c07c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800bf92:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800bf96:	7813      	ldrb	r3, [r2, #0]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	b25b      	sxtb	r3, r3
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	7013      	strb	r3, [r2, #0]
 800bfa0:	dc10      	bgt.n	800bfc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	68e0      	ldr	r0, [r4, #12]
 800bfa6:	a902      	add	r1, sp, #8
 800bfa8:	7013      	strb	r3, [r2, #0]
 800bfaa:	aa03      	add	r2, sp, #12
 800bfac:	6803      	ldr	r3, [r0, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	4798      	blx	r3
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d050      	beq.n	800c05a <_ZN8touchgfx3HAL4tickEv+0x156>
 800bfb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bfc2:	4798      	blx	r3
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	6960      	ldr	r0, [r4, #20]
 800bfc8:	f88d 3007 	strb.w	r3, [sp, #7]
 800bfcc:	b158      	cbz	r0, 800bfe6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800bfce:	6803      	ldr	r3, [r0, #0]
 800bfd0:	f10d 0107 	add.w	r1, sp, #7
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	4798      	blx	r3
 800bfd8:	b128      	cbz	r0, 800bfe6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800bfda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bfe0:	6803      	ldr	r3, [r0, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	4798      	blx	r3
 800bfe6:	f104 001c 	add.w	r0, r4, #28
 800bfea:	f00c fbe7 	bl	80187bc <_ZN8touchgfx8Gestures4tickEv>
 800bfee:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800bff2:	b30b      	cbz	r3, 800c038 <_ZN8touchgfx3HAL4tickEv+0x134>
 800bff4:	6920      	ldr	r0, [r4, #16]
 800bff6:	6803      	ldr	r3, [r0, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	4798      	blx	r3
 800bffc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bffe:	4606      	mov	r6, r0
 800c000:	b903      	cbnz	r3, 800c004 <_ZN8touchgfx3HAL4tickEv+0x100>
 800c002:	6720      	str	r0, [r4, #112]	; 0x70
 800c004:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c006:	4a1e      	ldr	r2, [pc, #120]	; (800c080 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c008:	1af3      	subs	r3, r6, r3
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d914      	bls.n	800c038 <_ZN8touchgfx3HAL4tickEv+0x134>
 800c00e:	6920      	ldr	r0, [r4, #16]
 800c010:	6803      	ldr	r3, [r0, #0]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	4798      	blx	r3
 800c016:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c018:	2264      	movs	r2, #100	; 0x64
 800c01a:	1af3      	subs	r3, r6, r3
 800c01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c020:	fbb0 f0f3 	udiv	r0, r0, r3
 800c024:	2800      	cmp	r0, #0
 800c026:	dc1d      	bgt.n	800c064 <_ZN8touchgfx3HAL4tickEv+0x160>
 800c028:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800c02c:	6920      	ldr	r0, [r4, #16]
 800c02e:	2100      	movs	r1, #0
 800c030:	6803      	ldr	r3, [r0, #0]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	4798      	blx	r3
 800c036:	6726      	str	r6, [r4, #112]	; 0x70
 800c038:	f001 ff50 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 800c03c:	6803      	ldr	r3, [r0, #0]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	4798      	blx	r3
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	4620      	mov	r0, r4
 800c046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c04a:	4798      	blx	r3
 800c04c:	2001      	movs	r0, #1
 800c04e:	f7f4 fa6f 	bl	8000530 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c052:	2300      	movs	r3, #0
 800c054:	702b      	strb	r3, [r5, #0]
 800c056:	b004      	add	sp, #16
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c05e:	4620      	mov	r0, r4
 800c060:	4798      	blx	r3
 800c062:	e7af      	b.n	800bfc4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c064:	2863      	cmp	r0, #99	; 0x63
 800c066:	bfcb      	itete	gt
 800c068:	2300      	movgt	r3, #0
 800c06a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800c06e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800c072:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800c076:	e7d9      	b.n	800c02c <_ZN8touchgfx3HAL4tickEv+0x128>
 800c078:	2400b228 	.word	0x2400b228
 800c07c:	2400b229 	.word	0x2400b229
 800c080:	05f5e100 	.word	0x05f5e100

0800c084 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800c084:	f7f4 bc24 	b.w	80008d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c088 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800c088:	6581      	str	r1, [r0, #88]	; 0x58
 800c08a:	301c      	adds	r0, #28
 800c08c:	f00c bb94 	b.w	80187b8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800c090 <_ZN8touchgfx3HAL5touchEll>:
 800c090:	b530      	push	{r4, r5, lr}
 800c092:	b087      	sub	sp, #28
 800c094:	4604      	mov	r4, r0
 800c096:	a804      	add	r0, sp, #16
 800c098:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c09c:	f001 fc9a 	bl	800d9d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	a906      	add	r1, sp, #24
 800c0a4:	a803      	add	r0, sp, #12
 800c0a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c0aa:	9b05      	ldr	r3, [sp, #20]
 800c0ac:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800c0b0:	f001 fce2 	bl	800da78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800c0b4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800c0b8:	f104 001c 	add.w	r0, r4, #28
 800c0bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c0c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c0c4:	b189      	cbz	r1, 800c0ea <_ZN8touchgfx3HAL5touchEll+0x5a>
 800c0c6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	f00c fb80 	bl	80187d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800c0d8:	b128      	cbz	r0, 800c0e6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800c0da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c0de:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c0e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c0e4:	6623      	str	r3, [r4, #96]	; 0x60
 800c0e6:	b007      	add	sp, #28
 800c0e8:	bd30      	pop	{r4, r5, pc}
 800c0ea:	f00c fbb5 	bl	8018858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c0f4:	e7f1      	b.n	800c0da <_ZN8touchgfx3HAL5touchEll+0x4a>

0800c0f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d046      	beq.n	800c18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c0fc:	ea81 0002 	eor.w	r0, r1, r2
 800c100:	07c4      	lsls	r4, r0, #31
 800c102:	d508      	bpl.n	800c116 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800c104:	440b      	add	r3, r1
 800c106:	3a01      	subs	r2, #1
 800c108:	428b      	cmp	r3, r1
 800c10a:	d93e      	bls.n	800c18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c10c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c110:	f801 0b01 	strb.w	r0, [r1], #1
 800c114:	e7f8      	b.n	800c108 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800c116:	07d0      	lsls	r0, r2, #31
 800c118:	bf42      	ittt	mi
 800c11a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800c11e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c122:	f801 0b01 	strbmi.w	r0, [r1], #1
 800c126:	2b01      	cmp	r3, #1
 800c128:	d911      	bls.n	800c14e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c12a:	ea81 0402 	eor.w	r4, r1, r2
 800c12e:	4610      	mov	r0, r2
 800c130:	07a4      	lsls	r4, r4, #30
 800c132:	d022      	beq.n	800c17a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800c134:	f023 0401 	bic.w	r4, r3, #1
 800c138:	440c      	add	r4, r1
 800c13a:	428c      	cmp	r4, r1
 800c13c:	4602      	mov	r2, r0
 800c13e:	d904      	bls.n	800c14a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800c140:	8812      	ldrh	r2, [r2, #0]
 800c142:	3002      	adds	r0, #2
 800c144:	f821 2b02 	strh.w	r2, [r1], #2
 800c148:	e7f7      	b.n	800c13a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	f023 0003 	bic.w	r0, r3, #3
 800c152:	4408      	add	r0, r1
 800c154:	4288      	cmp	r0, r1
 800c156:	4614      	mov	r4, r2
 800c158:	d904      	bls.n	800c164 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800c15a:	6824      	ldr	r4, [r4, #0]
 800c15c:	3204      	adds	r2, #4
 800c15e:	f841 4b04 	str.w	r4, [r1], #4
 800c162:	e7f7      	b.n	800c154 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800c164:	f003 0303 	and.w	r3, r3, #3
 800c168:	3a01      	subs	r2, #1
 800c16a:	440b      	add	r3, r1
 800c16c:	428b      	cmp	r3, r1
 800c16e:	d90c      	bls.n	800c18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c170:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c174:	f801 0b01 	strb.w	r0, [r1], #1
 800c178:	e7f8      	b.n	800c16c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800c17a:	0790      	lsls	r0, r2, #30
 800c17c:	d0e7      	beq.n	800c14e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c17e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c182:	3b02      	subs	r3, #2
 800c184:	f821 0b02 	strh.w	r0, [r1], #2
 800c188:	e7e1      	b.n	800c14e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c18a:	2001      	movs	r0, #1
 800c18c:	bd10      	pop	{r4, pc}

0800c18e <_ZN8touchgfx3HAL7noTouchEv>:
 800c18e:	b510      	push	{r4, lr}
 800c190:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800c194:	4604      	mov	r4, r0
 800c196:	b153      	cbz	r3, 800c1ae <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800c198:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800c19c:	2101      	movs	r1, #1
 800c19e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800c1a2:	301c      	adds	r0, #28
 800c1a4:	f00c fb58 	bl	8018858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c1ae:	bd10      	pop	{r4, pc}

0800c1b0 <_ZN8touchgfx8Drawable5setXYEss>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	6803      	ldr	r3, [r0, #0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	4615      	mov	r5, r2
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	4798      	blx	r3
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1c8:	4718      	bx	r3
	...

0800c1cc <_ZN8touchgfx3HAL3lcdEv>:
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c1d4:	b10a      	cbz	r2, 800c1da <_ZN8touchgfx3HAL3lcdEv+0xe>
 800c1d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c1d8:	b900      	cbnz	r0, 800c1dc <_ZN8touchgfx3HAL3lcdEv+0x10>
 800c1da:	6898      	ldr	r0, [r3, #8]
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	2400b224 	.word	0x2400b224

0800c1e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800c1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	4699      	mov	r9, r3
 800c1f0:	ad04      	add	r5, sp, #16
 800c1f2:	460f      	mov	r7, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c1fa:	69a0      	ldr	r0, [r4, #24]
 800c1fc:	6806      	ldr	r6, [r0, #0]
 800c1fe:	9501      	str	r5, [sp, #4]
 800c200:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800c204:	9500      	str	r5, [sp, #0]
 800c206:	6835      	ldr	r5, [r6, #0]
 800c208:	47a8      	blx	r5
 800c20a:	4d10      	ldr	r5, [pc, #64]	; (800c24c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800c20c:	4606      	mov	r6, r0
 800c20e:	f8a5 9000 	strh.w	r9, [r5]
 800c212:	f7ff ffdb 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c216:	6803      	ldr	r3, [r0, #0]
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	4798      	blx	r3
 800c21c:	b128      	cbz	r0, 800c22a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800c21e:	2801      	cmp	r0, #1
 800c220:	d00b      	beq.n	800c23a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800c222:	4630      	mov	r0, r6
 800c224:	b005      	add	sp, #20
 800c226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c22a:	882b      	ldrh	r3, [r5, #0]
 800c22c:	fb08 7203 	mla	r2, r8, r3, r7
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800c236:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c238:	e7f3      	b.n	800c222 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c23a:	882a      	ldrh	r2, [r5, #0]
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	fb08 7202 	mla	r2, r8, r2, r7
 800c242:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c246:	1a9a      	subs	r2, r3, r2
 800c248:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c24a:	e7ea      	b.n	800c222 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c24c:	2400b21e 	.word	0x2400b21e

0800c250 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800c250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c252:	b08b      	sub	sp, #44	; 0x2c
 800c254:	4617      	mov	r7, r2
 800c256:	4604      	mov	r4, r0
 800c258:	460e      	mov	r6, r1
 800c25a:	461d      	mov	r5, r3
 800c25c:	f7ff ffb6 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c260:	6803      	ldr	r3, [r0, #0]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	4798      	blx	r3
 800c266:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c26a:	9007      	str	r0, [sp, #28]
 800c26c:	4631      	mov	r1, r6
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c274:	4b0c      	ldr	r3, [pc, #48]	; (800c2a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800c276:	4620      	mov	r0, r4
 800c278:	881b      	ldrh	r3, [r3, #0]
 800c27a:	9306      	str	r3, [sp, #24]
 800c27c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c280:	9305      	str	r3, [sp, #20]
 800c282:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c28c:	9303      	str	r3, [sp, #12]
 800c28e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c292:	9302      	str	r3, [sp, #8]
 800c294:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c298:	e9cd 5300 	strd	r5, r3, [sp]
 800c29c:	463b      	mov	r3, r7
 800c29e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	47a8      	blx	r5
 800c2a4:	b00b      	add	sp, #44	; 0x2c
 800c2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a8:	2400b21e 	.word	0x2400b21e

0800c2ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800c2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4698      	mov	r8, r3
 800c2b2:	6803      	ldr	r3, [r0, #0]
 800c2b4:	b08b      	sub	sp, #44	; 0x2c
 800c2b6:	4617      	mov	r7, r2
 800c2b8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800c2be:	4604      	mov	r4, r0
 800c2c0:	f8b3 9000 	ldrh.w	r9, [r3]
 800c2c4:	f7ff ff82 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c2c8:	6803      	ldr	r3, [r0, #0]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	4798      	blx	r3
 800c2ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c2da:	2302      	movs	r3, #2
 800c2dc:	4620      	mov	r0, r4
 800c2de:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c2fc:	e9cd 8300 	strd	r8, r3, [sp]
 800c300:	463b      	mov	r3, r7
 800c302:	47a8      	blx	r5
 800c304:	b00b      	add	sp, #44	; 0x2c
 800c306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30a:	bf00      	nop
 800c30c:	2400b21e 	.word	0x2400b21e

0800c310 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800c310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c314:	4698      	mov	r8, r3
 800c316:	6803      	ldr	r3, [r0, #0]
 800c318:	b087      	sub	sp, #28
 800c31a:	460e      	mov	r6, r1
 800c31c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800c31e:	4617      	mov	r7, r2
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800c322:	4604      	mov	r4, r0
 800c324:	f8b3 9000 	ldrh.w	r9, [r3]
 800c328:	f7ff ff50 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c32c:	6803      	ldr	r3, [r0, #0]
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	4798      	blx	r3
 800c332:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800c336:	463a      	mov	r2, r7
 800c338:	4631      	mov	r1, r6
 800c33a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c33e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800c342:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c346:	4620      	mov	r0, r4
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	4643      	mov	r3, r8
 800c358:	47a8      	blx	r5
 800c35a:	b007      	add	sp, #28
 800c35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c360:	2400b21e 	.word	0x2400b21e

0800c364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	4604      	mov	r4, r0
 800c36a:	b08f      	sub	sp, #60	; 0x3c
 800c36c:	4610      	mov	r0, r2
 800c36e:	460d      	mov	r5, r1
 800c370:	4691      	mov	r9, r2
 800c372:	461e      	mov	r6, r3
 800c374:	f004 f8b8 	bl	80104e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c378:	2800      	cmp	r0, #0
 800c37a:	f000 809d 	beq.w	800c4b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	4620      	mov	r0, r4
 800c382:	f8df b198 	ldr.w	fp, [pc, #408]	; 800c51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800c386:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38c:	4798      	blx	r3
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	4620      	mov	r0, r4
 800c392:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800c520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c398:	4798      	blx	r3
 800c39a:	f8bb 3000 	ldrh.w	r3, [fp]
 800c39e:	4f5c      	ldr	r7, [pc, #368]	; (800c510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	f8ba 3000 	ldrh.w	r3, [sl]
 800c3a6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	9302      	str	r3, [sp, #8]
 800c3ae:	883b      	ldrh	r3, [r7, #0]
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	4b58      	ldr	r3, [pc, #352]	; (800c514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c3b4:	881a      	ldrh	r2, [r3, #0]
 800c3b6:	9305      	str	r3, [sp, #20]
 800c3b8:	9204      	str	r2, [sp, #16]
 800c3ba:	f004 f9d9 	bl	8010770 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c3be:	8038      	strh	r0, [r7, #0]
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	f004 fa09 	bl	80107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c3c6:	9b05      	ldr	r3, [sp, #20]
 800c3c8:	b280      	uxth	r0, r0
 800c3ca:	8018      	strh	r0, [r3, #0]
 800c3cc:	4b52      	ldr	r3, [pc, #328]	; (800c518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d174      	bne.n	800c4be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800c3d4:	883b      	ldrh	r3, [r7, #0]
 800c3d6:	f8aa 0000 	strh.w	r0, [sl]
 800c3da:	f8ab 3000 	strh.w	r3, [fp]
 800c3de:	4648      	mov	r0, r9
 800c3e0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800c3e4:	f004 f880 	bl	80104e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800c3f6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800c3fa:	f7ff fed9 	bl	800c1b0 <_ZN8touchgfx8Drawable5setXYEss>
 800c3fe:	2301      	movs	r3, #1
 800c400:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800c404:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800c408:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	dd5c      	ble.n	800c4ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c410:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd58      	ble.n	800c4ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c418:	462a      	mov	r2, r5
 800c41a:	ab0a      	add	r3, sp, #40	; 0x28
 800c41c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c420:	6851      	ldr	r1, [r2, #4]
 800c422:	c303      	stmia	r3!, {r0, r1}
 800c424:	4631      	mov	r1, r6
 800c426:	a80a      	add	r0, sp, #40	; 0x28
 800c428:	f7ff fbe4 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800c42c:	4b38      	ldr	r3, [pc, #224]	; (800c510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c42e:	2100      	movs	r1, #0
 800c430:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c434:	4b37      	ldr	r3, [pc, #220]	; (800c514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c436:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800c43a:	aa0a      	add	r2, sp, #40	; 0x28
 800c43c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c440:	910c      	str	r1, [sp, #48]	; 0x30
 800c442:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800c446:	ab08      	add	r3, sp, #32
 800c448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c44c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c450:	4618      	mov	r0, r3
 800c452:	a90c      	add	r1, sp, #48	; 0x30
 800c454:	f7ff fbce 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800c458:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d13c      	bne.n	800c4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800c45e:	2000      	movs	r0, #0
 800c460:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800c464:	2600      	movs	r6, #0
 800c466:	696b      	ldr	r3, [r5, #20]
 800c468:	a908      	add	r1, sp, #32
 800c46a:	682a      	ldr	r2, [r5, #0]
 800c46c:	4628      	mov	r0, r5
 800c46e:	9305      	str	r3, [sp, #20]
 800c470:	616e      	str	r6, [r5, #20]
 800c472:	6892      	ldr	r2, [r2, #8]
 800c474:	4790      	blx	r2
 800c476:	9b05      	ldr	r3, [sp, #20]
 800c478:	4652      	mov	r2, sl
 800c47a:	4649      	mov	r1, r9
 800c47c:	616b      	str	r3, [r5, #20]
 800c47e:	4628      	mov	r0, r5
 800c480:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800c484:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800c488:	f7ff fe92 	bl	800c1b0 <_ZN8touchgfx8Drawable5setXYEss>
 800c48c:	9a01      	ldr	r2, [sp, #4]
 800c48e:	4b23      	ldr	r3, [pc, #140]	; (800c51c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800c490:	4620      	mov	r0, r4
 800c492:	801a      	strh	r2, [r3, #0]
 800c494:	9a02      	ldr	r2, [sp, #8]
 800c496:	4b22      	ldr	r3, [pc, #136]	; (800c520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800c498:	801a      	strh	r2, [r3, #0]
 800c49a:	9a03      	ldr	r2, [sp, #12]
 800c49c:	4b1c      	ldr	r3, [pc, #112]	; (800c510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c49e:	801a      	strh	r2, [r3, #0]
 800c4a0:	4b1c      	ldr	r3, [pc, #112]	; (800c514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c4a2:	9a04      	ldr	r2, [sp, #16]
 800c4a4:	801a      	strh	r2, [r3, #0]
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ae:	4798      	blx	r3
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	4798      	blx	r3
 800c4b8:	b00f      	add	sp, #60	; 0x3c
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	883b      	ldrh	r3, [r7, #0]
 800c4c0:	f8ab 0000 	strh.w	r0, [fp]
 800c4c4:	f8aa 3000 	strh.w	r3, [sl]
 800c4c8:	e789      	b.n	800c3de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	ab0a      	add	r3, sp, #40	; 0x28
 800c4ce:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c4d2:	6851      	ldr	r1, [r2, #4]
 800c4d4:	c303      	stmia	r3!, {r0, r1}
 800c4d6:	e7a9      	b.n	800c42c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800c4d8:	a807      	add	r0, sp, #28
 800c4da:	f004 fa81 	bl	80109e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c4e2:	6803      	ldr	r3, [r0, #0]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	4798      	blx	r3
 800c4e8:	4286      	cmp	r6, r0
 800c4ea:	d1b8      	bne.n	800c45e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800c4ec:	f7ff fe6e 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c4f0:	6803      	ldr	r3, [r0, #0]
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	a807      	add	r0, sp, #28
 800c4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	f004 fa71 	bl	80109e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800c4fe:	9b05      	ldr	r3, [sp, #20]
 800c500:	4601      	mov	r1, r0
 800c502:	4630      	mov	r0, r6
 800c504:	4798      	blx	r3
 800c506:	f080 0001 	eor.w	r0, r0, #1
 800c50a:	b2c0      	uxtb	r0, r0
 800c50c:	e7a8      	b.n	800c460 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800c50e:	bf00      	nop
 800c510:	2400b218 	.word	0x2400b218
 800c514:	2400b21a 	.word	0x2400b21a
 800c518:	2400b21c 	.word	0x2400b21c
 800c51c:	2400b21e 	.word	0x2400b21e
 800c520:	2400b220 	.word	0x2400b220

0800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800c524:	4b07      	ldr	r3, [pc, #28]	; (800c544 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800c526:	b510      	push	{r4, lr}
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	4604      	mov	r4, r0
 800c52c:	b13b      	cbz	r3, 800c53e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c52e:	6803      	ldr	r3, [r0, #0]
 800c530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c532:	4798      	blx	r3
 800c534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c536:	4283      	cmp	r3, r0
 800c538:	d101      	bne.n	800c53e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800c53a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c540:	e7fc      	b.n	800c53c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800c542:	bf00      	nop
 800c544:	2400b222 	.word	0x2400b222

0800c548 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	461d      	mov	r5, r3
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c554:	4690      	mov	r8, r2
 800c556:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800c55a:	2400      	movs	r4, #0
 800c55c:	4607      	mov	r7, r0
 800c55e:	fb06 8505 	mla	r5, r6, r5, r8
 800c562:	9404      	str	r4, [sp, #16]
 800c564:	f88d 4020 	strb.w	r4, [sp, #32]
 800c568:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c56c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c570:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c574:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c578:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c57c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c580:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c584:	f7ff ffce 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c588:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c592:	a901      	add	r1, sp, #4
 800c594:	9505      	str	r5, [sp, #20]
 800c596:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800c59a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800c59e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800c5a2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800c5a6:	6803      	ldr	r3, [r0, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	4798      	blx	r3
 800c5ac:	b00a      	add	sp, #40	; 0x28
 800c5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5b2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800c5b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5b6:	b08b      	sub	sp, #44	; 0x2c
 800c5b8:	2400      	movs	r4, #0
 800c5ba:	4691      	mov	r9, r2
 800c5bc:	461d      	mov	r5, r3
 800c5be:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800c5c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5c6:	4688      	mov	r8, r1
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	9404      	str	r4, [sp, #16]
 800c5cc:	fb06 9505 	mla	r5, r6, r5, r9
 800c5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5d4:	f7ff ffa6 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c5d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c5dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c5e6:	a901      	add	r1, sp, #4
 800c5e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c5ec:	9505      	str	r5, [sp, #20]
 800c5ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c5f2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800c5f6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800c5fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800c5fe:	f8ad 4020 	strh.w	r4, [sp, #32]
 800c602:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800c606:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800c60a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800c60e:	6803      	ldr	r3, [r0, #0]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	4798      	blx	r3
 800c614:	b00b      	add	sp, #44	; 0x2c
 800c616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800c61c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	b08a      	sub	sp, #40	; 0x28
 800c622:	4698      	mov	r8, r3
 800c624:	2300      	movs	r3, #0
 800c626:	4606      	mov	r6, r0
 800c628:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800c62c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800c630:	2d0b      	cmp	r5, #11
 800c632:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800c636:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800c63a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	d137      	bne.n	800c6b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800c642:	2380      	movs	r3, #128	; 0x80
 800c644:	f88d 0020 	strb.w	r0, [sp, #32]
 800c648:	4630      	mov	r0, r6
 800c64a:	9203      	str	r2, [sp, #12]
 800c64c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c650:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c654:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c658:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c65c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c660:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c664:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c668:	f7ff ff5c 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c66c:	2c0b      	cmp	r4, #11
 800c66e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800c672:	f8ad 701e 	strh.w	r7, [sp, #30]
 800c676:	bf94      	ite	ls
 800c678:	4b19      	ldrls	r3, [pc, #100]	; (800c6e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800c67a:	2100      	movhi	r1, #0
 800c67c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800c680:	bf98      	it	ls
 800c682:	5d19      	ldrbls	r1, [r3, r4]
 800c684:	fb02 8307 	mla	r3, r2, r7, r8
 800c688:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800c68c:	10c9      	asrs	r1, r1, #3
 800c68e:	fb01 0003 	mla	r0, r1, r3, r0
 800c692:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800c696:	a901      	add	r1, sp, #4
 800c698:	9005      	str	r0, [sp, #20]
 800c69a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800c69e:	2300      	movs	r3, #0
 800c6a0:	6870      	ldr	r0, [r6, #4]
 800c6a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c6a6:	6803      	ldr	r3, [r0, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	4798      	blx	r3
 800c6ac:	b00a      	add	sp, #40	; 0x28
 800c6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b2:	2d02      	cmp	r5, #2
 800c6b4:	d109      	bne.n	800c6ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800c6b6:	28ff      	cmp	r0, #255	; 0xff
 800c6b8:	d105      	bne.n	800c6c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800c6ba:	f1bc 0f00 	cmp.w	ip, #0
 800c6be:	bf14      	ite	ne
 800c6c0:	2340      	movne	r3, #64	; 0x40
 800c6c2:	2320      	moveq	r3, #32
 800c6c4:	e7be      	b.n	800c644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c6c6:	2340      	movs	r3, #64	; 0x40
 800c6c8:	e7bc      	b.n	800c644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c6ca:	28ff      	cmp	r0, #255	; 0xff
 800c6cc:	d105      	bne.n	800c6da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800c6ce:	f1bc 0f00 	cmp.w	ip, #0
 800c6d2:	bf14      	ite	ne
 800c6d4:	2304      	movne	r3, #4
 800c6d6:	2301      	moveq	r3, #1
 800c6d8:	e7b4      	b.n	800c644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c6da:	2304      	movs	r3, #4
 800c6dc:	e7b2      	b.n	800c644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800c6de:	bf00      	nop
 800c6e0:	0801af48 	.word	0x0801af48

0800c6e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	b08b      	sub	sp, #44	; 0x2c
 800c6ea:	461d      	mov	r5, r3
 800c6ec:	2400      	movs	r4, #0
 800c6ee:	4688      	mov	r8, r1
 800c6f0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800c6f4:	4693      	mov	fp, r2
 800c6f6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800c6fa:	4607      	mov	r7, r0
 800c6fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800c700:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800c704:	9404      	str	r4, [sp, #16]
 800c706:	bf14      	ite	ne
 800c708:	2308      	movne	r3, #8
 800c70a:	2302      	moveq	r3, #2
 800c70c:	fb05 b50a 	mla	r5, r5, sl, fp
 800c710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c714:	f7ff ff06 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c718:	2e0b      	cmp	r6, #11
 800c71a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800c71e:	a901      	add	r1, sp, #4
 800c720:	bf98      	it	ls
 800c722:	4b13      	ldrls	r3, [pc, #76]	; (800c770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800c724:	f8ad a01e 	strh.w	sl, [sp, #30]
 800c728:	bf98      	it	ls
 800c72a:	5d9c      	ldrbls	r4, [r3, r6]
 800c72c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c730:	10e4      	asrs	r4, r4, #3
 800c732:	f8cd 8010 	str.w	r8, [sp, #16]
 800c736:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c73a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c73e:	fb04 0405 	mla	r4, r4, r5, r0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c748:	2300      	movs	r3, #0
 800c74a:	9405      	str	r4, [sp, #20]
 800c74c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c750:	f88d 9020 	strb.w	r9, [sp, #32]
 800c754:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800c758:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c75c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800c760:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800c764:	6803      	ldr	r3, [r0, #0]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	4798      	blx	r3
 800c76a:	b00b      	add	sp, #44	; 0x2c
 800c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c770:	0801af48 	.word	0x0801af48

0800c774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	461e      	mov	r6, r3
 800c77a:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800c77c:	460f      	mov	r7, r1
 800c77e:	4690      	mov	r8, r2
 800c780:	881d      	ldrh	r5, [r3, #0]
 800c782:	f7ff fd23 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c786:	6803      	ldr	r3, [r0, #0]
 800c788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78a:	4798      	blx	r3
 800c78c:	280b      	cmp	r0, #11
 800c78e:	bf96      	itet	ls
 800c790:	4b05      	ldrls	r3, [pc, #20]	; (800c7a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800c792:	2400      	movhi	r4, #0
 800c794:	5c1c      	ldrbls	r4, [r3, r0]
 800c796:	fb08 7005 	mla	r0, r8, r5, r7
 800c79a:	10e4      	asrs	r4, r4, #3
 800c79c:	fb04 6000 	mla	r0, r4, r0, r6
 800c7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a4:	2400b21e 	.word	0x2400b21e
 800c7a8:	0801af48 	.word	0x0801af48

0800c7ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ae:	b08b      	sub	sp, #44	; 0x2c
 800c7b0:	461f      	mov	r7, r3
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800c7c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c7c4:	9504      	str	r5, [sp, #16]
 800c7c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c7ca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c7ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c7d2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c7d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c7da:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c7de:	f88d 3020 	strb.w	r3, [sp, #32]
 800c7e2:	f7ff fe9f 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7ff ffc1 	bl	800c774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c7f2:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800c7f4:	9005      	str	r0, [sp, #20]
 800c7f6:	881b      	ldrh	r3, [r3, #0]
 800c7f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c7fc:	f7ff fce6 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c800:	6803      	ldr	r3, [r0, #0]
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	4798      	blx	r3
 800c806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c808:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800c80c:	a901      	add	r1, sp, #4
 800c80e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	6860      	ldr	r0, [r4, #4]
 800c816:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c81a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800c81e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800c822:	6803      	ldr	r3, [r0, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	4798      	blx	r3
 800c828:	b00b      	add	sp, #44	; 0x2c
 800c82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82c:	2400b21e 	.word	0x2400b21e

0800c830 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	b08d      	sub	sp, #52	; 0x34
 800c834:	2501      	movs	r5, #1
 800c836:	4604      	mov	r4, r0
 800c838:	466b      	mov	r3, sp
 800c83a:	9503      	str	r5, [sp, #12]
 800c83c:	e883 0006 	stmia.w	r3, {r1, r2}
 800c840:	2300      	movs	r3, #0
 800c842:	f8bd 6000 	ldrh.w	r6, [sp]
 800c846:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800c84a:	9306      	str	r3, [sp, #24]
 800c84c:	6803      	ldr	r3, [r0, #0]
 800c84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c850:	4798      	blx	r3
 800c852:	463a      	mov	r2, r7
 800c854:	4631      	mov	r1, r6
 800c856:	4603      	mov	r3, r0
 800c858:	4620      	mov	r0, r4
 800c85a:	f7ff ff8b 	bl	800c774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c85e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c860:	9004      	str	r0, [sp, #16]
 800c862:	9307      	str	r3, [sp, #28]
 800c864:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c868:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c86c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c870:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c874:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800c87c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800c880:	f7ff fca4 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c884:	6803      	ldr	r3, [r0, #0]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	4798      	blx	r3
 800c88a:	23ff      	movs	r3, #255	; 0xff
 800c88c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800c890:	a903      	add	r1, sp, #12
 800c892:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800c896:	6860      	ldr	r0, [r4, #4]
 800c898:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800c89c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800c8a0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800c8a4:	6803      	ldr	r3, [r0, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	4798      	blx	r3
 800c8aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c8ac:	b00d      	add	sp, #52	; 0x34
 800c8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b0:	2400b21e 	.word	0x2400b21e

0800c8b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	b08c      	sub	sp, #48	; 0x30
 800c8ba:	461e      	mov	r6, r3
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	466d      	mov	r5, sp
 800c8c2:	9306      	str	r3, [sp, #24]
 800c8c4:	6803      	ldr	r3, [r0, #0]
 800c8c6:	e885 0006 	stmia.w	r5, {r1, r2}
 800c8ca:	2501      	movs	r5, #1
 800c8cc:	f8bd 7000 	ldrh.w	r7, [sp]
 800c8d0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800c8d4:	9503      	str	r5, [sp, #12]
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d8:	4798      	blx	r3
 800c8da:	4642      	mov	r2, r8
 800c8dc:	4639      	mov	r1, r7
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff ff47 	bl	800c774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c8e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c8ea:	9004      	str	r0, [sp, #16]
 800c8ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c8f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c8f4:	9607      	str	r6, [sp, #28]
 800c8f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800c8fa:	4b10      	ldr	r3, [pc, #64]	; (800c93c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800c902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c904:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800c908:	f7ff fc60 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 800c90c:	6803      	ldr	r3, [r0, #0]
 800c90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c910:	4798      	blx	r3
 800c912:	23ff      	movs	r3, #255	; 0xff
 800c914:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800c918:	a903      	add	r1, sp, #12
 800c91a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800c91e:	6860      	ldr	r0, [r4, #4]
 800c920:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800c924:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800c928:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800c92c:	6803      	ldr	r3, [r0, #0]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	4798      	blx	r3
 800c932:	4630      	mov	r0, r6
 800c934:	b00c      	add	sp, #48	; 0x30
 800c936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93a:	bf00      	nop
 800c93c:	2400b21e 	.word	0x2400b21e

0800c940 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800c940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c942:	b085      	sub	sp, #20
 800c944:	4605      	mov	r5, r0
 800c946:	ac02      	add	r4, sp, #8
 800c948:	e884 0006 	stmia.w	r4, {r1, r2}
 800c94c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800c950:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800c954:	f7ff fde6 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c958:	4631      	mov	r1, r6
 800c95a:	4603      	mov	r3, r0
 800c95c:	463a      	mov	r2, r7
 800c95e:	4628      	mov	r0, r5
 800c960:	f7ff ff08 	bl	800c774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800c964:	4a05      	ldr	r2, [pc, #20]	; (800c97c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800c966:	682b      	ldr	r3, [r5, #0]
 800c968:	8812      	ldrh	r2, [r2, #0]
 800c96a:	9200      	str	r2, [sp, #0]
 800c96c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800c96e:	4603      	mov	r3, r0
 800c970:	4628      	mov	r0, r5
 800c972:	e894 0006 	ldmia.w	r4, {r1, r2}
 800c976:	47b0      	blx	r6
 800c978:	b005      	add	sp, #20
 800c97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c97c:	2400b21e 	.word	0x2400b21e

0800c980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800c986:	4604      	mov	r4, r0
 800c988:	b19b      	cbz	r3, 800c9b2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800c98a:	2002      	movs	r0, #2
 800c98c:	f7f3 fe10 	bl	80005b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800c990:	2300      	movs	r3, #0
 800c992:	4620      	mov	r0, r4
 800c994:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c998:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800c9a2:	f7ff fdbf 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	462b      	mov	r3, r5
 800c9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b0:	4718      	bx	r3
 800c9b2:	bd70      	pop	{r4, r5, r6, pc}

0800c9b4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	460d      	mov	r5, r1
 800c9be:	428b      	cmp	r3, r1
 800c9c0:	d006      	beq.n	800c9d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800c9c2:	6803      	ldr	r3, [r0, #0]
 800c9c4:	b929      	cbnz	r1, 800c9d2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800c9c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c9ca:	4798      	blx	r3
 800c9cc:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
 800c9d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c9d6:	e7f8      	b.n	800c9ca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800c9d8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800c9d8:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	4604      	mov	r4, r0
 800c9e0:	b95b      	cbnz	r3, 800c9fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c9e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d007      	beq.n	800c9fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c9ea:	6840      	ldr	r0, [r0, #4]
 800c9ec:	f000 f916 	bl	800cc1c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800c9f0:	b118      	cbz	r0, 800c9fa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	7a53      	ldrb	r3, [r2, #9]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0fc      	beq.n	800c9f4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800c9fa:	f7f3 ff5f 	bl	80008bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	2100      	movs	r1, #0
 800ca02:	f7ff ffd7 	bl	800c9b4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff fd8c 	bl	800c524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ca0c:	bd10      	pop	{r4, pc}
 800ca0e:	bf00      	nop
 800ca10:	2400b222 	.word	0x2400b222

0800ca14 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800ca14:	4770      	bx	lr

0800ca16 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800ca16:	2000      	movs	r0, #0
 800ca18:	4770      	bx	lr

0800ca1a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ca1a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ca1e:	1a13      	subs	r3, r2, r0
 800ca20:	4258      	negs	r0, r3
 800ca22:	4158      	adcs	r0, r3
 800ca24:	4770      	bx	lr

0800ca26 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ca26:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfdc      	itt	le
 800ca30:	6882      	ldrle	r2, [r0, #8]
 800ca32:	189b      	addle	r3, r3, r2
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	bfcc      	ite	gt
 800ca38:	2000      	movgt	r0, #0
 800ca3a:	2001      	movle	r0, #1
 800ca3c:	4770      	bx	lr

0800ca3e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ca3e:	6902      	ldr	r2, [r0, #16]
 800ca40:	6843      	ldr	r3, [r0, #4]
 800ca42:	2024      	movs	r0, #36	; 0x24
 800ca44:	fb00 3002 	mla	r0, r0, r2, r3
 800ca48:	4770      	bx	lr

0800ca4a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ca4a:	6803      	ldr	r3, [r0, #0]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	4718      	bx	r3

0800ca50 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ca50:	2301      	movs	r3, #1
 800ca52:	b570      	push	{r4, r5, r6, lr}
 800ca54:	7203      	strb	r3, [r0, #8]
 800ca56:	4604      	mov	r4, r0
 800ca58:	6840      	ldr	r0, [r0, #4]
 800ca5a:	6803      	ldr	r3, [r0, #0]
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	4798      	blx	r3
 800ca60:	6803      	ldr	r3, [r0, #0]
 800ca62:	4605      	mov	r5, r0
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	d00c      	beq.n	800ca82 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ca68:	d810      	bhi.n	800ca8c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800ca6a:	2b04      	cmp	r3, #4
 800ca6c:	d01d      	beq.n	800caaa <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800ca6e:	d804      	bhi.n	800ca7a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d006      	beq.n	800ca82 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d02c      	beq.n	800cad2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800ca78:	bd70      	pop	{r4, r5, r6, pc}
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d01d      	beq.n	800caba <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800ca7e:	2b20      	cmp	r3, #32
 800ca80:	d1fa      	bne.n	800ca78 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	4620      	mov	r0, r4
 800ca86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca88:	4798      	blx	r3
 800ca8a:	e013      	b.n	800cab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ca8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca90:	d0f7      	beq.n	800ca82 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ca92:	d804      	bhi.n	800ca9e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800ca94:	2b80      	cmp	r3, #128	; 0x80
 800ca96:	d0f4      	beq.n	800ca82 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ca98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca9c:	e7f0      	b.n	800ca80 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800ca9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caa2:	d0ee      	beq.n	800ca82 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800caa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caa8:	e7e5      	b.n	800ca76 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	7f01      	ldrb	r1, [r0, #28]
 800caae:	4620      	mov	r0, r4
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	4798      	blx	r3
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab8:	e006      	b.n	800cac8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	7f01      	ldrb	r1, [r0, #28]
 800cabe:	4620      	mov	r0, r4
 800cac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac2:	4798      	blx	r3
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac8:	4629      	mov	r1, r5
 800caca:	4620      	mov	r0, r4
 800cacc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cad0:	4718      	bx	r3
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	4620      	mov	r0, r4
 800cad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad8:	4798      	blx	r3
 800cada:	e7f3      	b.n	800cac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800cadc <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800cadc:	4770      	bx	lr

0800cade <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800cade:	4770      	bx	lr

0800cae0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800cae0:	4770      	bx	lr

0800cae2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800cae2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800cae6:	b510      	push	{r4, lr}
 800cae8:	1ad2      	subs	r2, r2, r3
 800caea:	2a00      	cmp	r2, #0
 800caec:	bfdc      	itt	le
 800caee:	6884      	ldrle	r4, [r0, #8]
 800caf0:	1912      	addle	r2, r2, r4
 800caf2:	2a01      	cmp	r2, #1
 800caf4:	dd16      	ble.n	800cb24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800caf6:	6842      	ldr	r2, [r0, #4]
 800caf8:	2424      	movs	r4, #36	; 0x24
 800cafa:	fb04 2303 	mla	r3, r4, r3, r2
 800cafe:	f101 0220 	add.w	r2, r1, #32
 800cb02:	f851 4b04 	ldr.w	r4, [r1], #4
 800cb06:	4291      	cmp	r1, r2
 800cb08:	f843 4b04 	str.w	r4, [r3], #4
 800cb0c:	d1f9      	bne.n	800cb02 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800cb0e:	780a      	ldrb	r2, [r1, #0]
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	68c3      	ldr	r3, [r0, #12]
 800cb14:	6882      	ldr	r2, [r0, #8]
 800cb16:	f3bf 8f5b 	dmb	ish
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	bfd8      	it	le
 800cb20:	1a9b      	suble	r3, r3, r2
 800cb22:	60c3      	str	r3, [r0, #12]
 800cb24:	bd10      	pop	{r4, pc}

0800cb26 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800cb26:	6903      	ldr	r3, [r0, #16]
 800cb28:	6882      	ldr	r2, [r0, #8]
 800cb2a:	f3bf 8f5b 	dmb	ish
 800cb2e:	3301      	adds	r3, #1
 800cb30:	429a      	cmp	r2, r3
 800cb32:	bfd8      	it	le
 800cb34:	1a9b      	suble	r3, r3, r2
 800cb36:	6103      	str	r3, [r0, #16]
 800cb38:	4770      	bx	lr
	...

0800cb3c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460e      	mov	r6, r1
 800cb42:	6860      	ldr	r0, [r4, #4]
 800cb44:	6803      	ldr	r3, [r0, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4798      	blx	r3
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1f9      	bne.n	800cb42 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800cb4e:	4d0d      	ldr	r5, [pc, #52]	; (800cb84 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800cb50:	6828      	ldr	r0, [r5, #0]
 800cb52:	6803      	ldr	r3, [r0, #0]
 800cb54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb56:	4798      	blx	r3
 800cb58:	f7f3 fec2 	bl	80008e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800cb5c:	6828      	ldr	r0, [r5, #0]
 800cb5e:	2101      	movs	r1, #1
 800cb60:	f7ff ff28 	bl	800c9b4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800cb64:	6860      	ldr	r0, [r4, #4]
 800cb66:	4631      	mov	r1, r6
 800cb68:	6803      	ldr	r3, [r0, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	4798      	blx	r3
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	4620      	mov	r0, r4
 800cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb74:	4798      	blx	r3
 800cb76:	6828      	ldr	r0, [r5, #0]
 800cb78:	6803      	ldr	r3, [r0, #0]
 800cb7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb80:	4718      	bx	r3
 800cb82:	bf00      	nop
 800cb84:	2400b224 	.word	0x2400b224

0800cb88 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800cb88:	b508      	push	{r3, lr}
 800cb8a:	f7f3 fe97 	bl	80008bc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800cb8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb92:	f7f3 be9d 	b.w	80008d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800cb96 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800cb96:	b510      	push	{r4, lr}
 800cb98:	4604      	mov	r4, r0
 800cb9a:	2114      	movs	r1, #20
 800cb9c:	f00b fec3 	bl	8018926 <_ZdlPvj>
 800cba0:	4620      	mov	r0, r4
 800cba2:	bd10      	pop	{r4, pc}

0800cba4 <_ZN8touchgfx13DMA_Interface5startEv>:
 800cba4:	b510      	push	{r4, lr}
 800cba6:	4604      	mov	r4, r0
 800cba8:	6840      	ldr	r0, [r0, #4]
 800cbaa:	6803      	ldr	r3, [r0, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4798      	blx	r3
 800cbb0:	b948      	cbnz	r0, 800cbc6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cbb2:	7a63      	ldrb	r3, [r4, #9]
 800cbb4:	b13b      	cbz	r3, 800cbc6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cbb6:	7a23      	ldrb	r3, [r4, #8]
 800cbb8:	b92b      	cbnz	r3, 800cbc6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc4:	4718      	bx	r3
 800cbc6:	bd10      	pop	{r4, pc}

0800cbc8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800cbc8:	b570      	push	{r4, r5, r6, lr}
 800cbca:	4604      	mov	r4, r0
 800cbcc:	6840      	ldr	r0, [r0, #4]
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4798      	blx	r3
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	b930      	cbnz	r0, 800cbe6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800cbd8:	7a23      	ldrb	r3, [r4, #8]
 800cbda:	b123      	cbz	r3, 800cbe6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800cbdc:	6860      	ldr	r0, [r4, #4]
 800cbde:	6803      	ldr	r3, [r0, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	4798      	blx	r3
 800cbe4:	7225      	strb	r5, [r4, #8]
 800cbe6:	6860      	ldr	r0, [r4, #4]
 800cbe8:	6803      	ldr	r3, [r0, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4798      	blx	r3
 800cbee:	b928      	cbnz	r0, 800cbfc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbfa:	4718      	bx	r3
 800cbfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc00:	f7f3 be78 	b.w	80008f4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800cc04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	6082      	str	r2, [r0, #8]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4c03      	ldr	r4, [pc, #12]	; (800cc18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800cc0c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800cc10:	e9c0 4100 	strd	r4, r1, [r0]
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	bf00      	nop
 800cc18:	0801b084 	.word	0x0801b084

0800cc1c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800cc1c:	6840      	ldr	r0, [r0, #4]
 800cc1e:	6803      	ldr	r3, [r0, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4718      	bx	r3

0800cc24 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800cc24:	2300      	movs	r3, #0
 800cc26:	8083      	strh	r3, [r0, #4]
 800cc28:	80c3      	strh	r3, [r0, #6]
 800cc2a:	8003      	strh	r3, [r0, #0]
 800cc2c:	8043      	strh	r3, [r0, #2]
 800cc2e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800cc32:	2bff      	cmp	r3, #255	; 0xff
 800cc34:	bf01      	itttt	eq
 800cc36:	890b      	ldrheq	r3, [r1, #8]
 800cc38:	8083      	strheq	r3, [r0, #4]
 800cc3a:	894b      	ldrheq	r3, [r1, #10]
 800cc3c:	80c3      	strheq	r3, [r0, #6]
 800cc3e:	4770      	bx	lr

0800cc40 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800cc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc42:	4604      	mov	r4, r0
 800cc44:	466b      	mov	r3, sp
 800cc46:	6808      	ldr	r0, [r1, #0]
 800cc48:	6849      	ldr	r1, [r1, #4]
 800cc4a:	c303      	stmia	r3!, {r0, r1}
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	4669      	mov	r1, sp
 800cc50:	4620      	mov	r0, r4
 800cc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc54:	4798      	blx	r3
 800cc56:	4b08      	ldr	r3, [pc, #32]	; (800cc78 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cc5e:	b10a      	cbz	r2, 800cc64 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800cc60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc62:	b900      	cbnz	r0, 800cc66 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800cc64:	6898      	ldr	r0, [r3, #8]
 800cc66:	6803      	ldr	r3, [r0, #0]
 800cc68:	4669      	mov	r1, sp
 800cc6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cc6c:	6a1d      	ldr	r5, [r3, #32]
 800cc6e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800cc72:	47a8      	blx	r5
 800cc74:	b003      	add	sp, #12
 800cc76:	bd30      	pop	{r4, r5, pc}
 800cc78:	2400b224 	.word	0x2400b224

0800cc7c <_ZN8touchgfx3BoxD1Ev>:
 800cc7c:	4770      	bx	lr

0800cc7e <_ZN8touchgfx3BoxD0Ev>:
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	4604      	mov	r4, r0
 800cc82:	212c      	movs	r1, #44	; 0x2c
 800cc84:	f00b fe4f 	bl	8018926 <_ZdlPvj>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	bd10      	pop	{r4, pc}

0800cc8c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800cc8c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800cc90:	b12a      	cbz	r2, 800cc9e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800cc92:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800cc96:	b112      	cbz	r2, 800cc9e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800cc98:	6803      	ldr	r3, [r0, #0]
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	4718      	bx	r3
 800cc9e:	4770      	bx	lr

0800cca0 <_ZN8touchgfx5ImageD1Ev>:
 800cca0:	4770      	bx	lr

0800cca2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800cca2:	b570      	push	{r4, r5, r6, lr}
 800cca4:	880b      	ldrh	r3, [r1, #0]
 800cca6:	460d      	mov	r5, r1
 800cca8:	4604      	mov	r4, r0
 800ccaa:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ccac:	4608      	mov	r0, r1
 800ccae:	f003 fd5f 	bl	8010770 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f003 fd8f 	bl	80107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	4605      	mov	r5, r0
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc4:	4798      	blx	r3
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccd2:	4718      	bx	r3

0800ccd4 <_ZN8touchgfx5ImageD0Ev>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	212c      	movs	r1, #44	; 0x2c
 800ccda:	f00b fe24 	bl	8018926 <_ZdlPvj>
 800ccde:	4620      	mov	r0, r4
 800cce0:	bd10      	pop	{r4, pc}

0800cce2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800cce2:	b510      	push	{r4, lr}
 800cce4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800cce8:	4604      	mov	r4, r0
 800ccea:	2bff      	cmp	r3, #255	; 0xff
 800ccec:	d006      	beq.n	800ccfc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	8003      	strh	r3, [r0, #0]
 800ccf2:	8043      	strh	r3, [r0, #2]
 800ccf4:	8083      	strh	r3, [r0, #4]
 800ccf6:	80c3      	strh	r3, [r0, #6]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	bd10      	pop	{r4, pc}
 800ccfc:	3126      	adds	r1, #38	; 0x26
 800ccfe:	f003 fd9f 	bl	8010840 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800cd02:	e7f9      	b.n	800ccf8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800cd04 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800cd04:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800cd08:	b12a      	cbz	r2, 800cd16 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800cd0a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800cd0e:	b112      	cbz	r2, 800cd16 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800cd10:	6803      	ldr	r3, [r0, #0]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	4718      	bx	r3
 800cd16:	4770      	bx	lr

0800cd18 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	b088      	sub	sp, #32
 800cd20:	2500      	movs	r5, #0
 800cd22:	460f      	mov	r7, r1
 800cd24:	f854 3b26 	ldr.w	r3, [r4], #38
 800cd28:	a904      	add	r1, sp, #16
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd32:	4798      	blx	r3
 800cd34:	4620      	mov	r0, r4
 800cd36:	f003 fd1b 	bl	8010770 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cd3a:	4680      	mov	r8, r0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f003 fd4b 	bl	80107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cd42:	9506      	str	r5, [sp, #24]
 800cd44:	ad06      	add	r5, sp, #24
 800cd46:	f8ad 001e 	strh.w	r0, [sp, #30]
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800cd50:	4628      	mov	r0, r5
 800cd52:	f7fe ff4f 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800cd56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dd19      	ble.n	800cd92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800cd5e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	dd15      	ble.n	800cd92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cd6e:	b10a      	cbz	r2, 800cd74 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800cd70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd72:	b900      	cbnz	r0, 800cd76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800cd74:	6898      	ldr	r0, [r3, #8]
 800cd76:	2701      	movs	r7, #1
 800cd78:	6801      	ldr	r1, [r0, #0]
 800cd7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800cd7e:	9702      	str	r7, [sp, #8]
 800cd80:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800cd84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800cd88:	e9cd 5600 	strd	r5, r6, [sp]
 800cd8c:	688d      	ldr	r5, [r1, #8]
 800cd8e:	4621      	mov	r1, r4
 800cd90:	47a8      	blx	r5
 800cd92:	b008      	add	sp, #32
 800cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd98:	2400b224 	.word	0x2400b224

0800cd9c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	6803      	ldr	r3, [r0, #0]
 800cda0:	460c      	mov	r4, r1
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	4798      	blx	r3
 800cda6:	1b03      	subs	r3, r0, r4
 800cda8:	4258      	negs	r0, r3
 800cdaa:	4158      	adcs	r0, r3
 800cdac:	bd10      	pop	{r4, pc}
	...

0800cdb0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800cdb0:	4b01      	ldr	r3, [pc, #4]	; (800cdb8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800cdb2:	6019      	str	r1, [r3, #0]
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	2400b22c 	.word	0x2400b22c

0800cdbc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	4696      	mov	lr, r2
 800cdc2:	b097      	sub	sp, #92	; 0x5c
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	4614      	mov	r4, r2
 800cdc8:	460e      	mov	r6, r1
 800cdca:	461f      	mov	r7, r3
 800cdcc:	f10d 0c1c 	add.w	ip, sp, #28
 800cdd0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800cdd4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800cdd8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800cddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cde0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cde4:	f8de 3000 	ldr.w	r3, [lr]
 800cde8:	f104 0e14 	add.w	lr, r4, #20
 800cdec:	f8cc 3000 	str.w	r3, [ip]
 800cdf0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800cdf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdfc:	f8de 3000 	ldr.w	r3, [lr]
 800ce00:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ce04:	f8cc 3000 	str.w	r3, [ip]
 800ce08:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ce0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce14:	f8de 3000 	ldr.w	r3, [lr]
 800ce18:	4631      	mov	r1, r6
 800ce1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f8cc 3000 	str.w	r3, [ip]
 800ce22:	682b      	ldr	r3, [r5, #0]
 800ce24:	9201      	str	r2, [sp, #4]
 800ce26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce28:	f8cd 8008 	str.w	r8, [sp, #8]
 800ce2c:	9200      	str	r2, [sp, #0]
 800ce2e:	aa07      	add	r2, sp, #28
 800ce30:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ce34:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800ce38:	463b      	mov	r3, r7
 800ce3a:	47d8      	blx	fp
 800ce3c:	46a6      	mov	lr, r4
 800ce3e:	f10d 0c1c 	add.w	ip, sp, #28
 800ce42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce4a:	f8de 3000 	ldr.w	r3, [lr]
 800ce4e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800ce52:	343c      	adds	r4, #60	; 0x3c
 800ce54:	f8cc 3000 	str.w	r3, [ip]
 800ce58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ce5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ce60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce64:	f8de 3000 	ldr.w	r3, [lr]
 800ce68:	f8cc 3000 	str.w	r3, [ip]
 800ce6c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ce70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f8cc 3000 	str.w	r3, [ip]
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ce86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce88:	f8cd 8008 	str.w	r8, [sp, #8]
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce90:	9200      	str	r2, [sp, #0]
 800ce92:	aa07      	add	r2, sp, #28
 800ce94:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800ce96:	463b      	mov	r3, r7
 800ce98:	47a0      	blx	r4
 800ce9a:	b017      	add	sp, #92	; 0x5c
 800ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cea0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800cea0:	2000      	movs	r0, #0
 800cea2:	4770      	bx	lr

0800cea4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800cea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	b08d      	sub	sp, #52	; 0x34
 800ceaa:	4688      	mov	r8, r1
 800ceac:	f8d3 c000 	ldr.w	ip, [r3]
 800ceb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ceb2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800ceb6:	680f      	ldr	r7, [r1, #0]
 800ceb8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800cebc:	eba7 070c 	sub.w	r7, r7, ip
 800cec0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800cec4:	edd3 6a07 	vldr	s13, [r3, #28]
 800cec8:	42bc      	cmp	r4, r7
 800ceca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cecc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800ced0:	bfa8      	it	ge
 800ced2:	463c      	movge	r4, r7
 800ced4:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ced8:	f9ba 1000 	ldrsh.w	r1, [sl]
 800cedc:	ee07 4a90 	vmov	s15, r4
 800cee0:	eb09 0e0c 	add.w	lr, r9, ip
 800cee4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800cee8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ceec:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800cef0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800cef4:	4571      	cmp	r1, lr
 800cef6:	ee25 4a04 	vmul.f32	s8, s10, s8
 800cefa:	ee65 4a24 	vmul.f32	s9, s10, s9
 800cefe:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cf02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf06:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800cf0a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800cf0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cf12:	ee36 0a84 	vadd.f32	s0, s13, s8
 800cf16:	ee61 1a87 	vmul.f32	s3, s3, s14
 800cf1a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800cf1e:	f340 808c 	ble.w	800d03a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800cf22:	eba1 060e 	sub.w	r6, r1, lr
 800cf26:	fb96 f5f4 	sdiv	r5, r6, r4
 800cf2a:	ee07 5a10 	vmov	s14, r5
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	fb04 6615 	mls	r6, r4, r5, r6
 800cf34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf38:	eea7 0a04 	vfma.f32	s0, s14, s8
 800cf3c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800cf40:	eea7 1a05 	vfma.f32	s2, s14, s10
 800cf44:	dd12      	ble.n	800cf6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800cf46:	ee70 6a44 	vsub.f32	s13, s0, s8
 800cf4a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800cf4e:	ee31 2a45 	vsub.f32	s4, s2, s10
 800cf52:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5a:	bf14      	ite	ne
 800cf5c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800cf60:	eeb0 7a67 	vmoveq.f32	s14, s15
 800cf64:	ee61 1a87 	vmul.f32	s3, s3, s14
 800cf68:	ee22 2a07 	vmul.f32	s4, s4, s14
 800cf6c:	fb05 f204 	mul.w	r2, r5, r4
 800cf70:	1abf      	subs	r7, r7, r2
 800cf72:	4494      	add	ip, r2
 800cf74:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800cf78:	4411      	add	r1, r2
 800cf7a:	eb09 020c 	add.w	r2, r9, ip
 800cf7e:	b209      	sxth	r1, r1
 800cf80:	443a      	add	r2, r7
 800cf82:	428a      	cmp	r2, r1
 800cf84:	bfc4      	itt	gt
 800cf86:	eba1 0209 	subgt.w	r2, r1, r9
 800cf8a:	eba2 070c 	subgt.w	r7, r2, ip
 800cf8e:	2f00      	cmp	r7, #0
 800cf90:	dd50      	ble.n	800d034 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800cf92:	fb97 f1f4 	sdiv	r1, r7, r4
 800cf96:	fb04 7211 	mls	r2, r4, r1, r7
 800cf9a:	b90a      	cbnz	r2, 800cfa0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800cf9c:	3901      	subs	r1, #1
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800cfa4:	6840      	ldr	r0, [r0, #4]
 800cfa6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800cfaa:	44b6      	add	lr, r6
 800cfac:	f8d0 a000 	ldr.w	sl, [r0]
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	bfcc      	ite	gt
 800cfb4:	46a1      	movgt	r9, r4
 800cfb6:	4691      	movle	r9, r2
 800cfb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cfbc:	fb04 e505 	mla	r5, r4, r5, lr
 800cfc0:	eef0 6a42 	vmov.f32	s13, s4
 800cfc4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cfc8:	9008      	str	r0, [sp, #32]
 800cfca:	eeb0 7a61 	vmov.f32	s14, s3
 800cfce:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800cfd6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800cfda:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800cfde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cfe0:	445b      	add	r3, fp
 800cfe2:	9307      	str	r3, [sp, #28]
 800cfe4:	ee16 3a90 	vmov	r3, s13
 800cfe8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800cfec:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800cff0:	ee21 3a23 	vmul.f32	s6, s2, s7
 800cff4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800cff8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800cffc:	ee17 7a90 	vmov	r7, s15
 800d000:	ee73 7a42 	vsub.f32	s15, s6, s4
 800d004:	fb97 f7f4 	sdiv	r7, r7, r4
 800d008:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d00c:	ee17 ca90 	vmov	ip, s15
 800d010:	fb9c fcf4 	sdiv	ip, ip, r4
 800d014:	fb0c 3306 	mla	r3, ip, r6, r3
 800d018:	9302      	str	r3, [sp, #8]
 800d01a:	ee17 3a10 	vmov	r3, s14
 800d01e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800d022:	fb07 3706 	mla	r7, r7, r6, r3
 800d026:	eba9 0306 	sub.w	r3, r9, r6
 800d02a:	e9cd 4700 	strd	r4, r7, [sp]
 800d02e:	f8da 4008 	ldr.w	r4, [sl, #8]
 800d032:	47a0      	blx	r4
 800d034:	b00d      	add	sp, #52	; 0x34
 800d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03a:	2500      	movs	r5, #0
 800d03c:	462e      	mov	r6, r5
 800d03e:	e799      	b.n	800cf74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800d040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	b0db      	sub	sp, #364	; 0x16c
 800d046:	461d      	mov	r5, r3
 800d048:	4614      	mov	r4, r2
 800d04a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800d04e:	910f      	str	r1, [sp, #60]	; 0x3c
 800d050:	4629      	mov	r1, r5
 800d052:	930a      	str	r3, [sp, #40]	; 0x28
 800d054:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800d058:	9009      	str	r0, [sp, #36]	; 0x24
 800d05a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d05c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800d060:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800d064:	9310      	str	r3, [sp, #64]	; 0x40
 800d066:	6803      	ldr	r3, [r0, #0]
 800d068:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800d06a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d06e:	47b8      	blx	r7
 800d070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d072:	6058      	str	r0, [r3, #4]
 800d074:	2800      	cmp	r0, #0
 800d076:	f000 83a1 	beq.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d07a:	682b      	ldr	r3, [r5, #0]
 800d07c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800d080:	ed94 7a02 	vldr	s14, [r4, #8]
 800d084:	9314      	str	r3, [sp, #80]	; 0x50
 800d086:	686b      	ldr	r3, [r5, #4]
 800d088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d08c:	9315      	str	r3, [sp, #84]	; 0x54
 800d08e:	4bc1      	ldr	r3, [pc, #772]	; (800d394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800d090:	7819      	ldrb	r1, [r3, #0]
 800d092:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800d096:	2900      	cmp	r1, #0
 800d098:	bf16      	itet	ne
 800d09a:	4619      	movne	r1, r3
 800d09c:	4611      	moveq	r1, r2
 800d09e:	4613      	movne	r3, r2
 800d0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a4:	9116      	str	r1, [sp, #88]	; 0x58
 800d0a6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800d0aa:	f240 8387 	bls.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0ae:	ed94 7a07 	vldr	s14, [r4, #28]
 800d0b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ba:	f240 837f 	bls.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0be:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800d0c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ca:	f240 8377 	bls.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0ce:	6822      	ldr	r2, [r4, #0]
 800d0d0:	4bb1      	ldr	r3, [pc, #708]	; (800d398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	f2c0 8372 	blt.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0d8:	49b0      	ldr	r1, [pc, #704]	; (800d39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800d0da:	6963      	ldr	r3, [r4, #20]
 800d0dc:	428a      	cmp	r2, r1
 800d0de:	f300 836d 	bgt.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0e2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d0e6:	48ae      	ldr	r0, [pc, #696]	; (800d3a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800d0e8:	33ff      	adds	r3, #255	; 0xff
 800d0ea:	4283      	cmp	r3, r0
 800d0ec:	f200 8366 	bhi.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d0f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0f2:	4dac      	ldr	r5, [pc, #688]	; (800d3a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800d0f4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d0f8:	33ff      	adds	r3, #255	; 0xff
 800d0fa:	42ab      	cmp	r3, r5
 800d0fc:	f200 835e 	bhi.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d100:	6862      	ldr	r2, [r4, #4]
 800d102:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800d106:	33ff      	adds	r3, #255	; 0xff
 800d108:	4283      	cmp	r3, r0
 800d10a:	f200 8357 	bhi.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d10e:	69a1      	ldr	r1, [r4, #24]
 800d110:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800d114:	33ff      	adds	r3, #255	; 0xff
 800d116:	4283      	cmp	r3, r0
 800d118:	f200 8350 	bhi.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d11c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d11e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800d122:	30ff      	adds	r0, #255	; 0xff
 800d124:	42a8      	cmp	r0, r5
 800d126:	f200 8349 	bhi.w	800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d12a:	428a      	cmp	r2, r1
 800d12c:	f280 8110 	bge.w	800d350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800d130:	429a      	cmp	r2, r3
 800d132:	f300 8119 	bgt.w	800d368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800d136:	4299      	cmp	r1, r3
 800d138:	f280 811d 	bge.w	800d376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800d13c:	2502      	movs	r5, #2
 800d13e:	2701      	movs	r7, #1
 800d140:	46a9      	mov	r9, r5
 800d142:	46b8      	mov	r8, r7
 800d144:	f04f 0a00 	mov.w	sl, #0
 800d148:	4621      	mov	r1, r4
 800d14a:	a849      	add	r0, sp, #292	; 0x124
 800d14c:	f002 ff98 	bl	8010080 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800d150:	4622      	mov	r2, r4
 800d152:	4653      	mov	r3, sl
 800d154:	a949      	add	r1, sp, #292	; 0x124
 800d156:	f8cd 9000 	str.w	r9, [sp]
 800d15a:	a819      	add	r0, sp, #100	; 0x64
 800d15c:	f003 f8c0 	bl	80102e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d160:	4622      	mov	r2, r4
 800d162:	4653      	mov	r3, sl
 800d164:	a949      	add	r1, sp, #292	; 0x124
 800d166:	f8cd 8000 	str.w	r8, [sp]
 800d16a:	a829      	add	r0, sp, #164	; 0xa4
 800d16c:	f003 f8b8 	bl	80102e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d170:	4643      	mov	r3, r8
 800d172:	4622      	mov	r2, r4
 800d174:	a949      	add	r1, sp, #292	; 0x124
 800d176:	f8cd 9000 	str.w	r9, [sp]
 800d17a:	a839      	add	r0, sp, #228	; 0xe4
 800d17c:	f003 f8b0 	bl	80102e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d180:	42af      	cmp	r7, r5
 800d182:	af12      	add	r7, sp, #72	; 0x48
 800d184:	bfb7      	itett	lt
 800d186:	2300      	movlt	r3, #0
 800d188:	2301      	movge	r3, #1
 800d18a:	ad29      	addlt	r5, sp, #164	; 0xa4
 800d18c:	ac19      	addlt	r4, sp, #100	; 0x64
 800d18e:	bfb1      	iteee	lt
 800d190:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d192:	ad19      	addge	r5, sp, #100	; 0x64
 800d194:	930e      	strge	r3, [sp, #56]	; 0x38
 800d196:	ac29      	addge	r4, sp, #164	; 0xa4
 800d198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d19a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d19e:	e887 0003 	stmia.w	r7, {r0, r1}
 800d1a2:	b928      	cbnz	r0, 800d1b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800d1a4:	4b80      	ldr	r3, [pc, #512]	; (800d3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	6803      	ldr	r3, [r0, #0]
 800d1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ac:	4798      	blx	r3
 800d1ae:	6038      	str	r0, [r7, #0]
 800d1b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d1b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800d1b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d1ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d1bc:	930c      	str	r3, [sp, #48]	; 0x30
 800d1be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d1c0:	6963      	ldr	r3, [r4, #20]
 800d1c2:	440b      	add	r3, r1
 800d1c4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d1c8:	4408      	add	r0, r1
 800d1ca:	b200      	sxth	r0, r0
 800d1cc:	4283      	cmp	r3, r0
 800d1ce:	900d      	str	r0, [sp, #52]	; 0x34
 800d1d0:	f280 80dd 	bge.w	800d38e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800d1d4:	428b      	cmp	r3, r1
 800d1d6:	da08      	bge.n	800d1ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	dd06      	ble.n	800d1ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d1dc:	1acb      	subs	r3, r1, r3
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	f2c0 80e4 	blt.w	800d3ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f300 80e2 	bgt.w	800d3ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800d1ea:	6967      	ldr	r7, [r4, #20]
 800d1ec:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800d1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1f2:	443b      	add	r3, r7
 800d1f4:	461f      	mov	r7, r3
 800d1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1f8:	1bdf      	subs	r7, r3, r7
 800d1fa:	4297      	cmp	r7, r2
 800d1fc:	bfa8      	it	ge
 800d1fe:	4617      	movge	r7, r2
 800d200:	2f00      	cmp	r7, #0
 800d202:	f340 8166 	ble.w	800d4d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800d206:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d208:	6829      	ldr	r1, [r5, #0]
 800d20a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d20e:	f9bb 3000 	ldrsh.w	r3, [fp]
 800d212:	4411      	add	r1, r2
 800d214:	6820      	ldr	r0, [r4, #0]
 800d216:	4299      	cmp	r1, r3
 800d218:	dd1a      	ble.n	800d250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d21a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800d21e:	4402      	add	r2, r0
 800d220:	440b      	add	r3, r1
 800d222:	b21b      	sxth	r3, r3
 800d224:	429a      	cmp	r2, r3
 800d226:	dc13      	bgt.n	800d250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d228:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d22a:	a912      	add	r1, sp, #72	; 0x48
 800d22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	9206      	str	r2, [sp, #24]
 800d234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d236:	9500      	str	r5, [sp, #0]
 800d238:	9205      	str	r2, [sp, #20]
 800d23a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d23c:	e9cd b203 	strd	fp, r2, [sp, #12]
 800d240:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d242:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800d246:	aa49      	add	r2, sp, #292	; 0x124
 800d248:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800d24c:	4623      	mov	r3, r4
 800d24e:	47c8      	blx	r9
 800d250:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d254:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d258:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800d25c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d260:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800d264:	68a1      	ldr	r1, [r4, #8]
 800d266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d26a:	ed94 6a08 	vldr	s12, [r4, #32]
 800d26e:	edd4 6a07 	vldr	s13, [r4, #28]
 800d272:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d276:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d27a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d27e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d282:	edc4 6a07 	vstr	s13, [r4, #28]
 800d286:	441a      	add	r2, r3
 800d288:	6963      	ldr	r3, [r4, #20]
 800d28a:	3301      	adds	r3, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	6163      	str	r3, [r4, #20]
 800d290:	69a3      	ldr	r3, [r4, #24]
 800d292:	3b01      	subs	r3, #1
 800d294:	61a3      	str	r3, [r4, #24]
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	440b      	add	r3, r1
 800d29a:	68e1      	ldr	r1, [r4, #12]
 800d29c:	428b      	cmp	r3, r1
 800d29e:	6123      	str	r3, [r4, #16]
 800d2a0:	db15      	blt.n	800d2ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800d2a2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d2a6:	3201      	adds	r2, #1
 800d2a8:	1a5b      	subs	r3, r3, r1
 800d2aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d2ae:	6022      	str	r2, [r4, #0]
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	edc4 6a07 	vstr	s13, [r4, #28]
 800d2b6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800d2ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d2be:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d2c2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800d2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2ca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d2ce:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800d2d2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800d2d6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800d2da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2de:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800d2e2:	68a9      	ldr	r1, [r5, #8]
 800d2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e8:	ed95 6a08 	vldr	s12, [r5, #32]
 800d2ec:	edd5 6a07 	vldr	s13, [r5, #28]
 800d2f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d2f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d2f8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d2fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d300:	edc5 6a07 	vstr	s13, [r5, #28]
 800d304:	441a      	add	r2, r3
 800d306:	696b      	ldr	r3, [r5, #20]
 800d308:	3301      	adds	r3, #1
 800d30a:	602a      	str	r2, [r5, #0]
 800d30c:	616b      	str	r3, [r5, #20]
 800d30e:	69ab      	ldr	r3, [r5, #24]
 800d310:	3b01      	subs	r3, #1
 800d312:	61ab      	str	r3, [r5, #24]
 800d314:	692b      	ldr	r3, [r5, #16]
 800d316:	440b      	add	r3, r1
 800d318:	68e9      	ldr	r1, [r5, #12]
 800d31a:	428b      	cmp	r3, r1
 800d31c:	612b      	str	r3, [r5, #16]
 800d31e:	db15      	blt.n	800d34c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800d320:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800d324:	3201      	adds	r2, #1
 800d326:	1a5b      	subs	r3, r3, r1
 800d328:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d32c:	602a      	str	r2, [r5, #0]
 800d32e:	612b      	str	r3, [r5, #16]
 800d330:	edc5 6a07 	vstr	s13, [r5, #28]
 800d334:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800d338:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d33c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d340:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800d344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d348:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d34c:	3f01      	subs	r7, #1
 800d34e:	e757      	b.n	800d200 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800d350:	4299      	cmp	r1, r3
 800d352:	dc13      	bgt.n	800d37c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800d354:	429a      	cmp	r2, r3
 800d356:	da14      	bge.n	800d382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800d358:	2502      	movs	r5, #2
 800d35a:	2703      	movs	r7, #3
 800d35c:	f04f 0800 	mov.w	r8, #0
 800d360:	46a9      	mov	r9, r5
 800d362:	f04f 0a01 	mov.w	sl, #1
 800d366:	e6ef      	b.n	800d148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d368:	2501      	movs	r5, #1
 800d36a:	2700      	movs	r7, #0
 800d36c:	46a9      	mov	r9, r5
 800d36e:	46b8      	mov	r8, r7
 800d370:	f04f 0a02 	mov.w	sl, #2
 800d374:	e6e8      	b.n	800d148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d376:	2501      	movs	r5, #1
 800d378:	2702      	movs	r7, #2
 800d37a:	e6e1      	b.n	800d140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800d37c:	2500      	movs	r5, #0
 800d37e:	2701      	movs	r7, #1
 800d380:	e7f4      	b.n	800d36c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800d382:	2702      	movs	r7, #2
 800d384:	2503      	movs	r5, #3
 800d386:	f04f 0900 	mov.w	r9, #0
 800d38a:	46b8      	mov	r8, r7
 800d38c:	e7e9      	b.n	800d362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800d38e:	4613      	mov	r3, r2
 800d390:	e728      	b.n	800d1e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800d392:	bf00      	nop
 800d394:	2400b21c 	.word	0x2400b21c
 800d398:	fffd8f01 	.word	0xfffd8f01
 800d39c:	00027100 	.word	0x00027100
 800d3a0:	0004e1ff 	.word	0x0004e1ff
 800d3a4:	0004e1fe 	.word	0x0004e1fe
 800d3a8:	2400b224 	.word	0x2400b224
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d3b4:	469c      	mov	ip, r3
 800d3b6:	9111      	str	r1, [sp, #68]	; 0x44
 800d3b8:	f04f 0900 	mov.w	r9, #0
 800d3bc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800d3c0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800d3c4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800d3c8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800d3cc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800d3d0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d3d4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800d3d8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800d3dc:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800d3e0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800d3e4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800d3e8:	f1bc 0f00 	cmp.w	ip, #0
 800d3ec:	d147      	bne.n	800d47e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800d3ee:	eb03 0c07 	add.w	ip, r3, r7
 800d3f2:	1ad7      	subs	r7, r2, r3
 800d3f4:	f1b9 0f00 	cmp.w	r9, #0
 800d3f8:	d009      	beq.n	800d40e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800d3fa:	9029      	str	r0, [sp, #164]	; 0xa4
 800d3fc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800d400:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800d404:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800d408:	912d      	str	r1, [sp, #180]	; 0xb4
 800d40a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800d40e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d410:	f04f 0800 	mov.w	r8, #0
 800d414:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800d418:	9111      	str	r1, [sp, #68]	; 0x44
 800d41a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800d41e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800d422:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800d426:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800d42a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800d42e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800d432:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800d436:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800d43a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800d43e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800d442:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800d446:	f1be 0f00 	cmp.w	lr, #0
 800d44a:	d031      	beq.n	800d4b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800d44c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d44e:	4450      	add	r0, sl
 800d450:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d454:	4431      	add	r1, r6
 800d456:	ee37 7a04 	vadd.f32	s14, s14, s8
 800d45a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d45e:	4549      	cmp	r1, r9
 800d460:	db08      	blt.n	800d474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800d462:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d466:	3001      	adds	r0, #1
 800d468:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d46c:	eba1 0109 	sub.w	r1, r1, r9
 800d470:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d474:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d478:	f04f 0801 	mov.w	r8, #1
 800d47c:	e7e3      	b.n	800d446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800d47e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d480:	4450      	add	r0, sl
 800d482:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d486:	4431      	add	r1, r6
 800d488:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d48c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800d490:	4541      	cmp	r1, r8
 800d492:	db08      	blt.n	800d4a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800d494:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d498:	3001      	adds	r0, #1
 800d49a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d49e:	eba1 0108 	sub.w	r1, r1, r8
 800d4a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d4aa:	f04f 0901 	mov.w	r9, #1
 800d4ae:	e79b      	b.n	800d3e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800d4b0:	449c      	add	ip, r3
 800d4b2:	1aff      	subs	r7, r7, r3
 800d4b4:	f1b8 0f00 	cmp.w	r8, #0
 800d4b8:	d009      	beq.n	800d4ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800d4ba:	9019      	str	r0, [sp, #100]	; 0x64
 800d4bc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800d4c0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800d4c4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800d4c8:	911d      	str	r1, [sp, #116]	; 0x74
 800d4ca:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	e68b      	b.n	800d1ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 80d1 	beq.w	800d67e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800d4dc:	ad19      	add	r5, sp, #100	; 0x64
 800d4de:	ac39      	add	r4, sp, #228	; 0xe4
 800d4e0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d4e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800d4e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d4ea:	930c      	str	r3, [sp, #48]	; 0x30
 800d4ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d4ee:	6963      	ldr	r3, [r4, #20]
 800d4f0:	440b      	add	r3, r1
 800d4f2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d4f6:	4408      	add	r0, r1
 800d4f8:	b200      	sxth	r0, r0
 800d4fa:	4283      	cmp	r3, r0
 800d4fc:	900d      	str	r0, [sp, #52]	; 0x34
 800d4fe:	f280 80c1 	bge.w	800d684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800d502:	428b      	cmp	r3, r1
 800d504:	da08      	bge.n	800d518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d506:	2a00      	cmp	r2, #0
 800d508:	dd06      	ble.n	800d518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d50a:	1acb      	subs	r3, r1, r3
 800d50c:	429a      	cmp	r2, r3
 800d50e:	f2c0 80bb 	blt.w	800d688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800d512:	2b00      	cmp	r3, #0
 800d514:	f300 80b9 	bgt.w	800d68a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800d518:	6967      	ldr	r7, [r4, #20]
 800d51a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800d51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d520:	443b      	add	r3, r7
 800d522:	461f      	mov	r7, r3
 800d524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d526:	1bdf      	subs	r7, r3, r7
 800d528:	4297      	cmp	r7, r2
 800d52a:	bfa8      	it	ge
 800d52c:	4617      	movge	r7, r2
 800d52e:	2f00      	cmp	r7, #0
 800d530:	f340 813c 	ble.w	800d7ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800d534:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d536:	6829      	ldr	r1, [r5, #0]
 800d538:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d53c:	f9bb 3000 	ldrsh.w	r3, [fp]
 800d540:	4411      	add	r1, r2
 800d542:	6820      	ldr	r0, [r4, #0]
 800d544:	4299      	cmp	r1, r3
 800d546:	dd1a      	ble.n	800d57e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800d548:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800d54c:	4402      	add	r2, r0
 800d54e:	440b      	add	r3, r1
 800d550:	b21b      	sxth	r3, r3
 800d552:	429a      	cmp	r2, r3
 800d554:	dc13      	bgt.n	800d57e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800d556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d558:	a912      	add	r1, sp, #72	; 0x48
 800d55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	9206      	str	r2, [sp, #24]
 800d562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d564:	9500      	str	r5, [sp, #0]
 800d566:	9205      	str	r2, [sp, #20]
 800d568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d56a:	e9cd b203 	strd	fp, r2, [sp, #12]
 800d56e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d570:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800d574:	aa49      	add	r2, sp, #292	; 0x124
 800d576:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800d57a:	4623      	mov	r3, r4
 800d57c:	47c8      	blx	r9
 800d57e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d582:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d586:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800d58a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d58e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800d592:	68a1      	ldr	r1, [r4, #8]
 800d594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d598:	ed94 6a08 	vldr	s12, [r4, #32]
 800d59c:	edd4 6a07 	vldr	s13, [r4, #28]
 800d5a0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d5a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d5a8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d5ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5b0:	edc4 6a07 	vstr	s13, [r4, #28]
 800d5b4:	441a      	add	r2, r3
 800d5b6:	6963      	ldr	r3, [r4, #20]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	6022      	str	r2, [r4, #0]
 800d5bc:	6163      	str	r3, [r4, #20]
 800d5be:	69a3      	ldr	r3, [r4, #24]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	61a3      	str	r3, [r4, #24]
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	440b      	add	r3, r1
 800d5c8:	68e1      	ldr	r1, [r4, #12]
 800d5ca:	428b      	cmp	r3, r1
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	db15      	blt.n	800d5fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800d5d0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d5d4:	3201      	adds	r2, #1
 800d5d6:	1a5b      	subs	r3, r3, r1
 800d5d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d5dc:	6022      	str	r2, [r4, #0]
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	edc4 6a07 	vstr	s13, [r4, #28]
 800d5e4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800d5e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d5ec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d5f0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800d5f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5f8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d5fc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800d600:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800d604:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800d608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d60c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800d610:	68a9      	ldr	r1, [r5, #8]
 800d612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d616:	ed95 6a08 	vldr	s12, [r5, #32]
 800d61a:	edd5 6a07 	vldr	s13, [r5, #28]
 800d61e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d622:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d626:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d62a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d62e:	edc5 6a07 	vstr	s13, [r5, #28]
 800d632:	441a      	add	r2, r3
 800d634:	696b      	ldr	r3, [r5, #20]
 800d636:	3301      	adds	r3, #1
 800d638:	602a      	str	r2, [r5, #0]
 800d63a:	616b      	str	r3, [r5, #20]
 800d63c:	69ab      	ldr	r3, [r5, #24]
 800d63e:	3b01      	subs	r3, #1
 800d640:	61ab      	str	r3, [r5, #24]
 800d642:	692b      	ldr	r3, [r5, #16]
 800d644:	440b      	add	r3, r1
 800d646:	68e9      	ldr	r1, [r5, #12]
 800d648:	428b      	cmp	r3, r1
 800d64a:	612b      	str	r3, [r5, #16]
 800d64c:	db15      	blt.n	800d67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800d64e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800d652:	3201      	adds	r2, #1
 800d654:	1a5b      	subs	r3, r3, r1
 800d656:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d65a:	602a      	str	r2, [r5, #0]
 800d65c:	612b      	str	r3, [r5, #16]
 800d65e:	edc5 6a07 	vstr	s13, [r5, #28]
 800d662:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800d666:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d66a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d66e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800d672:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d676:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d67a:	3f01      	subs	r7, #1
 800d67c:	e757      	b.n	800d52e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800d67e:	ad39      	add	r5, sp, #228	; 0xe4
 800d680:	ac19      	add	r4, sp, #100	; 0x64
 800d682:	e72d      	b.n	800d4e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800d684:	4613      	mov	r3, r2
 800d686:	e744      	b.n	800d512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800d688:	4613      	mov	r3, r2
 800d68a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800d68c:	469e      	mov	lr, r3
 800d68e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800d692:	461f      	mov	r7, r3
 800d694:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800d698:	f04f 0900 	mov.w	r9, #0
 800d69c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800d6a0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800d6a4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800d6a8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800d6ac:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800d6b0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800d6b2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800d6b6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800d6ba:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800d6be:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800d6c2:	960e      	str	r6, [sp, #56]	; 0x38
 800d6c4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	d146      	bne.n	800d75a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800d6cc:	449c      	add	ip, r3
 800d6ce:	1ad7      	subs	r7, r2, r3
 800d6d0:	f1b9 0f00 	cmp.w	r9, #0
 800d6d4:	d009      	beq.n	800d6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800d6d6:	9039      	str	r0, [sp, #228]	; 0xe4
 800d6d8:	913d      	str	r1, [sp, #244]	; 0xf4
 800d6da:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800d6de:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800d6e2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800d6e6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800d6ea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d6ec:	f04f 0800 	mov.w	r8, #0
 800d6f0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800d6f4:	910e      	str	r1, [sp, #56]	; 0x38
 800d6f6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800d6fa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800d6fe:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800d702:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800d706:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800d70a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800d70e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800d712:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800d716:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800d71a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800d71e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800d722:	f1be 0f00 	cmp.w	lr, #0
 800d726:	d030      	beq.n	800d78a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800d728:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d72a:	4450      	add	r0, sl
 800d72c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d730:	4431      	add	r1, r6
 800d732:	ee37 7a04 	vadd.f32	s14, s14, s8
 800d736:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d73a:	4549      	cmp	r1, r9
 800d73c:	db08      	blt.n	800d750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800d73e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d742:	3001      	adds	r0, #1
 800d744:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d748:	eba1 0109 	sub.w	r1, r1, r9
 800d74c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d750:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d754:	f04f 0801 	mov.w	r8, #1
 800d758:	e7e3      	b.n	800d722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800d75a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d75c:	4450      	add	r0, sl
 800d75e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d762:	4431      	add	r1, r6
 800d764:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d768:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800d76c:	4541      	cmp	r1, r8
 800d76e:	db08      	blt.n	800d782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800d770:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d774:	3001      	adds	r0, #1
 800d776:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d77a:	eba1 0108 	sub.w	r1, r1, r8
 800d77e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d782:	3f01      	subs	r7, #1
 800d784:	f04f 0901 	mov.w	r9, #1
 800d788:	e79e      	b.n	800d6c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800d78a:	449c      	add	ip, r3
 800d78c:	1aff      	subs	r7, r7, r3
 800d78e:	f1b8 0f00 	cmp.w	r8, #0
 800d792:	d009      	beq.n	800d7a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800d794:	9019      	str	r0, [sp, #100]	; 0x64
 800d796:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800d79a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800d79e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800d7a2:	911d      	str	r1, [sp, #116]	; 0x74
 800d7a4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800d7a8:	1ad2      	subs	r2, r2, r3
 800d7aa:	e6b5      	b.n	800d518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d7ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	b923      	cbnz	r3, 800d7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d7b2:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	6803      	ldr	r3, [r0, #0]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ba:	4798      	blx	r3
 800d7bc:	b05b      	add	sp, #364	; 0x16c
 800d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c2:	bf00      	nop
 800d7c4:	2400b224 	.word	0x2400b224

0800d7c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d818      	bhi.n	800d7fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800d7cc:	e8df f003 	tbb	[pc, r3]
 800d7d0:	130d0602 	.word	0x130d0602
 800d7d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d7d8:	1850      	adds	r0, r2, r1
 800d7da:	4770      	bx	lr
 800d7dc:	8803      	ldrh	r3, [r0, #0]
 800d7de:	8880      	ldrh	r0, [r0, #4]
 800d7e0:	4418      	add	r0, r3
 800d7e2:	b200      	sxth	r0, r0
 800d7e4:	1a80      	subs	r0, r0, r2
 800d7e6:	3801      	subs	r0, #1
 800d7e8:	4770      	bx	lr
 800d7ea:	8803      	ldrh	r3, [r0, #0]
 800d7ec:	8880      	ldrh	r0, [r0, #4]
 800d7ee:	4418      	add	r0, r3
 800d7f0:	b200      	sxth	r0, r0
 800d7f2:	1a40      	subs	r0, r0, r1
 800d7f4:	e7f7      	b.n	800d7e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800d7f6:	f9b0 0000 	ldrsh.w	r0, [r0]
 800d7fa:	4410      	add	r0, r2
 800d7fc:	4770      	bx	lr
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr

0800d802 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800d802:	2b03      	cmp	r3, #3
 800d804:	d817      	bhi.n	800d836 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800d806:	e8df f003 	tbb	[pc, r3]
 800d80a:	0602      	.short	0x0602
 800d80c:	1009      	.short	0x1009
 800d80e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800d812:	1850      	adds	r0, r2, r1
 800d814:	4770      	bx	lr
 800d816:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d81a:	e7fa      	b.n	800d812 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800d81c:	8843      	ldrh	r3, [r0, #2]
 800d81e:	88c0      	ldrh	r0, [r0, #6]
 800d820:	4418      	add	r0, r3
 800d822:	b200      	sxth	r0, r0
 800d824:	1a80      	subs	r0, r0, r2
 800d826:	3801      	subs	r0, #1
 800d828:	4770      	bx	lr
 800d82a:	8843      	ldrh	r3, [r0, #2]
 800d82c:	88c0      	ldrh	r0, [r0, #6]
 800d82e:	4418      	add	r0, r3
 800d830:	b200      	sxth	r0, r0
 800d832:	1a40      	subs	r0, r0, r1
 800d834:	e7f7      	b.n	800d826 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800d836:	2000      	movs	r0, #0
 800d838:	4770      	bx	lr
	...

0800d83c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800d83c:	4b01      	ldr	r3, [pc, #4]	; (800d844 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800d83e:	2200      	movs	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	4770      	bx	lr
 800d844:	2400b22c 	.word	0x2400b22c

0800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800d848:	4603      	mov	r3, r0
 800d84a:	b1c8      	cbz	r0, 800d880 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800d84c:	0c02      	lsrs	r2, r0, #16
 800d84e:	0412      	lsls	r2, r2, #16
 800d850:	b9a2      	cbnz	r2, 800d87c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800d852:	0403      	lsls	r3, r0, #16
 800d854:	2010      	movs	r0, #16
 800d856:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d85a:	bf04      	itt	eq
 800d85c:	021b      	lsleq	r3, r3, #8
 800d85e:	3008      	addeq	r0, #8
 800d860:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d864:	bf04      	itt	eq
 800d866:	011b      	lsleq	r3, r3, #4
 800d868:	3004      	addeq	r0, #4
 800d86a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d86e:	bf04      	itt	eq
 800d870:	009b      	lsleq	r3, r3, #2
 800d872:	3002      	addeq	r0, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	db04      	blt.n	800d882 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800d878:	3001      	adds	r0, #1
 800d87a:	4770      	bx	lr
 800d87c:	2000      	movs	r0, #0
 800d87e:	e7ea      	b.n	800d856 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800d880:	2020      	movs	r0, #32
 800d882:	4770      	bx	lr

0800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	b087      	sub	sp, #28
 800d88a:	4681      	mov	r9, r0
 800d88c:	4698      	mov	r8, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	460d      	mov	r5, r1
 800d892:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800d896:	b981      	cbnz	r1, 800d8ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800d898:	b14b      	cbz	r3, 800d8ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800d89a:	460b      	mov	r3, r1
 800d89c:	464a      	mov	r2, r9
 800d89e:	4641      	mov	r1, r8
 800d8a0:	e9cd 4700 	strd	r4, r7, [sp]
 800d8a4:	f7ff ffee 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d8a8:	b007      	add	sp, #28
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d8b6:	603b      	str	r3, [r7, #0]
 800d8b8:	e7f6      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d8ba:	fa32 fa01 	lsrs.w	sl, r2, r1
 800d8be:	d107      	bne.n	800d8d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800d8c0:	fb09 f602 	mul.w	r6, r9, r2
 800d8c4:	fbb6 f0f4 	udiv	r0, r6, r4
 800d8c8:	fb04 6610 	mls	r6, r4, r0, r6
 800d8cc:	603e      	str	r6, [r7, #0]
 800d8ce:	e7eb      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d8d0:	2601      	movs	r6, #1
 800d8d2:	fa09 fb01 	lsl.w	fp, r9, r1
 800d8d6:	408e      	lsls	r6, r1
 800d8d8:	fbbb f3f4 	udiv	r3, fp, r4
 800d8dc:	3e01      	subs	r6, #1
 800d8de:	9302      	str	r3, [sp, #8]
 800d8e0:	fb0a f303 	mul.w	r3, sl, r3
 800d8e4:	4016      	ands	r6, r2
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff ffad 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d8ee:	464a      	mov	r2, r9
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	e9cd 4700 	strd	r4, r7, [sp]
 800d8fa:	f7ff ffc3 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d8fe:	9b02      	ldr	r3, [sp, #8]
 800d900:	4606      	mov	r6, r0
 800d902:	eb05 0108 	add.w	r1, r5, r8
 800d906:	fb04 bb13 	mls	fp, r4, r3, fp
 800d90a:	4658      	mov	r0, fp
 800d90c:	f7ff ff9c 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d910:	ab05      	add	r3, sp, #20
 800d912:	465a      	mov	r2, fp
 800d914:	e9cd 4300 	strd	r4, r3, [sp]
 800d918:	4603      	mov	r3, r0
 800d91a:	4650      	mov	r0, sl
 800d91c:	f7ff ffb2 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	9a05      	ldr	r2, [sp, #20]
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	4411      	add	r1, r2
 800d928:	fbb1 f2f4 	udiv	r2, r1, r4
 800d92c:	18d3      	adds	r3, r2, r3
 800d92e:	fb04 1412 	mls	r4, r4, r2, r1
 800d932:	441e      	add	r6, r3
 800d934:	603c      	str	r4, [r7, #0]
 800d936:	4430      	add	r0, r6
 800d938:	e7b6      	b.n	800d8a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800d93a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	f1b0 0900 	subs.w	r9, r0, #0
 800d944:	461d      	mov	r5, r3
 800d946:	4617      	mov	r7, r2
 800d948:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d94a:	bfbb      	ittet	lt
 800d94c:	f1c9 0900 	rsblt	r9, r9, #0
 800d950:	f04f 36ff 	movlt.w	r6, #4294967295
 800d954:	2601      	movge	r6, #1
 800d956:	6823      	ldrlt	r3, [r4, #0]
 800d958:	bfbc      	itt	lt
 800d95a:	425b      	neglt	r3, r3
 800d95c:	6023      	strlt	r3, [r4, #0]
 800d95e:	2a00      	cmp	r2, #0
 800d960:	da04      	bge.n	800d96c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	4257      	negs	r7, r2
 800d966:	4276      	negs	r6, r6
 800d968:	425b      	negs	r3, r3
 800d96a:	6023      	str	r3, [r4, #0]
 800d96c:	2d00      	cmp	r5, #0
 800d96e:	4638      	mov	r0, r7
 800d970:	bfba      	itte	lt
 800d972:	426d      	neglt	r5, r5
 800d974:	f04f 38ff 	movlt.w	r8, #4294967295
 800d978:	f04f 0801 	movge.w	r8, #1
 800d97c:	f7ff ff64 	bl	800d848 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d980:	ab03      	add	r3, sp, #12
 800d982:	463a      	mov	r2, r7
 800d984:	e9cd 5300 	strd	r5, r3, [sp]
 800d988:	4603      	mov	r3, r0
 800d98a:	4648      	mov	r0, r9
 800d98c:	f7ff ff7a 	bl	800d884 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	9a03      	ldr	r2, [sp, #12]
 800d994:	4546      	cmp	r6, r8
 800d996:	441a      	add	r2, r3
 800d998:	fb92 f3f5 	sdiv	r3, r2, r5
 800d99c:	4418      	add	r0, r3
 800d99e:	fb05 2313 	mls	r3, r5, r3, r2
 800d9a2:	bf18      	it	ne
 800d9a4:	4240      	negne	r0, r0
 800d9a6:	1c72      	adds	r2, r6, #1
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	d105      	bne.n	800d9b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f1c3 0200 	rsb	r2, r3, #0
 800d9b2:	db0b      	blt.n	800d9cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800d9b4:	6022      	str	r2, [r4, #0]
 800d9b6:	e006      	b.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9b8:	2e01      	cmp	r6, #1
 800d9ba:	d104      	bne.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da02      	bge.n	800d9c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d9c0:	442b      	add	r3, r5
 800d9c2:	3801      	subs	r0, #1
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	b005      	add	sp, #20
 800d9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9cc:	3801      	subs	r0, #1
 800d9ce:	1b52      	subs	r2, r2, r5
 800d9d0:	e7f0      	b.n	800d9b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800d9d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800d9d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d9d8:	4c1c      	ldr	r4, [pc, #112]	; (800da4c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800d9da:	4605      	mov	r5, r0
 800d9dc:	6807      	ldr	r7, [r0, #0]
 800d9de:	69a3      	ldr	r3, [r4, #24]
 800d9e0:	b92b      	cbnz	r3, 800d9ee <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800d9e2:	6840      	ldr	r0, [r0, #4]
 800d9e4:	e9c5 7000 	strd	r7, r0, [r5]
 800d9e8:	b004      	add	sp, #16
 800d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ee:	f04f 0802 	mov.w	r8, #2
 800d9f2:	68a2      	ldr	r2, [r4, #8]
 800d9f4:	ae04      	add	r6, sp, #16
 800d9f6:	6820      	ldr	r0, [r4, #0]
 800d9f8:	fb93 f1f8 	sdiv	r1, r3, r8
 800d9fc:	440a      	add	r2, r1
 800d9fe:	69e1      	ldr	r1, [r4, #28]
 800da00:	f846 2d04 	str.w	r2, [r6, #-4]!
 800da04:	463a      	mov	r2, r7
 800da06:	9600      	str	r6, [sp, #0]
 800da08:	f7ff ff97 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da0c:	69a3      	ldr	r3, [r4, #24]
 800da0e:	4607      	mov	r7, r0
 800da10:	686a      	ldr	r2, [r5, #4]
 800da12:	6a21      	ldr	r1, [r4, #32]
 800da14:	9600      	str	r6, [sp, #0]
 800da16:	6860      	ldr	r0, [r4, #4]
 800da18:	f7ff ff8f 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da1c:	69a3      	ldr	r3, [r4, #24]
 800da1e:	6962      	ldr	r2, [r4, #20]
 800da20:	4407      	add	r7, r0
 800da22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da24:	9600      	str	r6, [sp, #0]
 800da26:	68e0      	ldr	r0, [r4, #12]
 800da28:	fb93 f8f8 	sdiv	r8, r3, r8
 800da2c:	4442      	add	r2, r8
 800da2e:	9203      	str	r2, [sp, #12]
 800da30:	682a      	ldr	r2, [r5, #0]
 800da32:	f7ff ff82 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da36:	4680      	mov	r8, r0
 800da38:	9600      	str	r6, [sp, #0]
 800da3a:	69a3      	ldr	r3, [r4, #24]
 800da3c:	686a      	ldr	r2, [r5, #4]
 800da3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800da40:	6920      	ldr	r0, [r4, #16]
 800da42:	f7ff ff7a 	bl	800d93a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800da46:	4440      	add	r0, r8
 800da48:	e7cc      	b.n	800d9e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800da4a:	bf00      	nop
 800da4c:	2400b230 	.word	0x2400b230

0800da50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d109      	bne.n	800da6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800da58:	f9b1 3000 	ldrsh.w	r3, [r1]
 800da5c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da60:	8003      	strh	r3, [r0, #0]
 800da62:	4b04      	ldr	r3, [pc, #16]	; (800da74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	3b01      	subs	r3, #1
 800da68:	1a9b      	subs	r3, r3, r2
 800da6a:	800b      	strh	r3, [r1, #0]
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	2400b21c 	.word	0x2400b21c
 800da74:	2400b218 	.word	0x2400b218

0800da78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800da7a:	b510      	push	{r4, lr}
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d108      	bne.n	800da94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800da82:	4b06      	ldr	r3, [pc, #24]	; (800da9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800da84:	880c      	ldrh	r4, [r1, #0]
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	f9b0 2000 	ldrsh.w	r2, [r0]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	1b1b      	subs	r3, r3, r4
 800da90:	8003      	strh	r3, [r0, #0]
 800da92:	800a      	strh	r2, [r1, #0]
 800da94:	bd10      	pop	{r4, pc}
 800da96:	bf00      	nop
 800da98:	2400b21c 	.word	0x2400b21c
 800da9c:	2400b218 	.word	0x2400b218

0800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800daa0:	4b0a      	ldr	r3, [pc, #40]	; (800dacc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800daa2:	b510      	push	{r4, lr}
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d10e      	bne.n	800dac8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800daaa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800daae:	8843      	ldrh	r3, [r0, #2]
 800dab0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dab4:	18ca      	adds	r2, r1, r3
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800dab8:	8044      	strh	r4, [r0, #2]
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	1a9b      	subs	r3, r3, r2
 800dabe:	8003      	strh	r3, [r0, #0]
 800dac0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dac4:	8081      	strh	r1, [r0, #4]
 800dac6:	80c3      	strh	r3, [r0, #6]
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	bf00      	nop
 800dacc:	2400b21c 	.word	0x2400b21c
 800dad0:	2400b218 	.word	0x2400b218

0800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800dad4:	4b08      	ldr	r3, [pc, #32]	; (800daf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d10c      	bne.n	800daf6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800dadc:	8803      	ldrh	r3, [r0, #0]
 800dade:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800dae2:	8842      	ldrh	r2, [r0, #2]
 800dae4:	8002      	strh	r2, [r0, #0]
 800dae6:	185a      	adds	r2, r3, r1
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	8043      	strh	r3, [r0, #2]
 800daf0:	88c3      	ldrh	r3, [r0, #6]
 800daf2:	80c1      	strh	r1, [r0, #6]
 800daf4:	8083      	strh	r3, [r0, #4]
 800daf6:	4770      	bx	lr
 800daf8:	2400b21c 	.word	0x2400b21c
 800dafc:	2400b218 	.word	0x2400b218

0800db00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800db00:	4b07      	ldr	r3, [pc, #28]	; (800db20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800db02:	b510      	push	{r4, lr}
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d108      	bne.n	800db1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800db0a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800db0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800db12:	8003      	strh	r3, [r0, #0]
 800db14:	8893      	ldrh	r3, [r2, #4]
 800db16:	3b01      	subs	r3, #1
 800db18:	1b1b      	subs	r3, r3, r4
 800db1a:	800b      	strh	r3, [r1, #0]
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	bf00      	nop
 800db20:	2400b21c 	.word	0x2400b21c

0800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800db26:	460a      	mov	r2, r1
 800db28:	b510      	push	{r4, lr}
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d10d      	bne.n	800db4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800db30:	8881      	ldrh	r1, [r0, #4]
 800db32:	8803      	ldrh	r3, [r0, #0]
 800db34:	440b      	add	r3, r1
 800db36:	4601      	mov	r1, r0
 800db38:	3b01      	subs	r3, #1
 800db3a:	f821 3b02 	strh.w	r3, [r1], #2
 800db3e:	f7ff ffdf 	bl	800db00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800db42:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800db46:	88c2      	ldrh	r2, [r0, #6]
 800db48:	80c3      	strh	r3, [r0, #6]
 800db4a:	8082      	strh	r2, [r0, #4]
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	bf00      	nop
 800db50:	2400b21c 	.word	0x2400b21c

0800db54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	2300      	movs	r3, #0
 800db58:	4c0a      	ldr	r4, [pc, #40]	; (800db84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800db5a:	4605      	mov	r5, r0
 800db5c:	460e      	mov	r6, r1
 800db5e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800db62:	6820      	ldr	r0, [r4, #0]
 800db64:	b110      	cbz	r0, 800db6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 800db66:	6803      	ldr	r3, [r0, #0]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	4798      	blx	r3
 800db6c:	6026      	str	r6, [r4, #0]
 800db6e:	4630      	mov	r0, r6
 800db70:	6833      	ldr	r3, [r6, #0]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	4798      	blx	r3
 800db76:	682b      	ldr	r3, [r5, #0]
 800db78:	4628      	mov	r0, r5
 800db7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db80:	4718      	bx	r3
 800db82:	bf00      	nop
 800db84:	2400b260 	.word	0x2400b260

0800db88 <_ZN8touchgfx11Application13requestRedrawEv>:
 800db88:	4b06      	ldr	r3, [pc, #24]	; (800dba4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800db8a:	2100      	movs	r1, #0
 800db8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800db92:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800db96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db9a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800db9e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800dba2:	4770      	bx	lr
 800dba4:	2400b218 	.word	0x2400b218
 800dba8:	2400b21a 	.word	0x2400b21a

0800dbac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800dbac:	4b03      	ldr	r3, [pc, #12]	; (800dbbc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	b110      	cbz	r0, 800dbb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800dbb2:	6803      	ldr	r3, [r0, #0]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	4718      	bx	r3
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	2400b260 	.word	0x2400b260

0800dbc0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800dbc0:	4770      	bx	lr
	...

0800dbc4 <_ZN8touchgfx11Application4drawEv>:
 800dbc4:	4b09      	ldr	r3, [pc, #36]	; (800dbec <_ZN8touchgfx11Application4drawEv+0x28>)
 800dbc6:	b507      	push	{r0, r1, r2, lr}
 800dbc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dbcc:	2100      	movs	r1, #0
 800dbce:	4b08      	ldr	r3, [pc, #32]	; (800dbf0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800dbd0:	9100      	str	r1, [sp, #0]
 800dbd2:	4669      	mov	r1, sp
 800dbd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbd8:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dbdc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dbe0:	6803      	ldr	r3, [r0, #0]
 800dbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe4:	4798      	blx	r3
 800dbe6:	b003      	add	sp, #12
 800dbe8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbec:	2400b218 	.word	0x2400b218
 800dbf0:	2400b21a 	.word	0x2400b21a

0800dbf4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800dbf4:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800dbf6:	6818      	ldr	r0, [r3, #0]
 800dbf8:	b110      	cbz	r0, 800dc00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800dbfa:	6803      	ldr	r3, [r0, #0]
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	4718      	bx	r3
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	2400b260 	.word	0x2400b260

0800dc08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800dc08:	4b03      	ldr	r3, [pc, #12]	; (800dc18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800dc0a:	6818      	ldr	r0, [r3, #0]
 800dc0c:	b110      	cbz	r0, 800dc14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800dc0e:	6803      	ldr	r3, [r0, #0]
 800dc10:	6a1b      	ldr	r3, [r3, #32]
 800dc12:	4718      	bx	r3
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	2400b260 	.word	0x2400b260

0800dc1c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800dc22:	4770      	bx	lr

0800dc24 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800dc24:	4b03      	ldr	r3, [pc, #12]	; (800dc34 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800dc26:	6818      	ldr	r0, [r3, #0]
 800dc28:	b110      	cbz	r0, 800dc30 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800dc2a:	6803      	ldr	r3, [r0, #0]
 800dc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2e:	4718      	bx	r3
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	2400b260 	.word	0x2400b260

0800dc38 <_ZN8touchgfx11Application15handleTickEventEv>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	4d32      	ldr	r5, [pc, #200]	; (800dd04 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	6828      	ldr	r0, [r5, #0]
 800dc40:	b140      	cbz	r0, 800dc54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dc42:	7a03      	ldrb	r3, [r0, #8]
 800dc44:	b933      	cbnz	r3, 800dc54 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dc46:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800dc4a:	6803      	ldr	r3, [r0, #0]
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc52:	4718      	bx	r3
 800dc54:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800dc58:	b97b      	cbnz	r3, 800dc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc5a:	b170      	cbz	r0, 800dc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc5c:	7a03      	ldrb	r3, [r0, #8]
 800dc5e:	b163      	cbz	r3, 800dc7a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dc60:	4b29      	ldr	r3, [pc, #164]	; (800dd08 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	b110      	cbz	r0, 800dc6c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800dc66:	6803      	ldr	r3, [r0, #0]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	4798      	blx	r3
 800dc6c:	6828      	ldr	r0, [r5, #0]
 800dc6e:	6803      	ldr	r3, [r0, #0]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	4798      	blx	r3
 800dc74:	2301      	movs	r3, #1
 800dc76:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800dc7a:	2500      	movs	r5, #0
 800dc7c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800dc80:	42a8      	cmp	r0, r5
 800dc82:	dd0c      	ble.n	800dc9e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800dc84:	1963      	adds	r3, r4, r5
 800dc86:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800dc8a:	b132      	cbz	r2, 800dc9a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800dc8c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800dc90:	4413      	add	r3, r2
 800dc92:	6858      	ldr	r0, [r3, #4]
 800dc94:	6803      	ldr	r3, [r0, #0]
 800dc96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc98:	4798      	blx	r3
 800dc9a:	3501      	adds	r5, #1
 800dc9c:	e7ee      	b.n	800dc7c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	461a      	mov	r2, r3
 800dca2:	4298      	cmp	r0, r3
 800dca4:	d015      	beq.n	800dcd2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800dca6:	18e1      	adds	r1, r4, r3
 800dca8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800dcac:	b16d      	cbz	r5, 800dcca <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d00a      	beq.n	800dcc8 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 800dcb2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800dcb6:	4431      	add	r1, r6
 800dcb8:	684e      	ldr	r6, [r1, #4]
 800dcba:	b291      	uxth	r1, r2
 800dcbc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcc0:	604e      	str	r6, [r1, #4]
 800dcc2:	18a1      	adds	r1, r4, r2
 800dcc4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800dcc8:	3201      	adds	r2, #1
 800dcca:	3301      	adds	r3, #1
 800dccc:	e7e9      	b.n	800dca2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800dcce:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800dcd2:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 800dcd6:	4295      	cmp	r5, r2
 800dcd8:	dd0d      	ble.n	800dcf6 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 800dcda:	1e6b      	subs	r3, r5, #1
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800dce2:	4618      	mov	r0, r3
 800dce4:	3104      	adds	r1, #4
 800dce6:	4285      	cmp	r5, r0
 800dce8:	ddf1      	ble.n	800dcce <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 800dcea:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800dcee:	3001      	adds	r0, #1
 800dcf0:	f841 6c04 	str.w	r6, [r1, #-4]
 800dcf4:	e7f7      	b.n	800dce6 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 800dcf6:	4b04      	ldr	r3, [pc, #16]	; (800dd08 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 800dcf8:	6818      	ldr	r0, [r3, #0]
 800dcfa:	b110      	cbz	r0, 800dd02 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800dcfc:	6803      	ldr	r3, [r0, #0]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	e7a5      	b.n	800dc4e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	2400b264 	.word	0x2400b264
 800dd08:	2400b260 	.word	0x2400b260

0800dd0c <_ZN8touchgfx11ApplicationD1Ev>:
 800dd0c:	4770      	bx	lr

0800dd0e <_ZN8touchgfx11ApplicationD0Ev>:
 800dd0e:	b510      	push	{r4, lr}
 800dd10:	4604      	mov	r4, r0
 800dd12:	f44f 719c 	mov.w	r1, #312	; 0x138
 800dd16:	f00a fe06 	bl	8018926 <_ZdlPvj>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	bd10      	pop	{r4, pc}

0800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800dd1e:	b510      	push	{r4, lr}
 800dd20:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dd24:	888a      	ldrh	r2, [r1, #4]
 800dd26:	f9b0 3000 	ldrsh.w	r3, [r0]
 800dd2a:	4422      	add	r2, r4
 800dd2c:	b212      	sxth	r2, r2
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	da15      	bge.n	800dd5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd32:	8882      	ldrh	r2, [r0, #4]
 800dd34:	4413      	add	r3, r2
 800dd36:	b21b      	sxth	r3, r3
 800dd38:	429c      	cmp	r4, r3
 800dd3a:	da10      	bge.n	800dd5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd3c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800dd40:	88c9      	ldrh	r1, [r1, #6]
 800dd42:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dd46:	4419      	add	r1, r3
 800dd48:	b209      	sxth	r1, r1
 800dd4a:	428a      	cmp	r2, r1
 800dd4c:	da07      	bge.n	800dd5e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dd4e:	88c0      	ldrh	r0, [r0, #6]
 800dd50:	4410      	add	r0, r2
 800dd52:	b200      	sxth	r0, r0
 800dd54:	4283      	cmp	r3, r0
 800dd56:	bfac      	ite	ge
 800dd58:	2000      	movge	r0, #0
 800dd5a:	2001      	movlt	r0, #1
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e7fc      	b.n	800dd5c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800dd62 <_ZN8touchgfx4Rect10restrictToEss>:
 800dd62:	f9b0 3000 	ldrsh.w	r3, [r0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	da04      	bge.n	800dd76 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800dd6c:	8884      	ldrh	r4, [r0, #4]
 800dd6e:	4423      	add	r3, r4
 800dd70:	8083      	strh	r3, [r0, #4]
 800dd72:	2300      	movs	r3, #0
 800dd74:	8003      	strh	r3, [r0, #0]
 800dd76:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dd7a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dd7e:	1b09      	subs	r1, r1, r4
 800dd80:	428b      	cmp	r3, r1
 800dd82:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dd86:	bfc8      	it	gt
 800dd88:	8081      	strhgt	r1, [r0, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	da04      	bge.n	800dd98 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800dd8e:	88c1      	ldrh	r1, [r0, #6]
 800dd90:	440b      	add	r3, r1
 800dd92:	80c3      	strh	r3, [r0, #6]
 800dd94:	2300      	movs	r3, #0
 800dd96:	8043      	strh	r3, [r0, #2]
 800dd98:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800dd9c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800dda0:	1a52      	subs	r2, r2, r1
 800dda2:	4293      	cmp	r3, r2
 800dda4:	bfc8      	it	gt
 800dda6:	80c2      	strhgt	r2, [r0, #6]
 800dda8:	bd10      	pop	{r4, pc}
	...

0800ddac <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800ddac:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800ddae:	b510      	push	{r4, lr}
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	; (800ddf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ddbe:	f7ff ffd0 	bl	800dd62 <_ZN8touchgfx4Rect10restrictToEss>
 800ddc2:	4b0d      	ldr	r3, [pc, #52]	; (800ddf8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	b190      	cbz	r0, 800ddee <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800ddc8:	6803      	ldr	r3, [r0, #0]
 800ddca:	4621      	mov	r1, r4
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	4798      	blx	r3
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800ddd2:	6818      	ldr	r0, [r3, #0]
 800ddd4:	b118      	cbz	r0, 800ddde <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800ddd6:	6803      	ldr	r3, [r0, #0]
 800ddd8:	4621      	mov	r1, r4
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	4798      	blx	r3
 800ddde:	4b08      	ldr	r3, [pc, #32]	; (800de00 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800dde0:	4621      	mov	r1, r4
 800dde2:	6818      	ldr	r0, [r3, #0]
 800dde4:	6803      	ldr	r3, [r0, #0]
 800dde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	4718      	bx	r3
 800ddee:	bd10      	pop	{r4, pc}
 800ddf0:	2400b21a 	.word	0x2400b21a
 800ddf4:	2400b218 	.word	0x2400b218
 800ddf8:	2400b260 	.word	0x2400b260
 800ddfc:	2400b25c 	.word	0x2400b25c
 800de00:	2400b224 	.word	0x2400b224

0800de04 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	4606      	mov	r6, r0
 800de08:	4608      	mov	r0, r1
 800de0a:	460f      	mov	r7, r1
 800de0c:	f7fd ff35 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800de10:	b9e8      	cbnz	r0, 800de4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800de12:	f9b7 5000 	ldrsh.w	r5, [r7]
 800de16:	f9b6 4000 	ldrsh.w	r4, [r6]
 800de1a:	42a5      	cmp	r5, r4
 800de1c:	db17      	blt.n	800de4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800de1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800de22:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800de26:	429a      	cmp	r2, r3
 800de28:	db11      	blt.n	800de4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800de2a:	88b9      	ldrh	r1, [r7, #4]
 800de2c:	440d      	add	r5, r1
 800de2e:	88b1      	ldrh	r1, [r6, #4]
 800de30:	440c      	add	r4, r1
 800de32:	b22d      	sxth	r5, r5
 800de34:	b224      	sxth	r4, r4
 800de36:	42a5      	cmp	r5, r4
 800de38:	dc09      	bgt.n	800de4e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800de3a:	88f8      	ldrh	r0, [r7, #6]
 800de3c:	4410      	add	r0, r2
 800de3e:	88f2      	ldrh	r2, [r6, #6]
 800de40:	4413      	add	r3, r2
 800de42:	b200      	sxth	r0, r0
 800de44:	b21b      	sxth	r3, r3
 800de46:	4298      	cmp	r0, r3
 800de48:	bfcc      	ite	gt
 800de4a:	2000      	movgt	r0, #0
 800de4c:	2001      	movle	r0, #1
 800de4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	4604      	mov	r4, r0
 800de54:	4608      	mov	r0, r1
 800de56:	460d      	mov	r5, r1
 800de58:	f7fd ff0f 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800de5c:	b978      	cbnz	r0, 800de7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800de5e:	4620      	mov	r0, r4
 800de60:	f7fd ff0b 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800de64:	f9b5 6000 	ldrsh.w	r6, [r5]
 800de68:	b150      	cbz	r0, 800de80 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800de6a:	8026      	strh	r6, [r4, #0]
 800de6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800de70:	8063      	strh	r3, [r4, #2]
 800de72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800de76:	80a3      	strh	r3, [r4, #4]
 800de78:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800de7c:	80e3      	strh	r3, [r4, #6]
 800de7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de80:	f9b4 1000 	ldrsh.w	r1, [r4]
 800de84:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800de88:	42b1      	cmp	r1, r6
 800de8a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800de8e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800de92:	460f      	mov	r7, r1
 800de94:	88ed      	ldrh	r5, [r5, #6]
 800de96:	bfa8      	it	ge
 800de98:	4637      	movge	r7, r6
 800de9a:	4293      	cmp	r3, r2
 800de9c:	4618      	mov	r0, r3
 800de9e:	4466      	add	r6, ip
 800dea0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800dea4:	bfa8      	it	ge
 800dea6:	4610      	movge	r0, r2
 800dea8:	442a      	add	r2, r5
 800deaa:	88e5      	ldrh	r5, [r4, #6]
 800deac:	4461      	add	r1, ip
 800deae:	b236      	sxth	r6, r6
 800deb0:	8027      	strh	r7, [r4, #0]
 800deb2:	442b      	add	r3, r5
 800deb4:	b209      	sxth	r1, r1
 800deb6:	b212      	sxth	r2, r2
 800deb8:	8060      	strh	r0, [r4, #2]
 800deba:	b21b      	sxth	r3, r3
 800debc:	428e      	cmp	r6, r1
 800debe:	bfac      	ite	ge
 800dec0:	ebc7 0106 	rsbge	r1, r7, r6
 800dec4:	ebc7 0101 	rsblt	r1, r7, r1
 800dec8:	429a      	cmp	r2, r3
 800deca:	bfac      	ite	ge
 800decc:	ebc0 0202 	rsbge	r2, r0, r2
 800ded0:	ebc0 0203 	rsblt	r2, r0, r3
 800ded4:	80a1      	strh	r1, [r4, #4]
 800ded6:	80e2      	strh	r2, [r4, #6]
 800ded8:	e7d1      	b.n	800de7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800dedc <_ZN8touchgfx11Application11getInstanceEv>:
 800dedc:	4b01      	ldr	r3, [pc, #4]	; (800dee4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800dede:	6818      	ldr	r0, [r3, #0]
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	2400b270 	.word	0x2400b270

0800dee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800dee8:	2300      	movs	r3, #0
 800deea:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800deee:	30a8      	adds	r0, #168	; 0xa8
 800def0:	f820 3c24 	strh.w	r3, [r0, #-36]
 800def4:	f802 3b01 	strb.w	r3, [r2], #1
 800def8:	4282      	cmp	r2, r0
 800defa:	d1fb      	bne.n	800def4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800defc:	4770      	bx	lr

0800defe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800defe:	4603      	mov	r3, r0
 800df00:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800df04:	2200      	movs	r2, #0
 800df06:	801a      	strh	r2, [r3, #0]
 800df08:	3308      	adds	r3, #8
 800df0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800df0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800df12:	f823 2c02 	strh.w	r2, [r3, #-2]
 800df16:	428b      	cmp	r3, r1
 800df18:	d1f5      	bne.n	800df06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800df1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800df1e:	4770      	bx	lr

0800df20 <_ZN8touchgfx11ApplicationC1Ev>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	4b19      	ldr	r3, [pc, #100]	; (800df88 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800df24:	2500      	movs	r5, #0
 800df26:	4604      	mov	r4, r0
 800df28:	30a8      	adds	r0, #168	; 0xa8
 800df2a:	f840 3ca8 	str.w	r3, [r0, #-168]
 800df2e:	f820 5c24 	strh.w	r5, [r0, #-36]
 800df32:	f7ff ffe4 	bl	800defe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800df36:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800df3a:	f7ff ffe0 	bl	800defe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800df3e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800df42:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800df46:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800df4a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800df4e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800df52:	490e      	ldr	r1, [pc, #56]	; (800df8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800df54:	480e      	ldr	r0, [pc, #56]	; (800df90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800df56:	f00a fbdd 	bl	8018714 <CRC_Lock>
 800df5a:	4e0e      	ldr	r6, [pc, #56]	; (800df94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800df5e:	b158      	cbz	r0, 800df78 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800df60:	801d      	strh	r5, [r3, #0]
 800df62:	2300      	movs	r3, #0
 800df64:	4a0d      	ldr	r2, [pc, #52]	; (800df9c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800df66:	4620      	mov	r0, r4
 800df68:	6013      	str	r3, [r2, #0]
 800df6a:	4a0d      	ldr	r2, [pc, #52]	; (800dfa0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800df6c:	6033      	str	r3, [r6, #0]
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	f7ff ffba 	bl	800dee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800df74:	4620      	mov	r0, r4
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df7c:	2002      	movs	r0, #2
 800df7e:	801a      	strh	r2, [r3, #0]
 800df80:	6030      	str	r0, [r6, #0]
 800df82:	f001 fa1d 	bl	800f3c0 <_ZN8touchgfx6Screen4drawEv>
 800df86:	e7ec      	b.n	800df62 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800df88:	0801b1d4 	.word	0x0801b1d4
 800df8c:	b5e8b5cd 	.word	0xb5e8b5cd
 800df90:	f407a5c2 	.word	0xf407a5c2
 800df94:	2400b260 	.word	0x2400b260
 800df98:	24000050 	.word	0x24000050
 800df9c:	2400b270 	.word	0x2400b270
 800dfa0:	2400b264 	.word	0x2400b264

0800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800dfa4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	428b      	cmp	r3, r1
 800dfae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	d908      	bls.n	800dfc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800dfb6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800dfba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	6062      	str	r2, [r4, #4]
 800dfc8:	bd10      	pop	{r4, pc}
	...

0800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd0:	b08f      	sub	sp, #60	; 0x3c
 800dfd2:	4b94      	ldr	r3, [pc, #592]	; (800e224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800dfd4:	4683      	mov	fp, r0
 800dfd6:	ac0a      	add	r4, sp, #40	; 0x28
 800dfd8:	e884 0006 	stmia.w	r4, {r1, r2}
 800dfdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	4b91      	ldr	r3, [pc, #580]	; (800e228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800dfe4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800dfe8:	f7ff febb 	bl	800dd62 <_ZN8touchgfx4Rect10restrictToEss>
 800dfec:	4620      	mov	r0, r4
 800dfee:	f7fd fe44 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d16a      	bne.n	800e0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800dff6:	9403      	str	r4, [sp, #12]
 800dff8:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800dffc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e000:	2400      	movs	r4, #0
 800e002:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	36a0      	adds	r6, #160	; 0xa0
 800e00a:	42a5      	cmp	r5, r4
 800e00c:	d00d      	beq.n	800e02a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800e00e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800e012:	9803      	ldr	r0, [sp, #12]
 800e014:	f7ff fef6 	bl	800de04 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e018:	b128      	cbz	r0, 800e026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800e01a:	1e69      	subs	r1, r5, #1
 800e01c:	9801      	ldr	r0, [sp, #4]
 800e01e:	1b09      	subs	r1, r1, r4
 800e020:	b289      	uxth	r1, r1
 800e022:	f7ff ffbf 	bl	800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e026:	3401      	adds	r4, #1
 800e028:	e7ef      	b.n	800e00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800e02a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800e02e:	1e7b      	subs	r3, r7, #1
 800e030:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800e034:	9704      	str	r7, [sp, #16]
 800e036:	9302      	str	r3, [sp, #8]
 800e038:	2400      	movs	r4, #0
 800e03a:	4655      	mov	r5, sl
 800e03c:	9705      	str	r7, [sp, #20]
 800e03e:	4626      	mov	r6, r4
 800e040:	9b05      	ldr	r3, [sp, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d078      	beq.n	800e138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800e046:	9903      	ldr	r1, [sp, #12]
 800e048:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e04c:	f7ff fe67 	bl	800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e050:	b360      	cbz	r0, 800e0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e052:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800e056:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800e05a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 800e05e:	45e6      	cmp	lr, ip
 800e060:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800e064:	db35      	blt.n	800e0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e066:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e06a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800e06e:	4472      	add	r2, lr
 800e070:	4463      	add	r3, ip
 800e072:	b212      	sxth	r2, r2
 800e074:	b21b      	sxth	r3, r3
 800e076:	429a      	cmp	r2, r3
 800e078:	dc2b      	bgt.n	800e0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e07a:	fa1f f288 	uxth.w	r2, r8
 800e07e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800e082:	45c1      	cmp	r9, r8
 800e084:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e088:	4413      	add	r3, r2
 800e08a:	fa1f fc89 	uxth.w	ip, r9
 800e08e:	b29b      	uxth	r3, r3
 800e090:	fa0f fe83 	sxth.w	lr, r3
 800e094:	db0f      	blt.n	800e0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800e096:	eba3 030c 	sub.w	r3, r3, ip
 800e09a:	1ac9      	subs	r1, r1, r3
 800e09c:	b209      	sxth	r1, r1
 800e09e:	2900      	cmp	r1, #0
 800e0a0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e0a4:	dd12      	ble.n	800e0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e0a6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	9b05      	ldr	r3, [sp, #20]
 800e0ae:	3d08      	subs	r5, #8
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	9305      	str	r3, [sp, #20]
 800e0b4:	e7c4      	b.n	800e040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800e0b6:	4461      	add	r1, ip
 800e0b8:	b209      	sxth	r1, r1
 800e0ba:	4571      	cmp	r1, lr
 800e0bc:	dc3a      	bgt.n	800e134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e0be:	eba2 020c 	sub.w	r2, r2, ip
 800e0c2:	b212      	sxth	r2, r2
 800e0c4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	dcee      	bgt.n	800e0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e0cc:	b00f      	add	sp, #60	; 0x3c
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	45c1      	cmp	r9, r8
 800e0d4:	db2e      	blt.n	800e134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e0d6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800e0da:	4499      	add	r9, r3
 800e0dc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800e0e0:	4498      	add	r8, r3
 800e0e2:	fa0f f989 	sxth.w	r9, r9
 800e0e6:	fa0f f888 	sxth.w	r8, r8
 800e0ea:	45c1      	cmp	r9, r8
 800e0ec:	dc22      	bgt.n	800e134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e0ee:	fa1f f28c 	uxth.w	r2, ip
 800e0f2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800e0f6:	45e6      	cmp	lr, ip
 800e0f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800e0fc:	4413      	add	r3, r2
 800e0fe:	fa1f f88e 	uxth.w	r8, lr
 800e102:	b29b      	uxth	r3, r3
 800e104:	fa0f f983 	sxth.w	r9, r3
 800e108:	db0a      	blt.n	800e120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800e10a:	eba3 0308 	sub.w	r3, r3, r8
 800e10e:	1ac9      	subs	r1, r1, r3
 800e110:	b209      	sxth	r1, r1
 800e112:	2900      	cmp	r1, #0
 800e114:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800e118:	ddd8      	ble.n	800e0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e11a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800e11e:	e7c4      	b.n	800e0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e120:	4441      	add	r1, r8
 800e122:	b209      	sxth	r1, r1
 800e124:	4549      	cmp	r1, r9
 800e126:	dc05      	bgt.n	800e134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e128:	eba2 0208 	sub.w	r2, r2, r8
 800e12c:	b212      	sxth	r2, r2
 800e12e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e132:	e7c9      	b.n	800e0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800e134:	4606      	mov	r6, r0
 800e136:	e7b9      	b.n	800e0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e138:	2c00      	cmp	r4, #0
 800e13a:	f47f af7d 	bne.w	800e038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800e13e:	2e00      	cmp	r6, #0
 800e140:	f000 81e1 	beq.w	800e506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800e144:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800e148:	4655      	mov	r5, sl
 800e14a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800e14e:	b2b9      	uxth	r1, r7
 800e150:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e154:	b2b3      	uxth	r3, r6
 800e156:	9105      	str	r1, [sp, #20]
 800e158:	9805      	ldr	r0, [sp, #20]
 800e15a:	441a      	add	r2, r3
 800e15c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e160:	b292      	uxth	r2, r2
 800e162:	4401      	add	r1, r0
 800e164:	fa0f f882 	sxth.w	r8, r2
 800e168:	b289      	uxth	r1, r1
 800e16a:	9106      	str	r1, [sp, #24]
 800e16c:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 800e170:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d058      	beq.n	800e22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800e17a:	9903      	ldr	r1, [sp, #12]
 800e17c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e180:	f7ff fdcd 	bl	800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e184:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e188:	b1d8      	cbz	r0, 800e1c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e18a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800e18e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800e192:	4576      	cmp	r6, lr
 800e194:	dc26      	bgt.n	800e1e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800e196:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800e19a:	44f4      	add	ip, lr
 800e19c:	fa0f fc8c 	sxth.w	ip, ip
 800e1a0:	45e0      	cmp	r8, ip
 800e1a2:	db1f      	blt.n	800e1e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800e1a4:	428f      	cmp	r7, r1
 800e1a6:	fa1f fc81 	uxth.w	ip, r1
 800e1aa:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800e1ae:	dc0f      	bgt.n	800e1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800e1b0:	9806      	ldr	r0, [sp, #24]
 800e1b2:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800e1b6:	eba0 0c0c 	sub.w	ip, r0, ip
 800e1ba:	eba1 010c 	sub.w	r1, r1, ip
 800e1be:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	9904      	ldr	r1, [sp, #16]
 800e1c6:	3d08      	subs	r5, #8
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	3901      	subs	r1, #1
 800e1cc:	9104      	str	r1, [sp, #16]
 800e1ce:	e7cf      	b.n	800e170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800e1d0:	4461      	add	r1, ip
 800e1d2:	b209      	sxth	r1, r1
 800e1d4:	4549      	cmp	r1, r9
 800e1d6:	dcf5      	bgt.n	800e1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e1d8:	9905      	ldr	r1, [sp, #20]
 800e1da:	eba1 0c0c 	sub.w	ip, r1, ip
 800e1de:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800e1e2:	e7ee      	b.n	800e1c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e1e4:	428f      	cmp	r7, r1
 800e1e6:	dced      	bgt.n	800e1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e1e8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800e1ec:	4461      	add	r1, ip
 800e1ee:	b209      	sxth	r1, r1
 800e1f0:	4589      	cmp	r9, r1
 800e1f2:	dbe7      	blt.n	800e1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e1f4:	4576      	cmp	r6, lr
 800e1f6:	fa1f fc8e 	uxth.w	ip, lr
 800e1fa:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800e1fe:	dc08      	bgt.n	800e212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800e200:	eba2 0c0c 	sub.w	ip, r2, ip
 800e204:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800e208:	eba1 010c 	sub.w	r1, r1, ip
 800e20c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800e210:	e7d7      	b.n	800e1c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e212:	4461      	add	r1, ip
 800e214:	b209      	sxth	r1, r1
 800e216:	4588      	cmp	r8, r1
 800e218:	dbd4      	blt.n	800e1c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e21a:	eba3 0c0c 	sub.w	ip, r3, ip
 800e21e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800e222:	e7ce      	b.n	800e1c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e224:	2400b21a 	.word	0x2400b21a
 800e228:	2400b218 	.word	0x2400b218
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	f000 816a 	beq.w	800e506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800e232:	9b02      	ldr	r3, [sp, #8]
 800e234:	3301      	adds	r3, #1
 800e236:	f000 8166 	beq.w	800e506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 800e23a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800e23e:	9803      	ldr	r0, [sp, #12]
 800e240:	4621      	mov	r1, r4
 800e242:	f7ff fddf 	bl	800de04 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e246:	b120      	cbz	r0, 800e252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800e248:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e24c:	9801      	ldr	r0, [sp, #4]
 800e24e:	f7ff fea9 	bl	800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e252:	9903      	ldr	r1, [sp, #12]
 800e254:	4620      	mov	r0, r4
 800e256:	f7ff fd62 	bl	800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	f000 809b 	beq.w	800e396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800e260:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 800e264:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 800e268:	b281      	uxth	r1, r0
 800e26a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 800e26e:	9309      	str	r3, [sp, #36]	; 0x24
 800e270:	eb01 0c03 	add.w	ip, r1, r3
 800e274:	b2ab      	uxth	r3, r5
 800e276:	4285      	cmp	r5, r0
 800e278:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800e27c:	fa1f f98c 	uxth.w	r9, ip
 800e280:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800e284:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 800e288:	eb03 040c 	add.w	r4, r3, ip
 800e28c:	b2a4      	uxth	r4, r4
 800e28e:	9405      	str	r4, [sp, #20]
 800e290:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800e294:	9404      	str	r4, [sp, #16]
 800e296:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 800e29a:	f340 809a 	ble.w	800e3d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 800e29e:	1a5b      	subs	r3, r3, r1
 800e2a0:	4596      	cmp	lr, r2
 800e2a2:	fa0f f589 	sxth.w	r5, r9
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b21e      	sxth	r6, r3
 800e2aa:	dd2e      	ble.n	800e30a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 800e2ac:	9f02      	ldr	r7, [sp, #8]
 800e2ae:	fa1f fe8e 	uxth.w	lr, lr
 800e2b2:	b292      	uxth	r2, r2
 800e2b4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800e2b8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800e2bc:	9f04      	ldr	r7, [sp, #16]
 800e2be:	ebae 0102 	sub.w	r1, lr, r2
 800e2c2:	4486      	add	lr, r0
 800e2c4:	1b7f      	subs	r7, r7, r5
 800e2c6:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 800e2ca:	b289      	uxth	r1, r1
 800e2cc:	442a      	add	r2, r5
 800e2ce:	fa0f fe8e 	sxth.w	lr, lr
 800e2d2:	b20c      	sxth	r4, r1
 800e2d4:	b212      	sxth	r2, r2
 800e2d6:	4367      	muls	r7, r4
 800e2d8:	ebae 0202 	sub.w	r2, lr, r2
 800e2dc:	4372      	muls	r2, r6
 800e2de:	4297      	cmp	r7, r2
 800e2e0:	db09      	blt.n	800e2f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 800e2e2:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 800e2e6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800e2ea:	449c      	add	ip, r3
 800e2ec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800e2f0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800e2f4:	e680      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e2f6:	4401      	add	r1, r0
 800e2f8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800e2fc:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 800e300:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e304:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800e308:	e676      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e30a:	9f04      	ldr	r7, [sp, #16]
 800e30c:	42bd      	cmp	r5, r7
 800e30e:	da27      	bge.n	800e360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800e310:	9902      	ldr	r1, [sp, #8]
 800e312:	1b7f      	subs	r7, r7, r5
 800e314:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800e318:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 800e31c:	eb04 010e 	add.w	r1, r4, lr
 800e320:	fa1f f881 	uxth.w	r8, r1
 800e324:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 800e328:	4411      	add	r1, r2
 800e32a:	fa0f f988 	sxth.w	r9, r8
 800e32e:	eba2 020e 	sub.w	r2, r2, lr
 800e332:	eba1 0108 	sub.w	r1, r1, r8
 800e336:	4372      	muls	r2, r6
 800e338:	b289      	uxth	r1, r1
 800e33a:	fa0f f881 	sxth.w	r8, r1
 800e33e:	fb08 f707 	mul.w	r7, r8, r7
 800e342:	42ba      	cmp	r2, r7
 800e344:	dc06      	bgt.n	800e354 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800e346:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 800e34a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 800e34e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 800e352:	e7ca      	b.n	800e2ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800e354:	4421      	add	r1, r4
 800e356:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 800e35a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e35e:	e64b      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e360:	9d05      	ldr	r5, [sp, #20]
 800e362:	2c06      	cmp	r4, #6
 800e364:	eba9 0505 	sub.w	r5, r9, r5
 800e368:	b2ad      	uxth	r5, r5
 800e36a:	fa0f fe85 	sxth.w	lr, r5
 800e36e:	d818      	bhi.n	800e3a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800e370:	9b04      	ldr	r3, [sp, #16]
 800e372:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 800e376:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800e37a:	1c63      	adds	r3, r4, #1
 800e37c:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 800e380:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800e384:	9b01      	ldr	r3, [sp, #4]
 800e386:	9d01      	ldr	r5, [sp, #4]
 800e388:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e38c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 800e390:	805a      	strh	r2, [r3, #2]
 800e392:	809e      	strh	r6, [r3, #4]
 800e394:	80d9      	strh	r1, [r3, #6]
 800e396:	9b02      	ldr	r3, [sp, #8]
 800e398:	f1aa 0a08 	sub.w	sl, sl, #8
 800e39c:	3b01      	subs	r3, #1
 800e39e:	9302      	str	r3, [sp, #8]
 800e3a0:	e747      	b.n	800e232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800e3a2:	9a02      	ldr	r2, [sp, #8]
 800e3a4:	45b6      	cmp	lr, r6
 800e3a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e3aa:	db0d      	blt.n	800e3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 800e3ac:	449c      	add	ip, r3
 800e3ae:	445a      	add	r2, fp
 800e3b0:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 800e3b4:	fa1f fc8c 	uxth.w	ip, ip
 800e3b8:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 800e3bc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800e3c0:	448c      	add	ip, r1
 800e3c2:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 800e3c6:	e617      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e3c8:	445a      	add	r2, fp
 800e3ca:	44ac      	add	ip, r5
 800e3cc:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 800e3d0:	e78e      	b.n	800e2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800e3d2:	fa1f f18e 	uxth.w	r1, lr
 800e3d6:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800e3da:	b293      	uxth	r3, r2
 800e3dc:	4596      	cmp	lr, r2
 800e3de:	eb01 0806 	add.w	r8, r1, r6
 800e3e2:	9306      	str	r3, [sp, #24]
 800e3e4:	fa1f f888 	uxth.w	r8, r8
 800e3e8:	9f06      	ldr	r7, [sp, #24]
 800e3ea:	fa0f f388 	sxth.w	r3, r8
 800e3ee:	9307      	str	r3, [sp, #28]
 800e3f0:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 800e3f4:	443b      	add	r3, r7
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	9308      	str	r3, [sp, #32]
 800e3fa:	da25      	bge.n	800e448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800e3fc:	9905      	ldr	r1, [sp, #20]
 800e3fe:	eba3 0308 	sub.w	r3, r3, r8
 800e402:	eba2 020e 	sub.w	r2, r2, lr
 800e406:	1b40      	subs	r0, r0, r5
 800e408:	eba9 0401 	sub.w	r4, r9, r1
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	b2a4      	uxth	r4, r4
 800e410:	b219      	sxth	r1, r3
 800e412:	fa0f f984 	sxth.w	r9, r4
 800e416:	4348      	muls	r0, r1
 800e418:	fb09 f202 	mul.w	r2, r9, r2
 800e41c:	4282      	cmp	r2, r0
 800e41e:	9a02      	ldr	r2, [sp, #8]
 800e420:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e424:	445a      	add	r2, fp
 800e426:	dc06      	bgt.n	800e436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800e428:	9b07      	ldr	r3, [sp, #28]
 800e42a:	44a4      	add	ip, r4
 800e42c:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 800e430:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 800e434:	e75c      	b.n	800e2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800e436:	9904      	ldr	r1, [sp, #16]
 800e438:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 800e43c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 800e440:	4433      	add	r3, r6
 800e442:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800e446:	e5d7      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e448:	9f06      	ldr	r7, [sp, #24]
 800e44a:	9b04      	ldr	r3, [sp, #16]
 800e44c:	1bc9      	subs	r1, r1, r7
 800e44e:	fa0f f789 	sxth.w	r7, r9
 800e452:	b289      	uxth	r1, r1
 800e454:	429f      	cmp	r7, r3
 800e456:	fa0f fe81 	sxth.w	lr, r1
 800e45a:	dd22      	ble.n	800e4a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 800e45c:	9a05      	ldr	r2, [sp, #20]
 800e45e:	1b40      	subs	r0, r0, r5
 800e460:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e464:	eba9 0202 	sub.w	r2, r9, r2
 800e468:	9d07      	ldr	r5, [sp, #28]
 800e46a:	fb0e f000 	mul.w	r0, lr, r0
 800e46e:	b292      	uxth	r2, r2
 800e470:	eba5 0a03 	sub.w	sl, r5, r3
 800e474:	9b02      	ldr	r3, [sp, #8]
 800e476:	b214      	sxth	r4, r2
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	fb04 fa0a 	mul.w	sl, r4, sl
 800e47e:	445b      	add	r3, fp
 800e480:	4550      	cmp	r0, sl
 800e482:	db03      	blt.n	800e48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800e484:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 800e488:	4494      	add	ip, r2
 800e48a:	e731      	b.n	800e2f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 800e48c:	9a04      	ldr	r2, [sp, #16]
 800e48e:	4431      	add	r1, r6
 800e490:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 800e494:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800e498:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e49c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800e4a0:	e75b      	b.n	800e35a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 800e4a2:	9b08      	ldr	r3, [sp, #32]
 800e4a4:	2c06      	cmp	r4, #6
 800e4a6:	eba3 0308 	sub.w	r3, r3, r8
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	b21d      	sxth	r5, r3
 800e4ae:	d813      	bhi.n	800e4d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 800e4b0:	9b07      	ldr	r3, [sp, #28]
 800e4b2:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 800e4b6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800e4ba:	1c63      	adds	r3, r4, #1
 800e4bc:	9901      	ldr	r1, [sp, #4]
 800e4be:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 800e4c2:	9b01      	ldr	r3, [sp, #4]
 800e4c4:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 800e4c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4cc:	805a      	strh	r2, [r3, #2]
 800e4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4d0:	f8a3 e006 	strh.w	lr, [r3, #6]
 800e4d4:	809a      	strh	r2, [r3, #4]
 800e4d6:	e75e      	b.n	800e396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800e4d8:	9802      	ldr	r0, [sp, #8]
 800e4da:	4575      	cmp	r5, lr
 800e4dc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e4e0:	db0d      	blt.n	800e4fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 800e4e2:	4431      	add	r1, r6
 800e4e4:	9b06      	ldr	r3, [sp, #24]
 800e4e6:	4458      	add	r0, fp
 800e4e8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e4ec:	b289      	uxth	r1, r1
 800e4ee:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 800e4f2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e4f6:	4419      	add	r1, r3
 800e4f8:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 800e4fc:	e57c      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e4fe:	4458      	add	r0, fp
 800e500:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 800e504:	e79c      	b.n	800e440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800e506:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 800e50a:	2e07      	cmp	r6, #7
 800e50c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800e510:	d812      	bhi.n	800e538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 800e512:	1c75      	adds	r5, r6, #1
 800e514:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800e518:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800e51c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 800e520:	9d01      	ldr	r5, [sp, #4]
 800e522:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800e526:	442c      	add	r4, r5
 800e528:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800e52c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800e530:	8061      	strh	r1, [r4, #2]
 800e532:	80a2      	strh	r2, [r4, #4]
 800e534:	80e3      	strh	r3, [r4, #6]
 800e536:	e5c9      	b.n	800e0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e538:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e53c:	3e01      	subs	r6, #1
 800e53e:	445c      	add	r4, fp
 800e540:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800e544:	f04f 37ff 	mov.w	r7, #4294967295
 800e548:	2500      	movs	r5, #0
 800e54a:	9305      	str	r3, [sp, #20]
 800e54c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 800e550:	1e72      	subs	r2, r6, #1
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	4691      	mov	r9, r2
 800e556:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800e560:	f1b9 3fff 	cmp.w	r9, #4294967295
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e56a:	9207      	str	r2, [sp, #28]
 800e56c:	bf16      	itet	ne
 800e56e:	9905      	ldrne	r1, [sp, #20]
 800e570:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800e574:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800e578:	9306      	str	r3, [sp, #24]
 800e57a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800e57e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800e582:	fb18 f801 	smulbb	r8, r8, r1
 800e586:	6859      	ldr	r1, [r3, #4]
 800e588:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e58c:	4671      	mov	r1, lr
 800e58e:	a80c      	add	r0, sp, #48	; 0x30
 800e590:	f7ff fc5e 	bl	800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e594:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800e598:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800e59c:	f04f 0c08 	mov.w	ip, #8
 800e5a0:	9b04      	ldr	r3, [sp, #16]
 800e5a2:	9a02      	ldr	r2, [sp, #8]
 800e5a4:	fb10 f001 	smulbb	r0, r0, r1
 800e5a8:	fb02 8803 	mla	r8, r2, r3, r8
 800e5ac:	eba0 0108 	sub.w	r1, r0, r8
 800e5b0:	fb90 f0fc 	sdiv	r0, r0, ip
 800e5b4:	4288      	cmp	r0, r1
 800e5b6:	dc20      	bgt.n	800e5fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800e5b8:	4551      	cmp	r1, sl
 800e5ba:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e5be:	da03      	bge.n	800e5c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800e5c0:	b1d9      	cbz	r1, 800e5fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 800e5c2:	468a      	mov	sl, r1
 800e5c4:	464f      	mov	r7, r9
 800e5c6:	4635      	mov	r5, r6
 800e5c8:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5cc:	f119 0f02 	cmn.w	r9, #2
 800e5d0:	d1c6      	bne.n	800e560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800e5d2:	4616      	mov	r6, r2
 800e5d4:	3201      	adds	r2, #1
 800e5d6:	f1a4 0408 	sub.w	r4, r4, #8
 800e5da:	d1b7      	bne.n	800e54c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 800e5dc:	9b01      	ldr	r3, [sp, #4]
 800e5de:	b2ac      	uxth	r4, r5
 800e5e0:	00ed      	lsls	r5, r5, #3
 800e5e2:	1958      	adds	r0, r3, r5
 800e5e4:	1c7b      	adds	r3, r7, #1
 800e5e6:	d10b      	bne.n	800e600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	9803      	ldr	r0, [sp, #12]
 800e5ec:	f7ff fc30 	bl	800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	9801      	ldr	r0, [sp, #4]
 800e5f4:	f7ff fcd6 	bl	800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e5f8:	e4fe      	b.n	800dff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e5fa:	464f      	mov	r7, r9
 800e5fc:	4635      	mov	r5, r6
 800e5fe:	e7ed      	b.n	800e5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800e600:	9b01      	ldr	r3, [sp, #4]
 800e602:	00ff      	lsls	r7, r7, #3
 800e604:	445d      	add	r5, fp
 800e606:	19d9      	adds	r1, r3, r7
 800e608:	445f      	add	r7, fp
 800e60a:	f7ff fc21 	bl	800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e60e:	9b03      	ldr	r3, [sp, #12]
 800e610:	cb03      	ldmia	r3!, {r0, r1}
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800e618:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800e61c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 800e620:	6869      	ldr	r1, [r5, #4]
 800e622:	c303      	stmia	r3!, {r0, r1}
 800e624:	e7e4      	b.n	800e5f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800e626:	bf00      	nop

0800e628 <_ZN8touchgfx11Application10invalidateEv>:
 800e628:	4b09      	ldr	r3, [pc, #36]	; (800e650 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800e62a:	b082      	sub	sp, #8
 800e62c:	2100      	movs	r1, #0
 800e62e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e632:	4b08      	ldr	r3, [pc, #32]	; (800e654 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800e634:	9100      	str	r1, [sp, #0]
 800e636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e63a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e63e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e642:	ab02      	add	r3, sp, #8
 800e644:	e913 0006 	ldmdb	r3, {r1, r2}
 800e648:	b002      	add	sp, #8
 800e64a:	f7ff bcbf 	b.w	800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e64e:	bf00      	nop
 800e650:	2400b218 	.word	0x2400b218
 800e654:	2400b21a 	.word	0x2400b21a

0800e658 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800e660:	b09b      	sub	sp, #108	; 0x6c
 800e662:	4604      	mov	r4, r0
 800e664:	4630      	mov	r0, r6
 800e666:	f7fd fb08 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e66a:	4605      	mov	r5, r0
 800e66c:	b940      	cbnz	r0, 800e680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800e66e:	4620      	mov	r0, r4
 800e670:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e674:	f7ff fcaa 	bl	800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e678:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800e67c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800e680:	4bc8      	ldr	r3, [pc, #800]	; (800e9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d03e      	beq.n	800e706 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800e688:	4dc7      	ldr	r5, [pc, #796]	; (800e9a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800e68a:	4628      	mov	r0, r5
 800e68c:	f7fd faf5 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e690:	4606      	mov	r6, r0
 800e692:	2800      	cmp	r0, #0
 800e694:	d137      	bne.n	800e706 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800e696:	4628      	mov	r0, r5
 800e698:	f7ff fa02 	bl	800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e69c:	6829      	ldr	r1, [r5, #0]
 800e69e:	686a      	ldr	r2, [r5, #4]
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f7ff fc93 	bl	800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e6a6:	802e      	strh	r6, [r5, #0]
 800e6a8:	806e      	strh	r6, [r5, #2]
 800e6aa:	80ae      	strh	r6, [r5, #4]
 800e6ac:	80ee      	strh	r6, [r5, #6]
 800e6ae:	ae09      	add	r6, sp, #36	; 0x24
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f7ff fc24 	bl	800defe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e6b6:	4abd      	ldr	r2, [pc, #756]	; (800e9ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800e6b8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800e6bc:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800e6c0:	8815      	ldrh	r5, [r2, #0]
 800e6c2:	9202      	str	r2, [sp, #8]
 800e6c4:	462b      	mov	r3, r5
 800e6c6:	429f      	cmp	r7, r3
 800e6c8:	d924      	bls.n	800e714 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800e6ca:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800e6ce:	2907      	cmp	r1, #7
 800e6d0:	d816      	bhi.n	800e700 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800e6d2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800e6d6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800e6da:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800e6de:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800e6e2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800e6e6:	1c4a      	adds	r2, r1, #1
 800e6e8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800e6ec:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800e6f0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800e6f4:	f8a2 9002 	strh.w	r9, [r2, #2]
 800e6f8:	f8a2 e004 	strh.w	lr, [r2, #4]
 800e6fc:	f8a2 c006 	strh.w	ip, [r2, #6]
 800e700:	3301      	adds	r3, #1
 800e702:	b29b      	uxth	r3, r3
 800e704:	e7df      	b.n	800e6c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800e706:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1cf      	bne.n	800e6ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800e70e:	b01b      	add	sp, #108	; 0x6c
 800e710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e714:	462f      	mov	r7, r5
 800e716:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800e71a:	42bb      	cmp	r3, r7
 800e71c:	d90b      	bls.n	800e736 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800e71e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800e722:	3701      	adds	r7, #1
 800e724:	4620      	mov	r0, r4
 800e726:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800e72a:	b2bf      	uxth	r7, r7
 800e72c:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800e730:	f7ff fc4c 	bl	800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e734:	e7ef      	b.n	800e716 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800e736:	4a9e      	ldr	r2, [pc, #632]	; (800e9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800e738:	6813      	ldr	r3, [r2, #0]
 800e73a:	4690      	mov	r8, r2
 800e73c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e740:	2b01      	cmp	r3, #1
 800e742:	f040 80e4 	bne.w	800e90e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800e746:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800e74a:	4629      	mov	r1, r5
 800e74c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 800e750:	2500      	movs	r5, #0
 800e752:	33aa      	adds	r3, #170	; 0xaa
 800e754:	428f      	cmp	r7, r1
 800e756:	f103 0308 	add.w	r3, r3, #8
 800e75a:	dd0a      	ble.n	800e772 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800e75c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800e760:	3101      	adds	r1, #1
 800e762:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800e766:	4402      	add	r2, r0
 800e768:	b212      	sxth	r2, r2
 800e76a:	4295      	cmp	r5, r2
 800e76c:	bfb8      	it	lt
 800e76e:	4615      	movlt	r5, r2
 800e770:	e7f0      	b.n	800e754 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800e772:	4b90      	ldr	r3, [pc, #576]	; (800e9b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800e774:	f8df b238 	ldr.w	fp, [pc, #568]	; 800e9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	46d8      	mov	r8, fp
 800e77c:	2b0f      	cmp	r3, #15
 800e77e:	bf8c      	ite	hi
 800e780:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800e784:	f04f 0a01 	movls.w	sl, #1
 800e788:	2300      	movs	r3, #0
 800e78a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e78e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800e792:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800e796:	4438      	add	r0, r7
 800e798:	b207      	sxth	r7, r0
 800e79a:	f8db 0000 	ldr.w	r0, [fp]
 800e79e:	42bd      	cmp	r5, r7
 800e7a0:	6803      	ldr	r3, [r0, #0]
 800e7a2:	f340 8084 	ble.w	800e8ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800e7a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7aa:	4798      	blx	r3
 800e7ac:	eb07 030a 	add.w	r3, r7, sl
 800e7b0:	4298      	cmp	r0, r3
 800e7b2:	da07      	bge.n	800e7c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800e7b4:	4285      	cmp	r5, r0
 800e7b6:	dd05      	ble.n	800e7c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800e7b8:	4287      	cmp	r7, r0
 800e7ba:	dd6d      	ble.n	800e898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800e7bc:	2f00      	cmp	r7, #0
 800e7be:	dd6b      	ble.n	800e898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	e004      	b.n	800e7ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800e7c4:	4287      	cmp	r7, r0
 800e7c6:	dcfb      	bgt.n	800e7c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800e7c8:	42a8      	cmp	r0, r5
 800e7ca:	bfa8      	it	ge
 800e7cc:	4628      	movge	r0, r5
 800e7ce:	4b7a      	ldr	r3, [pc, #488]	; (800e9b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800e7d0:	1bc0      	subs	r0, r0, r7
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e7e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e7e4:	9b02      	ldr	r3, [sp, #8]
 800e7e6:	f8ad 001a 	strh.w	r0, [sp, #26]
 800e7ea:	881f      	ldrh	r7, [r3, #0]
 800e7ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e7f0:	42bb      	cmp	r3, r7
 800e7f2:	d9cc      	bls.n	800e78e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800e7f4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800e7f8:	ab07      	add	r3, sp, #28
 800e7fa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800e7fe:	6851      	ldr	r1, [r2, #4]
 800e800:	c303      	stmia	r3!, {r0, r1}
 800e802:	a905      	add	r1, sp, #20
 800e804:	a807      	add	r0, sp, #28
 800e806:	f7ff fa8a 	bl	800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d04c      	beq.n	800e8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800e80e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800e812:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800e816:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800e81a:	4686      	mov	lr, r0
 800e81c:	4290      	cmp	r0, r2
 800e81e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800e822:	4448      	add	r0, r9
 800e824:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800e828:	bfb8      	it	lt
 800e82a:	4696      	movlt	lr, r2
 800e82c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e830:	444a      	add	r2, r9
 800e832:	b280      	uxth	r0, r0
 800e834:	4299      	cmp	r1, r3
 800e836:	468c      	mov	ip, r1
 800e838:	b292      	uxth	r2, r2
 800e83a:	9303      	str	r3, [sp, #12]
 800e83c:	bfb8      	it	lt
 800e83e:	469c      	movlt	ip, r3
 800e840:	b203      	sxth	r3, r0
 800e842:	fa0f f982 	sxth.w	r9, r2
 800e846:	f8ad e01c 	strh.w	lr, [sp, #28]
 800e84a:	f8ad c01e 	strh.w	ip, [sp, #30]
 800e84e:	454b      	cmp	r3, r9
 800e850:	bfb8      	it	lt
 800e852:	4602      	movlt	r2, r0
 800e854:	9b03      	ldr	r3, [sp, #12]
 800e856:	eba2 020e 	sub.w	r2, r2, lr
 800e85a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e85e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800e862:	4411      	add	r1, r2
 800e864:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e868:	4413      	add	r3, r2
 800e86a:	b289      	uxth	r1, r1
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	b208      	sxth	r0, r1
 800e870:	b21a      	sxth	r2, r3
 800e872:	4290      	cmp	r0, r2
 800e874:	bfb8      	it	lt
 800e876:	460b      	movlt	r3, r1
 800e878:	eba3 030c 	sub.w	r3, r3, ip
 800e87c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e880:	a807      	add	r0, sp, #28
 800e882:	f7fd f9fa 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e886:	b920      	cbnz	r0, 800e892 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	a907      	add	r1, sp, #28
 800e88c:	4620      	mov	r0, r4
 800e88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e890:	4798      	blx	r3
 800e892:	3701      	adds	r7, #1
 800e894:	b2bf      	uxth	r7, r7
 800e896:	e7a9      	b.n	800e7ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800e898:	f8d8 0000 	ldr.w	r0, [r8]
 800e89c:	2101      	movs	r1, #1
 800e89e:	6803      	ldr	r3, [r0, #0]
 800e8a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e8a4:	4798      	blx	r3
 800e8a6:	e772      	b.n	800e78e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800e8a8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e8ac:	e7e8      	b.n	800e880 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	4798      	blx	r3
 800e8b2:	4b42      	ldr	r3, [pc, #264]	; (800e9bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f43f af29 	beq.w	800e70e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800e8c2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800e8c6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 800e8ca:	9b02      	ldr	r3, [sp, #8]
 800e8cc:	881b      	ldrh	r3, [r3, #0]
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	f67f af1d 	bls.w	800e70e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800e8d4:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 800e8d8:	2907      	cmp	r1, #7
 800e8da:	d815      	bhi.n	800e908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800e8dc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e8e0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800e8e4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800e8e8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800e8ec:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800e8f0:	1c4a      	adds	r2, r1, #1
 800e8f2:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 800e8f6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800e8fa:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800e8fe:	f8a2 e002 	strh.w	lr, [r2, #2]
 800e902:	f8a2 c004 	strh.w	ip, [r2, #4]
 800e906:	80d7      	strh	r7, [r2, #6]
 800e908:	3301      	adds	r3, #1
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	e7df      	b.n	800e8ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800e90e:	2b02      	cmp	r3, #2
 800e910:	f040 8135 	bne.w	800eb7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800e914:	4b2a      	ldr	r3, [pc, #168]	; (800e9c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800e916:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	f000 809c 	beq.w	800ea5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800e922:	9b02      	ldr	r3, [sp, #8]
 800e924:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 800e928:	f8b3 b000 	ldrh.w	fp, [r3]
 800e92c:	f10b 0b01 	add.w	fp, fp, #1
 800e930:	fa1f fb8b 	uxth.w	fp, fp
 800e934:	2a00      	cmp	r2, #0
 800e936:	d0bc      	beq.n	800e8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800e938:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800e93c:	4659      	mov	r1, fp
 800e93e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800e942:	f04f 0800 	mov.w	r8, #0
 800e946:	441d      	add	r5, r3
 800e948:	b22d      	sxth	r5, r5
 800e94a:	b28b      	uxth	r3, r1
 800e94c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800e950:	429a      	cmp	r2, r3
 800e952:	f240 80c0 	bls.w	800ead6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800e956:	4427      	add	r7, r4
 800e958:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800e95c:	4608      	mov	r0, r1
 800e95e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800e962:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 800e966:	4563      	cmp	r3, ip
 800e968:	f340 80a2 	ble.w	800eab0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800e96c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 800e970:	4465      	add	r5, ip
 800e972:	b22d      	sxth	r5, r5
 800e974:	429d      	cmp	r5, r3
 800e976:	bfa8      	it	ge
 800e978:	461d      	movge	r5, r3
 800e97a:	3101      	adds	r1, #1
 800e97c:	4680      	mov	r8, r0
 800e97e:	e7e4      	b.n	800e94a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800e980:	d10b      	bne.n	800e99a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800e982:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800e986:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800e98a:	458c      	cmp	ip, r1
 800e98c:	bfb4      	ite	lt
 800e98e:	469c      	movlt	ip, r3
 800e990:	46bc      	movge	ip, r7
 800e992:	4572      	cmp	r2, lr
 800e994:	bfb8      	it	lt
 800e996:	4672      	movlt	r2, lr
 800e998:	e087      	b.n	800eaaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800e99a:	428a      	cmp	r2, r1
 800e99c:	46bc      	mov	ip, r7
 800e99e:	bfb8      	it	lt
 800e9a0:	460a      	movlt	r2, r1
 800e9a2:	e082      	b.n	800eaaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800e9a4:	2400b25c 	.word	0x2400b25c
 800e9a8:	2400b268 	.word	0x2400b268
 800e9ac:	24000050 	.word	0x24000050
 800e9b0:	2400b224 	.word	0x2400b224
 800e9b4:	2400b21a 	.word	0x2400b21a
 800e9b8:	2400b218 	.word	0x2400b218
 800e9bc:	2400b222 	.word	0x2400b222
 800e9c0:	2400b21c 	.word	0x2400b21c
 800e9c4:	1961      	adds	r1, r4, r5
 800e9c6:	ab07      	add	r3, sp, #28
 800e9c8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800e9cc:	6849      	ldr	r1, [r1, #4]
 800e9ce:	c303      	stmia	r3!, {r0, r1}
 800e9d0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e9d4:	a807      	add	r0, sp, #28
 800e9d6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e9da:	2b13      	cmp	r3, #19
 800e9dc:	440b      	add	r3, r1
 800e9de:	bfd8      	it	le
 800e9e0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800e9e4:	1a9b      	subs	r3, r3, r2
 800e9e6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e9ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e9ee:	f7ff f871 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e9f2:	a807      	add	r0, sp, #28
 800e9f4:	f7fd f941 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e9f8:	bb78      	cbnz	r0, 800ea5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800e9fa:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e9fe:	4425      	add	r5, r4
 800ea00:	f8d8 0000 	ldr.w	r0, [r8]
 800ea04:	f1bc 0f14 	cmp.w	ip, #20
 800ea08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ea0c:	f8d0 e000 	ldr.w	lr, [r0]
 800ea10:	bfa8      	it	ge
 800ea12:	f04f 0c14 	movge.w	ip, #20
 800ea16:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ea1a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800ea1e:	fa1f fc8c 	uxth.w	ip, ip
 800ea22:	f8cd c000 	str.w	ip, [sp]
 800ea26:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800ea2a:	47d0      	blx	sl
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ea32:	a807      	add	r0, sp, #28
 800ea34:	f7ff f834 	bl	800daa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	a907      	add	r1, sp, #28
 800ea3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea40:	4798      	blx	r3
 800ea42:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800ea46:	eba0 000a 	sub.w	r0, r0, sl
 800ea4a:	b200      	sxth	r0, r0
 800ea4c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800ea50:	b918      	cbnz	r0, 800ea5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800ea52:	b2b9      	uxth	r1, r7
 800ea54:	4648      	mov	r0, r9
 800ea56:	f7ff faa5 	bl	800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ea5a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800ea5e:	f1bb 0f00 	cmp.w	fp, #0
 800ea62:	f43f af26 	beq.w	800e8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800ea66:	9b02      	ldr	r3, [sp, #8]
 800ea68:	2700      	movs	r7, #0
 800ea6a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	3301      	adds	r3, #1
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	b299      	uxth	r1, r3
 800ea76:	00fd      	lsls	r5, r7, #3
 800ea78:	458b      	cmp	fp, r1
 800ea7a:	d9a3      	bls.n	800e9c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800ea7c:	4425      	add	r5, r4
 800ea7e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800ea82:	469c      	mov	ip, r3
 800ea84:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800ea88:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800ea8c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800ea90:	4408      	add	r0, r1
 800ea92:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800ea96:	4471      	add	r1, lr
 800ea98:	b200      	sxth	r0, r0
 800ea9a:	b209      	sxth	r1, r1
 800ea9c:	4288      	cmp	r0, r1
 800ea9e:	f6bf af6f 	bge.w	800e980 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800eaa2:	4586      	cmp	lr, r0
 800eaa4:	4672      	mov	r2, lr
 800eaa6:	bfb8      	it	lt
 800eaa8:	4602      	movlt	r2, r0
 800eaaa:	3301      	adds	r3, #1
 800eaac:	4667      	mov	r7, ip
 800eaae:	e7e1      	b.n	800ea74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800eab0:	d10c      	bne.n	800eacc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800eab2:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 800eab6:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 800eaba:	4287      	cmp	r7, r0
 800eabc:	bfb4      	ite	lt
 800eabe:	4608      	movlt	r0, r1
 800eac0:	4640      	movge	r0, r8
 800eac2:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 800eac6:	443b      	add	r3, r7
 800eac8:	b21b      	sxth	r3, r3
 800eaca:	e753      	b.n	800e974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800eacc:	4565      	cmp	r5, ip
 800eace:	4640      	mov	r0, r8
 800ead0:	bfa8      	it	ge
 800ead2:	4665      	movge	r5, ip
 800ead4:	e751      	b.n	800e97a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800ead6:	eb09 0007 	add.w	r0, r9, r7
 800eada:	4427      	add	r7, r4
 800eadc:	9203      	str	r2, [sp, #12]
 800eade:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 800eae2:	f1ba 0f13 	cmp.w	sl, #19
 800eae6:	bfde      	ittt	le
 800eae8:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 800eaec:	4455      	addle	r5, sl
 800eaee:	b22d      	sxthle	r5, r5
 800eaf0:	f7fd f8c3 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800eaf4:	9a03      	ldr	r2, [sp, #12]
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f47f af1c 	bne.w	800e934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800eafc:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 800eb00:	fa1f fa8a 	uxth.w	sl, sl
 800eb04:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800eb08:	1aad      	subs	r5, r5, r2
 800eb0a:	4829      	ldr	r0, [pc, #164]	; (800ebb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800eb0c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 800eb10:	2d14      	cmp	r5, #20
 800eb12:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800eb16:	6800      	ldr	r0, [r0, #0]
 800eb18:	bfa8      	it	ge
 800eb1a:	2514      	movge	r5, #20
 800eb1c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eb20:	f8ad 201e 	strh.w	r2, [sp, #30]
 800eb24:	b289      	uxth	r1, r1
 800eb26:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eb2a:	b2ad      	uxth	r5, r5
 800eb2c:	f8d0 c000 	ldr.w	ip, [r0]
 800eb30:	b292      	uxth	r2, r2
 800eb32:	4555      	cmp	r5, sl
 800eb34:	bf94      	ite	ls
 800eb36:	9500      	strls	r5, [sp, #0]
 800eb38:	f8cd a000 	strhi.w	sl, [sp]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800eb42:	47a8      	blx	r5
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800eb4a:	a907      	add	r1, sp, #28
 800eb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4798      	blx	r3
 800eb52:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800eb56:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800eb5a:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 800eb5e:	1a5b      	subs	r3, r3, r1
 800eb60:	440a      	add	r2, r1
 800eb62:	b21b      	sxth	r3, r3
 800eb64:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 800eb68:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f47f aed8 	bne.w	800e922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800eb72:	fa1f f188 	uxth.w	r1, r8
 800eb76:	4648      	mov	r0, r9
 800eb78:	f7ff fa14 	bl	800dfa4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800eb7c:	e6d1      	b.n	800e922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800eb7e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800eb82:	42ab      	cmp	r3, r5
 800eb84:	f67f ae95 	bls.w	800e8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800eb88:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800eb8c:	ab07      	add	r3, sp, #28
 800eb8e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800eb92:	6851      	ldr	r1, [r2, #4]
 800eb94:	c303      	stmia	r3!, {r0, r1}
 800eb96:	a807      	add	r0, sp, #28
 800eb98:	f7fd f86f 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 800eb9c:	b920      	cbnz	r0, 800eba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	a907      	add	r1, sp, #28
 800eba2:	4620      	mov	r0, r4
 800eba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba6:	4798      	blx	r3
 800eba8:	3501      	adds	r5, #1
 800ebaa:	b2ad      	uxth	r5, r5
 800ebac:	e7e7      	b.n	800eb7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800ebae:	bf00      	nop
 800ebb0:	2400b224 	.word	0x2400b224

0800ebb4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800ebb4:	4b03      	ldr	r3, [pc, #12]	; (800ebc4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	801a      	strh	r2, [r3, #0]
 800ebba:	805a      	strh	r2, [r3, #2]
 800ebbc:	809a      	strh	r2, [r3, #4]
 800ebbe:	80da      	strh	r2, [r3, #6]
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	2400b268 	.word	0x2400b268

0800ebc8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	b09d      	sub	sp, #116	; 0x74
 800ebce:	4606      	mov	r6, r0
 800ebd0:	4614      	mov	r4, r2
 800ebd2:	468a      	mov	sl, r1
 800ebd4:	a803      	add	r0, sp, #12
 800ebd6:	461d      	mov	r5, r3
 800ebd8:	f000 fd6c 	bl	800f6b4 <_ZN8touchgfx12TextProviderC1Ev>
 800ebdc:	6833      	ldr	r3, [r6, #0]
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800ebe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe6:	4798      	blx	r3
 800ebe8:	6833      	ldr	r3, [r6, #0]
 800ebea:	4607      	mov	r7, r0
 800ebec:	4630      	mov	r0, r6
 800ebee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf0:	4798      	blx	r3
 800ebf2:	462a      	mov	r2, r5
 800ebf4:	2500      	movs	r5, #0
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	9000      	str	r0, [sp, #0]
 800ebfa:	463b      	mov	r3, r7
 800ebfc:	462c      	mov	r4, r5
 800ebfe:	46a9      	mov	r9, r5
 800ec00:	46a8      	mov	r8, r5
 800ec02:	a803      	add	r0, sp, #12
 800ec04:	f000 fda9 	bl	800f75a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	9302      	str	r3, [sp, #8]
 800ec0c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ec10:	429c      	cmp	r4, r3
 800ec12:	d002      	beq.n	800ec1a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800ec14:	455c      	cmp	r4, fp
 800ec16:	bf18      	it	ne
 800ec18:	4625      	movne	r5, r4
 800ec1a:	ab02      	add	r3, sp, #8
 800ec1c:	4632      	mov	r2, r6
 800ec1e:	4651      	mov	r1, sl
 800ec20:	a803      	add	r0, sp, #12
 800ec22:	f001 f88f 	bl	800fd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ec26:	4604      	mov	r4, r0
 800ec28:	b108      	cbz	r0, 800ec2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800ec2a:	280a      	cmp	r0, #10
 800ec2c:	d10a      	bne.n	800ec44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800ec2e:	45c1      	cmp	r9, r8
 800ec30:	bf38      	it	cc
 800ec32:	46c1      	movcc	r9, r8
 800ec34:	f04f 0800 	mov.w	r8, #0
 800ec38:	2c00      	cmp	r4, #0
 800ec3a:	d1e5      	bne.n	800ec08 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ec3c:	4648      	mov	r0, r9
 800ec3e:	b01d      	add	sp, #116	; 0x74
 800ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec44:	9a02      	ldr	r2, [sp, #8]
 800ec46:	2a00      	cmp	r2, #0
 800ec48:	d0de      	beq.n	800ec08 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ec4a:	7b57      	ldrb	r7, [r2, #13]
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	6833      	ldr	r3, [r6, #0]
 800ec50:	007f      	lsls	r7, r7, #1
 800ec52:	8894      	ldrh	r4, [r2, #4]
 800ec54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec56:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800ec5a:	7a97      	ldrb	r7, [r2, #10]
 800ec5c:	4307      	orrs	r7, r0
 800ec5e:	4630      	mov	r0, r6
 800ec60:	4798      	blx	r3
 800ec62:	4438      	add	r0, r7
 800ec64:	4480      	add	r8, r0
 800ec66:	fa1f f888 	uxth.w	r8, r8
 800ec6a:	e7e5      	b.n	800ec38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800ec6c <_ZNK8touchgfx4Font12getCharWidthEt>:
 800ec6c:	b508      	push	{r3, lr}
 800ec6e:	6803      	ldr	r3, [r0, #0]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	4798      	blx	r3
 800ec74:	b128      	cbz	r0, 800ec82 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800ec76:	7b43      	ldrb	r3, [r0, #13]
 800ec78:	7a80      	ldrb	r0, [r0, #10]
 800ec7a:	005b      	lsls	r3, r3, #1
 800ec7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec80:	4318      	orrs	r0, r3
 800ec82:	bd08      	pop	{r3, pc}

0800ec84 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ec84:	b40e      	push	{r1, r2, r3}
 800ec86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec88:	b09e      	sub	sp, #120	; 0x78
 800ec8a:	4605      	mov	r5, r0
 800ec8c:	ab23      	add	r3, sp, #140	; 0x8c
 800ec8e:	a805      	add	r0, sp, #20
 800ec90:	f853 4b04 	ldr.w	r4, [r3], #4
 800ec94:	9303      	str	r3, [sp, #12]
 800ec96:	f000 fd0d 	bl	800f6b4 <_ZN8touchgfx12TextProviderC1Ev>
 800ec9a:	682b      	ldr	r3, [r5, #0]
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eca0:	4798      	blx	r3
 800eca2:	682b      	ldr	r3, [r5, #0]
 800eca4:	4606      	mov	r6, r0
 800eca6:	4628      	mov	r0, r5
 800eca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecaa:	4798      	blx	r3
 800ecac:	4633      	mov	r3, r6
 800ecae:	4621      	mov	r1, r4
 800ecb0:	ae1e      	add	r6, sp, #120	; 0x78
 800ecb2:	2400      	movs	r4, #0
 800ecb4:	9000      	str	r0, [sp, #0]
 800ecb6:	9a03      	ldr	r2, [sp, #12]
 800ecb8:	a805      	add	r0, sp, #20
 800ecba:	f000 fd4e 	bl	800f75a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ecbe:	f846 4d68 	str.w	r4, [r6, #-104]!
 800ecc2:	462a      	mov	r2, r5
 800ecc4:	4633      	mov	r3, r6
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	a805      	add	r0, sp, #20
 800ecca:	f001 f83b 	bl	800fd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ecce:	b300      	cbz	r0, 800ed12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800ecd0:	280a      	cmp	r0, #10
 800ecd2:	d01a      	beq.n	800ed0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ecd4:	9f04      	ldr	r7, [sp, #16]
 800ecd6:	b1c7      	cbz	r7, 800ed0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ecd8:	7b78      	ldrb	r0, [r7, #13]
 800ecda:	7a3b      	ldrb	r3, [r7, #8]
 800ecdc:	00c1      	lsls	r1, r0, #3
 800ecde:	88aa      	ldrh	r2, [r5, #4]
 800ece0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ece4:	4319      	orrs	r1, r3
 800ece6:	0643      	lsls	r3, r0, #25
 800ece8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ecec:	bf48      	it	mi
 800ecee:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800ecf2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800ecf6:	bf48      	it	mi
 800ecf8:	b219      	sxthmi	r1, r3
 800ecfa:	79fb      	ldrb	r3, [r7, #7]
 800ecfc:	4303      	orrs	r3, r0
 800ecfe:	4413      	add	r3, r2
 800ed00:	1a5b      	subs	r3, r3, r1
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	bfc8      	it	gt
 800ed08:	b21c      	sxthgt	r4, r3
 800ed0a:	4633      	mov	r3, r6
 800ed0c:	462a      	mov	r2, r5
 800ed0e:	2100      	movs	r1, #0
 800ed10:	e7da      	b.n	800ecc8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800ed12:	b2a0      	uxth	r0, r4
 800ed14:	b01e      	add	sp, #120	; 0x78
 800ed16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ed1a:	b003      	add	sp, #12
 800ed1c:	4770      	bx	lr

0800ed1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800ed1e:	b40e      	push	{r1, r2, r3}
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	b09d      	sub	sp, #116	; 0x74
 800ed24:	4604      	mov	r4, r0
 800ed26:	ab21      	add	r3, sp, #132	; 0x84
 800ed28:	a803      	add	r0, sp, #12
 800ed2a:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed2e:	9302      	str	r3, [sp, #8]
 800ed30:	f000 fcc0 	bl	800f6b4 <_ZN8touchgfx12TextProviderC1Ev>
 800ed34:	6823      	ldr	r3, [r4, #0]
 800ed36:	4620      	mov	r0, r4
 800ed38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed3a:	4798      	blx	r3
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	4606      	mov	r6, r0
 800ed40:	4620      	mov	r0, r4
 800ed42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed44:	2401      	movs	r4, #1
 800ed46:	4798      	blx	r3
 800ed48:	4633      	mov	r3, r6
 800ed4a:	9000      	str	r0, [sp, #0]
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	9a02      	ldr	r2, [sp, #8]
 800ed50:	a803      	add	r0, sp, #12
 800ed52:	f000 fd02 	bl	800f75a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ed56:	a803      	add	r0, sp, #12
 800ed58:	f001 f874 	bl	800fe44 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ed5c:	b2a3      	uxth	r3, r4
 800ed5e:	b138      	cbz	r0, 800ed70 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800ed60:	280a      	cmp	r0, #10
 800ed62:	a803      	add	r0, sp, #12
 800ed64:	bf04      	itt	eq
 800ed66:	3301      	addeq	r3, #1
 800ed68:	b21c      	sxtheq	r4, r3
 800ed6a:	f001 f86b 	bl	800fe44 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ed6e:	e7f5      	b.n	800ed5c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800ed70:	4618      	mov	r0, r3
 800ed72:	b01d      	add	sp, #116	; 0x74
 800ed74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed78:	b003      	add	sp, #12
 800ed7a:	4770      	bx	lr

0800ed7c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800ed7c:	b40e      	push	{r1, r2, r3}
 800ed7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed80:	b09e      	sub	sp, #120	; 0x78
 800ed82:	4604      	mov	r4, r0
 800ed84:	ab23      	add	r3, sp, #140	; 0x8c
 800ed86:	a805      	add	r0, sp, #20
 800ed88:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed8c:	9303      	str	r3, [sp, #12]
 800ed8e:	f000 fc91 	bl	800f6b4 <_ZN8touchgfx12TextProviderC1Ev>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	4620      	mov	r0, r4
 800ed96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed98:	4798      	blx	r3
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eda2:	4798      	blx	r3
 800eda4:	4633      	mov	r3, r6
 800eda6:	4629      	mov	r1, r5
 800eda8:	9000      	str	r0, [sp, #0]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	a805      	add	r0, sp, #20
 800edae:	f000 fcd4 	bl	800f75a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800edb2:	ad1e      	add	r5, sp, #120	; 0x78
 800edb4:	2100      	movs	r1, #0
 800edb6:	26ff      	movs	r6, #255	; 0xff
 800edb8:	4622      	mov	r2, r4
 800edba:	a805      	add	r0, sp, #20
 800edbc:	f845 1d68 	str.w	r1, [r5, #-104]!
 800edc0:	462b      	mov	r3, r5
 800edc2:	f000 ffbf 	bl	800fd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800edc6:	b1d8      	cbz	r0, 800ee00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800edc8:	280a      	cmp	r0, #10
 800edca:	d012      	beq.n	800edf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800edcc:	9804      	ldr	r0, [sp, #16]
 800edce:	b180      	cbz	r0, 800edf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800edd0:	7b47      	ldrb	r7, [r0, #13]
 800edd2:	7922      	ldrb	r2, [r4, #4]
 800edd4:	00fb      	lsls	r3, r7, #3
 800edd6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800edda:	7a03      	ldrb	r3, [r0, #8]
 800eddc:	430b      	orrs	r3, r1
 800edde:	0679      	lsls	r1, r7, #25
 800ede0:	bf44      	itt	mi
 800ede2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ede6:	b21b      	sxthmi	r3, r3
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	b2db      	uxtb	r3, r3
 800edec:	429e      	cmp	r6, r3
 800edee:	bf28      	it	cs
 800edf0:	461e      	movcs	r6, r3
 800edf2:	462b      	mov	r3, r5
 800edf4:	4622      	mov	r2, r4
 800edf6:	2100      	movs	r1, #0
 800edf8:	a805      	add	r0, sp, #20
 800edfa:	f000 ffa3 	bl	800fd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800edfe:	e7e2      	b.n	800edc6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800ee00:	4630      	mov	r0, r6
 800ee02:	b01e      	add	sp, #120	; 0x78
 800ee04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee08:	b003      	add	sp, #12
 800ee0a:	4770      	bx	lr

0800ee0c <_ZNK8touchgfx8Drawable10invalidateEv>:
 800ee0c:	b513      	push	{r0, r1, r4, lr}
 800ee0e:	6803      	ldr	r3, [r0, #0]
 800ee10:	2400      	movs	r4, #0
 800ee12:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ee16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ee1a:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ee1e:	4669      	mov	r1, sp
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	9400      	str	r4, [sp, #0]
 800ee24:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ee28:	4798      	blx	r3
 800ee2a:	b002      	add	sp, #8
 800ee2c:	bd10      	pop	{r4, pc}

0800ee2e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800ee2e:	b538      	push	{r3, r4, r5, lr}
 800ee30:	680b      	ldr	r3, [r1, #0]
 800ee32:	460c      	mov	r4, r1
 800ee34:	4605      	mov	r5, r0
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	4798      	blx	r3
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee42:	4798      	blx	r3
 800ee44:	4628      	mov	r0, r5
 800ee46:	bd38      	pop	{r3, r4, r5, pc}

0800ee48 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800ee48:	b410      	push	{r4}
 800ee4a:	880a      	ldrh	r2, [r1, #0]
 800ee4c:	8884      	ldrh	r4, [r0, #4]
 800ee4e:	4422      	add	r2, r4
 800ee50:	800a      	strh	r2, [r1, #0]
 800ee52:	884a      	ldrh	r2, [r1, #2]
 800ee54:	88c4      	ldrh	r4, [r0, #6]
 800ee56:	4422      	add	r2, r4
 800ee58:	804a      	strh	r2, [r1, #2]
 800ee5a:	6940      	ldr	r0, [r0, #20]
 800ee5c:	b120      	cbz	r0, 800ee68 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800ee5e:	6803      	ldr	r3, [r0, #0]
 800ee60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	4718      	bx	r3
 800ee68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800ee6e:	b570      	push	{r4, r5, r6, lr}
 800ee70:	8882      	ldrh	r2, [r0, #4]
 800ee72:	460c      	mov	r4, r1
 800ee74:	880b      	ldrh	r3, [r1, #0]
 800ee76:	4605      	mov	r5, r0
 800ee78:	4413      	add	r3, r2
 800ee7a:	800b      	strh	r3, [r1, #0]
 800ee7c:	884b      	ldrh	r3, [r1, #2]
 800ee7e:	88c2      	ldrh	r2, [r0, #6]
 800ee80:	4413      	add	r3, r2
 800ee82:	804b      	strh	r3, [r1, #2]
 800ee84:	1d01      	adds	r1, r0, #4
 800ee86:	4620      	mov	r0, r4
 800ee88:	f7fc feb4 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800ee8c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dd0b      	ble.n	800eeac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ee94:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	dd07      	ble.n	800eeac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ee9c:	6968      	ldr	r0, [r5, #20]
 800ee9e:	b128      	cbz	r0, 800eeac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800eea0:	6803      	ldr	r3, [r0, #0]
 800eea2:	4621      	mov	r1, r4
 800eea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeaa:	4718      	bx	r3
 800eeac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eeb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	8882      	ldrh	r2, [r0, #4]
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	880b      	ldrh	r3, [r1, #0]
 800eeb8:	4605      	mov	r5, r0
 800eeba:	4413      	add	r3, r2
 800eebc:	800b      	strh	r3, [r1, #0]
 800eebe:	884b      	ldrh	r3, [r1, #2]
 800eec0:	88c2      	ldrh	r2, [r0, #6]
 800eec2:	4413      	add	r3, r2
 800eec4:	804b      	strh	r3, [r1, #2]
 800eec6:	1d01      	adds	r1, r0, #4
 800eec8:	4620      	mov	r0, r4
 800eeca:	f7fc fe93 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800eece:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	dd18      	ble.n	800ef08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800eed6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dd14      	ble.n	800ef08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800eede:	6968      	ldr	r0, [r5, #20]
 800eee0:	b128      	cbz	r0, 800eeee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800eee2:	6803      	ldr	r3, [r0, #0]
 800eee4:	4621      	mov	r1, r4
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeec:	4718      	bx	r3
 800eeee:	4b07      	ldr	r3, [pc, #28]	; (800ef0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3304      	adds	r3, #4
 800eef4:	429d      	cmp	r5, r3
 800eef6:	d107      	bne.n	800ef08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800eef8:	f7fe fff0 	bl	800dedc <_ZN8touchgfx11Application11getInstanceEv>
 800eefc:	6821      	ldr	r1, [r4, #0]
 800eefe:	6862      	ldr	r2, [r4, #4]
 800ef00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef04:	f7ff b862 	b.w	800dfcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	bf00      	nop
 800ef0c:	2400b260 	.word	0x2400b260

0800ef10 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	4616      	mov	r6, r2
 800ef16:	460d      	mov	r5, r1
 800ef18:	b901      	cbnz	r1, 800ef1c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800ef1a:	b192      	cbz	r2, 800ef42 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	4620      	mov	r0, r4
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	4798      	blx	r3
 800ef24:	88e2      	ldrh	r2, [r4, #6]
 800ef26:	88a1      	ldrh	r1, [r4, #4]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	4432      	add	r2, r6
 800ef2c:	4429      	add	r1, r5
 800ef2e:	b212      	sxth	r2, r2
 800ef30:	b209      	sxth	r1, r1
 800ef32:	f7fd f93d 	bl	800c1b0 <_ZN8touchgfx8Drawable5setXYEss>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	4620      	mov	r0, r4
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef40:	4718      	bx	r3
 800ef42:	bd70      	pop	{r4, r5, r6, pc}

0800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	2300      	movs	r3, #0
 800ef48:	4604      	mov	r4, r0
 800ef4a:	4608      	mov	r0, r1
 800ef4c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800ef50:	8023      	strh	r3, [r4, #0]
 800ef52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ef56:	8063      	strh	r3, [r4, #2]
 800ef58:	6803      	ldr	r3, [r0, #0]
 800ef5a:	80a1      	strh	r1, [r4, #4]
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	80e2      	strh	r2, [r4, #6]
 800ef60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef62:	4798      	blx	r3
 800ef64:	4620      	mov	r0, r4
 800ef66:	bd10      	pop	{r4, pc}

0800ef68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800ef68:	b530      	push	{r4, r5, lr}
 800ef6a:	8083      	strh	r3, [r0, #4]
 800ef6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ef70:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ef74:	7183      	strb	r3, [r0, #6]
 800ef76:	79c3      	ldrb	r3, [r0, #7]
 800ef78:	6101      	str	r1, [r0, #16]
 800ef7a:	f365 0306 	bfi	r3, r5, #0, #7
 800ef7e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800ef82:	8282      	strh	r2, [r0, #20]
 800ef84:	f365 13c7 	bfi	r3, r5, #7, #1
 800ef88:	71c3      	strb	r3, [r0, #7]
 800ef8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ef8e:	7203      	strb	r3, [r0, #8]
 800ef90:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ef94:	7243      	strb	r3, [r0, #9]
 800ef96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ef9a:	8143      	strh	r3, [r0, #10]
 800ef9c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800efa0:	8183      	strh	r3, [r0, #12]
 800efa2:	4b01      	ldr	r3, [pc, #4]	; (800efa8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800efa4:	6003      	str	r3, [r0, #0]
 800efa6:	bd30      	pop	{r4, r5, pc}
 800efa8:	0801b288 	.word	0x0801b288

0800efac <_ZNK8touchgfx9ConstFont4findEt>:
 800efac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efae:	6904      	ldr	r4, [r0, #16]
 800efb0:	b3bc      	cbz	r4, 800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800efb2:	88a3      	ldrh	r3, [r4, #4]
 800efb4:	8a82      	ldrh	r2, [r0, #20]
 800efb6:	1acb      	subs	r3, r1, r3
 800efb8:	f102 32ff 	add.w	r2, r2, #4294967295
 800efbc:	d431      	bmi.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800efbe:	4293      	cmp	r3, r2
 800efc0:	dd0c      	ble.n	800efdc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800efc2:	230e      	movs	r3, #14
 800efc4:	fb03 4302 	mla	r3, r3, r2, r4
 800efc8:	889b      	ldrh	r3, [r3, #4]
 800efca:	1a5b      	subs	r3, r3, r1
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	429a      	cmp	r2, r3
 800efd0:	db27      	blt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bfbc      	itt	lt
 800efd6:	2302      	movlt	r3, #2
 800efd8:	fb92 f3f3 	sdivlt	r3, r2, r3
 800efdc:	2500      	movs	r5, #0
 800efde:	260e      	movs	r6, #14
 800efe0:	4295      	cmp	r5, r2
 800efe2:	dc1e      	bgt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800efe4:	fb06 4003 	mla	r0, r6, r3, r4
 800efe8:	8887      	ldrh	r7, [r0, #4]
 800efea:	42b9      	cmp	r1, r7
 800efec:	d01a      	beq.n	800f024 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800efee:	d20d      	bcs.n	800f00c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	4295      	cmp	r5, r2
 800eff4:	dc15      	bgt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800eff6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800effa:	1a5b      	subs	r3, r3, r1
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	429a      	cmp	r2, r3
 800f000:	db0f      	blt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f002:	429d      	cmp	r5, r3
 800f004:	ddec      	ble.n	800efe0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f006:	1953      	adds	r3, r2, r5
 800f008:	105b      	asrs	r3, r3, #1
 800f00a:	e7e9      	b.n	800efe0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f00c:	1c5d      	adds	r5, r3, #1
 800f00e:	42aa      	cmp	r2, r5
 800f010:	db07      	blt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f012:	8a43      	ldrh	r3, [r0, #18]
 800f014:	1acb      	subs	r3, r1, r3
 800f016:	442b      	add	r3, r5
 800f018:	429d      	cmp	r5, r3
 800f01a:	dc02      	bgt.n	800f022 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f01c:	429a      	cmp	r2, r3
 800f01e:	dadf      	bge.n	800efe0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f020:	e7f1      	b.n	800f006 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800f022:	2000      	movs	r0, #0
 800f024:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f026 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800f026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f028:	4604      	mov	r4, r0
 800f02a:	4617      	mov	r7, r2
 800f02c:	461e      	mov	r6, r3
 800f02e:	b911      	cbnz	r1, 800f036 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800f030:	2500      	movs	r5, #0
 800f032:	4628      	mov	r0, r5
 800f034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f036:	290a      	cmp	r1, #10
 800f038:	d0fa      	beq.n	800f030 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f03a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f03e:	4291      	cmp	r1, r2
 800f040:	d0f6      	beq.n	800f030 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f042:	f242 020b 	movw	r2, #8203	; 0x200b
 800f046:	4291      	cmp	r1, r2
 800f048:	d0f2      	beq.n	800f030 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f04a:	f7ff ffaf 	bl	800efac <_ZNK8touchgfx9ConstFont4findEt>
 800f04e:	4605      	mov	r5, r0
 800f050:	b950      	cbnz	r0, 800f068 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	4620      	mov	r0, r4
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	4798      	blx	r3
 800f05a:	4601      	mov	r1, r0
 800f05c:	4620      	mov	r0, r4
 800f05e:	f7ff ffa5 	bl	800efac <_ZNK8touchgfx9ConstFont4findEt>
 800f062:	4605      	mov	r5, r0
 800f064:	2800      	cmp	r0, #0
 800f066:	d0e3      	beq.n	800f030 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	4629      	mov	r1, r5
 800f06c:	4620      	mov	r0, r4
 800f06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f070:	4798      	blx	r3
 800f072:	6038      	str	r0, [r7, #0]
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	4620      	mov	r0, r4
 800f078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f07a:	4798      	blx	r3
 800f07c:	7030      	strb	r0, [r6, #0]
 800f07e:	e7d8      	b.n	800f032 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800f080 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800f080:	2000      	movs	r0, #0
 800f082:	4770      	bx	lr

0800f084 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800f084:	2001      	movs	r0, #1
 800f086:	4770      	bx	lr

0800f088 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800f088:	2002      	movs	r0, #2
 800f08a:	4770      	bx	lr

0800f08c <_ZN8touchgfx6ScreenD1Ev>:
 800f08c:	4770      	bx	lr

0800f08e <_ZN8touchgfx12GestureEventD1Ev>:
 800f08e:	4770      	bx	lr

0800f090 <_ZN8touchgfx9DragEventD1Ev>:
 800f090:	4770      	bx	lr

0800f092 <_ZN8touchgfx10ClickEventD1Ev>:
 800f092:	4770      	bx	lr

0800f094 <_ZN8touchgfx10ClickEventD0Ev>:
 800f094:	b510      	push	{r4, lr}
 800f096:	4604      	mov	r4, r0
 800f098:	210c      	movs	r1, #12
 800f09a:	f009 fc44 	bl	8018926 <_ZdlPvj>
 800f09e:	4620      	mov	r0, r4
 800f0a0:	bd10      	pop	{r4, pc}

0800f0a2 <_ZN8touchgfx9DragEventD0Ev>:
 800f0a2:	b510      	push	{r4, lr}
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	2110      	movs	r1, #16
 800f0a8:	f009 fc3d 	bl	8018926 <_ZdlPvj>
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	bd10      	pop	{r4, pc}

0800f0b0 <_ZN8touchgfx12GestureEventD0Ev>:
 800f0b0:	b510      	push	{r4, lr}
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	210c      	movs	r1, #12
 800f0b6:	f009 fc36 	bl	8018926 <_ZdlPvj>
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	bd10      	pop	{r4, pc}

0800f0be <_ZN8touchgfx6ScreenD0Ev>:
 800f0be:	b510      	push	{r4, lr}
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	213c      	movs	r1, #60	; 0x3c
 800f0c4:	f009 fc2f 	bl	8018926 <_ZdlPvj>
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	bd10      	pop	{r4, pc}

0800f0cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f0cc:	b530      	push	{r4, r5, lr}
 800f0ce:	460d      	mov	r5, r1
 800f0d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f0d2:	b087      	sub	sp, #28
 800f0d4:	4604      	mov	r4, r0
 800f0d6:	b301      	cbz	r1, 800f11a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800f0d8:	a801      	add	r0, sp, #4
 800f0da:	f7ff ff33 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f0de:	892a      	ldrh	r2, [r5, #8]
 800f0e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f0e4:	7928      	ldrb	r0, [r5, #4]
 800f0e6:	1ad2      	subs	r2, r2, r3
 800f0e8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f0ea:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f0ee:	441a      	add	r2, r3
 800f0f0:	896b      	ldrh	r3, [r5, #10]
 800f0f2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800f0f6:	f88d 0010 	strb.w	r0, [sp, #16]
 800f0fa:	1b5b      	subs	r3, r3, r5
 800f0fc:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800f0fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f100:	442b      	add	r3, r5
 800f102:	4d07      	ldr	r5, [pc, #28]	; (800f120 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800f104:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f108:	a903      	add	r1, sp, #12
 800f10a:	9503      	str	r5, [sp, #12]
 800f10c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f110:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f114:	6803      	ldr	r3, [r0, #0]
 800f116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f118:	4798      	blx	r3
 800f11a:	b007      	add	sp, #28
 800f11c:	bd30      	pop	{r4, r5, pc}
 800f11e:	bf00      	nop
 800f120:	0801b308 	.word	0x0801b308

0800f124 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f12a:	b08a      	sub	sp, #40	; 0x28
 800f12c:	4604      	mov	r4, r0
 800f12e:	460d      	mov	r5, r1
 800f130:	b113      	cbz	r3, 800f138 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800f132:	790b      	ldrb	r3, [r1, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d044      	beq.n	800f1c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f138:	f104 0804 	add.w	r8, r4, #4
 800f13c:	a803      	add	r0, sp, #12
 800f13e:	4641      	mov	r1, r8
 800f140:	f7ff ff00 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f144:	792b      	ldrb	r3, [r5, #4]
 800f146:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800f14a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800f14e:	b983      	cbnz	r3, 800f172 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800f150:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800f154:	892a      	ldrh	r2, [r5, #8]
 800f156:	88e9      	ldrh	r1, [r5, #6]
 800f158:	4640      	mov	r0, r8
 800f15a:	1b92      	subs	r2, r2, r6
 800f15c:	9301      	str	r3, [sp, #4]
 800f15e:	1bc9      	subs	r1, r1, r7
 800f160:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f164:	b212      	sxth	r2, r2
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	b209      	sxth	r1, r1
 800f16a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f16e:	f7fc fc5f 	bl	800ba30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800f172:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f174:	b329      	cbz	r1, 800f1c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f176:	a805      	add	r0, sp, #20
 800f178:	f7ff fee4 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f17c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f180:	792b      	ldrb	r3, [r5, #4]
 800f182:	a907      	add	r1, sp, #28
 800f184:	1abf      	subs	r7, r7, r2
 800f186:	88ea      	ldrh	r2, [r5, #6]
 800f188:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f18a:	4417      	add	r7, r2
 800f18c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f18e:	f88d 3020 	strb.w	r3, [sp, #32]
 800f192:	4417      	add	r7, r2
 800f194:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800f198:	1ab6      	subs	r6, r6, r2
 800f19a:	892a      	ldrh	r2, [r5, #8]
 800f19c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f1a0:	4416      	add	r6, r2
 800f1a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f1a4:	4416      	add	r6, r2
 800f1a6:	4a08      	ldr	r2, [pc, #32]	; (800f1c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800f1a8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f1ac:	2600      	movs	r6, #0
 800f1ae:	9207      	str	r2, [sp, #28]
 800f1b0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f1b4:	6803      	ldr	r3, [r0, #0]
 800f1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b8:	4798      	blx	r3
 800f1ba:	792b      	ldrb	r3, [r5, #4]
 800f1bc:	b10b      	cbz	r3, 800f1c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f1be:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f1c2:	b00a      	add	sp, #40	; 0x28
 800f1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c8:	0801b2e0 	.word	0x0801b2e0

0800f1cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d0:	460c      	mov	r4, r1
 800f1d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f1d4:	b088      	sub	sp, #32
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	2900      	cmp	r1, #0
 800f1da:	d06d      	beq.n	800f2b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800f1dc:	4668      	mov	r0, sp
 800f1de:	f7ff feb1 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f1e2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800f1e4:	88e3      	ldrh	r3, [r4, #6]
 800f1e6:	f9bd 8000 	ldrsh.w	r8, [sp]
 800f1ea:	440b      	add	r3, r1
 800f1ec:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800f1f0:	b21b      	sxth	r3, r3
 800f1f2:	4543      	cmp	r3, r8
 800f1f4:	db31      	blt.n	800f25a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f1f6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800f1fa:	44c4      	add	ip, r8
 800f1fc:	fa0f fc8c 	sxth.w	ip, ip
 800f200:	4563      	cmp	r3, ip
 800f202:	da2a      	bge.n	800f25a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f204:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800f206:	8926      	ldrh	r6, [r4, #8]
 800f208:	4416      	add	r6, r2
 800f20a:	b236      	sxth	r6, r6
 800f20c:	42be      	cmp	r6, r7
 800f20e:	db24      	blt.n	800f25a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f210:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f214:	4438      	add	r0, r7
 800f216:	b200      	sxth	r0, r0
 800f218:	4286      	cmp	r6, r0
 800f21a:	da1e      	bge.n	800f25a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f21c:	8963      	ldrh	r3, [r4, #10]
 800f21e:	4419      	add	r1, r3
 800f220:	b209      	sxth	r1, r1
 800f222:	4541      	cmp	r1, r8
 800f224:	db08      	blt.n	800f238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f226:	4561      	cmp	r1, ip
 800f228:	da06      	bge.n	800f238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f22a:	89a3      	ldrh	r3, [r4, #12]
 800f22c:	441a      	add	r2, r3
 800f22e:	b212      	sxth	r2, r2
 800f230:	42ba      	cmp	r2, r7
 800f232:	db01      	blt.n	800f238 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f234:	4282      	cmp	r2, r0
 800f236:	db10      	blt.n	800f25a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f238:	4b21      	ldr	r3, [pc, #132]	; (800f2c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800f23a:	a904      	add	r1, sp, #16
 800f23c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f23e:	9304      	str	r3, [sp, #16]
 800f240:	2302      	movs	r3, #2
 800f242:	f88d 3014 	strb.w	r3, [sp, #20]
 800f246:	2300      	movs	r3, #0
 800f248:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f24c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f250:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f254:	6803      	ldr	r3, [r0, #0]
 800f256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f258:	4798      	blx	r3
 800f25a:	1d29      	adds	r1, r5, #4
 800f25c:	a802      	add	r0, sp, #8
 800f25e:	f7ff fe71 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f262:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f266:	88e0      	ldrh	r0, [r4, #6]
 800f268:	eba3 0808 	sub.w	r8, r3, r8
 800f26c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f270:	7921      	ldrb	r1, [r4, #4]
 800f272:	fa1f f888 	uxth.w	r8, r8
 800f276:	1bdf      	subs	r7, r3, r7
 800f278:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f27c:	b2bb      	uxth	r3, r7
 800f27e:	4440      	add	r0, r8
 800f280:	8922      	ldrh	r2, [r4, #8]
 800f282:	8967      	ldrh	r7, [r4, #10]
 800f284:	4460      	add	r0, ip
 800f286:	89a4      	ldrh	r4, [r4, #12]
 800f288:	441a      	add	r2, r3
 800f28a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f28c:	44b8      	add	r8, r7
 800f28e:	4423      	add	r3, r4
 800f290:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f294:	4432      	add	r2, r6
 800f296:	44e0      	add	r8, ip
 800f298:	4433      	add	r3, r6
 800f29a:	4c0a      	ldr	r4, [pc, #40]	; (800f2c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800f29c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f29e:	f88d 1014 	strb.w	r1, [sp, #20]
 800f2a2:	a904      	add	r1, sp, #16
 800f2a4:	9404      	str	r4, [sp, #16]
 800f2a6:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f2aa:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f2ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f2b2:	6803      	ldr	r3, [r0, #0]
 800f2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2b6:	4798      	blx	r3
 800f2b8:	b008      	add	sp, #32
 800f2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2be:	bf00      	nop
 800f2c0:	0801b2e0 	.word	0x0801b2e0
 800f2c4:	0801b2f4 	.word	0x0801b2f4

0800f2c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f2d0:	3201      	adds	r2, #1
 800f2d2:	d112      	bne.n	800f2fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f2da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f2de:	6803      	ldr	r3, [r0, #0]
 800f2e0:	9500      	str	r5, [sp, #0]
 800f2e2:	466d      	mov	r5, sp
 800f2e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f2e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f0:	4798      	blx	r3
 800f2f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f2f6:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	b003      	add	sp, #12
 800f2fe:	bd30      	pop	{r4, r5, pc}

0800f300 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f300:	b513      	push	{r0, r1, r4, lr}
 800f302:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f306:	4604      	mov	r4, r0
 800f308:	3301      	adds	r3, #1
 800f30a:	d109      	bne.n	800f320 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f30c:	4601      	mov	r1, r0
 800f30e:	4668      	mov	r0, sp
 800f310:	f7ff fe18 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f314:	f8bd 3000 	ldrh.w	r3, [sp]
 800f318:	8423      	strh	r3, [r4, #32]
 800f31a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f31e:	8463      	strh	r3, [r4, #34]	; 0x22
 800f320:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f324:	b002      	add	sp, #8
 800f326:	bd10      	pop	{r4, pc}

0800f328 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f328:	b513      	push	{r0, r1, r4, lr}
 800f32a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f32e:	4604      	mov	r4, r0
 800f330:	3301      	adds	r3, #1
 800f332:	d109      	bne.n	800f348 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800f334:	4601      	mov	r1, r0
 800f336:	4668      	mov	r0, sp
 800f338:	f7ff fe04 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f33c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f340:	8423      	strh	r3, [r4, #32]
 800f342:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f346:	8463      	strh	r3, [r4, #34]	; 0x22
 800f348:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f34c:	b002      	add	sp, #8
 800f34e:	bd10      	pop	{r4, pc}

0800f350 <_ZN8touchgfx6ScreenC1Ev>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	4b17      	ldr	r3, [pc, #92]	; (800f3b0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800f354:	4605      	mov	r5, r0
 800f356:	4a17      	ldr	r2, [pc, #92]	; (800f3b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800f358:	2101      	movs	r1, #1
 800f35a:	f845 3b04 	str.w	r3, [r5], #4
 800f35e:	2300      	movs	r3, #0
 800f360:	6042      	str	r2, [r0, #4]
 800f362:	4604      	mov	r4, r0
 800f364:	8103      	strh	r3, [r0, #8]
 800f366:	8143      	strh	r3, [r0, #10]
 800f368:	8183      	strh	r3, [r0, #12]
 800f36a:	81c3      	strh	r3, [r0, #14]
 800f36c:	8203      	strh	r3, [r0, #16]
 800f36e:	8243      	strh	r3, [r0, #18]
 800f370:	8283      	strh	r3, [r0, #20]
 800f372:	82c3      	strh	r3, [r0, #22]
 800f374:	6203      	str	r3, [r0, #32]
 800f376:	8483      	strh	r3, [r0, #36]	; 0x24
 800f378:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f37a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800f37e:	6343      	str	r3, [r0, #52]	; 0x34
 800f380:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800f384:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f388:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f38c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800f390:	4b09      	ldr	r3, [pc, #36]	; (800f3b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800f392:	4628      	mov	r0, r5
 800f394:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f398:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800f39a:	4a08      	ldr	r2, [pc, #32]	; (800f3bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800f39c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f3a0:	4798      	blx	r3
 800f3a2:	6863      	ldr	r3, [r4, #4]
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3aa:	4798      	blx	r3
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	bd70      	pop	{r4, r5, r6, pc}
 800f3b0:	0801b31c 	.word	0x0801b31c
 800f3b4:	0801aec0 	.word	0x0801aec0
 800f3b8:	2400b21a 	.word	0x2400b21a
 800f3bc:	2400b218 	.word	0x2400b218

0800f3c0 <_ZN8touchgfx6Screen4drawEv>:
 800f3c0:	4b09      	ldr	r3, [pc, #36]	; (800f3e8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800f3c2:	b507      	push	{r0, r1, r2, lr}
 800f3c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	4b08      	ldr	r3, [pc, #32]	; (800f3ec <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800f3cc:	9100      	str	r1, [sp, #0]
 800f3ce:	4669      	mov	r1, sp
 800f3d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f3d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f3dc:	6803      	ldr	r3, [r0, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	4798      	blx	r3
 800f3e2:	b003      	add	sp, #12
 800f3e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3e8:	2400b218 	.word	0x2400b218
 800f3ec:	2400b21a 	.word	0x2400b21a

0800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800f3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f3f8:	b089      	sub	sp, #36	; 0x24
 800f3fa:	4680      	mov	r8, r0
 800f3fc:	460c      	mov	r4, r1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	4615      	mov	r5, r2
 800f402:	dd0e      	ble.n	800f422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f404:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	dd0a      	ble.n	800f422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f40c:	4628      	mov	r0, r5
 800f40e:	f7ff ff5b 	bl	800f2c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f412:	4621      	mov	r1, r4
 800f414:	f7fe fc83 	bl	800dd1e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f418:	69eb      	ldr	r3, [r5, #28]
 800f41a:	b928      	cbnz	r0, 800f428 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800f41c:	461d      	mov	r5, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1f4      	bne.n	800f40c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800f422:	b009      	add	sp, #36	; 0x24
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	ae04      	add	r6, sp, #16
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 80b5 	beq.w	800f59a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f430:	682b      	ldr	r3, [r5, #0]
 800f432:	4629      	mov	r1, r5
 800f434:	a802      	add	r0, sp, #8
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	4798      	blx	r3
 800f43a:	4628      	mov	r0, r5
 800f43c:	f7ff ff60 	bl	800f300 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f440:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800f444:	4407      	add	r7, r0
 800f446:	4628      	mov	r0, r5
 800f448:	f7ff ff6e 	bl	800f328 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f44c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f450:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f454:	b23f      	sxth	r7, r7
 800f456:	4418      	add	r0, r3
 800f458:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f45c:	4621      	mov	r1, r4
 800f45e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f462:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f466:	4630      	mov	r0, r6
 800f468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f46c:	f8ad 7010 	strh.w	r7, [sp, #16]
 800f470:	f7fc fbc0 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800f474:	4628      	mov	r0, r5
 800f476:	f7ff ff27 	bl	800f2c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f47a:	ab06      	add	r3, sp, #24
 800f47c:	4602      	mov	r2, r0
 800f47e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f482:	e883 0003 	stmia.w	r3, {r0, r1}
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fc fbb3 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800f48e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f492:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f496:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800f49a:	4299      	cmp	r1, r3
 800f49c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800f4a0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800f4a4:	d10b      	bne.n	800f4be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f4aa:	4552      	cmp	r2, sl
 800f4ac:	d107      	bne.n	800f4be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4ae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f4b2:	455a      	cmp	r2, fp
 800f4b4:	d103      	bne.n	800f4be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f4b6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f4ba:	454a      	cmp	r2, r9
 800f4bc:	d06d      	beq.n	800f59a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f4be:	f1bb 0f00 	cmp.w	fp, #0
 800f4c2:	dd65      	ble.n	800f590 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f4c4:	f1b9 0f00 	cmp.w	r9, #0
 800f4c8:	dd62      	ble.n	800f590 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f4ca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f4ce:	fa1f f08a 	uxth.w	r0, sl
 800f4d2:	4552      	cmp	r2, sl
 800f4d4:	9000      	str	r0, [sp, #0]
 800f4d6:	da12      	bge.n	800f4fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	9b00      	ldr	r3, [sp, #0]
 800f4dc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f4e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f4e4:	1a9a      	subs	r2, r3, r2
 800f4e6:	f8ad 1010 	strh.w	r1, [sp, #16]
 800f4ea:	4631      	mov	r1, r6
 800f4ec:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f4f0:	4640      	mov	r0, r8
 800f4f2:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f4f6:	69ea      	ldr	r2, [r5, #28]
 800f4f8:	f7ff ff7a 	bl	800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f4fc:	9b01      	ldr	r3, [sp, #4]
 800f4fe:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f502:	b29f      	uxth	r7, r3
 800f504:	429a      	cmp	r2, r3
 800f506:	da0d      	bge.n	800f524 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800f508:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f50c:	1aba      	subs	r2, r7, r2
 800f50e:	f8ad a012 	strh.w	sl, [sp, #18]
 800f512:	4631      	mov	r1, r6
 800f514:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f518:	4640      	mov	r0, r8
 800f51a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f51e:	69ea      	ldr	r2, [r5, #28]
 800f520:	f7ff ff66 	bl	800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f524:	8822      	ldrh	r2, [r4, #0]
 800f526:	445f      	add	r7, fp
 800f528:	88a3      	ldrh	r3, [r4, #4]
 800f52a:	b2bf      	uxth	r7, r7
 800f52c:	4413      	add	r3, r2
 800f52e:	b23a      	sxth	r2, r7
 800f530:	b29b      	uxth	r3, r3
 800f532:	b219      	sxth	r1, r3
 800f534:	4291      	cmp	r1, r2
 800f536:	dd0d      	ble.n	800f554 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800f538:	1bdb      	subs	r3, r3, r7
 800f53a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f53e:	f8ad a012 	strh.w	sl, [sp, #18]
 800f542:	4631      	mov	r1, r6
 800f544:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f548:	4640      	mov	r0, r8
 800f54a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f54e:	69ea      	ldr	r2, [r5, #28]
 800f550:	f7ff ff4e 	bl	800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f554:	88e2      	ldrh	r2, [r4, #6]
 800f556:	8863      	ldrh	r3, [r4, #2]
 800f558:	4413      	add	r3, r2
 800f55a:	9a00      	ldr	r2, [sp, #0]
 800f55c:	444a      	add	r2, r9
 800f55e:	b29b      	uxth	r3, r3
 800f560:	fa1f f982 	uxth.w	r9, r2
 800f564:	b219      	sxth	r1, r3
 800f566:	fa0f f289 	sxth.w	r2, r9
 800f56a:	428a      	cmp	r2, r1
 800f56c:	da15      	bge.n	800f59a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f56e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f572:	eba3 0309 	sub.w	r3, r3, r9
 800f576:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f57a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f57e:	4631      	mov	r1, r6
 800f580:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f584:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f58c:	69ea      	ldr	r2, [r5, #28]
 800f58e:	e001      	b.n	800f594 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800f590:	69ea      	ldr	r2, [r5, #28]
 800f592:	4621      	mov	r1, r4
 800f594:	4640      	mov	r0, r8
 800f596:	f7ff ff2b 	bl	800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f59a:	4628      	mov	r0, r5
 800f59c:	f7ff fe94 	bl	800f2c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f5a0:	6861      	ldr	r1, [r4, #4]
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	4633      	mov	r3, r6
 800f5a6:	6820      	ldr	r0, [r4, #0]
 800f5a8:	c303      	stmia	r3!, {r0, r1}
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7fc fb21 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800f5b2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f77f af33 	ble.w	800f422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f5bc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f77f af2e 	ble.w	800f422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7ff fe9a 	bl	800f300 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f5cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f5d0:	1a18      	subs	r0, r3, r0
 800f5d2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	f7ff fea6 	bl	800f328 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f5dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	1a18      	subs	r0, r3, r0
 800f5e4:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	682b      	ldr	r3, [r5, #0]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	4798      	blx	r3
 800f5f0:	e717      	b.n	800f422 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800f5f2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800f5f2:	b570      	push	{r4, r5, r6, lr}
 800f5f4:	1d06      	adds	r6, r0, #4
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	460c      	mov	r4, r1
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	4631      	mov	r1, r6
 800f5fe:	4605      	mov	r5, r0
 800f600:	a802      	add	r0, sp, #8
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	f7ff fc9e 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f608:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f60c:	8822      	ldrh	r2, [r4, #0]
 800f60e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800f612:	1ad2      	subs	r2, r2, r3
 800f614:	8863      	ldrh	r3, [r4, #2]
 800f616:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f61a:	1a5b      	subs	r3, r3, r1
 800f61c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f620:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f624:	aa01      	add	r2, sp, #4
 800f626:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f62a:	4630      	mov	r0, r6
 800f62c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f630:	a904      	add	r1, sp, #16
 800f632:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f636:	f7fc fbb5 	bl	800bda4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800f63a:	9a01      	ldr	r2, [sp, #4]
 800f63c:	b11a      	cbz	r2, 800f646 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800f63e:	4621      	mov	r1, r4
 800f640:	4628      	mov	r0, r5
 800f642:	f7ff fed5 	bl	800f3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f646:	b006      	add	sp, #24
 800f648:	bd70      	pop	{r4, r5, r6, pc}

0800f64a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800f64a:	4602      	mov	r2, r0
 800f64c:	b530      	push	{r4, r5, lr}
 800f64e:	4604      	mov	r4, r0
 800f650:	b085      	sub	sp, #20
 800f652:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800f656:	460d      	mov	r5, r1
 800f658:	466b      	mov	r3, sp
 800f65a:	6851      	ldr	r1, [r2, #4]
 800f65c:	c303      	stmia	r3!, {r0, r1}
 800f65e:	4629      	mov	r1, r5
 800f660:	4668      	mov	r0, sp
 800f662:	f7fc fac7 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 800f666:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f66a:	b12b      	cbz	r3, 800f678 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800f66c:	4669      	mov	r1, sp
 800f66e:	4620      	mov	r0, r4
 800f670:	f7ff ffbf 	bl	800f5f2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800f674:	b005      	add	sp, #20
 800f676:	bd30      	pop	{r4, r5, pc}
 800f678:	3404      	adds	r4, #4
 800f67a:	a802      	add	r0, sp, #8
 800f67c:	4621      	mov	r1, r4
 800f67e:	f7ff fc61 	bl	800ef44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f682:	f8bd 3000 	ldrh.w	r3, [sp]
 800f686:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f68a:	4669      	mov	r1, sp
 800f68c:	4620      	mov	r0, r4
 800f68e:	1a9b      	subs	r3, r3, r2
 800f690:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f694:	f8ad 3000 	strh.w	r3, [sp]
 800f698:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f6a2:	f7fc fb46 	bl	800bd32 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800f6a6:	e7e5      	b.n	800f674 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800f6a8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	680a      	ldr	r2, [r1, #0]
 800f6ac:	1d01      	adds	r1, r0, #4
 800f6ae:	6992      	ldr	r2, [r2, #24]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	4710      	bx	r2

0800f6b4 <_ZN8touchgfx12TextProviderC1Ev>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	2500      	movs	r5, #0
 800f6b8:	2302      	movs	r3, #2
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	220e      	movs	r2, #14
 800f6be:	7403      	strb	r3, [r0, #16]
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	6145      	str	r5, [r0, #20]
 800f6c4:	7605      	strb	r5, [r0, #24]
 800f6c6:	83c5      	strh	r5, [r0, #30]
 800f6c8:	8405      	strh	r5, [r0, #32]
 800f6ca:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f6cc:	8705      	strh	r5, [r0, #56]	; 0x38
 800f6ce:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800f6d0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800f6d4:	e9c0 5500 	strd	r5, r5, [r0]
 800f6d8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800f6dc:	304c      	adds	r0, #76	; 0x4c
 800f6de:	f009 fae7 	bl	8018cb0 <memset>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800f6ea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f6ee:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800f6f2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800f6f6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800f6fa:	f7f3 fae3 	bl	8002cc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800f6fe:	4620      	mov	r0, r4
 800f700:	bd38      	pop	{r3, r4, r5, pc}

0800f702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800f702:	b530      	push	{r4, r5, lr}
 800f704:	2500      	movs	r5, #0
 800f706:	2401      	movs	r4, #1
 800f708:	6843      	ldr	r3, [r0, #4]
 800f70a:	b913      	cbnz	r3, 800f712 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800f70c:	6803      	ldr	r3, [r0, #0]
 800f70e:	b313      	cbz	r3, 800f756 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f710:	6043      	str	r3, [r0, #4]
 800f712:	7e03      	ldrb	r3, [r0, #24]
 800f714:	b143      	cbz	r3, 800f728 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800f716:	6943      	ldr	r3, [r0, #20]
 800f718:	b12b      	cbz	r3, 800f726 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f71a:	881a      	ldrh	r2, [r3, #0]
 800f71c:	b11a      	cbz	r2, 800f726 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f71e:	1c9a      	adds	r2, r3, #2
 800f720:	6142      	str	r2, [r0, #20]
 800f722:	8818      	ldrh	r0, [r3, #0]
 800f724:	bd30      	pop	{r4, r5, pc}
 800f726:	7605      	strb	r5, [r0, #24]
 800f728:	6843      	ldr	r3, [r0, #4]
 800f72a:	8819      	ldrh	r1, [r3, #0]
 800f72c:	b199      	cbz	r1, 800f756 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f72e:	1c9a      	adds	r2, r3, #2
 800f730:	2902      	cmp	r1, #2
 800f732:	6042      	str	r2, [r0, #4]
 800f734:	d1f5      	bne.n	800f722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800f736:	7c03      	ldrb	r3, [r0, #16]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d8e5      	bhi.n	800f708 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	3302      	adds	r3, #2
 800f740:	7402      	strb	r2, [r0, #16]
 800f742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f746:	6143      	str	r3, [r0, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d0dd      	beq.n	800f708 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d0da      	beq.n	800f708 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f752:	7604      	strb	r4, [r0, #24]
 800f754:	e7d8      	b.n	800f708 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f756:	2000      	movs	r0, #0
 800f758:	e7e4      	b.n	800f724 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800f75a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800f75a:	6001      	str	r1, [r0, #0]
 800f75c:	2100      	movs	r1, #0
 800f75e:	b430      	push	{r4, r5}
 800f760:	6041      	str	r1, [r0, #4]
 800f762:	6815      	ldr	r5, [r2, #0]
 800f764:	6085      	str	r5, [r0, #8]
 800f766:	6852      	ldr	r2, [r2, #4]
 800f768:	6443      	str	r3, [r0, #68]	; 0x44
 800f76a:	9b02      	ldr	r3, [sp, #8]
 800f76c:	60c2      	str	r2, [r0, #12]
 800f76e:	7401      	strb	r1, [r0, #16]
 800f770:	6141      	str	r1, [r0, #20]
 800f772:	7601      	strb	r1, [r0, #24]
 800f774:	8701      	strh	r1, [r0, #56]	; 0x38
 800f776:	8401      	strh	r1, [r0, #32]
 800f778:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800f77c:	6483      	str	r3, [r0, #72]	; 0x48
 800f77e:	bc30      	pop	{r4, r5}
 800f780:	f7f3 baa0 	b.w	8002cc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800f784 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f786:	4605      	mov	r5, r0
 800f788:	4608      	mov	r0, r1
 800f78a:	b1f1      	cbz	r1, 800f7ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800f78c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800f790:	460b      	mov	r3, r1
 800f792:	f101 0708 	add.w	r7, r1, #8
 800f796:	4622      	mov	r2, r4
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	3308      	adds	r3, #8
 800f79c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f7a0:	4626      	mov	r6, r4
 800f7a2:	42bb      	cmp	r3, r7
 800f7a4:	c603      	stmia	r6!, {r0, r1}
 800f7a6:	4634      	mov	r4, r6
 800f7a8:	d1f6      	bne.n	800f798 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f7aa:	6818      	ldr	r0, [r3, #0]
 800f7ac:	6030      	str	r0, [r6, #0]
 800f7ae:	4610      	mov	r0, r2
 800f7b0:	889b      	ldrh	r3, [r3, #4]
 800f7b2:	80b3      	strh	r3, [r6, #4]
 800f7b4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800f7b8:	015b      	lsls	r3, r3, #5
 800f7ba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f7be:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800f7c2:	430b      	orrs	r3, r1
 800f7c4:	425b      	negs	r3, r3
 800f7c6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800f7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	6811      	ldr	r1, [r2, #0]
 800f7d2:	4610      	mov	r0, r2
 800f7d4:	68cd      	ldr	r5, [r1, #12]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	47a8      	blx	r5
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	bf08      	it	eq
 800f7de:	4620      	moveq	r0, r4
 800f7e0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	4608      	mov	r0, r1
 800f7ec:	b93a      	cbnz	r2, 800f7fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800f7ee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f7f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800f7f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f802:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800f806:	8893      	ldrh	r3, [r2, #4]
 800f808:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800f80c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f810:	79ee      	ldrb	r6, [r5, #7]
 800f812:	4316      	orrs	r6, r2
 800f814:	19da      	adds	r2, r3, r7
 800f816:	b291      	uxth	r1, r2
 800f818:	b2b7      	uxth	r7, r6
 800f81a:	291d      	cmp	r1, #29
 800f81c:	d87b      	bhi.n	800f916 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800f81e:	2201      	movs	r2, #1
 800f820:	10f6      	asrs	r6, r6, #3
 800f822:	408a      	lsls	r2, r1
 800f824:	4974      	ldr	r1, [pc, #464]	; (800f9f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800f826:	420a      	tst	r2, r1
 800f828:	d12e      	bne.n	800f888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800f82a:	f412 7f60 	tst.w	r2, #896	; 0x380
 800f82e:	d072      	beq.n	800f916 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800f830:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800f834:	462b      	mov	r3, r5
 800f836:	f105 0e08 	add.w	lr, r5, #8
 800f83a:	4615      	mov	r5, r2
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	3308      	adds	r3, #8
 800f840:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f844:	4694      	mov	ip, r2
 800f846:	4573      	cmp	r3, lr
 800f848:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f84c:	4662      	mov	r2, ip
 800f84e:	d1f5      	bne.n	800f83c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800f850:	6818      	ldr	r0, [r3, #0]
 800f852:	f8cc 0000 	str.w	r0, [ip]
 800f856:	889b      	ldrh	r3, [r3, #4]
 800f858:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f85c:	b2b3      	uxth	r3, r6
 800f85e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f862:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800f866:	1aca      	subs	r2, r1, r3
 800f868:	1bcf      	subs	r7, r1, r7
 800f86a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800f86e:	b292      	uxth	r2, r2
 800f870:	1afb      	subs	r3, r7, r3
 800f872:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800f876:	10d2      	asrs	r2, r2, #3
 800f878:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800f87c:	4302      	orrs	r2, r0
 800f87e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800f882:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800f886:	e7b8      	b.n	800f7fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f888:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f88a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f88e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f890:	f640 6333 	movw	r3, #3635	; 0xe33
 800f894:	4299      	cmp	r1, r3
 800f896:	d110      	bne.n	800f8ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800f898:	6803      	ldr	r3, [r0, #0]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	4798      	blx	r3
 800f89e:	7b41      	ldrb	r1, [r0, #13]
 800f8a0:	00cb      	lsls	r3, r1, #3
 800f8a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f8a6:	7a03      	ldrb	r3, [r0, #8]
 800f8a8:	0648      	lsls	r0, r1, #25
 800f8aa:	ea43 0302 	orr.w	r3, r3, r2
 800f8ae:	bf44      	itt	mi
 800f8b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f8b4:	b21b      	sxthmi	r3, r3
 800f8b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f8ba:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800f8be:	462a      	mov	r2, r5
 800f8c0:	f105 0c08 	add.w	ip, r5, #8
 800f8c4:	443b      	add	r3, r7
 800f8c6:	4433      	add	r3, r6
 800f8c8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	4635      	mov	r5, r6
 800f8d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f8d4:	6810      	ldr	r0, [r2, #0]
 800f8d6:	3208      	adds	r2, #8
 800f8d8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800f8dc:	4637      	mov	r7, r6
 800f8de:	4562      	cmp	r2, ip
 800f8e0:	c703      	stmia	r7!, {r0, r1}
 800f8e2:	463e      	mov	r6, r7
 800f8e4:	d1f6      	bne.n	800f8d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800f8e6:	6810      	ldr	r0, [r2, #0]
 800f8e8:	6038      	str	r0, [r7, #0]
 800f8ea:	8892      	ldrh	r2, [r2, #4]
 800f8ec:	80ba      	strh	r2, [r7, #4]
 800f8ee:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800f8f2:	10db      	asrs	r3, r3, #3
 800f8f4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800f8f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f900:	4313      	orrs	r3, r2
 800f902:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800f906:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800f90a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800f90e:	1a9b      	subs	r3, r3, r2
 800f910:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800f914:	e771      	b.n	800f7fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f916:	f023 0204 	bic.w	r2, r3, #4
 800f91a:	f640 611b 	movw	r1, #3611	; 0xe1b
 800f91e:	428a      	cmp	r2, r1
 800f920:	d003      	beq.n	800f92a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800f922:	f640 621d 	movw	r2, #3613	; 0xe1d
 800f926:	4293      	cmp	r3, r2
 800f928:	d120      	bne.n	800f96c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800f92a:	3b01      	subs	r3, #1
 800f92c:	4602      	mov	r2, r0
 800f92e:	4629      	mov	r1, r5
 800f930:	4620      	mov	r0, r4
 800f932:	b29b      	uxth	r3, r3
 800f934:	f7ff ff4a 	bl	800f7cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f938:	7b41      	ldrb	r1, [r0, #13]
 800f93a:	00cb      	lsls	r3, r1, #3
 800f93c:	0649      	lsls	r1, r1, #25
 800f93e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f942:	7a03      	ldrb	r3, [r0, #8]
 800f944:	ea43 0302 	orr.w	r3, r3, r2
 800f948:	bf44      	itt	mi
 800f94a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f94e:	b21b      	sxthmi	r3, r3
 800f950:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f954:	7b6b      	ldrb	r3, [r5, #13]
 800f956:	7aaa      	ldrb	r2, [r5, #10]
 800f958:	005b      	lsls	r3, r3, #1
 800f95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f95e:	4313      	orrs	r3, r2
 800f960:	115a      	asrs	r2, r3, #5
 800f962:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f966:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800f96a:	e035      	b.n	800f9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800f96c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800f970:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f974:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800f978:	7a2a      	ldrb	r2, [r5, #8]
 800f97a:	ea42 0201 	orr.w	r2, r2, r1
 800f97e:	f640 6109 	movw	r1, #3593	; 0xe09
 800f982:	bf1c      	itt	ne
 800f984:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800f988:	b212      	sxthne	r2, r2
 800f98a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f98e:	f023 0210 	bic.w	r2, r3, #16
 800f992:	428a      	cmp	r2, r1
 800f994:	d003      	beq.n	800f99e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800f996:	f640 6213 	movw	r2, #3603	; 0xe13
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d129      	bne.n	800f9f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800f99e:	7b6e      	ldrb	r6, [r5, #13]
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	0076      	lsls	r6, r6, #1
 800f9a4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f9a8:	7aae      	ldrb	r6, [r5, #10]
 800f9aa:	4316      	orrs	r6, r2
 800f9ac:	f640 6213 	movw	r2, #3603	; 0xe13
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	bf16      	itet	ne
 800f9b8:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f9bc:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800f9c0:	b29b      	uxthne	r3, r3
 800f9c2:	f7ff ff03 	bl	800f7cc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f9c6:	7b43      	ldrb	r3, [r0, #13]
 800f9c8:	7a82      	ldrb	r2, [r0, #10]
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	1af6      	subs	r6, r6, r3
 800f9d4:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800f9d8:	7b69      	ldrb	r1, [r5, #13]
 800f9da:	00cb      	lsls	r3, r1, #3
 800f9dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f9e0:	7a2b      	ldrb	r3, [r5, #8]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	064a      	lsls	r2, r1, #25
 800f9e6:	bf44      	itt	mi
 800f9e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f9ec:	b21b      	sxthmi	r3, r3
 800f9ee:	1bdb      	subs	r3, r3, r7
 800f9f0:	e747      	b.n	800f882 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	e7b7      	b.n	800f966 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 800f9f6:	bf00      	nop
 800f9f8:	3fc00079 	.word	0x3fc00079

0800f9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800f9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa00:	4604      	mov	r4, r0
 800fa02:	b942      	cbnz	r2, 800fa16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800fa04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa08:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800fa0c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800fa10:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800fa14:	e047      	b.n	800faa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800fa16:	7b51      	ldrb	r1, [r2, #13]
 800fa18:	8893      	ldrh	r3, [r2, #4]
 800fa1a:	010d      	lsls	r5, r1, #4
 800fa1c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 800fa20:	79d5      	ldrb	r5, [r2, #7]
 800fa22:	4305      	orrs	r5, r0
 800fa24:	2d04      	cmp	r5, #4
 800fa26:	bfcc      	ite	gt
 800fa28:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800fa2c:	f04f 0e01 	movle.w	lr, #1
 800fa30:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800fa34:	f200 80ab 	bhi.w	800fb8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800fa38:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800fa3c:	4283      	cmp	r3, r0
 800fa3e:	d216      	bcs.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fa40:	f240 605b 	movw	r0, #1627	; 0x65b
 800fa44:	4283      	cmp	r3, r0
 800fa46:	d859      	bhi.n	800fafc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800fa48:	f240 6057 	movw	r0, #1623	; 0x657
 800fa4c:	4283      	cmp	r3, r0
 800fa4e:	d20e      	bcs.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fa50:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800fa54:	d24a      	bcs.n	800faec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800fa56:	f240 604e 	movw	r0, #1614	; 0x64e
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	d207      	bcs.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fa5e:	f240 601a 	movw	r0, #1562	; 0x61a
 800fa62:	4283      	cmp	r3, r0
 800fa64:	d02a      	beq.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fa66:	d821      	bhi.n	800faac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800fa68:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800fa6c:	d35b      	bcc.n	800fb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fa6e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800fa72:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fa76:	f040 80d0 	bne.w	800fc1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800fa7a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800fa7e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fa82:	f040 80ca 	bne.w	800fc1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800fa86:	00cb      	lsls	r3, r1, #3
 800fa88:	0649      	lsls	r1, r1, #25
 800fa8a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fa8e:	7a13      	ldrb	r3, [r2, #8]
 800fa90:	ea43 0300 	orr.w	r3, r3, r0
 800fa94:	bf44      	itt	mi
 800fa96:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fa9a:	b21b      	sxthmi	r3, r3
 800fa9c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800faa0:	1b5d      	subs	r5, r3, r5
 800faa2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800faa6:	4610      	mov	r0, r2
 800faa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faac:	f240 604b 	movw	r0, #1611	; 0x64b
 800fab0:	4283      	cmp	r3, r0
 800fab2:	d338      	bcc.n	800fb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fab4:	f240 604c 	movw	r0, #1612	; 0x64c
 800fab8:	4283      	cmp	r3, r0
 800faba:	d9d8      	bls.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fabc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800fac0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800fac4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fac8:	f040 80f3 	bne.w	800fcb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800facc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fad0:	f040 80ef 	bne.w	800fcb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800fad4:	00cb      	lsls	r3, r1, #3
 800fad6:	064e      	lsls	r6, r1, #25
 800fad8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fadc:	7a13      	ldrb	r3, [r2, #8]
 800fade:	ea43 0300 	orr.w	r3, r3, r0
 800fae2:	bf44      	itt	mi
 800fae4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fae8:	b21b      	sxthmi	r3, r3
 800faea:	e7d9      	b.n	800faa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800faec:	f240 6054 	movw	r0, #1620	; 0x654
 800faf0:	4283      	cmp	r3, r0
 800faf2:	d8e3      	bhi.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800faf4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800faf8:	d9e0      	bls.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fafa:	e7b8      	b.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fafc:	f240 6074 	movw	r0, #1652	; 0x674
 800fb00:	4283      	cmp	r3, r0
 800fb02:	d0b4      	beq.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fb04:	d82d      	bhi.n	800fb62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800fb06:	f240 605e 	movw	r0, #1630	; 0x65e
 800fb0a:	4283      	cmp	r3, r0
 800fb0c:	d804      	bhi.n	800fb18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800fb0e:	f240 605d 	movw	r0, #1629	; 0x65d
 800fb12:	4283      	cmp	r3, r0
 800fb14:	d3d2      	bcc.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fb16:	e7aa      	b.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fb18:	f240 605f 	movw	r0, #1631	; 0x65f
 800fb1c:	4283      	cmp	r3, r0
 800fb1e:	d0cd      	beq.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fb20:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800fb24:	d0a3      	beq.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fb26:	00cb      	lsls	r3, r1, #3
 800fb28:	0649      	lsls	r1, r1, #25
 800fb2a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fb2e:	7a13      	ldrb	r3, [r2, #8]
 800fb30:	ea43 0300 	orr.w	r3, r3, r0
 800fb34:	bf44      	itt	mi
 800fb36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fb3a:	b21b      	sxthmi	r3, r3
 800fb3c:	1b5d      	subs	r5, r3, r5
 800fb3e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fb42:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fb46:	7b53      	ldrb	r3, [r2, #13]
 800fb48:	015b      	lsls	r3, r3, #5
 800fb4a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800fb4e:	7993      	ldrb	r3, [r2, #6]
 800fb50:	430b      	orrs	r3, r1
 800fb52:	2105      	movs	r1, #5
 800fb54:	005b      	lsls	r3, r3, #1
 800fb56:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb5a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800fb5e:	440b      	add	r3, r1
 800fb60:	e756      	b.n	800fa10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800fb62:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800fb66:	4283      	cmp	r3, r0
 800fb68:	d809      	bhi.n	800fb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800fb6a:	f240 60df 	movw	r0, #1759	; 0x6df
 800fb6e:	4283      	cmp	r3, r0
 800fb70:	f4bf af7d 	bcs.w	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fb74:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800fb78:	2b05      	cmp	r3, #5
 800fb7a:	d8d4      	bhi.n	800fb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fb7c:	e777      	b.n	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fb7e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800fb82:	4283      	cmp	r3, r0
 800fb84:	d09a      	beq.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fb86:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800fb8a:	4283      	cmp	r3, r0
 800fb8c:	e7ca      	b.n	800fb24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fb8e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800fb92:	d22b      	bcs.n	800fbec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800fb94:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800fb98:	4283      	cmp	r3, r0
 800fb9a:	d28f      	bcs.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fb9c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fba0:	4283      	cmp	r3, r0
 800fba2:	d816      	bhi.n	800fbd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800fba4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800fba8:	4283      	cmp	r3, r0
 800fbaa:	f4bf af60 	bcs.w	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fbae:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800fbb2:	4283      	cmp	r3, r0
 800fbb4:	d80a      	bhi.n	800fbcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800fbb6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800fbba:	4283      	cmp	r3, r0
 800fbbc:	f4bf af57 	bcs.w	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fbc0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800fbc4:	4283      	cmp	r3, r0
 800fbc6:	f43f af79 	beq.w	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fbca:	e7ac      	b.n	800fb26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fbcc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800fbd0:	e7f8      	b.n	800fbc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800fbd2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800fbd6:	4283      	cmp	r3, r0
 800fbd8:	d802      	bhi.n	800fbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800fbda:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fbde:	e798      	b.n	800fb12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800fbe0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	f47f af42 	bne.w	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fbea:	e767      	b.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fbec:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800fbf0:	4283      	cmp	r3, r0
 800fbf2:	f43f af63 	beq.w	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fbf6:	d802      	bhi.n	800fbfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800fbf8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800fbfc:	e7f2      	b.n	800fbe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800fbfe:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800fc02:	4283      	cmp	r3, r0
 800fc04:	d805      	bhi.n	800fc12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800fc06:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800fc0a:	4283      	cmp	r3, r0
 800fc0c:	f4ff af2f 	bcc.w	800fa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fc10:	e754      	b.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fc12:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800fc16:	4283      	cmp	r3, r0
 800fc18:	e7af      	b.n	800fb7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800fc1a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800fc1e:	4617      	mov	r7, r2
 800fc20:	f102 0808 	add.w	r8, r2, #8
 800fc24:	4666      	mov	r6, ip
 800fc26:	6838      	ldr	r0, [r7, #0]
 800fc28:	3708      	adds	r7, #8
 800fc2a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fc2e:	46e6      	mov	lr, ip
 800fc30:	4547      	cmp	r7, r8
 800fc32:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800fc36:	46f4      	mov	ip, lr
 800fc38:	d1f5      	bne.n	800fc26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800fc3a:	6838      	ldr	r0, [r7, #0]
 800fc3c:	f8ce 0000 	str.w	r0, [lr]
 800fc40:	88b9      	ldrh	r1, [r7, #4]
 800fc42:	f8ae 1004 	strh.w	r1, [lr, #4]
 800fc46:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fc4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fc4e:	d009      	beq.n	800fc64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800fc50:	7b51      	ldrb	r1, [r2, #13]
 800fc52:	7992      	ldrb	r2, [r2, #6]
 800fc54:	0149      	lsls	r1, r1, #5
 800fc56:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fc5a:	4311      	orrs	r1, r2
 800fc5c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fc60:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fc64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fc68:	b2ad      	uxth	r5, r5
 800fc6a:	d00d      	beq.n	800fc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800fc6c:	442b      	add	r3, r5
 800fc6e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fc78:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fc7c:	10db      	asrs	r3, r3, #3
 800fc7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc82:	4313      	orrs	r3, r2
 800fc84:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fc88:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fc8c:	00cb      	lsls	r3, r1, #3
 800fc8e:	064f      	lsls	r7, r1, #25
 800fc90:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fc94:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fc98:	ea43 0302 	orr.w	r3, r3, r2
 800fc9c:	bf44      	itt	mi
 800fc9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fca2:	b21b      	sxthmi	r3, r3
 800fca4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fca8:	1b5b      	subs	r3, r3, r5
 800fcaa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800fcae:	4632      	mov	r2, r6
 800fcb0:	e6f9      	b.n	800faa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800fcb2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800fcb6:	4617      	mov	r7, r2
 800fcb8:	f102 0908 	add.w	r9, r2, #8
 800fcbc:	4666      	mov	r6, ip
 800fcbe:	6838      	ldr	r0, [r7, #0]
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fcc6:	46e0      	mov	r8, ip
 800fcc8:	454f      	cmp	r7, r9
 800fcca:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800fcce:	46c4      	mov	ip, r8
 800fcd0:	d1f5      	bne.n	800fcbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800fcd2:	6838      	ldr	r0, [r7, #0]
 800fcd4:	f8c8 0000 	str.w	r0, [r8]
 800fcd8:	88b9      	ldrh	r1, [r7, #4]
 800fcda:	f8a8 1004 	strh.w	r1, [r8, #4]
 800fcde:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fce2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fce6:	d009      	beq.n	800fcfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800fce8:	7b51      	ldrb	r1, [r2, #13]
 800fcea:	7992      	ldrb	r2, [r2, #6]
 800fcec:	0149      	lsls	r1, r1, #5
 800fcee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fcf2:	4311      	orrs	r1, r2
 800fcf4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fcf8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fcfc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fd00:	d00e      	beq.n	800fd20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800fd02:	eba3 030e 	sub.w	r3, r3, lr
 800fd06:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fd10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fd14:	10db      	asrs	r3, r3, #3
 800fd16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fd20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fd24:	00cb      	lsls	r3, r1, #3
 800fd26:	0648      	lsls	r0, r1, #25
 800fd28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fd2c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fd30:	ea43 0302 	orr.w	r3, r3, r2
 800fd34:	bf44      	itt	mi
 800fd36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fd3a:	b21b      	sxthmi	r3, r3
 800fd3c:	1b5d      	subs	r5, r3, r5
 800fd3e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fd42:	e7b4      	b.n	800fcae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800fd44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800fd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd48:	461e      	mov	r6, r3
 800fd4a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	4617      	mov	r7, r2
 800fd50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fd54:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fd58:	f7f2 ff62 	bl	8002c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	b918      	cbnz	r0, 800fd68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800fd60:	6030      	str	r0, [r6, #0]
 800fd62:	4628      	mov	r0, r5
 800fd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	4798      	blx	r3
 800fd72:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800fd76:	4602      	mov	r2, r0
 800fd78:	6030      	str	r0, [r6, #0]
 800fd7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd7e:	d213      	bcs.n	800fda8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800fd80:	4643      	mov	r3, r8
 800fd82:	4639      	mov	r1, r7
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7ff fe39 	bl	800f9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fd8a:	6030      	str	r0, [r6, #0]
 800fd8c:	6833      	ldr	r3, [r6, #0]
 800fd8e:	b143      	cbz	r3, 800fda2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800fd90:	7b5a      	ldrb	r2, [r3, #13]
 800fd92:	7a9b      	ldrb	r3, [r3, #10]
 800fd94:	0052      	lsls	r2, r2, #1
 800fd96:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	bf0c      	ite	eq
 800fd9e:	2301      	moveq	r3, #1
 800fda0:	2300      	movne	r3, #0
 800fda2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800fda6:	e7dc      	b.n	800fd62 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800fda8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	2b7f      	cmp	r3, #127	; 0x7f
 800fdb0:	d804      	bhi.n	800fdbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800fdb2:	4639      	mov	r1, r7
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f7ff fd15 	bl	800f7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800fdba:	e7e6      	b.n	800fd8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800fdbc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d0e3      	beq.n	800fd8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800fdc4:	f640 1302 	movw	r3, #2306	; 0x902
 800fdc8:	429d      	cmp	r5, r3
 800fdca:	d1df      	bne.n	800fd8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800fdcc:	4601      	mov	r1, r0
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7ff fcd8 	bl	800f784 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fdd4:	e7d9      	b.n	800fd8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800fdd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800fdd6:	b510      	push	{r4, lr}
 800fdd8:	4604      	mov	r4, r0
 800fdda:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fdde:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fde0:	b1e1      	cbz	r1, 800fe1c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800fde2:	2b0a      	cmp	r3, #10
 800fde4:	d02d      	beq.n	800fe42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800fde6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fde8:	3901      	subs	r1, #1
 800fdea:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800fdee:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800fdf0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800fdf4:	1c51      	adds	r1, r2, #1
 800fdf6:	b289      	uxth	r1, r1
 800fdf8:	2901      	cmp	r1, #1
 800fdfa:	bf8a      	itet	hi
 800fdfc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800fe00:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800fe02:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	8722      	strh	r2, [r4, #56]	; 0x38
 800fe08:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fe0a:	4413      	add	r3, r2
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	2b09      	cmp	r3, #9
 800fe10:	bf88      	it	hi
 800fe12:	3b0a      	subhi	r3, #10
 800fe14:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fe18:	8458      	strh	r0, [r3, #34]	; 0x22
 800fe1a:	e7de      	b.n	800fdda <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800fe1c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fe1e:	2b0a      	cmp	r3, #10
 800fe20:	d00f      	beq.n	800fe42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800fe22:	4620      	mov	r0, r4
 800fe24:	f7ff fc6d 	bl	800f702 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800fe28:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	8722      	strh	r2, [r4, #56]	; 0x38
 800fe2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fe30:	4413      	add	r3, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	2b09      	cmp	r3, #9
 800fe36:	bf88      	it	hi
 800fe38:	3b0a      	subhi	r3, #10
 800fe3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fe3e:	8458      	strh	r0, [r3, #34]	; 0x22
 800fe40:	e7ec      	b.n	800fe1c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800fe42:	bd10      	pop	{r4, pc}

0800fe44 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fe48:	4604      	mov	r4, r0
 800fe4a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800fe4e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 800fe50:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800fe52:	3a01      	subs	r2, #1
 800fe54:	8702      	strh	r2, [r0, #56]	; 0x38
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	b292      	uxth	r2, r2
 800fe5a:	2a09      	cmp	r2, #9
 800fe5c:	bf8a      	itet	hi
 800fe5e:	3b09      	subhi	r3, #9
 800fe60:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800fe62:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800fe64:	f7ff ffb7 	bl	800fdd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800fe68:	8c23      	ldrh	r3, [r4, #32]
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	bf9c      	itt	ls
 800fe6e:	3301      	addls	r3, #1
 800fe70:	8423      	strhls	r3, [r4, #32]
 800fe72:	8be3      	ldrh	r3, [r4, #30]
 800fe74:	b90b      	cbnz	r3, 800fe7a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800fe76:	2302      	movs	r3, #2
 800fe78:	83e3      	strh	r3, [r4, #30]
 800fe7a:	8be3      	ldrh	r3, [r4, #30]
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	83e3      	strh	r3, [r4, #30]
 800fe84:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fe88:	8365      	strh	r5, [r4, #26]
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}

0800fe8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800fe8c:	428a      	cmp	r2, r1
 800fe8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe92:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 800fe94:	d932      	bls.n	800fefc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800fe96:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 800fe98:	1a54      	subs	r4, r2, r1
 800fe9a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 800fe9e:	19ee      	adds	r6, r5, r7
 800fea0:	fa1f fe84 	uxth.w	lr, r4
 800fea4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800fea8:	3e01      	subs	r6, #1
 800feaa:	b2b4      	uxth	r4, r6
 800feac:	eba4 090e 	sub.w	r9, r4, lr
 800feb0:	fa1f f989 	uxth.w	r9, r9
 800feb4:	2c09      	cmp	r4, #9
 800feb6:	4626      	mov	r6, r4
 800feb8:	bf88      	it	hi
 800feba:	f1a4 060a 	subhi.w	r6, r4, #10
 800febe:	f1bc 0f00 	cmp.w	ip, #0
 800fec2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fec6:	bf08      	it	eq
 800fec8:	f04f 0c02 	moveq.w	ip, #2
 800fecc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800fed0:	b2a4      	uxth	r4, r4
 800fed2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fed6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 800feda:	454c      	cmp	r4, r9
 800fedc:	fa1f fc8c 	uxth.w	ip, ip
 800fee0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800fee4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 800fee8:	d1e4      	bne.n	800feb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800feea:	eba5 050e 	sub.w	r5, r5, lr
 800feee:	eb0e 0408 	add.w	r4, lr, r8
 800fef2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 800fef6:	8705      	strh	r5, [r0, #56]	; 0x38
 800fef8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800fefc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800fefe:	250a      	movs	r5, #10
 800ff00:	1a64      	subs	r4, r4, r1
 800ff02:	4439      	add	r1, r7
 800ff04:	b289      	uxth	r1, r1
 800ff06:	8704      	strh	r4, [r0, #56]	; 0x38
 800ff08:	2909      	cmp	r1, #9
 800ff0a:	bf88      	it	hi
 800ff0c:	390a      	subhi	r1, #10
 800ff0e:	86c1      	strh	r1, [r0, #54]	; 0x36
 800ff10:	b18a      	cbz	r2, 800ff36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800ff12:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800ff14:	3a01      	subs	r2, #1
 800ff16:	3101      	adds	r1, #1
 800ff18:	b292      	uxth	r2, r2
 800ff1a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ff1e:	8701      	strh	r1, [r0, #56]	; 0x38
 800ff20:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800ff22:	b901      	cbnz	r1, 800ff26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800ff24:	86c5      	strh	r5, [r0, #54]	; 0x36
 800ff26:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800ff28:	3901      	subs	r1, #1
 800ff2a:	b289      	uxth	r1, r1
 800ff2c:	86c1      	strh	r1, [r0, #54]	; 0x36
 800ff2e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ff32:	844c      	strh	r4, [r1, #34]	; 0x22
 800ff34:	e7ec      	b.n	800ff10 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800ff36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff3a:	f7ff bf4c 	b.w	800fdd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ff3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ff3e:	b570      	push	{r4, r5, r6, lr}
 800ff40:	2500      	movs	r5, #0
 800ff42:	4295      	cmp	r5, r2
 800ff44:	d011      	beq.n	800ff6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ff46:	8bc4      	ldrh	r4, [r0, #30]
 800ff48:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ff4c:	4414      	add	r4, r2
 800ff4e:	3c01      	subs	r4, #1
 800ff50:	1b64      	subs	r4, r4, r5
 800ff52:	b2a4      	uxth	r4, r4
 800ff54:	2c01      	cmp	r4, #1
 800ff56:	bf88      	it	hi
 800ff58:	3c02      	subhi	r4, #2
 800ff5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ff5e:	8b64      	ldrh	r4, [r4, #26]
 800ff60:	42b4      	cmp	r4, r6
 800ff62:	d117      	bne.n	800ff94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ff64:	3501      	adds	r5, #1
 800ff66:	b2ad      	uxth	r5, r5
 800ff68:	e7eb      	b.n	800ff42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ff6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ff6e:	2400      	movs	r4, #0
 800ff70:	4413      	add	r3, r2
 800ff72:	b2a2      	uxth	r2, r4
 800ff74:	429a      	cmp	r2, r3
 800ff76:	da0f      	bge.n	800ff98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ff78:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800ff7a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ff7e:	3401      	adds	r4, #1
 800ff80:	4432      	add	r2, r6
 800ff82:	b292      	uxth	r2, r2
 800ff84:	2a09      	cmp	r2, #9
 800ff86:	bf88      	it	hi
 800ff88:	3a0a      	subhi	r2, #10
 800ff8a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ff8e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800ff90:	42aa      	cmp	r2, r5
 800ff92:	d0ee      	beq.n	800ff72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800ff94:	2000      	movs	r0, #0
 800ff96:	bd70      	pop	{r4, r5, r6, pc}
 800ff98:	2001      	movs	r0, #1
 800ff9a:	e7fc      	b.n	800ff96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800ff9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ff9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	4616      	mov	r6, r2
 800ffa4:	1c8c      	adds	r4, r1, #2
 800ffa6:	8809      	ldrh	r1, [r1, #0]
 800ffa8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ffac:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ffb0:	42b3      	cmp	r3, r6
 800ffb2:	d124      	bne.n	800fffe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800ffb4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800ffb8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800ffbc:	f001 070f 	and.w	r7, r1, #15
 800ffc0:	4652      	mov	r2, sl
 800ffc2:	f8cd 8000 	str.w	r8, [sp]
 800ffc6:	464b      	mov	r3, r9
 800ffc8:	4621      	mov	r1, r4
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f7ff ffb7 	bl	800ff3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800ffd0:	4683      	mov	fp, r0
 800ffd2:	b168      	cbz	r0, 800fff0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800ffd4:	eb0a 0109 	add.w	r1, sl, r9
 800ffd8:	463a      	mov	r2, r7
 800ffda:	4628      	mov	r0, r5
 800ffdc:	4441      	add	r1, r8
 800ffde:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	f7ff ff52 	bl	800fe8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800ffe8:	4658      	mov	r0, fp
 800ffea:	b003      	add	sp, #12
 800ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff0:	eb07 010a 	add.w	r1, r7, sl
 800fff4:	4449      	add	r1, r9
 800fff6:	4441      	add	r1, r8
 800fff8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800fffc:	e7d2      	b.n	800ffa4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800fffe:	f04f 0b00 	mov.w	fp, #0
 8010002:	e7f1      	b.n	800ffe8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08010004 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010004:	b570      	push	{r4, r5, r6, lr}
 8010006:	8810      	ldrh	r0, [r2, #0]
 8010008:	4298      	cmp	r0, r3
 801000a:	d817      	bhi.n	801003c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801000c:	1e48      	subs	r0, r1, #1
 801000e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8010012:	4298      	cmp	r0, r3
 8010014:	d312      	bcc.n	801003c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010016:	2400      	movs	r4, #0
 8010018:	428c      	cmp	r4, r1
 801001a:	d20f      	bcs.n	801003c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801001c:	1860      	adds	r0, r4, r1
 801001e:	1040      	asrs	r0, r0, #1
 8010020:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8010024:	0085      	lsls	r5, r0, #2
 8010026:	42b3      	cmp	r3, r6
 8010028:	d902      	bls.n	8010030 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801002a:	3001      	adds	r0, #1
 801002c:	b284      	uxth	r4, r0
 801002e:	e7f3      	b.n	8010018 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010030:	d201      	bcs.n	8010036 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8010032:	b281      	uxth	r1, r0
 8010034:	e7f0      	b.n	8010018 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010036:	442a      	add	r2, r5
 8010038:	8850      	ldrh	r0, [r2, #2]
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	2000      	movs	r0, #0
 801003e:	e7fc      	b.n	801003a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010040 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010044:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8010046:	4604      	mov	r4, r0
 8010048:	260b      	movs	r6, #11
 801004a:	886f      	ldrh	r7, [r5, #2]
 801004c:	087f      	lsrs	r7, r7, #1
 801004e:	3e01      	subs	r6, #1
 8010050:	d013      	beq.n	801007a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8010052:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010054:	462a      	mov	r2, r5
 8010056:	4639      	mov	r1, r7
 8010058:	4620      	mov	r0, r4
 801005a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801005e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010062:	4643      	mov	r3, r8
 8010064:	f7ff ffce 	bl	8010004 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8010068:	b138      	cbz	r0, 801007a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801006a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801006e:	4642      	mov	r2, r8
 8010070:	4620      	mov	r0, r4
 8010072:	f7ff ff93 	bl	800ff9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8010076:	2800      	cmp	r0, #0
 8010078:	d1e9      	bne.n	801004e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801007a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010080 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8010080:	b570      	push	{r4, r5, r6, lr}
 8010082:	694a      	ldr	r2, [r1, #20]
 8010084:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8010086:	684b      	ldr	r3, [r1, #4]
 8010088:	1b54      	subs	r4, r2, r5
 801008a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801008c:	f000 8106 	beq.w	801029c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8010090:	1b9b      	subs	r3, r3, r6
 8010092:	d003      	beq.n	801009c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010094:	4363      	muls	r3, r4
 8010096:	2210      	movs	r2, #16
 8010098:	fb93 f3f2 	sdiv	r3, r3, r2
 801009c:	680c      	ldr	r4, [r1, #0]
 801009e:	698a      	ldr	r2, [r1, #24]
 80100a0:	1b65      	subs	r5, r4, r5
 80100a2:	f000 80fd 	beq.w	80102a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80100a6:	1b92      	subs	r2, r2, r6
 80100a8:	d003      	beq.n	80100b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80100aa:	436a      	muls	r2, r5
 80100ac:	2410      	movs	r4, #16
 80100ae:	fb92 f2f4 	sdiv	r2, r2, r4
 80100b2:	1a9b      	subs	r3, r3, r2
 80100b4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80102dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80100b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100bc:	460a      	mov	r2, r1
 80100be:	ee07 3a90 	vmov	s15, r3
 80100c2:	f100 040c 	add.w	r4, r0, #12
 80100c6:	4603      	mov	r3, r0
 80100c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80100d0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80100d4:	eeb1 6a43 	vneg.f32	s12, s6
 80100d8:	edd2 7a02 	vldr	s15, [r2, #8]
 80100dc:	3214      	adds	r2, #20
 80100de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80100e2:	ece3 6a01 	vstmia	r3!, {s13}
 80100e6:	429c      	cmp	r4, r3
 80100e8:	ed52 7a02 	vldr	s15, [r2, #-8]
 80100ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80100f4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80100f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100fc:	edc3 7a05 	vstr	s15, [r3, #20]
 8010100:	d1ea      	bne.n	80100d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8010102:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010104:	698b      	ldr	r3, [r1, #24]
 8010106:	edd0 4a02 	vldr	s9, [r0, #8]
 801010a:	1a9b      	subs	r3, r3, r2
 801010c:	edd0 3a00 	vldr	s7, [r0]
 8010110:	edd0 6a01 	vldr	s13, [r0, #4]
 8010114:	ee07 3a90 	vmov	s15, r3
 8010118:	684b      	ldr	r3, [r1, #4]
 801011a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801011e:	ed90 5a05 	vldr	s10, [r0, #20]
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010128:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801012c:	ed90 2a03 	vldr	s4, [r0, #12]
 8010130:	ee07 3a10 	vmov	s14, r3
 8010134:	edd0 5a04 	vldr	s11, [r0, #16]
 8010138:	ee67 7a84 	vmul.f32	s15, s15, s8
 801013c:	ed90 1a07 	vldr	s2, [r0, #28]
 8010140:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010144:	edd0 2a06 	vldr	s5, [r0, #24]
 8010148:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801014c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8010150:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010154:	ee32 5a45 	vsub.f32	s10, s4, s10
 8010158:	eee6 7a87 	vfma.f32	s15, s13, s14
 801015c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010160:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8010164:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010166:	694a      	ldr	r2, [r1, #20]
 8010168:	1b13      	subs	r3, r2, r4
 801016a:	ee07 3a10 	vmov	s14, r3
 801016e:	680b      	ldr	r3, [r1, #0]
 8010170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010174:	1b1b      	subs	r3, r3, r4
 8010176:	ee27 7a04 	vmul.f32	s14, s14, s8
 801017a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801017e:	ee07 3a10 	vmov	s14, r3
 8010182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010186:	ee27 7a04 	vmul.f32	s14, s14, s8
 801018a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801018e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8010192:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8010196:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010198:	698b      	ldr	r3, [r1, #24]
 801019a:	1a9b      	subs	r3, r3, r2
 801019c:	ee06 3a90 	vmov	s13, r3
 80101a0:	684b      	ldr	r3, [r1, #4]
 80101a2:	1a9b      	subs	r3, r3, r2
 80101a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80101a8:	ee07 3a10 	vmov	s14, r3
 80101ac:	ee66 6a84 	vmul.f32	s13, s13, s8
 80101b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101b4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80101b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101bc:	eee5 6a87 	vfma.f32	s13, s11, s14
 80101c0:	ee66 6a83 	vmul.f32	s13, s13, s6
 80101c4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80101c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80101ca:	694a      	ldr	r2, [r1, #20]
 80101cc:	1b13      	subs	r3, r2, r4
 80101ce:	ee07 3a10 	vmov	s14, r3
 80101d2:	680b      	ldr	r3, [r1, #0]
 80101d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101d8:	1b1b      	subs	r3, r3, r4
 80101da:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101de:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80101e2:	ee07 3a10 	vmov	s14, r3
 80101e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101ee:	eea5 5a87 	vfma.f32	s10, s11, s14
 80101f2:	edd0 5a08 	vldr	s11, [r0, #32]
 80101f6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80101fa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80101fe:	ee25 5a06 	vmul.f32	s10, s10, s12
 8010202:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8010206:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010208:	698b      	ldr	r3, [r1, #24]
 801020a:	1a9b      	subs	r3, r3, r2
 801020c:	ee07 3a10 	vmov	s14, r3
 8010210:	684b      	ldr	r3, [r1, #4]
 8010212:	1a9b      	subs	r3, r3, r2
 8010214:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010218:	ee01 3a90 	vmov	s3, r3
 801021c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010220:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010224:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8010228:	ee61 1a84 	vmul.f32	s3, s3, s8
 801022c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010230:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010234:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010238:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801023a:	694a      	ldr	r2, [r1, #20]
 801023c:	1b13      	subs	r3, r2, r4
 801023e:	ee03 3a10 	vmov	s6, r3
 8010242:	680b      	ldr	r3, [r1, #0]
 8010244:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010248:	1b1b      	subs	r3, r3, r4
 801024a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801024e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8010252:	ee03 3a10 	vmov	s6, r3
 8010256:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801025a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801025e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8010262:	ee25 6a86 	vmul.f32	s12, s11, s12
 8010266:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801026a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801026e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8010272:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8010276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027a:	dd13      	ble.n	80102a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801027c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010280:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8010284:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010286:	eee3 7a87 	vfma.f32	s15, s7, s14
 801028a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010292:	dd15      	ble.n	80102c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8010294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010298:	6403      	str	r3, [r0, #64]	; 0x40
 801029a:	bd70      	pop	{r4, r5, r6, pc}
 801029c:	4623      	mov	r3, r4
 801029e:	e6fd      	b.n	801009c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80102a0:	462a      	mov	r2, r5
 80102a2:	e706      	b.n	80100b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80102a4:	d502      	bpl.n	80102ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80102a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80102aa:	e7e9      	b.n	8010280 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80102ac:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80102b0:	eea3 2a85 	vfma.f32	s4, s7, s10
 80102b4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80102b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102bc:	dade      	bge.n	801027c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80102be:	e7f2      	b.n	80102a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80102c0:	d502      	bpl.n	80102c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80102c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80102c6:	e7e7      	b.n	8010298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80102c8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80102cc:	eee3 4a86 	vfma.f32	s9, s7, s12
 80102d0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80102d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d8:	dadc      	bge.n	8010294 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80102da:	e7f2      	b.n	80102c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80102dc:	3d800000 	.word	0x3d800000

080102e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80102e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102e4:	2714      	movs	r7, #20
 80102e6:	435f      	muls	r7, r3
 80102e8:	eb02 0c07 	add.w	ip, r2, r7
 80102ec:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80102f0:	f115 0e0f 	adds.w	lr, r5, #15
 80102f4:	f100 80a2 	bmi.w	801043c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80102f8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80102fc:	9c08      	ldr	r4, [sp, #32]
 80102fe:	2614      	movs	r6, #20
 8010300:	f8c0 e014 	str.w	lr, [r0, #20]
 8010304:	4366      	muls	r6, r4
 8010306:	eb02 0806 	add.w	r8, r2, r6
 801030a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801030e:	f115 040f 	adds.w	r4, r5, #15
 8010312:	f100 809f 	bmi.w	8010454 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8010316:	1124      	asrs	r4, r4, #4
 8010318:	eba4 040e 	sub.w	r4, r4, lr
 801031c:	6184      	str	r4, [r0, #24]
 801031e:	2c00      	cmp	r4, #0
 8010320:	f000 808a 	beq.w	8010438 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8010324:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8010328:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801032c:	5995      	ldr	r5, [r2, r6]
 801032e:	eba4 0809 	sub.w	r8, r4, r9
 8010332:	59d4      	ldr	r4, [r2, r7]
 8010334:	eba5 0a04 	sub.w	sl, r5, r4
 8010338:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801033c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8010340:	fb0e fe05 	mul.w	lr, lr, r5
 8010344:	fb0a ee19 	mls	lr, sl, r9, lr
 8010348:	fb08 e404 	mla	r4, r8, r4, lr
 801034c:	3c01      	subs	r4, #1
 801034e:	19a4      	adds	r4, r4, r6
 8010350:	f100 808c 	bmi.w	801046c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8010354:	fb94 fef6 	sdiv	lr, r4, r6
 8010358:	fb06 441e 	mls	r4, r6, lr, r4
 801035c:	f8c0 e000 	str.w	lr, [r0]
 8010360:	6104      	str	r4, [r0, #16]
 8010362:	2d00      	cmp	r5, #0
 8010364:	f2c0 8095 	blt.w	8010492 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8010368:	fb95 f4f6 	sdiv	r4, r5, r6
 801036c:	fb06 5514 	mls	r5, r6, r4, r5
 8010370:	6044      	str	r4, [r0, #4]
 8010372:	6085      	str	r5, [r0, #8]
 8010374:	60c6      	str	r6, [r0, #12]
 8010376:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801037a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801037e:	6945      	ldr	r5, [r0, #20]
 8010380:	59d2      	ldr	r2, [r2, r7]
 8010382:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8010386:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80104b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801038a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801038e:	ee07 4a10 	vmov	s14, r4
 8010392:	6804      	ldr	r4, [r0, #0]
 8010394:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8010398:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801039c:	ee07 2a90 	vmov	s15, r2
 80103a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80103ac:	edd3 6a00 	vldr	s13, [r3]
 80103b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80103b4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80103b8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80103bc:	edc0 6a07 	vstr	s13, [r0, #28]
 80103c0:	edd0 6a01 	vldr	s13, [r0, #4]
 80103c4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80103c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80103cc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80103d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80103d4:	ed80 6a08 	vstr	s12, [r0, #32]
 80103d8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80103da:	6242      	str	r2, [r0, #36]	; 0x24
 80103dc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80103e0:	ed93 6a03 	vldr	s12, [r3, #12]
 80103e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80103e8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80103ec:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80103f0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80103f4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80103f8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80103fc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010400:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8010404:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010406:	6302      	str	r2, [r0, #48]	; 0x30
 8010408:	ed93 6a06 	vldr	s12, [r3, #24]
 801040c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8010410:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010414:	eeb0 7a46 	vmov.f32	s14, s12
 8010418:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801041c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010420:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010424:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8010428:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801042c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010430:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8010434:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010436:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801043c:	2410      	movs	r4, #16
 801043e:	f1c5 0501 	rsb	r5, r5, #1
 8010442:	fb9e fef4 	sdiv	lr, lr, r4
 8010446:	f015 050f 	ands.w	r5, r5, #15
 801044a:	bf18      	it	ne
 801044c:	2501      	movne	r5, #1
 801044e:	ebae 0e05 	sub.w	lr, lr, r5
 8010452:	e753      	b.n	80102fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8010454:	f04f 0910 	mov.w	r9, #16
 8010458:	f1c5 0501 	rsb	r5, r5, #1
 801045c:	fb94 f4f9 	sdiv	r4, r4, r9
 8010460:	f015 050f 	ands.w	r5, r5, #15
 8010464:	bf18      	it	ne
 8010466:	2501      	movne	r5, #1
 8010468:	1b64      	subs	r4, r4, r5
 801046a:	e755      	b.n	8010318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801046c:	4264      	negs	r4, r4
 801046e:	fb94 fef6 	sdiv	lr, r4, r6
 8010472:	f1ce 0800 	rsb	r8, lr, #0
 8010476:	fb06 441e 	mls	r4, r6, lr, r4
 801047a:	f8c0 8000 	str.w	r8, [r0]
 801047e:	6104      	str	r4, [r0, #16]
 8010480:	2c00      	cmp	r4, #0
 8010482:	f43f af6e 	beq.w	8010362 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8010486:	ea6f 0e0e 	mvn.w	lr, lr
 801048a:	1b34      	subs	r4, r6, r4
 801048c:	f8c0 e000 	str.w	lr, [r0]
 8010490:	e766      	b.n	8010360 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8010492:	426d      	negs	r5, r5
 8010494:	fb95 f4f6 	sdiv	r4, r5, r6
 8010498:	f1c4 0e00 	rsb	lr, r4, #0
 801049c:	fb06 5514 	mls	r5, r6, r4, r5
 80104a0:	f8c0 e004 	str.w	lr, [r0, #4]
 80104a4:	6085      	str	r5, [r0, #8]
 80104a6:	2d00      	cmp	r5, #0
 80104a8:	f43f af64 	beq.w	8010374 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80104ac:	43e4      	mvns	r4, r4
 80104ae:	1b75      	subs	r5, r6, r5
 80104b0:	6044      	str	r4, [r0, #4]
 80104b2:	e75e      	b.n	8010372 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80104b4:	3d800000 	.word	0x3d800000

080104b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80104b8:	4b01      	ldr	r3, [pc, #4]	; (80104c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80104ba:	6018      	str	r0, [r3, #0]
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	2400b284 	.word	0x2400b284

080104c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80104c6:	881a      	ldrh	r2, [r3, #0]
 80104c8:	4282      	cmp	r2, r0
 80104ca:	d807      	bhi.n	80104dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80104cc:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	4413      	add	r3, r2
 80104d2:	4298      	cmp	r0, r3
 80104d4:	bfac      	ite	ge
 80104d6:	2000      	movge	r0, #0
 80104d8:	2001      	movlt	r0, #1
 80104da:	4770      	bx	lr
 80104dc:	2000      	movs	r0, #0
 80104de:	4770      	bx	lr
 80104e0:	2400b2a4 	.word	0x2400b2a4
 80104e4:	2400b2a8 	.word	0x2400b2a8

080104e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80104e8:	b508      	push	{r3, lr}
 80104ea:	4601      	mov	r1, r0
 80104ec:	f7ff ffea 	bl	80104c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80104f0:	b118      	cbz	r0, 80104fa <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80104f2:	4b02      	ldr	r3, [pc, #8]	; (80104fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80104fa:	bd08      	pop	{r3, pc}
 80104fc:	2400b288 	.word	0x2400b288

08010500 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8010500:	b538      	push	{r3, r4, r5, lr}
 8010502:	4604      	mov	r4, r0
 8010504:	f7ff ffde 	bl	80104c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010508:	b188      	cbz	r0, 801052e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801050a:	4b09      	ldr	r3, [pc, #36]	; (8010530 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801050c:	881a      	ldrh	r2, [r3, #0]
 801050e:	4b09      	ldr	r3, [pc, #36]	; (8010534 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8010510:	1aa4      	subs	r4, r4, r2
 8010512:	220e      	movs	r2, #14
 8010514:	681d      	ldr	r5, [r3, #0]
 8010516:	4362      	muls	r2, r4
 8010518:	18ac      	adds	r4, r5, r2
 801051a:	7b23      	ldrb	r3, [r4, #12]
 801051c:	f013 0320 	ands.w	r3, r3, #32
 8010520:	bf17      	itett	ne
 8010522:	680b      	ldrne	r3, [r1, #0]
 8010524:	4618      	moveq	r0, r3
 8010526:	50ab      	strne	r3, [r5, r2]
 8010528:	684b      	ldrne	r3, [r1, #4]
 801052a:	bf18      	it	ne
 801052c:	6063      	strne	r3, [r4, #4]
 801052e:	bd38      	pop	{r3, r4, r5, pc}
 8010530:	2400b2a4 	.word	0x2400b2a4
 8010534:	2400b28c 	.word	0x2400b28c

08010538 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8010538:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	4606      	mov	r6, r0
 801053e:	460c      	mov	r4, r1
 8010540:	f7ff ffc0 	bl	80104c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010544:	b918      	cbnz	r0, 801054e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8010546:	2000      	movs	r0, #0
 8010548:	b002      	add	sp, #8
 801054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054e:	4608      	mov	r0, r1
 8010550:	f7fb fb93 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010554:	2800      	cmp	r0, #0
 8010556:	d1f6      	bne.n	8010546 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8010558:	4b3f      	ldr	r3, [pc, #252]	; (8010658 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801055a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801065c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801055e:	881d      	ldrh	r5, [r3, #0]
 8010560:	f8d9 a000 	ldr.w	sl, [r9]
 8010564:	46c8      	mov	r8, r9
 8010566:	1b73      	subs	r3, r6, r5
 8010568:	250e      	movs	r5, #14
 801056a:	435d      	muls	r5, r3
 801056c:	eb0a 0705 	add.w	r7, sl, r5
 8010570:	7b3b      	ldrb	r3, [r7, #12]
 8010572:	f013 0f20 	tst.w	r3, #32
 8010576:	d0e6      	beq.n	8010546 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8010578:	4621      	mov	r1, r4
 801057a:	4638      	mov	r0, r7
 801057c:	f7fd fc42 	bl	800de04 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010580:	2800      	cmp	r0, #0
 8010582:	d1e1      	bne.n	8010548 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8010584:	4639      	mov	r1, r7
 8010586:	4620      	mov	r0, r4
 8010588:	f7fd fc3c 	bl	800de04 <_ZNK8touchgfx4Rect8includesERKS0_>
 801058c:	b108      	cbz	r0, 8010592 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801058e:	4621      	mov	r1, r4
 8010590:	e020      	b.n	80105d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8010592:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010596:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801059a:	429a      	cmp	r2, r3
 801059c:	d11e      	bne.n	80105dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801059e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80105a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d118      	bne.n	80105dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80105aa:	6820      	ldr	r0, [r4, #0]
 80105ac:	466b      	mov	r3, sp
 80105ae:	6861      	ldr	r1, [r4, #4]
 80105b0:	c303      	stmia	r3!, {r0, r1}
 80105b2:	4639      	mov	r1, r7
 80105b4:	4668      	mov	r0, sp
 80105b6:	f7fd fc4b 	bl	800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80105ba:	f8d9 3000 	ldr.w	r3, [r9]
 80105be:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80105c2:	442b      	add	r3, r5
 80105c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80105c8:	4413      	add	r3, r2
 80105ca:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80105ce:	4293      	cmp	r3, r2
 80105d0:	dc04      	bgt.n	80105dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80105d2:	4669      	mov	r1, sp
 80105d4:	4630      	mov	r0, r6
 80105d6:	f7ff ff93 	bl	8010500 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80105da:	e7b5      	b.n	8010548 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80105dc:	f8d8 3000 	ldr.w	r3, [r8]
 80105e0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80105e4:	442b      	add	r3, r5
 80105e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80105ea:	4291      	cmp	r1, r2
 80105ec:	d119      	bne.n	8010622 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80105ee:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80105f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80105f6:	4291      	cmp	r1, r2
 80105f8:	d113      	bne.n	8010622 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80105fa:	6820      	ldr	r0, [r4, #0]
 80105fc:	466a      	mov	r2, sp
 80105fe:	6861      	ldr	r1, [r4, #4]
 8010600:	c203      	stmia	r2!, {r0, r1}
 8010602:	4619      	mov	r1, r3
 8010604:	4668      	mov	r0, sp
 8010606:	f7fd fc23 	bl	800de50 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801060a:	f8d8 3000 	ldr.w	r3, [r8]
 801060e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010612:	442b      	add	r3, r5
 8010614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010618:	4413      	add	r3, r2
 801061a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801061e:	4293      	cmp	r3, r2
 8010620:	ddd7      	ble.n	80105d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8010622:	4620      	mov	r0, r4
 8010624:	f7fb fb29 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010628:	b990      	cbnz	r0, 8010650 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801062a:	88a7      	ldrh	r7, [r4, #4]
 801062c:	88e3      	ldrh	r3, [r4, #6]
 801062e:	fb17 f703 	smulbb	r7, r7, r3
 8010632:	f8d8 3000 	ldr.w	r3, [r8]
 8010636:	441d      	add	r5, r3
 8010638:	4628      	mov	r0, r5
 801063a:	f7fb fb1e 	bl	800bc7a <_ZNK8touchgfx4Rect7isEmptyEv>
 801063e:	b948      	cbnz	r0, 8010654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8010640:	88ab      	ldrh	r3, [r5, #4]
 8010642:	88ea      	ldrh	r2, [r5, #6]
 8010644:	fb13 f302 	smulbb	r3, r3, r2
 8010648:	42bb      	cmp	r3, r7
 801064a:	f6bf af7c 	bge.w	8010546 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801064e:	e79e      	b.n	801058e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8010650:	2700      	movs	r7, #0
 8010652:	e7ee      	b.n	8010632 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8010654:	2300      	movs	r3, #0
 8010656:	e7f7      	b.n	8010648 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8010658:	2400b2a4 	.word	0x2400b2a4
 801065c:	2400b28c 	.word	0x2400b28c

08010660 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010662:	4c24      	ldr	r4, [pc, #144]	; (80106f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d042      	beq.n	80106f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801066a:	4a23      	ldr	r2, [pc, #140]	; (80106f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801066c:	4d23      	ldr	r5, [pc, #140]	; (80106fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801066e:	8811      	ldrh	r1, [r2, #0]
 8010670:	f8b5 c000 	ldrh.w	ip, [r5]
 8010674:	4822      	ldr	r0, [pc, #136]	; (8010700 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010676:	4461      	add	r1, ip
 8010678:	1c4a      	adds	r2, r1, #1
 801067a:	008f      	lsls	r7, r1, #2
 801067c:	f022 0201 	bic.w	r2, r2, #1
 8010680:	19de      	adds	r6, r3, r7
 8010682:	0412      	lsls	r2, r2, #16
 8010684:	6006      	str	r6, [r0, #0]
 8010686:	4e1f      	ldr	r6, [pc, #124]	; (8010704 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010688:	0c12      	lsrs	r2, r2, #16
 801068a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801068e:	19da      	adds	r2, r3, r7
 8010690:	6032      	str	r2, [r6, #0]
 8010692:	220e      	movs	r2, #14
 8010694:	fb02 f20c 	mul.w	r2, r2, ip
 8010698:	3203      	adds	r2, #3
 801069a:	f022 0203 	bic.w	r2, r2, #3
 801069e:	443a      	add	r2, r7
 80106a0:	4f19      	ldr	r7, [pc, #100]	; (8010708 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80106a2:	4413      	add	r3, r2
 80106a4:	603b      	str	r3, [r7, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	4f18      	ldr	r7, [pc, #96]	; (801070c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80106aa:	469c      	mov	ip, r3
 80106ac:	803b      	strh	r3, [r7, #0]
 80106ae:	4f18      	ldr	r7, [pc, #96]	; (8010710 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80106b0:	683f      	ldr	r7, [r7, #0]
 80106b2:	1aba      	subs	r2, r7, r2
 80106b4:	4f17      	ldr	r7, [pc, #92]	; (8010714 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80106b6:	603a      	str	r2, [r7, #0]
 80106b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80106bc:	4a16      	ldr	r2, [pc, #88]	; (8010718 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80106be:	8013      	strh	r3, [r2, #0]
 80106c0:	428b      	cmp	r3, r1
 80106c2:	d10d      	bne.n	80106e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80106c4:	882d      	ldrh	r5, [r5, #0]
 80106c6:	2300      	movs	r3, #0
 80106c8:	6830      	ldr	r0, [r6, #0]
 80106ca:	240e      	movs	r4, #14
 80106cc:	429d      	cmp	r5, r3
 80106ce:	d90f      	bls.n	80106f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80106d0:	fb04 0203 	mla	r2, r4, r3, r0
 80106d4:	3301      	adds	r3, #1
 80106d6:	7b11      	ldrb	r1, [r2, #12]
 80106d8:	f36f 1145 	bfc	r1, #5, #1
 80106dc:	7311      	strb	r1, [r2, #12]
 80106de:	e7f5      	b.n	80106cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80106e0:	6822      	ldr	r2, [r4, #0]
 80106e2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80106e6:	6802      	ldr	r2, [r0, #0]
 80106e8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80106ec:	3301      	adds	r3, #1
 80106ee:	e7e7      	b.n	80106c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80106f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106f2:	bf00      	nop
 80106f4:	2400b288 	.word	0x2400b288
 80106f8:	2400b2a4 	.word	0x2400b2a4
 80106fc:	2400b2a8 	.word	0x2400b2a8
 8010700:	2400b29c 	.word	0x2400b29c
 8010704:	2400b28c 	.word	0x2400b28c
 8010708:	2400b294 	.word	0x2400b294
 801070c:	2400b2a6 	.word	0x2400b2a6
 8010710:	2400b290 	.word	0x2400b290
 8010714:	2400b2a0 	.word	0x2400b2a0
 8010718:	2400b298 	.word	0x2400b298

0801071c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801071c:	4b06      	ldr	r3, [pc, #24]	; (8010738 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	b943      	cbnz	r3, 8010734 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8010722:	b139      	cbz	r1, 8010734 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8010724:	4b05      	ldr	r3, [pc, #20]	; (801073c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8010726:	801a      	strh	r2, [r3, #0]
 8010728:	4b05      	ldr	r3, [pc, #20]	; (8010740 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801072a:	6019      	str	r1, [r3, #0]
 801072c:	4b05      	ldr	r3, [pc, #20]	; (8010744 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801072e:	6018      	str	r0, [r3, #0]
 8010730:	f7ff bf96 	b.w	8010660 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	2400b294 	.word	0x2400b294
 801073c:	2400b2a8 	.word	0x2400b2a8
 8010740:	2400b290 	.word	0x2400b290
 8010744:	2400b288 	.word	0x2400b288

08010748 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010748:	b470      	push	{r4, r5, r6}
 801074a:	4c07      	ldr	r4, [pc, #28]	; (8010768 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801074c:	4605      	mov	r5, r0
 801074e:	4610      	mov	r0, r2
 8010750:	9a03      	ldr	r2, [sp, #12]
 8010752:	6826      	ldr	r6, [r4, #0]
 8010754:	b936      	cbnz	r6, 8010764 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010756:	6025      	str	r5, [r4, #0]
 8010758:	4c04      	ldr	r4, [pc, #16]	; (801076c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801075a:	8021      	strh	r1, [r4, #0]
 801075c:	4619      	mov	r1, r3
 801075e:	bc70      	pop	{r4, r5, r6}
 8010760:	f7ff bfdc 	b.w	801071c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010764:	bc70      	pop	{r4, r5, r6}
 8010766:	4770      	bx	lr
 8010768:	2400b2ac 	.word	0x2400b2ac
 801076c:	2400b2a4 	.word	0x2400b2a4

08010770 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010770:	4a12      	ldr	r2, [pc, #72]	; (80107bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8010772:	8803      	ldrh	r3, [r0, #0]
 8010774:	8812      	ldrh	r2, [r2, #0]
 8010776:	4293      	cmp	r3, r2
 8010778:	d207      	bcs.n	801078a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801077a:	4a11      	ldr	r2, [pc, #68]	; (80107c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801077c:	2114      	movs	r1, #20
 801077e:	6812      	ldr	r2, [r2, #0]
 8010780:	fb01 2303 	mla	r3, r1, r3, r2
 8010784:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010788:	4770      	bx	lr
 801078a:	490e      	ldr	r1, [pc, #56]	; (80107c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801078c:	8809      	ldrh	r1, [r1, #0]
 801078e:	4411      	add	r1, r2
 8010790:	428b      	cmp	r3, r1
 8010792:	da04      	bge.n	801079e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8010794:	1a9b      	subs	r3, r3, r2
 8010796:	4a0c      	ldr	r2, [pc, #48]	; (80107c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010798:	210e      	movs	r1, #14
 801079a:	6812      	ldr	r2, [r2, #0]
 801079c:	e7f0      	b.n	8010780 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801079e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d108      	bne.n	80107b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80107a6:	4b09      	ldr	r3, [pc, #36]	; (80107cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	b91b      	cbnz	r3, 80107b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80107ac:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80107ae:	f9b3 0000 	ldrsh.w	r0, [r3]
 80107b2:	4770      	bx	lr
 80107b4:	4b07      	ldr	r3, [pc, #28]	; (80107d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80107b6:	e7fa      	b.n	80107ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80107b8:	2000      	movs	r0, #0
 80107ba:	4770      	bx	lr
 80107bc:	2400b2a4 	.word	0x2400b2a4
 80107c0:	2400b2ac 	.word	0x2400b2ac
 80107c4:	2400b2a8 	.word	0x2400b2a8
 80107c8:	2400b28c 	.word	0x2400b28c
 80107cc:	2400b21c 	.word	0x2400b21c
 80107d0:	2400b21e 	.word	0x2400b21e
 80107d4:	2400b220 	.word	0x2400b220

080107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80107d8:	4a12      	ldr	r2, [pc, #72]	; (8010824 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80107da:	8803      	ldrh	r3, [r0, #0]
 80107dc:	8812      	ldrh	r2, [r2, #0]
 80107de:	4293      	cmp	r3, r2
 80107e0:	d207      	bcs.n	80107f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80107e2:	4a11      	ldr	r2, [pc, #68]	; (8010828 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80107e4:	2114      	movs	r1, #20
 80107e6:	6812      	ldr	r2, [r2, #0]
 80107e8:	fb01 2303 	mla	r3, r1, r3, r2
 80107ec:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80107f0:	4770      	bx	lr
 80107f2:	490e      	ldr	r1, [pc, #56]	; (801082c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80107f4:	8809      	ldrh	r1, [r1, #0]
 80107f6:	4411      	add	r1, r2
 80107f8:	428b      	cmp	r3, r1
 80107fa:	da04      	bge.n	8010806 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80107fc:	1a9b      	subs	r3, r3, r2
 80107fe:	4a0c      	ldr	r2, [pc, #48]	; (8010830 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8010800:	210e      	movs	r1, #14
 8010802:	6812      	ldr	r2, [r2, #0]
 8010804:	e7f0      	b.n	80107e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8010806:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801080a:	4293      	cmp	r3, r2
 801080c:	d108      	bne.n	8010820 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801080e:	4b09      	ldr	r3, [pc, #36]	; (8010834 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	b91b      	cbnz	r3, 801081c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8010814:	4b08      	ldr	r3, [pc, #32]	; (8010838 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010816:	f9b3 0000 	ldrsh.w	r0, [r3]
 801081a:	4770      	bx	lr
 801081c:	4b07      	ldr	r3, [pc, #28]	; (801083c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801081e:	e7fa      	b.n	8010816 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8010820:	2000      	movs	r0, #0
 8010822:	4770      	bx	lr
 8010824:	2400b2a4 	.word	0x2400b2a4
 8010828:	2400b2ac 	.word	0x2400b2ac
 801082c:	2400b2a8 	.word	0x2400b2a8
 8010830:	2400b28c 	.word	0x2400b28c
 8010834:	2400b21c 	.word	0x2400b21c
 8010838:	2400b220 	.word	0x2400b220
 801083c:	2400b21e 	.word	0x2400b21e

08010840 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8010840:	4a1f      	ldr	r2, [pc, #124]	; (80108c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8010842:	b510      	push	{r4, lr}
 8010844:	880b      	ldrh	r3, [r1, #0]
 8010846:	8812      	ldrh	r2, [r2, #0]
 8010848:	4293      	cmp	r3, r2
 801084a:	d213      	bcs.n	8010874 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801084c:	4a1d      	ldr	r2, [pc, #116]	; (80108c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801084e:	2114      	movs	r1, #20
 8010850:	6812      	ldr	r2, [r2, #0]
 8010852:	fb01 2303 	mla	r3, r1, r3, r2
 8010856:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801085a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801085e:	8a1a      	ldrh	r2, [r3, #16]
 8010860:	8a5b      	ldrh	r3, [r3, #18]
 8010862:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010866:	8004      	strh	r4, [r0, #0]
 8010868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801086c:	8041      	strh	r1, [r0, #2]
 801086e:	8082      	strh	r2, [r0, #4]
 8010870:	80c3      	strh	r3, [r0, #6]
 8010872:	e00e      	b.n	8010892 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8010874:	4914      	ldr	r1, [pc, #80]	; (80108c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8010876:	8809      	ldrh	r1, [r1, #0]
 8010878:	4411      	add	r1, r2
 801087a:	428b      	cmp	r3, r1
 801087c:	da0a      	bge.n	8010894 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801087e:	1a9b      	subs	r3, r3, r2
 8010880:	4a12      	ldr	r2, [pc, #72]	; (80108cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8010882:	210e      	movs	r1, #14
 8010884:	6812      	ldr	r2, [r2, #0]
 8010886:	fb01 2303 	mla	r3, r1, r3, r2
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	6002      	str	r2, [r0, #0]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	6042      	str	r2, [r0, #4]
 8010892:	bd10      	pop	{r4, pc}
 8010894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010898:	4293      	cmp	r3, r2
 801089a:	d10b      	bne.n	80108b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801089c:	4b0c      	ldr	r3, [pc, #48]	; (80108d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801089e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80108a2:	4b0c      	ldr	r3, [pc, #48]	; (80108d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80108a4:	8081      	strh	r1, [r0, #4]
 80108a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108aa:	2300      	movs	r3, #0
 80108ac:	80c2      	strh	r2, [r0, #6]
 80108ae:	8003      	strh	r3, [r0, #0]
 80108b0:	8043      	strh	r3, [r0, #2]
 80108b2:	e7ee      	b.n	8010892 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80108b4:	2300      	movs	r3, #0
 80108b6:	8003      	strh	r3, [r0, #0]
 80108b8:	8043      	strh	r3, [r0, #2]
 80108ba:	8083      	strh	r3, [r0, #4]
 80108bc:	e7d8      	b.n	8010870 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80108be:	bf00      	nop
 80108c0:	2400b2a4 	.word	0x2400b2a4
 80108c4:	2400b2ac 	.word	0x2400b2ac
 80108c8:	2400b2a8 	.word	0x2400b2a8
 80108cc:	2400b28c 	.word	0x2400b28c
 80108d0:	2400b218 	.word	0x2400b218
 80108d4:	2400b21a 	.word	0x2400b21a

080108d8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80108d8:	4a12      	ldr	r2, [pc, #72]	; (8010924 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80108da:	8803      	ldrh	r3, [r0, #0]
 80108dc:	8811      	ldrh	r1, [r2, #0]
 80108de:	428b      	cmp	r3, r1
 80108e0:	d20b      	bcs.n	80108fa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80108e2:	4a11      	ldr	r2, [pc, #68]	; (8010928 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80108e4:	6812      	ldr	r2, [r2, #0]
 80108e6:	b112      	cbz	r2, 80108ee <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80108e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80108ec:	b9c0      	cbnz	r0, 8010920 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80108ee:	4a0f      	ldr	r2, [pc, #60]	; (801092c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80108f0:	6811      	ldr	r1, [r2, #0]
 80108f2:	2214      	movs	r2, #20
 80108f4:	4353      	muls	r3, r2
 80108f6:	58c8      	ldr	r0, [r1, r3]
 80108f8:	4770      	bx	lr
 80108fa:	4a0d      	ldr	r2, [pc, #52]	; (8010930 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80108fc:	8812      	ldrh	r2, [r2, #0]
 80108fe:	440a      	add	r2, r1
 8010900:	4293      	cmp	r3, r2
 8010902:	da04      	bge.n	801090e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8010904:	4a08      	ldr	r2, [pc, #32]	; (8010928 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010906:	6812      	ldr	r2, [r2, #0]
 8010908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801090c:	4770      	bx	lr
 801090e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010912:	4293      	cmp	r3, r2
 8010914:	d103      	bne.n	801091e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010916:	4b07      	ldr	r3, [pc, #28]	; (8010934 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801091c:	4770      	bx	lr
 801091e:	2000      	movs	r0, #0
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	2400b2a4 	.word	0x2400b2a4
 8010928:	2400b288 	.word	0x2400b288
 801092c:	2400b2ac 	.word	0x2400b2ac
 8010930:	2400b2a8 	.word	0x2400b2a8
 8010934:	2400b224 	.word	0x2400b224

08010938 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010938:	4b24      	ldr	r3, [pc, #144]	; (80109cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801093a:	8802      	ldrh	r2, [r0, #0]
 801093c:	8818      	ldrh	r0, [r3, #0]
 801093e:	4282      	cmp	r2, r0
 8010940:	d221      	bcs.n	8010986 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8010942:	4b23      	ldr	r3, [pc, #140]	; (80109d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010944:	6819      	ldr	r1, [r3, #0]
 8010946:	2314      	movs	r3, #20
 8010948:	fb03 1302 	mla	r3, r3, r2, r1
 801094c:	6858      	ldr	r0, [r3, #4]
 801094e:	2800      	cmp	r0, #0
 8010950:	d03a      	beq.n	80109c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010952:	4920      	ldr	r1, [pc, #128]	; (80109d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010954:	6809      	ldr	r1, [r1, #0]
 8010956:	2900      	cmp	r1, #0
 8010958:	d036      	beq.n	80109c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801095a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801095e:	2900      	cmp	r1, #0
 8010960:	d032      	beq.n	80109c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010962:	891a      	ldrh	r2, [r3, #8]
 8010964:	8958      	ldrh	r0, [r3, #10]
 8010966:	4350      	muls	r0, r2
 8010968:	7c5a      	ldrb	r2, [r3, #17]
 801096a:	7cdb      	ldrb	r3, [r3, #19]
 801096c:	0952      	lsrs	r2, r2, #5
 801096e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010972:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010976:	2b0b      	cmp	r3, #11
 8010978:	bf18      	it	ne
 801097a:	0040      	lslne	r0, r0, #1
 801097c:	3003      	adds	r0, #3
 801097e:	f020 0003 	bic.w	r0, r0, #3
 8010982:	4408      	add	r0, r1
 8010984:	4770      	bx	lr
 8010986:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	4403      	add	r3, r0
 801098c:	429a      	cmp	r2, r3
 801098e:	da1a      	bge.n	80109c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010990:	4b12      	ldr	r3, [pc, #72]	; (80109dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010992:	1a10      	subs	r0, r2, r0
 8010994:	210e      	movs	r1, #14
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	fb01 3000 	mla	r0, r1, r0, r3
 801099c:	7b03      	ldrb	r3, [r0, #12]
 801099e:	f003 031f 	and.w	r3, r3, #31
 80109a2:	2b0b      	cmp	r3, #11
 80109a4:	d10b      	bne.n	80109be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80109a6:	8903      	ldrh	r3, [r0, #8]
 80109a8:	8940      	ldrh	r0, [r0, #10]
 80109aa:	4358      	muls	r0, r3
 80109ac:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80109ae:	3003      	adds	r0, #3
 80109b0:	6819      	ldr	r1, [r3, #0]
 80109b2:	f020 0303 	bic.w	r3, r0, #3
 80109b6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80109ba:	4418      	add	r0, r3
 80109bc:	4770      	bx	lr
 80109be:	2b0d      	cmp	r3, #13
 80109c0:	d101      	bne.n	80109c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80109c2:	300d      	adds	r0, #13
 80109c4:	4770      	bx	lr
 80109c6:	2000      	movs	r0, #0
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	2400b2a4 	.word	0x2400b2a4
 80109d0:	2400b2ac 	.word	0x2400b2ac
 80109d4:	2400b288 	.word	0x2400b288
 80109d8:	2400b2a8 	.word	0x2400b2a8
 80109dc:	2400b28c 	.word	0x2400b28c

080109e0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80109e0:	4a17      	ldr	r2, [pc, #92]	; (8010a40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80109e2:	b510      	push	{r4, lr}
 80109e4:	8803      	ldrh	r3, [r0, #0]
 80109e6:	8812      	ldrh	r2, [r2, #0]
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d20c      	bcs.n	8010a06 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80109ec:	4a15      	ldr	r2, [pc, #84]	; (8010a44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80109ee:	2114      	movs	r1, #20
 80109f0:	6812      	ldr	r2, [r2, #0]
 80109f2:	fb01 2303 	mla	r3, r1, r3, r2
 80109f6:	7c58      	ldrb	r0, [r3, #17]
 80109f8:	0942      	lsrs	r2, r0, #5
 80109fa:	7cd8      	ldrb	r0, [r3, #19]
 80109fc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8010a00:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	4910      	ldr	r1, [pc, #64]	; (8010a48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8010a08:	8809      	ldrh	r1, [r1, #0]
 8010a0a:	4411      	add	r1, r2
 8010a0c:	428b      	cmp	r3, r1
 8010a0e:	da09      	bge.n	8010a24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8010a10:	1a9b      	subs	r3, r3, r2
 8010a12:	4a0e      	ldr	r2, [pc, #56]	; (8010a4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8010a14:	210e      	movs	r1, #14
 8010a16:	6812      	ldr	r2, [r2, #0]
 8010a18:	fb01 2303 	mla	r3, r1, r3, r2
 8010a1c:	7b18      	ldrb	r0, [r3, #12]
 8010a1e:	f000 001f 	and.w	r0, r0, #31
 8010a22:	e7ef      	b.n	8010a04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8010a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d106      	bne.n	8010a3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8010a2c:	f7fb fbce 	bl	800c1cc <_ZN8touchgfx3HAL3lcdEv>
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a38:	4718      	bx	r3
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e7e2      	b.n	8010a04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8010a3e:	bf00      	nop
 8010a40:	2400b2a4 	.word	0x2400b2a4
 8010a44:	2400b2ac 	.word	0x2400b2ac
 8010a48:	2400b2a8 	.word	0x2400b2a8
 8010a4c:	2400b28c 	.word	0x2400b28c

08010a50 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8010a50:	2018      	movs	r0, #24
 8010a52:	4770      	bx	lr

08010a54 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8010a54:	2001      	movs	r0, #1
 8010a56:	4770      	bx	lr

08010a58 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8010a58:	4b02      	ldr	r3, [pc, #8]	; (8010a64 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8010a5a:	8818      	ldrh	r0, [r3, #0]
 8010a5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010a60:	b280      	uxth	r0, r0
 8010a62:	4770      	bx	lr
 8010a64:	2400b21e 	.word	0x2400b21e

08010a68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8010a68:	2bff      	cmp	r3, #255	; 0xff
 8010a6a:	d040      	beq.n	8010aee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8010a6c:	2a2c      	cmp	r2, #44	; 0x2c
 8010a6e:	d02a      	beq.n	8010ac6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8010a70:	d80f      	bhi.n	8010a92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8010a72:	2a08      	cmp	r2, #8
 8010a74:	d037      	beq.n	8010ae6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a76:	d805      	bhi.n	8010a84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8010a78:	2a04      	cmp	r2, #4
 8010a7a:	d032      	beq.n	8010ae2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8010a7c:	2a05      	cmp	r2, #5
 8010a7e:	d02e      	beq.n	8010ade <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8010a80:	2000      	movs	r0, #0
 8010a82:	4770      	bx	lr
 8010a84:	2a0a      	cmp	r2, #10
 8010a86:	d02e      	beq.n	8010ae6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a88:	d301      	bcc.n	8010a8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8010a8a:	2a0b      	cmp	r2, #11
 8010a8c:	d1f8      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010a8e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8010a90:	4770      	bx	lr
 8010a92:	2a30      	cmp	r2, #48	; 0x30
 8010a94:	d029      	beq.n	8010aea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010a96:	d808      	bhi.n	8010aaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8010a98:	2a2e      	cmp	r2, #46	; 0x2e
 8010a9a:	684b      	ldr	r3, [r1, #4]
 8010a9c:	d01a      	beq.n	8010ad4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8010a9e:	d90b      	bls.n	8010ab8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1ec      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010aa6:	6a00      	ldr	r0, [r0, #32]
 8010aa8:	4770      	bx	lr
 8010aaa:	2a32      	cmp	r2, #50	; 0x32
 8010aac:	d01d      	beq.n	8010aea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010aae:	d301      	bcc.n	8010ab4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8010ab0:	2a33      	cmp	r2, #51	; 0x33
 8010ab2:	d1e5      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010ab4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8010ab6:	4770      	bx	lr
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d0f3      	beq.n	8010aa6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d1de      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010ac2:	6900      	ldr	r0, [r0, #16]
 8010ac4:	4770      	bx	lr
 8010ac6:	684b      	ldr	r3, [r1, #4]
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	b133      	cbz	r3, 8010ada <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d1d7      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010ad0:	6880      	ldr	r0, [r0, #8]
 8010ad2:	4770      	bx	lr
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1d2      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010ada:	6980      	ldr	r0, [r0, #24]
 8010adc:	4770      	bx	lr
 8010ade:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010ae0:	4770      	bx	lr
 8010ae2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8010ae4:	4770      	bx	lr
 8010ae6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8010ae8:	4770      	bx	lr
 8010aea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8010aec:	4770      	bx	lr
 8010aee:	2a2c      	cmp	r2, #44	; 0x2c
 8010af0:	d02a      	beq.n	8010b48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8010af2:	d80f      	bhi.n	8010b14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8010af4:	2a08      	cmp	r2, #8
 8010af6:	d035      	beq.n	8010b64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8010af8:	d805      	bhi.n	8010b06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8010afa:	2a04      	cmp	r2, #4
 8010afc:	d030      	beq.n	8010b60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8010afe:	2a05      	cmp	r2, #5
 8010b00:	d1be      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b02:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8010b04:	4770      	bx	lr
 8010b06:	2a0a      	cmp	r2, #10
 8010b08:	d02c      	beq.n	8010b64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8010b0a:	d301      	bcc.n	8010b10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8010b0c:	2a0b      	cmp	r2, #11
 8010b0e:	d1b7      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b10:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8010b12:	4770      	bx	lr
 8010b14:	2a30      	cmp	r2, #48	; 0x30
 8010b16:	d027      	beq.n	8010b68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8010b18:	d808      	bhi.n	8010b2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8010b1a:	2a2e      	cmp	r2, #46	; 0x2e
 8010b1c:	684b      	ldr	r3, [r1, #4]
 8010b1e:	d01a      	beq.n	8010b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8010b20:	d90b      	bls.n	8010b3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1ab      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b28:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010b2a:	4770      	bx	lr
 8010b2c:	2a32      	cmp	r2, #50	; 0x32
 8010b2e:	d01b      	beq.n	8010b68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8010b30:	d301      	bcc.n	8010b36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8010b32:	2a33      	cmp	r2, #51	; 0x33
 8010b34:	d1a4      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b36:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8010b38:	4770      	bx	lr
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d0f3      	beq.n	8010b28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d19d      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b44:	6940      	ldr	r0, [r0, #20]
 8010b46:	4770      	bx	lr
 8010b48:	684b      	ldr	r3, [r1, #4]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	b133      	cbz	r3, 8010b5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d196      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b52:	68c0      	ldr	r0, [r0, #12]
 8010b54:	4770      	bx	lr
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d191      	bne.n	8010a80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8010b5c:	69c0      	ldr	r0, [r0, #28]
 8010b5e:	4770      	bx	lr
 8010b60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010b62:	4770      	bx	lr
 8010b64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010b66:	4770      	bx	lr
 8010b68:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010b6a:	4770      	bx	lr

08010b6c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b70:	b085      	sub	sp, #20
 8010b72:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010b74:	9203      	str	r2, [sp, #12]
 8010b76:	6870      	ldr	r0, [r6, #4]
 8010b78:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010b7c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010b80:	9101      	str	r1, [sp, #4]
 8010b82:	fa1f f885 	uxth.w	r8, r5
 8010b86:	43ed      	mvns	r5, r5
 8010b88:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010b8c:	b2ed      	uxtb	r5, r5
 8010b8e:	fb00 2404 	mla	r4, r0, r4, r2
 8010b92:	6832      	ldr	r2, [r6, #0]
 8010b94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010b98:	4414      	add	r4, r2
 8010b9a:	f8dc 2000 	ldr.w	r2, [ip]
 8010b9e:	9202      	str	r2, [sp, #8]
 8010ba0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010ba4:	f102 0e04 	add.w	lr, r2, #4
 8010ba8:	9a01      	ldr	r2, [sp, #4]
 8010baa:	2a00      	cmp	r2, #0
 8010bac:	dc03      	bgt.n	8010bb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8010bae:	9a03      	ldr	r2, [sp, #12]
 8010bb0:	2a00      	cmp	r2, #0
 8010bb2:	f340 8116 	ble.w	8010de2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010bb8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8010bbc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010bc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010bc2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8010bc6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	dd0e      	ble.n	8010bec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8010bce:	1406      	asrs	r6, r0, #16
 8010bd0:	d405      	bmi.n	8010bde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010bd2:	4556      	cmp	r6, sl
 8010bd4:	da03      	bge.n	8010bde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010bd6:	1416      	asrs	r6, r2, #16
 8010bd8:	d401      	bmi.n	8010bde <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010bda:	454e      	cmp	r6, r9
 8010bdc:	db07      	blt.n	8010bee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8010bde:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010be0:	3b01      	subs	r3, #1
 8010be2:	3403      	adds	r4, #3
 8010be4:	4430      	add	r0, r6
 8010be6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010be8:	4432      	add	r2, r6
 8010bea:	e7ee      	b.n	8010bca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8010bec:	d063      	beq.n	8010cb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010bee:	1e5e      	subs	r6, r3, #1
 8010bf0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010bf2:	fb07 0706 	mla	r7, r7, r6, r0
 8010bf6:	143f      	asrs	r7, r7, #16
 8010bf8:	d454      	bmi.n	8010ca4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010bfa:	4557      	cmp	r7, sl
 8010bfc:	da52      	bge.n	8010ca4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010bfe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010c00:	fb07 2606 	mla	r6, r7, r6, r2
 8010c04:	1436      	asrs	r6, r6, #16
 8010c06:	d44d      	bmi.n	8010ca4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010c08:	454e      	cmp	r6, r9
 8010c0a:	da4b      	bge.n	8010ca4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010c0c:	1ce6      	adds	r6, r4, #3
 8010c0e:	4699      	mov	r9, r3
 8010c10:	f1b9 0f00 	cmp.w	r9, #0
 8010c14:	f106 0603 	add.w	r6, r6, #3
 8010c18:	dd48      	ble.n	8010cac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8010c1a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8010c1e:	1417      	asrs	r7, r2, #16
 8010c20:	9902      	ldr	r1, [sp, #8]
 8010c22:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010c26:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c2a:	fb0b 1707 	mla	r7, fp, r7, r1
 8010c2e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010c32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c34:	f817 700a 	ldrb.w	r7, [r7, sl]
 8010c38:	fb1b fb05 	smulbb	fp, fp, r5
 8010c3c:	4408      	add	r0, r1
 8010c3e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010c40:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010c44:	440a      	add	r2, r1
 8010c46:	eb0e 0a07 	add.w	sl, lr, r7
 8010c4a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8010c4e:	fb07 b708 	mla	r7, r7, r8, fp
 8010c52:	b2bf      	uxth	r7, r7
 8010c54:	f107 0b01 	add.w	fp, r7, #1
 8010c58:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010c5c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8010c60:	fb1b fb05 	smulbb	fp, fp, r5
 8010c64:	123f      	asrs	r7, r7, #8
 8010c66:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010c6a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010c6e:	fb07 b708 	mla	r7, r7, r8, fp
 8010c72:	b2bf      	uxth	r7, r7
 8010c74:	f107 0b01 	add.w	fp, r7, #1
 8010c78:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010c7c:	123f      	asrs	r7, r7, #8
 8010c7e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8010c82:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010c86:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010c8a:	fb1a fa05 	smulbb	sl, sl, r5
 8010c8e:	fb07 a708 	mla	r7, r7, r8, sl
 8010c92:	b2bf      	uxth	r7, r7
 8010c94:	f107 0a01 	add.w	sl, r7, #1
 8010c98:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010c9c:	123f      	asrs	r7, r7, #8
 8010c9e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8010ca2:	e7b5      	b.n	8010c10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8010ca4:	2700      	movs	r7, #0
 8010ca6:	1bde      	subs	r6, r3, r7
 8010ca8:	2e00      	cmp	r6, #0
 8010caa:	dc42      	bgt.n	8010d32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8010cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010cb4:	441c      	add	r4, r3
 8010cb6:	9b01      	ldr	r3, [sp, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f340 8092 	ble.w	8010de2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010cc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010ccc:	eef0 6a62 	vmov.f32	s13, s5
 8010cd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010cd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010cd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010cdc:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8010ce0:	eef0 6a43 	vmov.f32	s13, s6
 8010ce4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010ce8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8010cec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010cf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010cf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010cf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010cfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010d00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010d04:	ee12 2a90 	vmov	r2, s5
 8010d08:	eef0 2a47 	vmov.f32	s5, s14
 8010d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d10:	ee13 2a10 	vmov	r2, s6
 8010d14:	9311      	str	r3, [sp, #68]	; 0x44
 8010d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d18:	eeb0 3a67 	vmov.f32	s6, s15
 8010d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d20:	9312      	str	r3, [sp, #72]	; 0x48
 8010d22:	9b01      	ldr	r3, [sp, #4]
 8010d24:	9a03      	ldr	r2, [sp, #12]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d2c:	bf08      	it	eq
 8010d2e:	4613      	moveq	r3, r2
 8010d30:	e73a      	b.n	8010ba8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8010d32:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8010d36:	d44e      	bmi.n	8010dd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010d38:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010d3c:	4556      	cmp	r6, sl
 8010d3e:	dd4a      	ble.n	8010dd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010d40:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8010d44:	d447      	bmi.n	8010dd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010d46:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010d4a:	4559      	cmp	r1, fp
 8010d4c:	dd43      	ble.n	8010dd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010d4e:	fa0f f986 	sxth.w	r9, r6
 8010d52:	9902      	ldr	r1, [sp, #8]
 8010d54:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010d58:	fb0b 1909 	mla	r9, fp, r9, r1
 8010d5c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8010d60:	f819 900a 	ldrb.w	r9, [r9, sl]
 8010d64:	fb1b fb05 	smulbb	fp, fp, r5
 8010d68:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010d6c:	eb0e 0a09 	add.w	sl, lr, r9
 8010d70:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8010d74:	fb09 b908 	mla	r9, r9, r8, fp
 8010d78:	fa1f f989 	uxth.w	r9, r9
 8010d7c:	f109 0b01 	add.w	fp, r9, #1
 8010d80:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010d84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010d88:	f804 9006 	strb.w	r9, [r4, r6]
 8010d8c:	4426      	add	r6, r4
 8010d8e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010d92:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010d96:	fb1b fb05 	smulbb	fp, fp, r5
 8010d9a:	fb09 b908 	mla	r9, r9, r8, fp
 8010d9e:	fa1f f989 	uxth.w	r9, r9
 8010da2:	f109 0b01 	add.w	fp, r9, #1
 8010da6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010daa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010dae:	f886 9001 	strb.w	r9, [r6, #1]
 8010db2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010db6:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010dba:	fb1a fa05 	smulbb	sl, sl, r5
 8010dbe:	fb09 a908 	mla	r9, r9, r8, sl
 8010dc2:	fa1f f989 	uxth.w	r9, r9
 8010dc6:	f109 0a01 	add.w	sl, r9, #1
 8010dca:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8010dce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010dd2:	f886 9002 	strb.w	r9, [r6, #2]
 8010dd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010dd8:	3701      	adds	r7, #1
 8010dda:	4408      	add	r0, r1
 8010ddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010dde:	440a      	add	r2, r1
 8010de0:	e761      	b.n	8010ca6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010de2:	b005      	add	sp, #20
 8010de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010dee:	4693      	mov	fp, r2
 8010df0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010df6:	6868      	ldr	r0, [r5, #4]
 8010df8:	6877      	ldr	r7, [r6, #4]
 8010dfa:	9100      	str	r1, [sp, #0]
 8010dfc:	3704      	adds	r7, #4
 8010dfe:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010e02:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8010e06:	fb00 2404 	mla	r4, r0, r4, r2
 8010e0a:	682a      	ldr	r2, [r5, #0]
 8010e0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010e10:	4414      	add	r4, r2
 8010e12:	6832      	ldr	r2, [r6, #0]
 8010e14:	9201      	str	r2, [sp, #4]
 8010e16:	9a00      	ldr	r2, [sp, #0]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	dc03      	bgt.n	8010e24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8010e1c:	f1bb 0f00 	cmp.w	fp, #0
 8010e20:	f340 80bc 	ble.w	8010f9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e26:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8010e2a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e30:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8010e34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dd0c      	ble.n	8010e56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8010e3c:	1405      	asrs	r5, r0, #16
 8010e3e:	d405      	bmi.n	8010e4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010e40:	4555      	cmp	r5, sl
 8010e42:	da03      	bge.n	8010e4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010e44:	1415      	asrs	r5, r2, #16
 8010e46:	d401      	bmi.n	8010e4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010e48:	454d      	cmp	r5, r9
 8010e4a:	db05      	blt.n	8010e58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010e4c:	4440      	add	r0, r8
 8010e4e:	4472      	add	r2, lr
 8010e50:	3b01      	subs	r3, #1
 8010e52:	3403      	adds	r4, #3
 8010e54:	e7f0      	b.n	8010e38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8010e56:	d03f      	beq.n	8010ed8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8010e58:	1e5d      	subs	r5, r3, #1
 8010e5a:	fb08 0c05 	mla	ip, r8, r5, r0
 8010e5e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8010e62:	d42e      	bmi.n	8010ec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010e64:	45d4      	cmp	ip, sl
 8010e66:	da2c      	bge.n	8010ec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010e68:	fb0e 2505 	mla	r5, lr, r5, r2
 8010e6c:	142d      	asrs	r5, r5, #16
 8010e6e:	d428      	bmi.n	8010ec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010e70:	454d      	cmp	r5, r9
 8010e72:	da26      	bge.n	8010ec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010e74:	1ce5      	adds	r5, r4, #3
 8010e76:	469c      	mov	ip, r3
 8010e78:	f1bc 0f00 	cmp.w	ip, #0
 8010e7c:	f105 0503 	add.w	r5, r5, #3
 8010e80:	dd25      	ble.n	8010ece <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8010e82:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8010e86:	ea4f 4922 	mov.w	r9, r2, asr #16
 8010e8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e8e:	4472      	add	r2, lr
 8010e90:	468a      	mov	sl, r1
 8010e92:	9901      	ldr	r1, [sp, #4]
 8010e94:	fb0a 1909 	mla	r9, sl, r9, r1
 8010e98:	1401      	asrs	r1, r0, #16
 8010e9a:	4440      	add	r0, r8
 8010e9c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8010ea0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010ea4:	eb07 0a09 	add.w	sl, r7, r9
 8010ea8:	f817 9009 	ldrb.w	r9, [r7, r9]
 8010eac:	f805 9c06 	strb.w	r9, [r5, #-6]
 8010eb0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010eb4:	f805 9c05 	strb.w	r9, [r5, #-5]
 8010eb8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010ebc:	f805 9c04 	strb.w	r9, [r5, #-4]
 8010ec0:	e7da      	b.n	8010e78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8010ec2:	2500      	movs	r5, #0
 8010ec4:	eba3 0c05 	sub.w	ip, r3, r5
 8010ec8:	f1bc 0f00 	cmp.w	ip, #0
 8010ecc:	dc3b      	bgt.n	8010f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8010ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010ed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ed6:	441c      	add	r4, r3
 8010ed8:	9b00      	ldr	r3, [sp, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dd5e      	ble.n	8010f9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010ede:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ee4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010ee8:	eeb0 6a62 	vmov.f32	s12, s5
 8010eec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010ef0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010ef4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010ef8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010efc:	eeb0 6a43 	vmov.f32	s12, s6
 8010f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010f04:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010f08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010f20:	ee12 2a90 	vmov	r2, s5
 8010f24:	eef0 2a47 	vmov.f32	s5, s14
 8010f28:	fb92 f8f3 	sdiv	r8, r2, r3
 8010f2c:	ee13 2a10 	vmov	r2, s6
 8010f30:	eeb0 3a67 	vmov.f32	s6, s15
 8010f34:	fb92 fef3 	sdiv	lr, r2, r3
 8010f38:	9b00      	ldr	r3, [sp, #0]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f40:	bf08      	it	eq
 8010f42:	465b      	moveq	r3, fp
 8010f44:	e767      	b.n	8010e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8010f46:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010f4a:	d423      	bmi.n	8010f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010f4c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8010f50:	45cc      	cmp	ip, r9
 8010f52:	dd1f      	ble.n	8010f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010f54:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010f58:	d41c      	bmi.n	8010f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010f5a:	68f1      	ldr	r1, [r6, #12]
 8010f5c:	4551      	cmp	r1, sl
 8010f5e:	dd19      	ble.n	8010f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010f60:	fa0f fc8c 	sxth.w	ip, ip
 8010f64:	9901      	ldr	r1, [sp, #4]
 8010f66:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8010f6a:	f81c c009 	ldrb.w	ip, [ip, r9]
 8010f6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010f72:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8010f76:	eb07 090c 	add.w	r9, r7, ip
 8010f7a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8010f7e:	f804 a00c 	strb.w	sl, [r4, ip]
 8010f82:	44a4      	add	ip, r4
 8010f84:	f899 a001 	ldrb.w	sl, [r9, #1]
 8010f88:	f88c a001 	strb.w	sl, [ip, #1]
 8010f8c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8010f90:	f88c 9002 	strb.w	r9, [ip, #2]
 8010f94:	4440      	add	r0, r8
 8010f96:	4472      	add	r2, lr
 8010f98:	3501      	adds	r5, #1
 8010f9a:	e793      	b.n	8010ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8010f9c:	b003      	add	sp, #12
 8010f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010fae:	9202      	str	r2, [sp, #8]
 8010fb0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010fb4:	6860      	ldr	r0, [r4, #4]
 8010fb6:	9203      	str	r2, [sp, #12]
 8010fb8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010fbc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010fc0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010fc4:	fb00 2505 	mla	r5, r0, r5, r2
 8010fc8:	6822      	ldr	r2, [r4, #0]
 8010fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fce:	4415      	add	r5, r2
 8010fd0:	f8dc 2000 	ldr.w	r2, [ip]
 8010fd4:	9200      	str	r2, [sp, #0]
 8010fd6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010fda:	3204      	adds	r2, #4
 8010fdc:	9201      	str	r2, [sp, #4]
 8010fde:	2900      	cmp	r1, #0
 8010fe0:	dc03      	bgt.n	8010fea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010fe2:	9a02      	ldr	r2, [sp, #8]
 8010fe4:	2a00      	cmp	r2, #0
 8010fe6:	f340 8127 	ble.w	8011238 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010ff0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ff6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010ffa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	dd0d      	ble.n	801101e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011002:	1422      	asrs	r2, r4, #16
 8011004:	d405      	bmi.n	8011012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011006:	4542      	cmp	r2, r8
 8011008:	da03      	bge.n	8011012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801100a:	1402      	asrs	r2, r0, #16
 801100c:	d401      	bmi.n	8011012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801100e:	42ba      	cmp	r2, r7
 8011010:	db06      	blt.n	8011020 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011014:	4474      	add	r4, lr
 8011016:	3b01      	subs	r3, #1
 8011018:	3503      	adds	r5, #3
 801101a:	4410      	add	r0, r2
 801101c:	e7ef      	b.n	8010ffe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801101e:	d075      	beq.n	801110c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8011020:	1e5a      	subs	r2, r3, #1
 8011022:	fb0e 4602 	mla	r6, lr, r2, r4
 8011026:	1436      	asrs	r6, r6, #16
 8011028:	d465      	bmi.n	80110f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801102a:	4546      	cmp	r6, r8
 801102c:	da63      	bge.n	80110f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801102e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011030:	fb06 0202 	mla	r2, r6, r2, r0
 8011034:	1412      	asrs	r2, r2, #16
 8011036:	d45e      	bmi.n	80110f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011038:	42ba      	cmp	r2, r7
 801103a:	da5c      	bge.n	80110f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801103c:	1cef      	adds	r7, r5, #3
 801103e:	4699      	mov	r9, r3
 8011040:	f1b9 0f00 	cmp.w	r9, #0
 8011044:	dd5d      	ble.n	8011102 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8011046:	1402      	asrs	r2, r0, #16
 8011048:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801104c:	1426      	asrs	r6, r4, #16
 801104e:	4692      	mov	sl, r2
 8011050:	9a00      	ldr	r2, [sp, #0]
 8011052:	fb08 220a 	mla	r2, r8, sl, r2
 8011056:	5d92      	ldrb	r2, [r2, r6]
 8011058:	9e01      	ldr	r6, [sp, #4]
 801105a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801105e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8011062:	d041      	beq.n	80110e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011064:	9a03      	ldr	r2, [sp, #12]
 8011066:	fa5f fb86 	uxtb.w	fp, r6
 801106a:	fb02 f808 	mul.w	r8, r2, r8
 801106e:	f108 0201 	add.w	r2, r8, #1
 8011072:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8011076:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801107a:	1212      	asrs	r2, r2, #8
 801107c:	fa1f fa82 	uxth.w	sl, r2
 8011080:	43d2      	mvns	r2, r2
 8011082:	fb1b fb0a 	smulbb	fp, fp, sl
 8011086:	b2d2      	uxtb	r2, r2
 8011088:	fb08 b802 	mla	r8, r8, r2, fp
 801108c:	fa1f f888 	uxth.w	r8, r8
 8011090:	f108 0b01 	add.w	fp, r8, #1
 8011094:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011098:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801109c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80110a0:	fb1b fb0a 	smulbb	fp, fp, sl
 80110a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80110a8:	fb16 fa0a 	smulbb	sl, r6, sl
 80110ac:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80110b0:	f807 8c03 	strb.w	r8, [r7, #-3]
 80110b4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80110b8:	fb06 aa02 	mla	sl, r6, r2, sl
 80110bc:	fb08 b802 	mla	r8, r8, r2, fp
 80110c0:	fa1f fa8a 	uxth.w	sl, sl
 80110c4:	fa1f f888 	uxth.w	r8, r8
 80110c8:	f10a 0601 	add.w	r6, sl, #1
 80110cc:	f108 0b01 	add.w	fp, r8, #1
 80110d0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80110d4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80110d8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80110dc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80110e0:	f807 ac01 	strb.w	sl, [r7, #-1]
 80110e4:	f807 8c02 	strb.w	r8, [r7, #-2]
 80110e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110ea:	4474      	add	r4, lr
 80110ec:	3703      	adds	r7, #3
 80110ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80110f2:	4410      	add	r0, r2
 80110f4:	e7a4      	b.n	8011040 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80110f6:	f04f 0800 	mov.w	r8, #0
 80110fa:	eba3 0208 	sub.w	r2, r3, r8
 80110fe:	2a00      	cmp	r2, #0
 8011100:	dc3b      	bgt.n	801117a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8011102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801110a:	441d      	add	r5, r3
 801110c:	2900      	cmp	r1, #0
 801110e:	f340 8093 	ble.w	8011238 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8011112:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011118:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801111c:	3901      	subs	r1, #1
 801111e:	eeb0 6a62 	vmov.f32	s12, s5
 8011122:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011126:	ee31 1a05 	vadd.f32	s2, s2, s10
 801112a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801112e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011132:	eeb0 6a43 	vmov.f32	s12, s6
 8011136:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801113a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801113e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011142:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011146:	ee77 2a62 	vsub.f32	s5, s14, s5
 801114a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801114e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011152:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011156:	ee12 2a90 	vmov	r2, s5
 801115a:	eef0 2a47 	vmov.f32	s5, s14
 801115e:	fb92 fef3 	sdiv	lr, r2, r3
 8011162:	ee13 2a10 	vmov	r2, s6
 8011166:	eeb0 3a67 	vmov.f32	s6, s15
 801116a:	fb92 f3f3 	sdiv	r3, r2, r3
 801116e:	9a02      	ldr	r2, [sp, #8]
 8011170:	9312      	str	r3, [sp, #72]	; 0x48
 8011172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011174:	bf08      	it	eq
 8011176:	4613      	moveq	r3, r2
 8011178:	e731      	b.n	8010fde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801117a:	1427      	asrs	r7, r4, #16
 801117c:	d456      	bmi.n	801122c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801117e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011182:	42be      	cmp	r6, r7
 8011184:	dd52      	ble.n	801122c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011186:	ea5f 4920 	movs.w	r9, r0, asr #16
 801118a:	d44f      	bmi.n	801122c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801118c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011190:	454a      	cmp	r2, r9
 8011192:	dd4b      	ble.n	801122c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011194:	9a00      	ldr	r2, [sp, #0]
 8011196:	b236      	sxth	r6, r6
 8011198:	fb09 2606 	mla	r6, r9, r6, r2
 801119c:	5df2      	ldrb	r2, [r6, r7]
 801119e:	9e01      	ldr	r6, [sp, #4]
 80111a0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80111a4:	0e3a      	lsrs	r2, r7, #24
 80111a6:	d041      	beq.n	801122c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80111a8:	9e03      	ldr	r6, [sp, #12]
 80111aa:	fa5f fb87 	uxtb.w	fp, r7
 80111ae:	4372      	muls	r2, r6
 80111b0:	1c56      	adds	r6, r2, #1
 80111b2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80111b6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80111ba:	1212      	asrs	r2, r2, #8
 80111bc:	f815 9006 	ldrb.w	r9, [r5, r6]
 80111c0:	fa1f fa82 	uxth.w	sl, r2
 80111c4:	43d2      	mvns	r2, r2
 80111c6:	fb1b fb0a 	smulbb	fp, fp, sl
 80111ca:	b2d2      	uxtb	r2, r2
 80111cc:	fb09 b902 	mla	r9, r9, r2, fp
 80111d0:	fa1f f989 	uxth.w	r9, r9
 80111d4:	f109 0b01 	add.w	fp, r9, #1
 80111d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80111dc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80111e0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80111e4:	fb1b fb0a 	smulbb	fp, fp, sl
 80111e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80111ec:	fb17 fa0a 	smulbb	sl, r7, sl
 80111f0:	f805 9006 	strb.w	r9, [r5, r6]
 80111f4:	442e      	add	r6, r5
 80111f6:	78b7      	ldrb	r7, [r6, #2]
 80111f8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80111fc:	fb07 aa02 	mla	sl, r7, r2, sl
 8011200:	fb09 b902 	mla	r9, r9, r2, fp
 8011204:	fa1f fa8a 	uxth.w	sl, sl
 8011208:	fa1f f989 	uxth.w	r9, r9
 801120c:	f10a 0701 	add.w	r7, sl, #1
 8011210:	f109 0b01 	add.w	fp, r9, #1
 8011214:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011218:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801121c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011220:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011224:	f886 a002 	strb.w	sl, [r6, #2]
 8011228:	f886 9001 	strb.w	r9, [r6, #1]
 801122c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801122e:	4474      	add	r4, lr
 8011230:	f108 0801 	add.w	r8, r8, #1
 8011234:	4410      	add	r0, r2
 8011236:	e760      	b.n	80110fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8011238:	b005      	add	sp, #20
 801123a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801123e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801123e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011242:	b085      	sub	sp, #20
 8011244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011248:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801124a:	9203      	str	r2, [sp, #12]
 801124c:	6868      	ldr	r0, [r5, #4]
 801124e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011252:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011256:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801125a:	fb00 2404 	mla	r4, r0, r4, r2
 801125e:	682a      	ldr	r2, [r5, #0]
 8011260:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011264:	4414      	add	r4, r2
 8011266:	f8dc 2000 	ldr.w	r2, [ip]
 801126a:	9201      	str	r2, [sp, #4]
 801126c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011270:	3204      	adds	r2, #4
 8011272:	9202      	str	r2, [sp, #8]
 8011274:	2900      	cmp	r1, #0
 8011276:	dc03      	bgt.n	8011280 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8011278:	9a03      	ldr	r2, [sp, #12]
 801127a:	2a00      	cmp	r2, #0
 801127c:	f340 8137 	ble.w	80114ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011282:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011286:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801128a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801128c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011290:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011294:	2b00      	cmp	r3, #0
 8011296:	dd0d      	ble.n	80112b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8011298:	1405      	asrs	r5, r0, #16
 801129a:	d405      	bmi.n	80112a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801129c:	4545      	cmp	r5, r8
 801129e:	da03      	bge.n	80112a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80112a0:	1415      	asrs	r5, r2, #16
 80112a2:	d401      	bmi.n	80112a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80112a4:	42bd      	cmp	r5, r7
 80112a6:	db06      	blt.n	80112b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80112a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80112aa:	4470      	add	r0, lr
 80112ac:	3b01      	subs	r3, #1
 80112ae:	3403      	adds	r4, #3
 80112b0:	442a      	add	r2, r5
 80112b2:	e7ef      	b.n	8011294 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80112b4:	d070      	beq.n	8011398 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80112b6:	1e5d      	subs	r5, r3, #1
 80112b8:	fb0e 0605 	mla	r6, lr, r5, r0
 80112bc:	1436      	asrs	r6, r6, #16
 80112be:	d462      	bmi.n	8011386 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80112c0:	4546      	cmp	r6, r8
 80112c2:	da60      	bge.n	8011386 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80112c4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80112c6:	fb06 2505 	mla	r5, r6, r5, r2
 80112ca:	142d      	asrs	r5, r5, #16
 80112cc:	d45b      	bmi.n	8011386 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80112ce:	42bd      	cmp	r5, r7
 80112d0:	da59      	bge.n	8011386 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80112d2:	1ce5      	adds	r5, r4, #3
 80112d4:	469a      	mov	sl, r3
 80112d6:	f1ba 0f00 	cmp.w	sl, #0
 80112da:	dd58      	ble.n	801138e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80112dc:	1416      	asrs	r6, r2, #16
 80112de:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80112e2:	1407      	asrs	r7, r0, #16
 80112e4:	46b1      	mov	r9, r6
 80112e6:	9e01      	ldr	r6, [sp, #4]
 80112e8:	fb08 6609 	mla	r6, r8, r9, r6
 80112ec:	5df6      	ldrb	r6, [r6, r7]
 80112ee:	9f02      	ldr	r7, [sp, #8]
 80112f0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80112f4:	0e37      	lsrs	r7, r6, #24
 80112f6:	2fff      	cmp	r7, #255	; 0xff
 80112f8:	f000 80f0 	beq.w	80114dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80112fc:	fa5f f887 	uxtb.w	r8, r7
 8011300:	b3d7      	cbz	r7, 8011378 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011302:	fa1f f788 	uxth.w	r7, r8
 8011306:	ea6f 0808 	mvn.w	r8, r8
 801130a:	fa5f fb86 	uxtb.w	fp, r6
 801130e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8011312:	fa5f f888 	uxtb.w	r8, r8
 8011316:	fb1b fb07 	smulbb	fp, fp, r7
 801131a:	fb09 b908 	mla	r9, r9, r8, fp
 801131e:	fa1f f989 	uxth.w	r9, r9
 8011322:	f109 0b01 	add.w	fp, r9, #1
 8011326:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801132a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801132e:	fb1b fb08 	smulbb	fp, fp, r8
 8011332:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011336:	f805 9c03 	strb.w	r9, [r5, #-3]
 801133a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801133e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011342:	fb09 b907 	mla	r9, r9, r7, fp
 8011346:	fa1f f989 	uxth.w	r9, r9
 801134a:	f109 0b01 	add.w	fp, r9, #1
 801134e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011352:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011356:	f805 9c02 	strb.w	r9, [r5, #-2]
 801135a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801135e:	fb19 f808 	smulbb	r8, r9, r8
 8011362:	fb06 8607 	mla	r6, r6, r7, r8
 8011366:	b2b6      	uxth	r6, r6
 8011368:	f106 0801 	add.w	r8, r6, #1
 801136c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8011370:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011374:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011378:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801137a:	4470      	add	r0, lr
 801137c:	3503      	adds	r5, #3
 801137e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011382:	4432      	add	r2, r6
 8011384:	e7a7      	b.n	80112d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011386:	2600      	movs	r6, #0
 8011388:	1b9d      	subs	r5, r3, r6
 801138a:	2d00      	cmp	r5, #0
 801138c:	dc3b      	bgt.n	8011406 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801138e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011392:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011396:	441c      	add	r4, r3
 8011398:	2900      	cmp	r1, #0
 801139a:	f340 80a8 	ble.w	80114ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801139e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80113a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80113a8:	3901      	subs	r1, #1
 80113aa:	eeb0 6a62 	vmov.f32	s12, s5
 80113ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80113b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80113b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80113ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80113be:	eeb0 6a43 	vmov.f32	s12, s6
 80113c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80113c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80113ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80113ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80113d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80113d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80113da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80113de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80113e2:	ee12 2a90 	vmov	r2, s5
 80113e6:	eef0 2a47 	vmov.f32	s5, s14
 80113ea:	fb92 fef3 	sdiv	lr, r2, r3
 80113ee:	ee13 2a10 	vmov	r2, s6
 80113f2:	eeb0 3a67 	vmov.f32	s6, s15
 80113f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80113fa:	9a03      	ldr	r2, [sp, #12]
 80113fc:	9312      	str	r3, [sp, #72]	; 0x48
 80113fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011400:	bf08      	it	eq
 8011402:	4613      	moveq	r3, r2
 8011404:	e736      	b.n	8011274 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8011406:	ea5f 4820 	movs.w	r8, r0, asr #16
 801140a:	d457      	bmi.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801140c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8011410:	4547      	cmp	r7, r8
 8011412:	dd53      	ble.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011414:	ea5f 4922 	movs.w	r9, r2, asr #16
 8011418:	d450      	bmi.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801141a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801141e:	454d      	cmp	r5, r9
 8011420:	dd4c      	ble.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011422:	9d01      	ldr	r5, [sp, #4]
 8011424:	b23f      	sxth	r7, r7
 8011426:	fb09 5707 	mla	r7, r9, r7, r5
 801142a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801142e:	9f02      	ldr	r7, [sp, #8]
 8011430:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8011434:	0e2f      	lsrs	r7, r5, #24
 8011436:	2fff      	cmp	r7, #255	; 0xff
 8011438:	d045      	beq.n	80114c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801143a:	fa5f f987 	uxtb.w	r9, r7
 801143e:	b3ef      	cbz	r7, 80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011440:	fa1f f889 	uxth.w	r8, r9
 8011444:	ea6f 0909 	mvn.w	r9, r9
 8011448:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801144c:	fa5f fb85 	uxtb.w	fp, r5
 8011450:	f814 a007 	ldrb.w	sl, [r4, r7]
 8011454:	fa5f f989 	uxtb.w	r9, r9
 8011458:	fb1b fb08 	smulbb	fp, fp, r8
 801145c:	fb0a ba09 	mla	sl, sl, r9, fp
 8011460:	fa1f fa8a 	uxth.w	sl, sl
 8011464:	f10a 0b01 	add.w	fp, sl, #1
 8011468:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801146c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011470:	f804 a007 	strb.w	sl, [r4, r7]
 8011474:	4427      	add	r7, r4
 8011476:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801147a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801147e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8011482:	fb1b fb09 	smulbb	fp, fp, r9
 8011486:	fb0a ba08 	mla	sl, sl, r8, fp
 801148a:	fa1f fa8a 	uxth.w	sl, sl
 801148e:	f10a 0b01 	add.w	fp, sl, #1
 8011492:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8011496:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801149a:	f887 a001 	strb.w	sl, [r7, #1]
 801149e:	f897 a002 	ldrb.w	sl, [r7, #2]
 80114a2:	fb1a f909 	smulbb	r9, sl, r9
 80114a6:	fb05 9508 	mla	r5, r5, r8, r9
 80114aa:	b2ad      	uxth	r5, r5
 80114ac:	f105 0901 	add.w	r9, r5, #1
 80114b0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80114b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80114b8:	f887 9002 	strb.w	r9, [r7, #2]
 80114bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80114be:	4470      	add	r0, lr
 80114c0:	3601      	adds	r6, #1
 80114c2:	442a      	add	r2, r5
 80114c4:	e760      	b.n	8011388 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80114c6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80114ca:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80114ce:	55e5      	strb	r5, [r4, r7]
 80114d0:	4427      	add	r7, r4
 80114d2:	0c2d      	lsrs	r5, r5, #16
 80114d4:	f887 8001 	strb.w	r8, [r7, #1]
 80114d8:	70bd      	strb	r5, [r7, #2]
 80114da:	e7ef      	b.n	80114bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80114dc:	0a37      	lsrs	r7, r6, #8
 80114de:	f805 6c03 	strb.w	r6, [r5, #-3]
 80114e2:	0c36      	lsrs	r6, r6, #16
 80114e4:	f805 7c02 	strb.w	r7, [r5, #-2]
 80114e8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80114ec:	e744      	b.n	8011378 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80114ee:	b005      	add	sp, #20
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80114f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80114fa:	9201      	str	r2, [sp, #4]
 80114fc:	6870      	ldr	r0, [r6, #4]
 80114fe:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011502:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8011506:	fa1f fe85 	uxth.w	lr, r5
 801150a:	43ed      	mvns	r5, r5
 801150c:	f8dc 8000 	ldr.w	r8, [ip]
 8011510:	b2ed      	uxtb	r5, r5
 8011512:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011516:	fb00 2404 	mla	r4, r0, r4, r2
 801151a:	6832      	ldr	r2, [r6, #0]
 801151c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011520:	4414      	add	r4, r2
 8011522:	2900      	cmp	r1, #0
 8011524:	dc03      	bgt.n	801152e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8011526:	9a01      	ldr	r2, [sp, #4]
 8011528:	2a00      	cmp	r2, #0
 801152a:	f340 810d 	ble.w	8011748 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801152e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011530:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8011534:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801153a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801153e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011542:	2b00      	cmp	r3, #0
 8011544:	dd0e      	ble.n	8011564 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011546:	1406      	asrs	r6, r0, #16
 8011548:	d405      	bmi.n	8011556 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801154a:	4556      	cmp	r6, sl
 801154c:	da03      	bge.n	8011556 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801154e:	1416      	asrs	r6, r2, #16
 8011550:	d401      	bmi.n	8011556 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8011552:	454e      	cmp	r6, r9
 8011554:	db07      	blt.n	8011566 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011556:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011558:	3b01      	subs	r3, #1
 801155a:	3403      	adds	r4, #3
 801155c:	4430      	add	r0, r6
 801155e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011560:	4432      	add	r2, r6
 8011562:	e7ee      	b.n	8011542 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8011564:	d060      	beq.n	8011628 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8011566:	1e5e      	subs	r6, r3, #1
 8011568:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801156a:	fb07 0706 	mla	r7, r7, r6, r0
 801156e:	143f      	asrs	r7, r7, #16
 8011570:	d451      	bmi.n	8011616 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011572:	4557      	cmp	r7, sl
 8011574:	da4f      	bge.n	8011616 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011576:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011578:	fb07 2606 	mla	r6, r7, r6, r2
 801157c:	1436      	asrs	r6, r6, #16
 801157e:	d44a      	bmi.n	8011616 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011580:	454e      	cmp	r6, r9
 8011582:	da48      	bge.n	8011616 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011584:	1ce6      	adds	r6, r4, #3
 8011586:	4699      	mov	r9, r3
 8011588:	f1b9 0f00 	cmp.w	r9, #0
 801158c:	f106 0603 	add.w	r6, r6, #3
 8011590:	dd45      	ble.n	801161e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8011592:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8011596:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801159a:	1417      	asrs	r7, r2, #16
 801159c:	f109 39ff 	add.w	r9, r9, #4294967295
 80115a0:	fb0b a707 	mla	r7, fp, r7, sl
 80115a4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80115a8:	fb1b fb05 	smulbb	fp, fp, r5
 80115ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80115b0:	eb08 0a07 	add.w	sl, r8, r7
 80115b4:	f818 7007 	ldrb.w	r7, [r8, r7]
 80115b8:	fb07 b70e 	mla	r7, r7, lr, fp
 80115bc:	b2bf      	uxth	r7, r7
 80115be:	f107 0b01 	add.w	fp, r7, #1
 80115c2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80115c6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80115ca:	fb1b fb05 	smulbb	fp, fp, r5
 80115ce:	123f      	asrs	r7, r7, #8
 80115d0:	f806 7c06 	strb.w	r7, [r6, #-6]
 80115d4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80115d8:	fb07 b70e 	mla	r7, r7, lr, fp
 80115dc:	b2bf      	uxth	r7, r7
 80115de:	f107 0b01 	add.w	fp, r7, #1
 80115e2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80115e6:	123f      	asrs	r7, r7, #8
 80115e8:	f806 7c05 	strb.w	r7, [r6, #-5]
 80115ec:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80115f0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80115f4:	fb1a fa05 	smulbb	sl, sl, r5
 80115f8:	fb07 a70e 	mla	r7, r7, lr, sl
 80115fc:	b2bf      	uxth	r7, r7
 80115fe:	f107 0a01 	add.w	sl, r7, #1
 8011602:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8011606:	123f      	asrs	r7, r7, #8
 8011608:	f806 7c04 	strb.w	r7, [r6, #-4]
 801160c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801160e:	4438      	add	r0, r7
 8011610:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011612:	443a      	add	r2, r7
 8011614:	e7b8      	b.n	8011588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8011616:	2700      	movs	r7, #0
 8011618:	1bde      	subs	r6, r3, r7
 801161a:	2e00      	cmp	r6, #0
 801161c:	dc3f      	bgt.n	801169e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801161e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011626:	441c      	add	r4, r3
 8011628:	2900      	cmp	r1, #0
 801162a:	f340 808d 	ble.w	8011748 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801162e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011634:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011638:	3901      	subs	r1, #1
 801163a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801163e:	eef0 6a62 	vmov.f32	s13, s5
 8011642:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011646:	ee31 1a05 	vadd.f32	s2, s2, s10
 801164a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801164e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8011652:	eef0 6a43 	vmov.f32	s13, s6
 8011656:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801165a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801165e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011662:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011666:	ee77 2a62 	vsub.f32	s5, s14, s5
 801166a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801166e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011672:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011676:	ee12 2a90 	vmov	r2, s5
 801167a:	eef0 2a47 	vmov.f32	s5, s14
 801167e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011682:	ee13 2a10 	vmov	r2, s6
 8011686:	930f      	str	r3, [sp, #60]	; 0x3c
 8011688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801168a:	eeb0 3a67 	vmov.f32	s6, s15
 801168e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011692:	9a01      	ldr	r2, [sp, #4]
 8011694:	9310      	str	r3, [sp, #64]	; 0x40
 8011696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011698:	bf08      	it	eq
 801169a:	4613      	moveq	r3, r2
 801169c:	e741      	b.n	8011522 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801169e:	ea5f 4920 	movs.w	r9, r0, asr #16
 80116a2:	d44b      	bmi.n	801173c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80116a4:	f8dc b008 	ldr.w	fp, [ip, #8]
 80116a8:	45cb      	cmp	fp, r9
 80116aa:	dd47      	ble.n	801173c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80116ac:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80116b0:	d444      	bmi.n	801173c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80116b2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80116b6:	4556      	cmp	r6, sl
 80116b8:	dd40      	ble.n	801173c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80116ba:	fa0f f68b 	sxth.w	r6, fp
 80116be:	fb0a 9906 	mla	r9, sl, r6, r9
 80116c2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80116c6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80116ca:	f814 b006 	ldrb.w	fp, [r4, r6]
 80116ce:	fb1b fb05 	smulbb	fp, fp, r5
 80116d2:	eb08 0a09 	add.w	sl, r8, r9
 80116d6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80116da:	fb09 b90e 	mla	r9, r9, lr, fp
 80116de:	fa1f f989 	uxth.w	r9, r9
 80116e2:	f109 0b01 	add.w	fp, r9, #1
 80116e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80116ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80116ee:	f804 9006 	strb.w	r9, [r4, r6]
 80116f2:	4426      	add	r6, r4
 80116f4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80116f8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80116fc:	fb1b fb05 	smulbb	fp, fp, r5
 8011700:	fb09 b90e 	mla	r9, r9, lr, fp
 8011704:	fa1f f989 	uxth.w	r9, r9
 8011708:	f109 0b01 	add.w	fp, r9, #1
 801170c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011710:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011714:	f886 9001 	strb.w	r9, [r6, #1]
 8011718:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801171c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8011720:	fb1a fa05 	smulbb	sl, sl, r5
 8011724:	fb09 a90e 	mla	r9, r9, lr, sl
 8011728:	fa1f f989 	uxth.w	r9, r9
 801172c:	f109 0a01 	add.w	sl, r9, #1
 8011730:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8011734:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011738:	f886 9002 	strb.w	r9, [r6, #2]
 801173c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801173e:	3701      	adds	r7, #1
 8011740:	4430      	add	r0, r6
 8011742:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011744:	4432      	add	r2, r6
 8011746:	e767      	b.n	8011618 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8011748:	b003      	add	sp, #12
 801174a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801174e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801174e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011752:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011758:	9201      	str	r2, [sp, #4]
 801175a:	6868      	ldr	r0, [r5, #4]
 801175c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801175e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011762:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8011766:	fb00 2404 	mla	r4, r0, r4, r2
 801176a:	682a      	ldr	r2, [r5, #0]
 801176c:	f8d7 8000 	ldr.w	r8, [r7]
 8011770:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011774:	4414      	add	r4, r2
 8011776:	2900      	cmp	r1, #0
 8011778:	dc03      	bgt.n	8011782 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801177a:	9a01      	ldr	r2, [sp, #4]
 801177c:	2a00      	cmp	r2, #0
 801177e:	f340 80af 	ble.w	80118e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8011782:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011784:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8011788:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801178c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801178e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8011792:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011796:	2b00      	cmp	r3, #0
 8011798:	dd0c      	ble.n	80117b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801179a:	1405      	asrs	r5, r0, #16
 801179c:	d405      	bmi.n	80117aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801179e:	4555      	cmp	r5, sl
 80117a0:	da03      	bge.n	80117aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80117a2:	1415      	asrs	r5, r2, #16
 80117a4:	d401      	bmi.n	80117aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80117a6:	454d      	cmp	r5, r9
 80117a8:	db05      	blt.n	80117b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80117aa:	4470      	add	r0, lr
 80117ac:	4462      	add	r2, ip
 80117ae:	3b01      	subs	r3, #1
 80117b0:	3403      	adds	r4, #3
 80117b2:	e7f0      	b.n	8011796 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80117b4:	d038      	beq.n	8011828 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80117b6:	1e5d      	subs	r5, r3, #1
 80117b8:	fb0e 0605 	mla	r6, lr, r5, r0
 80117bc:	1436      	asrs	r6, r6, #16
 80117be:	d42a      	bmi.n	8011816 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80117c0:	4556      	cmp	r6, sl
 80117c2:	da28      	bge.n	8011816 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80117c4:	fb0c 2505 	mla	r5, ip, r5, r2
 80117c8:	142d      	asrs	r5, r5, #16
 80117ca:	d424      	bmi.n	8011816 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80117cc:	454d      	cmp	r5, r9
 80117ce:	da22      	bge.n	8011816 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80117d0:	1ce6      	adds	r6, r4, #3
 80117d2:	4699      	mov	r9, r3
 80117d4:	f1b9 0f00 	cmp.w	r9, #0
 80117d8:	f106 0603 	add.w	r6, r6, #3
 80117dc:	dd1f      	ble.n	801181e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80117de:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80117e2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80117e6:	1415      	asrs	r5, r2, #16
 80117e8:	4470      	add	r0, lr
 80117ea:	4462      	add	r2, ip
 80117ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80117f0:	fb0b a505 	mla	r5, fp, r5, sl
 80117f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117f8:	eb08 0a05 	add.w	sl, r8, r5
 80117fc:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011800:	f806 5c06 	strb.w	r5, [r6, #-6]
 8011804:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8011808:	f806 5c05 	strb.w	r5, [r6, #-5]
 801180c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8011810:	f806 5c04 	strb.w	r5, [r6, #-4]
 8011814:	e7de      	b.n	80117d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8011816:	2600      	movs	r6, #0
 8011818:	1b9d      	subs	r5, r3, r6
 801181a:	2d00      	cmp	r5, #0
 801181c:	dc38      	bgt.n	8011890 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801181e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011826:	441c      	add	r4, r3
 8011828:	2900      	cmp	r1, #0
 801182a:	dd59      	ble.n	80118e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801182c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011832:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011836:	3901      	subs	r1, #1
 8011838:	eeb0 6a62 	vmov.f32	s12, s5
 801183c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011840:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011844:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011848:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801184c:	eeb0 6a43 	vmov.f32	s12, s6
 8011850:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011854:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011858:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801185c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011860:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011864:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011868:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801186c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011870:	ee12 2a90 	vmov	r2, s5
 8011874:	eef0 2a47 	vmov.f32	s5, s14
 8011878:	fb92 fef3 	sdiv	lr, r2, r3
 801187c:	ee13 2a10 	vmov	r2, s6
 8011880:	eeb0 3a67 	vmov.f32	s6, s15
 8011884:	fb92 fcf3 	sdiv	ip, r2, r3
 8011888:	9a01      	ldr	r2, [sp, #4]
 801188a:	bf08      	it	eq
 801188c:	4613      	moveq	r3, r2
 801188e:	e772      	b.n	8011776 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011890:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011894:	d420      	bmi.n	80118d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011896:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801189a:	45cb      	cmp	fp, r9
 801189c:	dd1c      	ble.n	80118d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801189e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80118a2:	d419      	bmi.n	80118d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80118a4:	68fd      	ldr	r5, [r7, #12]
 80118a6:	4555      	cmp	r5, sl
 80118a8:	dd16      	ble.n	80118d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80118aa:	fa0f f58b 	sxth.w	r5, fp
 80118ae:	fb0a 9505 	mla	r5, sl, r5, r9
 80118b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118b6:	f818 9005 	ldrb.w	r9, [r8, r5]
 80118ba:	eb08 0b05 	add.w	fp, r8, r5
 80118be:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80118c2:	f804 9005 	strb.w	r9, [r4, r5]
 80118c6:	4425      	add	r5, r4
 80118c8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80118cc:	f885 9001 	strb.w	r9, [r5, #1]
 80118d0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80118d4:	f885 9002 	strb.w	r9, [r5, #2]
 80118d8:	4470      	add	r0, lr
 80118da:	4462      	add	r2, ip
 80118dc:	3601      	adds	r6, #1
 80118de:	e79b      	b.n	8011818 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80118e0:	b003      	add	sp, #12
 80118e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80118e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ea:	b085      	sub	sp, #20
 80118ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80118f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80118f2:	9202      	str	r2, [sp, #8]
 80118f4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80118f8:	6860      	ldr	r0, [r4, #4]
 80118fa:	9203      	str	r2, [sp, #12]
 80118fc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011900:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011904:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8011908:	fb00 2505 	mla	r5, r0, r5, r2
 801190c:	6822      	ldr	r2, [r4, #0]
 801190e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011912:	4415      	add	r5, r2
 8011914:	f8dc 2000 	ldr.w	r2, [ip]
 8011918:	9201      	str	r2, [sp, #4]
 801191a:	2900      	cmp	r1, #0
 801191c:	dc03      	bgt.n	8011926 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801191e:	9a02      	ldr	r2, [sp, #8]
 8011920:	2a00      	cmp	r2, #0
 8011922:	f340 8122 	ble.w	8011b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8011926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011928:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801192c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011930:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011932:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011936:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801193a:	2b00      	cmp	r3, #0
 801193c:	dd0d      	ble.n	801195a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801193e:	1422      	asrs	r2, r4, #16
 8011940:	d405      	bmi.n	801194e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011942:	4542      	cmp	r2, r8
 8011944:	da03      	bge.n	801194e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011946:	1402      	asrs	r2, r0, #16
 8011948:	d401      	bmi.n	801194e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801194a:	42ba      	cmp	r2, r7
 801194c:	db06      	blt.n	801195c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801194e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011950:	4474      	add	r4, lr
 8011952:	3b01      	subs	r3, #1
 8011954:	3503      	adds	r5, #3
 8011956:	4410      	add	r0, r2
 8011958:	e7ef      	b.n	801193a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801195a:	d072      	beq.n	8011a42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801195c:	1e5a      	subs	r2, r3, #1
 801195e:	fb0e 4602 	mla	r6, lr, r2, r4
 8011962:	1436      	asrs	r6, r6, #16
 8011964:	d462      	bmi.n	8011a2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011966:	4546      	cmp	r6, r8
 8011968:	da60      	bge.n	8011a2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801196a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801196c:	fb06 0202 	mla	r2, r6, r2, r0
 8011970:	1412      	asrs	r2, r2, #16
 8011972:	d45b      	bmi.n	8011a2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011974:	42ba      	cmp	r2, r7
 8011976:	da59      	bge.n	8011a2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011978:	1cef      	adds	r7, r5, #3
 801197a:	4699      	mov	r9, r3
 801197c:	f1b9 0f00 	cmp.w	r9, #0
 8011980:	dd5a      	ble.n	8011a38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011982:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011986:	1426      	asrs	r6, r4, #16
 8011988:	1402      	asrs	r2, r0, #16
 801198a:	fb08 6202 	mla	r2, r8, r2, r6
 801198e:	9e01      	ldr	r6, [sp, #4]
 8011990:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8011994:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8011998:	d041      	beq.n	8011a1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801199a:	9a03      	ldr	r2, [sp, #12]
 801199c:	fa5f fb86 	uxtb.w	fp, r6
 80119a0:	fb02 f808 	mul.w	r8, r2, r8
 80119a4:	f108 0201 	add.w	r2, r8, #1
 80119a8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80119ac:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80119b0:	1212      	asrs	r2, r2, #8
 80119b2:	fa1f fa82 	uxth.w	sl, r2
 80119b6:	43d2      	mvns	r2, r2
 80119b8:	fb1b fb0a 	smulbb	fp, fp, sl
 80119bc:	b2d2      	uxtb	r2, r2
 80119be:	fb08 b802 	mla	r8, r8, r2, fp
 80119c2:	fa1f f888 	uxth.w	r8, r8
 80119c6:	f108 0b01 	add.w	fp, r8, #1
 80119ca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80119ce:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80119d2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80119d6:	fb1b fb0a 	smulbb	fp, fp, sl
 80119da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80119de:	fb16 fa0a 	smulbb	sl, r6, sl
 80119e2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80119e6:	f807 8c03 	strb.w	r8, [r7, #-3]
 80119ea:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80119ee:	fb06 aa02 	mla	sl, r6, r2, sl
 80119f2:	fb08 b802 	mla	r8, r8, r2, fp
 80119f6:	fa1f fa8a 	uxth.w	sl, sl
 80119fa:	fa1f f888 	uxth.w	r8, r8
 80119fe:	f10a 0601 	add.w	r6, sl, #1
 8011a02:	f108 0b01 	add.w	fp, r8, #1
 8011a06:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8011a0a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011a0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011a12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011a16:	f807 ac01 	strb.w	sl, [r7, #-1]
 8011a1a:	f807 8c02 	strb.w	r8, [r7, #-2]
 8011a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a20:	4474      	add	r4, lr
 8011a22:	3703      	adds	r7, #3
 8011a24:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a28:	4410      	add	r0, r2
 8011a2a:	e7a7      	b.n	801197c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8011a2c:	f04f 0800 	mov.w	r8, #0
 8011a30:	eba3 0208 	sub.w	r2, r3, r8
 8011a34:	2a00      	cmp	r2, #0
 8011a36:	dc3b      	bgt.n	8011ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8011a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a40:	441d      	add	r5, r3
 8011a42:	2900      	cmp	r1, #0
 8011a44:	f340 8091 	ble.w	8011b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8011a48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011a52:	3901      	subs	r1, #1
 8011a54:	eeb0 6a62 	vmov.f32	s12, s5
 8011a58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011a5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011a60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a64:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011a68:	eeb0 6a43 	vmov.f32	s12, s6
 8011a6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a70:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011a74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011a78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011a7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011a80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011a84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011a88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011a8c:	ee12 2a90 	vmov	r2, s5
 8011a90:	eef0 2a47 	vmov.f32	s5, s14
 8011a94:	fb92 fef3 	sdiv	lr, r2, r3
 8011a98:	ee13 2a10 	vmov	r2, s6
 8011a9c:	eeb0 3a67 	vmov.f32	s6, s15
 8011aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8011aa4:	9a02      	ldr	r2, [sp, #8]
 8011aa6:	9312      	str	r3, [sp, #72]	; 0x48
 8011aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aaa:	bf08      	it	eq
 8011aac:	4613      	moveq	r3, r2
 8011aae:	e734      	b.n	801191a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011ab0:	1427      	asrs	r7, r4, #16
 8011ab2:	d454      	bmi.n	8011b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011ab4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011ab8:	42be      	cmp	r6, r7
 8011aba:	dd50      	ble.n	8011b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011abc:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011ac0:	d44d      	bmi.n	8011b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011ac2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011ac6:	454a      	cmp	r2, r9
 8011ac8:	dd49      	ble.n	8011b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011aca:	b236      	sxth	r6, r6
 8011acc:	9a01      	ldr	r2, [sp, #4]
 8011ace:	fb09 7606 	mla	r6, r9, r6, r7
 8011ad2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8011ad6:	0e3a      	lsrs	r2, r7, #24
 8011ad8:	d041      	beq.n	8011b5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011ada:	9e03      	ldr	r6, [sp, #12]
 8011adc:	fa5f fb87 	uxtb.w	fp, r7
 8011ae0:	4372      	muls	r2, r6
 8011ae2:	1c56      	adds	r6, r2, #1
 8011ae4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011ae8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8011aec:	1212      	asrs	r2, r2, #8
 8011aee:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011af2:	fa1f fa82 	uxth.w	sl, r2
 8011af6:	43d2      	mvns	r2, r2
 8011af8:	fb1b fb0a 	smulbb	fp, fp, sl
 8011afc:	b2d2      	uxtb	r2, r2
 8011afe:	fb09 b902 	mla	r9, r9, r2, fp
 8011b02:	fa1f f989 	uxth.w	r9, r9
 8011b06:	f109 0b01 	add.w	fp, r9, #1
 8011b0a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011b0e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011b12:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011b16:	fb1b fb0a 	smulbb	fp, fp, sl
 8011b1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011b1e:	fb17 fa0a 	smulbb	sl, r7, sl
 8011b22:	f805 9006 	strb.w	r9, [r5, r6]
 8011b26:	442e      	add	r6, r5
 8011b28:	78b7      	ldrb	r7, [r6, #2]
 8011b2a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011b2e:	fb07 aa02 	mla	sl, r7, r2, sl
 8011b32:	fb09 b902 	mla	r9, r9, r2, fp
 8011b36:	fa1f fa8a 	uxth.w	sl, sl
 8011b3a:	fa1f f989 	uxth.w	r9, r9
 8011b3e:	f10a 0701 	add.w	r7, sl, #1
 8011b42:	f109 0b01 	add.w	fp, r9, #1
 8011b46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011b4a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011b4e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011b52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011b56:	f886 a002 	strb.w	sl, [r6, #2]
 8011b5a:	f886 9001 	strb.w	r9, [r6, #1]
 8011b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b60:	4474      	add	r4, lr
 8011b62:	f108 0801 	add.w	r8, r8, #1
 8011b66:	4410      	add	r0, r2
 8011b68:	e762      	b.n	8011a30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8011b6a:	b005      	add	sp, #20
 8011b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b7a:	9201      	str	r2, [sp, #4]
 8011b7c:	6860      	ldr	r0, [r4, #4]
 8011b7e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8011b82:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8011b86:	fb00 2505 	mla	r5, r0, r5, r2
 8011b8a:	6822      	ldr	r2, [r4, #0]
 8011b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b90:	4415      	add	r5, r2
 8011b92:	f8dc 2000 	ldr.w	r2, [ip]
 8011b96:	9200      	str	r2, [sp, #0]
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	dc03      	bgt.n	8011ba4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011b9c:	9a01      	ldr	r2, [sp, #4]
 8011b9e:	2a00      	cmp	r2, #0
 8011ba0:	f340 812b 	ble.w	8011dfa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011ba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ba6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011baa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bb0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011bb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	dd0e      	ble.n	8011bda <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011bbc:	1422      	asrs	r2, r4, #16
 8011bbe:	d405      	bmi.n	8011bcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011bc0:	4572      	cmp	r2, lr
 8011bc2:	da03      	bge.n	8011bcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011bc4:	1402      	asrs	r2, r0, #16
 8011bc6:	d401      	bmi.n	8011bcc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011bc8:	42ba      	cmp	r2, r7
 8011bca:	db07      	blt.n	8011bdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8011bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	3503      	adds	r5, #3
 8011bd2:	4414      	add	r4, r2
 8011bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011bd6:	4410      	add	r0, r2
 8011bd8:	e7ee      	b.n	8011bb8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8011bda:	d06f      	beq.n	8011cbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8011bdc:	1e5a      	subs	r2, r3, #1
 8011bde:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011be0:	fb06 4602 	mla	r6, r6, r2, r4
 8011be4:	1436      	asrs	r6, r6, #16
 8011be6:	d45e      	bmi.n	8011ca6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011be8:	4576      	cmp	r6, lr
 8011bea:	da5c      	bge.n	8011ca6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011bec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011bee:	fb06 0202 	mla	r2, r6, r2, r0
 8011bf2:	1412      	asrs	r2, r2, #16
 8011bf4:	d457      	bmi.n	8011ca6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011bf6:	42ba      	cmp	r2, r7
 8011bf8:	da55      	bge.n	8011ca6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011bfa:	1cee      	adds	r6, r5, #3
 8011bfc:	469a      	mov	sl, r3
 8011bfe:	f1ba 0f00 	cmp.w	sl, #0
 8011c02:	dd56      	ble.n	8011cb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8011c04:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011c08:	1427      	asrs	r7, r4, #16
 8011c0a:	1402      	asrs	r2, r0, #16
 8011c0c:	fb0e 7202 	mla	r2, lr, r2, r7
 8011c10:	9f00      	ldr	r7, [sp, #0]
 8011c12:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8011c16:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8011c1a:	d03c      	beq.n	8011c96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8011c1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011c20:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011c24:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8011c28:	fa5f f28e 	uxtb.w	r2, lr
 8011c2c:	b2ff      	uxtb	r7, r7
 8011c2e:	f000 80dd 	beq.w	8011dec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8011c32:	fa1f f882 	uxth.w	r8, r2
 8011c36:	43d2      	mvns	r2, r2
 8011c38:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8011c3c:	fb17 f708 	smulbb	r7, r7, r8
 8011c40:	b2d2      	uxtb	r2, r2
 8011c42:	fb19 f908 	smulbb	r9, r9, r8
 8011c46:	fb0e 7702 	mla	r7, lr, r2, r7
 8011c4a:	fb1b f808 	smulbb	r8, fp, r8
 8011c4e:	b2bf      	uxth	r7, r7
 8011c50:	f107 0e01 	add.w	lr, r7, #1
 8011c54:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011c58:	123f      	asrs	r7, r7, #8
 8011c5a:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011c5e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8011c62:	fb07 9902 	mla	r9, r7, r2, r9
 8011c66:	fa1f f989 	uxth.w	r9, r9
 8011c6a:	f109 0701 	add.w	r7, r9, #1
 8011c6e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011c72:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011c76:	fb07 8802 	mla	r8, r7, r2, r8
 8011c7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011c7e:	fa1f f888 	uxth.w	r8, r8
 8011c82:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011c86:	f108 0201 	add.w	r2, r8, #1
 8011c8a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8011c8e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011c92:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c98:	3603      	adds	r6, #3
 8011c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c9e:	4414      	add	r4, r2
 8011ca0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ca2:	4410      	add	r0, r2
 8011ca4:	e7ab      	b.n	8011bfe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8011ca6:	f04f 0e00 	mov.w	lr, #0
 8011caa:	eba3 020e 	sub.w	r2, r3, lr
 8011cae:	2a00      	cmp	r2, #0
 8011cb0:	dc3d      	bgt.n	8011d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011cba:	441d      	add	r5, r3
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	f340 809c 	ble.w	8011dfa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011cc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011ccc:	3901      	subs	r1, #1
 8011cce:	eeb0 6a62 	vmov.f32	s12, s5
 8011cd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011cd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011cda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011cde:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011ce2:	eeb0 6a43 	vmov.f32	s12, s6
 8011ce6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011cea:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011cee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011cf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011cf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011cfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011cfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011d02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011d06:	ee12 2a90 	vmov	r2, s5
 8011d0a:	eef0 2a47 	vmov.f32	s5, s14
 8011d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d12:	ee13 2a10 	vmov	r2, s6
 8011d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d1a:	eeb0 3a67 	vmov.f32	s6, s15
 8011d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d22:	9a01      	ldr	r2, [sp, #4]
 8011d24:	9310      	str	r3, [sp, #64]	; 0x40
 8011d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d28:	bf08      	it	eq
 8011d2a:	4613      	moveq	r3, r2
 8011d2c:	e734      	b.n	8011b98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011d2e:	1427      	asrs	r7, r4, #16
 8011d30:	d44d      	bmi.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011d32:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011d36:	42be      	cmp	r6, r7
 8011d38:	dd49      	ble.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011d3a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011d3e:	d446      	bmi.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011d40:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011d44:	4542      	cmp	r2, r8
 8011d46:	dd42      	ble.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011d48:	b236      	sxth	r6, r6
 8011d4a:	9a00      	ldr	r2, [sp, #0]
 8011d4c:	fb08 7606 	mla	r6, r8, r6, r7
 8011d50:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8011d54:	0e3a      	lsrs	r2, r7, #24
 8011d56:	d03a      	beq.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011d58:	2aff      	cmp	r2, #255	; 0xff
 8011d5a:	b2d6      	uxtb	r6, r2
 8011d5c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011d60:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8011d64:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8011d68:	b2ff      	uxtb	r7, r7
 8011d6a:	d037      	beq.n	8011ddc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8011d6c:	fa1f f986 	uxth.w	r9, r6
 8011d70:	4472      	add	r2, lr
 8011d72:	43f6      	mvns	r6, r6
 8011d74:	f815 8002 	ldrb.w	r8, [r5, r2]
 8011d78:	fb17 f709 	smulbb	r7, r7, r9
 8011d7c:	fb1a fa09 	smulbb	sl, sl, r9
 8011d80:	b2f6      	uxtb	r6, r6
 8011d82:	fb1b f909 	smulbb	r9, fp, r9
 8011d86:	fb08 7706 	mla	r7, r8, r6, r7
 8011d8a:	b2bf      	uxth	r7, r7
 8011d8c:	f107 0801 	add.w	r8, r7, #1
 8011d90:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011d94:	123f      	asrs	r7, r7, #8
 8011d96:	54af      	strb	r7, [r5, r2]
 8011d98:	442a      	add	r2, r5
 8011d9a:	7857      	ldrb	r7, [r2, #1]
 8011d9c:	fb07 aa06 	mla	sl, r7, r6, sl
 8011da0:	fa1f fa8a 	uxth.w	sl, sl
 8011da4:	f10a 0701 	add.w	r7, sl, #1
 8011da8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011dac:	7897      	ldrb	r7, [r2, #2]
 8011dae:	fb07 9906 	mla	r9, r7, r6, r9
 8011db2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011db6:	fa1f f989 	uxth.w	r9, r9
 8011dba:	f882 a001 	strb.w	sl, [r2, #1]
 8011dbe:	f109 0601 	add.w	r6, r9, #1
 8011dc2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011dc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011dca:	f882 9002 	strb.w	r9, [r2, #2]
 8011dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dd0:	f10e 0e01 	add.w	lr, lr, #1
 8011dd4:	4414      	add	r4, r2
 8011dd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011dd8:	4410      	add	r0, r2
 8011dda:	e766      	b.n	8011caa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011ddc:	4472      	add	r2, lr
 8011dde:	54af      	strb	r7, [r5, r2]
 8011de0:	442a      	add	r2, r5
 8011de2:	f882 a001 	strb.w	sl, [r2, #1]
 8011de6:	f882 b002 	strb.w	fp, [r2, #2]
 8011dea:	e7f0      	b.n	8011dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011dec:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011df0:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011df4:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011df8:	e74d      	b.n	8011c96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8011dfa:	b003      	add	sp, #12
 8011dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	b087      	sub	sp, #28
 8011e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011e0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011e0c:	9204      	str	r2, [sp, #16]
 8011e0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011e12:	6860      	ldr	r0, [r4, #4]
 8011e14:	9205      	str	r2, [sp, #20]
 8011e16:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011e1a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8011e1e:	9101      	str	r1, [sp, #4]
 8011e20:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011e24:	fb00 2505 	mla	r5, r0, r5, r2
 8011e28:	6822      	ldr	r2, [r4, #0]
 8011e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e2e:	4415      	add	r5, r2
 8011e30:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011e34:	3201      	adds	r2, #1
 8011e36:	f022 0201 	bic.w	r2, r2, #1
 8011e3a:	9202      	str	r2, [sp, #8]
 8011e3c:	f8dc 2000 	ldr.w	r2, [ip]
 8011e40:	9203      	str	r2, [sp, #12]
 8011e42:	9a01      	ldr	r2, [sp, #4]
 8011e44:	2a00      	cmp	r2, #0
 8011e46:	dc03      	bgt.n	8011e50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8011e48:	9a04      	ldr	r2, [sp, #16]
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	f340 8135 	ble.w	80120ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8011e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011e52:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011e56:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011e5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e5c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011e60:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	dd0d      	ble.n	8011e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8011e68:	1422      	asrs	r2, r4, #16
 8011e6a:	d405      	bmi.n	8011e78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011e6c:	4542      	cmp	r2, r8
 8011e6e:	da03      	bge.n	8011e78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011e70:	1402      	asrs	r2, r0, #16
 8011e72:	d401      	bmi.n	8011e78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011e74:	42ba      	cmp	r2, r7
 8011e76:	db06      	blt.n	8011e86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8011e78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e7a:	4474      	add	r4, lr
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	3503      	adds	r5, #3
 8011e80:	4410      	add	r0, r2
 8011e82:	e7ef      	b.n	8011e64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011e84:	d077      	beq.n	8011f76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8011e86:	1e5a      	subs	r2, r3, #1
 8011e88:	fb0e 4602 	mla	r6, lr, r2, r4
 8011e8c:	1436      	asrs	r6, r6, #16
 8011e8e:	d469      	bmi.n	8011f64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011e90:	4546      	cmp	r6, r8
 8011e92:	da67      	bge.n	8011f64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011e94:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011e96:	fb06 0202 	mla	r2, r6, r2, r0
 8011e9a:	1412      	asrs	r2, r2, #16
 8011e9c:	d462      	bmi.n	8011f64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011e9e:	42ba      	cmp	r2, r7
 8011ea0:	da60      	bge.n	8011f64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011ea2:	1cee      	adds	r6, r5, #3
 8011ea4:	4699      	mov	r9, r3
 8011ea6:	f1b9 0f00 	cmp.w	r9, #0
 8011eaa:	dd5f      	ble.n	8011f6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8011eac:	1422      	asrs	r2, r4, #16
 8011eae:	9902      	ldr	r1, [sp, #8]
 8011eb0:	1407      	asrs	r7, r0, #16
 8011eb2:	fb01 2707 	mla	r7, r1, r7, r2
 8011eb6:	9903      	ldr	r1, [sp, #12]
 8011eb8:	087a      	lsrs	r2, r7, #1
 8011eba:	5c8a      	ldrb	r2, [r1, r2]
 8011ebc:	07f9      	lsls	r1, r7, #31
 8011ebe:	bf54      	ite	pl
 8011ec0:	f002 020f 	andpl.w	r2, r2, #15
 8011ec4:	1112      	asrmi	r2, r2, #4
 8011ec6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011eca:	b2d2      	uxtb	r2, r2
 8011ecc:	2a00      	cmp	r2, #0
 8011ece:	d042      	beq.n	8011f56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011ed0:	497b      	ldr	r1, [pc, #492]	; (80120c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011ed2:	680f      	ldr	r7, [r1, #0]
 8011ed4:	9905      	ldr	r1, [sp, #20]
 8011ed6:	fa5f fb87 	uxtb.w	fp, r7
 8011eda:	434a      	muls	r2, r1
 8011edc:	f102 0801 	add.w	r8, r2, #1
 8011ee0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8011ee4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8011ee8:	1212      	asrs	r2, r2, #8
 8011eea:	fa1f fa82 	uxth.w	sl, r2
 8011eee:	43d2      	mvns	r2, r2
 8011ef0:	fb1b fb0a 	smulbb	fp, fp, sl
 8011ef4:	b2d2      	uxtb	r2, r2
 8011ef6:	fb08 b802 	mla	r8, r8, r2, fp
 8011efa:	fa1f f888 	uxth.w	r8, r8
 8011efe:	f108 0b01 	add.w	fp, r8, #1
 8011f02:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011f06:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011f0a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011f0e:	fb1b fb0a 	smulbb	fp, fp, sl
 8011f12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011f16:	fb17 fa0a 	smulbb	sl, r7, sl
 8011f1a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011f1e:	f806 8c03 	strb.w	r8, [r6, #-3]
 8011f22:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8011f26:	fb07 aa02 	mla	sl, r7, r2, sl
 8011f2a:	fb08 b802 	mla	r8, r8, r2, fp
 8011f2e:	fa1f fa8a 	uxth.w	sl, sl
 8011f32:	fa1f f888 	uxth.w	r8, r8
 8011f36:	f10a 0701 	add.w	r7, sl, #1
 8011f3a:	f108 0b01 	add.w	fp, r8, #1
 8011f3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011f42:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011f46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011f4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011f4e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8011f52:	f806 8c02 	strb.w	r8, [r6, #-2]
 8011f56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f58:	4474      	add	r4, lr
 8011f5a:	3603      	adds	r6, #3
 8011f5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f60:	4410      	add	r0, r2
 8011f62:	e7a0      	b.n	8011ea6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8011f64:	2700      	movs	r7, #0
 8011f66:	1bda      	subs	r2, r3, r7
 8011f68:	2a00      	cmp	r2, #0
 8011f6a:	dc3e      	bgt.n	8011fea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8011f6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011f74:	441d      	add	r5, r3
 8011f76:	9b01      	ldr	r3, [sp, #4]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f340 809e 	ble.w	80120ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8011f7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011f82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011f88:	eeb0 6a62 	vmov.f32	s12, s5
 8011f8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011f90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011f94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011f98:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011f9c:	eeb0 6a43 	vmov.f32	s12, s6
 8011fa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011fa4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011fa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011fac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011fb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011fb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011fb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011fbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011fc0:	ee12 2a90 	vmov	r2, s5
 8011fc4:	eef0 2a47 	vmov.f32	s5, s14
 8011fc8:	fb92 fef3 	sdiv	lr, r2, r3
 8011fcc:	ee13 2a10 	vmov	r2, s6
 8011fd0:	eeb0 3a67 	vmov.f32	s6, s15
 8011fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011fd8:	9314      	str	r3, [sp, #80]	; 0x50
 8011fda:	9b01      	ldr	r3, [sp, #4]
 8011fdc:	9a04      	ldr	r2, [sp, #16]
 8011fde:	3b01      	subs	r3, #1
 8011fe0:	9301      	str	r3, [sp, #4]
 8011fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fe4:	bf08      	it	eq
 8011fe6:	4613      	moveq	r3, r2
 8011fe8:	e72b      	b.n	8011e42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8011fea:	1426      	asrs	r6, r4, #16
 8011fec:	d460      	bmi.n	80120b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011fee:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011ff2:	42b2      	cmp	r2, r6
 8011ff4:	dd5c      	ble.n	80120b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011ff6:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011ffa:	d459      	bmi.n	80120b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011ffc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012000:	4542      	cmp	r2, r8
 8012002:	dd55      	ble.n	80120b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012004:	9a02      	ldr	r2, [sp, #8]
 8012006:	9903      	ldr	r1, [sp, #12]
 8012008:	fb08 6602 	mla	r6, r8, r2, r6
 801200c:	0872      	lsrs	r2, r6, #1
 801200e:	07f6      	lsls	r6, r6, #31
 8012010:	5c8a      	ldrb	r2, [r1, r2]
 8012012:	bf54      	ite	pl
 8012014:	f002 020f 	andpl.w	r2, r2, #15
 8012018:	1112      	asrmi	r2, r2, #4
 801201a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801201e:	b2d2      	uxtb	r2, r2
 8012020:	2a00      	cmp	r2, #0
 8012022:	d045      	beq.n	80120b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012024:	4926      	ldr	r1, [pc, #152]	; (80120c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8012026:	f8d1 8000 	ldr.w	r8, [r1]
 801202a:	9905      	ldr	r1, [sp, #20]
 801202c:	fa5f fb88 	uxtb.w	fp, r8
 8012030:	434a      	muls	r2, r1
 8012032:	1c56      	adds	r6, r2, #1
 8012034:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012038:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801203c:	1212      	asrs	r2, r2, #8
 801203e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8012042:	fa1f fa82 	uxth.w	sl, r2
 8012046:	43d2      	mvns	r2, r2
 8012048:	fb1b fb0a 	smulbb	fp, fp, sl
 801204c:	b2d2      	uxtb	r2, r2
 801204e:	fb09 b902 	mla	r9, r9, r2, fp
 8012052:	fa1f f989 	uxth.w	r9, r9
 8012056:	f109 0b01 	add.w	fp, r9, #1
 801205a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801205e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8012062:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8012066:	fb1b fb0a 	smulbb	fp, fp, sl
 801206a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801206e:	fb18 fa0a 	smulbb	sl, r8, sl
 8012072:	f805 9006 	strb.w	r9, [r5, r6]
 8012076:	442e      	add	r6, r5
 8012078:	f896 8002 	ldrb.w	r8, [r6, #2]
 801207c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8012080:	fb08 aa02 	mla	sl, r8, r2, sl
 8012084:	fb09 b902 	mla	r9, r9, r2, fp
 8012088:	fa1f fa8a 	uxth.w	sl, sl
 801208c:	fa1f f989 	uxth.w	r9, r9
 8012090:	f10a 0801 	add.w	r8, sl, #1
 8012094:	f109 0b01 	add.w	fp, r9, #1
 8012098:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801209c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80120a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80120a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80120a8:	f886 a002 	strb.w	sl, [r6, #2]
 80120ac:	f886 9001 	strb.w	r9, [r6, #1]
 80120b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80120b2:	4474      	add	r4, lr
 80120b4:	3701      	adds	r7, #1
 80120b6:	4410      	add	r0, r2
 80120b8:	e755      	b.n	8011f66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80120ba:	b007      	add	sp, #28
 80120bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c0:	2400b22c 	.word	0x2400b22c

080120c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80120c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	b085      	sub	sp, #20
 80120ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80120ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80120d0:	9203      	str	r2, [sp, #12]
 80120d2:	6860      	ldr	r0, [r4, #4]
 80120d4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80120d8:	9100      	str	r1, [sp, #0]
 80120da:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80120de:	fb00 2606 	mla	r6, r0, r6, r2
 80120e2:	6822      	ldr	r2, [r4, #0]
 80120e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80120e8:	4416      	add	r6, r2
 80120ea:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80120ee:	3201      	adds	r2, #1
 80120f0:	f022 0201 	bic.w	r2, r2, #1
 80120f4:	9201      	str	r2, [sp, #4]
 80120f6:	f8dc 2000 	ldr.w	r2, [ip]
 80120fa:	9202      	str	r2, [sp, #8]
 80120fc:	9a00      	ldr	r2, [sp, #0]
 80120fe:	2a00      	cmp	r2, #0
 8012100:	dc03      	bgt.n	801210a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8012102:	9a03      	ldr	r2, [sp, #12]
 8012104:	2a00      	cmp	r2, #0
 8012106:	f340 8140 	ble.w	801238a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801210a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801210c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8012110:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8012114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012116:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801211a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801211e:	2b00      	cmp	r3, #0
 8012120:	dd0e      	ble.n	8012140 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012122:	142a      	asrs	r2, r5, #16
 8012124:	d405      	bmi.n	8012132 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012126:	4572      	cmp	r2, lr
 8012128:	da03      	bge.n	8012132 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801212a:	1422      	asrs	r2, r4, #16
 801212c:	d401      	bmi.n	8012132 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801212e:	42ba      	cmp	r2, r7
 8012130:	db07      	blt.n	8012142 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012134:	3b01      	subs	r3, #1
 8012136:	3603      	adds	r6, #3
 8012138:	4415      	add	r5, r2
 801213a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801213c:	4414      	add	r4, r2
 801213e:	e7ee      	b.n	801211e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8012140:	d072      	beq.n	8012228 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012142:	1e5a      	subs	r2, r3, #1
 8012144:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012146:	fb00 5002 	mla	r0, r0, r2, r5
 801214a:	1400      	asrs	r0, r0, #16
 801214c:	d463      	bmi.n	8012216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801214e:	4570      	cmp	r0, lr
 8012150:	da61      	bge.n	8012216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012152:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012154:	fb00 4202 	mla	r2, r0, r2, r4
 8012158:	1412      	asrs	r2, r2, #16
 801215a:	d45c      	bmi.n	8012216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801215c:	42ba      	cmp	r2, r7
 801215e:	da5a      	bge.n	8012216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012160:	1cf0      	adds	r0, r6, #3
 8012162:	469a      	mov	sl, r3
 8012164:	f1ba 0f00 	cmp.w	sl, #0
 8012168:	dd59      	ble.n	801221e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801216a:	142a      	asrs	r2, r5, #16
 801216c:	9901      	ldr	r1, [sp, #4]
 801216e:	1427      	asrs	r7, r4, #16
 8012170:	fb01 2707 	mla	r7, r1, r7, r2
 8012174:	9902      	ldr	r1, [sp, #8]
 8012176:	087a      	lsrs	r2, r7, #1
 8012178:	5c8a      	ldrb	r2, [r1, r2]
 801217a:	07f9      	lsls	r1, r7, #31
 801217c:	bf54      	ite	pl
 801217e:	f002 020f 	andpl.w	r2, r2, #15
 8012182:	1112      	asrmi	r2, r2, #4
 8012184:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012188:	b2d2      	uxtb	r2, r2
 801218a:	2a00      	cmp	r2, #0
 801218c:	d03b      	beq.n	8012206 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801218e:	4980      	ldr	r1, [pc, #512]	; (8012390 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8012190:	2aff      	cmp	r2, #255	; 0xff
 8012192:	680f      	ldr	r7, [r1, #0]
 8012194:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8012198:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801219c:	b2ff      	uxtb	r7, r7
 801219e:	f000 80ed 	beq.w	801237c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80121a2:	fa1f f882 	uxth.w	r8, r2
 80121a6:	43d2      	mvns	r2, r2
 80121a8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80121ac:	fb17 f708 	smulbb	r7, r7, r8
 80121b0:	b2d2      	uxtb	r2, r2
 80121b2:	fb19 f908 	smulbb	r9, r9, r8
 80121b6:	fb0e 7702 	mla	r7, lr, r2, r7
 80121ba:	fb1b f808 	smulbb	r8, fp, r8
 80121be:	b2bf      	uxth	r7, r7
 80121c0:	f107 0e01 	add.w	lr, r7, #1
 80121c4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80121c8:	123f      	asrs	r7, r7, #8
 80121ca:	f800 7c03 	strb.w	r7, [r0, #-3]
 80121ce:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80121d2:	fb07 9902 	mla	r9, r7, r2, r9
 80121d6:	fa1f f989 	uxth.w	r9, r9
 80121da:	f109 0701 	add.w	r7, r9, #1
 80121de:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80121e2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80121e6:	fb07 8802 	mla	r8, r7, r2, r8
 80121ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80121ee:	fa1f f888 	uxth.w	r8, r8
 80121f2:	f800 9c02 	strb.w	r9, [r0, #-2]
 80121f6:	f108 0201 	add.w	r2, r8, #1
 80121fa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80121fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012202:	f800 8c01 	strb.w	r8, [r0, #-1]
 8012206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012208:	3003      	adds	r0, #3
 801220a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801220e:	4415      	add	r5, r2
 8012210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012212:	4414      	add	r4, r2
 8012214:	e7a6      	b.n	8012164 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8012216:	2700      	movs	r7, #0
 8012218:	1bda      	subs	r2, r3, r7
 801221a:	2a00      	cmp	r2, #0
 801221c:	dc40      	bgt.n	80122a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801221e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012226:	441e      	add	r6, r3
 8012228:	9b00      	ldr	r3, [sp, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	f340 80ad 	ble.w	801238a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8012230:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012236:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801223a:	eeb0 6a62 	vmov.f32	s12, s5
 801223e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012242:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801224a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801224e:	eeb0 6a43 	vmov.f32	s12, s6
 8012252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012256:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801225a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801225e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012262:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012266:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801226a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801226e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012272:	ee12 2a90 	vmov	r2, s5
 8012276:	eef0 2a47 	vmov.f32	s5, s14
 801227a:	fb92 f3f3 	sdiv	r3, r2, r3
 801227e:	ee13 2a10 	vmov	r2, s6
 8012282:	9311      	str	r3, [sp, #68]	; 0x44
 8012284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012286:	eeb0 3a67 	vmov.f32	s6, s15
 801228a:	fb92 f3f3 	sdiv	r3, r2, r3
 801228e:	9312      	str	r3, [sp, #72]	; 0x48
 8012290:	9b00      	ldr	r3, [sp, #0]
 8012292:	9a03      	ldr	r2, [sp, #12]
 8012294:	3b01      	subs	r3, #1
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801229a:	bf08      	it	eq
 801229c:	4613      	moveq	r3, r2
 801229e:	e72d      	b.n	80120fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80122a0:	1428      	asrs	r0, r5, #16
 80122a2:	d45c      	bmi.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80122a4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80122a8:	4282      	cmp	r2, r0
 80122aa:	dd58      	ble.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80122ac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80122b0:	d455      	bmi.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80122b2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80122b6:	4572      	cmp	r2, lr
 80122b8:	dd51      	ble.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80122ba:	9a01      	ldr	r2, [sp, #4]
 80122bc:	9902      	ldr	r1, [sp, #8]
 80122be:	fb0e 0002 	mla	r0, lr, r2, r0
 80122c2:	0842      	lsrs	r2, r0, #1
 80122c4:	07c0      	lsls	r0, r0, #31
 80122c6:	5c8a      	ldrb	r2, [r1, r2]
 80122c8:	bf54      	ite	pl
 80122ca:	f002 020f 	andpl.w	r2, r2, #15
 80122ce:	1112      	asrmi	r2, r2, #4
 80122d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80122d4:	b2d2      	uxtb	r2, r2
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	d041      	beq.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80122da:	492d      	ldr	r1, [pc, #180]	; (8012390 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80122dc:	2aff      	cmp	r2, #255	; 0xff
 80122de:	6808      	ldr	r0, [r1, #0]
 80122e0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80122e4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80122e8:	fa5f fe80 	uxtb.w	lr, r0
 80122ec:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80122f0:	d03b      	beq.n	801236a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80122f2:	fa1f f982 	uxth.w	r9, r2
 80122f6:	4438      	add	r0, r7
 80122f8:	43d2      	mvns	r2, r2
 80122fa:	f816 8000 	ldrb.w	r8, [r6, r0]
 80122fe:	fb1e fe09 	smulbb	lr, lr, r9
 8012302:	fb1a fa09 	smulbb	sl, sl, r9
 8012306:	b2d2      	uxtb	r2, r2
 8012308:	fb1b f909 	smulbb	r9, fp, r9
 801230c:	fb08 ee02 	mla	lr, r8, r2, lr
 8012310:	fa1f fe8e 	uxth.w	lr, lr
 8012314:	f10e 0801 	add.w	r8, lr, #1
 8012318:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801231c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8012320:	f806 e000 	strb.w	lr, [r6, r0]
 8012324:	4430      	add	r0, r6
 8012326:	f890 e001 	ldrb.w	lr, [r0, #1]
 801232a:	fb0e aa02 	mla	sl, lr, r2, sl
 801232e:	fa1f fa8a 	uxth.w	sl, sl
 8012332:	f10a 0e01 	add.w	lr, sl, #1
 8012336:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801233a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801233e:	fb0e 9902 	mla	r9, lr, r2, r9
 8012342:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012346:	fa1f f989 	uxth.w	r9, r9
 801234a:	f880 a001 	strb.w	sl, [r0, #1]
 801234e:	f109 0201 	add.w	r2, r9, #1
 8012352:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8012356:	ea4f 2929 	mov.w	r9, r9, asr #8
 801235a:	f880 9002 	strb.w	r9, [r0, #2]
 801235e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012360:	3701      	adds	r7, #1
 8012362:	4415      	add	r5, r2
 8012364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012366:	4414      	add	r4, r2
 8012368:	e756      	b.n	8012218 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801236a:	4438      	add	r0, r7
 801236c:	f806 e000 	strb.w	lr, [r6, r0]
 8012370:	4430      	add	r0, r6
 8012372:	f880 a001 	strb.w	sl, [r0, #1]
 8012376:	f880 b002 	strb.w	fp, [r0, #2]
 801237a:	e7f0      	b.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801237c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8012380:	f800 9c02 	strb.w	r9, [r0, #-2]
 8012384:	f800 bc01 	strb.w	fp, [r0, #-1]
 8012388:	e73d      	b.n	8012206 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801238a:	b005      	add	sp, #20
 801238c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012390:	2400b22c 	.word	0x2400b22c

08012394 <_ZN8touchgfx8LCD24bppD1Ev>:
 8012394:	4770      	bx	lr

08012396 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8012396:	4770      	bx	lr

08012398 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8012398:	4770      	bx	lr

0801239a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801239a:	4770      	bx	lr

0801239c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801239c:	4770      	bx	lr

0801239e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801239e:	4770      	bx	lr

080123a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80123a0:	4770      	bx	lr

080123a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80123a2:	4770      	bx	lr

080123a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80123a4:	4770      	bx	lr

080123a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80123a6:	4770      	bx	lr

080123a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80123a8:	4770      	bx	lr

080123aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80123aa:	4770      	bx	lr

080123ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80123ac:	4770      	bx	lr

080123ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80123ae:	4770      	bx	lr

080123b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80123b0:	4770      	bx	lr

080123b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80123b2:	4770      	bx	lr

080123b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80123b4:	4770      	bx	lr

080123b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80123b6:	4770      	bx	lr

080123b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80123b8:	4770      	bx	lr

080123ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80123ba:	4770      	bx	lr

080123bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80123bc:	4770      	bx	lr
	...

080123c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80123c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123c2:	4606      	mov	r6, r0
 80123c4:	b087      	sub	sp, #28
 80123c6:	4615      	mov	r5, r2
 80123c8:	461f      	mov	r7, r3
 80123ca:	b353      	cbz	r3, 8012422 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80123cc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	dd26      	ble.n	8012422 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80123d4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	dd22      	ble.n	8012422 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80123dc:	6808      	ldr	r0, [r1, #0]
 80123de:	aa04      	add	r2, sp, #16
 80123e0:	6849      	ldr	r1, [r1, #4]
 80123e2:	4c1b      	ldr	r4, [pc, #108]	; (8012450 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80123e4:	c203      	stmia	r2!, {r0, r1}
 80123e6:	a804      	add	r0, sp, #16
 80123e8:	f7fb fb74 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123ec:	6820      	ldr	r0, [r4, #0]
 80123ee:	6803      	ldr	r3, [r0, #0]
 80123f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123f2:	4798      	blx	r3
 80123f4:	2fff      	cmp	r7, #255	; 0xff
 80123f6:	d016      	beq.n	8012426 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80123f8:	f010 0f08 	tst.w	r0, #8
 80123fc:	6820      	ldr	r0, [r4, #0]
 80123fe:	d015      	beq.n	801242c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8012400:	2400      	movs	r4, #0
 8012402:	6801      	ldr	r1, [r0, #0]
 8012404:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012408:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801240c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8012410:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8012414:	9401      	str	r4, [sp, #4]
 8012416:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801241a:	9400      	str	r4, [sp, #0]
 801241c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801241e:	4629      	mov	r1, r5
 8012420:	47a0      	blx	r4
 8012422:	b007      	add	sp, #28
 8012424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012426:	f010 0f02 	tst.w	r0, #2
 801242a:	e7e7      	b.n	80123fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801242c:	6803      	ldr	r3, [r0, #0]
 801242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012430:	4798      	blx	r3
 8012432:	4b08      	ldr	r3, [pc, #32]	; (8012454 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8012434:	4601      	mov	r1, r0
 8012436:	4630      	mov	r0, r6
 8012438:	881a      	ldrh	r2, [r3, #0]
 801243a:	6833      	ldr	r3, [r6, #0]
 801243c:	e9cd 5700 	strd	r5, r7, [sp]
 8012440:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012442:	ab04      	add	r3, sp, #16
 8012444:	47a8      	blx	r5
 8012446:	6820      	ldr	r0, [r4, #0]
 8012448:	6803      	ldr	r3, [r0, #0]
 801244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244c:	4798      	blx	r3
 801244e:	e7e8      	b.n	8012422 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012450:	2400b224 	.word	0x2400b224
 8012454:	2400b21e 	.word	0x2400b21e

08012458 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8012458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801245c:	b08b      	sub	sp, #44	; 0x2c
 801245e:	460d      	mov	r5, r1
 8012460:	4616      	mov	r6, r2
 8012462:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8012466:	f1b8 0f00 	cmp.w	r8, #0
 801246a:	d047      	beq.n	80124fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801246c:	6810      	ldr	r0, [r2, #0]
 801246e:	ac06      	add	r4, sp, #24
 8012470:	6851      	ldr	r1, [r2, #4]
 8012472:	4f51      	ldr	r7, [pc, #324]	; (80125b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8012474:	c403      	stmia	r4!, {r0, r1}
 8012476:	6818      	ldr	r0, [r3, #0]
 8012478:	ac08      	add	r4, sp, #32
 801247a:	6859      	ldr	r1, [r3, #4]
 801247c:	c403      	stmia	r4!, {r0, r1}
 801247e:	a806      	add	r0, sp, #24
 8012480:	f7fb fb28 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012484:	4631      	mov	r1, r6
 8012486:	a808      	add	r0, sp, #32
 8012488:	f7fb fb4c 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801248c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012490:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012494:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012498:	6838      	ldr	r0, [r7, #0]
 801249a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801249e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80124a2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80124a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124aa:	440d      	add	r5, r1
 80124ac:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80124b0:	440a      	add	r2, r1
 80124b2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80124b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80124ba:	4413      	add	r3, r2
 80124bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80124c0:	6803      	ldr	r3, [r0, #0]
 80124c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c4:	4798      	blx	r3
 80124c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80124ca:	d01a      	beq.n	8012502 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80124cc:	f010 0f04 	tst.w	r0, #4
 80124d0:	6838      	ldr	r0, [r7, #0]
 80124d2:	d019      	beq.n	8012508 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80124d4:	2100      	movs	r1, #0
 80124d6:	6807      	ldr	r7, [r0, #0]
 80124d8:	b2a4      	uxth	r4, r4
 80124da:	f8cd 800c 	str.w	r8, [sp, #12]
 80124de:	b2b6      	uxth	r6, r6
 80124e0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80124e4:	9401      	str	r4, [sp, #4]
 80124e6:	9600      	str	r6, [sp, #0]
 80124e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80124ec:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80124f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80124f4:	9102      	str	r1, [sp, #8]
 80124f6:	4629      	mov	r1, r5
 80124f8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80124fa:	47a0      	blx	r4
 80124fc:	b00b      	add	sp, #44	; 0x2c
 80124fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012502:	f010 0f01 	tst.w	r0, #1
 8012506:	e7e3      	b.n	80124d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8012508:	6803      	ldr	r3, [r0, #0]
 801250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801250c:	4798      	blx	r3
 801250e:	4a2b      	ldr	r2, [pc, #172]	; (80125bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8012510:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8012514:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012518:	8813      	ldrh	r3, [r2, #0]
 801251a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801251e:	fb03 f404 	mul.w	r4, r3, r4
 8012522:	fb03 c101 	mla	r1, r3, r1, ip
 8012526:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801252a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801252e:	4408      	add	r0, r1
 8012530:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012534:	4404      	add	r4, r0
 8012536:	d02e      	beq.n	8012596 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8012538:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801253c:	1b9b      	subs	r3, r3, r6
 801253e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8012542:	1b96      	subs	r6, r2, r6
 8012544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012548:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801254c:	42a0      	cmp	r0, r4
 801254e:	d22d      	bcs.n	80125ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8012550:	eb00 0e01 	add.w	lr, r0, r1
 8012554:	4570      	cmp	r0, lr
 8012556:	d210      	bcs.n	801257a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8012558:	f890 9000 	ldrb.w	r9, [r0]
 801255c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8012560:	fb19 f90c 	smulbb	r9, r9, ip
 8012564:	fb02 9208 	mla	r2, r2, r8, r9
 8012568:	b292      	uxth	r2, r2
 801256a:	f102 0901 	add.w	r9, r2, #1
 801256e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8012572:	1212      	asrs	r2, r2, #8
 8012574:	f800 2b01 	strb.w	r2, [r0], #1
 8012578:	e7ec      	b.n	8012554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801257a:	4418      	add	r0, r3
 801257c:	4435      	add	r5, r6
 801257e:	e7e5      	b.n	801254c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8012580:	8813      	ldrh	r3, [r2, #0]
 8012582:	1b9b      	subs	r3, r3, r6
 8012584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012588:	4418      	add	r0, r3
 801258a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801258e:	1b9b      	subs	r3, r3, r6
 8012590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012594:	441d      	add	r5, r3
 8012596:	42a0      	cmp	r0, r4
 8012598:	d208      	bcs.n	80125ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801259a:	eb00 0c01 	add.w	ip, r0, r1
 801259e:	4560      	cmp	r0, ip
 80125a0:	d2ee      	bcs.n	8012580 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80125a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80125a6:	f800 3b01 	strb.w	r3, [r0], #1
 80125aa:	e7f8      	b.n	801259e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80125ac:	6838      	ldr	r0, [r7, #0]
 80125ae:	6803      	ldr	r3, [r0, #0]
 80125b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b2:	4798      	blx	r3
 80125b4:	e7a2      	b.n	80124fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80125b6:	bf00      	nop
 80125b8:	2400b224 	.word	0x2400b224
 80125bc:	2400b21e 	.word	0x2400b21e

080125c0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80125c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125c2:	2300      	movs	r3, #0
 80125c4:	b085      	sub	sp, #20
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	4b41      	ldr	r3, [pc, #260]	; (80126d0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d136      	bne.n	801263e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80125d0:	4a40      	ldr	r2, [pc, #256]	; (80126d4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80125d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80125d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d131      	bne.n	8012642 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80125de:	4b3e      	ldr	r3, [pc, #248]	; (80126d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80125e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e4:	ac02      	add	r4, sp, #8
 80125e6:	6808      	ldr	r0, [r1, #0]
 80125e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80125ec:	ab02      	add	r3, sp, #8
 80125ee:	6849      	ldr	r1, [r1, #4]
 80125f0:	4d3a      	ldr	r5, [pc, #232]	; (80126dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80125f2:	c303      	stmia	r3!, {r0, r1}
 80125f4:	4669      	mov	r1, sp
 80125f6:	4620      	mov	r0, r4
 80125f8:	f7fb fa94 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80125fc:	4668      	mov	r0, sp
 80125fe:	f7fb fa69 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012602:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012606:	f8bd 2000 	ldrh.w	r2, [sp]
 801260a:	462e      	mov	r6, r5
 801260c:	6828      	ldr	r0, [r5, #0]
 801260e:	4413      	add	r3, r2
 8012610:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012614:	f8ad 3008 	strh.w	r3, [sp, #8]
 8012618:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801261c:	4413      	add	r3, r2
 801261e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012622:	6803      	ldr	r3, [r0, #0]
 8012624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012626:	4798      	blx	r3
 8012628:	f010 0f01 	tst.w	r0, #1
 801262c:	d00b      	beq.n	8012646 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801262e:	6828      	ldr	r0, [r5, #0]
 8012630:	6803      	ldr	r3, [r0, #0]
 8012632:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012638:	4798      	blx	r3
 801263a:	b005      	add	sp, #20
 801263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801263e:	4a26      	ldr	r2, [pc, #152]	; (80126d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8012640:	e7c7      	b.n	80125d2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8012642:	4b24      	ldr	r3, [pc, #144]	; (80126d4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8012644:	e7cc      	b.n	80125e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8012646:	6830      	ldr	r0, [r6, #0]
 8012648:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801264c:	6803      	ldr	r3, [r0, #0]
 801264e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8012652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012654:	4798      	blx	r3
 8012656:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801265a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801265e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8012662:	fb14 3402 	smlabb	r4, r4, r2, r3
 8012666:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801266a:	4404      	add	r4, r0
 801266c:	6830      	ldr	r0, [r6, #0]
 801266e:	6803      	ldr	r3, [r0, #0]
 8012670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012672:	4798      	blx	r3
 8012674:	4917      	ldr	r1, [pc, #92]	; (80126d4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8012676:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801267a:	880b      	ldrh	r3, [r1, #0]
 801267c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8012680:	fb03 c202 	mla	r2, r3, r2, ip
 8012684:	437b      	muls	r3, r7
 8012686:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801268a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801268e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012692:	4410      	add	r0, r2
 8012694:	18c2      	adds	r2, r0, r3
 8012696:	4290      	cmp	r0, r2
 8012698:	d214      	bcs.n	80126c4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801269a:	eb00 0c07 	add.w	ip, r0, r7
 801269e:	4560      	cmp	r0, ip
 80126a0:	d204      	bcs.n	80126ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80126a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126a6:	f800 3b01 	strb.w	r3, [r0], #1
 80126aa:	e7f8      	b.n	801269e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80126ac:	880b      	ldrh	r3, [r1, #0]
 80126ae:	1b5b      	subs	r3, r3, r5
 80126b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80126b4:	4418      	add	r0, r3
 80126b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80126ba:	1b5b      	subs	r3, r3, r5
 80126bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80126c0:	441c      	add	r4, r3
 80126c2:	e7e8      	b.n	8012696 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80126c4:	6830      	ldr	r0, [r6, #0]
 80126c6:	6803      	ldr	r3, [r0, #0]
 80126c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ca:	4798      	blx	r3
 80126cc:	e7b5      	b.n	801263a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80126ce:	bf00      	nop
 80126d0:	2400b21c 	.word	0x2400b21c
 80126d4:	2400b21e 	.word	0x2400b21e
 80126d8:	2400b220 	.word	0x2400b220
 80126dc:	2400b224 	.word	0x2400b224

080126e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	b089      	sub	sp, #36	; 0x24
 80126e6:	4607      	mov	r7, r0
 80126e8:	4689      	mov	r9, r1
 80126ea:	4692      	mov	sl, r2
 80126ec:	ac08      	add	r4, sp, #32
 80126ee:	461e      	mov	r6, r3
 80126f0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80126f4:	4620      	mov	r0, r4
 80126f6:	f7fe f8ef 	bl	80108d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	4605      	mov	r5, r0
 80126fe:	4620      	mov	r0, r4
 8012700:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8012704:	f7fe f834 	bl	8010770 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012708:	4683      	mov	fp, r0
 801270a:	4620      	mov	r0, r4
 801270c:	f7fe f864 	bl	80107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012710:	4653      	mov	r3, sl
 8012712:	464a      	mov	r2, r9
 8012714:	4639      	mov	r1, r7
 8012716:	9500      	str	r5, [sp, #0]
 8012718:	e9cd b001 	strd	fp, r0, [sp, #4]
 801271c:	a806      	add	r0, sp, #24
 801271e:	47c0      	blx	r8
 8012720:	a906      	add	r1, sp, #24
 8012722:	4630      	mov	r0, r6
 8012724:	f7fd ff08 	bl	8010538 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8012728:	4628      	mov	r0, r5
 801272a:	b009      	add	sp, #36	; 0x24
 801272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012730 <_ZN8touchgfx8LCD24bppD0Ev>:
 8012730:	b510      	push	{r4, lr}
 8012732:	4604      	mov	r4, r0
 8012734:	2158      	movs	r1, #88	; 0x58
 8012736:	f006 f8f6 	bl	8018926 <_ZdlPvj>
 801273a:	4620      	mov	r0, r4
 801273c:	bd10      	pop	{r4, pc}

0801273e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801273e:	b510      	push	{r4, lr}
 8012740:	4604      	mov	r4, r0
 8012742:	2104      	movs	r1, #4
 8012744:	f006 f8ef 	bl	8018926 <_ZdlPvj>
 8012748:	4620      	mov	r0, r4
 801274a:	bd10      	pop	{r4, pc}

0801274c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801274c:	b510      	push	{r4, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	2104      	movs	r1, #4
 8012752:	f006 f8e8 	bl	8018926 <_ZdlPvj>
 8012756:	4620      	mov	r0, r4
 8012758:	bd10      	pop	{r4, pc}

0801275a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801275a:	b510      	push	{r4, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	2104      	movs	r1, #4
 8012760:	f006 f8e1 	bl	8018926 <_ZdlPvj>
 8012764:	4620      	mov	r0, r4
 8012766:	bd10      	pop	{r4, pc}

08012768 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012768:	b510      	push	{r4, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	2104      	movs	r1, #4
 801276e:	f006 f8da 	bl	8018926 <_ZdlPvj>
 8012772:	4620      	mov	r0, r4
 8012774:	bd10      	pop	{r4, pc}

08012776 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8012776:	b510      	push	{r4, lr}
 8012778:	4604      	mov	r4, r0
 801277a:	2104      	movs	r1, #4
 801277c:	f006 f8d3 	bl	8018926 <_ZdlPvj>
 8012780:	4620      	mov	r0, r4
 8012782:	bd10      	pop	{r4, pc}

08012784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8012784:	b510      	push	{r4, lr}
 8012786:	4604      	mov	r4, r0
 8012788:	2104      	movs	r1, #4
 801278a:	f006 f8cc 	bl	8018926 <_ZdlPvj>
 801278e:	4620      	mov	r0, r4
 8012790:	bd10      	pop	{r4, pc}

08012792 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8012792:	b510      	push	{r4, lr}
 8012794:	4604      	mov	r4, r0
 8012796:	2104      	movs	r1, #4
 8012798:	f006 f8c5 	bl	8018926 <_ZdlPvj>
 801279c:	4620      	mov	r0, r4
 801279e:	bd10      	pop	{r4, pc}

080127a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80127a0:	b510      	push	{r4, lr}
 80127a2:	4604      	mov	r4, r0
 80127a4:	2104      	movs	r1, #4
 80127a6:	f006 f8be 	bl	8018926 <_ZdlPvj>
 80127aa:	4620      	mov	r0, r4
 80127ac:	bd10      	pop	{r4, pc}

080127ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80127ae:	b510      	push	{r4, lr}
 80127b0:	4604      	mov	r4, r0
 80127b2:	2104      	movs	r1, #4
 80127b4:	f006 f8b7 	bl	8018926 <_ZdlPvj>
 80127b8:	4620      	mov	r0, r4
 80127ba:	bd10      	pop	{r4, pc}

080127bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80127bc:	b510      	push	{r4, lr}
 80127be:	4604      	mov	r4, r0
 80127c0:	2104      	movs	r1, #4
 80127c2:	f006 f8b0 	bl	8018926 <_ZdlPvj>
 80127c6:	4620      	mov	r0, r4
 80127c8:	bd10      	pop	{r4, pc}

080127ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80127ca:	b510      	push	{r4, lr}
 80127cc:	4604      	mov	r4, r0
 80127ce:	2104      	movs	r1, #4
 80127d0:	f006 f8a9 	bl	8018926 <_ZdlPvj>
 80127d4:	4620      	mov	r0, r4
 80127d6:	bd10      	pop	{r4, pc}

080127d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	4604      	mov	r4, r0
 80127dc:	2104      	movs	r1, #4
 80127de:	f006 f8a2 	bl	8018926 <_ZdlPvj>
 80127e2:	4620      	mov	r0, r4
 80127e4:	bd10      	pop	{r4, pc}

080127e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80127e6:	b510      	push	{r4, lr}
 80127e8:	4604      	mov	r4, r0
 80127ea:	2104      	movs	r1, #4
 80127ec:	f006 f89b 	bl	8018926 <_ZdlPvj>
 80127f0:	4620      	mov	r0, r4
 80127f2:	bd10      	pop	{r4, pc}

080127f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80127f4:	b510      	push	{r4, lr}
 80127f6:	4604      	mov	r4, r0
 80127f8:	2104      	movs	r1, #4
 80127fa:	f006 f894 	bl	8018926 <_ZdlPvj>
 80127fe:	4620      	mov	r0, r4
 8012800:	bd10      	pop	{r4, pc}

08012802 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8012802:	b510      	push	{r4, lr}
 8012804:	4604      	mov	r4, r0
 8012806:	2104      	movs	r1, #4
 8012808:	f006 f88d 	bl	8018926 <_ZdlPvj>
 801280c:	4620      	mov	r0, r4
 801280e:	bd10      	pop	{r4, pc}

08012810 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012810:	b510      	push	{r4, lr}
 8012812:	4604      	mov	r4, r0
 8012814:	2104      	movs	r1, #4
 8012816:	f006 f886 	bl	8018926 <_ZdlPvj>
 801281a:	4620      	mov	r0, r4
 801281c:	bd10      	pop	{r4, pc}

0801281e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801281e:	b510      	push	{r4, lr}
 8012820:	4604      	mov	r4, r0
 8012822:	2104      	movs	r1, #4
 8012824:	f006 f87f 	bl	8018926 <_ZdlPvj>
 8012828:	4620      	mov	r0, r4
 801282a:	bd10      	pop	{r4, pc}

0801282c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801282c:	b510      	push	{r4, lr}
 801282e:	4604      	mov	r4, r0
 8012830:	2104      	movs	r1, #4
 8012832:	f006 f878 	bl	8018926 <_ZdlPvj>
 8012836:	4620      	mov	r0, r4
 8012838:	bd10      	pop	{r4, pc}

0801283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801283a:	b510      	push	{r4, lr}
 801283c:	4604      	mov	r4, r0
 801283e:	2104      	movs	r1, #4
 8012840:	f006 f871 	bl	8018926 <_ZdlPvj>
 8012844:	4620      	mov	r0, r4
 8012846:	bd10      	pop	{r4, pc}

08012848 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8012848:	b510      	push	{r4, lr}
 801284a:	4604      	mov	r4, r0
 801284c:	2104      	movs	r1, #4
 801284e:	f006 f86a 	bl	8018926 <_ZdlPvj>
 8012852:	4620      	mov	r0, r4
 8012854:	bd10      	pop	{r4, pc}

08012856 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8012856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801285e:	9c06      	ldr	r4, [sp, #24]
 8012860:	2800      	cmp	r0, #0
 8012862:	d06e      	beq.n	8012942 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012864:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8012868:	2d00      	cmp	r5, #0
 801286a:	dd6a      	ble.n	8012942 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801286c:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8012870:	f1bc 0f00 	cmp.w	ip, #0
 8012874:	dd65      	ble.n	8012942 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012876:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801287a:	28ff      	cmp	r0, #255	; 0xff
 801287c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012880:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8012884:	fb02 3306 	mla	r3, r2, r6, r3
 8012888:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801288c:	b2e4      	uxtb	r4, r4
 801288e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012892:	4419      	add	r1, r3
 8012894:	fb02 f30c 	mul.w	r3, r2, ip
 8012898:	eba2 0205 	sub.w	r2, r2, r5
 801289c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80128a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80128a8:	440b      	add	r3, r1
 80128aa:	d03e      	beq.n	801292a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80128ac:	fa1f fc80 	uxth.w	ip, r0
 80128b0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80128b4:	fb06 f60c 	mul.w	r6, r6, ip
 80128b8:	b280      	uxth	r0, r0
 80128ba:	fb07 f70c 	mul.w	r7, r7, ip
 80128be:	fb04 f40c 	mul.w	r4, r4, ip
 80128c2:	4299      	cmp	r1, r3
 80128c4:	d23d      	bcs.n	8012942 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80128c6:	eb01 0c05 	add.w	ip, r1, r5
 80128ca:	458c      	cmp	ip, r1
 80128cc:	f101 0e03 	add.w	lr, r1, #3
 80128d0:	d928      	bls.n	8012924 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80128d2:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80128d6:	fb11 f100 	smulbb	r1, r1, r0
 80128da:	4421      	add	r1, r4
 80128dc:	b289      	uxth	r1, r1
 80128de:	f101 0801 	add.w	r8, r1, #1
 80128e2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80128e6:	1209      	asrs	r1, r1, #8
 80128e8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80128ec:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80128f0:	fb11 f100 	smulbb	r1, r1, r0
 80128f4:	4439      	add	r1, r7
 80128f6:	b289      	uxth	r1, r1
 80128f8:	f101 0801 	add.w	r8, r1, #1
 80128fc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012900:	1209      	asrs	r1, r1, #8
 8012902:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8012906:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801290a:	fb11 f100 	smulbb	r1, r1, r0
 801290e:	4431      	add	r1, r6
 8012910:	b289      	uxth	r1, r1
 8012912:	f101 0801 	add.w	r8, r1, #1
 8012916:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801291a:	1209      	asrs	r1, r1, #8
 801291c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8012920:	4671      	mov	r1, lr
 8012922:	e7d2      	b.n	80128ca <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8012924:	4411      	add	r1, r2
 8012926:	e7cc      	b.n	80128c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8012928:	4411      	add	r1, r2
 801292a:	4299      	cmp	r1, r3
 801292c:	d209      	bcs.n	8012942 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801292e:	1948      	adds	r0, r1, r5
 8012930:	4281      	cmp	r1, r0
 8012932:	d2f9      	bcs.n	8012928 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8012934:	700c      	strb	r4, [r1, #0]
 8012936:	3103      	adds	r1, #3
 8012938:	f801 7c02 	strb.w	r7, [r1, #-2]
 801293c:	f801 6c01 	strb.w	r6, [r1, #-1]
 8012940:	e7f6      	b.n	8012930 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8012942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012948 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8012948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	b093      	sub	sp, #76	; 0x4c
 801294e:	4699      	mov	r9, r3
 8012950:	4617      	mov	r7, r2
 8012952:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012956:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801295a:	4604      	mov	r4, r0
 801295c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012960:	a80c      	add	r0, sp, #48	; 0x30
 8012962:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8012966:	460d      	mov	r5, r1
 8012968:	4649      	mov	r1, r9
 801296a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801296e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012972:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8012976:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801297a:	f7f9 f93b 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 801297e:	4639      	mov	r1, r7
 8012980:	a80c      	add	r0, sp, #48	; 0x30
 8012982:	f7f9 f937 	bl	800bbf4 <_ZN8touchgfx4RectaNERKS0_>
 8012986:	4b78      	ldr	r3, [pc, #480]	; (8012b68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8012988:	8818      	ldrh	r0, [r3, #0]
 801298a:	4b78      	ldr	r3, [pc, #480]	; (8012b6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801298c:	b202      	sxth	r2, r0
 801298e:	8819      	ldrh	r1, [r3, #0]
 8012990:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012994:	b20f      	sxth	r7, r1
 8012996:	2b00      	cmp	r3, #0
 8012998:	da07      	bge.n	80129aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801299a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801299e:	4463      	add	r3, ip
 80129a0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80129a4:	2300      	movs	r3, #0
 80129a6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80129aa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80129ae:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 80129b2:	1ad2      	subs	r2, r2, r3
 80129b4:	4594      	cmp	ip, r2
 80129b6:	bfc4      	itt	gt
 80129b8:	1ac2      	subgt	r2, r0, r3
 80129ba:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 80129be:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80129c2:	2a00      	cmp	r2, #0
 80129c4:	da07      	bge.n	80129d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80129c6:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 80129ca:	4462      	add	r2, ip
 80129cc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80129d0:	2200      	movs	r2, #0
 80129d2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80129d6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80129da:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80129de:	1abf      	subs	r7, r7, r2
 80129e0:	45bc      	cmp	ip, r7
 80129e2:	f8df c190 	ldr.w	ip, [pc, #400]	; 8012b74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80129e6:	bfc8      	it	gt
 80129e8:	1a8f      	subgt	r7, r1, r2
 80129ea:	f89c c000 	ldrb.w	ip, [ip]
 80129ee:	bfc8      	it	gt
 80129f0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80129f4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80129f8:	f1bc 0f00 	cmp.w	ip, #0
 80129fc:	d176      	bne.n	8012aec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80129fe:	4287      	cmp	r7, r0
 8012a00:	bf14      	ite	ne
 8012a02:	2100      	movne	r1, #0
 8012a04:	2101      	moveq	r1, #1
 8012a06:	2f00      	cmp	r7, #0
 8012a08:	9107      	str	r1, [sp, #28]
 8012a0a:	dd73      	ble.n	8012af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8012a0c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8012a10:	2900      	cmp	r1, #0
 8012a12:	9104      	str	r1, [sp, #16]
 8012a14:	dd6e      	ble.n	8012af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8012a16:	f8b9 1000 	ldrh.w	r1, [r9]
 8012a1a:	a80e      	add	r0, sp, #56	; 0x38
 8012a1c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8012a20:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012a24:	1a5b      	subs	r3, r3, r1
 8012a26:	a910      	add	r1, sp, #64	; 0x40
 8012a28:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8012a2c:	b21b      	sxth	r3, r3
 8012a2e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8012a32:	f8df a144 	ldr.w	sl, [pc, #324]	; 8012b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8012a36:	9305      	str	r3, [sp, #20]
 8012a38:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8012a3c:	1ad2      	subs	r2, r2, r3
 8012a3e:	b213      	sxth	r3, r2
 8012a40:	9306      	str	r3, [sp, #24]
 8012a42:	9b05      	ldr	r3, [sp, #20]
 8012a44:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8012a48:	9b06      	ldr	r3, [sp, #24]
 8012a4a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012a4e:	9b04      	ldr	r3, [sp, #16]
 8012a50:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012a54:	2300      	movs	r3, #0
 8012a56:	9310      	str	r3, [sp, #64]	; 0x40
 8012a58:	f7fb f864 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012a5c:	4640      	mov	r0, r8
 8012a5e:	f7fb f839 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a62:	a810      	add	r0, sp, #64	; 0x40
 8012a64:	f7fb f836 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a68:	4b41      	ldr	r3, [pc, #260]	; (8012b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8012a6a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8012a6e:	4628      	mov	r0, r5
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	9308      	str	r3, [sp, #32]
 8012a74:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8012a78:	b21b      	sxth	r3, r3
 8012a7a:	9303      	str	r3, [sp, #12]
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a80:	4798      	blx	r3
 8012a82:	9a03      	ldr	r2, [sp, #12]
 8012a84:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012a88:	4681      	mov	r9, r0
 8012a8a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012a8e:	fb13 f302 	smulbb	r3, r3, r2
 8012a92:	2203      	movs	r2, #3
 8012a94:	f8da 0000 	ldr.w	r0, [sl]
 8012a98:	fb15 3302 	smlabb	r3, r5, r2, r3
 8012a9c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8012a9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8012aa0:	441d      	add	r5, r3
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa6:	4798      	blx	r3
 8012aa8:	9009      	str	r0, [sp, #36]	; 0x24
 8012aaa:	f8da 0000 	ldr.w	r0, [sl]
 8012aae:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8012ab2:	6803      	ldr	r3, [r0, #0]
 8012ab4:	910a      	str	r1, [sp, #40]	; 0x28
 8012ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ab8:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8012abc:	4798      	blx	r3
 8012abe:	f010 0f01 	tst.w	r0, #1
 8012ac2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012ac6:	d01e      	beq.n	8012b06 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8012ac8:	f8da 0000 	ldr.w	r0, [sl]
 8012acc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8012ad0:	6803      	ldr	r3, [r0, #0]
 8012ad2:	9200      	str	r2, [sp, #0]
 8012ad4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012ad6:	462b      	mov	r3, r5
 8012ad8:	e898 0006 	ldmia.w	r8, {r1, r2}
 8012adc:	47b0      	blx	r6
 8012ade:	9b05      	ldr	r3, [sp, #20]
 8012ae0:	80a7      	strh	r7, [r4, #4]
 8012ae2:	8023      	strh	r3, [r4, #0]
 8012ae4:	9b06      	ldr	r3, [sp, #24]
 8012ae6:	8063      	strh	r3, [r4, #2]
 8012ae8:	9b04      	ldr	r3, [sp, #16]
 8012aea:	e007      	b.n	8012afc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8012aec:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8012af0:	4288      	cmp	r0, r1
 8012af2:	e785      	b.n	8012a00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8012af4:	2300      	movs	r3, #0
 8012af6:	8023      	strh	r3, [r4, #0]
 8012af8:	8063      	strh	r3, [r4, #2]
 8012afa:	80a3      	strh	r3, [r4, #4]
 8012afc:	4620      	mov	r0, r4
 8012afe:	80e3      	strh	r3, [r4, #6]
 8012b00:	b013      	add	sp, #76	; 0x4c
 8012b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b06:	fb09 f606 	mul.w	r6, r9, r6
 8012b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b0c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8012b10:	9a07      	ldr	r2, [sp, #28]
 8012b12:	4433      	add	r3, r6
 8012b14:	461e      	mov	r6, r3
 8012b16:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8012b1a:	b16a      	cbz	r2, 8012b38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8012b1c:	9a08      	ldr	r2, [sp, #32]
 8012b1e:	4593      	cmp	fp, r2
 8012b20:	d10a      	bne.n	8012b38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8012b22:	f8da 0000 	ldr.w	r0, [sl]
 8012b26:	fb09 f303 	mul.w	r3, r9, r3
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	6802      	ldr	r2, [r0, #0]
 8012b2e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8012b32:	4632      	mov	r2, r6
 8012b34:	47d0      	blx	sl
 8012b36:	e7d2      	b.n	8012ade <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8012b38:	9a03      	ldr	r2, [sp, #12]
 8012b3a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8012b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8012b3e:	fb02 5803 	mla	r8, r2, r3, r5
 8012b42:	4545      	cmp	r5, r8
 8012b44:	d2cb      	bcs.n	8012ade <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8012b46:	f8db 0000 	ldr.w	r0, [fp]
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012b50:	6802      	ldr	r2, [r0, #0]
 8012b52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b56:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	47d0      	blx	sl
 8012b5e:	9b03      	ldr	r3, [sp, #12]
 8012b60:	444e      	add	r6, r9
 8012b62:	441d      	add	r5, r3
 8012b64:	e7ed      	b.n	8012b42 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8012b66:	bf00      	nop
 8012b68:	2400b218 	.word	0x2400b218
 8012b6c:	2400b21a 	.word	0x2400b21a
 8012b70:	2400b21e 	.word	0x2400b21e
 8012b74:	2400b21c 	.word	0x2400b21c
 8012b78:	2400b224 	.word	0x2400b224

08012b7c <_ZN8touchgfx8LCD24bppC1Ev>:
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	490c      	ldr	r1, [pc, #48]	; (8012bb0 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8012b80:	6042      	str	r2, [r0, #4]
 8012b82:	6001      	str	r1, [r0, #0]
 8012b84:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8012b88:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8012b8c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012b90:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8012b94:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8012b98:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8012b9c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8012ba0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8012ba4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8012ba8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	0801b4e0 	.word	0x0801b4e0

08012bb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	b091      	sub	sp, #68	; 0x44
 8012bba:	4607      	mov	r7, r0
 8012bbc:	4688      	mov	r8, r1
 8012bbe:	6810      	ldr	r0, [r2, #0]
 8012bc0:	6851      	ldr	r1, [r2, #4]
 8012bc2:	ac0c      	add	r4, sp, #48	; 0x30
 8012bc4:	4616      	mov	r6, r2
 8012bc6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8012bca:	4d64      	ldr	r5, [pc, #400]	; (8012d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8012bcc:	f8df a190 	ldr.w	sl, [pc, #400]	; 8012d60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8012bd0:	c403      	stmia	r4!, {r0, r1}
 8012bd2:	6818      	ldr	r0, [r3, #0]
 8012bd4:	ac0e      	add	r4, sp, #56	; 0x38
 8012bd6:	6859      	ldr	r1, [r3, #4]
 8012bd8:	c403      	stmia	r4!, {r0, r1}
 8012bda:	a80c      	add	r0, sp, #48	; 0x30
 8012bdc:	f7fa ff7a 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012be0:	4631      	mov	r1, r6
 8012be2:	a80e      	add	r0, sp, #56	; 0x38
 8012be4:	f7fa ff9e 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012be8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012bec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012bf0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012bf4:	6828      	ldr	r0, [r5, #0]
 8012bf6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012bfa:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8012bfe:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8012c02:	440f      	add	r7, r1
 8012c04:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012c08:	440a      	add	r2, r1
 8012c0a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012c0e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012c12:	4413      	add	r3, r2
 8012c14:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012c18:	6803      	ldr	r3, [r0, #0]
 8012c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c1c:	4798      	blx	r3
 8012c1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012c22:	6828      	ldr	r0, [r5, #0]
 8012c24:	d01f      	beq.n	8012c66 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8012c26:	2201      	movs	r2, #1
 8012c28:	2500      	movs	r5, #0
 8012c2a:	6801      	ldr	r1, [r0, #0]
 8012c2c:	b2a4      	uxth	r4, r4
 8012c2e:	b2b6      	uxth	r6, r6
 8012c30:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012c34:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8012c38:	250b      	movs	r5, #11
 8012c3a:	9507      	str	r5, [sp, #28]
 8012c3c:	f8ba 5000 	ldrh.w	r5, [sl]
 8012c40:	f8cd 9010 	str.w	r9, [sp, #16]
 8012c44:	9602      	str	r6, [sp, #8]
 8012c46:	9401      	str	r4, [sp, #4]
 8012c48:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8012c4c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012c50:	9203      	str	r2, [sp, #12]
 8012c52:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012c56:	9200      	str	r2, [sp, #0]
 8012c58:	4642      	mov	r2, r8
 8012c5a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	47a0      	blx	r4
 8012c60:	b011      	add	sp, #68	; 0x44
 8012c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c66:	6803      	ldr	r3, [r0, #0]
 8012c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c6a:	4798      	blx	r3
 8012c6c:	f8ba 5000 	ldrh.w	r5, [sl]
 8012c70:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012c74:	f04f 0e04 	mov.w	lr, #4
 8012c78:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012c7c:	436e      	muls	r6, r5
 8012c7e:	fb05 2303 	mla	r3, r5, r3, r2
 8012c82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012c86:	1b2d      	subs	r5, r5, r4
 8012c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c90:	4418      	add	r0, r3
 8012c92:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8012c96:	1982      	adds	r2, r0, r6
 8012c98:	1b1b      	subs	r3, r3, r4
 8012c9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ca0:	4290      	cmp	r0, r2
 8012ca2:	d254      	bcs.n	8012d4e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8012ca4:	eb00 0a04 	add.w	sl, r0, r4
 8012ca8:	4550      	cmp	r0, sl
 8012caa:	d24c      	bcs.n	8012d46 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8012cac:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012cb0:	fb1e e101 	smlabb	r1, lr, r1, lr
 8012cb4:	eb08 0c01 	add.w	ip, r8, r1
 8012cb8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8012cbc:	b173      	cbz	r3, 8012cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8012cbe:	2bff      	cmp	r3, #255	; 0xff
 8012cc0:	f818 b001 	ldrb.w	fp, [r8, r1]
 8012cc4:	d10c      	bne.n	8012ce0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8012cc6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012cca:	d109      	bne.n	8012ce0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8012ccc:	f880 b000 	strb.w	fp, [r0]
 8012cd0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8012cd4:	7043      	strb	r3, [r0, #1]
 8012cd6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8012cda:	7083      	strb	r3, [r0, #2]
 8012cdc:	3003      	adds	r0, #3
 8012cde:	e7e3      	b.n	8012ca8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8012ce0:	fb09 f103 	mul.w	r1, r9, r3
 8012ce4:	1c4b      	adds	r3, r1, #1
 8012ce6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8012cea:	7801      	ldrb	r1, [r0, #0]
 8012cec:	121b      	asrs	r3, r3, #8
 8012cee:	b29e      	uxth	r6, r3
 8012cf0:	43db      	mvns	r3, r3
 8012cf2:	fb1b fb06 	smulbb	fp, fp, r6
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	fb01 b103 	mla	r1, r1, r3, fp
 8012cfc:	b289      	uxth	r1, r1
 8012cfe:	f101 0b01 	add.w	fp, r1, #1
 8012d02:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8012d06:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012d0a:	fb1b fb03 	smulbb	fp, fp, r3
 8012d0e:	1209      	asrs	r1, r1, #8
 8012d10:	7001      	strb	r1, [r0, #0]
 8012d12:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8012d16:	fb01 b106 	mla	r1, r1, r6, fp
 8012d1a:	b289      	uxth	r1, r1
 8012d1c:	f101 0b01 	add.w	fp, r1, #1
 8012d20:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8012d24:	1209      	asrs	r1, r1, #8
 8012d26:	7041      	strb	r1, [r0, #1]
 8012d28:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8012d2c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8012d30:	fb1c f303 	smulbb	r3, ip, r3
 8012d34:	fb01 3606 	mla	r6, r1, r6, r3
 8012d38:	b2b6      	uxth	r6, r6
 8012d3a:	1c73      	adds	r3, r6, #1
 8012d3c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8012d40:	1236      	asrs	r6, r6, #8
 8012d42:	7086      	strb	r6, [r0, #2]
 8012d44:	e7ca      	b.n	8012cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8012d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d48:	4428      	add	r0, r5
 8012d4a:	441f      	add	r7, r3
 8012d4c:	e7a8      	b.n	8012ca0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8012d4e:	4b03      	ldr	r3, [pc, #12]	; (8012d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8012d50:	6818      	ldr	r0, [r3, #0]
 8012d52:	6803      	ldr	r3, [r0, #0]
 8012d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d56:	4798      	blx	r3
 8012d58:	e782      	b.n	8012c60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8012d5a:	bf00      	nop
 8012d5c:	2400b224 	.word	0x2400b224
 8012d60:	2400b21e 	.word	0x2400b21e

08012d64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8012d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d68:	b091      	sub	sp, #68	; 0x44
 8012d6a:	4680      	mov	r8, r0
 8012d6c:	460e      	mov	r6, r1
 8012d6e:	6810      	ldr	r0, [r2, #0]
 8012d70:	6851      	ldr	r1, [r2, #4]
 8012d72:	ad0c      	add	r5, sp, #48	; 0x30
 8012d74:	4614      	mov	r4, r2
 8012d76:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8012d7a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8012f14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8012d7e:	f8df a198 	ldr.w	sl, [pc, #408]	; 8012f18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8012d82:	c503      	stmia	r5!, {r0, r1}
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	ad0e      	add	r5, sp, #56	; 0x38
 8012d88:	6859      	ldr	r1, [r3, #4]
 8012d8a:	c503      	stmia	r5!, {r0, r1}
 8012d8c:	a80c      	add	r0, sp, #48	; 0x30
 8012d8e:	f7fa fea1 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012d92:	4621      	mov	r1, r4
 8012d94:	a80e      	add	r0, sp, #56	; 0x38
 8012d96:	f7fa fec5 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012d9a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012d9e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012da2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012da6:	f8d9 0000 	ldr.w	r0, [r9]
 8012daa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012dae:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012db2:	eb08 0401 	add.w	r4, r8, r1
 8012db6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012dba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8012dbe:	440a      	add	r2, r1
 8012dc0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012dc4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012dc8:	4413      	add	r3, r2
 8012dca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012dce:	6803      	ldr	r3, [r0, #0]
 8012dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dd2:	4798      	blx	r3
 8012dd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012dd8:	f8d9 0000 	ldr.w	r0, [r9]
 8012ddc:	d022      	beq.n	8012e24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8012dde:	2200      	movs	r2, #0
 8012de0:	f04f 0c01 	mov.w	ip, #1
 8012de4:	6801      	ldr	r1, [r0, #0]
 8012de6:	b2ad      	uxth	r5, r5
 8012de8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012dec:	e9cd c208 	strd	ip, r2, [sp, #32]
 8012df0:	f04f 0c0b 	mov.w	ip, #11
 8012df4:	f8cd c01c 	str.w	ip, [sp, #28]
 8012df8:	f8ba c000 	ldrh.w	ip, [sl]
 8012dfc:	9704      	str	r7, [sp, #16]
 8012dfe:	9502      	str	r5, [sp, #8]
 8012e00:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8012e04:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012e08:	9203      	str	r2, [sp, #12]
 8012e0a:	fa1f f288 	uxth.w	r2, r8
 8012e0e:	9201      	str	r2, [sp, #4]
 8012e10:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012e14:	9200      	str	r2, [sp, #0]
 8012e16:	4632      	mov	r2, r6
 8012e18:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8012e1a:	4621      	mov	r1, r4
 8012e1c:	47a8      	blx	r5
 8012e1e:	b011      	add	sp, #68	; 0x44
 8012e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e24:	6803      	ldr	r3, [r0, #0]
 8012e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e28:	4798      	blx	r3
 8012e2a:	f8ba 2000 	ldrh.w	r2, [sl]
 8012e2e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012e32:	f04f 0e03 	mov.w	lr, #3
 8012e36:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8012e3a:	4355      	muls	r5, r2
 8012e3c:	fa1f fc87 	uxth.w	ip, r7
 8012e40:	fb02 1303 	mla	r3, r2, r3, r1
 8012e44:	eba2 0208 	sub.w	r2, r2, r8
 8012e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012e50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012e54:	4418      	add	r0, r3
 8012e56:	920b      	str	r2, [sp, #44]	; 0x2c
 8012e58:	1943      	adds	r3, r0, r5
 8012e5a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8012e5e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8012e62:	eba2 0208 	sub.w	r2, r2, r8
 8012e66:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8012e6a:	b2ad      	uxth	r5, r5
 8012e6c:	4298      	cmp	r0, r3
 8012e6e:	d24a      	bcs.n	8012f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8012e70:	eb00 0908 	add.w	r9, r0, r8
 8012e74:	4621      	mov	r1, r4
 8012e76:	4548      	cmp	r0, r9
 8012e78:	460c      	mov	r4, r1
 8012e7a:	d240      	bcs.n	8012efe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8012e7c:	f04f 0a04 	mov.w	sl, #4
 8012e80:	7824      	ldrb	r4, [r4, #0]
 8012e82:	2fff      	cmp	r7, #255	; 0xff
 8012e84:	f101 0101 	add.w	r1, r1, #1
 8012e88:	fb1e a404 	smlabb	r4, lr, r4, sl
 8012e8c:	eb06 0a04 	add.w	sl, r6, r4
 8012e90:	f816 b004 	ldrb.w	fp, [r6, r4]
 8012e94:	d02b      	beq.n	8012eee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8012e96:	7804      	ldrb	r4, [r0, #0]
 8012e98:	fb14 f405 	smulbb	r4, r4, r5
 8012e9c:	fb0b 440c 	mla	r4, fp, ip, r4
 8012ea0:	b2a4      	uxth	r4, r4
 8012ea2:	f104 0b01 	add.w	fp, r4, #1
 8012ea6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012eaa:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012eae:	fb1b fb05 	smulbb	fp, fp, r5
 8012eb2:	1224      	asrs	r4, r4, #8
 8012eb4:	7004      	strb	r4, [r0, #0]
 8012eb6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012eba:	fb04 b40c 	mla	r4, r4, ip, fp
 8012ebe:	b2a4      	uxth	r4, r4
 8012ec0:	f104 0b01 	add.w	fp, r4, #1
 8012ec4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012ec8:	1224      	asrs	r4, r4, #8
 8012eca:	7044      	strb	r4, [r0, #1]
 8012ecc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012ed0:	f890 a002 	ldrb.w	sl, [r0, #2]
 8012ed4:	fb1a fa05 	smulbb	sl, sl, r5
 8012ed8:	fb04 a40c 	mla	r4, r4, ip, sl
 8012edc:	b2a4      	uxth	r4, r4
 8012ede:	f104 0a01 	add.w	sl, r4, #1
 8012ee2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8012ee6:	1224      	asrs	r4, r4, #8
 8012ee8:	7084      	strb	r4, [r0, #2]
 8012eea:	3003      	adds	r0, #3
 8012eec:	e7c3      	b.n	8012e76 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8012eee:	f880 b000 	strb.w	fp, [r0]
 8012ef2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012ef6:	7044      	strb	r4, [r0, #1]
 8012ef8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012efc:	e7f4      	b.n	8012ee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8012efe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012f00:	4420      	add	r0, r4
 8012f02:	188c      	adds	r4, r1, r2
 8012f04:	e7b2      	b.n	8012e6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8012f06:	4b03      	ldr	r3, [pc, #12]	; (8012f14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	6803      	ldr	r3, [r0, #0]
 8012f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0e:	4798      	blx	r3
 8012f10:	e785      	b.n	8012e1e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8012f12:	bf00      	nop
 8012f14:	2400b224 	.word	0x2400b224
 8012f18:	2400b21e 	.word	0x2400b21e

08012f1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8012f1c:	b430      	push	{r4, r5}
 8012f1e:	780d      	ldrb	r5, [r1, #0]
 8012f20:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8012f24:	b11d      	cbz	r5, 8012f2e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8012f26:	2d01      	cmp	r5, #1
 8012f28:	d005      	beq.n	8012f36 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8012f2a:	bc30      	pop	{r4, r5}
 8012f2c:	4770      	bx	lr
 8012f2e:	9402      	str	r4, [sp, #8]
 8012f30:	bc30      	pop	{r4, r5}
 8012f32:	f7ff be3f 	b.w	8012bb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8012f36:	9402      	str	r4, [sp, #8]
 8012f38:	bc30      	pop	{r4, r5}
 8012f3a:	f7ff bf13 	b.w	8012d64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08012f40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8012f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f44:	4605      	mov	r5, r0
 8012f46:	b08f      	sub	sp, #60	; 0x3c
 8012f48:	460c      	mov	r4, r1
 8012f4a:	461f      	mov	r7, r3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d052      	beq.n	8012ff6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8012f50:	6808      	ldr	r0, [r1, #0]
 8012f52:	ab0a      	add	r3, sp, #40	; 0x28
 8012f54:	6849      	ldr	r1, [r1, #4]
 8012f56:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8013120 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8012f5a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8013124 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8012f5e:	c303      	stmia	r3!, {r0, r1}
 8012f60:	6810      	ldr	r0, [r2, #0]
 8012f62:	ab0c      	add	r3, sp, #48	; 0x30
 8012f64:	6851      	ldr	r1, [r2, #4]
 8012f66:	c303      	stmia	r3!, {r0, r1}
 8012f68:	a80a      	add	r0, sp, #40	; 0x28
 8012f6a:	f7fa fdb3 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012f6e:	4621      	mov	r1, r4
 8012f70:	a80c      	add	r0, sp, #48	; 0x30
 8012f72:	f7fa fdd7 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012f76:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012f7a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012f7e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012f82:	f8d8 0000 	ldr.w	r0, [r8]
 8012f86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012f8a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8012f8e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8012f92:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8012f96:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8012f9a:	440a      	add	r2, r1
 8012f9c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012fa0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012fa4:	4413      	add	r3, r2
 8012fa6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012faa:	6803      	ldr	r3, [r0, #0]
 8012fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fae:	4798      	blx	r3
 8012fb0:	2fff      	cmp	r7, #255	; 0xff
 8012fb2:	d023      	beq.n	8012ffc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012fb4:	f010 0f04 	tst.w	r0, #4
 8012fb8:	f8d8 0000 	ldr.w	r0, [r8]
 8012fbc:	d021      	beq.n	8013002 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	f04f 0e01 	mov.w	lr, #1
 8012fc4:	f8d0 c000 	ldr.w	ip, [r0]
 8012fc8:	b2a4      	uxth	r4, r4
 8012fca:	9106      	str	r1, [sp, #24]
 8012fcc:	b2b6      	uxth	r6, r6
 8012fce:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012fd2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012fd6:	e9cd e107 	strd	lr, r1, [sp, #28]
 8012fda:	f8b9 e000 	ldrh.w	lr, [r9]
 8012fde:	9703      	str	r7, [sp, #12]
 8012fe0:	9401      	str	r4, [sp, #4]
 8012fe2:	9600      	str	r6, [sp, #0]
 8012fe4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8012fe8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012fec:	9102      	str	r1, [sp, #8]
 8012fee:	4629      	mov	r1, r5
 8012ff0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8012ff4:	47a0      	blx	r4
 8012ff6:	b00f      	add	sp, #60	; 0x3c
 8012ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ffc:	f010 0f01 	tst.w	r0, #1
 8013000:	e7da      	b.n	8012fb8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8013002:	6803      	ldr	r3, [r0, #0]
 8013004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013006:	4798      	blx	r3
 8013008:	f8b9 1000 	ldrh.w	r1, [r9]
 801300c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013010:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8013014:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8013018:	434c      	muls	r4, r1
 801301a:	2fff      	cmp	r7, #255	; 0xff
 801301c:	fb01 2303 	mla	r3, r1, r3, r2
 8013020:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013024:	eba1 0106 	sub.w	r1, r1, r6
 8013028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801302c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013030:	4418      	add	r0, r3
 8013032:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8013036:	eba3 0606 	sub.w	r6, r3, r6
 801303a:	4404      	add	r4, r0
 801303c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8013040:	d04a      	beq.n	80130d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8013042:	43fa      	mvns	r2, r7
 8013044:	b2bb      	uxth	r3, r7
 8013046:	b2d7      	uxtb	r7, r2
 8013048:	42a0      	cmp	r0, r4
 801304a:	d263      	bcs.n	8013114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801304c:	eb00 0e0c 	add.w	lr, r0, ip
 8013050:	4586      	cmp	lr, r0
 8013052:	f100 0803 	add.w	r8, r0, #3
 8013056:	d93a      	bls.n	80130ce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8013058:	f835 2b02 	ldrh.w	r2, [r5], #2
 801305c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8013060:	00d0      	lsls	r0, r2, #3
 8013062:	fb19 f907 	smulbb	r9, r9, r7
 8013066:	b2c0      	uxtb	r0, r0
 8013068:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801306c:	fb00 9003 	mla	r0, r0, r3, r9
 8013070:	b280      	uxth	r0, r0
 8013072:	f100 0901 	add.w	r9, r0, #1
 8013076:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801307a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801307e:	fb19 f907 	smulbb	r9, r9, r7
 8013082:	1200      	asrs	r0, r0, #8
 8013084:	f808 0c03 	strb.w	r0, [r8, #-3]
 8013088:	10d0      	asrs	r0, r2, #3
 801308a:	1212      	asrs	r2, r2, #8
 801308c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8013090:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8013094:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8013098:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801309c:	fb00 9003 	mla	r0, r0, r3, r9
 80130a0:	b280      	uxth	r0, r0
 80130a2:	f100 0901 	add.w	r9, r0, #1
 80130a6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80130aa:	1200      	asrs	r0, r0, #8
 80130ac:	f808 0c02 	strb.w	r0, [r8, #-2]
 80130b0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80130b4:	fb10 f007 	smulbb	r0, r0, r7
 80130b8:	fb02 0203 	mla	r2, r2, r3, r0
 80130bc:	b292      	uxth	r2, r2
 80130be:	1c50      	adds	r0, r2, #1
 80130c0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80130c4:	4640      	mov	r0, r8
 80130c6:	1212      	asrs	r2, r2, #8
 80130c8:	f808 2c01 	strb.w	r2, [r8, #-1]
 80130cc:	e7c0      	b.n	8013050 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80130ce:	4408      	add	r0, r1
 80130d0:	4435      	add	r5, r6
 80130d2:	e7b9      	b.n	8013048 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80130d4:	4408      	add	r0, r1
 80130d6:	4435      	add	r5, r6
 80130d8:	42a0      	cmp	r0, r4
 80130da:	d21b      	bcs.n	8013114 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80130dc:	eb00 070c 	add.w	r7, r0, ip
 80130e0:	42b8      	cmp	r0, r7
 80130e2:	d2f7      	bcs.n	80130d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80130e4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80130e8:	3003      	adds	r0, #3
 80130ea:	00da      	lsls	r2, r3, #3
 80130ec:	b2d2      	uxtb	r2, r2
 80130ee:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80130f2:	f800 2c03 	strb.w	r2, [r0, #-3]
 80130f6:	10da      	asrs	r2, r3, #3
 80130f8:	121b      	asrs	r3, r3, #8
 80130fa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80130fe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013102:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8013106:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801310a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801310e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8013112:	e7e5      	b.n	80130e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8013114:	4b02      	ldr	r3, [pc, #8]	; (8013120 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	6803      	ldr	r3, [r0, #0]
 801311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311c:	4798      	blx	r3
 801311e:	e76a      	b.n	8012ff6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8013120:	2400b224 	.word	0x2400b224
 8013124:	2400b21e 	.word	0x2400b21e

08013128 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8013128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801312c:	b08a      	sub	sp, #40	; 0x28
 801312e:	460d      	mov	r5, r1
 8013130:	4604      	mov	r4, r0
 8013132:	461e      	mov	r6, r3
 8013134:	6808      	ldr	r0, [r1, #0]
 8013136:	ab06      	add	r3, sp, #24
 8013138:	6849      	ldr	r1, [r1, #4]
 801313a:	4f5d      	ldr	r7, [pc, #372]	; (80132b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801313c:	c303      	stmia	r3!, {r0, r1}
 801313e:	6810      	ldr	r0, [r2, #0]
 8013140:	ab08      	add	r3, sp, #32
 8013142:	6851      	ldr	r1, [r2, #4]
 8013144:	c303      	stmia	r3!, {r0, r1}
 8013146:	a806      	add	r0, sp, #24
 8013148:	f7fa fcc4 	bl	800dad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801314c:	4629      	mov	r1, r5
 801314e:	a808      	add	r0, sp, #32
 8013150:	f7fa fce8 	bl	800db24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013154:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013158:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801315c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013160:	6838      	ldr	r0, [r7, #0]
 8013162:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013166:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801316a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801316e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013172:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013176:	440a      	add	r2, r1
 8013178:	f8ad 2020 	strh.w	r2, [sp, #32]
 801317c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013180:	4413      	add	r3, r2
 8013182:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013186:	6803      	ldr	r3, [r0, #0]
 8013188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801318a:	4798      	blx	r3
 801318c:	2eff      	cmp	r6, #255	; 0xff
 801318e:	d119      	bne.n	80131c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8013190:	f010 0f20 	tst.w	r0, #32
 8013194:	6838      	ldr	r0, [r7, #0]
 8013196:	d018      	beq.n	80131ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8013198:	b2ad      	uxth	r5, r5
 801319a:	2700      	movs	r7, #0
 801319c:	6801      	ldr	r1, [r0, #0]
 801319e:	9501      	str	r5, [sp, #4]
 80131a0:	fa1f f588 	uxth.w	r5, r8
 80131a4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80131a8:	9500      	str	r5, [sp, #0]
 80131aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80131ae:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80131b2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80131b6:	9602      	str	r6, [sp, #8]
 80131b8:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80131ba:	4621      	mov	r1, r4
 80131bc:	47a8      	blx	r5
 80131be:	b00a      	add	sp, #40	; 0x28
 80131c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80131c8:	e7e4      	b.n	8013194 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80131ca:	6803      	ldr	r3, [r0, #0]
 80131cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131ce:	4798      	blx	r3
 80131d0:	4b38      	ldr	r3, [pc, #224]	; (80132b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80131d2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80131d6:	f8b3 c000 	ldrh.w	ip, [r3]
 80131da:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80131de:	fb0c f505 	mul.w	r5, ip, r5
 80131e2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80131e6:	fb0c 2303 	mla	r3, ip, r3, r2
 80131ea:	ebac 0c08 	sub.w	ip, ip, r8
 80131ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131f2:	ebae 0e08 	sub.w	lr, lr, r8
 80131f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80131fa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80131fe:	4418      	add	r0, r3
 8013200:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8013204:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8013208:	4405      	add	r5, r0
 801320a:	42a8      	cmp	r0, r5
 801320c:	d24a      	bcs.n	80132a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801320e:	eb00 0803 	add.w	r8, r0, r3
 8013212:	4540      	cmp	r0, r8
 8013214:	d243      	bcs.n	801329e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8013216:	78e2      	ldrb	r2, [r4, #3]
 8013218:	b15a      	cbz	r2, 8013232 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801321a:	2aff      	cmp	r2, #255	; 0xff
 801321c:	f894 9000 	ldrb.w	r9, [r4]
 8013220:	d10a      	bne.n	8013238 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8013222:	2eff      	cmp	r6, #255	; 0xff
 8013224:	d108      	bne.n	8013238 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8013226:	f880 9000 	strb.w	r9, [r0]
 801322a:	7862      	ldrb	r2, [r4, #1]
 801322c:	7042      	strb	r2, [r0, #1]
 801322e:	78a2      	ldrb	r2, [r4, #2]
 8013230:	7082      	strb	r2, [r0, #2]
 8013232:	3003      	adds	r0, #3
 8013234:	3404      	adds	r4, #4
 8013236:	e7ec      	b.n	8013212 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8013238:	4372      	muls	r2, r6
 801323a:	1c51      	adds	r1, r2, #1
 801323c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8013240:	1209      	asrs	r1, r1, #8
 8013242:	fa1f fa81 	uxth.w	sl, r1
 8013246:	43c9      	mvns	r1, r1
 8013248:	fb19 f90a 	smulbb	r9, r9, sl
 801324c:	b2ca      	uxtb	r2, r1
 801324e:	7801      	ldrb	r1, [r0, #0]
 8013250:	fb01 9902 	mla	r9, r1, r2, r9
 8013254:	fa1f f989 	uxth.w	r9, r9
 8013258:	f109 0101 	add.w	r1, r9, #1
 801325c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8013260:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013264:	f880 9000 	strb.w	r9, [r0]
 8013268:	f890 9001 	ldrb.w	r9, [r0, #1]
 801326c:	7861      	ldrb	r1, [r4, #1]
 801326e:	fb19 f902 	smulbb	r9, r9, r2
 8013272:	fb01 910a 	mla	r1, r1, sl, r9
 8013276:	b289      	uxth	r1, r1
 8013278:	f101 0901 	add.w	r9, r1, #1
 801327c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8013280:	1209      	asrs	r1, r1, #8
 8013282:	7041      	strb	r1, [r0, #1]
 8013284:	7881      	ldrb	r1, [r0, #2]
 8013286:	f894 9002 	ldrb.w	r9, [r4, #2]
 801328a:	fb11 f202 	smulbb	r2, r1, r2
 801328e:	fb09 220a 	mla	r2, r9, sl, r2
 8013292:	b292      	uxth	r2, r2
 8013294:	1c51      	adds	r1, r2, #1
 8013296:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801329a:	1212      	asrs	r2, r2, #8
 801329c:	e7c8      	b.n	8013230 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801329e:	4460      	add	r0, ip
 80132a0:	4474      	add	r4, lr
 80132a2:	e7b2      	b.n	801320a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80132a4:	6838      	ldr	r0, [r7, #0]
 80132a6:	6803      	ldr	r3, [r0, #0]
 80132a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132aa:	4798      	blx	r3
 80132ac:	e787      	b.n	80131be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80132ae:	bf00      	nop
 80132b0:	2400b224 	.word	0x2400b224
 80132b4:	2400b21e 	.word	0x2400b21e

080132b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80132b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132bc:	b085      	sub	sp, #20
 80132be:	4606      	mov	r6, r0
 80132c0:	460c      	mov	r4, r1
 80132c2:	4691      	mov	r9, r2
 80132c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80132c8:	4698      	mov	r8, r3
 80132ca:	b31d      	cbz	r5, 8013314 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80132cc:	4608      	mov	r0, r1
 80132ce:	f7fd fa4f 	bl	8010770 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80132d2:	4607      	mov	r7, r0
 80132d4:	4620      	mov	r0, r4
 80132d6:	f7fd fa7f 	bl	80107d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80132da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80132de:	4620      	mov	r0, r4
 80132e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80132e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80132e8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80132ec:	f7fd fb78 	bl	80109e0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80132f0:	280b      	cmp	r0, #11
 80132f2:	d80f      	bhi.n	8013314 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80132f4:	e8df f000 	tbb	[pc, r0]
 80132f8:	0e062920 	.word	0x0e062920
 80132fc:	0e0e0e0e 	.word	0x0e0e0e0e
 8013300:	110e0e0e 	.word	0x110e0e0e
 8013304:	4620      	mov	r0, r4
 8013306:	f7fd fae7 	bl	80108d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801330a:	462b      	mov	r3, r5
 801330c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801330e:	a902      	add	r1, sp, #8
 8013310:	f7ff ff0a 	bl	8013128 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013314:	b005      	add	sp, #20
 8013316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801331a:	4620      	mov	r0, r4
 801331c:	f7fd fadc 	bl	80108d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013320:	4606      	mov	r6, r0
 8013322:	4620      	mov	r0, r4
 8013324:	f7fd fb08 	bl	8010938 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8013328:	9500      	str	r5, [sp, #0]
 801332a:	4601      	mov	r1, r0
 801332c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801332e:	aa02      	add	r2, sp, #8
 8013330:	4630      	mov	r0, r6
 8013332:	f7ff fdf3 	bl	8012f1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8013336:	e7ed      	b.n	8013314 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013338:	4620      	mov	r0, r4
 801333a:	f7fd facd 	bl	80108d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801333e:	462b      	mov	r3, r5
 8013340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013342:	a902      	add	r1, sp, #8
 8013344:	f7ff fdfc 	bl	8012f40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8013348:	e7e4      	b.n	8013314 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801334a:	6833      	ldr	r3, [r6, #0]
 801334c:	4620      	mov	r0, r4
 801334e:	68df      	ldr	r7, [r3, #12]
 8013350:	f7fd fac2 	bl	80108d8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013354:	2300      	movs	r3, #0
 8013356:	4601      	mov	r1, r0
 8013358:	aa02      	add	r2, sp, #8
 801335a:	4630      	mov	r0, r6
 801335c:	e9cd 5300 	strd	r5, r3, [sp]
 8013360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013362:	47b8      	blx	r7
 8013364:	e7d6      	b.n	8013314 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08013366 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8013366:	b4f0      	push	{r4, r5, r6, r7}
 8013368:	4616      	mov	r6, r2
 801336a:	461c      	mov	r4, r3
 801336c:	460d      	mov	r5, r1
 801336e:	9a04      	ldr	r2, [sp, #16]
 8013370:	2e01      	cmp	r6, #1
 8013372:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013376:	d00e      	beq.n	8013396 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8013378:	d303      	bcc.n	8013382 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801337a:	2e02      	cmp	r6, #2
 801337c:	d006      	beq.n	801338c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801337e:	bcf0      	pop	{r4, r5, r6, r7}
 8013380:	4770      	bx	lr
 8013382:	4621      	mov	r1, r4
 8013384:	4628      	mov	r0, r5
 8013386:	bcf0      	pop	{r4, r5, r6, r7}
 8013388:	f7ff bdda 	b.w	8012f40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801338c:	4621      	mov	r1, r4
 801338e:	4628      	mov	r0, r5
 8013390:	bcf0      	pop	{r4, r5, r6, r7}
 8013392:	f7ff bec9 	b.w	8013128 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013396:	6805      	ldr	r5, [r0, #0]
 8013398:	2600      	movs	r6, #0
 801339a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801339e:	68ed      	ldr	r5, [r5, #12]
 80133a0:	4613      	mov	r3, r2
 80133a2:	4622      	mov	r2, r4
 80133a4:	46ac      	mov	ip, r5
 80133a6:	bcf0      	pop	{r4, r5, r6, r7}
 80133a8:	4760      	bx	ip
	...

080133ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80133ac:	b160      	cbz	r0, 80133c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80133ae:	2903      	cmp	r1, #3
 80133b0:	d818      	bhi.n	80133e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80133b2:	e8df f001 	tbb	[pc, r1]
 80133b6:	1902      	.short	0x1902
 80133b8:	1b06      	.short	0x1b06
 80133ba:	4b0e      	ldr	r3, [pc, #56]	; (80133f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80133bc:	8818      	ldrh	r0, [r3, #0]
 80133be:	4240      	negs	r0, r0
 80133c0:	4770      	bx	lr
 80133c2:	4b0c      	ldr	r3, [pc, #48]	; (80133f4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80133c4:	8818      	ldrh	r0, [r3, #0]
 80133c6:	4770      	bx	lr
 80133c8:	2903      	cmp	r1, #3
 80133ca:	d80b      	bhi.n	80133e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80133cc:	a301      	add	r3, pc, #4	; (adr r3, 80133d4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80133ce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80133d2:	bf00      	nop
 80133d4:	080133e9 	.word	0x080133e9
 80133d8:	080133c3 	.word	0x080133c3
 80133dc:	080133ed 	.word	0x080133ed
 80133e0:	080133bb 	.word	0x080133bb
 80133e4:	2000      	movs	r0, #0
 80133e6:	4770      	bx	lr
 80133e8:	2001      	movs	r0, #1
 80133ea:	4770      	bx	lr
 80133ec:	f04f 30ff 	mov.w	r0, #4294967295
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	2400b21e 	.word	0x2400b21e

080133f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80133f8:	b160      	cbz	r0, 8013414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80133fa:	2903      	cmp	r1, #3
 80133fc:	d818      	bhi.n	8013430 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80133fe:	e8df f001 	tbb	[pc, r1]
 8013402:	0219      	.short	0x0219
 8013404:	051b      	.short	0x051b
 8013406:	4b0e      	ldr	r3, [pc, #56]	; (8013440 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8013408:	8818      	ldrh	r0, [r3, #0]
 801340a:	4770      	bx	lr
 801340c:	4b0c      	ldr	r3, [pc, #48]	; (8013440 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801340e:	8818      	ldrh	r0, [r3, #0]
 8013410:	4240      	negs	r0, r0
 8013412:	4770      	bx	lr
 8013414:	2903      	cmp	r1, #3
 8013416:	d80b      	bhi.n	8013430 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8013418:	a301      	add	r3, pc, #4	; (adr r3, 8013420 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801341a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801341e:	bf00      	nop
 8013420:	08013407 	.word	0x08013407
 8013424:	08013439 	.word	0x08013439
 8013428:	0801340d 	.word	0x0801340d
 801342c:	08013435 	.word	0x08013435
 8013430:	2000      	movs	r0, #0
 8013432:	4770      	bx	lr
 8013434:	2001      	movs	r0, #1
 8013436:	4770      	bx	lr
 8013438:	f04f 30ff 	mov.w	r0, #4294967295
 801343c:	4770      	bx	lr
 801343e:	bf00      	nop
 8013440:	2400b21e 	.word	0x2400b21e

08013444 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8013444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013448:	b097      	sub	sp, #92	; 0x5c
 801344a:	910b      	str	r1, [sp, #44]	; 0x2c
 801344c:	a912      	add	r1, sp, #72	; 0x48
 801344e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8013452:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8013456:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801345a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801345e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8013462:	e881 000c 	stmia.w	r1, {r2, r3}
 8013466:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801346a:	930a      	str	r3, [sp, #40]	; 0x28
 801346c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8013470:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8013474:	9311      	str	r3, [sp, #68]	; 0x44
 8013476:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801347a:	798d      	ldrb	r5, [r1, #6]
 801347c:	930c      	str	r3, [sp, #48]	; 0x30
 801347e:	7b4b      	ldrb	r3, [r1, #13]
 8013480:	0158      	lsls	r0, r3, #5
 8013482:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013486:	4328      	orrs	r0, r5
 8013488:	9009      	str	r0, [sp, #36]	; 0x24
 801348a:	f000 817c 	beq.w	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801348e:	011b      	lsls	r3, r3, #4
 8013490:	79c8      	ldrb	r0, [r1, #7]
 8013492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013496:	4303      	orrs	r3, r0
 8013498:	930e      	str	r3, [sp, #56]	; 0x38
 801349a:	f000 8174 	beq.w	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801349e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	2f00      	cmp	r7, #0
 80134a6:	f000 8116 	beq.w	80136d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80134aa:	1aff      	subs	r7, r7, r3
 80134ac:	b2bf      	uxth	r7, r7
 80134ae:	043b      	lsls	r3, r7, #16
 80134b0:	d502      	bpl.n	80134b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80134b2:	1bf6      	subs	r6, r6, r7
 80134b4:	2700      	movs	r7, #0
 80134b6:	b236      	sxth	r6, r6
 80134b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80134bc:	a812      	add	r0, sp, #72	; 0x48
 80134be:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80134c2:	428e      	cmp	r6, r1
 80134c4:	b28b      	uxth	r3, r1
 80134c6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80134ca:	bfbf      	itttt	lt
 80134cc:	18ff      	addlt	r7, r7, r3
 80134ce:	1bbe      	sublt	r6, r7, r6
 80134d0:	b2b7      	uxthlt	r7, r6
 80134d2:	460e      	movlt	r6, r1
 80134d4:	8891      	ldrh	r1, [r2, #4]
 80134d6:	440b      	add	r3, r1
 80134d8:	4631      	mov	r1, r6
 80134da:	b21b      	sxth	r3, r3
 80134dc:	9310      	str	r3, [sp, #64]	; 0x40
 80134de:	88d3      	ldrh	r3, [r2, #6]
 80134e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134e2:	449a      	add	sl, r3
 80134e4:	fa0f f38a 	sxth.w	r3, sl
 80134e8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80134ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80134ee:	4bb5      	ldr	r3, [pc, #724]	; (80137c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80134f0:	f893 b000 	ldrb.w	fp, [r3]
 80134f4:	f10b 3cff 	add.w	ip, fp, #4294967295
 80134f8:	f1dc 0300 	rsbs	r3, ip, #0
 80134fc:	eb43 030c 	adc.w	r3, r3, ip
 8013500:	930d      	str	r3, [sp, #52]	; 0x34
 8013502:	464b      	mov	r3, r9
 8013504:	f7fa f960 	bl	800d7c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8013508:	4631      	mov	r1, r6
 801350a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801350e:	464b      	mov	r3, r9
 8013510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013512:	a812      	add	r0, sp, #72	; 0x48
 8013514:	f7fa f975 	bl	800d802 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8013518:	a916      	add	r1, sp, #88	; 0x58
 801351a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801351e:	a815      	add	r0, sp, #84	; 0x54
 8013520:	f7fa fa96 	bl	800da50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8013524:	f1b9 0f00 	cmp.w	r9, #0
 8013528:	f040 80d8 	bne.w	80136dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801352c:	f1bb 0f01 	cmp.w	fp, #1
 8013530:	f040 80dc 	bne.w	80136ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8013534:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013536:	b153      	cbz	r3, 801354e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8013538:	2508      	movs	r5, #8
 801353a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801353c:	fb95 f3f8 	sdiv	r3, r5, r8
 8013540:	1e5d      	subs	r5, r3, #1
 8013542:	4415      	add	r5, r2
 8013544:	fb95 f5f3 	sdiv	r5, r5, r3
 8013548:	fb15 f503 	smulbb	r5, r5, r3
 801354c:	b2ad      	uxth	r5, r5
 801354e:	b907      	cbnz	r7, 8013552 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8013550:	b16c      	cbz	r4, 801356e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8013552:	fb04 7305 	mla	r3, r4, r5, r7
 8013556:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013558:	ebaa 0a04 	sub.w	sl, sl, r4
 801355c:	fb08 f303 	mul.w	r3, r8, r3
 8013560:	fa1f fa8a 	uxth.w	sl, sl
 8013564:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8013568:	f003 0407 	and.w	r4, r3, #7
 801356c:	9226      	str	r2, [sp, #152]	; 0x98
 801356e:	4649      	mov	r1, r9
 8013570:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013572:	f7ff ff1b 	bl	80133ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8013576:	4683      	mov	fp, r0
 8013578:	980d      	ldr	r0, [sp, #52]	; 0x34
 801357a:	f7ff ff3d 	bl	80133f8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801357e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013582:	4681      	mov	r9, r0
 8013584:	1a9b      	subs	r3, r3, r2
 8013586:	459a      	cmp	sl, r3
 8013588:	bfa8      	it	ge
 801358a:	469a      	movge	sl, r3
 801358c:	f1ba 0f00 	cmp.w	sl, #0
 8013590:	f340 80f9 	ble.w	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8013594:	1bf6      	subs	r6, r6, r7
 8013596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013598:	1b9e      	subs	r6, r3, r6
 801359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359c:	429e      	cmp	r6, r3
 801359e:	bfd4      	ite	le
 80135a0:	ebc7 0706 	rsble	r7, r7, r6
 80135a4:	ebc7 0703 	rsbgt	r7, r7, r3
 80135a8:	2f00      	cmp	r7, #0
 80135aa:	f340 80ec 	ble.w	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80135ae:	1bed      	subs	r5, r5, r7
 80135b0:	fb08 f305 	mul.w	r3, r8, r5
 80135b4:	930d      	str	r3, [sp, #52]	; 0x34
 80135b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80135b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80135bc:	930e      	str	r3, [sp, #56]	; 0x38
 80135be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80135c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80135c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80135c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	9310      	str	r3, [sp, #64]	; 0x40
 80135cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f040 80de 	bne.w	8013790 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80135d4:	4b7c      	ldr	r3, [pc, #496]	; (80137c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80135d6:	6818      	ldr	r0, [r3, #0]
 80135d8:	6803      	ldr	r3, [r0, #0]
 80135da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135dc:	4798      	blx	r3
 80135de:	2301      	movs	r3, #1
 80135e0:	4a7a      	ldr	r2, [pc, #488]	; (80137cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80135e2:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80135e6:	fb07 9b1b 	mls	fp, r7, fp, r9
 80135ea:	fa03 f308 	lsl.w	r3, r3, r8
 80135ee:	8811      	ldrh	r1, [r2, #0]
 80135f0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80135f4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80135f8:	3b01      	subs	r3, #1
 80135fa:	fb06 bb07 	mla	fp, r6, r7, fp
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	930a      	str	r3, [sp, #40]	; 0x28
 8013602:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8013606:	fb01 2303 	mla	r3, r1, r3, r2
 801360a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801360e:	18c3      	adds	r3, r0, r3
 8013610:	9309      	str	r3, [sp, #36]	; 0x24
 8013612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013614:	781a      	ldrb	r2, [r3, #0]
 8013616:	4122      	asrs	r2, r4
 8013618:	b2d2      	uxtb	r2, r2
 801361a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801361e:	f0c0 80d7 	bcc.w	80137d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8013622:	46be      	mov	lr, r7
 8013624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013626:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801362a:	f0c0 80ba 	bcc.w	80137a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801362e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013630:	4013      	ands	r3, r2
 8013632:	d041      	beq.n	80136b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8013634:	20ff      	movs	r0, #255	; 0xff
 8013636:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013638:	fb90 f5f5 	sdiv	r5, r0, r5
 801363c:	436b      	muls	r3, r5
 801363e:	2bfe      	cmp	r3, #254	; 0xfe
 8013640:	dd03      	ble.n	801364a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8013642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013644:	4285      	cmp	r5, r0
 8013646:	f000 80a5 	beq.w	8013794 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801364a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801364c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801364e:	fb15 f303 	smulbb	r3, r5, r3
 8013652:	b29b      	uxth	r3, r3
 8013654:	1c5d      	adds	r5, r3, #1
 8013656:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801365a:	780d      	ldrb	r5, [r1, #0]
 801365c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013660:	fa1f fc83 	uxth.w	ip, r3
 8013664:	43db      	mvns	r3, r3
 8013666:	fb10 f90c 	smulbb	r9, r0, ip
 801366a:	b2db      	uxtb	r3, r3
 801366c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801366e:	fb05 9503 	mla	r5, r5, r3, r9
 8013672:	b2ad      	uxth	r5, r5
 8013674:	f105 0901 	add.w	r9, r5, #1
 8013678:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801367c:	fb10 f90c 	smulbb	r9, r0, ip
 8013680:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013682:	122d      	asrs	r5, r5, #8
 8013684:	fb10 fc0c 	smulbb	ip, r0, ip
 8013688:	700d      	strb	r5, [r1, #0]
 801368a:	784d      	ldrb	r5, [r1, #1]
 801368c:	fb05 9503 	mla	r5, r5, r3, r9
 8013690:	b2ad      	uxth	r5, r5
 8013692:	f105 0901 	add.w	r9, r5, #1
 8013696:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801369a:	122d      	asrs	r5, r5, #8
 801369c:	704d      	strb	r5, [r1, #1]
 801369e:	788d      	ldrb	r5, [r1, #2]
 80136a0:	fb05 cc03 	mla	ip, r5, r3, ip
 80136a4:	fa1f fc8c 	uxth.w	ip, ip
 80136a8:	f10c 0301 	add.w	r3, ip, #1
 80136ac:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80136b0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80136b4:	f881 c002 	strb.w	ip, [r1, #2]
 80136b8:	4444      	add	r4, r8
 80136ba:	4431      	add	r1, r6
 80136bc:	b2a4      	uxth	r4, r4
 80136be:	2c07      	cmp	r4, #7
 80136c0:	bf89      	itett	hi
 80136c2:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80136c4:	fa42 f208 	asrls.w	r2, r2, r8
 80136c8:	2400      	movhi	r4, #0
 80136ca:	785a      	ldrbhi	r2, [r3, #1]
 80136cc:	bf8a      	itet	hi
 80136ce:	3301      	addhi	r3, #1
 80136d0:	b2d2      	uxtbls	r2, r2
 80136d2:	9326      	strhi	r3, [sp, #152]	; 0x98
 80136d4:	e7a7      	b.n	8013626 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80136d6:	441e      	add	r6, r3
 80136d8:	b236      	sxth	r6, r6
 80136da:	e6ed      	b.n	80134b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80136dc:	f1b9 0f01 	cmp.w	r9, #1
 80136e0:	f47f af28 	bne.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80136e4:	f1bb 0f01 	cmp.w	fp, #1
 80136e8:	f47f af24 	bne.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80136ec:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80137c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80136f0:	f8db 0000 	ldr.w	r0, [fp]
 80136f4:	6803      	ldr	r3, [r0, #0]
 80136f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136f8:	4798      	blx	r3
 80136fa:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80136fe:	465a      	mov	r2, fp
 8013700:	d006      	beq.n	8013710 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8013702:	f1b8 0f04 	cmp.w	r8, #4
 8013706:	d141      	bne.n	801378c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8013708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801370a:	3300      	adds	r3, #0
 801370c:	bf18      	it	ne
 801370e:	2301      	movne	r3, #1
 8013710:	0580      	lsls	r0, r0, #22
 8013712:	d566      	bpl.n	80137e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8013714:	f1b8 0f08 	cmp.w	r8, #8
 8013718:	d163      	bne.n	80137e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801371a:	2b00      	cmp	r3, #0
 801371c:	bf0c      	ite	eq
 801371e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8013722:	f44f 7180 	movne.w	r1, #256	; 0x100
 8013726:	2f00      	cmp	r7, #0
 8013728:	f47f af04 	bne.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801372c:	2c00      	cmp	r4, #0
 801372e:	f47f af01 	bne.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013734:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013736:	18f3      	adds	r3, r6, r3
 8013738:	4283      	cmp	r3, r0
 801373a:	f73f aefb 	bgt.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801373e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013742:	4403      	add	r3, r0
 8013744:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013746:	4283      	cmp	r3, r0
 8013748:	f73f aef4 	bgt.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801374c:	f1b8 0f08 	cmp.w	r8, #8
 8013750:	6810      	ldr	r0, [r2, #0]
 8013752:	f04f 0600 	mov.w	r6, #0
 8013756:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801375a:	bf18      	it	ne
 801375c:	3501      	addne	r5, #1
 801375e:	6804      	ldr	r4, [r0, #0]
 8013760:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013764:	bf18      	it	ne
 8013766:	f025 0501 	bicne.w	r5, r5, #1
 801376a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801376e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013770:	bf18      	it	ne
 8013772:	b2ad      	uxthne	r5, r5
 8013774:	9104      	str	r1, [sp, #16]
 8013776:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013778:	e9cd 5a00 	strd	r5, sl, [sp]
 801377c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8013780:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013782:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8013784:	47a0      	blx	r4
 8013786:	b017      	add	sp, #92	; 0x5c
 8013788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378c:	2300      	movs	r3, #0
 801378e:	e7bf      	b.n	8013710 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8013790:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013792:	e724      	b.n	80135de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8013794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013796:	700b      	strb	r3, [r1, #0]
 8013798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801379a:	704b      	strb	r3, [r1, #1]
 801379c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801379e:	708b      	strb	r3, [r1, #2]
 80137a0:	e78a      	b.n	80136b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80137a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137a4:	b153      	cbz	r3, 80137bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80137a6:	441c      	add	r4, r3
 80137a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80137aa:	b2a4      	uxth	r4, r4
 80137ac:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80137b0:	f004 0407 	and.w	r4, r4, #7
 80137b4:	781a      	ldrb	r2, [r3, #0]
 80137b6:	9326      	str	r3, [sp, #152]	; 0x98
 80137b8:	4122      	asrs	r2, r4
 80137ba:	b2d2      	uxtb	r2, r2
 80137bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137be:	445b      	add	r3, fp
 80137c0:	9309      	str	r3, [sp, #36]	; 0x24
 80137c2:	e72a      	b.n	801361a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80137c4:	2400b21c 	.word	0x2400b21c
 80137c8:	2400b224 	.word	0x2400b224
 80137cc:	2400b21e 	.word	0x2400b21e
 80137d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1d7      	bne.n	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80137d6:	4b06      	ldr	r3, [pc, #24]	; (80137f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80137d8:	6818      	ldr	r0, [r3, #0]
 80137da:	6803      	ldr	r3, [r0, #0]
 80137dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137de:	4798      	blx	r3
 80137e0:	e7d1      	b.n	8013786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f43f aea6 	beq.w	8013534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80137ec:	e79b      	b.n	8013726 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80137ee:	bf00      	nop
 80137f0:	2400b224 	.word	0x2400b224

080137f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4c15      	ldr	r4, [pc, #84]	; (801384c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80137f8:	4605      	mov	r5, r0
 80137fa:	7823      	ldrb	r3, [r4, #0]
 80137fc:	f3bf 8f5b 	dmb	ish
 8013800:	07da      	lsls	r2, r3, #31
 8013802:	d40b      	bmi.n	801381c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8013804:	4620      	mov	r0, r4
 8013806:	f005 f890 	bl	801892a <__cxa_guard_acquire>
 801380a:	b138      	cbz	r0, 801381c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801380c:	4620      	mov	r0, r4
 801380e:	f005 f898 	bl	8018942 <__cxa_guard_release>
 8013812:	4a0f      	ldr	r2, [pc, #60]	; (8013850 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013814:	490f      	ldr	r1, [pc, #60]	; (8013854 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8013816:	4810      	ldr	r0, [pc, #64]	; (8013858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013818:	f005 f880 	bl	801891c <__aeabi_atexit>
 801381c:	4c0f      	ldr	r4, [pc, #60]	; (801385c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801381e:	7823      	ldrb	r3, [r4, #0]
 8013820:	f3bf 8f5b 	dmb	ish
 8013824:	07db      	lsls	r3, r3, #31
 8013826:	d40b      	bmi.n	8013840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013828:	4620      	mov	r0, r4
 801382a:	f005 f87e 	bl	801892a <__cxa_guard_acquire>
 801382e:	b138      	cbz	r0, 8013840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013830:	4620      	mov	r0, r4
 8013832:	f005 f886 	bl	8018942 <__cxa_guard_release>
 8013836:	4a06      	ldr	r2, [pc, #24]	; (8013850 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013838:	4909      	ldr	r1, [pc, #36]	; (8013860 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801383a:	480a      	ldr	r0, [pc, #40]	; (8013864 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801383c:	f005 f86e 	bl	801891c <__aeabi_atexit>
 8013840:	4b05      	ldr	r3, [pc, #20]	; (8013858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013842:	612b      	str	r3, [r5, #16]
 8013844:	4b07      	ldr	r3, [pc, #28]	; (8013864 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8013846:	616b      	str	r3, [r5, #20]
 8013848:	bd38      	pop	{r3, r4, r5, pc}
 801384a:	bf00      	nop
 801384c:	2400b2f0 	.word	0x2400b2f0
 8013850:	24000000 	.word	0x24000000
 8013854:	080123b9 	.word	0x080123b9
 8013858:	24000094 	.word	0x24000094
 801385c:	2400b2f4 	.word	0x2400b2f4
 8013860:	080123b7 	.word	0x080123b7
 8013864:	24000098 	.word	0x24000098

08013868 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	4c15      	ldr	r4, [pc, #84]	; (80138c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801386c:	4605      	mov	r5, r0
 801386e:	7823      	ldrb	r3, [r4, #0]
 8013870:	f3bf 8f5b 	dmb	ish
 8013874:	07da      	lsls	r2, r3, #31
 8013876:	d40b      	bmi.n	8013890 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013878:	4620      	mov	r0, r4
 801387a:	f005 f856 	bl	801892a <__cxa_guard_acquire>
 801387e:	b138      	cbz	r0, 8013890 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013880:	4620      	mov	r0, r4
 8013882:	f005 f85e 	bl	8018942 <__cxa_guard_release>
 8013886:	4a0f      	ldr	r2, [pc, #60]	; (80138c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013888:	490f      	ldr	r1, [pc, #60]	; (80138c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801388a:	4810      	ldr	r0, [pc, #64]	; (80138cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801388c:	f005 f846 	bl	801891c <__aeabi_atexit>
 8013890:	4c0f      	ldr	r4, [pc, #60]	; (80138d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8013892:	7823      	ldrb	r3, [r4, #0]
 8013894:	f3bf 8f5b 	dmb	ish
 8013898:	07db      	lsls	r3, r3, #31
 801389a:	d40b      	bmi.n	80138b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801389c:	4620      	mov	r0, r4
 801389e:	f005 f844 	bl	801892a <__cxa_guard_acquire>
 80138a2:	b138      	cbz	r0, 80138b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80138a4:	4620      	mov	r0, r4
 80138a6:	f005 f84c 	bl	8018942 <__cxa_guard_release>
 80138aa:	4a06      	ldr	r2, [pc, #24]	; (80138c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80138ac:	4909      	ldr	r1, [pc, #36]	; (80138d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80138ae:	480a      	ldr	r0, [pc, #40]	; (80138d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80138b0:	f005 f834 	bl	801891c <__aeabi_atexit>
 80138b4:	4b05      	ldr	r3, [pc, #20]	; (80138cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80138b6:	60ab      	str	r3, [r5, #8]
 80138b8:	4b07      	ldr	r3, [pc, #28]	; (80138d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80138ba:	60eb      	str	r3, [r5, #12]
 80138bc:	bd38      	pop	{r3, r4, r5, pc}
 80138be:	bf00      	nop
 80138c0:	2400b2d0 	.word	0x2400b2d0
 80138c4:	24000000 	.word	0x24000000
 80138c8:	080123bd 	.word	0x080123bd
 80138cc:	24000074 	.word	0x24000074
 80138d0:	2400b2d4 	.word	0x2400b2d4
 80138d4:	080123bb 	.word	0x080123bb
 80138d8:	24000078 	.word	0x24000078

080138dc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80138dc:	b510      	push	{r4, lr}
 80138de:	4604      	mov	r4, r0
 80138e0:	f7ff ff88 	bl	80137f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80138e4:	4620      	mov	r0, r4
 80138e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138ea:	f7ff bfbd 	b.w	8013868 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080138f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4c15      	ldr	r4, [pc, #84]	; (8013948 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80138f4:	4605      	mov	r5, r0
 80138f6:	7823      	ldrb	r3, [r4, #0]
 80138f8:	f3bf 8f5b 	dmb	ish
 80138fc:	07da      	lsls	r2, r3, #31
 80138fe:	d40b      	bmi.n	8013918 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013900:	4620      	mov	r0, r4
 8013902:	f005 f812 	bl	801892a <__cxa_guard_acquire>
 8013906:	b138      	cbz	r0, 8013918 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013908:	4620      	mov	r0, r4
 801390a:	f005 f81a 	bl	8018942 <__cxa_guard_release>
 801390e:	4a0f      	ldr	r2, [pc, #60]	; (801394c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013910:	490f      	ldr	r1, [pc, #60]	; (8013950 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8013912:	4810      	ldr	r0, [pc, #64]	; (8013954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8013914:	f005 f802 	bl	801891c <__aeabi_atexit>
 8013918:	4c0f      	ldr	r4, [pc, #60]	; (8013958 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801391a:	7823      	ldrb	r3, [r4, #0]
 801391c:	f3bf 8f5b 	dmb	ish
 8013920:	07db      	lsls	r3, r3, #31
 8013922:	d40b      	bmi.n	801393c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8013924:	4620      	mov	r0, r4
 8013926:	f005 f800 	bl	801892a <__cxa_guard_acquire>
 801392a:	b138      	cbz	r0, 801393c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801392c:	4620      	mov	r0, r4
 801392e:	f005 f808 	bl	8018942 <__cxa_guard_release>
 8013932:	4a06      	ldr	r2, [pc, #24]	; (801394c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013934:	4909      	ldr	r1, [pc, #36]	; (801395c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8013936:	480a      	ldr	r0, [pc, #40]	; (8013960 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013938:	f004 fff0 	bl	801891c <__aeabi_atexit>
 801393c:	4b05      	ldr	r3, [pc, #20]	; (8013954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801393e:	622b      	str	r3, [r5, #32]
 8013940:	4b07      	ldr	r3, [pc, #28]	; (8013960 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013942:	626b      	str	r3, [r5, #36]	; 0x24
 8013944:	bd38      	pop	{r3, r4, r5, pc}
 8013946:	bf00      	nop
 8013948:	2400b2f8 	.word	0x2400b2f8
 801394c:	24000000 	.word	0x24000000
 8013950:	080123b1 	.word	0x080123b1
 8013954:	2400009c 	.word	0x2400009c
 8013958:	2400b2fc 	.word	0x2400b2fc
 801395c:	080123af 	.word	0x080123af
 8013960:	240000a0 	.word	0x240000a0

08013964 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4c15      	ldr	r4, [pc, #84]	; (80139bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8013968:	4605      	mov	r5, r0
 801396a:	7823      	ldrb	r3, [r4, #0]
 801396c:	f3bf 8f5b 	dmb	ish
 8013970:	07da      	lsls	r2, r3, #31
 8013972:	d40b      	bmi.n	801398c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013974:	4620      	mov	r0, r4
 8013976:	f004 ffd8 	bl	801892a <__cxa_guard_acquire>
 801397a:	b138      	cbz	r0, 801398c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801397c:	4620      	mov	r0, r4
 801397e:	f004 ffe0 	bl	8018942 <__cxa_guard_release>
 8013982:	4a0f      	ldr	r2, [pc, #60]	; (80139c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013984:	490f      	ldr	r1, [pc, #60]	; (80139c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8013986:	4810      	ldr	r0, [pc, #64]	; (80139c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013988:	f004 ffc8 	bl	801891c <__aeabi_atexit>
 801398c:	4c0f      	ldr	r4, [pc, #60]	; (80139cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801398e:	7823      	ldrb	r3, [r4, #0]
 8013990:	f3bf 8f5b 	dmb	ish
 8013994:	07db      	lsls	r3, r3, #31
 8013996:	d40b      	bmi.n	80139b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013998:	4620      	mov	r0, r4
 801399a:	f004 ffc6 	bl	801892a <__cxa_guard_acquire>
 801399e:	b138      	cbz	r0, 80139b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80139a0:	4620      	mov	r0, r4
 80139a2:	f004 ffce 	bl	8018942 <__cxa_guard_release>
 80139a6:	4a06      	ldr	r2, [pc, #24]	; (80139c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80139a8:	4909      	ldr	r1, [pc, #36]	; (80139d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80139aa:	480a      	ldr	r0, [pc, #40]	; (80139d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80139ac:	f004 ffb6 	bl	801891c <__aeabi_atexit>
 80139b0:	4b05      	ldr	r3, [pc, #20]	; (80139c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80139b2:	61ab      	str	r3, [r5, #24]
 80139b4:	4b07      	ldr	r3, [pc, #28]	; (80139d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80139b6:	61eb      	str	r3, [r5, #28]
 80139b8:	bd38      	pop	{r3, r4, r5, pc}
 80139ba:	bf00      	nop
 80139bc:	2400b2d8 	.word	0x2400b2d8
 80139c0:	24000000 	.word	0x24000000
 80139c4:	080123b5 	.word	0x080123b5
 80139c8:	2400007c 	.word	0x2400007c
 80139cc:	2400b2dc 	.word	0x2400b2dc
 80139d0:	080123b3 	.word	0x080123b3
 80139d4:	24000080 	.word	0x24000080

080139d8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80139d8:	b510      	push	{r4, lr}
 80139da:	4604      	mov	r4, r0
 80139dc:	f7ff ff88 	bl	80138f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80139e0:	4620      	mov	r0, r4
 80139e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139e6:	f7ff bfbd 	b.w	8013964 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080139ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4c15      	ldr	r4, [pc, #84]	; (8013a44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80139f0:	4605      	mov	r5, r0
 80139f2:	7823      	ldrb	r3, [r4, #0]
 80139f4:	f3bf 8f5b 	dmb	ish
 80139f8:	07da      	lsls	r2, r3, #31
 80139fa:	d40b      	bmi.n	8013a14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80139fc:	4620      	mov	r0, r4
 80139fe:	f004 ff94 	bl	801892a <__cxa_guard_acquire>
 8013a02:	b138      	cbz	r0, 8013a14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8013a04:	4620      	mov	r0, r4
 8013a06:	f004 ff9c 	bl	8018942 <__cxa_guard_release>
 8013a0a:	4a0f      	ldr	r2, [pc, #60]	; (8013a48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013a0c:	490f      	ldr	r1, [pc, #60]	; (8013a4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8013a0e:	4810      	ldr	r0, [pc, #64]	; (8013a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013a10:	f004 ff84 	bl	801891c <__aeabi_atexit>
 8013a14:	4c0f      	ldr	r4, [pc, #60]	; (8013a54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8013a16:	7823      	ldrb	r3, [r4, #0]
 8013a18:	f3bf 8f5b 	dmb	ish
 8013a1c:	07db      	lsls	r3, r3, #31
 8013a1e:	d40b      	bmi.n	8013a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013a20:	4620      	mov	r0, r4
 8013a22:	f004 ff82 	bl	801892a <__cxa_guard_acquire>
 8013a26:	b138      	cbz	r0, 8013a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f004 ff8a 	bl	8018942 <__cxa_guard_release>
 8013a2e:	4a06      	ldr	r2, [pc, #24]	; (8013a48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013a30:	4909      	ldr	r1, [pc, #36]	; (8013a58 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8013a32:	480a      	ldr	r0, [pc, #40]	; (8013a5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a34:	f004 ff72 	bl	801891c <__aeabi_atexit>
 8013a38:	4b05      	ldr	r3, [pc, #20]	; (8013a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013a3a:	632b      	str	r3, [r5, #48]	; 0x30
 8013a3c:	4b07      	ldr	r3, [pc, #28]	; (8013a5c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a3e:	636b      	str	r3, [r5, #52]	; 0x34
 8013a40:	bd38      	pop	{r3, r4, r5, pc}
 8013a42:	bf00      	nop
 8013a44:	2400b2e0 	.word	0x2400b2e0
 8013a48:	24000000 	.word	0x24000000
 8013a4c:	080123a9 	.word	0x080123a9
 8013a50:	24000084 	.word	0x24000084
 8013a54:	2400b2e4 	.word	0x2400b2e4
 8013a58:	080123a7 	.word	0x080123a7
 8013a5c:	24000088 	.word	0x24000088

08013a60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4c15      	ldr	r4, [pc, #84]	; (8013ab8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8013a64:	4605      	mov	r5, r0
 8013a66:	7823      	ldrb	r3, [r4, #0]
 8013a68:	f3bf 8f5b 	dmb	ish
 8013a6c:	07da      	lsls	r2, r3, #31
 8013a6e:	d40b      	bmi.n	8013a88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a70:	4620      	mov	r0, r4
 8013a72:	f004 ff5a 	bl	801892a <__cxa_guard_acquire>
 8013a76:	b138      	cbz	r0, 8013a88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f004 ff62 	bl	8018942 <__cxa_guard_release>
 8013a7e:	4a0f      	ldr	r2, [pc, #60]	; (8013abc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013a80:	490f      	ldr	r1, [pc, #60]	; (8013ac0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8013a82:	4810      	ldr	r0, [pc, #64]	; (8013ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013a84:	f004 ff4a 	bl	801891c <__aeabi_atexit>
 8013a88:	4c0f      	ldr	r4, [pc, #60]	; (8013ac8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8013a8a:	7823      	ldrb	r3, [r4, #0]
 8013a8c:	f3bf 8f5b 	dmb	ish
 8013a90:	07db      	lsls	r3, r3, #31
 8013a92:	d40b      	bmi.n	8013aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a94:	4620      	mov	r0, r4
 8013a96:	f004 ff48 	bl	801892a <__cxa_guard_acquire>
 8013a9a:	b138      	cbz	r0, 8013aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f004 ff50 	bl	8018942 <__cxa_guard_release>
 8013aa2:	4a06      	ldr	r2, [pc, #24]	; (8013abc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013aa4:	4909      	ldr	r1, [pc, #36]	; (8013acc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8013aa6:	480a      	ldr	r0, [pc, #40]	; (8013ad0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013aa8:	f004 ff38 	bl	801891c <__aeabi_atexit>
 8013aac:	4b05      	ldr	r3, [pc, #20]	; (8013ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013aae:	62ab      	str	r3, [r5, #40]	; 0x28
 8013ab0:	4b07      	ldr	r3, [pc, #28]	; (8013ad0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013ab2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013ab4:	bd38      	pop	{r3, r4, r5, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2400b2b8 	.word	0x2400b2b8
 8013abc:	24000000 	.word	0x24000000
 8013ac0:	080123ad 	.word	0x080123ad
 8013ac4:	2400005c 	.word	0x2400005c
 8013ac8:	2400b2bc 	.word	0x2400b2bc
 8013acc:	080123ab 	.word	0x080123ab
 8013ad0:	24000060 	.word	0x24000060

08013ad4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8013ad4:	b510      	push	{r4, lr}
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	f7ff ff88 	bl	80139ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8013adc:	4620      	mov	r0, r4
 8013ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ae2:	f7ff bfbd 	b.w	8013a60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08013ae8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4c15      	ldr	r4, [pc, #84]	; (8013b40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8013aec:	4605      	mov	r5, r0
 8013aee:	7823      	ldrb	r3, [r4, #0]
 8013af0:	f3bf 8f5b 	dmb	ish
 8013af4:	07da      	lsls	r2, r3, #31
 8013af6:	d40b      	bmi.n	8013b10 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013af8:	4620      	mov	r0, r4
 8013afa:	f004 ff16 	bl	801892a <__cxa_guard_acquire>
 8013afe:	b138      	cbz	r0, 8013b10 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013b00:	4620      	mov	r0, r4
 8013b02:	f004 ff1e 	bl	8018942 <__cxa_guard_release>
 8013b06:	4a0f      	ldr	r2, [pc, #60]	; (8013b44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013b08:	490f      	ldr	r1, [pc, #60]	; (8013b48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8013b0a:	4810      	ldr	r0, [pc, #64]	; (8013b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013b0c:	f004 ff06 	bl	801891c <__aeabi_atexit>
 8013b10:	4c0f      	ldr	r4, [pc, #60]	; (8013b50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8013b12:	7823      	ldrb	r3, [r4, #0]
 8013b14:	f3bf 8f5b 	dmb	ish
 8013b18:	07db      	lsls	r3, r3, #31
 8013b1a:	d40b      	bmi.n	8013b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f004 ff04 	bl	801892a <__cxa_guard_acquire>
 8013b22:	b138      	cbz	r0, 8013b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013b24:	4620      	mov	r0, r4
 8013b26:	f004 ff0c 	bl	8018942 <__cxa_guard_release>
 8013b2a:	4a06      	ldr	r2, [pc, #24]	; (8013b44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013b2c:	4909      	ldr	r1, [pc, #36]	; (8013b54 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8013b2e:	480a      	ldr	r0, [pc, #40]	; (8013b58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013b30:	f004 fef4 	bl	801891c <__aeabi_atexit>
 8013b34:	4b05      	ldr	r3, [pc, #20]	; (8013b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013b36:	642b      	str	r3, [r5, #64]	; 0x40
 8013b38:	4b07      	ldr	r3, [pc, #28]	; (8013b58 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013b3a:	646b      	str	r3, [r5, #68]	; 0x44
 8013b3c:	bd38      	pop	{r3, r4, r5, pc}
 8013b3e:	bf00      	nop
 8013b40:	2400b2e8 	.word	0x2400b2e8
 8013b44:	24000000 	.word	0x24000000
 8013b48:	080123a1 	.word	0x080123a1
 8013b4c:	2400008c 	.word	0x2400008c
 8013b50:	2400b2ec 	.word	0x2400b2ec
 8013b54:	0801239f 	.word	0x0801239f
 8013b58:	24000090 	.word	0x24000090

08013b5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8013b5c:	b538      	push	{r3, r4, r5, lr}
 8013b5e:	4c15      	ldr	r4, [pc, #84]	; (8013bb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8013b60:	4605      	mov	r5, r0
 8013b62:	7823      	ldrb	r3, [r4, #0]
 8013b64:	f3bf 8f5b 	dmb	ish
 8013b68:	07da      	lsls	r2, r3, #31
 8013b6a:	d40b      	bmi.n	8013b84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f004 fedc 	bl	801892a <__cxa_guard_acquire>
 8013b72:	b138      	cbz	r0, 8013b84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b74:	4620      	mov	r0, r4
 8013b76:	f004 fee4 	bl	8018942 <__cxa_guard_release>
 8013b7a:	4a0f      	ldr	r2, [pc, #60]	; (8013bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013b7c:	490f      	ldr	r1, [pc, #60]	; (8013bbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8013b7e:	4810      	ldr	r0, [pc, #64]	; (8013bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013b80:	f004 fecc 	bl	801891c <__aeabi_atexit>
 8013b84:	4c0f      	ldr	r4, [pc, #60]	; (8013bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8013b86:	7823      	ldrb	r3, [r4, #0]
 8013b88:	f3bf 8f5b 	dmb	ish
 8013b8c:	07db      	lsls	r3, r3, #31
 8013b8e:	d40b      	bmi.n	8013ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013b90:	4620      	mov	r0, r4
 8013b92:	f004 feca 	bl	801892a <__cxa_guard_acquire>
 8013b96:	b138      	cbz	r0, 8013ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f004 fed2 	bl	8018942 <__cxa_guard_release>
 8013b9e:	4a06      	ldr	r2, [pc, #24]	; (8013bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013ba0:	4909      	ldr	r1, [pc, #36]	; (8013bc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8013ba2:	480a      	ldr	r0, [pc, #40]	; (8013bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013ba4:	f004 feba 	bl	801891c <__aeabi_atexit>
 8013ba8:	4b05      	ldr	r3, [pc, #20]	; (8013bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013baa:	63ab      	str	r3, [r5, #56]	; 0x38
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013bae:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013bb0:	bd38      	pop	{r3, r4, r5, pc}
 8013bb2:	bf00      	nop
 8013bb4:	2400b2c8 	.word	0x2400b2c8
 8013bb8:	24000000 	.word	0x24000000
 8013bbc:	080123a5 	.word	0x080123a5
 8013bc0:	2400006c 	.word	0x2400006c
 8013bc4:	2400b2cc 	.word	0x2400b2cc
 8013bc8:	080123a3 	.word	0x080123a3
 8013bcc:	24000070 	.word	0x24000070

08013bd0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	f7ff ff88 	bl	8013ae8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8013bd8:	4620      	mov	r0, r4
 8013bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bde:	f7ff bfbd 	b.w	8013b5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08013be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4c15      	ldr	r4, [pc, #84]	; (8013c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8013be8:	4605      	mov	r5, r0
 8013bea:	7823      	ldrb	r3, [r4, #0]
 8013bec:	f3bf 8f5b 	dmb	ish
 8013bf0:	07da      	lsls	r2, r3, #31
 8013bf2:	d40b      	bmi.n	8013c0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f004 fe98 	bl	801892a <__cxa_guard_acquire>
 8013bfa:	b138      	cbz	r0, 8013c0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f004 fea0 	bl	8018942 <__cxa_guard_release>
 8013c02:	4a0f      	ldr	r2, [pc, #60]	; (8013c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013c04:	490f      	ldr	r1, [pc, #60]	; (8013c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8013c06:	4810      	ldr	r0, [pc, #64]	; (8013c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013c08:	f004 fe88 	bl	801891c <__aeabi_atexit>
 8013c0c:	4c0f      	ldr	r4, [pc, #60]	; (8013c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8013c0e:	7823      	ldrb	r3, [r4, #0]
 8013c10:	f3bf 8f5b 	dmb	ish
 8013c14:	07db      	lsls	r3, r3, #31
 8013c16:	d40b      	bmi.n	8013c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013c18:	4620      	mov	r0, r4
 8013c1a:	f004 fe86 	bl	801892a <__cxa_guard_acquire>
 8013c1e:	b138      	cbz	r0, 8013c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013c20:	4620      	mov	r0, r4
 8013c22:	f004 fe8e 	bl	8018942 <__cxa_guard_release>
 8013c26:	4a06      	ldr	r2, [pc, #24]	; (8013c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013c28:	4909      	ldr	r1, [pc, #36]	; (8013c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8013c2a:	480a      	ldr	r0, [pc, #40]	; (8013c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013c2c:	f004 fe76 	bl	801891c <__aeabi_atexit>
 8013c30:	4b05      	ldr	r3, [pc, #20]	; (8013c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013c32:	652b      	str	r3, [r5, #80]	; 0x50
 8013c34:	4b07      	ldr	r3, [pc, #28]	; (8013c54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013c36:	656b      	str	r3, [r5, #84]	; 0x54
 8013c38:	bd38      	pop	{r3, r4, r5, pc}
 8013c3a:	bf00      	nop
 8013c3c:	2400b2c0 	.word	0x2400b2c0
 8013c40:	24000000 	.word	0x24000000
 8013c44:	08012399 	.word	0x08012399
 8013c48:	24000064 	.word	0x24000064
 8013c4c:	2400b2c4 	.word	0x2400b2c4
 8013c50:	08012397 	.word	0x08012397
 8013c54:	24000068 	.word	0x24000068

08013c58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8013c58:	b538      	push	{r3, r4, r5, lr}
 8013c5a:	4c15      	ldr	r4, [pc, #84]	; (8013cb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8013c5c:	4605      	mov	r5, r0
 8013c5e:	7823      	ldrb	r3, [r4, #0]
 8013c60:	f3bf 8f5b 	dmb	ish
 8013c64:	07da      	lsls	r2, r3, #31
 8013c66:	d40b      	bmi.n	8013c80 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013c68:	4620      	mov	r0, r4
 8013c6a:	f004 fe5e 	bl	801892a <__cxa_guard_acquire>
 8013c6e:	b138      	cbz	r0, 8013c80 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013c70:	4620      	mov	r0, r4
 8013c72:	f004 fe66 	bl	8018942 <__cxa_guard_release>
 8013c76:	4a0f      	ldr	r2, [pc, #60]	; (8013cb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013c78:	490f      	ldr	r1, [pc, #60]	; (8013cb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8013c7a:	4810      	ldr	r0, [pc, #64]	; (8013cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013c7c:	f004 fe4e 	bl	801891c <__aeabi_atexit>
 8013c80:	4c0f      	ldr	r4, [pc, #60]	; (8013cc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8013c82:	7823      	ldrb	r3, [r4, #0]
 8013c84:	f3bf 8f5b 	dmb	ish
 8013c88:	07db      	lsls	r3, r3, #31
 8013c8a:	d40b      	bmi.n	8013ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f004 fe4c 	bl	801892a <__cxa_guard_acquire>
 8013c92:	b138      	cbz	r0, 8013ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013c94:	4620      	mov	r0, r4
 8013c96:	f004 fe54 	bl	8018942 <__cxa_guard_release>
 8013c9a:	4a06      	ldr	r2, [pc, #24]	; (8013cb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013c9c:	4909      	ldr	r1, [pc, #36]	; (8013cc4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8013c9e:	480a      	ldr	r0, [pc, #40]	; (8013cc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013ca0:	f004 fe3c 	bl	801891c <__aeabi_atexit>
 8013ca4:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013ca6:	64ab      	str	r3, [r5, #72]	; 0x48
 8013ca8:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013caa:	64eb      	str	r3, [r5, #76]	; 0x4c
 8013cac:	bd38      	pop	{r3, r4, r5, pc}
 8013cae:	bf00      	nop
 8013cb0:	2400b2b0 	.word	0x2400b2b0
 8013cb4:	24000000 	.word	0x24000000
 8013cb8:	0801239d 	.word	0x0801239d
 8013cbc:	24000054 	.word	0x24000054
 8013cc0:	2400b2b4 	.word	0x2400b2b4
 8013cc4:	0801239b 	.word	0x0801239b
 8013cc8:	24000058 	.word	0x24000058

08013ccc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8013ccc:	b510      	push	{r4, lr}
 8013cce:	4604      	mov	r4, r0
 8013cd0:	f7ff ff88 	bl	8013be4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cda:	f7ff bfbd 	b.w	8013c58 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08013cde <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8013cde:	b510      	push	{r4, lr}
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	f7ff fff3 	bl	8013ccc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f7ff ff72 	bl	8013bd0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7ff fe73 	bl	80139d8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f7ff fdf2 	bl	80138dc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cfe:	f7ff bee9 	b.w	8013ad4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08013d02 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8013d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d06:	b087      	sub	sp, #28
 8013d08:	788d      	ldrb	r5, [r1, #2]
 8013d0a:	f891 9000 	ldrb.w	r9, [r1]
 8013d0e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8013d12:	9501      	str	r5, [sp, #4]
 8013d14:	784d      	ldrb	r5, [r1, #1]
 8013d16:	9203      	str	r2, [sp, #12]
 8013d18:	9502      	str	r5, [sp, #8]
 8013d1a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8013d1e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8013d22:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8013d26:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8013d2a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8013d2e:	fb06 0708 	mla	r7, r6, r8, r0
 8013d32:	2e00      	cmp	r6, #0
 8013d34:	eb02 0a07 	add.w	sl, r2, r7
 8013d38:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8013d3c:	9d01      	ldr	r5, [sp, #4]
 8013d3e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8013d42:	ea45 0509 	orr.w	r5, r5, r9
 8013d46:	9505      	str	r5, [sp, #20]
 8013d48:	f2c0 80b2 	blt.w	8013eb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8013d4c:	45b3      	cmp	fp, r6
 8013d4e:	f340 80af 	ble.w	8013eb0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8013d52:	2800      	cmp	r0, #0
 8013d54:	f2c0 80aa 	blt.w	8013eac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8013d58:	4580      	cmp	r8, r0
 8013d5a:	f340 80a7 	ble.w	8013eac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8013d5e:	9a03      	ldr	r2, [sp, #12]
 8013d60:	5dd7      	ldrb	r7, [r2, r7]
 8013d62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013d66:	441f      	add	r7, r3
 8013d68:	1c42      	adds	r2, r0, #1
 8013d6a:	f100 80a4 	bmi.w	8013eb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8013d6e:	4590      	cmp	r8, r2
 8013d70:	f340 80a1 	ble.w	8013eb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8013d74:	2c00      	cmp	r4, #0
 8013d76:	f000 809e 	beq.w	8013eb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8013d7a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8013d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d82:	441d      	add	r5, r3
 8013d84:	3601      	adds	r6, #1
 8013d86:	f100 809a 	bmi.w	8013ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013d8a:	45b3      	cmp	fp, r6
 8013d8c:	f340 8097 	ble.w	8013ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013d90:	f1bc 0f00 	cmp.w	ip, #0
 8013d94:	f000 8093 	beq.w	8013ebe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	f2c0 808e 	blt.w	8013eba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8013d9e:	4580      	cmp	r8, r0
 8013da0:	f340 808b 	ble.w	8013eba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8013da4:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8013da8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013dac:	441e      	add	r6, r3
 8013dae:	3001      	adds	r0, #1
 8013db0:	f100 8088 	bmi.w	8013ec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013db4:	4580      	cmp	r8, r0
 8013db6:	f340 8085 	ble.w	8013ec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	f000 8082 	beq.w	8013ec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8013dc0:	44d0      	add	r8, sl
 8013dc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013dc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013dca:	4413      	add	r3, r2
 8013dcc:	b2a4      	uxth	r4, r4
 8013dce:	f895 a000 	ldrb.w	sl, [r5]
 8013dd2:	fa1f fc8c 	uxth.w	ip, ip
 8013dd6:	fb04 fb0c 	mul.w	fp, r4, ip
 8013dda:	0124      	lsls	r4, r4, #4
 8013ddc:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8013de0:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8013de4:	eba4 040b 	sub.w	r4, r4, fp
 8013de8:	fa1f f08c 	uxth.w	r0, ip
 8013dec:	b2a2      	uxth	r2, r4
 8013dee:	783c      	ldrb	r4, [r7, #0]
 8013df0:	eba8 0800 	sub.w	r8, r8, r0
 8013df4:	fa1f fc8e 	uxth.w	ip, lr
 8013df8:	fb02 fa0a 	mul.w	sl, r2, sl
 8013dfc:	ea6f 0e0e 	mvn.w	lr, lr
 8013e00:	fa1f f888 	uxth.w	r8, r8
 8013e04:	fa5f fe8e 	uxtb.w	lr, lr
 8013e08:	fb08 aa04 	mla	sl, r8, r4, sl
 8013e0c:	7834      	ldrb	r4, [r6, #0]
 8013e0e:	fb19 f90e 	smulbb	r9, r9, lr
 8013e12:	fb00 aa04 	mla	sl, r0, r4, sl
 8013e16:	781c      	ldrb	r4, [r3, #0]
 8013e18:	fb0b a404 	mla	r4, fp, r4, sl
 8013e1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013e20:	fb04 990c 	mla	r9, r4, ip, r9
 8013e24:	fa1f f989 	uxth.w	r9, r9
 8013e28:	f109 0401 	add.w	r4, r9, #1
 8013e2c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8013e30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e34:	f881 9000 	strb.w	r9, [r1]
 8013e38:	f895 9001 	ldrb.w	r9, [r5, #1]
 8013e3c:	787c      	ldrb	r4, [r7, #1]
 8013e3e:	fb02 f909 	mul.w	r9, r2, r9
 8013e42:	fb08 9904 	mla	r9, r8, r4, r9
 8013e46:	7874      	ldrb	r4, [r6, #1]
 8013e48:	fb00 9904 	mla	r9, r0, r4, r9
 8013e4c:	785c      	ldrb	r4, [r3, #1]
 8013e4e:	fb0b 9404 	mla	r4, fp, r4, r9
 8013e52:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8013e56:	9c02      	ldr	r4, [sp, #8]
 8013e58:	fb14 f90e 	smulbb	r9, r4, lr
 8013e5c:	fb0a 940c 	mla	r4, sl, ip, r9
 8013e60:	b2a4      	uxth	r4, r4
 8013e62:	f104 0901 	add.w	r9, r4, #1
 8013e66:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8013e6a:	1224      	asrs	r4, r4, #8
 8013e6c:	704c      	strb	r4, [r1, #1]
 8013e6e:	78ad      	ldrb	r5, [r5, #2]
 8013e70:	78bc      	ldrb	r4, [r7, #2]
 8013e72:	436a      	muls	r2, r5
 8013e74:	789b      	ldrb	r3, [r3, #2]
 8013e76:	fb08 2204 	mla	r2, r8, r4, r2
 8013e7a:	78b4      	ldrb	r4, [r6, #2]
 8013e7c:	fb00 2004 	mla	r0, r0, r4, r2
 8013e80:	fb0b 0b03 	mla	fp, fp, r3, r0
 8013e84:	9b01      	ldr	r3, [sp, #4]
 8013e86:	fb13 fe0e 	smulbb	lr, r3, lr
 8013e8a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8013e8e:	fb0b ec0c 	mla	ip, fp, ip, lr
 8013e92:	fa1f fc8c 	uxth.w	ip, ip
 8013e96:	f10c 0e01 	add.w	lr, ip, #1
 8013e9a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8013e9e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013ea2:	f881 c002 	strb.w	ip, [r1, #2]
 8013ea6:	b007      	add	sp, #28
 8013ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eac:	af05      	add	r7, sp, #20
 8013eae:	e75b      	b.n	8013d68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8013eb0:	ad05      	add	r5, sp, #20
 8013eb2:	462f      	mov	r7, r5
 8013eb4:	e766      	b.n	8013d84 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8013eb6:	ad05      	add	r5, sp, #20
 8013eb8:	e764      	b.n	8013d84 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8013eba:	ae05      	add	r6, sp, #20
 8013ebc:	e777      	b.n	8013dae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8013ebe:	ab05      	add	r3, sp, #20
 8013ec0:	461e      	mov	r6, r3
 8013ec2:	e783      	b.n	8013dcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8013ec4:	ab05      	add	r3, sp, #20
 8013ec6:	e781      	b.n	8013dcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08013ec8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ecc:	b093      	sub	sp, #76	; 0x4c
 8013ece:	9210      	str	r2, [sp, #64]	; 0x40
 8013ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013ed4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013ed8:	9011      	str	r0, [sp, #68]	; 0x44
 8013eda:	930e      	str	r3, [sp, #56]	; 0x38
 8013edc:	6850      	ldr	r0, [r2, #4]
 8013ede:	910d      	str	r1, [sp, #52]	; 0x34
 8013ee0:	6812      	ldr	r2, [r2, #0]
 8013ee2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8013ee6:	fb00 1303 	mla	r3, r0, r3, r1
 8013eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013eee:	18d3      	adds	r3, r2, r3
 8013ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8013ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013efa:	685c      	ldr	r4, [r3, #4]
 8013efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013efe:	3404      	adds	r4, #4
 8013f00:	43db      	mvns	r3, r3
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	dc03      	bgt.n	8013f14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8013f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f340 8250 	ble.w	80143b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8013f14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013f16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013f1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013f1e:	1e48      	subs	r0, r1, #1
 8013f20:	1e55      	subs	r5, r2, #1
 8013f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f340 80ee 	ble.w	8014106 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8013f2a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013f2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013f2e:	1436      	asrs	r6, r6, #16
 8013f30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8013f34:	d406      	bmi.n	8013f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013f36:	4286      	cmp	r6, r0
 8013f38:	da04      	bge.n	8013f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	db02      	blt.n	8013f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8013f3e:	42ab      	cmp	r3, r5
 8013f40:	f2c0 80e2 	blt.w	8014108 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8013f44:	3601      	adds	r6, #1
 8013f46:	f100 80cf 	bmi.w	80140e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8013f4a:	42b1      	cmp	r1, r6
 8013f4c:	f2c0 80cc 	blt.w	80140e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8013f50:	3301      	adds	r3, #1
 8013f52:	f100 80c9 	bmi.w	80140e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8013f56:	429a      	cmp	r2, r3
 8013f58:	f2c0 80c6 	blt.w	80140e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8013f5c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8013f60:	f1bb 0f00 	cmp.w	fp, #0
 8013f64:	f340 80f1 	ble.w	801414a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8013f68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013f6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f6c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8013f6e:	141d      	asrs	r5, r3, #16
 8013f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f72:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013f76:	68c7      	ldr	r7, [r0, #12]
 8013f78:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013f7a:	1418      	asrs	r0, r3, #16
 8013f7c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8013f80:	6892      	ldr	r2, [r2, #8]
 8013f82:	f100 8137 	bmi.w	80141f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013f86:	f102 3cff 	add.w	ip, r2, #4294967295
 8013f8a:	4560      	cmp	r0, ip
 8013f8c:	f280 8132 	bge.w	80141f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013f90:	2d00      	cmp	r5, #0
 8013f92:	f2c0 812f 	blt.w	80141f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013f96:	f107 3cff 	add.w	ip, r7, #4294967295
 8013f9a:	4565      	cmp	r5, ip
 8013f9c:	f280 812a 	bge.w	80141f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8013fa0:	b212      	sxth	r2, r2
 8013fa2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013fa4:	fb05 0002 	mla	r0, r5, r2, r0
 8013fa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013faa:	f817 c000 	ldrb.w	ip, [r7, r0]
 8013fae:	4405      	add	r5, r0
 8013fb0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013fb4:	eb04 0e0c 	add.w	lr, r4, ip
 8013fb8:	f1b8 0f00 	cmp.w	r8, #0
 8013fbc:	f000 810c 	beq.w	80141d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8013fc0:	786f      	ldrb	r7, [r5, #1]
 8013fc2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013fc6:	4427      	add	r7, r4
 8013fc8:	2900      	cmp	r1, #0
 8013fca:	f000 810d 	beq.w	80141e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8013fce:	18a8      	adds	r0, r5, r2
 8013fd0:	5caa      	ldrb	r2, [r5, r2]
 8013fd2:	7840      	ldrb	r0, [r0, #1]
 8013fd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013fd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013fdc:	4422      	add	r2, r4
 8013fde:	4420      	add	r0, r4
 8013fe0:	fa1f f388 	uxth.w	r3, r8
 8013fe4:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8013fe8:	b289      	uxth	r1, r1
 8013fea:	f897 c000 	ldrb.w	ip, [r7]
 8013fee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8013ff2:	fb03 f901 	mul.w	r9, r3, r1
 8013ff6:	011b      	lsls	r3, r3, #4
 8013ff8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8013ffc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8014000:	eba3 0309 	sub.w	r3, r3, r9
 8014004:	b289      	uxth	r1, r1
 8014006:	b29b      	uxth	r3, r3
 8014008:	eba8 0801 	sub.w	r8, r8, r1
 801400c:	fb03 fc0c 	mul.w	ip, r3, ip
 8014010:	fa1f f888 	uxth.w	r8, r8
 8014014:	930f      	str	r3, [sp, #60]	; 0x3c
 8014016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014018:	fb08 cc0a 	mla	ip, r8, sl, ip
 801401c:	f892 a000 	ldrb.w	sl, [r2]
 8014020:	fb01 cc0a 	mla	ip, r1, sl, ip
 8014024:	f890 a000 	ldrb.w	sl, [r0]
 8014028:	fb09 cc0a 	mla	ip, r9, sl, ip
 801402c:	f896 a000 	ldrb.w	sl, [r6]
 8014030:	fb1a fa03 	smulbb	sl, sl, r3
 8014034:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8014038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801403a:	fb0c ac05 	mla	ip, ip, r5, sl
 801403e:	fa1f fc8c 	uxth.w	ip, ip
 8014042:	f10c 0a01 	add.w	sl, ip, #1
 8014046:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801404a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801404e:	f886 a000 	strb.w	sl, [r6]
 8014052:	f897 c001 	ldrb.w	ip, [r7, #1]
 8014056:	f89e a001 	ldrb.w	sl, [lr, #1]
 801405a:	fb03 fc0c 	mul.w	ip, r3, ip
 801405e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014060:	fb08 cc0a 	mla	ip, r8, sl, ip
 8014064:	f892 a001 	ldrb.w	sl, [r2, #1]
 8014068:	fb01 cc0a 	mla	ip, r1, sl, ip
 801406c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8014070:	fb09 cc0a 	mla	ip, r9, sl, ip
 8014074:	f896 a001 	ldrb.w	sl, [r6, #1]
 8014078:	fb1a fa03 	smulbb	sl, sl, r3
 801407c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8014080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014082:	fb0c ac05 	mla	ip, ip, r5, sl
 8014086:	fa1f fc8c 	uxth.w	ip, ip
 801408a:	f10c 0a01 	add.w	sl, ip, #1
 801408e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8014092:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014096:	f886 c001 	strb.w	ip, [r6, #1]
 801409a:	78bf      	ldrb	r7, [r7, #2]
 801409c:	f89e c002 	ldrb.w	ip, [lr, #2]
 80140a0:	437b      	muls	r3, r7
 80140a2:	fb08 330c 	mla	r3, r8, ip, r3
 80140a6:	f892 c002 	ldrb.w	ip, [r2, #2]
 80140aa:	7882      	ldrb	r2, [r0, #2]
 80140ac:	fb01 310c 	mla	r1, r1, ip, r3
 80140b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140b2:	fb09 1902 	mla	r9, r9, r2, r1
 80140b6:	78b1      	ldrb	r1, [r6, #2]
 80140b8:	fb11 f103 	smulbb	r1, r1, r3
 80140bc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80140c0:	fb09 1505 	mla	r5, r9, r5, r1
 80140c4:	b2ad      	uxth	r5, r5
 80140c6:	1c6b      	adds	r3, r5, #1
 80140c8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80140cc:	122d      	asrs	r5, r5, #8
 80140ce:	70b5      	strb	r5, [r6, #2]
 80140d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80140d2:	3603      	adds	r6, #3
 80140d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80140d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80140da:	4413      	add	r3, r2
 80140dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80140de:	931d      	str	r3, [sp, #116]	; 0x74
 80140e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80140e2:	4413      	add	r3, r2
 80140e4:	931e      	str	r3, [sp, #120]	; 0x78
 80140e6:	e73b      	b.n	8013f60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80140e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80140ea:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80140ec:	4433      	add	r3, r6
 80140ee:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80140f0:	931d      	str	r3, [sp, #116]	; 0x74
 80140f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80140f4:	4433      	add	r3, r6
 80140f6:	931e      	str	r3, [sp, #120]	; 0x78
 80140f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140fa:	3b01      	subs	r3, #1
 80140fc:	9309      	str	r3, [sp, #36]	; 0x24
 80140fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014100:	3303      	adds	r3, #3
 8014102:	930a      	str	r3, [sp, #40]	; 0x28
 8014104:	e70d      	b.n	8013f22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014106:	d028      	beq.n	801415a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8014108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801410a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801410c:	3b01      	subs	r3, #1
 801410e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014110:	fb00 5003 	mla	r0, r0, r3, r5
 8014114:	1400      	asrs	r0, r0, #16
 8014116:	f53f af21 	bmi.w	8013f5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801411a:	3901      	subs	r1, #1
 801411c:	4288      	cmp	r0, r1
 801411e:	f6bf af1d 	bge.w	8013f5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014122:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014124:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014126:	fb01 0303 	mla	r3, r1, r3, r0
 801412a:	141b      	asrs	r3, r3, #16
 801412c:	f53f af16 	bmi.w	8013f5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014130:	3a01      	subs	r2, #1
 8014132:	4293      	cmp	r3, r2
 8014134:	f6bf af12 	bge.w	8013f5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801413a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801413e:	1cdf      	adds	r7, r3, #3
 8014140:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8014144:	f1b9 0f00 	cmp.w	r9, #0
 8014148:	dc73      	bgt.n	8014232 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801414c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801414e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014156:	441a      	add	r2, r3
 8014158:	920a      	str	r2, [sp, #40]	; 0x28
 801415a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801415c:	2b00      	cmp	r3, #0
 801415e:	f340 8129 	ble.w	80143b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8014162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014166:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014168:	ee30 0a04 	vadd.f32	s0, s0, s8
 801416c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014170:	eef0 6a62 	vmov.f32	s13, s5
 8014174:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014178:	ee31 1a05 	vadd.f32	s2, s2, s10
 801417c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014180:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8014184:	eef0 6a43 	vmov.f32	s13, s6
 8014188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801418c:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8014190:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014194:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014198:	ee77 2a62 	vsub.f32	s5, s14, s5
 801419c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80141a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80141a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80141a8:	ee12 2a90 	vmov	r2, s5
 80141ac:	eef0 2a47 	vmov.f32	s5, s14
 80141b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80141b4:	ee13 2a10 	vmov	r2, s6
 80141b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80141ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80141bc:	eeb0 3a67 	vmov.f32	s6, s15
 80141c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80141c4:	9320      	str	r3, [sp, #128]	; 0x80
 80141c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141ca:	3b01      	subs	r3, #1
 80141cc:	930d      	str	r3, [sp, #52]	; 0x34
 80141ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80141d0:	bf08      	it	eq
 80141d2:	4613      	moveq	r3, r2
 80141d4:	9309      	str	r3, [sp, #36]	; 0x24
 80141d6:	e696      	b.n	8013f06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80141d8:	b149      	cbz	r1, 80141ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80141da:	5caa      	ldrb	r2, [r5, r2]
 80141dc:	4670      	mov	r0, lr
 80141de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80141e2:	4422      	add	r2, r4
 80141e4:	4677      	mov	r7, lr
 80141e6:	e6fb      	b.n	8013fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80141e8:	4670      	mov	r0, lr
 80141ea:	4672      	mov	r2, lr
 80141ec:	e6f8      	b.n	8013fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80141ee:	4670      	mov	r0, lr
 80141f0:	4672      	mov	r2, lr
 80141f2:	e7f7      	b.n	80141e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80141f4:	f110 0c01 	adds.w	ip, r0, #1
 80141f8:	f53f af6a 	bmi.w	80140d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80141fc:	4562      	cmp	r2, ip
 80141fe:	f6ff af67 	blt.w	80140d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8014202:	f115 0c01 	adds.w	ip, r5, #1
 8014206:	f53f af63 	bmi.w	80140d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801420a:	4567      	cmp	r7, ip
 801420c:	f6ff af60 	blt.w	80140d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8014210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014212:	b23f      	sxth	r7, r7
 8014214:	b212      	sxth	r2, r2
 8014216:	9002      	str	r0, [sp, #8]
 8014218:	9701      	str	r7, [sp, #4]
 801421a:	9200      	str	r2, [sp, #0]
 801421c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801421e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014220:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8014224:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8014228:	4623      	mov	r3, r4
 801422a:	4631      	mov	r1, r6
 801422c:	f7ff fd69 	bl	8013d02 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8014230:	e74e      	b.n	80140d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8014232:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014234:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014236:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801423a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801423c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801423e:	1400      	asrs	r0, r0, #16
 8014240:	142d      	asrs	r5, r5, #16
 8014242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014244:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014248:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801424c:	fb02 5000 	mla	r0, r2, r0, r5
 8014250:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014252:	f815 e000 	ldrb.w	lr, [r5, r0]
 8014256:	eb05 0c00 	add.w	ip, r5, r0
 801425a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801425e:	eb04 060e 	add.w	r6, r4, lr
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 8097 	beq.w	8014396 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8014268:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801426c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014270:	4425      	add	r5, r4
 8014272:	2900      	cmp	r1, #0
 8014274:	f000 8098 	beq.w	80143a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8014278:	eb0c 0002 	add.w	r0, ip, r2
 801427c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014280:	7840      	ldrb	r0, [r0, #1]
 8014282:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014286:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801428a:	4422      	add	r2, r4
 801428c:	4420      	add	r0, r4
 801428e:	b29b      	uxth	r3, r3
 8014290:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8014294:	b289      	uxth	r1, r1
 8014296:	f895 e000 	ldrb.w	lr, [r5]
 801429a:	3703      	adds	r7, #3
 801429c:	f109 39ff 	add.w	r9, r9, #4294967295
 80142a0:	fb03 f801 	mul.w	r8, r3, r1
 80142a4:	011b      	lsls	r3, r3, #4
 80142a6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80142aa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80142ae:	eba3 0308 	sub.w	r3, r3, r8
 80142b2:	b289      	uxth	r1, r1
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	ebac 0c01 	sub.w	ip, ip, r1
 80142ba:	fb03 fe0e 	mul.w	lr, r3, lr
 80142be:	fa1f fc8c 	uxth.w	ip, ip
 80142c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80142c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142c6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80142ca:	f892 b000 	ldrb.w	fp, [r2]
 80142ce:	fb01 ee0b 	mla	lr, r1, fp, lr
 80142d2:	f890 b000 	ldrb.w	fp, [r0]
 80142d6:	fb08 ee0b 	mla	lr, r8, fp, lr
 80142da:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80142de:	fb1b fb03 	smulbb	fp, fp, r3
 80142e2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80142e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142e8:	fb0e be0a 	mla	lr, lr, sl, fp
 80142ec:	fa1f fe8e 	uxth.w	lr, lr
 80142f0:	f10e 0b01 	add.w	fp, lr, #1
 80142f4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80142f8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80142fc:	f807 ec06 	strb.w	lr, [r7, #-6]
 8014300:	f895 e001 	ldrb.w	lr, [r5, #1]
 8014304:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014308:	fb03 fe0e 	mul.w	lr, r3, lr
 801430c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801430e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014312:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014316:	fb01 ee0b 	mla	lr, r1, fp, lr
 801431a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801431e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8014322:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8014326:	fb1b fb03 	smulbb	fp, fp, r3
 801432a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801432e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014330:	fb0e be0a 	mla	lr, lr, sl, fp
 8014334:	fa1f fe8e 	uxth.w	lr, lr
 8014338:	f10e 0b01 	add.w	fp, lr, #1
 801433c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8014340:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014344:	f807 ec05 	strb.w	lr, [r7, #-5]
 8014348:	78ad      	ldrb	r5, [r5, #2]
 801434a:	78b6      	ldrb	r6, [r6, #2]
 801434c:	436b      	muls	r3, r5
 801434e:	7895      	ldrb	r5, [r2, #2]
 8014350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014352:	fb0c 3306 	mla	r3, ip, r6, r3
 8014356:	fb01 3305 	mla	r3, r1, r5, r3
 801435a:	7885      	ldrb	r5, [r0, #2]
 801435c:	fb08 3805 	mla	r8, r8, r5, r3
 8014360:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8014364:	fb13 f302 	smulbb	r3, r3, r2
 8014368:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801436c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801436e:	fb08 380a 	mla	r8, r8, sl, r3
 8014372:	fa1f f888 	uxth.w	r8, r8
 8014376:	f108 0301 	add.w	r3, r8, #1
 801437a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801437e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014380:	4413      	add	r3, r2
 8014382:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014384:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014388:	931d      	str	r3, [sp, #116]	; 0x74
 801438a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801438c:	f807 8c04 	strb.w	r8, [r7, #-4]
 8014390:	4413      	add	r3, r2
 8014392:	931e      	str	r3, [sp, #120]	; 0x78
 8014394:	e6d6      	b.n	8014144 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8014396:	b151      	cbz	r1, 80143ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8014398:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801439c:	4630      	mov	r0, r6
 801439e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80143a2:	4422      	add	r2, r4
 80143a4:	4635      	mov	r5, r6
 80143a6:	e772      	b.n	801428e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80143a8:	4630      	mov	r0, r6
 80143aa:	4632      	mov	r2, r6
 80143ac:	e76f      	b.n	801428e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80143ae:	4630      	mov	r0, r6
 80143b0:	4632      	mov	r2, r6
 80143b2:	e7f7      	b.n	80143a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80143b4:	b013      	add	sp, #76	; 0x4c
 80143b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80143ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80143be:	784c      	ldrb	r4, [r1, #1]
 80143c0:	f891 a002 	ldrb.w	sl, [r1, #2]
 80143c4:	0224      	lsls	r4, r4, #8
 80143c6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80143ca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80143ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80143d2:	f891 a000 	ldrb.w	sl, [r1]
 80143d6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80143da:	ea44 040a 	orr.w	r4, r4, sl
 80143de:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80143e2:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80143e6:	9401      	str	r4, [sp, #4]
 80143e8:	fb05 c70e 	mla	r7, r5, lr, ip
 80143ec:	2d00      	cmp	r5, #0
 80143ee:	eb02 0807 	add.w	r8, r2, r7
 80143f2:	db72      	blt.n	80144da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80143f4:	45a9      	cmp	r9, r5
 80143f6:	dd70      	ble.n	80144da <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80143f8:	f1bc 0f00 	cmp.w	ip, #0
 80143fc:	db6b      	blt.n	80144d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80143fe:	45e6      	cmp	lr, ip
 8014400:	dd69      	ble.n	80144d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8014402:	5dd7      	ldrb	r7, [r2, r7]
 8014404:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014408:	441f      	add	r7, r3
 801440a:	f11c 0201 	adds.w	r2, ip, #1
 801440e:	d467      	bmi.n	80144e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8014410:	4596      	cmp	lr, r2
 8014412:	dd65      	ble.n	80144e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8014414:	2800      	cmp	r0, #0
 8014416:	d063      	beq.n	80144e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8014418:	f898 4001 	ldrb.w	r4, [r8, #1]
 801441c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014420:	441c      	add	r4, r3
 8014422:	3501      	adds	r5, #1
 8014424:	d460      	bmi.n	80144e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8014426:	45a9      	cmp	r9, r5
 8014428:	dd5e      	ble.n	80144e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801442a:	2e00      	cmp	r6, #0
 801442c:	d05c      	beq.n	80144e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801442e:	f1bc 0f00 	cmp.w	ip, #0
 8014432:	db57      	blt.n	80144e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8014434:	45e6      	cmp	lr, ip
 8014436:	dd55      	ble.n	80144e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8014438:	f818 500e 	ldrb.w	r5, [r8, lr]
 801443c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014440:	441d      	add	r5, r3
 8014442:	f11c 0201 	adds.w	r2, ip, #1
 8014446:	d452      	bmi.n	80144ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8014448:	4596      	cmp	lr, r2
 801444a:	dd50      	ble.n	80144ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801444c:	2800      	cmp	r0, #0
 801444e:	d04e      	beq.n	80144ee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8014450:	44c6      	add	lr, r8
 8014452:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8014456:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801445a:	4413      	add	r3, r2
 801445c:	b280      	uxth	r0, r0
 801445e:	f897 8000 	ldrb.w	r8, [r7]
 8014462:	b2b2      	uxth	r2, r6
 8014464:	fb00 f602 	mul.w	r6, r0, r2
 8014468:	0100      	lsls	r0, r0, #4
 801446a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801446e:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8014472:	1b80      	subs	r0, r0, r6
 8014474:	fa1f fc82 	uxth.w	ip, r2
 8014478:	b282      	uxth	r2, r0
 801447a:	7820      	ldrb	r0, [r4, #0]
 801447c:	ebae 0e0c 	sub.w	lr, lr, ip
 8014480:	4350      	muls	r0, r2
 8014482:	fa1f fe8e 	uxth.w	lr, lr
 8014486:	fb0e 0808 	mla	r8, lr, r8, r0
 801448a:	7828      	ldrb	r0, [r5, #0]
 801448c:	fb0c 8800 	mla	r8, ip, r0, r8
 8014490:	7818      	ldrb	r0, [r3, #0]
 8014492:	fb06 8000 	mla	r0, r6, r0, r8
 8014496:	1200      	asrs	r0, r0, #8
 8014498:	7008      	strb	r0, [r1, #0]
 801449a:	7860      	ldrb	r0, [r4, #1]
 801449c:	f897 8001 	ldrb.w	r8, [r7, #1]
 80144a0:	4350      	muls	r0, r2
 80144a2:	fb0e 0808 	mla	r8, lr, r8, r0
 80144a6:	7868      	ldrb	r0, [r5, #1]
 80144a8:	fb0c 8800 	mla	r8, ip, r0, r8
 80144ac:	7858      	ldrb	r0, [r3, #1]
 80144ae:	fb06 8000 	mla	r0, r6, r0, r8
 80144b2:	1200      	asrs	r0, r0, #8
 80144b4:	7048      	strb	r0, [r1, #1]
 80144b6:	78a0      	ldrb	r0, [r4, #2]
 80144b8:	78bf      	ldrb	r7, [r7, #2]
 80144ba:	4350      	muls	r0, r2
 80144bc:	78aa      	ldrb	r2, [r5, #2]
 80144be:	fb0e 0007 	mla	r0, lr, r7, r0
 80144c2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80144c6:	789a      	ldrb	r2, [r3, #2]
 80144c8:	fb06 c202 	mla	r2, r6, r2, ip
 80144cc:	1212      	asrs	r2, r2, #8
 80144ce:	708a      	strb	r2, [r1, #2]
 80144d0:	b002      	add	sp, #8
 80144d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d6:	af01      	add	r7, sp, #4
 80144d8:	e797      	b.n	801440a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80144da:	ac01      	add	r4, sp, #4
 80144dc:	4627      	mov	r7, r4
 80144de:	e7a0      	b.n	8014422 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80144e0:	ac01      	add	r4, sp, #4
 80144e2:	e79e      	b.n	8014422 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80144e4:	ad01      	add	r5, sp, #4
 80144e6:	e7ac      	b.n	8014442 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80144e8:	ab01      	add	r3, sp, #4
 80144ea:	461d      	mov	r5, r3
 80144ec:	e7b6      	b.n	801445c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80144ee:	ab01      	add	r3, sp, #4
 80144f0:	e7b4      	b.n	801445c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080144f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80144f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f6:	b08d      	sub	sp, #52	; 0x34
 80144f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80144fc:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8014500:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014502:	900b      	str	r0, [sp, #44]	; 0x2c
 8014504:	9306      	str	r3, [sp, #24]
 8014506:	6850      	ldr	r0, [r2, #4]
 8014508:	6812      	ldr	r2, [r2, #0]
 801450a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801450c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8014510:	fb00 1303 	mla	r3, r0, r3, r1
 8014514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014518:	18d3      	adds	r3, r2, r3
 801451a:	9307      	str	r3, [sp, #28]
 801451c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	9308      	str	r3, [sp, #32]
 8014522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014524:	685d      	ldr	r5, [r3, #4]
 8014526:	3504      	adds	r5, #4
 8014528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801452a:	2b00      	cmp	r3, #0
 801452c:	dc03      	bgt.n	8014536 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801452e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014530:	2b00      	cmp	r3, #0
 8014532:	f340 81e6 	ble.w	8014902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8014536:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014538:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801453c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014540:	1e48      	subs	r0, r1, #1
 8014542:	1e56      	subs	r6, r2, #1
 8014544:	9b06      	ldr	r3, [sp, #24]
 8014546:	2b00      	cmp	r3, #0
 8014548:	f340 80bd 	ble.w	80146c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801454c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801454e:	1427      	asrs	r7, r4, #16
 8014550:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014554:	d406      	bmi.n	8014564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014556:	4287      	cmp	r7, r0
 8014558:	da04      	bge.n	8014564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801455a:	2b00      	cmp	r3, #0
 801455c:	db02      	blt.n	8014564 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801455e:	42b3      	cmp	r3, r6
 8014560:	f2c0 80b2 	blt.w	80146c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8014564:	3701      	adds	r7, #1
 8014566:	f100 80a1 	bmi.w	80146ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801456a:	42b9      	cmp	r1, r7
 801456c:	f2c0 809e 	blt.w	80146ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8014570:	3301      	adds	r3, #1
 8014572:	f100 809b 	bmi.w	80146ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8014576:	429a      	cmp	r2, r3
 8014578:	f2c0 8098 	blt.w	80146ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801457c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8014580:	f1bb 0f00 	cmp.w	fp, #0
 8014584:	f340 80bf 	ble.w	8014706 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8014588:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801458a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801458c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801458e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014592:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8014596:	1420      	asrs	r0, r4, #16
 8014598:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801459a:	ea4f 4723 	mov.w	r7, r3, asr #16
 801459e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80145a2:	6892      	ldr	r2, [r2, #8]
 80145a4:	f100 8103 	bmi.w	80147ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80145a8:	f102 3eff 	add.w	lr, r2, #4294967295
 80145ac:	4570      	cmp	r0, lr
 80145ae:	f280 80fe 	bge.w	80147ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	f2c0 80fb 	blt.w	80147ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80145b8:	f10c 3eff 	add.w	lr, ip, #4294967295
 80145bc:	4577      	cmp	r7, lr
 80145be:	f280 80f6 	bge.w	80147ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80145c2:	b212      	sxth	r2, r2
 80145c4:	fb07 0002 	mla	r0, r7, r2, r0
 80145c8:	9f08      	ldr	r7, [sp, #32]
 80145ca:	f817 8000 	ldrb.w	r8, [r7, r0]
 80145ce:	eb07 0e00 	add.w	lr, r7, r0
 80145d2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80145d6:	eb05 0c08 	add.w	ip, r5, r8
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f000 80d8 	beq.w	8014790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80145e0:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80145e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80145e8:	442f      	add	r7, r5
 80145ea:	2900      	cmp	r1, #0
 80145ec:	f000 80d9 	beq.w	80147a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80145f0:	eb0e 0002 	add.w	r0, lr, r2
 80145f4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80145f8:	7840      	ldrb	r0, [r0, #1]
 80145fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80145fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014602:	442a      	add	r2, r5
 8014604:	4428      	add	r0, r5
 8014606:	b29b      	uxth	r3, r3
 8014608:	f815 a008 	ldrb.w	sl, [r5, r8]
 801460c:	b289      	uxth	r1, r1
 801460e:	f897 8000 	ldrb.w	r8, [r7]
 8014612:	fb03 f901 	mul.w	r9, r3, r1
 8014616:	011b      	lsls	r3, r3, #4
 8014618:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801461c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8014620:	eba3 0309 	sub.w	r3, r3, r9
 8014624:	b289      	uxth	r1, r1
 8014626:	b29b      	uxth	r3, r3
 8014628:	ebae 0e01 	sub.w	lr, lr, r1
 801462c:	fb03 f808 	mul.w	r8, r3, r8
 8014630:	fa1f fe8e 	uxth.w	lr, lr
 8014634:	fb0e 880a 	mla	r8, lr, sl, r8
 8014638:	f892 a000 	ldrb.w	sl, [r2]
 801463c:	fb01 880a 	mla	r8, r1, sl, r8
 8014640:	f890 a000 	ldrb.w	sl, [r0]
 8014644:	fb09 880a 	mla	r8, r9, sl, r8
 8014648:	ea4f 2828 	mov.w	r8, r8, asr #8
 801464c:	f886 8000 	strb.w	r8, [r6]
 8014650:	f897 8001 	ldrb.w	r8, [r7, #1]
 8014654:	f89c a001 	ldrb.w	sl, [ip, #1]
 8014658:	fb03 f808 	mul.w	r8, r3, r8
 801465c:	fb0e 880a 	mla	r8, lr, sl, r8
 8014660:	f892 a001 	ldrb.w	sl, [r2, #1]
 8014664:	fb01 880a 	mla	r8, r1, sl, r8
 8014668:	f890 a001 	ldrb.w	sl, [r0, #1]
 801466c:	fb09 880a 	mla	r8, r9, sl, r8
 8014670:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014674:	f886 8001 	strb.w	r8, [r6, #1]
 8014678:	78bf      	ldrb	r7, [r7, #2]
 801467a:	f89c c002 	ldrb.w	ip, [ip, #2]
 801467e:	437b      	muls	r3, r7
 8014680:	7892      	ldrb	r2, [r2, #2]
 8014682:	fb0e 330c 	mla	r3, lr, ip, r3
 8014686:	fb01 3102 	mla	r1, r1, r2, r3
 801468a:	7882      	ldrb	r2, [r0, #2]
 801468c:	fb09 1902 	mla	r9, r9, r2, r1
 8014690:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014694:	f886 9002 	strb.w	r9, [r6, #2]
 8014698:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801469a:	3603      	adds	r6, #3
 801469c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801469e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146a2:	441c      	add	r4, r3
 80146a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80146a6:	4413      	add	r3, r2
 80146a8:	9318      	str	r3, [sp, #96]	; 0x60
 80146aa:	e769      	b.n	8014580 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80146ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80146ae:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80146b0:	441c      	add	r4, r3
 80146b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80146b4:	443b      	add	r3, r7
 80146b6:	9318      	str	r3, [sp, #96]	; 0x60
 80146b8:	9b06      	ldr	r3, [sp, #24]
 80146ba:	3b01      	subs	r3, #1
 80146bc:	9306      	str	r3, [sp, #24]
 80146be:	9b07      	ldr	r3, [sp, #28]
 80146c0:	3303      	adds	r3, #3
 80146c2:	9307      	str	r3, [sp, #28]
 80146c4:	e73e      	b.n	8014544 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80146c6:	d026      	beq.n	8014716 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80146c8:	9b06      	ldr	r3, [sp, #24]
 80146ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80146cc:	3b01      	subs	r3, #1
 80146ce:	fb00 4003 	mla	r0, r0, r3, r4
 80146d2:	1400      	asrs	r0, r0, #16
 80146d4:	f53f af52 	bmi.w	801457c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80146d8:	3901      	subs	r1, #1
 80146da:	4288      	cmp	r0, r1
 80146dc:	f6bf af4e 	bge.w	801457c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80146e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80146e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80146e4:	fb01 0303 	mla	r3, r1, r3, r0
 80146e8:	141b      	asrs	r3, r3, #16
 80146ea:	f53f af47 	bmi.w	801457c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80146ee:	3a01      	subs	r2, #1
 80146f0:	4293      	cmp	r3, r2
 80146f2:	f6bf af43 	bge.w	801457c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80146f6:	9b07      	ldr	r3, [sp, #28]
 80146f8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80146fc:	f103 0803 	add.w	r8, r3, #3
 8014700:	f1ba 0f00 	cmp.w	sl, #0
 8014704:	dc71      	bgt.n	80147ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8014706:	9b06      	ldr	r3, [sp, #24]
 8014708:	9a07      	ldr	r2, [sp, #28]
 801470a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801470e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014712:	441a      	add	r2, r3
 8014714:	9207      	str	r2, [sp, #28]
 8014716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014718:	2b00      	cmp	r3, #0
 801471a:	f340 80f2 	ble.w	8014902 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801471e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014722:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014724:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014728:	eeb0 6a62 	vmov.f32	s12, s5
 801472c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014730:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014734:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014738:	ee16 4a10 	vmov	r4, s12
 801473c:	eeb0 6a43 	vmov.f32	s12, s6
 8014740:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014744:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8014748:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801474c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014750:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014754:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014758:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801475c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014760:	ee12 2a90 	vmov	r2, s5
 8014764:	eef0 2a47 	vmov.f32	s5, s14
 8014768:	fb92 f3f3 	sdiv	r3, r2, r3
 801476c:	ee13 2a10 	vmov	r2, s6
 8014770:	9319      	str	r3, [sp, #100]	; 0x64
 8014772:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014774:	eeb0 3a67 	vmov.f32	s6, s15
 8014778:	fb92 f3f3 	sdiv	r3, r2, r3
 801477c:	931a      	str	r3, [sp, #104]	; 0x68
 801477e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014782:	3b01      	subs	r3, #1
 8014784:	9309      	str	r3, [sp, #36]	; 0x24
 8014786:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014788:	bf08      	it	eq
 801478a:	4613      	moveq	r3, r2
 801478c:	9306      	str	r3, [sp, #24]
 801478e:	e6cb      	b.n	8014528 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014790:	b151      	cbz	r1, 80147a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8014792:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014796:	4660      	mov	r0, ip
 8014798:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801479c:	442a      	add	r2, r5
 801479e:	4667      	mov	r7, ip
 80147a0:	e731      	b.n	8014606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80147a2:	4660      	mov	r0, ip
 80147a4:	4662      	mov	r2, ip
 80147a6:	e72e      	b.n	8014606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80147a8:	4660      	mov	r0, ip
 80147aa:	4662      	mov	r2, ip
 80147ac:	e7f7      	b.n	801479e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80147ae:	f110 0e01 	adds.w	lr, r0, #1
 80147b2:	f53f af71 	bmi.w	8014698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80147b6:	4572      	cmp	r2, lr
 80147b8:	f6ff af6e 	blt.w	8014698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80147bc:	f117 0e01 	adds.w	lr, r7, #1
 80147c0:	f53f af6a 	bmi.w	8014698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80147c4:	45f4      	cmp	ip, lr
 80147c6:	f6ff af67 	blt.w	8014698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80147ca:	b212      	sxth	r2, r2
 80147cc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80147d0:	fa0f f38c 	sxth.w	r3, ip
 80147d4:	9200      	str	r2, [sp, #0]
 80147d6:	4631      	mov	r1, r6
 80147d8:	9a08      	ldr	r2, [sp, #32]
 80147da:	9301      	str	r3, [sp, #4]
 80147dc:	462b      	mov	r3, r5
 80147de:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80147e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80147e4:	f7ff fde9 	bl	80143ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80147e8:	e756      	b.n	8014698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80147ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80147ec:	1426      	asrs	r6, r4, #16
 80147ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 80147f0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80147f4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80147f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80147fa:	1400      	asrs	r0, r0, #16
 80147fc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014800:	fb02 6000 	mla	r0, r2, r0, r6
 8014804:	9e08      	ldr	r6, [sp, #32]
 8014806:	f816 e000 	ldrb.w	lr, [r6, r0]
 801480a:	eb06 0c00 	add.w	ip, r6, r0
 801480e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014812:	eb05 070e 	add.w	r7, r5, lr
 8014816:	2b00      	cmp	r3, #0
 8014818:	d064      	beq.n	80148e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801481a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801481e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014822:	442e      	add	r6, r5
 8014824:	2900      	cmp	r1, #0
 8014826:	d066      	beq.n	80148f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8014828:	eb0c 0002 	add.w	r0, ip, r2
 801482c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014830:	7840      	ldrb	r0, [r0, #1]
 8014832:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014836:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801483a:	442a      	add	r2, r5
 801483c:	4428      	add	r0, r5
 801483e:	b29b      	uxth	r3, r3
 8014840:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8014844:	b289      	uxth	r1, r1
 8014846:	f896 e000 	ldrb.w	lr, [r6]
 801484a:	f108 0803 	add.w	r8, r8, #3
 801484e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014852:	fb03 f901 	mul.w	r9, r3, r1
 8014856:	011b      	lsls	r3, r3, #4
 8014858:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801485c:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8014860:	eba3 0309 	sub.w	r3, r3, r9
 8014864:	b289      	uxth	r1, r1
 8014866:	b29b      	uxth	r3, r3
 8014868:	ebac 0c01 	sub.w	ip, ip, r1
 801486c:	fb03 fe0e 	mul.w	lr, r3, lr
 8014870:	fa1f fc8c 	uxth.w	ip, ip
 8014874:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014878:	f892 b000 	ldrb.w	fp, [r2]
 801487c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014880:	f890 b000 	ldrb.w	fp, [r0]
 8014884:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014888:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801488c:	f808 ec06 	strb.w	lr, [r8, #-6]
 8014890:	f896 e001 	ldrb.w	lr, [r6, #1]
 8014894:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014898:	fb03 fe0e 	mul.w	lr, r3, lr
 801489c:	fb0c ee0b 	mla	lr, ip, fp, lr
 80148a0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80148a4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80148a8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80148ac:	fb09 ee0b 	mla	lr, r9, fp, lr
 80148b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80148b4:	f808 ec05 	strb.w	lr, [r8, #-5]
 80148b8:	78b6      	ldrb	r6, [r6, #2]
 80148ba:	78bf      	ldrb	r7, [r7, #2]
 80148bc:	4373      	muls	r3, r6
 80148be:	7896      	ldrb	r6, [r2, #2]
 80148c0:	7882      	ldrb	r2, [r0, #2]
 80148c2:	fb0c 3307 	mla	r3, ip, r7, r3
 80148c6:	fb01 3306 	mla	r3, r1, r6, r3
 80148ca:	fb09 3902 	mla	r9, r9, r2, r3
 80148ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80148d2:	441c      	add	r4, r3
 80148d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80148d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80148da:	4413      	add	r3, r2
 80148dc:	f808 9c04 	strb.w	r9, [r8, #-4]
 80148e0:	9318      	str	r3, [sp, #96]	; 0x60
 80148e2:	e70d      	b.n	8014700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80148e4:	b151      	cbz	r1, 80148fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80148e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80148ea:	4638      	mov	r0, r7
 80148ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148f0:	442a      	add	r2, r5
 80148f2:	463e      	mov	r6, r7
 80148f4:	e7a3      	b.n	801483e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80148f6:	4638      	mov	r0, r7
 80148f8:	463a      	mov	r2, r7
 80148fa:	e7a0      	b.n	801483e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80148fc:	4638      	mov	r0, r7
 80148fe:	463a      	mov	r2, r7
 8014900:	e7f7      	b.n	80148f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8014902:	b00d      	add	sp, #52	; 0x34
 8014904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014908 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8014908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801490c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8014910:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8014914:	2d00      	cmp	r5, #0
 8014916:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801491a:	fb05 700c 	mla	r0, r5, ip, r7
 801491e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8014922:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8014926:	eb02 0800 	add.w	r8, r2, r0
 801492a:	f2c0 8118 	blt.w	8014b5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801492e:	45a9      	cmp	r9, r5
 8014930:	f340 8115 	ble.w	8014b5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8014934:	2f00      	cmp	r7, #0
 8014936:	f2c0 8110 	blt.w	8014b5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801493a:	45bc      	cmp	ip, r7
 801493c:	f340 810d 	ble.w	8014b5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8014940:	5c12      	ldrb	r2, [r2, r0]
 8014942:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014946:	1c7a      	adds	r2, r7, #1
 8014948:	f100 810c 	bmi.w	8014b64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801494c:	4594      	cmp	ip, r2
 801494e:	f340 8109 	ble.w	8014b64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8014952:	2c00      	cmp	r4, #0
 8014954:	f000 8108 	beq.w	8014b68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8014958:	f898 2001 	ldrb.w	r2, [r8, #1]
 801495c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014960:	3501      	adds	r5, #1
 8014962:	f100 8105 	bmi.w	8014b70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8014966:	45a9      	cmp	r9, r5
 8014968:	f340 8102 	ble.w	8014b70 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801496c:	f1be 0f00 	cmp.w	lr, #0
 8014970:	f000 8101 	beq.w	8014b76 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8014974:	2f00      	cmp	r7, #0
 8014976:	f2c0 80f9 	blt.w	8014b6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801497a:	45bc      	cmp	ip, r7
 801497c:	f340 80f6 	ble.w	8014b6c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8014980:	f818 200c 	ldrb.w	r2, [r8, ip]
 8014984:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014988:	3701      	adds	r7, #1
 801498a:	f100 80f7 	bmi.w	8014b7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801498e:	45bc      	cmp	ip, r7
 8014990:	f340 80f4 	ble.w	8014b7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8014994:	2c00      	cmp	r4, #0
 8014996:	f000 80f3 	beq.w	8014b80 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801499a:	44c4      	add	ip, r8
 801499c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80149a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80149a4:	fa1f fc84 	uxth.w	ip, r4
 80149a8:	fa1f f48e 	uxth.w	r4, lr
 80149ac:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80149b0:	fb04 fe0c 	mul.w	lr, r4, ip
 80149b4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80149b8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80149bc:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80149c0:	ebac 070e 	sub.w	r7, ip, lr
 80149c4:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80149c8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80149cc:	b2a4      	uxth	r4, r4
 80149ce:	b2bf      	uxth	r7, r7
 80149d0:	1b1b      	subs	r3, r3, r4
 80149d2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80149d6:	fb07 fc0a 	mul.w	ip, r7, sl
 80149da:	b29b      	uxth	r3, r3
 80149dc:	fb03 cc0b 	mla	ip, r3, fp, ip
 80149e0:	9300      	str	r3, [sp, #0]
 80149e2:	fb04 cc09 	mla	ip, r4, r9, ip
 80149e6:	fb0e cc08 	mla	ip, lr, r8, ip
 80149ea:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80149ee:	9301      	str	r3, [sp, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f000 80af 	beq.w	8014b54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80149f6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80149fa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80149fe:	fb0b fc0c 	mul.w	ip, fp, ip
 8014a02:	fb0b f606 	mul.w	r6, fp, r6
 8014a06:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014a0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8014a0e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8014a12:	44dc      	add	ip, fp
 8014a14:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8014a18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014a1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014a20:	fb0a fb0b 	mul.w	fp, sl, fp
 8014a24:	fb0a fa00 	mul.w	sl, sl, r0
 8014a28:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014a2c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8014a30:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8014a34:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014a38:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014a3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014a40:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8014a44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a48:	0a36      	lsrs	r6, r6, #8
 8014a4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014a4e:	44dc      	add	ip, fp
 8014a50:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014a54:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014a58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014a5c:	fb09 fb0b 	mul.w	fp, r9, fp
 8014a60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014a64:	fb09 f905 	mul.w	r9, r9, r5
 8014a68:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8014a6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014a70:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8014a74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014a78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014a7c:	fb0c fc07 	mul.w	ip, ip, r7
 8014a80:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8014a84:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8014a88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014a8c:	4458      	add	r0, fp
 8014a8e:	fb08 f505 	mul.w	r5, r8, r5
 8014a92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014a96:	fb08 f802 	mul.w	r8, r8, r2
 8014a9a:	0a00      	lsrs	r0, r0, #8
 8014a9c:	0a2a      	lsrs	r2, r5, #8
 8014a9e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8014aa2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8014aa6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014aaa:	4415      	add	r5, r2
 8014aac:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8014ab0:	0a2d      	lsrs	r5, r5, #8
 8014ab2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014ab6:	9a00      	ldr	r2, [sp, #0]
 8014ab8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014abc:	fb03 cc02 	mla	ip, r3, r2, ip
 8014ac0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8014ac4:	9b01      	ldr	r3, [sp, #4]
 8014ac6:	fb05 c50e 	mla	r5, r5, lr, ip
 8014aca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8014ace:	fb00 5004 	mla	r0, r0, r4, r5
 8014ad2:	0a00      	lsrs	r0, r0, #8
 8014ad4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8014ad8:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8014adc:	4378      	muls	r0, r7
 8014ade:	fb02 0006 	mla	r0, r2, r6, r0
 8014ae2:	fb0e 0e08 	mla	lr, lr, r8, r0
 8014ae6:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8014aea:	fb04 e000 	mla	r0, r4, r0, lr
 8014aee:	0a00      	lsrs	r0, r0, #8
 8014af0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8014af4:	4328      	orrs	r0, r5
 8014af6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014afa:	b2ad      	uxth	r5, r5
 8014afc:	b2c4      	uxtb	r4, r0
 8014afe:	436b      	muls	r3, r5
 8014b00:	fb14 f405 	smulbb	r4, r4, r5
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8014b0a:	780b      	ldrb	r3, [r1, #0]
 8014b0c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8014b10:	b2d2      	uxtb	r2, r2
 8014b12:	fb03 4302 	mla	r3, r3, r2, r4
 8014b16:	b29b      	uxth	r3, r3
 8014b18:	1c5c      	adds	r4, r3, #1
 8014b1a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8014b1e:	784c      	ldrb	r4, [r1, #1]
 8014b20:	fb14 f402 	smulbb	r4, r4, r2
 8014b24:	121b      	asrs	r3, r3, #8
 8014b26:	700b      	strb	r3, [r1, #0]
 8014b28:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014b2c:	fb03 4305 	mla	r3, r3, r5, r4
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	1c5c      	adds	r4, r3, #1
 8014b34:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8014b38:	0c04      	lsrs	r4, r0, #16
 8014b3a:	7888      	ldrb	r0, [r1, #2]
 8014b3c:	121b      	asrs	r3, r3, #8
 8014b3e:	fb10 f002 	smulbb	r0, r0, r2
 8014b42:	704b      	strb	r3, [r1, #1]
 8014b44:	fb04 0005 	mla	r0, r4, r5, r0
 8014b48:	b280      	uxth	r0, r0
 8014b4a:	1c43      	adds	r3, r0, #1
 8014b4c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8014b50:	1200      	asrs	r0, r0, #8
 8014b52:	7088      	strb	r0, [r1, #2]
 8014b54:	b003      	add	sp, #12
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	2600      	movs	r6, #0
 8014b5c:	e6f3      	b.n	8014946 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8014b5e:	2000      	movs	r0, #0
 8014b60:	4606      	mov	r6, r0
 8014b62:	e6fd      	b.n	8014960 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8014b64:	2000      	movs	r0, #0
 8014b66:	e6fb      	b.n	8014960 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8014b68:	4620      	mov	r0, r4
 8014b6a:	e6f9      	b.n	8014960 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8014b6c:	2500      	movs	r5, #0
 8014b6e:	e70b      	b.n	8014988 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8014b70:	2200      	movs	r2, #0
 8014b72:	4615      	mov	r5, r2
 8014b74:	e716      	b.n	80149a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8014b76:	4672      	mov	r2, lr
 8014b78:	4675      	mov	r5, lr
 8014b7a:	e713      	b.n	80149a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	e711      	b.n	80149a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8014b80:	4622      	mov	r2, r4
 8014b82:	e70f      	b.n	80149a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08014b84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b88:	b09f      	sub	sp, #124	; 0x7c
 8014b8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8014b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8014b90:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8014b94:	901d      	str	r0, [sp, #116]	; 0x74
 8014b96:	931c      	str	r3, [sp, #112]	; 0x70
 8014b98:	6850      	ldr	r0, [r2, #4]
 8014b9a:	9119      	str	r1, [sp, #100]	; 0x64
 8014b9c:	6812      	ldr	r2, [r2, #0]
 8014b9e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8014ba0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8014ba4:	fb00 1303 	mla	r3, r0, r3, r1
 8014ba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014bac:	18d3      	adds	r3, r2, r3
 8014bae:	930c      	str	r3, [sp, #48]	; 0x30
 8014bb0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	9312      	str	r3, [sp, #72]	; 0x48
 8014bb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014bb8:	685e      	ldr	r6, [r3, #4]
 8014bba:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014bbe:	3604      	adds	r6, #4
 8014bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8014bc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	dc03      	bgt.n	8014bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8014bc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	f340 8378 	ble.w	80152c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8014bd0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014bd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014bd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014bda:	1e48      	subs	r0, r1, #1
 8014bdc:	1e57      	subs	r7, r2, #1
 8014bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	f340 818c 	ble.w	8014efe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8014be6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014be8:	142b      	asrs	r3, r5, #16
 8014bea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8014bee:	d406      	bmi.n	8014bfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8014bf0:	4584      	cmp	ip, r0
 8014bf2:	da04      	bge.n	8014bfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	db02      	blt.n	8014bfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8014bf8:	42bb      	cmp	r3, r7
 8014bfa:	f2c0 8181 	blt.w	8014f00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8014bfe:	f11c 0c01 	adds.w	ip, ip, #1
 8014c02:	f100 816f 	bmi.w	8014ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8014c06:	4561      	cmp	r1, ip
 8014c08:	f2c0 816c 	blt.w	8014ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	f100 8169 	bmi.w	8014ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8014c12:	429a      	cmp	r2, r3
 8014c14:	f2c0 8166 	blt.w	8014ee4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8014c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8014c1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	f340 818c 	ble.w	8014f3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8014c26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014c28:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8014c2c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8014c30:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014c34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014c36:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8014c3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014c3c:	141b      	asrs	r3, r3, #16
 8014c3e:	f100 81d0 	bmi.w	8014fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8014c42:	f100 38ff 	add.w	r8, r0, #4294967295
 8014c46:	4543      	cmp	r3, r8
 8014c48:	f280 81cb 	bge.w	8014fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8014c4c:	f1bc 0f00 	cmp.w	ip, #0
 8014c50:	f2c0 81c7 	blt.w	8014fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8014c54:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014c58:	45c4      	cmp	ip, r8
 8014c5a:	f280 81c2 	bge.w	8014fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8014c5e:	b200      	sxth	r0, r0
 8014c60:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014c62:	fb0c 3300 	mla	r3, ip, r0, r3
 8014c66:	eb04 0803 	add.w	r8, r4, r3
 8014c6a:	5ce3      	ldrb	r3, [r4, r3]
 8014c6c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014c70:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8014c74:	2a00      	cmp	r2, #0
 8014c76:	f000 81a9 	beq.w	8014fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8014c7a:	f898 c001 	ldrb.w	ip, [r8, #1]
 8014c7e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8014c82:	940e      	str	r4, [sp, #56]	; 0x38
 8014c84:	0e24      	lsrs	r4, r4, #24
 8014c86:	9415      	str	r4, [sp, #84]	; 0x54
 8014c88:	b179      	cbz	r1, 8014caa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014c8a:	eb08 0c00 	add.w	ip, r8, r0
 8014c8e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014c92:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8014c96:	900a      	str	r0, [sp, #40]	; 0x28
 8014c98:	0e00      	lsrs	r0, r0, #24
 8014c9a:	9013      	str	r0, [sp, #76]	; 0x4c
 8014c9c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8014ca0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8014ca4:	900f      	str	r0, [sp, #60]	; 0x3c
 8014ca6:	0e00      	lsrs	r0, r0, #24
 8014ca8:	9016      	str	r0, [sp, #88]	; 0x58
 8014caa:	b292      	uxth	r2, r2
 8014cac:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014cae:	b289      	uxth	r1, r1
 8014cb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014cb2:	fb02 f901 	mul.w	r9, r2, r1
 8014cb6:	0112      	lsls	r2, r2, #4
 8014cb8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014cbc:	eba2 0809 	sub.w	r8, r2, r9
 8014cc0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8014cc4:	b289      	uxth	r1, r1
 8014cc6:	fa1f f888 	uxth.w	r8, r8
 8014cca:	1a52      	subs	r2, r2, r1
 8014ccc:	fb08 f000 	mul.w	r0, r8, r0
 8014cd0:	b292      	uxth	r2, r2
 8014cd2:	fb02 000e 	mla	r0, r2, lr, r0
 8014cd6:	fb01 0004 	mla	r0, r1, r4, r0
 8014cda:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014cdc:	fb09 0004 	mla	r0, r9, r4, r0
 8014ce0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	f000 80f2 	beq.w	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014cea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014cee:	d01b      	beq.n	8014d28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8014cf0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014cf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014cf8:	fb0e fa0a 	mul.w	sl, lr, sl
 8014cfc:	fb0e fe03 	mul.w	lr, lr, r3
 8014d00:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014d04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014d08:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8014d0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014d10:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014d14:	4453      	add	r3, sl
 8014d16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014d1a:	0a1b      	lsrs	r3, r3, #8
 8014d1c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014d20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014d24:	ea43 030c 	orr.w	r3, r3, ip
 8014d28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d2a:	2cff      	cmp	r4, #255	; 0xff
 8014d2c:	d021      	beq.n	8014d72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8014d2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d30:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014d34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d36:	fb04 fb0b 	mul.w	fp, r4, fp
 8014d3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014d3c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014d42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014d46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014d4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014d56:	44de      	add	lr, fp
 8014d58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014d5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014d60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014d64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014d6c:	ea4e 040a 	orr.w	r4, lr, sl
 8014d70:	940e      	str	r4, [sp, #56]	; 0x38
 8014d72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d74:	2cff      	cmp	r4, #255	; 0xff
 8014d76:	d021      	beq.n	8014dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8014d78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014d7a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014d7e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d80:	fb04 fb0b 	mul.w	fp, r4, fp
 8014d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014d86:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014d8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d8c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014d90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014d94:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014d9c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014da0:	44de      	add	lr, fp
 8014da2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014da6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014daa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014dae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014db2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014db6:	ea4e 040a 	orr.w	r4, lr, sl
 8014dba:	940a      	str	r4, [sp, #40]	; 0x28
 8014dbc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014dbe:	2cff      	cmp	r4, #255	; 0xff
 8014dc0:	d021      	beq.n	8014e06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8014dc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014dc4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014dc8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014dca:	fb04 fb0b 	mul.w	fp, r4, fp
 8014dce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014dd0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014dd4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014dd6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014dda:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014dde:	fb04 fa0a 	mul.w	sl, r4, sl
 8014de2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014de6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014dea:	44de      	add	lr, fp
 8014dec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014df0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014df4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014df8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014dfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014e00:	ea4e 040a 	orr.w	r4, lr, sl
 8014e04:	940f      	str	r4, [sp, #60]	; 0x3c
 8014e06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014e08:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8014e0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014e10:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e16:	fb08 fc0c 	mul.w	ip, r8, ip
 8014e1a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8014e1e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014e22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014e24:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014e28:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014e2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014e2e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014e32:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014e36:	fb08 f80e 	mul.w	r8, r8, lr
 8014e3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014e3e:	fb02 8303 	mla	r3, r2, r3, r8
 8014e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014e48:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e4e:	fb01 330a 	mla	r3, r1, sl, r3
 8014e52:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8014e56:	fb09 3901 	mla	r9, r9, r1, r3
 8014e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e5e:	4343      	muls	r3, r0
 8014e60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014e64:	1c58      	adds	r0, r3, #1
 8014e66:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014e6a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014e6e:	ea4c 0c09 	orr.w	ip, ip, r9
 8014e72:	783b      	ldrb	r3, [r7, #0]
 8014e74:	fa5f f28c 	uxtb.w	r2, ip
 8014e78:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8014e7c:	fb12 f201 	smulbb	r2, r2, r1
 8014e80:	b2c0      	uxtb	r0, r0
 8014e82:	fb03 2300 	mla	r3, r3, r0, r2
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	1c5a      	adds	r2, r3, #1
 8014e8a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014e8e:	787a      	ldrb	r2, [r7, #1]
 8014e90:	fb12 f200 	smulbb	r2, r2, r0
 8014e94:	121b      	asrs	r3, r3, #8
 8014e96:	703b      	strb	r3, [r7, #0]
 8014e98:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014e9c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014ea0:	fb03 2301 	mla	r3, r3, r1, r2
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	1c5a      	adds	r2, r3, #1
 8014ea8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014eac:	121b      	asrs	r3, r3, #8
 8014eae:	707b      	strb	r3, [r7, #1]
 8014eb0:	78bb      	ldrb	r3, [r7, #2]
 8014eb2:	fb13 f000 	smulbb	r0, r3, r0
 8014eb6:	fb0c 0c01 	mla	ip, ip, r1, r0
 8014eba:	fa1f fc8c 	uxth.w	ip, ip
 8014ebe:	f10c 0301 	add.w	r3, ip, #1
 8014ec2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014ec6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014eca:	f887 c002 	strb.w	ip, [r7, #2]
 8014ece:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014ed0:	3703      	adds	r7, #3
 8014ed2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8014ed4:	441a      	add	r2, r3
 8014ed6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014ed8:	441d      	add	r5, r3
 8014eda:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014edc:	9229      	str	r2, [sp, #164]	; 0xa4
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ee2:	e69c      	b.n	8014c1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8014ee4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014ee6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014ee8:	441c      	add	r4, r3
 8014eea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014eec:	441d      	add	r5, r3
 8014eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ef0:	9429      	str	r4, [sp, #164]	; 0xa4
 8014ef2:	3b01      	subs	r3, #1
 8014ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef8:	3303      	adds	r3, #3
 8014efa:	930c      	str	r3, [sp, #48]	; 0x30
 8014efc:	e66f      	b.n	8014bde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014efe:	d026      	beq.n	8014f4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8014f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f02:	982b      	ldr	r0, [sp, #172]	; 0xac
 8014f04:	3b01      	subs	r3, #1
 8014f06:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8014f08:	fb00 4003 	mla	r0, r0, r3, r4
 8014f0c:	1400      	asrs	r0, r0, #16
 8014f0e:	f53f ae83 	bmi.w	8014c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014f12:	3901      	subs	r1, #1
 8014f14:	4288      	cmp	r0, r1
 8014f16:	f6bf ae7f 	bge.w	8014c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014f1a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8014f1c:	fb01 5303 	mla	r3, r1, r3, r5
 8014f20:	141b      	asrs	r3, r3, #16
 8014f22:	f53f ae79 	bmi.w	8014c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014f26:	3a01      	subs	r2, #1
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	f6bf ae75 	bge.w	8014c18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f30:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8014f34:	f103 0e03 	add.w	lr, r3, #3
 8014f38:	f1bb 0f00 	cmp.w	fp, #0
 8014f3c:	dc71      	bgt.n	8015022 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8014f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014f4a:	4423      	add	r3, r4
 8014f4c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f340 81b5 	ble.w	80152c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8014f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014f5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014f60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014f64:	eef0 6a62 	vmov.f32	s13, s5
 8014f68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014f70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014f74:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8014f78:	eef0 6a43 	vmov.f32	s13, s6
 8014f7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014f80:	ee16 5a90 	vmov	r5, s13
 8014f84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014f88:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014f8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014f90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014f94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014f98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014f9c:	ee12 2a90 	vmov	r2, s5
 8014fa0:	eef0 2a47 	vmov.f32	s5, s14
 8014fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fa8:	ee13 2a10 	vmov	r2, s6
 8014fac:	932b      	str	r3, [sp, #172]	; 0xac
 8014fae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014fb0:	eeb0 3a67 	vmov.f32	s6, s15
 8014fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8014fb8:	932c      	str	r3, [sp, #176]	; 0xb0
 8014fba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014fbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014fbe:	3b01      	subs	r3, #1
 8014fc0:	9319      	str	r3, [sp, #100]	; 0x64
 8014fc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014fc4:	bf08      	it	eq
 8014fc6:	4613      	moveq	r3, r2
 8014fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8014fca:	e5fa      	b.n	8014bc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8014fcc:	2900      	cmp	r1, #0
 8014fce:	f43f ae6c 	beq.w	8014caa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014fd2:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014fd6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8014fda:	900a      	str	r0, [sp, #40]	; 0x28
 8014fdc:	0e00      	lsrs	r0, r0, #24
 8014fde:	9013      	str	r0, [sp, #76]	; 0x4c
 8014fe0:	e663      	b.n	8014caa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8014fe2:	f113 0801 	adds.w	r8, r3, #1
 8014fe6:	f53f af72 	bmi.w	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014fea:	4540      	cmp	r0, r8
 8014fec:	f6ff af6f 	blt.w	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014ff0:	f11c 0801 	adds.w	r8, ip, #1
 8014ff4:	f53f af6b 	bmi.w	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014ff8:	45c6      	cmp	lr, r8
 8014ffa:	f6ff af68 	blt.w	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8014ffe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015000:	b200      	sxth	r0, r0
 8015002:	9302      	str	r3, [sp, #8]
 8015004:	fa0f f38e 	sxth.w	r3, lr
 8015008:	9000      	str	r0, [sp, #0]
 801500a:	9301      	str	r3, [sp, #4]
 801500c:	4633      	mov	r3, r6
 801500e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015010:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8015014:	e9cd c203 	strd	ip, r2, [sp, #12]
 8015018:	4639      	mov	r1, r7
 801501a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801501c:	f7ff fc74 	bl	8014908 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8015020:	e755      	b.n	8014ece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8015022:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015024:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015028:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801502a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801502e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015030:	1427      	asrs	r7, r4, #16
 8015032:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015034:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015038:	142b      	asrs	r3, r5, #16
 801503a:	fb01 7303 	mla	r3, r1, r3, r7
 801503e:	18e7      	adds	r7, r4, r3
 8015040:	5ce3      	ldrb	r3, [r4, r3]
 8015042:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015046:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801504a:	2a00      	cmp	r2, #0
 801504c:	f000 812e 	beq.w	80152ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8015050:	f897 8001 	ldrb.w	r8, [r7, #1]
 8015054:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8015058:	9410      	str	r4, [sp, #64]	; 0x40
 801505a:	0e24      	lsrs	r4, r4, #24
 801505c:	9417      	str	r4, [sp, #92]	; 0x5c
 801505e:	b170      	cbz	r0, 801507e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8015060:	eb07 0801 	add.w	r8, r7, r1
 8015064:	5c79      	ldrb	r1, [r7, r1]
 8015066:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801506a:	910b      	str	r1, [sp, #44]	; 0x2c
 801506c:	0e09      	lsrs	r1, r1, #24
 801506e:	9114      	str	r1, [sp, #80]	; 0x50
 8015070:	f898 1001 	ldrb.w	r1, [r8, #1]
 8015074:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015078:	9111      	str	r1, [sp, #68]	; 0x44
 801507a:	0e09      	lsrs	r1, r1, #24
 801507c:	9118      	str	r1, [sp, #96]	; 0x60
 801507e:	b292      	uxth	r2, r2
 8015080:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015082:	b280      	uxth	r0, r0
 8015084:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015086:	fb02 f900 	mul.w	r9, r2, r0
 801508a:	0112      	lsls	r2, r2, #4
 801508c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015090:	eba2 0809 	sub.w	r8, r2, r9
 8015094:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015098:	b280      	uxth	r0, r0
 801509a:	fa1f f888 	uxth.w	r8, r8
 801509e:	1a12      	subs	r2, r2, r0
 80150a0:	fb08 f101 	mul.w	r1, r8, r1
 80150a4:	b292      	uxth	r2, r2
 80150a6:	fb02 110c 	mla	r1, r2, ip, r1
 80150aa:	fb00 1104 	mla	r1, r0, r4, r1
 80150ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80150b0:	fb09 1104 	mla	r1, r9, r4, r1
 80150b4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80150b8:	2900      	cmp	r1, #0
 80150ba:	f000 80ec 	beq.w	8015296 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80150be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80150c2:	d019      	beq.n	80150f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80150c4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80150c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80150cc:	fb0c fa0a 	mul.w	sl, ip, sl
 80150d0:	fb0c fc03 	mul.w	ip, ip, r3
 80150d4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80150d8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80150dc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80150e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80150e4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80150e8:	4453      	add	r3, sl
 80150ea:	0a3f      	lsrs	r7, r7, #8
 80150ec:	0a1b      	lsrs	r3, r3, #8
 80150ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80150f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80150f6:	433b      	orrs	r3, r7
 80150f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80150fa:	2cff      	cmp	r4, #255	; 0xff
 80150fc:	d020      	beq.n	8015140 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80150fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015100:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015104:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015106:	4367      	muls	r7, r4
 8015108:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801510a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801510e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015112:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015114:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015118:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801511c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015120:	44bc      	add	ip, r7
 8015122:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015126:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801512a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801512e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015132:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015136:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801513a:	ea4c 040a 	orr.w	r4, ip, sl
 801513e:	9410      	str	r4, [sp, #64]	; 0x40
 8015140:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015142:	2cff      	cmp	r4, #255	; 0xff
 8015144:	d020      	beq.n	8015188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8015146:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015148:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801514c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801514e:	4367      	muls	r7, r4
 8015150:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015152:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015156:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801515a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801515c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015160:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015164:	fb04 fa0a 	mul.w	sl, r4, sl
 8015168:	44bc      	add	ip, r7
 801516a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801516e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015172:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015176:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801517a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801517e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015182:	ea4c 040a 	orr.w	r4, ip, sl
 8015186:	940b      	str	r4, [sp, #44]	; 0x2c
 8015188:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801518a:	2cff      	cmp	r4, #255	; 0xff
 801518c:	d020      	beq.n	80151d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801518e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015190:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015194:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015196:	4367      	muls	r7, r4
 8015198:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801519a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801519e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80151a2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80151a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80151a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80151b0:	44bc      	add	ip, r7
 80151b2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80151b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80151ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80151be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80151c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80151ca:	ea4c 040a 	orr.w	r4, ip, sl
 80151ce:	9411      	str	r4, [sp, #68]	; 0x44
 80151d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80151d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80151d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80151da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80151de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80151e0:	fb08 f707 	mul.w	r7, r8, r7
 80151e4:	fb02 770c 	mla	r7, r2, ip, r7
 80151e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80151ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80151ee:	fb00 770c 	mla	r7, r0, ip, r7
 80151f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80151f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80151f8:	fb09 770c 	mla	r7, r9, ip, r7
 80151fc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8015200:	fb08 f80c 	mul.w	r8, r8, ip
 8015204:	0a3f      	lsrs	r7, r7, #8
 8015206:	fb02 8303 	mla	r3, r2, r3, r8
 801520a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801520c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015210:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015216:	fb00 330a 	mla	r3, r0, sl, r3
 801521a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801521e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015220:	fb09 3c0c 	mla	ip, r9, ip, r3
 8015224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015226:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801522a:	434b      	muls	r3, r1
 801522c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015230:	1c59      	adds	r1, r3, #1
 8015232:	ea47 070c 	orr.w	r7, r7, ip
 8015236:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801523a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801523e:	b2fa      	uxtb	r2, r7
 8015240:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8015244:	fb12 f200 	smulbb	r2, r2, r0
 8015248:	b2c9      	uxtb	r1, r1
 801524a:	fb03 2301 	mla	r3, r3, r1, r2
 801524e:	b29b      	uxth	r3, r3
 8015250:	1c5a      	adds	r2, r3, #1
 8015252:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015256:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801525a:	fb12 f201 	smulbb	r2, r2, r1
 801525e:	121b      	asrs	r3, r3, #8
 8015260:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8015264:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8015268:	0c3f      	lsrs	r7, r7, #16
 801526a:	fb03 2300 	mla	r3, r3, r0, r2
 801526e:	b29b      	uxth	r3, r3
 8015270:	1c5a      	adds	r2, r3, #1
 8015272:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015276:	121b      	asrs	r3, r3, #8
 8015278:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801527c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8015280:	fb13 f101 	smulbb	r1, r3, r1
 8015284:	fb07 1700 	mla	r7, r7, r0, r1
 8015288:	b2bf      	uxth	r7, r7
 801528a:	1c7b      	adds	r3, r7, #1
 801528c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8015290:	123f      	asrs	r7, r7, #8
 8015292:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8015296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015298:	f10e 0e03 	add.w	lr, lr, #3
 801529c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801529e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152a2:	441a      	add	r2, r3
 80152a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80152a6:	9229      	str	r2, [sp, #164]	; 0xa4
 80152a8:	441d      	add	r5, r3
 80152aa:	e645      	b.n	8014f38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	f43f aee6 	beq.w	801507e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80152b2:	5c79      	ldrb	r1, [r7, r1]
 80152b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80152b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80152ba:	0e09      	lsrs	r1, r1, #24
 80152bc:	9114      	str	r1, [sp, #80]	; 0x50
 80152be:	e6de      	b.n	801507e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80152c0:	b01f      	add	sp, #124	; 0x7c
 80152c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80152c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ca:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80152ce:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80152d2:	2d00      	cmp	r5, #0
 80152d4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80152d8:	fb05 700e 	mla	r0, r5, lr, r7
 80152dc:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80152e0:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80152e4:	eb02 0800 	add.w	r8, r2, r0
 80152e8:	f2c0 8105 	blt.w	80154f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80152ec:	45a9      	cmp	r9, r5
 80152ee:	f340 8102 	ble.w	80154f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80152f2:	2f00      	cmp	r7, #0
 80152f4:	f2c0 80fd 	blt.w	80154f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80152f8:	45be      	cmp	lr, r7
 80152fa:	f340 80fa 	ble.w	80154f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80152fe:	5c12      	ldrb	r2, [r2, r0]
 8015300:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015304:	1c7a      	adds	r2, r7, #1
 8015306:	f100 80f9 	bmi.w	80154fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801530a:	4596      	cmp	lr, r2
 801530c:	f340 80f6 	ble.w	80154fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8015310:	2c00      	cmp	r4, #0
 8015312:	f000 80f5 	beq.w	8015500 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8015316:	f898 2001 	ldrb.w	r2, [r8, #1]
 801531a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801531e:	3501      	adds	r5, #1
 8015320:	f100 80f2 	bmi.w	8015508 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8015324:	45a9      	cmp	r9, r5
 8015326:	f340 80ef 	ble.w	8015508 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801532a:	f1bc 0f00 	cmp.w	ip, #0
 801532e:	f000 80ee 	beq.w	801550e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8015332:	2f00      	cmp	r7, #0
 8015334:	f2c0 80e6 	blt.w	8015504 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8015338:	45be      	cmp	lr, r7
 801533a:	f340 80e3 	ble.w	8015504 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801533e:	f818 200e 	ldrb.w	r2, [r8, lr]
 8015342:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015346:	3701      	adds	r7, #1
 8015348:	f100 80e4 	bmi.w	8015514 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801534c:	45be      	cmp	lr, r7
 801534e:	f340 80e1 	ble.w	8015514 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8015352:	2c00      	cmp	r4, #0
 8015354:	f000 80e0 	beq.w	8015518 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8015358:	44c6      	add	lr, r8
 801535a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801535e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015362:	b2a3      	uxth	r3, r4
 8015364:	fa1f fc8c 	uxth.w	ip, ip
 8015368:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801536c:	fb0c fe03 	mul.w	lr, ip, r3
 8015370:	011b      	lsls	r3, r3, #4
 8015372:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8015376:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801537a:	eba3 070e 	sub.w	r7, r3, lr
 801537e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015382:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8015386:	fa1f f48c 	uxth.w	r4, ip
 801538a:	b2bf      	uxth	r7, r7
 801538c:	1b1b      	subs	r3, r3, r4
 801538e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8015392:	fb07 fc0a 	mul.w	ip, r7, sl
 8015396:	b29b      	uxth	r3, r3
 8015398:	fb03 cc0b 	mla	ip, r3, fp, ip
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	fb04 cc09 	mla	ip, r4, r9, ip
 80153a2:	fb0e cc08 	mla	ip, lr, r8, ip
 80153a6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80153aa:	9301      	str	r3, [sp, #4]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	f000 809d 	beq.w	80154ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80153b2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80153b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80153ba:	fb0b fc0c 	mul.w	ip, fp, ip
 80153be:	fb0b f606 	mul.w	r6, fp, r6
 80153c2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80153c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80153ca:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80153ce:	44dc      	add	ip, fp
 80153d0:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80153d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80153d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80153dc:	fb0a fb0b 	mul.w	fp, sl, fp
 80153e0:	fb0a fa00 	mul.w	sl, sl, r0
 80153e4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80153e8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80153ec:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80153f0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80153f4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80153f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80153fc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8015400:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015404:	0a36      	lsrs	r6, r6, #8
 8015406:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801540a:	44dc      	add	ip, fp
 801540c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8015410:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8015414:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015418:	fb09 fb0b 	mul.w	fp, r9, fp
 801541c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015420:	fb09 f905 	mul.w	r9, r9, r5
 8015424:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8015428:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801542c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8015430:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015434:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015438:	fb0c fc07 	mul.w	ip, ip, r7
 801543c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8015440:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8015444:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015448:	4458      	add	r0, fp
 801544a:	fb08 f505 	mul.w	r5, r8, r5
 801544e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015452:	fb08 f802 	mul.w	r8, r8, r2
 8015456:	0a00      	lsrs	r0, r0, #8
 8015458:	0a2a      	lsrs	r2, r5, #8
 801545a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801545e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015462:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015466:	4415      	add	r5, r2
 8015468:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801546c:	0a2d      	lsrs	r5, r5, #8
 801546e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015472:	9a00      	ldr	r2, [sp, #0]
 8015474:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8015478:	fb03 cc02 	mla	ip, r3, r2, ip
 801547c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015480:	9b01      	ldr	r3, [sp, #4]
 8015482:	fb05 c50e 	mla	r5, r5, lr, ip
 8015486:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801548a:	43db      	mvns	r3, r3
 801548c:	fb00 5004 	mla	r0, r0, r4, r5
 8015490:	b2db      	uxtb	r3, r3
 8015492:	0a00      	lsrs	r0, r0, #8
 8015494:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8015498:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801549c:	4378      	muls	r0, r7
 801549e:	fb02 0006 	mla	r0, r2, r6, r0
 80154a2:	780a      	ldrb	r2, [r1, #0]
 80154a4:	fb0e 0e08 	mla	lr, lr, r8, r0
 80154a8:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80154ac:	fb04 e000 	mla	r0, r4, r0, lr
 80154b0:	fb02 f403 	mul.w	r4, r2, r3
 80154b4:	0a00      	lsrs	r0, r0, #8
 80154b6:	1c62      	adds	r2, r4, #1
 80154b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80154bc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80154c0:	4328      	orrs	r0, r5
 80154c2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80154c6:	700a      	strb	r2, [r1, #0]
 80154c8:	784a      	ldrb	r2, [r1, #1]
 80154ca:	435a      	muls	r2, r3
 80154cc:	1c54      	adds	r4, r2, #1
 80154ce:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80154d2:	0a02      	lsrs	r2, r0, #8
 80154d4:	0c00      	lsrs	r0, r0, #16
 80154d6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80154da:	704a      	strb	r2, [r1, #1]
 80154dc:	788a      	ldrb	r2, [r1, #2]
 80154de:	4353      	muls	r3, r2
 80154e0:	1c5a      	adds	r2, r3, #1
 80154e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80154e6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80154ea:	7088      	strb	r0, [r1, #2]
 80154ec:	b003      	add	sp, #12
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f2:	2600      	movs	r6, #0
 80154f4:	e706      	b.n	8015304 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80154f6:	2000      	movs	r0, #0
 80154f8:	4606      	mov	r6, r0
 80154fa:	e710      	b.n	801531e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80154fc:	2000      	movs	r0, #0
 80154fe:	e70e      	b.n	801531e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8015500:	4620      	mov	r0, r4
 8015502:	e70c      	b.n	801531e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8015504:	2500      	movs	r5, #0
 8015506:	e71e      	b.n	8015346 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8015508:	2200      	movs	r2, #0
 801550a:	4615      	mov	r5, r2
 801550c:	e729      	b.n	8015362 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801550e:	4662      	mov	r2, ip
 8015510:	4665      	mov	r5, ip
 8015512:	e726      	b.n	8015362 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8015514:	2200      	movs	r2, #0
 8015516:	e724      	b.n	8015362 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8015518:	4622      	mov	r2, r4
 801551a:	e722      	b.n	8015362 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801551c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015520:	b09b      	sub	sp, #108	; 0x6c
 8015522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015526:	9218      	str	r2, [sp, #96]	; 0x60
 8015528:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801552a:	9019      	str	r0, [sp, #100]	; 0x64
 801552c:	9116      	str	r1, [sp, #88]	; 0x58
 801552e:	6850      	ldr	r0, [r2, #4]
 8015530:	9307      	str	r3, [sp, #28]
 8015532:	6812      	ldr	r2, [r2, #0]
 8015534:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015536:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801553a:	fb00 1303 	mla	r3, r0, r3, r1
 801553e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015542:	18d3      	adds	r3, r2, r3
 8015544:	930a      	str	r3, [sp, #40]	; 0x28
 8015546:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	930f      	str	r3, [sp, #60]	; 0x3c
 801554c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801554e:	685e      	ldr	r6, [r3, #4]
 8015550:	3604      	adds	r6, #4
 8015552:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015554:	2b00      	cmp	r3, #0
 8015556:	dc03      	bgt.n	8015560 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8015558:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801555a:	2b00      	cmp	r3, #0
 801555c:	f340 834f 	ble.w	8015bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8015560:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015562:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015566:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801556a:	1e48      	subs	r0, r1, #1
 801556c:	1e57      	subs	r7, r2, #1
 801556e:	9b07      	ldr	r3, [sp, #28]
 8015570:	2b00      	cmp	r3, #0
 8015572:	f340 8178 	ble.w	8015866 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8015576:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8015578:	142b      	asrs	r3, r5, #16
 801557a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801557e:	d406      	bmi.n	801558e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015580:	4584      	cmp	ip, r0
 8015582:	da04      	bge.n	801558e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015584:	2b00      	cmp	r3, #0
 8015586:	db02      	blt.n	801558e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015588:	42bb      	cmp	r3, r7
 801558a:	f2c0 816d 	blt.w	8015868 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801558e:	f11c 0c01 	adds.w	ip, ip, #1
 8015592:	f100 815b 	bmi.w	801584c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8015596:	4561      	cmp	r1, ip
 8015598:	f2c0 8158 	blt.w	801584c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801559c:	3301      	adds	r3, #1
 801559e:	f100 8155 	bmi.w	801584c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80155a2:	429a      	cmp	r2, r3
 80155a4:	f2c0 8152 	blt.w	801584c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80155a8:	9b07      	ldr	r3, [sp, #28]
 80155aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80155ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80155ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f340 8178 	ble.w	80158a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80155b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80155b8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80155bc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80155c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80155c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80155c6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80155ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80155cc:	141b      	asrs	r3, r3, #16
 80155ce:	f100 81ba 	bmi.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80155d6:	4543      	cmp	r3, r8
 80155d8:	f280 81b5 	bge.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155dc:	f1bc 0f00 	cmp.w	ip, #0
 80155e0:	f2c0 81b1 	blt.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155e4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80155e8:	45c4      	cmp	ip, r8
 80155ea:	f280 81ac 	bge.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80155ee:	b209      	sxth	r1, r1
 80155f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80155f2:	fb0c 3301 	mla	r3, ip, r1, r3
 80155f6:	eb04 0803 	add.w	r8, r4, r3
 80155fa:	5ce3      	ldrb	r3, [r4, r3]
 80155fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015600:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8015604:	2a00      	cmp	r2, #0
 8015606:	f000 8193 	beq.w	8015930 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801560a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801560e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8015612:	940b      	str	r4, [sp, #44]	; 0x2c
 8015614:	0e24      	lsrs	r4, r4, #24
 8015616:	9412      	str	r4, [sp, #72]	; 0x48
 8015618:	b178      	cbz	r0, 801563a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801561a:	eb08 0c01 	add.w	ip, r8, r1
 801561e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015622:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015626:	9108      	str	r1, [sp, #32]
 8015628:	0e09      	lsrs	r1, r1, #24
 801562a:	9110      	str	r1, [sp, #64]	; 0x40
 801562c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8015630:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015634:	910c      	str	r1, [sp, #48]	; 0x30
 8015636:	0e09      	lsrs	r1, r1, #24
 8015638:	9113      	str	r1, [sp, #76]	; 0x4c
 801563a:	b292      	uxth	r2, r2
 801563c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801563e:	b280      	uxth	r0, r0
 8015640:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015642:	fb02 f900 	mul.w	r9, r2, r0
 8015646:	0112      	lsls	r2, r2, #4
 8015648:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801564c:	eba2 0809 	sub.w	r8, r2, r9
 8015650:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015654:	b280      	uxth	r0, r0
 8015656:	fa1f f888 	uxth.w	r8, r8
 801565a:	1a12      	subs	r2, r2, r0
 801565c:	fb08 f101 	mul.w	r1, r8, r1
 8015660:	b292      	uxth	r2, r2
 8015662:	fb02 110e 	mla	r1, r2, lr, r1
 8015666:	fb00 1104 	mla	r1, r0, r4, r1
 801566a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801566c:	fb09 1104 	mla	r1, r9, r4, r1
 8015670:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015674:	2900      	cmp	r1, #0
 8015676:	f000 80de 	beq.w	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801567a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801567e:	d01b      	beq.n	80156b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8015680:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015688:	fb0e fa0a 	mul.w	sl, lr, sl
 801568c:	fb0e fe03 	mul.w	lr, lr, r3
 8015690:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015694:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015698:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801569c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80156a0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80156a4:	4453      	add	r3, sl
 80156a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80156aa:	0a1b      	lsrs	r3, r3, #8
 80156ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80156b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80156b4:	ea43 030c 	orr.w	r3, r3, ip
 80156b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80156ba:	2cff      	cmp	r4, #255	; 0xff
 80156bc:	d021      	beq.n	8015702 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80156be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80156c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80156c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80156c6:	fb04 fb0b 	mul.w	fp, r4, fp
 80156ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80156cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80156d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80156d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80156d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80156da:	fb04 fa0a 	mul.w	sl, r4, sl
 80156de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80156e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80156e6:	44de      	add	lr, fp
 80156e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80156ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80156f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80156f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80156f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80156fc:	ea4e 040a 	orr.w	r4, lr, sl
 8015700:	940b      	str	r4, [sp, #44]	; 0x2c
 8015702:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015704:	2cff      	cmp	r4, #255	; 0xff
 8015706:	d021      	beq.n	801574c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8015708:	9c08      	ldr	r4, [sp, #32]
 801570a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801570e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015710:	fb04 fb0b 	mul.w	fp, r4, fp
 8015714:	9c08      	ldr	r4, [sp, #32]
 8015716:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801571a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801571c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015720:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015724:	fb04 fa0a 	mul.w	sl, r4, sl
 8015728:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801572c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015730:	44de      	add	lr, fp
 8015732:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015736:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801573a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801573e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015742:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015746:	ea4e 040a 	orr.w	r4, lr, sl
 801574a:	9408      	str	r4, [sp, #32]
 801574c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801574e:	2cff      	cmp	r4, #255	; 0xff
 8015750:	d021      	beq.n	8015796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8015752:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015754:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015758:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801575a:	fb04 fb0b 	mul.w	fp, r4, fp
 801575e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015760:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015764:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015766:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801576a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801576e:	fb04 fa0a 	mul.w	sl, r4, sl
 8015772:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015776:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801577a:	44de      	add	lr, fp
 801577c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015780:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015784:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015788:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801578c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015790:	ea4e 040a 	orr.w	r4, lr, sl
 8015794:	940c      	str	r4, [sp, #48]	; 0x30
 8015796:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015798:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801579c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80157a0:	43c9      	mvns	r1, r1
 80157a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80157a6:	9c08      	ldr	r4, [sp, #32]
 80157a8:	b2c9      	uxtb	r1, r1
 80157aa:	fb08 fc0c 	mul.w	ip, r8, ip
 80157ae:	fb02 cc0e 	mla	ip, r2, lr, ip
 80157b2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80157b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80157b8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80157bc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80157c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80157c2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80157c6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80157ca:	fb08 f80e 	mul.w	r8, r8, lr
 80157ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80157d2:	fb02 8303 	mla	r3, r2, r3, r8
 80157d6:	9a08      	ldr	r2, [sp, #32]
 80157d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80157dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80157e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157e2:	fb00 330a 	mla	r3, r0, sl, r3
 80157e6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80157ea:	fb09 3900 	mla	r9, r9, r0, r3
 80157ee:	783b      	ldrb	r3, [r7, #0]
 80157f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80157f4:	fb03 f201 	mul.w	r2, r3, r1
 80157f8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80157fc:	1c53      	adds	r3, r2, #1
 80157fe:	ea4c 0c09 	orr.w	ip, ip, r9
 8015802:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015806:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801580a:	703b      	strb	r3, [r7, #0]
 801580c:	787b      	ldrb	r3, [r7, #1]
 801580e:	434b      	muls	r3, r1
 8015810:	1c5a      	adds	r2, r3, #1
 8015812:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015816:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801581a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801581e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015822:	707b      	strb	r3, [r7, #1]
 8015824:	78bb      	ldrb	r3, [r7, #2]
 8015826:	4359      	muls	r1, r3
 8015828:	1c4b      	adds	r3, r1, #1
 801582a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801582e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8015832:	f887 c002 	strb.w	ip, [r7, #2]
 8015836:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015838:	3703      	adds	r7, #3
 801583a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801583c:	441a      	add	r2, r3
 801583e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015840:	441d      	add	r5, r3
 8015842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015844:	9225      	str	r2, [sp, #148]	; 0x94
 8015846:	3b01      	subs	r3, #1
 8015848:	9317      	str	r3, [sp, #92]	; 0x5c
 801584a:	e6b0      	b.n	80155ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801584c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801584e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8015850:	441c      	add	r4, r3
 8015852:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015854:	441d      	add	r5, r3
 8015856:	9b07      	ldr	r3, [sp, #28]
 8015858:	9425      	str	r4, [sp, #148]	; 0x94
 801585a:	3b01      	subs	r3, #1
 801585c:	9307      	str	r3, [sp, #28]
 801585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015860:	3303      	adds	r3, #3
 8015862:	930a      	str	r3, [sp, #40]	; 0x28
 8015864:	e683      	b.n	801556e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8015866:	d026      	beq.n	80158b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8015868:	9b07      	ldr	r3, [sp, #28]
 801586a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801586c:	3b01      	subs	r3, #1
 801586e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8015870:	fb00 4003 	mla	r0, r0, r3, r4
 8015874:	1400      	asrs	r0, r0, #16
 8015876:	f53f ae97 	bmi.w	80155a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801587a:	3901      	subs	r1, #1
 801587c:	4288      	cmp	r0, r1
 801587e:	f6bf ae93 	bge.w	80155a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8015882:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015884:	fb01 5303 	mla	r3, r1, r3, r5
 8015888:	141b      	asrs	r3, r3, #16
 801588a:	f53f ae8d 	bmi.w	80155a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801588e:	3a01      	subs	r2, #1
 8015890:	4293      	cmp	r3, r2
 8015892:	f6bf ae89 	bge.w	80155a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8015896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015898:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801589c:	f103 0e03 	add.w	lr, r3, #3
 80158a0:	f1bb 0f00 	cmp.w	fp, #0
 80158a4:	dc6d      	bgt.n	8015982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80158a6:	9b07      	ldr	r3, [sp, #28]
 80158a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80158ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80158b2:	4423      	add	r3, r4
 80158b4:	930a      	str	r3, [sp, #40]	; 0x28
 80158b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	f340 81a0 	ble.w	8015bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80158be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80158c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80158c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80158c8:	eeb0 6a62 	vmov.f32	s12, s5
 80158cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80158d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80158d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80158d8:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80158dc:	eeb0 6a43 	vmov.f32	s12, s6
 80158e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80158e4:	ee16 5a10 	vmov	r5, s12
 80158e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80158ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80158f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80158f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80158f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80158fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015900:	ee12 2a90 	vmov	r2, s5
 8015904:	eef0 2a47 	vmov.f32	s5, s14
 8015908:	fb92 f3f3 	sdiv	r3, r2, r3
 801590c:	ee13 2a10 	vmov	r2, s6
 8015910:	9327      	str	r3, [sp, #156]	; 0x9c
 8015912:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015914:	eeb0 3a67 	vmov.f32	s6, s15
 8015918:	fb92 f3f3 	sdiv	r3, r2, r3
 801591c:	9328      	str	r3, [sp, #160]	; 0xa0
 801591e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015920:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015922:	3b01      	subs	r3, #1
 8015924:	9316      	str	r3, [sp, #88]	; 0x58
 8015926:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015928:	bf08      	it	eq
 801592a:	4613      	moveq	r3, r2
 801592c:	9307      	str	r3, [sp, #28]
 801592e:	e610      	b.n	8015552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8015930:	2800      	cmp	r0, #0
 8015932:	f43f ae82 	beq.w	801563a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8015936:	f818 1001 	ldrb.w	r1, [r8, r1]
 801593a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801593e:	9108      	str	r1, [sp, #32]
 8015940:	0e09      	lsrs	r1, r1, #24
 8015942:	9110      	str	r1, [sp, #64]	; 0x40
 8015944:	e679      	b.n	801563a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8015946:	f113 0801 	adds.w	r8, r3, #1
 801594a:	f53f af74 	bmi.w	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801594e:	4541      	cmp	r1, r8
 8015950:	f6ff af71 	blt.w	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015954:	f11c 0801 	adds.w	r8, ip, #1
 8015958:	f53f af6d 	bmi.w	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801595c:	45c6      	cmp	lr, r8
 801595e:	f6ff af6a 	blt.w	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015962:	b209      	sxth	r1, r1
 8015964:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8015968:	fa0f f38e 	sxth.w	r3, lr
 801596c:	9100      	str	r1, [sp, #0]
 801596e:	4639      	mov	r1, r7
 8015970:	9301      	str	r3, [sp, #4]
 8015972:	4633      	mov	r3, r6
 8015974:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8015978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801597a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801597c:	f7ff fca3 	bl	80152c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8015980:	e759      	b.n	8015836 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8015982:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015984:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015988:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801598a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801598e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015990:	1427      	asrs	r7, r4, #16
 8015992:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015994:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015998:	142b      	asrs	r3, r5, #16
 801599a:	fb01 7303 	mla	r3, r1, r3, r7
 801599e:	18e7      	adds	r7, r4, r3
 80159a0:	5ce3      	ldrb	r3, [r4, r3]
 80159a2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80159a6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80159aa:	2a00      	cmp	r2, #0
 80159ac:	f000 811d 	beq.w	8015bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80159b0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80159b4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80159b8:	940d      	str	r4, [sp, #52]	; 0x34
 80159ba:	0e24      	lsrs	r4, r4, #24
 80159bc:	9414      	str	r4, [sp, #80]	; 0x50
 80159be:	b170      	cbz	r0, 80159de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80159c0:	eb07 0801 	add.w	r8, r7, r1
 80159c4:	5c79      	ldrb	r1, [r7, r1]
 80159c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80159ca:	9109      	str	r1, [sp, #36]	; 0x24
 80159cc:	0e09      	lsrs	r1, r1, #24
 80159ce:	9111      	str	r1, [sp, #68]	; 0x44
 80159d0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80159d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80159d8:	910e      	str	r1, [sp, #56]	; 0x38
 80159da:	0e09      	lsrs	r1, r1, #24
 80159dc:	9115      	str	r1, [sp, #84]	; 0x54
 80159de:	b292      	uxth	r2, r2
 80159e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80159e2:	b280      	uxth	r0, r0
 80159e4:	fb02 f900 	mul.w	r9, r2, r0
 80159e8:	0112      	lsls	r2, r2, #4
 80159ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80159ee:	eba2 0809 	sub.w	r8, r2, r9
 80159f2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80159f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80159f8:	b280      	uxth	r0, r0
 80159fa:	fa1f f888 	uxth.w	r8, r8
 80159fe:	1a09      	subs	r1, r1, r0
 8015a00:	fb08 f202 	mul.w	r2, r8, r2
 8015a04:	b289      	uxth	r1, r1
 8015a06:	fb01 220c 	mla	r2, r1, ip, r2
 8015a0a:	fb00 2204 	mla	r2, r0, r4, r2
 8015a0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015a10:	fb09 2204 	mla	r2, r9, r4, r2
 8015a14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015a18:	2a00      	cmp	r2, #0
 8015a1a:	f000 80db 	beq.w	8015bd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8015a1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015a22:	d019      	beq.n	8015a58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8015a24:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015a2c:	fb0c fa0a 	mul.w	sl, ip, sl
 8015a30:	fb0c fc03 	mul.w	ip, ip, r3
 8015a34:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015a38:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015a3c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8015a40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a44:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8015a48:	4453      	add	r3, sl
 8015a4a:	0a3f      	lsrs	r7, r7, #8
 8015a4c:	0a1b      	lsrs	r3, r3, #8
 8015a4e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015a52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a56:	433b      	orrs	r3, r7
 8015a58:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015a5a:	2cff      	cmp	r4, #255	; 0xff
 8015a5c:	d020      	beq.n	8015aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8015a5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015a60:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015a64:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015a66:	4367      	muls	r7, r4
 8015a68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015a6a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015a6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015a72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015a74:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015a78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015a7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015a80:	44bc      	add	ip, r7
 8015a82:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015a86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015a8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015a8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015a92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015a96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015a9a:	ea4c 040a 	orr.w	r4, ip, sl
 8015a9e:	940d      	str	r4, [sp, #52]	; 0x34
 8015aa0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015aa2:	2cff      	cmp	r4, #255	; 0xff
 8015aa4:	d020      	beq.n	8015ae8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8015aa6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015aa8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015aac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015aae:	4367      	muls	r7, r4
 8015ab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015ab2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015ab6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015aba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015abc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ac4:	fb04 fa0a 	mul.w	sl, r4, sl
 8015ac8:	44bc      	add	ip, r7
 8015aca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015ace:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015ad2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015ad6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ada:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ade:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015ae2:	ea4c 040a 	orr.w	r4, ip, sl
 8015ae6:	9409      	str	r4, [sp, #36]	; 0x24
 8015ae8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015aea:	2cff      	cmp	r4, #255	; 0xff
 8015aec:	d020      	beq.n	8015b30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8015aee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015af0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015af4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015af6:	4367      	muls	r7, r4
 8015af8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015afa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015afe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015b02:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015b04:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015b08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b0c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015b10:	44bc      	add	ip, r7
 8015b12:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015b16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015b1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015b26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015b2a:	ea4c 040a 	orr.w	r4, ip, sl
 8015b2e:	940e      	str	r4, [sp, #56]	; 0x38
 8015b30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b32:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8015b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b3a:	43d2      	mvns	r2, r2
 8015b3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015b40:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015b42:	b2d2      	uxtb	r2, r2
 8015b44:	fb08 f707 	mul.w	r7, r8, r7
 8015b48:	fb01 770c 	mla	r7, r1, ip, r7
 8015b4c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015b50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015b52:	fb00 770c 	mla	r7, r0, ip, r7
 8015b56:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015b5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b5c:	fb09 770c 	mla	r7, r9, ip, r7
 8015b60:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8015b64:	fb08 f80c 	mul.w	r8, r8, ip
 8015b68:	0a3f      	lsrs	r7, r7, #8
 8015b6a:	fb01 8303 	mla	r3, r1, r3, r8
 8015b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015b74:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8015b78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b7a:	fb00 330a 	mla	r3, r0, sl, r3
 8015b7e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8015b82:	fb09 3c0c 	mla	ip, r9, ip, r3
 8015b86:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8015b8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b8e:	fb03 f102 	mul.w	r1, r3, r2
 8015b92:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015b96:	1c4b      	adds	r3, r1, #1
 8015b98:	ea47 070c 	orr.w	r7, r7, ip
 8015b9c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015ba0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8015ba4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8015ba8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8015bac:	4353      	muls	r3, r2
 8015bae:	1c59      	adds	r1, r3, #1
 8015bb0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015bb4:	0a3b      	lsrs	r3, r7, #8
 8015bb6:	0c3f      	lsrs	r7, r7, #16
 8015bb8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015bbc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8015bc0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8015bc4:	435a      	muls	r2, r3
 8015bc6:	1c53      	adds	r3, r2, #1
 8015bc8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015bcc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8015bd0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8015bd4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015bd6:	f10e 0e03 	add.w	lr, lr, #3
 8015bda:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015be0:	441a      	add	r2, r3
 8015be2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015be4:	9225      	str	r2, [sp, #148]	; 0x94
 8015be6:	441d      	add	r5, r3
 8015be8:	e65a      	b.n	80158a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	f43f aef7 	beq.w	80159de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8015bf0:	5c79      	ldrb	r1, [r7, r1]
 8015bf2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015bf6:	9109      	str	r1, [sp, #36]	; 0x24
 8015bf8:	0e09      	lsrs	r1, r1, #24
 8015bfa:	9111      	str	r1, [sp, #68]	; 0x44
 8015bfc:	e6ef      	b.n	80159de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8015bfe:	b01b      	add	sp, #108	; 0x6c
 8015c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8015c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c08:	b08d      	sub	sp, #52	; 0x34
 8015c0a:	468b      	mov	fp, r1
 8015c0c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8015c10:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8015c14:	fb0c 5703 	mla	r7, ip, r3, r5
 8015c18:	f1bc 0f00 	cmp.w	ip, #0
 8015c1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8015c1e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015c22:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8015c26:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015c2a:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8015c2e:	eb02 0607 	add.w	r6, r2, r7
 8015c32:	f89b 4000 	ldrb.w	r4, [fp]
 8015c36:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8015c3a:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8015c3e:	f2c0 80c1 	blt.w	8015dc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8015c42:	45e6      	cmp	lr, ip
 8015c44:	f340 80be 	ble.w	8015dc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8015c48:	2d00      	cmp	r5, #0
 8015c4a:	f2c0 80b7 	blt.w	8015dbc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8015c4e:	42ab      	cmp	r3, r5
 8015c50:	f340 80b4 	ble.w	8015dbc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8015c54:	5dd2      	ldrb	r2, [r2, r7]
 8015c56:	9205      	str	r2, [sp, #20]
 8015c58:	7872      	ldrb	r2, [r6, #1]
 8015c5a:	9206      	str	r2, [sp, #24]
 8015c5c:	78b2      	ldrb	r2, [r6, #2]
 8015c5e:	9207      	str	r2, [sp, #28]
 8015c60:	1c6a      	adds	r2, r5, #1
 8015c62:	f100 80b6 	bmi.w	8015dd2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8015c66:	4293      	cmp	r3, r2
 8015c68:	f340 80b3 	ble.w	8015dd2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8015c6c:	f1b8 0f00 	cmp.w	r8, #0
 8015c70:	f000 80af 	beq.w	8015dd2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8015c74:	78f2      	ldrb	r2, [r6, #3]
 8015c76:	9201      	str	r2, [sp, #4]
 8015c78:	7932      	ldrb	r2, [r6, #4]
 8015c7a:	9202      	str	r2, [sp, #8]
 8015c7c:	7972      	ldrb	r2, [r6, #5]
 8015c7e:	9203      	str	r2, [sp, #12]
 8015c80:	f11c 0c01 	adds.w	ip, ip, #1
 8015c84:	f100 80ad 	bmi.w	8015de2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8015c88:	45e6      	cmp	lr, ip
 8015c8a:	f340 80aa 	ble.w	8015de2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8015c8e:	f1ba 0f00 	cmp.w	sl, #0
 8015c92:	f000 80a6 	beq.w	8015de2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8015c96:	2d00      	cmp	r5, #0
 8015c98:	f2c0 809f 	blt.w	8015dda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8015c9c:	42ab      	cmp	r3, r5
 8015c9e:	f340 809c 	ble.w	8015dda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8015ca2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015ca6:	f816 9002 	ldrb.w	r9, [r6, r2]
 8015caa:	2203      	movs	r2, #3
 8015cac:	fb03 6c02 	mla	ip, r3, r2, r6
 8015cb0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8015cb4:	f89c e002 	ldrb.w	lr, [ip, #2]
 8015cb8:	9704      	str	r7, [sp, #16]
 8015cba:	3501      	adds	r5, #1
 8015cbc:	f100 8098 	bmi.w	8015df0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8015cc0:	42ab      	cmp	r3, r5
 8015cc2:	f340 8095 	ble.w	8015df0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8015cc6:	f1b8 0f00 	cmp.w	r8, #0
 8015cca:	f000 8091 	beq.w	8015df0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8015cce:	f04f 0c03 	mov.w	ip, #3
 8015cd2:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8015cd6:	5cb5      	ldrb	r5, [r6, r2]
 8015cd8:	fb03 620c 	mla	r2, r3, ip, r6
 8015cdc:	fb03 630c 	mla	r3, r3, ip, r6
 8015ce0:	7912      	ldrb	r2, [r2, #4]
 8015ce2:	795e      	ldrb	r6, [r3, #5]
 8015ce4:	fa1f f388 	uxth.w	r3, r8
 8015ce8:	fa1f fc8a 	uxth.w	ip, sl
 8015cec:	fb03 f70c 	mul.w	r7, r3, ip
 8015cf0:	011b      	lsls	r3, r3, #4
 8015cf2:	9708      	str	r7, [sp, #32]
 8015cf4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8015cf8:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8015cfc:	1bdb      	subs	r3, r3, r7
 8015cfe:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8015d02:	fa1f fc8c 	uxth.w	ip, ip
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	9709      	str	r7, [sp, #36]	; 0x24
 8015d0a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8015d0e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015d10:	930a      	str	r3, [sp, #40]	; 0x28
 8015d12:	fa1f fa8a 	uxth.w	sl, sl
 8015d16:	ea6f 0807 	mvn.w	r8, r7
 8015d1a:	9f01      	ldr	r7, [sp, #4]
 8015d1c:	435f      	muls	r7, r3
 8015d1e:	9b05      	ldr	r3, [sp, #20]
 8015d20:	fa5f f888 	uxtb.w	r8, r8
 8015d24:	fb0a 7703 	mla	r7, sl, r3, r7
 8015d28:	9b08      	ldr	r3, [sp, #32]
 8015d2a:	fb14 f408 	smulbb	r4, r4, r8
 8015d2e:	fb0c 7709 	mla	r7, ip, r9, r7
 8015d32:	fb10 f008 	smulbb	r0, r0, r8
 8015d36:	fb11 f108 	smulbb	r1, r1, r8
 8015d3a:	fb03 7705 	mla	r7, r3, r5, r7
 8015d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d40:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8015d44:	fb07 4703 	mla	r7, r7, r3, r4
 8015d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d4a:	b2bf      	uxth	r7, r7
 8015d4c:	1c7c      	adds	r4, r7, #1
 8015d4e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8015d52:	1224      	asrs	r4, r4, #8
 8015d54:	f88b 4000 	strb.w	r4, [fp]
 8015d58:	9c02      	ldr	r4, [sp, #8]
 8015d5a:	435c      	muls	r4, r3
 8015d5c:	9b06      	ldr	r3, [sp, #24]
 8015d5e:	fb0a 4403 	mla	r4, sl, r3, r4
 8015d62:	9b04      	ldr	r3, [sp, #16]
 8015d64:	fb0c 4403 	mla	r4, ip, r3, r4
 8015d68:	9b08      	ldr	r3, [sp, #32]
 8015d6a:	fb03 4402 	mla	r4, r3, r2, r4
 8015d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d72:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8015d76:	fb04 0403 	mla	r4, r4, r3, r0
 8015d7a:	9b03      	ldr	r3, [sp, #12]
 8015d7c:	435a      	muls	r2, r3
 8015d7e:	b2a4      	uxth	r4, r4
 8015d80:	4613      	mov	r3, r2
 8015d82:	9a07      	ldr	r2, [sp, #28]
 8015d84:	1c60      	adds	r0, r4, #1
 8015d86:	fb0a 3a02 	mla	sl, sl, r2, r3
 8015d8a:	9b08      	ldr	r3, [sp, #32]
 8015d8c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8015d90:	fb0c ac0e 	mla	ip, ip, lr, sl
 8015d94:	1224      	asrs	r4, r4, #8
 8015d96:	fb03 c606 	mla	r6, r3, r6, ip
 8015d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d9c:	f88b 4001 	strb.w	r4, [fp, #1]
 8015da0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015da4:	fb06 1103 	mla	r1, r6, r3, r1
 8015da8:	b289      	uxth	r1, r1
 8015daa:	1c4e      	adds	r6, r1, #1
 8015dac:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8015db0:	1209      	asrs	r1, r1, #8
 8015db2:	f88b 1002 	strb.w	r1, [fp, #2]
 8015db6:	b00d      	add	sp, #52	; 0x34
 8015db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015dc0:	9405      	str	r4, [sp, #20]
 8015dc2:	e74d      	b.n	8015c60 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8015dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015dc8:	9401      	str	r4, [sp, #4]
 8015dca:	9405      	str	r4, [sp, #20]
 8015dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015dd0:	e756      	b.n	8015c80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8015dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015dd6:	9401      	str	r4, [sp, #4]
 8015dd8:	e752      	b.n	8015c80 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8015dda:	468e      	mov	lr, r1
 8015ddc:	9004      	str	r0, [sp, #16]
 8015dde:	46a1      	mov	r9, r4
 8015de0:	e76b      	b.n	8015cba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8015de2:	460e      	mov	r6, r1
 8015de4:	4602      	mov	r2, r0
 8015de6:	4625      	mov	r5, r4
 8015de8:	468e      	mov	lr, r1
 8015dea:	9004      	str	r0, [sp, #16]
 8015dec:	46a1      	mov	r9, r4
 8015dee:	e779      	b.n	8015ce4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8015df0:	460e      	mov	r6, r1
 8015df2:	4602      	mov	r2, r0
 8015df4:	4625      	mov	r5, r4
 8015df6:	e775      	b.n	8015ce4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08015df8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dfc:	b09f      	sub	sp, #124	; 0x7c
 8015dfe:	920e      	str	r2, [sp, #56]	; 0x38
 8015e00:	9307      	str	r3, [sp, #28]
 8015e02:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8015e04:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8015e08:	901d      	str	r0, [sp, #116]	; 0x74
 8015e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8015e0c:	6850      	ldr	r0, [r2, #4]
 8015e0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015e10:	6812      	ldr	r2, [r2, #0]
 8015e12:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8015e16:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8015e1a:	fb00 1303 	mla	r3, r0, r3, r1
 8015e1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e22:	18d3      	adds	r3, r2, r3
 8015e24:	9308      	str	r3, [sp, #32]
 8015e26:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e2e:	43db      	mvns	r3, r3
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	9309      	str	r3, [sp, #36]	; 0x24
 8015e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	dc03      	bgt.n	8015e42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f340 81f5 	ble.w	801622c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8015e42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015e44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015e48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015e4c:	1e48      	subs	r0, r1, #1
 8015e4e:	1e54      	subs	r4, r2, #1
 8015e50:	9b07      	ldr	r3, [sp, #28]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f340 80d5 	ble.w	8016002 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8015e58:	ea5f 452a 	movs.w	r5, sl, asr #16
 8015e5c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8015e60:	d406      	bmi.n	8015e70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015e62:	4285      	cmp	r5, r0
 8015e64:	da04      	bge.n	8015e70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	db02      	blt.n	8015e70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015e6a:	42a3      	cmp	r3, r4
 8015e6c:	f2c0 80ca 	blt.w	8016004 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8015e70:	3501      	adds	r5, #1
 8015e72:	f100 80bb 	bmi.w	8015fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015e76:	42a9      	cmp	r1, r5
 8015e78:	f2c0 80b8 	blt.w	8015fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	f100 80b5 	bmi.w	8015fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015e82:	429a      	cmp	r2, r3
 8015e84:	f2c0 80b2 	blt.w	8015fec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8015e88:	9b07      	ldr	r3, [sp, #28]
 8015e8a:	9d08      	ldr	r5, [sp, #32]
 8015e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f340 80d6 	ble.w	8016042 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8015e96:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8015e98:	ea4f 4428 	mov.w	r4, r8, asr #16
 8015e9c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015e9e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8015ea2:	68c6      	ldr	r6, [r0, #12]
 8015ea4:	ea5f 402a 	movs.w	r0, sl, asr #16
 8015ea8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8015eac:	689b      	ldr	r3, [r3, #8]
 8015eae:	f100 810f 	bmi.w	80160d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015eb2:	1e5f      	subs	r7, r3, #1
 8015eb4:	42b8      	cmp	r0, r7
 8015eb6:	f280 810b 	bge.w	80160d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015eba:	2c00      	cmp	r4, #0
 8015ebc:	f2c0 8108 	blt.w	80160d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015ec0:	1e77      	subs	r7, r6, #1
 8015ec2:	42bc      	cmp	r4, r7
 8015ec4:	f280 8104 	bge.w	80160d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8015ec8:	b21b      	sxth	r3, r3
 8015eca:	fb04 0003 	mla	r0, r4, r3, r0
 8015ece:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ed0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015ed4:	1826      	adds	r6, r4, r0
 8015ed6:	5c24      	ldrb	r4, [r4, r0]
 8015ed8:	78b7      	ldrb	r7, [r6, #2]
 8015eda:	7870      	ldrb	r0, [r6, #1]
 8015edc:	970f      	str	r7, [sp, #60]	; 0x3c
 8015ede:	7977      	ldrb	r7, [r6, #5]
 8015ee0:	f896 e003 	ldrb.w	lr, [r6, #3]
 8015ee4:	f896 c004 	ldrb.w	ip, [r6, #4]
 8015ee8:	9710      	str	r7, [sp, #64]	; 0x40
 8015eea:	b1c9      	cbz	r1, 8015f20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8015eec:	f04f 0b03 	mov.w	fp, #3
 8015ef0:	f06f 0904 	mvn.w	r9, #4
 8015ef4:	3605      	adds	r6, #5
 8015ef6:	fb13 930b 	smlabb	r3, r3, fp, r9
 8015efa:	eb06 0b03 	add.w	fp, r6, r3
 8015efe:	5cf3      	ldrb	r3, [r6, r3]
 8015f00:	9311      	str	r3, [sp, #68]	; 0x44
 8015f02:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015f06:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f08:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8015f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8015f0e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8015f12:	9312      	str	r3, [sp, #72]	; 0x48
 8015f14:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8015f18:	9314      	str	r3, [sp, #80]	; 0x50
 8015f1a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8015f1e:	9316      	str	r3, [sp, #88]	; 0x58
 8015f20:	b292      	uxth	r2, r2
 8015f22:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015f24:	b289      	uxth	r1, r1
 8015f26:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8015f2a:	fb02 f601 	mul.w	r6, r2, r1
 8015f2e:	0112      	lsls	r2, r2, #4
 8015f30:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8015f34:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8015f38:	1b92      	subs	r2, r2, r6
 8015f3a:	b289      	uxth	r1, r1
 8015f3c:	b292      	uxth	r2, r2
 8015f3e:	eba9 0901 	sub.w	r9, r9, r1
 8015f42:	fb02 fe0e 	mul.w	lr, r2, lr
 8015f46:	fa1f f989 	uxth.w	r9, r9
 8015f4a:	fb02 fc0c 	mul.w	ip, r2, ip
 8015f4e:	fb09 e404 	mla	r4, r9, r4, lr
 8015f52:	f895 e000 	ldrb.w	lr, [r5]
 8015f56:	fb09 c000 	mla	r0, r9, r0, ip
 8015f5a:	fb01 4407 	mla	r4, r1, r7, r4
 8015f5e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015f60:	fb06 4407 	mla	r4, r6, r7, r4
 8015f64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015f66:	fb1e fe07 	smulbb	lr, lr, r7
 8015f6a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8015f6e:	fb04 e403 	mla	r4, r4, r3, lr
 8015f72:	b2a4      	uxth	r4, r4
 8015f74:	f104 0e01 	add.w	lr, r4, #1
 8015f78:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8015f7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015f7e:	fb01 0004 	mla	r0, r1, r4, r0
 8015f82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015f84:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015f88:	fb06 0004 	mla	r0, r6, r4, r0
 8015f8c:	786c      	ldrb	r4, [r5, #1]
 8015f8e:	f885 e000 	strb.w	lr, [r5]
 8015f92:	fb14 f407 	smulbb	r4, r4, r7
 8015f96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015f9a:	fb00 4003 	mla	r0, r0, r3, r4
 8015f9e:	b280      	uxth	r0, r0
 8015fa0:	1c44      	adds	r4, r0, #1
 8015fa2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8015fa6:	1200      	asrs	r0, r0, #8
 8015fa8:	7068      	strb	r0, [r5, #1]
 8015faa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015fac:	4342      	muls	r2, r0
 8015fae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015fb0:	fb09 2200 	mla	r2, r9, r0, r2
 8015fb4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015fb6:	fb01 2100 	mla	r1, r1, r0, r2
 8015fba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fbc:	fb06 1602 	mla	r6, r6, r2, r1
 8015fc0:	78a9      	ldrb	r1, [r5, #2]
 8015fc2:	fb11 f107 	smulbb	r1, r1, r7
 8015fc6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015fca:	fb06 1303 	mla	r3, r6, r3, r1
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	1c5e      	adds	r6, r3, #1
 8015fd2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8015fd6:	121b      	asrs	r3, r3, #8
 8015fd8:	70ab      	strb	r3, [r5, #2]
 8015fda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015fdc:	3503      	adds	r5, #3
 8015fde:	449a      	add	sl, r3
 8015fe0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015fe2:	4498      	add	r8, r3
 8015fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8015fea:	e750      	b.n	8015e8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015fec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8015fee:	449a      	add	sl, r3
 8015ff0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015ff2:	4498      	add	r8, r3
 8015ff4:	9b07      	ldr	r3, [sp, #28]
 8015ff6:	3b01      	subs	r3, #1
 8015ff8:	9307      	str	r3, [sp, #28]
 8015ffa:	9b08      	ldr	r3, [sp, #32]
 8015ffc:	3303      	adds	r3, #3
 8015ffe:	9308      	str	r3, [sp, #32]
 8016000:	e726      	b.n	8015e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8016002:	d026      	beq.n	8016052 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8016004:	9b07      	ldr	r3, [sp, #28]
 8016006:	982b      	ldr	r0, [sp, #172]	; 0xac
 8016008:	3b01      	subs	r3, #1
 801600a:	fb00 a003 	mla	r0, r0, r3, sl
 801600e:	1400      	asrs	r0, r0, #16
 8016010:	f53f af3a 	bmi.w	8015e88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016014:	3901      	subs	r1, #1
 8016016:	4288      	cmp	r0, r1
 8016018:	f6bf af36 	bge.w	8015e88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801601c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801601e:	fb01 8303 	mla	r3, r1, r3, r8
 8016022:	141b      	asrs	r3, r3, #16
 8016024:	f53f af30 	bmi.w	8015e88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016028:	3a01      	subs	r2, #1
 801602a:	4293      	cmp	r3, r2
 801602c:	f6bf af2c 	bge.w	8015e88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016030:	9b08      	ldr	r3, [sp, #32]
 8016032:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016036:	1cdd      	adds	r5, r3, #3
 8016038:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801603c:	f1bc 0f00 	cmp.w	ip, #0
 8016040:	dc5f      	bgt.n	8016102 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8016042:	9b07      	ldr	r3, [sp, #28]
 8016044:	9a08      	ldr	r2, [sp, #32]
 8016046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801604a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801604e:	441a      	add	r2, r3
 8016050:	9208      	str	r2, [sp, #32]
 8016052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016054:	2b00      	cmp	r3, #0
 8016056:	f340 80e9 	ble.w	801622c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801605a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801605e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016060:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016064:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016068:	eef0 6a62 	vmov.f32	s13, s5
 801606c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016070:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016078:	ee16 aa90 	vmov	sl, s13
 801607c:	eef0 6a43 	vmov.f32	s13, s6
 8016080:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016084:	ee16 8a90 	vmov	r8, s13
 8016088:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801608c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016090:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016094:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016098:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801609c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160a0:	ee12 2a90 	vmov	r2, s5
 80160a4:	eef0 2a47 	vmov.f32	s5, s14
 80160a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80160ac:	ee13 2a10 	vmov	r2, s6
 80160b0:	932b      	str	r3, [sp, #172]	; 0xac
 80160b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80160b4:	eeb0 3a67 	vmov.f32	s6, s15
 80160b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80160bc:	932c      	str	r3, [sp, #176]	; 0xb0
 80160be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160c2:	3b01      	subs	r3, #1
 80160c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80160c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80160c8:	bf08      	it	eq
 80160ca:	4613      	moveq	r3, r2
 80160cc:	9307      	str	r3, [sp, #28]
 80160ce:	e6b1      	b.n	8015e34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80160d0:	1c47      	adds	r7, r0, #1
 80160d2:	d482      	bmi.n	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80160d4:	42bb      	cmp	r3, r7
 80160d6:	db80      	blt.n	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80160d8:	1c67      	adds	r7, r4, #1
 80160da:	f53f af7e 	bmi.w	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80160de:	42be      	cmp	r6, r7
 80160e0:	f6ff af7b 	blt.w	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80160e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80160e6:	b236      	sxth	r6, r6
 80160e8:	9001      	str	r0, [sp, #4]
 80160ea:	b21b      	sxth	r3, r3
 80160ec:	9600      	str	r6, [sp, #0]
 80160ee:	981d      	ldr	r0, [sp, #116]	; 0x74
 80160f0:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80160f4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80160f8:	4629      	mov	r1, r5
 80160fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160fc:	f7ff fd82 	bl	8015c04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8016100:	e76b      	b.n	8015fda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8016102:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016104:	ea4f 402a 	mov.w	r0, sl, asr #16
 8016108:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801610c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8016110:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8016114:	ea4f 4128 	mov.w	r1, r8, asr #16
 8016118:	fb07 0101 	mla	r1, r7, r1, r0
 801611c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801611e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016122:	1844      	adds	r4, r0, r1
 8016124:	5c40      	ldrb	r0, [r0, r1]
 8016126:	78a6      	ldrb	r6, [r4, #2]
 8016128:	7861      	ldrb	r1, [r4, #1]
 801612a:	960f      	str	r6, [sp, #60]	; 0x3c
 801612c:	78e6      	ldrb	r6, [r4, #3]
 801612e:	910d      	str	r1, [sp, #52]	; 0x34
 8016130:	9610      	str	r6, [sp, #64]	; 0x40
 8016132:	f894 9004 	ldrb.w	r9, [r4, #4]
 8016136:	f894 b005 	ldrb.w	fp, [r4, #5]
 801613a:	b192      	cbz	r2, 8016162 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801613c:	f06f 0604 	mvn.w	r6, #4
 8016140:	2103      	movs	r1, #3
 8016142:	3405      	adds	r4, #5
 8016144:	fb17 6701 	smlabb	r7, r7, r1, r6
 8016148:	19e6      	adds	r6, r4, r7
 801614a:	5de4      	ldrb	r4, [r4, r7]
 801614c:	9417      	str	r4, [sp, #92]	; 0x5c
 801614e:	7874      	ldrb	r4, [r6, #1]
 8016150:	9419      	str	r4, [sp, #100]	; 0x64
 8016152:	78b4      	ldrb	r4, [r6, #2]
 8016154:	941b      	str	r4, [sp, #108]	; 0x6c
 8016156:	78f4      	ldrb	r4, [r6, #3]
 8016158:	9418      	str	r4, [sp, #96]	; 0x60
 801615a:	7934      	ldrb	r4, [r6, #4]
 801615c:	941a      	str	r4, [sp, #104]	; 0x68
 801615e:	7974      	ldrb	r4, [r6, #5]
 8016160:	941c      	str	r4, [sp, #112]	; 0x70
 8016162:	b29b      	uxth	r3, r3
 8016164:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016166:	b292      	uxth	r2, r2
 8016168:	9909      	ldr	r1, [sp, #36]	; 0x24
 801616a:	3503      	adds	r5, #3
 801616c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016170:	fb03 f402 	mul.w	r4, r3, r2
 8016174:	011b      	lsls	r3, r3, #4
 8016176:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801617a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801617e:	1b1b      	subs	r3, r3, r4
 8016180:	b292      	uxth	r2, r2
 8016182:	b29b      	uxth	r3, r3
 8016184:	1ab6      	subs	r6, r6, r2
 8016186:	435f      	muls	r7, r3
 8016188:	b2b6      	uxth	r6, r6
 801618a:	fb03 f909 	mul.w	r9, r3, r9
 801618e:	fb03 fb0b 	mul.w	fp, r3, fp
 8016192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016194:	fb06 7000 	mla	r0, r6, r0, r7
 8016198:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801619a:	fb06 bb03 	mla	fp, r6, r3, fp
 801619e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161a0:	fb02 0007 	mla	r0, r2, r7, r0
 80161a4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80161a6:	fb02 bb03 	mla	fp, r2, r3, fp
 80161aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161ac:	fb04 0007 	mla	r0, r4, r7, r0
 80161b0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80161b4:	fb17 f701 	smulbb	r7, r7, r1
 80161b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80161bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80161be:	fb00 700e 	mla	r0, r0, lr, r7
 80161c2:	fb06 9101 	mla	r1, r6, r1, r9
 80161c6:	b280      	uxth	r0, r0
 80161c8:	1c47      	adds	r7, r0, #1
 80161ca:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80161ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80161d0:	1200      	asrs	r0, r0, #8
 80161d2:	f805 0c06 	strb.w	r0, [r5, #-6]
 80161d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80161d8:	fb02 1100 	mla	r1, r2, r0, r1
 80161dc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80161de:	fb04 1100 	mla	r1, r4, r0, r1
 80161e2:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80161e6:	fb04 b403 	mla	r4, r4, r3, fp
 80161ea:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80161ee:	fb10 f007 	smulbb	r0, r0, r7
 80161f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80161f6:	fb13 f307 	smulbb	r3, r3, r7
 80161fa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80161fe:	fb01 010e 	mla	r1, r1, lr, r0
 8016202:	fb04 340e 	mla	r4, r4, lr, r3
 8016206:	b289      	uxth	r1, r1
 8016208:	b2a4      	uxth	r4, r4
 801620a:	1c48      	adds	r0, r1, #1
 801620c:	1c63      	adds	r3, r4, #1
 801620e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8016212:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8016216:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016218:	1209      	asrs	r1, r1, #8
 801621a:	1224      	asrs	r4, r4, #8
 801621c:	449a      	add	sl, r3
 801621e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016220:	f805 1c05 	strb.w	r1, [r5, #-5]
 8016224:	f805 4c04 	strb.w	r4, [r5, #-4]
 8016228:	4498      	add	r8, r3
 801622a:	e707      	b.n	801603c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801622c:	b01f      	add	sp, #124	; 0x7c
 801622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016232 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8016232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016236:	b087      	sub	sp, #28
 8016238:	780d      	ldrb	r5, [r1, #0]
 801623a:	784c      	ldrb	r4, [r1, #1]
 801623c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8016240:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8016244:	9004      	str	r0, [sp, #16]
 8016246:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801624a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801624e:	9005      	str	r0, [sp, #20]
 8016250:	fb06 bc03 	mla	ip, r6, r3, fp
 8016254:	2e00      	cmp	r6, #0
 8016256:	7888      	ldrb	r0, [r1, #2]
 8016258:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801625c:	eb02 090c 	add.w	r9, r2, ip
 8016260:	f2c0 8084 	blt.w	801636c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8016264:	42b7      	cmp	r7, r6
 8016266:	f340 8081 	ble.w	801636c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801626a:	f1bb 0f00 	cmp.w	fp, #0
 801626e:	db79      	blt.n	8016364 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8016270:	455b      	cmp	r3, fp
 8016272:	dd77      	ble.n	8016364 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8016274:	f812 200c 	ldrb.w	r2, [r2, ip]
 8016278:	9201      	str	r2, [sp, #4]
 801627a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801627e:	9202      	str	r2, [sp, #8]
 8016280:	f899 2002 	ldrb.w	r2, [r9, #2]
 8016284:	9203      	str	r2, [sp, #12]
 8016286:	f11b 0201 	adds.w	r2, fp, #1
 801628a:	d476      	bmi.n	801637a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801628c:	4293      	cmp	r3, r2
 801628e:	dd74      	ble.n	801637a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8016290:	9a04      	ldr	r2, [sp, #16]
 8016292:	2a00      	cmp	r2, #0
 8016294:	d071      	beq.n	801637a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8016296:	f899 8003 	ldrb.w	r8, [r9, #3]
 801629a:	f899 c004 	ldrb.w	ip, [r9, #4]
 801629e:	f899 a005 	ldrb.w	sl, [r9, #5]
 80162a2:	3601      	adds	r6, #1
 80162a4:	d471      	bmi.n	801638a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80162a6:	42b7      	cmp	r7, r6
 80162a8:	dd6f      	ble.n	801638a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80162aa:	9a05      	ldr	r2, [sp, #20]
 80162ac:	2a00      	cmp	r2, #0
 80162ae:	d06c      	beq.n	801638a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80162b0:	f1bb 0f00 	cmp.w	fp, #0
 80162b4:	db65      	blt.n	8016382 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80162b6:	455b      	cmp	r3, fp
 80162b8:	dd63      	ble.n	8016382 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80162ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80162be:	f819 e002 	ldrb.w	lr, [r9, r2]
 80162c2:	2203      	movs	r2, #3
 80162c4:	fb03 9602 	mla	r6, r3, r2, r9
 80162c8:	7877      	ldrb	r7, [r6, #1]
 80162ca:	78b6      	ldrb	r6, [r6, #2]
 80162cc:	f11b 0b01 	adds.w	fp, fp, #1
 80162d0:	d40c      	bmi.n	80162ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80162d2:	455b      	cmp	r3, fp
 80162d4:	dd0a      	ble.n	80162ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80162d6:	9a04      	ldr	r2, [sp, #16]
 80162d8:	b142      	cbz	r2, 80162ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80162da:	2203      	movs	r2, #3
 80162dc:	fb13 2002 	smlabb	r0, r3, r2, r2
 80162e0:	f819 5000 	ldrb.w	r5, [r9, r0]
 80162e4:	fb03 9002 	mla	r0, r3, r2, r9
 80162e8:	7904      	ldrb	r4, [r0, #4]
 80162ea:	7940      	ldrb	r0, [r0, #5]
 80162ec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80162f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80162f4:	fb03 fb02 	mul.w	fp, r3, r2
 80162f8:	011b      	lsls	r3, r3, #4
 80162fa:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80162fe:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8016302:	eba3 030b 	sub.w	r3, r3, fp
 8016306:	b292      	uxth	r2, r2
 8016308:	b29b      	uxth	r3, r3
 801630a:	eba9 0902 	sub.w	r9, r9, r2
 801630e:	9304      	str	r3, [sp, #16]
 8016310:	fa1f f989 	uxth.w	r9, r9
 8016314:	fb03 f808 	mul.w	r8, r3, r8
 8016318:	9b01      	ldr	r3, [sp, #4]
 801631a:	fb09 8803 	mla	r8, r9, r3, r8
 801631e:	9b04      	ldr	r3, [sp, #16]
 8016320:	fb03 fc0c 	mul.w	ip, r3, ip
 8016324:	9b02      	ldr	r3, [sp, #8]
 8016326:	fb02 880e 	mla	r8, r2, lr, r8
 801632a:	fb09 cc03 	mla	ip, r9, r3, ip
 801632e:	9b04      	ldr	r3, [sp, #16]
 8016330:	fb0b 8805 	mla	r8, fp, r5, r8
 8016334:	fb02 c707 	mla	r7, r2, r7, ip
 8016338:	fb03 f30a 	mul.w	r3, r3, sl
 801633c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016340:	fb0b 7404 	mla	r4, fp, r4, r7
 8016344:	f881 8000 	strb.w	r8, [r1]
 8016348:	1224      	asrs	r4, r4, #8
 801634a:	704c      	strb	r4, [r1, #1]
 801634c:	9c03      	ldr	r4, [sp, #12]
 801634e:	fb09 3904 	mla	r9, r9, r4, r3
 8016352:	fb02 9206 	mla	r2, r2, r6, r9
 8016356:	fb0b 2000 	mla	r0, fp, r0, r2
 801635a:	1200      	asrs	r0, r0, #8
 801635c:	7088      	strb	r0, [r1, #2]
 801635e:	b007      	add	sp, #28
 8016360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016364:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8016368:	9501      	str	r5, [sp, #4]
 801636a:	e78c      	b.n	8016286 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801636c:	4682      	mov	sl, r0
 801636e:	46a4      	mov	ip, r4
 8016370:	46a8      	mov	r8, r5
 8016372:	9501      	str	r5, [sp, #4]
 8016374:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8016378:	e793      	b.n	80162a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801637a:	4682      	mov	sl, r0
 801637c:	46a4      	mov	ip, r4
 801637e:	46a8      	mov	r8, r5
 8016380:	e78f      	b.n	80162a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8016382:	4606      	mov	r6, r0
 8016384:	4627      	mov	r7, r4
 8016386:	46ae      	mov	lr, r5
 8016388:	e7a0      	b.n	80162cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801638a:	4606      	mov	r6, r0
 801638c:	4627      	mov	r7, r4
 801638e:	46ae      	mov	lr, r5
 8016390:	e7ac      	b.n	80162ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08016392 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016396:	b09b      	sub	sp, #108	; 0x6c
 8016398:	920b      	str	r2, [sp, #44]	; 0x2c
 801639a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801639c:	9019      	str	r0, [sp, #100]	; 0x64
 801639e:	9109      	str	r1, [sp, #36]	; 0x24
 80163a0:	6850      	ldr	r0, [r2, #4]
 80163a2:	9306      	str	r3, [sp, #24]
 80163a4:	6812      	ldr	r2, [r2, #0]
 80163a6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80163aa:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80163ae:	fb00 1303 	mla	r3, r0, r3, r1
 80163b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163b6:	18d3      	adds	r3, r2, r3
 80163b8:	9307      	str	r3, [sp, #28]
 80163ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	9308      	str	r3, [sp, #32]
 80163c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	dc03      	bgt.n	80163ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80163c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	f340 81ab 	ble.w	8016724 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80163ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80163d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80163d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80163d8:	1e48      	subs	r0, r1, #1
 80163da:	1e55      	subs	r5, r2, #1
 80163dc:	9b06      	ldr	r3, [sp, #24]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	f340 80b1 	ble.w	8016546 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80163e4:	ea5f 462b 	movs.w	r6, fp, asr #16
 80163e8:	ea4f 4324 	mov.w	r3, r4, asr #16
 80163ec:	d406      	bmi.n	80163fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80163ee:	4286      	cmp	r6, r0
 80163f0:	da04      	bge.n	80163fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	db02      	blt.n	80163fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80163f6:	42ab      	cmp	r3, r5
 80163f8:	f2c0 80a6 	blt.w	8016548 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80163fc:	3601      	adds	r6, #1
 80163fe:	f100 8097 	bmi.w	8016530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8016402:	42b1      	cmp	r1, r6
 8016404:	f2c0 8094 	blt.w	8016530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8016408:	3301      	adds	r3, #1
 801640a:	f100 8091 	bmi.w	8016530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801640e:	429a      	cmp	r2, r3
 8016410:	f2c0 808e 	blt.w	8016530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8016414:	9b06      	ldr	r3, [sp, #24]
 8016416:	9e07      	ldr	r6, [sp, #28]
 8016418:	930a      	str	r3, [sp, #40]	; 0x28
 801641a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641c:	2b00      	cmp	r3, #0
 801641e:	f340 80b0 	ble.w	8016582 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8016422:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016424:	1425      	asrs	r5, r4, #16
 8016426:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016428:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801642c:	68c7      	ldr	r7, [r0, #12]
 801642e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8016432:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	f100 80ea 	bmi.w	8016610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801643c:	f103 3cff 	add.w	ip, r3, #4294967295
 8016440:	4560      	cmp	r0, ip
 8016442:	f280 80e5 	bge.w	8016610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016446:	2d00      	cmp	r5, #0
 8016448:	f2c0 80e2 	blt.w	8016610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801644c:	f107 3cff 	add.w	ip, r7, #4294967295
 8016450:	4565      	cmp	r5, ip
 8016452:	f280 80dd 	bge.w	8016610 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016456:	b21b      	sxth	r3, r3
 8016458:	fb05 0003 	mla	r0, r5, r3, r0
 801645c:	9d08      	ldr	r5, [sp, #32]
 801645e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016462:	182f      	adds	r7, r5, r0
 8016464:	5c2d      	ldrb	r5, [r5, r0]
 8016466:	7878      	ldrb	r0, [r7, #1]
 8016468:	f897 e002 	ldrb.w	lr, [r7, #2]
 801646c:	900c      	str	r0, [sp, #48]	; 0x30
 801646e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8016472:	f897 8004 	ldrb.w	r8, [r7, #4]
 8016476:	f897 a005 	ldrb.w	sl, [r7, #5]
 801647a:	b1c9      	cbz	r1, 80164b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801647c:	f04f 0c03 	mov.w	ip, #3
 8016480:	f06f 0004 	mvn.w	r0, #4
 8016484:	3705      	adds	r7, #5
 8016486:	fb13 030c 	smlabb	r3, r3, ip, r0
 801648a:	eb07 0c03 	add.w	ip, r7, r3
 801648e:	5cfb      	ldrb	r3, [r7, r3]
 8016490:	930d      	str	r3, [sp, #52]	; 0x34
 8016492:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016496:	930f      	str	r3, [sp, #60]	; 0x3c
 8016498:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801649c:	9311      	str	r3, [sp, #68]	; 0x44
 801649e:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80164a2:	930e      	str	r3, [sp, #56]	; 0x38
 80164a4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80164a8:	9310      	str	r3, [sp, #64]	; 0x40
 80164aa:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80164ae:	9312      	str	r3, [sp, #72]	; 0x48
 80164b0:	b292      	uxth	r2, r2
 80164b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80164b4:	b289      	uxth	r1, r1
 80164b6:	fb02 f301 	mul.w	r3, r2, r1
 80164ba:	0112      	lsls	r2, r2, #4
 80164bc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80164c0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80164c4:	1ad2      	subs	r2, r2, r3
 80164c6:	b289      	uxth	r1, r1
 80164c8:	b292      	uxth	r2, r2
 80164ca:	1a7f      	subs	r7, r7, r1
 80164cc:	fb02 f909 	mul.w	r9, r2, r9
 80164d0:	b2bf      	uxth	r7, r7
 80164d2:	fb02 f808 	mul.w	r8, r2, r8
 80164d6:	fb02 fa0a 	mul.w	sl, r2, sl
 80164da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80164dc:	fb07 9905 	mla	r9, r7, r5, r9
 80164e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80164e2:	fb07 8800 	mla	r8, r7, r0, r8
 80164e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80164e8:	fb07 aa0e 	mla	sl, r7, lr, sl
 80164ec:	fb01 9905 	mla	r9, r1, r5, r9
 80164f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80164f2:	fb01 8800 	mla	r8, r1, r0, r8
 80164f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80164f8:	fb01 a102 	mla	r1, r1, r2, sl
 80164fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164fe:	fb03 9905 	mla	r9, r3, r5, r9
 8016502:	fb03 8800 	mla	r8, r3, r0, r8
 8016506:	fb03 1302 	mla	r3, r3, r2, r1
 801650a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801650e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016512:	121b      	asrs	r3, r3, #8
 8016514:	f886 9000 	strb.w	r9, [r6]
 8016518:	f886 8001 	strb.w	r8, [r6, #1]
 801651c:	70b3      	strb	r3, [r6, #2]
 801651e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016520:	3603      	adds	r6, #3
 8016522:	449b      	add	fp, r3
 8016524:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016526:	441c      	add	r4, r3
 8016528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801652a:	3b01      	subs	r3, #1
 801652c:	930a      	str	r3, [sp, #40]	; 0x28
 801652e:	e774      	b.n	801641a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8016530:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016532:	449b      	add	fp, r3
 8016534:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016536:	441c      	add	r4, r3
 8016538:	9b06      	ldr	r3, [sp, #24]
 801653a:	3b01      	subs	r3, #1
 801653c:	9306      	str	r3, [sp, #24]
 801653e:	9b07      	ldr	r3, [sp, #28]
 8016540:	3303      	adds	r3, #3
 8016542:	9307      	str	r3, [sp, #28]
 8016544:	e74a      	b.n	80163dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016546:	d024      	beq.n	8016592 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8016548:	9b06      	ldr	r3, [sp, #24]
 801654a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801654c:	3b01      	subs	r3, #1
 801654e:	fb00 b003 	mla	r0, r0, r3, fp
 8016552:	1400      	asrs	r0, r0, #16
 8016554:	f53f af5e 	bmi.w	8016414 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016558:	3901      	subs	r1, #1
 801655a:	4288      	cmp	r0, r1
 801655c:	f6bf af5a 	bge.w	8016414 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016560:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016562:	fb01 4303 	mla	r3, r1, r3, r4
 8016566:	141b      	asrs	r3, r3, #16
 8016568:	f53f af54 	bmi.w	8016414 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801656c:	3a01      	subs	r2, #1
 801656e:	4293      	cmp	r3, r2
 8016570:	f6bf af50 	bge.w	8016414 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016574:	9b07      	ldr	r3, [sp, #28]
 8016576:	f8dd e018 	ldr.w	lr, [sp, #24]
 801657a:	1cde      	adds	r6, r3, #3
 801657c:	f1be 0f00 	cmp.w	lr, #0
 8016580:	dc5f      	bgt.n	8016642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016582:	9b06      	ldr	r3, [sp, #24]
 8016584:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016588:	9b07      	ldr	r3, [sp, #28]
 801658a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801658e:	4423      	add	r3, r4
 8016590:	9307      	str	r3, [sp, #28]
 8016592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016594:	2b00      	cmp	r3, #0
 8016596:	f340 80c5 	ble.w	8016724 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801659a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801659e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80165a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80165a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80165a8:	eef0 6a62 	vmov.f32	s13, s5
 80165ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80165b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165b8:	ee16 ba90 	vmov	fp, s13
 80165bc:	eef0 6a43 	vmov.f32	s13, s6
 80165c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165c4:	ee16 4a90 	vmov	r4, s13
 80165c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80165cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80165d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80165d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80165d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80165dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80165e0:	ee12 2a90 	vmov	r2, s5
 80165e4:	eef0 2a47 	vmov.f32	s5, s14
 80165e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80165ec:	ee13 2a10 	vmov	r2, s6
 80165f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80165f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80165f4:	eeb0 3a67 	vmov.f32	s6, s15
 80165f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80165fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80165fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016602:	3b01      	subs	r3, #1
 8016604:	9309      	str	r3, [sp, #36]	; 0x24
 8016606:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016608:	bf08      	it	eq
 801660a:	4613      	moveq	r3, r2
 801660c:	9306      	str	r3, [sp, #24]
 801660e:	e6d7      	b.n	80163c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016610:	f110 0c01 	adds.w	ip, r0, #1
 8016614:	d483      	bmi.n	801651e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8016616:	4563      	cmp	r3, ip
 8016618:	db81      	blt.n	801651e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801661a:	f115 0c01 	adds.w	ip, r5, #1
 801661e:	f53f af7e 	bmi.w	801651e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8016622:	4567      	cmp	r7, ip
 8016624:	f6ff af7b 	blt.w	801651e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8016628:	b23f      	sxth	r7, r7
 801662a:	b21b      	sxth	r3, r3
 801662c:	9700      	str	r7, [sp, #0]
 801662e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8016632:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8016636:	9a08      	ldr	r2, [sp, #32]
 8016638:	4631      	mov	r1, r6
 801663a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801663c:	f7ff fdf9 	bl	8016232 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8016640:	e76d      	b.n	801651e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8016642:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8016644:	ea4f 402b 	mov.w	r0, fp, asr #16
 8016648:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801664c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8016650:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8016654:	1421      	asrs	r1, r4, #16
 8016656:	930a      	str	r3, [sp, #40]	; 0x28
 8016658:	fb0c 0101 	mla	r1, ip, r1, r0
 801665c:	9808      	ldr	r0, [sp, #32]
 801665e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016662:	1845      	adds	r5, r0, r1
 8016664:	5c40      	ldrb	r0, [r0, r1]
 8016666:	796f      	ldrb	r7, [r5, #5]
 8016668:	7869      	ldrb	r1, [r5, #1]
 801666a:	f895 8002 	ldrb.w	r8, [r5, #2]
 801666e:	f895 a003 	ldrb.w	sl, [r5, #3]
 8016672:	f895 9004 	ldrb.w	r9, [r5, #4]
 8016676:	970c      	str	r7, [sp, #48]	; 0x30
 8016678:	b1a2      	cbz	r2, 80166a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801667a:	2703      	movs	r7, #3
 801667c:	f06f 0304 	mvn.w	r3, #4
 8016680:	3505      	adds	r5, #5
 8016682:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8016686:	eb05 070c 	add.w	r7, r5, ip
 801668a:	f815 500c 	ldrb.w	r5, [r5, ip]
 801668e:	9513      	str	r5, [sp, #76]	; 0x4c
 8016690:	787d      	ldrb	r5, [r7, #1]
 8016692:	9515      	str	r5, [sp, #84]	; 0x54
 8016694:	78bd      	ldrb	r5, [r7, #2]
 8016696:	9517      	str	r5, [sp, #92]	; 0x5c
 8016698:	78fd      	ldrb	r5, [r7, #3]
 801669a:	9514      	str	r5, [sp, #80]	; 0x50
 801669c:	793d      	ldrb	r5, [r7, #4]
 801669e:	9516      	str	r5, [sp, #88]	; 0x58
 80166a0:	797d      	ldrb	r5, [r7, #5]
 80166a2:	9518      	str	r5, [sp, #96]	; 0x60
 80166a4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80166a8:	b292      	uxth	r2, r2
 80166aa:	3603      	adds	r6, #3
 80166ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80166b0:	fb03 f502 	mul.w	r5, r3, r2
 80166b4:	011b      	lsls	r3, r3, #4
 80166b6:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80166ba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80166be:	1b5b      	subs	r3, r3, r5
 80166c0:	b292      	uxth	r2, r2
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	1abf      	subs	r7, r7, r2
 80166c6:	fb03 f909 	mul.w	r9, r3, r9
 80166ca:	b2bf      	uxth	r7, r7
 80166cc:	fb03 fa0a 	mul.w	sl, r3, sl
 80166d0:	fb07 9901 	mla	r9, r7, r1, r9
 80166d4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80166d6:	fb07 aa00 	mla	sl, r7, r0, sl
 80166da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80166dc:	fb02 9901 	mla	r9, r2, r1, r9
 80166e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80166e2:	fb02 aa00 	mla	sl, r2, r0, sl
 80166e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80166e8:	fb05 9901 	mla	r9, r5, r1, r9
 80166ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166ee:	fb05 aa00 	mla	sl, r5, r0, sl
 80166f2:	434b      	muls	r3, r1
 80166f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80166f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80166fa:	fb07 3308 	mla	r3, r7, r8, r3
 80166fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016702:	f806 ac06 	strb.w	sl, [r6, #-6]
 8016706:	fb02 3201 	mla	r2, r2, r1, r3
 801670a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801670c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8016710:	fb05 2503 	mla	r5, r5, r3, r2
 8016714:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016716:	122d      	asrs	r5, r5, #8
 8016718:	449b      	add	fp, r3
 801671a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801671c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016720:	441c      	add	r4, r3
 8016722:	e72b      	b.n	801657c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016724:	b01b      	add	sp, #108	; 0x6c
 8016726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801672a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801672a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672e:	b087      	sub	sp, #28
 8016730:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8016734:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8016738:	fb05 7003 	mla	r0, r5, r3, r7
 801673c:	2d00      	cmp	r5, #0
 801673e:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016742:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8016746:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801674a:	f2c0 811f 	blt.w	801698c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801674e:	45a8      	cmp	r8, r5
 8016750:	f340 811c 	ble.w	801698c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8016754:	2f00      	cmp	r7, #0
 8016756:	f2c0 8117 	blt.w	8016988 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801675a:	42bb      	cmp	r3, r7
 801675c:	f340 8114 	ble.w	8016988 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8016760:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8016764:	1c7a      	adds	r2, r7, #1
 8016766:	f100 8114 	bmi.w	8016992 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801676a:	4293      	cmp	r3, r2
 801676c:	f340 8111 	ble.w	8016992 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8016770:	2c00      	cmp	r4, #0
 8016772:	f000 8110 	beq.w	8016996 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8016776:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801677a:	3501      	adds	r5, #1
 801677c:	f100 810f 	bmi.w	801699e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8016780:	45a8      	cmp	r8, r5
 8016782:	f340 810c 	ble.w	801699e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8016786:	f1be 0f00 	cmp.w	lr, #0
 801678a:	f000 810b 	beq.w	80169a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801678e:	2f00      	cmp	r7, #0
 8016790:	f2c0 8103 	blt.w	801699a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8016794:	42bb      	cmp	r3, r7
 8016796:	f340 8100 	ble.w	801699a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801679a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801679e:	3701      	adds	r7, #1
 80167a0:	f100 8103 	bmi.w	80169aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80167a4:	42bb      	cmp	r3, r7
 80167a6:	f340 8100 	ble.w	80169aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80167aa:	2c00      	cmp	r4, #0
 80167ac:	f000 80ff 	beq.w	80169ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80167b0:	3301      	adds	r3, #1
 80167b2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80167b6:	fa1f fc84 	uxth.w	ip, r4
 80167ba:	fa1f fe8e 	uxth.w	lr, lr
 80167be:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80167c2:	fb0c f90e 	mul.w	r9, ip, lr
 80167c6:	0e13      	lsrs	r3, r2, #24
 80167c8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80167cc:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80167d0:	9302      	str	r3, [sp, #8]
 80167d2:	ebac 0709 	sub.w	r7, ip, r9
 80167d6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80167da:	fa1f f48e 	uxth.w	r4, lr
 80167de:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80167e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80167e6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80167ea:	fb0a fe0e 	mul.w	lr, sl, lr
 80167ee:	1b1b      	subs	r3, r3, r4
 80167f0:	fb0a f606 	mul.w	r6, sl, r6
 80167f4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80167f8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80167fc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8016800:	b29b      	uxth	r3, r3
 8016802:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016806:	b2bf      	uxth	r7, r7
 8016808:	9301      	str	r3, [sp, #4]
 801680a:	44e6      	add	lr, ip
 801680c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8016810:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016814:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8016818:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801681c:	9303      	str	r3, [sp, #12]
 801681e:	0a33      	lsrs	r3, r6, #8
 8016820:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8016824:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016828:	9304      	str	r3, [sp, #16]
 801682a:	fb0b f606 	mul.w	r6, fp, r6
 801682e:	fb0b f000 	mul.w	r0, fp, r0
 8016832:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8016836:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801683a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801683e:	44b6      	add	lr, r6
 8016840:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8016844:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8016848:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801684c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8016850:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016854:	fb08 f606 	mul.w	r6, r8, r6
 8016858:	0a03      	lsrs	r3, r0, #8
 801685a:	fb08 f505 	mul.w	r5, r8, r5
 801685e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016862:	0a30      	lsrs	r0, r6, #8
 8016864:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8016868:	9305      	str	r3, [sp, #20]
 801686a:	0e13      	lsrs	r3, r2, #24
 801686c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016870:	fb0e fe07 	mul.w	lr, lr, r7
 8016874:	4430      	add	r0, r6
 8016876:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801687a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801687e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8016882:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016886:	0a00      	lsrs	r0, r0, #8
 8016888:	435e      	muls	r6, r3
 801688a:	0a2d      	lsrs	r5, r5, #8
 801688c:	435a      	muls	r2, r3
 801688e:	9b03      	ldr	r3, [sp, #12]
 8016890:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8016894:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8016898:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801689c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80168a0:	44b4      	add	ip, r6
 80168a2:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80168a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80168aa:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80168ae:	9e01      	ldr	r6, [sp, #4]
 80168b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80168b4:	fb03 ee06 	mla	lr, r3, r6, lr
 80168b8:	9b04      	ldr	r3, [sp, #16]
 80168ba:	0a12      	lsrs	r2, r2, #8
 80168bc:	fb0c ee09 	mla	lr, ip, r9, lr
 80168c0:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80168c4:	9b05      	ldr	r3, [sp, #20]
 80168c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80168ca:	fb00 ee04 	mla	lr, r0, r4, lr
 80168ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80168d2:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80168d6:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80168da:	9b01      	ldr	r3, [sp, #4]
 80168dc:	fb07 fe0e 	mul.w	lr, r7, lr
 80168e0:	fb07 f70b 	mul.w	r7, r7, fp
 80168e4:	fb03 ee06 	mla	lr, r3, r6, lr
 80168e8:	fb03 730a 	mla	r3, r3, sl, r7
 80168ec:	fb09 e202 	mla	r2, r9, r2, lr
 80168f0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80168f4:	fb04 2e0e 	mla	lr, r4, lr, r2
 80168f8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80168fc:	fb04 3408 	mla	r4, r4, r8, r3
 8016900:	9b02      	ldr	r3, [sp, #8]
 8016902:	b292      	uxth	r2, r2
 8016904:	fb09 4903 	mla	r9, r9, r3, r4
 8016908:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801690c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016910:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016914:	fb09 f902 	mul.w	r9, r9, r2
 8016918:	ea40 0e0e 	orr.w	lr, r0, lr
 801691c:	f109 0301 	add.w	r3, r9, #1
 8016920:	fa5f f08e 	uxtb.w	r0, lr
 8016924:	fb10 f002 	smulbb	r0, r0, r2
 8016928:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801692c:	780b      	ldrb	r3, [r1, #0]
 801692e:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8016932:	fa5f f989 	uxtb.w	r9, r9
 8016936:	fb03 0309 	mla	r3, r3, r9, r0
 801693a:	b29b      	uxth	r3, r3
 801693c:	1c58      	adds	r0, r3, #1
 801693e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8016942:	7848      	ldrb	r0, [r1, #1]
 8016944:	fb10 f009 	smulbb	r0, r0, r9
 8016948:	121b      	asrs	r3, r3, #8
 801694a:	700b      	strb	r3, [r1, #0]
 801694c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8016950:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8016954:	fb03 0302 	mla	r3, r3, r2, r0
 8016958:	b29b      	uxth	r3, r3
 801695a:	1c58      	adds	r0, r3, #1
 801695c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8016960:	121b      	asrs	r3, r3, #8
 8016962:	704b      	strb	r3, [r1, #1]
 8016964:	788b      	ldrb	r3, [r1, #2]
 8016966:	fb13 f909 	smulbb	r9, r3, r9
 801696a:	fb0e 9e02 	mla	lr, lr, r2, r9
 801696e:	fa1f fe8e 	uxth.w	lr, lr
 8016972:	f10e 0301 	add.w	r3, lr, #1
 8016976:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801697a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801697e:	f881 e002 	strb.w	lr, [r1, #2]
 8016982:	b007      	add	sp, #28
 8016984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016988:	2600      	movs	r6, #0
 801698a:	e6eb      	b.n	8016764 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801698c:	2000      	movs	r0, #0
 801698e:	4606      	mov	r6, r0
 8016990:	e6f3      	b.n	801677a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8016992:	2000      	movs	r0, #0
 8016994:	e6f1      	b.n	801677a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8016996:	4620      	mov	r0, r4
 8016998:	e6ef      	b.n	801677a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801699a:	2500      	movs	r5, #0
 801699c:	e6ff      	b.n	801679e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801699e:	2200      	movs	r2, #0
 80169a0:	4615      	mov	r5, r2
 80169a2:	e708      	b.n	80167b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80169a4:	4672      	mov	r2, lr
 80169a6:	4675      	mov	r5, lr
 80169a8:	e705      	b.n	80167b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80169aa:	2200      	movs	r2, #0
 80169ac:	e703      	b.n	80167b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80169ae:	4622      	mov	r2, r4
 80169b0:	e701      	b.n	80167b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080169b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80169b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b6:	b09d      	sub	sp, #116	; 0x74
 80169b8:	9219      	str	r2, [sp, #100]	; 0x64
 80169ba:	9307      	str	r3, [sp, #28]
 80169bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80169be:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80169c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80169c4:	931a      	str	r3, [sp, #104]	; 0x68
 80169c6:	6850      	ldr	r0, [r2, #4]
 80169c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80169ca:	6812      	ldr	r2, [r2, #0]
 80169cc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80169d0:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80169d4:	fb00 1303 	mla	r3, r0, r3, r1
 80169d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80169dc:	18d3      	adds	r3, r2, r3
 80169de:	930a      	str	r3, [sp, #40]	; 0x28
 80169e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	9310      	str	r3, [sp, #64]	; 0x40
 80169e6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80169ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80169ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	dc03      	bgt.n	80169fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80169f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	f340 8368 	ble.w	80170ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80169fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169fc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016a00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016a04:	1e48      	subs	r0, r1, #1
 8016a06:	1e57      	subs	r7, r2, #1
 8016a08:	9b07      	ldr	r3, [sp, #28]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f340 8187 	ble.w	8016d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8016a10:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8016a14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016a18:	d406      	bmi.n	8016a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016a1a:	4584      	cmp	ip, r0
 8016a1c:	da04      	bge.n	8016a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	db02      	blt.n	8016a28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016a22:	42bb      	cmp	r3, r7
 8016a24:	f2c0 817c 	blt.w	8016d20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8016a28:	f11c 0c01 	adds.w	ip, ip, #1
 8016a2c:	f100 816c 	bmi.w	8016d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8016a30:	4561      	cmp	r1, ip
 8016a32:	f2c0 8169 	blt.w	8016d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8016a36:	3301      	adds	r3, #1
 8016a38:	f100 8166 	bmi.w	8016d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	f2c0 8163 	blt.w	8016d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8016a42:	9b07      	ldr	r3, [sp, #28]
 8016a44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016a46:	9318      	str	r3, [sp, #96]	; 0x60
 8016a48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f340 8186 	ble.w	8016d5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8016a50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016a52:	142a      	asrs	r2, r5, #16
 8016a54:	ea4f 4026 	mov.w	r0, r6, asr #16
 8016a58:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016a5c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8016a60:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8016a64:	f100 81cb 	bmi.w	8016dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8016a68:	f10e 38ff 	add.w	r8, lr, #4294967295
 8016a6c:	4542      	cmp	r2, r8
 8016a6e:	f280 81c6 	bge.w	8016dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	f2c0 81c3 	blt.w	8016dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8016a78:	f103 38ff 	add.w	r8, r3, #4294967295
 8016a7c:	4540      	cmp	r0, r8
 8016a7e:	f280 81be 	bge.w	8016dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8016a82:	fa0f f38e 	sxth.w	r3, lr
 8016a86:	fb00 2203 	mla	r2, r0, r3, r2
 8016a8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016a8c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8016a90:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8016a94:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8016a98:	2900      	cmp	r1, #0
 8016a9a:	f000 81a6 	beq.w	8016dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8016a9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016aa2:	900c      	str	r0, [sp, #48]	; 0x30
 8016aa4:	0e00      	lsrs	r0, r0, #24
 8016aa6:	9013      	str	r0, [sp, #76]	; 0x4c
 8016aa8:	f1bc 0f00 	cmp.w	ip, #0
 8016aac:	d00f      	beq.n	8016ace <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016ab2:	3b01      	subs	r3, #1
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	3304      	adds	r3, #4
 8016ab8:	eb08 0003 	add.w	r0, r8, r3
 8016abc:	f858 3003 	ldr.w	r3, [r8, r3]
 8016ac0:	9308      	str	r3, [sp, #32]
 8016ac2:	0e1b      	lsrs	r3, r3, #24
 8016ac4:	9311      	str	r3, [sp, #68]	; 0x44
 8016ac6:	6843      	ldr	r3, [r0, #4]
 8016ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8016aca:	0e1b      	lsrs	r3, r3, #24
 8016acc:	9314      	str	r3, [sp, #80]	; 0x50
 8016ace:	b289      	uxth	r1, r1
 8016ad0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016ad2:	fa1f fc8c 	uxth.w	ip, ip
 8016ad6:	0108      	lsls	r0, r1, #4
 8016ad8:	fb01 f90c 	mul.w	r9, r1, ip
 8016adc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8016ae0:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8016ae4:	eba0 0809 	sub.w	r8, r0, r9
 8016ae8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016aea:	fa1f f18c 	uxth.w	r1, ip
 8016aee:	fa1f f888 	uxth.w	r8, r8
 8016af2:	1a5b      	subs	r3, r3, r1
 8016af4:	fb08 f000 	mul.w	r0, r8, r0
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	fb03 000e 	mla	r0, r3, lr, r0
 8016afe:	fb01 0004 	mla	r0, r1, r4, r0
 8016b02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016b04:	fb09 0004 	mla	r0, r9, r4, r0
 8016b08:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	f000 80f2 	beq.w	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016b12:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016b16:	d01b      	beq.n	8016b50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8016b18:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8016b1c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016b20:	fb0e fa0a 	mul.w	sl, lr, sl
 8016b24:	fb0e fe02 	mul.w	lr, lr, r2
 8016b28:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8016b2c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016b30:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016b34:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016b38:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016b3c:	4452      	add	r2, sl
 8016b3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016b42:	0a12      	lsrs	r2, r2, #8
 8016b44:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016b48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016b4c:	ea42 020c 	orr.w	r2, r2, ip
 8016b50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016b52:	2cff      	cmp	r4, #255	; 0xff
 8016b54:	d021      	beq.n	8016b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016b56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016b58:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016b5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016b5e:	fb04 fb0b 	mul.w	fp, r4, fp
 8016b62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016b64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016b68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016b6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016b6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016b72:	fb04 fa0a 	mul.w	sl, r4, sl
 8016b76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b7a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016b7e:	44de      	add	lr, fp
 8016b80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016b84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016b8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016b90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016b94:	ea4e 040a 	orr.w	r4, lr, sl
 8016b98:	940c      	str	r4, [sp, #48]	; 0x30
 8016b9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016b9c:	2cff      	cmp	r4, #255	; 0xff
 8016b9e:	d021      	beq.n	8016be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8016ba0:	9c08      	ldr	r4, [sp, #32]
 8016ba2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016ba6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016ba8:	fb04 fb0b 	mul.w	fp, r4, fp
 8016bac:	9c08      	ldr	r4, [sp, #32]
 8016bae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016bb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016bb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016bb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016bbc:	fb04 fa0a 	mul.w	sl, r4, sl
 8016bc0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016bc4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016bc8:	44de      	add	lr, fp
 8016bca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016bce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016bd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016bd6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016bda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016bde:	ea4e 040a 	orr.w	r4, lr, sl
 8016be2:	9408      	str	r4, [sp, #32]
 8016be4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016be6:	2cff      	cmp	r4, #255	; 0xff
 8016be8:	d021      	beq.n	8016c2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016bea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016bec:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016bf0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016bf2:	fb04 fb0b 	mul.w	fp, r4, fp
 8016bf6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016bf8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016bfc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016bfe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016c02:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016c06:	fb04 fa0a 	mul.w	sl, r4, sl
 8016c0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016c0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016c12:	44de      	add	lr, fp
 8016c14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016c18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016c1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016c20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016c24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016c28:	ea4e 040a 	orr.w	r4, lr, sl
 8016c2c:	940d      	str	r4, [sp, #52]	; 0x34
 8016c2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016c30:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8016c34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016c38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016c3c:	9c08      	ldr	r4, [sp, #32]
 8016c3e:	fb08 fc0c 	mul.w	ip, r8, ip
 8016c42:	fb03 cc0e 	mla	ip, r3, lr, ip
 8016c46:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016c4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016c4c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016c50:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016c54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016c56:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016c5a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016c5e:	fb08 f80e 	mul.w	r8, r8, lr
 8016c62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016c66:	fb03 8202 	mla	r2, r3, r2, r8
 8016c6a:	9b08      	ldr	r3, [sp, #32]
 8016c6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016c70:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8016c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c76:	fb01 220a 	mla	r2, r1, sl, r2
 8016c7a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8016c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c80:	fb09 2901 	mla	r9, r9, r1, r2
 8016c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c86:	4343      	muls	r3, r0
 8016c88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016c8c:	1c58      	adds	r0, r3, #1
 8016c8e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016c92:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016c96:	783b      	ldrb	r3, [r7, #0]
 8016c98:	ea4c 0c09 	orr.w	ip, ip, r9
 8016c9c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8016ca0:	fa5f f28c 	uxtb.w	r2, ip
 8016ca4:	b2c0      	uxtb	r0, r0
 8016ca6:	fb12 f201 	smulbb	r2, r2, r1
 8016caa:	fb03 2300 	mla	r3, r3, r0, r2
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	1c5a      	adds	r2, r3, #1
 8016cb2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016cb6:	787a      	ldrb	r2, [r7, #1]
 8016cb8:	fb12 f200 	smulbb	r2, r2, r0
 8016cbc:	121b      	asrs	r3, r3, #8
 8016cbe:	703b      	strb	r3, [r7, #0]
 8016cc0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8016cc4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016cc8:	fb03 2301 	mla	r3, r3, r1, r2
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	1c5a      	adds	r2, r3, #1
 8016cd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016cd4:	121b      	asrs	r3, r3, #8
 8016cd6:	707b      	strb	r3, [r7, #1]
 8016cd8:	78bb      	ldrb	r3, [r7, #2]
 8016cda:	fb13 f000 	smulbb	r0, r3, r0
 8016cde:	fb0c 0c01 	mla	ip, ip, r1, r0
 8016ce2:	fa1f fc8c 	uxth.w	ip, ip
 8016ce6:	f10c 0301 	add.w	r3, ip, #1
 8016cea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016cee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016cf2:	f887 c002 	strb.w	ip, [r7, #2]
 8016cf6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016cf8:	3703      	adds	r7, #3
 8016cfa:	441d      	add	r5, r3
 8016cfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016cfe:	441e      	add	r6, r3
 8016d00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d02:	3b01      	subs	r3, #1
 8016d04:	9318      	str	r3, [sp, #96]	; 0x60
 8016d06:	e69f      	b.n	8016a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016d08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016d0a:	441d      	add	r5, r3
 8016d0c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016d0e:	441e      	add	r6, r3
 8016d10:	9b07      	ldr	r3, [sp, #28]
 8016d12:	3b01      	subs	r3, #1
 8016d14:	9307      	str	r3, [sp, #28]
 8016d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d18:	3303      	adds	r3, #3
 8016d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8016d1c:	e674      	b.n	8016a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016d1e:	d025      	beq.n	8016d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8016d20:	9b07      	ldr	r3, [sp, #28]
 8016d22:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016d24:	3b01      	subs	r3, #1
 8016d26:	fb00 5003 	mla	r0, r0, r3, r5
 8016d2a:	1400      	asrs	r0, r0, #16
 8016d2c:	f53f ae89 	bmi.w	8016a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016d30:	3901      	subs	r1, #1
 8016d32:	4288      	cmp	r0, r1
 8016d34:	f6bf ae85 	bge.w	8016a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016d38:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016d3a:	fb01 6303 	mla	r3, r1, r3, r6
 8016d3e:	141b      	asrs	r3, r3, #16
 8016d40:	f53f ae7f 	bmi.w	8016a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016d44:	3a01      	subs	r2, #1
 8016d46:	4293      	cmp	r3, r2
 8016d48:	f6bf ae7b 	bge.w	8016a42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d4e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016d52:	f103 0e03 	add.w	lr, r3, #3
 8016d56:	f1bb 0f00 	cmp.w	fp, #0
 8016d5a:	dc6e      	bgt.n	8016e3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8016d5c:	9b07      	ldr	r3, [sp, #28]
 8016d5e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016d68:	4423      	add	r3, r4
 8016d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8016d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	f340 81ab 	ble.w	80170ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8016d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016d7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d82:	eef0 6a62 	vmov.f32	s13, s5
 8016d86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016d92:	ee16 5a90 	vmov	r5, s13
 8016d96:	eef0 6a43 	vmov.f32	s13, s6
 8016d9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016d9e:	ee16 6a90 	vmov	r6, s13
 8016da2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016da6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016daa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016dae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016db2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016db6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016dba:	ee12 2a90 	vmov	r2, s5
 8016dbe:	eef0 2a47 	vmov.f32	s5, s14
 8016dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dc6:	ee13 2a10 	vmov	r2, s6
 8016dca:	9329      	str	r3, [sp, #164]	; 0xa4
 8016dcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016dce:	eeb0 3a67 	vmov.f32	s6, s15
 8016dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8016dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016ddc:	3b01      	subs	r3, #1
 8016dde:	9317      	str	r3, [sp, #92]	; 0x5c
 8016de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016de2:	bf08      	it	eq
 8016de4:	4613      	moveq	r3, r2
 8016de6:	9307      	str	r3, [sp, #28]
 8016de8:	e600      	b.n	80169ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016dea:	f1bc 0f00 	cmp.w	ip, #0
 8016dee:	f43f ae6e 	beq.w	8016ace <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016df2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016df6:	9308      	str	r3, [sp, #32]
 8016df8:	0e1b      	lsrs	r3, r3, #24
 8016dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8016dfc:	e667      	b.n	8016ace <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016dfe:	f112 0801 	adds.w	r8, r2, #1
 8016e02:	f53f af78 	bmi.w	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016e06:	45c6      	cmp	lr, r8
 8016e08:	f6ff af75 	blt.w	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016e0c:	f110 0801 	adds.w	r8, r0, #1
 8016e10:	f53f af71 	bmi.w	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016e14:	4543      	cmp	r3, r8
 8016e16:	f6ff af6e 	blt.w	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016e1a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016e1c:	b21b      	sxth	r3, r3
 8016e1e:	9201      	str	r2, [sp, #4]
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	fa0f f38e 	sxth.w	r3, lr
 8016e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e2c:	e9cd c404 	strd	ip, r4, [sp, #16]
 8016e30:	4639      	mov	r1, r7
 8016e32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016e34:	f7ff fc79 	bl	801672a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8016e38:	e75d      	b.n	8016cf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8016e3a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e3c:	142f      	asrs	r7, r5, #16
 8016e3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016e40:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016e44:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8016e48:	1433      	asrs	r3, r6, #16
 8016e4a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016e4e:	fb02 7303 	mla	r3, r2, r3, r7
 8016e52:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8016e56:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016e5a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8016e5e:	2900      	cmp	r1, #0
 8016e60:	f000 812a 	beq.w	80170b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8016e64:	687c      	ldr	r4, [r7, #4]
 8016e66:	940e      	str	r4, [sp, #56]	; 0x38
 8016e68:	0e24      	lsrs	r4, r4, #24
 8016e6a:	9415      	str	r4, [sp, #84]	; 0x54
 8016e6c:	b178      	cbz	r0, 8016e8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8016e6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8016e72:	3a01      	subs	r2, #1
 8016e74:	0092      	lsls	r2, r2, #2
 8016e76:	3204      	adds	r2, #4
 8016e78:	eb07 0802 	add.w	r8, r7, r2
 8016e7c:	58ba      	ldr	r2, [r7, r2]
 8016e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8016e80:	0e12      	lsrs	r2, r2, #24
 8016e82:	9212      	str	r2, [sp, #72]	; 0x48
 8016e84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016e88:	920f      	str	r2, [sp, #60]	; 0x3c
 8016e8a:	0e12      	lsrs	r2, r2, #24
 8016e8c:	9216      	str	r2, [sp, #88]	; 0x58
 8016e8e:	b289      	uxth	r1, r1
 8016e90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016e92:	b280      	uxth	r0, r0
 8016e94:	fb01 f900 	mul.w	r9, r1, r0
 8016e98:	0109      	lsls	r1, r1, #4
 8016e9a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8016e9e:	eba1 0809 	sub.w	r8, r1, r9
 8016ea2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8016ea6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016ea8:	b280      	uxth	r0, r0
 8016eaa:	fa1f f888 	uxth.w	r8, r8
 8016eae:	1a12      	subs	r2, r2, r0
 8016eb0:	fb08 f101 	mul.w	r1, r8, r1
 8016eb4:	b292      	uxth	r2, r2
 8016eb6:	fb02 110c 	mla	r1, r2, ip, r1
 8016eba:	fb00 1104 	mla	r1, r0, r4, r1
 8016ebe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016ec0:	fb09 1104 	mla	r1, r9, r4, r1
 8016ec4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016ec8:	2900      	cmp	r1, #0
 8016eca:	f000 80ec 	beq.w	80170a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8016ece:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016ed2:	d019      	beq.n	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8016ed4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016edc:	fb0c fa0a 	mul.w	sl, ip, sl
 8016ee0:	fb0c fc03 	mul.w	ip, ip, r3
 8016ee4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016ee8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016eec:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016ef0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ef4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016ef8:	4453      	add	r3, sl
 8016efa:	0a3f      	lsrs	r7, r7, #8
 8016efc:	0a1b      	lsrs	r3, r3, #8
 8016efe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8016f02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016f06:	433b      	orrs	r3, r7
 8016f08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016f0a:	2cff      	cmp	r4, #255	; 0xff
 8016f0c:	d020      	beq.n	8016f50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8016f0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016f10:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016f14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016f16:	4367      	muls	r7, r4
 8016f18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016f1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016f1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016f22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016f24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016f28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016f2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8016f30:	44bc      	add	ip, r7
 8016f32:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016f36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016f3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016f3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016f42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016f46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016f4a:	ea4c 040a 	orr.w	r4, ip, sl
 8016f4e:	940e      	str	r4, [sp, #56]	; 0x38
 8016f50:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016f52:	2cff      	cmp	r4, #255	; 0xff
 8016f54:	d020      	beq.n	8016f98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8016f56:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016f58:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016f5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016f5e:	4367      	muls	r7, r4
 8016f60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016f62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016f66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016f6a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016f6c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016f70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016f74:	fb04 fa0a 	mul.w	sl, r4, sl
 8016f78:	44bc      	add	ip, r7
 8016f7a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016f7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016f82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016f86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016f8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016f8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016f92:	ea4c 040a 	orr.w	r4, ip, sl
 8016f96:	9409      	str	r4, [sp, #36]	; 0x24
 8016f98:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016f9a:	2cff      	cmp	r4, #255	; 0xff
 8016f9c:	d020      	beq.n	8016fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8016f9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016fa0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016fa4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016fa6:	4367      	muls	r7, r4
 8016fa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016faa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016fae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016fb2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8016fb4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016fb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016fbc:	fb04 fa0a 	mul.w	sl, r4, sl
 8016fc0:	44bc      	add	ip, r7
 8016fc2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8016fc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016fca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016fce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016fd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016fd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016fda:	ea4c 040a 	orr.w	r4, ip, sl
 8016fde:	940f      	str	r4, [sp, #60]	; 0x3c
 8016fe0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016fe2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8016fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016fea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016fee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016ff0:	fb08 f707 	mul.w	r7, r8, r7
 8016ff4:	fb02 770c 	mla	r7, r2, ip, r7
 8016ff8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016ffc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016ffe:	fb00 770c 	mla	r7, r0, ip, r7
 8017002:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017006:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017008:	fb09 770c 	mla	r7, r9, ip, r7
 801700c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017010:	fb08 f80c 	mul.w	r8, r8, ip
 8017014:	0a3f      	lsrs	r7, r7, #8
 8017016:	fb02 8303 	mla	r3, r2, r3, r8
 801701a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801701c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017020:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017026:	fb00 330a 	mla	r3, r0, sl, r3
 801702a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801702e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017030:	fb09 3c0c 	mla	ip, r9, ip, r3
 8017034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017036:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801703a:	434b      	muls	r3, r1
 801703c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017040:	1c59      	adds	r1, r3, #1
 8017042:	ea47 070c 	orr.w	r7, r7, ip
 8017046:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801704a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801704e:	b2fa      	uxtb	r2, r7
 8017050:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8017054:	fb12 f200 	smulbb	r2, r2, r0
 8017058:	b2c9      	uxtb	r1, r1
 801705a:	fb03 2301 	mla	r3, r3, r1, r2
 801705e:	b29b      	uxth	r3, r3
 8017060:	1c5a      	adds	r2, r3, #1
 8017062:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017066:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801706a:	fb12 f201 	smulbb	r2, r2, r1
 801706e:	121b      	asrs	r3, r3, #8
 8017070:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017074:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8017078:	0c3f      	lsrs	r7, r7, #16
 801707a:	fb03 2300 	mla	r3, r3, r0, r2
 801707e:	b29b      	uxth	r3, r3
 8017080:	1c5a      	adds	r2, r3, #1
 8017082:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017086:	121b      	asrs	r3, r3, #8
 8017088:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801708c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8017090:	fb13 f101 	smulbb	r1, r3, r1
 8017094:	fb07 1700 	mla	r7, r7, r0, r1
 8017098:	b2bf      	uxth	r7, r7
 801709a:	1c79      	adds	r1, r7, #1
 801709c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80170a0:	123f      	asrs	r7, r7, #8
 80170a2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80170a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80170a8:	f10e 0e03 	add.w	lr, lr, #3
 80170ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80170b0:	441d      	add	r5, r3
 80170b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80170b4:	441e      	add	r6, r3
 80170b6:	e64e      	b.n	8016d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80170b8:	2800      	cmp	r0, #0
 80170ba:	f43f aee8 	beq.w	8016e8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80170be:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80170c2:	9209      	str	r2, [sp, #36]	; 0x24
 80170c4:	0e12      	lsrs	r2, r2, #24
 80170c6:	9212      	str	r2, [sp, #72]	; 0x48
 80170c8:	e6e1      	b.n	8016e8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80170ca:	b01d      	add	sp, #116	; 0x74
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170d0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80170d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d4:	b087      	sub	sp, #28
 80170d6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80170da:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80170de:	fb05 7003 	mla	r0, r5, r3, r7
 80170e2:	2d00      	cmp	r5, #0
 80170e4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80170e8:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80170ec:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80170f0:	f2c0 810a 	blt.w	8017308 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80170f4:	45a8      	cmp	r8, r5
 80170f6:	f340 8107 	ble.w	8017308 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80170fa:	2f00      	cmp	r7, #0
 80170fc:	f2c0 8102 	blt.w	8017304 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8017100:	42bb      	cmp	r3, r7
 8017102:	f340 80ff 	ble.w	8017304 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8017106:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801710a:	1c7a      	adds	r2, r7, #1
 801710c:	f100 80ff 	bmi.w	801730e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8017110:	4293      	cmp	r3, r2
 8017112:	f340 80fc 	ble.w	801730e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8017116:	2c00      	cmp	r4, #0
 8017118:	f000 80fb 	beq.w	8017312 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801711c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017120:	3501      	adds	r5, #1
 8017122:	f100 80fa 	bmi.w	801731a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8017126:	45a8      	cmp	r8, r5
 8017128:	f340 80f7 	ble.w	801731a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801712c:	f1be 0f00 	cmp.w	lr, #0
 8017130:	f000 80f6 	beq.w	8017320 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8017134:	2f00      	cmp	r7, #0
 8017136:	f2c0 80ee 	blt.w	8017316 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801713a:	42bb      	cmp	r3, r7
 801713c:	f340 80eb 	ble.w	8017316 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8017140:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8017144:	3701      	adds	r7, #1
 8017146:	f100 80ee 	bmi.w	8017326 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801714a:	42bb      	cmp	r3, r7
 801714c:	f340 80eb 	ble.w	8017326 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8017150:	2c00      	cmp	r4, #0
 8017152:	f000 80ea 	beq.w	801732a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8017156:	3301      	adds	r3, #1
 8017158:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801715c:	fa1f fc84 	uxth.w	ip, r4
 8017160:	fa1f fe8e 	uxth.w	lr, lr
 8017164:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017168:	fb0c f90e 	mul.w	r9, ip, lr
 801716c:	0e13      	lsrs	r3, r2, #24
 801716e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8017172:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8017176:	9302      	str	r3, [sp, #8]
 8017178:	ebac 0709 	sub.w	r7, ip, r9
 801717c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8017180:	fa1f f48e 	uxth.w	r4, lr
 8017184:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8017188:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801718c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8017190:	fb0a fe0e 	mul.w	lr, sl, lr
 8017194:	1b1b      	subs	r3, r3, r4
 8017196:	fb0a f606 	mul.w	r6, sl, r6
 801719a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801719e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80171a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80171ac:	b2bf      	uxth	r7, r7
 80171ae:	9301      	str	r3, [sp, #4]
 80171b0:	44e6      	add	lr, ip
 80171b2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80171b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80171ba:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80171be:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80171c2:	9303      	str	r3, [sp, #12]
 80171c4:	0a33      	lsrs	r3, r6, #8
 80171c6:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80171ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80171ce:	9304      	str	r3, [sp, #16]
 80171d0:	fb0b f606 	mul.w	r6, fp, r6
 80171d4:	fb0b f000 	mul.w	r0, fp, r0
 80171d8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80171dc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80171e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80171e4:	44b6      	add	lr, r6
 80171e6:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80171ea:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80171ee:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80171f2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80171f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80171fa:	fb08 f606 	mul.w	r6, r8, r6
 80171fe:	0a03      	lsrs	r3, r0, #8
 8017200:	fb08 f505 	mul.w	r5, r8, r5
 8017204:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017208:	0a30      	lsrs	r0, r6, #8
 801720a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801720e:	9305      	str	r3, [sp, #20]
 8017210:	0e13      	lsrs	r3, r2, #24
 8017212:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017216:	fb0e fe07 	mul.w	lr, lr, r7
 801721a:	4430      	add	r0, r6
 801721c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8017220:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017224:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8017228:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801722c:	0a00      	lsrs	r0, r0, #8
 801722e:	435e      	muls	r6, r3
 8017230:	0a2d      	lsrs	r5, r5, #8
 8017232:	435a      	muls	r2, r3
 8017234:	9b03      	ldr	r3, [sp, #12]
 8017236:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801723a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801723e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017246:	44b4      	add	ip, r6
 8017248:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801724c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017250:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8017254:	9e01      	ldr	r6, [sp, #4]
 8017256:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801725a:	fb03 ee06 	mla	lr, r3, r6, lr
 801725e:	9b04      	ldr	r3, [sp, #16]
 8017260:	0a12      	lsrs	r2, r2, #8
 8017262:	fb0c ee09 	mla	lr, ip, r9, lr
 8017266:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801726a:	9b05      	ldr	r3, [sp, #20]
 801726c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017270:	fb00 ee04 	mla	lr, r0, r4, lr
 8017274:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017278:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801727c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8017280:	9b01      	ldr	r3, [sp, #4]
 8017282:	fb07 fe0e 	mul.w	lr, r7, lr
 8017286:	fb07 f70b 	mul.w	r7, r7, fp
 801728a:	fb03 ee06 	mla	lr, r3, r6, lr
 801728e:	fb03 730a 	mla	r3, r3, sl, r7
 8017292:	fb09 e202 	mla	r2, r9, r2, lr
 8017296:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801729a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801729e:	fb04 3408 	mla	r4, r4, r8, r3
 80172a2:	9b02      	ldr	r3, [sp, #8]
 80172a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80172a8:	fb09 4903 	mla	r9, r9, r3, r4
 80172ac:	780b      	ldrb	r3, [r1, #0]
 80172ae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80172b2:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80172b6:	ea40 0e0e 	orr.w	lr, r0, lr
 80172ba:	fa5f f989 	uxtb.w	r9, r9
 80172be:	fb03 f209 	mul.w	r2, r3, r9
 80172c2:	1c53      	adds	r3, r2, #1
 80172c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80172c8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80172cc:	700b      	strb	r3, [r1, #0]
 80172ce:	784b      	ldrb	r3, [r1, #1]
 80172d0:	fb03 f309 	mul.w	r3, r3, r9
 80172d4:	1c5a      	adds	r2, r3, #1
 80172d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80172da:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80172de:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80172e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80172e6:	704b      	strb	r3, [r1, #1]
 80172e8:	788b      	ldrb	r3, [r1, #2]
 80172ea:	fb03 f909 	mul.w	r9, r3, r9
 80172ee:	f109 0301 	add.w	r3, r9, #1
 80172f2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80172f6:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80172fa:	f881 e002 	strb.w	lr, [r1, #2]
 80172fe:	b007      	add	sp, #28
 8017300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017304:	2600      	movs	r6, #0
 8017306:	e700      	b.n	801710a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8017308:	2000      	movs	r0, #0
 801730a:	4606      	mov	r6, r0
 801730c:	e708      	b.n	8017120 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801730e:	2000      	movs	r0, #0
 8017310:	e706      	b.n	8017120 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8017312:	4620      	mov	r0, r4
 8017314:	e704      	b.n	8017120 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8017316:	2500      	movs	r5, #0
 8017318:	e714      	b.n	8017144 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801731a:	2200      	movs	r2, #0
 801731c:	4615      	mov	r5, r2
 801731e:	e71d      	b.n	801715c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8017320:	4672      	mov	r2, lr
 8017322:	4675      	mov	r5, lr
 8017324:	e71a      	b.n	801715c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8017326:	2200      	movs	r2, #0
 8017328:	e718      	b.n	801715c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801732a:	4622      	mov	r2, r4
 801732c:	e716      	b.n	801715c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801732e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801732e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017332:	b099      	sub	sp, #100	; 0x64
 8017334:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8017338:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801733a:	9017      	str	r0, [sp, #92]	; 0x5c
 801733c:	9306      	str	r3, [sp, #24]
 801733e:	6850      	ldr	r0, [r2, #4]
 8017340:	6812      	ldr	r2, [r2, #0]
 8017342:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8017346:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801734a:	fb00 1303 	mla	r3, r0, r3, r1
 801734e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017352:	18d3      	adds	r3, r2, r3
 8017354:	9309      	str	r3, [sp, #36]	; 0x24
 8017356:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	930e      	str	r3, [sp, #56]	; 0x38
 801735c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801735e:	2b00      	cmp	r3, #0
 8017360:	dc03      	bgt.n	801736a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017362:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017364:	2b00      	cmp	r3, #0
 8017366:	f340 8360 	ble.w	8017a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801736a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801736c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017370:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017374:	1e48      	subs	r0, r1, #1
 8017376:	1e57      	subs	r7, r2, #1
 8017378:	9b06      	ldr	r3, [sp, #24]
 801737a:	2b00      	cmp	r3, #0
 801737c:	f340 817b 	ble.w	8017676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8017380:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8017384:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017388:	d406      	bmi.n	8017398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801738a:	4584      	cmp	ip, r0
 801738c:	da04      	bge.n	8017398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801738e:	2b00      	cmp	r3, #0
 8017390:	db02      	blt.n	8017398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017392:	42bb      	cmp	r3, r7
 8017394:	f2c0 8170 	blt.w	8017678 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017398:	f11c 0c01 	adds.w	ip, ip, #1
 801739c:	f100 8160 	bmi.w	8017660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80173a0:	4561      	cmp	r1, ip
 80173a2:	f2c0 815d 	blt.w	8017660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80173a6:	3301      	adds	r3, #1
 80173a8:	f100 815a 	bmi.w	8017660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80173ac:	429a      	cmp	r2, r3
 80173ae:	f2c0 8157 	blt.w	8017660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80173b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80173b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80173b8:	f1b8 0f00 	cmp.w	r8, #0
 80173bc:	f340 8179 	ble.w	80176b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80173c0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80173c2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80173c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80173c8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80173cc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80173d0:	142a      	asrs	r2, r5, #16
 80173d2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80173d6:	689b      	ldr	r3, [r3, #8]
 80173d8:	f100 81be 	bmi.w	8017758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80173dc:	f103 39ff 	add.w	r9, r3, #4294967295
 80173e0:	454a      	cmp	r2, r9
 80173e2:	f280 81b9 	bge.w	8017758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80173e6:	f1bc 0f00 	cmp.w	ip, #0
 80173ea:	f2c0 81b5 	blt.w	8017758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80173ee:	f10e 39ff 	add.w	r9, lr, #4294967295
 80173f2:	45cc      	cmp	ip, r9
 80173f4:	f280 81b0 	bge.w	8017758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80173f8:	b21b      	sxth	r3, r3
 80173fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80173fc:	fb0c 2203 	mla	r2, ip, r3, r2
 8017400:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8017404:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017408:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801740c:	2900      	cmp	r1, #0
 801740e:	f000 8197 	beq.w	8017740 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8017412:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8017416:	940a      	str	r4, [sp, #40]	; 0x28
 8017418:	0e24      	lsrs	r4, r4, #24
 801741a:	9411      	str	r4, [sp, #68]	; 0x44
 801741c:	b180      	cbz	r0, 8017440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801741e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017422:	3b01      	subs	r3, #1
 8017424:	009b      	lsls	r3, r3, #2
 8017426:	3304      	adds	r3, #4
 8017428:	eb09 0c03 	add.w	ip, r9, r3
 801742c:	f859 3003 	ldr.w	r3, [r9, r3]
 8017430:	9307      	str	r3, [sp, #28]
 8017432:	0e1b      	lsrs	r3, r3, #24
 8017434:	930f      	str	r3, [sp, #60]	; 0x3c
 8017436:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801743a:	930b      	str	r3, [sp, #44]	; 0x2c
 801743c:	0e1b      	lsrs	r3, r3, #24
 801743e:	9312      	str	r3, [sp, #72]	; 0x48
 8017440:	b289      	uxth	r1, r1
 8017442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017444:	b280      	uxth	r0, r0
 8017446:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017448:	fb01 fa00 	mul.w	sl, r1, r0
 801744c:	0109      	lsls	r1, r1, #4
 801744e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017452:	eba1 090a 	sub.w	r9, r1, sl
 8017456:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801745a:	b280      	uxth	r0, r0
 801745c:	fa1f f989 	uxth.w	r9, r9
 8017460:	1a09      	subs	r1, r1, r0
 8017462:	fb09 f303 	mul.w	r3, r9, r3
 8017466:	b289      	uxth	r1, r1
 8017468:	fb01 330e 	mla	r3, r1, lr, r3
 801746c:	fb00 3304 	mla	r3, r0, r4, r3
 8017470:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017472:	fb0a 3304 	mla	r3, sl, r4, r3
 8017476:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801747a:	2b00      	cmp	r3, #0
 801747c:	f000 80e8 	beq.w	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8017480:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017484:	d01b      	beq.n	80174be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8017486:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801748a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801748e:	fb0e fb0b 	mul.w	fp, lr, fp
 8017492:	fb0e fe02 	mul.w	lr, lr, r2
 8017496:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801749a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801749e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80174a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80174a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80174aa:	445a      	add	r2, fp
 80174ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80174b0:	0a12      	lsrs	r2, r2, #8
 80174b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80174b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80174ba:	ea42 020c 	orr.w	r2, r2, ip
 80174be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80174c0:	2cff      	cmp	r4, #255	; 0xff
 80174c2:	d021      	beq.n	8017508 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80174c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80174c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80174ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80174cc:	fb04 fc0c 	mul.w	ip, r4, ip
 80174d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80174d2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80174d6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80174da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80174dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80174e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80174e4:	fb04 fb0b 	mul.w	fp, r4, fp
 80174e8:	44e6      	add	lr, ip
 80174ea:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80174ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80174f2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80174f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80174fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80174fe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017502:	ea4e 040b 	orr.w	r4, lr, fp
 8017506:	940a      	str	r4, [sp, #40]	; 0x28
 8017508:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801750a:	2cff      	cmp	r4, #255	; 0xff
 801750c:	d021      	beq.n	8017552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801750e:	9c07      	ldr	r4, [sp, #28]
 8017510:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017514:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017516:	fb04 fc0c 	mul.w	ip, r4, ip
 801751a:	9c07      	ldr	r4, [sp, #28]
 801751c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017520:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8017524:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017526:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801752a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801752e:	fb04 fb0b 	mul.w	fp, r4, fp
 8017532:	44e6      	add	lr, ip
 8017534:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017538:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801753c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8017540:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017544:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017548:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801754c:	ea4e 040b 	orr.w	r4, lr, fp
 8017550:	9407      	str	r4, [sp, #28]
 8017552:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017554:	2cff      	cmp	r4, #255	; 0xff
 8017556:	d021      	beq.n	801759c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8017558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801755a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801755e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017560:	fb04 fc0c 	mul.w	ip, r4, ip
 8017564:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017566:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801756a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801756e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017570:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017574:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017578:	fb04 fb0b 	mul.w	fp, r4, fp
 801757c:	44e6      	add	lr, ip
 801757e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017582:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017586:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801758a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801758e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017592:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017596:	ea4e 040b 	orr.w	r4, lr, fp
 801759a:	940b      	str	r4, [sp, #44]	; 0x2c
 801759c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801759e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80175a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80175a6:	2bff      	cmp	r3, #255	; 0xff
 80175a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80175ac:	9c07      	ldr	r4, [sp, #28]
 80175ae:	fb09 fc0c 	mul.w	ip, r9, ip
 80175b2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80175b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80175ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80175bc:	fb00 cc0e 	mla	ip, r0, lr, ip
 80175c0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80175c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80175c6:	fb0a cc0e 	mla	ip, sl, lr, ip
 80175ca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80175ce:	fb09 f90e 	mul.w	r9, r9, lr
 80175d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80175d6:	fb01 9202 	mla	r2, r1, r2, r9
 80175da:	9907      	ldr	r1, [sp, #28]
 80175dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80175e0:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80175e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175e6:	fb00 220b 	mla	r2, r0, fp, r2
 80175ea:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80175ee:	fb0a 2a00 	mla	sl, sl, r0, r2
 80175f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80175f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80175fa:	ea4c 0c0a 	orr.w	ip, ip, sl
 80175fe:	fa5f f08c 	uxtb.w	r0, ip
 8017602:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8017606:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801760a:	f000 80a2 	beq.w	8017752 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801760e:	43db      	mvns	r3, r3
 8017610:	783a      	ldrb	r2, [r7, #0]
 8017612:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017616:	b2db      	uxtb	r3, r3
 8017618:	fb02 fe03 	mul.w	lr, r2, r3
 801761c:	fb0a fa03 	mul.w	sl, sl, r3
 8017620:	f10e 0201 	add.w	r2, lr, #1
 8017624:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8017628:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801762c:	703a      	strb	r2, [r7, #0]
 801762e:	787a      	ldrb	r2, [r7, #1]
 8017630:	fb02 f003 	mul.w	r0, r2, r3
 8017634:	f10a 0301 	add.w	r3, sl, #1
 8017638:	1c42      	adds	r2, r0, #1
 801763a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801763e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017642:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8017646:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801764a:	707a      	strb	r2, [r7, #1]
 801764c:	f887 c002 	strb.w	ip, [r7, #2]
 8017650:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017652:	3703      	adds	r7, #3
 8017654:	f108 38ff 	add.w	r8, r8, #4294967295
 8017658:	441d      	add	r5, r3
 801765a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801765c:	441e      	add	r6, r3
 801765e:	e6ab      	b.n	80173b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017660:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017662:	441d      	add	r5, r3
 8017664:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017666:	441e      	add	r6, r3
 8017668:	9b06      	ldr	r3, [sp, #24]
 801766a:	3b01      	subs	r3, #1
 801766c:	9306      	str	r3, [sp, #24]
 801766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017670:	3303      	adds	r3, #3
 8017672:	9309      	str	r3, [sp, #36]	; 0x24
 8017674:	e680      	b.n	8017378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017676:	d024      	beq.n	80176c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8017678:	9b06      	ldr	r3, [sp, #24]
 801767a:	9825      	ldr	r0, [sp, #148]	; 0x94
 801767c:	3b01      	subs	r3, #1
 801767e:	fb00 5003 	mla	r0, r0, r3, r5
 8017682:	1400      	asrs	r0, r0, #16
 8017684:	f53f ae95 	bmi.w	80173b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017688:	3901      	subs	r1, #1
 801768a:	4288      	cmp	r0, r1
 801768c:	f6bf ae91 	bge.w	80173b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017690:	9926      	ldr	r1, [sp, #152]	; 0x98
 8017692:	fb01 6303 	mla	r3, r1, r3, r6
 8017696:	141b      	asrs	r3, r3, #16
 8017698:	f53f ae8b 	bmi.w	80173b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801769c:	3a01      	subs	r2, #1
 801769e:	4293      	cmp	r3, r2
 80176a0:	f6bf ae87 	bge.w	80173b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80176a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176a6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80176aa:	1cdf      	adds	r7, r3, #3
 80176ac:	f1bb 0f00 	cmp.w	fp, #0
 80176b0:	dc6e      	bgt.n	8017790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80176b2:	9b06      	ldr	r3, [sp, #24]
 80176b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80176b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80176be:	4423      	add	r3, r4
 80176c0:	9309      	str	r3, [sp, #36]	; 0x24
 80176c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f340 81b0 	ble.w	8017a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80176ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80176ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80176d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80176d8:	eef0 6a62 	vmov.f32	s13, s5
 80176dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80176e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80176e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80176e8:	ee16 5a90 	vmov	r5, s13
 80176ec:	eef0 6a43 	vmov.f32	s13, s6
 80176f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80176f4:	ee16 6a90 	vmov	r6, s13
 80176f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80176fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017700:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017704:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017708:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801770c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017710:	ee12 2a90 	vmov	r2, s5
 8017714:	eef0 2a47 	vmov.f32	s5, s14
 8017718:	fb92 f3f3 	sdiv	r3, r2, r3
 801771c:	ee13 2a10 	vmov	r2, s6
 8017720:	9325      	str	r3, [sp, #148]	; 0x94
 8017722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017724:	eeb0 3a67 	vmov.f32	s6, s15
 8017728:	fb92 f3f3 	sdiv	r3, r2, r3
 801772c:	9326      	str	r3, [sp, #152]	; 0x98
 801772e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017730:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017732:	3b01      	subs	r3, #1
 8017734:	9315      	str	r3, [sp, #84]	; 0x54
 8017736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017738:	bf08      	it	eq
 801773a:	4613      	moveq	r3, r2
 801773c:	9306      	str	r3, [sp, #24]
 801773e:	e60d      	b.n	801735c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017740:	2800      	cmp	r0, #0
 8017742:	f43f ae7d 	beq.w	8017440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8017746:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801774a:	9307      	str	r3, [sp, #28]
 801774c:	0e1b      	lsrs	r3, r3, #24
 801774e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017750:	e676      	b.n	8017440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8017752:	7038      	strb	r0, [r7, #0]
 8017754:	7079      	strb	r1, [r7, #1]
 8017756:	e779      	b.n	801764c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8017758:	f112 0901 	adds.w	r9, r2, #1
 801775c:	f53f af78 	bmi.w	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8017760:	454b      	cmp	r3, r9
 8017762:	f6ff af75 	blt.w	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8017766:	f11c 0901 	adds.w	r9, ip, #1
 801776a:	f53f af71 	bmi.w	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801776e:	45ce      	cmp	lr, r9
 8017770:	f6ff af6e 	blt.w	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8017774:	b21b      	sxth	r3, r3
 8017776:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801777a:	fa0f f28e 	sxth.w	r2, lr
 801777e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8017782:	9200      	str	r2, [sp, #0]
 8017784:	4639      	mov	r1, r7
 8017786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017788:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801778a:	f7ff fca1 	bl	80170d0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801778e:	e75f      	b.n	8017650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8017790:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017792:	1429      	asrs	r1, r5, #16
 8017794:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017796:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801779a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801779e:	1433      	asrs	r3, r6, #16
 80177a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80177a4:	fb0c 1303 	mla	r3, ip, r3, r1
 80177a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80177aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80177ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80177b2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80177b6:	2a00      	cmp	r2, #0
 80177b8:	f000 8129 	beq.w	8017a0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80177bc:	684c      	ldr	r4, [r1, #4]
 80177be:	940c      	str	r4, [sp, #48]	; 0x30
 80177c0:	0e24      	lsrs	r4, r4, #24
 80177c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80177c4:	b198      	cbz	r0, 80177ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80177c6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80177ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80177d2:	f10c 0c04 	add.w	ip, ip, #4
 80177d6:	eb01 080c 	add.w	r8, r1, ip
 80177da:	f851 100c 	ldr.w	r1, [r1, ip]
 80177de:	9108      	str	r1, [sp, #32]
 80177e0:	0e09      	lsrs	r1, r1, #24
 80177e2:	9110      	str	r1, [sp, #64]	; 0x40
 80177e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80177e8:	910d      	str	r1, [sp, #52]	; 0x34
 80177ea:	0e09      	lsrs	r1, r1, #24
 80177ec:	9114      	str	r1, [sp, #80]	; 0x50
 80177ee:	b292      	uxth	r2, r2
 80177f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80177f2:	b280      	uxth	r0, r0
 80177f4:	fb02 f900 	mul.w	r9, r2, r0
 80177f8:	0112      	lsls	r2, r2, #4
 80177fa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80177fe:	eba2 0809 	sub.w	r8, r2, r9
 8017802:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8017806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017808:	b280      	uxth	r0, r0
 801780a:	fa1f f888 	uxth.w	r8, r8
 801780e:	1a09      	subs	r1, r1, r0
 8017810:	fb08 f202 	mul.w	r2, r8, r2
 8017814:	b289      	uxth	r1, r1
 8017816:	fb01 220e 	mla	r2, r1, lr, r2
 801781a:	fb00 2204 	mla	r2, r0, r4, r2
 801781e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017820:	fb09 2204 	mla	r2, r9, r4, r2
 8017824:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017828:	2a00      	cmp	r2, #0
 801782a:	f000 80e8 	beq.w	80179fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801782e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017832:	d01b      	beq.n	801786c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8017834:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801783c:	fb0e fa0a 	mul.w	sl, lr, sl
 8017840:	fb0e fe03 	mul.w	lr, lr, r3
 8017844:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017848:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801784c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017850:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017854:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017858:	4453      	add	r3, sl
 801785a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801785e:	0a1b      	lsrs	r3, r3, #8
 8017860:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017864:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017868:	ea43 030c 	orr.w	r3, r3, ip
 801786c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801786e:	2cff      	cmp	r4, #255	; 0xff
 8017870:	d021      	beq.n	80178b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8017872:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017874:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801787a:	fb04 fc0c 	mul.w	ip, r4, ip
 801787e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017880:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017884:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017888:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801788a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801788e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017892:	fb04 fa0a 	mul.w	sl, r4, sl
 8017896:	44e6      	add	lr, ip
 8017898:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801789c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80178a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80178a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80178a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80178ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80178b0:	ea4e 040a 	orr.w	r4, lr, sl
 80178b4:	940c      	str	r4, [sp, #48]	; 0x30
 80178b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80178b8:	2cff      	cmp	r4, #255	; 0xff
 80178ba:	d021      	beq.n	8017900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80178bc:	9c08      	ldr	r4, [sp, #32]
 80178be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80178c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80178c4:	fb04 fc0c 	mul.w	ip, r4, ip
 80178c8:	9c08      	ldr	r4, [sp, #32]
 80178ca:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80178ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80178d0:	fb04 fa0e 	mul.w	sl, r4, lr
 80178d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80178d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80178dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80178e0:	44e6      	add	lr, ip
 80178e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80178e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80178ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80178ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80178f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80178f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80178fa:	ea4e 040a 	orr.w	r4, lr, sl
 80178fe:	9408      	str	r4, [sp, #32]
 8017900:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017902:	2cff      	cmp	r4, #255	; 0xff
 8017904:	d021      	beq.n	801794a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8017906:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017908:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801790c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801790e:	fb04 fc0c 	mul.w	ip, r4, ip
 8017912:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017914:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017918:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801791c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801791e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017922:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017926:	fb04 fa0a 	mul.w	sl, r4, sl
 801792a:	44e6      	add	lr, ip
 801792c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017930:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017934:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017938:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801793c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017944:	ea4e 040a 	orr.w	r4, lr, sl
 8017948:	940d      	str	r4, [sp, #52]	; 0x34
 801794a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801794c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017950:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017954:	2aff      	cmp	r2, #255	; 0xff
 8017956:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801795a:	9c08      	ldr	r4, [sp, #32]
 801795c:	fb08 fc0c 	mul.w	ip, r8, ip
 8017960:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017964:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017968:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801796a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801796e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017972:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017974:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017978:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801797c:	fb08 f80e 	mul.w	r8, r8, lr
 8017980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017984:	fb01 8303 	mla	r3, r1, r3, r8
 8017988:	9908      	ldr	r1, [sp, #32]
 801798a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801798e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8017992:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017994:	fb00 330a 	mla	r3, r0, sl, r3
 8017998:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801799c:	fb09 3e0e 	mla	lr, r9, lr, r3
 80179a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80179a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80179a8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80179ac:	fa5f f08c 	uxtb.w	r0, ip
 80179b0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80179b4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80179b8:	d032      	beq.n	8017a20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80179ba:	43d2      	mvns	r2, r2
 80179bc:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80179c0:	b2d2      	uxtb	r2, r2
 80179c2:	fb0e fe02 	mul.w	lr, lr, r2
 80179c6:	f10e 0301 	add.w	r3, lr, #1
 80179ca:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80179ce:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80179d2:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80179d6:	4350      	muls	r0, r2
 80179d8:	f807 3c03 	strb.w	r3, [r7, #-3]
 80179dc:	1c43      	adds	r3, r0, #1
 80179de:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80179e2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80179e6:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80179ea:	4353      	muls	r3, r2
 80179ec:	f807 1c02 	strb.w	r1, [r7, #-2]
 80179f0:	1c5a      	adds	r2, r3, #1
 80179f2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80179f6:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80179fa:	f807 cc01 	strb.w	ip, [r7, #-1]
 80179fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017a00:	3703      	adds	r7, #3
 8017a02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a06:	441d      	add	r5, r3
 8017a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017a0a:	441e      	add	r6, r3
 8017a0c:	e64e      	b.n	80176ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8017a0e:	2800      	cmp	r0, #0
 8017a10:	f43f aeed 	beq.w	80177ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8017a14:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017a18:	9108      	str	r1, [sp, #32]
 8017a1a:	0e09      	lsrs	r1, r1, #24
 8017a1c:	9110      	str	r1, [sp, #64]	; 0x40
 8017a1e:	e6e6      	b.n	80177ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8017a20:	f807 0c03 	strb.w	r0, [r7, #-3]
 8017a24:	f807 1c02 	strb.w	r1, [r7, #-2]
 8017a28:	e7e7      	b.n	80179fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8017a2a:	b019      	add	sp, #100	; 0x64
 8017a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8017a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a34:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8017a38:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017a3c:	2c00      	cmp	r4, #0
 8017a3e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017a42:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8017a46:	fb00 4e03 	mla	lr, r0, r3, r4
 8017a4a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8017a4e:	f2c0 80b8 	blt.w	8017bc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8017a52:	45a1      	cmp	r9, r4
 8017a54:	f340 80b5 	ble.w	8017bc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	f2c0 80b2 	blt.w	8017bc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8017a5e:	4580      	cmp	r8, r0
 8017a60:	f340 80af 	ble.w	8017bc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8017a64:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8017a68:	f01e 0f01 	tst.w	lr, #1
 8017a6c:	5d56      	ldrb	r6, [r2, r5]
 8017a6e:	bf0c      	ite	eq
 8017a70:	f006 060f 	andeq.w	r6, r6, #15
 8017a74:	1136      	asrne	r6, r6, #4
 8017a76:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8017a7a:	b2f6      	uxtb	r6, r6
 8017a7c:	f114 0a01 	adds.w	sl, r4, #1
 8017a80:	f100 80a1 	bmi.w	8017bc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8017a84:	45d1      	cmp	r9, sl
 8017a86:	f340 809e 	ble.w	8017bc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8017a8a:	2800      	cmp	r0, #0
 8017a8c:	f2c0 809b 	blt.w	8017bc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8017a90:	4580      	cmp	r8, r0
 8017a92:	f340 8098 	ble.w	8017bc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8017a96:	2f00      	cmp	r7, #0
 8017a98:	f000 8097 	beq.w	8017bca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8017a9c:	f10e 0b01 	add.w	fp, lr, #1
 8017aa0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8017aa4:	f01b 0f01 	tst.w	fp, #1
 8017aa8:	5d55      	ldrb	r5, [r2, r5]
 8017aaa:	bf0c      	ite	eq
 8017aac:	f005 050f 	andeq.w	r5, r5, #15
 8017ab0:	112d      	asrne	r5, r5, #4
 8017ab2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8017ab6:	b2ed      	uxtb	r5, r5
 8017ab8:	f1bc 0f00 	cmp.w	ip, #0
 8017abc:	f000 8089 	beq.w	8017bd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8017ac0:	2c00      	cmp	r4, #0
 8017ac2:	f100 0001 	add.w	r0, r0, #1
 8017ac6:	f2c0 8082 	blt.w	8017bce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8017aca:	45a1      	cmp	r9, r4
 8017acc:	dd7f      	ble.n	8017bce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8017ace:	2800      	cmp	r0, #0
 8017ad0:	db7d      	blt.n	8017bce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8017ad2:	4580      	cmp	r8, r0
 8017ad4:	dd7b      	ble.n	8017bce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8017ad6:	eb03 0b0e 	add.w	fp, r3, lr
 8017ada:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8017ade:	f01b 0f01 	tst.w	fp, #1
 8017ae2:	5d14      	ldrb	r4, [r2, r4]
 8017ae4:	bf0c      	ite	eq
 8017ae6:	f004 040f 	andeq.w	r4, r4, #15
 8017aea:	1124      	asrne	r4, r4, #4
 8017aec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017af0:	b2e4      	uxtb	r4, r4
 8017af2:	f1ba 0f00 	cmp.w	sl, #0
 8017af6:	db6f      	blt.n	8017bd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8017af8:	45d1      	cmp	r9, sl
 8017afa:	dd6d      	ble.n	8017bd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8017afc:	2800      	cmp	r0, #0
 8017afe:	db6b      	blt.n	8017bd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8017b00:	4580      	cmp	r8, r0
 8017b02:	dd69      	ble.n	8017bd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8017b04:	2f00      	cmp	r7, #0
 8017b06:	d069      	beq.n	8017bdc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8017b08:	3301      	adds	r3, #1
 8017b0a:	449e      	add	lr, r3
 8017b0c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017b10:	f01e 0f01 	tst.w	lr, #1
 8017b14:	5cd0      	ldrb	r0, [r2, r3]
 8017b16:	bf0c      	ite	eq
 8017b18:	f000 000f 	andeq.w	r0, r0, #15
 8017b1c:	1100      	asrne	r0, r0, #4
 8017b1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017b22:	b2c3      	uxtb	r3, r0
 8017b24:	b2ba      	uxth	r2, r7
 8017b26:	fa1f fc8c 	uxth.w	ip, ip
 8017b2a:	fb02 f00c 	mul.w	r0, r2, ip
 8017b2e:	0112      	lsls	r2, r2, #4
 8017b30:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8017b34:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8017b38:	1a12      	subs	r2, r2, r0
 8017b3a:	fa1f fc8c 	uxth.w	ip, ip
 8017b3e:	b292      	uxth	r2, r2
 8017b40:	eba7 070c 	sub.w	r7, r7, ip
 8017b44:	436a      	muls	r2, r5
 8017b46:	b2bf      	uxth	r7, r7
 8017b48:	fb06 2207 	mla	r2, r6, r7, r2
 8017b4c:	fb0c 2404 	mla	r4, ip, r4, r2
 8017b50:	fb00 4303 	mla	r3, r0, r3, r4
 8017b54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017b58:	b38b      	cbz	r3, 8017bbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8017b5a:	4a21      	ldr	r2, [pc, #132]	; (8017be0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8017b5c:	6814      	ldr	r4, [r2, #0]
 8017b5e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8017b62:	b2e5      	uxtb	r5, r4
 8017b64:	4353      	muls	r3, r2
 8017b66:	1c5a      	adds	r2, r3, #1
 8017b68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017b6c:	1212      	asrs	r2, r2, #8
 8017b6e:	b290      	uxth	r0, r2
 8017b70:	43d2      	mvns	r2, r2
 8017b72:	fb15 f500 	smulbb	r5, r5, r0
 8017b76:	b2d3      	uxtb	r3, r2
 8017b78:	780a      	ldrb	r2, [r1, #0]
 8017b7a:	fb02 5203 	mla	r2, r2, r3, r5
 8017b7e:	b292      	uxth	r2, r2
 8017b80:	1c55      	adds	r5, r2, #1
 8017b82:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017b86:	784d      	ldrb	r5, [r1, #1]
 8017b88:	fb15 f503 	smulbb	r5, r5, r3
 8017b8c:	1212      	asrs	r2, r2, #8
 8017b8e:	700a      	strb	r2, [r1, #0]
 8017b90:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017b94:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8017b98:	fb02 5200 	mla	r2, r2, r0, r5
 8017b9c:	b292      	uxth	r2, r2
 8017b9e:	1c55      	adds	r5, r2, #1
 8017ba0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017ba4:	1212      	asrs	r2, r2, #8
 8017ba6:	704a      	strb	r2, [r1, #1]
 8017ba8:	788a      	ldrb	r2, [r1, #2]
 8017baa:	fb12 f303 	smulbb	r3, r2, r3
 8017bae:	fb04 3300 	mla	r3, r4, r0, r3
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	1c5a      	adds	r2, r3, #1
 8017bb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017bba:	121b      	asrs	r3, r3, #8
 8017bbc:	708b      	strb	r3, [r1, #2]
 8017bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc2:	2600      	movs	r6, #0
 8017bc4:	e75a      	b.n	8017a7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8017bc6:	2500      	movs	r5, #0
 8017bc8:	e776      	b.n	8017ab8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8017bca:	463d      	mov	r5, r7
 8017bcc:	e774      	b.n	8017ab8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8017bce:	2400      	movs	r4, #0
 8017bd0:	e78f      	b.n	8017af2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8017bd2:	4663      	mov	r3, ip
 8017bd4:	4664      	mov	r4, ip
 8017bd6:	e7a5      	b.n	8017b24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e7a3      	b.n	8017b24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8017bdc:	463b      	mov	r3, r7
 8017bde:	e7a1      	b.n	8017b24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8017be0:	2400b22c 	.word	0x2400b22c

08017be4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be8:	b097      	sub	sp, #92	; 0x5c
 8017bea:	9214      	str	r2, [sp, #80]	; 0x50
 8017bec:	9309      	str	r3, [sp, #36]	; 0x24
 8017bee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017bf0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8017bf4:	9015      	str	r0, [sp, #84]	; 0x54
 8017bf6:	910c      	str	r1, [sp, #48]	; 0x30
 8017bf8:	6850      	ldr	r0, [r2, #4]
 8017bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8017bfc:	6812      	ldr	r2, [r2, #0]
 8017bfe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8017c02:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8017c06:	fb00 1303 	mla	r3, r0, r3, r1
 8017c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c0e:	eb02 0a03 	add.w	sl, r2, r3
 8017c12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017c14:	689b      	ldr	r3, [r3, #8]
 8017c16:	3301      	adds	r3, #1
 8017c18:	f023 0301 	bic.w	r3, r3, #1
 8017c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017c20:	681f      	ldr	r7, [r3, #0]
 8017c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	dc03      	bgt.n	8017c30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	f340 8247 	ble.w	80180be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8017c30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017c32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017c36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017c3a:	1e48      	subs	r0, r1, #1
 8017c3c:	f102 3cff 	add.w	ip, r2, #4294967295
 8017c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	f340 80e5 	ble.w	8017e12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8017c48:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8017c4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017c50:	d406      	bmi.n	8017c60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017c52:	4586      	cmp	lr, r0
 8017c54:	da04      	bge.n	8017c60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	db02      	blt.n	8017c60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017c5a:	4563      	cmp	r3, ip
 8017c5c:	f2c0 80da 	blt.w	8017e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8017c60:	f11e 0e01 	adds.w	lr, lr, #1
 8017c64:	f100 80cb 	bmi.w	8017dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8017c68:	4571      	cmp	r1, lr
 8017c6a:	f2c0 80c8 	blt.w	8017dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8017c6e:	3301      	adds	r3, #1
 8017c70:	f100 80c5 	bmi.w	8017dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8017c74:	429a      	cmp	r2, r3
 8017c76:	f2c0 80c2 	blt.w	8017dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8017c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c7c:	46d0      	mov	r8, sl
 8017c7e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8017c82:	930d      	str	r3, [sp, #52]	; 0x34
 8017c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f340 80e3 	ble.w	8017e52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8017c8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017c8e:	1430      	asrs	r0, r6, #16
 8017c90:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8017c94:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017c98:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8017c9c:	142b      	asrs	r3, r5, #16
 8017c9e:	f100 812e 	bmi.w	8017efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8017ca2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8017ca6:	455b      	cmp	r3, fp
 8017ca8:	f280 8129 	bge.w	8017efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8017cac:	2800      	cmp	r0, #0
 8017cae:	f2c0 8126 	blt.w	8017efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8017cb2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8017cb6:	4558      	cmp	r0, fp
 8017cb8:	f280 8121 	bge.w	8017efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8017cbc:	fb00 3309 	mla	r3, r0, r9, r3
 8017cc0:	0858      	lsrs	r0, r3, #1
 8017cc2:	07dc      	lsls	r4, r3, #31
 8017cc4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8017cc8:	bf54      	ite	pl
 8017cca:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017cce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017cd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017cd6:	fa5f fc8c 	uxtb.w	ip, ip
 8017cda:	2a00      	cmp	r2, #0
 8017cdc:	f000 80fe 	beq.w	8017edc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8017ce0:	1c58      	adds	r0, r3, #1
 8017ce2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8017ce6:	07c0      	lsls	r0, r0, #31
 8017ce8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8017cec:	bf54      	ite	pl
 8017cee:	f00e 0e0f 	andpl.w	lr, lr, #15
 8017cf2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8017cf6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8017cfa:	fa5f f08e 	uxtb.w	r0, lr
 8017cfe:	9010      	str	r0, [sp, #64]	; 0x40
 8017d00:	b1d9      	cbz	r1, 8017d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017d02:	444b      	add	r3, r9
 8017d04:	0858      	lsrs	r0, r3, #1
 8017d06:	07dc      	lsls	r4, r3, #31
 8017d08:	f103 0301 	add.w	r3, r3, #1
 8017d0c:	5c38      	ldrb	r0, [r7, r0]
 8017d0e:	bf54      	ite	pl
 8017d10:	f000 000f 	andpl.w	r0, r0, #15
 8017d14:	1100      	asrmi	r0, r0, #4
 8017d16:	07dc      	lsls	r4, r3, #31
 8017d18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017d1c:	b2c0      	uxtb	r0, r0
 8017d1e:	900a      	str	r0, [sp, #40]	; 0x28
 8017d20:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8017d24:	f817 e000 	ldrb.w	lr, [r7, r0]
 8017d28:	bf54      	ite	pl
 8017d2a:	f00e 030f 	andpl.w	r3, lr, #15
 8017d2e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8017d32:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	9311      	str	r3, [sp, #68]	; 0x44
 8017d3a:	b292      	uxth	r2, r2
 8017d3c:	b289      	uxth	r1, r1
 8017d3e:	0113      	lsls	r3, r2, #4
 8017d40:	fb02 f001 	mul.w	r0, r2, r1
 8017d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017d46:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017d4a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8017d4e:	1a1b      	subs	r3, r3, r0
 8017d50:	b289      	uxth	r1, r1
 8017d52:	b29b      	uxth	r3, r3
 8017d54:	ebae 0e01 	sub.w	lr, lr, r1
 8017d58:	4353      	muls	r3, r2
 8017d5a:	fa1f fe8e 	uxth.w	lr, lr
 8017d5e:	fb0c 320e 	mla	r2, ip, lr, r3
 8017d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d64:	fb01 2203 	mla	r2, r1, r3, r2
 8017d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d6a:	fb00 2203 	mla	r2, r0, r3, r2
 8017d6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017d72:	2a00      	cmp	r2, #0
 8017d74:	d039      	beq.n	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017d76:	4bc7      	ldr	r3, [pc, #796]	; (8018094 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8017d78:	6819      	ldr	r1, [r3, #0]
 8017d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d7c:	fa5f fc81 	uxtb.w	ip, r1
 8017d80:	435a      	muls	r2, r3
 8017d82:	1c53      	adds	r3, r2, #1
 8017d84:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017d88:	1212      	asrs	r2, r2, #8
 8017d8a:	b290      	uxth	r0, r2
 8017d8c:	43d2      	mvns	r2, r2
 8017d8e:	fb1c fc00 	smulbb	ip, ip, r0
 8017d92:	b2d3      	uxtb	r3, r2
 8017d94:	f898 2000 	ldrb.w	r2, [r8]
 8017d98:	fb02 c203 	mla	r2, r2, r3, ip
 8017d9c:	b292      	uxth	r2, r2
 8017d9e:	f102 0c01 	add.w	ip, r2, #1
 8017da2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017da6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017daa:	fb1c fc03 	smulbb	ip, ip, r3
 8017dae:	1212      	asrs	r2, r2, #8
 8017db0:	f888 2000 	strb.w	r2, [r8]
 8017db4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8017db8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8017dbc:	fb02 c200 	mla	r2, r2, r0, ip
 8017dc0:	b292      	uxth	r2, r2
 8017dc2:	f102 0c01 	add.w	ip, r2, #1
 8017dc6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017dca:	1212      	asrs	r2, r2, #8
 8017dcc:	f888 2001 	strb.w	r2, [r8, #1]
 8017dd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8017dd4:	fb12 f303 	smulbb	r3, r2, r3
 8017dd8:	fb01 3300 	mla	r3, r1, r0, r3
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	1c5a      	adds	r2, r3, #1
 8017de0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017de4:	121b      	asrs	r3, r3, #8
 8017de6:	f888 3002 	strb.w	r3, [r8, #2]
 8017dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017dec:	f108 0803 	add.w	r8, r8, #3
 8017df0:	441d      	add	r5, r3
 8017df2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017df4:	441e      	add	r6, r3
 8017df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017df8:	3b01      	subs	r3, #1
 8017dfa:	930d      	str	r3, [sp, #52]	; 0x34
 8017dfc:	e742      	b.n	8017c84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017e00:	f10a 0a03 	add.w	sl, sl, #3
 8017e04:	441d      	add	r5, r3
 8017e06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017e08:	441e      	add	r6, r3
 8017e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e10:	e716      	b.n	8017c40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017e12:	d024      	beq.n	8017e5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8017e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e16:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8017e18:	3b01      	subs	r3, #1
 8017e1a:	fb00 5003 	mla	r0, r0, r3, r5
 8017e1e:	1400      	asrs	r0, r0, #16
 8017e20:	f53f af2b 	bmi.w	8017c7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017e24:	3901      	subs	r1, #1
 8017e26:	4288      	cmp	r0, r1
 8017e28:	f6bf af27 	bge.w	8017c7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017e2c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8017e2e:	fb01 6303 	mla	r3, r1, r3, r6
 8017e32:	141b      	asrs	r3, r3, #16
 8017e34:	f53f af21 	bmi.w	8017c7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017e38:	3a01      	subs	r2, #1
 8017e3a:	4293      	cmp	r3, r2
 8017e3c:	f6bf af1d 	bge.w	8017c7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017e40:	f10a 0e03 	add.w	lr, sl, #3
 8017e44:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8017e48:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8017e4c:	f1b8 0f00 	cmp.w	r8, #0
 8017e50:	dc76      	bgt.n	8017f40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8017e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e54:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017e58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017e5c:	44a2      	add	sl, r4
 8017e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f340 812c 	ble.w	80180be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8017e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017e70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017e74:	eef0 6a62 	vmov.f32	s13, s5
 8017e78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017e80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e84:	ee16 5a90 	vmov	r5, s13
 8017e88:	eef0 6a43 	vmov.f32	s13, s6
 8017e8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e90:	ee16 6a90 	vmov	r6, s13
 8017e94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017e98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017e9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017ea0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017ea4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ea8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017eac:	ee12 2a90 	vmov	r2, s5
 8017eb0:	eef0 2a47 	vmov.f32	s5, s14
 8017eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8017eb8:	ee13 2a10 	vmov	r2, s6
 8017ebc:	9323      	str	r3, [sp, #140]	; 0x8c
 8017ebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ec0:	eeb0 3a67 	vmov.f32	s6, s15
 8017ec4:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ec8:	9324      	str	r3, [sp, #144]	; 0x90
 8017eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ece:	3b01      	subs	r3, #1
 8017ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8017ed2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ed4:	bf08      	it	eq
 8017ed6:	4613      	moveq	r3, r2
 8017ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8017eda:	e6a2      	b.n	8017c22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017edc:	2900      	cmp	r1, #0
 8017ede:	f43f af2c 	beq.w	8017d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017ee2:	eb09 0003 	add.w	r0, r9, r3
 8017ee6:	0843      	lsrs	r3, r0, #1
 8017ee8:	07c0      	lsls	r0, r0, #31
 8017eea:	5cfb      	ldrb	r3, [r7, r3]
 8017eec:	bf54      	ite	pl
 8017eee:	f003 030f 	andpl.w	r3, r3, #15
 8017ef2:	111b      	asrmi	r3, r3, #4
 8017ef4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017ef8:	b2db      	uxtb	r3, r3
 8017efa:	930a      	str	r3, [sp, #40]	; 0x28
 8017efc:	e71d      	b.n	8017d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017efe:	f113 0b01 	adds.w	fp, r3, #1
 8017f02:	f53f af72 	bmi.w	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017f06:	45dc      	cmp	ip, fp
 8017f08:	f6ff af6f 	blt.w	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017f0c:	f110 0b01 	adds.w	fp, r0, #1
 8017f10:	f53f af6b 	bmi.w	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017f14:	45de      	cmp	lr, fp
 8017f16:	f6ff af68 	blt.w	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017f1a:	9302      	str	r3, [sp, #8]
 8017f1c:	fa0f f38e 	sxth.w	r3, lr
 8017f20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017f22:	9301      	str	r3, [sp, #4]
 8017f24:	fa0f f38c 	sxth.w	r3, ip
 8017f28:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8017f2c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	463a      	mov	r2, r7
 8017f34:	464b      	mov	r3, r9
 8017f36:	4641      	mov	r1, r8
 8017f38:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017f3a:	f7ff fd79 	bl	8017a30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8017f3e:	e754      	b.n	8017dea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8017f40:	142a      	asrs	r2, r5, #16
 8017f42:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017f46:	1433      	asrs	r3, r6, #16
 8017f48:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017f4c:	fb09 2303 	mla	r3, r9, r3, r2
 8017f50:	085a      	lsrs	r2, r3, #1
 8017f52:	07dc      	lsls	r4, r3, #31
 8017f54:	5cba      	ldrb	r2, [r7, r2]
 8017f56:	bf54      	ite	pl
 8017f58:	f002 020f 	andpl.w	r2, r2, #15
 8017f5c:	1112      	asrmi	r2, r2, #4
 8017f5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017f62:	b2d2      	uxtb	r2, r2
 8017f64:	2900      	cmp	r1, #0
 8017f66:	f000 8097 	beq.w	8018098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8017f6a:	f103 0b01 	add.w	fp, r3, #1
 8017f6e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8017f72:	f01b 0f01 	tst.w	fp, #1
 8017f76:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017f7a:	bf0c      	ite	eq
 8017f7c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8017f80:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8017f84:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017f88:	fa5f f48c 	uxtb.w	r4, ip
 8017f8c:	9412      	str	r4, [sp, #72]	; 0x48
 8017f8e:	b300      	cbz	r0, 8017fd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8017f90:	444b      	add	r3, r9
 8017f92:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017f96:	07dc      	lsls	r4, r3, #31
 8017f98:	f103 0301 	add.w	r3, r3, #1
 8017f9c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017fa0:	bf54      	ite	pl
 8017fa2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017fa6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017faa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017fae:	fa5f f48c 	uxtb.w	r4, ip
 8017fb2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8017fb6:	940b      	str	r4, [sp, #44]	; 0x2c
 8017fb8:	07dc      	lsls	r4, r3, #31
 8017fba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8017fbe:	bf54      	ite	pl
 8017fc0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017fc4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017fc8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017fcc:	fa5f f38c 	uxtb.w	r3, ip
 8017fd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fd2:	b289      	uxth	r1, r1
 8017fd4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017fd6:	b280      	uxth	r0, r0
 8017fd8:	fb01 f300 	mul.w	r3, r1, r0
 8017fdc:	0109      	lsls	r1, r1, #4
 8017fde:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8017fe2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8017fe6:	1ac9      	subs	r1, r1, r3
 8017fe8:	b280      	uxth	r0, r0
 8017fea:	b289      	uxth	r1, r1
 8017fec:	ebac 0c00 	sub.w	ip, ip, r0
 8017ff0:	4361      	muls	r1, r4
 8017ff2:	fa1f fc8c 	uxth.w	ip, ip
 8017ff6:	fb02 120c 	mla	r2, r2, ip, r1
 8017ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ffc:	fb00 2001 	mla	r0, r0, r1, r2
 8018000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018002:	fb03 0302 	mla	r3, r3, r2, r0
 8018006:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801800a:	2b00      	cmp	r3, #0
 801800c:	d039      	beq.n	8018082 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801800e:	4a21      	ldr	r2, [pc, #132]	; (8018094 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8018010:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8018014:	6810      	ldr	r0, [r2, #0]
 8018016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018018:	fa5f fc80 	uxtb.w	ip, r0
 801801c:	4353      	muls	r3, r2
 801801e:	1c5a      	adds	r2, r3, #1
 8018020:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018024:	121b      	asrs	r3, r3, #8
 8018026:	b29a      	uxth	r2, r3
 8018028:	43db      	mvns	r3, r3
 801802a:	fb1c fc02 	smulbb	ip, ip, r2
 801802e:	b2db      	uxtb	r3, r3
 8018030:	fb01 c103 	mla	r1, r1, r3, ip
 8018034:	b289      	uxth	r1, r1
 8018036:	f101 0c01 	add.w	ip, r1, #1
 801803a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801803e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8018042:	fb1c fc03 	smulbb	ip, ip, r3
 8018046:	1209      	asrs	r1, r1, #8
 8018048:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801804c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018050:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8018054:	fb01 c102 	mla	r1, r1, r2, ip
 8018058:	b289      	uxth	r1, r1
 801805a:	f101 0c01 	add.w	ip, r1, #1
 801805e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8018062:	1209      	asrs	r1, r1, #8
 8018064:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018068:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801806c:	fb11 f303 	smulbb	r3, r1, r3
 8018070:	fb00 3002 	mla	r0, r0, r2, r3
 8018074:	b280      	uxth	r0, r0
 8018076:	1c42      	adds	r2, r0, #1
 8018078:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801807c:	1200      	asrs	r0, r0, #8
 801807e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8018082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018084:	f10e 0e03 	add.w	lr, lr, #3
 8018088:	f108 38ff 	add.w	r8, r8, #4294967295
 801808c:	441d      	add	r5, r3
 801808e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018090:	441e      	add	r6, r3
 8018092:	e6db      	b.n	8017e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8018094:	2400b22c 	.word	0x2400b22c
 8018098:	2800      	cmp	r0, #0
 801809a:	d09a      	beq.n	8017fd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801809c:	444b      	add	r3, r9
 801809e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80180a2:	07db      	lsls	r3, r3, #31
 80180a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80180a8:	bf54      	ite	pl
 80180aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80180ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80180b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80180b6:	fa5f f38c 	uxtb.w	r3, ip
 80180ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80180bc:	e789      	b.n	8017fd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80180be:	b017      	add	sp, #92	; 0x5c
 80180c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80180c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80180cc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80180d0:	2d00      	cmp	r5, #0
 80180d2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80180d6:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80180da:	fb04 5e03 	mla	lr, r4, r3, r5
 80180de:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80180e2:	f2c0 80b1 	blt.w	8018248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80180e6:	45a9      	cmp	r9, r5
 80180e8:	f340 80ae 	ble.w	8018248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80180ec:	2c00      	cmp	r4, #0
 80180ee:	f2c0 80ab 	blt.w	8018248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80180f2:	45a0      	cmp	r8, r4
 80180f4:	f340 80a8 	ble.w	8018248 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80180f8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80180fc:	f01e 0f01 	tst.w	lr, #1
 8018100:	5d97      	ldrb	r7, [r2, r6]
 8018102:	bf0c      	ite	eq
 8018104:	f007 070f 	andeq.w	r7, r7, #15
 8018108:	113f      	asrne	r7, r7, #4
 801810a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801810e:	b2ff      	uxtb	r7, r7
 8018110:	f115 0a01 	adds.w	sl, r5, #1
 8018114:	f100 809a 	bmi.w	801824c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8018118:	45d1      	cmp	r9, sl
 801811a:	f340 8097 	ble.w	801824c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801811e:	2c00      	cmp	r4, #0
 8018120:	f2c0 8094 	blt.w	801824c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8018124:	45a0      	cmp	r8, r4
 8018126:	f340 8091 	ble.w	801824c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801812a:	2800      	cmp	r0, #0
 801812c:	f000 8090 	beq.w	8018250 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8018130:	f10e 0b01 	add.w	fp, lr, #1
 8018134:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8018138:	f01b 0f01 	tst.w	fp, #1
 801813c:	5d96      	ldrb	r6, [r2, r6]
 801813e:	bf0c      	ite	eq
 8018140:	f006 060f 	andeq.w	r6, r6, #15
 8018144:	1136      	asrne	r6, r6, #4
 8018146:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801814a:	b2f6      	uxtb	r6, r6
 801814c:	f1bc 0f00 	cmp.w	ip, #0
 8018150:	f000 8082 	beq.w	8018258 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8018154:	2d00      	cmp	r5, #0
 8018156:	f104 0401 	add.w	r4, r4, #1
 801815a:	db7b      	blt.n	8018254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801815c:	45a9      	cmp	r9, r5
 801815e:	dd79      	ble.n	8018254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8018160:	2c00      	cmp	r4, #0
 8018162:	db77      	blt.n	8018254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8018164:	45a0      	cmp	r8, r4
 8018166:	dd75      	ble.n	8018254 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8018168:	eb03 0b0e 	add.w	fp, r3, lr
 801816c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8018170:	f01b 0f01 	tst.w	fp, #1
 8018174:	5d55      	ldrb	r5, [r2, r5]
 8018176:	bf0c      	ite	eq
 8018178:	f005 050f 	andeq.w	r5, r5, #15
 801817c:	112d      	asrne	r5, r5, #4
 801817e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8018182:	b2ed      	uxtb	r5, r5
 8018184:	f1ba 0f00 	cmp.w	sl, #0
 8018188:	db69      	blt.n	801825e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801818a:	45d1      	cmp	r9, sl
 801818c:	dd67      	ble.n	801825e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801818e:	2c00      	cmp	r4, #0
 8018190:	db65      	blt.n	801825e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8018192:	45a0      	cmp	r8, r4
 8018194:	dd63      	ble.n	801825e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8018196:	2800      	cmp	r0, #0
 8018198:	d063      	beq.n	8018262 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801819a:	3301      	adds	r3, #1
 801819c:	449e      	add	lr, r3
 801819e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80181a2:	f01e 0f01 	tst.w	lr, #1
 80181a6:	5cd4      	ldrb	r4, [r2, r3]
 80181a8:	bf0c      	ite	eq
 80181aa:	f004 040f 	andeq.w	r4, r4, #15
 80181ae:	1124      	asrne	r4, r4, #4
 80181b0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80181b4:	b2e3      	uxtb	r3, r4
 80181b6:	b282      	uxth	r2, r0
 80181b8:	fa1f fc8c 	uxth.w	ip, ip
 80181bc:	fb02 f40c 	mul.w	r4, r2, ip
 80181c0:	0112      	lsls	r2, r2, #4
 80181c2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80181c6:	fa1f f08c 	uxth.w	r0, ip
 80181ca:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80181ce:	1b12      	subs	r2, r2, r4
 80181d0:	ebac 0c00 	sub.w	ip, ip, r0
 80181d4:	b292      	uxth	r2, r2
 80181d6:	fa1f fc8c 	uxth.w	ip, ip
 80181da:	4372      	muls	r2, r6
 80181dc:	fb07 220c 	mla	r2, r7, ip, r2
 80181e0:	fb00 2005 	mla	r0, r0, r5, r2
 80181e4:	fb04 0303 	mla	r3, r4, r3, r0
 80181e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80181ec:	b353      	cbz	r3, 8018244 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80181ee:	4a1e      	ldr	r2, [pc, #120]	; (8018268 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80181f0:	7808      	ldrb	r0, [r1, #0]
 80181f2:	6814      	ldr	r4, [r2, #0]
 80181f4:	b29a      	uxth	r2, r3
 80181f6:	43db      	mvns	r3, r3
 80181f8:	b2e5      	uxtb	r5, r4
 80181fa:	b2db      	uxtb	r3, r3
 80181fc:	fb15 f502 	smulbb	r5, r5, r2
 8018200:	fb00 5003 	mla	r0, r0, r3, r5
 8018204:	b280      	uxth	r0, r0
 8018206:	1c45      	adds	r5, r0, #1
 8018208:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801820c:	784d      	ldrb	r5, [r1, #1]
 801820e:	fb15 f503 	smulbb	r5, r5, r3
 8018212:	1200      	asrs	r0, r0, #8
 8018214:	7008      	strb	r0, [r1, #0]
 8018216:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801821a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801821e:	fb00 5002 	mla	r0, r0, r2, r5
 8018222:	b280      	uxth	r0, r0
 8018224:	1c45      	adds	r5, r0, #1
 8018226:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801822a:	1200      	asrs	r0, r0, #8
 801822c:	7048      	strb	r0, [r1, #1]
 801822e:	7888      	ldrb	r0, [r1, #2]
 8018230:	fb10 f303 	smulbb	r3, r0, r3
 8018234:	fb04 3202 	mla	r2, r4, r2, r3
 8018238:	b292      	uxth	r2, r2
 801823a:	1c53      	adds	r3, r2, #1
 801823c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018240:	1212      	asrs	r2, r2, #8
 8018242:	708a      	strb	r2, [r1, #2]
 8018244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018248:	2700      	movs	r7, #0
 801824a:	e761      	b.n	8018110 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801824c:	2600      	movs	r6, #0
 801824e:	e77d      	b.n	801814c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8018250:	4606      	mov	r6, r0
 8018252:	e77b      	b.n	801814c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8018254:	2500      	movs	r5, #0
 8018256:	e795      	b.n	8018184 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8018258:	4663      	mov	r3, ip
 801825a:	4665      	mov	r5, ip
 801825c:	e7ab      	b.n	80181b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801825e:	2300      	movs	r3, #0
 8018260:	e7a9      	b.n	80181b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8018262:	4603      	mov	r3, r0
 8018264:	e7a7      	b.n	80181b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8018266:	bf00      	nop
 8018268:	2400b22c 	.word	0x2400b22c

0801826c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018270:	b093      	sub	sp, #76	; 0x4c
 8018272:	461c      	mov	r4, r3
 8018274:	920c      	str	r2, [sp, #48]	; 0x30
 8018276:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018278:	9011      	str	r0, [sp, #68]	; 0x44
 801827a:	9107      	str	r1, [sp, #28]
 801827c:	6850      	ldr	r0, [r2, #4]
 801827e:	6812      	ldr	r2, [r2, #0]
 8018280:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8018284:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8018288:	fb00 1303 	mla	r3, r0, r3, r1
 801828c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018290:	eb02 0b03 	add.w	fp, r2, r3
 8018294:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018296:	689b      	ldr	r3, [r3, #8]
 8018298:	3301      	adds	r3, #1
 801829a:	f023 0301 	bic.w	r3, r3, #1
 801829e:	9309      	str	r3, [sp, #36]	; 0x24
 80182a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182a2:	f8d3 8000 	ldr.w	r8, [r3]
 80182a6:	9b07      	ldr	r3, [sp, #28]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	dc03      	bgt.n	80182b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80182ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	f340 822b 	ble.w	801870a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80182b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80182b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80182ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80182be:	1e48      	subs	r0, r1, #1
 80182c0:	1e57      	subs	r7, r2, #1
 80182c2:	2c00      	cmp	r4, #0
 80182c4:	f340 80d7 	ble.w	8018476 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80182c8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80182cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80182d0:	d406      	bmi.n	80182e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80182d2:	4584      	cmp	ip, r0
 80182d4:	da04      	bge.n	80182e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	db02      	blt.n	80182e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80182da:	42bb      	cmp	r3, r7
 80182dc:	f2c0 80cc 	blt.w	8018478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80182e0:	f11c 0c01 	adds.w	ip, ip, #1
 80182e4:	f100 80bf 	bmi.w	8018466 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80182e8:	4561      	cmp	r1, ip
 80182ea:	f2c0 80bc 	blt.w	8018466 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80182ee:	3301      	adds	r3, #1
 80182f0:	f100 80b9 	bmi.w	8018466 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80182f4:	429a      	cmp	r2, r3
 80182f6:	f2c0 80b6 	blt.w	8018466 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80182fa:	46a2      	mov	sl, r4
 80182fc:	465f      	mov	r7, fp
 80182fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8018302:	f1ba 0f00 	cmp.w	sl, #0
 8018306:	f340 80d4 	ble.w	80184b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801830a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801830e:	1430      	asrs	r0, r6, #16
 8018310:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018314:	9308      	str	r3, [sp, #32]
 8018316:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018318:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801831c:	142b      	asrs	r3, r5, #16
 801831e:	f100 8124 	bmi.w	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8018322:	f10c 32ff 	add.w	r2, ip, #4294967295
 8018326:	4293      	cmp	r3, r2
 8018328:	f280 811f 	bge.w	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801832c:	2800      	cmp	r0, #0
 801832e:	f2c0 811c 	blt.w	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8018332:	f10e 32ff 	add.w	r2, lr, #4294967295
 8018336:	4290      	cmp	r0, r2
 8018338:	f280 8117 	bge.w	801856a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801833c:	fb00 3309 	mla	r3, r0, r9, r3
 8018340:	0858      	lsrs	r0, r3, #1
 8018342:	07da      	lsls	r2, r3, #31
 8018344:	9a08      	ldr	r2, [sp, #32]
 8018346:	f818 c000 	ldrb.w	ip, [r8, r0]
 801834a:	bf54      	ite	pl
 801834c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018350:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018354:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018358:	fa5f fc8c 	uxtb.w	ip, ip
 801835c:	2a00      	cmp	r2, #0
 801835e:	f000 80ed 	beq.w	801853c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8018362:	1c58      	adds	r0, r3, #1
 8018364:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8018368:	07c0      	lsls	r0, r0, #31
 801836a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801836e:	bf54      	ite	pl
 8018370:	f00e 0e0f 	andpl.w	lr, lr, #15
 8018374:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8018378:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801837c:	fa5f fe8e 	uxtb.w	lr, lr
 8018380:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8018384:	b1c9      	cbz	r1, 80183ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018386:	444b      	add	r3, r9
 8018388:	0858      	lsrs	r0, r3, #1
 801838a:	07da      	lsls	r2, r3, #31
 801838c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8018390:	bf54      	ite	pl
 8018392:	f000 000f 	andpl.w	r0, r0, #15
 8018396:	1100      	asrmi	r0, r0, #4
 8018398:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801839c:	b2c0      	uxtb	r0, r0
 801839e:	900a      	str	r0, [sp, #40]	; 0x28
 80183a0:	1c58      	adds	r0, r3, #1
 80183a2:	0843      	lsrs	r3, r0, #1
 80183a4:	07c2      	lsls	r2, r0, #31
 80183a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80183aa:	bf54      	ite	pl
 80183ac:	f003 030f 	andpl.w	r3, r3, #15
 80183b0:	111b      	asrmi	r3, r3, #4
 80183b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	930e      	str	r3, [sp, #56]	; 0x38
 80183ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80183be:	b289      	uxth	r1, r1
 80183c0:	fb02 f301 	mul.w	r3, r2, r1
 80183c4:	0112      	lsls	r2, r2, #4
 80183c6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80183ca:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80183ce:	1ad2      	subs	r2, r2, r3
 80183d0:	b289      	uxth	r1, r1
 80183d2:	b292      	uxth	r2, r2
 80183d4:	1a40      	subs	r0, r0, r1
 80183d6:	fa1f fe80 	uxth.w	lr, r0
 80183da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80183dc:	4342      	muls	r2, r0
 80183de:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80183e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183e4:	fb01 c102 	mla	r1, r1, r2, ip
 80183e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183ea:	fb03 1302 	mla	r3, r3, r2, r1
 80183ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80183f2:	b383      	cbz	r3, 8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80183f4:	4ac6      	ldr	r2, [pc, #792]	; (8018710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80183f6:	2bff      	cmp	r3, #255	; 0xff
 80183f8:	6812      	ldr	r2, [r2, #0]
 80183fa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80183fe:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8018402:	b2d2      	uxtb	r2, r2
 8018404:	f000 80ac 	beq.w	8018560 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8018408:	b299      	uxth	r1, r3
 801840a:	43db      	mvns	r3, r3
 801840c:	f897 c000 	ldrb.w	ip, [r7]
 8018410:	fb12 f201 	smulbb	r2, r2, r1
 8018414:	b2db      	uxtb	r3, r3
 8018416:	fb10 f001 	smulbb	r0, r0, r1
 801841a:	fb0c 2203 	mla	r2, ip, r3, r2
 801841e:	fb1e f101 	smulbb	r1, lr, r1
 8018422:	b292      	uxth	r2, r2
 8018424:	f102 0c01 	add.w	ip, r2, #1
 8018428:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801842c:	1212      	asrs	r2, r2, #8
 801842e:	703a      	strb	r2, [r7, #0]
 8018430:	787a      	ldrb	r2, [r7, #1]
 8018432:	fb02 0003 	mla	r0, r2, r3, r0
 8018436:	b280      	uxth	r0, r0
 8018438:	1c42      	adds	r2, r0, #1
 801843a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801843e:	78ba      	ldrb	r2, [r7, #2]
 8018440:	fb02 1303 	mla	r3, r2, r3, r1
 8018444:	1200      	asrs	r0, r0, #8
 8018446:	b29b      	uxth	r3, r3
 8018448:	7078      	strb	r0, [r7, #1]
 801844a:	f103 0e01 	add.w	lr, r3, #1
 801844e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8018452:	121b      	asrs	r3, r3, #8
 8018454:	70bb      	strb	r3, [r7, #2]
 8018456:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018458:	3703      	adds	r7, #3
 801845a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801845e:	441d      	add	r5, r3
 8018460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018462:	441e      	add	r6, r3
 8018464:	e74d      	b.n	8018302 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018466:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018468:	3c01      	subs	r4, #1
 801846a:	f10b 0b03 	add.w	fp, fp, #3
 801846e:	441d      	add	r5, r3
 8018470:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018472:	441e      	add	r6, r3
 8018474:	e725      	b.n	80182c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018476:	d021      	beq.n	80184bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8018478:	1e63      	subs	r3, r4, #1
 801847a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801847c:	fb00 5003 	mla	r0, r0, r3, r5
 8018480:	1400      	asrs	r0, r0, #16
 8018482:	f53f af3a 	bmi.w	80182fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018486:	3901      	subs	r1, #1
 8018488:	4288      	cmp	r0, r1
 801848a:	f6bf af36 	bge.w	80182fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801848e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018490:	fb01 6303 	mla	r3, r1, r3, r6
 8018494:	141b      	asrs	r3, r3, #16
 8018496:	f53f af30 	bmi.w	80182fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801849a:	3a01      	subs	r2, #1
 801849c:	4293      	cmp	r3, r2
 801849e:	f6bf af2c 	bge.w	80182fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80184a2:	f10b 0c03 	add.w	ip, fp, #3
 80184a6:	46a6      	mov	lr, r4
 80184a8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80184ac:	f1be 0f00 	cmp.w	lr, #0
 80184b0:	dc79      	bgt.n	80185a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80184b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80184b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80184ba:	44a3      	add	fp, r4
 80184bc:	9b07      	ldr	r3, [sp, #28]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f340 8123 	ble.w	801870a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80184c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80184c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80184ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80184ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80184d2:	eef0 6a62 	vmov.f32	s13, s5
 80184d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80184da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80184de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80184e2:	ee16 5a90 	vmov	r5, s13
 80184e6:	eef0 6a43 	vmov.f32	s13, s6
 80184ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80184ee:	ee16 6a90 	vmov	r6, s13
 80184f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80184f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80184fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80184fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018506:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801850a:	ee12 2a90 	vmov	r2, s5
 801850e:	eef0 2a47 	vmov.f32	s5, s14
 8018512:	fb92 f3f3 	sdiv	r3, r2, r3
 8018516:	ee13 2a10 	vmov	r2, s6
 801851a:	931f      	str	r3, [sp, #124]	; 0x7c
 801851c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801851e:	eeb0 3a67 	vmov.f32	s6, s15
 8018522:	fb92 f3f3 	sdiv	r3, r2, r3
 8018526:	9320      	str	r3, [sp, #128]	; 0x80
 8018528:	9b07      	ldr	r3, [sp, #28]
 801852a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801852c:	3b01      	subs	r3, #1
 801852e:	9307      	str	r3, [sp, #28]
 8018530:	bf08      	it	eq
 8018532:	4614      	moveq	r4, r2
 8018534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018536:	bf18      	it	ne
 8018538:	461c      	movne	r4, r3
 801853a:	e6b4      	b.n	80182a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801853c:	2900      	cmp	r1, #0
 801853e:	f43f af3c 	beq.w	80183ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018542:	eb09 0003 	add.w	r0, r9, r3
 8018546:	0843      	lsrs	r3, r0, #1
 8018548:	07c0      	lsls	r0, r0, #31
 801854a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801854e:	bf54      	ite	pl
 8018550:	f003 030f 	andpl.w	r3, r3, #15
 8018554:	111b      	asrmi	r3, r3, #4
 8018556:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801855a:	b2db      	uxtb	r3, r3
 801855c:	930a      	str	r3, [sp, #40]	; 0x28
 801855e:	e72c      	b.n	80183ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018560:	703a      	strb	r2, [r7, #0]
 8018562:	7078      	strb	r0, [r7, #1]
 8018564:	f887 e002 	strb.w	lr, [r7, #2]
 8018568:	e775      	b.n	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801856a:	1c5a      	adds	r2, r3, #1
 801856c:	f53f af73 	bmi.w	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8018570:	4594      	cmp	ip, r2
 8018572:	f6ff af70 	blt.w	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8018576:	1c42      	adds	r2, r0, #1
 8018578:	f53f af6d 	bmi.w	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801857c:	4596      	cmp	lr, r2
 801857e:	f6ff af6a 	blt.w	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8018582:	9302      	str	r3, [sp, #8]
 8018584:	fa0f f38e 	sxth.w	r3, lr
 8018588:	9a08      	ldr	r2, [sp, #32]
 801858a:	9301      	str	r3, [sp, #4]
 801858c:	fa0f f38c 	sxth.w	r3, ip
 8018590:	9105      	str	r1, [sp, #20]
 8018592:	4639      	mov	r1, r7
 8018594:	9300      	str	r3, [sp, #0]
 8018596:	464b      	mov	r3, r9
 8018598:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801859c:	4642      	mov	r2, r8
 801859e:	9811      	ldr	r0, [sp, #68]	; 0x44
 80185a0:	f7ff fd90 	bl	80180c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80185a4:	e757      	b.n	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80185a6:	142a      	asrs	r2, r5, #16
 80185a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80185ac:	1433      	asrs	r3, r6, #16
 80185ae:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80185b2:	fb09 2303 	mla	r3, r9, r3, r2
 80185b6:	085a      	lsrs	r2, r3, #1
 80185b8:	07d9      	lsls	r1, r3, #31
 80185ba:	f818 2002 	ldrb.w	r2, [r8, r2]
 80185be:	bf54      	ite	pl
 80185c0:	f002 020f 	andpl.w	r2, r2, #15
 80185c4:	1112      	asrmi	r2, r2, #4
 80185c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80185ca:	b2d2      	uxtb	r2, r2
 80185cc:	2800      	cmp	r0, #0
 80185ce:	f000 8085 	beq.w	80186dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80185d2:	f103 0a01 	add.w	sl, r3, #1
 80185d6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80185da:	f01a 0f01 	tst.w	sl, #1
 80185de:	f818 1001 	ldrb.w	r1, [r8, r1]
 80185e2:	bf0c      	ite	eq
 80185e4:	f001 010f 	andeq.w	r1, r1, #15
 80185e8:	1109      	asrne	r1, r1, #4
 80185ea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80185ee:	b2c9      	uxtb	r1, r1
 80185f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80185f2:	b1df      	cbz	r7, 801862c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80185f4:	444b      	add	r3, r9
 80185f6:	0859      	lsrs	r1, r3, #1
 80185f8:	f013 0f01 	tst.w	r3, #1
 80185fc:	f103 0301 	add.w	r3, r3, #1
 8018600:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018604:	bf0c      	ite	eq
 8018606:	f001 010f 	andeq.w	r1, r1, #15
 801860a:	1109      	asrne	r1, r1, #4
 801860c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018610:	b2c9      	uxtb	r1, r1
 8018612:	910b      	str	r1, [sp, #44]	; 0x2c
 8018614:	0859      	lsrs	r1, r3, #1
 8018616:	07db      	lsls	r3, r3, #31
 8018618:	f818 1001 	ldrb.w	r1, [r8, r1]
 801861c:	bf54      	ite	pl
 801861e:	f001 010f 	andpl.w	r1, r1, #15
 8018622:	1109      	asrmi	r1, r1, #4
 8018624:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018628:	b2c9      	uxtb	r1, r1
 801862a:	9110      	str	r1, [sp, #64]	; 0x40
 801862c:	b280      	uxth	r0, r0
 801862e:	b2bf      	uxth	r7, r7
 8018630:	fb00 f307 	mul.w	r3, r0, r7
 8018634:	0100      	lsls	r0, r0, #4
 8018636:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801863a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801863e:	1ac0      	subs	r0, r0, r3
 8018640:	b2bf      	uxth	r7, r7
 8018642:	b280      	uxth	r0, r0
 8018644:	1bc9      	subs	r1, r1, r7
 8018646:	fa1f fa81 	uxth.w	sl, r1
 801864a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801864c:	4348      	muls	r0, r1
 801864e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018650:	fb02 020a 	mla	r2, r2, sl, r0
 8018654:	fb07 2701 	mla	r7, r7, r1, r2
 8018658:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801865a:	fb03 7302 	mla	r3, r3, r2, r7
 801865e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018662:	b393      	cbz	r3, 80186ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8018664:	4a2a      	ldr	r2, [pc, #168]	; (8018710 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8018666:	2bff      	cmp	r3, #255	; 0xff
 8018668:	6811      	ldr	r1, [r2, #0]
 801866a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801866e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8018672:	b2c9      	uxtb	r1, r1
 8018674:	d042      	beq.n	80186fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8018676:	b298      	uxth	r0, r3
 8018678:	43db      	mvns	r3, r3
 801867a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801867e:	fb11 f100 	smulbb	r1, r1, r0
 8018682:	b2db      	uxtb	r3, r3
 8018684:	fb17 f700 	smulbb	r7, r7, r0
 8018688:	fb02 1103 	mla	r1, r2, r3, r1
 801868c:	fb1a f000 	smulbb	r0, sl, r0
 8018690:	b289      	uxth	r1, r1
 8018692:	1c4a      	adds	r2, r1, #1
 8018694:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018698:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801869c:	fb02 7703 	mla	r7, r2, r3, r7
 80186a0:	1209      	asrs	r1, r1, #8
 80186a2:	b2bf      	uxth	r7, r7
 80186a4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80186a8:	1c7a      	adds	r2, r7, #1
 80186aa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80186ae:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80186b2:	fb02 0303 	mla	r3, r2, r3, r0
 80186b6:	123f      	asrs	r7, r7, #8
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80186be:	1c5a      	adds	r2, r3, #1
 80186c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80186c4:	121b      	asrs	r3, r3, #8
 80186c6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80186ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80186cc:	f10c 0c03 	add.w	ip, ip, #3
 80186d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80186d4:	441d      	add	r5, r3
 80186d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80186d8:	441e      	add	r6, r3
 80186da:	e6e7      	b.n	80184ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80186dc:	2f00      	cmp	r7, #0
 80186de:	d0a5      	beq.n	801862c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80186e0:	444b      	add	r3, r9
 80186e2:	0859      	lsrs	r1, r3, #1
 80186e4:	07db      	lsls	r3, r3, #31
 80186e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80186ea:	bf54      	ite	pl
 80186ec:	f001 010f 	andpl.w	r1, r1, #15
 80186f0:	1109      	asrmi	r1, r1, #4
 80186f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80186f6:	b2c9      	uxtb	r1, r1
 80186f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80186fa:	e797      	b.n	801862c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80186fc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8018700:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8018704:	f80c ac01 	strb.w	sl, [ip, #-1]
 8018708:	e7df      	b.n	80186ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801870a:	b013      	add	sp, #76	; 0x4c
 801870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018710:	2400b22c 	.word	0x2400b22c

08018714 <CRC_Lock>:
 8018714:	4a20      	ldr	r2, [pc, #128]	; (8018798 <CRC_Lock+0x84>)
 8018716:	b530      	push	{r4, r5, lr}
 8018718:	6813      	ldr	r3, [r2, #0]
 801871a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801871e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8018722:	f023 0301 	bic.w	r3, r3, #1
 8018726:	6013      	str	r3, [r2, #0]
 8018728:	4b1c      	ldr	r3, [pc, #112]	; (801879c <CRC_Lock+0x88>)
 801872a:	681a      	ldr	r2, [r3, #0]
 801872c:	4022      	ands	r2, r4
 801872e:	42aa      	cmp	r2, r5
 8018730:	d005      	beq.n	801873e <CRC_Lock+0x2a>
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	f24c 2270 	movw	r2, #49776	; 0xc270
 8018738:	4023      	ands	r3, r4
 801873a:	4293      	cmp	r3, r2
 801873c:	d124      	bne.n	8018788 <CRC_Lock+0x74>
 801873e:	4b18      	ldr	r3, [pc, #96]	; (80187a0 <CRC_Lock+0x8c>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	bb0b      	cbnz	r3, 8018788 <CRC_Lock+0x74>
 8018744:	4b17      	ldr	r3, [pc, #92]	; (80187a4 <CRC_Lock+0x90>)
 8018746:	681a      	ldr	r2, [r3, #0]
 8018748:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801874c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8018750:	d00d      	beq.n	801876e <CRC_Lock+0x5a>
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	f240 4483 	movw	r4, #1155	; 0x483
 8018758:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801875c:	42a2      	cmp	r2, r4
 801875e:	d006      	beq.n	801876e <CRC_Lock+0x5a>
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f240 4285 	movw	r2, #1157	; 0x485
 8018766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801876a:	4293      	cmp	r3, r2
 801876c:	d10c      	bne.n	8018788 <CRC_Lock+0x74>
 801876e:	4b0e      	ldr	r3, [pc, #56]	; (80187a8 <CRC_Lock+0x94>)
 8018770:	2201      	movs	r2, #1
 8018772:	601a      	str	r2, [r3, #0]
 8018774:	681a      	ldr	r2, [r3, #0]
 8018776:	2a00      	cmp	r2, #0
 8018778:	d1fc      	bne.n	8018774 <CRC_Lock+0x60>
 801877a:	4b0c      	ldr	r3, [pc, #48]	; (80187ac <CRC_Lock+0x98>)
 801877c:	6018      	str	r0, [r3, #0]
 801877e:	6818      	ldr	r0, [r3, #0]
 8018780:	1a43      	subs	r3, r0, r1
 8018782:	4258      	negs	r0, r3
 8018784:	4158      	adcs	r0, r3
 8018786:	bd30      	pop	{r4, r5, pc}
 8018788:	4b09      	ldr	r3, [pc, #36]	; (80187b0 <CRC_Lock+0x9c>)
 801878a:	2201      	movs	r2, #1
 801878c:	601a      	str	r2, [r3, #0]
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	2a00      	cmp	r2, #0
 8018792:	d1fc      	bne.n	801878e <CRC_Lock+0x7a>
 8018794:	4b07      	ldr	r3, [pc, #28]	; (80187b4 <CRC_Lock+0xa0>)
 8018796:	e7f1      	b.n	801877c <CRC_Lock+0x68>
 8018798:	e0002000 	.word	0xe0002000
 801879c:	e000ed00 	.word	0xe000ed00
 80187a0:	e0042000 	.word	0xe0042000
 80187a4:	5c001000 	.word	0x5c001000
 80187a8:	58024c08 	.word	0x58024c08
 80187ac:	58024c00 	.word	0x58024c00
 80187b0:	40023008 	.word	0x40023008
 80187b4:	40023000 	.word	0x40023000

080187b8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80187b8:	6101      	str	r1, [r0, #16]
 80187ba:	4770      	bx	lr

080187bc <_ZN8touchgfx8Gestures4tickEv>:
 80187bc:	7b83      	ldrb	r3, [r0, #14]
 80187be:	b14b      	cbz	r3, 80187d4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80187c0:	8903      	ldrh	r3, [r0, #8]
 80187c2:	3301      	adds	r3, #1
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	2b07      	cmp	r3, #7
 80187c8:	8103      	strh	r3, [r0, #8]
 80187ca:	bf81      	itttt	hi
 80187cc:	2300      	movhi	r3, #0
 80187ce:	8143      	strhhi	r3, [r0, #10]
 80187d0:	8183      	strhhi	r3, [r0, #12]
 80187d2:	7383      	strbhi	r3, [r0, #14]
 80187d4:	4770      	bx	lr
	...

080187d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80187d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80187dc:	4698      	mov	r8, r3
 80187de:	8883      	ldrh	r3, [r0, #4]
 80187e0:	4604      	mov	r4, r0
 80187e2:	4617      	mov	r7, r2
 80187e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80187e8:	eba8 0303 	sub.w	r3, r8, r3
 80187ec:	4a19      	ldr	r2, [pc, #100]	; (8018854 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80187ee:	460e      	mov	r6, r1
 80187f0:	b21b      	sxth	r3, r3
 80187f2:	88c1      	ldrh	r1, [r0, #6]
 80187f4:	9200      	str	r2, [sp, #0]
 80187f6:	2000      	movs	r0, #0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	8aa2      	ldrh	r2, [r4, #20]
 80187fc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8018800:	bfb8      	it	lt
 8018802:	425b      	neglt	r3, r3
 8018804:	f88d 0004 	strb.w	r0, [sp, #4]
 8018808:	f8ad 1008 	strh.w	r1, [sp, #8]
 801880c:	b21b      	sxth	r3, r3
 801880e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018812:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018816:	4293      	cmp	r3, r2
 8018818:	dc07      	bgt.n	801882a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801881a:	1a69      	subs	r1, r5, r1
 801881c:	b209      	sxth	r1, r1
 801881e:	2900      	cmp	r1, #0
 8018820:	bfb8      	it	lt
 8018822:	4249      	neglt	r1, r1
 8018824:	b209      	sxth	r1, r1
 8018826:	428a      	cmp	r2, r1
 8018828:	da10      	bge.n	801884c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801882a:	6920      	ldr	r0, [r4, #16]
 801882c:	4669      	mov	r1, sp
 801882e:	eba8 0606 	sub.w	r6, r8, r6
 8018832:	1bef      	subs	r7, r5, r7
 8018834:	6803      	ldr	r3, [r0, #0]
 8018836:	685b      	ldr	r3, [r3, #4]
 8018838:	4798      	blx	r3
 801883a:	2300      	movs	r3, #0
 801883c:	2001      	movs	r0, #1
 801883e:	8166      	strh	r6, [r4, #10]
 8018840:	8123      	strh	r3, [r4, #8]
 8018842:	81a7      	strh	r7, [r4, #12]
 8018844:	f8a4 8004 	strh.w	r8, [r4, #4]
 8018848:	80e5      	strh	r5, [r4, #6]
 801884a:	73a0      	strb	r0, [r4, #14]
 801884c:	b004      	add	sp, #16
 801884e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018852:	bf00      	nop
 8018854:	0801b2f4 	.word	0x0801b2f4

08018858 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8018858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801885a:	461e      	mov	r6, r3
 801885c:	1e4b      	subs	r3, r1, #1
 801885e:	b085      	sub	sp, #20
 8018860:	4604      	mov	r4, r0
 8018862:	2b01      	cmp	r3, #1
 8018864:	460d      	mov	r5, r1
 8018866:	4617      	mov	r7, r2
 8018868:	d84b      	bhi.n	8018902 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801886a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801886e:	1cd3      	adds	r3, r2, #3
 8018870:	b29b      	uxth	r3, r3
 8018872:	2b06      	cmp	r3, #6
 8018874:	d916      	bls.n	80188a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8018876:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8018918 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801887a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801887e:	f8cd c004 	str.w	ip, [sp, #4]
 8018882:	f04f 0c00 	mov.w	ip, #0
 8018886:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801888a:	6900      	ldr	r0, [r0, #16]
 801888c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8018890:	a901      	add	r1, sp, #4
 8018892:	f88d c008 	strb.w	ip, [sp, #8]
 8018896:	f8ad 200a 	strh.w	r2, [sp, #10]
 801889a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801889e:	6803      	ldr	r3, [r0, #0]
 80188a0:	689b      	ldr	r3, [r3, #8]
 80188a2:	4798      	blx	r3
 80188a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188a8:	1cd3      	adds	r3, r2, #3
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	2b06      	cmp	r3, #6
 80188ae:	d916      	bls.n	80188de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80188b0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8018918 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80188b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80188b8:	f8cd c004 	str.w	ip, [sp, #4]
 80188bc:	f04f 0c01 	mov.w	ip, #1
 80188c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80188c4:	6920      	ldr	r0, [r4, #16]
 80188c6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80188ca:	a901      	add	r1, sp, #4
 80188cc:	f88d c008 	strb.w	ip, [sp, #8]
 80188d0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80188d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80188d8:	6803      	ldr	r3, [r0, #0]
 80188da:	689b      	ldr	r3, [r3, #8]
 80188dc:	4798      	blx	r3
 80188de:	4b0d      	ldr	r3, [pc, #52]	; (8018914 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80188e0:	a901      	add	r1, sp, #4
 80188e2:	6920      	ldr	r0, [r4, #16]
 80188e4:	9301      	str	r3, [sp, #4]
 80188e6:	2300      	movs	r3, #0
 80188e8:	f88d 5008 	strb.w	r5, [sp, #8]
 80188ec:	f8ad 700a 	strh.w	r7, [sp, #10]
 80188f0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80188f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80188f8:	6803      	ldr	r3, [r0, #0]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4798      	blx	r3
 80188fe:	b005      	add	sp, #20
 8018900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018902:	2900      	cmp	r1, #0
 8018904:	d1eb      	bne.n	80188de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018906:	80a2      	strh	r2, [r4, #4]
 8018908:	80c6      	strh	r6, [r0, #6]
 801890a:	60a1      	str	r1, [r4, #8]
 801890c:	81a1      	strh	r1, [r4, #12]
 801890e:	73a1      	strb	r1, [r4, #14]
 8018910:	e7e5      	b.n	80188de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018912:	bf00      	nop
 8018914:	0801b2e0 	.word	0x0801b2e0
 8018918:	0801b308 	.word	0x0801b308

0801891c <__aeabi_atexit>:
 801891c:	460b      	mov	r3, r1
 801891e:	4601      	mov	r1, r0
 8018920:	4618      	mov	r0, r3
 8018922:	f000 b853 	b.w	80189cc <__cxa_atexit>

08018926 <_ZdlPvj>:
 8018926:	f000 b812 	b.w	801894e <_ZdlPv>

0801892a <__cxa_guard_acquire>:
 801892a:	6803      	ldr	r3, [r0, #0]
 801892c:	07db      	lsls	r3, r3, #31
 801892e:	d406      	bmi.n	801893e <__cxa_guard_acquire+0x14>
 8018930:	7843      	ldrb	r3, [r0, #1]
 8018932:	b103      	cbz	r3, 8018936 <__cxa_guard_acquire+0xc>
 8018934:	deff      	udf	#255	; 0xff
 8018936:	2301      	movs	r3, #1
 8018938:	7043      	strb	r3, [r0, #1]
 801893a:	4618      	mov	r0, r3
 801893c:	4770      	bx	lr
 801893e:	2000      	movs	r0, #0
 8018940:	4770      	bx	lr

08018942 <__cxa_guard_release>:
 8018942:	2301      	movs	r3, #1
 8018944:	6003      	str	r3, [r0, #0]
 8018946:	4770      	bx	lr

08018948 <__cxa_pure_virtual>:
 8018948:	b508      	push	{r3, lr}
 801894a:	f000 f80f 	bl	801896c <_ZSt9terminatev>

0801894e <_ZdlPv>:
 801894e:	f000 b989 	b.w	8018c64 <free>

08018952 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018952:	b508      	push	{r3, lr}
 8018954:	4780      	blx	r0
 8018956:	f000 f80e 	bl	8018976 <abort>
	...

0801895c <_ZSt13get_terminatev>:
 801895c:	4b02      	ldr	r3, [pc, #8]	; (8018968 <_ZSt13get_terminatev+0xc>)
 801895e:	6818      	ldr	r0, [r3, #0]
 8018960:	f3bf 8f5b 	dmb	ish
 8018964:	4770      	bx	lr
 8018966:	bf00      	nop
 8018968:	240000a4 	.word	0x240000a4

0801896c <_ZSt9terminatev>:
 801896c:	b508      	push	{r3, lr}
 801896e:	f7ff fff5 	bl	801895c <_ZSt13get_terminatev>
 8018972:	f7ff ffee 	bl	8018952 <_ZN10__cxxabiv111__terminateEPFvvE>

08018976 <abort>:
 8018976:	b508      	push	{r3, lr}
 8018978:	2006      	movs	r0, #6
 801897a:	f000 fe11 	bl	80195a0 <raise>
 801897e:	2001      	movs	r0, #1
 8018980:	f7e9 fd28 	bl	80023d4 <_exit>

08018984 <__assert_func>:
 8018984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018986:	4614      	mov	r4, r2
 8018988:	461a      	mov	r2, r3
 801898a:	4b09      	ldr	r3, [pc, #36]	; (80189b0 <__assert_func+0x2c>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	4605      	mov	r5, r0
 8018990:	68d8      	ldr	r0, [r3, #12]
 8018992:	b14c      	cbz	r4, 80189a8 <__assert_func+0x24>
 8018994:	4b07      	ldr	r3, [pc, #28]	; (80189b4 <__assert_func+0x30>)
 8018996:	9100      	str	r1, [sp, #0]
 8018998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801899c:	4906      	ldr	r1, [pc, #24]	; (80189b8 <__assert_func+0x34>)
 801899e:	462b      	mov	r3, r5
 80189a0:	f000 f8fe 	bl	8018ba0 <fiprintf>
 80189a4:	f7ff ffe7 	bl	8018976 <abort>
 80189a8:	4b04      	ldr	r3, [pc, #16]	; (80189bc <__assert_func+0x38>)
 80189aa:	461c      	mov	r4, r3
 80189ac:	e7f3      	b.n	8018996 <__assert_func+0x12>
 80189ae:	bf00      	nop
 80189b0:	240000a8 	.word	0x240000a8
 80189b4:	0801b530 	.word	0x0801b530
 80189b8:	0801b53d 	.word	0x0801b53d
 80189bc:	0801b56b 	.word	0x0801b56b

080189c0 <atexit>:
 80189c0:	2300      	movs	r3, #0
 80189c2:	4601      	mov	r1, r0
 80189c4:	461a      	mov	r2, r3
 80189c6:	4618      	mov	r0, r3
 80189c8:	f000 bf1c 	b.w	8019804 <__register_exitproc>

080189cc <__cxa_atexit>:
 80189cc:	b510      	push	{r4, lr}
 80189ce:	4c05      	ldr	r4, [pc, #20]	; (80189e4 <__cxa_atexit+0x18>)
 80189d0:	4613      	mov	r3, r2
 80189d2:	b12c      	cbz	r4, 80189e0 <__cxa_atexit+0x14>
 80189d4:	460a      	mov	r2, r1
 80189d6:	4601      	mov	r1, r0
 80189d8:	2002      	movs	r0, #2
 80189da:	f000 ff13 	bl	8019804 <__register_exitproc>
 80189de:	bd10      	pop	{r4, pc}
 80189e0:	4620      	mov	r0, r4
 80189e2:	e7fc      	b.n	80189de <__cxa_atexit+0x12>
 80189e4:	08019805 	.word	0x08019805

080189e8 <__errno>:
 80189e8:	4b01      	ldr	r3, [pc, #4]	; (80189f0 <__errno+0x8>)
 80189ea:	6818      	ldr	r0, [r3, #0]
 80189ec:	4770      	bx	lr
 80189ee:	bf00      	nop
 80189f0:	240000a8 	.word	0x240000a8

080189f4 <std>:
 80189f4:	2300      	movs	r3, #0
 80189f6:	b510      	push	{r4, lr}
 80189f8:	4604      	mov	r4, r0
 80189fa:	e9c0 3300 	strd	r3, r3, [r0]
 80189fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a02:	6083      	str	r3, [r0, #8]
 8018a04:	8181      	strh	r1, [r0, #12]
 8018a06:	6643      	str	r3, [r0, #100]	; 0x64
 8018a08:	81c2      	strh	r2, [r0, #14]
 8018a0a:	6183      	str	r3, [r0, #24]
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	2208      	movs	r2, #8
 8018a10:	305c      	adds	r0, #92	; 0x5c
 8018a12:	f000 f94d 	bl	8018cb0 <memset>
 8018a16:	4b05      	ldr	r3, [pc, #20]	; (8018a2c <std+0x38>)
 8018a18:	6263      	str	r3, [r4, #36]	; 0x24
 8018a1a:	4b05      	ldr	r3, [pc, #20]	; (8018a30 <std+0x3c>)
 8018a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a1e:	4b05      	ldr	r3, [pc, #20]	; (8018a34 <std+0x40>)
 8018a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a22:	4b05      	ldr	r3, [pc, #20]	; (8018a38 <std+0x44>)
 8018a24:	6224      	str	r4, [r4, #32]
 8018a26:	6323      	str	r3, [r4, #48]	; 0x30
 8018a28:	bd10      	pop	{r4, pc}
 8018a2a:	bf00      	nop
 8018a2c:	080195d9 	.word	0x080195d9
 8018a30:	080195fb 	.word	0x080195fb
 8018a34:	08019633 	.word	0x08019633
 8018a38:	08019657 	.word	0x08019657

08018a3c <_cleanup_r>:
 8018a3c:	4901      	ldr	r1, [pc, #4]	; (8018a44 <_cleanup_r+0x8>)
 8018a3e:	f000 b8c1 	b.w	8018bc4 <_fwalk_reent>
 8018a42:	bf00      	nop
 8018a44:	080199f5 	.word	0x080199f5

08018a48 <__sfmoreglue>:
 8018a48:	b570      	push	{r4, r5, r6, lr}
 8018a4a:	2268      	movs	r2, #104	; 0x68
 8018a4c:	1e4d      	subs	r5, r1, #1
 8018a4e:	4355      	muls	r5, r2
 8018a50:	460e      	mov	r6, r1
 8018a52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018a56:	f000 f99f 	bl	8018d98 <_malloc_r>
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	b140      	cbz	r0, 8018a70 <__sfmoreglue+0x28>
 8018a5e:	2100      	movs	r1, #0
 8018a60:	e9c0 1600 	strd	r1, r6, [r0]
 8018a64:	300c      	adds	r0, #12
 8018a66:	60a0      	str	r0, [r4, #8]
 8018a68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018a6c:	f000 f920 	bl	8018cb0 <memset>
 8018a70:	4620      	mov	r0, r4
 8018a72:	bd70      	pop	{r4, r5, r6, pc}

08018a74 <__sfp_lock_acquire>:
 8018a74:	4801      	ldr	r0, [pc, #4]	; (8018a7c <__sfp_lock_acquire+0x8>)
 8018a76:	f000 b8ea 	b.w	8018c4e <__retarget_lock_acquire_recursive>
 8018a7a:	bf00      	nop
 8018a7c:	2400b302 	.word	0x2400b302

08018a80 <__sfp_lock_release>:
 8018a80:	4801      	ldr	r0, [pc, #4]	; (8018a88 <__sfp_lock_release+0x8>)
 8018a82:	f000 b8e6 	b.w	8018c52 <__retarget_lock_release_recursive>
 8018a86:	bf00      	nop
 8018a88:	2400b302 	.word	0x2400b302

08018a8c <__sinit_lock_acquire>:
 8018a8c:	4801      	ldr	r0, [pc, #4]	; (8018a94 <__sinit_lock_acquire+0x8>)
 8018a8e:	f000 b8de 	b.w	8018c4e <__retarget_lock_acquire_recursive>
 8018a92:	bf00      	nop
 8018a94:	2400b303 	.word	0x2400b303

08018a98 <__sinit_lock_release>:
 8018a98:	4801      	ldr	r0, [pc, #4]	; (8018aa0 <__sinit_lock_release+0x8>)
 8018a9a:	f000 b8da 	b.w	8018c52 <__retarget_lock_release_recursive>
 8018a9e:	bf00      	nop
 8018aa0:	2400b303 	.word	0x2400b303

08018aa4 <__sinit>:
 8018aa4:	b510      	push	{r4, lr}
 8018aa6:	4604      	mov	r4, r0
 8018aa8:	f7ff fff0 	bl	8018a8c <__sinit_lock_acquire>
 8018aac:	69a3      	ldr	r3, [r4, #24]
 8018aae:	b11b      	cbz	r3, 8018ab8 <__sinit+0x14>
 8018ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ab4:	f7ff bff0 	b.w	8018a98 <__sinit_lock_release>
 8018ab8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018abc:	6523      	str	r3, [r4, #80]	; 0x50
 8018abe:	4b13      	ldr	r3, [pc, #76]	; (8018b0c <__sinit+0x68>)
 8018ac0:	4a13      	ldr	r2, [pc, #76]	; (8018b10 <__sinit+0x6c>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	62a2      	str	r2, [r4, #40]	; 0x28
 8018ac6:	42a3      	cmp	r3, r4
 8018ac8:	bf04      	itt	eq
 8018aca:	2301      	moveq	r3, #1
 8018acc:	61a3      	streq	r3, [r4, #24]
 8018ace:	4620      	mov	r0, r4
 8018ad0:	f000 f820 	bl	8018b14 <__sfp>
 8018ad4:	6060      	str	r0, [r4, #4]
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	f000 f81c 	bl	8018b14 <__sfp>
 8018adc:	60a0      	str	r0, [r4, #8]
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f000 f818 	bl	8018b14 <__sfp>
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	60e0      	str	r0, [r4, #12]
 8018ae8:	2104      	movs	r1, #4
 8018aea:	6860      	ldr	r0, [r4, #4]
 8018aec:	f7ff ff82 	bl	80189f4 <std>
 8018af0:	68a0      	ldr	r0, [r4, #8]
 8018af2:	2201      	movs	r2, #1
 8018af4:	2109      	movs	r1, #9
 8018af6:	f7ff ff7d 	bl	80189f4 <std>
 8018afa:	68e0      	ldr	r0, [r4, #12]
 8018afc:	2202      	movs	r2, #2
 8018afe:	2112      	movs	r1, #18
 8018b00:	f7ff ff78 	bl	80189f4 <std>
 8018b04:	2301      	movs	r3, #1
 8018b06:	61a3      	str	r3, [r4, #24]
 8018b08:	e7d2      	b.n	8018ab0 <__sinit+0xc>
 8018b0a:	bf00      	nop
 8018b0c:	0801b5cc 	.word	0x0801b5cc
 8018b10:	08018a3d 	.word	0x08018a3d

08018b14 <__sfp>:
 8018b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b16:	4607      	mov	r7, r0
 8018b18:	f7ff ffac 	bl	8018a74 <__sfp_lock_acquire>
 8018b1c:	4b1e      	ldr	r3, [pc, #120]	; (8018b98 <__sfp+0x84>)
 8018b1e:	681e      	ldr	r6, [r3, #0]
 8018b20:	69b3      	ldr	r3, [r6, #24]
 8018b22:	b913      	cbnz	r3, 8018b2a <__sfp+0x16>
 8018b24:	4630      	mov	r0, r6
 8018b26:	f7ff ffbd 	bl	8018aa4 <__sinit>
 8018b2a:	3648      	adds	r6, #72	; 0x48
 8018b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b30:	3b01      	subs	r3, #1
 8018b32:	d503      	bpl.n	8018b3c <__sfp+0x28>
 8018b34:	6833      	ldr	r3, [r6, #0]
 8018b36:	b30b      	cbz	r3, 8018b7c <__sfp+0x68>
 8018b38:	6836      	ldr	r6, [r6, #0]
 8018b3a:	e7f7      	b.n	8018b2c <__sfp+0x18>
 8018b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b40:	b9d5      	cbnz	r5, 8018b78 <__sfp+0x64>
 8018b42:	4b16      	ldr	r3, [pc, #88]	; (8018b9c <__sfp+0x88>)
 8018b44:	60e3      	str	r3, [r4, #12]
 8018b46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b4a:	6665      	str	r5, [r4, #100]	; 0x64
 8018b4c:	f000 f87e 	bl	8018c4c <__retarget_lock_init_recursive>
 8018b50:	f7ff ff96 	bl	8018a80 <__sfp_lock_release>
 8018b54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018b58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018b5c:	6025      	str	r5, [r4, #0]
 8018b5e:	61a5      	str	r5, [r4, #24]
 8018b60:	2208      	movs	r2, #8
 8018b62:	4629      	mov	r1, r5
 8018b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b68:	f000 f8a2 	bl	8018cb0 <memset>
 8018b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b74:	4620      	mov	r0, r4
 8018b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b78:	3468      	adds	r4, #104	; 0x68
 8018b7a:	e7d9      	b.n	8018b30 <__sfp+0x1c>
 8018b7c:	2104      	movs	r1, #4
 8018b7e:	4638      	mov	r0, r7
 8018b80:	f7ff ff62 	bl	8018a48 <__sfmoreglue>
 8018b84:	4604      	mov	r4, r0
 8018b86:	6030      	str	r0, [r6, #0]
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	d1d5      	bne.n	8018b38 <__sfp+0x24>
 8018b8c:	f7ff ff78 	bl	8018a80 <__sfp_lock_release>
 8018b90:	230c      	movs	r3, #12
 8018b92:	603b      	str	r3, [r7, #0]
 8018b94:	e7ee      	b.n	8018b74 <__sfp+0x60>
 8018b96:	bf00      	nop
 8018b98:	0801b5cc 	.word	0x0801b5cc
 8018b9c:	ffff0001 	.word	0xffff0001

08018ba0 <fiprintf>:
 8018ba0:	b40e      	push	{r1, r2, r3}
 8018ba2:	b503      	push	{r0, r1, lr}
 8018ba4:	4601      	mov	r1, r0
 8018ba6:	ab03      	add	r3, sp, #12
 8018ba8:	4805      	ldr	r0, [pc, #20]	; (8018bc0 <fiprintf+0x20>)
 8018baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bae:	6800      	ldr	r0, [r0, #0]
 8018bb0:	9301      	str	r3, [sp, #4]
 8018bb2:	f000 f98f 	bl	8018ed4 <_vfiprintf_r>
 8018bb6:	b002      	add	sp, #8
 8018bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bbc:	b003      	add	sp, #12
 8018bbe:	4770      	bx	lr
 8018bc0:	240000a8 	.word	0x240000a8

08018bc4 <_fwalk_reent>:
 8018bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bc8:	4606      	mov	r6, r0
 8018bca:	4688      	mov	r8, r1
 8018bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bd0:	2700      	movs	r7, #0
 8018bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8018bda:	d505      	bpl.n	8018be8 <_fwalk_reent+0x24>
 8018bdc:	6824      	ldr	r4, [r4, #0]
 8018bde:	2c00      	cmp	r4, #0
 8018be0:	d1f7      	bne.n	8018bd2 <_fwalk_reent+0xe>
 8018be2:	4638      	mov	r0, r7
 8018be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018be8:	89ab      	ldrh	r3, [r5, #12]
 8018bea:	2b01      	cmp	r3, #1
 8018bec:	d907      	bls.n	8018bfe <_fwalk_reent+0x3a>
 8018bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	d003      	beq.n	8018bfe <_fwalk_reent+0x3a>
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	47c0      	blx	r8
 8018bfc:	4307      	orrs	r7, r0
 8018bfe:	3568      	adds	r5, #104	; 0x68
 8018c00:	e7e9      	b.n	8018bd6 <_fwalk_reent+0x12>
	...

08018c04 <__libc_init_array>:
 8018c04:	b570      	push	{r4, r5, r6, lr}
 8018c06:	4d0d      	ldr	r5, [pc, #52]	; (8018c3c <__libc_init_array+0x38>)
 8018c08:	4c0d      	ldr	r4, [pc, #52]	; (8018c40 <__libc_init_array+0x3c>)
 8018c0a:	1b64      	subs	r4, r4, r5
 8018c0c:	10a4      	asrs	r4, r4, #2
 8018c0e:	2600      	movs	r6, #0
 8018c10:	42a6      	cmp	r6, r4
 8018c12:	d109      	bne.n	8018c28 <__libc_init_array+0x24>
 8018c14:	4d0b      	ldr	r5, [pc, #44]	; (8018c44 <__libc_init_array+0x40>)
 8018c16:	4c0c      	ldr	r4, [pc, #48]	; (8018c48 <__libc_init_array+0x44>)
 8018c18:	f000 ffe0 	bl	8019bdc <_init>
 8018c1c:	1b64      	subs	r4, r4, r5
 8018c1e:	10a4      	asrs	r4, r4, #2
 8018c20:	2600      	movs	r6, #0
 8018c22:	42a6      	cmp	r6, r4
 8018c24:	d105      	bne.n	8018c32 <__libc_init_array+0x2e>
 8018c26:	bd70      	pop	{r4, r5, r6, pc}
 8018c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c2c:	4798      	blx	r3
 8018c2e:	3601      	adds	r6, #1
 8018c30:	e7ee      	b.n	8018c10 <__libc_init_array+0xc>
 8018c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c36:	4798      	blx	r3
 8018c38:	3601      	adds	r6, #1
 8018c3a:	e7f2      	b.n	8018c22 <__libc_init_array+0x1e>
 8018c3c:	0801b620 	.word	0x0801b620
 8018c40:	0801b620 	.word	0x0801b620
 8018c44:	0801b620 	.word	0x0801b620
 8018c48:	0801b634 	.word	0x0801b634

08018c4c <__retarget_lock_init_recursive>:
 8018c4c:	4770      	bx	lr

08018c4e <__retarget_lock_acquire_recursive>:
 8018c4e:	4770      	bx	lr

08018c50 <__retarget_lock_release>:
 8018c50:	4770      	bx	lr

08018c52 <__retarget_lock_release_recursive>:
 8018c52:	4770      	bx	lr

08018c54 <malloc>:
 8018c54:	4b02      	ldr	r3, [pc, #8]	; (8018c60 <malloc+0xc>)
 8018c56:	4601      	mov	r1, r0
 8018c58:	6818      	ldr	r0, [r3, #0]
 8018c5a:	f000 b89d 	b.w	8018d98 <_malloc_r>
 8018c5e:	bf00      	nop
 8018c60:	240000a8 	.word	0x240000a8

08018c64 <free>:
 8018c64:	4b02      	ldr	r3, [pc, #8]	; (8018c70 <free+0xc>)
 8018c66:	4601      	mov	r1, r0
 8018c68:	6818      	ldr	r0, [r3, #0]
 8018c6a:	f000 b829 	b.w	8018cc0 <_free_r>
 8018c6e:	bf00      	nop
 8018c70:	240000a8 	.word	0x240000a8

08018c74 <memcmp>:
 8018c74:	b510      	push	{r4, lr}
 8018c76:	3901      	subs	r1, #1
 8018c78:	4402      	add	r2, r0
 8018c7a:	4290      	cmp	r0, r2
 8018c7c:	d101      	bne.n	8018c82 <memcmp+0xe>
 8018c7e:	2000      	movs	r0, #0
 8018c80:	e005      	b.n	8018c8e <memcmp+0x1a>
 8018c82:	7803      	ldrb	r3, [r0, #0]
 8018c84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018c88:	42a3      	cmp	r3, r4
 8018c8a:	d001      	beq.n	8018c90 <memcmp+0x1c>
 8018c8c:	1b18      	subs	r0, r3, r4
 8018c8e:	bd10      	pop	{r4, pc}
 8018c90:	3001      	adds	r0, #1
 8018c92:	e7f2      	b.n	8018c7a <memcmp+0x6>

08018c94 <memcpy>:
 8018c94:	440a      	add	r2, r1
 8018c96:	4291      	cmp	r1, r2
 8018c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8018c9c:	d100      	bne.n	8018ca0 <memcpy+0xc>
 8018c9e:	4770      	bx	lr
 8018ca0:	b510      	push	{r4, lr}
 8018ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018caa:	4291      	cmp	r1, r2
 8018cac:	d1f9      	bne.n	8018ca2 <memcpy+0xe>
 8018cae:	bd10      	pop	{r4, pc}

08018cb0 <memset>:
 8018cb0:	4402      	add	r2, r0
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	4293      	cmp	r3, r2
 8018cb6:	d100      	bne.n	8018cba <memset+0xa>
 8018cb8:	4770      	bx	lr
 8018cba:	f803 1b01 	strb.w	r1, [r3], #1
 8018cbe:	e7f9      	b.n	8018cb4 <memset+0x4>

08018cc0 <_free_r>:
 8018cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cc2:	2900      	cmp	r1, #0
 8018cc4:	d044      	beq.n	8018d50 <_free_r+0x90>
 8018cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cca:	9001      	str	r0, [sp, #4]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f1a1 0404 	sub.w	r4, r1, #4
 8018cd2:	bfb8      	it	lt
 8018cd4:	18e4      	addlt	r4, r4, r3
 8018cd6:	f000 ff41 	bl	8019b5c <__malloc_lock>
 8018cda:	4a1e      	ldr	r2, [pc, #120]	; (8018d54 <_free_r+0x94>)
 8018cdc:	9801      	ldr	r0, [sp, #4]
 8018cde:	6813      	ldr	r3, [r2, #0]
 8018ce0:	b933      	cbnz	r3, 8018cf0 <_free_r+0x30>
 8018ce2:	6063      	str	r3, [r4, #4]
 8018ce4:	6014      	str	r4, [r2, #0]
 8018ce6:	b003      	add	sp, #12
 8018ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cec:	f000 bf3c 	b.w	8019b68 <__malloc_unlock>
 8018cf0:	42a3      	cmp	r3, r4
 8018cf2:	d908      	bls.n	8018d06 <_free_r+0x46>
 8018cf4:	6825      	ldr	r5, [r4, #0]
 8018cf6:	1961      	adds	r1, r4, r5
 8018cf8:	428b      	cmp	r3, r1
 8018cfa:	bf01      	itttt	eq
 8018cfc:	6819      	ldreq	r1, [r3, #0]
 8018cfe:	685b      	ldreq	r3, [r3, #4]
 8018d00:	1949      	addeq	r1, r1, r5
 8018d02:	6021      	streq	r1, [r4, #0]
 8018d04:	e7ed      	b.n	8018ce2 <_free_r+0x22>
 8018d06:	461a      	mov	r2, r3
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	b10b      	cbz	r3, 8018d10 <_free_r+0x50>
 8018d0c:	42a3      	cmp	r3, r4
 8018d0e:	d9fa      	bls.n	8018d06 <_free_r+0x46>
 8018d10:	6811      	ldr	r1, [r2, #0]
 8018d12:	1855      	adds	r5, r2, r1
 8018d14:	42a5      	cmp	r5, r4
 8018d16:	d10b      	bne.n	8018d30 <_free_r+0x70>
 8018d18:	6824      	ldr	r4, [r4, #0]
 8018d1a:	4421      	add	r1, r4
 8018d1c:	1854      	adds	r4, r2, r1
 8018d1e:	42a3      	cmp	r3, r4
 8018d20:	6011      	str	r1, [r2, #0]
 8018d22:	d1e0      	bne.n	8018ce6 <_free_r+0x26>
 8018d24:	681c      	ldr	r4, [r3, #0]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	6053      	str	r3, [r2, #4]
 8018d2a:	4421      	add	r1, r4
 8018d2c:	6011      	str	r1, [r2, #0]
 8018d2e:	e7da      	b.n	8018ce6 <_free_r+0x26>
 8018d30:	d902      	bls.n	8018d38 <_free_r+0x78>
 8018d32:	230c      	movs	r3, #12
 8018d34:	6003      	str	r3, [r0, #0]
 8018d36:	e7d6      	b.n	8018ce6 <_free_r+0x26>
 8018d38:	6825      	ldr	r5, [r4, #0]
 8018d3a:	1961      	adds	r1, r4, r5
 8018d3c:	428b      	cmp	r3, r1
 8018d3e:	bf04      	itt	eq
 8018d40:	6819      	ldreq	r1, [r3, #0]
 8018d42:	685b      	ldreq	r3, [r3, #4]
 8018d44:	6063      	str	r3, [r4, #4]
 8018d46:	bf04      	itt	eq
 8018d48:	1949      	addeq	r1, r1, r5
 8018d4a:	6021      	streq	r1, [r4, #0]
 8018d4c:	6054      	str	r4, [r2, #4]
 8018d4e:	e7ca      	b.n	8018ce6 <_free_r+0x26>
 8018d50:	b003      	add	sp, #12
 8018d52:	bd30      	pop	{r4, r5, pc}
 8018d54:	2400b304 	.word	0x2400b304

08018d58 <sbrk_aligned>:
 8018d58:	b570      	push	{r4, r5, r6, lr}
 8018d5a:	4e0e      	ldr	r6, [pc, #56]	; (8018d94 <sbrk_aligned+0x3c>)
 8018d5c:	460c      	mov	r4, r1
 8018d5e:	6831      	ldr	r1, [r6, #0]
 8018d60:	4605      	mov	r5, r0
 8018d62:	b911      	cbnz	r1, 8018d6a <sbrk_aligned+0x12>
 8018d64:	f000 fbe4 	bl	8019530 <_sbrk_r>
 8018d68:	6030      	str	r0, [r6, #0]
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	4628      	mov	r0, r5
 8018d6e:	f000 fbdf 	bl	8019530 <_sbrk_r>
 8018d72:	1c43      	adds	r3, r0, #1
 8018d74:	d00a      	beq.n	8018d8c <sbrk_aligned+0x34>
 8018d76:	1cc4      	adds	r4, r0, #3
 8018d78:	f024 0403 	bic.w	r4, r4, #3
 8018d7c:	42a0      	cmp	r0, r4
 8018d7e:	d007      	beq.n	8018d90 <sbrk_aligned+0x38>
 8018d80:	1a21      	subs	r1, r4, r0
 8018d82:	4628      	mov	r0, r5
 8018d84:	f000 fbd4 	bl	8019530 <_sbrk_r>
 8018d88:	3001      	adds	r0, #1
 8018d8a:	d101      	bne.n	8018d90 <sbrk_aligned+0x38>
 8018d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8018d90:	4620      	mov	r0, r4
 8018d92:	bd70      	pop	{r4, r5, r6, pc}
 8018d94:	2400b308 	.word	0x2400b308

08018d98 <_malloc_r>:
 8018d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d9c:	1ccd      	adds	r5, r1, #3
 8018d9e:	f025 0503 	bic.w	r5, r5, #3
 8018da2:	3508      	adds	r5, #8
 8018da4:	2d0c      	cmp	r5, #12
 8018da6:	bf38      	it	cc
 8018da8:	250c      	movcc	r5, #12
 8018daa:	2d00      	cmp	r5, #0
 8018dac:	4607      	mov	r7, r0
 8018dae:	db01      	blt.n	8018db4 <_malloc_r+0x1c>
 8018db0:	42a9      	cmp	r1, r5
 8018db2:	d905      	bls.n	8018dc0 <_malloc_r+0x28>
 8018db4:	230c      	movs	r3, #12
 8018db6:	603b      	str	r3, [r7, #0]
 8018db8:	2600      	movs	r6, #0
 8018dba:	4630      	mov	r0, r6
 8018dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dc0:	4e2e      	ldr	r6, [pc, #184]	; (8018e7c <_malloc_r+0xe4>)
 8018dc2:	f000 fecb 	bl	8019b5c <__malloc_lock>
 8018dc6:	6833      	ldr	r3, [r6, #0]
 8018dc8:	461c      	mov	r4, r3
 8018dca:	bb34      	cbnz	r4, 8018e1a <_malloc_r+0x82>
 8018dcc:	4629      	mov	r1, r5
 8018dce:	4638      	mov	r0, r7
 8018dd0:	f7ff ffc2 	bl	8018d58 <sbrk_aligned>
 8018dd4:	1c43      	adds	r3, r0, #1
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	d14d      	bne.n	8018e76 <_malloc_r+0xde>
 8018dda:	6834      	ldr	r4, [r6, #0]
 8018ddc:	4626      	mov	r6, r4
 8018dde:	2e00      	cmp	r6, #0
 8018de0:	d140      	bne.n	8018e64 <_malloc_r+0xcc>
 8018de2:	6823      	ldr	r3, [r4, #0]
 8018de4:	4631      	mov	r1, r6
 8018de6:	4638      	mov	r0, r7
 8018de8:	eb04 0803 	add.w	r8, r4, r3
 8018dec:	f000 fba0 	bl	8019530 <_sbrk_r>
 8018df0:	4580      	cmp	r8, r0
 8018df2:	d13a      	bne.n	8018e6a <_malloc_r+0xd2>
 8018df4:	6821      	ldr	r1, [r4, #0]
 8018df6:	3503      	adds	r5, #3
 8018df8:	1a6d      	subs	r5, r5, r1
 8018dfa:	f025 0503 	bic.w	r5, r5, #3
 8018dfe:	3508      	adds	r5, #8
 8018e00:	2d0c      	cmp	r5, #12
 8018e02:	bf38      	it	cc
 8018e04:	250c      	movcc	r5, #12
 8018e06:	4629      	mov	r1, r5
 8018e08:	4638      	mov	r0, r7
 8018e0a:	f7ff ffa5 	bl	8018d58 <sbrk_aligned>
 8018e0e:	3001      	adds	r0, #1
 8018e10:	d02b      	beq.n	8018e6a <_malloc_r+0xd2>
 8018e12:	6823      	ldr	r3, [r4, #0]
 8018e14:	442b      	add	r3, r5
 8018e16:	6023      	str	r3, [r4, #0]
 8018e18:	e00e      	b.n	8018e38 <_malloc_r+0xa0>
 8018e1a:	6822      	ldr	r2, [r4, #0]
 8018e1c:	1b52      	subs	r2, r2, r5
 8018e1e:	d41e      	bmi.n	8018e5e <_malloc_r+0xc6>
 8018e20:	2a0b      	cmp	r2, #11
 8018e22:	d916      	bls.n	8018e52 <_malloc_r+0xba>
 8018e24:	1961      	adds	r1, r4, r5
 8018e26:	42a3      	cmp	r3, r4
 8018e28:	6025      	str	r5, [r4, #0]
 8018e2a:	bf18      	it	ne
 8018e2c:	6059      	strne	r1, [r3, #4]
 8018e2e:	6863      	ldr	r3, [r4, #4]
 8018e30:	bf08      	it	eq
 8018e32:	6031      	streq	r1, [r6, #0]
 8018e34:	5162      	str	r2, [r4, r5]
 8018e36:	604b      	str	r3, [r1, #4]
 8018e38:	4638      	mov	r0, r7
 8018e3a:	f104 060b 	add.w	r6, r4, #11
 8018e3e:	f000 fe93 	bl	8019b68 <__malloc_unlock>
 8018e42:	f026 0607 	bic.w	r6, r6, #7
 8018e46:	1d23      	adds	r3, r4, #4
 8018e48:	1af2      	subs	r2, r6, r3
 8018e4a:	d0b6      	beq.n	8018dba <_malloc_r+0x22>
 8018e4c:	1b9b      	subs	r3, r3, r6
 8018e4e:	50a3      	str	r3, [r4, r2]
 8018e50:	e7b3      	b.n	8018dba <_malloc_r+0x22>
 8018e52:	6862      	ldr	r2, [r4, #4]
 8018e54:	42a3      	cmp	r3, r4
 8018e56:	bf0c      	ite	eq
 8018e58:	6032      	streq	r2, [r6, #0]
 8018e5a:	605a      	strne	r2, [r3, #4]
 8018e5c:	e7ec      	b.n	8018e38 <_malloc_r+0xa0>
 8018e5e:	4623      	mov	r3, r4
 8018e60:	6864      	ldr	r4, [r4, #4]
 8018e62:	e7b2      	b.n	8018dca <_malloc_r+0x32>
 8018e64:	4634      	mov	r4, r6
 8018e66:	6876      	ldr	r6, [r6, #4]
 8018e68:	e7b9      	b.n	8018dde <_malloc_r+0x46>
 8018e6a:	230c      	movs	r3, #12
 8018e6c:	603b      	str	r3, [r7, #0]
 8018e6e:	4638      	mov	r0, r7
 8018e70:	f000 fe7a 	bl	8019b68 <__malloc_unlock>
 8018e74:	e7a1      	b.n	8018dba <_malloc_r+0x22>
 8018e76:	6025      	str	r5, [r4, #0]
 8018e78:	e7de      	b.n	8018e38 <_malloc_r+0xa0>
 8018e7a:	bf00      	nop
 8018e7c:	2400b304 	.word	0x2400b304

08018e80 <__sfputc_r>:
 8018e80:	6893      	ldr	r3, [r2, #8]
 8018e82:	3b01      	subs	r3, #1
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	b410      	push	{r4}
 8018e88:	6093      	str	r3, [r2, #8]
 8018e8a:	da08      	bge.n	8018e9e <__sfputc_r+0x1e>
 8018e8c:	6994      	ldr	r4, [r2, #24]
 8018e8e:	42a3      	cmp	r3, r4
 8018e90:	db01      	blt.n	8018e96 <__sfputc_r+0x16>
 8018e92:	290a      	cmp	r1, #10
 8018e94:	d103      	bne.n	8018e9e <__sfputc_r+0x1e>
 8018e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e9a:	f000 bbe1 	b.w	8019660 <__swbuf_r>
 8018e9e:	6813      	ldr	r3, [r2, #0]
 8018ea0:	1c58      	adds	r0, r3, #1
 8018ea2:	6010      	str	r0, [r2, #0]
 8018ea4:	7019      	strb	r1, [r3, #0]
 8018ea6:	4608      	mov	r0, r1
 8018ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <__sfputs_r>:
 8018eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb0:	4606      	mov	r6, r0
 8018eb2:	460f      	mov	r7, r1
 8018eb4:	4614      	mov	r4, r2
 8018eb6:	18d5      	adds	r5, r2, r3
 8018eb8:	42ac      	cmp	r4, r5
 8018eba:	d101      	bne.n	8018ec0 <__sfputs_r+0x12>
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	e007      	b.n	8018ed0 <__sfputs_r+0x22>
 8018ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ec4:	463a      	mov	r2, r7
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f7ff ffda 	bl	8018e80 <__sfputc_r>
 8018ecc:	1c43      	adds	r3, r0, #1
 8018ece:	d1f3      	bne.n	8018eb8 <__sfputs_r+0xa>
 8018ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ed4 <_vfiprintf_r>:
 8018ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed8:	460d      	mov	r5, r1
 8018eda:	b09d      	sub	sp, #116	; 0x74
 8018edc:	4614      	mov	r4, r2
 8018ede:	4698      	mov	r8, r3
 8018ee0:	4606      	mov	r6, r0
 8018ee2:	b118      	cbz	r0, 8018eec <_vfiprintf_r+0x18>
 8018ee4:	6983      	ldr	r3, [r0, #24]
 8018ee6:	b90b      	cbnz	r3, 8018eec <_vfiprintf_r+0x18>
 8018ee8:	f7ff fddc 	bl	8018aa4 <__sinit>
 8018eec:	4b89      	ldr	r3, [pc, #548]	; (8019114 <_vfiprintf_r+0x240>)
 8018eee:	429d      	cmp	r5, r3
 8018ef0:	d11b      	bne.n	8018f2a <_vfiprintf_r+0x56>
 8018ef2:	6875      	ldr	r5, [r6, #4]
 8018ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ef6:	07d9      	lsls	r1, r3, #31
 8018ef8:	d405      	bmi.n	8018f06 <_vfiprintf_r+0x32>
 8018efa:	89ab      	ldrh	r3, [r5, #12]
 8018efc:	059a      	lsls	r2, r3, #22
 8018efe:	d402      	bmi.n	8018f06 <_vfiprintf_r+0x32>
 8018f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f02:	f7ff fea4 	bl	8018c4e <__retarget_lock_acquire_recursive>
 8018f06:	89ab      	ldrh	r3, [r5, #12]
 8018f08:	071b      	lsls	r3, r3, #28
 8018f0a:	d501      	bpl.n	8018f10 <_vfiprintf_r+0x3c>
 8018f0c:	692b      	ldr	r3, [r5, #16]
 8018f0e:	b9eb      	cbnz	r3, 8018f4c <_vfiprintf_r+0x78>
 8018f10:	4629      	mov	r1, r5
 8018f12:	4630      	mov	r0, r6
 8018f14:	f000 fc08 	bl	8019728 <__swsetup_r>
 8018f18:	b1c0      	cbz	r0, 8018f4c <_vfiprintf_r+0x78>
 8018f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f1c:	07dc      	lsls	r4, r3, #31
 8018f1e:	d50e      	bpl.n	8018f3e <_vfiprintf_r+0x6a>
 8018f20:	f04f 30ff 	mov.w	r0, #4294967295
 8018f24:	b01d      	add	sp, #116	; 0x74
 8018f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2a:	4b7b      	ldr	r3, [pc, #492]	; (8019118 <_vfiprintf_r+0x244>)
 8018f2c:	429d      	cmp	r5, r3
 8018f2e:	d101      	bne.n	8018f34 <_vfiprintf_r+0x60>
 8018f30:	68b5      	ldr	r5, [r6, #8]
 8018f32:	e7df      	b.n	8018ef4 <_vfiprintf_r+0x20>
 8018f34:	4b79      	ldr	r3, [pc, #484]	; (801911c <_vfiprintf_r+0x248>)
 8018f36:	429d      	cmp	r5, r3
 8018f38:	bf08      	it	eq
 8018f3a:	68f5      	ldreq	r5, [r6, #12]
 8018f3c:	e7da      	b.n	8018ef4 <_vfiprintf_r+0x20>
 8018f3e:	89ab      	ldrh	r3, [r5, #12]
 8018f40:	0598      	lsls	r0, r3, #22
 8018f42:	d4ed      	bmi.n	8018f20 <_vfiprintf_r+0x4c>
 8018f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f46:	f7ff fe84 	bl	8018c52 <__retarget_lock_release_recursive>
 8018f4a:	e7e9      	b.n	8018f20 <_vfiprintf_r+0x4c>
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f50:	2320      	movs	r3, #32
 8018f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f5a:	2330      	movs	r3, #48	; 0x30
 8018f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019120 <_vfiprintf_r+0x24c>
 8018f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f64:	f04f 0901 	mov.w	r9, #1
 8018f68:	4623      	mov	r3, r4
 8018f6a:	469a      	mov	sl, r3
 8018f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f70:	b10a      	cbz	r2, 8018f76 <_vfiprintf_r+0xa2>
 8018f72:	2a25      	cmp	r2, #37	; 0x25
 8018f74:	d1f9      	bne.n	8018f6a <_vfiprintf_r+0x96>
 8018f76:	ebba 0b04 	subs.w	fp, sl, r4
 8018f7a:	d00b      	beq.n	8018f94 <_vfiprintf_r+0xc0>
 8018f7c:	465b      	mov	r3, fp
 8018f7e:	4622      	mov	r2, r4
 8018f80:	4629      	mov	r1, r5
 8018f82:	4630      	mov	r0, r6
 8018f84:	f7ff ff93 	bl	8018eae <__sfputs_r>
 8018f88:	3001      	adds	r0, #1
 8018f8a:	f000 80aa 	beq.w	80190e2 <_vfiprintf_r+0x20e>
 8018f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f90:	445a      	add	r2, fp
 8018f92:	9209      	str	r2, [sp, #36]	; 0x24
 8018f94:	f89a 3000 	ldrb.w	r3, [sl]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 80a2 	beq.w	80190e2 <_vfiprintf_r+0x20e>
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8018fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fa8:	f10a 0a01 	add.w	sl, sl, #1
 8018fac:	9304      	str	r3, [sp, #16]
 8018fae:	9307      	str	r3, [sp, #28]
 8018fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8018fb6:	4654      	mov	r4, sl
 8018fb8:	2205      	movs	r2, #5
 8018fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fbe:	4858      	ldr	r0, [pc, #352]	; (8019120 <_vfiprintf_r+0x24c>)
 8018fc0:	f7e7 f9a6 	bl	8000310 <memchr>
 8018fc4:	9a04      	ldr	r2, [sp, #16]
 8018fc6:	b9d8      	cbnz	r0, 8019000 <_vfiprintf_r+0x12c>
 8018fc8:	06d1      	lsls	r1, r2, #27
 8018fca:	bf44      	itt	mi
 8018fcc:	2320      	movmi	r3, #32
 8018fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fd2:	0713      	lsls	r3, r2, #28
 8018fd4:	bf44      	itt	mi
 8018fd6:	232b      	movmi	r3, #43	; 0x2b
 8018fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8018fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8018fe2:	d015      	beq.n	8019010 <_vfiprintf_r+0x13c>
 8018fe4:	9a07      	ldr	r2, [sp, #28]
 8018fe6:	4654      	mov	r4, sl
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f04f 0c0a 	mov.w	ip, #10
 8018fee:	4621      	mov	r1, r4
 8018ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ff4:	3b30      	subs	r3, #48	; 0x30
 8018ff6:	2b09      	cmp	r3, #9
 8018ff8:	d94e      	bls.n	8019098 <_vfiprintf_r+0x1c4>
 8018ffa:	b1b0      	cbz	r0, 801902a <_vfiprintf_r+0x156>
 8018ffc:	9207      	str	r2, [sp, #28]
 8018ffe:	e014      	b.n	801902a <_vfiprintf_r+0x156>
 8019000:	eba0 0308 	sub.w	r3, r0, r8
 8019004:	fa09 f303 	lsl.w	r3, r9, r3
 8019008:	4313      	orrs	r3, r2
 801900a:	9304      	str	r3, [sp, #16]
 801900c:	46a2      	mov	sl, r4
 801900e:	e7d2      	b.n	8018fb6 <_vfiprintf_r+0xe2>
 8019010:	9b03      	ldr	r3, [sp, #12]
 8019012:	1d19      	adds	r1, r3, #4
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	9103      	str	r1, [sp, #12]
 8019018:	2b00      	cmp	r3, #0
 801901a:	bfbb      	ittet	lt
 801901c:	425b      	neglt	r3, r3
 801901e:	f042 0202 	orrlt.w	r2, r2, #2
 8019022:	9307      	strge	r3, [sp, #28]
 8019024:	9307      	strlt	r3, [sp, #28]
 8019026:	bfb8      	it	lt
 8019028:	9204      	strlt	r2, [sp, #16]
 801902a:	7823      	ldrb	r3, [r4, #0]
 801902c:	2b2e      	cmp	r3, #46	; 0x2e
 801902e:	d10c      	bne.n	801904a <_vfiprintf_r+0x176>
 8019030:	7863      	ldrb	r3, [r4, #1]
 8019032:	2b2a      	cmp	r3, #42	; 0x2a
 8019034:	d135      	bne.n	80190a2 <_vfiprintf_r+0x1ce>
 8019036:	9b03      	ldr	r3, [sp, #12]
 8019038:	1d1a      	adds	r2, r3, #4
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	9203      	str	r2, [sp, #12]
 801903e:	2b00      	cmp	r3, #0
 8019040:	bfb8      	it	lt
 8019042:	f04f 33ff 	movlt.w	r3, #4294967295
 8019046:	3402      	adds	r4, #2
 8019048:	9305      	str	r3, [sp, #20]
 801904a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019130 <_vfiprintf_r+0x25c>
 801904e:	7821      	ldrb	r1, [r4, #0]
 8019050:	2203      	movs	r2, #3
 8019052:	4650      	mov	r0, sl
 8019054:	f7e7 f95c 	bl	8000310 <memchr>
 8019058:	b140      	cbz	r0, 801906c <_vfiprintf_r+0x198>
 801905a:	2340      	movs	r3, #64	; 0x40
 801905c:	eba0 000a 	sub.w	r0, r0, sl
 8019060:	fa03 f000 	lsl.w	r0, r3, r0
 8019064:	9b04      	ldr	r3, [sp, #16]
 8019066:	4303      	orrs	r3, r0
 8019068:	3401      	adds	r4, #1
 801906a:	9304      	str	r3, [sp, #16]
 801906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019070:	482c      	ldr	r0, [pc, #176]	; (8019124 <_vfiprintf_r+0x250>)
 8019072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019076:	2206      	movs	r2, #6
 8019078:	f7e7 f94a 	bl	8000310 <memchr>
 801907c:	2800      	cmp	r0, #0
 801907e:	d03f      	beq.n	8019100 <_vfiprintf_r+0x22c>
 8019080:	4b29      	ldr	r3, [pc, #164]	; (8019128 <_vfiprintf_r+0x254>)
 8019082:	bb1b      	cbnz	r3, 80190cc <_vfiprintf_r+0x1f8>
 8019084:	9b03      	ldr	r3, [sp, #12]
 8019086:	3307      	adds	r3, #7
 8019088:	f023 0307 	bic.w	r3, r3, #7
 801908c:	3308      	adds	r3, #8
 801908e:	9303      	str	r3, [sp, #12]
 8019090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019092:	443b      	add	r3, r7
 8019094:	9309      	str	r3, [sp, #36]	; 0x24
 8019096:	e767      	b.n	8018f68 <_vfiprintf_r+0x94>
 8019098:	fb0c 3202 	mla	r2, ip, r2, r3
 801909c:	460c      	mov	r4, r1
 801909e:	2001      	movs	r0, #1
 80190a0:	e7a5      	b.n	8018fee <_vfiprintf_r+0x11a>
 80190a2:	2300      	movs	r3, #0
 80190a4:	3401      	adds	r4, #1
 80190a6:	9305      	str	r3, [sp, #20]
 80190a8:	4619      	mov	r1, r3
 80190aa:	f04f 0c0a 	mov.w	ip, #10
 80190ae:	4620      	mov	r0, r4
 80190b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190b4:	3a30      	subs	r2, #48	; 0x30
 80190b6:	2a09      	cmp	r2, #9
 80190b8:	d903      	bls.n	80190c2 <_vfiprintf_r+0x1ee>
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d0c5      	beq.n	801904a <_vfiprintf_r+0x176>
 80190be:	9105      	str	r1, [sp, #20]
 80190c0:	e7c3      	b.n	801904a <_vfiprintf_r+0x176>
 80190c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80190c6:	4604      	mov	r4, r0
 80190c8:	2301      	movs	r3, #1
 80190ca:	e7f0      	b.n	80190ae <_vfiprintf_r+0x1da>
 80190cc:	ab03      	add	r3, sp, #12
 80190ce:	9300      	str	r3, [sp, #0]
 80190d0:	462a      	mov	r2, r5
 80190d2:	4b16      	ldr	r3, [pc, #88]	; (801912c <_vfiprintf_r+0x258>)
 80190d4:	a904      	add	r1, sp, #16
 80190d6:	4630      	mov	r0, r6
 80190d8:	f3af 8000 	nop.w
 80190dc:	4607      	mov	r7, r0
 80190de:	1c78      	adds	r0, r7, #1
 80190e0:	d1d6      	bne.n	8019090 <_vfiprintf_r+0x1bc>
 80190e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190e4:	07d9      	lsls	r1, r3, #31
 80190e6:	d405      	bmi.n	80190f4 <_vfiprintf_r+0x220>
 80190e8:	89ab      	ldrh	r3, [r5, #12]
 80190ea:	059a      	lsls	r2, r3, #22
 80190ec:	d402      	bmi.n	80190f4 <_vfiprintf_r+0x220>
 80190ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190f0:	f7ff fdaf 	bl	8018c52 <__retarget_lock_release_recursive>
 80190f4:	89ab      	ldrh	r3, [r5, #12]
 80190f6:	065b      	lsls	r3, r3, #25
 80190f8:	f53f af12 	bmi.w	8018f20 <_vfiprintf_r+0x4c>
 80190fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80190fe:	e711      	b.n	8018f24 <_vfiprintf_r+0x50>
 8019100:	ab03      	add	r3, sp, #12
 8019102:	9300      	str	r3, [sp, #0]
 8019104:	462a      	mov	r2, r5
 8019106:	4b09      	ldr	r3, [pc, #36]	; (801912c <_vfiprintf_r+0x258>)
 8019108:	a904      	add	r1, sp, #16
 801910a:	4630      	mov	r0, r6
 801910c:	f000 f880 	bl	8019210 <_printf_i>
 8019110:	e7e4      	b.n	80190dc <_vfiprintf_r+0x208>
 8019112:	bf00      	nop
 8019114:	0801b58c 	.word	0x0801b58c
 8019118:	0801b5ac 	.word	0x0801b5ac
 801911c:	0801b56c 	.word	0x0801b56c
 8019120:	0801b5d0 	.word	0x0801b5d0
 8019124:	0801b5da 	.word	0x0801b5da
 8019128:	00000000 	.word	0x00000000
 801912c:	08018eaf 	.word	0x08018eaf
 8019130:	0801b5d6 	.word	0x0801b5d6

08019134 <_printf_common>:
 8019134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019138:	4616      	mov	r6, r2
 801913a:	4699      	mov	r9, r3
 801913c:	688a      	ldr	r2, [r1, #8]
 801913e:	690b      	ldr	r3, [r1, #16]
 8019140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019144:	4293      	cmp	r3, r2
 8019146:	bfb8      	it	lt
 8019148:	4613      	movlt	r3, r2
 801914a:	6033      	str	r3, [r6, #0]
 801914c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019150:	4607      	mov	r7, r0
 8019152:	460c      	mov	r4, r1
 8019154:	b10a      	cbz	r2, 801915a <_printf_common+0x26>
 8019156:	3301      	adds	r3, #1
 8019158:	6033      	str	r3, [r6, #0]
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	0699      	lsls	r1, r3, #26
 801915e:	bf42      	ittt	mi
 8019160:	6833      	ldrmi	r3, [r6, #0]
 8019162:	3302      	addmi	r3, #2
 8019164:	6033      	strmi	r3, [r6, #0]
 8019166:	6825      	ldr	r5, [r4, #0]
 8019168:	f015 0506 	ands.w	r5, r5, #6
 801916c:	d106      	bne.n	801917c <_printf_common+0x48>
 801916e:	f104 0a19 	add.w	sl, r4, #25
 8019172:	68e3      	ldr	r3, [r4, #12]
 8019174:	6832      	ldr	r2, [r6, #0]
 8019176:	1a9b      	subs	r3, r3, r2
 8019178:	42ab      	cmp	r3, r5
 801917a:	dc26      	bgt.n	80191ca <_printf_common+0x96>
 801917c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019180:	1e13      	subs	r3, r2, #0
 8019182:	6822      	ldr	r2, [r4, #0]
 8019184:	bf18      	it	ne
 8019186:	2301      	movne	r3, #1
 8019188:	0692      	lsls	r2, r2, #26
 801918a:	d42b      	bmi.n	80191e4 <_printf_common+0xb0>
 801918c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019190:	4649      	mov	r1, r9
 8019192:	4638      	mov	r0, r7
 8019194:	47c0      	blx	r8
 8019196:	3001      	adds	r0, #1
 8019198:	d01e      	beq.n	80191d8 <_printf_common+0xa4>
 801919a:	6823      	ldr	r3, [r4, #0]
 801919c:	68e5      	ldr	r5, [r4, #12]
 801919e:	6832      	ldr	r2, [r6, #0]
 80191a0:	f003 0306 	and.w	r3, r3, #6
 80191a4:	2b04      	cmp	r3, #4
 80191a6:	bf08      	it	eq
 80191a8:	1aad      	subeq	r5, r5, r2
 80191aa:	68a3      	ldr	r3, [r4, #8]
 80191ac:	6922      	ldr	r2, [r4, #16]
 80191ae:	bf0c      	ite	eq
 80191b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80191b4:	2500      	movne	r5, #0
 80191b6:	4293      	cmp	r3, r2
 80191b8:	bfc4      	itt	gt
 80191ba:	1a9b      	subgt	r3, r3, r2
 80191bc:	18ed      	addgt	r5, r5, r3
 80191be:	2600      	movs	r6, #0
 80191c0:	341a      	adds	r4, #26
 80191c2:	42b5      	cmp	r5, r6
 80191c4:	d11a      	bne.n	80191fc <_printf_common+0xc8>
 80191c6:	2000      	movs	r0, #0
 80191c8:	e008      	b.n	80191dc <_printf_common+0xa8>
 80191ca:	2301      	movs	r3, #1
 80191cc:	4652      	mov	r2, sl
 80191ce:	4649      	mov	r1, r9
 80191d0:	4638      	mov	r0, r7
 80191d2:	47c0      	blx	r8
 80191d4:	3001      	adds	r0, #1
 80191d6:	d103      	bne.n	80191e0 <_printf_common+0xac>
 80191d8:	f04f 30ff 	mov.w	r0, #4294967295
 80191dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191e0:	3501      	adds	r5, #1
 80191e2:	e7c6      	b.n	8019172 <_printf_common+0x3e>
 80191e4:	18e1      	adds	r1, r4, r3
 80191e6:	1c5a      	adds	r2, r3, #1
 80191e8:	2030      	movs	r0, #48	; 0x30
 80191ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80191ee:	4422      	add	r2, r4
 80191f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80191f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80191f8:	3302      	adds	r3, #2
 80191fa:	e7c7      	b.n	801918c <_printf_common+0x58>
 80191fc:	2301      	movs	r3, #1
 80191fe:	4622      	mov	r2, r4
 8019200:	4649      	mov	r1, r9
 8019202:	4638      	mov	r0, r7
 8019204:	47c0      	blx	r8
 8019206:	3001      	adds	r0, #1
 8019208:	d0e6      	beq.n	80191d8 <_printf_common+0xa4>
 801920a:	3601      	adds	r6, #1
 801920c:	e7d9      	b.n	80191c2 <_printf_common+0x8e>
	...

08019210 <_printf_i>:
 8019210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019214:	7e0f      	ldrb	r7, [r1, #24]
 8019216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019218:	2f78      	cmp	r7, #120	; 0x78
 801921a:	4691      	mov	r9, r2
 801921c:	4680      	mov	r8, r0
 801921e:	460c      	mov	r4, r1
 8019220:	469a      	mov	sl, r3
 8019222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019226:	d807      	bhi.n	8019238 <_printf_i+0x28>
 8019228:	2f62      	cmp	r7, #98	; 0x62
 801922a:	d80a      	bhi.n	8019242 <_printf_i+0x32>
 801922c:	2f00      	cmp	r7, #0
 801922e:	f000 80d8 	beq.w	80193e2 <_printf_i+0x1d2>
 8019232:	2f58      	cmp	r7, #88	; 0x58
 8019234:	f000 80a3 	beq.w	801937e <_printf_i+0x16e>
 8019238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801923c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019240:	e03a      	b.n	80192b8 <_printf_i+0xa8>
 8019242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019246:	2b15      	cmp	r3, #21
 8019248:	d8f6      	bhi.n	8019238 <_printf_i+0x28>
 801924a:	a101      	add	r1, pc, #4	; (adr r1, 8019250 <_printf_i+0x40>)
 801924c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019250:	080192a9 	.word	0x080192a9
 8019254:	080192bd 	.word	0x080192bd
 8019258:	08019239 	.word	0x08019239
 801925c:	08019239 	.word	0x08019239
 8019260:	08019239 	.word	0x08019239
 8019264:	08019239 	.word	0x08019239
 8019268:	080192bd 	.word	0x080192bd
 801926c:	08019239 	.word	0x08019239
 8019270:	08019239 	.word	0x08019239
 8019274:	08019239 	.word	0x08019239
 8019278:	08019239 	.word	0x08019239
 801927c:	080193c9 	.word	0x080193c9
 8019280:	080192ed 	.word	0x080192ed
 8019284:	080193ab 	.word	0x080193ab
 8019288:	08019239 	.word	0x08019239
 801928c:	08019239 	.word	0x08019239
 8019290:	080193eb 	.word	0x080193eb
 8019294:	08019239 	.word	0x08019239
 8019298:	080192ed 	.word	0x080192ed
 801929c:	08019239 	.word	0x08019239
 80192a0:	08019239 	.word	0x08019239
 80192a4:	080193b3 	.word	0x080193b3
 80192a8:	682b      	ldr	r3, [r5, #0]
 80192aa:	1d1a      	adds	r2, r3, #4
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	602a      	str	r2, [r5, #0]
 80192b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80192b8:	2301      	movs	r3, #1
 80192ba:	e0a3      	b.n	8019404 <_printf_i+0x1f4>
 80192bc:	6820      	ldr	r0, [r4, #0]
 80192be:	6829      	ldr	r1, [r5, #0]
 80192c0:	0606      	lsls	r6, r0, #24
 80192c2:	f101 0304 	add.w	r3, r1, #4
 80192c6:	d50a      	bpl.n	80192de <_printf_i+0xce>
 80192c8:	680e      	ldr	r6, [r1, #0]
 80192ca:	602b      	str	r3, [r5, #0]
 80192cc:	2e00      	cmp	r6, #0
 80192ce:	da03      	bge.n	80192d8 <_printf_i+0xc8>
 80192d0:	232d      	movs	r3, #45	; 0x2d
 80192d2:	4276      	negs	r6, r6
 80192d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192d8:	485e      	ldr	r0, [pc, #376]	; (8019454 <_printf_i+0x244>)
 80192da:	230a      	movs	r3, #10
 80192dc:	e019      	b.n	8019312 <_printf_i+0x102>
 80192de:	680e      	ldr	r6, [r1, #0]
 80192e0:	602b      	str	r3, [r5, #0]
 80192e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80192e6:	bf18      	it	ne
 80192e8:	b236      	sxthne	r6, r6
 80192ea:	e7ef      	b.n	80192cc <_printf_i+0xbc>
 80192ec:	682b      	ldr	r3, [r5, #0]
 80192ee:	6820      	ldr	r0, [r4, #0]
 80192f0:	1d19      	adds	r1, r3, #4
 80192f2:	6029      	str	r1, [r5, #0]
 80192f4:	0601      	lsls	r1, r0, #24
 80192f6:	d501      	bpl.n	80192fc <_printf_i+0xec>
 80192f8:	681e      	ldr	r6, [r3, #0]
 80192fa:	e002      	b.n	8019302 <_printf_i+0xf2>
 80192fc:	0646      	lsls	r6, r0, #25
 80192fe:	d5fb      	bpl.n	80192f8 <_printf_i+0xe8>
 8019300:	881e      	ldrh	r6, [r3, #0]
 8019302:	4854      	ldr	r0, [pc, #336]	; (8019454 <_printf_i+0x244>)
 8019304:	2f6f      	cmp	r7, #111	; 0x6f
 8019306:	bf0c      	ite	eq
 8019308:	2308      	moveq	r3, #8
 801930a:	230a      	movne	r3, #10
 801930c:	2100      	movs	r1, #0
 801930e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019312:	6865      	ldr	r5, [r4, #4]
 8019314:	60a5      	str	r5, [r4, #8]
 8019316:	2d00      	cmp	r5, #0
 8019318:	bfa2      	ittt	ge
 801931a:	6821      	ldrge	r1, [r4, #0]
 801931c:	f021 0104 	bicge.w	r1, r1, #4
 8019320:	6021      	strge	r1, [r4, #0]
 8019322:	b90e      	cbnz	r6, 8019328 <_printf_i+0x118>
 8019324:	2d00      	cmp	r5, #0
 8019326:	d04d      	beq.n	80193c4 <_printf_i+0x1b4>
 8019328:	4615      	mov	r5, r2
 801932a:	fbb6 f1f3 	udiv	r1, r6, r3
 801932e:	fb03 6711 	mls	r7, r3, r1, r6
 8019332:	5dc7      	ldrb	r7, [r0, r7]
 8019334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019338:	4637      	mov	r7, r6
 801933a:	42bb      	cmp	r3, r7
 801933c:	460e      	mov	r6, r1
 801933e:	d9f4      	bls.n	801932a <_printf_i+0x11a>
 8019340:	2b08      	cmp	r3, #8
 8019342:	d10b      	bne.n	801935c <_printf_i+0x14c>
 8019344:	6823      	ldr	r3, [r4, #0]
 8019346:	07de      	lsls	r6, r3, #31
 8019348:	d508      	bpl.n	801935c <_printf_i+0x14c>
 801934a:	6923      	ldr	r3, [r4, #16]
 801934c:	6861      	ldr	r1, [r4, #4]
 801934e:	4299      	cmp	r1, r3
 8019350:	bfde      	ittt	le
 8019352:	2330      	movle	r3, #48	; 0x30
 8019354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019358:	f105 35ff 	addle.w	r5, r5, #4294967295
 801935c:	1b52      	subs	r2, r2, r5
 801935e:	6122      	str	r2, [r4, #16]
 8019360:	f8cd a000 	str.w	sl, [sp]
 8019364:	464b      	mov	r3, r9
 8019366:	aa03      	add	r2, sp, #12
 8019368:	4621      	mov	r1, r4
 801936a:	4640      	mov	r0, r8
 801936c:	f7ff fee2 	bl	8019134 <_printf_common>
 8019370:	3001      	adds	r0, #1
 8019372:	d14c      	bne.n	801940e <_printf_i+0x1fe>
 8019374:	f04f 30ff 	mov.w	r0, #4294967295
 8019378:	b004      	add	sp, #16
 801937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801937e:	4835      	ldr	r0, [pc, #212]	; (8019454 <_printf_i+0x244>)
 8019380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019384:	6829      	ldr	r1, [r5, #0]
 8019386:	6823      	ldr	r3, [r4, #0]
 8019388:	f851 6b04 	ldr.w	r6, [r1], #4
 801938c:	6029      	str	r1, [r5, #0]
 801938e:	061d      	lsls	r5, r3, #24
 8019390:	d514      	bpl.n	80193bc <_printf_i+0x1ac>
 8019392:	07df      	lsls	r7, r3, #31
 8019394:	bf44      	itt	mi
 8019396:	f043 0320 	orrmi.w	r3, r3, #32
 801939a:	6023      	strmi	r3, [r4, #0]
 801939c:	b91e      	cbnz	r6, 80193a6 <_printf_i+0x196>
 801939e:	6823      	ldr	r3, [r4, #0]
 80193a0:	f023 0320 	bic.w	r3, r3, #32
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	2310      	movs	r3, #16
 80193a8:	e7b0      	b.n	801930c <_printf_i+0xfc>
 80193aa:	6823      	ldr	r3, [r4, #0]
 80193ac:	f043 0320 	orr.w	r3, r3, #32
 80193b0:	6023      	str	r3, [r4, #0]
 80193b2:	2378      	movs	r3, #120	; 0x78
 80193b4:	4828      	ldr	r0, [pc, #160]	; (8019458 <_printf_i+0x248>)
 80193b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80193ba:	e7e3      	b.n	8019384 <_printf_i+0x174>
 80193bc:	0659      	lsls	r1, r3, #25
 80193be:	bf48      	it	mi
 80193c0:	b2b6      	uxthmi	r6, r6
 80193c2:	e7e6      	b.n	8019392 <_printf_i+0x182>
 80193c4:	4615      	mov	r5, r2
 80193c6:	e7bb      	b.n	8019340 <_printf_i+0x130>
 80193c8:	682b      	ldr	r3, [r5, #0]
 80193ca:	6826      	ldr	r6, [r4, #0]
 80193cc:	6961      	ldr	r1, [r4, #20]
 80193ce:	1d18      	adds	r0, r3, #4
 80193d0:	6028      	str	r0, [r5, #0]
 80193d2:	0635      	lsls	r5, r6, #24
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	d501      	bpl.n	80193dc <_printf_i+0x1cc>
 80193d8:	6019      	str	r1, [r3, #0]
 80193da:	e002      	b.n	80193e2 <_printf_i+0x1d2>
 80193dc:	0670      	lsls	r0, r6, #25
 80193de:	d5fb      	bpl.n	80193d8 <_printf_i+0x1c8>
 80193e0:	8019      	strh	r1, [r3, #0]
 80193e2:	2300      	movs	r3, #0
 80193e4:	6123      	str	r3, [r4, #16]
 80193e6:	4615      	mov	r5, r2
 80193e8:	e7ba      	b.n	8019360 <_printf_i+0x150>
 80193ea:	682b      	ldr	r3, [r5, #0]
 80193ec:	1d1a      	adds	r2, r3, #4
 80193ee:	602a      	str	r2, [r5, #0]
 80193f0:	681d      	ldr	r5, [r3, #0]
 80193f2:	6862      	ldr	r2, [r4, #4]
 80193f4:	2100      	movs	r1, #0
 80193f6:	4628      	mov	r0, r5
 80193f8:	f7e6 ff8a 	bl	8000310 <memchr>
 80193fc:	b108      	cbz	r0, 8019402 <_printf_i+0x1f2>
 80193fe:	1b40      	subs	r0, r0, r5
 8019400:	6060      	str	r0, [r4, #4]
 8019402:	6863      	ldr	r3, [r4, #4]
 8019404:	6123      	str	r3, [r4, #16]
 8019406:	2300      	movs	r3, #0
 8019408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801940c:	e7a8      	b.n	8019360 <_printf_i+0x150>
 801940e:	6923      	ldr	r3, [r4, #16]
 8019410:	462a      	mov	r2, r5
 8019412:	4649      	mov	r1, r9
 8019414:	4640      	mov	r0, r8
 8019416:	47d0      	blx	sl
 8019418:	3001      	adds	r0, #1
 801941a:	d0ab      	beq.n	8019374 <_printf_i+0x164>
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	079b      	lsls	r3, r3, #30
 8019420:	d413      	bmi.n	801944a <_printf_i+0x23a>
 8019422:	68e0      	ldr	r0, [r4, #12]
 8019424:	9b03      	ldr	r3, [sp, #12]
 8019426:	4298      	cmp	r0, r3
 8019428:	bfb8      	it	lt
 801942a:	4618      	movlt	r0, r3
 801942c:	e7a4      	b.n	8019378 <_printf_i+0x168>
 801942e:	2301      	movs	r3, #1
 8019430:	4632      	mov	r2, r6
 8019432:	4649      	mov	r1, r9
 8019434:	4640      	mov	r0, r8
 8019436:	47d0      	blx	sl
 8019438:	3001      	adds	r0, #1
 801943a:	d09b      	beq.n	8019374 <_printf_i+0x164>
 801943c:	3501      	adds	r5, #1
 801943e:	68e3      	ldr	r3, [r4, #12]
 8019440:	9903      	ldr	r1, [sp, #12]
 8019442:	1a5b      	subs	r3, r3, r1
 8019444:	42ab      	cmp	r3, r5
 8019446:	dcf2      	bgt.n	801942e <_printf_i+0x21e>
 8019448:	e7eb      	b.n	8019422 <_printf_i+0x212>
 801944a:	2500      	movs	r5, #0
 801944c:	f104 0619 	add.w	r6, r4, #25
 8019450:	e7f5      	b.n	801943e <_printf_i+0x22e>
 8019452:	bf00      	nop
 8019454:	0801b5e1 	.word	0x0801b5e1
 8019458:	0801b5f2 	.word	0x0801b5f2

0801945c <cleanup_glue>:
 801945c:	b538      	push	{r3, r4, r5, lr}
 801945e:	460c      	mov	r4, r1
 8019460:	6809      	ldr	r1, [r1, #0]
 8019462:	4605      	mov	r5, r0
 8019464:	b109      	cbz	r1, 801946a <cleanup_glue+0xe>
 8019466:	f7ff fff9 	bl	801945c <cleanup_glue>
 801946a:	4621      	mov	r1, r4
 801946c:	4628      	mov	r0, r5
 801946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019472:	f7ff bc25 	b.w	8018cc0 <_free_r>
	...

08019478 <_reclaim_reent>:
 8019478:	4b2c      	ldr	r3, [pc, #176]	; (801952c <_reclaim_reent+0xb4>)
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	4283      	cmp	r3, r0
 801947e:	b570      	push	{r4, r5, r6, lr}
 8019480:	4604      	mov	r4, r0
 8019482:	d051      	beq.n	8019528 <_reclaim_reent+0xb0>
 8019484:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019486:	b143      	cbz	r3, 801949a <_reclaim_reent+0x22>
 8019488:	68db      	ldr	r3, [r3, #12]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d14a      	bne.n	8019524 <_reclaim_reent+0xac>
 801948e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019490:	6819      	ldr	r1, [r3, #0]
 8019492:	b111      	cbz	r1, 801949a <_reclaim_reent+0x22>
 8019494:	4620      	mov	r0, r4
 8019496:	f7ff fc13 	bl	8018cc0 <_free_r>
 801949a:	6961      	ldr	r1, [r4, #20]
 801949c:	b111      	cbz	r1, 80194a4 <_reclaim_reent+0x2c>
 801949e:	4620      	mov	r0, r4
 80194a0:	f7ff fc0e 	bl	8018cc0 <_free_r>
 80194a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80194a6:	b111      	cbz	r1, 80194ae <_reclaim_reent+0x36>
 80194a8:	4620      	mov	r0, r4
 80194aa:	f7ff fc09 	bl	8018cc0 <_free_r>
 80194ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80194b0:	b111      	cbz	r1, 80194b8 <_reclaim_reent+0x40>
 80194b2:	4620      	mov	r0, r4
 80194b4:	f7ff fc04 	bl	8018cc0 <_free_r>
 80194b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80194ba:	b111      	cbz	r1, 80194c2 <_reclaim_reent+0x4a>
 80194bc:	4620      	mov	r0, r4
 80194be:	f7ff fbff 	bl	8018cc0 <_free_r>
 80194c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80194c4:	b111      	cbz	r1, 80194cc <_reclaim_reent+0x54>
 80194c6:	4620      	mov	r0, r4
 80194c8:	f7ff fbfa 	bl	8018cc0 <_free_r>
 80194cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80194ce:	b111      	cbz	r1, 80194d6 <_reclaim_reent+0x5e>
 80194d0:	4620      	mov	r0, r4
 80194d2:	f7ff fbf5 	bl	8018cc0 <_free_r>
 80194d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80194d8:	b111      	cbz	r1, 80194e0 <_reclaim_reent+0x68>
 80194da:	4620      	mov	r0, r4
 80194dc:	f7ff fbf0 	bl	8018cc0 <_free_r>
 80194e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194e2:	b111      	cbz	r1, 80194ea <_reclaim_reent+0x72>
 80194e4:	4620      	mov	r0, r4
 80194e6:	f7ff fbeb 	bl	8018cc0 <_free_r>
 80194ea:	69a3      	ldr	r3, [r4, #24]
 80194ec:	b1e3      	cbz	r3, 8019528 <_reclaim_reent+0xb0>
 80194ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80194f0:	4620      	mov	r0, r4
 80194f2:	4798      	blx	r3
 80194f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80194f6:	b1b9      	cbz	r1, 8019528 <_reclaim_reent+0xb0>
 80194f8:	4620      	mov	r0, r4
 80194fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194fe:	f7ff bfad 	b.w	801945c <cleanup_glue>
 8019502:	5949      	ldr	r1, [r1, r5]
 8019504:	b941      	cbnz	r1, 8019518 <_reclaim_reent+0xa0>
 8019506:	3504      	adds	r5, #4
 8019508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801950a:	2d80      	cmp	r5, #128	; 0x80
 801950c:	68d9      	ldr	r1, [r3, #12]
 801950e:	d1f8      	bne.n	8019502 <_reclaim_reent+0x8a>
 8019510:	4620      	mov	r0, r4
 8019512:	f7ff fbd5 	bl	8018cc0 <_free_r>
 8019516:	e7ba      	b.n	801948e <_reclaim_reent+0x16>
 8019518:	680e      	ldr	r6, [r1, #0]
 801951a:	4620      	mov	r0, r4
 801951c:	f7ff fbd0 	bl	8018cc0 <_free_r>
 8019520:	4631      	mov	r1, r6
 8019522:	e7ef      	b.n	8019504 <_reclaim_reent+0x8c>
 8019524:	2500      	movs	r5, #0
 8019526:	e7ef      	b.n	8019508 <_reclaim_reent+0x90>
 8019528:	bd70      	pop	{r4, r5, r6, pc}
 801952a:	bf00      	nop
 801952c:	240000a8 	.word	0x240000a8

08019530 <_sbrk_r>:
 8019530:	b538      	push	{r3, r4, r5, lr}
 8019532:	4d06      	ldr	r5, [pc, #24]	; (801954c <_sbrk_r+0x1c>)
 8019534:	2300      	movs	r3, #0
 8019536:	4604      	mov	r4, r0
 8019538:	4608      	mov	r0, r1
 801953a:	602b      	str	r3, [r5, #0]
 801953c:	f7e8 ff7a 	bl	8002434 <_sbrk>
 8019540:	1c43      	adds	r3, r0, #1
 8019542:	d102      	bne.n	801954a <_sbrk_r+0x1a>
 8019544:	682b      	ldr	r3, [r5, #0]
 8019546:	b103      	cbz	r3, 801954a <_sbrk_r+0x1a>
 8019548:	6023      	str	r3, [r4, #0]
 801954a:	bd38      	pop	{r3, r4, r5, pc}
 801954c:	2400b414 	.word	0x2400b414

08019550 <_raise_r>:
 8019550:	291f      	cmp	r1, #31
 8019552:	b538      	push	{r3, r4, r5, lr}
 8019554:	4604      	mov	r4, r0
 8019556:	460d      	mov	r5, r1
 8019558:	d904      	bls.n	8019564 <_raise_r+0x14>
 801955a:	2316      	movs	r3, #22
 801955c:	6003      	str	r3, [r0, #0]
 801955e:	f04f 30ff 	mov.w	r0, #4294967295
 8019562:	bd38      	pop	{r3, r4, r5, pc}
 8019564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019566:	b112      	cbz	r2, 801956e <_raise_r+0x1e>
 8019568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801956c:	b94b      	cbnz	r3, 8019582 <_raise_r+0x32>
 801956e:	4620      	mov	r0, r4
 8019570:	f000 f830 	bl	80195d4 <_getpid_r>
 8019574:	462a      	mov	r2, r5
 8019576:	4601      	mov	r1, r0
 8019578:	4620      	mov	r0, r4
 801957a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801957e:	f000 b817 	b.w	80195b0 <_kill_r>
 8019582:	2b01      	cmp	r3, #1
 8019584:	d00a      	beq.n	801959c <_raise_r+0x4c>
 8019586:	1c59      	adds	r1, r3, #1
 8019588:	d103      	bne.n	8019592 <_raise_r+0x42>
 801958a:	2316      	movs	r3, #22
 801958c:	6003      	str	r3, [r0, #0]
 801958e:	2001      	movs	r0, #1
 8019590:	e7e7      	b.n	8019562 <_raise_r+0x12>
 8019592:	2400      	movs	r4, #0
 8019594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019598:	4628      	mov	r0, r5
 801959a:	4798      	blx	r3
 801959c:	2000      	movs	r0, #0
 801959e:	e7e0      	b.n	8019562 <_raise_r+0x12>

080195a0 <raise>:
 80195a0:	4b02      	ldr	r3, [pc, #8]	; (80195ac <raise+0xc>)
 80195a2:	4601      	mov	r1, r0
 80195a4:	6818      	ldr	r0, [r3, #0]
 80195a6:	f7ff bfd3 	b.w	8019550 <_raise_r>
 80195aa:	bf00      	nop
 80195ac:	240000a8 	.word	0x240000a8

080195b0 <_kill_r>:
 80195b0:	b538      	push	{r3, r4, r5, lr}
 80195b2:	4d07      	ldr	r5, [pc, #28]	; (80195d0 <_kill_r+0x20>)
 80195b4:	2300      	movs	r3, #0
 80195b6:	4604      	mov	r4, r0
 80195b8:	4608      	mov	r0, r1
 80195ba:	4611      	mov	r1, r2
 80195bc:	602b      	str	r3, [r5, #0]
 80195be:	f7e8 ff01 	bl	80023c4 <_kill>
 80195c2:	1c43      	adds	r3, r0, #1
 80195c4:	d102      	bne.n	80195cc <_kill_r+0x1c>
 80195c6:	682b      	ldr	r3, [r5, #0]
 80195c8:	b103      	cbz	r3, 80195cc <_kill_r+0x1c>
 80195ca:	6023      	str	r3, [r4, #0]
 80195cc:	bd38      	pop	{r3, r4, r5, pc}
 80195ce:	bf00      	nop
 80195d0:	2400b414 	.word	0x2400b414

080195d4 <_getpid_r>:
 80195d4:	f7e8 bef4 	b.w	80023c0 <_getpid>

080195d8 <__sread>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	460c      	mov	r4, r1
 80195dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195e0:	f000 fac8 	bl	8019b74 <_read_r>
 80195e4:	2800      	cmp	r0, #0
 80195e6:	bfab      	itete	ge
 80195e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80195ea:	89a3      	ldrhlt	r3, [r4, #12]
 80195ec:	181b      	addge	r3, r3, r0
 80195ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80195f2:	bfac      	ite	ge
 80195f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80195f6:	81a3      	strhlt	r3, [r4, #12]
 80195f8:	bd10      	pop	{r4, pc}

080195fa <__swrite>:
 80195fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fe:	461f      	mov	r7, r3
 8019600:	898b      	ldrh	r3, [r1, #12]
 8019602:	05db      	lsls	r3, r3, #23
 8019604:	4605      	mov	r5, r0
 8019606:	460c      	mov	r4, r1
 8019608:	4616      	mov	r6, r2
 801960a:	d505      	bpl.n	8019618 <__swrite+0x1e>
 801960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019610:	2302      	movs	r3, #2
 8019612:	2200      	movs	r2, #0
 8019614:	f000 fa2a 	bl	8019a6c <_lseek_r>
 8019618:	89a3      	ldrh	r3, [r4, #12]
 801961a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801961e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019622:	81a3      	strh	r3, [r4, #12]
 8019624:	4632      	mov	r2, r6
 8019626:	463b      	mov	r3, r7
 8019628:	4628      	mov	r0, r5
 801962a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801962e:	f000 b869 	b.w	8019704 <_write_r>

08019632 <__sseek>:
 8019632:	b510      	push	{r4, lr}
 8019634:	460c      	mov	r4, r1
 8019636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801963a:	f000 fa17 	bl	8019a6c <_lseek_r>
 801963e:	1c43      	adds	r3, r0, #1
 8019640:	89a3      	ldrh	r3, [r4, #12]
 8019642:	bf15      	itete	ne
 8019644:	6560      	strne	r0, [r4, #84]	; 0x54
 8019646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801964a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801964e:	81a3      	strheq	r3, [r4, #12]
 8019650:	bf18      	it	ne
 8019652:	81a3      	strhne	r3, [r4, #12]
 8019654:	bd10      	pop	{r4, pc}

08019656 <__sclose>:
 8019656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801965a:	f000 b935 	b.w	80198c8 <_close_r>
	...

08019660 <__swbuf_r>:
 8019660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019662:	460e      	mov	r6, r1
 8019664:	4614      	mov	r4, r2
 8019666:	4605      	mov	r5, r0
 8019668:	b118      	cbz	r0, 8019672 <__swbuf_r+0x12>
 801966a:	6983      	ldr	r3, [r0, #24]
 801966c:	b90b      	cbnz	r3, 8019672 <__swbuf_r+0x12>
 801966e:	f7ff fa19 	bl	8018aa4 <__sinit>
 8019672:	4b21      	ldr	r3, [pc, #132]	; (80196f8 <__swbuf_r+0x98>)
 8019674:	429c      	cmp	r4, r3
 8019676:	d12b      	bne.n	80196d0 <__swbuf_r+0x70>
 8019678:	686c      	ldr	r4, [r5, #4]
 801967a:	69a3      	ldr	r3, [r4, #24]
 801967c:	60a3      	str	r3, [r4, #8]
 801967e:	89a3      	ldrh	r3, [r4, #12]
 8019680:	071a      	lsls	r2, r3, #28
 8019682:	d52f      	bpl.n	80196e4 <__swbuf_r+0x84>
 8019684:	6923      	ldr	r3, [r4, #16]
 8019686:	b36b      	cbz	r3, 80196e4 <__swbuf_r+0x84>
 8019688:	6923      	ldr	r3, [r4, #16]
 801968a:	6820      	ldr	r0, [r4, #0]
 801968c:	1ac0      	subs	r0, r0, r3
 801968e:	6963      	ldr	r3, [r4, #20]
 8019690:	b2f6      	uxtb	r6, r6
 8019692:	4283      	cmp	r3, r0
 8019694:	4637      	mov	r7, r6
 8019696:	dc04      	bgt.n	80196a2 <__swbuf_r+0x42>
 8019698:	4621      	mov	r1, r4
 801969a:	4628      	mov	r0, r5
 801969c:	f000 f9aa 	bl	80199f4 <_fflush_r>
 80196a0:	bb30      	cbnz	r0, 80196f0 <__swbuf_r+0x90>
 80196a2:	68a3      	ldr	r3, [r4, #8]
 80196a4:	3b01      	subs	r3, #1
 80196a6:	60a3      	str	r3, [r4, #8]
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	1c5a      	adds	r2, r3, #1
 80196ac:	6022      	str	r2, [r4, #0]
 80196ae:	701e      	strb	r6, [r3, #0]
 80196b0:	6963      	ldr	r3, [r4, #20]
 80196b2:	3001      	adds	r0, #1
 80196b4:	4283      	cmp	r3, r0
 80196b6:	d004      	beq.n	80196c2 <__swbuf_r+0x62>
 80196b8:	89a3      	ldrh	r3, [r4, #12]
 80196ba:	07db      	lsls	r3, r3, #31
 80196bc:	d506      	bpl.n	80196cc <__swbuf_r+0x6c>
 80196be:	2e0a      	cmp	r6, #10
 80196c0:	d104      	bne.n	80196cc <__swbuf_r+0x6c>
 80196c2:	4621      	mov	r1, r4
 80196c4:	4628      	mov	r0, r5
 80196c6:	f000 f995 	bl	80199f4 <_fflush_r>
 80196ca:	b988      	cbnz	r0, 80196f0 <__swbuf_r+0x90>
 80196cc:	4638      	mov	r0, r7
 80196ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196d0:	4b0a      	ldr	r3, [pc, #40]	; (80196fc <__swbuf_r+0x9c>)
 80196d2:	429c      	cmp	r4, r3
 80196d4:	d101      	bne.n	80196da <__swbuf_r+0x7a>
 80196d6:	68ac      	ldr	r4, [r5, #8]
 80196d8:	e7cf      	b.n	801967a <__swbuf_r+0x1a>
 80196da:	4b09      	ldr	r3, [pc, #36]	; (8019700 <__swbuf_r+0xa0>)
 80196dc:	429c      	cmp	r4, r3
 80196de:	bf08      	it	eq
 80196e0:	68ec      	ldreq	r4, [r5, #12]
 80196e2:	e7ca      	b.n	801967a <__swbuf_r+0x1a>
 80196e4:	4621      	mov	r1, r4
 80196e6:	4628      	mov	r0, r5
 80196e8:	f000 f81e 	bl	8019728 <__swsetup_r>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d0cb      	beq.n	8019688 <__swbuf_r+0x28>
 80196f0:	f04f 37ff 	mov.w	r7, #4294967295
 80196f4:	e7ea      	b.n	80196cc <__swbuf_r+0x6c>
 80196f6:	bf00      	nop
 80196f8:	0801b58c 	.word	0x0801b58c
 80196fc:	0801b5ac 	.word	0x0801b5ac
 8019700:	0801b56c 	.word	0x0801b56c

08019704 <_write_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4d07      	ldr	r5, [pc, #28]	; (8019724 <_write_r+0x20>)
 8019708:	4604      	mov	r4, r0
 801970a:	4608      	mov	r0, r1
 801970c:	4611      	mov	r1, r2
 801970e:	2200      	movs	r2, #0
 8019710:	602a      	str	r2, [r5, #0]
 8019712:	461a      	mov	r2, r3
 8019714:	f7e8 fe74 	bl	8002400 <_write>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_write_r+0x1e>
 801971c:	682b      	ldr	r3, [r5, #0]
 801971e:	b103      	cbz	r3, 8019722 <_write_r+0x1e>
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	2400b414 	.word	0x2400b414

08019728 <__swsetup_r>:
 8019728:	4b32      	ldr	r3, [pc, #200]	; (80197f4 <__swsetup_r+0xcc>)
 801972a:	b570      	push	{r4, r5, r6, lr}
 801972c:	681d      	ldr	r5, [r3, #0]
 801972e:	4606      	mov	r6, r0
 8019730:	460c      	mov	r4, r1
 8019732:	b125      	cbz	r5, 801973e <__swsetup_r+0x16>
 8019734:	69ab      	ldr	r3, [r5, #24]
 8019736:	b913      	cbnz	r3, 801973e <__swsetup_r+0x16>
 8019738:	4628      	mov	r0, r5
 801973a:	f7ff f9b3 	bl	8018aa4 <__sinit>
 801973e:	4b2e      	ldr	r3, [pc, #184]	; (80197f8 <__swsetup_r+0xd0>)
 8019740:	429c      	cmp	r4, r3
 8019742:	d10f      	bne.n	8019764 <__swsetup_r+0x3c>
 8019744:	686c      	ldr	r4, [r5, #4]
 8019746:	89a3      	ldrh	r3, [r4, #12]
 8019748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801974c:	0719      	lsls	r1, r3, #28
 801974e:	d42c      	bmi.n	80197aa <__swsetup_r+0x82>
 8019750:	06dd      	lsls	r5, r3, #27
 8019752:	d411      	bmi.n	8019778 <__swsetup_r+0x50>
 8019754:	2309      	movs	r3, #9
 8019756:	6033      	str	r3, [r6, #0]
 8019758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801975c:	81a3      	strh	r3, [r4, #12]
 801975e:	f04f 30ff 	mov.w	r0, #4294967295
 8019762:	e03e      	b.n	80197e2 <__swsetup_r+0xba>
 8019764:	4b25      	ldr	r3, [pc, #148]	; (80197fc <__swsetup_r+0xd4>)
 8019766:	429c      	cmp	r4, r3
 8019768:	d101      	bne.n	801976e <__swsetup_r+0x46>
 801976a:	68ac      	ldr	r4, [r5, #8]
 801976c:	e7eb      	b.n	8019746 <__swsetup_r+0x1e>
 801976e:	4b24      	ldr	r3, [pc, #144]	; (8019800 <__swsetup_r+0xd8>)
 8019770:	429c      	cmp	r4, r3
 8019772:	bf08      	it	eq
 8019774:	68ec      	ldreq	r4, [r5, #12]
 8019776:	e7e6      	b.n	8019746 <__swsetup_r+0x1e>
 8019778:	0758      	lsls	r0, r3, #29
 801977a:	d512      	bpl.n	80197a2 <__swsetup_r+0x7a>
 801977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801977e:	b141      	cbz	r1, 8019792 <__swsetup_r+0x6a>
 8019780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019784:	4299      	cmp	r1, r3
 8019786:	d002      	beq.n	801978e <__swsetup_r+0x66>
 8019788:	4630      	mov	r0, r6
 801978a:	f7ff fa99 	bl	8018cc0 <_free_r>
 801978e:	2300      	movs	r3, #0
 8019790:	6363      	str	r3, [r4, #52]	; 0x34
 8019792:	89a3      	ldrh	r3, [r4, #12]
 8019794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019798:	81a3      	strh	r3, [r4, #12]
 801979a:	2300      	movs	r3, #0
 801979c:	6063      	str	r3, [r4, #4]
 801979e:	6923      	ldr	r3, [r4, #16]
 80197a0:	6023      	str	r3, [r4, #0]
 80197a2:	89a3      	ldrh	r3, [r4, #12]
 80197a4:	f043 0308 	orr.w	r3, r3, #8
 80197a8:	81a3      	strh	r3, [r4, #12]
 80197aa:	6923      	ldr	r3, [r4, #16]
 80197ac:	b94b      	cbnz	r3, 80197c2 <__swsetup_r+0x9a>
 80197ae:	89a3      	ldrh	r3, [r4, #12]
 80197b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80197b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197b8:	d003      	beq.n	80197c2 <__swsetup_r+0x9a>
 80197ba:	4621      	mov	r1, r4
 80197bc:	4630      	mov	r0, r6
 80197be:	f000 f98d 	bl	8019adc <__smakebuf_r>
 80197c2:	89a0      	ldrh	r0, [r4, #12]
 80197c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80197c8:	f010 0301 	ands.w	r3, r0, #1
 80197cc:	d00a      	beq.n	80197e4 <__swsetup_r+0xbc>
 80197ce:	2300      	movs	r3, #0
 80197d0:	60a3      	str	r3, [r4, #8]
 80197d2:	6963      	ldr	r3, [r4, #20]
 80197d4:	425b      	negs	r3, r3
 80197d6:	61a3      	str	r3, [r4, #24]
 80197d8:	6923      	ldr	r3, [r4, #16]
 80197da:	b943      	cbnz	r3, 80197ee <__swsetup_r+0xc6>
 80197dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80197e0:	d1ba      	bne.n	8019758 <__swsetup_r+0x30>
 80197e2:	bd70      	pop	{r4, r5, r6, pc}
 80197e4:	0781      	lsls	r1, r0, #30
 80197e6:	bf58      	it	pl
 80197e8:	6963      	ldrpl	r3, [r4, #20]
 80197ea:	60a3      	str	r3, [r4, #8]
 80197ec:	e7f4      	b.n	80197d8 <__swsetup_r+0xb0>
 80197ee:	2000      	movs	r0, #0
 80197f0:	e7f7      	b.n	80197e2 <__swsetup_r+0xba>
 80197f2:	bf00      	nop
 80197f4:	240000a8 	.word	0x240000a8
 80197f8:	0801b58c 	.word	0x0801b58c
 80197fc:	0801b5ac 	.word	0x0801b5ac
 8019800:	0801b56c 	.word	0x0801b56c

08019804 <__register_exitproc>:
 8019804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019808:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80198c4 <__register_exitproc+0xc0>
 801980c:	4606      	mov	r6, r0
 801980e:	f8d8 0000 	ldr.w	r0, [r8]
 8019812:	461f      	mov	r7, r3
 8019814:	460d      	mov	r5, r1
 8019816:	4691      	mov	r9, r2
 8019818:	f7ff fa19 	bl	8018c4e <__retarget_lock_acquire_recursive>
 801981c:	4b25      	ldr	r3, [pc, #148]	; (80198b4 <__register_exitproc+0xb0>)
 801981e:	681c      	ldr	r4, [r3, #0]
 8019820:	b934      	cbnz	r4, 8019830 <__register_exitproc+0x2c>
 8019822:	4c25      	ldr	r4, [pc, #148]	; (80198b8 <__register_exitproc+0xb4>)
 8019824:	601c      	str	r4, [r3, #0]
 8019826:	4b25      	ldr	r3, [pc, #148]	; (80198bc <__register_exitproc+0xb8>)
 8019828:	b113      	cbz	r3, 8019830 <__register_exitproc+0x2c>
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019830:	6863      	ldr	r3, [r4, #4]
 8019832:	2b1f      	cmp	r3, #31
 8019834:	dd07      	ble.n	8019846 <__register_exitproc+0x42>
 8019836:	f8d8 0000 	ldr.w	r0, [r8]
 801983a:	f7ff fa0a 	bl	8018c52 <__retarget_lock_release_recursive>
 801983e:	f04f 30ff 	mov.w	r0, #4294967295
 8019842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019846:	b34e      	cbz	r6, 801989c <__register_exitproc+0x98>
 8019848:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801984c:	b988      	cbnz	r0, 8019872 <__register_exitproc+0x6e>
 801984e:	4b1c      	ldr	r3, [pc, #112]	; (80198c0 <__register_exitproc+0xbc>)
 8019850:	b923      	cbnz	r3, 801985c <__register_exitproc+0x58>
 8019852:	f8d8 0000 	ldr.w	r0, [r8]
 8019856:	f7ff f9fb 	bl	8018c50 <__retarget_lock_release>
 801985a:	e7f0      	b.n	801983e <__register_exitproc+0x3a>
 801985c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019860:	f7ff f9f8 	bl	8018c54 <malloc>
 8019864:	2800      	cmp	r0, #0
 8019866:	d0f4      	beq.n	8019852 <__register_exitproc+0x4e>
 8019868:	2300      	movs	r3, #0
 801986a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801986e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8019872:	6863      	ldr	r3, [r4, #4]
 8019874:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8019878:	2201      	movs	r2, #1
 801987a:	409a      	lsls	r2, r3
 801987c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019880:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8019884:	4313      	orrs	r3, r2
 8019886:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801988a:	2e02      	cmp	r6, #2
 801988c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8019890:	bf02      	ittt	eq
 8019892:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8019896:	4313      	orreq	r3, r2
 8019898:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801989c:	6863      	ldr	r3, [r4, #4]
 801989e:	f8d8 0000 	ldr.w	r0, [r8]
 80198a2:	1c5a      	adds	r2, r3, #1
 80198a4:	3302      	adds	r3, #2
 80198a6:	6062      	str	r2, [r4, #4]
 80198a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80198ac:	f7ff f9d1 	bl	8018c52 <__retarget_lock_release_recursive>
 80198b0:	2000      	movs	r0, #0
 80198b2:	e7c6      	b.n	8019842 <__register_exitproc+0x3e>
 80198b4:	2400b4a4 	.word	0x2400b4a4
 80198b8:	2400b418 	.word	0x2400b418
 80198bc:	0801b604 	.word	0x0801b604
 80198c0:	08018c55 	.word	0x08018c55
 80198c4:	2400010c 	.word	0x2400010c

080198c8 <_close_r>:
 80198c8:	b538      	push	{r3, r4, r5, lr}
 80198ca:	4d06      	ldr	r5, [pc, #24]	; (80198e4 <_close_r+0x1c>)
 80198cc:	2300      	movs	r3, #0
 80198ce:	4604      	mov	r4, r0
 80198d0:	4608      	mov	r0, r1
 80198d2:	602b      	str	r3, [r5, #0]
 80198d4:	f7e8 fda2 	bl	800241c <_close>
 80198d8:	1c43      	adds	r3, r0, #1
 80198da:	d102      	bne.n	80198e2 <_close_r+0x1a>
 80198dc:	682b      	ldr	r3, [r5, #0]
 80198de:	b103      	cbz	r3, 80198e2 <_close_r+0x1a>
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	bd38      	pop	{r3, r4, r5, pc}
 80198e4:	2400b414 	.word	0x2400b414

080198e8 <__sflush_r>:
 80198e8:	898a      	ldrh	r2, [r1, #12]
 80198ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ee:	4605      	mov	r5, r0
 80198f0:	0710      	lsls	r0, r2, #28
 80198f2:	460c      	mov	r4, r1
 80198f4:	d458      	bmi.n	80199a8 <__sflush_r+0xc0>
 80198f6:	684b      	ldr	r3, [r1, #4]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	dc05      	bgt.n	8019908 <__sflush_r+0x20>
 80198fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198fe:	2b00      	cmp	r3, #0
 8019900:	dc02      	bgt.n	8019908 <__sflush_r+0x20>
 8019902:	2000      	movs	r0, #0
 8019904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801990a:	2e00      	cmp	r6, #0
 801990c:	d0f9      	beq.n	8019902 <__sflush_r+0x1a>
 801990e:	2300      	movs	r3, #0
 8019910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019914:	682f      	ldr	r7, [r5, #0]
 8019916:	602b      	str	r3, [r5, #0]
 8019918:	d032      	beq.n	8019980 <__sflush_r+0x98>
 801991a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801991c:	89a3      	ldrh	r3, [r4, #12]
 801991e:	075a      	lsls	r2, r3, #29
 8019920:	d505      	bpl.n	801992e <__sflush_r+0x46>
 8019922:	6863      	ldr	r3, [r4, #4]
 8019924:	1ac0      	subs	r0, r0, r3
 8019926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019928:	b10b      	cbz	r3, 801992e <__sflush_r+0x46>
 801992a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801992c:	1ac0      	subs	r0, r0, r3
 801992e:	2300      	movs	r3, #0
 8019930:	4602      	mov	r2, r0
 8019932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019934:	6a21      	ldr	r1, [r4, #32]
 8019936:	4628      	mov	r0, r5
 8019938:	47b0      	blx	r6
 801993a:	1c43      	adds	r3, r0, #1
 801993c:	89a3      	ldrh	r3, [r4, #12]
 801993e:	d106      	bne.n	801994e <__sflush_r+0x66>
 8019940:	6829      	ldr	r1, [r5, #0]
 8019942:	291d      	cmp	r1, #29
 8019944:	d82c      	bhi.n	80199a0 <__sflush_r+0xb8>
 8019946:	4a2a      	ldr	r2, [pc, #168]	; (80199f0 <__sflush_r+0x108>)
 8019948:	40ca      	lsrs	r2, r1
 801994a:	07d6      	lsls	r6, r2, #31
 801994c:	d528      	bpl.n	80199a0 <__sflush_r+0xb8>
 801994e:	2200      	movs	r2, #0
 8019950:	6062      	str	r2, [r4, #4]
 8019952:	04d9      	lsls	r1, r3, #19
 8019954:	6922      	ldr	r2, [r4, #16]
 8019956:	6022      	str	r2, [r4, #0]
 8019958:	d504      	bpl.n	8019964 <__sflush_r+0x7c>
 801995a:	1c42      	adds	r2, r0, #1
 801995c:	d101      	bne.n	8019962 <__sflush_r+0x7a>
 801995e:	682b      	ldr	r3, [r5, #0]
 8019960:	b903      	cbnz	r3, 8019964 <__sflush_r+0x7c>
 8019962:	6560      	str	r0, [r4, #84]	; 0x54
 8019964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019966:	602f      	str	r7, [r5, #0]
 8019968:	2900      	cmp	r1, #0
 801996a:	d0ca      	beq.n	8019902 <__sflush_r+0x1a>
 801996c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019970:	4299      	cmp	r1, r3
 8019972:	d002      	beq.n	801997a <__sflush_r+0x92>
 8019974:	4628      	mov	r0, r5
 8019976:	f7ff f9a3 	bl	8018cc0 <_free_r>
 801997a:	2000      	movs	r0, #0
 801997c:	6360      	str	r0, [r4, #52]	; 0x34
 801997e:	e7c1      	b.n	8019904 <__sflush_r+0x1c>
 8019980:	6a21      	ldr	r1, [r4, #32]
 8019982:	2301      	movs	r3, #1
 8019984:	4628      	mov	r0, r5
 8019986:	47b0      	blx	r6
 8019988:	1c41      	adds	r1, r0, #1
 801998a:	d1c7      	bne.n	801991c <__sflush_r+0x34>
 801998c:	682b      	ldr	r3, [r5, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d0c4      	beq.n	801991c <__sflush_r+0x34>
 8019992:	2b1d      	cmp	r3, #29
 8019994:	d001      	beq.n	801999a <__sflush_r+0xb2>
 8019996:	2b16      	cmp	r3, #22
 8019998:	d101      	bne.n	801999e <__sflush_r+0xb6>
 801999a:	602f      	str	r7, [r5, #0]
 801999c:	e7b1      	b.n	8019902 <__sflush_r+0x1a>
 801999e:	89a3      	ldrh	r3, [r4, #12]
 80199a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199a4:	81a3      	strh	r3, [r4, #12]
 80199a6:	e7ad      	b.n	8019904 <__sflush_r+0x1c>
 80199a8:	690f      	ldr	r7, [r1, #16]
 80199aa:	2f00      	cmp	r7, #0
 80199ac:	d0a9      	beq.n	8019902 <__sflush_r+0x1a>
 80199ae:	0793      	lsls	r3, r2, #30
 80199b0:	680e      	ldr	r6, [r1, #0]
 80199b2:	bf08      	it	eq
 80199b4:	694b      	ldreq	r3, [r1, #20]
 80199b6:	600f      	str	r7, [r1, #0]
 80199b8:	bf18      	it	ne
 80199ba:	2300      	movne	r3, #0
 80199bc:	eba6 0807 	sub.w	r8, r6, r7
 80199c0:	608b      	str	r3, [r1, #8]
 80199c2:	f1b8 0f00 	cmp.w	r8, #0
 80199c6:	dd9c      	ble.n	8019902 <__sflush_r+0x1a>
 80199c8:	6a21      	ldr	r1, [r4, #32]
 80199ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80199cc:	4643      	mov	r3, r8
 80199ce:	463a      	mov	r2, r7
 80199d0:	4628      	mov	r0, r5
 80199d2:	47b0      	blx	r6
 80199d4:	2800      	cmp	r0, #0
 80199d6:	dc06      	bgt.n	80199e6 <__sflush_r+0xfe>
 80199d8:	89a3      	ldrh	r3, [r4, #12]
 80199da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199de:	81a3      	strh	r3, [r4, #12]
 80199e0:	f04f 30ff 	mov.w	r0, #4294967295
 80199e4:	e78e      	b.n	8019904 <__sflush_r+0x1c>
 80199e6:	4407      	add	r7, r0
 80199e8:	eba8 0800 	sub.w	r8, r8, r0
 80199ec:	e7e9      	b.n	80199c2 <__sflush_r+0xda>
 80199ee:	bf00      	nop
 80199f0:	20400001 	.word	0x20400001

080199f4 <_fflush_r>:
 80199f4:	b538      	push	{r3, r4, r5, lr}
 80199f6:	690b      	ldr	r3, [r1, #16]
 80199f8:	4605      	mov	r5, r0
 80199fa:	460c      	mov	r4, r1
 80199fc:	b913      	cbnz	r3, 8019a04 <_fflush_r+0x10>
 80199fe:	2500      	movs	r5, #0
 8019a00:	4628      	mov	r0, r5
 8019a02:	bd38      	pop	{r3, r4, r5, pc}
 8019a04:	b118      	cbz	r0, 8019a0e <_fflush_r+0x1a>
 8019a06:	6983      	ldr	r3, [r0, #24]
 8019a08:	b90b      	cbnz	r3, 8019a0e <_fflush_r+0x1a>
 8019a0a:	f7ff f84b 	bl	8018aa4 <__sinit>
 8019a0e:	4b14      	ldr	r3, [pc, #80]	; (8019a60 <_fflush_r+0x6c>)
 8019a10:	429c      	cmp	r4, r3
 8019a12:	d11b      	bne.n	8019a4c <_fflush_r+0x58>
 8019a14:	686c      	ldr	r4, [r5, #4]
 8019a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d0ef      	beq.n	80199fe <_fflush_r+0xa>
 8019a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a20:	07d0      	lsls	r0, r2, #31
 8019a22:	d404      	bmi.n	8019a2e <_fflush_r+0x3a>
 8019a24:	0599      	lsls	r1, r3, #22
 8019a26:	d402      	bmi.n	8019a2e <_fflush_r+0x3a>
 8019a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a2a:	f7ff f910 	bl	8018c4e <__retarget_lock_acquire_recursive>
 8019a2e:	4628      	mov	r0, r5
 8019a30:	4621      	mov	r1, r4
 8019a32:	f7ff ff59 	bl	80198e8 <__sflush_r>
 8019a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a38:	07da      	lsls	r2, r3, #31
 8019a3a:	4605      	mov	r5, r0
 8019a3c:	d4e0      	bmi.n	8019a00 <_fflush_r+0xc>
 8019a3e:	89a3      	ldrh	r3, [r4, #12]
 8019a40:	059b      	lsls	r3, r3, #22
 8019a42:	d4dd      	bmi.n	8019a00 <_fflush_r+0xc>
 8019a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a46:	f7ff f904 	bl	8018c52 <__retarget_lock_release_recursive>
 8019a4a:	e7d9      	b.n	8019a00 <_fflush_r+0xc>
 8019a4c:	4b05      	ldr	r3, [pc, #20]	; (8019a64 <_fflush_r+0x70>)
 8019a4e:	429c      	cmp	r4, r3
 8019a50:	d101      	bne.n	8019a56 <_fflush_r+0x62>
 8019a52:	68ac      	ldr	r4, [r5, #8]
 8019a54:	e7df      	b.n	8019a16 <_fflush_r+0x22>
 8019a56:	4b04      	ldr	r3, [pc, #16]	; (8019a68 <_fflush_r+0x74>)
 8019a58:	429c      	cmp	r4, r3
 8019a5a:	bf08      	it	eq
 8019a5c:	68ec      	ldreq	r4, [r5, #12]
 8019a5e:	e7da      	b.n	8019a16 <_fflush_r+0x22>
 8019a60:	0801b58c 	.word	0x0801b58c
 8019a64:	0801b5ac 	.word	0x0801b5ac
 8019a68:	0801b56c 	.word	0x0801b56c

08019a6c <_lseek_r>:
 8019a6c:	b538      	push	{r3, r4, r5, lr}
 8019a6e:	4d07      	ldr	r5, [pc, #28]	; (8019a8c <_lseek_r+0x20>)
 8019a70:	4604      	mov	r4, r0
 8019a72:	4608      	mov	r0, r1
 8019a74:	4611      	mov	r1, r2
 8019a76:	2200      	movs	r2, #0
 8019a78:	602a      	str	r2, [r5, #0]
 8019a7a:	461a      	mov	r2, r3
 8019a7c:	f7e8 fcd8 	bl	8002430 <_lseek>
 8019a80:	1c43      	adds	r3, r0, #1
 8019a82:	d102      	bne.n	8019a8a <_lseek_r+0x1e>
 8019a84:	682b      	ldr	r3, [r5, #0]
 8019a86:	b103      	cbz	r3, 8019a8a <_lseek_r+0x1e>
 8019a88:	6023      	str	r3, [r4, #0]
 8019a8a:	bd38      	pop	{r3, r4, r5, pc}
 8019a8c:	2400b414 	.word	0x2400b414

08019a90 <__swhatbuf_r>:
 8019a90:	b570      	push	{r4, r5, r6, lr}
 8019a92:	460e      	mov	r6, r1
 8019a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a98:	2900      	cmp	r1, #0
 8019a9a:	b096      	sub	sp, #88	; 0x58
 8019a9c:	4614      	mov	r4, r2
 8019a9e:	461d      	mov	r5, r3
 8019aa0:	da08      	bge.n	8019ab4 <__swhatbuf_r+0x24>
 8019aa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	602a      	str	r2, [r5, #0]
 8019aaa:	061a      	lsls	r2, r3, #24
 8019aac:	d410      	bmi.n	8019ad0 <__swhatbuf_r+0x40>
 8019aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ab2:	e00e      	b.n	8019ad2 <__swhatbuf_r+0x42>
 8019ab4:	466a      	mov	r2, sp
 8019ab6:	f000 f86f 	bl	8019b98 <_fstat_r>
 8019aba:	2800      	cmp	r0, #0
 8019abc:	dbf1      	blt.n	8019aa2 <__swhatbuf_r+0x12>
 8019abe:	9a01      	ldr	r2, [sp, #4]
 8019ac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019ac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019ac8:	425a      	negs	r2, r3
 8019aca:	415a      	adcs	r2, r3
 8019acc:	602a      	str	r2, [r5, #0]
 8019ace:	e7ee      	b.n	8019aae <__swhatbuf_r+0x1e>
 8019ad0:	2340      	movs	r3, #64	; 0x40
 8019ad2:	2000      	movs	r0, #0
 8019ad4:	6023      	str	r3, [r4, #0]
 8019ad6:	b016      	add	sp, #88	; 0x58
 8019ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08019adc <__smakebuf_r>:
 8019adc:	898b      	ldrh	r3, [r1, #12]
 8019ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ae0:	079d      	lsls	r5, r3, #30
 8019ae2:	4606      	mov	r6, r0
 8019ae4:	460c      	mov	r4, r1
 8019ae6:	d507      	bpl.n	8019af8 <__smakebuf_r+0x1c>
 8019ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019aec:	6023      	str	r3, [r4, #0]
 8019aee:	6123      	str	r3, [r4, #16]
 8019af0:	2301      	movs	r3, #1
 8019af2:	6163      	str	r3, [r4, #20]
 8019af4:	b002      	add	sp, #8
 8019af6:	bd70      	pop	{r4, r5, r6, pc}
 8019af8:	ab01      	add	r3, sp, #4
 8019afa:	466a      	mov	r2, sp
 8019afc:	f7ff ffc8 	bl	8019a90 <__swhatbuf_r>
 8019b00:	9900      	ldr	r1, [sp, #0]
 8019b02:	4605      	mov	r5, r0
 8019b04:	4630      	mov	r0, r6
 8019b06:	f7ff f947 	bl	8018d98 <_malloc_r>
 8019b0a:	b948      	cbnz	r0, 8019b20 <__smakebuf_r+0x44>
 8019b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b10:	059a      	lsls	r2, r3, #22
 8019b12:	d4ef      	bmi.n	8019af4 <__smakebuf_r+0x18>
 8019b14:	f023 0303 	bic.w	r3, r3, #3
 8019b18:	f043 0302 	orr.w	r3, r3, #2
 8019b1c:	81a3      	strh	r3, [r4, #12]
 8019b1e:	e7e3      	b.n	8019ae8 <__smakebuf_r+0xc>
 8019b20:	4b0d      	ldr	r3, [pc, #52]	; (8019b58 <__smakebuf_r+0x7c>)
 8019b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8019b24:	89a3      	ldrh	r3, [r4, #12]
 8019b26:	6020      	str	r0, [r4, #0]
 8019b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b2c:	81a3      	strh	r3, [r4, #12]
 8019b2e:	9b00      	ldr	r3, [sp, #0]
 8019b30:	6163      	str	r3, [r4, #20]
 8019b32:	9b01      	ldr	r3, [sp, #4]
 8019b34:	6120      	str	r0, [r4, #16]
 8019b36:	b15b      	cbz	r3, 8019b50 <__smakebuf_r+0x74>
 8019b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b3c:	4630      	mov	r0, r6
 8019b3e:	f000 f83d 	bl	8019bbc <_isatty_r>
 8019b42:	b128      	cbz	r0, 8019b50 <__smakebuf_r+0x74>
 8019b44:	89a3      	ldrh	r3, [r4, #12]
 8019b46:	f023 0303 	bic.w	r3, r3, #3
 8019b4a:	f043 0301 	orr.w	r3, r3, #1
 8019b4e:	81a3      	strh	r3, [r4, #12]
 8019b50:	89a0      	ldrh	r0, [r4, #12]
 8019b52:	4305      	orrs	r5, r0
 8019b54:	81a5      	strh	r5, [r4, #12]
 8019b56:	e7cd      	b.n	8019af4 <__smakebuf_r+0x18>
 8019b58:	08018a3d 	.word	0x08018a3d

08019b5c <__malloc_lock>:
 8019b5c:	4801      	ldr	r0, [pc, #4]	; (8019b64 <__malloc_lock+0x8>)
 8019b5e:	f7ff b876 	b.w	8018c4e <__retarget_lock_acquire_recursive>
 8019b62:	bf00      	nop
 8019b64:	2400b301 	.word	0x2400b301

08019b68 <__malloc_unlock>:
 8019b68:	4801      	ldr	r0, [pc, #4]	; (8019b70 <__malloc_unlock+0x8>)
 8019b6a:	f7ff b872 	b.w	8018c52 <__retarget_lock_release_recursive>
 8019b6e:	bf00      	nop
 8019b70:	2400b301 	.word	0x2400b301

08019b74 <_read_r>:
 8019b74:	b538      	push	{r3, r4, r5, lr}
 8019b76:	4d07      	ldr	r5, [pc, #28]	; (8019b94 <_read_r+0x20>)
 8019b78:	4604      	mov	r4, r0
 8019b7a:	4608      	mov	r0, r1
 8019b7c:	4611      	mov	r1, r2
 8019b7e:	2200      	movs	r2, #0
 8019b80:	602a      	str	r2, [r5, #0]
 8019b82:	461a      	mov	r2, r3
 8019b84:	f7e8 fc2c 	bl	80023e0 <_read>
 8019b88:	1c43      	adds	r3, r0, #1
 8019b8a:	d102      	bne.n	8019b92 <_read_r+0x1e>
 8019b8c:	682b      	ldr	r3, [r5, #0]
 8019b8e:	b103      	cbz	r3, 8019b92 <_read_r+0x1e>
 8019b90:	6023      	str	r3, [r4, #0]
 8019b92:	bd38      	pop	{r3, r4, r5, pc}
 8019b94:	2400b414 	.word	0x2400b414

08019b98 <_fstat_r>:
 8019b98:	b538      	push	{r3, r4, r5, lr}
 8019b9a:	4d07      	ldr	r5, [pc, #28]	; (8019bb8 <_fstat_r+0x20>)
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	4608      	mov	r0, r1
 8019ba2:	4611      	mov	r1, r2
 8019ba4:	602b      	str	r3, [r5, #0]
 8019ba6:	f7e8 fc3c 	bl	8002422 <_fstat>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	d102      	bne.n	8019bb4 <_fstat_r+0x1c>
 8019bae:	682b      	ldr	r3, [r5, #0]
 8019bb0:	b103      	cbz	r3, 8019bb4 <_fstat_r+0x1c>
 8019bb2:	6023      	str	r3, [r4, #0]
 8019bb4:	bd38      	pop	{r3, r4, r5, pc}
 8019bb6:	bf00      	nop
 8019bb8:	2400b414 	.word	0x2400b414

08019bbc <_isatty_r>:
 8019bbc:	b538      	push	{r3, r4, r5, lr}
 8019bbe:	4d06      	ldr	r5, [pc, #24]	; (8019bd8 <_isatty_r+0x1c>)
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	4608      	mov	r0, r1
 8019bc6:	602b      	str	r3, [r5, #0]
 8019bc8:	f7e8 fc30 	bl	800242c <_isatty>
 8019bcc:	1c43      	adds	r3, r0, #1
 8019bce:	d102      	bne.n	8019bd6 <_isatty_r+0x1a>
 8019bd0:	682b      	ldr	r3, [r5, #0]
 8019bd2:	b103      	cbz	r3, 8019bd6 <_isatty_r+0x1a>
 8019bd4:	6023      	str	r3, [r4, #0]
 8019bd6:	bd38      	pop	{r3, r4, r5, pc}
 8019bd8:	2400b414 	.word	0x2400b414

08019bdc <_init>:
 8019bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bde:	bf00      	nop
 8019be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019be2:	bc08      	pop	{r3}
 8019be4:	469e      	mov	lr, r3
 8019be6:	4770      	bx	lr

08019be8 <_fini>:
 8019be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bea:	bf00      	nop
 8019bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bee:	bc08      	pop	{r3}
 8019bf0:	469e      	mov	lr, r3
 8019bf2:	4770      	bx	lr
